TITLE: Configuring Debug Mode in Django
DESCRIPTION: The `DEBUG` setting is a boolean that controls debug mode. When `DEBUG` is `True`, detailed error pages are displayed, which can be useful for debugging.  It's crucial to set `DEBUG` to `False` in production. `DEBUG_PROPAGATE_EXCEPTIONS` skips Django's exception handling and allows exceptions to propagate, which can be useful for testing. Sensitive settings are excluded from the debug output as a security measure. `ALLOWED_HOSTS` is essential to configure if debug mode is off.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_14

LANGUAGE: text
CODE:
```
Default: ``False``

A boolean that turns on/off debug mode.

Never deploy a site into production with :setting:`DEBUG` turned on.

One of the main features of debug mode is the display of detailed error pages.
If your app raises an exception when :setting:`DEBUG` is ``True``, Django will
display a detailed traceback, including a lot of metadata about your
environment, such as all the currently defined Django settings (from
``settings.py``).

As a security measure, Django will *not* include settings that might be
sensitive, such as :setting:`SECRET_KEY`. Specifically, it will exclude any
setting whose name includes any of the following:

*   ``'API'``
*   ``'KEY'``
*   ``'PASS'``
*   ``'SECRET'``
*   ``'SIGNATURE'``
*   ``'TOKEN'``

Note that these are *partial* matches. ``'PASS'`` will also match PASSWORD,
just as ``'TOKEN'`` will also match TOKENIZED and so on.

Still, note that there are always going to be sections of your debug output
that are inappropriate for public consumption. File paths, configuration
options and the like all give attackers extra information about your server.

It is also important to remember that when running with :setting:`DEBUG`
turned on, Django will remember every SQL query it executes. This is useful
when you're debugging, but it'll rapidly consume memory on a production server.

Finally, if :setting:`DEBUG` is ``False``, you also need to properly set
the :setting:`ALLOWED_HOSTS` setting. Failing to do so will result in all
requests being returned as "Bad Request (400)".
```

LANGUAGE: text
CODE:
```
Default: ``False``

If set to ``True``, Django's exception handling of view functions
(:data:`~django.conf.urls.handler500`, or the debug view if :setting:`DEBUG`
is ``True``) and logging of 500 responses (:ref:`django-request-logger`) is
skipped and exceptions propagate upward.

This can be useful for some test setups. It shouldn't be used on a live site
unless you want your web server (instead of Django) to generate "Internal
Server Error" responses. In that case, make sure your server doesn't show the
stack trace or other sensitive information in the response.
```

----------------------------------------

TITLE: Installing Django with pip
DESCRIPTION: Command to install Django using pip package manager within a virtual environment
SOURCE: https://github.com/django/django/blob/main/docs/topics/install.txt#2025-04-23_snippet_0

LANGUAGE: console
CODE:
```
$ python -m pip install Django
```

----------------------------------------

TITLE: Defining a Basic Django Model (Python)
DESCRIPTION: This Python snippet demonstrates how to define a simple Django model named `Person` by subclassing `models.Model`. It includes two `CharField` attributes, `first_name` and `last_name`, which map to database columns. The `max_length` argument is required for `CharField`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_0

LANGUAGE: Python
CODE:
```
from django.db import models


class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
```

----------------------------------------

TITLE: Creating a New Object with create() in Django ORM (Python)
DESCRIPTION: Illustrates two equivalent methods to create and persist a new model instance in Django: using objects.create() and instantiating followed by save(). Shows usage of keyword arguments and force_insert. Assumes a Django model Person. If a manual primary key is used and already exists, an IntegrityError is raised.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_69

LANGUAGE: python
CODE:
```
p = Person.objects.create(first_name="Bruce", last_name="Springsteen")
p = Person(first_name="Bruce", last_name="Springsteen")
p.save(force_insert=True)
```

----------------------------------------

TITLE: Defining App URLconf Django Python
DESCRIPTION: Creates the URL configuration file (`polls/urls.py`) for the `polls` application. It defines a URL pattern that maps the empty string path relative to the included URLconf's base path to the `index` view function defined in `polls/views.py`, naming this pattern 'index'.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#_snippet_5

LANGUAGE: Python
CODE:
```
from django.urls import path

from . import views

urlpatterns = [
    path("", views.index, name="index"),
]
```

----------------------------------------

TITLE: Full ModelForm Example with Author and Book Models in Python
DESCRIPTION: Comprehensive example demonstrating model definitions with different field types, corresponding ModelForm subclasses, and equivalent manual form class implementations for comparison.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.db import models
from django.forms import ModelForm

TITLE_CHOICES = {
    "MR": "Mr.",
    "MRS": "Mrs.",
    "MS": "Ms.",
}


class Author(models.Model):
    name = models.CharField(max_length=100)
    title = models.CharField(max_length=3, choices=TITLE_CHOICES)
    birth_date = models.DateField(blank=True, null=True)

    def __str__(self):
        return self.name


class Book(models.Model):
    name = models.CharField(max_length=100)
    authors = models.ManyToManyField(Author)


class AuthorForm(ModelForm):
    class Meta:
        model = Author
        fields = ["name", "title", "birth_date"]


class BookForm(ModelForm):
    class Meta:
        model = Book
        fields = ["name", "authors"]
```

----------------------------------------

TITLE: Creating and Saving Django Model Objects
DESCRIPTION: This example demonstrates how to create and save a Blog object to the database. It instantiates a Blog object with name and tagline parameters, then calls the save() method to persist it in the database.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from blog.models import Blog
>>> b = Blog(name="Beatles Blog", tagline="All the latest Beatles news.")
>>> b.save()
```

----------------------------------------

TITLE: Defining Django Models for a Poll Application
DESCRIPTION: This code snippet defines two Django models: Question and Choice. The Question model has fields for question text and publication date, while the Choice model has fields for choice text, votes, and a foreign key to Question.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models


class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField("date published")


class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)
```

----------------------------------------

TITLE: Basic Form Template Example with Django
DESCRIPTION: Shows how to iterate through form fields and render each field's wrapper, errors, label and input
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_7

LANGUAGE: html+django
CODE:
```
{% for field in form %}
    <div class="fieldWrapper">
        {{ field.errors }}
        {{ field.label_tag }} {{ field }}
    </div>
{% endfor %}
```

----------------------------------------

TITLE: Simplified Field Group Rendering in Django Forms - HTML+Django template
DESCRIPTION: Illustrates the new Django 5.0 `as_field_group` method for rendering full form fields as a single template block in the HTML+Django template language. This approach significantly reduces template verbosity and leverages the `django/forms/field.html` template. Requires Django 5.0+. The inputs are `BoundField` objects (name, email, password). Outputs fully composed field HTML in a concise form.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_1

LANGUAGE: HTML+Django template
CODE:
```
<form>\n...\n<div>\n  {{ form.name.as_field_group }}\n  <div class=\"row\">\n    <div class=\"col\">{{ form.email.as_field_group }}</div>\n    <div class=\"col\">{{ form.password.as_field_group }}</div>\n  </div>\n</div>\n...\n</form>
```

----------------------------------------

TITLE: Using CSRF Protection in Jinja2 Templates
DESCRIPTION: Demonstrates how to include CSRF protection in Jinja2 templates using the csrf_input context variable.
SOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_4

LANGUAGE: html
CODE:
```
<form method="post">{{ csrf_input }}
```

----------------------------------------

TITLE: Including App URLconf in Project URLs Django Python
DESCRIPTION: Modifies the main project URL configuration file (`mysite/urls.py`) to include the URL patterns defined in the `polls` app's `urls.py` file. All patterns defined within `polls.urls` will be accessible under the `/polls/` path prefix when the project is run.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#_snippet_6

LANGUAGE: Python
CODE:
```
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path("polls/", include("polls.urls")),
    path("admin/", admin.site.urls),
]
```

----------------------------------------

TITLE: Configuring URL Patterns for Django Polls App
DESCRIPTION: This snippet defines the URL patterns for a Django polls application. It maps URLs to corresponding views, including class-based views for index, detail, and results pages, and a function-based view for voting.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial04.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.urls import path

from . import views

app_name = "polls"
urlpatterns = [
    path("", views.IndexView.as_view(), name="index"),
    path("<int:pk>/", views.DetailView.as_view(), name="detail"),
    path("<int:pk>/results/", views.ResultsView.as_view(), name="results"),
    path("<int:question_id>/vote/", views.vote, name="vote"),
]
```

----------------------------------------

TITLE: Filtering QuerySet (Default) Python
DESCRIPTION: Filters a QuerySet to return Blog model instances where the name starts with 'Beatles'. This is a standard QuerySet operation returning model objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_14

LANGUAGE: Python
CODE:
```
>>> Blog.objects.filter(name__startswith="Beatles")
```

----------------------------------------

TITLE: Filtering Blog Entries with Primary Key in Django ORM
DESCRIPTION: Demonstrates how to filter blog entries using the primary key (pk) field in Django ORM. It shows equivalent ways to filter across joins using id and pk lookups.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
>>> Blog.objects.filter(pk__gt=14)

>>> Entry.objects.filter(blog__id__exact=3)  # Explicit form
>>> Entry.objects.filter(blog__id=3)  # __exact is implied
>>> Entry.objects.filter(blog__pk=3)  # __pk implies __id__exact
```

----------------------------------------

TITLE: Retrieving a Single Object with get() in Django ORM (Python)
DESCRIPTION: Shows various usages of the get() QuerySet method for retrieving a single database object that matches provided conditions. Demonstrates lookups by primary key, using Q objects for complex criteria, and illustrates handling exceptions like DoesNotExist and MultipleObjectsReturned for error cases. Requires a Django model (Entry) and optional Q imports.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_67

LANGUAGE: python
CODE:
```
Entry.objects.get(id=1)
Entry.objects.get(Q(blog=blog) & Q(entry_number=1))
Entry.objects.filter(pk=1).get()
Entry.objects.get(id=-999)  # raises Entry.DoesNotExist
Entry.objects.get(name="A Duplicated Name")  # raises Entry.MultipleObjectsReturned
```

----------------------------------------

TITLE: Configuring Django URL Patterns
DESCRIPTION: Sets up URL routing for a polls application by mapping URL patterns to view functions using Django's path() function. Includes patterns for index, detail, results and vote views.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.urls import path

from . import views

urlpatterns = [
    # ex: /polls/
    path("", views.index, name="index"),
    # ex: /polls/5/
    path("<int:question_id>/", views.detail, name="detail"),
    # ex: /polls/5/results/
    path("<int:question_id>/results/", views.results, name="results"),
    # ex: /polls/5/vote/
    path("<int:question_id>/vote/", views.vote, name="vote"),
]
```

----------------------------------------

TITLE: Filtering QuerySets by Date Range - Django ORM (Python)
DESCRIPTION: Illustrates filtering Entry objects within an inclusive date range using the 'range' lookup in Django ORM. Requires an Entry model and the datetime module. Expected inputs are two date objects (start and end); output is a QuerySet containing records whose pub_date falls within the specified dates. Best used for date, number, or character fields; ensure consistent types to avoid unexpected results.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_100

LANGUAGE: python
CODE:
```
import datetime
start_date = datetime.date(2005, 1, 1)
end_date = datetime.date(2005, 3, 31)
Entry.objects.filter(pub_date__range=(start_date, end_date))
```

----------------------------------------

TITLE: Using get_object_or_404() in Django
DESCRIPTION: Example of using get_object_or_404() to safely retrieve a model instance or raise Http404.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.shortcuts import get_object_or_404


def my_view(request):
    obj = get_object_or_404(MyModel, pk=1)
```

----------------------------------------

TITLE: Rendering Object Description in Django Template - html+django
DESCRIPTION: This snippet shows how to render an object's description in a Django template using template variables. The code requires Django's template engine and expects an object named 'obj' with a 'description' attribute passed into the context. It outputs the description as plain text, and additional formatting or filters may be applied as needed. The expected input is a template context containing 'obj'; the output is the rendered value of 'obj.description' in the final HTML.

SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_4

LANGUAGE: html+django
CODE:
```
{{ obj.description }}
```

----------------------------------------

TITLE: Redirecting Unauthenticated Users to Login Page in Django
DESCRIPTION: This code shows how to limit access to a view by checking if a user is authenticated and redirecting unauthenticated users to a login page. It includes the current path as a 'next' parameter to redirect back after login.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.shortcuts import redirect


def my_view(request):
    if not request.user.is_authenticated:
        return redirect(f"{settings.LOGIN_URL}?next={request.path}")
    # ...
```

----------------------------------------

TITLE: Defining Many-to-Many Relationship in Django Model - Python
DESCRIPTION: Shows how to declare a symmetric many-to-many relationship between models using Django's ManyToManyField. Models Pizza and Topping are defined; Pizza includes a ManyToManyField to Topping. This sets up bidirectional relationships and enables access to related-manager methods on both sides. Dependencies include Django's ORM. Inputs are the model and field declarations, outputs are models ready for further relationship manipulation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
class Topping(models.Model):
    # ...
    pass

class Pizza(models.Model):
    toppings = models.ManyToManyField(Topping)
```

----------------------------------------

TITLE: Checking User Authentication Status in Django Views
DESCRIPTION: This code demonstrates how to check if a user is authenticated in Django views. It shows both the synchronous and asynchronous approaches using the is_authenticated attribute to distinguish between authenticated and anonymous users.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
if request.user.is_authenticated:
    # Do something for authenticated users.
    ...
else:
    # Do something for anonymous users.
    ...
```

----------------------------------------

TITLE: Django Installed Applications List
DESCRIPTION: Defines `INSTALLED_APPS`, the list of dotted Python paths of all applications enabled in this Django project. Defaults to an empty list, and developers are advised to use the application registry for introspection.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_49

LANGUAGE: plaintext
CODE:
```
INSTALLED_APPS
------------------

Default: `[]` (Empty list)

A list of strings designating all applications that are enabled in this
Django installation. Each string should be a dotted Python path to:

* an application configuration class (preferred), or
* a package containing an application.

:doc:`Learn more about application configurations </ref/applications>`.

.. admonition:: Use the application registry for introspection

    Your code should never access :setting:`INSTALLED_APPS` directly. Use
    :attr:`django.apps.apps` instead.

.. admonition:: Application names and labels must be unique in
                :setting:`INSTALLED_APPS`

    Application :attr:`names <django.apps.AppConfig.name>` — the dotted Python
    path to the application package — must be unique. There is no way to
    include the same application twice, short of duplicating its code under
    another name.

    Application :attr:`labels <django.apps.AppConfig.label>` — by default the
    final part of the name — must be unique too. For example, you can't
    include both `django.contrib.auth` and `myproject.auth`. However, you
    can relabel an application with a custom configuration that defines a
    different :attr:`~django.apps.AppConfig.label`.

    These rules apply regardless of whether :setting:`INSTALLED_APPS`
    references application configuration classes or application packages.

When several applications provide different versions of the same resource
(template, static file, management command, translation), the application
listed first in :setting:`INSTALLED_APPS` has precedence.
```

----------------------------------------

TITLE: Simplified ModelAdmin Registration
DESCRIPTION: Demonstrates how to register a model with the admin site without defining a custom ModelAdmin class when default interface is sufficient.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib import admin
from myapp.models import Author

admin.site.register(Author)
```

----------------------------------------

TITLE: Advanced Django ORM Queries and Related Objects
DESCRIPTION: This Python code showcases advanced Django ORM queries, including filtering, accessing related objects through foreign keys, and creating related objects. It demonstrates the power and flexibility of Django's database API.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
# Make sure our __str__() addition worked.
>>> Question.objects.all()
<QuerySet [<Question: What's up?>]>

# Django provides a rich database lookup API that's entirely driven by
# keyword arguments.
>>> Question.objects.filter(id=1)
<QuerySet [<Question: What's up?>]>
>>> Question.objects.filter(question_text__startswith="What")
<QuerySet [<Question: What's up?>]>

# Get the question that was published this year.
>>> from django.utils import timezone
>>> current_year = timezone.now().year
>>> Question.objects.get(pub_date__year=current_year)
<Question: What's up?>

# Request an ID that doesn't exist, this will raise an exception.
>>> Question.objects.get(id=2)
Traceback (most recent call last):
    ...
DoesNotExist: Question matching query does not exist.

# Lookup by a primary key is the most common case, so Django provides a
# shortcut for primary-key exact lookups.
# The following is identical to Question.objects.get(id=1).
>>> Question.objects.get(pk=1)
<Question: What's up?>

# Make sure our custom method worked.
>>> q = Question.objects.get(pk=1)
>>> q.was_published_recently()
True

# Give the Question a couple of Choices. The create call constructs a new
# Choice object, does the INSERT statement, adds the choice to the set
# of available choices and returns the new Choice object. Django creates
# a set (defined as "choice_set") to hold the "other side" of a ForeignKey
# relation (e.g. a question's choice) which can be accessed via the API.
>>> q = Question.objects.get(pk=1)

# Display any choices from the related object set -- none so far.
>>> q.choice_set.all()
<QuerySet []>

# Create three choices.
>>> q.choice_set.create(choice_text="Not much", votes=0)
<Choice: Not much>
>>> q.choice_set.create(choice_text="The sky", votes=0)
<Choice: The sky>
>>> c = q.choice_set.create(choice_text="Just hacking again", votes=0)

# Choice objects have API access to their related Question objects.
>>> c.question
<Question: What's up?>

# And vice versa: Question objects get access to Choice objects.
>>> q.choice_set.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
>>> q.choice_set.count()
3

# The API automatically follows relationships as far as you need.
# Use double underscores to separate relationships.
# This works as many levels deep as you want; there's no limit.
# Find all Choices for any question whose pub_date is in this year
# (reusing the 'current_year' variable we created above).
>>> Choice.objects.filter(question__pub_date__year=current_year)
```

----------------------------------------

TITLE: Saving a Model Instance in Django Shell (pycon)
DESCRIPTION: Saves the previously created `Article` instance (`a1`) to the database using the `save()` method. This assigns it a primary key, allowing relationships to be added.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_4

LANGUAGE: pycon
CODE:
```
>>> a1.save()
```

----------------------------------------

TITLE: Configuring URL Pattern for a Class-Based View in Django
DESCRIPTION: This snippet shows how to configure a URL pattern in Django's `urls.py` to point to a class-based view. It uses the `as_view()` class method on the view class (`MyView`). `as_view()` returns a callable view function that Django's URL resolver can use to handle requests matching the specified path.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
# urls.py
from django.urls import path
from myapp.views import MyView

urlpatterns = [
    path("about/", MyView.as_view()),
]
```

----------------------------------------

TITLE: Django View Function for Listing Items
DESCRIPTION: Provides a view function to retrieve all Item objects and render them via a template named 'item_list.html'. Requires Django's shortcuts and models modules; outputs an HTTP response with HTML content.
SOURCE: https://github.com/django/django/blob/main/tests/view_tests/media/%2F.txt#_snippet_1

LANGUAGE: Python
CODE:
```
def item_list(request):
    items = Item.objects.all()
    return render(request, 'item_list.html', {'items': items})
```

----------------------------------------

TITLE: Creating a Basic Django ListView for Publisher Model in Python
DESCRIPTION: Implements `PublisherListView` by subclassing Django's generic `ListView`. It specifies the `Publisher` model using the `model` attribute, causing the view to automatically retrieve all `Publisher` objects and pass them to a template for rendering. This is a minimal example of using `ListView`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
# views.py
from django.views.generic import ListView
from books.models import Publisher


class PublisherListView(ListView):
    model = Publisher
```

----------------------------------------

TITLE: Defining a ForeignKey Relationship in Django Model (Python)
DESCRIPTION: This example illustrates how to define a many-to-one relationship using ForeignKey in Django models. It shows the required arguments: the related model class and the `on_delete` behavior.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_29

LANGUAGE: Python
CODE:
```
from django.db import models


class Manufacturer(models.Model):
    name = models.TextField()


class Car(models.Model):
    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)
```

----------------------------------------

TITLE: Creating Django HTML Template
DESCRIPTION: This snippet demonstrates how to create a Django HTML template that extends a base template and displays a list of articles for a specific year.
SOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_5

LANGUAGE: html
CODE:
```
{% extends "base.html" %}

{% block title %}Articles for {{ year }}{% endblock %}

{% block content %}
<h1>Articles for {{ year }}</h1>

{% for article in article_list %}
    <p>{{ article.headline }}</p>
    <p>By {{ article.reporter.full_name }}</p>
    <p>Published {{ article.pub_date|date:"F j, Y" }}</p>
{% endfor %}
{% endblock %}
```

----------------------------------------

TITLE: Defining Models with ForeignKey Relationship (Python)
DESCRIPTION: This Python snippet demonstrates defining two related Django models: `Musician` and `Album`. It shows various field types like `CharField`, `DateField`, and `IntegerField`. Crucially, the `Album` model includes a `ForeignKey` field named `artist`, establishing a many-to-one relationship with the `Musician` model. The `on_delete=models.CASCADE` argument specifies the behavior when the related `Musician` is deleted.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_3

LANGUAGE: Python
CODE:
```
from django.db import models


class Musician(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    instrument = models.CharField(max_length=100)


class Album(models.Model):
    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    release_date = models.DateField()
    num_stars = models.IntegerField()
```

----------------------------------------

TITLE: Illustrating Basic Django Template Structure and Syntax in HTML+Django
DESCRIPTION: This snippet demonstrates a minimal Django template. It uses `{% extends %}` for template inheritance, `{% block %}` to define replaceable sections (`title` and `content`), displays variables like `{{ section.title }}`, iterates over `story_list` using `{% for %}`, accesses object attributes (`story.get_absolute_url`, `story.headline`, `story.tease`), and applies filters (`|upper`, `|truncatewords:":100"`). This structure requires context variables like `section` and `story_list` to be passed during rendering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_0

LANGUAGE: html+django
CODE:
```
{% extends "base_generic.html" %}

{% block title %}{{ section.title }}{% endblock %}

{% block content %}
<h1>{{ section.title }}</h1>

{% for story in story_list %}
<h2>
  <a href="{{ story.get_absolute_url }}">
    {{ story.headline|upper }}
  </a>
</h2>
<p>{{ story.tease|truncatewords:"100" }}</p>
{% endfor %}
{% endblock %}
```

----------------------------------------

TITLE: Creating Django TestCase Example - Python
DESCRIPTION: Example demonstrating how to create a test case class inheriting from django.test.TestCase, showing model testing with setup and test methods for an Animal model.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/overview.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.test import TestCase
from myapp.models import Animal


class AnimalTestCase(TestCase):
    def setUp(self):
        Animal.objects.create(name="lion", sound="roar")
        Animal.objects.create(name="cat", sound="meow")

    def test_animals_can_speak(self):
        """Animals that can speak are correctly identified"""
        lion = Animal.objects.get(name="lion")
        cat = Animal.objects.get(name="cat")
        self.assertEqual(lion.speak(), 'The lion says "roar"')
        self.assertEqual(cat.speak(), 'The cat says "meow"')
```

----------------------------------------

TITLE: Implementing Django View with Database Query
DESCRIPTION: Creates an index view that queries the database for the latest 5 questions and returns them as a comma-separated string in an HTTP response.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.http import HttpResponse

from .models import Question


def index(request):
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    output = ", ".join([q.question_text for q in latest_question_list])
    return HttpResponse(output)
```

----------------------------------------

TITLE: Adding Single Record to ManyToManyField in Django
DESCRIPTION: This snippet shows how to add a single record to a ManyToManyField relationship. It creates a new Author object and adds it to an Entry's authors field using the add() method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> from blog.models import Author
>>> joe = Author.objects.create(name="Joe")
>>> entry.authors.add(joe)
```

----------------------------------------

TITLE: Combining QuerySets with OR Operator in Django ORM (Python)
DESCRIPTION: Illustrates combining two Django QuerySets using the | (OR) operator, as well as constructing the same logic with Q objects. Requires importing Q from django.db.models. Inputs are filter conditions; outputs are QuerySets matching either condition.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_62

LANGUAGE: python
CODE:
```
Model.objects.filter(x=1) | Model.objects.filter(y=2)
from django.db.models import Q

Model.objects.filter(Q(x=1) | Q(y=2))
```

----------------------------------------

TITLE: Reversing Django Admin URLs with Keyword Arguments (Pycon)
DESCRIPTION: Pycon example illustrating the use of `django.urls.reverse` with keyword arguments (`kwargs`). It reverses the namespaced URL "admin:app_list", passing `app_label` as 'auth', resulting in the path '/admin/auth/'. Demonstrates passing `kwargs` instead of `args`; both cannot be used simultaneously.
SOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_2

LANGUAGE: pycon
CODE:
```
>>> reverse("admin:app_list", kwargs={"app_label": "auth"})
'/admin/auth/'
```

----------------------------------------

TITLE: Testing Views with RequestFactory in Django
DESCRIPTION: This snippet demonstrates how to use RequestFactory to test a view function in Django. It shows how to create GET requests, simulate logged-in and anonymous users, and test both function-based and class-based views.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib.auth.models import AnonymousUser, User
from django.test import RequestFactory, TestCase

from .views import MyView, my_view


class SimpleTest(TestCase):
    def setUp(self):
        # Every test needs access to the request factory.
        self.factory = RequestFactory()
        self.user = User.objects.create_user(
            username="jacob", email="jacob@…", password="top_secret"
        )

    def test_details(self):
        # Create an instance of a GET request.
        request = self.factory.get("/customer/details")

        # Recall that middleware are not supported. You can simulate a
        # logged-in user by setting request.user manually.
        request.user = self.user

        # Or you can simulate an anonymous user by setting request.user to
        # an AnonymousUser instance.
        request.user = AnonymousUser()

        # Test my_view() as if it were deployed at /customer/details
        response = my_view(request)
        # Use this syntax for class-based views.
        response = MyView.as_view()(request)
        self.assertEqual(response.status_code, 200)
```

----------------------------------------

TITLE: Bulk Updating Django Objects with QuerySet update
DESCRIPTION: Shows how to update multiple Django model instances at once using the QuerySet update() method with a filter condition.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_55

LANGUAGE: python
CODE:
```
# Update all the headlines with pub_date in 2007.
Entry.objects.filter(pub_date__year=2007).update(headline="Everything is the same")
```

----------------------------------------

TITLE: Defining Models with Many-to-Many Relationship in Django
DESCRIPTION: Creates Person and Group models with a many-to-many relationship between them. Group has a members field that references multiple Person objects through a ManyToManyField.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_69

LANGUAGE: python
CODE:
```
from django.db import models


class Person(models.Model):
    name = models.CharField(max_length=128)


class Group(models.Model):
    name = models.CharField(max_length=128)
    members = models.ManyToManyField(Person, related_name="groups")
```

----------------------------------------

TITLE: Running Django Tests - Shell Commands
DESCRIPTION: Various shell commands showing different ways to run Django tests using manage.py, including running all tests, specific modules, packages, test cases, or individual test methods.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/overview.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
$ ./manage.py test
```

LANGUAGE: shell
CODE:
```
# Run all the tests in the animals.tests module
$ ./manage.py test animals.tests

# Run all the tests found within the 'animals' package
$ ./manage.py test animals

# Run just one test case class
$ ./manage.py test animals.tests.AnimalTestCase

# Run just one test method
$ ./manage.py test animals.tests.AnimalTestCase.test_animals_can_speak
```

LANGUAGE: shell
CODE:
```
$ ./manage.py test animals/
```

LANGUAGE: shell
CODE:
```
$ ./manage.py test --pattern="tests_*.py"
```

----------------------------------------

TITLE: Handling File Uploads in Django View
DESCRIPTION: A view function that processes file uploads using a form. It validates the form data and passes the uploaded file to a handler function when valid. The function demonstrates proper binding of file data to a form.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.http import HttpResponseRedirect
from django.shortcuts import render
from .forms import UploadFileForm

# Imaginary function to handle an uploaded file.
from somewhere import handle_uploaded_file


def upload_file(request):
    if request.method == "POST":
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            handle_uploaded_file(request.FILES["file"])
            return HttpResponseRedirect("/success/url/")
    else:
        form = UploadFileForm()
    return render(request, "upload.html", {"form": form})
```

----------------------------------------

TITLE: Registering Custom User Model with Django Admin
DESCRIPTION: This snippet shows how to register a custom user model with Django's admin interface. It includes custom forms for user creation and change, as well as a custom UserAdmin class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
from django import forms
from django.contrib import admin
from django.contrib.auth.models import Group
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.contrib.auth.forms import ReadOnlyPasswordHashField
from django.core.exceptions import ValidationError

from customauth.models import MyUser


class UserCreationForm(forms.ModelForm):
    """A form for creating new users. Includes all the required
    fields, plus a repeated password."""

    password1 = forms.CharField(label="Password", widget=forms.PasswordInput)
    password2 = forms.CharField(
        label="Password confirmation", widget=forms.PasswordInput
    )

    class Meta:
        model = MyUser
        fields = ["email", "date_of_birth"]

    def clean_password2(self):
        # Check that the two password entries match
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise ValidationError("Passwords don't match")
        return password2

    def save(self, commit=True):
        # Save the provided password in hashed format
        user = super().save(commit=False)
        user.set_password(self.cleaned_data["password1"])
        if commit:
            user.save()
        return user


class UserChangeForm(forms.ModelForm):
    """A form for updating users. Includes all the fields on
    the user, but replaces the password field with admin's
    disabled password hash display field.
    """

    password = ReadOnlyPasswordHashField()

    class Meta:
        model = MyUser
        fields = ["email", "password", "date_of_birth", "is_active", "is_admin"]


class UserAdmin(BaseUserAdmin):
    # The forms to add and change user instances
    form = UserChangeForm
    add_form = UserCreationForm

    # The fields to be used in displaying the User model.
    # These override the definitions on the base UserAdmin
    # that reference specific fields on auth.User.
    list_display = ["email", "date_of_birth", "is_admin"]
    list_filter = ["is_admin"]
    fieldsets = [
        (None, {"fields": ["email", "password"]}),
        ("Personal info", {"fields": ["date_of_birth"]}),
        ("Permissions", {"fields": ["is_admin"]}),
    ]
    # add_fieldsets is not a standard ModelAdmin attribute. UserAdmin
    # overrides get_fieldsets to use this attribute when creating a user.
    add_fieldsets = [
        (
            None,
            {
                "classes": ["wide"],
                "fields": ["email", "date_of_birth", "password1", "password2"],
            },
        ),
    ]
    search_fields = ["email"]
    ordering = ["email"]
    filter_horizontal = []


# Now register the new UserAdmin...
admin.site.register(MyUser, UserAdmin)
# ... and, since we're not using Django's built-in permissions,
# unregister the Group model from admin.
admin.site.unregister(Group)
```

----------------------------------------

TITLE: Defining Model Choices with Dictionary and Constants (Python)
DESCRIPTION: Demonstrates defining model field choices using class constants and a dictionary mapping values to human-readable labels. The constants provide a clear way to reference choice values, and the dictionary is assigned to the `choices` argument of the model field. Includes a method demonstrating how to check the field's value against the defined constants.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_3

LANGUAGE: Python
CODE:
```
from django.db import models


class Student(models.Model):
    FRESHMAN = "FR"
    SOPHOMORE = "SO"
    JUNIOR = "JR"
    SENIOR = "SR"
    GRADUATE = "GR"
    YEAR_IN_SCHOOL_CHOICES = {
        FRESHMAN: "Freshman",
        SOPHOMORE: "Sophomore",
        JUNIOR: "Junior",
        SENIOR: "Senior",
        GRADUATE: "Graduate",
    }
    year_in_school = models.CharField(
        max_length=2,
        choices=YEAR_IN_SCHOOL_CHOICES,
        default=FRESHMAN,
    )

    def is_upperclass(self):
        return self.year_in_school in {self.JUNIOR, self.SENIOR}
```

----------------------------------------

TITLE: Retrieving All Objects with QuerySet in Django
DESCRIPTION: This example shows how to retrieve all objects from a model using the all() method on the model's manager. It returns a QuerySet containing all Entry objects in the database.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> all_entries = Entry.objects.all()
```

----------------------------------------

TITLE: Insecure SQL Query Example in Django
DESCRIPTION: Example showing unsafe handling of user input in raw SQL queries
SOURCE: https://github.com/django/django/blob/main/docs/internals/security.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.shortcuts import HttpResponse
from .models import MyModel


def my_proof_of_concept(request):
    query = request.GET.get("query", "")
    q = MyModel.objects.extra(select={"id": query})
    return HttpResponse(q.values())
```

----------------------------------------

TITLE: Django Model Definition
DESCRIPTION: Defines a Django model class representing a database table with fields such as name, description, and creation date for ORM operations. Requires Django's models module and is used to create database schemas.
SOURCE: https://github.com/django/django/blob/main/tests/view_tests/media/%2F.txt#_snippet_0

LANGUAGE: Python
CODE:
```
class Item(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
```

----------------------------------------

TITLE: Authenticating and Logging in Users in Django
DESCRIPTION: This example demonstrates a complete login process in a Django view, using both authenticate() to verify credentials and login() to attach the authenticated user to the current session.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
from django.contrib.auth import authenticate, login


def my_view(request):
    username = request.POST["username"]
    password = request.POST["password"]
    user = authenticate(request, username=username, password=password)
    if user is not None:
        login(request, user)
        # Redirect to a success page.
        ...
    else:
        # Return an 'invalid login' error message.
        ...
```

----------------------------------------

TITLE: Adding __str__ Methods to Django Models
DESCRIPTION: This Python code shows how to add __str__ methods to Django models to provide a more meaningful string representation of model instances. It's useful for debugging and in the Django admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.db import models


class Question(models.Model):
    # ...
    def __str__(self):
        return self.question_text


class Choice(models.Model):
    # ...
    def __str__(self):
        return self.choice_text
```

----------------------------------------

TITLE: Configuring URL Pattern for a Custom View in Django
DESCRIPTION: Shows how to set up a URL pattern for a custom View in Django's urls.py file.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/base.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.urls import path

from myapp.views import MyView

urlpatterns = [
    path("mine/", MyView.as_view(), name="my-view"),
]
```

----------------------------------------

TITLE: Running the Django Development Server (Console)
DESCRIPTION: Shows the command to start Django's built-in lightweight web server. This server is primarily intended for development and testing purposes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_22

LANGUAGE: console
CODE:
```
$ python manage.py runserver
```

----------------------------------------

TITLE: Registering Default AdminSite in URLconf (Python)
DESCRIPTION: This snippet demonstrates how to register the default Django AdminSite instance at the URL '/admin/' in the project's URLconf.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_78

LANGUAGE: Python
CODE:
```
# urls.py
from django.contrib import admin
from django.urls import path

urlpatterns = [
    path("admin/", admin.site.urls),
]
```

----------------------------------------

TITLE: Creating Superusers with manage.py in Django (Shell)
DESCRIPTION: Shows how to create a superuser via the Django management command `createsuperuser` from the command line. It demonstrates providing username and email as command-line arguments using the `--username` and `--email` options, which will then prompt only for the password.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_1

LANGUAGE: console
CODE:
```
$ python manage.py createsuperuser --username=joe --email=joe@example.com
```

----------------------------------------

TITLE: String Containment Filters 'contains' and 'icontains'
DESCRIPTION: Explains the 'contains' lookup for case-sensitive substring matching and 'icontains' for case-insensitive matching, including their SQL counterparts. Notes differences in behavior with SQLite regarding case sensitivity.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_96

LANGUAGE: ReStructuredText
CODE:
```
.. fieldlookup:: contains

``contains``
~~~~~~~~~~~~

Case-sensitive containment test.

Example::

    Entry.objects.get(headline__contains="Lennon")

SQL equivalent:

.. code-block:: sql

    SELECT ... WHERE headline LIKE '%Lennon%';

Note this will match the headline ``'Lennon honored today'`` but not ``'lennon
honored today'``.

.. admonition:: SQLite users

    SQLite doesn't support case-sensitive ``LIKE`` statements; ``contains``
    acts like ``icontains`` for SQLite. See the :ref:`database note
    <sqlite-string-matching>` for more information.

.. fieldlookup:: icontains

``icontains``
~~~~~~~~~~~~~

Case-insensitive containment test.

Example::

    Entry.objects.get(headline__icontains="Lennon")

SQL equivalent:

.. code-block:: sql

    SELECT ... WHERE headline ILIKE '%Lennon%';

.. admonition:: SQLite users

    When using the SQLite backend and non-ASCII strings, bear in mind the
    :ref:`database note <sqlite-string-matching>` about string comparisons.
```

----------------------------------------

TITLE: Using Static Template Tag in Django HTML
DESCRIPTION: Demonstrates how to use the static template tag to build URLs for static files in Django templates.
SOURCE: https://github.com/django/django/blob/main/docs/howto/static-files/index.txt#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
{% load static %}
<img src="{% static 'my_app/example.jpg' %}" alt="My image">
```

----------------------------------------

TITLE: Running Django Server on Specific Port - Shell
DESCRIPTION: Starts the Django development server, binding to the default IP address (127.0.0.1) but using the specified port (7000). This is useful when the default port 8000 is already in use or a different port is desired.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_23

LANGUAGE: shell
CODE:
```
django-admin runserver 7000
```

----------------------------------------

TITLE: Looping with for Tag in Django Templates
DESCRIPTION: The for tag allows iteration over lists, dictionaries, and nested structures. It provides loop variables and supports an empty clause for handling empty collections.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_18

LANGUAGE: html+django
CODE:
```
<ul>
{% for athlete in athlete_list %}
    <li>{{ athlete.name }}</li>
{% endfor %}
</ul>
```

LANGUAGE: html+django
CODE:
```
{% for x, y in points %}
    There is a point at {{ x }},{{ y }}
{% endfor %}
```

LANGUAGE: html+django
CODE:
```
{% for key, value in data.items %}
    {{ key }}: {{ value }}
{% endfor %}
```

LANGUAGE: html+django
CODE:
```
<ul>
{% for athlete in athlete_list %}
    <li>{{ athlete.name }}</li>
{% empty %}
    <li>Sorry, no athletes in this list.</li>
{% endfor %}
</ul>
```

----------------------------------------

TITLE: Deploying Class-Based View in URL Pattern using as_view() Method in Python
DESCRIPTION: This snippet demonstrates how to deploy a class-based view into a URL pattern using the as_view() classmethod. It shows how to pass arguments to the view, which will be assigned to the instance servicing the request.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/index.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
urlpatterns = [
    path("view/", MyView.as_view(size=42)),
]
```

----------------------------------------

TITLE: Creating HttpResponse Objects in Python
DESCRIPTION: Shows different ways to create HttpResponse objects with various content types.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
>>> from django.http import HttpResponse
>>> response = HttpResponse("Here's the text of the web page.")
>>> response = HttpResponse("Text only, please.", content_type="text/plain")
>>> response = HttpResponse(b"Bytestrings are also accepted.")
>>> response = HttpResponse(memoryview(b"Memoryview as well."))
```

----------------------------------------

TITLE: Configuring SQLite Database in Django
DESCRIPTION: Example configuration for the `DATABASES` setting in Django to use an SQLite database. It sets the `ENGINE` to the SQLite backend and the `NAME` to the desired database file path. This is the simplest database setup.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_5

LANGUAGE: Python
CODE:
```
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": "mydatabase",
    }
}
```

----------------------------------------

TITLE: Defining Many-to-One Relationship with Django ForeignKey (Python)
DESCRIPTION: Shows how to define a many-to-one relationship between models using `models.ForeignKey`. The first positional argument is the class of the model to which the current model is related. The example demonstrates a Car model related to a Manufacturer.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_14

LANGUAGE: Python
CODE:
```
from django.db import models


class Manufacturer(models.Model):
    # ...
    pass


class Car(models.Model):
    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)
    # ...
```

----------------------------------------

TITLE: Configuring Django Admin URLs (Python)
DESCRIPTION: Standard configuration for a Django project's `urls.py` file to include the URLs for the built-in Django admin application. This makes the admin interface accessible at the specified path (e.g., `/admin/`). Requires `django.contrib.admin` and `django.urls.path`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path("admin/", admin.site.urls),
]
```

----------------------------------------

TITLE: Combining Select Related and Prefetch Related for Optimization
DESCRIPTION: Demonstrates combining select_related and prefetch_related to reduce query count. The best_pizza relationship is fetched with select_related while its toppings are prefetched, reducing the total to 2 queries.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_44

LANGUAGE: python
CODE:
```
>>> Restaurant.objects.select_related("best_pizza").prefetch_related("best_pizza__toppings")
```

----------------------------------------

TITLE: Configuring Redis Cache Backend in Django (Python)
DESCRIPTION: This Python snippet configures the Django `CACHES` setting to use Redis as the cache backend. It specifies the `RedisCache` backend and the location of the Redis server using a URL format (redis://127.0.0.1:6379). Requires the `redis-py` library.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
    }
}
```

----------------------------------------

TITLE: Defining USE_TZ setting
DESCRIPTION: This setting specifies whether datetimes will be timezone-aware. If True, Django uses timezone-aware datetimes internally. If False, Django uses naive datetimes in local time, except when parsing ISO 8601 formatted strings. It is related to TIME_ZONE and USE_I18N settings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_62



----------------------------------------

TITLE: Defining Django Models for News Application
DESCRIPTION: This snippet demonstrates how to define Django models for a news application, including Reporter and Article models with various field types and relationships.
SOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models


class Reporter(models.Model):
    full_name = models.CharField(max_length=70)

    def __str__(self):
        return self.full_name


class Article(models.Model):
    pub_date = models.DateField()
    headline = models.CharField(max_length=200)
    content = models.TextField()
    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)

    def __str__(self):
        return self.headline
```

----------------------------------------

TITLE: Simulating User Login with Django Test Client
DESCRIPTION: Demonstrates how to simulate a user login using the Django test client's login method. The example shows logging in with a username and password for the standard ModelBackend authentication.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_11

LANGUAGE: pycon
CODE:
```
>>> c = Client()
>>> c.login(username="fred", password="secret")

# Now you can access a view that's only available to logged-in users.
```

----------------------------------------

TITLE: Configuring Django Middleware for Clickjacking Protection
DESCRIPTION: This snippet shows how to add the XFrameOptionsMiddleware to Django's MIDDLEWARE setting. This middleware sets the X-Frame-Options header to DENY for all outgoing HttpResponses by default.
SOURCE: https://github.com/django/django/blob/main/docs/ref/clickjacking.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
MIDDLEWARE = [
    ...,
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    ...,
]
```

----------------------------------------

TITLE: Displaying Poll Results in Django View
DESCRIPTION: This Python code defines a view function to display the results of a poll. It retrieves the question object and renders it using a template.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial04.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.shortcuts import get_object_or_404, render


def results(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, "polls/results.html", {"question": question})
```

----------------------------------------

TITLE: Creating Virtual Environment with venv - DOS Prompt
DESCRIPTION: Creates a new virtual environment using Python's built-in `venv` module. The command `py -m venv project-name` will create a directory named 'project-name' in the current location and set up the environment files within it.
SOURCE: https://github.com/django/django/blob/main/docs/howto/windows.txt#_snippet_1

LANGUAGE: doscon
CODE:
```
...\> py -m venv project-name
```

----------------------------------------

TITLE: Defining Article Model in Django
DESCRIPTION: Basic Django model definition for Article with title and publication date fields, including a get_absolute_url method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models
from django.urls import reverse


class Article(models.Model):
    title = models.CharField(max_length=200)
    pub_date = models.DateField()

    def get_absolute_url(self):
        return reverse("article-detail", kwargs={"pk": self.pk})
```

----------------------------------------

TITLE: Configuring INSTALLED_APPS for Django Auth (Python)
DESCRIPTION: Specifies the required applications within the `INSTALLED_APPS` setting in `settings.py` to enable Django's authentication framework. `django.contrib.auth` provides the core auth system, and `django.contrib.contenttypes` enables model-associated permissions. This configuration is typically included by default when starting a new Django project.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/index.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
# settings.py
INSTALLED_APPS = [
    # ...
    'django.contrib.auth',
    'django.contrib.contenttypes',
    # ...
]
```

----------------------------------------

TITLE: Defining Django Models for Publishers, Authors, and Books in Python
DESCRIPTION: Defines three Django models: `Publisher`, `Author`, and `Book`, establishing relationships (ManyToMany, ForeignKey) and basic fields (CharField, URLField, EmailField, ImageField, DateField). These models serve as the data source for the subsequent generic view examples, representing entities in a book publishing application. Includes meta options for ordering and `__str__` methods for representation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
# models.py
from django.db import models


class Publisher(models.Model):
    name = models.CharField(max_length=30)
    address = models.CharField(max_length=50)
    city = models.CharField(max_length=60)
    state_province = models.CharField(max_length=30)
    country = models.CharField(max_length=50)
    website = models.URLField()

    class Meta:
        ordering = ["-name"]

    def __str__(self):
        return self.name


class Author(models.Model):
    salutation = models.CharField(max_length=10)
    name = models.CharField(max_length=200)
    email = models.EmailField()
    headshot = models.ImageField(upload_to="author_headshots")

    def __str__(self):
        return self.name


class Book(models.Model):
    title = models.CharField(max_length=100)
    authors = models.ManyToManyField("Author")
    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
    publication_date = models.DateField()
```

----------------------------------------

TITLE: Defining and Rendering a Basic Django Form with Help Text in Python
DESCRIPTION: Shows how to define a simple `UserForm` using `django.forms.Form` and a `CharField` with a `help_text`. It then demonstrates instantiating the form and printing its default HTML representation, which includes the label, help text div, and input field with `aria-describedby` automatically pointing to the help text ID.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_10

LANGUAGE: pycon
CODE:
```
>>> from django import forms
>>> class UserForm(forms.Form):
...     username = forms.CharField(max_length=255, help_text="e.g., user@example.com")
...
>>> f = UserForm()
>>> print(f)
<div>
<label for="id_username">Username:</label>
<div class="helptext" id="id_username_helptext">e.g., user@example.com</div>
<input type="text" name="username" maxlength="255" required aria-describedby="id_username_helptext" id="id_username">
</div>
```

----------------------------------------

TITLE: Iterating Over a List with the For Tag in HTML+Django
DESCRIPTION: This snippet shows how to use the `{% for %}` tag to loop through items in a list or array. It iterates over `athlete_list`, assigning each item to the `athlete` loop variable. Inside the loop, `{{ athlete.name }}` accesses the `name` attribute of the current `athlete` object and displays it within an HTML list item (`<li>`). Requires `athlete_list` (an iterable) to be present in the template context.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_5

LANGUAGE: html+django
CODE:
```
<ul>
{% for athlete in athlete_list %}
    <li>{{ athlete.name }}</li>
{% endfor %}
</ul>
```

----------------------------------------

TITLE: Defining Custom User Model in Django
DESCRIPTION: This snippet demonstrates how to create a custom user model in Django using email as the username field. It includes a custom user manager and overrides default permission methods.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
from django.db import models
from django.contrib.auth.models import BaseUserManager, AbstractBaseUser


class MyUserManager(BaseUserManager):
    def create_user(self, email, date_of_birth, password=None):
        """
        Creates and saves a User with the given email, date of
        birth and password.
        """
        if not email:
            raise ValueError("Users must have an email address")

        user = self.model(
            email=self.normalize_email(email),
            date_of_birth=date_of_birth,
        )

        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, date_of_birth, password=None):
        """
        Creates and saves a superuser with the given email, date of
        birth and password.
        """
        user = self.create_user(
            email,
            password=password,
            date_of_birth=date_of_birth,
        )
        user.is_admin = True
        user.save(using=self._db)
        return user


class MyUser(AbstractBaseUser):
    email = models.EmailField(
        verbose_name="email address",
        max_length=255,
        unique=True,
    )
    date_of_birth = models.DateField()
    is_active = models.BooleanField(default=True)
    is_admin = models.BooleanField(default=False)

    objects = MyUserManager()

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["date_of_birth"]

    def __str__(self):
        return self.email

    def has_perm(self, perm, obj=None):
        "Does the user have a specific permission?"
        # Simplest possible answer: Yes, always
        return True

    def has_module_perms(self, app_label):
        "Does the user have permissions to view the app `app_label`?"
        # Simplest possible answer: Yes, always
        return True

    @property
    def is_staff(self):
        "Is the user a member of staff?"
        # Simplest possible answer: All admins are staff
        return self.is_admin
```

----------------------------------------

TITLE: Defining ForeignKey Relationship in Django Model - Python
DESCRIPTION: Demonstrates how to establish a one-to-many relationship between two Django models using ForeignKey. Models Blog and Entry are declared; Entry has a ForeignKey to Blog with cascade deletion and nullable entries. Requires Django's ORM (django.db.models). Inputs are the model and field definitions, no function calls in this snippet. Outputs are the registered models; this is a prerequisite configuration for using RelatedManager methods on the Blog-Entry relationship.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.db import models

class Blog(models.Model):
    # ...
    pass

class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE, null=True)
```

----------------------------------------

TITLE: Sending Plain Text Email with Django send_mail()
DESCRIPTION: Demonstrates how to send a basic plain text email using Django's send_mail() function. This function provides a straightforward way to send emails by specifying subject, message content, sender, and recipient list.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.core.mail import send_mail

send_mail(
    "Subject here",
    "Here is the message.",
    "from@example.com",
    ["to@example.com"],
    fail_silently=False,
)
```

----------------------------------------

TITLE: Creating a Django Superuser
DESCRIPTION: This console command creates a superuser for the Django admin interface. It prompts for a username, email address, and password.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_9

LANGUAGE: console
CODE:
```
$ python manage.py createsuperuser
```

----------------------------------------

TITLE: Querying and Deleting Django Model Instances
DESCRIPTION: This snippet demonstrates how to query a Django model and delete specific instances using the ORM. It filters choices based on text content and then deletes the filtered results.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> c = q.choice_set.filter(choice_text__startswith="Just hacking")
>>> c.delete()
```

----------------------------------------

TITLE: Defining Django Models with ForeignKey Relationships - Python
DESCRIPTION: Defines two Django model classes, Reporter and Article, demonstrating a many-to-one relationship via ForeignKey. Reporter includes standard string and email attributes, and Article links to Reporter with proper cascading on delete. The __str__ methods provide custom string representations, and Article is ordered by headline. Prerequisites: Django must be installed and a database configured; these classes should reside in models.py. Inputs are the model attributes, and outputs are model instances with respective relationships.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_one.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models


class Reporter(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.EmailField()

    def __str__(self):
        return f"{self.first_name} {self.last_name}"


class Article(models.Model):
    headline = models.CharField(max_length=100)
    pub_date = models.DateField()
    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)

    def __str__(self):
        return self.headline

    class Meta:
        ordering = ["headline"]

```

----------------------------------------

TITLE: Validating Bound Django Forms and Retrieving Errors in Python
DESCRIPTION: Demonstrates calling is_valid() on a bound Django form to perform data validation, showing results both for valid and invalid input. Also illustrates accessing the 'errors' attribute to view validation error messages. Input is a data dictionary; output is a Boolean for validity and a dictionary of error lists keyed by field name.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> data = {
...     "subject": "hello",
...     "message": "Hi there",
...     "sender": "foo@example.com",
...     "cc_myself": True,
... }
>>> f = ContactForm(data)
>>> f.is_valid()
True
```

LANGUAGE: python
CODE:
```
>>> data = {
...     "subject": "",
...     "message": "Hi there",
...     "sender": "invalid email address",
...     "cc_myself": True,
... }
>>> f = ContactForm(data)
>>> f.is_valid()
False
```

LANGUAGE: python
CODE:
```
>>> f.errors
{'sender': ['Enter a valid email address.'], 'subject': ['This field is required.']}
```

----------------------------------------

TITLE: Defining Basic Django Settings in Python
DESCRIPTION: Example of setting basic Django configuration variables in a Python settings file. Demonstrates setting allowed hosts, debug mode, and default email.
SOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
ALLOWED_HOSTS = ["www.example.com"]
DEBUG = False
DEFAULT_FROM_EMAIL = "webmaster@example.com"
```

----------------------------------------

TITLE: Relationship Spanning in Django Queries
DESCRIPTION: Shows how to traverse relationships in queries using double underscore notation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
>>> Entry.objects.filter(blog__name="Beatles Blog")
```

LANGUAGE: python
CODE:
```
>>> Blog.objects.filter(entry__headline__contains="Lennon")
```

----------------------------------------

TITLE: Checking User Authentication in Django Templates
DESCRIPTION: Example of using the 'user' context variable in a Django template to display different content for authenticated and unauthenticated users.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_38

LANGUAGE: html
CODE:
```
{% if user.is_authenticated %}
    <p>Welcome, {{ user.username }}. Thanks for logging in.</p>
{% else %}
    <p>Welcome, new user. Please log in.</p>
{% endif %}
```

----------------------------------------

TITLE: Inclusion Filter 'in' and Its Usage Scenarios
DESCRIPTION: Describes the 'in' lookup to filter records where a field's value matches any value in a provided list, tuple, or queryset. Shows example SQL translations and discusses the use of subqueries and performance considerations when handling nested queries.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_97

LANGUAGE: ReStructuredText
CODE:
```
.. fieldlookup:: in

``in``
~~~~~~

In a given iterable; often a list, tuple, or queryset. It's not a common use
case, but strings (being iterables) are accepted.

Examples::

    Entry.objects.filter(id__in=[1, 3, 4])
    Entry.objects.filter(headline__in="abc")

SQL equivalents:

.. code-block:: sql

    SELECT ... WHERE id IN (1, 3, 4);
    SELECT ... WHERE headline IN ('a', 'b', 'c');

You can also use a queryset to dynamically evaluate the list of values
instead of providing a list of literal values::

    inner_qs = Blog.objects.filter(name__contains="Chester")
    entries = Entry.objects.filter(blog__in=inner_qs)

This queryset will be evaluated as subselect statement:

.. code-block:: sql

    SELECT ... WHERE blog.id IN (SELECT id FROM ... WHERE NAME LIKE '%Chester%')

If you pass in a ``QuerySet`` resulting from ``values()`` or ``values_list()``
as the value to an ``__in`` lookup, you need to ensure you are only extracting
one field in the result. For example, this will work (filtering on the blog
names)::

    inner_qs = Blog.objects.filter(name__contains="Ch" ).values("name")
    entries = Entry.objects.filter(blog__name__in=inner_qs)

This example will raise an exception, since the inner query is trying to
extract two field values, where only one is expected::

    # Bad code! Will raise a TypeError.
    inner_qs = Blog.objects.filter(name__contains="Ch").values("name", "id")
    entries = Entry.objects.filter(blog__name__in=inner_qs)

.. _nested-queries-performance:

.. admonition:: Performance considerations

    Be cautious about using nested queries and understand your database
    server's performance characteristics (if in doubt, benchmark!). Some
    database backends, most notably MySQL, don't optimize nested queries very
    well. It is more efficient, in those cases, to extract a list of values
    and then pass that into the second query. That is, execute two queries
    instead of one::

        values = Blog.objects.filter(name__contains="Chester").values_list("pk", flat=True)
        entries = Entry.objects.filter(blog__in=list(values))

    Note the ``list()`` call around the Blog ``QuerySet`` to force execution of
    the first query. Without it, a nested query would be executed, because
    :ref:`querysets-are-lazy`.

.. fieldlookup:: gt

``gt``
~~~~~~

Greater than.

Example::

    Entry.objects.filter(id__gt=4)

SQL equivalent:

.. code-block:: sql

    SELECT ... WHERE id > 4;

.. fieldlookup:: gte

``gte``
~~~~~~~

Greater than or equal to.

.. fieldlookup:: lt

``lt``
~~~~~~

Less than.

.. fieldlookup:: lte

``lte``
~~~~~~~

Less than or equal to.

.. fieldlookup:: startswith

``startswith``
~~~~~~~~~~~~~~

Case-sensitive starts-with.

Example::

    Entry.objects.filter(headline__startswith="Lennon")

SQL equivalent:

.. code-block:: sql

    SELECT ... WHERE headline LIKE 'Lennon%';

SQLite doesn't support case-sensitive ``LIKE`` statements; ``startswith`` acts
like ``istartswith`` for SQLite.

.. fieldlookup:: istartswith

``istartswith``
~~~~~~~~~~~~~~~

Case-insensitive starts-with.

Example::

    Entry.objects.filter(headline__istartswith="Lennon")

SQL equivalent:

.. code-block:: sql

    SELECT ... WHERE headline ILIKE 'Lennon%';

.. admonition:: SQLite users

    When using the SQLite backend and non-ASCII strings, bear in mind the
    :ref:`database note <sqlite-string-matching>` about string comparisons.

.. fieldlookup:: endswith

``endswith``
~~~~~~~~~~~~

Case-sensitive ends-with.

Example::

    Entry.objects.filter(headline__endswith="Lennon")

SQL equivalent:

.. code-block:: sql

    SELECT ... WHERE headline LIKE '%Lennon';

.. admonition:: SQLite users

    SQLite doesn't support case-sensitive ``LIKE`` statements; ``endswith``
    acts like ``iendswith`` for SQLite. Refer to the :ref:`database note
    <sqlite-string-matching>` documentation for more.

.. fieldlookup:: iendswith

``iendswith``
~~~~~~~~~~~~~

Case-insensitive ends-with.

```

----------------------------------------

TITLE: Connecting to User Model Signals in Django
DESCRIPTION: Example of connecting to signals sent by the user model using settings.AUTH_USER_MODEL. This ensures the signal connection works with custom user models.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.db.models.signals import post_save


def post_save_receiver(sender, instance, created, **kwargs):
    pass


post_save.connect(post_save_receiver, sender=settings.AUTH_USER_MODEL)
```

----------------------------------------

TITLE: Adding Field-Specific Cleaning Logic in Django Python
DESCRIPTION: This snippet shows how to add validation specific to the `recipients` field within the `ContactForm`. It defines a `clean_recipients` method that checks if the email address 'fred@example.com' is present in the cleaned data for the `recipients` field. If not, it raises a `ValidationError`. This method is automatically called during the form's validation process.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django import forms
from django.core.exceptions import ValidationError


class ContactForm(forms.Form):
    # Everything as before.
    ...

    def clean_recipients(self):
        data = self.cleaned_data["recipients"]
        if "fred@example.com" not in data:
            raise ValidationError("You have forgotten about Fred!")

        # Always return a value to use as the new cleaned data, even if
        # this method didn't change it.
        return data
```

----------------------------------------

TITLE: Implementing Secret Key Rotation in Django
DESCRIPTION: Demonstrates how to implement secret key rotation using Django's SECRET_KEY_FALLBACKS setting, which allows for graceful transition between keys.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/checklist.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
import os

SECRET_KEY = os.environ["CURRENT_SECRET_KEY"]
SECRET_KEY_FALLBACKS = [
    os.environ["OLD_SECRET_KEY"],
]
```

----------------------------------------

TITLE: Good Practice: Using `get_absolute_url` in Django Templates (HTML+Django)
DESCRIPTION: Shows the recommended practice for generating object URLs in Django templates by calling the object's `get_absolute_url` method within the `href` attribute. This makes the template resilient to changes in the URL structure defined within the model method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_27

LANGUAGE: html+django
CODE:
```
<a href="{{ object.get_absolute_url }}">{{ object.name }}</a>
```

----------------------------------------

TITLE: Defining Django Model with Enum Choices (Python)
DESCRIPTION: Example of a Django model definition using an enumeration class (models.TextChoices) to define choices for a CharField, providing a concise way to define choices.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_7

LANGUAGE: Python
CODE:
```
from django.db import models


class Runner(models.Model):
    MedalType = models.TextChoices("MedalType", "GOLD SILVER BRONZE")
    name = models.CharField(max_length=60)
    medal = models.CharField(blank=True, choices=MedalType, max_length=10)
```

----------------------------------------

TITLE: Using login_required Decorator in Django
DESCRIPTION: Demonstrates how to use the login_required decorator to restrict access to a view to authenticated users only. If the user is not logged in, they will be redirected to the login page.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_18

LANGUAGE: Python
CODE:
```
from django.contrib.auth.decorators import login_required

@login_required
def my_view(request): ...
```

----------------------------------------

TITLE: Simplified URL Routing with path() Function (Django 2.0)
DESCRIPTION: Example of the new simplified URL routing syntax introduced in Django 2.0 using the path() function. This syntax supports type coercion and is more readable than regex-based routing.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
path("articles/<int:year>/", views.year_archive)
```

----------------------------------------

TITLE: Defining Blog Application Models in Django
DESCRIPTION: This code defines three model classes (Blog, Author, and Entry) that compose a blog application. Each model maps to a database table with defined fields and relationships including ForeignKey and ManyToManyField relationships.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from datetime import date

from django.db import models


class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def __str__(self):
        return self.name


class Author(models.Model):
    name = models.CharField(max_length=200)
    email = models.EmailField()

    def __str__(self):
        return self.name


class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField(default=date.today)
    authors = models.ManyToManyField(Author)
    number_of_comments = models.IntegerField(default=0)
    number_of_pingbacks = models.IntegerField(default=0)
    rating = models.IntegerField(default=5)

    def __str__(self):
        return self.headline
```

----------------------------------------

TITLE: Updating Foreign Key Fields in Bulk with Django
DESCRIPTION: Demonstrates how to update a foreign key field for multiple objects in a single database operation using the QuerySet update method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_56

LANGUAGE: python
CODE:
```
>>> b = Blog.objects.get(pk=1)

# Change every Entry so that it belongs to this Blog.
>>> Entry.objects.update(blog=b)
```

----------------------------------------

TITLE: Comparing Values Using Smart `if` Tag with `!=` Operator in Django Templates
DESCRIPTION: Illustrates the use of the enhanced `if` template tag in Django 1.2+, allowing direct use of comparison operators like `!=` for inequality checks between variables `a` and `b`. This is presented as the modern replacement for the older `ifnotequal` tag.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_1

LANGUAGE: html+django
CODE:
```
{% if a != b %}
 ...
{% endif %}
```

----------------------------------------

TITLE: Pagination Template Implementation
DESCRIPTION: Django template code showing how to implement pagination navigation controls with previous/next links and page information.
SOURCE: https://github.com/django/django/blob/main/docs/topics/pagination.txt#2025-04-23_snippet_2

LANGUAGE: html
CODE:
```
{% for contact in page_obj %}
    {# Each "contact" is a Contact model object. #}
    {{ contact.full_name|upper }}<br>
    ...
{% endfor %}

<div class="pagination">
    <span class="step-links">
        {% if page_obj.has_previous %}
            <a href="?page=1">&laquo; first</a>
            <a href="?page={{ page_obj.previous_page_number }}">previous</a>
        {% endif %}

        <span class="current">
            Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.
        </span>

        {% if page_obj.has_next %}
            <a href="?page={{ page_obj.next_page_number }}">next</a>
            <a href="?page={{ page_obj.paginator.num_pages }}">last &raquo;</a>
        {% endif %}
    </span>
</div>
```

----------------------------------------

TITLE: Configuring Django Authentication URLs
DESCRIPTION: Demonstrates how to include Django's built-in authentication URLs in a project's URLconf, providing paths for login, logout, and password management views.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
urlpatterns = [
    path("accounts/", include("django.contrib.auth.urls")),
]
```

----------------------------------------

TITLE: Defining LOGIN_URL setting
DESCRIPTION: This setting specifies the URL or named URL pattern for login redirects when using login_required, LoginRequiredMixin, AccessMixin, or LoginRequiredMiddleware. The default value is '/accounts/login/'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_72



----------------------------------------

TITLE: Standard database lookup vs. select_related in Django
DESCRIPTION: Compares standard database lookups with select_related() lookups, demonstrating how select_related() reduces database queries when accessing related objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_33

LANGUAGE: python
CODE:
```
# Hits the database.
e = Entry.objects.get(id=5)

# Hits the database again to get the related Blog object.
b = e.blog
```

LANGUAGE: python
CODE:
```
# Hits the database.
e = Entry.objects.select_related("blog").get(id=5)

# Doesn't hit the database, because e.blog has been prepopulated
# in the previous query.
b = e.blog
```

----------------------------------------

TITLE: Creating a Basic HTML Template for Django Form
DESCRIPTION: Shows how to create a simple HTML template that renders a Django form, including the CSRF token and submit button.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_4

LANGUAGE: html+django
CODE:
```
<form action="/your-name/" method="post">
    {% csrf_token %}
    {{ form }}
    <input type="submit" value="Submit">
</form>
```

----------------------------------------

TITLE: Create or Retrieve an Object with get_or_create() in Django ORM (Python)
DESCRIPTION: Shows how get_or_create() is used to safely retrieve or create a record, avoiding race conditions and ensuring uniqueness per defined constraints. Includes example using defaults to provide additional creation parameters. Notes on atomicity and uniqueness constraints are relevant for preventing duplicates. Requires the Person model and date from datetime.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_70

LANGUAGE: python
CODE:
```
obj, created = Person.objects.get_or_create(
    first_name="John",
    last_name="Lennon",
    defaults={"birthday": date(1940, 10, 9)},
)
```

----------------------------------------

TITLE: Creating Basic Django Views with Parameters
DESCRIPTION: Defines three view functions that handle different URL patterns for a polls application. Each view takes a question_id parameter and returns an HTTP response.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
def detail(request, question_id):
    return HttpResponse("You're looking at question %s." % question_id)


def results(request, question_id):
    response = "You're looking at the results of question %s."
    return HttpResponse(response % question_id)


def vote(request, question_id):
    return HttpResponse("You're voting on question %s." % question_id)
```

----------------------------------------

TITLE: Extending a Base Template in Django
DESCRIPTION: Demonstrates how to create a child template that extends a base template. This example overrides the title and content blocks to create a blog page.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_10

LANGUAGE: html+django
CODE:
```
{% extends "base.html" %}

{% block title %}My amazing blog{% endblock %}

{% block content %}
{% for entry in blog_entries %}
    <h2>{{ entry.title }}</h2>
    <p>{{ entry.body }}</p>
{% endfor %}
{% endblock %}
```

----------------------------------------

TITLE: Using related_query_name in Django Query
DESCRIPTION: This snippet shows how to use the `related_query_name` defined on a `ForeignKey` (in this case, `tag` from the `Tag` model) to perform a reverse lookup filter on the related model (`Article`). It filters `Article` objects based on the name of related `Tag` objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_37

LANGUAGE: Python
CODE:
```
Article.objects.filter(tag__name="important")
```

----------------------------------------

TITLE: Atomic Field Update Using F Expressions - Django ORM - Python
DESCRIPTION: This snippet leverages Django's F expressions to perform an atomic, in-database increment of a model field. By assigning F("number_sold") + 1 to the number_sold attribute and calling save(), the update is executed directly in the database, reducing the risk of race conditions. Requirements include importing F from django.db.models and having an existing Product model instance. Inputs: product name for retrieval; output: number_sold is incremented in an atomic transaction. Limitation: F expressions can't be used outside save() or update() queries.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
>>> from django.db.models import F
>>> product = Product.objects.get(name="Venezuelan Beaver Cheese")
>>> product.number_sold = F("number_sold") + 1
>>> product.save()
```

----------------------------------------

TITLE: Selective Field Update Using update_fields Argument - Django ORM - Python
DESCRIPTION: This example illustrates how to update only specific fields of a Django model instance by passing update_fields to save(). The update_fields parameter takes an iterable of field names, which restricts the database update to only those columns. Dependencies: a Product model and Django environment. Input: the field(s) to update (here, 'name'); output: the specified field is updated, while others remain unchanged. Using update_fields can improve efficiency and prevent unwanted side effects on other fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
product.name = "Name changed again"
product.save(update_fields=["name"])
```

----------------------------------------

TITLE: Recording User Interest with SingleObjectMixin and View in Django (Python)
DESCRIPTION: Implements a Django class-based view that uses SingleObjectMixin to retrieve a specific Author instance from the URL and responds to POST requests by recording the user's interest. Requires Django's HTTP and URL handling modules, the View and SingleObjectMixin from django.views, and an Author model from books.models. Handles authentication, object retrieval via get_object(), and redirects on success; designed for extensibility in how interest is recorded.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.http import HttpResponseForbidden, HttpResponseRedirect\nfrom django.urls import reverse\nfrom django.views import View\nfrom django.views.generic.detail import SingleObjectMixin\nfrom books.models import Author\n\n\nclass RecordInterestView(SingleObjectMixin, View):\n    \"\"\"Records the current user's interest in an author.\"\"\"\n\n    model = Author\n\n    def post(self, request, *args, **kwargs):\n        if not request.user.is_authenticated:\n            return HttpResponseForbidden()\n\n        # Look up the author we're interested in.\n        self.object = self.get_object()\n        # Actually record interest somehow here!\n\n        return HttpResponseRedirect(\n            reverse(\"author-detail\", kwargs={\"pk\": self.object.pk})\n        )
```

----------------------------------------

TITLE: Running Django Development Server - Console
DESCRIPTION: This command starts Django's lightweight development server on your local machine. It is used here to test the URL configuration and view wiring, allowing you to access the application through a web browser at http://localhost:8000/.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#_snippet_7

LANGUAGE: console
CODE:
```
$ python manage.py runserver
```

----------------------------------------

TITLE: Conditional Logic for Authenticated User in Django (Python)
DESCRIPTION: Demonstrates using the is_authenticated attribute on request.user to differentiate between logged-in and anonymous users. No external dependencies beyond Django's authentication system are required. Inputs: None directly, output: Custom logic can be added for each user type; illustrated as comments in the snippet.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
if request.user.is_authenticated:
    ...  # Do something for logged-in users.
else:
    ...  # Do something for anonymous users.

```

----------------------------------------

TITLE: Accessing Single Related Objects in Django ORM
DESCRIPTION: Demonstrates how to access a related object through a one-to-one relationship using Django's ORM. Shows both retrieval and assignment of related objects.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_65

LANGUAGE: python
CODE:
```
e = Entry.objects.get(id=2)
e.entrydetail  # returns the related EntryDetail object

e.entrydetail = ed
```

----------------------------------------

TITLE: Creating and Querying Django ORM Relationships - Pycon
DESCRIPTION: Showcases a series of Django ORM commands run in a Python shell for managing Reporter and Article objects. Demonstrates object creation, saving, assigning relationships, error handling for unsaved relations, related manager usage, moving relationships, counting related objects, advanced querying through relationships using double underscores, and cascade deletion. Requires an initialized Django environment with the above models migrated. Commands illustrate direct user interaction with the ORM.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_one.txt#2025-04-23_snippet_1

LANGUAGE: pycon
CODE:
```
>>> r = Reporter(first_name="John", last_name="Smith", email="john@example.com")
>>> r.save()

>>> r2 = Reporter(first_name="Paul", last_name="Jones", email="paul@example.com")
>>> r2.save()

```

LANGUAGE: pycon
CODE:
```
>>> from datetime import date
>>> a = Article(id=None, headline="This is a test", pub_date=date(2005, 7, 27), reporter=r)
>>> a.save()

>>> a.reporter.id
1

>>> a.reporter
<Reporter: John Smith>

```

LANGUAGE: pycon
CODE:
```
>>> r3 = Reporter(first_name="John", last_name="Smith", email="john@example.com")
>>> Article.objects.create(
...     headline="This is a test", pub_date=date(2005, 7, 27), reporter=r3
... )
Traceback (most recent call last):
...
ValueError: save() prohibited to prevent data loss due to unsaved related object 'reporter'.

```

LANGUAGE: pycon
CODE:
```
>>> r = a.reporter

```

LANGUAGE: pycon
CODE:
```
>>> new_article = r.article_set.create(
...     headline="John's second story", pub_date=date(2005, 7, 29)
... )
>>> new_article
<Article: John's second story>
>>> new_article.reporter
<Reporter: John Smith>
>>> new_article.reporter.id
1

```

LANGUAGE: pycon
CODE:
```
>>> new_article2 = Article.objects.create(
...     headline="Paul's story", pub_date=date(2006, 1, 17), reporter=r
... )
>>> new_article2.reporter
<Reporter: John Smith>
>>> new_article2.reporter.id
1
>>> r.article_set.all()
<QuerySet [<Article: John's second story>, <Article: Paul's story>, <Article: This is a test>]>

```

LANGUAGE: pycon
CODE:
```
>>> r2.article_set.add(new_article2)
>>> new_article2.reporter.id
2
>>> new_article2.reporter
<Reporter: Paul Jones>

```

LANGUAGE: pycon
CODE:
```
>>> r.article_set.add(r2)
Traceback (most recent call last):
...
TypeError: 'Article' instance expected, got <Reporter: Paul Jones>

>>> r.article_set.all()
<QuerySet [<Article: John's second story>, <Article: This is a test>]>
>>> r2.article_set.all()
<QuerySet [<Article: Paul's story>]>

>>> r.article_set.count()
2

>>> r2.article_set.count()
1

```

LANGUAGE: pycon
CODE:
```
>>> r.article_set.filter(headline__startswith="This")
<QuerySet [<Article: This is a test>]>

# Find all Articles for any Reporter whose first name is "John".
>>> Article.objects.filter(reporter__first_name="John")
<QuerySet [<Article: John's second story>, <Article: This is a test>]>

```

LANGUAGE: pycon
CODE:
```
>>> Article.objects.filter(reporter__first_name="John")
<QuerySet [<Article: John's second story>, <Article: This is a test>]>

```

LANGUAGE: pycon
CODE:
```
>>> Article.objects.filter(reporter__first_name="John", reporter__last_name="Smith")
<QuerySet [<Article: John's second story>, <Article: This is a test>]>

```

LANGUAGE: pycon
CODE:
```
>>> Article.objects.filter(reporter__pk=1)
<QuerySet [<Article: John's second story>, <Article: This is a test>]>
>>> Article.objects.filter(reporter=1)
<QuerySet [<Article: John's second story>, <Article: This is a test>]>
>>> Article.objects.filter(reporter=r)
<QuerySet [<Article: John's second story>, <Article: This is a test>]>

>>> Article.objects.filter(reporter__in=[1, 2]).distinct()
<QuerySet [<Article: John's second story>, <Article: Paul's story>, <Article: This is a test>]>
>>> Article.objects.filter(reporter__in=[r, r2]).distinct()
<QuerySet [<Article: John's second story>, <Article: Paul's story>, <Article: This is a test>]>

```

LANGUAGE: pycon
CODE:
```
>>> Article.objects.filter(
...     reporter__in=Reporter.objects.filter(first_name="John")
... ).distinct()
<QuerySet [<Article: John's second story>, <Article: This is a test>]>

```

LANGUAGE: pycon
CODE:
```
>>> Reporter.objects.filter(article__pk=1)
<QuerySet [<Reporter: John Smith>]>
>>> Reporter.objects.filter(article=1)
<QuerySet [<Reporter: John Smith>]>
>>> Reporter.objects.filter(article=a)
<QuerySet [<Reporter: John Smith>]>

>>> Reporter.objects.filter(article__headline__startswith="This")
<QuerySet [<Reporter: John Smith>, <Reporter: John Smith>, <Reporter: John Smith>]>
>>> Reporter.objects.filter(article__headline__startswith="This").distinct()
<QuerySet [<Reporter: John Smith>]>

```

LANGUAGE: pycon
CODE:
```
>>> Reporter.objects.filter(article__headline__startswith="This").count()
3
>>> Reporter.objects.filter(article__headline__startswith="This").distinct().count()
1

```

LANGUAGE: pycon
CODE:
```
>>> Reporter.objects.filter(article__reporter__first_name__startswith="John")
<QuerySet [<Reporter: John Smith>, <Reporter: John Smith>, <Reporter: John Smith>, <Reporter: John Smith>]>
>>> Reporter.objects.filter(article__reporter__first_name__startswith="John").distinct()
<QuerySet [<Reporter: John Smith>]>
>>> Reporter.objects.filter(article__reporter=r).distinct()
<QuerySet [<Reporter: John Smith>]>

```

LANGUAGE: pycon
CODE:
```
>>> Article.objects.all()
<QuerySet [<Article: John's second story>, <Article: Paul's story>, <Article: This is a test>]>
>>> Reporter.objects.order_by("first_name")
<QuerySet [<Reporter: John Smith>, <Reporter: Paul Jones>]>
>>> r2.delete()
>>> Article.objects.all()
<QuerySet [<Article: John's second story>, <Article: This is a test>]>
>>> Reporter.objects.order_by("first_name")
<QuerySet [<Reporter: John Smith>]>

```

LANGUAGE: pycon
CODE:
```
>>> Reporter.objects.filter(article__headline__startswith="This").delete()
>>> Reporter.objects.all()
<QuerySet []>
>>> Article.objects.all()
<QuerySet []>

```

----------------------------------------

TITLE: Defining ForeignKey with String Model Reference
DESCRIPTION: Shows how to define a ForeignKey field using a string reference ('app_label.ModelName') to the related model, which avoids the need to import the related model class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_27

LANGUAGE: python
CODE:
```
from django.db import models


class Restaurant(models.Model):
    # ...
    zip_code = models.ForeignKey(
        "geography.ZipCode",
        on_delete=models.SET_NULL,
        blank=True,
        null=True,
    )
```

----------------------------------------

TITLE: Accessing Related Profile Data in Django
DESCRIPTION: Demonstrates how to access data from a related profile model using Django's standard related model conventions. This example shows accessing an Employee's department through a User instance.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> u = User.objects.get(username="fsmith")
>>> freds_department = u.employee.department
```

----------------------------------------

TITLE: Basic Django Model Filtering
DESCRIPTION: Examples of basic model filtering using related fields and handling null values in queries.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
Blog.objects.filter(entry__authors__name="Lennon")

Blog.objects.filter(entry__authors__name__isnull=True)

Blog.objects.filter(entry__authors__isnull=False, entry__authors__name__isnull=True)
```

----------------------------------------

TITLE: Defining Django Models with ManyToManyField in Python
DESCRIPTION: Defines two Django models, `Publication` and `Article`. The `Article` model uses `models.ManyToManyField(Publication)` to establish a many-to-many relationship, allowing an article to be associated with multiple publications and a publication to contain multiple articles. Both models include basic fields, `Meta` options for ordering, and `__str__` methods for representation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models


class Publication(models.Model):
    title = models.CharField(max_length=30)

    class Meta:
        ordering = ["title"]

    def __str__(self):
        return self.title


class Article(models.Model):
    headline = models.CharField(max_length=100)
    publications = models.ManyToManyField(Publication)

    class Meta:
        ordering = ["headline"]

    def __str__(self):
        return self.headline
```

----------------------------------------

TITLE: Defining AUTH_USER_MODEL setting
DESCRIPTION: This setting defines the model used to represent a User. It defaults to 'auth.User'. It's intended to be set at the project start and the model it refers to must be available in the first migration. Changing this setting after migrations are made is a serious effort.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_70



----------------------------------------

TITLE: HTML Template for Contact Form in Django
DESCRIPTION: Example of an HTML template for rendering a contact form in Django, including CSRF token and form fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_3

LANGUAGE: html
CODE:
```
<form method="post">{% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Send message">
</form>
```

----------------------------------------

TITLE: Defining models with many-to-many relationships in Django
DESCRIPTION: Shows how to define Django models with ManyToManyField relationships that can be used with prefetch_related() to optimize database queries.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_38

LANGUAGE: python
CODE:
```
from django.db import models


class Topping(models.Model):
    name = models.CharField(max_length=30)


class Pizza(models.Model):
    name = models.CharField(max_length=50)
    toppings = models.ManyToManyField(Topping)

    def __str__(self):
        return "%s (%s)" % (
            self.name,
            ", ".join(topping.name for topping in self.toppings.all()),
        )
```

----------------------------------------

TITLE: Configuring Basic STATICFILES_DIRS Setting in Python
DESCRIPTION: Sets up multiple directories where Django will look for static files when using FileSystemFinder. These paths should use Unix-style forward slashes, even on Windows systems.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_80

LANGUAGE: python
CODE:
```
STATICFILES_DIRS = [
    "/home/special.polls.com/polls/static",
    "/home/polls.com/polls/static",
    "/opt/webfiles/common",
]
```

----------------------------------------

TITLE: Instantiating a Model Instance in Django Shell (pycon)
DESCRIPTION: Shows the creation of an `Article` model instance in memory within a `pycon` session. The instance is not yet saved to the database.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_2

LANGUAGE: pycon
CODE:
```
>>> a1 = Article(headline="Django lets you build web apps easily")
```

----------------------------------------

TITLE: Associating Created Object with Request User in Django CreateView
DESCRIPTION: Defines an `AuthorCreateView` that inherits from `LoginRequiredMixin` (to ensure the user is logged in) and `CreateView`. It specifies the `model` and editable `fields` (excluding `created_by`). The `form_valid` method is overridden to automatically set the `created_by` field of the form's instance (`form.instance`) to the currently logged-in user (`self.request.user`) before saving the object.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic.edit import CreateView
from myapp.models import Author


class AuthorCreateView(LoginRequiredMixin, CreateView):
    model = Author
    fields = ["name"]

    def form_valid(self, form):
        form.instance.created_by = self.request.user
        return super().form_valid(form)
```

----------------------------------------

TITLE: Configuring PostgreSQL Database in Django
DESCRIPTION: Example configuration for the `DATABASES` setting to connect to a PostgreSQL database. It requires specifying the database `ENGINE`, `NAME`, `USER`, `PASSWORD`, `HOST`, and `PORT` for connection details. This is a common configuration for production environments.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_6

LANGUAGE: Python
CODE:
```
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "mydatabase",
        "USER": "mydatabaseuser",
        "PASSWORD": "mypassword",
        "HOST": "127.0.0.1",
        "PORT": "5432",
    }
}
```

----------------------------------------

TITLE: Using Static Template Tag in Django Templates
DESCRIPTION: Demonstrates basic usage of the static template tag to reference static files like images. The static tag automatically prepends the STATIC_URL setting to the specified path.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_105

LANGUAGE: html+django
CODE:
```
{% load static %}
<img src="{% static 'images/hi.jpg' %}" alt="Hi!">
```

----------------------------------------

TITLE: Using URL Template Tag for Reverse URL Lookup in Django Templates
DESCRIPTION: This snippet demonstrates how to use the url template tag in Django templates to perform reverse URL lookups. It shows both static and dynamic usage with template variables.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_10

LANGUAGE: html+django
CODE:
```
<a href="{% url 'news-year-archive' 2012 %}">2012 Archive</a>
{# Or with the year in a template context variable: #}
<ul>
{% for yearvar in year_list %}
<li><a href="{% url 'news-year-archive' yearvar %}">{{ yearvar }} Archive</a></li>
{% endfor %}
</ul>
```

----------------------------------------

TITLE: Using Django Query Expressions for Filtering, Annotating, and Ordering
DESCRIPTION: Demonstrates various use cases of Django query expressions. Examples include filtering based on field comparisons (`F`), creating dynamic annotations (`annotate`) using functions (`Length`, `Upper`), handling aggregations (`Count`), creating objects with expression values, applying boolean/lookup expressions (`Exists`, `GreaterThan`), and ordering results based on expression values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_0

LANGUAGE: pycon
CODE:
```
>>> from django.db.models import Count, F, Value
>>> from django.db.models.functions import Length, Upper
>>> from django.db.models.lookups import GreaterThan

# Find companies that have more employees than chairs.
>>> Company.objects.filter(num_employees__gt=F("num_chairs"))

# Find companies that have at least twice as many employees
# as chairs. Both the querysets below are equivalent.
>>> Company.objects.filter(num_employees__gt=F("num_chairs") * 2)
>>> Company.objects.filter(num_employees__gt=F("num_chairs") + F("num_chairs"))

# How many chairs are needed for each company to seat all employees?
>>> company = (
...     Company.objects.filter(num_employees__gt=F("num_chairs"))
...     .annotate(chairs_needed=F("num_employees") - F("num_chairs"))
...     .first()
... )
>>> company.num_employees
120
>>> company.num_chairs
50
>>> company.chairs_needed
70

# Create a new company using expressions.
>>> company = Company.objects.create(name="Google", ticker=Upper(Value("goog")))
# Be sure to refresh it if you need to access the field.
>>> company.refresh_from_db()
>>> company.ticker
'GOOG'

# Annotate models with an aggregated value. Both forms
# below are equivalent.
>>> Company.objects.annotate(num_products=Count("products"))
>>> Company.objects.annotate(num_products=Count(F("products")))

# Aggregates can contain complex computations also
>>> Company.objects.annotate(num_offerings=Count(F("products") + F("services")))

# Expressions can also be used in order_by(), either directly
>>> Company.objects.order_by(Length("name").asc())
>>> Company.objects.order_by(Length("name").desc())
# or using the double underscore lookup syntax.
>>> from django.db.models import CharField
>>> from django.db.models.functions import Length
>>> CharField.register_lookup(Length)
>>> Company.objects.order_by("name__length")

# Boolean expression can be used directly in filters.
>>> from django.db.models import Exists, OuterRef
>>> Company.objects.filter(
...     Exists(Employee.objects.filter(company=OuterRef("pk"), salary__gt=10))
... )

# Lookup expressions can also be used directly in filters
>>> Company.objects.filter(GreaterThan(F("num_employees"), F("num_chairs")))
# or annotations.
>>> Company.objects.annotate(
...     need_chairs=GreaterThan(F("num_employees"), F("num_chairs")),
... )
```

----------------------------------------

TITLE: Creating an Employee Profile Model in Django
DESCRIPTION: Shows how to extend user information by creating a profile model with a OneToOneField to Django's User model. This approach allows storing additional user information without modifying the core User model.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.contrib.auth.models import User


class Employee(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    department = models.CharField(max_length=100)
```

----------------------------------------

TITLE: Adding Extra Context to a Django DetailView in Python
DESCRIPTION: Shows how to add additional data to the template context for a generic `DetailView`. The `PublisherDetailView` subclasses `DetailView`, specifies the `Publisher` model, and overrides the `get_context_data` method. Inside the method, it first calls the superclass's `get_context_data` to retrieve the default context (containing the specific publisher object), then adds a new key `"book_list"` containing a QuerySet of all `Book` objects.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.views.generic import DetailView
from books.models import Book, Publisher


class PublisherDetailView(DetailView):
    model = Publisher

    def get_context_data(self, **kwargs):
        # Call the base implementation first to get a context
        context = super().get_context_data(**kwargs)
        # Add in a QuerySet of all the books
        context["book_list"] = Book.objects.all()
        return context
```

----------------------------------------

TITLE: Defining Django One-to-One and ForeignKey Models - Python
DESCRIPTION: Defines three interconnected Django models: Place, Restaurant, and Waiter. Place and Restaurant are linked via a OneToOneField, ensuring each restaurant corresponds to one place and vice versa. Dependencies include django.db.models, and the key fields set up model metadata and string representations supporting Django admin and shell introspection. ForeignKey on Waiter establishes a many-to-one relationship to Restaurant. Inputs are determined by Django ORM operations, and outputs are Python class definitions managed via migrations. Saving an instance requires all related objects to be persisted first.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/one_to_one.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models


class Place(models.Model):
    name = models.CharField(max_length=50)
    address = models.CharField(max_length=80)

    def __str__(self):
        return f"{self.name} the place"


class Restaurant(models.Model):
    place = models.OneToOneField(
        Place,
        on_delete=models.CASCADE,
        primary_key=True,
    )
    serves_hot_dogs = models.BooleanField(default=False)
    serves_pizza = models.BooleanField(default=False)

    def __str__(self):
        return "%s the restaurant" % self.place.name


class Waiter(models.Model):
    restaurant = models.ForeignKey(Restaurant, on_delete=models.CASCADE)
    name = models.CharField(max_length=50)

    def __str__(self):
        return "%s the waiter at %s" % (self.name, self.restaurant)

```

----------------------------------------

TITLE: Rendering Variables in Django Templates
DESCRIPTION: Demonstrates how to output variables in a Django template using double curly braces. Variables are replaced with their values from the context during rendering.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_0

LANGUAGE: html
CODE:
```
My first name is {{ first_name }}. My last name is {{ last_name }}.
```

----------------------------------------

TITLE: Creating Users with UserManager in Django (Python)
DESCRIPTION: Demonstrates creating a new user instance using the `User.objects.create_user()` helper method within a Python interactive session (pycon). It shows how to provide username, email, and password, saves the user to the database automatically, and allows for subsequent attribute updates like `last_name` followed by saving.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_0

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.auth.models import User
>>> user = User.objects.create_user("john", "lennon@thebeatles.com", "johnpassword")

# At this point, user is a User object that has already been saved
# to the database. You can continue to change its attributes
# if you want to change other fields.
>>> user.last_name = "Lennon"
>>> user.save()
```

----------------------------------------

TITLE: Implementing Django View Function
DESCRIPTION: This snippet shows how to implement a Django view function that retrieves data from the database and renders it using a template.
SOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.shortcuts import render

from .models import Article


def year_archive(request, year):
    a_list = Article.objects.filter(pub_date__year=year)
    context = {"year": year, "article_list": a_list}
    return render(request, "news/year_archive.html", context)
```

----------------------------------------

TITLE: Configuring Django INSTALLED_APPS Setting
DESCRIPTION: This code snippet shows how to add the polls app to the INSTALLED_APPS setting in the Django project's settings.py file. This is necessary to include the app in the project.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
INSTALLED_APPS = [
    "polls.apps.PollsConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
```

----------------------------------------

TITLE: Demonstrating Image Field Validation and Inspection in Django Forms - Python
DESCRIPTION: This Python interactive shell session demonstrates how to validate a Django form with an uploaded image, access the image field from the form's cleaned_data, and inspect its properties such as width, height, format, and raw data. This snippet relies on Django's forms system, the Pillow (PIL) library for image processing, and assumes a form with an ImageField ('img') has already been populated and validated. It illustrates typical behaviors (including errors) when accessing closed image file fields and direct PIL image loading.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
>>> form.is_valid()
True
>>> image_field = form.cleaned_data["img"]
>>> image_field.image
<PIL.PngImagePlugin.PngImageFile image mode=RGBA size=191x287 at 0x7F5985045C18>
>>> image_field.image.width
191
>>> image_field.image.height
287
>>> image_field.image.format
'PNG'
>>> image_field.image.getdata()
# Raises AttributeError: 'NoneType' object has no attribute 'seek'.
>>> image = Image.open(image_field)
>>> image.getdata()
<ImagingCore object at 0x7f5984f874b0>
```

----------------------------------------

TITLE: Defining a Contact Form in Django
DESCRIPTION: Demonstrates creating a more complex form with multiple field types including CharField, TextField, EmailField, and BooleanField. Shows how to specify widgets and validation options.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django import forms


class ContactForm(forms.Form):
    subject = forms.CharField(max_length=100)
    message = forms.CharField(widget=forms.Textarea)
    sender = forms.EmailField()
    cc_myself = forms.BooleanField(required=False)
```

----------------------------------------

TITLE: Generating HTML Email Template for Password Reset in Django
DESCRIPTION: This snippet shows a sample Django template for generating the email body for password reset. It includes placeholders for the user's email, domain, and a URL for password reset confirmation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_35

LANGUAGE: html
CODE:
```
Someone asked for password reset for email {{ email }}. Follow the link below:
{{ protocol}}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}
```

----------------------------------------

TITLE: Exact Match Lookup 'exact' with Examples
DESCRIPTION: Details the 'exact' lookup for filtering exact matches in queries. Illustrates how 'None' compares to SQL NULL and discusses database-specific collation sensitivities, particularly in MySQL, affecting case sensitivity.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_94

LANGUAGE: ReStructuredText
CODE:
```
.. fieldlookup:: exact

``exact``
~~~~~~~~~

Exact match. If the value provided for comparison is ``None``, it will be
interpreted as an SQL ``NULL`` (see :lookup:`isnull` for more details).

Examples::

    Entry.objects.get(id__exact=14)
    Entry.objects.get(id__exact=None)

SQL equivalents:

.. code-block:: sql

    SELECT ... WHERE id = 14;
    SELECT ... WHERE id IS NULL;

.. admonition:: MySQL comparisons

    In MySQL, a database table's "collation" setting determines whether
    ``exact`` comparisons are case-sensitive. This is a database setting, *not*
    a Django setting. It's possible to configure your MySQL tables to use
    case-sensitive comparisons, but some trade-offs are involved. For more
    information about this, see the :ref:`collation section <mysql-collation>`
    in the :doc:`databases </ref/databases>` documentation.
```

----------------------------------------

TITLE: New Future URL Template Tag Usage
DESCRIPTION: Example of using the new future library URL template tag syntax with proper string argument.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_12

LANGUAGE: html+django
CODE:
```
{% load url from future %}
{% url 'sample' %}
```

----------------------------------------

TITLE: Iterating and Displaying Errors in Django Template
DESCRIPTION: This snippet uses a Django template for loop to iterate over an 'errors' collection and display each error as a list item. It's commonly used in form validation or error handling contexts to present user-friendly error messages.
SOURCE: https://github.com/django/django/blob/main/django/forms/jinja2/django/forms/errors/list/text.txt#2025-04-23_snippet_0

LANGUAGE: Django Template Language
CODE:
```
{% for error in errors %}* {{ error }}
{% endfor %}
```

----------------------------------------

TITLE: Querying Django Models and Related Objects
DESCRIPTION: This snippet demonstrates how to query Django models (Publication and Article) and access related objects. It shows the use of the all() method and how to navigate relationships between models.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
<QuerySet [<Publication: Highlights for Children>, <Publication: The Python Journal>]>
>>> Article.objects.all()
<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA finds intelligent life on Earth>, <Article: NASA uses Python>, <Article: Oxygen-free diet works wonders>]>
>>> a2.publications.all()
<QuerySet [<Publication: The Python Journal>]>
```

----------------------------------------

TITLE: Implementing CRUD Views for Author Model using Django Generic Views
DESCRIPTION: Demonstrates the creation of Create, Update, and Delete views for the `Author` model using Django's generic class-based views (`CreateView`, `UpdateView`, `DeleteView`). These views automatically handle `ModelForm` creation and processing based on the specified `model` and `fields`. `AuthorDeleteView` explicitly defines a `success_url` using `reverse_lazy` for redirection after deletion.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.urls import reverse_lazy
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from myapp.models import Author


class AuthorCreateView(CreateView):
    model = Author
    fields = ["name"]


class AuthorUpdateView(UpdateView):
    model = Author
    fields = ["name"]


class AuthorDeleteView(DeleteView):
    model = Author
    success_url = reverse_lazy("author-list")
```

----------------------------------------

TITLE: Parameterized ValidationError Messages in Django - Python
DESCRIPTION: Shows how to build parameterized ValidationError messages using placeholders and the params argument, following Django's recommendation for reusable and translatable error messages. Requires Django's translation function (_) and is typically used in field or form validation where variable details (such as the invalid value itself) need to be included. The input 'value' is inserted into the error message, and this pattern supports localization and flexible message rewriting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
ValidationError(
    _(\"Invalid value: %(value)s\"),
    params={\"value\": \"42\"},
)
```

----------------------------------------

TITLE: Handling HTTP Error Responses in Django
DESCRIPTION: Example showing how to return HTTP error responses using HttpResponse subclasses. It demonstrates returning a 404 Not Found response conditionally.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/views.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.http import HttpResponse, HttpResponseNotFound


def my_view(request):
    # ...
    if foo:
        return HttpResponseNotFound("<h1>Page not found</h1>")
    else:
        return HttpResponse("<h1>Page was found</h1>")
```

----------------------------------------

TITLE: Filtering and Deleting Django QuerySet Objects
DESCRIPTION: This snippet shows how to filter Django QuerySet objects based on a condition and perform a bulk delete operation. It demonstrates the use of the filter() method with a startswith condition on the headline field.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
>>> q = Article.objects.filter(headline__startswith="Django")
>>> print(q)
<QuerySet [<Article: Django lets you build web apps easily>]>
>>> q.delete()
```

----------------------------------------

TITLE: Defining Django Models for M2M with Intermediate Table (Python)
DESCRIPTION: This Python code defines Django models for a many-to-many relationship between 'Person' and 'Group' using an explicit 'Membership' model. The 'Membership' model serves as the intermediary, holding foreign keys to 'Person' and 'Group', plus extra fields ('date_joined', 'invite_reason'). The 'Group' model's ManyToManyField uses the 'through' argument to specify 'Membership' as the intermediary. A UniqueConstraint is included in the 'Membership' model's Meta class to ensure each person can only be associated with a group once.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_17

LANGUAGE: Python
CODE:
```
from django.db import models


class Person(models.Model):
    name = models.CharField(max_length=128)

    def __str__(self):
        return self.name


class Group(models.Model):
    name = models.CharField(max_length=128)
    members = models.ManyToManyField(Person, through="Membership")

    def __str__(self):
        return self.name


class Membership(models.Model):
    person = models.ForeignKey(Person, on_delete=models.CASCADE)
    group = models.ForeignKey(Group, on_delete=models.CASCADE)
    date_joined = models.DateField()
    invite_reason = models.CharField(max_length=64)

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=["person", "group"], name="unique_person_group"
            )
        ]
```

----------------------------------------

TITLE: Defining Custom Template Filter in Python
DESCRIPTION: This snippet shows how to define a custom template filter called 'cut' that removes all instances of a given argument from a string.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
def cut(value, arg):
    """Removes all values of arg from the given string"""
    return value.replace(arg, "")
```

----------------------------------------

TITLE: Configuring Django URLs for Static Files Development View (Python)
DESCRIPTION: This Python snippet demonstrates how to add a URL pattern to your Django project's `urlpatterns` to enable the static files development view (`views.serve`). This view should only be used when `settings.DEBUG` is `True` as it's inefficient and insecure for production. It uses `re_path` to match URLs starting with the value of `settings.STATIC_URL` (assumed to be `/static/` here) and passes the remaining path to the `views.serve` function. Requires `django.conf.settings`, `django.contrib.staticfiles.views`, and `django.urls.re_path`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.contrib.staticfiles import views
from django.urls import re_path

if settings.DEBUG:
    urlpatterns += [
        re_path(r"^static/(?P<path>.*)$", views.serve),
    ]
```

----------------------------------------

TITLE: Creating a Django Admin Superuser (Console)
DESCRIPTION: Demonstrates the Django management command used to create a superuser account. This account has all permissions and is typically used to access and manage the Django admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_21

LANGUAGE: console
CODE:
```
$ python manage.py createsuperuser
```

----------------------------------------

TITLE: Viewing Raw SQL Queries in Django
DESCRIPTION: This snippet demonstrates how to view the raw SQL queries that Django is running. It requires setting DEBUG to True and uses the connection.queries attribute to display executed SQL statements and their execution times.
SOURCE: https://github.com/django/django/blob/main/docs/faq/models.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.db import connection
>>> connection.queries
[{'sql': 'SELECT polls_polls.id, polls_polls.question, polls_polls.pub_date FROM polls_polls',
'time': '0.002'}]
```

----------------------------------------

TITLE: Processing Contact Form Data in Django View
DESCRIPTION: Illustrates how to access and use validated form data from the cleaned_data dictionary to send an email based on form submissions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.core.mail import send_mail

if form.is_valid():
    subject = form.cleaned_data["subject"]
    message = form.cleaned_data["message"]
    sender = form.cleaned_data["sender"]
    cc_myself = form.cleaned_data["cc_myself"]

    recipients = ["info@example.com"]
    if cc_myself:
        recipients.append(sender)

    send_mail(subject, message, sender, recipients)
    return HttpResponseRedirect("/thanks/")
```

----------------------------------------

TITLE: Specifying Data Source using `queryset` in Django DetailView (Python)
DESCRIPTION: Introduces the `queryset` attribute as an alternative to the `model` attribute for specifying the data source in Django's generic views, using `DetailView` as an example. While the `model` attribute implies fetching all objects of that type (filtering happens later based on URL kwargs), `queryset` allows providing a specific, potentially pre-filtered, QuerySet directly to the view. The snippet shows the class structure but doesn't define a specific queryset.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.views.generic import DetailView
from books.models import Publisher


class PublisherDetailView(DetailView):
    queryset = ...
```

----------------------------------------

TITLE: Defining Custom Methods and Properties Django Python
DESCRIPTION: Demonstrates how to add custom methods and properties to a Django model instance to encapsulate business logic. The `baby_boomer_status` method calculates a status based on a date field, while the `full_name` property combines two string fields.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_31

LANGUAGE: Python
CODE:
```
from django.db import models


class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    birth_date = models.DateField()

    def baby_boomer_status(self):
        "Returns the person's baby-boomer status."
        import datetime

        if self.birth_date < datetime.date(1945, 8, 1):
            return "Pre-boomer"
        elif self.birth_date < datetime.date(1965, 1, 1):
            return "Baby boomer"
        else:
            return "Post-boomer"

    @property
    def full_name(self):
        "Returns the person's full name."
        return f"{self.first_name} {self.last_name}"
```

----------------------------------------

TITLE: Django F-Expression Field Comparisons
DESCRIPTION: Examples of using F-expressions to compare different fields within the same model and perform arithmetic operations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
>>> from django.db.models import F
>>> Entry.objects.filter(number_of_comments__gt=F("number_of_pingbacks"))
>>> Entry.objects.filter(number_of_comments__gt=F("number_of_pingbacks") * 2)
>>> Entry.objects.filter(rating__lt=F("number_of_comments") + F("number_of_pingbacks"))
>>> Entry.objects.filter(authors__name=F("blog__name"))
```

----------------------------------------

TITLE: Template with Namespaced URL Tag
DESCRIPTION: Updated template using namespaced URL tag for linking to the detail view.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_11

LANGUAGE: html+django
CODE:
```
<li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>
```

----------------------------------------

TITLE: Implementing ArticleListView using Django's ListView
DESCRIPTION: Shows how to create a custom ListView for displaying a list of articles. It includes pagination and context customization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-display.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.utils import timezone
from django.views.generic.list import ListView

from articles.models import Article


class ArticleListView(ListView):
    model = Article
    paginate_by = 100  # if pagination is desired

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["now"] = timezone.now()
        return context
```

----------------------------------------

TITLE: Configuring STATICFILES_DIRS in Django Settings
DESCRIPTION: Defines additional directories for Django to look for static files outside of app-specific static folders.
SOURCE: https://github.com/django/django/blob/main/docs/howto/static-files/index.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
STATICFILES_DIRS = [
    BASE_DIR / "static",
    "/var/www/static/",
]
```

----------------------------------------

TITLE: Reverse M2M Querying in Django (pycon)
DESCRIPTION: Demonstrates querying from the model that *doesn't* define the `ManyToManyField` (`Publication`) to filter based on attributes of the related model (`Article`). It shows filtering by the `Publication`'s own ID/PK and by attributes of related articles (`article__headline__startswith`, `article__id`, `article__pk`, `article` object instance).
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_15

LANGUAGE: pycon
CODE:
```
>>> Publication.objects.filter(id=1)
<QuerySet [<Publication: The Python Journal>]>
>>> Publication.objects.filter(pk=1)
<QuerySet [<Publication: The Python Journal>]>

>>> Publication.objects.filter(article__headline__startswith="NASA")
<QuerySet [<Publication: Highlights for Children>, <Publication: Science News>, <Publication: Science Weekly>, <Publication: The Python Journal>]>

>>> Publication.objects.filter(article__id=1)
<QuerySet [<Publication: The Python Journal>]>
>>> Publication.objects.filter(article__pk=1)
<QuerySet [<Publication: The Python Journal>]>
>>> Publication.objects.filter(article=1)
<QuerySet [<Publication: The Python Journal>]>
>>> Publication.objects.filter(article=a1)
<QuerySet [<Publication: The Python Journal>]>
```

----------------------------------------

TITLE: Auto-Incrementing Primary Key Example in Django
DESCRIPTION: Demonstrates how auto-incrementing primary keys work when saving new objects to the database.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
>>> b2 = Blog(name="Cheddar Talk", tagline="Thoughts on cheese.")
>>> b2.id  # Returns None, because b2 doesn't have an ID yet.
>>> b2.save()
>>> b2.id  # Returns the ID of your new object.
```

----------------------------------------

TITLE: Accessing Forward M2M Related Objects in Django (pycon)
DESCRIPTION: Retrieves all related `Publication` objects associated with specific `Article` instances (`a1`, `a2`) using the `all()` method on the `ManyToManyField` manager (`publications`). This demonstrates accessing the 'forward' relationship.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_10

LANGUAGE: pycon
CODE:
```
>>> a1.publications.all()
<QuerySet [<Publication: The Python Journal>]>
>>> a2.publications.all()
<QuerySet [<Publication: Highlights for Children>, <Publication: Science News>, <Publication: Science Weekly>, <Publication: The Python Journal>]>
```

----------------------------------------

TITLE: Manual Object Retrieval with Error Handling
DESCRIPTION: Equivalent example showing manual object retrieval and 404 handling without the shortcut.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.http import Http404


def my_view(request):
    try:
        obj = MyModel.objects.get(pk=1)
    except MyModel.DoesNotExist:
        raise Http404("No MyModel matches the given query.")
```

----------------------------------------

TITLE: Accessing Image URL in Django Template
DESCRIPTION: Demonstrates how to access the URL of an uploaded image in a Django template using the 'url' attribute of an ImageField.
SOURCE: https://github.com/django/django/blob/main/docs/faq/usage.txt#2025-04-23_snippet_0

LANGUAGE: django
CODE:
```
{{ object.mug_shot.url }}
```

----------------------------------------

TITLE: Serving Static Files in Development with Django URLconf
DESCRIPTION: Configures URLs to serve static files during development using Django's built-in static file serving view.
SOURCE: https://github.com/django/django/blob/main/docs/howto/static-files/index.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # ... the rest of your URLconf goes here ...
] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
```

----------------------------------------

TITLE: Basic ListView Implementation in Django
DESCRIPTION: Simple example showing how to create a ListView for displaying books ordered by publication date
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.views.generic import ListView
from books.models import Book


class BookListView(ListView):
    queryset = Book.objects.order_by("-publication_date")
    context_object_name = "book_list"
```

----------------------------------------

TITLE: Using functools.partial with on_commit for Parameterized Callbacks
DESCRIPTION: Shows how to register callbacks with parameters by using functools.partial to bind specific arguments to the callback function before registering it with Django's on_commit.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
from functools import partial

for user in users:
    transaction.on_commit(partial(send_invite_email, user=user))
```

----------------------------------------

TITLE: Defining models with foreign key relationships in Django
DESCRIPTION: Shows how to define Django models with ForeignKey relationships that can be used with select_related() to optimize database queries.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_35

LANGUAGE: python
CODE:
```
from django.db import models


class City(models.Model):
    # ...
    pass


class Person(models.Model):
    # ...
    hometown = models.ForeignKey(
        City,
        on_delete=models.SET_NULL,
        blank=True,
        null=True,
    )


class Book(models.Model):
    # ...
    author = models.ForeignKey(Person, on_delete=models.CASCADE)
```

----------------------------------------

TITLE: Creating ContactForm in Django
DESCRIPTION: Example of creating a ContactForm class in Django with name and message fields, and a send_email method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django import forms


class ContactForm(forms.Form):
    name = forms.CharField()
    message = forms.CharField(widget=forms.Textarea)

    def send_email(self):
        # send email using the self.cleaned_data dictionary
        pass
```

----------------------------------------

TITLE: Configuring Django Template Engines
DESCRIPTION: Provides an example of how to configure Django template engines using the TEMPLATES setting in settings.py. This configuration sets up the DjangoTemplates backend with specific options.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            # ... some options here ...
        },
    },
]
```

----------------------------------------

TITLE: Defining ManyToMany with Custom Through Model and through_fields (Django)
DESCRIPTION: Defines three Django models (Person, Group, Membership) to demonstrate a ManyToMany relationship using a custom intermediary model (Membership). It highlights the necessity of 'through_fields' when the intermediary model has multiple foreign keys pointing to the related models, resolving ambiguity.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_41

LANGUAGE: Python
CODE:
```
from django.db import models


class Person(models.Model):
    name = models.CharField(max_length=50)


class Group(models.Model):
    name = models.CharField(max_length=128)
    members = models.ManyToManyField(
        Person,
        through="Membership",
        through_fields=("group", "person"),
    )


class Membership(models.Model):
    group = models.ForeignKey(Group, on_delete=models.CASCADE)
    person = models.ForeignKey(Person, on_delete=models.CASCADE)
    inviter = models.ForeignKey(
        Person,
        on_delete=models.CASCADE,
        related_name="membership_invites",
    )
    invite_reason = models.CharField(max_length=64)
```

----------------------------------------

TITLE: Running Django Server on Specific IP and Port - Shell
DESCRIPTION: Starts the Django development server, binding to the specified IP address (1.2.3.4) and port (7000). This combines specifying both the host interface and the port for server access.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_24

LANGUAGE: shell
CODE:
```
django-admin runserver 1.2.3.4:7000
```

----------------------------------------

TITLE: Adding Related Objects with add() Method in Django ORM - Python
DESCRIPTION: Illustrates the use of the add() method of RelatedManager to associate an existing related object with a parent in a one-to-many relationship. The example fetches Blog and Entry instances, then links Entry to Blog via b.entry_set.add(e). Assumes models and relationships as previously defined. Inputs are the fetched ORM instances; output is a database update associating the records. Requires Django models and a configured database backend.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
>>> b = Blog.objects.get(id=1)
>>> e = Entry.objects.get(id=234)
>>> b.entry_set.add(e)  # Associates Entry e with Blog b.
```

----------------------------------------

TITLE: Using permission_required Decorator in Django
DESCRIPTION: Demonstrates how to use the permission_required decorator to restrict access to a view based on user permissions. The decorator checks if the user has the specified permission.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_26

LANGUAGE: Python
CODE:
```
from django.contrib.auth.decorators import permission_required

@permission_required("polls.add_choice")
def my_view(request): ...
```

----------------------------------------

TITLE: Django Admin Inline Related Objects
DESCRIPTION: Demonstrates how to add inline related objects using StackedInline for editing Choices within the Question admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.contrib import admin

from .models import Choice, Question


class ChoiceInline(admin.StackedInline):
    model = Choice
    extra = 3


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None, {"fields": ["question_text"]}),
        ("Date information", {"fields": ["pub_date"], "classes": ["collapse"]}),
    ]
    inlines = [ChoiceInline]


admin.site.register(Question, QuestionAdmin)
```

----------------------------------------

TITLE: Structuring a Django Project with a Reusable App
DESCRIPTION: Shows the directory structure of a Django project with a reusable 'polls' app. This structure demonstrates how to organize files for both the project and the reusable application.
SOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
djangotutorial/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
    polls/
        __init__.py
        admin.py
        apps.py
        migrations/
            __init__.py
            0001_initial.py
        models.py
        static/
            polls/
                images/
                    background.png
                style.css
        templates/
            polls/
                detail.html
                index.html
                results.html
        tests.py
        urls.py
        views.py
    templates/
        admin/
            base_site.html
```

----------------------------------------

TITLE: Defining URL Pattern with Path Converter in Django URLconf
DESCRIPTION: This snippet shows how to define a URL pattern using Django's path() function with a path converter for capturing a year parameter. It demonstrates naming the URL pattern for reverse lookup.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.urls import path

from . import views

urlpatterns = [
    # ...
    path("articles/<int:year>/", views.year_archive, name="news-year-archive"),
    # ...
]
```

----------------------------------------

TITLE: Returning a Basic JSON Response - Django JsonResponse - Python
DESCRIPTION: This snippet demonstrates how to return a simple JSON response using Django\'s JsonResponse class. After importing JsonResponse from django.http, you can create a response by passing a dictionary to JsonResponse, which is JSON-encoded and served with the correct Content-Type header. The resulting response.content attribute holds the JSON-encoded bytes. The snippet requires Django installed and imported, and the input parameter must by default be a dict for the constructor.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
>>> from django.http import JsonResponse
>>> response = JsonResponse({"foo": "bar"})
>>> response.content
b'{"foo": "bar"}'
```

----------------------------------------

TITLE: Using cached attributes vs callable attributes in Django ORM
DESCRIPTION: Demonstrates the difference between accessing cached attributes and callable attributes in Django ORM. Non-callable attributes are cached after first access, while callable attributes trigger database queries on each call.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> entry = Entry.objects.get(id=1)
>>> entry.blog  # Blog object is retrieved at this point
>>> entry.blog  # cached version, no DB access
```

----------------------------------------

TITLE: Serving Static Files with static() in Django URLconf (Python)
DESCRIPTION: This snippet shows how to serve static or media files during development using the static() helper function. It appends URL patterns for the MEDIA_URL, mapping to files under MEDIA_ROOT. This method is only suitable for development/debug mode and should not be used in production. Requires Django settings to define MEDIA_URL and MEDIA_ROOT, and proper importing from django.conf.
SOURCE: https://github.com/django/django/blob/main/docs/ref/urls.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # ... the rest of your URLconf goes here ...
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
```

----------------------------------------

TITLE: Simplified Pagination URL Generation Using querystring Tag - Django Templates
DESCRIPTION: This snippet shows the new, recommended way to generate paginated links using the 'querystring' template tag introduced in Django 5.1. It replaces complex query parameter reconstruction with a concise declarative tag, reducing template complexity and minimizing errors. It requires Django 5.1+ and the use of its updated template engine. The tag receives keyword arguments (such as page) and outputs the correct query string for the anchor’s href attribute. This approach is limited to contexts where the custom 'querystring' tag is loaded and available.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.txt#2025-04-23_snippet_1

LANGUAGE: html+django
CODE:
```
<a href="{% querystring page=page.next_page_number %}">Next page</a>
```

----------------------------------------

TITLE: Creating a Custom User Model in Django
DESCRIPTION: Demonstrates how to create a custom User model by subclassing AbstractUser. This approach allows for a custom user model that behaves identically to the default but can be extended with additional fields.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.contrib.auth.models import AbstractUser


class User(AbstractUser):
    pass
```

----------------------------------------

TITLE: Updating Existing Django Model Objects
DESCRIPTION: This snippet shows how to update an existing Blog object in the database. It changes the name attribute of an existing Blog instance and calls save() to update the record in the database.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> b5.name = "New name"
>>> b5.save()
```

----------------------------------------

TITLE: Basic Django Test Client Usage - Python
DESCRIPTION: Demonstrates basic usage of Django's test client for making POST and GET requests and checking responses.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.test import Client
>>> c = Client()
>>> response = c.post("/login/", {"username": "john", "password": "smith"})
>>> response.status_code
200
>>> response = c.get("/customer/details/")
>>> response.content
b'<!DOCTYPE html...'
```

----------------------------------------

TITLE: Accessing Cleaned Data after Validation in Django Forms - Python
DESCRIPTION: Demonstrates accessing the cleaned_data attribute after form validation, which contains a dictionary of validated and normalized field values. Only valid fields are included in the dictionary. Requires the form to be bound and is_valid() to return True. Output is a dictionary of clean values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
>>> data = {\n...     \"subject\": \"hello\",\n...     \"message\": \"Hi there\",\n...     \"sender\": \"foo@example.com\",\n...     \"cc_myself\": True,\n... }\n>>> f = ContactForm(data)\n>>> f.is_valid()\nTrue\n>>> f.cleaned_data\n{'cc_myself': True, 'message': 'Hi there', 'sender': 'foo@example.com', 'subject': 'hello'}
```

----------------------------------------

TITLE: Creating Q Objects for Complex Queries in Django
DESCRIPTION: Shows how to create Q objects to encapsulate complex query conditions that can be combined with logical operators for advanced filtering.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_37

LANGUAGE: python
CODE:
```
from django.db.models import Q

Q(question__startswith="What")
```

----------------------------------------

TITLE: Incorrect Usage of Django Settings in Module-Level Code
DESCRIPTION: Illustrates an incorrect way of using Django settings at the module level, which can cause issues with manual configuration. This example shows why lazy loading or indirection should be used instead.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.urls import get_callable

default_foo_view = get_callable(settings.FOO_VIEW)
```

----------------------------------------

TITLE: Running Django Makemigrations Command
DESCRIPTION: Example showing how to create new database migrations using Django's makemigrations command. The command scans model changes and generates migration files.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
$ python manage.py makemigrations
Migrations for 'books':
  books/migrations/0003_auto.py:
    ~ Alter field author on book
```

----------------------------------------

TITLE: Applying Custom Login Behavior to a Django Class-Based View (Python)
DESCRIPTION: This snippet illustrates how to apply the `@login_required` decorator with custom parameters (`login_url`, `redirect_field_name`) to a class-based view (`BookMetrics`). It uses `@method_decorator` to apply the login requirement check specifically to the view's `dispatch` method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/middleware.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
@method_decorator(
    login_required(login_url="/books/login/", redirect_field_name="redirect_to"),
    name="dispatch",
)
class BookMetrics(View):
    pass
```

----------------------------------------

TITLE: Overriding Model Save Method in Django
DESCRIPTION: Demonstrates how to override the `save` method of a Django model to automatically generate a slug from the name field. It also shows how to ensure the 'slug' field is included in `update_fields` if 'name' is updated.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_34

LANGUAGE: Python
CODE:
```
from django.db import models
from django.utils.text import slugify


class Blog(models.Model):
    name = models.CharField(max_length=100)
    slug = models.TextField()

    def save(self, **kwargs):
        self.slug = slugify(self.name)
        if (
            update_fields := kwargs.get("update_fields")
        ) is not None and "name" in update_fields:
            kwargs["update_fields"] = {"slug"}.union(update_fields)
        super().save(**kwargs)
```

----------------------------------------

TITLE: Basic Prefetch Related Usage with Related Fields
DESCRIPTION: Demonstrates how to prefetch pizzas and their toppings in a single query. This will result in 3 database queries - one for restaurants, one for pizzas, and one for toppings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_42

LANGUAGE: python
CODE:
```
>>> Restaurant.objects.prefetch_related("pizzas__toppings")
```

----------------------------------------

TITLE: Recommended vs Not Recommended Prefetch Related Patterns
DESCRIPTION: Compares recommended and not recommended patterns when filtering prefetch results. Using to_attr is clearer than storing filtered results in the related manager's cache.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_51

LANGUAGE: python
CODE:
```
>>> queryset = Pizza.objects.filter(vegetarian=True)
>>>
>>> # Recommended:
>>> restaurants = Restaurant.objects.prefetch_related(
...     Prefetch("pizzas", queryset=queryset, to_attr="vegetarian_pizzas")
... )
>>> vegetarian_pizzas = restaurants[0].vegetarian_pizzas
>>>
>>> # Not recommended:
>>> restaurants = Restaurant.objects.prefetch_related(
...     Prefetch("pizzas", queryset=queryset),
... )
>>> vegetarian_pizzas = restaurants[0].pizzas.all()
```

----------------------------------------

TITLE: Updating a Django Model Field using F() Expressions
DESCRIPTION: Shows how to increment a model field directly in the database using an `F()` expression. This approach avoids loading the value into Python memory, performs the operation atomically at the database level, and helps prevent race conditions. The `F("stories_filed") + 1` construct generates the necessary SQL for the update.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.db.models import F

reporter = Reporters.objects.get(name="Tintin")
reporter.stories_filed = F("stories_filed") + 1
reporter.save()
```

----------------------------------------

TITLE: Basic Translation with gettext in Django View
DESCRIPTION: Demonstrates how to mark a string for translation using Django's gettext function, imported as the alias '_' for convenience. This is the standard way to make strings translatable in Django applications.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.http import HttpResponse
from django.utils.translation import gettext as _


def my_view(request):
    output = _("Welcome to my site.")
    return HttpResponse(output)
```

----------------------------------------

TITLE: Managing Many-to-Many Relationships in Django Models
DESCRIPTION: Illustrates how to work with many-to-many relationships in Django models. Shows querying related objects and using methods like add(), set(), and remove().
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_63

LANGUAGE: python
CODE:
```
e = Entry.objects.get(id=3)
e.authors.all()  # Returns all Author objects for this Entry.
e.authors.count()
e.authors.filter(name__contains="John")

a = Author.objects.get(id=5)
a.entry_set.all()  # Returns all Entry objects for this Author.

a = Author.objects.get(id=5)
a.entry_set.set([e1, e2])
a.entry_set.set([e1.pk, e2.pk])
```

----------------------------------------

TITLE: Querying Related Objects in Django ORM
DESCRIPTION: Shows three equivalent ways to filter querysets using related objects in Django, demonstrating how to query using object instances, instance IDs, or direct ID values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_66

LANGUAGE: python
CODE:
```
Entry.objects.filter(blog=b)  # Query using object instance
Entry.objects.filter(blog=b.id)  # Query using id from instance
Entry.objects.filter(blog=5)  # Query using id directly
```

----------------------------------------

TITLE: Creating Django Project in Specific Directory - Shell
DESCRIPTION: This command initializes a new Django project directory structure with the specified name in a designated target directory path, placing the manage.py file and project package within it.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_40

LANGUAGE: shell
CODE:
```
django-admin startproject myproject /Users/jezdez/Code/myproject_repo
```

----------------------------------------

TITLE: Using text-based lookups without indexes in Django
DESCRIPTION: Demonstrates a potentially slow query using a text-based lookup on a non-indexed column. This can be inefficient as it may return multiple objects and lacks index optimization.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> entry = Entry.objects.get(headline__startswith="News")
```

----------------------------------------

TITLE: Retrieving All Book Objects with Django ORM (pycon)
DESCRIPTION: Demonstrates how to retrieve all objects for the `Book` model using `Book.objects.all()`. This forms a basic `QuerySet` representing all books, which can subsequently be used as a base for aggregation operations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_2

LANGUAGE: pycon
CODE:
```
>>> Book.objects.all()
```

----------------------------------------

TITLE: Defining AUTHENTICATION_BACKENDS setting
DESCRIPTION: This setting specifies the authentication backend classes to use for user authentication. It is a list of strings that represent authentication backend classes. Refer to the authentication backends documentation for more details. The default value is ['django.contrib.auth.backends.ModelBackend'].
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_69



----------------------------------------

TITLE: Authenticating Users with ModelBackend in Django (Python)
DESCRIPTION: Authenticates a user using username and password via `User.check_password`. If username isn't provided, it uses `USERNAME_FIELD` from kwargs. `request` is an optional HttpRequest. Returns the authenticated user object or `None`. The asynchronous version `aauthenticate()` was added in Django 5.2.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
authenticate(request, username=None, password=None, **kwargs)
```

LANGUAGE: python
CODE:
```
aauthenticate(request, username=None, password=None, **kwargs)
```

----------------------------------------

TITLE: Implementing Vote Handling in Django View
DESCRIPTION: This Python code defines a view function to handle the voting process. It retrieves the selected choice, increments the vote count, and redirects to the results page.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial04.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.db.models import F
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse

from .models import Choice, Question


def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST["choice"])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(
            request,
            "polls/detail.html",
            {
                "question": question,
                "error_message": "You didn't select a choice.",
            },
        )
    else:
        selected_choice.votes = F("votes") + 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse("polls:results", args=(question.id,)))
```

----------------------------------------

TITLE: Accessing Related Objects in Django Models
DESCRIPTION: Demonstrates how to access related objects through foreign key relationships in Django models. Shows forward and reverse access, as well as caching behavior.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_60

LANGUAGE: pycon
CODE:
```
>>> e = Entry.objects.get(id=2)
>>> e.blog  # Returns the related Blog object.

>>> e = Entry.objects.get(id=2)
>>> e.blog = some_blog
>>> e.save()

>>> e = Entry.objects.get(id=2)
>>> e.blog = None
>>> e.save()  # "UPDATE blog_entry SET blog_id = NULL ...;"

>>> e = Entry.objects.get(id=2)
>>> print(e.blog)  # Hits the database to retrieve the associated Blog.
>>> print(e.blog)  # Doesn't hit the database; uses cached version.

>>> e = Entry.objects.select_related().get(id=2)
>>> print(e.blog)  # Doesn't hit the database; uses cached version.
>>> print(e.blog)  # Doesn't hit the database; uses cached version.
```

----------------------------------------

TITLE: Creating Django Template for Polls List
DESCRIPTION: HTML template that displays a list of poll questions with links to their detail pages. Uses Django template language for conditional rendering and iteration.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_3

LANGUAGE: html
CODE:
```
{% if latest_question_list %}
    <ul>
    {% for question in latest_question_list %}
        <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No polls are available.</p>
{% endif %}
```

----------------------------------------

TITLE: Defining Database-computed Default Field Values in Django Models - Python
DESCRIPTION: Showcases the use of the `db_default` parameter on Django model fields to specify a database-side computed default in Python. Requires Django 5.0. Imports are from `django.db` and `django.db.models.functions`. Key parameters: `db_default` can be a static value or database function (e.g., Now, Pi). Inputs: new model instance creation; outputs: fields that default at the database layer if not set when saved. Limitations: Only supported by databases and Django 5.0+; behaviors may vary by backend.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
from django.db import models\nfrom django.db.models.functions import Now, Pi\n\n\nclass MyModel(models.Model):\n    age = models.IntegerField(db_default=18)\n    created = models.DateTimeField(db_default=Now())\n    circumference = models.FloatField(db_default=2 * Pi())
```

----------------------------------------

TITLE: Rendering Templates with Django's render() Function
DESCRIPTION: Example showing how to use Django's render() shortcut to render a template with context data and custom MIME type.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.shortcuts import render


def my_view(request):
    # View code here...
    return render(
        request,
        "myapp/index.html",
        {
            "foo": "bar",
        },
        content_type="application/xhtml+xml",
    )
```

----------------------------------------

TITLE: Accessing Django Form Field Value in Template
DESCRIPTION: Shows how to access and display the value of a form field in a Django template.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_13

LANGUAGE: html+django
CODE:
```
{{ field.value }}
```

----------------------------------------

TITLE: Improved Detail View Using get_object_or_404
DESCRIPTION: Refactored detail view using Django's get_object_or_404 shortcut function for cleaner error handling.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.shortcuts import get_object_or_404, render

from .models import Question


# ...
def detail(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, "polls/detail.html", {"question": question})
```

----------------------------------------

TITLE: Updating Django Settings for Custom App
DESCRIPTION: Configuration update in Django settings.py to include the newly installed polls app in INSTALLED_APPS.
SOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
INSTALLED_APPS = [
    "django_polls.apps.PollsConfig",
    ...,
]
```

----------------------------------------

TITLE: Custom Model Validation in Django Article Class
DESCRIPTION: Demonstrates implementing custom validation logic in a model's clean() method to validate publication dates based on article status.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
import datetime
from django.core.exceptions import ValidationError
from django.db import models
from django.utils.translation import gettext_lazy as _


class Article(models.Model):
    ...

    def clean(self):
        # Don't allow draft entries to have a pub_date.
        if self.status == "draft" and self.pub_date is not None:
            raise ValidationError(_("Draft entries may not have a publication date."))
        # Set the pub_date for published items if it hasn't been set already.
        if self.status == "published" and self.pub_date is None:
            self.pub_date = datetime.date.today()
```

----------------------------------------

TITLE: Using ModelAdmin Methods in list_display
DESCRIPTION: Example showing how to use a ModelAdmin method with the admin.display decorator in list_display for custom column rendering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    list_display = ["upper_case_name"]

    @admin.display(description="Name")
    def upper_case_name(self, obj):
        return f"{obj.first_name} {obj.last_name}".upper()
```

----------------------------------------

TITLE: Converting Strings to URL Slugs - Django - Python
DESCRIPTION: Demonstrates the usage of django.utils.text.slugify to convert strings into URL-usable slugs. Handles both ASCII and Unicode modes, replacing invalid characters and whitespace. Requires django.utils.text.slugify. Parameters: value (string to slugify), allow_unicode (bool). Output: slugified string in lowercase, with non-slug characters stripped or transformed. Limitation: only supports Unicode slugs if allow_unicode=True.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_33

LANGUAGE: pycon
CODE:
```
>>> slugify(" Joel is a slug ")
'joel-is-a-slug'
```

LANGUAGE: pycon
CODE:
```
>>> slugify("你好 World", allow_unicode=True)
'你好-world'
```

----------------------------------------

TITLE: Complete Form Field Loop with Help Text in Django
DESCRIPTION: Demonstrates how to loop through form fields while including error messages, labels, and help text
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_11

LANGUAGE: html+django
CODE:
```
{% for field in form %}
    <div class="fieldWrapper">
        {{ field.errors }}
        {{ field.label_tag }} {{ field }}
        {% if field.help_text %}
          <p class="help" id="{{ field.auto_id }}_helptext">
            {{ field.help_text|safe }}
          </p>
        {% endif %}
    </div>
{% endfor %}
```

----------------------------------------

TITLE: Implementing Generic Views for Django Polls App
DESCRIPTION: This snippet showcases the implementation of generic views for a Django polls application. It includes ListView for the index page and DetailView for both detail and results pages. The vote function remains unchanged. The views are customized using attributes like template_name and context_object_name.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial04.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.db.models import F
from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse
from django.views import generic

from .models import Choice, Question


class IndexView(generic.ListView):
    template_name = "polls/index.html"
    context_object_name = "latest_question_list"

    def get_queryset(self):
        """Return the last five published questions."""
        return Question.objects.order_by("-pub_date")[:5]


class DetailView(generic.DetailView):
    model = Question
    template_name = "polls/detail.html"


class ResultsView(generic.DetailView):
    model = Question
    template_name = "polls/results.html"


def vote(request, question_id):
    # same as above, no changes needed.
    ...
```

----------------------------------------

TITLE: Raising ValidationError in Django - Python
DESCRIPTION: Demonstrates correct and incorrect usage patterns for raising ValidationError in Django form and field validation. Highlights how to include descriptive error codes, use parameter interpolation, and wrap messages with translation for localization. Dependencies include Django's forms framework and translation utility (_), where inputs are dynamically substituted in localized error messages and limitations apply if not adhering to recommended practices.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
# Good
ValidationError(_("Invalid value"), code="invalid")

# Bad
ValidationError(_("Invalid value"))
```

----------------------------------------

TITLE: Defining Model Choices with models.TextChoices (Python)
DESCRIPTION: Presents the modern approach using `models.TextChoices` (or `IntegerChoices`, etc.) to define choices as an enumeration type within the model class. Each enum member is defined with the field value and a human-readable label (which can be translatable). This method provides a concise and structured way to manage choices.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_6

LANGUAGE: Python
CODE:
```
from django.utils.translation import gettext_lazy as _
from django.db import models

class Student(models.Model):
    class YearInSchool(models.TextChoices):
        FRESHMAN = "FR", _("Freshman")
        SOPHOMORE = "SO", _("Sophomore")
        JUNIOR = "JR", _("Junior")
        SENIOR = "SR", _("Senior")
        GRADUATE = "GR", _("Graduate")

    year_in_school = models.CharField(
        max_length=2,
        choices=YearInSchool,
        default=YearInSchool.FRESHMAN,
    )

    def is_upperclass(self):
        return self.year_in_school in {
            self.YearInSchool.JUNIOR,
            self.YearInSchool.SENIOR,
        }
```

----------------------------------------

TITLE: Following nested foreign keys with select_related in Django
DESCRIPTION: Demonstrates how to use select_related() to follow nested foreign key relationships, reducing multiple database queries into a single query with JOINs.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_36

LANGUAGE: python
CODE:
```
# Hits the database with joins to the author and hometown tables.
b = Book.objects.select_related("author__hometown").get(id=4)
p = b.author  # Doesn't hit the database.
c = p.hometown  # Doesn't hit the database.

# Without select_related()...
b = Book.objects.get(id=4)  # Hits the database.
p = b.author  # Hits the database.
c = p.hometown  # Hits the database.
```

----------------------------------------

TITLE: Implementing a FormView for Contact Form in Django
DESCRIPTION: Creates a `ContactFormView` by subclassing `django.views.generic.edit.FormView`. It specifies the template (`contact.html`), the form class (`ContactForm`), and the URL to redirect to upon successful submission (`/thanks/`). It overrides the `form_valid` method to call the form's `send_email` method before executing the default redirection behavior.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from myapp.forms import ContactForm
from django.views.generic.edit import FormView


class ContactFormView(FormView):
    template_name = "contact.html"
    form_class = ContactForm
    success_url = "/thanks/"

    def form_valid(self, form):
        # This method is called when valid form data has been POSTed.
        # It should return an HttpResponse.
        form.send_email()
        return super().form_valid(form)
```

----------------------------------------

TITLE: Defining CreateView Class in Django
DESCRIPTION: Displays a form for creating a new object, handles form submission, and saves the new object. Combines form and model handling.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
class CreateView():
    # Attributes
    content_type
    context_object_name
    extra_context
    fields
    form_class
    http_method_names

    # Methods not explicitly listed in the snippet
```

----------------------------------------

TITLE: Filtering QuerySet and Returning Dictionaries (All Fields) Python
DESCRIPTION: Filters a QuerySet and then applies values() to return dictionaries instead of model instances. By default, values() includes all fields from the model as key-value pairs in the dictionaries.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_15

LANGUAGE: Python
CODE:
```
>>> Blog.objects.filter(name__startswith="Beatles").values()
```

----------------------------------------

TITLE: Function-Based View Pagination
DESCRIPTION: Demonstrates how to implement pagination in a function-based view using the Paginator class directly with a queryset.
SOURCE: https://github.com/django/django/blob/main/docs/topics/pagination.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.core.paginator import Paginator
from django.shortcuts import render

from myapp.models import Contact


def listing(request):
    contact_list = Contact.objects.all()
    paginator = Paginator(contact_list, 25)  # Show 25 contacts per page.

    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)
    return render(request, "list.html", {"page_obj": page_obj})
```

----------------------------------------

TITLE: Performing Common Aggregation Queries with Django ORM (pycon)
DESCRIPTION: Provides a series of quick examples (cheat sheet) demonstrating common aggregation tasks using the Django ORM on the predefined models. Covers counting objects (`count`), filtering before counting, calculating average (`Avg`) and maximum (`Max`) values with defaults, computing differences between aggregates, annotating QuerySets with counts (`Count`) across relationships, using conditional aggregation with `Q` objects, and ordering/limiting annotated results. Requires importing `Avg`, `Max`, `Count`, `Q`, `FloatField` from `django.db.models`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_1

LANGUAGE: pycon
CODE:
```
# Total number of books.
>>> Book.objects.count()
2452

# Total number of books with publisher=BaloneyPress
>>> Book.objects.filter(publisher__name="BaloneyPress").count()
73

# Average price across all books, provide default to be returned instead
# of None if no books exist.
>>> from django.db.models import Avg
>>> Book.objects.aggregate(Avg("price", default=0))
{'price__avg': 34.35}

# Max price across all books, provide default to be returned instead of
# None if no books exist.
>>> from django.db.models import Max
>>> Book.objects.aggregate(Max("price", default=0))
{'price__max': Decimal('81.20')}

# Difference between the highest priced book and the average price of all books.
>>> from django.db.models import FloatField
>>> Book.objects.aggregate(
...     price_diff=Max("price", output_field=FloatField()) - Avg("price")
... )
{'price_diff': 46.85}

# All the following queries involve traversing the Book<->Publisher
# foreign key relationship backwards.

# Each publisher, each with a count of books as a "num_books" attribute.
>>> from django.db.models import Count
>>> pubs = Publisher.objects.annotate(num_books=Count("book"))
>>> pubs
<QuerySet [<Publisher: BaloneyPress>, <Publisher: SalamiPress>, ...]>
>>> pubs[0].num_books
73

# Each publisher, with a separate count of books with a rating above and below 5
>>> from django.db.models import Q
>>> above_5 = Count("book", filter=Q(book__rating__gt=5))
>>> below_5 = Count("book", filter=Q(book__rating__lte=5))
>>> pubs = Publisher.objects.annotate(below_5=below_5).annotate(above_5=above_5)
>>> pubs[0].above_5
23
>>> pubs[0].below_5
12

# The top 5 publishers, in order by number of books.
>>> pubs = Publisher.objects.annotate(num_books=Count("book")).order_by("-num_books")[:5]
>>> pubs[0].num_books
1323
```

----------------------------------------

TITLE: Conditional Rendering with if Tag in Django Templates
DESCRIPTION: The if tag evaluates conditions and renders content based on the result. It supports boolean operators, comparison operators, and filters for complex conditions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_19

LANGUAGE: html+django
CODE:
```
{% if athlete_list %}
    Number of athletes: {{ athlete_list|length }}
{% elif athlete_in_locker_room_list %}
    Athletes should be out of the locker room soon!
{% else %}
    No athletes.
{% endif %}
```

LANGUAGE: html+django
CODE:
```
{% if athlete_list and coach_list %}
    Both athletes and coaches are available.
{% endif %}
```

LANGUAGE: html+django
CODE:
```
{% if somevar == "x" %}
  This appears if variable somevar equals the string "x"
{% endif %}
```

LANGUAGE: html+django
CODE:
```
{% if messages|length >= 100 %}
   You have lots of messages today!
{% endif %}
```

----------------------------------------

TITLE: Serializing Non-Dict Objects in JsonResponse - Django - Python
DESCRIPTION: This snippet illustrates passing a non-dictionary object (such as a list) to the Django JsonResponse constructor by setting the 'safe' parameter to False. This bypasses the default type check. The resulting instance is a valid JsonResponse and can return any JSON-serializable data, though using dicts is generally encouraged for extensibility and forward compatibility.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
>>> response = JsonResponse([1, 2, 3], safe=False)
```

----------------------------------------

TITLE: Enabling LoginRequiredMiddleware in Django Settings (Python)
DESCRIPTION: This configuration snippet shows how to add the `LoginRequiredMiddleware` to the `MIDDLEWARE` list in a Django project's settings. It is crucial to place it *after* `AuthenticationMiddleware` to ensure the user information is available.
SOURCE: https://github.com/django/django/blob/main/docs/ref/middleware.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
MIDDLEWARE = [
    "...",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.auth.middleware.LoginRequiredMiddleware",
    "...",
]
```

----------------------------------------

TITLE: Django ListView Implementation
DESCRIPTION: Basic ListView implementation for displaying questions in the polls application.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class IndexView(generic.ListView):
    template_name = "polls/index.html"
    context_object_name = "latest_question_list"

    def get_queryset(self):
        """Return the last five published questions."""
        return Question.objects.order_by("-pub_date")[:5]
```

----------------------------------------

TITLE: Implementing Cross-Field Validation with Non-Field Errors in Django Python
DESCRIPTION: This snippet demonstrates cross-field validation using the form's `clean()` method. It checks if the `cc_myself` field is True and if the `subject` field does not contain the word 'help'. If both conditions are met, it raises a `ValidationError`, which results in a non-field error displayed at the top of the form. It calls `super().clean()` first to ensure parent validation logic runs.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django import forms
from django.core.exceptions import ValidationError


class ContactForm(forms.Form):
    # Everything as before.
    ...

    def clean(self):
        cleaned_data = super().clean()
        cc_myself = cleaned_data.get("cc_myself")
        subject = cleaned_data.get("subject")

        if cc_myself and subject:
            # Only do something if both fields are valid so far.
            if "help" not in subject:
                raise ValidationError(
                    "Did not send for 'help' in the subject despite CC'ing yourself."
                )
```

----------------------------------------

TITLE: Implementing JSON Response Mixin in Django
DESCRIPTION: Mixin class for adding JSON response capabilities to views with data transformation handling.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.http import JsonResponse


class JSONResponseMixin:
    def render_to_json_response(self, context, **response_kwargs):
        return JsonResponse(self.get_data(context), **response_kwargs)

    def get_data(self, context):
        return context
```

----------------------------------------

TITLE: Accessing and Setting QueryDict Values in Python
DESCRIPTION: Demonstrates how to access the last value for a key and set a new value in a mutable QueryDict.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> q = QueryDict("a=1&a=2&a=3", mutable=True)
>>> q.__getitem__("a")
'3'
>>> q.__setitem__("b", [])
>>> q.__getitem__("b")
[]
```

----------------------------------------

TITLE: Defining a Basic Class-Based View Handling GET Requests in Django
DESCRIPTION: This snippet demonstrates the class-based view equivalent for handling a GET request. It defines a class `MyView` inheriting from `django.views.View`. The logic specific to the GET method is encapsulated within the `get` method of the class, eliminating the need for conditional checks on the request method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
from django.views import View


class MyView(View):
    def get(self, request):
        # <view logic>
        return HttpResponse("result")
```

----------------------------------------

TITLE: Defining a Basic Contact Form in Django
DESCRIPTION: Defines a simple `ContactForm` class inheriting from `django.forms.Form`. It includes a `name` CharField and a `message` CharField using a Textarea widget. It also includes a placeholder `send_email` method intended to process the cleaned form data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django import forms


class ContactForm(forms.Form):
    name = forms.CharField()
    message = forms.CharField(widget=forms.Textarea)

    def send_email(self):
        # send email using the self.cleaned_data dictionary
        pass
```

----------------------------------------

TITLE: Displaying Messages in Django Templates
DESCRIPTION: Django template code for displaying messages with their associated tags as CSS classes
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_3

LANGUAGE: html
CODE:
```
{% if messages %}
<ul class="messages">
    {% for message in messages %}
    <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
    {% endfor %}
</ul>
{% endif %}
```

----------------------------------------

TITLE: Using LoginRequiredMixin in Django Class-Based Views
DESCRIPTION: Shows how to use the LoginRequiredMixin with class-based views to require authentication. This mixin provides similar functionality to the login_required decorator.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_21

LANGUAGE: Python
CODE:
```
from django.contrib.auth.mixins import LoginRequiredMixin

class MyView(LoginRequiredMixin, View):
    login_url = "/login/"
    redirect_field_name = "redirect_to"
```

----------------------------------------

TITLE: Defining One-to-One Relationships in Django Models
DESCRIPTION: Shows how to define and use one-to-one relationships in Django models. Demonstrates accessing related objects through the relationship.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_64

LANGUAGE: python
CODE:
```
class EntryDetail(models.Model):
    entry = models.OneToOneField(Entry, on_delete=models.CASCADE)
    details = models.TextField()


ed = EntryDetail.objects.get(id=2)
ed.entry  # Returns the related Entry object.
```

----------------------------------------

TITLE: Creating Functional and Field Indexes with Django ORM (Python)
DESCRIPTION: Demonstrates how to define a database index using expressions and multiple fields in Django models via the Index class. Assumes 'Lower', 'F', 'Round', and model fields are imported from django.db.models and related modules. Key parameters include 'expressions' for functional indexes and 'name' for the explicit index name. The snippet shows how to specify descending order with .desc() and combine field computations; expected inputs are field names and expressions, output is a model Meta option that creates the corresponding database index.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/indexes.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
Index(Lower("title").desc(), "pub_date", name="lower_title_date_idx")
```

LANGUAGE: Python
CODE:
```
Index(F("height") * F("weight"), Round("weight"), name="calc_idx")
```

----------------------------------------

TITLE: Disabling Variable Auto-Escaping with Django `safe` Filter
DESCRIPTION: Demonstrates using the `safe` template filter in Django to render a variable's content directly without HTML escaping. This is useful when the variable `data` contains pre-formatted HTML or non-HTML text that should not be escaped. The first line shows default escaping, the second shows escaping disabled.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_15

LANGUAGE: html+django
CODE:
```
This will be escaped: {{ data }}
This will not be escaped: {{ data|safe }}
```

----------------------------------------

TITLE: Using Related Fields in ModelAdmin list_display
DESCRIPTION: Example of displaying related fields using the __ notation in list_display to show data from related models.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    list_display = ["city__name"]
```

----------------------------------------

TITLE: Applying CSRF Protection to a View in Django
DESCRIPTION: This snippet shows how to use the csrf_protect decorator to apply CSRF protection to a specific view function.
SOURCE: https://github.com/django/django/blob/main/docs/ref/csrf.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.shortcuts import render
from django.views.decorators.csrf import csrf_protect


@csrf_protect
def my_view(request):
    c = {}
    # ...
    return render(request, "a_template.html", c)
```

----------------------------------------

TITLE: Creating Automated Test for Django Question Model
DESCRIPTION: This code snippet shows how to create an automated test for the Question model in Django. It tests the was_published_recently() method to ensure it returns False for questions with future publication dates.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
import datetime

from django.test import TestCase
from django.utils import timezone

from .models import Question


class QuestionModelTests(TestCase):
    def test_was_published_recently_with_future_question(self):
        """
        was_published_recently() returns False for questions whose pub_date
        is in the future.
        """
        time = timezone.now() + datetime.timedelta(days=30)
        future_question = Question(pub_date=time)
        self.assertIs(future_question.was_published_recently(), False)
```

----------------------------------------

TITLE: Annotating and Querying Author Ratings in Django ORM
DESCRIPTION: This snippet demonstrates how to use the annotate() method to calculate the average rating for each author's books, and then use values() to return the author's name and average rating. The order of annotate() and values() is significant in determining the grouping and output.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_24

LANGUAGE: pycon
CODE:
```
>>> Author.objects.annotate(average_rating=Avg("book__rating")).values(
...     "name", "average_rating"
... )
```

----------------------------------------

TITLE: Using Callable Default for Mutable Field in Django (Python)
DESCRIPTION: Demonstrates how to use a callable function as the default value for a mutable field like Django's JSONField. This is necessary to ensure that each new model instance receives a unique default object (e.g., a new dictionary) rather than sharing a reference to the same mutable object.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_16

LANGUAGE: Python
CODE:
```
def contact_default():
    return {"email": "to1@example.com"}


contact_info = JSONField("ContactInfo", default=contact_default)
```

----------------------------------------

TITLE: Calling Django's URL Safety Check Function in Python
DESCRIPTION: This code snippet shows the usage of Django's `is_safe_url()` function, which is the focus of the security fix. This function is used to check if a URL is safe for redirection.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.20.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
django.utils.http.is_safe_url()
```

----------------------------------------

TITLE: Configuring Raw ID Field Selection Widget - Django Admin in Python
DESCRIPTION: Shows how to use the raw_id_fields attribute to change the widget for a ForeignKey in the admin from a standard select box to a raw ID field with a search magnifier. This approach is helpful when the related model has too many instances to efficiently display in a dropdown. Accepts a list of field names and integrates with the admin’s search popup interface.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_35

LANGUAGE: python
CODE:
```
class ArticleAdmin(admin.ModelAdmin):
    raw_id_fields = ["newspaper"]
```

----------------------------------------

TITLE: Invalid Manager Call on Abstract Model Django
DESCRIPTION: This snippet demonstrates an incorrect usage pattern where a manager method (`do_something()`) is called directly on an abstract model class (`AbstractBase`). This action is invalid because managers are associated with concrete model instances and collections, not abstract definitions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_16

LANGUAGE: Python
CODE:
```
AbstractBase.objects.do_something()
```

----------------------------------------

TITLE: Providing Default Value When Variable is False in Django Templates - HTML+Django
DESCRIPTION: Demonstrates the use of the 'default' filter to return a fallback value when a template variable evaluates to False (empty, None, etc). This requires no additional dependencies and is integral to Django templates. The variable and default string ('nothing') are inputs; output is either the original value or the default when falsy.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_55

LANGUAGE: html+django
CODE:
```
{{ value|default:"nothing" }}
```

----------------------------------------

TITLE: Using Django's default test client in TestCase
DESCRIPTION: This snippet demonstrates how to use Django's default test client in a TestCase subclass, which provides the client as self.client.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_28

LANGUAGE: Python
CODE:
```
from django.test import TestCase


class SimpleTest(TestCase):
    def test_details(self):
        response = self.client.get("/customer/details/")
        self.assertEqual(response.status_code, 200)

    def test_index(self):
        response = self.client.get("/customer/index/")
        self.assertEqual(response.status_code, 200)
```

----------------------------------------

TITLE: Django URL Pattern Configuration
DESCRIPTION: Defines URL routing for the 'item_list' view, associating a URL pattern with the corresponding view function. Uses Django's urls module to map URL to view, enabling web navigation to the item list page.
SOURCE: https://github.com/django/django/blob/main/tests/view_tests/media/%2F.txt#_snippet_2

LANGUAGE: Python
CODE:
```
urlpatterns = [
    path('items/', views.item_list, name='item_list'),
]
```

----------------------------------------

TITLE: Annotating QuerySet with Calculated Fields using F Expressions - Django ORM - Python
DESCRIPTION: This snippet demonstrates how to use Django's F expressions to annotate a queryset, adding a calculated field 'chairs_needed' by subtracting one model field from another (num_chairs from num_employees). F expressions allow referencing model fields directly in queries, enabling database-side computations for efficient and atomic updates. No external dependencies are required beyond Django's ORM, and num_employees and num_chairs must be numeric fields within the Company model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
company = Company.objects.annotate(chairs_needed=F("num_employees") - F("num_chairs"))
```

----------------------------------------

TITLE: Filtering DetailView Queryset in Django Python
DESCRIPTION: This snippet shows how to override the `get_queryset` method in a Django generic `DetailView`. The purpose is to exclude any 'Question' objects whose publication date (`pub_date`) is in the future, ensuring only published questions are accessible via this view. It filters the `Question` model objects where `pub_date` is less than or equal to the current time using `timezone.now()`.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
.. code-block:: python
    :caption: ``polls/views.py``

    class DetailView(generic.DetailView):
        ...

        def get_queryset(self):
            """
            Excludes any questions that aren't published yet.
            """
            return Question.objects.filter(pub_date__lte=timezone.now())
```

----------------------------------------

TITLE: Defining Custom User Model with Identifier Field in Django
DESCRIPTION: Example of customizing a user model by setting the USERNAME_FIELD to a custom identifier field. This shows how to specify a field other than username as the unique identifier.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
class MyUser(AbstractBaseUser):
    identifier = models.CharField(max_length=40, unique=True)
    ...
    USERNAME_FIELD = "identifier"
```

----------------------------------------

TITLE: Sending HTML and Text Email with EmailMultiAlternatives
DESCRIPTION: Example demonstrating how to send an email with both HTML and plain text content using EmailMultiAlternatives.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.core.mail import EmailMultiAlternatives

subject = "hello"
from_email = "from@example.com"
to = "to@example.com"
text_content = "This is an important message."
html_content = "<p>This is an <strong>important</strong> message.</p>"
msg = EmailMultiAlternatives(subject, text_content, from_email, [to])
msg.attach_alternative(html_content, "text/html")
msg.send()
```

----------------------------------------

TITLE: ModelAdmin with Custom Field Display
DESCRIPTION: Shows how to customize field display in the admin interface with list_display and custom view methods.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.contrib import admin


class AuthorAdmin(admin.ModelAdmin):
    list_display = ["name", "title", "view_birth_date"]

    @admin.display(empty_value="???")
    def view_birth_date(self, obj):
        return obj.birth_date
```

----------------------------------------

TITLE: Defining IntegerChoices for Model Field (Python/Django)
DESCRIPTION: Shows how to define an `IntegerChoices` enumeration within a Django model class. This enumeration provides integer values and corresponding labels, suitable for use with an `models.IntegerField` by setting the `choices` attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_8

LANGUAGE: Python
CODE:
```
class Card(models.Model):
    class Suit(models.IntegerChoices):
        DIAMOND = 1
        SPADE = 2
        HEART = 3
        CLUB = 4

    suit = models.IntegerField(choices=Suit)
```

----------------------------------------

TITLE: Creating Related Objects with create() Method in Django ORM - Python
DESCRIPTION: Provides an example of using the RelatedManager's create() method to instantiate, save, and associate a new related object in a single operation. Fetches a Blog instance and creates a new Entry with specified fields, automatically setting the foreign key. Inputs are the parent instance and model fields; outputs the created and saved Entry object. Requires correct model definitions and Django's ORM.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
>>> b = Blog.objects.get(id=1)
>>> e = b.entry_set.create(
...     headline="Hello", body_text="Hi", pub_date=datetime.date(2005, 1, 1)
... )

# No need to call e.save() at this point -- it's already been saved.
```

----------------------------------------

TITLE: Basic Django URL Pattern Configuration
DESCRIPTION: Example URLconf showing basic URL pattern mapping using path() with both static and dynamic URL parameters. Demonstrates how to capture integer and slug values from URLs.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.urls import path

from . import views

urlpatterns = [
    path("articles/2003/", views.special_case_2003),
    path("articles/<int:year>/", views.year_archive),
    path("articles/<int:year>/<int:month>/", views.month_archive),
    path("articles/<int:year>/<int:month>/<slug:slug>/", views.article_detail),
]
```

----------------------------------------

TITLE: Overriding get_context_data in Django ContextMixin
DESCRIPTION: Shows how to override the get_context_data method in a Django view that uses ContextMixin. This method allows you to add custom data to the template context, such as a random number in this example.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-simple.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context["number"] = random.randrange(1, 100)
    return context
```

----------------------------------------

TITLE: Using Filters and Operators in If Tag Conditions in HTML+Django
DESCRIPTION: This snippet illustrates using filters and operators within an `{% if %}` tag's condition. The condition `athlete_list|length > 1` checks if the number of elements in `athlete_list` (obtained via the `length` filter) is greater than 1. If true, it executes the block intended for a team (content omitted). If false (meaning 0 or 1 athlete), the `{% else %}` block executes, displaying the name of the first athlete (`athlete_list.0.name`). It notes that while `length` works for numeric comparison, most filters return strings, making mathematical comparisons generally unreliable.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_7

LANGUAGE: html+django
CODE:
```
{% if athlete_list|length > 1 %}
   Team: {% for athlete in athlete_list %} ... {% endfor %}
{% else %}
   Athlete: {{ athlete_list.0.name }}
{% endif %}
```

----------------------------------------

TITLE: Using Django's Bulk Update Method
DESCRIPTION: Shows how to use bulk_update() to efficiently update multiple objects in a single database query rather than saving each object individually.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
entries = Entry.objects.bulk_create(
    [
        Entry(headline="This is a test"),
        Entry(headline="This is only a test"),
    ]
)
```

LANGUAGE: python
CODE:
```
entries[0].headline = "This is not a test"
entries[1].headline = "This is no longer a test"
Entry.objects.bulk_update(entries, ["headline"])
```

LANGUAGE: python
CODE:
```
entries[0].headline = "This is not a test"
entries[0].save()
entries[1].headline = "This is no longer a test"
entries[1].save()
```

----------------------------------------

TITLE: Basic Logging Configuration in Django Settings
DESCRIPTION: Demonstrates the basic LOGGING dictionary configuration in settings.py with version and existing loggers retention.
SOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
LOGGING = {
    "version": 1,  # the dictConfig format version
    "disable_existing_loggers": False,  # retain the default loggers
}
```

----------------------------------------

TITLE: Setting All M2M Relationships with set() (pycon)
DESCRIPTION: Illustrates using the `set()` method on the `ManyToManyField` manager (`a4.publications`). This method replaces all existing relationships for `a4` with the ones provided in the list (`[p3]`). Any previous relationships not in the list are removed.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_24

LANGUAGE: pycon
CODE:
```
>>> a4.publications.all() 
<QuerySet [<Publication: Science News>]>
>>> a4.publications.set([p3])
>>> a4.publications.all()
<QuerySet [<Publication: Science Weekly>]>
```

----------------------------------------

TITLE: Modifying Session Data in Django Views
DESCRIPTION: This snippet illustrates different ways to modify session data in Django views, including setting, deleting, and updating nested dictionary values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
# Session is modified.
request.session["foo"] = "bar"

# Session is modified.
del request.session["foo"]

# Session is modified.
request.session["foo"] = {}

# Gotcha: Session is NOT modified, because this alters
# request.session['foo'] instead of request.session.
request.session["foo"]["bar"] = "baz"

request.session.modified = True
```

----------------------------------------

TITLE: Creating OR Conditions with Q Objects in Django
DESCRIPTION: Uses Django's Q objects to create an OR condition in a database query, which allows for more complex queries than standard keyword arguments.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_38

LANGUAGE: python
CODE:
```
Q(question__startswith="Who") | Q(question__startswith="What")
```

----------------------------------------

TITLE: Conditional Discount Based on Registration Date - Django ORM - Python
DESCRIPTION: Queries for clients and annotates a discount field based on registration date, calculating thresholds for a month and year. Demonstrates ordered evaluation of When objects in a Case clause, providing discounts for early registrants. Requires imports of date, timedelta, Case, When, and Value.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> a_month_ago = date.today() - timedelta(days=30)
>>> a_year_ago = date.today() - timedelta(days=365)
>>> # Get the discount for each Client based on the registration date
>>> Client.objects.annotate(
...     discount=Case(
...         When(registered_on__lte=a_year_ago, then=Value("10%")),
...         When(registered_on__lte=a_month_ago, then=Value("5%")),
...         default=Value("0%"),
...     )
... ).values_list("name", "discount")
<QuerySet [("Jane Doe", "5%"), ("James Smith", "0%"), ("Jack Black", "10%")]> 
```

----------------------------------------

TITLE: Rendering Hidden and Visible Django Form Fields Separately
DESCRIPTION: This snippet demonstrates how to loop over and render hidden and visible form fields separately in a Django template, including error handling for visible fields.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_14

LANGUAGE: html+django
CODE:
```
{# Include the hidden fields #}
{% for hidden in form.hidden_fields %}
{{ hidden }}
{% endfor %}
{# Include the visible fields #}
{% for field in form.visible_fields %}
    <div class="fieldWrapper">
        {{ field.errors }}
        {{ field.label_tag }} {{ field }}
    </div>
{% endfor %}
```

----------------------------------------

TITLE: Publisher Book Count Annotation
DESCRIPTION: Shows how to annotate publishers with their total book count using reverse relationship traversal.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
from django.db.models import Avg, Count, Min, Sum
Publisher.objects.annotate(Count("book"))
```

----------------------------------------

TITLE: Using Multiple Q Objects with AND and OR Conditions in Django
DESCRIPTION: Shows how to pass multiple Q objects to a lookup function to create complex AND and OR conditions in a single query.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_41

LANGUAGE: python
CODE:
```
Poll.objects.get(
    Q(question__startswith="Who"),
    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),
)
```

----------------------------------------

TITLE: Configuring Logger Hierarchy in Django
DESCRIPTION: Demonstrates how to set up logger hierarchies with propagation control for different application components.
SOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
"loggers": {
    "my_app": {
        # ...
    },
    "my_app.views": {
        # ...
    },
    "my_app.views.private": {
        # ...
        "propagate": False,
    },
}
```

----------------------------------------

TITLE: Configuring URL Pattern for a TemplateView in Django
DESCRIPTION: Shows how to set up a URL pattern for a custom TemplateView in Django's urls.py file.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/base.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.urls import path

from myapp.views import HomePageView

urlpatterns = [
    path("", HomePageView.as_view(), name="home"),
]
```

----------------------------------------

TITLE: Running Tests with Warnings after Upgrade
DESCRIPTION: Command to run Django tests after upgrading, with warnings enabled to identify any new compatibility issues or deprecated features being used in the codebase.
SOURCE: https://github.com/django/django/blob/main/docs/howto/upgrade-version.txt#2025-04-23_snippet_3

LANGUAGE: console
CODE:
```
$ python -Wa manage.py test
```

----------------------------------------

TITLE: Creating a Base HTML Template with Django Template Language
DESCRIPTION: This snippet demonstrates how to create a base HTML template using Django's template language. It includes the use of static files, template blocks for title and content, and shows the basic structure of a reusable base template.
SOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_6

LANGUAGE: html+django
CODE:
```
{% load static %}
<html lang="en">
<head>
    <title>{% block title %}{% endblock %}</title>
</head>
<body>
    <img src="{% static 'images/sitelogo.png' %}" alt="Logo">
    {% block content %}{% endblock %}
</body>
</html>
```

----------------------------------------

TITLE: Updating Boolean Fields with Logical Negation of F Expression - Django ORM - Python
DESCRIPTION: This snippet shows how to logically negate a BooleanField using the ~ operator on an F expression. It updates the 'is_active' field for all Company objects by flipping its current boolean value. This operation is performed in the database for efficiency and atomicity, and requires that 'is_active' be a BooleanField.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.db.models import F

Company.objects.update(is_active=~F("is_active"))
```

----------------------------------------

TITLE: Using SearchVector for Multi-field PostgreSQL Search in Django
DESCRIPTION: Demonstrates how to use SearchVector to search across multiple fields and related models in Django with PostgreSQL. This enables more comprehensive search capabilities by combining different text sources.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/search.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> Entry.objects.annotate(
...     search=SearchVector("blog__tagline", "body_text"),
... ).filter(search="cheese")
[
    <Entry: Cheese on Toast recipes>,
    <Entry: Pizza Recipes>,
    <Entry: Dairy farming in Argentina>,
]
```

----------------------------------------

TITLE: Comparing Count Operations at Different Levels in Django
DESCRIPTION: Demonstrates performance differences between counting items at database, Python, and template levels. Shows how database-level operations are typically faster than higher-level abstractions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/performance.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
# QuerySet operation on the database
# fast, because that's what databases are good at
my_bicycles.count()

# counting Python objects
# slower, because it requires a database query anyway, and processing
# of the Python objects
len(my_bicycles)
```

LANGUAGE: html
CODE:
```
<!--
Django template filter
slower still, because it will have to count them in Python anyway,
and because of template language overheads
-->
{{ my_bicycles|length }}
```

----------------------------------------

TITLE: Accessing HTTP Headers in Django Request
DESCRIPTION: Example of accessing HTTP headers through the request.headers dictionary-like object. This shows how headers can be accessed case-insensitively using dictionary syntax.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> request.headers
{'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6', ...}

>>> "User-Agent" in request.headers
True
>>> "user-agent" in request.headers
True

>>> request.headers["User-Agent"]
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)
>>> request.headers["user-agent"]
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)

>>> request.headers.get("User-Agent")
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)
>>> request.headers.get("user-agent")
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)
```

----------------------------------------

TITLE: Basic Django File Logging Configuration
DESCRIPTION: A simple logging configuration that writes debug-level logs to a file. Defines a basic file handler and logger for Django applications.
SOURCE: https://github.com/django/django/blob/main/docs/topics/logging.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "/path/to/django/debug.log",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}
```

----------------------------------------

TITLE: Sending Single Email to Multiple Recipients with Django
DESCRIPTION: Shows how to send a single email to multiple recipients where all recipients appear in the "To:" field. This is a simple example using send_mail() with multiple email addresses in the recipient_list.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
send_mail(
    "Subject",
    "Message.",
    "from@example.com",
    ["john@example.com", "jane@example.com"],
)
```

----------------------------------------

TITLE: Bulk Deleting Django Objects with QuerySet
DESCRIPTION: Demonstrates how to delete multiple Django model instances in bulk using the QuerySet delete() method with filtering.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_48

LANGUAGE: python
CODE:
```
>>> Entry.objects.filter(pub_date__year=2005).delete()
(5, {'webapp.Entry': 5})
```

----------------------------------------

TITLE: Django Test Client POST Request - Python
DESCRIPTION: Shows how to make POST requests with form data using Django's test client.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> c = Client()
>>> c.post("/login/", {"name": "fred", "passwd": "secret"})
```

----------------------------------------

TITLE: Writing a Data Migration in Django
DESCRIPTION: Illustrates how to write a data migration that combines 'first_name' and 'last_name' fields into a new 'name' field. Uses RunPython operation to execute custom Python code during migration.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.db import migrations


def combine_names(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    Person = apps.get_model("yourappname", "Person")
    for person in Person.objects.all():
        person.name = f"{person.first_name} {person.last_name}"
        person.save()


class Migration(migrations.Migration):
    dependencies = [
        ("yourappname", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(combine_names),
    ]
```

----------------------------------------

TITLE: Data Migration between Django Models
DESCRIPTION: Demonstrates how to migrate data from an old model to a new model using a forward migration operation. Includes handling for cases where the old app may not be installed.
SOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.db import migrations

def forwards(apps, schema_editor):
    try:
        OldModel = apps.get_model("old_app", "OldModel")
    except LookupError:
        # The old app isn't installed.
        return

    NewModel = apps.get_model("new_app", "NewModel")
    NewModel.objects.bulk_create(
        NewModel(new_attribute=old_object.old_attribute)
        for old_object in OldModel.objects.all()
    )


class Migration(migrations.Migration):
    operations = [
        migrations.RunPython(forwards, migrations.RunPython.noop),
    ]
    dependencies = [
        ("myapp", "0123_the_previous_migration"),
        ("new_app", "0001_initial"),
    ]

    if global_apps.is_installed("old_app"):
        dependencies.append(("old_app", "0001_initial"))
```

----------------------------------------

TITLE: Excluding Specific Fields in Django ModelForm
DESCRIPTION: This example demonstrates how to create a ModelForm that excludes specific fields from the model. The form will include all fields except those listed in the exclude attribute.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
class PartialAuthorForm(ModelForm):
    class Meta:
        model = Author
        exclude = ["title"]
```

----------------------------------------

TITLE: Configuring URL Routing for a Django Class-Based View in Python
DESCRIPTION: Defines a URL pattern using `django.urls.path` to route requests to the `/publishers/` URL to the `PublisherListView`. It calls the `.as_view()` class method on `PublisherListView` to get a callable view function suitable for Django's URL dispatcher.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
# urls.py
from django.urls import path
from books.views import PublisherListView

urlpatterns = [
    path("publishers/", PublisherListView.as_view()),
]
```

----------------------------------------

TITLE: Using atomic Context Manager for Transaction Management in Django
DESCRIPTION: Example demonstrating how to use atomic as a context manager to create a transaction block within a function. This allows for more fine-grained control over transaction boundaries.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.db import transaction


def viewfunc(request):
    # This code executes in autocommit mode (Django's default).
    do_stuff()

    with transaction.atomic():
        # This code executes inside a transaction.
        do_more_stuff()
```

----------------------------------------

TITLE: Single Object Retrieval Using get()
DESCRIPTION: Shows how to retrieve a single object using the get() method with a primary key lookup.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> one_entry = Entry.objects.get(pk=1)
```

----------------------------------------

TITLE: Configuring Django Middleware in Settings
DESCRIPTION: Default MIDDLEWARE configuration created by django-admin startproject. This shows the standard middleware stack that handles security, sessions, common functionality, CSRF protection, authentication, messages, and clickjacking protection.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
```

----------------------------------------

TITLE: Creating User Message with Django Messages Framework (Python)
DESCRIPTION: This snippet demonstrates the current, recommended way to add user messages using the `django.contrib.messages` framework introduced before Django 1.2 but made standard then. It uses the `add_message` function, requiring the request object, message level, and message text.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
from django.contrib import messages

messages.add_message(request, messages.INFO, "a message")
```

----------------------------------------

TITLE: Using format_html for Safe HTML Formatting in Python
DESCRIPTION: Demonstrates the use of format_html function to safely build HTML fragments. It escapes all arguments except the format string, preventing XSS vulnerabilities.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
format_html(
    "{} <b>{}</b> {}",
    mark_safe(some_html),
    some_text,
    some_other_text,
)
```

----------------------------------------

TITLE: Implementing a Username and Password Authentication Backend in Django (Python)
DESCRIPTION: This code demonstrates how to implement a custom Django authentication backend class that authenticates users using a username and password. It subclasses BaseBackend and defines the required authenticate method, which receives the request, username, and password. The example structure provides a placeholder for checking credentials and returning a suitable user object if valid, or None otherwise. It requires Django's authentication framework and is designed to fit into the AUTHENTICATION_BACKENDS setting.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib.auth.backends import BaseBackend


class MyBackend(BaseBackend):
    def authenticate(self, request, username=None, password=None):
        # Check the username/password and return a user.
        ...
```

----------------------------------------

TITLE: Combining Login Required and Permission Required Decorators in Django
DESCRIPTION: Shows how to combine the @login_required and @permission_required decorators to ensure a user is both logged in and has the necessary permissions before accessing a view.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
from django.contrib.auth.decorators import login_required, permission_required

@login_required
@permission_required("polls.add_choice", raise_exception=True)
def my_view(request): ...
```

----------------------------------------

TITLE: Adding App to INSTALLED_APPS (Python)
DESCRIPTION: This Python snippet shows how to configure Django settings to include an application that contains models. The application's module name, e.g., "myapp", must be added to the `INSTALLED_APPS` list in the project's settings file (`settings.py`). This step is necessary for Django to discover and use the models defined within the app.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_2

LANGUAGE: Python
CODE:
```
INSTALLED_APPS = [
    # ...
    "myapp",
    # ...
]
```

----------------------------------------

TITLE: Adding Custom Method to Django Manager Python
DESCRIPTION: Defines a custom `PollManager` that adds a `with_counts` method using `annotate` and `Coalesce` to count related responses. This manager is then assigned to the `objects` attribute of the `OpinionPoll` model, allowing queries like `OpinionPoll.objects.with_counts()`. Requires `django.db.models` and `django.db.models.functions`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_1

LANGUAGE: python
CODE:
```
from django.db import models
from django.db.models.functions import Coalesce


class PollManager(models.Manager):
    def with_counts(self):
        return self.annotate(num_responses=Coalesce(models.Count("response"), 0))


class OpinionPoll(models.Model):
    question = models.CharField(max_length=200)
    objects = PollManager()


class Response(models.Model):
    poll = models.ForeignKey(OpinionPoll, on_delete=models.CASCADE)
    # ...
```

----------------------------------------

TITLE: Using update_or_create in Django
DESCRIPTION: Demonstrates the usage of update_or_create() method to update an existing object or create a new one if it doesn't exist. The example shows how to use the 'defaults' and 'create_defaults' parameters, and the equivalent boilerplate code it replaces. Requires a 'Person' model with 'first_name', 'last_name', and 'birthday' fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_75

LANGUAGE: python
CODE:
```
obj, created = Person.objects.update_or_create(
    first_name="John",
    last_name="Lennon",
    defaults={"first_name": "Bob"},
    create_defaults={"first_name": "Bob", "birthday": date(1940, 10, 9)},
)
```

----------------------------------------

TITLE: Efficiently Adding Multiple Objects to ManyToManyField
DESCRIPTION: Demonstrates how to add multiple objects to a ManyToManyField in a single operation to reduce SQL queries.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
my_band.members.add(me, my_friend)
```

LANGUAGE: python
CODE:
```
my_band.members.add(me)
my_band.members.add(my_friend)
```

----------------------------------------

TITLE: Creating a Django Form Class
DESCRIPTION: Example of defining a simple Django Form class with a single CharField. The example demonstrates creating a form field with a label and maximum length constraint.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django import forms


class NameForm(forms.Form):
    your_name = forms.CharField(label="Your name", max_length=100)
```

----------------------------------------

TITLE: Importing Django Settings in Python Code
DESCRIPTION: Demonstrates how to import and use Django settings in Python code, including a conditional statement based on the DEBUG setting.
SOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.conf import settings

if settings.DEBUG:
    # Do something
    ...
```

----------------------------------------

TITLE: Registering Models in Django Admin
DESCRIPTION: This Python code registers the Question model in the Django admin interface, making it accessible and editable through the admin site.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.contrib import admin

from .models import Question

admin.site.register(Question)
```

----------------------------------------

TITLE: Getting the First Object with first() Method in Django ORM
DESCRIPTION: This example shows the use of first() to fetch the first object matching a QuerySet, returning None if empty. If no explicit ordering is set, Django defaults to ordering by the primary key. It's a convenient method to quickly access the first record without loading all objects. Dependencies include Django ORM, and it's used in models with appropriate ordering considerations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_83

LANGUAGE: Python
CODE:
```
p = Article.objects.order_by("title", "pub_date").first()
```

----------------------------------------

TITLE: Counting Records Using Django ORM's count() Method
DESCRIPTION: This snippet explains the usage of the count() method in Django's QuerySet to efficiently obtain the total number of matching records in the database, avoiding loading entire objects into memory. It also mentions the asynchronous variant acount() and compares count() with len() for performance considerations. Dependencies include the Django ORM and a configured database connection.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_78

LANGUAGE: Python
CODE:
```
Entry.objects.count()
Entry.objects.filter(headline__contains="Lennon").count()
```

----------------------------------------

TITLE: Implementing Sync/Async Compatible Django Middleware
DESCRIPTION: Example of creating middleware that supports both synchronous and asynchronous requests using the sync_and_async_middleware decorator.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from asgiref.sync import iscoroutinefunction
from django.utils.decorators import sync_and_async_middleware

@sync_and_async_middleware
def simple_middleware(get_response):
    # One-time configuration and initialization goes here.
    if iscoroutinefunction(get_response):

        async def middleware(request):
            # Do something here!
            response = await get_response(request)
            return response

    else:

        def middleware(request):
            # Do something here!
            response = get_response(request)
            return response

    return middleware
```

----------------------------------------

TITLE: Limiting QuerySets with Slicing
DESCRIPTION: Examples of using Python's slice syntax to limit QuerySet results, equivalent to SQL LIMIT and OFFSET.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> Entry.objects.all()[:5]
```

LANGUAGE: python
CODE:
```
>>> Entry.objects.all()[5:10]
```

LANGUAGE: python
CODE:
```
>>> Entry.objects.all()[:10:2]
```

----------------------------------------

TITLE: Defining URL Pattern in Django URLconf
DESCRIPTION: Shows how to define a URL pattern in Django's URLconf with a client ID parameter.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_45

LANGUAGE: python
CODE:
```
path("client/<int:id>/", app_views.client, name="app-views-client")
```

----------------------------------------

TITLE: Using F Expressions for Field Updates in Django
DESCRIPTION: Demonstrates how to use Django's F expressions to update a field based on its current value, useful for incrementing counters.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_59

LANGUAGE: python
CODE:
```
>>> Entry.objects.update(number_of_pingbacks=F("number_of_pingbacks") + 1)
```

----------------------------------------

TITLE: Defining Basic View Django Python
DESCRIPTION: Defines a minimal view function named `index` within the `polls/views.py` file. This function accepts an `HttpRequest` object and returns a simple `HttpResponse` containing a hardcoded string, demonstrating the most basic form of a Django view.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#_snippet_4

LANGUAGE: Python
CODE:
```
from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")
```

----------------------------------------

TITLE: Implementing CSRF Token in Django HTML Template
DESCRIPTION: Demonstrates how to include the CSRF token in a Django HTML template for POST forms targeting internal URLs.
SOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_0

LANGUAGE: html
CODE:
```
<form method="post">{% csrf_token %}
```

----------------------------------------

TITLE: Including Other URLconfs in Django
DESCRIPTION: This snippet shows how to include other URLconf modules in Django's main URLconf. It demonstrates the use of the 'include' function to incorporate URL patterns from other modules, allowing for modular URL configuration.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
from django.urls import include, path

urlpatterns = [
    # ... snip ...
    path("community/", include("aggregator.urls")),
    path("contact/", include("contact.urls")),
    # ... snip ...
]
```

----------------------------------------

TITLE: Using Django ORM for Database Operations
DESCRIPTION: This snippet showcases how to use Django's ORM to perform various database operations such as creating, querying, and modifying objects.
SOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
# Import the models we created from our "news" app
>>> from news.models import Article, Reporter

# No reporters are in the system yet.
>>> Reporter.objects.all()
<QuerySet []>

# Create a new Reporter.
>>> r = Reporter(full_name="John Smith")

# Save the object into the database. You have to call save() explicitly.
>>> r.save()

# Now it has an ID.
>>> r.id
1

# Now the new reporter is in the database.
>>> Reporter.objects.all()
<QuerySet [<Reporter: John Smith>]>

# Fields are represented as attributes on the Python object.
>>> r.full_name
'John Smith'

# Django provides a rich database lookup API.
>>> Reporter.objects.get(id=1)
<Reporter: John Smith>
>>> Reporter.objects.get(full_name__startswith="John")
<Reporter: John Smith>
>>> Reporter.objects.get(full_name__contains="mith")
<Reporter: John Smith>
>>> Reporter.objects.get(id=2)
Traceback (most recent call last):
    ...
DoesNotExist: Reporter matching query does not exist.

# Create an article.
>>> from datetime import date
>>> a = Article(
...     pub_date=date.today(), headline="Django is cool", content="Yeah.", reporter=r
... )
>>> a.save()

# Now the article is in the database.
>>> Article.objects.all()
<QuerySet [<Article: Django is cool>]>

# Article objects get API access to related Reporter objects.
>>> r = a.reporter
>>> r.full_name
'John Smith'

# And vice versa: Reporter objects get API access to Article objects.
>>> r.article_set.all()
<QuerySet [<Article: Django is cool>]>

# The API follows relationships as far as you need, performing efficient
# JOINs for you behind the scenes.
# This finds all articles by a reporter whose name starts with "John".
>>> Article.objects.filter(reporter__full_name__startswith="John")
<QuerySet [<Article: Django is cool>]>

# Change an object by altering its attributes and calling save().
>>> r.full_name = "Billy Goat"
>>> r.save()

# Delete an object with delete().
>>> r.delete()
```

----------------------------------------

TITLE: Checking HTTP Method in Django View
DESCRIPTION: Example of how to check the HTTP method used in a request and perform different actions based on whether it's a GET or POST request. The request.method attribute is guaranteed to be uppercase.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
if request.method == "GET":
    do_something()
elif request.method == "POST":
    do_something_else()
```

----------------------------------------

TITLE: Raising PermissionDenied in Django Views - Python
DESCRIPTION: This snippet demonstrates how to raise a django.core.exceptions.PermissionDenied exception within a Django view to trigger a 403 Forbidden error response. It requires the Django framework and imports the PermissionDenied exception. The edit function checks if the requesting user is a staff member, and raises the exception if access should be denied. The main input is an HTTP request, and on access denial, a 403 response is returned by the framework.
SOURCE: https://github.com/django/django/blob/main/docs/ref/views.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.core.exceptions import PermissionDenied


def edit(request, pk):
    if not request.user.is_staff:
        raise PermissionDenied
    # ...
```

----------------------------------------

TITLE: Setting CSRF Token in AJAX Request using Fetch API
DESCRIPTION: Shows how to set the CSRF token as a header in an AJAX request using the Fetch API.
SOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_3

LANGUAGE: javascript
CODE:
```
const request = new Request(
    /* URL */,
    {
        method: 'POST',
        headers: {'X-CSRFToken': csrftoken},
        mode: 'same-origin' // Do not send CSRF token to another domain.
    }
);
fetch(request).then(function(response) {
    // ...
});
```

----------------------------------------

TITLE: Apache configuration for serving Django and static files
DESCRIPTION: Complete Apache configuration for serving both Django application via mod_wsgi and static files (robots.txt, favicon.ico, static and media directories) from the same Apache VirtualHost.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/modwsgi.txt#2025-04-23_snippet_5

LANGUAGE: apache
CODE:
```
Alias /robots.txt /path/to/mysite.com/static/robots.txt
Alias /favicon.ico /path/to/mysite.com/static/favicon.ico

Alias /media/ /path/to/mysite.com/media/
Alias /static/ /path/to/mysite.com/static/

<Directory /path/to/mysite.com/static>
Require all granted
</Directory>

<Directory /path/to/mysite.com/media>
Require all granted
</Directory>

WSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py

<Directory /path/to/mysite.com/mysite>
<Files wsgi.py>
Require all granted
</Files>
</Directory>
```

----------------------------------------

TITLE: Running Django Development Server Shell
DESCRIPTION: Command executed from the project's root directory (containing `manage.py`) to start Django's built-in lightweight development web server. This server is used for local testing during development and is not suitable for production.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#_snippet_2

LANGUAGE: Shell
CODE:
```
python manage.py runserver
```

----------------------------------------

TITLE: Basic Django Cache Operations
DESCRIPTION: Shows basic cache operations including setting, getting, and checking for existence of cache keys.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_31

LANGUAGE: pycon
CODE:
```
>>> cache.set("my_key", "hello, world!", 30)

>>> cache.get("my_key")
'hello, world!'

>>> # Wait 30 seconds for 'my_key' to expire...
>>> cache.get("my_key")
None

>>> sentinel = object()
>>> cache.get("my_key", sentinel) is sentinel
False
>>> # Wait 30 seconds for 'my_key' to expire...
>>> cache.get("my_key", sentinel) is sentinel
True

>>> cache.get("my_key", "has expired")
'has expired'
```

----------------------------------------

TITLE: Performing Asynchronous ORM Queries in Django using Python
DESCRIPTION: Illustrates how to perform asynchronous database queries using Django's ORM. It shows iterating over a QuerySet asynchronously using `async for` on `Author.objects.filter()` and awaiting related object retrieval with the `a`-prefixed method `author.books.afirst()`. This pattern utilizes the async-native ORM methods introduced for improved performance in async contexts.
SOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
async for author in Author.objects.filter(name__startswith="A"):
    book = await author.books.afirst()
```

----------------------------------------

TITLE: Creating Django App Shell
DESCRIPTION: Command executed from the project's root directory (containing `manage.py`) to generate the basic directory structure and boilerplate files for a new application within the Django project, named `polls`. This creates a standard app structure for modular development.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#_snippet_3

LANGUAGE: Shell
CODE:
```
python manage.py startapp polls
```

----------------------------------------

TITLE: Deleting Individual Django Model Instances
DESCRIPTION: Shows how to delete an individual Django model instance using the delete() method, which returns the count of deleted objects.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_47

LANGUAGE: python
CODE:
```
>>> e.delete()
(1, {'blog.Entry': 1})
```

----------------------------------------

TITLE: Registering Django Models in Admin Interface
DESCRIPTION: This snippet shows how to register Django models in the admin interface, allowing authenticated users to manage content through a web-based interface.
SOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.db import models


class Article(models.Model):
    pub_date = models.DateField()
    headline = models.CharField(max_length=200)
    content = models.TextField()
    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)
```

LANGUAGE: python
CODE:
```
from django.contrib import admin

from . import models

admin.site.register(models.Article)
```

----------------------------------------

TITLE: Setting Widget Arguments and Choices in Django Forms Using Python
DESCRIPTION: Illustrates how to supply additional arguments and choices to widgets, such as limiting date select options and populating multiple choice selections. Assumes Django; the code shows how to configure widgets via their arguments and the choices parameter. Inputs include constants for years and color choices; outputs are form fields configured with the respective widgets and attribute values. Limitations depend on available widget options.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django import forms

BIRTH_YEAR_CHOICES = ["1980", "1981", "1982"]
FAVORITE_COLORS_CHOICES = {
    "blue": "Blue",
    "green": "Green",
    "black": "Black",
}


class SimpleForm(forms.Form):
    birth_year = forms.DateField(
        widget=forms.SelectDateWidget(years=BIRTH_YEAR_CHOICES)
    )
    favorite_colors = forms.MultipleChoiceField(
        required=False,
        widget=forms.CheckboxSelectMultiple,
        choices=FAVORITE_COLORS_CHOICES,
    )
```

----------------------------------------

TITLE: Instantiating and Cleaning a Django EmailField
DESCRIPTION: Demonstrates how to directly instantiate a Django `EmailField` and use its `clean()` method. The method validates the input value, returning the cleaned value if valid or raising a `ValidationError` if invalid. This example shows both a valid email and an invalid string.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_0

LANGUAGE: pycon
CODE:
```
>>> from django import forms
>>> f = forms.EmailField()
>>> f.clean("foo@example.com")
'foo@example.com'
>>> f.clean("invalid email address")
Traceback (most recent call last):
...
ValidationError: ['Enter a valid email address.']
```

----------------------------------------

TITLE: Decorating Individual Class-Based View Instances in URLconf (Python/Django)
DESCRIPTION: This example demonstrates how to apply decorators to individual instances of class-based views in the URLconf. It shows login_required and permission_required decorators being applied to TemplateView and VoteView respectively.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.contrib.auth.decorators import login_required, permission_required
from django.views.generic import TemplateView

from .views import VoteView

urlpatterns = [
    path("about/", login_required(TemplateView.as_view(template_name="secret.html"))),
    path("vote/", permission_required("polls.can_vote")(VoteView.as_view())),
]
```

----------------------------------------

TITLE: Defining Django's Default Logging Configuration (Python)
DESCRIPTION: This Python dictionary defines the default logging configuration used by Django, accessible as `django.utils.log.DEFAULT_LOGGING`. It utilizes Python's `logging.config.dictConfig` format. It sets up filters (`RequireDebugFalse`, `RequireDebugTrue`), formatters (`django.server`), handlers (`console`, `django.server`, `mail_admins` using `logging.StreamHandler` and `django.utils.log.AdminEmailHandler`), and loggers (`django`, `django.server`). This configuration dictates how log messages are processed based on level and the `DEBUG` setting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
{
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[{server_time}] {message}",
            "style": "{",
        }
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
    },
}
```

----------------------------------------

TITLE: Defining One-to-One Relationships with OneToOneField in Django
DESCRIPTION: This snippet demonstrates defining one-to-one relationships using Django's `OneToOneField`. It shows linking a custom model to the built-in user model twice, once with the default reverse name and once with a custom `related_name`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_42

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.db import models


class MySpecialUser(models.Model):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
    )
    supervisor = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="supervisor_of",
    )
```

----------------------------------------

TITLE: Installing Django with pip - DOS Prompt
DESCRIPTION: Installs the latest version of the Django package using pip within the currently active virtual environment. The command `py -m pip install Django` ensures pip is run via the Python launcher, using the Python interpreter associated with the active environment.
SOURCE: https://github.com/django/django/blob/main/docs/howto/windows.txt#_snippet_3

LANGUAGE: doscon
CODE:
```
...\> py -m pip install Django
```

----------------------------------------

TITLE: Starting Default Django Shell - Shell
DESCRIPTION: Starts the Python interactive interpreter with the Django environment configured. By default, it attempts to use IPython or bpython if installed, otherwise falling back to the standard Python shell, with project models automatically imported.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_31

LANGUAGE: shell
CODE:
```
django-admin shell
```

----------------------------------------

TITLE: Creating a FileField Form in Django
DESCRIPTION: Defines a Django form containing a FileField for handling file uploads. This form allows users to input a title (as a CharField) and upload a file.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django import forms


class UploadFileForm(forms.Form):
    title = forms.CharField(max_length=50)
    file = forms.FileField()
```

----------------------------------------

TITLE: Implementing Format-Aware Django View Methods
DESCRIPTION: A set of Django view methods that handle both HTML and JSON response formats based on Accept headers. Includes request dispatch validation, form validation error handling, and successful form submission responses. Uses get_preferred_type() to determine the appropriate response format.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
accepted_media_types = ["text/html", "application/json"]

def dispatch(self, request, *args, **kwargs):
    if request.get_preferred_type(self.accepted_media_types) is None:
        # No format in common.
        return HttpResponse(
            status_code=406, headers={"Accept": ",".join(self.accepted_media_types)}
        )

    return super().dispatch(request, *args, **kwargs)

def form_invalid(self, form):
    response = super().form_invalid(form)
    accepted_type = request.get_preferred_type(self.accepted_media_types)
    if accepted_type == "text/html":
        return response
    elif accepted_type == "application/json":
        return JsonResponse(form.errors, status=400)

def form_valid(self, form):
    # We make sure to call the parent's form_valid() method because
    # it might do some processing (in the case of CreateView, it will
    # call form.save() for example).
    response = super().form_valid(form)
    accepted_type = request.get_preferred_type(self.accepted_media_types)
    if accepted_type == "text/html":
        return response
    elif accepted_type == "application/json":
        data = {
            "pk": self.object.pk,
        }
        return JsonResponse(data)
```

----------------------------------------

TITLE: Field Lookups in Django Queries
DESCRIPTION: Demonstrates various field lookup types including exact, contains, and case-insensitive matches.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
>>> Entry.objects.filter(pub_date__lte="2006-01-01")
```

LANGUAGE: sql
CODE:
```
SELECT * FROM blog_entry WHERE pub_date <= '2006-01-01';
```

LANGUAGE: python
CODE:
```
>>> Entry.objects.get(headline__exact="Cat bites dog")
```

LANGUAGE: python
CODE:
```
>>> Blog.objects.get(name__iexact="beatles blog")
```

----------------------------------------

TITLE: Using Model Fields in ModelAdmin list_display
DESCRIPTION: Example of using model field names in the list_display attribute to display those fields in the admin change list.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    list_display = ["first_name", "last_name"]
```

----------------------------------------

TITLE: Configuring URL for ArticleDetailView in Django
DESCRIPTION: Shows how to set up a URL pattern for the ArticleDetailView, using a slug field for article identification.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-display.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.urls import path

from article.views import ArticleDetailView

urlpatterns = [
    path("<slug:slug>/", ArticleDetailView.as_view(), name="article-detail"),
]
```

----------------------------------------

TITLE: Including Subtemplates Dynamically - HTML+Django Template - html+django
DESCRIPTION: Shows how to use the 'include' tag for template composition, with examples including constant and variable template names, passing extra context, and context isolation using 'only'. Pre-requisites include defined subtemplate files and available context variables (e.g., 'person', 'greeting'). Inputs are the template paths and context; output is rendered HTML with included content, demonstrating flexible partial rendering strategies.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_22

LANGUAGE: html+django
CODE:
```
{% include "foo/bar.html" %}
```

LANGUAGE: html+django
CODE:
```
{% include template_name %}
```

LANGUAGE: html+django
CODE:
```
{% include "name_snippet.html" %}
```

LANGUAGE: html+django
CODE:
```
{{ greeting }}, {{ person|default:"friend" }}!
```

LANGUAGE: html+django
CODE:
```
{% include "name_snippet.html" with person="Jane" greeting="Hello" %}
```

LANGUAGE: html+django
CODE:
```
{% include "name_snippet.html" with greeting="Hi" only %}
```

----------------------------------------

TITLE: Configuring File-Based Sessions
DESCRIPTION: Setting the SESSION_ENGINE to use file-based session storage where session data is stored in files on the server's filesystem.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
"django.contrib.sessions.backends.file"
```

----------------------------------------

TITLE: Using bulk_update in Django
DESCRIPTION: Demonstrates how to efficiently update multiple model instances using bulk_update(). It updates the specified fields on provided model instances generally with one query. This example creates two Entry objects and updates their headlines.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_77

LANGUAGE: python
CODE:
```
objs = [
    Entry.objects.create(headline="Entry 1"),
    Entry.objects.create(headline="Entry 2"),
]
objs[0].headline = "This is entry 1"
objs[1].headline = "This is entry 2"
Entry.objects.bulk_update(objs, ["headline"])
```

----------------------------------------

TITLE: Exempting a Django View from Login Requirement (Python)
DESCRIPTION: This snippet demonstrates how to use the `@login_not_required` decorator from `django.contrib.auth.decorators` to mark a specific view (`contact_us`) as public. This allows unauthenticated users to access the view even if the `LoginRequiredMiddleware` is enabled globally.
SOURCE: https://github.com/django/django/blob/main/docs/ref/middleware.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.contrib.auth.decorators import login_not_required


@login_not_required
def contact_us(request): ...
```

----------------------------------------

TITLE: Creating an Internationalized Password Reset Email Subject in Django
DESCRIPTION: This Django template snippet creates the subject line for password reset emails with internationalization support. It loads the i18n template tag library, disables auto-escaping, and uses blocktranslate to make the subject line translatable with a site name variable.
SOURCE: https://github.com/django/django/blob/main/django/contrib/auth/templates/registration/password_reset_subject.txt#2025-04-23_snippet_0

LANGUAGE: Django Template Language
CODE:
```
{% load i18n %}{% autoescape off %}
{% blocktranslate %}Password reset on {{ site_name }}{% endblocktranslate %}
{% endautoescape %}
```

----------------------------------------

TITLE: Basic QuerySet Filtering in Django
DESCRIPTION: Demonstrates lazy evaluation of QuerySets by stacking multiple filters that only execute when the QuerySet is evaluated.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
>>> q = Entry.objects.filter(headline__startswith="What")
>>> q = q.filter(pub_date__lte=datetime.date.today())
>>> q = q.exclude(body_text__icontains="food")
>>> print(q)
```

----------------------------------------

TITLE: Demonstrating Default Paginator Error Message in Python
DESCRIPTION: This snippet demonstrates how to initialize a Django `Paginator` with a list of items and a specified number of items per page. It then shows the default `EmptyPage` exception that is raised when attempting to access a page number that contains no results (i.e., beyond the last page). It requires importing the `Paginator` class from `django.core.paginator`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/paginator.txt#2025-04-23_snippet_0

LANGUAGE: pycon
CODE:
```
>>> from django.core.paginator import Paginator
>>> paginator = Paginator([1, 2, 3], 2)
>>> paginator.page(5)
Traceback (most recent call last):
  ...
EmptyPage: That page contains no results
```

----------------------------------------

TITLE: Defining ListView Class in Django
DESCRIPTION: Displays a list of objects. Handles pagination and context preparation for multiple objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class ListView():
    # Attributes
    allow_empty
    content_type
    context_object_name
    extra_context
    http_method_names
    model
    ordering
    paginate_by
    paginate_orphans
    paginator_class
    queryset
    response_class
    template_engine
    template_name
    template_name_suffix

    # Methods
    as_view()
    dispatch()
    get()
    get_context_data()
    get_paginator()
    head()
    http_method_not_allowed()
    paginate_queryset()
    render_to_response()
    setup()
```

----------------------------------------

TITLE: Creating Class-Based Views with Success Messages in Django
DESCRIPTION: Example of using SuccessMessageMixin with a CreateView to automatically add success messages when a form is successfully processed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.contrib.messages.views import SuccessMessageMixin
from django.views.generic.edit import CreateView
from myapp.models import Author


class AuthorCreateView(SuccessMessageMixin, CreateView):
    model = Author
    success_url = "/success/"
    success_message = "%(name)s was created successfully"
```

----------------------------------------

TITLE: Configuring Django Template Settings
DESCRIPTION: Configuration of Django TEMPLATES setting in settings.py to specify template directories and options for template loading.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
```

----------------------------------------

TITLE: Using bulk_create in Django
DESCRIPTION: Illustrates how to efficiently insert multiple objects into the database using bulk_create().  Highlights the caveats, including the absence of save() method calls and signal emissions.  Shows usage with batch_size and a generator to avoid memory issues. Requires an 'Entry' model with at least a 'headline' field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_76

LANGUAGE: python
CODE:
```
objs = Entry.objects.bulk_create(
    [
        Entry(headline="This is a test"),
        Entry(headline="This is only a test"),
    ]
)

from itertools import islice

batch_size = 100
objs = (Entry(headline="Test %s" % i) for i in range(1000))
while True:
    batch = list(islice(objs, batch_size))
    if not batch:
        break
    Entry.objects.bulk_create(batch, batch_size)
```

----------------------------------------

TITLE: Defining Routes with path() in Django URLconf (Python)
DESCRIPTION: This snippet demonstrates standard URL pattern definitions in a Django URLconf using the path() function. It shows how to capture URL parameters with or without explicit Python type converters and how to include other URL modules. Dependencies include Django 2.0+ (for path syntax), and all referenced views must be defined in your codebase. Inputs are URL paths, and outputs are matched views with URL parameters passed as arguments. The snippet requires proper imports and a valid Django project structure.
SOURCE: https://github.com/django/django/blob/main/docs/ref/urls.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.urls import include, path

urlpatterns = [
    path("index/", views.index, name="main-view"),
    path("bio/<username>/", views.bio, name="bio"),
    path("articles/<slug:title>/", views.article, name="article-detail"),
    path("articles/<slug:title>/<int:section>/", views.section, name="article-section"),
    path("blog/", include("blog.urls")),
    ...,
]
```

----------------------------------------

TITLE: Configuring Django App Settings
DESCRIPTION: Example of INSTALLED_APPS configuration showing how to explicitly specify an application configuration class.
SOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
INSTALLED_APPS = [
    ...,
    "polls.apps.PollsAppConfig",
    ...,
]
```

----------------------------------------

TITLE: Implementing Conditional Logic with If/Elif/Else Tags in HTML+Django
DESCRIPTION: This snippet demonstrates conditional rendering using `{% if %}`, `{% elif %}`, and `{% else %}` tags. It first checks if `athlete_list` is truthy (not empty). If so, it displays the number of athletes using the `length` filter. If `athlete_list` is false, it checks `athlete_in_locker_room_list`. If that is truthy, a specific message is shown. If both conditions are false, the `{% else %}` block displaying "No athletes." is rendered. Requires `athlete_list` and `athlete_in_locker_room_list` variables in the context.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_6

LANGUAGE: html+django
CODE:
```
{% if athlete_list %}
    Number of athletes: {{ athlete_list|length }}
{% elif athlete_in_locker_room_list %}
    Athletes should be out of the locker room soon!
{% else %}
    No athletes.
{% endif %}
```

----------------------------------------

TITLE: Using length Filter
DESCRIPTION: Shows how to get the length of strings or lists using the length filter.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_75

LANGUAGE: html+django
CODE:
```
{{ value|length }}
```

----------------------------------------

TITLE: Prefetching Foreign Key Relationships with Nested Fields
DESCRIPTION: Shows how to prefetch a foreign key relationship (best_pizza) and its related toppings. This will result in 3 database queries - one for restaurants, one for best pizzas, and one for toppings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_43

LANGUAGE: python
CODE:
```
>>> Restaurant.objects.prefetch_related("best_pizza__toppings")
```

----------------------------------------

TITLE: Using Django makemigrations Management Command
DESCRIPTION: This snippet demonstrates the usage of Django's makemigrations management command. It's mentioned in the context of a bugfix that prevented infinite migrations for models with certain Meta.ordering configurations.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.2.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
python manage.py makemigrations
```

----------------------------------------

TITLE: User Model Methods - Python/Django
DESCRIPTION: Essential methods for User model functionality including password management, permission checking, and user information retrieval
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
def get_username(self):
    """Returns the username"""

def get_full_name(self):
    """Returns first_name plus last_name"""

def get_short_name(self):
    """Returns first_name"""

def set_password(self, raw_password):
    """Sets hashed password"""

def check_password(self, raw_password):
    """Validates password"""

def set_unusable_password(self):
    """Marks user as having no password"""

def has_usable_password(self):
    """Checks if password is usable"""

def get_user_permissions(self, obj=None):
    """Gets direct user permissions"""

def get_group_permissions(self, obj=None):
    """Gets permissions from user's groups"""

def get_all_permissions(self, obj=None):
    """Gets all user permissions"""

def has_perm(self, perm, obj=None):
    """Checks specific permission"""

def has_perms(self, perm_list, obj=None):
    """Checks multiple permissions"""

def has_module_perms(self, package_name):
    """Checks module-level permissions"""
```

----------------------------------------

TITLE: Generic Exception Handling for get() in Django ORM (Python)
DESCRIPTION: Demonstrates handling exceptions across multiple models by catching ObjectDoesNotExist from django.core.exceptions. This approach generalizes error handling for get() calls, ensuring code robustness when queried objects may be absent.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_68

LANGUAGE: python
CODE:
```
from django.core.exceptions import ObjectDoesNotExist

try:
    blog = Blog.objects.get(id=1)
    entry = Entry.objects.get(blog=blog, entry_number=1)
except ObjectDoesNotExist:
    print("Either the blog or entry doesn't exist.")
```

----------------------------------------

TITLE: Implementing ArticleDetailView using Django's DetailView
DESCRIPTION: Demonstrates how to create a custom DetailView for displaying article details. It includes context customization to add the current time.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-display.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.utils import timezone
from django.views.generic.detail import DetailView

from articles.models import Article


class ArticleDetailView(DetailView):
    model = Article

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["now"] = timezone.now()
        return context
```

----------------------------------------

TITLE: Named URL Redirection in Django
DESCRIPTION: Example of using redirect() with a named URL pattern and parameters.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
def my_view(request):
    ...
    return redirect("some-view-name", foo="bar")
```

----------------------------------------

TITLE: Change Django user password (Console)
DESCRIPTION: Shows the usage of the `django-admin changepassword` command, available when `django.contrib.auth` is installed. It allows an administrator to interactively change the password for a specified user account, in this case, the user with the username `ringo`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_46

LANGUAGE: console
CODE:
```
django-admin changepassword ringo
```

----------------------------------------

TITLE: Filtering Django QuerySets with Basic Text Matching
DESCRIPTION: Demonstrates how to perform a simple text-based search on Django models using the contains lookup. This example searches for authors whose names contain a specific substring.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/search.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> Author.objects.filter(name__contains="Terry")
[<Author: Terry Gilliam>, <Author: Terry Jones>]
```

----------------------------------------

TITLE: Starting the Django Management Shell (Console)
DESCRIPTION: Shows the command used to launch the interactive Django management shell. This shell provides an environment to execute Python and Django commands, often used for testing ORM queries or interacting with models.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_9

LANGUAGE: console
CODE:
```
$ python manage.py shell
```

----------------------------------------

TITLE: Defining Composite Primary Keys in Django Models - Python
DESCRIPTION: Demonstrates how to declare a Django model with a composite primary key using CompositePrimaryKey. Shows three model definitions (Product, Order, and OrderLineItem), where OrderLineItem's pk comprises two fields. This example requires Django 5.2+, and utilizes the CompositePrimaryKey class and standard Django model fields; dependencies include 'django.db.models'.
Key parameters: pk (composite), product and order foreign keys, and quantity. Used for designing tables where the primary key is a combination of multiple columns.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class Product(models.Model):
    name = models.CharField(max_length=100)


class Order(models.Model):
    reference = models.CharField(max_length=20, primary_key=True)


class OrderLineItem(models.Model):
    pk = models.CompositePrimaryKey("product_id", "order_id")
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    quantity = models.IntegerField()
```

----------------------------------------

TITLE: Setting Initial Values for Unbound Django Form Fields
DESCRIPTION: Shows how to use the `initial` argument when defining fields (`CharField`, `URLField`) in a Django `Form` (`CommentForm`). These initial values are used to populate the corresponding HTML input elements when rendering an unbound form (a form instantiated without data).
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_5

LANGUAGE: pycon
CODE:
```
>>> from django import forms
>>> class CommentForm(forms.Form):
...     name = forms.CharField(initial="Your name")
...     url = forms.URLField(initial="https://")
...     comment = forms.CharField()
...
>>> f = CommentForm(auto_id=False)
>>> print(f)
<div>Name:<input type="text" name="name" value="Your name" required></div>
<div>Url:<input type="url" name="url" value="https://" required></div>
<div>Comment:<input type="text" name="comment" required></div>
```

----------------------------------------

TITLE: Defining Foreign Key to User Model in Django
DESCRIPTION: Example of defining a foreign key relationship to the user model using settings.AUTH_USER_MODEL instead of directly referencing User model. This ensures compatibility with custom user models.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.db import models


class Article(models.Model):
    author = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
    )
```

----------------------------------------

TITLE: Overriding Save Method Django Python
DESCRIPTION: Illustrates how to override the default `save()` method on a Django model to execute custom logic before and after the object is saved to the database. It is crucial to call `super().save(**kwargs)` to ensure the object is actually saved.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_32

LANGUAGE: Python
CODE:
```
from django.db import models


class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def save(self, **kwargs):
        do_something()
        super().save(**kwargs)  # Call the "real" save() method.
        do_something_else()
```

----------------------------------------

TITLE: Using the Length Filter in HTML+Django Template
DESCRIPTION: This snippet shows the usage of the `length` template filter. `{{ value|length }}` outputs the number of items in the `value` variable. This filter works correctly for sequences like strings (character count) and lists (item count). The example mentions that if `value` is `['a', 'b', 'c', 'd']`, the output will be `4`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_3

LANGUAGE: html+django
CODE:
```
{{ value|length }}
```

----------------------------------------

TITLE: Applying Login Required Decorator in Django Python
DESCRIPTION: This code snippet shows how to apply the login_required decorator to a view in Django, which is mentioned as a mitigation for the security issue.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.22.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
django.contrib.auth.decorators.login_required
```

----------------------------------------

TITLE: Using Model Methods in Django ModelAdmin list_display
DESCRIPTION: Example showing how to use model methods with the admin.display decorator in list_display to display calculated data in the admin.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.db import models


class Person(models.Model):
    name = models.CharField(max_length=50)
    birthday = models.DateField()

    @admin.display(description="Birth decade")
    def decade_born_in(self):
        decade = self.birthday.year // 10 * 10
        return f"{decade}'s"


class PersonAdmin(admin.ModelAdmin):
    list_display = ["name", "decade_born_in"]
```

----------------------------------------

TITLE: Defining IntegerField in Django
DESCRIPTION: Documents the IntegerField for storing standard integer values. It uses built-in validators to ensure values are within the range supported by default databases and uses NumberInput or TextInput as its default form widget.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_26

LANGUAGE: Python
CODE:
```
IntegerField(**options)
```

----------------------------------------

TITLE: Iterating Over Related Django ORM Objects in Templates
DESCRIPTION: Shows how to iterate over related objects in a Django template using the ORM's reverse foreign key accessor (e.g., `task.comment_set.all`). This allows accessing and looping through all related `Comment` objects associated with a `Task` object (`task`) directly within the template.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_25

LANGUAGE: html+django
CODE:
```
{% for comment in task.comment_set.all %}
    {{ comment }}
{% endfor %}
```

----------------------------------------

TITLE: Calculating Multiple Aggregates (Avg, Max, Min) in One Call (pycon)
DESCRIPTION: Shows how to compute multiple aggregate values (average, maximum, and minimum price) in a single `aggregate()` call. This is achieved by passing multiple aggregation functions (`Avg`, `Max`, `Min` imported from `django.db.models`) as separate arguments to `aggregate()`. The result is a single dictionary containing all computed values, keyed by automatically generated names.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_6

LANGUAGE: pycon
CODE:
```
>>> from django.db.models import Avg, Max, Min
>>> Book.objects.aggregate(Avg("price"), Max("price"), Min("price"))
{'price__avg': 34.35, 'price__max': Decimal('81.20'), 'price__min': Decimal('12.99')}
```

----------------------------------------

TITLE: Resolving URLs in Class-Based Views using Django's reverse Function
DESCRIPTION: Demonstrates how to use the reverse function to resolve a URL in a class-based view method, specifying the current application namespace.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
reverse("polls:index", current_app=self.request.resolver_match.namespace)
```

----------------------------------------

TITLE: Looping Over defaultdict Items in HTML+Django Template
DESCRIPTION: This snippet illustrates looping over items of a `collections.defaultdict` within a Django template using `{% for k, v in defaultdict.items %}`. It highlights a potential issue where Django's template variable lookup order (dictionary lookup before attribute/method lookup) might interfere with calling the `.items()` method, potentially returning default values instead. It suggests converting the `defaultdict` to a standard dictionary beforehand if the method call is intended.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_1

LANGUAGE: html+django
CODE:
```
{% for k, v in defaultdict.items %}
    Do something with k and v here...
{% endfor %}
```

----------------------------------------

TITLE: Implementing Asynchronous GET Handler in Django Class-Based View
DESCRIPTION: Demonstrates how to define an asynchronous GET method handler in a Django class-based view. The handler uses asyncio.sleep() to simulate an asynchronous operation before returning an HTTP response.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
import asyncio
from django.http import HttpResponse
from django.views import View


class AsyncView(View):
    async def get(self, request, *args, **kwargs):
        # Perform view logic using await.
        await asyncio.sleep(1)
        return HttpResponse("Hello async world!")
```

----------------------------------------

TITLE: Defining Regex-Based Routes with re_path() in Django URLconf (Python)
DESCRIPTION: This example uses re_path() to define URL patterns using regular expressions for more granular matching. It supports named and unnamed groups, and can include other URL modules. The route argument uses Python's re module syntax and often employs raw strings. Inputs are URLs matching the regex, and captured groups are passed as arguments to views. Requires Django and proper imports, and referenced views and included URLs must exist.
SOURCE: https://github.com/django/django/blob/main/docs/ref/urls.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.urls import include, re_path

urlpatterns = [
    re_path(r"^index/$", views.index, name="index"),
    re_path(r"^bio/(?P<username>\\w+)/$", views.bio, name="bio"),
    re_path(r"^blog/", include("blog.urls")),
    ...,
]
```

----------------------------------------

TITLE: Adding M2M Relationship from the Reverse Side (pycon)
DESCRIPTION: Demonstrates adding a relationship from the 'other' side (the model without the `ManyToManyField`). It creates and saves a new `Article` (`a4`), then adds it to a `Publication`'s (`p2`) related set using `p2.article_set.add(a4)`. It confirms the relationship exists from both sides.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_20

LANGUAGE: pycon
CODE:
```
>>> a4 = Article(headline="NASA finds intelligent life on Earth")
>>> a4.save()
>>> p2.article_set.add(a4)
>>> p2.article_set.all()
<QuerySet [<Article: NASA finds intelligent life on Earth>]>
>>> a4.publications.all()
<QuerySet [<Publication: Science News>]>
```

----------------------------------------

TITLE: Customizing Widget for ModelForm Field in Django
DESCRIPTION: This snippet demonstrates how to override the default widget for a CharField in a Django ModelForm. It uses the widgets attribute of the inner Meta class to specify a Textarea widget for the 'name' field of an Author model.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.forms import ModelForm, Textarea
from myapp.models import Author


class AuthorForm(ModelForm):
    class Meta:
        model = Author
        fields = ["name", "title", "birth_date"]
        widgets = {
            "name": Textarea(attrs={"cols": 80, "rows": 20}),
        }
```

----------------------------------------

TITLE: Annotating with Greatest Value using Django ORM and Python
DESCRIPTION: This example shows using the Greatest function to annotate Django querysets with the greatest value across multiple fields, such as a comment's last updated timestamp being the max of its own and a related blog's modification times. Dependencies include the Greatest function and related models. All arguments must be compatible in type across databases. Outputs are annotated fields, with behavior varying based on database backend concerning NULL values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Greatest
>>> blog = Blog.objects.create(body="Greatest is the best.")
>>> comment = Comment.objects.create(body="No, Least is better.", blog=blog)
>>> comments = Comment.objects.annotate(last_updated=Greatest("modified", "blog__modified"))
>>> annotated_comment = comments.get()
```

----------------------------------------

TITLE: Basic Django Admin Field Reordering
DESCRIPTION: Shows how to reorder fields in the Django admin form by creating a custom ModelAdmin class.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fields = ["pub_date", "question_text"]


admin.site.register(Question, QuestionAdmin)
```

----------------------------------------

TITLE: Removing Related Objects with remove() Method in Django ORM - Python
DESCRIPTION: Explains the use of the remove() method to dissociate a related object from its parent in a one-to-many relationship. Fetches instances of Blog and Entry, then removes their association using b.entry_set.remove(e). Requires model definitions with ForeignKey field set to null=True to allow removal. Inputs are the instances to be dissociated; no output is returned, but the relationship is removed in the database.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
>>> b = Blog.objects.get(id=1)
>>> e = Entry.objects.get(id=234)
>>> b.entry_set.remove(e)  # Disassociates Entry e from Blog b.
```

----------------------------------------

TITLE: Django Test Client Query Parameters - Python
DESCRIPTION: Demonstrates making GET requests with query parameters using Django's test client.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> c = Client()
>>> c.get("/customers/details/", query_params={"name": "fred", "age": 7})
```

----------------------------------------

TITLE: Creating and Adding Multiple M2M Relationships in Django (pycon)
DESCRIPTION: Creates a new `Article` instance (`a2`), saves it, and then adds multiple `Publication` instances (`p1`, `p2`, `p3`) to its `publications` field using the `add()` method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_6

LANGUAGE: pycon
CODE:
```
>>> a2 = Article(headline="NASA uses Python")
>>> a2.save()
>>> a2.publications.add(p1, p2)
>>> a2.publications.add(p3)
```

----------------------------------------

TITLE: Configuring Basic list_display in Django ModelAdmin
DESCRIPTION: Shows how to set up list_display attribute to control which fields are displayed on the admin change list page, displaying first_name and last_name columns.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
list_display = ["first_name", "last_name"]
```

----------------------------------------

TITLE: Customizing Admin User Form Usage - Django Admin - Python
DESCRIPTION: This snippet shows how to substitute the default Django admin user change form with a custom form (such as MyUserChangeForm) to enforce field-level constraints in the admin interface. It covers unregistering the default User model and reregistering it with a subclassed UserAdmin using the new form. 'UserAdmin.form' is set to the custom form, and the Django admin site is updated accordingly. Dependencies include Django's admin and auth models; the snippet assumes you have defined MyUserChangeForm in the project. Input is the User model/admin; output is the overridden admin edit form for users.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.models import User


class MyUserAdmin(UserAdmin):
    form = MyUserChangeForm


admin.site.unregister(User)
admin.site.register(User, MyUserAdmin)
```

----------------------------------------

TITLE: Ordering QuerySets by F Expression with Nulls Handling - Django ORM - Python
DESCRIPTION: This snippet demonstrates how to order a queryset using F expressions in Django while controlling the position of null values using the 'nulls_last' keyword argument on .desc(). This ensures a database sort operation that places records with null values in 'last_contacted' after those with non-null values, regardless of the backend's default null ordering. Requires Django 3.1 or later, and assumes the model has a 'last_contacted' field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.db.models import F

Company.objects.order_by(F("last_contacted").desc(nulls_last=True))
```

----------------------------------------

TITLE: Parameterized Insertion Using RunSQL in Django (Python)
DESCRIPTION: Shows alternate syntax for parameterized execution of SQL in a Django migration using RunSQL. Here, a tuple with SQL and parameters is passed in a list; this is particularly useful for dynamic value insertion and helps prevent SQL injection. Inputs: SQL string, parameter list; Output: Parameterized insert statement execution. Requirements: Django migrations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
migrations.RunSQL([("INSERT INTO musician (name) VALUES ('Reinhardt');", None)])
```

----------------------------------------

TITLE: Documentation of exists() and aexists() methods in Django ORM
DESCRIPTION: Describes how exists() checks if a QuerySet contains any objects, returning True or False swiftly by performing a minimal query. aexists() performs the same asynchronously. Useful for large QuerySets when verifying data presence without retrieving all objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_86

LANGUAGE: Python
CODE:
```
Returns ``True`` if the :class:`.QuerySet` contains any results, and ``False`` if not.
```

----------------------------------------

TITLE: Configuring STATIC_URL in Django Settings
DESCRIPTION: Defines the URL prefix for static files in the Django settings file.
SOURCE: https://github.com/django/django/blob/main/docs/howto/static-files/index.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
STATIC_URL = "static/"
```

----------------------------------------

TITLE: Efficiently Removing Multiple Objects from ManyToManyField
DESCRIPTION: Demonstrates how to remove multiple objects from a ManyToManyField in a single operation to reduce SQL queries.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
my_band.members.remove(me, my_friend)
```

LANGUAGE: python
CODE:
```
my_band.members.remove(me)
my_band.members.remove(my_friend)
```

----------------------------------------

TITLE: Direct Saving of ModelForm with Instance
DESCRIPTION: This example demonstrates how to save a form when an instance is provided directly to the form, which automatically saves all data including many-to-many relationships without requiring additional method calls.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
# Create a form instance with POST data.
>>> a = Author()
>>> f = AuthorForm(request.POST, instance=a)

# Create and save the new author instance. There's no need to do anything else.
>>> new_author = f.save()
```

----------------------------------------

TITLE: Documentation of aggregate() and aaggregate() methods in Django ORM
DESCRIPTION: Explains how aggregate() computes summary metrics such as averages, sums, counts over a QuerySet, returning a dictionary. The aaggregate() is its asynchronous counterpart. Usage involves passing aggregation functions like Count(), Sum(), etc., with optional descriptive keywords for naming results. Dependencies include django.db.models.aggregation functions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_85

LANGUAGE: Python
CODE:
```
Returns a dictionary of aggregate values (averages, sums, etc.) calculated over the ``QuerySet``. Each argument to ``aggregate()`` specifies a value that will be included in the dictionary that is returned.
```

----------------------------------------

TITLE: Using the `csrf_token` Template Tag (Django Template)
DESCRIPTION: Introduces the `csrf_token` template tag in Django 1.1.2 for forward compatibility with CSRF protection improvements in Django 1.2. In the 1.1.X branch, this tag has no effect but allows templates to work seamlessly with future versions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.2.txt#2025-04-23_snippet_1

LANGUAGE: django
CODE:
```
csrf_token
```

----------------------------------------

TITLE: Using commit=False with Django ModelForm save() Method
DESCRIPTION: This example shows how to use the commit=False parameter with ModelForm's save() method to modify a model instance before saving it to the database. It also demonstrates handling many-to-many relationships in this scenario.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
# Create a form instance with POST data.
>>> f = AuthorForm(request.POST)

# Create, but don't save the new author instance.
>>> new_author = f.save(commit=False)

# Modify the author in some way.
>>> new_author.some_field = "some_value"

# Save the new instance.
>>> new_author.save()

# Now, save the many-to-many data for the form.
>>> f.save_m2m()
```

----------------------------------------

TITLE: Validating a Required Django CharField
DESCRIPTION: Illustrates the default behavior of a Django `CharField` where `required` is True. Calling the `clean()` method with an empty value (like `""` or `None`) raises a `ValidationError`. Non-empty values, including those converted from other types like integers or booleans, are accepted.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_1

LANGUAGE: pycon
CODE:
```
>>> from django import forms
>>> f = forms.CharField()
>>> f.clean("foo")
'foo'
>>> f.clean("")
Traceback (most recent call last):
...
ValidationError: ['This field is required.']
>>> f.clean(None)
Traceback (most recent call last):
...
ValidationError: ['This field is required.']
>>> f.clean(0)
'0'
>>> f.clean(True)
'True'
>>> f.clean(False)
'False'
```

----------------------------------------

TITLE: Defining Django Model Choices using Dictionary Python
DESCRIPTION: Demonstrates how to define choices for a Django model field using a Python dictionary. The keys are the values stored in the database, and the values are the human-readable names displayed in forms. This format is one way to provide options for a field, enforced during model validation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_0

LANGUAGE: Python
CODE:
```
YEAR_IN_SCHOOL_CHOICES = {
    "FR": "Freshman",
    "SO": "Sophomore",
    "JR": "Junior",
    "SR": "Senior",
    "GR": "Graduate",
}
```

----------------------------------------

TITLE: Defining and Querying JSONField on Django Models - Python
DESCRIPTION: This snippet demonstrates using the new JSONField model field introduced in Django 3.1, applicable to all supported database backends. It shows how to declare a model with a JSONField, create records, and filter data using advanced JSON lookups. Dependencies include Django 3.1+ and a compatible database backend. Inputs include complex JSON data, and outputs are model instances. Migration is needed if transitioning from the older contrib.postgres JSONField.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.db import models


class ContactInfo(models.Model):
    data = models.JSONField()


ContactInfo.objects.create(
    data={
        "name": "John",
        "cities": ["London", "Cambridge"],
        "pets": {"dogs": ["Rufus", "Meg"]},
    }
)
ContactInfo.objects.filter(
    data__name="John",
    data__pets__has_key="dogs",
    data__cities__contains="London",
).delete()
```

----------------------------------------

TITLE: Clearing All ManyToMany Relationships via Through Model - Django - Pycon
DESCRIPTION: Shows how to use the `clear` method on the related manager to remove all many-to-many relationships for a specific instance. Notes that this action deletes the corresponding intermediate model instances.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_21

LANGUAGE: pycon
CODE:
```
>>> # Beatles have broken up
>>> beatles.members.clear()
>>> # Note that this deletes the intermediate model instances
>>> Membership.objects.all()
<QuerySet []>
```

----------------------------------------

TITLE: Returning All Model Data as Dictionaries (All Fields) Python
DESCRIPTION: Applies the values() method to a QuerySet to retrieve all data from the model's table as a list of dictionaries. Each dictionary contains a key and value for every field in the model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_16

LANGUAGE: Python
CODE:
```
>>> Blog.objects.values()
```

----------------------------------------

TITLE: Modifying Widget Attributes After Form Definition in Django Python
DESCRIPTION: Shows how widget attributes can be programmatically updated after initial field definition by using the widget.attrs.update method. Assumes Django and a forms.Form class. The code updates 'class' and 'size' HTML attributes for widgets, providing flexibility to adjust attributes post-declaration. Inputs are dictionaries or keyword arguments; output is updated widget configuration. Limitations: must call update before form rendering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class CommentForm(forms.Form):
    name = forms.CharField()
    url = forms.URLField()
    comment = forms.CharField()

    name.widget.attrs.update({"class": "special"})
    comment.widget.attrs.update(size="40")
```

----------------------------------------

TITLE: Basic Model Definition with Many-to-Many and Foreign Key Relationships in Django
DESCRIPTION: Defines a Restaurant model with a many-to-many relationship to Pizza (pizzas) and a foreign key to Pizza (best_pizza). Used to demonstrate prefetch_related operations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_41

LANGUAGE: python
CODE:
```
class Restaurant(models.Model):
    pizzas = models.ManyToManyField(Pizza, related_name="restaurants")
    best_pizza = models.ForeignKey(
        Pizza, related_name="championed_by", on_delete=models.CASCADE
    )
```

----------------------------------------

TITLE: URL Configuration with Namespacing
DESCRIPTION: Configures URL patterns with application namespace for the polls app to avoid naming conflicts.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.urls import path

from . import views

app_name = "polls"
urlpatterns = [
    path("", views.index, name="index"),
    path("<int:question_id>/", views.detail, name="detail"),
    path("<int:question_id>/results/", views.results, name="results"),
    path("<int:question_id>/vote/", views.vote, name="vote"),
]
```

----------------------------------------

TITLE: Creating Custom Superuser with Email Authentication
DESCRIPTION: Example of create_superuser method implementation for a custom user model using email as the username field with additional required fields.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
def create_superuser(self, email, date_of_birth, password=None):
    # create superuser here
    ...
```

----------------------------------------

TITLE: Django Template Filter Usage with Length Comparison
DESCRIPTION: Examples showing the recommended way to check length in Django templates using the length filter with comparison operators instead of the deprecated length_is filter.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.txt#2025-04-23_snippet_4

LANGUAGE: html+django
CODE:
```
{% if value|length == 4 %}…{% endif %}
{% if value|length == 4 %}True{% else %}False{% endif %}
```

LANGUAGE: html+django
CODE:
```
{% if value|length_is:4 %}…{% endif %}
{{ value|length_is:4 }}
```

----------------------------------------

TITLE: Uploading an In-Memory Image File Using Django Test Client
DESCRIPTION: Demonstrates how to create and upload an in-memory image file using Django's test client. The example creates a BytesIO object with GIF image data and sets a name attribute for validation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_9

LANGUAGE: pycon
CODE:
```
>>> from io import BytesIO
>>> img = BytesIO(
...     b"GIF89a\x01\x00\x01\x00\x00\x00\x00!\xf9\x04\x01\x00\x00\x00"
...     b"\x00,\x00\x00\x00\x00\x01\x00\x01\x00\x00\x02\x01\x00\x00"
... )
>>> img.name = "myimage.gif"
```

----------------------------------------

TITLE: Specifying Initial Field Values for Django Forms at Instantiation in Python
DESCRIPTION: Shows passing an 'initial' dictionary to a form constructor for setting default field values shown in unbound forms. Inputs are initial values as a dictionary; output is a Form instance with pre-populated fields for user convenience. Only specified fields receive initial values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> f = ContactForm(initial={"subject": "Hi there!"})
```

----------------------------------------

TITLE: Defining Database Constraints in Django Model Meta
DESCRIPTION: Demonstrates defining database constraints on a Django model using the `constraints` attribute within the `Meta` class. This example uses `models.CheckConstraint` with a `Q` object to ensure the 'age' field meets a specific condition.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
from django.db import models


class Customer(models.Model):
    age = models.IntegerField()

    class Meta:
        constraints = [
            models.CheckConstraint(condition=models.Q(age__gte=18), name="age_gte_18"),
        ]
```

----------------------------------------

TITLE: Defining MinValueValidator in Django
DESCRIPTION: Validator class that checks if a value is below a minimum limit. Raises ValidationError if the value is less than the specified limit_value.
SOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
MinValueValidator(limit_value, message=None)
```

----------------------------------------

TITLE: Cascade Deletion in Django with Foreign Keys
DESCRIPTION: Shows how Django's cascade deletion works by default, where deleting a model instance also deletes related objects with foreign keys pointing to it.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_49

LANGUAGE: python
CODE:
```
b = Blog.objects.get(pk=1)
# This will delete the Blog and all of its Entry objects.
b.delete()
```

----------------------------------------

TITLE: Direct URL Redirection in Django
DESCRIPTION: Examples of using redirect() with hardcoded URLs, both relative and absolute.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
def my_view(request):
    ...
    return redirect("/some/url/")

def my_view(request):
    ...
    return redirect("https://example.com/")
```

----------------------------------------

TITLE: Overriding Default Error Messages in Django CharField using Python
DESCRIPTION: Shows how to customize the error message for a specific validation rule (in this case, `required`) on a `django.forms.CharField` by passing a dictionary to the `error_messages` argument during field initialization. When `clean()` is called with an empty string, it raises a `ValidationError` with the custom message "Please enter your name".
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_13

LANGUAGE: pycon
CODE:
```
>>> name = forms.CharField(error_messages={"required": "Please enter your name"})
>>> name.clean("")
Traceback (most recent call last):
  ...
ValidationError: ['Please enter your name']
```

----------------------------------------

TITLE: Implementing Basic Django View for Polls Index
DESCRIPTION: Creates a view function that retrieves the latest 5 questions and renders them using a template. Uses Django's render shortcut function to combine template with context data.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.shortcuts import render

from .models import Question


def index(request):
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    context = {"latest_question_list": latest_question_list}
    return render(request, "polls/index.html", context)
```

----------------------------------------

TITLE: Using prefetch_related to optimize many-to-many queries in Django
DESCRIPTION: Demonstrates how to use prefetch_related() to efficiently fetch related objects in many-to-many relationships, reducing multiple queries to just two.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_39

LANGUAGE: python
CODE:
```
>>> Pizza.objects.all()
["Hawaiian (ham, pineapple)", "Seafood (prawns, smoked salmon)"...
```

LANGUAGE: python
CODE:
```
>>> Pizza.objects.prefetch_related("toppings")
```

----------------------------------------

TITLE: Creating a Mixin for JSON Responses in Django Form Views
DESCRIPTION: Defines a `JsonableResponseMixin` intended to be used with Django's object-based form views (like `CreateView`). It overrides `form_invalid` and `form_valid`. If the request accepts `text/html`, it returns the default response. Otherwise, it returns a `JsonResponse`: `form.errors` with status 400 for invalid forms, and a dictionary containing the object's primary key (`pk`) for valid forms. It calls `super().form_valid(form)` to ensure the default processing (like saving the object) still occurs.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.http import JsonResponse
from django.views.generic.edit import CreateView
from myapp.models import Author


class JsonableResponseMixin:
    """
    Mixin to add JSON support to a form.
    Must be used with an object-based FormView (e.g. CreateView)
    """

    def form_invalid(self, form):
        response = super().form_invalid(form)
        if self.request.accepts("text/html"):
            return response
        else:
            return JsonResponse(form.errors, status=400)

    def form_valid(self, form):
        # We make sure to call the parent's form_valid() method because
        # it might do some processing (in the case of CreateView, it will
        # call form.save() for example).
        response = super().form_valid(form)
        if self.request.accepts("text/html"):
            return response
        else:
            data = {
                "pk": self.object.pk,
            }
            return JsonResponse(data)
```

----------------------------------------

TITLE: Updating ForeignKey Fields in Django Models
DESCRIPTION: This example demonstrates how to update a ForeignKey field on a model. It retrieves Entry and Blog objects from the database, assigns the Blog object to the Entry's blog field, and then saves the changes.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> from blog.models import Blog, Entry
>>> entry = Entry.objects.get(pk=1)
>>> cheese_blog = Blog.objects.get(name="Cheddar Talk")
>>> entry.blog = cheese_blog
>>> entry.save()
```

----------------------------------------

TITLE: Including URLconf Module with Namespace in Django's Root URLconf
DESCRIPTION: Demonstrates how to include a URLconf module in the root URLconf, which will use the app_name defined in the included module as the namespace.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
from django.urls import include, path

urlpatterns = [
    path("polls/", include("polls.urls")),
]
```

----------------------------------------

TITLE: Custom Settings-Based Authentication Backend Implementation in Django (Python)
DESCRIPTION: This code snippet defines a full-featured Django authentication backend class, SettingsBackend, which authenticates users whose credentials match values set in the project's settings (ADMIN_LOGIN and ADMIN_PASSWORD). If authentication succeeds and the user does not yet exist, it creates a superuser Django User object. The backend is fully compatible with Django's authentication and permission model, and depends on django.contrib.auth, django.conf.settings, and django.contrib.auth.hashers modules. Key parameters include username and password, and the backend provides implementations for both authenticate and get_user methods. Inputs are the credentials and user ID; output is an authenticated User object or None.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.contrib.auth.backends import BaseBackend
from django.contrib.auth.hashers import check_password
from django.contrib.auth.models import User


class SettingsBackend(BaseBackend):
    """
    Authenticate against the settings ADMIN_LOGIN and ADMIN_PASSWORD.

    Use the login name and a hash of the password. For example:

    ADMIN_LOGIN = 'admin'
    ADMIN_PASSWORD = 'pbkdf2_sha256$30000$Vo0VlMnkR4Bk$qEvtdyZRWTcOsCnI/oQ7fVOu1XAURIZYoOZ3iq8Dr4M='
    """

    def authenticate(self, request, username=None, password=None):
        login_valid = settings.ADMIN_LOGIN == username
        pwd_valid = check_password(password, settings.ADMIN_PASSWORD)
        if login_valid and pwd_valid:
            try:
                user = User.objects.get(username=username)
            except User.DoesNotExist:
                # Create a new user. There's no need to set a password
                # because only the password from settings.py is checked.
                user = User(username=username)  # is_active defaults to True.
                user.is_staff = True
                user.is_superuser = True
                user.save()
            return user
        return None

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None

```

----------------------------------------

TITLE: Starting Django Development Server
DESCRIPTION: This console command starts the Django development server, which is necessary to access the admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_11

LANGUAGE: console
CODE:
```
$ python manage.py runserver
```

----------------------------------------

TITLE: Manual Model Instance Creation with File Upload
DESCRIPTION: A view function that manually creates a model instance with an uploaded file. It demonstrates how to assign a file from request.FILES to a model's FileField.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.http import HttpResponseRedirect
from django.shortcuts import render
from .forms import UploadFileForm
from .models import ModelWithFileField


def upload_file(request):
    if request.method == "POST":
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            instance = ModelWithFileField(file_field=request.FILES["file"])
            instance.save()
            return HttpResponseRedirect("/success/url/")
    else:
        form = UploadFileForm()
    return render(request, "upload.html", {"form": form})
```

----------------------------------------

TITLE: Configuring Default Auto Field in Django Settings
DESCRIPTION: Sets the DEFAULT_AUTO_FIELD setting to use AutoField as the default primary key type for models.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"
```

----------------------------------------

TITLE: Creating a Custom DateSelectorWidget using MultiWidget in Python
DESCRIPTION: Presents a complete example of subclassing `forms.MultiWidget` to create a `DateSelectorWidget`. It defines the `__init__` method to set up `Select` widgets for day, month, and year using predefined choices. It implements `decompress` to split a date value (handling both `datetime.date` objects and string representations like 'YYYY-MM-DD'). It also overrides `value_from_datadict` to combine the selected values from the subwidgets back into a single 'YYYY-MM-DD' string suitable for processing by a `DateField`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
from datetime import date
from django import forms


class DateSelectorWidget(forms.MultiWidget):
    def __init__(self, attrs=None):
        days = {day: day for day in range(1, 32)}
        months = {month: month for month in range(1, 13)}
        years = {year: year for year in [2018, 2019, 2020]}
        widgets = [
            forms.Select(attrs=attrs, choices=days),
            forms.Select(attrs=attrs, choices=months),
            forms.Select(attrs=attrs, choices=years),
        ]
        super().__init__(widgets, attrs)

    def decompress(self, value):
        if isinstance(value, date):
            return [value.day, value.month, value.year]
        elif isinstance(value, str):
            year, month, day = value.split("-")
            return [day, month, year]
        return [None, None, None]

    def value_from_datadict(self, data, files, name):
        day, month, year = super().value_from_datadict(data, files, name)
        # DateField expects a single string that it can parse into a date.
        return "{}-{}-{}".format(year, month, day)
```

----------------------------------------

TITLE: Configuring Inline Admin for Explicit Many-to-Many Intermediary Model
DESCRIPTION: Sets up admin interfaces for both Person and Group models with MembershipInline to manage the intermediary Membership model from either end of the relationship. The extra parameter limits additional empty forms.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_72

LANGUAGE: python
CODE:
```
class MembershipInline(admin.TabularInline):
    model = Membership
    extra = 1
```

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    inlines = [MembershipInline]


class GroupAdmin(admin.ModelAdmin):
    inlines = [MembershipInline]
```

LANGUAGE: python
CODE:
```
admin.site.register(Person, PersonAdmin)
admin.site.register(Group, GroupAdmin)
```

----------------------------------------

TITLE: Using QuerySet.defer() to optimize data retrieval in Django ORM
DESCRIPTION: This snippet illustrates how to defer loading of specific fields or related model fields in Django QuerySets using the defer() method. It supports deferring multiple fields, chaining calls, and deferring fields in related models with double-underscore notation. Passing None clears deferred fields, loading all data immediately. Dependencies include Django ORM, and the method helps optimize database queries by delaying loading expensive or large fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_57

LANGUAGE: Python
CODE:
```
Entry.objects.defer("headline", "body")
```

LANGUAGE: Python
CODE:
```
Entry.objects.defer("body").filter(rating=5).defer("headline")
```

LANGUAGE: Python
CODE:
```
Blog.objects.select_related().defer("entry__headline", "entry__body")
```

LANGUAGE: Python
CODE:
```
my_queryset.defer(None)
```

----------------------------------------

TITLE: Inheriting and Customizing Django ModelForm
DESCRIPTION: This example shows how to inherit from a ModelForm and add custom validation. It creates a new form class that extends ArticleForm and adds a custom clean method for the 'pub_date' field.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
class EnhancedArticleForm(ArticleForm):
    def clean_pub_date(self): ...
```

----------------------------------------

TITLE: Filtering QuerySets by Case-Insensitive Endswith - Django ORM (Python)
DESCRIPTION: Demonstrates how to perform a case-insensitive suffix match on the 'headline' field of Entry objects using Django's ORM by applying the 'iendswith' lookup. Requires Django's ORM and an Entry model. The input is the suffix string to filter by, and the output is a QuerySet containing records where headline ends with the specified string, regardless of case. Takes string values and is compatible with the database's support for case-insensitive matching.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_98

LANGUAGE: python
CODE:
```
Entry.objects.filter(headline__iendswith="Lennon")
```

----------------------------------------

TITLE: Defining Many-to-Many Relationship with Django ManyToManyField (Python)
DESCRIPTION: Shows how to define a many-to-many relationship between models using `models.ManyToManyField`. The first positional argument is the class of the model to which the current model is related. The example demonstrates a Pizza model related to multiple Topping objects.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_16

LANGUAGE: Python
CODE:
```
from django.db import models


class Topping(models.Model):
    # ...
    pass


class Pizza(models.Model):
    # ...
    toppings = models.ManyToManyField(Topping)
```

----------------------------------------

TITLE: Author Rating Aggregation with Values
DESCRIPTION: Demonstrates using values() with annotations to group results by author name.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
Author.objects.values("name").annotate(average_rating=Avg("book__rating"))
```

----------------------------------------

TITLE: Checking User Authentication Status in Asynchronous Django Views
DESCRIPTION: This example shows how to check user authentication in an asynchronous Django view using the auser() method, which returns a coroutine that must be awaited to get the user object.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
user = await request.auser()
if user.is_authenticated:
    # Do something for authenticated users.
    ...
else:
    # Do something for anonymous users.
    ...
```

----------------------------------------

TITLE: Path Lookup in Django JSONField
DESCRIPTION: Demonstrates how to chain multiple keys together to form a path lookup for accessing nested data in a JSONField. This enables querying by nested properties within JSON objects.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
>>> Dog.objects.filter(data__owner__name="Bob")
<QuerySet [<Dog: Rufus>]>
```

----------------------------------------

TITLE: PostgreSQL Transaction Rollback Example
DESCRIPTION: Shows how to handle exceptions in PostgreSQL transactions using complete transaction rollback. Demonstrates error handling for database operations that might fail.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
a.save()  # Succeeds, but may be undone by transaction rollback
try:
    b.save()  # Could throw exception
except IntegrityError:
    transaction.rollback()
c.save()  # Succeeds, but a.save() may have been undone
```

----------------------------------------

TITLE: DeletionMixin Class Definition in Django
DESCRIPTION: A mixin that handles object deletion operations with success URL redirect functionality. Implements DELETE HTTP method handling.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-editing.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
class DeletionMixin:
    success_url = None

    def delete(self, request, *args, **kwargs):
        self.object = self.get_object()
        self.object.delete()
        return HttpResponseRedirect(self.get_success_url())

    def get_success_url(self):
        return self.success_url
```

----------------------------------------

TITLE: Defining Test Fixture Usage in Django TestCase Classes (Python)
DESCRIPTION: Demonstrates specifying the 'fixtures' class attribute in a Django TestCase to load pre-defined database data during test execution. Requires Django (django.test) and a corresponding fixture file in the expected location. 'fixtures' should be a list of fixture names ('fixture-label'), leading to automatic loading into the test database at setup. Inputs: fixture file(s) referenced by label. Outputs: database state matches contents of fixtures for each test method. Designed for use within Django's test framework, and fixture data should be serialized appropriately.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class MyTestCase(TestCase):
    fixtures = ["fixture-label"]
```

----------------------------------------

TITLE: Annotating Stores with Min/Max Book Prices Across Relationships (pycon)
DESCRIPTION: Demonstrates performing aggregations on fields of a related model using `annotate()`. This example queries `Store` objects and annotates each store with the minimum (`Min`) and maximum (`Max`) price found among its associated `Book` objects. It uses the double underscore notation (`books__price`) to traverse the `books` ManyToManyField relationship and access the `price` field on the `Book` model. Requires importing `Max` and `Min` from `django.db.models`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_11

LANGUAGE: pycon
CODE:
```
>>> from django.db.models import Max, Min
>>> Store.objects.annotate(min_price=Min("books__price"), max_price=Max("books__price"))
```

----------------------------------------

TITLE: Reversing URLs by Name or Callable in Django Python
DESCRIPTION: Demonstrates two ways to use the `django.urls.reverse` function: reversing a URL using its defined name ("news-archive") and reversing using the callable view object (`views.archive`). Reversing by name is generally preferred, especially for namespaced views. Requires a defined URL pattern in `urls.py` named "news-archive" pointing to `news.views.archive`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
# using the named URL
reverse("news-archive")

# passing a callable object
# (This is discouraged because you can't reverse namespaced views this way.)
from news import views

reverse(views.archive)
```

----------------------------------------

TITLE: Handling Forms with a Class-Based View in Django
DESCRIPTION: This snippet demonstrates the class-based view approach to form handling, equivalent to the function-based example. It uses class attributes like `form_class`, `initial`, and `template_name` for configuration. Separate `get` and `post` methods handle form display and processing logic, respectively, promoting better organization.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.views import View

from .forms import MyForm


class MyFormView(View):
    form_class = MyForm
    initial = {"key": "value"}
    template_name = "form_template.html"

    def get(self, request, *args, **kwargs):
        form = self.form_class(initial=self.initial)
        return render(request, self.template_name, {"form": form})

    def post(self, request, *args, **kwargs):
        form = self.form_class(request.POST)
        if form.is_valid():
            # <process form cleaned data>
            return HttpResponseRedirect("/success/")

        return render(request, self.template_name, {"form": form})
```

----------------------------------------

TITLE: Configuring Django Template Engine Directories in Settings (Python)
DESCRIPTION: This snippet configures the Django TEMPLATES setting to load template files from the 'templates' subdirectory of each installed application. It adds a dictionary with the required BACKEND class and enables APP_DIRS for template discovery. The TEMPLATES setting is a list of dictionaries for each template engine; key parameters are BACKEND and APP_DIRS. Input: none directly; Output: allows automatic loading of templates from app-specific directories.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_57

LANGUAGE: python
CODE:
```
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "APP_DIRS": True,
    },
]
```

----------------------------------------

TITLE: Customizing Django Admin for Custom User Model
DESCRIPTION: Example of extending UserAdmin to include custom fields in both the edit and creation forms within Django admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
from django.contrib.auth.admin import UserAdmin


class CustomUserAdmin(UserAdmin):
    ...
    fieldsets = UserAdmin.fieldsets + ((None, {"fields": ["custom_field"]}),)
    add_fieldsets = UserAdmin.add_fieldsets + ((None, {"fields": ["custom_field"]}),)
```

----------------------------------------

TITLE: Querying Related Objects in Django Models
DESCRIPTION: Shows how to query related objects using the reverse relation manager in Django models. Demonstrates filtering, counting, and overriding the default manager name.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_61

LANGUAGE: pycon
CODE:
```
>>> b = Blog.objects.get(id=1)
>>> b.entry_set.all()  # Returns all Entry objects related to Blog.

# b.entry_set is a Manager that returns QuerySets.
>>> b.entry_set.filter(headline__contains="Lennon")
>>> b.entry_set.count()

>>> b = Blog.objects.get(id=1)
>>> b.entries.all()  # Returns all Entry objects related to Blog.

# b.entries is a Manager that returns ``QuerySet`` instances.
>>> b.entries.filter(headline__contains="Lennon")
>>> b.entries.count()
```

----------------------------------------

TITLE: Defining a Custom Even Number Validator Function in Django (Python)
DESCRIPTION: Defines a callable validator function 'validate_even' to ensure a number is even. It raises a ValidationError using Django's translation utilities if the value is not even. Dependencies: 'django.core.exceptions.ValidationError' and 'django.utils.translation.gettext_lazy'. Takes a single argument 'value'; expects an integer. Outputs: None if valid, raises ValidationError if not. Intended for use with Django field validators in models or forms.
SOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext_lazy as _\n\ndef validate_even(value):\n    if value % 2 != 0:\n        raise ValidationError(\n            _('%(value)s is not an even number'),\n            params={'value': value},\n        )
```

----------------------------------------

TITLE: Parsing JSON Response from Django Test Client
DESCRIPTION: Demonstrates how to parse JSON response content using the json() method of the Response object. This example shows accessing a JSON value with a key of 'name' from the response data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
>>> response = client.get("/foo/")
>>> response.json()["name"]
'Arthur'
```

----------------------------------------

TITLE: Configuring MIDDLEWARE for Django Auth (Python)
DESCRIPTION: Lists the essential middleware components within the `MIDDLEWARE` setting in `settings.py` for Django's authentication. `SessionMiddleware` manages user sessions across requests, and `AuthenticationMiddleware` associates users with requests using those sessions. These are typically included by default.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/index.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
# settings.py
MIDDLEWARE = [
    # ...
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # ...
]
```

----------------------------------------

TITLE: Defining X_FRAME_OPTIONS setting
DESCRIPTION: This setting specifies the default value for the X-Frame-Options header. It is used by the XFrameOptionsMiddleware for clickjacking protection. The default value is 'DENY'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_68



----------------------------------------

TITLE: Rendering Django Forms as HTML with Data Binding - Python
DESCRIPTION: Demonstrates how a Django Form renders as HTML using its __str__ method, both in the unbound state (no data) and bound state (with initial values populated in HTML). Data passed to the form influences the rendered HTML attributes. Output is the HTML string for the form.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
>>> f = ContactForm()\n>>> print(f)\n<div><label for="id_subject">Subject:</label><input type="text" name="subject" maxlength="100" required id="id_subject"></div>\n<div><label for="id_message">Message:</label><input type="text" name="message" required id="id_message"></div>\n<div><label for="id_sender">Sender:</label><input type="email" name="sender" required id="id_sender"></div>\n<div><label for="id_cc_myself">Cc myself:</label><input type="checkbox" name="cc_myself" id="id_cc_myself"></div>\n\n>>> data = {\n...     "subject": "hello",\n...     "message": "Hi there",\n...     "sender": "foo@example.com",\n...     "cc_myself": True,\n... }\n>>> f = ContactForm(data)\n>>> print(f)\n<div><label for="id_subject">Subject:</label><input type="text" name="subject" value="hello" maxlength="100" required id="id_subject"></div>
```

----------------------------------------

TITLE: Creating InlineFormSet with inlineformset_factory (Django, Python)
DESCRIPTION: The inlineformset_factory function returns an InlineFormSet class for handling forms related to a parent/child model relationship. It delegates its implementation to modelformset_factory with defaults suited for inline forms (BaseInlineFormSet, can_delete=True, extra=3) and requires specification of the parent model, the related model, and optionally fk_name for cases with multiple foreign keys. Parameters allow similar customization as the above factories. Inputs are the parent and child models and form options; output is an InlineFormSet class for managing related objects. Depends on django.forms.models.BaseInlineFormSet.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/models.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False)
```

----------------------------------------

TITLE: Providing Initial Values for Django ModelForm
DESCRIPTION: This example shows how to provide initial values for a Django ModelForm that override both the form field defaults and the values from an attached model instance.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
article = Article.objects.get(pk=1)
article.headline
'My headline'
form = ArticleForm(initial={"headline": "Initial headline"}, instance=article)
form["headline"].value()
'Initial headline'
```

----------------------------------------

TITLE: Signal Connection Using Decorator in Django
DESCRIPTION: Example showing how to connect a signal receiver using the @receiver decorator pattern.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.core.signals import request_finished
from django.dispatch import receiver


@receiver(request_finished)
def my_callback(sender, **kwargs):
    print("Request finished!")
```

----------------------------------------

TITLE: Implementing Combined FormMixin and DetailView in Django
DESCRIPTION: Example of combining FormMixin with DetailView to handle both form processing and detail display. Includes form validation and authentication checks.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django import forms
from django.http import HttpResponseForbidden
from django.urls import reverse
from django.views.generic import DetailView
from django.views.generic.edit import FormMixin
from books.models import Author


class AuthorInterestForm(forms.Form):
    message = forms.CharField()


class AuthorDetailView(FormMixin, DetailView):
    model = Author
    form_class = AuthorInterestForm

    def get_success_url(self):
        return reverse("author-detail", kwargs={"pk": self.object.pk})

    def post(self, request, *args, **kwargs):
        if not request.user.is_authenticated:
            return HttpResponseForbidden()
        self.object = self.get_object()
        form = self.get_form()
        if form.is_valid():
            return self.form_valid(form)
        else:
            return self.form_invalid(form)

    def form_valid(self, form):
        return super().form_valid(form)
```

----------------------------------------

TITLE: Using a Custom Manager Method for Model Creation in Django (Python)
DESCRIPTION: Illustrates creating a custom `BookManager` with a `create_book` method for the `Book` model. This approach centralizes creation logic within the manager, leveraging the manager's `create` method and allowing for additional operations before returning the instance. It's often preferred over `__init__` overriding or simple classmethods.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class BookManager(models.Manager):
    def create_book(self, title):
        book = self.create(title=title)
        # do something with the book
        return book


class Book(models.Model):
    title = models.CharField(max_length=100)

    objects = BookManager()


book = Book.objects.create_book("Pride and Prejudice")
```

----------------------------------------

TITLE: Connecting M2M Signal Handler in Django
DESCRIPTION: Shows how to connect a signal handler to track changes in a many-to-many relationship between Pizza and Toppings models.
SOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
m2m_changed.connect(toppings_changed, sender=Pizza.toppings.through)
```

----------------------------------------

TITLE: Creating Django App in Specific Directory - Shell
DESCRIPTION: Use this command to create a new Django app directory structure with the specified name in a target directory path, rather than the current working directory.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_37

LANGUAGE: shell
CODE:
```
django-admin startapp myapp /Users/jezdez/Code/myapp
```

----------------------------------------

TITLE: Binding Data to a Django Form Instance in Python
DESCRIPTION: Illustrates how to bind input data to a Django form by passing a dictionary with field names as keys to the form constructor. Requires Django forms; expects a valid dictionary as input and creates a bound Form instance capable of validation and pre-populated rendering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> data = {
...     "subject": "hello",
...     "message": "Hi there",
...     "sender": "foo@example.com",
...     "cc_myself": True,
... }
>>> f = ContactForm(data)
```

----------------------------------------

TITLE: Evaluating QuerySet Results with iterator() for Memory Efficiency
DESCRIPTION: This snippet describes the iterator() method, which evaluates a QuerySet and returns an iterator over the results, bypassing internal caching for improved performance with large datasets. It mentions asynchronous iterator aiterator() and considerations with database-specific streaming capabilities, including PostgreSQL and Oracle. Dependencies include Django ORM and database backends.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_80

LANGUAGE: Python
CODE:
```
for obj in Entry.objects.iterator(chunk_size=100):
    process(obj)
```

----------------------------------------

TITLE: Implementing JSON Detail View in Django
DESCRIPTION: DetailView implementation with JSON response capability using JSONResponseMixin.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.views.generic.detail import BaseDetailView


class JSONDetailView(JSONResponseMixin, BaseDetailView):
    def render_to_response(self, context, **response_kwargs):
        return self.render_to_json_response(context, **response_kwargs)
```

----------------------------------------

TITLE: Implementing Primary-Replica Router in Django
DESCRIPTION: Implementation of a Django database router that directs read operations to replica databases and write operations to a primary database.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
import random


class PrimaryReplicaRouter:
    def db_for_read(self, model, **hints):
        """
        Reads go to a randomly-chosen replica.
        """
        return random.choice(["replica1", "replica2"])

    def db_for_write(self, model, **hints):
        """
        Writes always go to primary.
        """
        return "primary"

    def allow_relation(self, obj1, obj2, **hints):
        """
        Relations between objects are allowed if both objects are
        in the primary/replica pool.
        """
        db_set = {"primary", "replica1", "replica2"}
        if obj1._state.db in db_set and obj2._state.db in db_set:
            return True
        return None

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        """
        All non-auth models end up in this pool.
        """
        return True
```

----------------------------------------

TITLE: Providing Default Value Only When Variable is None in Django Templates - HTML+Django
DESCRIPTION: Shows use of the 'default_if_none' filter, which returns a default only if the variable is None. Requires Django template environment. Key constraint: default is not used for empty strings, only actual Python None values. Input is any variable, output is the variable or the default string.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_56

LANGUAGE: html+django
CODE:
```
{{ value|default_if_none:"nothing" }}
```

----------------------------------------

TITLE: Integrating Custom UserChangeForm into Django Admin
DESCRIPTION: Shows how to apply the custom `MyUserChangeForm` (which limits `last_name` length) within the Django admin interface for the `User` model. It defines `MyUserAdmin` inheriting from `UserAdmin`, sets its `form` attribute to `MyUserChangeForm`, unregisters the default `User` admin, and registers the `User` model with the custom `MyUserAdmin`. This ensures the admin interface uses the form with the restricted `last_name` length.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.models import User


class MyUserAdmin(UserAdmin):
    form = MyUserChangeForm


admin.site.unregister(User)
admin.site.register(User, MyUserAdmin)
```

----------------------------------------

TITLE: Using a Model Formset in a Django View
DESCRIPTION: Shows how to use a model formset in a Django view to manage Author instances. It handles both GET and POST requests, creates the formset, and saves the data if valid.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
from django.forms import modelformset_factory
from django.shortcuts import render
from myapp.models import Author


def manage_authors(request):
    AuthorFormSet = modelformset_factory(Author, fields=["name", "title"])
    if request.method == "POST":
        formset = AuthorFormSet(request.POST, request.FILES)
        if formset.is_valid():
            formset.save()
            # do something.
    else:
        formset = AuthorFormSet()
    return render(request, "manage_authors.html", {"formset": formset})
```

----------------------------------------

TITLE: Excluding Django Objects with Multiple Conditions (AND) using Python and SQL
DESCRIPTION: Shows how to use the `exclude()` method in Python with multiple keyword arguments to filter out objects matching all conditions (logical AND). The corresponding SQL uses `WHERE NOT (...)` to negate the combined conditions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_6

LANGUAGE: python
CODE:
```
Entry.objects.exclude(pub_date__gt=datetime.date(2005, 1, 3), headline="Hello")
```

LANGUAGE: sql
CODE:
```
SELECT ...
WHERE NOT (pub_date > '2005-1-3' AND headline = 'Hello')
```

----------------------------------------

TITLE: Writing Custom Template Context Processors in Django (Python)
DESCRIPTION: Demonstrates defining a custom context processor as a function that accepts a request and returns a dictionary to extend the template context. This pattern enables injection of global settings or user-specific values across all templates, and requires registering the function in the template engine's context_processors setting. Inputs include a Django request; output is a dictionary mapping.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
from django.conf import settings


def from_email(request):
    return {
        "DEFAULT_FROM_EMAIL": settings.DEFAULT_FROM_EMAIL,
    }
```

----------------------------------------

TITLE: Configuring Argon2 as the Default Hasher in Django (Python)
DESCRIPTION: Demonstrates how to configure Django to use Argon2id as the default password hashing algorithm by modifying the `PASSWORD_HASHERS` setting. `Argon2PasswordHasher` is placed first in the list, making it the default for new passwords, while retaining compatibility with other listed hashers for verification.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]
```

----------------------------------------

TITLE: Accessing Form Field Values
DESCRIPTION: Shows how to access the raw value of a form field using the value() method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_41

LANGUAGE: pycon
CODE:
```
>>> initial = {"subject": "welcome"}
>>> unbound_form = ContactForm(initial=initial)
>>> bound_form = ContactForm(data={"subject": "hi"}, initial=initial)
>>> print(unbound_form["subject"].value())
welcome
>>> print(bound_form["subject"].value())
hi
```

----------------------------------------

TITLE: Setting DJANGO_SETTINGS_MODULE in Unix Bash
DESCRIPTION: Example of setting the DJANGO_SETTINGS_MODULE environment variable and running django-admin in a Unix Bash shell.
SOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
export DJANGO_SETTINGS_MODULE=mysite.settings
django-admin runserver
```

----------------------------------------

TITLE: Updating Django URL Configuration
DESCRIPTION: URL pattern configuration update in Django urls.py to include the newly installed polls app URLs.
SOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
urlpatterns = [
    path("polls/", include("django_polls.urls")),
    ...,
]
```

----------------------------------------

TITLE: Using Exists Subquery in Django ORM (Python)
DESCRIPTION: Demonstrates how to use an Exists subquery to annotate posts with whether they have a recent comment. It shows filtering by date and using OuterRef to reference the outer queryset.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
from django.db.models import Exists, OuterRef
from datetime import timedelta
from django.utils import timezone
one_day_ago = timezone.now() - timedelta(days=1)
recent_comments = Comment.objects.filter(
    post=OuterRef("pk"),
    created_at__gte=one_day_ago,
)
Post.objects.annotate(recent_comment=Exists(recent_comments))
```

----------------------------------------

TITLE: Setting up Autocomplete ForeignKey in Django Admin - Python
DESCRIPTION: The example shows configuration of autocomplete_fields in a Django ModelAdmin to use Select2-powered asynchronous search widgets for a ForeignKey relationship. It also demonstrates ordering and search_fields setup in the related model's ModelAdmin, as required for search functionality. Dependencies include Django and Select2 integration in the admin. Autocomplete improves admin performance and usability for tables with large numbers of related records.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_34

LANGUAGE: python
CODE:
```
class QuestionAdmin(admin.ModelAdmin):
    ordering = ["date_created"]
    search_fields = ["question_text"]


class ChoiceAdmin(admin.ModelAdmin):
    autocomplete_fields = ["question"]
```

----------------------------------------

TITLE: Defining FormView Class in Django
DESCRIPTION: Displays a form, handles form submission, and processes form data. Provides form handling functionality.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class FormView():
    # Attributes
    content_type
    extra_context
    form_class
    http_method_names
    initial
    prefix
    response_class
    success_url
    template_engine
    template_name

    # Methods
    as_view()
    dispatch()
    form_invalid()
    form_valid()
    get()
    get_context_data()
    get_form()
    get_form_kwargs()
    http_method_not_allowed()
    post()
    put()
    setup()
```

----------------------------------------

TITLE: Escaping HTML in Variables with Escape Filter in Django Templates - HTML+Django
DESCRIPTION: Illustrates the use of the 'escape' filter to HTML-escape a variable's output in a Django template. Used inside an autoescape off block for demonstration. Input is any string variable (e.g., title); output is the HTML-escaped string. Ensures variables are safely displayed without rendering as HTML.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_68

LANGUAGE: html+django
CODE:
```
{% autoescape off %}
    {{ title|escape }}
{% endautoescape %}
```

----------------------------------------

TITLE: Managing Direct User Permissions in Django (Python)
DESCRIPTION: Shows the methods available on the `user_permissions` many-to-many manager of a User object (`myuser`) for managing its direct permission assignments. It demonstrates setting all permissions (`set`), adding one or more permissions (`add`), removing permissions (`remove`), and clearing all direct permission assignments (`clear`).
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
myuser.user_permissions.set([permission_list])
myuser.user_permissions.add(permission, permission, ...)
myuser.user_permissions.remove(permission, permission, ...)
myuser.user_permissions.clear()
```

----------------------------------------

TITLE: Basic Model Validation Example in Django
DESCRIPTION: Shows how to perform basic model validation using full_clean() method and handle ValidationError exceptions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.core.exceptions import ValidationError

try:
    article.full_clean()
except ValidationError as e:
    # Do something based on the errors contained in e.message_dict.
    # Display them to a user, or handle them programmatically.
    pass
```

----------------------------------------

TITLE: Configuring URL for ArticleListView in Django
DESCRIPTION: Demonstrates how to set up a URL pattern for the ArticleListView.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-display.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.urls import path

from article.views import ArticleListView

urlpatterns = [
    path("", ArticleListView.as_view(), name="article-list"),
]
```

----------------------------------------

TITLE: SQL Equivalent of Django Q Object OR Condition
DESCRIPTION: Shows the SQL WHERE clause that is equivalent to the Django Q object OR condition, demonstrating the underlying SQL being generated.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_39

LANGUAGE: sql
CODE:
```
WHERE question LIKE 'Who%' OR question LIKE 'What%'
```

----------------------------------------

TITLE: Configuring URL Pattern for Paginated View in Django
DESCRIPTION: Demonstrates how to set up a URL pattern in Django's URLconf to handle pagination using the 'page' parameter.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-multiple-object.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
path("objects/page<int:page>/", PaginatedView.as_view()),
```

----------------------------------------

TITLE: Getting Time Zone Aware Current Time in Django
DESCRIPTION: This snippet demonstrates how to properly get the current time when Django's time zone support is enabled (USE_TZ=True), resulting in a time-zone-aware datetime object.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.utils import timezone

now = timezone.now()
```

----------------------------------------

TITLE: Using JSON Response Mixin with Django CreateView
DESCRIPTION: Demonstrates using the previously defined `JsonableResponseMixin` with a standard `CreateView` for the `Author` model. By inheriting from both `JsonableResponseMixin` and `CreateView`, the `AuthorCreateView` gains the ability to respond with JSON for API-like interactions while still handling standard HTML form submissions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
class AuthorCreateView(JsonableResponseMixin, CreateView):
    model = Author
    fields = ["name"]
```

----------------------------------------

TITLE: Caching Behavior in Django QuerySets
DESCRIPTION: Illustrates the caching behavior of Django QuerySets, showing how multiple evaluations of the same QuerySet can lead to repeated database queries if not handled properly.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
>>> print([e.headline for e in Entry.objects.all()])
>>> print([e.pub_date for e in Entry.objects.all()])

>>> queryset = Entry.objects.all()
>>> print([p.headline for p in queryset])  # Evaluate the query set.
>>> print([p.pub_date for p in queryset])  # Reuse the cache from the evaluation.
```

----------------------------------------

TITLE: Using Prefetch with Django ORM in Python
DESCRIPTION: Demonstrates the Prefetch() object of the Django ORM used to customize prefetch_related() behavior. It allows specifying a relation lookup, an optional base queryset to filter or chain select_related(), and an optional attribute name to cache the results. This enables efficient fetching of related objects with reduced database queries and tailored filtering. Input includes a model manager call on Question objects and expected output is the related Choice objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_125

LANGUAGE: pycon
CODE:
```
>>> from django.db.models import Prefetch
>>> Question.objects.prefetch_related(Prefetch("choice_set")).get().choice_set.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
# This will only execute two queries regardless of the number of Question
# and Choice objects.
>>> Question.objects.prefetch_related(Prefetch("choice_set"))
<QuerySet [<Question: What\'s up?>]>
```

LANGUAGE: pycon
CODE:
```
>>> voted_choices = Choice.objects.filter(votes__gt=0)
>>> voted_choices
<QuerySet [<Choice: The sky>]>
>>> prefetch = Prefetch("choice_set", queryset=voted_choices)
>>> Question.objects.prefetch_related(prefetch).get().choice_set.all()
<QuerySet [<Choice: The sky>]>
```

LANGUAGE: pycon
CODE:
```
>>> prefetch = Prefetch("choice_set", queryset=voted_choices, to_attr="voted_choices")
>>> Question.objects.prefetch_related(prefetch).get().voted_choices
[<Choice: The sky>]
>>> Question.objects.prefetch_related(prefetch).get().choice_set.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
```

----------------------------------------

TITLE: Handling Non-Field Validation Errors in Django
DESCRIPTION: Shows how to handle validation errors that are not tied to specific fields using NON_FIELD_ERRORS key.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.core.exceptions import NON_FIELD_ERRORS, ValidationError

try:
    article.full_clean()
except ValidationError as e:
    non_field_errors = e.message_dict[NON_FIELD_ERRORS]
```

----------------------------------------

TITLE: Defining JSONField in Django
DESCRIPTION: Documents the JSONField for storing JSON-encoded data, represented as Python native types. It is supported on multiple databases and allows specifying custom JSONEncoder and JSONDecoder subclasses for serialization and deserialization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_27

LANGUAGE: Python
CODE:
```
JSONField(encoder=None, decoder=None, **options)
```

----------------------------------------

TITLE: Creating and Saving Models with Django ModelForm
DESCRIPTION: This code example shows how to create and save database objects using a ModelForm. It demonstrates creating a new article and updating an existing one with form data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> from myapp.models import Article
>>> from myapp.forms import ArticleForm

# Create a form instance from POST data.
>>> f = ArticleForm(request.POST)

# Save a new Article object from the form's data.
>>> new_article = f.save()

# Create a form to edit an existing Article, but use
# POST data to populate the form.
>>> a = Article.objects.get(pk=1)
>>> f = ArticleForm(request.POST, instance=a)
>>> f.save()
```

----------------------------------------

TITLE: Configuring SMTP Backend in Django Settings
DESCRIPTION: Shows how to explicitly specify SMTP as the email backend in Django settings.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
```

----------------------------------------

TITLE: Defining Basic Models with Foreign Key Relationship in Django
DESCRIPTION: Creates a Person model with a name field and a Friendship model with two foreign keys to Person. This demonstrates a simple relationship that can be managed through Django admin.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_67

LANGUAGE: python
CODE:
```
from django.db import models


class Person(models.Model):
    name = models.CharField(max_length=128)


class Friendship(models.Model):
    to_person = models.ForeignKey(
        Person, on_delete=models.CASCADE, related_name="friends"
    )
    from_person = models.ForeignKey(
        Person, on_delete=models.CASCADE, related_name="from_friends"
    )
```

----------------------------------------

TITLE: Defining and Using Asynchronous Views in Django - Python
DESCRIPTION: This snippet demonstrates how to implement an asynchronous view in Django 3.1 using the async def syntax. It requires Python 3.6+ and Django 3.1 or higher, with the view function able to perform asynchronous tasks like awaiting asyncio calls. The input is a Django request, and the output is an HttpResponse. Performance gains are seen in ASGI mode, and usage in WSGI mode may incur penalties.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
async def my_view(request):
    await asyncio.sleep(0.5)
    return HttpResponse("Hello, async world!")
```

----------------------------------------

TITLE: Loading and Using Custom Django Template Filters (`humanize`)
DESCRIPTION: Illustrates how to load a custom template tag/filter library (in this case, `humanize`) using the `{% load %}` tag in a Django template. After loading, filters provided by that library (e.g., `intcomma` for adding commas to integers) become available for use. Requires the corresponding app (`django.contrib.humanize`) to be in the project's `INSTALLED_APPS` setting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_29

LANGUAGE: html+django
CODE:
```
{% load humanize %}

{{ 45000|intcomma }}
```

----------------------------------------

TITLE: Rendering Form Field Labels
DESCRIPTION: Demonstrates how to render a label tag for a form field using label_tag method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_40

LANGUAGE: pycon
CODE:
```
>>> f = ContactForm(data={"message": ""})
>>> print(f["message"].label_tag())
<label for="id_message">Message:</label>
```

----------------------------------------

TITLE: Casting Field Types in Django ORM with Python
DESCRIPTION: This snippet illustrates how to use the Cast function from django.db.models.functions to convert the data type of a field within an ORM query. Dependencies include Django's ORM and the FloatField class. The key parameter is the field name (\"age\") to cast and the output_field (FloatField()), resulting in the column value being available as a float. The output of author.age_as_float will be a floating-point number even if the original field was an integer.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.db.models import FloatField
>>> from django.db.models.functions import Cast
>>> Author.objects.create(age=25, name="Margaret Smith")
>>> author = Author.objects.annotate(
...     age_as_float=Cast("age", output_field=FloatField()),
... ).get()
>>> print(author.age_as_float)
25.0
```

----------------------------------------

TITLE: Using cached_property Decorator in Django Models
DESCRIPTION: Illustrates the use of the @cached_property decorator from django.utils.functional to cache the result of a method in a Django model. This can improve performance by avoiding repeated expensive computations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
from django.utils.functional import cached_property


class Person(models.Model):
    @cached_property
    def friends(self): ...
```

----------------------------------------

TITLE: Basic Console Logging Configuration in Django
DESCRIPTION: A basic logging configuration that outputs all warning-level and higher messages to the console. This setup configures the root logger with a console handler.
SOURCE: https://github.com/django/django/blob/main/docs/topics/logging.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
import os

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
}
```

----------------------------------------

TITLE: Configuring Django Template Settings for Project-Level Overrides
DESCRIPTION: This snippet shows how to configure Django settings to enable template overriding at the project level. It includes setting up INSTALLED_APPS with the app whose templates you want to override and configuring the TEMPLATES setting with the project's templates directory.
SOURCE: https://github.com/django/django/blob/main/docs/howto/overriding-templates.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

INSTALLED_APPS = [
    ...,
    "blog",
    ...,
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        # ...
    },
]
```

----------------------------------------

TITLE: Using Case Expression for Conditional Annotations - Django ORM - Python
DESCRIPTION: Illustrates using the Case expression to implement if/elif/else style branching in queryset annotations. Demonstrates assigning discounts based on account type, where Case receives multiple When objects for each account type and provides a default value. Requires Django, imports of Case, When, and Value, and shows inputs/outputs for annotated fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>>
>>> from datetime import date, timedelta
>>> from django.db.models import Case, Value, When
>>> Client.objects.create(
...     name="Jane Doe",
...     account_type=Client.REGULAR,
...     registered_on=date.today() - timedelta(days=36),
... )
>>> Client.objects.create(
...     name="James Smith",
...     account_type=Client.GOLD,
...     registered_on=date.today() - timedelta(days=5),
... )
>>> Client.objects.create(
...     name="Jack Black",
...     account_type=Client.PLATINUM,
...     registered_on=date.today() - timedelta(days=10 * 365),
... )
>>> # Get the discount for each Client based on the account type
>>> Client.objects.annotate(
...     discount=Case(
...         When(account_type=Client.GOLD, then=Value("5%")),
...         When(account_type=Client.PLATINUM, then=Value("10%")),
...         default=Value("0%"),
...     ),
... ).values_list("name", "discount")
<QuerySet [("Jane Doe", "0%"), ("James Smith", "5%"), ("Jack Black", "10%")]> 
```

----------------------------------------

TITLE: Dynamically Populating ModelMultipleChoiceField Queryset in Django Forms (Python)
DESCRIPTION: This Python code defines a Django form `FooMultipleChoiceForm` with a `ModelMultipleChoiceField`. It demonstrates how to initialize the field with `queryset=None` and then dynamically set the actual `queryset` within the form's `__init__` method. This pattern is useful when the available choices depend on runtime factors or other form data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
class FooMultipleChoiceForm(forms.Form):
    foo_select = forms.ModelMultipleChoiceField(queryset=None)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields["foo_select"].queryset = ...
```

----------------------------------------

TITLE: Documentation of update() and aupdate() methods in Django ORM
DESCRIPTION: Details the update() method for performing bulk SQL updates on a QuerySet, modifying specified fields instantly. aupdate() is its asynchronous version. Notes restrictions such as updates only on main table fields, inability to update related models directly, and the effect on signal emissions. Usage examples include batch updating fields across multiple records.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_88

LANGUAGE: Python
CODE:
```
Performs an SQL update query for the specified fields, and returns the number of rows matched
```

----------------------------------------

TITLE: Performing Bulk Updates with F() Expressions in Django
DESCRIPTION: Explains how to use `F()` expressions with the `update()` method on a QuerySet to efficiently modify field values for multiple objects directly in the database with a single SQL query. This example increments the `stories_filed` count for reporters named 'Tintin'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
reporter = Reporters.objects.filter(name="Tintin")
reporter.update(stories_filed=F("stories_filed") + 1)
```

----------------------------------------

TITLE: Creating Custom User with Email Authentication
DESCRIPTION: Example of create_user method implementation for a custom user model using email as the username field with additional required fields.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
def create_user(self, email, date_of_birth, password=None):
    # create user here
    ...
```

----------------------------------------

TITLE: Defining `get_absolute_url` Using `reverse` (Python)
DESCRIPTION: Demonstrates the recommended way to implement `get_absolute_url` using Django's `reverse` function. This approach is more portable as it relies on named URL patterns ('people-detail' in this example) rather than hardcoded URL paths. It requires importing `reverse` from `django.urls`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
def get_absolute_url(self):
    from django.urls import reverse

    return reverse("people-detail", kwargs={"pk": self.pk})
```

----------------------------------------

TITLE: Filtering Entries with LIKE Statements in Django ORM
DESCRIPTION: Shows how to use LIKE statement equivalents in Django ORM, specifically for filtering entries that contain a percent sign. It also demonstrates how Django handles escaping of special characters in LIKE queries.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
>>> Entry.objects.filter(headline__contains="%")
```

LANGUAGE: sql
CODE:
```
SELECT ... WHERE headline LIKE '%\%%';
```

----------------------------------------

TITLE: Retrieving Context Values from Django Test Client Response
DESCRIPTION: Shows how to access template context values from a Django test client response by using dictionary-like access on the context attribute. This example demonstrates retrieving the 'name' variable from the template context.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> response = client.get("/foo/")
>>> response.context["name"]
'Arthur'
```

----------------------------------------

TITLE: Implementing Generic Foreign Key Model in Django
DESCRIPTION: Defines a TaggedItem model that can create generic relationships to any model using ContentType and GenericForeignKey fields. Includes an index for performance optimization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.db import models


class TaggedItem(models.Model):
    tag = models.SlugField()
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveBigIntegerField()
    content_object = GenericForeignKey("content_type", "object_id")

    def __str__(self):
        return self.tag

    class Meta:
        indexes = [
            models.Index(fields=["content_type", "object_id"]),
        ]
```

----------------------------------------

TITLE: Overriding Model.from_db to Store Initial Values in Django (Python)
DESCRIPTION: Provides an example of overriding the `Model.from_db` classmethod in Django. This customization stores the original field values loaded from the database into an `_loaded_values` dictionary on the instance. It also shows modifying the `save` method to compare current values against these stored initial values, enabling logic like preventing updates to certain fields. The implementation handles deferred fields using `django.db.models.DEFERRED`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.db.models import DEFERRED


@classmethod
def from_db(cls, db, field_names, values):
    # Default implementation of from_db() (subject to change and could
    # be replaced with super()).
    if len(values) != len(cls._meta.concrete_fields):
        values = list(values)
        values.reverse()
        values = [
            values.pop() if f.attname in field_names else DEFERRED
            for f in cls._meta.concrete_fields
        ]
    instance = cls(*values)
    instance._state.adding = False
    instance._state.db = db
    # customization to store the original field values on the instance
    instance._loaded_values = dict(
        zip(field_names, (value for value in values if value is not DEFERRED))
    )
    return instance


def save(self, **kwargs):
    # Check how the current values differ from ._loaded_values. For example,
    # prevent changing the creator_id of the model. (This example doesn't
    # support cases where 'creator_id' is deferred).
    if not self._state.adding and (
        self.creator_id != self._loaded_values["creator_id"]
    ):
        raise ValueError("Updating the value of creator isn't allowed")
    super().save(**kwargs)
```

----------------------------------------

TITLE: Implementing was_published_recently Method in Django Model
DESCRIPTION: Method to check if a question was published recently, comparing publication date against current time with a 1-day threshold.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
def was_published_recently(self):
    now = timezone.now()
    return now - datetime.timedelta(days=1) <= self.pub_date <= now
```

----------------------------------------

TITLE: Including All Fields in Django ModelForm
DESCRIPTION: This example shows how to create a ModelForm that includes all fields from the model using the special '__all__' value. This approach should only be used when security concerns have been addressed.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.forms import ModelForm


class AuthorForm(ModelForm):
    class Meta:
        model = Author
        fields = "__all__"
```

----------------------------------------

TITLE: Rendering a Formset in Django Template
DESCRIPTION: Provides three different methods to render a formset in a Django template: letting the formset handle rendering, manually rendering the formset with form handling, and manually rendering each field.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_32

LANGUAGE: html
CODE:
```
<form method="post">
    {{ formset }}
</form>
```

LANGUAGE: html
CODE:
```
<form method="post">
    {{ formset.management_form }}
    {% for form in formset %}
        {{ form }}
    {% endfor %}
</form>
```

LANGUAGE: html
CODE:
```
<form method="post">
    {{ formset.management_form }}
    {% for form in formset %}
        {% for field in form %}
            {{ field.label_tag }} {{ field }}
        {% endfor %}
    {% endfor %}
</form>
```

----------------------------------------

TITLE: Using a Non-Required Django CharField
DESCRIPTION: Shows how setting `required=False` on a Django `CharField` changes the behavior of the `clean()` method. When an empty value (`""` or `None`) is passed, `clean()` returns the field's normalized empty value (an empty string for `CharField` by default) instead of raising a `ValidationError`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_2

LANGUAGE: pycon
CODE:
```
>>> f = forms.CharField(required=False)
>>> f.clean("foo")
'foo'
>>> f.clean("")
''
>>> f.clean(None)
''
>>> f.clean(0)
'0'
>>> f.clean(True)
'True'
>>> f.clean(False)
'False'
```

----------------------------------------

TITLE: Incrementing and Decrementing Cache Values in Django
DESCRIPTION: Demonstrates how to use the incr() and decr() methods to increment and decrement cache values. Shows examples with default and custom increment/decrement values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_33

LANGUAGE: pycon
CODE:
```
>>> cache.set("num", 1)
>>> cache.incr("num")
2
>>> cache.incr("num", 10)
12
>>> cache.decr("num")
11
>>> cache.decr("num", 5)
6
```

----------------------------------------

TITLE: Implementing a Token-Based Authentication Backend in Django (Python)
DESCRIPTION: This code provides a template for creating a Django authentication backend that authenticates users based on a token. It subclasses BaseBackend and implements the authenticate method with a token parameter, allowing credentials to be checked via an alternative to username/password. The backend is intended to be added to AUTHENTICATION_BACKENDS, and it integrates with Django's authentication subsystem. Dependencies include Django's authentication system.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib.auth.backends import BaseBackend


class MyBackend(BaseBackend):
    def authenticate(self, request, token=None):
        # Check the token and return a user.
        ...
```

----------------------------------------

TITLE: Implementing DeleteView in Django
DESCRIPTION: Example showing how to create a DeleteView subclass for the Author model. The view specifies the model to operate on and defines a success URL to redirect to after deletion.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.urls import reverse_lazy
from django.views.generic.edit import DeleteView
from myapp.models import Author


class AuthorDeleteView(DeleteView):
    model = Author
    success_url = reverse_lazy("author-list")
```

----------------------------------------

TITLE: Setting Basic Default Ordering in Django Model Meta
DESCRIPTION: Demonstrates how to set the default ordering for querysets using the `ordering` attribute within a model's `Meta` class. It shows examples for ascending order, descending order (using '-'), and multi-field ordering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
ordering = ["-order_date"]
```

LANGUAGE: python
CODE:
```
ordering = ["pub_date"]
```

LANGUAGE: python
CODE:
```
ordering = ["-pub_date"]
```

LANGUAGE: python
CODE:
```
ordering = ["-pub_date", "author"]
```

----------------------------------------

TITLE: Accessing Reverse One-to-One Relationships in Django
DESCRIPTION: This snippet shows how to access the reverse relationship from the related model instance. It demonstrates that the `User` model instance gains attributes corresponding to the `OneToOneField` names (or `related_name`) defined on the related model (`MySpecialUser`).
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_43

LANGUAGE: pycon
CODE:
```
>>> user = User.objects.get(pk=1)
>>> hasattr(user, "myspecialuser")
True
>>> hasattr(user, "supervisor_of")
True
```

----------------------------------------

TITLE: FormView for Handling Multiple File Uploads
DESCRIPTION: A Class-Based View implementation that handles multiple file uploads. It overrides the form_valid method to process each uploaded file separately after form validation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.views.generic.edit import FormView
from .forms import FileFieldForm


class FileFieldFormView(FormView):
    form_class = FileFieldForm
    template_name = "upload.html"  # Replace with your template.
    success_url = "..."  # Replace with your URL or reverse().

    def form_valid(self, form):
        files = form.cleaned_data["file_field"]
        for f in files:
            ...  # Do something with each file.
        return super().form_valid(form)
```

----------------------------------------

TITLE: Processing Form Data in a Django View
DESCRIPTION: Illustrates how to handle form data in a Django view. This view processes both GET and POST requests, validates form data, and redirects after successful submission.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.http import HttpResponseRedirect
from django.shortcuts import render

from .forms import NameForm


def get_name(request):
    # if this is a POST request we need to process the form data
    if request.method == "POST":
        # create a form instance and populate it with data from the request:
        form = NameForm(request.POST)
        # check whether it's valid:
        if form.is_valid():
            # process the data in form.cleaned_data as required
            # ...
            # redirect to a new URL:
            return HttpResponseRedirect("/thanks/")

    # if a GET (or any other method) we'll create a blank form
    else:
        form = NameForm()

    return render(request, "name.html", {"form": form})
```

----------------------------------------

TITLE: Automatic URL Quoting with `reverse` in Django (Pycon)
DESCRIPTION: Pycon example demonstrating that the string returned by `django.urls.reverse` is automatically URL-quoted (percent-encoded). Passing an argument containing non-ASCII characters like "Orléans" results in an appropriately encoded path segment such as '.../Orl%C3%A9ans/'. Further encoding the output is usually unnecessary and may lead to errors.
SOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_4

LANGUAGE: pycon
CODE:
```
>>> reverse("cities", args=["Orléans"])
'.../Orl%C3%A9ans/'
```

----------------------------------------

TITLE: Using Vertical Radio Buttons for ForeignKey Fields - Django Admin in Python
DESCRIPTION: Demonstrates how to set the radio_fields attribute of a Django ModelAdmin class so that a ForeignKey uses a vertical radio button group instead of the default select box. The radio_fields dict maps field names to layout style (admin.VERTICAL or admin.HORIZONTAL). Requires the target field to be a ForeignKey or have choices set. Useful for improved UX when selecting among small numbers of choices.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_33

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    radio_fields = {"group": admin.VERTICAL}
```

----------------------------------------

TITLE: Configuring Django Template Settings for App-Level Overrides
DESCRIPTION: This snippet demonstrates how to configure Django settings to enable template overriding from an app's template directory. The key setting is APP_DIRS set to True, which tells Django to look for templates within app directories.
SOURCE: https://github.com/django/django/blob/main/docs/howto/overriding-templates.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
TEMPLATES = [
    {
        # ...
        "APP_DIRS": True,
        # ...
    },
]
```

----------------------------------------

TITLE: Using sync_to_async Adapter Function
DESCRIPTION: Examples of using sync_to_async as both a direct wrapper and decorator to convert sync functions to async functions, with thread sensitivity options
SOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from asgiref.sync import sync_to_async

async_function = sync_to_async(sync_function, thread_sensitive=False)
async_function = sync_to_async(sensitive_sync_function, thread_sensitive=True)


@sync_to_async
def sync_function(): ...
```

----------------------------------------

TITLE: Using user_passes_test Decorator in Django
DESCRIPTION: Shows how to use the user_passes_test decorator to restrict access based on a custom test function. The decorator redirects users who don't pass the test.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_23

LANGUAGE: Python
CODE:
```
from django.contrib.auth.decorators import user_passes_test

def email_check(user):
    return user.email.endswith("@example.com")

@user_passes_test(email_check)
def my_view(request): ...
```

----------------------------------------

TITLE: Extracting DateTime Components with Django ORM - Python
DESCRIPTION: Shows how to extract time-based parts (hour, minute, second) and all date parts from DateTimeField using Django ORM. This requires Django and the Experiment model with DateTimeField fields. Outputs a dictionary with all extracted values. Inputs must be timezone-aware where appropriate; limitations relate to database and Django's timezone configuration.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
>>> from datetime import UTC, datetime\n>>> from django.db.models.functions import (\n...     ExtractDay,\n...     ExtractHour,\n...     ExtractMinute,\n...     ExtractMonth,\n...     ExtractQuarter,\n...     ExtractSecond,\n...     ExtractWeek,\n...     ExtractIsoWeekDay,\n...     ExtractWeekDay,\n...     ExtractIsoYear,\n...     ExtractYear,\n... )\n>>> start_2015 = datetime(2015, 6, 15, 23, 30, 1, tzinfo=UTC)\n>>> end_2015 = datetime(2015, 6, 16, 13, 11, 27, tzinfo=UTC)\n>>> Experiment.objects.create(\n...     start_datetime=start_2015,\n...     start_date=start_2015.date(),\n...     end_datetime=end_2015,\n...     end_date=end_2015.date(),\n... )\n>>> Experiment.objects.annotate(\n...     year=ExtractYear("start_datetime"),\n...     isoyear=ExtractIsoYear("start_datetime"),\n...     quarter=ExtractQuarter("start_datetime"),\n...     month=ExtractMonth("start_datetime"),\n...     week=ExtractWeek("start_datetime"),\n...     day=ExtractDay("start_datetime"),\n...     weekday=ExtractWeekDay("start_datetime"),\n...     isoweekday=ExtractIsoWeekDay("start_datetime"),\n...     hour=ExtractHour("start_datetime"),\n...     minute=ExtractMinute("start_datetime"),\n...     second=ExtractSecond("start_datetime"),\n... ).values(\n...     "year",\n...     "isoyear",\n...     "month",\n...     "week",\n...     "day",\n...     "weekday",\n...     "isoweekday",\n...     "hour",\n...     "minute",\n...     "second",\n... ).get(\n...     end_datetime__year=ExtractYear("start_datetime")\n... )\n{'year': 2015, 'isoyear': 2015, 'quarter': 2, 'month': 6, 'week': 25,\n 'day': 15, 'weekday': 2, 'isoweekday': 1, 'hour': 23, 'minute': 30,\n 'second': 1}\n
```

----------------------------------------

TITLE: Comparing Datetime Objects Across Time Zones in Python
DESCRIPTION: This snippet demonstrates how to work with datetime objects in different time zones, showing the complexities of date comparisons and conversions. It uses the zoneinfo module to create time zone aware datetime objects for Paris and New York.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
>>> import datetime
>>> import zoneinfo
>>> paris_tz = zoneinfo.ZoneInfo("Europe/Paris")
>>> new_york_tz = zoneinfo.ZoneInfo("America/New_York")
>>> paris = datetime.datetime(2012, 3, 3, 1, 30, tzinfo=paris_tz)
# This is the correct way to convert between time zones.
>>> new_york = paris.astimezone(new_york_tz)
>>> paris == new_york, paris.date() == new_york.date()
(True, False)
>>> paris - new_york, paris.date() - new_york.date()
(datetime.timedelta(0), datetime.timedelta(1))
>>> paris
datetime.datetime(2012, 3, 3, 1, 30, tzinfo=zoneinfo.ZoneInfo(key='Europe/Paris'))
>>> new_york
datetime.datetime(2012, 3, 2, 19, 30, tzinfo=zoneinfo.ZoneInfo(key='America/New_York'))
```

----------------------------------------

TITLE: Defining Choices in Django Model Fields
DESCRIPTION: Demonstrates two approaches for defining choices in Django model fields: using a dictionary with uppercase constants and using TextChoices enum. Both methods provide clear and maintainable ways to define field choices.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
class MyModel(models.Model):
    DIRECTION_UP = "U"
    DIRECTION_DOWN = "D"
    DIRECTION_CHOICES = {
        DIRECTION_UP: "Up",
        DIRECTION_DOWN: "Down",
    }
```

LANGUAGE: python
CODE:
```
class MyModel(models.Model):
    class Direction(models.TextChoices):
        UP = "U", "Up"
        DOWN = "D", "Down"
```

----------------------------------------

TITLE: Django Default Language Code Setting
DESCRIPTION: Specifies `LANGUAGE_CODE`, the default language for the Django project, typically in locale format such as 'en-us'. Defaults to `'en-us'`, serving as the fallback language and influencing translation behavior.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_51

LANGUAGE: plaintext
CODE:
```
LANGUAGE_CODE
-----------------

Default: `'en-us'`

A string representing the language code for this installation. This should be in
standard :term:`language ID format <language code>`. For example, U.S. English
is `'en-us'`. See also the `list of language identifiers`_ and
:doc:`/topics/i18n/index`.

It serves three purposes:

* If the locale middleware isn't in use, it decides which translation is served
to all users.
* If the locale middleware is active, it provides a fallback language in case the
user's preferred language can't be determined or is not supported by the
website. It also provides the fallback translation when a translation for a
given literal doesn't exist for the user's preferred language.
* If localization is explicitly disabled via the :tfilter:`unlocalize` filter
or the :ttag:`{% localize off %}<localize>` tag, it provides fallback
localization formats which will be applied instead. See
:ref:`controlling localization in templates <topic-l10n-templates>` for
details.

See :ref:`how-django-discovers-language-preference` for more details.

_`list of language identifiers`: http://www.i18nguy.com/unicode/language-identifiers.html
```

----------------------------------------

TITLE: Implementing Inline Formset View in Django
DESCRIPTION: A view function that handles both GET and POST requests for managing related Book objects for an Author using Django's inline formset. The function creates, validates, and saves the formset, then returns either a redirect on success or renders the form template.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_37

LANGUAGE: python
CODE:
```
def manage_books(request, author_id):
    author = Author.objects.get(pk=author_id)
    BookInlineFormSet = inlineformset_factory(Author, Book, fields=["title"])
    if request.method == "POST":
        formset = BookInlineFormSet(request.POST, request.FILES, instance=author)
        if formset.is_valid():
            formset.save()
            # Do something. Should generally end with a redirect. For example:
            return HttpResponseRedirect(author.get_absolute_url())
    else:
        formset = BookInlineFormSet(instance=author)
    return render(request, "manage_books.html", {"formset": formset})
```

----------------------------------------

TITLE: Django Test Model Registration Example
DESCRIPTION: Example showing how to isolate model registration during testing using the @isolate_apps decorator to prevent global registry pollution.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
from django.db import models
from django.test import SimpleTestCase
from django.test.utils import isolate_apps


class TestModelDefinition(SimpleTestCase):
    @isolate_apps("app_label")
    def test_model_definition(self):
        class TestModel(models.Model):
            pass

        ...
```

----------------------------------------

TITLE: Copying Django Data Between Databases (Bash)
DESCRIPTION: Provides an example of piping output from `dumpdata` on one database (`test`) for a specific model (`app_label.ModelName`) directly into `loaddata` on another database (`prod`). This effectively copies data between databases or instances using stdin/stdout redirection.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_15

LANGUAGE: bash
CODE:
```
django-admin dumpdata --format=json --database=test app_label.ModelName | django-admin loaddata --format=json --database=prod -
```

----------------------------------------

TITLE: Displaying Boolean Values with Icons in Django Admin
DESCRIPTION: Example showing how to use the boolean parameter with admin.display decorator to display a method's boolean return value as a yes/no icon in the admin list.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.db import models


class Person(models.Model):
    first_name = models.CharField(max_length=50)
    birthday = models.DateField()

    @admin.display(boolean=True)
    def born_in_fifties(self):
        return 1950 <= self.birthday.year < 1960


class PersonAdmin(admin.ModelAdmin):
    list_display = ["name", "born_in_fifties"]
```

----------------------------------------

TITLE: Sample Django Login Template
DESCRIPTION: A sample HTML template for the login page in Django. It extends a base template and includes form rendering, error handling, and links for password reset.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_34

LANGUAGE: html
CODE:
```
{% extends "base.html" %}

{% block content %}

{% if form.errors %}
<p>Your username and password didn't match. Please try again.</p>
{% endif %}

{% if next %}
    {% if user.is_authenticated %}
    <p>Your account doesn't have access to this page. To proceed,
    please login with an account that has access.</p>
    {% else %}
    <p>Please login to see this page.</p>
    {% endif %}
{% endif %}

<form method="post" action="{% url 'login' %}">
{% csrf_token %}
<table>
<tr>
    <td>{{ form.username.label_tag }}</td>
    <td>{{ form.username }}</td>
</tr>
<tr>
    <td>{{ form.password.label_tag }}</td>
    <td>{{ form.password }}</td>
</tr>
</table>

<input type="submit" value="login">
<input type="hidden" name="next" value="{{ next }}">
</form>

{# Assumes you set up the password_reset view in your URLconf #}
<p><a href="{% url 'password_reset' %}">Lost password?</a></p>

{% endblock %}
```

----------------------------------------

TITLE: File Upload with ModelForm in Django
DESCRIPTION: A view function that handles file uploads using a ModelForm. This approach automatically saves the uploaded file to the location specified by the FileField's upload_to parameter when form.save() is called.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.http import HttpResponseRedirect
from django.shortcuts import render
from .forms import ModelFormWithFileField


def upload_file(request):
    if request.method == "POST":
        form = ModelFormWithFileField(request.POST, request.FILES)
        if form.is_valid():
            # file is saved
            form.save()
            return HttpResponseRedirect("/success/url/")
    else:
        form = ModelFormWithFileField()
    return render(request, "upload.html", {"form": form})
```

----------------------------------------

TITLE: Managing User Group Associations in Django (Python)
DESCRIPTION: Shows the methods available on the `groups` many-to-many manager of a User object (`myuser`) for managing its group memberships. It demonstrates setting all groups (`set`), adding one or more groups (`add`), removing groups (`remove`), and clearing all group associations (`clear`).
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
myuser.groups.set([group_list])
myuser.groups.add(group, group, ...)
myuser.groups.remove(group, group, ...)
myuser.groups.clear()
```

----------------------------------------

TITLE: Implementing Django Per-View Cache Decorator
DESCRIPTION: Example of using the cache_page decorator to cache a view's response and configuring URL patterns with cached views.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
from django.views.decorators.cache import cache_page

@cache_page(60 * 15)
def my_view(request): ...

urlpatterns = [
    path("foo/<int:code>/", my_view),
]
```

----------------------------------------

TITLE: Processing Uploaded Files in Django
DESCRIPTION: A function that processes an uploaded file by writing it to disk in chunks. Using chunks() method ensures that large files don't overwhelm system memory.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
def handle_uploaded_file(f):
    with open("some/file/name.txt", "wb+") as destination:
        for chunk in f.chunks():
            destination.write(chunk)
```

----------------------------------------

TITLE: Django User Retrieval Functions
DESCRIPTION: Synchronous and asynchronous functions to retrieve user model instances associated with a request's session. Verifies session authentication using backend's get_user() method and validates session hash.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
def get_user(request):
    # Returns the user model instance associated with the request's session
    pass

async def aget_user(request):
    # Asynchronous version of get_user()
    pass
```

----------------------------------------

TITLE: Initializing Django in Standalone Scripts
DESCRIPTION: Demonstrates how to properly initialize Django in standalone scripts to avoid calling django.setup() multiple times. This is important when reusable application logic is placed in standalone scripts.
SOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_11

LANGUAGE: Python
CODE:
```
if __name__ == "__main__":
    import django

    django.setup()
```

----------------------------------------

TITLE: Filtering Django Models with Conditional Exists Subquery (Python)
DESCRIPTION: This Python snippet demonstrates filtering `Client` objects in Django. It constructs a subquery (`non_unique_account_type`) using `OuterRef` to find other clients with the same `account_type`. The main query then filters `Client` objects where such a non-unique account type does *not* exist using `~Exists()`, effectively selecting clients with unique account types. This avoids adding the existence check to the SELECT columns.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_9

LANGUAGE: pycon
CODE:
```
>>> non_unique_account_type = (
...     Client.objects.filter(
...         account_type=OuterRef("account_type"),
...     )
...     .exclude(pk=OuterRef("pk"))
...     .values("pk")
... )
>>> Client.objects.filter(~Exists(non_unique_account_type))
```

----------------------------------------

TITLE: Accessing Manager in Django Models
DESCRIPTION: This snippet demonstrates how to access a model's Manager (objects) to create QuerySets. It shows that Manager is accessible through the model class but not through model instances, enforcing separation between table-level and record-level operations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> Blog.objects
<django.db.models.manager.Manager object at ...>
>>> b = Blog(name="Foo", tagline="Bar")
>>> b.objects
Traceback:
    ...
AttributeError: "Manager isn't accessible via Blog instances."
```

----------------------------------------

TITLE: Defining TextChoices with Auto-Generated Labels (Python/Django)
DESCRIPTION: Demonstrates how to define a `models.TextChoices` enumeration in Django. Shows that the human-readable label for a member is automatically generated from its name if not explicitly provided, replacing underscores with spaces and using title case.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_7

LANGUAGE: pycon
CODE:
```
>>> class Vehicle(models.TextChoices):
...     CAR = "C"
...     TRUCK = "T"
...     JET_SKI = "J"
...
>>> Vehicle.JET_SKI.label
'Jet Ski'
```

----------------------------------------

TITLE: Defining a Class-Based View in Django
DESCRIPTION: This snippet shows how to define a class-based view in Django. It demonstrates creating a TemplateView subclass with a custom get_context_data method to add extra context data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.views.generic import TemplateView


class HomeView(TemplateView):
    template_name = "myapp/home.html"

    def get_context_data(self, **kwargs):
        kwargs["environment"] = "Production"
        return super().get_context_data(**kwargs)
```

----------------------------------------

TITLE: Applying Filters in Django Templates
DESCRIPTION: Demonstrates the use of filters in Django templates to transform variable values. Includes examples of built-in filters like 'title' and 'date'.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_2

LANGUAGE: html
CODE:
```
{{ django|title }}
```

LANGUAGE: html
CODE:
```
{{ my_date|date:"Y-m-d" }}
```

----------------------------------------

TITLE: Enabling Explicit TLS for SMTP Connection in Django
DESCRIPTION: Specifies whether to use an explicit TLS (secure) connection (False by default) when communicating with the SMTP server, typically on port 587. Mutually exclusive with EMAIL_USE_SSL.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_32

LANGUAGE: python
CODE:
```
EMAIL_USE_TLS = False
```

----------------------------------------

TITLE: Potential XSS Vulnerability in Django Templates
DESCRIPTION: Demonstrates how unescaped user input can lead to potential Cross-Site Scripting (XSS) attacks. This example shows why automatic HTML escaping is important.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_14

LANGUAGE: html+django
CODE:
```
Hello, {{ name }}
```

LANGUAGE: html+django
CODE:
```
Hello, <script>alert('hello')</script>
```

----------------------------------------

TITLE: Using Request Headers in Django Test Clients - Python
DESCRIPTION: Demonstrates the change in test client usage: passing HTTP headers as direct keyword arguments in older versions versus the new explicit headers dictionary in Django 4.2+. This snippet helps developers update their tests by switching from custom-prefixed keyword arguments to the standardized headers parameter, improving clarity and compatibility with async clients. Requires Django's Client and AsyncClient classes to apply.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
# Before:
self.client.get("/home/", HTTP_ACCEPT_LANGUAGE="fr")
await self.async_client.get("/home/", ACCEPT_LANGUAGE="fr")

# After:
self.client.get("/home/", headers={"accept-language": "fr"})
await self.async_client.get("/home/", headers={"accept-language": "fr"})
```

----------------------------------------

TITLE: QuerySet Explain Method and Usage in Django
DESCRIPTION: Describes the 'explain()' method, which outputs the database query plan, detailing execution strategies like indexes and joins for performance analysis. Includes examples for PostgreSQL and notes on supported formats and flags, highlighting compatibility and potential impact on database state.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_92

LANGUAGE: python
CODE:
```
.. method:: explain(format=None, **options)
.. method:: aexplain(format=None, **options)

*Asynchronous version*: ``aexplain()``

Returns a string of the ``QuerySet``’s execution plan, which details how the
database would execute the query, including any indexes or joins that would be
used. Knowing these details may help you improve the performance of slow
queries.

For example, when using PostgreSQL:

.. code-block:: pycon

    >>> print(Blog.objects.filter(title="My Blog").explain())
    Seq Scan on blog  (cost=0.00..35.50 rows=10 width=12)
      Filter: (title = 'My Blog'::bpchar)

The output differs significantly between databases.

``explain()`` is supported by all built-in database backends except Oracle
because an implementation there isn't straightforward.

The ``format`` parameter changes the output format from the databases's
default, which is usually text-based. PostgreSQL supports ``'TEXT'``,
``'JSON'``, ``'YAML'``, and ``'XML'`` formats. MariaDB and MySQL support
``'TEXT'`` (also called ``'TRADITIONAL'``) and ``'JSON'`` formats. MySQL
8.0.16+ also supports an improved ``'TREE'`` format, which is similar to
PostgreSQL's ``'TEXT'`` output and is used by default, if supported.

Some databases accept flags that can return more information about the query.
Pass these flags as keyword arguments. For example, when using PostgreSQL:

.. code-block:: pycon

    >>> print(Blog.objects.filter(title="My Blog").explain(verbose=True, analyze=True))
    Seq Scan on public.blog  (cost=0.00..35.50 rows=10 width=12) (actual time=0.004..0.004 rows=10 loops=1)
      Output: id, title
      Filter: (blog.title = 'My Blog'::bpchar)
    Planning time: 0.064 ms
    Execution time: 0.058 ms

On some databases, flags may cause the query to be executed which could have
adverse effects on your database. For example, the ``ANALYZE`` flag supported
by MariaDB, MySQL 8.0.18+, and PostgreSQL could result in changes to data if
there are triggers or if a function is called, even for a ``SELECT`` query.

.. versionchanged:: 5.2

    Support for the ``memory`` and ``serialize`` options on PostgreSQL 17+ was
    added.
```

----------------------------------------

TITLE: Filtering M2M Relationships Using '__in' Lookup (pycon)
DESCRIPTION: Shows how to filter `Article` objects based on whether their related `Publication` is within a given list, using the `__in` lookup. It demonstrates using both a list of IDs (`[1, 2]`) and a list of `Publication` instances (`[p1, p2]`). `distinct()` is used to ensure unique `Article` results.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_14

LANGUAGE: pycon
CODE:
```
>>> Article.objects.filter(publications__in=[1, 2]).distinct()
<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>
>>> Article.objects.filter(publications__in=[p1, p2]).distinct()
<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>
```

----------------------------------------

TITLE: Author Average Book Rating
DESCRIPTION: Shows how to calculate average rating across all books by an author.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
Author.objects.aggregate(average_rating=Avg("book__rating"))
```

----------------------------------------

TITLE: Defining a Model with Composite Primary Key using Django (Python)
DESCRIPTION: Shows how to define a Django model with a composite primary key using CompositePrimaryKey on two fields, tenant_id and id. The snippet includes all necessary import statements, model declaration, and field definitions needed to create a TenantUser model. Prerequisites: Django >= 5.2 (for CompositePrimaryKey support). The class TenantUser resulting from this code allows Django to treat tenant_id and id together as the primary key.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/meta.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.db import models

class TenantUser(models.Model):
    pk = models.CompositePrimaryKey("tenant_id", "id")
    tenant_id = models.IntegerField()
    id = models.IntegerField()
```

----------------------------------------

TITLE: Configuring Django TemplateView in URLconf (Python)
DESCRIPTION: Shows how to add a Django TemplateView directly to the URL patterns by calling as_view() with overridden attributes. Requires Django installed and a valid template (about.html). Parameters include template_name, specifying which template to render. Expected input is an HTTP request to the '/about/' route; returns an HTTP response rendering the template. This approach is best for simple, mostly-unmodified generic views.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/index.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.urls import path
from django.views.generic import TemplateView

urlpatterns = [
    path("about/", TemplateView.as_view(template_name="about.html")),
]
```

----------------------------------------

TITLE: Defining DetailView Class in Django
DESCRIPTION: Displays details of a single object. Handles retrieval of the object and rendering of the template.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
class DetailView():
    # Attributes
    content_type
    context_object_name
    extra_context
    http_method_names
    model
    pk_url_kwarg
    query_pk_and_slug
    queryset
    response_class
    slug_field
    slug_url_kwarg
    template_engine
    template_name
    template_name_field
    template_name_suffix

    # Methods
    as_view()
    dispatch()
    get()
    get_context_data()
    get_object()
    head()
    http_method_not_allowed()
    render_to_response()
    setup()
```

----------------------------------------

TITLE: Filtered ListView for Publisher-Specific Books
DESCRIPTION: Implementation of ListView with a filtered queryset for showing books from a specific publisher
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.views.generic import ListView
from books.models import Book


class AcmeBookListView(ListView):
    context_object_name = "book_list"
    queryset = Book.objects.filter(publisher__name="ACME Publishing")
    template_name = "books/acme_list.html"
```

----------------------------------------

TITLE: Inspecting ForeignKey References with F Expressions - Django ORM - Python (pycon)
DESCRIPTION: This interactive shell snippet illustrates that referencing a ForeignKey field with an F expression assigns the related object's primary key (not the model instance) to the annotated field. Demonstrates that direct access to the related field yields the model instance, whereas the F-based annotation gives you the PK. Useful in cases where you need just the identifier without triggering a join to fetch the related object.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
>>> car = Company.objects.annotate(built_by=F("manufacturer"))[0]
>>> car.manufacturer
<Manufacturer: Toyota>
>>> car.built_by
3
```

----------------------------------------

TITLE: Using Model.refresh_from_db in Django Tests (Python)
DESCRIPTION: Illustrates the use of `obj.refresh_from_db()` within a test method in Django. After performing a database update using `MyModel.objects.filter(...).update()`, the in-memory object `obj` still holds the old value. Calling `refresh_from_db()` updates the object's fields from the database, allowing assertions like `self.assertEqual(obj.val, 2)` to pass.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
def test_update_result(self):
    obj = MyModel.objects.create(val=1)
    MyModel.objects.filter(pk=obj.pk).update(val=F("val") + 1)
    # At this point obj.val is still 1, but the value in the database
    # was updated to 2. The object's updated value needs to be reloaded
    # from the database.
    obj.refresh_from_db()
    self.assertEqual(obj.val, 2)
```

----------------------------------------

TITLE: Configuring PostgreSQL Connection Pools in Django Settings - Python
DESCRIPTION: This example demonstrates how to enable and configure connection pooling for PostgreSQL in a Django project. The snippet is to be added to the DATABASES section of Django’s Python settings file, specifying the 'pool' key within 'OPTIONS' to customize pool parameters like min_size, max_size, and timeout. A dependency on the 'psycopg' package is required. Inputs include dictionary entries for the database configuration, and outputs are managed automatically at runtime. The snippet assumes correct database modules and may not handle missing dependencies or be compatible with earlier Django versions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        # ...\n        \"OPTIONS\": {\n            \"pool\": {\n                \"min_size\": 2,\n                \"max_size\": 4,\n                \"timeout\": 10,\n            }\n        },\n    },\n}
```

----------------------------------------

TITLE: Creating Custom User Creation Form with Django
DESCRIPTION: Example of extending UserCreationForm to work with a custom user model that is a subclass of AbstractUser. Adds custom fields while maintaining the base functionality.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
from django.contrib.auth.forms import UserCreationForm
from myapp.models import CustomUser


class CustomUserCreationForm(UserCreationForm):
    class Meta(UserCreationForm.Meta):
        model = CustomUser
        fields = UserCreationForm.Meta.fields + ("custom_field",)
```

----------------------------------------

TITLE: Configuring Django URL Patterns
DESCRIPTION: This snippet demonstrates how to configure URL patterns in Django, mapping URL paths to corresponding view functions for handling requests.
SOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.urls import path

from . import views

urlpatterns = [
    path("articles/<int:year>/", views.year_archive),
    path("articles/<int:year>/<int:month>/", views.month_archive),
    path("articles/<int:year>/<int:month>/<int:pk>/", views.article_detail),
]
```

----------------------------------------

TITLE: Applying Permission Required Decorator in Django
DESCRIPTION: Demonstrates the use of the @permission_required decorator to restrict access to a view based on user permissions. It shows how to specify the required permission and an optional login URL.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
from django.contrib.auth.decorators import permission_required

@permission_required("polls.add_choice", login_url="/loginpage/")
def my_view(request): ...
```

----------------------------------------

TITLE: Creating and Accessing Related Django Model Instances - Pycon
DESCRIPTION: Demonstrates the creation and access patterns of Places and Restaurants using the Django ORM in an interactive Python session. It covers instantiation, assignment, and reverse relationship access via attributes and shows how relationships handle missing associations and attribute checks. Django must be properly configured, and the models must be migrated before executing these commands. Outputs include instantiated objects and printed representations; exceptions are managed explicitly where missing relationships are accessed.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/one_to_one.txt#2025-04-23_snippet_1

LANGUAGE: pycon
CODE:
```
>>> p1 = Place(name="Demon Dogs", address="944 W. Fullerton")
>>> p1.save()
>>> p2 = Place(name="Ace Hardware", address="1013 N. Ashland")
>>> p2.save()

```

LANGUAGE: pycon
CODE:
```
>>> r = Restaurant(place=p1, serves_hot_dogs=True, serves_pizza=False)
>>> r.save()

```

LANGUAGE: pycon
CODE:
```
>>> r.place
<Place: Demon Dogs the place>

```

LANGUAGE: pycon
CODE:
```
>>> p1.restaurant
<Restaurant: Demon Dogs the restaurant>

```

LANGUAGE: pycon
CODE:
```
>>> from django.core.exceptions import ObjectDoesNotExist
>>> try:
...     p2.restaurant
... except ObjectDoesNotExist:
...     print("There is no restaurant here.")
...
There is no restaurant here.

```

LANGUAGE: pycon
CODE:
```
>>> hasattr(p2, "restaurant")
False

```

LANGUAGE: pycon
CODE:
```
>>> r.place = p2
>>> r.save()
>>> p2.restaurant
<Restaurant: Ace Hardware the restaurant>
>>> r.place
<Place: Ace Hardware the place>

```

LANGUAGE: pycon
CODE:
```
>>> p1.restaurant = r
>>> p1.restaurant
<Restaurant: Demon Dogs the restaurant>

```

LANGUAGE: pycon
CODE:
```
>>> p3 = Place(name="Demon Dogs", address="944 W. Fullerton")
>>> Restaurant.objects.create(place=p3, serves_hot_dogs=True, serves_pizza=False)
Traceback (most recent call last):
...
ValueError: save() prohibited to prevent data loss due to unsaved related object 'place'.

```

LANGUAGE: pycon
CODE:
```
>>> Restaurant.objects.all()
<QuerySet [<Restaurant: Demon Dogs the restaurant>, <Restaurant: Ace Hardware the restaurant>]>

```

LANGUAGE: pycon
CODE:
```
>>> Place.objects.order_by("name")
<QuerySet [<Place: Ace Hardware the place>, <Place: Demon Dogs the place>]>

```

LANGUAGE: pycon
CODE:
```
>>> Restaurant.objects.get(place=p1)
<Restaurant: Demon Dogs the restaurant>
>>> Restaurant.objects.get(place__pk=1)
<Restaurant: Demon Dogs the restaurant>
>>> Restaurant.objects.filter(place__name__startswith="Demon")
<QuerySet [<Restaurant: Demon Dogs the restaurant>]>
>>> Restaurant.objects.exclude(place__address__contains="Ashland")
<QuerySet [<Restaurant: Demon Dogs the restaurant>]>

```

LANGUAGE: pycon
CODE:
```
>>> Place.objects.get(pk=1)
<Place: Demon Dogs the place>
>>> Place.objects.get(restaurant__place=p1)
<Place: Demon Dogs the place>
>>> Place.objects.get(restaurant=r)
<Place: Demon Dogs the place>
>>> Place.objects.get(restaurant__place__name__startswith="Demon")
<Place: Demon Dogs the place>

```

LANGUAGE: pycon
CODE:
```
>>> p2.delete()
(2, {'one_to_one.Restaurant': 1, 'one_to_one.Place': 1})
>>> Restaurant.objects.all()
<QuerySet [<Restaurant: Demon Dogs the restaurant>]>

```

LANGUAGE: pycon
CODE:
```
>>> w = r.waiter_set.create(name="Joe")
>>> w
<Waiter: Joe the waiter at Demon Dogs the restaurant>

```

LANGUAGE: pycon
CODE:
```
>>> Waiter.objects.filter(restaurant__place=p1)
<QuerySet [<Waiter: Joe the waiter at Demon Dogs the restaurant>]>
>>> Waiter.objects.filter(restaurant__place__name__startswith="Demon")
<QuerySet [<Waiter: Joe the waiter at Demon Dogs the restaurant>]>

```

----------------------------------------

TITLE: Reverse M2M Querying with '__in' Lookup (pycon)
DESCRIPTION: Shows reverse many-to-many querying using the `__in` lookup. It filters `Publication` objects based on whether they are related to `Article` objects within the specified list (using IDs `[1, 2]` or instances `[a1, a2]`). `distinct()` ensures unique `Publication` results.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_16

LANGUAGE: pycon
CODE:
```
>>> Publication.objects.filter(article__in=[1, 2]).distinct()
<QuerySet [<Publication: Highlights for Children>, <Publication: Science News>, <Publication: Science Weekly>, <Publication: The Python Journal>]>
>>> Publication.objects.filter(article__in=[a1, a2]).distinct()
<QuerySet [<Publication: Highlights for Children>, <Publication: Science News>, <Publication: Science Weekly>, <Publication: The Python Journal>]>
```

----------------------------------------

TITLE: Chaining order_by() After values() Python
DESCRIPTION: Demonstrates chaining the order_by() method after values(). Both methods affect the QuerySet evaluation and ordering, but the preferred Django style is to place SQL-affecting methods like order_by() before output-affecting methods like values().
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_28

LANGUAGE: Python
CODE:
```
Blog.objects.values().order_by("id")
```

----------------------------------------

TITLE: Defining Article Model with Status Choices in Python
DESCRIPTION: This snippet defines an Article model with a title, body, and status field. The status field uses predefined choices for draft, published, and withdrawn states.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models

STATUS_CHOICES = {
    "d": "Draft",
    "p": "Published",
    "w": "Withdrawn",
}


class Article(models.Model):
    title = models.CharField(max_length=100)
    body = models.TextField()
    status = models.CharField(max_length=1, choices=STATUS_CHOICES)

    def __str__(self):
        return self.title
```

----------------------------------------

TITLE: Registering a Custom User Model with Django Admin
DESCRIPTION: Shows how to register a custom User model with Django's admin interface using the UserAdmin class. This enables administration of the custom user model through Django's admin site.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import User

admin.site.register(User, UserAdmin)
```

----------------------------------------

TITLE: Adding a Custom Manager to a Django Model (Python)
DESCRIPTION: This snippet shows how to declare a custom manager by adding a Manager instance with a user-defined name (here, 'people') to a Django model. By explicitly assigning a custom manager on the model class, the default 'objects' manager will not appear. Dependencies include Django framework and a valid project setup. Input: none directly, but you must use this class in a Django app. Output: the model will have 'people' as the manager for query operations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/class.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models\n\n\nclass Person(models.Model):\n    # Add manager with another name\n    people = models.Manager()
```

----------------------------------------

TITLE: Resolving URLs in Django Templates using the url Tag
DESCRIPTION: Shows how to use the url template tag to resolve a URL in a Django template, using the polls namespace.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_15

LANGUAGE: html
CODE:
```
{% url 'polls:index' %}
```

----------------------------------------

TITLE: Grouping URL Patterns with Common Prefixes in Django
DESCRIPTION: This snippet illustrates how to group URL patterns with common prefixes in Django's URLconf. It demonstrates a technique to reduce redundancy in URL patterns by using nested includes.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
from django.urls import include, path
from . import views

urlpatterns = [
    path(
        "<page_slug>-<page_id>/",
        include(
            [
                path("history/", views.history),
                path("edit/", views.edit),
                path("discuss/", views.discuss),
                path("permissions/", views.permissions),
            ]
        ),
    ),
]
```

----------------------------------------

TITLE: Filtering by Null Values using `isnull` Lookup in Django (Python and SQL)
DESCRIPTION: Shows how to filter a Django QuerySet for records where a specific field is NULL or NOT NULL using the `__isnull` lookup. It accepts boolean values `True` (for `IS NULL`) or `False` (for `IS NOT NULL`). Provides the Python example and the equivalent SQL `IS NULL` clause.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_122

LANGUAGE: Python
CODE:
```
Entry.objects.filter(pub_date__isnull=True)
```

LANGUAGE: SQL
CODE:
```
SELECT ... WHERE pub_date IS NULL;
```

----------------------------------------

TITLE: Implementing PermissionRequiredMixin in Django Class-Based Views
DESCRIPTION: Demonstrates the use of PermissionRequiredMixin in a class-based view to check for user permissions. It shows how to specify single or multiple required permissions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
from django.contrib.auth.mixins import PermissionRequiredMixin

class MyView(PermissionRequiredMixin, View):
    permission_required = "polls.add_choice"
    # Or multiple of permissions:
    permission_required = ["polls.view_choice", "polls.change_choice"]
```

----------------------------------------

TITLE: Overriding Class Attributes via Subclassing in Django
DESCRIPTION: This snippet illustrates overriding a class attribute inherited from a parent view class. The `MorningGreetingView` class inherits from `GreetingView` and overrides the `greeting` attribute with a new value, demonstrating standard Python inheritance for view customization.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class MorningGreetingView(GreetingView):
    greeting = "Morning to ya"
```

----------------------------------------

TITLE: Filtering QuerySets by Date Value - Django ORM (Python)
DESCRIPTION: Shows how to filter records where a datetime field is cast to date, using '__date' lookup in Django. Requires the Entry model, Django ORM, and the datetime module. Accepts a date object as input and yields results where the pub_date matches or is compared to a specific date. Useful for date-based filtering on DateTimeField attributes, with additional timezone consideration if USE_TZ is True.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_103

LANGUAGE: python
CODE:
```
Entry.objects.filter(pub_date__date=datetime.date(2005, 1, 1))
Entry.objects.filter(pub_date__date__gt=datetime.date(2005, 1, 1))
```

----------------------------------------

TITLE: Converting ManyToManyField to Through Model
DESCRIPTION: Shows how to change a ManyToManyField to use a through model while preserving existing relations. Uses SeparateDatabaseAndState to rename tables and adds new fields to the through model.
SOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            database_operations=[
                # Old table name from checking with sqlmigrate, new table
                # name from AuthorBook._meta.db_table.
                migrations.RunSQL(
                    sql="ALTER TABLE core_book_authors RENAME TO core_authorbook",
                    reverse_sql="ALTER TABLE core_authorbook RENAME TO core_book_authors",
                ),
            ],
            state_operations=[
                migrations.CreateModel(
                    name="AuthorBook",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        (
                            "author",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.DO_NOTHING,
                                to="core.Author",
                            ),
                        ),
                        (
                            "book",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.DO_NOTHING,
                                to="core.Book",
                            ),
                        ),
                    ],
                ),
                migrations.AlterField(
                    model_name="book",
                    name="authors",
                    field=models.ManyToManyField(
                        to="core.Author",
                        through="core.AuthorBook",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="authorbook",
            name="is_primary",
            field=models.BooleanField(default=False),
        ),
    ]
```

----------------------------------------

TITLE: Overriding get_formset_kwargs in ModelAdmin Python
DESCRIPTION: This snippet demonstrates overriding the `get_formset_kwargs` method in a Django `ModelAdmin` subclass. The purpose is to customize the keyword arguments passed to the formset's constructor, specifically adding the current `request` object into the `form_kwargs` dictionary, making it accessible within the formset's forms. It utilizes dictionary unpacking (`**`) to merge the parent class's kwargs with the custom ones.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_56

LANGUAGE: python
CODE:
```
class MyModelAdmin(admin.ModelAdmin):
    def get_formset_kwargs(self, request, obj, inline, prefix):
        return {
            **super().get_formset_kwargs(request, obj, inline, prefix),
            "form_kwargs": {"request": request},
        }
```

----------------------------------------

TITLE: Defining a Model with JSONField in Django
DESCRIPTION: Demonstrates how to define a Django model that includes a JSONField for storing JSON data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
from django.db import models


class Dog(models.Model):
    name = models.CharField(max_length=200)
    data = models.JSONField(null=True)

    def __str__(self):
        return self.name
```

----------------------------------------

TITLE: Configuring Django FileField upload_to - Python
DESCRIPTION: Demonstrates how to use the `upload_to` argument in a Django `FileField`. It shows examples of using a simple directory path and a path including `strftime` formatting to organize uploaded files by date.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_19

LANGUAGE: Python
CODE:
```
class MyModel(models.Model):
    # file will be uploaded to MEDIA_ROOT/uploads
    upload = models.FileField(upload_to="uploads/")
    # or...
    # file will be saved to MEDIA_ROOT/uploads/2015/01/30
    upload = models.FileField(upload_to="uploads/%Y/%m/%d/")
```

----------------------------------------

TITLE: Testing email functionality in Django tests
DESCRIPTION: Example test case that demonstrates how to test Django's email functionality using the test outbox. Shows how to verify that emails were sent and check their contents.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_50

LANGUAGE: python
CODE:
```
from django.core import mail
from django.test import TestCase


class EmailTest(TestCase):
    def test_send_email(self):
        # Send message.
        mail.send_mail(
            "Subject here",
            "Here is the message.",
            "from@example.com",
            ["to@example.com"],
            fail_silently=False,
        )

        # Test that one message has been sent.
        self.assertEqual(len(mail.outbox), 1)

        # Verify that the subject of the first message is correct.
        self.assertEqual(mail.outbox[0].subject, "Subject here")
```

----------------------------------------

TITLE: Configuring S3 Storage Backend in Django Settings
DESCRIPTION: Example configuration for using a custom S3 storage backend for static files in Django. This setting tells collectstatic to use the custom storage backend for handling static files.
SOURCE: https://github.com/django/django/blob/main/docs/howto/static-files/deployment.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
STORAGES = {
    # ...
    "staticfiles": {"BACKEND": "myproject.storage.S3Storage"}
}
```

----------------------------------------

TITLE: Testing Django management commands
DESCRIPTION: Example test case that demonstrates how to test a Django management command using call_command and capturing its output with StringIO.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_52

LANGUAGE: python
CODE:
```
from io import StringIO
from django.core.management import call_command
from django.test import TestCase


class ClosepollTest(TestCase):
    def test_command_output(self):
        out = StringIO()
        call_command("closepoll", poll_ids=[1], stdout=out)
        self.assertIn('Successfully closed poll "1"', out.getvalue())
```

----------------------------------------

TITLE: Customizing FlatPage ModelAdmin Fields in Django
DESCRIPTION: Shows how to customize the fields displayed in the admin interface for a FlatPage model, including grouping fields on the same line.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
class FlatPageAdmin(admin.ModelAdmin):
    fields = ["url", "title", "content"]
```

LANGUAGE: python
CODE:
```
class FlatPageAdmin(admin.ModelAdmin):
    fields = [("url", "title"), "content"]
```

----------------------------------------

TITLE: Defining a UUIDField as Primary Key in Django Model (Python)
DESCRIPTION: This snippet demonstrates how to define a UUIDField to store universally unique identifiers in a Django model. It shows how to use it as a primary key and set a default value using `uuid.uuid4`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_28

LANGUAGE: Python
CODE:
```
import uuid
from django.db import models


class MyUUIDModel(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    # other fields
```

----------------------------------------

TITLE: Defining ImageField in Django
DESCRIPTION: Documents the ImageField, which inherits from FileField but adds image validation. It can optionally auto-populate model fields with the image's height and width. Requires the Pillow library and is stored as a varchar in the database.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_25

LANGUAGE: Python
CODE:
```
ImageField(upload_to=None, height_field=None, width_field=None, max_length=100, **options)
```

----------------------------------------

TITLE: Setting Session Values in Django Views
DESCRIPTION: Example of setting a value in the session dictionary using the __setitem__ method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
request.session['fav_color'] = 'blue'
```

----------------------------------------

TITLE: Performing Reverse URL Lookup in Django Python Code
DESCRIPTION: This snippet shows how to use the reverse() function in Django Python code to perform a reverse URL lookup. It demonstrates redirecting to a URL based on a dynamic year value.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.http import HttpResponseRedirect
from django.urls import reverse


def redirect_to_year(request):
    # ...
    year = 2006
    # ...
    return HttpResponseRedirect(reverse("news-year-archive", args=(year,)))
```

----------------------------------------

TITLE: Implementing Custom Field Validation in a ModelForm Python
DESCRIPTION: This Python code defines a custom `ModelForm` (`MyArticleAdminForm`) intended for use with a Django `ModelAdmin`. It includes a custom validation method `clean_name` for the 'name' field. This method contains the logic to validate the data entered for the 'name' field and must return the cleaned data. This allows for validation beyond the standard model field validators.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_61

LANGUAGE: python
CODE:
```
class MyArticleAdminForm(forms.ModelForm):
    def clean_name(self):
        # do something that validates your data
        return self.cleaned_data["name"]
```

----------------------------------------

TITLE: Creating Basic ModelForm from Article Model in Python
DESCRIPTION: Example showing how to create a ModelForm subclass for an Article model, defining which fields to include, and demonstrating how to instantiate it for both new and existing model instances.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.forms import ModelForm
>>> from myapp.models import Article

# Create the form class.
>>> class ArticleForm(ModelForm):
...     class Meta:
...         model = Article
...         fields = ["pub_date", "headline", "content", "reporter"]
...

# Creating a form to add an article.
>>> form = ArticleForm()

# Creating a form to change an existing article.
>>> article = Article.objects.get(pk=1)
>>> form = ArticleForm(instance=article)
```

----------------------------------------

TITLE: Configuring DEBUG Setting in Django
DESCRIPTION: Demonstrates the importance of setting DEBUG to False in production environments to prevent access to the technical 500 debug page, which could potentially expose sensitive information.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.5.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
DEBUG = True
```

----------------------------------------

TITLE: Configuring Shared Memcached Backend (Multiple Servers, Different Ports) in Django (Python)
DESCRIPTION: This Python snippet configures Django's `CACHES` setting for a shared cache across multiple Memcached instances running on different IP addresses and ports (172.19.26.240:11211, 172.19.26.242:11212, 172.19.26.244:11213). The `LOCATION` setting takes a list of server addresses. It uses the `PyMemcacheCache` backend.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
        "LOCATION": [
            "172.19.26.240:11211",
            "172.19.26.242:11212",
            "172.19.26.244:11213",
        ],
    }
}
```

----------------------------------------

TITLE: Accessing Related Fields in values() (Reverse Relation) Python
DESCRIPTION: Shows how to access fields from related models (like Entry via the reverse relation from Blog) directly within the values() call using double underscore notation. Be aware this can multiply result rows if the relation is OneToMany or ManyToMany.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_30

LANGUAGE: Python
CODE:
```
>>> Blog.objects.values("name", "entry__headline")
```

----------------------------------------

TITLE: Comparing Django Model Instances with `__eq__` (Python)
DESCRIPTION: Illustrates the behavior of the `__eq__` method for Django model instances. It defines sample models (`MyModel`, `MyProxyModel`, `MultitableInherited`) and demonstrates equality checks based on primary key values and model types (including proxy and multi-table inheritance). Instances with the same primary key and concrete class are considered equal, except when the primary key is `None`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
from django.db import models


class MyModel(models.Model):
    id = models.AutoField(primary_key=True)


class MyProxyModel(MyModel):
    class Meta:
        proxy = True


class MultitableInherited(MyModel):
    pass


# Primary keys compared
MyModel(id=1) == MyModel(id=1)
MyModel(id=1) != MyModel(id=2)
# Primary keys are None
MyModel(id=None) != MyModel(id=None)
# Same instance
instance = MyModel(id=None)
instance == instance
# Proxy model
MyModel(id=1) == MyProxyModel(id=1)
# Multi-table inheritance
MyModel(id=1) != MultitableInherited(id=1)
```

----------------------------------------

TITLE: Defining Abstract Base Class in Django
DESCRIPTION: Shows how to define an abstract base class (`CommonInfo`) in Django by setting `abstract=True` in its Meta class. It also demonstrates how a child model (`Student`) inherits fields from the abstract base class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_35

LANGUAGE: Python
CODE:
```
from django.db import models


class CommonInfo(models.Model):
    name = models.CharField(max_length=100)
    age = models.PositiveIntegerField()

    class Meta:
        abstract = True


class Student(CommonInfo):
    home_group = models.CharField(max_length=5)
```

----------------------------------------

TITLE: Django Date Field Operations
DESCRIPTION: Examples of performing date comparisons and operations using F-expressions and timedelta.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
>>> from datetime import timedelta
>>> Entry.objects.filter(mod_date__gt=F("pub_date") + timedelta(days=3))
```

----------------------------------------

TITLE: Returning Related Model Data as Dictionaries (Default FK) Python
DESCRIPTION: Uses values() on a model with a ForeignKey. By default, values() represents ForeignKey fields with a key ending in '_id' (e.g., 'blog_id'), storing the primary key of the related object.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_22

LANGUAGE: Python
CODE:
```
>>> Entry.objects.values()
```

----------------------------------------

TITLE: Filtering by Inclusive Range - SQL Equivalent
DESCRIPTION: Provides the SQL equivalent of Django's 'range' lookup, converting the filter into a BETWEEN clause for inclusive bounds. Works on any SQL database supporting standard BETWEEN syntax. Inputs are two string representations of dates; output is a selection of rows matching the range. For datetime fields, only records exactly matching the lower and upper bound times will be included.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_101

LANGUAGE: sql
CODE:
```
SELECT ... WHERE pub_date BETWEEN '2005-01-01' and '2005-03-31';
```

----------------------------------------

TITLE: Implementing an Inclusion Tag in Django
DESCRIPTION: Demonstrates how to create an inclusion tag that renders a template with a list of choices for a Poll object. The tag function returns a dictionary used as the template context.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
def show_results(poll):
    choices = poll.choice_set.all()
    return {"choices": choices}

# Here, register is a django.template.Library instance, as before
@register.inclusion_tag("results.html")
def show_results(poll): ...
```

----------------------------------------

TITLE: Streaming Large CSV Files Using StreamingHttpResponse
DESCRIPTION: An advanced example showing how to stream large CSV files using Django's StreamingHttpResponse. This implementation uses generators and a custom Echo class to efficiently handle large files without storing the entire content in memory.
SOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-csv.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
import csv

from django.http import StreamingHttpResponse


class Echo:
    """An object that implements just the write method of the file-like
    interface.
    """

    def write(self, value):
        """Write the value by returning it, instead of storing in a buffer."""
        return value


def some_streaming_csv_view(request):
    """A view that streams a large CSV file."""
    # Generate a sequence of rows. The range is based on the maximum number of
    # rows that can be handled by a single sheet in most spreadsheet
    # applications.
    rows = (["Row {}".format(idx), str(idx)] for idx in range(65536))
    pseudo_buffer = Echo()
    writer = csv.writer(pseudo_buffer)
    return StreamingHttpResponse(
        (writer.writerow(row) for row in rows),
        content_type="text/csv",
        headers={"Content-Disposition": 'attachment; filename="somefilename.csv"'},
    )
```

----------------------------------------

TITLE: Defining an Author Model with get_absolute_url in Django
DESCRIPTION: Defines an `Author` model using `django.db.models.Model`. It includes a `name` CharField. Crucially, it implements the `get_absolute_url` method, which uses `django.urls.reverse` to return the URL for the detail view of a specific author instance, identified by its primary key (`pk`). This method is often used by generic views for redirection after successful updates or creations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.db import models
from django.urls import reverse


class Author(models.Model):
    name = models.CharField(max_length=200)

    def get_absolute_url(self):
        return reverse("author-detail", kwargs={"pk": self.pk})
```

----------------------------------------

TITLE: Combining Filters and get_or_create() with Q Objects in Django ORM (Python)
DESCRIPTION: Demonstrates using filter() with Q objects to broaden retrieval parameters before calling get_or_create(), allowing flexible matching and controlled creation. Useful where multiple potential first names exist. Requires Person model and Q import.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_72

LANGUAGE: python
CODE:
```
from django.db.models import Q

obj, created = Person.objects.filter(
    Q(first_name="Bob") | Q(first_name="Robert"),
).get_or_create(last_name="Marley", defaults={"first_name": "Bob"})
```

----------------------------------------

TITLE: Defining Django Model with Meta Options
DESCRIPTION: Demonstrates how to include an inner 'class Meta' within a Django model to define metadata options such as ordering and verbose names.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_30

LANGUAGE: python
CODE:
```
from django.db import models


class Ox(models.Model):
    horn_length = models.IntegerField()

    class Meta:
        ordering = ["horn_length"]
        verbose_name_plural = "oxen"
```

----------------------------------------

TITLE: Declaratively Specifying Field Validators in Django ModelForm
DESCRIPTION: This snippet demonstrates how to declaratively specify validators for a field in a Django ModelForm. It defines the 'slug' field with a custom validator function.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from django.forms import CharField, ModelForm
from myapp.models import Article


class ArticleForm(ModelForm):
    slug = CharField(validators=[validate_slug])

    class Meta:
        model = Article
        fields = ["pub_date", "headline", "content", "reporter", "slug"]
```

----------------------------------------

TITLE: Defining Django UpdateView Class
DESCRIPTION: Defines the UpdateView class in Django, used for updating existing objects. It includes a list of attributes and methods specific to this view.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
class UpdateView():
    # Attributes and methods listed in the documentation
```

----------------------------------------

TITLE: Loading Django Secret Key from File
DESCRIPTION: Shows how to load Django's SECRET_KEY from an external file, which provides better security than hardcoding the key in source code.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/checklist.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
with open("/etc/secret_key.txt") as f:
    SECRET_KEY = f.read().strip()
```

----------------------------------------

TITLE: Using the When Expression for Conditional Logic - Django ORM - Python
DESCRIPTION: Demonstrates usage of the When class to construct conditional expressions within Django queries. Shows several patterns: basic field comparison, field lookup, combination with Q objects, boolean expression use, and lookup-based conditions. Assumes import of F, Q, When, Exists, OuterRef, and necessary models; examples are designed for use in annotate, filter, or within a Case clause.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from django.db.models import F, Q, When
>>> # String arguments refer to fields; the following two examples are equivalent:
>>> When(account_type=Client.GOLD, then="name")
>>> When(account_type=Client.GOLD, then=F("name"))
>>> # You can use field lookups in the condition
>>> from datetime import date
>>> When(
...     registered_on__gt=date(2014, 1, 1),
...     registered_on__lt=date(2015, 1, 1),
...     then="account_type",
... )
>>> # Complex conditions can be created using Q objects
>>> When(Q(name__startswith="John") | Q(name__startswith="Paul"), then="name")
>>> # Condition can be created using boolean expressions.
>>> from django.db.models import Exists, OuterRef
>>> non_unique_account_type = (
...     Client.objects.filter(
...         account_type=OuterRef("account_type"),
...     )
...     .exclude(pk=OuterRef("pk"))
...     .values("pk")
... )
>>> When(Exists(non_unique_account_type), then=Value("non unique"))
>>> # Condition can be created using lookup expressions.
>>> from django.db.models.lookups import GreaterThan, LessThan
>>> When(
...     GreaterThan(F("registered_on"), date(2014, 1, 1))
...     & LessThan(F("registered_on"), date(2015, 1, 1)),
...     then="account_type",
... )
```

LANGUAGE: python
CODE:
```
>>> When(then__exact=0, then=1)
>>> When(Q(then=0), then=1)
```

----------------------------------------

TITLE: Running Migrate with Full Traceback - Command Line
DESCRIPTION: Example of using the `django-admin migrate` command with the `--traceback` option. This forces Django to display a full Python stack trace when a `django.core.management.CommandError` occurs, aiding debugging.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_51

LANGUAGE: Command Line
CODE:
```
django-admin migrate --traceback
```

----------------------------------------

TITLE: Creating HTML Template for ArticleListView in Django
DESCRIPTION: Provides an example of an HTML template for displaying a list of articles, including handling of empty lists.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-display.txt#2025-04-23_snippet_5

LANGUAGE: html
CODE:
```
<h1>Articles</h1>
<ul>
{% for article in object_list %}
    <li>{{ article.pub_date|date }} - {{ article.headline }}</li>
{% empty %}
    <li>No articles yet.</li>
{% endfor %}
</ul>
```

----------------------------------------

TITLE: Reloading a Django Model Instance after F() Update
DESCRIPTION: Demonstrates the necessity of reloading a model instance (using `get()` or the more efficient `refresh_from_db()`) to access the updated value after modifying a field with an `F()` expression. Since the update occurs directly in the database, the Python object's attribute retains its original value until reloaded.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
reporter = Reporters.objects.get(pk=reporter.pk)
# Or, more succinctly:
reporter.refresh_from_db()
```

----------------------------------------

TITLE: Implementing Question Detail View with 404 Handling
DESCRIPTION: Creates a view function that displays details for a specific question, implementing error handling for non-existent questions using Http404 exception.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.http import Http404
from django.shortcuts import render

from .models import Question


# ...
def detail(request, question_id):
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404("Question does not exist")
    return render(request, "polls/detail.html", {"question": question})
```

----------------------------------------

TITLE: Customizing user_passes_test Decorator in Django
DESCRIPTION: Demonstrates how to customize the login_url parameter of the user_passes_test decorator. This specifies where users who don't pass the test should be redirected.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_24

LANGUAGE: Python
CODE:
```
@user_passes_test(email_check, login_url="/login/")
def my_view(request): ...
```

----------------------------------------

TITLE: Configuring CACHES
DESCRIPTION: This snippet shows how to configure the CACHES setting.  CACHES is a dictionary containing settings for all caches to be used with Django. This example shows a default configuration using the LocMemCache backend.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_2

LANGUAGE: python
CODE:
```
{
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    }
}
```

----------------------------------------

TITLE: Using a Custom Django Tag with Template Variables (HTML+Django)
DESCRIPTION: This Django template snippet demonstrates how to use a custom template tag named `format_time`. It passes a template variable `blog_entry.date_updated` and a static string literal `"%Y-%m-%d %I:%M %p"` (the desired format) as arguments to the tag.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_30

LANGUAGE: html+django
CODE:
```
<p>This post was last updated at {% format_time blog_entry.date_updated "%Y-%m-%d %I:%M %p" %}.</p>
```

----------------------------------------

TITLE: Defining Django Model Choices using List of Tuples Python
DESCRIPTION: Shows how to define choices for a Django model field using a Python list of two-item tuples. The first element of each tuple is the value stored in the database, and the second is the human-readable name. This is an alternative sequence format for providing field options.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_1

LANGUAGE: Python
CODE:
```
YEAR_IN_SCHOOL_CHOICES = [
    ("FR", "Freshman"),
    ("SO", "Sophomore"),
    ("JR", "Junior"),
    ("SR", "Senior"),
    ("GR", "Graduate"),
]
```

----------------------------------------

TITLE: Adding a Relationship to ManyToManyField in Django (pycon)
DESCRIPTION: Associates an existing `Publication` instance (`p1`) with an existing `Article` instance (`a1`) using the `add()` method on the `ManyToManyField` manager (`publications`).
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_5

LANGUAGE: pycon
CODE:
```
>>> a1.publications.add(p1)
```

----------------------------------------

TITLE: Object-based Redirection in Django
DESCRIPTION: Example of using redirect() with a model object that implements get_absolute_url().
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.shortcuts import redirect


def my_view(request):
    ...
    obj = MyModel.objects.get(...)
    return redirect(obj)
```

----------------------------------------

TITLE: Defining Database Indexes in Django Model Meta
DESCRIPTION: Provides an example of defining database indexes on a Django model using the `indexes` attribute within the `Meta` class. This involves creating instances of `models.Index` specifying the fields to be indexed and optionally a name.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.db import models


class Customer(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)

    class Meta:
        indexes = [
            models.Index(fields=["last_name", "first_name"]),
            models.Index(fields=["first_name"], name="first_name_idx"),
        ]
```

----------------------------------------

TITLE: Basic Signal Receiver Function in Django
DESCRIPTION: Example of a basic signal receiver function that handles HTTP request completion notifications.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
def my_callback(sender, **kwargs):
    print("Request finished!")
```

----------------------------------------

TITLE: Updating Session Authentication Hash in Django
DESCRIPTION: Shows how to use the update_session_auth_hash function to update the session hash after a password change, preventing the user from being logged out.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
from django.contrib.auth import update_session_auth_hash

def password_change(request):
    if request.method == "POST":
        form = PasswordChangeForm(user=request.user, data=request.POST)
        if form.is_valid():
            form.save()
            update_session_auth_hash(request, form.user)
    else:
        ...
```

----------------------------------------

TITLE: Retrieving All User Permissions with ModelBackend in Django (Python)
DESCRIPTION: Returns the combined set of permission strings (user and group) for the `user_obj` via the `ModelBackend`. Returns an empty set if the user is anonymous or inactive (`is_active` is False). The asynchronous version `aget_all_permissions()` was added in Django 5.2.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
get_all_permissions(user_obj, obj=None)
```

LANGUAGE: python
CODE:
```
aget_all_permissions(user_obj, obj=None)
```

----------------------------------------

TITLE: Adding a Custom Validator to a Django Form Field (Python)
DESCRIPTION: Demonstrates adding the custom 'validate_even' validator to a Django Form IntegerField. Because Django converts data before validation, the same validator can be reused across models and forms. Dependency: Django's forms API. The form field 'even_field' requires input to be even, reusing the previously defined function.
SOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django import forms\n\nclass MyForm(forms.Form):\n    even_field = forms.IntegerField(validators=[validate_even])
```

----------------------------------------

TITLE: Starting Django Shell with IPython - Shell
DESCRIPTION: Explicitly starts the Django interactive shell using the IPython interpreter. This command is used when you have multiple "rich" shells installed and want to specifically use IPython.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_32

LANGUAGE: shell
CODE:
```
django-admin shell -i ipython
```

----------------------------------------

TITLE: Raising a Fully Specified ValidationError in Django - Python
DESCRIPTION: Provides a comprehensive example of raising a ValidationError in Django, combining translation, error code, and parameterized message for best reuse and override. This should be used inside custom field or form cleaning methods for robust and maintainable validation logic. It expects a value to substitute into the message, and requires Django forms and translation framework as dependencies.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
raise ValidationError(
    _(\"Invalid value: %(value)s\"),
    code=\"invalid\",
    params={\"value\": \"42\"},
)
```

----------------------------------------

TITLE: Paginating Related Objects with ListView and SingleObjectMixin in Django (Python)
DESCRIPTION: Implements a class-based view to show paginated lists of books for a specific Publisher, combining ListView with SingleObjectMixin to manage both contexts. Requires ListView and SingleObjectMixin from django.views.generic and Publisher from books.models. Uses get() to retrieve the Publisher instance and assigns it to self.object, overrides get_queryset() to fetch the related books, and ensures context contains the publisher. Pagination is controlled with paginate_by, and a custom template can be specified.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.views.generic import ListView\nfrom django.views.generic.detail import SingleObjectMixin\nfrom books.models import Publisher\n\n\nclass PublisherDetailView(SingleObjectMixin, ListView):\n    paginate_by = 2\n    template_name = \"books/publisher_detail.html\"\n\n    def get(self, request, *args, **kwargs):\n        self.object = self.get_object(queryset=Publisher.objects.all())\n        return super().get(request, *args, **kwargs)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"publisher\"] = self.object\n        return context\n\n    def get_queryset(self):\n        return self.object.book_set.all()
```

----------------------------------------

TITLE: Defining LOGIN_REDIRECT_URL setting
DESCRIPTION: This setting sets the URL or named URL pattern where requests are redirected after login. It's used when the LoginView does not get a 'next' GET parameter. The default is '/accounts/profile/'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_71



----------------------------------------

TITLE: Excluding Common Browser and Crawler Requests from 404 Reporting
DESCRIPTION: This code snippet shows how to configure IGNORABLE_404_URLS to exclude common URLs that browsers and web crawlers often request, reducing noise in 404 error reports.
SOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
import re

IGNORABLE_404_URLS = [
    re.compile(r"^/apple-touch-icon.*\.png$"),
    re.compile(r"^/favicon\.ico$"),
    re.compile(r"^/robots\.txt$"),
]
```

----------------------------------------

TITLE: Implementing Class-Based Middleware in Django
DESCRIPTION: A template for creating class-based middleware in Django. This pattern shows how to structure a middleware as a class with __init__ and __call__ methods. The class initializes with a get_response callable and processes each request in its __call__ method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class SimpleMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response
        # One-time configuration and initialization.

    def __call__(self, request):
        # Code to be executed for each request before
        # the view (and later middleware) are called.

        response = self.get_response(request)

        # Code to be executed for each request/response after
        # the view is called.

        return response
```

----------------------------------------

TITLE: Copying Simple Django Model Instances
DESCRIPTION: Shows how to create a copy of a Django model instance by setting the primary key to None and the _state.adding flag to True before saving.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_51

LANGUAGE: python
CODE:
```
blog = Blog(name="My blog", tagline="Blogging is easy")
blog.save()  # blog.pk == 1

blog.pk = None
blog._state.adding = True
blog.save()  # blog.pk == 2
```

----------------------------------------

TITLE: Defining Custom Field Labels in a Django Form
DESCRIPTION: Demonstrates defining a Django `Form` (`CommentForm`) and using the `label` argument within field definitions (`CharField`, `URLField`) to specify human-friendly labels. The example prints the rendered HTML of the form, showing the custom labels.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_3

LANGUAGE: pycon
CODE:
```
>>> from django import forms
>>> class CommentForm(forms.Form):
...     name = forms.CharField(label="Your name")
...     url = forms.URLField(label="Your website", required=False)
...     comment = forms.CharField()
...
>>> f = CommentForm(auto_id=False)
>>> print(f)
<div>Your name:<input type="text" name="name" required></div>
<div>Your website:<input type="url" name="url"></div>
<div>Comment:<input type="text" name="comment" required></div>
```

----------------------------------------

TITLE: Implementing a Simple Block Tag in Django
DESCRIPTION: Demonstrates how to create a custom block tag using @register.simple_block_tag decorator. The example creates a 'chart' tag that renders content between {% chart %} and {% endchart %} tags.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django import template
from myapp.charts import render_chart

register = template.Library()


@register.simple_block_tag
def chart(content):
    return render_chart(source=content)
```

----------------------------------------

TITLE: Using Prefetch Object for Basic Prefetching in Django
DESCRIPTION: Demonstrates the basic usage of the Prefetch object which is equivalent to string-based lookups. This provides more control over the prefetching operation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_46

LANGUAGE: python
CODE:
```
>>> from django.db.models import Prefetch
>>> Restaurant.objects.prefetch_related(Prefetch("pizzas__toppings"))
```

----------------------------------------

TITLE: Basic ModelAdmin Registration in Django
DESCRIPTION: Shows how to create and register a basic ModelAdmin class for the Author model with Django's admin site.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib import admin
from myapp.models import Author


class AuthorAdmin(admin.ModelAdmin):
    pass


admin.site.register(Author, AuthorAdmin)
```

----------------------------------------

TITLE: Using Parameterized Queries with raw()
DESCRIPTION: Example of using the params argument to safely pass parameters to a raw SQL query, which prevents SQL injection attacks by properly escaping values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
>>> lname = "Doe"
>>> Person.objects.raw("SELECT * FROM myapp_person WHERE last_name = %s", [lname])
```

----------------------------------------

TITLE: Adding a Custom Validator to a Django Model Field (Python)
DESCRIPTION: Shows how to attach a callable validator to a Django model IntegerField via the 'validators' list. This example adds the custom 'validate_even' function to enforce even integers at the model layer. Dependency: Django's ORM. The model field 'even_field' will only accept even integers; invalid input triggers a ValidationError. Expects 'validate_even' to be defined/imported.
SOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.db import models\n\nclass MyModel(models.Model):\n    even_field = models.IntegerField(validators=[validate_even])
```

----------------------------------------

TITLE: Configuring the Cached Template Loader in Django
DESCRIPTION: Shows how to set up the cached template loader with a list of other loaders to wrap, improving template rendering performance by caching compiled templates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "OPTIONS": {
            "loaders": [
                (
                    "django.template.loaders.cached.Loader",
                    [
                        "django.template.loaders.filesystem.Loader",
                        "django.template.loaders.app_directories.Loader",
                        "path.to.custom.Loader",
                    ],
                ),
            ],
        },
    }
]
```

----------------------------------------

TITLE: Replacing Related Objects with set() Method in Django ORM - Python
DESCRIPTION: Shows how to replace the complete set of related objects via the set() method, passing a list of new related items. The example prepares a new list [obj1, obj2, obj3] and applies it using e.related_set.set(new_list). Inputs are the related manager and list of objects; result is update of the related set. Requires Django models with valid relationships configured.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
>>> new_list = [obj1, obj2, obj3]
>>> e.related_set.set(new_list)
```

----------------------------------------

TITLE: Static Files Content-Dependent Tagging
DESCRIPTION: Shows how ManifestStaticFilesStorage handles static file caching by appending content-dependent tags to filenames.
SOURCE: https://github.com/django/django/blob/main/docs/topics/performance.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
# ManifestStaticFilesStorage example
from django.contrib.staticfiles.storage import ManifestStaticFilesStorage

class CustomStorage(ManifestStaticFilesStorage):
    pass
```

----------------------------------------

TITLE: Conditional Aggregation: Counting Clients per Type - Django ORM - Python
DESCRIPTION: Shows how to aggregate counts of each account_type by using Count with filter=Q(...) for conditional aggregation in Django ORM. Includes setup code creating additional example clients, and demonstrates a single aggregate query returning counts per type. Relies on Django's Count and Q query constructs, and requires a set of Client records for meaningful output.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> # Create some more Clients first so we can have something to count
>>> Client.objects.create(
...     name="Jean Grey", account_type=Client.REGULAR, registered_on=date.today()
... )
>>> Client.objects.create(
...     name="James Bond", account_type=Client.PLATINUM, registered_on=date.today()
... )
>>> Client.objects.create(
...     name="Jane Porter", account_type=Client.PLATINUM, registered_on=date.today()
... )
>>> # Get counts for each value of account_type
>>> from django.db.models import Count
>>> Client.objects.aggregate(
...     regular=Count("pk", filter=Q(account_type=Client.REGULAR)),
...     gold=Count("pk", filter=Q(account_type=Client.GOLD)),
...     platinum=Count("pk", filter=Q(account_type=Client.PLATINUM)),
... )
{'regular': 2, 'gold': 1, 'platinum': 3}
```

----------------------------------------

TITLE: Asynchronous Cache Operations in Django
DESCRIPTION: Shows how to use asynchronous variants of cache methods, which are prefixed with 'a'. Demonstrates setting and checking for a cache key asynchronously.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_38

LANGUAGE: pycon
CODE:
```
>>> await cache.aset("num", 1)
>>> await cache.ahas_key("num")
True
```

----------------------------------------

TITLE: Storing Static URL in a Variable for Multiple Uses
DESCRIPTION: Demonstrates how to store the result of the static template tag in a variable for later use in a template. This avoids repeatedly calling the static tag when referencing the same file multiple times.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_107

LANGUAGE: html+django
CODE:
```
{% load static %}
{% static "images/hi.jpg" as myphoto %}
<img src="{{ myphoto }}" alt="Hi!">
```

----------------------------------------

TITLE: Customizing Widget Instances by Passing Attributes in Django Python Forms
DESCRIPTION: Demonstrates customizing widget appearance by passing additional HTML attributes through the attrs argument when instantiating widgets within form fields. Requires Django and a forms.Form subclass. The code modifies the 'class' and 'size' HTML attributes for input elements, affecting styling and width. Inputs are widget attribute dictionaries; outputs are form fields with custom HTML in the rendered output.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class CommentForm(forms.Form):
    name = forms.CharField(widget=forms.TextInput(attrs={"class": "special"}))
    url = forms.URLField()
    comment = forms.CharField(widget=forms.TextInput(attrs={"size": "40"}))
```

----------------------------------------

TITLE: Configuring Fast Password Hashing for Django Tests
DESCRIPTION: Shows how to configure a faster password hashing algorithm for Django tests. This can significantly speed up tests that involve user authentication by using MD5 instead of the default slower algorithm.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/overview.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.MD5PasswordHasher",
]
```

----------------------------------------

TITLE: Field Lookups in Django ORM
DESCRIPTION: Provides an overview of how Django's ORM specifies filtering conditions through field lookups like 'exact', 'iexact', 'contains', etc., used with query methods. Explains default behaviors, database-specific nuances, and sample usage scenarios with their SQL equivalents.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_93



----------------------------------------

TITLE: Filtering QuerySet in Django ModelAdmin
DESCRIPTION: This method shows how to customize the queryset for the admin interface, filtering objects based on the logged-in user's permissions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_55

LANGUAGE: python
CODE:
```
class MyModelAdmin(admin.ModelAdmin):
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        if request.user.is_superuser:
            return qs
        return qs.filter(author=request.user)
```

----------------------------------------

TITLE: Implementing a Custom Django Template Filter for Business Hours
DESCRIPTION: This snippet shows how to create a custom Django template filter that checks if a given datetime is within business hours. It uses the expects_localtime flag to handle time zone conversions properly.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
@register.filter(expects_localtime=True)
def businesshours(value):
    try:
        return 9 <= value.hour < 17
    except AttributeError:
        return ""
```

----------------------------------------

TITLE: Nested URL Arguments Pattern Examples
DESCRIPTION: Demonstration of URL patterns using nested regular expression arguments, showing both recommended and discouraged approaches for handling optional page parameters.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.urls import re_path

urlpatterns = [
    re_path(r"^blog/(page-([0-9]+)/)?$", blog_articles),  # bad
    re_path(r"^comments/(?:page-(?P<page_number>[0-9]+)/)?$", comments),  # good
]
```

----------------------------------------

TITLE: Using json_script for Safe JavaScript Data Embedding in Python
DESCRIPTION: Demonstrates the use of json_script function to safely embed JSON data in HTML for JavaScript use. It escapes special characters and wraps the data in a script tag.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
json_script({"hello": "world"}, element_id="hello-data")
```

----------------------------------------

TITLE: Rendering Django Template with Context
DESCRIPTION: Updates the index view to use a template instead of hardcoded output. Loads the template, creates a context dictionary with data, and renders the template with the context.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
from django.template import loader

from .models import Question


def index(request):
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    template = loader.get_template("polls/index.html")
    context = {"latest_question_list": latest_question_list}
    return HttpResponse(template.render(context, request))
```

----------------------------------------

TITLE: Configuring bcrypt as the Default Hasher in Django (Python)
DESCRIPTION: Shows how to set bcrypt as the default password hashing algorithm in Django by modifying the `PASSWORD_HASHERS` setting. `BCryptSHA256PasswordHasher` is listed first, making it the default for new passwords, while maintaining verification support for other hashers.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]
```

----------------------------------------

TITLE: Using never_cache Decorator to Prevent Caching
DESCRIPTION: Demonstrates the never_cache decorator which adds headers to prevent caching of the response by browsers or other caches. Useful for dynamic content that should always be fetched fresh.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_47

LANGUAGE: python
CODE:
```
from django.views.decorators.cache import never_cache


@never_cache
def myview(request): ...
```

----------------------------------------

TITLE: Using atomic Decorator for Transaction Management in Django
DESCRIPTION: Example showing how to use the atomic decorator to wrap a view function in a transaction. This ensures all database operations in the function are executed in a single transaction.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.db import transaction


@transaction.atomic
def viewfunc(request):
    # This code executes inside a transaction.
    do_stuff()
```

----------------------------------------

TITLE: Applying distinct() to a QuerySet (Default) Python
DESCRIPTION: Applies the DISTINCT clause to a QuerySet, removing duplicate rows based on all selected columns. This is the default behavior when distinct() is called without arguments and works across all supported databases.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_8

LANGUAGE: Python
CODE:
```
>>> Author.objects.distinct()
```

----------------------------------------

TITLE: Defining Django Models for Blog and Entry in Python
DESCRIPTION: Defines two Django models, `Blog` and `Entry`, using `django.db.models`. The `Entry` model has a foreign key to `Blog` and a `published` DateTimeField, defaulting to the current time. This structure serves as a basis for demonstrating conditional view processing examples.
SOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
import datetime
from django.db import models


class Blog(models.Model): ...


class Entry(models.Model):
    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
    published = models.DateTimeField(default=datetime.datetime.now)
    ...
```

----------------------------------------

TITLE: Using Django's default test client in unittest
DESCRIPTION: This code shows how to use Django's default test client in a unittest.TestCase subclass to test HTTP responses.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_27

LANGUAGE: Python
CODE:
```
import unittest
from django.test import Client


class SimpleTest(unittest.TestCase):
    def test_details(self):
        client = Client()
        response = client.get("/customer/details/")
        self.assertEqual(response.status_code, 200)

    def test_index(self):
        client = Client()
        response = client.get("/customer/index/")
        self.assertEqual(response.status_code, 200)
```

----------------------------------------

TITLE: Initializing Basic Logger in Django
DESCRIPTION: Shows how to import logging and create a basic logger instance using __name__ for module-level logging.
SOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
import logging

logger = logging.getLogger(__name__)
```

----------------------------------------

TITLE: Implementing a Basic Custom Management Command in Django
DESCRIPTION: Complete implementation of a custom 'closepoll' management command that handles positional arguments, accesses the database, and provides formatted output to the console.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-management-commands.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.core.management.base import BaseCommand, CommandError
from polls.models import Question as Poll


class Command(BaseCommand):
    help = "Closes the specified poll for voting"

    def add_arguments(self, parser):
        parser.add_argument("poll_ids", nargs="+", type=int)

    def handle(self, *args, **options):
        for poll_id in options["poll_ids"]:
            try:
                poll = Poll.objects.get(pk=poll_id)
            except Poll.DoesNotExist:
                raise CommandError('Poll "%s" does not exist' % poll_id)

            poll.opened = False
            poll.save()

            self.stdout.write(
                self.style.SUCCESS('Successfully closed poll "%s"' % poll_id)
            )
```

----------------------------------------

TITLE: Using `reverse` with Query Parameters and Fragments in Django (Pycon)
DESCRIPTION: Pycon examples demonstrating the use of the `query` and `fragment` keyword arguments (added in Django 5.2) with `django.urls.reverse`. Shows how to pass dictionaries or lists of tuples to `query` for proper URL encoding and how to add a URL fragment (which is not encoded) using `fragment`. Requires `django.urls.reverse`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_3

LANGUAGE: pycon
CODE:
```
>>> from django.urls import reverse
>>> reverse("admin:index", query={"q": "biscuits", "page": 2}, fragment="results")
'/admin/?q=biscuits&page=2#results'
>>> reverse("admin:index", query=[("color", "blue"), ("color", 1), ("none", None)])
'/admin/?color=blue&color=1&none=None'
>>> reverse("admin:index", query={"has empty spaces": "also has empty spaces!"})
'/admin/?has+empty+spaces=also+has+empty+spaces%21'
>>> reverse("admin:index", fragment="no encoding is done")
'/admin/#no encoding is done'
```

----------------------------------------

TITLE: Configuring URL Namespaces in Django Root URLconf
DESCRIPTION: This snippet demonstrates how to set up URL namespaces in Django's root URLconf. It shows including application URLs with different namespaces to create separate instances of the same application.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.urls import include, path

urlpatterns = [
    path("author-polls/", include("polls.urls", namespace="author-polls")),
    path("publisher-polls/", include("polls.urls", namespace="publisher-polls")),
]
```

----------------------------------------

TITLE: Field-Specific Validation in Django Article Model
DESCRIPTION: Example of raising field-specific validation errors in clean() method using a dictionary of field names and errors.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
class Article(models.Model):
    ...

    def clean(self):
        # Don't allow draft entries to have a pub_date.
        if self.status == "draft" and self.pub_date is not None:
            raise ValidationError(
                {"pub_date": _("Draft entries may not have a publication date.")}
            )
            ...
```

----------------------------------------

TITLE: Defining a Django Model Field with `choices` (Python)
DESCRIPTION: Example of a Django model (`Person`) defining a `CharField` (`shirt_size`) with the `choices` attribute set using a dictionary. This allows storing a short code (e.g., 'L') while providing human-readable options ('Large') accessible via the auto-generated `get_FOO_display()` method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
from django.db import models


class Person(models.Model):
    SHIRT_SIZES = {
        "S": "Small",
        "M": "Medium",
        "L": "Large",
    }
    name = models.CharField(max_length=60)
    shirt_size = models.CharField(max_length=2, choices=SHIRT_SIZES)
```

----------------------------------------

TITLE: Configuring Inline Admin for Many-to-Many Relationship
DESCRIPTION: Sets up an admin interface for Group model with an inline for the many-to-many relationship to Person. Uses Group.members.through to access the auto-generated intermediate model and excludes the members field to avoid duplicate widgets.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_70

LANGUAGE: python
CODE:
```
from django.contrib import admin
from myapp.models import Group


class MembershipInline(admin.TabularInline):
    model = Group.members.through


class GroupAdmin(admin.ModelAdmin):
    inlines = [
        MembershipInline,
    ]
    exclude = ["members"]


admin.site.register(Group, GroupAdmin)
```

----------------------------------------

TITLE: Combining Prefetch with Select Related for Further Optimization
DESCRIPTION: Demonstrates using select_related within a Prefetch queryset to further reduce the number of database queries by joining related tables.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_48

LANGUAGE: python
CODE:
```
>>> Pizza.objects.prefetch_related(
...     Prefetch("restaurants", queryset=Restaurant.objects.select_related("best_pizza"))
... )
```

----------------------------------------

TITLE: Configuring PASSWORD_HASHERS in Django Settings
DESCRIPTION: This settings configuration specifies the password hashers Django should use, placing the default PBKDF2PasswordHasher first followed by a custom wrapped MD5 hasher for backward compatibility with legacy passwords.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "accounts.hashers.PBKDF2WrappedMD5PasswordHasher",
]
```

----------------------------------------

TITLE: Instantiating Unbound Django Forms in Python
DESCRIPTION: Demonstrates creation of an unbound Django form by calling the constructor without arguments. No dependencies beyond Django's forms framework. Takes no input; outputs a Form instance in an unbound state, suitable for rendering blank forms but not data validation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> f = ContactForm()
```

----------------------------------------

TITLE: Using ModelChoiceField for Form Field Choices in Django (Recommended)
DESCRIPTION: This snippet shows the recommended approach to handle form field choices that depend on database queries. It uses ModelChoiceField, which defers the database query until it's actually needed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
class LocationForm(forms.Form):
    country = forms.ModelChoiceField(queryset=Country.objects.all())
```

----------------------------------------

TITLE: Secure Email Handling Example in Django
DESCRIPTION: Example showing proper email validation using Django forms before sending email
SOURCE: https://github.com/django/django/blob/main/docs/internals/security.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django import forms
from django.core.mail import send_mail
from django.http import JsonResponse


class EmailForm(forms.Form):
    email = forms.EmailField()


def my_proof_of_concept(request):
    form = EmailForm(request.GET)
    if form.is_valid():
        send_mail(
            "Email subject",
            "Email body",
            form.cleaned_data["email"],
            ["admin@example.com"],
        )
        return JsonResponse(status=200)
    return JsonResponse(form.errors, status=400)
```

----------------------------------------

TITLE: Configuring Basic List Filters with Field Names in Django Admin
DESCRIPTION: Demonstrates how to set up simple list filters using model field names in a Django ModelAdmin class. This example shows filtering by boolean and foreign key fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    list_filter = ["is_staff", "company"]
```

----------------------------------------

TITLE: Using Subquery in Django ORM Annotations (Python)
DESCRIPTION: Shows how to use a Subquery expression to annotate each post with the email address of the author of the newest comment. It demonstrates filtering, ordering, and limiting the subquery results.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
from django.db.models import OuterRef, Subquery
newest = Comment.objects.filter(post=OuterRef("pk")).order_by("-created_at")
Post.objects.annotate(newest_commenter_email=Subquery(newest.values("email")[:1]))
```

----------------------------------------

TITLE: Delete Confirmation Template in Django
DESCRIPTION: HTML template for confirming object deletion. Includes a form with CSRF protection and displays the object to be deleted. The template provides a confirmation button to proceed with deletion.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_9

LANGUAGE: html
CODE:
```
<form method="post">{% csrf_token %}
    <p>Are you sure you want to delete "{{ object }}"?</p>
    {{ form }}
    <input type="submit" value="Confirm">
</form>
```

----------------------------------------

TITLE: Handling ObjectDoesNotExist Exception
DESCRIPTION: Demonstrates how to catch ObjectDoesNotExist exceptions for all models using a try/except block.
SOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
try:
    # Some code that might raise Model.DoesNotExist
    pass
except ObjectDoesNotExist:
    # Handle the exception
    pass
```

----------------------------------------

TITLE: Subclassing Forms in Django
DESCRIPTION: This section demonstrates how to subclass forms in Django to share fields and create more specialized forms. It includes examples of single inheritance and multiple inheritance using forms as mixins.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_46

LANGUAGE: python
CODE:
```
>>> class ContactFormWithPriority(ContactForm):
...     priority = forms.CharField()
...
>>> f = ContactFormWithPriority(auto_id=False)
>>> print(f)
<div>Subject:<input type="text" name="subject" maxlength="100" required></div>
<div>Message:<textarea name="message" cols="40" rows="10" required></textarea></div>
<div>Sender:<input type="email" name="sender" required></div>
<div>Cc myself:<input type="checkbox" name="cc_myself"></div>
<div>Priority:<input type="text" name="priority" required></div>
```

LANGUAGE: python
CODE:
```
>>> from django import forms
>>> class PersonForm(forms.Form):
...     first_name = forms.CharField()
...     last_name = forms.CharField()
...
>>> class InstrumentForm(forms.Form):
...     instrument = forms.CharField()
...
>>> class BeatleForm(InstrumentForm, PersonForm):
...     haircut_type = forms.CharField()
...
>>> b = BeatleForm(auto_id=False)
>>> print(b)
<div>First name:<input type="text" name="first_name" required></div>
<div>Last name:<input type="text" name="last_name" required></div>
<div>Instrument:<input type="text" name="instrument" required></div>
<div>Haircut type:<input type="text" name="haircut_type" required></div>
```

----------------------------------------

TITLE: Basic Django Test Client Example
DESCRIPTION: A complete example of a Django unit test class that demonstrates setting up and using the test client to check response status and context data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
import unittest
from django.test import Client


class SimpleTest(unittest.TestCase):
    def setUp(self):
        # Every test needs a client.
        self.client = Client()

    def test_details(self):
        # Issue a GET request.
        response = self.client.get("/customer/details/")

        # Check that the response is 200 OK.
        self.assertEqual(response.status_code, 200)

        # Check that the rendered context contains 5 customers.
        self.assertEqual(len(response.context["customers"]), 5)
```

----------------------------------------

TITLE: Accessing Django Form Validation Errors as Data in Python
DESCRIPTION: Shows how to access form validation errors as ValidationError objects using the as_data() method on the 'errors' attribute. Input is a bound, invalid Form; output is a dictionary mapping field names to lists of ValidationError instances, which can be used for custom error handling or serialization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> f.errors.as_data()
{'sender': [ValidationError(['Enter a valid email address.'])],
'subject': [ValidationError(['This field is required.'])]}
```

----------------------------------------

TITLE: Manual Field Rendering Template with Django
DESCRIPTION: Shows detailed manual rendering of form fields with error handling and custom labels
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_9

LANGUAGE: html+django
CODE:
```
{{ form.non_field_errors }}
<div class="fieldWrapper">
    {{ form.subject.errors }}
    <label for="{{ form.subject.id_for_label }}">Email subject:</label>
    {{ form.subject }}
</div>
<div class="fieldWrapper">
    {{ form.message.errors }}
    <label for="{{ form.message.id_for_label }}">Your message:</label>
    {{ form.message }}
</div>
<div class="fieldWrapper">
    {{ form.sender.errors }}
    <label for="{{ form.sender.id_for_label }}">Your email address:</label>
    {{ form.sender }}
</div>
<div class="fieldWrapper">
    {{ form.cc_myself.errors }}
    <label for="{{ form.cc_myself.id_for_label }}">CC yourself?</label>
    {{ form.cc_myself }}
</div>
```

----------------------------------------

TITLE: ModelFormMixin Class Definition in Django
DESCRIPTION: A mixin for handling ModelForm operations, combining form processing with model instance management. Provides methods for form validation and model saving.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-editing.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class ModelFormMixin(FormMixin):
    model = None
    fields = None
    success_url = None

    def get_form_class(self):
        if self.form_class:
            return self.form_class
        else:
            return model_forms.modelform_factory(self.model, fields=self.fields)
```

----------------------------------------

TITLE: Accessing Child Object from Parent Instance (Django Pycon)
DESCRIPTION: Demonstrates how to navigate from a parent model instance (Place) to its corresponding child model instance (Restaurant) using the lowercase model name as an attribute. This relies on the implicit OneToOneField.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_42

LANGUAGE: pycon
CODE:
```
>>> p = Place.objects.get(id=12)
# If p is a Restaurant object, this will give the child class:
>>> p.restaurant
<Restaurant: ...>
```

----------------------------------------

TITLE: Reversing Admin URLs in Python
DESCRIPTION: Shows how to use Django's URL reversing system to get a reference to the Change view for a particular Choice object in the default admin. Demonstrates the use of the reverse function.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_85

LANGUAGE: python
CODE:
```
>>> from django.urls import reverse
>>> c = Choice.objects.get(...)
>>> change_url = reverse("admin:polls_choice_change", args=(c.id,))
```

----------------------------------------

TITLE: Adding Custom Method to Django Model
DESCRIPTION: This Python code demonstrates how to add a custom method to a Django model. The was_published_recently method checks if a question was published within the last day, using Python's datetime module and Django's timezone utilities.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
import datetime

from django.db import models
from django.utils import timezone


class Question(models.Model):
    # ...
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
```

----------------------------------------

TITLE: Decorator-based ModelAdmin Registration
DESCRIPTION: Shows how to use the @register decorator to register models with ModelAdmin classes, including an example with multiple models and custom admin site.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.contrib import admin
from .models import Author, Editor, Reader
from myproject.admin_site import custom_admin_site


@admin.register(Author, Reader, Editor, site=custom_admin_site)
class PersonAdmin(admin.ModelAdmin):
    pass
```

----------------------------------------

TITLE: Using with Tag in Django Templates
DESCRIPTION: Demonstrates how to use the with tag to cache complex variables under simpler names.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_50

LANGUAGE: html+django
CODE:
```
{% with total=business.employees.count %}
    {{ total }} employee{{ total|pluralize }}
{% endwith %}
```

LANGUAGE: html+django
CODE:
```
{% with alpha=1 beta=2 %}
    ...
{% endwith %}
```

----------------------------------------

TITLE: Authenticating Users with authenticate() in Django (Python)
DESCRIPTION: Demonstrates using the `django.contrib.auth.authenticate()` function to verify user credentials (username and password). It takes credentials as keyword arguments, checks them against configured authentication backends, and returns the User object if valid, otherwise returns None. The optional `request` argument can be passed to backends.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.contrib.auth import authenticate

user = authenticate(username="john", password="secret")
if user is not None:
    # A backend authenticated the credentials
    ...
else:
    # No backend authenticated the credentials
    ...
```

----------------------------------------

TITLE: Accessing Session Values in Django Views
DESCRIPTION: Example of retrieving a value from the session dictionary using the __getitem__ method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
fav_color = request.session['fav_color']
```

----------------------------------------

TITLE: Using a Custom Queryset in a Model Formset
DESCRIPTION: Shows how to use a custom queryset when creating a model formset in a view. It filters Authors whose names start with 'O' and passes the queryset to the formset.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
from django.forms import modelformset_factory
from django.shortcuts import render
from myapp.models import Author


def manage_authors(request):
    AuthorFormSet = modelformset_factory(Author, fields=["name", "title"])
    queryset = Author.objects.filter(name__startswith="O")
    if request.method == "POST":
        formset = AuthorFormSet(
            request.POST,
            request.FILES,
            queryset=queryset,
        )
        if formset.is_valid():
            formset.save()
            # Do something.
    else:
        formset = AuthorFormSet(queryset=queryset)
    return render(request, "manage_authors.html", {"formset": formset})
```

----------------------------------------

TITLE: Sending Multiple Emails with Connection Reuse
DESCRIPTION: Demonstrates how to send multiple emails efficiently by reusing an email connection.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
from django.core import mail

connection = mail.get_connection()  # Use default email connection
messages = get_notification_email()
connection.send_messages(messages)
```

----------------------------------------

TITLE: Implementing Function-Based Middleware in Django
DESCRIPTION: A template for creating function-based middleware in Django. This pattern shows the standard structure with initialization and request/response processing. The middleware function accepts a get_response callable and returns another callable that processes each request.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
def simple_middleware(get_response):
    # One-time configuration and initialization.

    def middleware(request):
        # Code to be executed for each request before
        # the view (and later middleware) are called.

        response = get_response(request)

        # Code to be executed for each request/response after
        # the view is called.

        return response

    return middleware
```

----------------------------------------

TITLE: Clearing All Related Objects with clear() Method in Django ORM - Python
DESCRIPTION: Demonstrates how to remove all objects from a related set using the clear() method of RelatedManager. The example retrieves a Blog instance and clears its entry_set, effectively disassociating all Entries from the Blog. Works only if the ForeignKey field is nullable (null=True). Inputs are the parent model instance; the related set is emptied in the database, but individual objects are not deleted.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
>>> b = Blog.objects.get(id=1)
>>> b.entry_set.clear()
```

----------------------------------------

TITLE: Annotating with Window and RowRange for Peer Average - Django ORM - Python
DESCRIPTION: This snippet shows how to annotate each movie in a Django QuerySet with the average rating of itself and its two prior and two following peers using a window function and a RowRange frame. Requires Django, the Movie model, and appropriate fields. The frame is defined by start=-2 and end=2, meaning the moving average includes the current row and up-to-two rows before and after in the partition.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
>>> from django.db.models import Avg, F, RowRange, Window
>>> Movie.objects.annotate(
...     avg_rating=Window(
...         expression=Avg("rating"),
...         partition_by=[F("studio"), F("genre")],
...         order_by="released__year",
...         frame=RowRange(start=-2, end=2),
...     ),
... )
```

----------------------------------------

TITLE: Configuring Redis Cache Backend with Authentication in Django (Python)
DESCRIPTION: This Python snippet shows how to configure the Django `CACHES` setting for a Redis backend that requires authentication. The username and password are included in the `LOCATION` URL (redis://username:password@127.0.0.1:6379). Requires the `redis-py` library.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://username:password@127.0.0.1:6379",
    }
}
```

----------------------------------------

TITLE: Overriding Field-level Initial Values with Form-level Initial Data in Django Python Forms
DESCRIPTION: Defines a custom form class with a field-level initial value, then creates a Form instance with form-level initial data for the same field to demonstrate precedence. Requires django.forms; input is a dictionary for 'initial' during instantiation. Outputs are the rendered form reflecting instance-level initialization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> from django import forms
>>> class CommentForm(forms.Form):
...     name = forms.CharField(initial="class")
...     url = forms.URLField()
...     comment = forms.CharField()
...
>>> f = CommentForm(initial={"name": "instance"}, auto_id=False)
>>> print(f)
```

----------------------------------------

TITLE: Iterating and Displaying Errors in Django Template
DESCRIPTION: This snippet uses a Django template for loop to iterate over an 'errors' list and display each error as a bullet point. It's commonly used in form validation or error handling sections of Django templates.
SOURCE: https://github.com/django/django/blob/main/django/forms/templates/django/forms/errors/list/text.txt#2025-04-23_snippet_0

LANGUAGE: Django Template Language
CODE:
```
{% for error in errors %}* {{ error }}
{% endfor %}
```

----------------------------------------

TITLE: AppConfig Signal Registration in Django
DESCRIPTION: Implementation of signal handler registration in an AppConfig's ready method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.apps import AppConfig
from django.core.signals import request_finished


class MyAppConfig(AppConfig):
    ...

    def ready(self):
        # Implicitly connect signal handlers decorated with @receiver.
        from . import signals

        # Explicitly connect a signal handler.
        request_finished.connect(signals.my_callback)
```

----------------------------------------

TITLE: Rendering Templates with render_to_string()
DESCRIPTION: Example of using render_to_string() to load and render a template with context data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.template.loader import render_to_string

rendered = render_to_string("my_template.html", {"foo": "bar"})
```

----------------------------------------

TITLE: Decorating a Django Class-Based View Using Class Decoration (Python/Django)
DESCRIPTION: A more concise approach to decorating class-based views by applying the method_decorator to the class itself and specifying which method to decorate using the name parameter. This applies login_required to the dispatch method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
@method_decorator(login_required, name="dispatch")
class ProtectedView(TemplateView):
    template_name = "secret.html"
```

----------------------------------------

TITLE: Implementing Email Sending with Header Injection Protection in Django View
DESCRIPTION: Shows how to create a Django view that safely sends emails by validating headers to prevent header injection attacks. The function checks for newlines in header values and handles potential BadHeaderError exceptions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.core.mail import BadHeaderError, send_mail
from django.http import HttpResponse, HttpResponseRedirect


def send_email(request):
    subject = request.POST.get("subject", "")
    message = request.POST.get("message", "")
    from_email = request.POST.get("from_email", "")
    if subject and message and from_email:
        try:
            send_mail(subject, message, from_email, ["admin@example.com"])
        except BadHeaderError:
            return HttpResponse("Invalid header found.")
        return HttpResponseRedirect("/contact/thanks/")
    else:
        # In reality we'd use a form class
        # to get proper validation errors.
        return HttpResponse("Make sure all fields are entered and valid.")
```

----------------------------------------

TITLE: Configuring URL Patterns for Author CRUD Views in Django
DESCRIPTION: Sets up URL patterns in `urls.py` using `django.urls.path`. It maps specific URL paths to the previously defined class-based views (`AuthorCreateView`, `AuthorUpdateView`, `AuthorDeleteView`) using their `.as_view()` method. Named URL patterns (`author-add`, `author-update`, `author-delete`) are defined for easy referencing.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.urls import path
from myapp.views import AuthorCreateView, AuthorDeleteView, AuthorUpdateView

urlpatterns = [
    # ...
    path("author/add/", AuthorCreateView.as_view(), name="author-add"),
    path("author/<int:pk>/", AuthorUpdateView.as_view(), name="author-update"),
    path("author/<int:pk>/delete/", AuthorDeleteView.as_view(), name="author-delete"),
]
```

----------------------------------------

TITLE: Saving Objects in Model Formset in Python
DESCRIPTION: Demonstrates how to save data from a model formset to the database, including options for not saving immediately or handling many-to-many relationships.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_26

LANGUAGE: pycon
CODE:
```
# Create a formset instance with POST data.
>>> formset = AuthorFormSet(request.POST)

# Assuming all is valid, save the data.
>>> instances = formset.save()
```

LANGUAGE: pycon
CODE:
```
# don't save to the database
>>> instances = formset.save(commit=False)
>>> for instance in instances:
...     # do something with instance
...     instance.save()
```

----------------------------------------

TITLE: Flexible Choices Declarations for Model Fields in Django 5.0 - Python
DESCRIPTION: Illustrates the enhanced support in Django 5.0 for specifying model field choices as mappings, callables, or enums directly in Python, not just iterables of 2-tuples. Inputs can be dictionaries, enums (without .choices), or callable returning valid choices. Used for drop-down/radio field population and validation in forms and models. Key parameters: `choices` (mapping, callable, direct enum/subclass). Outputs: standardized 2-tuple list for rendering and validation. Limitations: Requires Django 5.0 or greater.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
from django.db import models\n\nMedal = models.TextChoices(\"Medal\", \"GOLD SILVER BRONZE\")\n\nSPORT_CHOICES = {  # Using a mapping instead of a list of 2-tuples.\n    \"Martial Arts\": {\"judo\": \"Judo\", \"karate\": \"Karate\"},\n    \"Racket\": {\"badminton\": \"Badminton\", \"tennis\": \"Tennis\"},\n    \"unknown\": \"Unknown\",\n}\n\n\ndef get_scores():\n    return [(i, str(i)) for i in range(10)]\n\n\nclass Winner(models.Model):\n    name = models.CharField(...)\n    medal = models.CharField(..., choices=Medal)  # Using `.choices` not required.\n    sport = models.CharField(..., choices=SPORT_CHOICES)\n    score = models.IntegerField(choices=get_scores)  # A callable is allowed.
```

----------------------------------------

TITLE: Handling Forms with a Function-Based View in Django
DESCRIPTION: This snippet presents a typical Django function-based view for handling HTML forms. It checks if the request method is POST, processes the submitted form data using a `MyForm` class, validates it, redirects on success, and renders the form template with initial data for GET requests or validation errors.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.http import HttpResponseRedirect
from django.shortcuts import render

from .forms import MyForm


def myview(request):
    if request.method == "POST":
        form = MyForm(request.POST)
        if form.is_valid():
            # <process form cleaned data>
            return HttpResponseRedirect("/success/")
    else:
        form = MyForm(initial={"key": "value"})

    return render(request, "form_template.html", {"form": form})
```

----------------------------------------

TITLE: HTML Template for Author Creation Form in Django
DESCRIPTION: Example of an HTML template for rendering an author creation form in Django, including CSRF token and form fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_5

LANGUAGE: html
CODE:
```
<form method="post">{% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Save">
</form>
```

----------------------------------------

TITLE: Formatting Localized Dates with Predefined Format in Django Templates - HTML+Django
DESCRIPTION: Demonstrates using the "date" filter with a predefined format specifier (SHORT_DATE_FORMAT). This requires Django, with locale support enabled and LANGUAGE_CODE set for the desired localization. The template variable value must be a datetime object. Output is a locale-formatted date string; e.g., in the 'es' locale the formatting will adjust automatically.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_52

LANGUAGE: html+django
CODE:
```
{{ value|date:"SHORT_DATE_FORMAT" }}
```

----------------------------------------

TITLE: Loading Django Secret Key from Environment Variable
DESCRIPTION: Demonstrates loading Django's SECRET_KEY from an environment variable rather than hardcoding it, which is a security best practice for production environments.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/checklist.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
import os

SECRET_KEY = os.environ["SECRET_KEY"]
```

----------------------------------------

TITLE: Django Template Fragment Caching Example
DESCRIPTION: Example of using the cache template tag to cache specific fragments of a template for a specified duration.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_24

LANGUAGE: django
CODE:
```
{% load cache %}
{% cache 500 sidebar %}
    .. sidebar ..
{% endcache %}
```

----------------------------------------

TITLE: Performing Basic Full Text Search in Django with PostgreSQL
DESCRIPTION: Demonstrates how to use the 'search' lookup to perform a basic full text search against a single database column.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> Entry.objects.filter(body_text__search="Cheese")
[<Entry: Cheese on Toast recipes>, <Entry: Pizza Recipes>]
```

----------------------------------------

TITLE: Adding Password Reset to Admin Site (Python)
DESCRIPTION: This code demonstrates how to add password reset functionality to the Django admin site by including additional URL patterns in the URLconf.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_83

LANGUAGE: Python
CODE:
```
from django.contrib import admin
from django.contrib.auth import views as auth_views

path(
    "admin/password_reset/",
    auth_views.PasswordResetView.as_view(
        extra_context={"site_header": admin.site.site_header}
    ),
    name="admin_password_reset",
),
path(
    "admin/password_reset/done/",
    auth_views.PasswordResetDoneView.as_view(
        extra_context={"site_header": admin.site.site_header}
    ),
    name="password_reset_done",
),
path(
    "reset/<uidb64>/<token>/",
    auth_views.PasswordResetConfirmView.as_view(
        extra_context={"site_header": admin.site.site_header}
    ),
    name="password_reset_confirm",
),
path(
    "reset/done/",
    auth_views.PasswordResetCompleteView.as_view(
        extra_context={"site_header": admin.site.site_header}
    ),
    name="password_reset_complete",
),
```

----------------------------------------

TITLE: Filtering QuerySets by Year - Django ORM (Python)
DESCRIPTION: Filters records whose date or datetime fields match a specified year, or are greater-or-equal to a given year, using Django's '__year' lookup. Inputs are integers representing years; outputs are filtered QuerySets. Further lookups can be chained, and inputs must be valid years. Timezone conversion applies if USE_TZ is enabled.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_104

LANGUAGE: python
CODE:
```
Entry.objects.filter(pub_date__year=2005)
Entry.objects.filter(pub_date__year__gte=2005)
```

----------------------------------------

TITLE: Ensuring CSRF Token Works in Template without Middleware in Django
DESCRIPTION: This snippet demonstrates the use of the requires_csrf_token decorator to ensure the csrf_token template tag works even if the CSRF middleware hasn't run.
SOURCE: https://github.com/django/django/blob/main/docs/ref/csrf.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
from django.shortcuts import render
from django.views.decorators.csrf import requires_csrf_token


@requires_csrf_token
def my_view(request):
    c = {}
    # ...
    return render(request, "a_template.html", c)
```

----------------------------------------

TITLE: Creating Language Message Files with Django
DESCRIPTION: Shell commands for creating and managing translation message files using Django's makemessages command.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_51

LANGUAGE: shell
CODE:
```
django-admin makemessages -l de
```

LANGUAGE: shell
CODE:
```
django-admin makemessages -l de -e txt
```

LANGUAGE: shell
CODE:
```
django-admin makemessages -l de -e html,txt -e xml
```

----------------------------------------

TITLE: Including Additional URL Patterns as a List in Django
DESCRIPTION: This example demonstrates how to include additional URL patterns as a list of path instances in Django's URLconf. It shows a more complex setup with multiple views and nested inclusions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
from django.urls import include, path

from apps.main import views as main_views
from credit import views as credit_views

extra_patterns = [
    path("reports/", credit_views.report),
    path("reports/<int:id>/", credit_views.report),
    path("charge/", credit_views.charge),
]

urlpatterns = [
    path("", main_views.homepage),
    path("help/", include("apps.help.urls")),
    path("credit/", include(extra_patterns)),
]
```

----------------------------------------

TITLE: Configuring Template Directories in Django Settings
DESCRIPTION: Shows how to configure the TEMPLATES setting with DIRS option to specify template directories for the Django template system.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            "/home/html/templates/lawrence.com",
            "/home/html/templates/default",
        ],
    },
]
```

----------------------------------------

TITLE: Implementing Cross-Field Validation with Field-Specific Errors in Django Python
DESCRIPTION: This snippet demonstrates an alternative approach to cross-field validation within the form's `clean()` method. Instead of raising a general `ValidationError`, it uses `self.add_error()` to associate the error message with specific fields (`cc_myself` and `subject`) if the validation condition (cc_myself is True but 'help' is not in the subject) fails. This results in error messages being displayed next to the respective fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from django import forms


class ContactForm(forms.Form):
    # Everything as before.
    ...

    def clean(self):
        cleaned_data = super().clean()
        cc_myself = cleaned_data.get("cc_myself")
        subject = cleaned_data.get("subject")

        if cc_myself and subject and "help" not in subject:
            msg = "Must put 'help' in subject when cc'ing yourself."
            self.add_error("cc_myself", msg)
            self.add_error("subject", msg)
```

----------------------------------------

TITLE: Setting Permissions on a Django Group - Django ORM - Python
DESCRIPTION: These code lines demonstrate how to manipulate the permissions assigned to a Django Group model instance using the provided manager methods. Requires Django’s ORM and an instantiated Group object and one or more Permission instances. 'set' assigns a full list of permissions, 'add' increases permissions, 'remove' decreases them, and 'clear' wipes all permissions from the group; all methods operate on Python iterables of Permission objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
group.permissions.set([permission_list])
group.permissions.add(permission, permission, ...)
group.permissions.remove(permission, permission, ...)
group.permissions.clear()
```

----------------------------------------

TITLE: Running Django Tests with Python Warnings
DESCRIPTION: Command to run Django tests with warning flags enabled to display deprecation warnings that might be normally hidden. This helps identify areas of code that need to be updated before an upgrade.
SOURCE: https://github.com/django/django/blob/main/docs/howto/upgrade-version.txt#2025-04-23_snippet_0

LANGUAGE: console
CODE:
```
$ python -Wa manage.py test
```

----------------------------------------

TITLE: Querying ManyToMany Through Model (Django)
DESCRIPTION: Demonstrates how to access and query the automatically generated or custom intermediary model ('through') associated with a ManyToManyField directly, similar to a standard model manager.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_40

LANGUAGE: Python
CODE:
```
Model.m2mfield.through.objects.all()
```

----------------------------------------

TITLE: Multiple Custom Django Managers Python
DESCRIPTION: Shows how to attach multiple custom managers (`AuthorManager`, `EditorManager`), each overriding `get_queryset` to apply a specific filter (`role="A"` or `role="E"`), alongside the default manager (`people`). Allows querying `Person.authors.all()`, `Person.editors.all()`, etc. Requires `django.db.models` and potentially translation utilities.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_4

LANGUAGE: python
CODE:
```
class AuthorManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(role="A")


class EditorManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(role="E")


class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    role = models.CharField(max_length=1, choices={"A": _("Author"), "E": _("Editor")})
    people = models.Manager()
    authors = AuthorManager()
    editors = EditorManager()
```

----------------------------------------

TITLE: Setting Max-Age with cache_control Decorator
DESCRIPTION: Shows how to use the cache_control decorator to set the max-age directive, which tells clients how long (in seconds) they can cache the response. This example sets a cache lifetime of one hour.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_46

LANGUAGE: python
CODE:
```
from django.views.decorators.cache import cache_control


@cache_control(max_age=3600)
def my_view(request): ...
```

----------------------------------------

TITLE: Querying Users by Permission with ModelBackend in Django (Python)
DESCRIPTION: Returns a queryset of users possessing the specified permission (`perm`). By default (`is_active=True`), only active users are returned. Set `is_active=False` for inactive users, or `None` for all users. Superusers are included by default (`include_superusers=True`). `perm` can be a string "<app label>.<permission codename>" or a Permission instance. Returns an empty queryset if `obj` is not `None` as object-level permissions are not implemented.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
with_perm(perm, is_active=True, include_superusers=True, obj=None)
```

----------------------------------------

TITLE: Documentation of delete() and adelete() methods in Django ORM
DESCRIPTION: Explains how delete() removes all objects in a QuerySet with cascading delete options based on ForeignKey constraints. adelete() is its asynchronous version. It returns a count and a dictionary of deletions per model. Also clarifies the transactional and signal considerations when deleting objects in bulk.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_89

LANGUAGE: Python
CODE:
```
Performs an SQL delete query on all rows in the :class:`.QuerySet` and returns the number of objects deleted and a dictionary with the number of deletions per object type.
```

----------------------------------------

TITLE: Model-Specific Signal Handler in Django
DESCRIPTION: Example of connecting a signal handler to receive notifications only from a specific model class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.db.models.signals import pre_save
from django.dispatch import receiver
from myapp.models import MyModel


@receiver(pre_save, sender=MyModel)
def my_handler(sender, **kwargs): ...
```

----------------------------------------

TITLE: Advanced Django Cache Operations
DESCRIPTION: Demonstrates advanced cache operations including add, get_or_set, get_many, set_many, delete, delete_many, and clear.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_32

LANGUAGE: pycon
CODE:
```
>>> cache.set("add_key", "Initial value")
>>> cache.add("add_key", "New value")
>>> cache.get("add_key")
'Initial value'

>>> cache.get("my_new_key")  # returns None
>>> cache.get_or_set("my_new_key", "my new value", 100)
'my new value'

>>> import datetime
>>> cache.get_or_set("some-timestamp-key", datetime.datetime.now)
datetime.datetime(2014, 12, 11, 0, 15, 49, 457920)

>>> cache.set("a", 1)
>>> cache.set("b", 2)
>>> cache.set("c", 3)
>>> cache.get_many(["a", "b", "c"])
{'a': 1, 'b': 2, 'c': 3}

>>> cache.set_many({"a": 1, "b": 2, "c": 3})
>>> cache.get_many(["a", "b", "c"])
{'a': 1, 'b': 2, 'c': 3}

>>> cache.delete("a")
True

>>> cache.delete_many(["a", "b", "c"])

>>> cache.clear()

>>> cache.touch("a", 10)
True
```

----------------------------------------

TITLE: Creating Geometry Models in GeoDjango
DESCRIPTION: Examples of creating and saving models with geometry fields using the Zipcode model. Shows different ways to specify geometry data including direct WKT strings and GEOSGeometry objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from zipcode.models import Zipcode
>>> z = Zipcode(code=77096, poly="POLYGON(( 10 10, 10 20, 20 20, 20 15, 10 10))")
>>> z.save()
```

----------------------------------------

TITLE: Activating Django Humanize Module in Template
DESCRIPTION: Shows how to load the humanize module in a Django template to access its filters.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_0

LANGUAGE: django
CODE:
```
{% load humanize %}
```

----------------------------------------

TITLE: Loading JSON Fixtures by Type Using django-admin (Shell)
DESCRIPTION: Illustrates how to explicitly load a JSON-format fixture file using 'django-admin loaddata' with the '.json' extension, ensuring only JSON serializers are used. Requires Django and the presence of a matching 'mydata.json' file. Input: fixture label with extension (mydata.json); Output: fixture loaded as JSON. Limitation: will not match other formats (e.g., XML) with the same base name.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
django-admin loaddata mydata.json
```

----------------------------------------

TITLE: Configuring Email Backend in Django
DESCRIPTION: Sets the backend used for sending emails, defaulting to the standard SMTP backend ('django.core.mail.backends.smtp.EmailBackend'). Other backends (e.g., console, file, in-memory) can be specified.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_24

LANGUAGE: python
CODE:
```
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
```

----------------------------------------

TITLE: Using ContextMixin's extra_context in Django TemplateView
DESCRIPTION: Demonstrates how to use the extra_context attribute of ContextMixin to pass additional context to a TemplateView. This is useful for adding custom data to the template context.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-simple.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.views.generic import TemplateView

TemplateView.as_view(extra_context={"title": "Custom Title"})
```

----------------------------------------

TITLE: Using fixtures in Django TestCase
DESCRIPTION: This snippet demonstrates how to use fixtures in a Django TestCase subclass to load initial data for tests.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_30

LANGUAGE: Python
CODE:
```
from django.test import TestCase
from myapp.models import Animal


class AnimalTestCase(TestCase):
    fixtures = ["mammals.json", "birds"]

    def setUp(self):
        # Test definitions as before.
        call_setup_methods()

    def test_fluffy_animals(self):
        # A test that uses the fixtures.
        call_some_test_code()
```

----------------------------------------

TITLE: Using ContentTypeManager's get_for_model Method in Python
DESCRIPTION: This snippet shows how to use the get_for_model() method of ContentTypeManager to efficiently obtain the ContentType for a given model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from django.contrib.auth.models import User
>>> ContentType.objects.get_for_model(User)
<ContentType: user>
```

----------------------------------------

TITLE: Correct Usage of Keyword Arguments for Django Form Fields
DESCRIPTION: Shows the correct way to initialize a Django form field (`forms.IntegerField`) using keyword arguments (`max_value=25, min_value=10`) for optional parameters. This explicit syntax is required in Django 2.0+ to improve code readability and prevent errors.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
forms.IntegerField(max_value=25, min_value=10)
```

----------------------------------------

TITLE: Retrieving Group Permissions with ModelBackend in Django (Python)
DESCRIPTION: Returns the set of permission strings the `user_obj` has via their group memberships. Returns an empty set if the user is anonymous or inactive (`is_active` is False). The asynchronous version `aget_group_permissions()` was added in Django 5.2.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
get_group_permissions(user_obj, obj=None)
```

LANGUAGE: python
CODE:
```
aget_group_permissions(user_obj, obj=None)
```

----------------------------------------

TITLE: Defining Item Model in Django
DESCRIPTION: This snippet defines a simple Django model called Item with two fields: name (CharField) and data (IntegerField). It's used as an example for demonstrating aggregation and ordering interactions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
from django.db import models


class Item(models.Model):
    name = models.CharField(max_length=10)
    data = models.IntegerField()
```

----------------------------------------

TITLE: Defining PASSWORD_RESET_TIMEOUT setting
DESCRIPTION: This setting specifies the validity duration of a password reset link, in seconds. It is used by the PasswordResetConfirmView. The default is 259200 (3 days).  Reducing this timeout doesn't impact brute-force attack resistance.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_74



----------------------------------------

TITLE: Using display Decorator for Custom Admin Functions in Python
DESCRIPTION: Shows how to use the @admin.display decorator to set specific attributes on custom display functions for use with list_display or readonly_fields in ModelAdmin.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_88

LANGUAGE: python
CODE:
```
@admin.display(
    boolean=True,
    ordering="-publish_date",
    description="Is Published?",
)
def is_published(self, obj):
    return obj.publish_date is not None
```

----------------------------------------

TITLE: Using Custom Template Filter in Django Template
DESCRIPTION: This example demonstrates how to use the custom 'cut' filter in a Django template.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
{{ somevariable|cut:"0" }}
```

----------------------------------------

TITLE: Publisher Oldest Book Aggregation
DESCRIPTION: Example of finding the oldest publication date across all books for each publisher.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
Publisher.objects.aggregate(oldest_pubdate=Min("book__pubdate"))
```

----------------------------------------

TITLE: Creating a Time Zone Selection View in Django
DESCRIPTION: A view function that handles both displaying a form for time zone selection and processing the form submission to update the user's time zone preference in the session.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.shortcuts import redirect, render

# Prepare a map of common locations to timezone choices you wish to offer.
common_timezones = {
    "London": "Europe/London",
    "Paris": "Europe/Paris",
    "New York": "America/New_York",
}


def set_timezone(request):
    if request.method == "POST":
        request.session["django_timezone"] = request.POST["timezone"]
        return redirect("/")
    else:
        return render(request, "template.html", {"timezones": common_timezones})
```

----------------------------------------

TITLE: Loading Any Matching Fixture Type by Name (Shell)
DESCRIPTION: Demonstrates that invoking 'django-admin loaddata' with a base name (without extension) will search and load the first matching fixture of any supported serialization format. Requires Django and at least one fixture (e.g., mydata.json) present. Input: fixture base name (mydata); Output: best-matching fixture loaded.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
django-admin loaddata mydata
```

----------------------------------------

TITLE: Implementing Selenium tests with Django LiveServerTestCase
DESCRIPTION: This code snippet shows how to set up a Selenium test using Django's LiveServerTestCase. It includes fixture loading, WebDriver setup, and a sample login test.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_25

LANGUAGE: Python
CODE:
```
from django.contrib.staticfiles.testing import StaticLiveServerTestCase
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.webdriver import WebDriver


class MySeleniumTests(StaticLiveServerTestCase):
    fixtures = ["user-data.json"]

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.selenium = WebDriver()
        cls.selenium.implicitly_wait(10)

    @classmethod
    def tearDownClass(cls):
        cls.selenium.quit()
        super().tearDownClass()

    def test_login(self):
        self.selenium.get(f"{self.live_server_url}/login/")
        username_input = self.selenium.find_element(By.NAME, "username")
        username_input.send_keys("myuser")
        password_input = self.selenium.find_element(By.NAME, "password")
        password_input.send_keys("secret")
        self.selenium.find_element(By.XPATH, '//input[@value="Log in"]').click()
```

----------------------------------------

TITLE: Conditional Filtering with Case in Django ORM - Python
DESCRIPTION: Uses Case within a filter clause to combine conditional cutoff dates for different account types. Finds clients matching a conditional filter based on their registration date and account_type, using When expressions for each account type. Requires Django, date handling utilities, and builds on the previously defined Client model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> a_month_ago = date.today() - timedelta(days=30)
>>> a_year_ago = date.today() - timedelta(days=365)
>>> Client.objects.filter(
...     registered_on__lte=Case(
...         When(account_type=Client.GOLD, then=a_month_ago),
...         When(account_type=Client.PLATINUM, then=a_year_ago),
...     ),
... ).values_list("name", "account_type")
<QuerySet [("Jack Black", "P")]> 
```

----------------------------------------

TITLE: Defining Custom QuerySet Methods Django
DESCRIPTION: This snippet defines a custom Django QuerySet class with methods that illustrate the rules for copying methods to a Manager. It shows examples of public, private, and methods explicitly marked with `queryset_only = True` or `False`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_7

LANGUAGE: Python
CODE:
```
class CustomQuerySet(models.QuerySet):
    # Available on both Manager and QuerySet.
    def public_method(self):
        return

    # Available only on QuerySet.
    def _private_method(self):
        return

    # Available only on QuerySet.
    def opted_out_public_method(self):
        return

    opted_out_public_method.queryset_only = True

    # Available on both Manager and QuerySet.
    def _opted_in_private_method(self):
        return

    _opted_in_private_method.queryset_only = False
```

----------------------------------------

TITLE: Using Django's Bulk Create Method
DESCRIPTION: Demonstrates how to use bulk_create() to insert multiple objects in a single database query instead of individual create() calls.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
Entry.objects.bulk_create(
    [
        Entry(headline="This is a test"),
        Entry(headline="This is only a test"),
    ]
)
```

LANGUAGE: python
CODE:
```
Entry.objects.create(headline="This is a test")
Entry.objects.create(headline="This is only a test")
```

----------------------------------------

TITLE: Basic Paginator Usage in Python
DESCRIPTION: Demonstrates basic usage of Django's Paginator class with a simple list of items, showing core pagination operations like accessing pages and checking page boundaries.
SOURCE: https://github.com/django/django/blob/main/docs/topics/pagination.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.core.paginator import Paginator
>>> objects = ["john", "paul", "george", "ringo"]
>>> p = Paginator(objects, 2)

>>> p.count
4
>>> p.num_pages
2
>>> type(p.page_range)
<class 'range_iterator'>
>>> p.page_range
range(1, 3)

>>> page1 = p.page(1)
>>> page1
<Page 1 of 2>
>>> page1.object_list
['john', 'paul']

>>> page2 = p.page(2)
>>> page2.object_list
['george', 'ringo']
>>> page2.has_next()
False
>>> page2.has_previous()
True
>>> page2.has_other_pages()
True
```

----------------------------------------

TITLE: Overriding Methods on an InlineFormSet
DESCRIPTION: Shows how to override methods on an InlineFormSet by subclassing BaseInlineFormSet and implementing a custom clean() method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_34

LANGUAGE: python
CODE:
```
from django.forms import BaseInlineFormSet


class CustomInlineFormSet(BaseInlineFormSet):
    def clean(self):
        super().clean()
        # example custom validation across forms in the formset
        for form in self.forms:
            # your custom formset validation
            ...
```

----------------------------------------

TITLE: Configuring LoginView URL in Django
DESCRIPTION: Example of how to customize the LoginView template in a Django URLconf. This snippet shows how to use a custom template for the login view.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_33

LANGUAGE: python
CODE:
```
path("accounts/login/", auth_views.LoginView.as_view(template_name="myapp/login.html")),
```

----------------------------------------

TITLE: Using Asynchronous ORM Interface in Django
DESCRIPTION: Shows how to use the new asynchronous ORM interface in Django 4.1. The example demonstrates filtering authors asynchronously and retrieving the first book for each author using the new 'a' prefixed methods.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
async for author in Author.objects.filter(name__startswith="A"):
    book = await author.books.afirst()
```

----------------------------------------

TITLE: Applying WSGI Middleware in Django's wsgi.py File
DESCRIPTION: This snippet demonstrates how to wrap Django's application object with WSGI middleware by importing a custom HelloWorld middleware application and applying it to the default Django application in the wsgi.py file.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/index.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from helloworld.wsgi import HelloWorldApplication

application = HelloWorldApplication(application)
```

----------------------------------------

TITLE: Checking User Module Permissions with ModelBackend in Django (Python)
DESCRIPTION: Returns `True` if the `user_obj` has any permissions within the specified application label (`app_label`), otherwise `False`. The asynchronous version `ahas_module_perms()` was added in Django 5.2.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
has_module_perms(user_obj, app_label)
```

LANGUAGE: python
CODE:
```
ahas_module_perms(user_obj, app_label)
```

----------------------------------------

TITLE: Using url Tag in Django Templates
DESCRIPTION: Shows various ways to use the url template tag to generate URLs in Django templates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_47

LANGUAGE: html+django
CODE:
```
{% url 'some-url-name' v1 v2 %}
```

LANGUAGE: html+django
CODE:
```
{% url 'some-url-name' arg1=v1 arg2=v2 %}
```

LANGUAGE: html+django
CODE:
```
{% url 'app-views-client' client.id %}
```

LANGUAGE: html+django
CODE:
```
{% url 'some-url-name' arg arg2 as the_url %}

<a href="{{ the_url }}">I'm linking to {{ the_url }}</a>
```

LANGUAGE: html+django
CODE:
```
{% url 'some-url-name' as the_url %}
{% if the_url %}
  <a href="{{ the_url }}">Link to optional stuff</a>
{% endif %}
```

LANGUAGE: html+django
CODE:
```
{% url 'myapp:view-name' %}
```

----------------------------------------

TITLE: Configuring CACHES with Backend
DESCRIPTION: This snippet shows the default CACHES-BACKEND setting. The BACKEND setting specifies which cache backend Django should use, with available backends including various memory-based and file-based options, and also allowing custom backends.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_3

LANGUAGE: python
CODE:
```
BACKEND = ''
```

----------------------------------------

TITLE: Returning Custom HTTP Status Codes in Django
DESCRIPTION: Example showing how to return an HTTP response with a specific status code (201 Created) using the HttpResponse constructor's status parameter.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/views.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
from django.http import HttpResponse


def my_view(request):
    # ...

    # Return a "created" (201) response code.
    return HttpResponse(status=201)
```

----------------------------------------

TITLE: Defining a Classmethod for Custom Model Creation in Django (Python)
DESCRIPTION: Demonstrates adding a `create` classmethod to a Django `Book` model as an alternative to overriding `__init__` for custom initialization logic. This method encapsulates custom logic for object creation, like additional processing, before returning the new instance. It's presented as a safer alternative to overriding the `__init__` method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models


class Book(models.Model):
    title = models.CharField(max_length=100)

    @classmethod
    def create(cls, title):
        book = cls(title=title)
        # do something with the book
        return book


book = Book.create("Pride and Prejudice")
```

----------------------------------------

TITLE: Registering a Django Template Tag via Decorator with Default Name (Python)
DESCRIPTION: This Python snippet illustrates registering a Django template tag using the `@register.tag` decorator without specifying a `name`. In this case, Django automatically uses the decorated function's name, 'shout', as the tag name in templates.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
@register.tag
def shout(parser, token): ...
```

----------------------------------------

TITLE: Sorting List of Dictionaries by Key Using Dictsort in Django Templates - HTML+Django
DESCRIPTION: Illustrates use of the 'dictsort' filter to sort a list of dictionaries by a specified key ("name"). Django templates expect the variable 'value' to be a list of dicts. Output is a sorted list by the key, used for display or further iteration.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_57

LANGUAGE: html+django
CODE:
```
{{ value|dictsort:"name" }}
```

----------------------------------------

TITLE: Customizing Context Variable Name in Django ListView using Python
DESCRIPTION: Demonstrates customizing the template context variable name in a `ListView` subclass. By setting the `context_object_name` attribute to `"my_favorite_publishers"`, the list of `Publisher` objects will be available in the template under this custom name instead of the default `object_list` or the model-derived `publisher_list`. This improves template readability.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
# views.py
from django.views.generic import ListView
from books.models import Publisher


class PublisherListView(ListView):
    model = Publisher
    context_object_name = "my_favorite_publishers"
```

----------------------------------------

TITLE: Implementing AppConfig Ready Method in Django
DESCRIPTION: Example of implementing the ready() method in a Django AppConfig subclass to perform initialization tasks like registering signals. Shows how to import models and connect signals safely during application initialization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.apps import AppConfig
from django.db.models.signals import pre_save


class RockNRollConfig(AppConfig):
    # ...

    def ready(self):
        # importing model classes
        from .models import MyModel  # or...

        MyModel = self.get_model("MyModel")

        # registering signals with the model's string label
        pre_save.connect(receiver, sender="app_label.MyModel")
```

----------------------------------------

TITLE: Defining a Class-Based View with a Class Attribute in Django
DESCRIPTION: This example demonstrates defining a class attribute (`greeting`) within a class-based view (`GreetingView`). The `get` method accesses this attribute using `self.greeting` to customize the `HttpResponse`. This showcases how class attributes can be used for configuration within views.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
from django.views import View


class GreetingView(View):
    greeting = "Good Day"

    def get(self, request):
        return HttpResponse(self.greeting)
```

----------------------------------------

TITLE: Chaining QuerySet Filters in Django
DESCRIPTION: This snippet demonstrates how to chain multiple filters to refine a QuerySet. It creates a QuerySet with three conditions: headlines starting with "What", excluding those published after today, and including only those published after January 30, 2005.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> Entry.objects.filter(headline__startswith="What").exclude(
...     pub_date__gte=datetime.date.today()
... ).filter(pub_date__gte=datetime.date(2005, 1, 30))
```

----------------------------------------

TITLE: Limiting Formset Forms with max_num Parameter
DESCRIPTION: Demonstrates limiting the number of forms displayed in a formset using the max_num parameter, which restricts the total number of forms shown regardless of the extra parameter.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> from django.forms import formset_factory
>>> from myapp.forms import ArticleForm
>>> ArticleFormSet = formset_factory(ArticleForm, extra=2, max_num=1)
>>> formset = ArticleFormSet()
>>> for form in formset:
...     print(form)
...
<div><label for="id_form-0-title">Title:</label><input type="text" name="form-0-title" id="id_form-0-title"></div>
<div><label for="id_form-0-pub_date">Pub date:</label><input type="text" name="form-0-pub_date" id="id_form-0-pub_date"></div>
```

----------------------------------------

TITLE: Customizing Django Authentication View URLs
DESCRIPTION: Shows how to reference specific authentication views in the URLconf and customize their behavior by passing arguments, such as changing the template name.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
from django.contrib.auth import views as auth_views

urlpatterns = [
    path(
        "change-password/",
        auth_views.PasswordChangeView.as_view(template_name="change-password.html"),
    ),
]
```

----------------------------------------

TITLE: Attaching Request User to Model in Django Admin
DESCRIPTION: Implementation of save_model method in a ModelAdmin class to automatically associate the current user with the model being saved before persisting it to the database.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_40

LANGUAGE: python
CODE:
```
from django.contrib import admin


class ArticleAdmin(admin.ModelAdmin):
    def save_model(self, request, obj, form, change):
        obj.user = request.user
        super().save_model(request, obj, form, change)
```

----------------------------------------

TITLE: Asynchronously Iterating over a Django QuerySet in Python
DESCRIPTION: Shows asynchronous iteration over a Django QuerySet using `async for`. Similar to synchronous iteration, this triggers database evaluation. Each fetched `Entry` object is appended to the `results` list.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_1

LANGUAGE: python
CODE:
```
async for e in Entry.objects.all():
    results.append(e)
```

----------------------------------------

TITLE: Clearing All M2M Relationships via Forward Manager (pycon)
DESCRIPTION: First, adds relationships back for demonstration. Then, uses the `clear()` method on the forward relationship manager (`a4.publications`) to remove all `Publication` relationships associated with `a4`. It verifies that `a4` has no publications and that `p2` (which was related) now reflects this change.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_26

LANGUAGE: pycon
CODE:
```
>>> p2.article_set.add(a4, a5)
>>> p2.article_set.all()
<QuerySet [<Article: NASA finds intelligent life on Earth>, <Article: Oxygen-free diet works wonders>]>
>>> a4.publications.all()
<QuerySet [<Publication: Science News>, <Publication: Science Weekly>]>
>>> a4.publications.clear()
>>> a4.publications.all()
<QuerySet []>
>>> p2.article_set.all()
<QuerySet [<Article: Oxygen-free diet works wonders>]>
```

----------------------------------------

TITLE: Implementing AuthorCreateView using Django's CreateView
DESCRIPTION: Example of implementing an AuthorCreateView class using Django's CreateView, specifying the model and fields to be used in the form.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.views.generic.edit import CreateView
from myapp.models import Author


class AuthorCreateView(CreateView):
    model = Author
    fields = ["name"]
```

----------------------------------------

TITLE: Overriding Model Validation Error Messages in Django ModelForm
DESCRIPTION: This code demonstrates how to override the default error messages for model validation in a Django ModelForm, specifically for the NON_FIELD_ERRORS that are raised during model validation such as unique_together constraints.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.core.exceptions import NON_FIELD_ERRORS
from django.forms import ModelForm


class ArticleForm(ModelForm):
    class Meta:
        error_messages = {
            NON_FIELD_ERRORS: {
                "unique_together": "%(model_name)s's %(field_labels)s are not unique.",
            }
        }
```

----------------------------------------

TITLE: Using the Default Filter in HTML+Django Template
DESCRIPTION: This snippet demonstrates the `default` template filter. `{{ value|default:"nothing" }}` displays the variable `value`. However, if `value` evaluates to False (e.g., it's an empty string, None, zero, or an empty list) or is not present in the context, it displays the specified default string "nothing" instead. This is useful for providing fallback content.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_2

LANGUAGE: html+django
CODE:
```
{{ value|default:"nothing" }}
```

----------------------------------------

TITLE: Full List of Django's Included Password Hashers
DESCRIPTION: This code shows the complete list of password hashers included in Django, listing them in order of preference from the most secure (PBKDF2) to the least secure (MD5).
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
[
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.BCryptPasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
    "django.contrib.auth.hashers.MD5PasswordHasher",
]
```

----------------------------------------

TITLE: Implementing a Complex Simple Block Tag in Django
DESCRIPTION: Shows a complete example of a simple block tag that generates a message box with multiple levels and custom content. It demonstrates using takes_context and format_html for safe HTML rendering.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from django import template
from django.utils.html import format_html


register = template.Library()


@register.simple_block_tag(takes_context=True)
def msgbox(context, content, level):
    format_kwargs = {
        "level": level.lower(),
        "level_title": level.capitalize(),
        "content": content,
        "open": " open" if level.lower() == "error" else "",
        "site": context.get("site", "My Site"),
    }
    result = """
    <div class="msgbox {level}">
      <details{open}>
        <summary>
          <strong>{level_title}</strong>: Please read for <i>{site}</i>
        </summary>
        <p>
          {content}
        </p>
      </details>
    </div>
    """
    return format_html(result, **format_kwargs)
```

----------------------------------------

TITLE: Using Asynchronous Model Methods in Django ORM with Python
DESCRIPTION: Provides examples of using asynchronous model and related manager methods within async functions in Python. It demonstrates creating a model instance and saving it asynchronously using `await book.asave()` and creating an instance directly with `await Book.objects.acreate()`. It also shows asynchronously setting related objects using `await book.tags.aset(tags)`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
async def make_book(*args, **kwargs):
    book = Book(...)
    await book.asave(using="secondary")


async def make_book_with_tags(tags, *args, **kwargs):
    book = await Book.objects.acreate(...)
    await book.tags.aset(tags)
```

----------------------------------------

TITLE: Updating Multiple Django Objects Efficiently with F()
DESCRIPTION: Shows how to apply an `F()` expression using `update()` on a QuerySet without prior filtering, thereby updating a field for all objects in the table (in this case, incrementing `stories_filed` for all reporters). This is significantly faster than iterating and saving each object individually.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
Reporter.objects.update(stories_filed=F("stories_filed") + 1)
```

----------------------------------------

TITLE: Rendering Django Form as HTML Unordered List
DESCRIPTION: Demonstrates the output of the as_ul() method, which renders form fields as a series of <li> tags without the enclosing <ul> tags.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_24

LANGUAGE: HTML
CODE:
```
<li><label for="id_subject">Subject:</label> <input id="id_subject" type="text" name="subject" maxlength="100" required></li>
<li><label for="id_message">Message:</label> <input type="text" name="message" id="id_message" required></li>
<li><label for="id_sender">Sender:</label> <input type="email" name="sender" id="id_sender" required></li>
<li><label for="id_cc_myself">Cc myself:</label> <input type="checkbox" name="cc_myself" id="id_cc_myself"></li>
```

----------------------------------------

TITLE: Action Decorator Usage in Django Admin
DESCRIPTION: Examples of using the @admin.action decorator to configure custom actions with permissions and descriptions
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
@admin.action(
    permissions=["publish"],
    description="Mark selected stories as published",
)
def make_published(self, request, queryset):
    queryset.update(status="p")

@admin.action
def make_inactive(self, request, queryset):
    queryset.update(is_active=False)
```

----------------------------------------

TITLE: Defining Choices List for Django Field (Python)
DESCRIPTION: Example of a standard sequence of 2-value tuples used to define choices for a Django model field. The first element is the database value, and the second is the display value.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_4

LANGUAGE: Python
CODE:
```
YEAR_IN_SCHOOL_CHOICES = [
    ("FR", "Freshman"),
    ("SO", "Sophomore"),
    ("JR", "Junior"),
    ("SR", "Senior"),
    ("GR", "Graduate"),
]
```

----------------------------------------

TITLE: Creating CSV Files Using Python's CSV Library in Django Views
DESCRIPTION: A complete example demonstrating how to generate a CSV file in a Django view using Python's csv module. The code creates an HttpResponse with appropriate CSV headers and uses csv.writer to write rows to the response.
SOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-csv.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
import csv
from django.http import HttpResponse


def some_view(request):
    # Create the HttpResponse object with the appropriate CSV header.
    response = HttpResponse(
        content_type="text/csv",
        headers={"Content-Disposition": 'attachment; filename="somefilename.csv"'},
    )

    writer = csv.writer(response)
    writer.writerow(["First row", "Foo", "Bar", "Baz"])
    writer.writerow(["Second row", "A", "B", "C", '"Testing"', "Here's a quote"])

    return response
```

----------------------------------------

TITLE: Accessing BoundField Data and Errors in Django Forms
DESCRIPTION: Examples of how to access field data and validation errors from BoundField objects in Django forms.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_35

LANGUAGE: python
CODE:
```
>>> unbound_form = ContactForm()
>>> print(unbound_form["subject"].data)
None
>>> bound_form = ContactForm(data={"subject": "My Subject"})
>>> print(bound_form["subject"].data)
My Subject

>>> data = {"subject": "hi", "message": "", "sender": "", "cc_myself": ""}
>>> f = ContactForm(data, auto_id=False)
>>> print(f["message"])
<input type="text" name="message" required aria-invalid="true">
>>> f["message"].errors
['This field is required.']
>>> print(f["message"].errors)
<ul class="errorlist"><li>This field is required.</li></ul>
>>> f["subject"].errors
[]
>>> print(f["subject"].errors)

>>> str(f["subject"].errors)
''
```

----------------------------------------

TITLE: Implementing Custom Admin Action in Python for Django
DESCRIPTION: This code demonstrates how to create a custom admin action 'make_published' that updates the status of selected articles to 'published'. It uses the @admin.action decorator to provide a friendly description.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib import admin

@admin.action(description="Mark selected stories as published")
def make_published(modeladmin, request, queryset):
    queryset.update(status="p")
```

----------------------------------------

TITLE: Defining Forms with Custom Widgets Using Django Forms in Python
DESCRIPTION: Demonstrates how to specify a different widget for a form field by passing a widget class as an argument in the field constructor. Requires Django; dependencies include django.forms. The code defines a form with three fields, substituting the default widget for one field with Textarea, showing how to customize input element rendering. Inputs are form field specifications; outputs are a Django form instance using the designated widgets.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django import forms


class CommentForm(forms.Form):
    name = forms.CharField()
    url = forms.URLField()
    comment = forms.CharField(widget=forms.Textarea)
```

----------------------------------------

TITLE: Using Coalesce in Django ORM Annotate and Aggregate with Python
DESCRIPTION: These code snippets show the use of the Coalesce function to select the first non-null value across multiple fields or expressions in Django ORM queries. Dependencies include Sum, Coalesce, and potentially Cast for explicit typing. They demonstrate annotation of a query with a computed 'screen_name' from the first available name source, and ensure that aggregation results do not return None by supplying a default. When mixing expressions with possible None values, Coalesce ensures a fallback. Key parameters include field names and expressions. The outputs are annotated fields or aggregation results with guaranteed non-null values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> # Get a screen name from least to most public
>>> from django.db.models import Sum
>>> from django.db.models.functions import Coalesce
>>> Author.objects.create(name="Margaret Smith", goes_by="Maggie")
>>> author = Author.objects.annotate(screen_name=Coalesce("alias", "goes_by", "name")).get()
>>> print(author.screen_name)
Maggie
```

LANGUAGE: python
CODE:
```
>>> # Prevent an aggregate Sum() from returning None
>>> # The aggregate default argument uses Coalesce() under the hood.
>>> aggregated = Author.objects.aggregate(
...     combined_age=Sum("age"),
...     combined_age_default=Sum("age", default=0),
...     combined_age_coalesce=Coalesce(Sum("age"), 0),
... )
>>> print(aggregated["combined_age"])
None
>>> print(aggregated["combined_age_default"])
0
>>> print(aggregated["combined_age_coalesce"])
0
```

LANGUAGE: python
CODE:
```
>>> from django.db.models import DateTimeField
>>> from django.db.models.functions import Cast, Coalesce
>>> from django.utils import timezone
>>> now = timezone.now()
>>> Coalesce("updated", Cast(now, DateTimeField()))
```

----------------------------------------

TITLE: Clearing All M2M Relationships via Reverse Manager (pycon)
DESCRIPTION: Demonstrates using the `clear()` method on the reverse relationship manager (`p2.article_set`) to remove all relationships associated with `p2` from the `Article` side. It verifies that `p2` no longer has any related articles.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_25

LANGUAGE: pycon
CODE:
```
>>> p2.article_set.clear()
>>> p2.article_set.all()
<QuerySet []>
```

----------------------------------------

TITLE: Setting Up InlineModelAdmin with TabularInline
DESCRIPTION: Example demonstrating how to configure the Django admin to allow inline editing of Book models on the Author admin page using TabularInline.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_63

LANGUAGE: python
CODE:
```
from django.contrib import admin
from myapp.models import Author, Book


class BookInline(admin.TabularInline):
    model = Book


class AuthorAdmin(admin.ModelAdmin):
    inlines = [
        BookInline,
    ]


admin.site.register(Author, AuthorAdmin)
```

----------------------------------------

TITLE: Setting and Removing HttpResponse Headers in Python
DESCRIPTION: Shows different methods for setting and removing header fields in an HttpResponse object.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
>>> response = HttpResponse()
>>> response.headers["Age"] = 120
>>> del response.headers["Age"]

>>> response = HttpResponse()
>>> response["Age"] = 120
>>> del response["Age"]

>>> response = HttpResponse(headers={"Age": 120})
```

----------------------------------------

TITLE: Using Concat Function in Django Models
DESCRIPTION: Shows how to concatenate text fields with the Concat function
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
>>> # Get the display name as "name (goes_by)"
>>> from django.db.models import CharField, Value as V
>>> from django.db.models.functions import Concat
>>> Author.objects.create(name="Margaret Smith", goes_by="Maggie")
>>> author = Author.objects.annotate(
...     screen_name=Concat("name", V(" ("), "goes_by", V(")"), output_field=CharField())
... ).get()
>>> print(author.screen_name)
Margaret Smith (Maggie)
```

----------------------------------------

TITLE: Using a Custom Field in a Django Form Python
DESCRIPTION: This snippet demonstrates how to use the previously defined `MultiEmailField` within a standard Django `ContactForm`. The `recipients` field is declared as an instance of `MultiEmailField`, integrating the custom validation logic into the form's cleaning process when `is_valid()` is called.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
class ContactForm(forms.Form):
    subject = forms.CharField(max_length=100)
    message = forms.CharField()
    sender = forms.EmailField()
    recipients = MultiEmailField()
    cc_myself = forms.BooleanField(required=False)
```

----------------------------------------

TITLE: Getting Local Time in Current Time Zone with Django
DESCRIPTION: This snippet shows how to obtain the local time in the current time zone using Django's timezone utilities. It converts the current UTC time to the local time of the active time zone.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
>>> from django.utils import timezone
>>> timezone.localtime(timezone.now())
datetime.datetime(2012, 3, 3, 20, 10, 53, 873365, tzinfo=zoneinfo.ZoneInfo(key='Europe/Paris'))
```

----------------------------------------

TITLE: Conditionally Preventing Save Django Python
DESCRIPTION: Shows how to override the `save()` method to prevent an object from being saved based on a specific condition. If the condition is met, the method returns without calling `super().save()`, thus skipping the database operation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_33

LANGUAGE: Python
CODE:
```
from django.db import models


class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def save(self, **kwargs):
        if self.name == "Yoko Ono's blog":
            return  # Yoko shall never have her own blog!
        else:
            super().save(**kwargs)  # Call the "real" save() method.
```

----------------------------------------

TITLE: Defining Application Namespace in Django App URLconf
DESCRIPTION: This snippet shows how to define an application namespace in a Django app's URLconf. It sets the app_name variable and defines URL patterns for the application views.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from django.urls import path

from . import views

app_name = "polls"
urlpatterns = [
    path("", views.IndexView.as_view(), name="index"),
    path("<int:pk>/", views.DetailView.as_view(), name="detail"),
    ...,
]
```

----------------------------------------

TITLE: Basic Usage of Django Management Commands
DESCRIPTION: Illustrates the standard command-line syntax for running administrative tasks using django-admin, manage.py, or the python -m django module.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_0

LANGUAGE: Console
CODE:
```
$ django-admin <command> [options]
$ manage.py <command> [options]
$ python -m django <command> [options]
```

----------------------------------------

TITLE: Creating a Simple Django Template Tag for Current Time
DESCRIPTION: This example demonstrates how to create a simple Django template tag that returns the current time formatted according to a given format string. It uses the simple_tag decorator for easy implementation.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
import datetime
from django import template

register = template.Library()


@register.simple_tag
def current_time(format_string):
    return datetime.datetime.now().strftime(format_string)
```

----------------------------------------

TITLE: Using Prefetch with Custom QuerySet for Ordering
DESCRIPTION: Shows how to use Prefetch with a custom queryset to control ordering of the prefetched results. This example orders the toppings by name.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_47

LANGUAGE: python
CODE:
```
>>> Restaurant.objects.prefetch_related(
...     Prefetch("pizzas__toppings", queryset=Toppings.objects.order_by("name"))
... )
```

----------------------------------------

TITLE: Filtering QuerySets by Month - Django ORM (Python)
DESCRIPTION: Shows how to filter date/datetime fields by month, or greater-or-equal, using '__month' in Django queries. Inputs are integers 1-12; outputs are QuerySets with records matching the month value. Valid for DateField or DateTimeField; works with time zones if enabled.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_107

LANGUAGE: python
CODE:
```
Entry.objects.filter(pub_date__month=12)
Entry.objects.filter(pub_date__month__gte=6)
```

----------------------------------------

TITLE: Installing Django Debug Toolbar via pip
DESCRIPTION: This command installs the Django Debug Toolbar package using pip within an activated virtual environment. It's a prerequisite for using the toolbar in a Django project.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial08.txt#2025-04-23_snippet_0

LANGUAGE: console
CODE:
```
$ python -m pip install django-debug-toolbar
```

----------------------------------------

TITLE: Setting Content-Type and Content-Disposition Headers in Django HttpResponse
DESCRIPTION: This snippet demonstrates how to set the Content-Type and Content-Disposition headers in a Django HttpResponse to serve a file attachment, specifically a Microsoft Excel spreadsheet.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_18

LANGUAGE: pycon
CODE:
```
>>> response = HttpResponse(
...     my_data,
...     headers={
...         "Content-Type": "application/vnd.ms-excel",
...         "Content-Disposition": 'attachment; filename="foo.xls"',
...     },
... )
```

----------------------------------------

TITLE: Copying Django Model Instances with One-to-One Relations
DESCRIPTION: Demonstrates how to handle one-to-one relationships when copying Django model instances to avoid constraint violations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_54

LANGUAGE: python
CODE:
```
detail = EntryDetail.objects.all()[0]
detail.pk = None
detail._state.adding = True
detail.entry = entry
detail.save()
```

----------------------------------------

TITLE: Creating a Decorator to Disable Signal Handlers During Fixture Loading (Python)
DESCRIPTION: Defines a reusable decorator ('disable_for_loaddata') to wrap Django signal handlers, automatically skipping execution when called with 'raw=True' during fixture deserialization. Dependencies: functools.wraps, Django signals, and any model signal handlers requiring this pattern. Key usage: apply '@disable_for_loaddata' above signal handler definitions. Inputs: arbitrary signal arguments; Output: signal handler deactivated during fixture loading, active otherwise.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from functools import wraps


def disable_for_loaddata(signal_handler):
    """
    Decorator that turns off signal handlers when loading fixture data.
    """

    @wraps(signal_handler)
    def wrapper(*args, **kwargs):
        if kwargs["raw"]:
            return
        signal_handler(*args, **kwargs)

    return wrapper


@disable_for_loaddata
def my_handler(**kwargs): ...
```

----------------------------------------

TITLE: Marking Safe Strings for HTML Output - Django - Python
DESCRIPTION: Demonstrates usage of the mark_safe function from django.utils.safestring to explicitly mark a string as safe for HTML output, and the behavior when modifying a SafeString marked value. Requires Django installation and access to django.utils.safestring. Takes a string and returns a SafeString subclass instance, unless the string is modified (e.g., via strip), in which case the safety is lost and the result returns to being a str. Inputs: any string; Outputs: SafeString instance. Modifying operations revert the output to str.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_31

LANGUAGE: pycon
CODE:
```
>>> mystr = "<b>Hello World</b>   "
>>> mystr = mark_safe(mystr)
>>> type(mystr)
<class 'django.utils.safestring.SafeString'>

>>> mystr = mystr.strip()  # removing whitespace
>>> type(mystr)
<type 'str'>
```

----------------------------------------

TITLE: Subclassing Django TemplateView for Custom View (Python)
DESCRIPTION: Illustrates creating a custom view by subclassing django.views.generic.TemplateView and overriding the template_name, then wiring it to a URL with as_view(). Requires Django and a valid template (about.html). The input is an HTTP GET request to '/about/', outputting an HTTP response with the specified template. Allows for more extensibility by overriding further methods or adding context data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/index.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
# some_app/views.py
from django.views.generic import TemplateView


class AboutView(TemplateView):
    template_name = "about.html"
```

LANGUAGE: python
CODE:
```
# urls.py
from django.urls import path
from some_app.views import AboutView

urlpatterns = [
    path("about/", AboutView.as_view()),
]
```

----------------------------------------

TITLE: Querying Across M2M Relationships in Django (pycon)
DESCRIPTION: Demonstrates filtering `Article` objects based on attributes of their related `Publication` objects. It shows various lookup methods: filtering by related object ID (`publications__id=1`), primary key (`publications__pk=1`), object instance (`publications=p1`), and field lookups on the related model (`publications__title__startswith='Science'`). Includes the use of `distinct()` to avoid duplicate results when an article matches multiple related publications.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_12

LANGUAGE: pycon
CODE:
```
>>> Article.objects.filter(publications__id=1)
<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>
>>> Article.objects.filter(publications__pk=1)
<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>
>>> Article.objects.filter(publications=1)
<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>
>>> Article.objects.filter(publications=p1)
<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>

>>> Article.objects.filter(publications__title__startswith="Science")
<QuerySet [<Article: NASA uses Python>, <Article: NASA uses Python>]>

>>> Article.objects.filter(publications__title__startswith="Science").distinct()
<QuerySet [<Article: NASA uses Python>]>
```

----------------------------------------

TITLE: Listing Changed Field Names with Django Form's changed_data - Python
DESCRIPTION: Illustrates accessing Form's changed_data attribute, which provides a list of names of fields whose bound data differs from the initial values. This is useful for identifying which fields require further action after change detection. Requires a form instance bound to data. Output is a list of field names.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> f = ContactForm(request.POST, initial=data)\n>>> if f.has_changed():\n...     print(\"The following fields changed: %s\" % \", \").join(f.changed_data))\n...\n>>> f.changed_data\n['subject', 'message']
```

----------------------------------------

TITLE: Creating ManyToMany Relationships via Through Model Instances - Django - Pycon
DESCRIPTION: Demonstrates how to establish many-to-many relationships when using a `through` model by directly creating and saving instances of the intermediate model (`Membership`). Shows accessing related objects via forward and reverse relationships.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_18

LANGUAGE: pycon
CODE:
```
>>> ringo = Person.objects.create(name="Ringo Starr")
>>> paul = Person.objects.create(name="Paul McCartney")
>>> beatles = Group.objects.create(name="The Beatles")
>>> m1 = Membership(
...     person=ringo,
...     group=beatles,
...     date_joined=date(1962, 8, 16),
...     invite_reason="Needed a new drummer.",
... )
>>> m1.save()
>>> beatles.members.all()
<QuerySet [<Person: Ringo Starr>]>
>>> ringo.group_set.all()
<QuerySet [<Group: The Beatles>]>
>>> m2 = Membership.objects.create(
...     person=paul,
...     group=beatles,
...     date_joined=date(1960, 8, 1),
...     invite_reason="Wanted to form a band.",
... )
>>> beatles.members.all()
<QuerySet [<Person: Ringo Starr>, <Person: Paul McCartney>]>
```

----------------------------------------

TITLE: Defining Absolute Lazy Relationships in Django
DESCRIPTION: This snippet demonstrates using an absolute lazy reference to define a relationship with a model located in a different application. The model is referenced using its full path: `app_label.ModelName`, which is useful for cross-application relationships and avoiding circular imports.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_49

LANGUAGE: python
CODE:
```
class Car(models.Model):
    manufacturer = models.ForeignKey(

```

----------------------------------------

TITLE: Running Django Tests in Terminal
DESCRIPTION: This snippet shows the command to run Django tests for the polls application in the terminal and the expected output indicating a test failure.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
$ python manage.py test polls

Creating test database for alias 'default'...
System check identified no issues (0 silenced).
F
======================================================================
FAIL: test_was_published_recently_with_future_question (polls.tests.QuestionModelTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/path/to/djangotutorial/polls/tests.py", line 16, in test_was_published_recently_with_future_question
    self.assertIs(future_question.was_published_recently(), False)
AssertionError: True is not False

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
Destroying test database for alias 'default'...
```

----------------------------------------

TITLE: Configuring ArticleAdmin with Related Field Selection
DESCRIPTION: Demonstrates how to configure ArticleAdmin with specific related fields to be selected in the query.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
class ArticleAdmin(admin.ModelAdmin):
    list_select_related = ["author", "category"]
```

----------------------------------------

TITLE: Defining Author Model in Django
DESCRIPTION: Example of defining an Author model in Django with a name field and a get_absolute_url method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models
from django.urls import reverse


class Author(models.Model):
    name = models.CharField(max_length=200)

    def get_absolute_url(self):
        return reverse("author-detail", kwargs={"pk": self.pk})
```

----------------------------------------

TITLE: Using ImageField in a Django Form (Python)
DESCRIPTION: This Python snippet demonstrates how to define a Django form containing an `ImageField` and how to instantiate that form with file data using `SimpleUploadedFile`. It requires the Pillow library (`PIL`) for image processing and Django's form and file handling modules. The example shows creating an `ImageForm` class with an `img` field of type `forms.ImageField`, preparing sample file data, and then creating an instance of the form, binding the file data to it.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_14

LANGUAGE: pycon
CODE:
```
>>> from PIL import Image
>>> from django import forms
>>> from django.core.files.uploadedfile import SimpleUploadedFile
>>> class ImageForm(forms.Form):
...     img = forms.ImageField()
...
>>> file_data = {"img": SimpleUploadedFile("test.png", b"file data")}
>>> form = ImageForm({}, file_data)
```

----------------------------------------

TITLE: Using Prefixes for Multiple Forms in Django
DESCRIPTION: This snippet demonstrates how to use form prefixes to namespace multiple forms within a single HTML form. It shows both instantiation-time prefix setting and class-level prefix definition.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_47

LANGUAGE: python
CODE:
```
>>> mother = PersonForm(prefix="mother")
>>> father = PersonForm(prefix="father")
>>> print(mother)
<div><label for="id_mother-first_name">First name:</label><input type="text" name="mother-first_name" required id="id_mother-first_name"></div>
<div><label for="id_mother-last_name">Last name:</label><input type="text" name="mother-last_name" required id="id_mother-last_name"></div>
>>> print(father)
<div><label for="id_father-first_name">First name:</label><input type="text" name="father-first_name" required id="id_father-first_name"></div>
<div><label for="id_father-last_name">Last name:</label><input type="text" name="father-last_name" required id="id_father-last_name"></div>
```

LANGUAGE: python
CODE:
```
>>> class PersonForm(forms.Form):
...     ...
...     prefix = "person"
...
```

----------------------------------------

TITLE: Creating a Basic Date-Time View in Django
DESCRIPTION: A simple Django view function that returns the current date and time as an HTML response. It imports HttpResponse from django.http and datetime module, then constructs and returns HTML content.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/views.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.http import HttpResponse
import datetime


def current_datetime(request):
    now = datetime.datetime.now()
    html = '<html lang="en"><body>It is now %s.</body></html>' % now
    return HttpResponse(html)
```

----------------------------------------

TITLE: Validating URL Safety in Django
DESCRIPTION: Introduces a new utility function 'is_safe_url' in Django 1.3.5 for validating user-supplied redirect targets. This function checks if a URL is relative or matches a given hostname to prevent redirects to arbitrary third-party sites.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.5.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
django.utils.http.is_safe_url
```

----------------------------------------

TITLE: Ordered Book Query by Author Count
DESCRIPTION: Example of ordering books based on an annotation of author count.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
Book.objects.annotate(num_authors=Count("authors")).order_by("num_authors")
```

----------------------------------------

TITLE: Conditional Update of Fields with Case Assignment - Django ORM - Python
DESCRIPTION: Updates the account_type field for all Client objects based on registration date using a Case clause. Applies a batch update within the ORM, with When conditions for year/month-old clients and a default for recent ones. Assumes all Client instances are accessible and requires standard Django setup with models and query expressions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> a_month_ago = date.today() - timedelta(days=30)
>>> a_year_ago = date.today() - timedelta(days=365)
>>> # Update the account_type for each Client from the registration date
>>> Client.objects.update(
...     account_type=Case(
...         When(registered_on__lte=a_year_ago, then=Value(Client.PLATINUM)),
...         When(registered_on__lte=a_month_ago, then=Value(Client.GOLD)),
...         default=Value(Client.REGULAR),
...     ),
... )
>>> Client.objects.values_list("name", "account_type")
<QuerySet [("Jane Doe", "G"), ("James Smith", "R"), ("Jack Black", "P")]> 
```

----------------------------------------

TITLE: Running Django Migrate Command via Shell
DESCRIPTION: This shell command invokes Django's migrate management command to apply migrations, ensuring that essential Django tables (such as those for admin permissions and content types) are created in the connected database. Requires that database parameters are set and that the migration system is initialized. Output is textual status and logs to the console, and input is not required.
SOURCE: https://github.com/django/django/blob/main/docs/howto/legacy-databases.txt#_snippet_3

LANGUAGE: shell
CODE:
```
$ python manage.py migrate
```

----------------------------------------

TITLE: Returning All Model Data as Dictionaries (Specific Fields) Python
DESCRIPTION: Applies the values() method with specific field names as positional arguments. Returns a QuerySet yielding dictionaries containing only the specified field keys and their corresponding values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_17

LANGUAGE: Python
CODE:
```
>>> Blog.objects.values("id", "name")
```

----------------------------------------

TITLE: Bulk Removing ManyToMany Relationships with Q Expressions
DESCRIPTION: Shows how to use Q expressions with delete() to efficiently remove multiple ManyToMany relationships in a single query.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.db.models import Q

PizzaToppingRelationship = Pizza.toppings.through
PizzaToppingRelationship.objects.filter(
    Q(pizza=my_pizza, topping=pepperoni)
    | Q(pizza=your_pizza, topping=pepperoni)
    | Q(pizza=your_pizza, topping=mushroom)
).delete()
```

LANGUAGE: python
CODE:
```
my_pizza.toppings.remove(pepperoni)
your_pizza.toppings.remove(pepperoni, mushroom)
```

----------------------------------------

TITLE: Configuring Person Model with Admin Display Properties
DESCRIPTION: Shows how to set up a Person model with custom admin display properties and PersonAdmin configuration for list display.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)

    @property
    @admin.display(
        ordering="last_name",
        description="Full name of the person",
        boolean=False,
    )
    def full_name(self):
        return self.first_name + " " + self.last_name


class PersonAdmin(admin.ModelAdmin):
    list_display = ["full_name"]
```

----------------------------------------

TITLE: Advanced Django Logging Configuration
DESCRIPTION: Complex logging setup with multiple formatters, filters, and handlers. Includes console logging, admin email notifications, and custom formatting options.
SOURCE: https://github.com/django/django/blob/main/docs/topics/logging.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "filters": {
        "special": {
            "()": "project.logging.SpecialFilter",
            "foo": "bar",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "filters": ["special"],
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "propagate": True,
        },
        "django.request": {
            "handlers": ["mail_admins"],
            "level": "ERROR",
            "propagate": False,
        },
        "myproject.custom": {
            "handlers": ["console", "mail_admins"],
            "level": "INFO",
            "filters": ["special"],
        },
    },
}
```

----------------------------------------

TITLE: Creating a Custom Django Template Filter Combining Built-in Filters
DESCRIPTION: This example shows how to create a custom Django template filter that combines the urlize and linebreaksbr built-in filters. It demonstrates proper handling of auto-escaping when reusing built-in filters.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
from django.template.defaultfilters import linebreaksbr, urlize


@register.filter(needs_autoescape=True)
def urlize_and_linebreaks(text, autoescape=True):
    return linebreaksbr(urlize(text, autoescape=autoescape), autoescape=autoescape)
```

----------------------------------------

TITLE: Demonstrating Incorrect Results with Multiple Annotations (pycon)
DESCRIPTION: Illustrates a potential issue where combining multiple `Count` aggregations using `annotate()` on different related fields (`authors`, `store`) can yield incorrect results. This occurs because the underlying SQL uses JOINs, which can multiply counts if an object is related to multiple objects in both relationships being counted. The example first shows the correct, individual counts and then the inflated counts resulting from the combined annotation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_9

LANGUAGE: pycon
CODE:
```
>>> book = Book.objects.first()
>>> book.authors.count()
2
>>> book.store_set.count()
3
>>> q = Book.objects.annotate(Count("authors"), Count("store"))
>>> q[0].authors__count
6
>>> q[0].store__count
6
```

----------------------------------------

TITLE: Saving a File to a Django Model Instance
DESCRIPTION: Shows how to save a new file to a Django model instance using the save() method of a File object. The method allows specifying the file name, content, and whether to save the model instance immediately.
SOURCE: https://github.com/django/django/blob/main/docs/ref/files/file.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> car.photo.save("myphoto.jpg", content, save=False)
>>> car.save()
```

----------------------------------------

TITLE: Implementing Async Class-Based Django Middleware
DESCRIPTION: Shows how to create an asynchronous class-based middleware with proper coroutine function marking.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from asgiref.sync import iscoroutinefunction, markcoroutinefunction

class AsyncMiddleware:
    async_capable = True
    sync_capable = False

    def __init__(self, get_response):
        self.get_response = get_response
        if iscoroutinefunction(self.get_response):
            markcoroutinefunction(self)

    async def __call__(self, request):
        response = await self.get_response(request)
        # Some logic ...
        return response
```

----------------------------------------

TITLE: Creating a Formset from a Form Class
DESCRIPTION: Demonstrates how to create a formset factory from an existing form class using Django's formset_factory function, which allows for creating multiple instances of the same form.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from django.forms import formset_factory
>>> ArticleFormSet = formset_factory(ArticleForm)
```

----------------------------------------

TITLE: Adding Deletion Capability to Django Formset
DESCRIPTION: Demonstrates how to add deletion capability to a Django formset using can_delete=True. Shows the HTML output and how to process deleted forms.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_21

LANGUAGE: pycon
CODE:
```
>>> from django.forms import formset_factory
>>> from myapp.forms import ArticleForm
>>> ArticleFormSet = formset_factory(ArticleForm, can_delete=True)
>>> formset = ArticleFormSet(
...     initial=[
...         {"title": "Article #1", "pub_date": datetime.date(2008, 5, 10)},
...         {"title": "Article #2", "pub_date": datetime.date(2008, 5, 11)},
...     ]
... )
>>> for form in formset:
...     print(form)
...
<div><label for="id_form-0-title">Title:</label><input type="text" name="form-0-title" value="Article #1" id="id_form-0-title"></div>
<div><label for="id_form-0-pub_date">Pub date:</label><input type="text" name="form-0-pub_date" value="2008-05-10" id="id_form-0-pub_date"></div>
<div><label for="id_form-0-DELETE">Delete:</label><input type="checkbox" name="form-0-DELETE" id="id_form-0-DELETE"></div>
<div><label for="id_form-1-title">Title:</label><input type="text" name="form-1-title" value="Article #2" id="id_form-1-title"></div>
<div><label for="id_form-1-pub_date">Pub date:</label><input type="text" name="form-1-pub_date" value="2008-05-11" id="id_form-1-pub_date"></div>
<div><label for="id_form-1-DELETE">Delete:</label><input type="checkbox" name="form-1-DELETE" id="id_form-1-DELETE"></div>
<div><label for="id_form-2-title">Title:</label><input type="text" name="form-2-title" id="id_form-2-title"></div>
<div><label for="id_form-2-pub_date">Pub date:</label><input type="text" name="form-2-pub_date" id="id_form-2-pub_date"></div>
<div><label for="id_form-2-DELETE">Delete:</label><input type="checkbox" name="form-2-DELETE" id="id_form-2-DELETE"></div>
```

LANGUAGE: pycon
CODE:
```
>>> data = {
...     "form-TOTAL_FORMS": "3",
...     "form-INITIAL_FORMS": "2",
...     "form-0-title": "Article #1",
...     "form-0-pub_date": "2008-05-10",
...     "form-0-DELETE": "on",
...     "form-1-title": "Article #2",
...     "form-1-pub_date": "2008-05-11",
...     "form-1-DELETE": "",
...     "form-2-title": "",
...     "form-2-pub_date": "",
...     "form-2-DELETE": "",
... }

>>> formset = ArticleFormSet(
...     data,
...     initial=[
...         {"title": "Article #1", "pub_date": datetime.date(2008, 5, 10)},
...         {"title": "Article #2", "pub_date": datetime.date(2008, 5, 11)},
...     ],
... )
>>> [form.cleaned_data for form in formset.deleted_forms]
[{'title': 'Article #1', 'pub_date': datetime.date(2008, 5, 10), 'DELETE': True}]
```

----------------------------------------

TITLE: Configuring Django Template Backends
DESCRIPTION: Example configuration for the TEMPLATES setting in Django, showing how to set up multiple template backends with different directories and options.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            "/home/html/example.com",
            "/home/html/default",
        ],
    },
    {
        "BACKEND": "django.template.backends.jinja2.Jinja2",
        "DIRS": [
            "/home/html/jinja2",
        ],
    },
]
```

----------------------------------------

TITLE: Valid Manager Call on Concrete Model Django
DESCRIPTION: This snippet demonstrates the correct way to invoke a manager method (`do_something()`) by calling it on the manager attribute (`objects`) of a concrete Django model class (`ClassA`). Managers are designed to operate on concrete models and their querysets.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_15

LANGUAGE: Python
CODE:
```
ClassA.objects.do_something()
```

----------------------------------------

TITLE: Using `get_FOO_display()` for Choice Fields (Pycon)
DESCRIPTION: Demonstrates the usage of the automatically generated `get_FOO_display()` method in a Python interactive console (`pycon`). After creating and saving a `Person` instance (defined previously) with a `shirt_size`, it shows retrieving the stored value ('L') and the corresponding human-readable display value ('Large') using `p.get_shirt_size_display()`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_29

LANGUAGE: pycon
CODE:
```
>>> p = Person(name="Fred Flintstone", shirt_size="L")
>>> p.save()
>>> p.shirt_size
'L'
>>> p.get_shirt_size_display()
'Large'
```

----------------------------------------

TITLE: Implementing a Custom TemplateView in Django
DESCRIPTION: Demonstrates how to create a TemplateView subclass that adds custom context data for rendering a template.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/base.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.views.generic.base import TemplateView

from articles.models import Article


class HomePageView(TemplateView):
    template_name = "home.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["latest_articles"] = Article.objects.all()[:5]
        return context
```

----------------------------------------

TITLE: Using Related Manager's Set Method (Recommended)
DESCRIPTION: The recommended approach for managing related objects using the set() method introduced in Django 1.9. This provides a clearer interface for updating related object collections.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
>>> e.related_set.set([obj1, obj2, obj3])
```

----------------------------------------

TITLE: Writing Integration Tests for Django System Checks Raising Errors in Python
DESCRIPTION: Shows how to perform integration testing for system checks using `django.test.SimpleTestCase` and `django.core.management.call_command`. This example tests a built-in check for `SITE_ID` by using `override_settings` to set an invalid value and asserting that `call_command('check')` raises a `SystemCheckError` with the expected error message.
SOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.core.management import call_command
from django.core.management.base import SystemCheckError
from django.test import SimpleTestCase, modify_settings, override_settings


class SystemCheckIntegrationTest(SimpleTestCase):
    @override_settings(SITE_ID="non_integer")
    @modify_settings(INSTALLED_APPS={"prepend": "django.contrib.sites"})
    def test_non_integer_site_id(self):
        message = "(sites.E101) The SITE_ID setting must be an integer."
        with self.assertRaisesMessage(SystemCheckError, message):
            call_command("check")
```

----------------------------------------

TITLE: Checking User Permissions in Django Templates
DESCRIPTION: Examples of using the 'perms' context variable in Django templates to check for various user permissions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_39

LANGUAGE: html
CODE:
```
{% if perms.foo %}
    <p>You have permission to do something in the foo app.</p>
    {% if perms.foo.add_vote %}
        <p>You can vote!</p>
    {% endif %}
    {% if perms.foo.add_driving %}
        <p>You can drive!</p>
    {% endif %}
{% else %}
    <p>You don't have permission to do anything in the foo app.</p>
{% endif %}
```

LANGUAGE: html
CODE:
```
{% if 'foo' in perms %}
    {% if 'foo.add_vote' in perms %}
        <p>In lookup works, too.</p>
    {% endif %}
{% endif %}
```

----------------------------------------

TITLE: Using querystring Tag for Pagination in Django Templates
DESCRIPTION: This example demonstrates preserving the current query string when displaying paginated results, while adding a link to the next page. This is a common use case for the querystring tag.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_32

LANGUAGE: html+django
CODE:
```
{% querystring page=page.next_page_number %}
```

----------------------------------------

TITLE: Excluding Models from Django Dumpdata (Bash)
DESCRIPTION: Demonstrates using the `django-admin dumpdata` command with the `--exclude` option multiple times to prevent specific applications or models from being included in the database dump. Useful for creating smaller or focused fixture files.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_12

LANGUAGE: bash
CODE:
```
django-admin dumpdata --exclude=auth --exclude=contenttypes
```

----------------------------------------

TITLE: Integrating Profile Models with Django Admin
DESCRIPTION: Shows how to add a profile model's fields to the user page in the Django admin using StackedInline and a custom UserAdmin class. This approach allows editing both User and Employee models in the same admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.contrib.auth.models import User

from my_user_profile_app.models import Employee


# Define an inline admin descriptor for Employee model
# which acts a bit like a singleton
class EmployeeInline(admin.StackedInline):
    model = Employee
    can_delete = False
    verbose_name_plural = "employee"


# Define a new User admin
class UserAdmin(BaseUserAdmin):
    inlines = [EmployeeInline]


# Re-register UserAdmin
admin.site.unregister(User)
admin.site.register(User, UserAdmin)
```

----------------------------------------

TITLE: Django Test Client with CSRF Checks - Python
DESCRIPTION: Example of creating a test client instance with CSRF checks enabled.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> from django.test import Client
>>> csrf_client = Client(enforce_csrf_checks=True)
```

----------------------------------------

TITLE: Configuring CACHES with LOCATION
DESCRIPTION: This snippet demonstrates setting the LOCATION parameter within the CACHES settings.  The LOCATION parameter specifies the location for the cache, depending on the chosen backend.  This example shows setting the location for a file-based cache.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_4

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": "/var/tmp/django_cache",
    }
}
```

----------------------------------------

TITLE: Django Test Client URL Path Examples - Python
DESCRIPTION: Shows correct and incorrect ways to specify URLs when using Django's test client.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> c.get("/login/")

>>> c.get("https://www.example.com/login/")
```

----------------------------------------

TITLE: Validating an Invalid Formset
DESCRIPTION: Shows formset validation with invalid data, demonstrating how errors are returned for each form in the formset and how to access individual form errors.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> data = {
...     "form-TOTAL_FORMS": "2",
...     "form-INITIAL_FORMS": "0",
...     "form-0-title": "Test",
...     "form-0-pub_date": "1904-06-16",
...     "form-1-title": "Test",
...     "form-1-pub_date": "",  # <-- this date is missing but required
... }
>>> formset = ArticleFormSet(data)
>>> formset.is_valid()
False
>>> formset.errors
[{}, {'pub_date': ['This field is required.']}]
```

----------------------------------------

TITLE: Customizing FlatPage Model Admin - Django Python
DESCRIPTION: This snippet demonstrates how to customize the admin form for the `FlatPage` model to include additional fields, such as `enable_comments`, `registration_required`, and `template_name`, that are not shown by default. It involves defining a custom `FlatPageAdmin` class and then unregistering and re-registering the `FlatPage` model with this custom admin class.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#_snippet_3

LANGUAGE: Python
CODE:
```
from django.contrib import admin
from django.contrib.flatpages.admin import FlatPageAdmin
from django.contrib.flatpages.models import FlatPage
from django.utils.translation import gettext_lazy as _


# Define a new FlatPageAdmin
class FlatPageAdmin(FlatPageAdmin):
    fieldsets = [
        (None, {"fields": ["url", "title", "content", "sites"]}),
        (
            _("Advanced options"),
            {
                "classes": ["collapse"],
                "fields": [
                    "enable_comments",
                    "registration_required",
                    "template_name",
                ],
            },
        ),
    ]


# Re-register FlatPageAdmin
admin.site.unregister(FlatPage)
admin.site.register(FlatPage, FlatPageAdmin)
```

----------------------------------------

TITLE: Annotating Each Book with Author Count using annotate() (pycon)
DESCRIPTION: Demonstrates the use of the `annotate()` method to add a calculated field to each object in a `QuerySet`. Specifically, it counts the number of related `Author` objects for each `Book` using `Count("authors")`. The resulting count is added as an attribute (automatically named `authors__count`) to each `Book` instance in the returned `QuerySet`. Requires importing `Count` from `django.db.models`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_7

LANGUAGE: pycon
CODE:
```
# Build an annotated queryset
>>> from django.db.models import Count
>>> q = Book.objects.annotate(Count("authors"))
# Interrogate the first object in the queryset
>>> q[0]
<Book: The Definitive Guide to Django>
>>> q[0].authors__count
2
# Interrogate the second object in the queryset
>>> q[1]
<Book: Practical Django Projects>
>>> q[1].authors__count
1
```

----------------------------------------

TITLE: Updating Django Admin URL Configuration
DESCRIPTION: Example of updating the URL configuration for including the Django admin site. In Django 1.9, the old way of including an AdminSite instance is deprecated in favor of directly passing admin.site.urls to url().
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.conf.urls import url
from django.contrib import admin

urlpatterns = [
    url(r"^admin/", admin.site.urls),
]
```

----------------------------------------

TITLE: Creating and Adding M2M Relationship from Reverse Side (pycon)
DESCRIPTION: Uses the `create()` method on the reverse relationship manager (`p2.article_set`) to create a new `Article` instance and simultaneously add it to the relationship with `p2`. It then verifies the relationship from both the `Publication` and the new `Article`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_21

LANGUAGE: pycon
CODE:
```
>>> new_article = p2.article_set.create(headline="Oxygen-free diet works wonders")
>>> p2.article_set.all()
<QuerySet [<Article: NASA finds intelligent life on Earth>, <Article: Oxygen-free diet works wonders>]>
>>> a5 = p2.article_set.all()[1]
>>> a5.publications.all()
<QuerySet [<Publication: Science News>]>
```

----------------------------------------

TITLE: Checking for Changed Data in Django Forms - Python
DESCRIPTION: Demonstrates using the has_changed() method to detect if form data deviates from initial values. By comparing provided data against initial values, it determines if the user modified any field. Requires Django's forms API and an example ContactForm; main parameter is the data dictionary. Output is a boolean indicating if changes occurred.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
>>> data = {\n...     \"subject\": \"hello\",\n...     \"message\": \"Hi there\",\n...     \"sender\": \"foo@example.com\",\n...     \"cc_myself\": True,\n... }\n>>> f = ContactForm(data, initial=data)\n>>> f.has_changed()\nFalse
```

----------------------------------------

TITLE: Configuring GenericSitemap in Django URLs
DESCRIPTION: This Python code snippet demonstrates how to configure a sitemap using `GenericSitemap` within a Django `urls.py` file. It defines an `info_dict` specifying the queryset (`Entry.objects.all()`) and the date field (`pub_date`) to use for generating sitemap items and their last modification dates. A URL pattern for `sitemap.xml` is created, using the `sitemap` view and passing a dictionary containing the configured `GenericSitemap` instance.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.contrib.sitemaps import GenericSitemap
from django.contrib.sitemaps.views import sitemap
from django.urls import path
from blog.models import Entry

info_dict = {
    "queryset": Entry.objects.all(),
    "date_field": "pub_date",
}

urlpatterns = [
    # some generic view using info_dict
    # ...
    # the sitemap
    path(
        "sitemap.xml",
        sitemap,
        {"sitemaps": {"blog": GenericSitemap(info_dict, priority=0.6)}},
        name="django.contrib.sitemaps.views.sitemap",
    ),
]
```

----------------------------------------

TITLE: Adding User Association to Author Model in Django
DESCRIPTION: Modifies the `Author` model to include a `created_by` field. This field is a `ForeignKey` to the standard Django `User` model (`django.contrib.auth.models.User`), establishing a relationship to track which user created each author instance. `on_delete=models.CASCADE` ensures that if a user is deleted, their associated author entries are also deleted.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.contrib.auth.models import User
from django.db import models


class Author(models.Model):
    name = models.CharField(max_length=200)
    created_by = models.ForeignKey(User, on_delete=models.CASCADE)

    # ...
```

----------------------------------------

TITLE: Converting to Specific Timezone
DESCRIPTION: Shows how to convert a value to a specific timezone using the timezone template filter.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_10

LANGUAGE: html+django
CODE:
```
{% load tz %}

{{ value|timezone:"Europe/Paris" }}
```

----------------------------------------

TITLE: Using get_list_or_404() in Django
DESCRIPTION: Example of using get_list_or_404() to retrieve a filtered list of objects or raise Http404.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.shortcuts import get_list_or_404


def my_view(request):
    my_objects = get_list_or_404(MyModel, published=True)
```

----------------------------------------

TITLE: Using urlize Filter in Django Templates
DESCRIPTION: Demonstrates the urlize filter, which converts URLs and email addresses in text into clickable links. It supports various link formats and adds rel="nofollow" attribute to generated links.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_100

LANGUAGE: html+django
CODE:
```
{{ value|urlize }}
```

----------------------------------------

TITLE: Django JSONField and JSONBAgg Examples in Python
DESCRIPTION: Example of creating Document objects with various data types for JSONField and using JSONBAgg with a default parameter in an annotation query. From Django 5.1+, string literals will be implicitly interpreted as JSON string literals.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
Document(data=Value(None, JSONField())),
Document(data=[]),
Document(data="foo-bar"),

```

LANGUAGE: python
CODE:
```
Document.objects.annotate(
    JSONBAgg("field", default=[]),
)
```

----------------------------------------

TITLE: Forcing Django QuerySet Evaluation with list() in Python
DESCRIPTION: Illustrates how to force immediate database evaluation of a QuerySet by converting it to a list using the built-in `list()` function. This loads all results into memory.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_2

LANGUAGE: python
CODE:
```
entry_list = list(Entry.objects.all())
```

----------------------------------------

TITLE: Using assertHTMLEqual in Django Tests
DESCRIPTION: Demonstrates how to use the assertHTMLEqual method to compare HTML strings based on semantic rather than syntactic differences, ignoring whitespace and attribute ordering.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_42

LANGUAGE: python
CODE:
```
self.assertHTMLEqual(
    "<p>Hello <b>&#x27;world&#x27;!</p>",
    """<p>
        Hello   <b>&#39;world&#39;! </b>
    </p>""",
)
self.assertHTMLEqual(
    '<input type="checkbox" checked="checked" id="id_accept_terms" />',
    '<input id="id_accept_terms" type="checkbox" checked>',
)
```

----------------------------------------

TITLE: Creating a Safe Custom Filter in Django
DESCRIPTION: This snippet shows how to create a custom filter that is marked as safe for auto-escaping purposes.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
@register.filter(is_safe=True)
def add_xx(value):
    return "%sxx" % value
```

----------------------------------------

TITLE: Demonstrating Customized HTML Output After Widget Attribute Modification in Django Python Forms
DESCRIPTION: Outputs the rendered HTML for a Django form whose field widgets have extra attributes, such as CSS class and size, after customization. Useful to verify that attribute updates affect the final HTML. Requires Django and a CommentForm with modified widget attributes; output is the HTML for the form with the adjustments. Inputs are form fields; outputs are final rendered HTML with specified attributes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> f = CommentForm(auto_id=False)
>>> print(f)
<div>Name:<input type="text" name="name" class="special" required></div>
<div>Url:<input type="url" name="url" required></div>
<div>Comment:<input type="text" name="comment" size="40" required></div>
```

----------------------------------------

TITLE: Specifying Custom Login URL for login_required in Django
DESCRIPTION: Demonstrates how to specify a custom login URL for the login_required decorator. This overrides the default LOGIN_URL setting.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_20

LANGUAGE: Python
CODE:
```
from django.contrib.auth.decorators import login_required

@login_required(login_url="/accounts/login/")
def my_view(request): ...
```

----------------------------------------

TITLE: Customizing Login Behavior for a Django Function View (Python)
DESCRIPTION: This example shows how to apply the `@login_required` decorator to a function-based view (`book_dashboard`) while specifying a custom login URL (`/books/login/`) and a custom redirect field name (`redirect_to`). This overrides the default settings or the behavior of `LoginRequiredMiddleware` for this specific view.
SOURCE: https://github.com/django/django/blob/main/docs/ref/middleware.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.views.generic import View


@login_required(login_url="/books/login/", redirect_field_name="redirect_to")
def book_dashboard(request): ...
```

----------------------------------------

TITLE: Filtered Book Price Average
DESCRIPTION: Shows how to combine filtering and aggregation to get average price for specific books.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
Book.objects.filter(name__startswith="Django").aggregate(Avg("price"))
```

----------------------------------------

TITLE: Customizing ModelForm Field with Model Attributes in Django
DESCRIPTION: This example shows how to maintain model field attributes when declaratively defining a form field in a Django ModelForm. It explicitly sets the max_length, required, and help_text attributes for the 'headline' field.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
class ArticleForm(ModelForm):
    headline = MyFormField(
        max_length=200,
        required=False,
        help_text="Use puns liberally",
    )

    class Meta:
        model = Article
        fields = ["headline", "content"]
```

----------------------------------------

TITLE: Customizing Changelist Form in Django ModelAdmin
DESCRIPTION: This method shows how to use a custom form for the changelist page in the admin interface by overriding the get_changelist_form method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_53

LANGUAGE: python
CODE:
```
from django import forms


class MyForm(forms.ModelForm):
    pass


class MyModelAdmin(admin.ModelAdmin):
    def get_changelist_form(self, request, **kwargs):
        return MyForm
```

----------------------------------------

TITLE: Filtering QuerySets by Hour - Django ORM (Python)
DESCRIPTION: Filters entries/events to match hour values in time or datetime fields with '__hour' lookup. Inputs are integers between 0 and 23; outputs are QuerySets for records with hour component matching or within a specified range. Supports chaining additional lookups and works for both DateTimeField and TimeField.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_116

LANGUAGE: python
CODE:
```
Event.objects.filter(timestamp__hour=23)
Event.objects.filter(time__hour=5)
Event.objects.filter(timestamp__hour__gte=12)
```

----------------------------------------

TITLE: Running Django Server on Specific IP/Port - Shell
DESCRIPTION: Starts the Django development server, binding to the specified IP address (1.2.3.4) and port (8000). This allows accessing the server from other machines on the network or using a different port than the default.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_22

LANGUAGE: shell
CODE:
```
django-admin runserver 1.2.3.4:8000
```

----------------------------------------

TITLE: Translating string literals in tags and filters in Django templates
DESCRIPTION: Shows how to translate string literals passed as arguments to tags and filters using the _() syntax.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_28

LANGUAGE: html+django
CODE:
```
{% some_tag _("Page not found") value|yesno:_("yes,no") %}
```

----------------------------------------

TITLE: Loading Static Files in Django Template
DESCRIPTION: HTML template code showing how to load and reference static files using Django's static template tag.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial06.txt#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
{% load static %}

<link rel="stylesheet" href="{% static 'polls/style.css' %}">
```

----------------------------------------

TITLE: Setting X-Frame-Options Per View in Django
DESCRIPTION: These examples demonstrate how to use the xframe_options_deny and xframe_options_sameorigin decorators to set specific X-Frame-Options headers for individual views in Django.
SOURCE: https://github.com/django/django/blob/main/docs/ref/clickjacking.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
from django.views.decorators.clickjacking import xframe_options_deny
from django.views.decorators.clickjacking import xframe_options_sameorigin


@xframe_options_deny
def view_one(request):
    return HttpResponse("I won't display in any frame!")


@xframe_options_sameorigin
def view_two(request):
    return HttpResponse("Display in a frame if it's from the same origin as me.")
```

----------------------------------------

TITLE: Configuring Translated URL Patterns in Django
DESCRIPTION: Example of setting up translated URL patterns using Django's i18n_patterns and URL routing with translation markers.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_48

LANGUAGE: python
CODE:
```
path(_("category/<slug:slug>/"), news_views.category, name="category"),
path("<slug:slug>/", news_views.details, name="detail"),
],
"news",
)

urlpatterns += i18n_patterns(
    path(_("about/"), about_views.main, name="about"),
    path(_("news/"), include(news_patterns, namespace="news")),
)
```

----------------------------------------

TITLE: Max Validation Example
DESCRIPTION: Demonstrates validation of maximum number of forms in a formset
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
from django.forms import formset_factory
from myapp.forms import ArticleForm
ArticleFormSet = formset_factory(ArticleForm, max_num=1, validate_max=True)
data = {
    "form-TOTAL_FORMS": "2",
    "form-INITIAL_FORMS": "0",
    "form-0-title": "Test",
    "form-0-pub_date": "1904-06-16",
    "form-1-title": "Test 2",
    "form-1-pub_date": "1912-06-23",
}
```

----------------------------------------

TITLE: Excluding Objects Based on M2M Relationship (pycon)
DESCRIPTION: Demonstrates using the `exclude()` method to retrieve `Article` objects that are *not* related to a specific `Publication` instance (`p2`).
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_17

LANGUAGE: pycon
CODE:
```
>>> Article.objects.exclude(publications=p2)
<QuerySet [<Article: Django lets you build web apps easily>]>
```

----------------------------------------

TITLE: Conditional Action Enablement in Django Admin
DESCRIPTION: Implementation of conditional action enabling/disabling based on user attributes using get_actions method override
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
class MyModelAdmin(admin.ModelAdmin):
    ...

    def get_actions(self, request):
        actions = super().get_actions(request)
        if request.user.username[0].upper() != "J":
            if "delete_selected" in actions:
                del actions["delete_selected"]
        return actions
```

----------------------------------------

TITLE: Loading Templates from Subdirectories
DESCRIPTION: Example of loading a template from a subdirectory using get_template().
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
get_template("news/story_detail.html")
```

----------------------------------------

TITLE: Changing User Passwords Programmatically in Django (Python)
DESCRIPTION: Illustrates how to change a user's password programmatically in a Python interactive session (pycon). It involves retrieving the User object using `User.objects.get()`, calling the `set_password()` method with the new password (which handles hashing), and saving the updated user object.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_2

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.auth.models import User
>>> u = User.objects.get(username="john")
>>> u.set_password("new password")
>>> u.save()
```

----------------------------------------

TITLE: Author Model with Last Accessed Field
DESCRIPTION: Model definition for Author including a last_accessed timestamp field
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.db import models


class Author(models.Model):
    salutation = models.CharField(max_length=10)
    name = models.CharField(max_length=200)
    email = models.EmailField()
    headshot = models.ImageField(upload_to="author_headshots")
    last_accessed = models.DateTimeField()
```

----------------------------------------

TITLE: Running Django Server on Specific IPv6 and Port - Shell
DESCRIPTION: Starts the Django development server, binding to the explicitly specified IPv6 address (`2001:0db8:1234:5678::9`) and port (7000). The IPv6 address must be enclosed in square brackets.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_27

LANGUAGE: shell
CODE:
```
django-admin runserver [2001:0db8:1234:5678::9]:7000
```

----------------------------------------

TITLE: Using urlencode Filter in Django Templates
DESCRIPTION: Shows how to use the urlencode filter to escape a value for use in a URL. An optional argument can be provided to specify characters that should not be escaped.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_99

LANGUAGE: html+django
CODE:
```
{{ value|urlencode }}
```

LANGUAGE: html+django
CODE:
```
{{ value|urlencode:"" }}
```

----------------------------------------

TITLE: Customizing Ignored Patterns for Django's Collectstatic Command
DESCRIPTION: This snippet shows how to create a custom AppConfig class to override the default ignored patterns for the collectstatic command. It defines a new class that inherits from StaticFilesConfig and sets a custom ignore_patterns attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib.staticfiles.apps import StaticFilesConfig


class MyStaticFilesConfig(StaticFilesConfig):
    ignore_patterns = [...]  # your custom ignore list
```

----------------------------------------

TITLE: Working with ImageField Attributes in Django Shell
DESCRIPTION: Interactive code example showing how to access various attributes of an ImageField, including name, path, and URL. This demonstrates how Django provides easy access to file metadata.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> car = Car.objects.get(name="57 Chevy")
>>> car.photo
<ImageFieldFile: cars/chevy.jpg>
>>> car.photo.name
'cars/chevy.jpg'
>>> car.photo.path
'/media/cars/chevy.jpg'
>>> car.photo.url
'https://media.example.com/cars/chevy.jpg'
```

----------------------------------------

TITLE: Django Test Client with Custom Headers - Python
DESCRIPTION: Shows how to make requests with custom headers using Django's test client.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> c = Client()
>>> c.get(
...     "/customers/details/",
...     query_params={"name": "fred", "age": 7},
...     headers={"accept": "application/json"},
... )
```

----------------------------------------

TITLE: Configuring scrypt as the Default Hasher in Django (Python)
DESCRIPTION: Illustrates configuring scrypt as the default password hasher by placing `ScryptPasswordHasher` first in the `PASSWORD_HASHERS` list in Django settings. This requires OpenSSL 1.1+ and makes scrypt the default for new passwords, while preserving verification for other listed hashers.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.ScryptPasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]
```

----------------------------------------

TITLE: Filtering by Hour - SQL Equivalent
DESCRIPTION: Provides SQL equivalent for filtering by hour, using EXTRACT to retrieve the hour component from date/time fields. Inputs and outputs match Django's ORM query expectations. Exact SQL may vary by engine.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_117

LANGUAGE: sql
CODE:
```
SELECT ... WHERE EXTRACT('hour' FROM timestamp) = '23';
SELECT ... WHERE EXTRACT('hour' FROM time) = '5';
SELECT ... WHERE EXTRACT('hour' FROM timestamp) >= '12';
```

----------------------------------------

TITLE: Asynchronous Signal Receiver in Django
DESCRIPTION: Implementation of an asynchronous signal receiver function using async/await syntax.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
async def my_callback(sender, **kwargs):
    await asyncio.sleep(5)
    print("Request finished!")
```

----------------------------------------

TITLE: Appending Static File URLs in Django (Python)
DESCRIPTION: This Python snippet demonstrates how to use the `staticfiles_urlpatterns` helper function from `django.contrib.staticfiles.urls` within a Django URL configuration file (`urls.py`). It appends the necessary URL pattern(s) for serving static files to the existing `urlpatterns` list. This functionality is intended solely for development environments where the `DEBUG` setting is `True` and the `STATIC_URL` setting is a relative path (not empty or a full URL). Appropriate configuration of `STATICFILES_DIRS` is also necessary.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.contrib.staticfiles.urls import staticfiles_urlpatterns

# ... the rest of your URLconf here ...

urlpatterns += staticfiles_urlpatterns()
```

----------------------------------------

TITLE: Iterating over a Django QuerySet in Python
DESCRIPTION: Demonstrates synchronous iteration over a Django QuerySet. Accessing the QuerySet in a `for` loop triggers database evaluation, fetching all `Entry` objects and allowing access to their attributes like `headline`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_0

LANGUAGE: python
CODE:
```
for e in Entry.objects.all():
    print(e.headline)
```

----------------------------------------

TITLE: Inherited Model Definition
DESCRIPTION: Example of model inheritance using Django's multi-table inheritance.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
class Place(models.Model):
    name = models.CharField(max_length=50)


class Restaurant(Place):
    serves_hot_dogs = models.BooleanField(default=False)
```

----------------------------------------

TITLE: Locking Rows for Update in Django
DESCRIPTION: This snippet demonstrates the use of the `select_for_update()` method, which applies row-level locking.  It supports options to handle lock contention via `nowait` and `skip_locked`. It also handles locking related objects via the `of` parameter.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_59

LANGUAGE: pycon
CODE:
```
from django.db import transaction

entries = Entry.objects.select_for_update().filter(author=request.user)
with transaction.atomic():
    for entry in entries:
        ...
```

----------------------------------------

TITLE: Using values() for Grouping and Aggregation (Implicit) Python
DESCRIPTION: Illustrates using values() with a field and an aggregate expression. This implicitly groups the results by the field(s) provided as positional arguments to values() that appear before the aggregate, and then applies the aggregation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_20

LANGUAGE: Python
CODE:
```
>>> from django.db.models import Count
>>> Blog.objects.values("entry__authors", entries=Count("entry"))
```

----------------------------------------

TITLE: Using `reverse` with Positional Arguments in a Django View (Python)
DESCRIPTION: Shows how to use `django.urls.reverse` within a Django view function (`myview`) to generate a URL for redirection. It passes a positional argument (`[1945]`) via the `args` parameter to the `reverse` function for the URL pattern named "arch-summary". This generates a URL like '/archive/summary/1945/' (assuming a suitable pattern) and uses it in an `HttpResponseRedirect`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.urls import reverse


def myview(request):
    return HttpResponseRedirect(reverse("arch-summary", args=[1945]))
```

----------------------------------------

TITLE: Querying Django Models in Python Shell
DESCRIPTION: This Python code demonstrates how to interact with Django models using the Python shell. It shows creating, saving, and querying Question objects, as well as accessing and modifying their attributes.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
# No questions are in the system yet.
>>> Question.objects.all()
<QuerySet []>

# Create a new Question.
# Support for time zones is enabled in the default settings file, so
# Django expects a datetime with tzinfo for pub_date. Use timezone.now()
# instead of datetime.datetime.now() and it will do the right thing.
>>> from django.utils import timezone
>>> q = Question(question_text="What's new?", pub_date=timezone.now())

# Save the object into the database. You have to call save() explicitly.
>>> q.save()

# Now it has an ID.
>>> q.id
1

# Access model field values via Python attributes.
>>> q.question_text
"What's new?"
>>> q.pub_date
datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.UTC)

# Change values by changing the attributes, then calling save().
>>> q.question_text = "What's up?"
>>> q.save()

# objects.all() displays all the questions in the database.
>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>]>
```

----------------------------------------

TITLE: Using Http404 Exception in Django Views
DESCRIPTION: Example demonstrating the use of Http404 exception for handling resources that don't exist. The view attempts to fetch a Poll object and raises Http404 if it doesn't exist.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/views.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
from django.http import Http404
from django.shortcuts import render
from polls.models import Poll


def detail(request, poll_id):
    try:
        p = Poll.objects.get(pk=poll_id)
    except Poll.DoesNotExist:
        raise Http404("Poll does not exist")
    return render(request, "polls/detail.html", {"poll": p})
```

----------------------------------------

TITLE: Configuring RequireDebugFalse Filter in Django Logging Settings
DESCRIPTION: This snippet demonstrates the default configuration for using the `RequireDebugFalse` filter with the `AdminEmailHandler` in Django's `LOGGING` settings. It defines a filter named `require_debug_false` that utilizes the `django.utils.log.RequireDebugFalse` class. This filter is then applied to the `mail_admins` handler, ensuring that error emails are only sent when `settings.DEBUG` is set to `False`, which is typical for production environments.
SOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
LOGGING = {
    # ...
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },
    "handlers": {
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    # ...
}
```

----------------------------------------

TITLE: Translating Model Meta Options in Django
DESCRIPTION: Demonstrates how to provide translatable verbose names for a model using gettext_lazy() in the model's Meta class, ensuring proper localization in the admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_13

LANGUAGE: Python
CODE:
```
from django.db import models
from django.utils.translation import gettext_lazy as _


class MyThing(models.Model):
    name = models.CharField(_("name"), help_text=_("This is the help text"))

    class Meta:
        verbose_name = _("my thing")
        verbose_name_plural = _("my things")
```

----------------------------------------

TITLE: Using ngettext_lazy for Plural Translations in Django Forms
DESCRIPTION: Demonstrates how to use ngettext_lazy() for pluralized translations in a Django form, allowing for dynamic pluralization based on a number argument.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_15

LANGUAGE: Python
CODE:
```
from django import forms
from django.core.exceptions import ValidationError
from django.utils.translation import ngettext_lazy


class MyForm(forms.Form):
    error_message = ngettext_lazy(
        "You only provided %(num)d argument",
        "You only provided %(num)d arguments",
        "num",
    )

    def clean(self):
        # ...
        if error:
            raise ValidationError(self.error_message % {"num": number})
```

----------------------------------------

TITLE: Calculating Average Price Across All Books using aggregate() (pycon)
DESCRIPTION: Shows how to calculate the average value of the `price` field across all `Book` objects in the database. It appends the `aggregate()` method to the `QuerySet` returned by `Book.objects.all()` and uses the `Avg` aggregation function imported from `django.db.models`. The result is a dictionary where the key is automatically generated (`price__avg`) and the value is the computed average.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_3

LANGUAGE: pycon
CODE:
```
>>> from django.db.models import Avg
>>> Book.objects.all().aggregate(Avg("price"))
{'price__avg': 34.35}
```

----------------------------------------

TITLE: Setting DJANGO_SETTINGS_MODULE in WSGI Application
DESCRIPTION: Example of setting the DJANGO_SETTINGS_MODULE environment variable in a WSGI application using Python's os.environ.
SOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
import os

os.environ["DJANGO_SETTINGS_MODULE"] = "mysite.settings"
```

----------------------------------------

TITLE: Rendering Basic Django Form Fields in HTML+Django Template
DESCRIPTION: This snippet demonstrates how to render individual form fields in a Django template, including labels and fieldsets if applicable.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_12

LANGUAGE: html+django
CODE:
```
{% if field.label %}{{ field.label_tag }}{% endif %}
{% endif %}
{{ field }}
{% if field.use_fieldset %}</fieldset>{% endif %}
```

----------------------------------------

TITLE: Defining PASSWORD_HASHERS setting
DESCRIPTION: This setting defines the password hashing algorithms used. It includes several hashers, such as PBKDF2PasswordHasher, Argon2PasswordHasher, etc.  See the auth_password_storage documentation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_75



----------------------------------------

TITLE: Loading Templates with get_template()
DESCRIPTION: Example of how Django searches for templates when using get_template(), based on the TEMPLATES configuration.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
get_template('story_detail.html')
```

----------------------------------------

TITLE: Translating Text Block in Django Template
DESCRIPTION: Example of using the blocktranslate tag to translate a block of text in a Django template.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_30

LANGUAGE: django
CODE:
```
{% blocktranslate %}Ambiguous translatable block of text{% endblocktranslate %}
```

----------------------------------------

TITLE: Copying Django Model Instances with Many-to-Many Relations
DESCRIPTION: Shows how to preserve many-to-many relationships when copying a Django model instance by setting the relations after saving the new instance.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_53

LANGUAGE: python
CODE:
```
entry = Entry.objects.all()[0]  # some previous entry
old_authors = entry.authors.all()
entry.pk = None
entry._state.adding = True
entry.save()
entry.authors.set(old_authors)
```

----------------------------------------

TITLE: Using Tags in Django Templates
DESCRIPTION: Shows examples of using Django template tags for various purposes such as including CSRF tokens, implementing control structures, and cycling through values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_1

LANGUAGE: html
CODE:
```
{% csrf_token %}
```

LANGUAGE: html
CODE:
```
{% cycle 'odd' 'even' %}
```

LANGUAGE: html
CODE:
```
{% if user.is_authenticated %}Hello, {{ user.username }}.{% endif %}
```

----------------------------------------

TITLE: Iterating Form Field Errors in Django Template
DESCRIPTION: Nested template loop that iterates through form fields and their associated errors. The outer loop processes each field-error pair, while the inner loop renders individual error messages. The output is formatted as a nested bullet point list.
SOURCE: https://github.com/django/django/blob/main/django/forms/jinja2/django/forms/errors/dict/text.txt#2025-04-23_snippet_0

LANGUAGE: django-template
CODE:
```
{% for field, errors in errors %}* {{ field }}
{% for error in errors %}  * {{ error }}
{% endfor %}{% endfor %}
```

----------------------------------------

TITLE: Defining a Custom MultiEmailField in Django Python
DESCRIPTION: This snippet defines a custom Django form field `MultiEmailField` that inherits from `forms.Field`. It implements `to_python` to split a comma-separated string into a list of emails and `validate` to ensure each item in the list is a valid email address using Django's `validate_email` validator. This allows the field to handle multiple email inputs separated by commas.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django import forms
from django.core.validators import validate_email


class MultiEmailField(forms.Field):
    def to_python(self, value):
        """Normalize data to a list of strings."""
        # Return an empty list if no input was given.
        if not value:
            return []
        return value.split(",")

    def validate(self, value):
        """Check if value consists only of valid emails."""
        # Use the parent's handling of required fields, etc.
        super().validate(value)
        for email in value:
            validate_email(email)
```

----------------------------------------

TITLE: Extracting Date Components with Django ORM and Python
DESCRIPTION: Demonstrates how to use the Extract function to pull specific date components such as the year from a model's datetime or date field. Dependencies include Django's Extract function and a model with datetime fields. The main parameters are the datetime or date field to extract from, the lookup_name indicating which part to extract, and optional timezone information. Output is an annotated integer field appended to the queryset, reflecting the extracted value (such as year, month, etc.).
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> from datetime import datetime
>>> from django.db.models.functions import Extract
>>> start = datetime(2015, 6, 15)
>>> end = datetime(2015, 7, 2)
>>> Experiment.objects.create(
...     start_datetime=start, start_date=start.date(), end_datetime=end, end_date=end.date()
... )
>>> # Add the experiment start year as a field in the QuerySet.
>>> experiment = Experiment.objects.annotate(
```

----------------------------------------

TITLE: Implementing AuthorUpdateView using Django's UpdateView
DESCRIPTION: Example of implementing an AuthorUpdateView class using Django's UpdateView, specifying the model, fields, and custom template name suffix.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.views.generic.edit import UpdateView
from myapp.models import Author


class AuthorUpdateView(UpdateView):
    model = Author
    fields = ["name"]
    template_name_suffix = "_update_form"
```

----------------------------------------

TITLE: Defining Django Model with Dictionary Choices (Python)
DESCRIPTION: Example of a Django model definition using a dictionary to define choices for a CharField. The keys are stored in the database, and the values are used for display.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_5

LANGUAGE: Python
CODE:
```
from django.db import models


class Person(models.Model):
    SHIRT_SIZES = {
        "S": "Small",
        "M": "Medium",
        "L": "Large",
    }
    name = models.CharField(max_length=60)
    shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)
```

----------------------------------------

TITLE: Creating a PDF with Django and ReportLab
DESCRIPTION: Complete Django view function that generates a PDF file dynamically. It creates a buffer, initializes a ReportLab Canvas object, draws content, and returns the PDF as a downloadable file using Django's FileResponse.
SOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-pdf.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
import io
from django.http import FileResponse
from reportlab.pdfgen import canvas


def some_view(request):
    # Create a file-like buffer to receive PDF data.
    buffer = io.BytesIO()

    # Create the PDF object, using the buffer as its "file."
    p = canvas.Canvas(buffer)

    # Draw things on the PDF. Here's where the PDF generation happens.
    # See the ReportLab documentation for the full list of functionality.
    p.drawString(100, 100, "Hello world.")

    # Close the PDF object cleanly, and we're done.
    p.showPage()
    p.save()

    # FileResponse sets the Content-Disposition header so that browsers
    # present the option to save the file.
    buffer.seek(0)
    return FileResponse(buffer, as_attachment=True, filename="hello.pdf")
```

----------------------------------------

TITLE: Using Lower Function in Django Models
DESCRIPTION: Demonstrates using the Lower function to convert text to lowercase
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Lower
>>> Author.objects.create(name="Margaret Smith")
>>> author = Author.objects.annotate(name_lower=Lower("name")).get()
>>> print(author.name_lower)
margaret smith
```

----------------------------------------

TITLE: Advanced Django Logging Configuration with Custom Logger
DESCRIPTION: Extended logging configuration that sets up both root and django-specific loggers. Includes environment variable control for log level and separate console handlers.
SOURCE: https://github.com/django/django/blob/main/docs/topics/logging.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
import os

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
    },
}
```

----------------------------------------

TITLE: Asynchronous Querying in Django ORM
DESCRIPTION: Showcases how to perform asynchronous queries using Django's ORM, including asynchronous iteration and method calls.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
async for entry in Authors.objects.filter(name__startswith="A"):
    ...

user = await User.objects.filter(username=my_input).afirst()
```

----------------------------------------

TITLE: Using require_http_methods Decorator in Django Views
DESCRIPTION: This snippet demonstrates how to restrict a view to only accept specific HTTP methods (GET and POST) using the require_http_methods decorator from django.views.decorators.http.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/decorators.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.views.decorators.http import require_http_methods


@require_http_methods(["GET", "POST"])
def my_view(request):
    # I can assume now that only GET or POST requests make it this far
    # ...
    pass
```

----------------------------------------

TITLE: Defining Custom Methods on Django Models in Python
DESCRIPTION: Provides a Python code example showing how to define a simple custom method (`foo`) on a Django model class (`Task`). Methods defined like this within the model's Python code can be accessed from within Django templates, as shown in the subsequent example.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
class Task(models.Model):
    def foo(self):
        return "bar"
```

----------------------------------------

TITLE: Registering a Basic Callback with on_commit in Django
DESCRIPTION: Demonstrates how to register a simple callback function that will be executed after the current database transaction is successfully committed, using Django's transaction.on_commit() feature.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
from django.db import transaction


def send_welcome_email(): ...


transaction.on_commit(send_welcome_email)
```

----------------------------------------

TITLE: Iterating Over UploadedFile Instances in Django (Python)
DESCRIPTION: This code snippet demonstrates how to iterate over lines in an UploadedFile object in Django. It leverages Python's iterator protocol to read file content line-by-line, which prevents excessive memory usage when dealing with large files. The approach ensures platform-independent handling of newlines and is useful for processing file uploads efficiently.
SOURCE: https://github.com/django/django/blob/main/docs/ref/files/uploads.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
for line in uploadedfile:
    do_something_with(line)
```

----------------------------------------

TITLE: Retrieving objects by unique indexed columns in Django
DESCRIPTION: Demonstrates retrieving objects using a unique, indexed column (id) which is more efficient than using non-indexed columns. The database can use the index to quickly locate the record.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> entry = Entry.objects.get(id=10)
```

----------------------------------------

TITLE: Using UserPassesTestMixin in Django Class-Based Views
DESCRIPTION: Shows how to use the UserPassesTestMixin with class-based views to implement custom access checks. The test_func method must be overridden to provide the test logic.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_25

LANGUAGE: Python
CODE:
```
from django.contrib.auth.mixins import UserPassesTestMixin

class MyView(UserPassesTestMixin, View):
    def test_func(self):
        return self.request.user.email.endswith("@example.com")
```

----------------------------------------

TITLE: Setting SMTP Host User for Email Authentication in Django
DESCRIPTION: Specifies the username (empty string by default) for SMTP authentication, used with EMAIL_HOST_PASSWORD. Django will not attempt authentication if either setting is empty.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_28

LANGUAGE: python
CODE:
```
EMAIL_HOST_USER = ''
```

----------------------------------------

TITLE: Defining Models with Explicit Many-to-Many Intermediary Model
DESCRIPTION: Creates Person, Group, and Membership models where Membership serves as an explicit intermediary model with additional fields like date_joined and invite_reason. Includes a unique constraint on person-group combinations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_71

LANGUAGE: python
CODE:
```
from django.db import models


class Person(models.Model):
    name = models.CharField(max_length=128)


class Group(models.Model):
    name = models.CharField(max_length=128)
    members = models.ManyToManyField(Person, through="Membership")


class Membership(models.Model):
    person = models.ForeignKey(Person, on_delete=models.CASCADE)
    group = models.ForeignKey(Group, on_delete=models.CASCADE)
    date_joined = models.DateField()
    invite_reason = models.CharField(max_length=64)

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=["person", "group"], name="unique_person_group"
            )
        ]
```

----------------------------------------

TITLE: Basic DateTime Truncation Example in Django
DESCRIPTION: Demonstrates using Django's Trunc function to group experiment data by day and count experiments per day.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> from datetime import datetime
>>> from django.db.models import Count, DateTimeField
>>> from django.db.models.functions import Trunc
>>> Experiment.objects.create(start_datetime=datetime(2015, 6, 15, 14, 30, 50, 321))
>>> Experiment.objects.create(start_datetime=datetime(2015, 6, 15, 14, 40, 2, 123))
>>> Experiment.objects.create(start_datetime=datetime(2015, 12, 25, 10, 5, 27, 999))
>>> experiments_per_day = (
...     Experiment.objects.annotate(
...         start_day=Trunc("start_datetime", "day", output_field=DateTimeField())
...     )
...     .values("start_day")
...     .annotate(experiments=Count("id"))
... )
>>> for exp in experiments_per_day:
...     print(exp["start_day"], exp["experiments"])
...
2015-06-15 00:00:00 2
2015-12-25 00:00:00 1
```

----------------------------------------

TITLE: Running Django with Gunicorn and Uvicorn Worker
DESCRIPTION: Command to start Django application using Gunicorn with Uvicorn worker class for production deployment.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/uvicorn.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
python -m gunicorn myproject.asgi:application -k uvicorn_worker.UvicornWorker
```

----------------------------------------

TITLE: Using Django limit_choices_to with Callable (Python)
DESCRIPTION: Shows how to use the `limit_choices_to` option with a callable function. The function `limit_pub_date_choices` returns a dictionary lookup that filters choices based on the current date, providing dynamic filtering for the field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_34

LANGUAGE: Python
CODE:
```
def limit_pub_date_choices():
    return {"pub_date__lte": datetime.date.today()}

limit_choices_to = limit_pub_date_choices
```

----------------------------------------

TITLE: Manually emptying the test email outbox in Django
DESCRIPTION: Example showing how to manually empty Django's test email outbox by assigning an empty list to mail.outbox.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_51

LANGUAGE: python
CODE:
```
from django.core import mail

# Empty the test outbox
mail.outbox = []
```

----------------------------------------

TITLE: Defining Related Models for Django Admin Inlines
DESCRIPTION: Example showing how to define Author and Book models with a ForeignKey relationship that will be used for inline editing in the Django admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_62

LANGUAGE: python
CODE:
```
from django.db import models


class Author(models.Model):
    name = models.CharField(max_length=100)


class Book(models.Model):
    author = models.ForeignKey(Author, on_delete=models.CASCADE)
    title = models.CharField(max_length=100)
```

----------------------------------------

TITLE: Changing File Name and Location for a Django FileField
DESCRIPTION: Example showing how to rename a file associated with a model field by updating the name attribute and moving the physical file. The model needs to be saved after the change to update the database.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> import os
>>> from django.conf import settings
>>> initial_path = car.photo.path
>>> car.photo.name = "cars/chevy_ii.jpg"
>>> new_path = settings.MEDIA_ROOT + car.photo.name
>>> # Move the file on the filesystem
>>> os.rename(initial_path, new_path)
>>> car.save()
>>> car.photo.path
'/media/cars/chevy_ii.jpg'
>>> car.photo.path == new_path
True
```

----------------------------------------

TITLE: UUID Field Migration Implementation
DESCRIPTION: Collection of migrations demonstrating how to add a unique UUID field to existing models.
SOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.db import migrations, models
import uuid

class Migration(migrations.Migration):
    dependencies = [
        ("myapp", "0005_populate_uuid_values"),
    ]

    operations = [
        migrations.AlterField(
            model_name="mymodel",
            name="uuid",
            field=models.UUIDField(default=uuid.uuid4, unique=True),
        ),
    ]
```

LANGUAGE: python
CODE:
```
from django.db import migrations
import uuid

def gen_uuid(apps, schema_editor):
    MyModel = apps.get_model("myapp", "MyModel")
    for row in MyModel.objects.all():
        row.uuid = uuid.uuid4()
        row.save(update_fields=["uuid"])

class Migration(migrations.Migration):
    dependencies = [
        ("myapp", "0004_add_uuid_field"),
    ]

    operations = [
        migrations.RunPython(gen_uuid, reverse_code=migrations.RunPython.noop),
    ]
```

----------------------------------------

TITLE: Logging Out Users in Django
DESCRIPTION: This code shows how to implement a logout view in Django using the logout() function, which cleans out session data for the current request. After logout, the function redirects to a success page.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
from django.contrib.auth import logout


def logout_view(request):
    logout(request)
    # Redirect to a success page.
```

----------------------------------------

TITLE: Defining TIME_ZONE setting
DESCRIPTION: This setting defines the default time zone for the Django installation. It sets the time zone used by the application. The default value is 'America/Chicago' for backwards compatibility, but new projects default to 'UTC'. When USE_TZ is False, this is the time zone Django will store datetimes in, and when USE_TZ is True, it's the default time zone for displaying datetimes in templates and interpreting form inputs.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_59



----------------------------------------

TITLE: Unsafe Use of RawSQL with Quoted Placeholder - Django ORM - Python
DESCRIPTION: Provides an example of an insecure RawSQL usage where the SQL substitution placeholder is quoted, making it vulnerable to SQL injection attacks. Serves as a warning for developers by highlighting improper use of string interpolation in SQL. Should never be used in production; included for educational purposes only.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
RawSQL("select col from sometable where othercol = '%s'")  # unsafe!
```

----------------------------------------

TITLE: Removing M2M Relationship via Forward Manager (pycon)
DESCRIPTION: Demonstrates removing a specific many-to-many relationship using the `remove()` method on the forward relationship manager (`a4.publications.remove(p2)`). It verifies the removal by checking the related sets from both sides.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_22

LANGUAGE: pycon
CODE:
```
>>> a4.publications.remove(p2)
>>> p2.article_set.all()
<QuerySet [<Article: Oxygen-free diet works wonders>]>
>>> a4.publications.all()
<QuerySet []>
```

----------------------------------------

TITLE: Configuring ModelChoiceField with Custom to_field_name in Django
DESCRIPTION: Example of configuring a ModelChoiceField to use a specific field (name) as the value for each option in the select widget.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
# to_field_name provided
field2 = forms.ModelChoiceField(queryset=..., to_field_name="name")
```

----------------------------------------

TITLE: Question Creation Helper and View Tests
DESCRIPTION: Helper function to create test questions and test class for verifying index view behavior.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
def create_question(question_text, days):
    """
    Create a question with the given `question_text` and published the
    given number of `days` offset to now (negative for questions published
    in the past, positive for questions that have yet to be published).
    """
    time = timezone.now() + datetime.timedelta(days=days)
    return Question.objects.create(question_text=question_text, pub_date=time)


class QuestionIndexViewTests(TestCase):
    def test_no_questions(self):
        """
        If no questions exist, an appropriate message is displayed.
        """
        response = self.client.get(reverse("polls:index"))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "No polls are available.")
        self.assertQuerySetEqual(response.context["latest_question_list"], [])

    def test_past_question(self):
        """
        Questions with a pub_date in the past are displayed on the
        index page.
        """
        question = create_question(question_text="Past question.", days=-30)
        response = self.client.get(reverse("polls:index"))
        self.assertQuerySetEqual(
            response.context["latest_question_list"],
            [question],
        )

    def test_future_question(self):
        """
        Questions with a pub_date in the future aren't displayed on
        the index page.
        """
        create_question(question_text="Future question.", days=30)
```

----------------------------------------

TITLE: Defining an m2m_changed Signal Handler in Django
DESCRIPTION: This snippet shows how to import the `m2m_changed` signal from `django.db.models.signals` and define a Python function `toppings_changed` intended to act as a signal handler. This handler function accepts the `sender` and `**kwargs` arguments, which are standard for Django signal receivers. It's presented as an example of a function that could be connected to the `m2m_changed` signal for the `Pizza.toppings` field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.db.models.signals import m2m_changed


def toppings_changed(sender, **kwargs):
    # Do something
    pass
```

----------------------------------------

TITLE: Setting Custom X-Frame-Options Value in Django Settings
DESCRIPTION: This code demonstrates how to set a custom value for the X-Frame-Options header using the X_FRAME_OPTIONS setting in Django. In this case, it's set to SAMEORIGIN.
SOURCE: https://github.com/django/django/blob/main/docs/ref/clickjacking.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
X_FRAME_OPTIONS = "SAMEORIGIN"
```

----------------------------------------

TITLE: Running Django Server with IPv6 on Specific Port - Shell
DESCRIPTION: Starts the Django development server with IPv6 support enabled, binding to the default IPv6 loopback address (::1) but using the specified port (7000). This allows running on IPv6 with a custom port.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_26

LANGUAGE: shell
CODE:
```
django-admin runserver -6 7000
```

----------------------------------------

TITLE: Deleting Session Values in Django Views
DESCRIPTION: Example of removing a key-value pair from the session dictionary using the __delitem__ method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
del request.session['fav_color']
```

----------------------------------------

TITLE: Configuring mod_wsgi in daemon mode with virtual environment
DESCRIPTION: Apache configuration for running Django with mod_wsgi in daemon mode, which is the recommended approach for non-Windows platforms. Includes setting up a process group and Python path.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/modwsgi.txt#2025-04-23_snippet_3

LANGUAGE: apache
CODE:
```
WSGIDaemonProcess example.com python-home=/path/to/venv python-path=/path/to/mysite.com
WSGIProcessGroup example.com
```

----------------------------------------

TITLE: Creating Custom Permissions for a Task Model in Django
DESCRIPTION: Demonstrates how to add custom permissions to a Django model using the permissions Meta attribute. These permissions ('change_task_status' and 'close_task') define actions users can perform with Task instances.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class Task(models.Model):
    ...

    class Meta:
        permissions = [
            ("change_task_status", "Can change the status of tasks"),
            ("close_task", "Can remove a task by setting its status as closed"),
        ]
```

----------------------------------------

TITLE: Using query_params with Django test client
DESCRIPTION: Demonstrates how to use the new query_params parameter with Django's test client classes to easily set query strings on HTTP requests. This works with both synchronous and asynchronous client implementations.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
self.client.post("/items/1", query_params={"action": "delete"})
await self.async_client.post("/items/1", query_params={"action": "delete"})
```

----------------------------------------

TITLE: Accessing Fields from a Django Form Instance - Python
DESCRIPTION: Shows how to access the fields attribute of a Django Form instance, allowing iteration over field objects and accessing individual fields. Changing field attributes enables dynamic customization of form rendering. Prerequisite is a form instance 'f'. Outputs are the field objects themselves.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
>>> for row in f.fields.values():\n...     print(row)\n...\n<django.forms.fields.CharField object at 0x7ffaac632510>\n<django.forms.fields.URLField object at 0x7ffaac632f90>\n<django.forms.fields.CharField object at 0x7ffaac3aa050>\n>>> f.fields[\"name\"]\n<django.forms.fields.CharField object at 0x7ffaac6324d0>
```

----------------------------------------

TITLE: Handling Optional Fields in Django Forms and Cleaned Data - Python
DESCRIPTION: Explains that optional fields not present in the input data are included in cleaned_data, with their blank value (e.g., '' for CharField). Demonstrates defining an optional field and result after validation. Inputs are partial form data. Output is cleaned_data with all form fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
>>> from django import forms\n>>> class OptionalPersonForm(forms.Form):\n...     first_name = forms.CharField()\n...     last_name = forms.CharField()\n...     nick_name = forms.CharField(required=False)\n...\n>>> data = {\"first_name\": \"John\", \"last_name\": \"Lennon\"}\n>>> f = OptionalPersonForm(data)\n>>> f.is_valid()\nTrue\n>>> f.cleaned_data\n{'nick_name': '', 'first_name': 'John', 'last_name': 'Lennon'}
```

----------------------------------------

TITLE: Defining MaxValueValidator in Django
DESCRIPTION: Validator class that checks if a value exceeds a maximum limit. Raises ValidationError if the value is greater than the specified limit_value.
SOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
MaxValueValidator(limit_value, message=None)
```

----------------------------------------

TITLE: Annotating Books with Custom Author Count Alias using annotate() (pycon)
DESCRIPTION: Shows how to provide a custom alias (`num_authors`) for an annotation created with `annotate()`. Instead of the default `authors__count`, the calculated count of authors for each book can be accessed using `book_instance.num_authors`. Requires importing `Count` from `django.db.models`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_8

LANGUAGE: pycon
CODE:
```
>>> q = Book.objects.annotate(num_authors=Count("authors"))
>>> q[0].num_authors
2
>>> q[1].num_authors
1
```

----------------------------------------

TITLE: Setting Dynamic Log Level in Django Configuration
DESCRIPTION: This snippet demonstrates how to use an environment variable to dynamically set the log level in Django's logging configuration. It defaults to 'WARNING' if the environment variable is not set.
SOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
"level": os.getenv("DJANGO_LOG_LEVEL", "WARNING")
```

----------------------------------------

TITLE: Iterating Date List in Django Template - HTML+Django
DESCRIPTION: This HTML+Django template snippet demonstrates how to iterate over a `date_list` in reversed order within a for loop. This approach can be used in archives or listings where dates should be presented from newest to oldest. The context expects an iterable `date_list`, and the `reversed` keyword causes the loop to traverse the sequence in reverse. The template tag `{% for date in date_list reversed %}` outputs each date according to its respective template block logic. No additional dependencies are required beyond Django's template engine.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.txt#2025-04-23_snippet_1

LANGUAGE: html+django
CODE:
```
{% for date in date_list reversed %}

```

----------------------------------------

TITLE: Implementing Custom Command Arguments in Django
DESCRIPTION: Demonstrates how to override the add_arguments method in a custom Django command to add both positional and optional arguments. This method is the entry point for defining command-line arguments.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-management-commands.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
def add_arguments(parser):
    # Custom commands should override this method to add both
    # positional and optional arguments accepted by the command.
    # Calling super() is not needed when directly subclassing BaseCommand.
```

----------------------------------------

TITLE: Saving an Existing File to a Django FileField
DESCRIPTION: Code example demonstrating how to save an existing file from disk to a Django FileField. It uses pathlib.Path and django.core.files.File to handle the file operations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> from pathlib import Path
>>> from django.core.files import File
>>> path = Path("/some/external/specs.pdf")
>>> car = Car.objects.get(name="57 Chevy")
>>> with path.open(mode="rb") as f:
...     car.specs = File(f, name=path.name)
...     car.save()
...
```

----------------------------------------

TITLE: Customizing Labels, Help Texts, and Error Messages in Django ModelForm
DESCRIPTION: This example shows how to customize the labels, help texts, and error messages for fields in a Django ModelForm. It uses the labels, help_texts, and error_messages attributes of the inner Meta class to provide custom strings for the 'name' field.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.utils.translation import gettext_lazy as _


class AuthorForm(ModelForm):
    class Meta:
        model = Author
        fields = ["name", "title", "birth_date"]
        labels = {
            "name": _("Writer"),
        }
        help_texts = {
            "name": _("Some useful help text."),
        }
        error_messages = {
            "name": {
                "max_length": _("This writer's name is too long."),
            },
        }
```

----------------------------------------

TITLE: Rendering Formsets in Django Templates
DESCRIPTION: Shows how to render formsets in Django templates, including the management form and individual form fields. It demonstrates both manual rendering and using the formset's built-in rendering methods.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_25

LANGUAGE: html
CODE:
```
<form method="post">
    {{ formset.management_form }}
    <table>
        {% for form in formset %}
        {{ form }}
        {% endfor %}
    </table>
</form>
```

LANGUAGE: html
CODE:
```
<form method="post">
    <table>
        {{ formset }}
    </table>
</form>
```

----------------------------------------

TITLE: Creating ModelFormSet Class with modelformset_factory (Django, Python)
DESCRIPTION: The modelformset_factory function returns a FormSet class for a specified Django model, leveraging ModelForm logic. It accepts arguments to define the underlying form, model fields, widgets, field classes, and additional formset behaviors like extra forms, ordering, deletion, maximum and minimum forms, validation, and rendering options. Many arguments are passed through to modelform_factory and formset_factory, supporting flexible configuration. Inputs include model, form, fields, widgets, and advanced formset options; the output is a dynamically generated ModelFormSet class. Requires django.forms.models and django.forms.formsets components.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/models.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False)
```

----------------------------------------

TITLE: Acquiring CSRF Token from HTML in JavaScript
DESCRIPTION: Demonstrates how to retrieve the CSRF token from the HTML DOM when CSRF_USE_SESSIONS or CSRF_COOKIE_HTTPONLY is True.
SOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_2

LANGUAGE: html
CODE:
```
{% csrf_token %}
<script>
const csrftoken = document.querySelector('[name=csrfmiddlewaretoken]').value;
</script>
```

----------------------------------------

TITLE: Comparing POST Data with Initial Values in Django Forms - Python
DESCRIPTION: Shows how a form's has_changed() function compares submitted POST data to the form's initial data, returning True if any values have changed. This is typically used to detect modifications on form submission. The main input is request.POST with optional initial data. Output is a boolean.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> f = ContactForm(request.POST, initial=data)\n>>> f.has_changed()
```

----------------------------------------

TITLE: Displaying Dates and Times - now Tag in HTML+Django Template - html+django
DESCRIPTION: Demonstrates the 'now' tag for outputting the current date/time in custom or predefined Django formats, with examples of escaping and variable assignment. Accepts a format string plus optional 'as variable'. Dependency on Django's time formatting and localization. Inputs are format specifier strings; outputs localized time strings to the template.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_25

LANGUAGE: html+django
CODE:
```
It is {% now "jS F Y H:i" %}
```

LANGUAGE: html+django
CODE:
```
It is the {% now "jS \o\f F" %}
```

LANGUAGE: html+django
CODE:
```
It is {% now "SHORT_DATETIME_FORMAT" %}
```

LANGUAGE: html+django
CODE:
```
{% now "Y" as current_year %}
{% blocktranslate %}Copyright {{ current_year }}{% endblocktranslate %}
```

----------------------------------------

TITLE: Setting Verbose Name for Django Relationship Fields (Python)
DESCRIPTION: Illustrates how to set verbose names for `ForeignKey`, `ManyToManyField`, and `OneToOneField` using the `verbose_name` keyword argument. The first positional argument for these field types is reserved for the related model class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_13

LANGUAGE: Python
CODE:
```
poll = models.ForeignKey(
    Poll,
    on_delete=models.CASCADE,
    verbose_name="the related poll",
)
sites = models.ManyToManyField(Site, verbose_name="list of sites")
place = models.OneToOneField(
    Place,
    on_delete=models.CASCADE,
    verbose_name="related place",
)
```

----------------------------------------

TITLE: Enabling Auto-escaping in Django Templates
DESCRIPTION: This snippet demonstrates the use of the `{% autoescape on %}` tag in Django templates. It ensures that the content of the `body` variable within the block is automatically HTML-escaped before rendering, preventing potential cross-site scripting (XSS) vulnerabilities.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_0

LANGUAGE: html+django
CODE:
```
{% autoescape on %}
    {{ body }}
{% endautoescape %}
```

----------------------------------------

TITLE: Custom Admin Template Extension
DESCRIPTION: Shows how to extend the Django admin base template for custom views.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_46

LANGUAGE: html
CODE:
```
{% extends "admin/base_site.html" %}
{% block content %}
...
{% endblock %}
```

----------------------------------------

TITLE: User Model Field Declarations - Python/Django
DESCRIPTION: Core field definitions for Django's User model including username, names, email, password, and various permission flags
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
username = models.CharField(max_length=150)  # Required, allows alphanumeric, _, @, +, ., -
first_name = models.CharField(max_length=150, blank=True)  # Optional
last_name = models.CharField(max_length=150, blank=True)  # Optional
email = models.EmailField(blank=True)  # Optional
password = models.CharField()  # Required, stores password hash
groups = models.ManyToManyField('Group')
user_permissions = models.ManyToManyField('Permission')
is_staff = models.BooleanField()  # Controls admin site access
is_active = models.BooleanField()  # Account status
is_superuser = models.BooleanField()  # Grants all permissions
last_login = models.DateTimeField()  # Last login timestamp
date_joined = models.DateTimeField()  # Account creation timestamp
```

----------------------------------------

TITLE: Setting Custom Manager via as_manager Django
DESCRIPTION: This snippet shows how to assign a custom manager to a Django model. It creates a manager instance by calling the `as_manager()` class method on a custom `QuerySet` subclass, effectively copying methods from the queryset to the manager.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_6

LANGUAGE: Python
CODE:
```
class Person(models.Model):
    ...
    people = PersonQuerySet.as_manager()
```

----------------------------------------

TITLE: Using django.utils.text.slugify Function
DESCRIPTION: The slugify template filter is now available as a standard Python function in django.utils.text module.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
django.utils.text.slugify
```

----------------------------------------

TITLE: Rendered Output Showing Inherited `autoescape off` in Django
DESCRIPTION: Displays the final rendered HTML output resulting from the interaction between `base.html` (with `autoescape off`) and `child.html`. It shows that the `greeting` variable, assumed to contain `<b>Hello!</b>`, is rendered as raw HTML because the `autoescape off` setting was inherited from the base template.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_21

LANGUAGE: html+django
CODE:
```
<h1>This &amp; that</h1>
<b>Hello!</b>
```

----------------------------------------

TITLE: Directory Structure for Custom Management Commands in Django
DESCRIPTION: Shows the directory structure required to implement a custom management command in a Django application. The custom command will be registered automatically if placed in the correct directory structure.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-management-commands.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
polls/
    __init__.py
    models.py
    management/
        __init__.py
        commands/
            __init__.py
            _private.py
            closepoll.py
    tests.py
    views.py
```

----------------------------------------

TITLE: Implementing ContactFormView using Django's FormView
DESCRIPTION: Example of implementing a ContactFormView class using Django's FormView, specifying template, form class, success URL, and form_valid method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from myapp.forms import ContactForm
from django.views.generic.edit import FormView


class ContactFormView(FormView):
    template_name = "contact.html"
    form_class = ContactForm
    success_url = "/thanks/"

    def form_valid(self, form):
        # This method is called when valid form data has been POSTed.
        # It should return an HttpResponse.
        form.send_email()
        return super().form_valid(form)
```

----------------------------------------

TITLE: Defining a Django Model for Conditional Queries - Django ORM - Python
DESCRIPTION: Defines the Client model with fields for name, registration date, and account type, offering ACCOUNT_TYPE_CHOICES using class constants. Serves as the primary model used for all conditional query examples in this documentation. Requires Django and should be placed in an app's models.py.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models

class Client(models.Model):
    REGULAR = "R"
    GOLD = "G"
    PLATINUM = "P"
    ACCOUNT_TYPE_CHOICES = {
        REGULAR: "Regular",
        GOLD: "Gold",
        PLATINUM: "Platinum",
    }
    name = models.CharField(max_length=50)
    registered_on = models.DateField()
    account_type = models.CharField(
        max_length=1,
        choices=ACCOUNT_TYPE_CHOICES,
        default=REGULAR,
    )
```

----------------------------------------

TITLE: Correcting Multiple Counts with distinct=True in Annotations (pycon)
DESCRIPTION: Shows how to mitigate the issue of inflated counts when using multiple `Count` annotations by setting the `distinct=True` parameter within the `Count` function. This ensures that each related author and store is counted only once per book, even with the JOINs used by `annotate()`, yielding the correct distinct counts for `authors__count` and `store__count` on each book instance.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_10

LANGUAGE: pycon
CODE:
```
>>> q = Book.objects.annotate(
...     Count("authors", distinct=True), Count("store", distinct=True)
... )
>>> q[0].authors__count
2
>>> q[0].store__count
3
```

----------------------------------------

TITLE: Inserting Data Using RunSQL in Django (Python)
DESCRIPTION: Illustrates how to use the migration RunSQL operation to insert a new record directly into the 'musician' table. This snippet runs a single SQL statement upon migration and demonstrates using the SQL string as a parameter. No complex dependencies are required, only Django's migration framework. Input: None, Output: Executes insert on the database.
SOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
migrations.RunSQL("INSERT INTO musician (name) VALUES ('Reinhardt');")
```

----------------------------------------

TITLE: Using Django models.SET with a Callable (Python)
DESCRIPTION: Illustrates how to use `on_delete=models.SET()` with a callable function. The `get_sentinel_user` function retrieves or creates a default user, which is then assigned to the `user` foreign key field when the referenced user object is deleted.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_32

LANGUAGE: Python
CODE:
```
from django.conf import settings
from django.contrib.auth import get_user_model
from django.db import models

def get_sentinel_user():
    return get_user_model().objects.get_or_create(username="deleted")[0]

class MyModel(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET(get_sentinel_user),
    )
```

----------------------------------------

TITLE: Combining Date and Time Filters for Full Datetime Representation - HTML+Django
DESCRIPTION: Shows how to combine 'date' and 'time' template filters to display a complete datetime in Django templates. This pattern is useful for rendering both date and time parts of a variable. Inputs are datetime objects; outputs are concatenated strings. This requires the presence of both filters and a context variable.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_54

LANGUAGE: html+django
CODE:
```
{{ value|date:"D d M Y" }} {{ value|time:"H:i" }}
```

----------------------------------------

TITLE: User Authentication Check Example
DESCRIPTION: Example showing the new property-based approach for checking user authentication status instead of the deprecated method-based approach.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
if request.user.is_authenticated:
    ...  # Do something for logged-in users.
else:
    ...  # Do something for anonymous users.
```

----------------------------------------

TITLE: Demonstrating HttpRequest.build_absolute_uri Usage in Django (Python)
DESCRIPTION: Shows interactive examples of calling build_absolute_uri() with various arguments to generate absolute URIs based on request context or specific locations. Assumes a Django HttpRequest with necessary context (host, scheme, etc.). Useful for generating fully qualified URLs in views or middleware.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> request.build_absolute_uri()
'https://example.com/music/bands/the_beatles/?print=true'
>>> request.build_absolute_uri("/bands/")
'https://example.com/bands/'
>>> request.build_absolute_uri("https://example2.com/bands/")
'https://example2.com/bands/'

```

----------------------------------------

TITLE: Setting Singular Verbose Name in Django Model Meta
DESCRIPTION: Illustrates how to set a custom, human-readable singular name for a Django model using the `verbose_name` attribute within its `Meta` class. This name is used in Django's admin interface and other places where the model is displayed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
verbose_name = "pizza"
```

----------------------------------------

TITLE: Defining a Model with File Fields in Django
DESCRIPTION: Example of a Car model with ImageField and FileField for storing photos and specifications. The fields use the 'upload_to' parameter to specify where files should be stored relative to MEDIA_ROOT.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models


class Car(models.Model):
    name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=5, decimal_places=2)
    photo = models.ImageField(upload_to="cars")
    specs = models.FileField(upload_to="specs")
```

----------------------------------------

TITLE: Using HTML Formatting in Django ModelAdmin list_display
DESCRIPTION: Example showing how to use format_html to display formatted HTML in the admin list_display, customizing the display of a model's data with color formatting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.db import models
from django.utils.html import format_html


class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    color_code = models.CharField(max_length=6)

    @admin.display
    def colored_name(self):
        return format_html(
            '<span style="color: #{};">{} {}</span>',
            self.color_code,
            self.first_name,
            self.last_name,
        )


class PersonAdmin(admin.ModelAdmin):
    list_display = ["first_name", "last_name", "colored_name"]
```

----------------------------------------

TITLE: Setting Session Engine for Database-Backed Sessions
DESCRIPTION: Configuration setting to enable database-backed sessions in Django. This requires adding the sessions app to INSTALLED_APPS and running migrations to create the database table.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
'django.contrib.sessions'
```

----------------------------------------

TITLE: Modifying Session Data in Django Tests
DESCRIPTION: Demonstrates how to modify the session in a Django test. The session must be stored in a variable before modification since a new SessionStore is created on each access.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
def test_something(self):
    session = self.client.session
    session["somekey"] = "test"
    session.save()
```

----------------------------------------

TITLE: Creating an Asynchronous View in Django
DESCRIPTION: Example of an asynchronous view using Python's async/await syntax. It returns the current date and time as an HTML response, similar to the synchronous example but using async def.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/views.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
import datetime
from django.http import HttpResponse


async def current_datetime(request):
    now = datetime.datetime.now()
    html = '<html lang="en"><body>It is now %s.</body></html>' % now
    return HttpResponse(html)
```

----------------------------------------

TITLE: Specifying Widgets for Model Formset in Python
DESCRIPTION: Demonstrates how to specify custom widgets for fields in a model formset factory.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_24

LANGUAGE: pycon
CODE:
```
>>> AuthorFormSet = modelformset_factory(
...     Author,
...     fields=["name", "title"],
...     widgets={"name": Textarea(attrs={"cols": 80, "rows": 20})},
... )
```

----------------------------------------

TITLE: Rendering Django Form as HTML Paragraphs
DESCRIPTION: Shows the output of the as_p() method, which renders form fields as a series of <p> tags.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_23

LANGUAGE: HTML
CODE:
```
<p><label for="id_subject">Subject:</label> <input id="id_subject" type="text" name="subject" maxlength="100" required></p>
<p><label for="id_message">Message:</label> <input type="text" name="message" id="id_message" required></p>
<p><label for="id_sender">Sender:</label> <input type="email" name="sender" id="id_sender" required></p>
<p><label for="id_cc_myself">Cc myself:</label> <input type="checkbox" name="cc_myself" id="id_cc_myself"></p>
```

----------------------------------------

TITLE: Creating Model Formset Factory in Python
DESCRIPTION: Demonstrates how to create a model formset factory for the Author model, specifying fields to include or exclude.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_20

LANGUAGE: pycon
CODE:
```
>>> from django.forms import modelformset_factory
>>> from myapp.models import Author
>>> AuthorFormSet = modelformset_factory(Author, fields=["name", "title"])

>>> AuthorFormSet = modelformset_factory(Author, exclude=["birth_date"])
```

----------------------------------------

TITLE: Documenting Django Model Example - Python
DESCRIPTION: Example showing how to properly document a Django model class with docstrings and help_text. The example demonstrates documenting model relationships and field descriptions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/admindocs.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class BlogEntry(models.Model):
    """
    Stores a single blog entry, related to :model:`blog.Blog` and
    :model:`auth.User`.
    """

    slug = models.SlugField(help_text="A short label, generally used in URLs.")
    author = models.ForeignKey(
        User,
        models.SET_NULL,
        blank=True,
        null=True,
    )
    blog = models.ForeignKey(Blog, models.CASCADE)
    ...

    def publish(self):
        """Makes the blog entry live on the site."""
        ...
```

----------------------------------------

TITLE: Configuring Class Attributes via as_view() in Django URLconf
DESCRIPTION: This snippet shows an alternative way to configure class attributes for a class-based view. The `greeting` attribute of `GreetingView` is overridden by passing it as a keyword argument to the `as_view()` method directly within the URL configuration (`urls.py`). This configuration happens once when URLs are imported.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
urlpatterns = [
    path("about/", GreetingView.as_view(greeting="G'day")),
]
```

----------------------------------------

TITLE: Calculating Average Price with Custom Alias using aggregate() (pycon)
DESCRIPTION: Demonstrates how to assign a custom name ('average_price') to the result of an aggregation function (`Avg("price")`) within the `aggregate()` clause. This provides a more descriptive key in the resulting dictionary. Requires importing `Avg` from `django.db.models`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_5

LANGUAGE: pycon
CODE:
```
>>> Book.objects.aggregate(average_price=Avg("price"))
{'average_price': 34.35}
```

----------------------------------------

TITLE: Customizing Foreign Key Fields in Django ModelAdmin
DESCRIPTION: This method demonstrates how to override the default formfield for foreign key fields in the admin interface, filtering the queryset based on the current user.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_50

LANGUAGE: python
CODE:
```
class MyModelAdmin(admin.ModelAdmin):
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        if db_field.name == "car":
            kwargs["queryset"] = Car.objects.filter(owner=request.user)
        return super().formfield_for_foreignkey(db_field, request, **kwargs)
```

----------------------------------------

TITLE: Running Django Tests with Coverage
DESCRIPTION: This command runs Django tests using coverage.py to measure code coverage. It executes tests and collects coverage data for the specified source files.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_22

LANGUAGE: shell
CODE:
```
coverage run --source='.' manage.py test myapp
```

----------------------------------------

TITLE: Creating Independent QuerySets with Django Filters
DESCRIPTION: This example illustrates that each refined QuerySet is independent and not bound to previous QuerySets. It creates three separate QuerySets by applying different filters to the same base QuerySet.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
>>> q1 = Entry.objects.filter(headline__startswith="What")
>>> q2 = q1.exclude(pub_date__gte=datetime.date.today())
>>> q3 = q1.filter(pub_date__gte=datetime.date.today())
```

----------------------------------------

TITLE: Configuring Installed Apps for GeoDjango Project
DESCRIPTION: Modifies the INSTALLED_APPS setting in settings.py to include necessary Django modules and the custom 'world' application for a GeoDjango project.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    "world",
]
```

----------------------------------------

TITLE: Rendering Default Django Form HTML Output
DESCRIPTION: Shows the default HTML output when rendering a Django form, including input fields, labels, and attributes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_21

LANGUAGE: HTML
CODE:
```
<div><label for="id_message">Message:</label><input type="text" name="message" value="Hi there" required id="id_message"></div>
<div><label for="id_sender">Sender:</label><input type="email" name="sender" value="foo@example.com" required id="id_sender"></div>
<div><label for="id_cc_myself">Cc myself:</label><input type="checkbox" name="cc_myself" id="id_cc_myself" checked></div>
```

----------------------------------------

TITLE: Function-Based View with CSRF-Protected File Upload
DESCRIPTION: Implementation of a file upload view using function-based approach with CSRF protection, showing how to modify upload handlers safely.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.views.decorators.csrf import csrf_exempt, csrf_protect


@csrf_exempt
def upload_file_view(request):
    request.upload_handlers.insert(0, ProgressBarUploadHandler(request))
    return _upload_file_view(request)


@csrf_protect
def _upload_file_view(request):
    # Process request
    ...
```

----------------------------------------

TITLE: Translation with Variables in Django
DESCRIPTION: Shows how to use translation with variables in Django. The variable containing the translatable string is passed to the translation function.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
def my_view(request):
    sentence = "Welcome to my site."
    output = _(sentence)
    return HttpResponse(output)
```

----------------------------------------

TITLE: Applying Decorators to Synchronous and Asynchronous Django Views in Python
DESCRIPTION: Shows how standard Django view decorators, like `@never_cache`, can be applied to both traditional synchronous (`def my_sync_view`) and asynchronous (`async def my_async_view`) view functions in Python. This illustrates that many existing Django decorators are compatible with the async view system.
SOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.views.decorators.cache import never_cache


@never_cache
def my_sync_view(request): ...


@never_cache
async def my_async_view(request): ...
```

----------------------------------------

TITLE: Evaluating a Django QuerySet in a Boolean Context in Python
DESCRIPTION: Shows that using a QuerySet within a boolean context, such as an `if` statement, triggers its evaluation. The query executes to determine if at least one result exists, making the QuerySet evaluate to `True` if results are found, `False` otherwise.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_3

LANGUAGE: python
CODE:
```
if Entry.objects.filter(headline="Test"):
    print("There is at least one Entry with the headline Test")
```

----------------------------------------

TITLE: Using values() with Registered Lookups (Transforms) Python
DESCRIPTION: Demonstrates using values() with a registered lookup (transform) applied to a field name (e.g., 'name__lower'). The transform modifies the field's value before including it in the result dictionary.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_19

LANGUAGE: Python
CODE:
```
>>> from django.db.models import CharField
>>> from django.db.models.functions import Lower
>>> CharField.register_lookup(Lower)
>>> Blog.objects.values("name__lower")
```

----------------------------------------

TITLE: Running Django Application with Gunicorn
DESCRIPTION: This command starts the Gunicorn server process for a Django project. It runs one process with one thread, listening on 127.0.0.1:8000. The command should be executed from the same directory as the manage.py file to ensure the project is on the Python path.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/gunicorn.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
gunicorn myproject.wsgi
```

----------------------------------------

TITLE: Defining Django Model with Custom Primary Key (Python)
DESCRIPTION: Example of a Django model where a specific field (name) is explicitly set as the primary key using primary_key=True, overriding the default auto-incrementing primary key.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_8

LANGUAGE: Python
CODE:
```
from django.db import models


class Fruit(models.Model):
    name = models.CharField(max_length=100, primary_key=True)
```

----------------------------------------

TITLE: Handling File Uploads in Django Forms
DESCRIPTION: This section demonstrates how to handle file uploads in Django forms. It includes examples of form HTML, binding file data to a form, and using request.FILES in views.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_44

LANGUAGE: html
CODE:
```
<form enctype="multipart/form-data" method="post" action="/foo/">
```

LANGUAGE: python
CODE:
```
# Bound form with an image field
>>> from django.core.files.uploadedfile import SimpleUploadedFile
>>> data = {
...     "subject": "hello",
...     "message": "Hi there",
...     "sender": "foo@example.com",
...     "cc_myself": True,
... }
>>> file_data = {"mugshot": SimpleUploadedFile("face.jpg", b"file data")}
>>> f = ContactFormWithMugshot(data, file_data)
```

LANGUAGE: python
CODE:
```
# Bound form with an image field, data from the request
>>> f = ContactFormWithMugshot(request.POST, request.FILES)
```

----------------------------------------

TITLE: Default Password Hashers Configuration in Django (Python)
DESCRIPTION: Shows the default value for the `PASSWORD_HASHERS` setting in Django. This list defines the supported password hashing algorithms, with the first entry (PBKDF2PasswordHasher) being used for storing new passwords. Other entries allow verification of passwords hashed with older or different algorithms.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]
```

----------------------------------------

TITLE: Prefetching Related Objects Asynchronously with Django ORM in Python
DESCRIPTION: Shows the usage of prefetch_related_objects() and its asynchronous variant aprefetch_related_objects() for prefetching related fields on an iterable of model instances. This is useful when working with model lists not obtained from querysets, such as cached instances. The input includes a list of Restaurant instances and a related lookup string, with the output being pre-populated related objects to reduce queries when accessing them.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_126

LANGUAGE: pycon
CODE:
```
>>> from django.db.models import prefetch_related_objects
>>> restaurants = fetch_top_restaurants_from_cache()  # A list of Restaurants
>>> prefetch_related_objects(restaurants, "pizzas__toppings")
```

----------------------------------------

TITLE: Applying Django Auth Database Migrations (Shell)
DESCRIPTION: Executes the Django management command `manage.py migrate` to create or update database tables required by the authentication system (`django.contrib.auth`) and content types system (`django.contrib.contenttypes`). This command applies migrations to create tables for users, groups, permissions, and applies default permissions for models in installed apps.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/index.txt#2025-04-23_snippet_2

LANGUAGE: Shell
CODE:
```
manage.py migrate
```

----------------------------------------

TITLE: Caching Template Fragment with Custom Cache Backend in Django
DESCRIPTION: Demonstrates how to specify a custom cache backend for a template fragment using the 'using' keyword argument.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_28

LANGUAGE: html+django
CODE:
```
{% cache 300 local-thing ...  using="localcache" %}
```

----------------------------------------

TITLE: Using format_lazy for String Formatting with Lazy Translations
DESCRIPTION: Shows how to use format_lazy() to perform string formatting with lazy translation objects, ensuring that translations are only processed when the resulting string is used.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_16

LANGUAGE: Python
CODE:
```
from django.utils.text import format_lazy
from django.utils.translation import gettext_lazy

...
name = gettext_lazy("John Lennon")
instrument = gettext_lazy("guitar")
result = format_lazy("{name}: {instrument}", name=name, instrument=instrument)
```

----------------------------------------

TITLE: Using vary_on_headers Decorator in Django
DESCRIPTION: Demonstrates how to use the vary_on_headers decorator to instruct caching mechanisms to store separate versions of the page based on specified request headers. This example makes the cache vary based on the User-Agent header.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_39

LANGUAGE: python
CODE:
```
from django.views.decorators.vary import vary_on_headers


@vary_on_headers("User-Agent")
def my_view(request): ...
```

----------------------------------------

TITLE: Implementing Asynchronous Class-Based View in Django (Python)
DESCRIPTION: Provides an example of making a Django class-based view asynchronous by defining an async def get method. Utilizes Python's asyncio for IO-bound behavior. Requires Django and Python 3.7+ for async/await features. Inputs are HTTP GET requests; outputs are HTTP responses after performing async logic (e.g., simulated with asyncio.sleep). View must not mix sync (def) and async (async def) handlers within the class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/index.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
import asyncio
from django.http import HttpResponse
from django.views import View


class AsyncView(View):
    async def get(self, request, *args, **kwargs):
        # Perform io-blocking view logic using await, sleep for example.
        await asyncio.sleep(1)
        return HttpResponse("Hello async world!")
```

----------------------------------------

TITLE: Defining Django Model with IntegerRangeField in Python
DESCRIPTION: Defines a Django model named `Event` using the ORM. It includes a `CharField` for `name`, an `IntegerRangeField` named `ages` provided by `django.contrib.postgres.fields` to store integer ranges, and a standard `DateTimeField` for `start`. The `__str__` method returns the event name.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
from django.contrib.postgres.fields import IntegerRangeField
from django.db import models


class Event(models.Model):
    name = models.CharField(max_length=200)
    ages = IntegerRangeField()
    start = models.DateTimeField()

    def __str__(self):
        return self.name
```

----------------------------------------

TITLE: Applying CSRF Protection to Cached Views in Python
DESCRIPTION: Shows how to use the csrf_protect decorator with cache_page for views that require CSRF protection and caching.
SOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.views.decorators.cache import cache_page
from django.views.decorators.csrf import csrf_protect


@cache_page(60 * 15)
@csrf_protect
def my_view(request): ...
```

----------------------------------------

TITLE: Dynamic Ordering in Django ModelAdmin
DESCRIPTION: Implementation of get_ordering method to provide different ordering of list results based on the current user's permissions, showing more advanced ordering for superusers.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_42

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    def get_ordering(self, request):
        if request.user.is_superuser:
            return ["name", "rank"]
        else:
            return ["name"]
```

----------------------------------------

TITLE: Creating and Querying Objects with SQL NULL vs JSON null in Django JSONField
DESCRIPTION: Demonstrates the difference between SQL NULL and JSON null in JSONField and how to query for each. SQL NULL is created with Python None, while JSON null is created with Value(None, JSONField()).
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
>>> Dog.objects.create(name="Max", data=None)  # SQL NULL.
<Dog: Max>
>>> Dog.objects.create(name="Archie", data=Value(None, JSONField()))  # JSON null.
<Dog: Archie>
>>> Dog.objects.filter(data=None)
<QuerySet [<Dog: Archie>]>
>>> Dog.objects.filter(data=Value(None, JSONField()))
<QuerySet [<Dog: Archie>]>
>>> Dog.objects.filter(data__isnull=True)
<QuerySet [<Dog: Max>]>
>>> Dog.objects.filter(data__isnull=False)
<QuerySet [<Dog: Archie>]>
```

----------------------------------------

TITLE: Configuring URLs for Django's set_language view
DESCRIPTION: Shows how to include Django's built-in set_language view in URLconf to enable language switching functionality.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_57

LANGUAGE: python
CODE:
```
path("i18n/", include("django.conf.urls.i18n")),
```

----------------------------------------

TITLE: DateField Truncation Example in Django
DESCRIPTION: Shows how to use TruncYear and TruncMonth with DateFields, including timezone handling.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> from datetime import UTC, datetime
>>> from django.db.models import Count
>>> from django.db.models.functions import TruncMonth, TruncYear
>>> start1 = datetime(2014, 6, 15, 14, 30, 50, 321, tzinfo=UTC)
>>> start2 = datetime(2015, 6, 15, 14, 40, 2, 123, tzinfo=UTC)
>>> start3 = datetime(2015, 12, 31, 17, 5, 27, 999, tzinfo=UTC)
>>> Experiment.objects.create(start_datetime=start1, start_date=start1.date())
>>> Experiment.objects.create(start_datetime=start2, start_date=start2.date())
>>> Experiment.objects.create(start_datetime=start3, start_date=start3.date())
>>> experiments_per_year = (
...     Experiment.objects.annotate(year=TruncYear("start_date"))
...     .values("year")
...     .annotate(experiments=Count("id"))
... )
```

----------------------------------------

TITLE: Defining Grouped Model Choices with List of Tuples (Python)
DESCRIPTION: Illustrates an alternative method for defining grouped choices using a list of 2-tuples. Each tuple represents either a group (containing a name and a nested sequence of choice tuples) or a single choice (containing the value and label). This structure is also accepted by the `choices` argument.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_5

LANGUAGE: Python
CODE:
```
MEDIA_CHOICES = [
    (
        "Audio",
        (
            ("vinyl", "Vinyl"),
            ("cd", "CD"),
        ),
    ),
    (
        "Video",
        (
            ("vhs", "VHS Tape"),
            ("dvd", "DVD"),
        ),
    ),
    ("unknown", "Unknown"),
]
```

----------------------------------------

TITLE: Annotating QuerySet with RawSQL Expression - Django ORM - Python
DESCRIPTION: Demonstrates the usage of Django's RawSQL expression to annotate a QuerySet with the result of a custom SQL subquery. Requires Django and an active database connection. The key parameter 'param' is injected securely into the query, and the code should be used with caution as it may hurt portability between databases and break the DRY principle. Returns a QuerySet with an extra annotated field named 'val', where each row contains the value returned by the subquery.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
>>> queryset.annotate(val=RawSQL("select col from sometable where othercol = %s", (param,)))
```

----------------------------------------

TITLE: Proper Introspection of pk_fields for Single and Composite Key Models - Pycon
DESCRIPTION: Demonstrates retrieving the fields composing a model's primary key using the _meta.pk_fields attribute. Shows output for both a model with a single-field primary key (Product) and a model with a composite primary key (OrderLineItem). For composite PKs, this attribute lists all participating fields (e.g., ForeignKeys). This is the recommended approach for composite key support from Django 5.2 onward.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_12

LANGUAGE: pycon
CODE:
```
>>> Product._meta.pk_fields
[<django.db.models.fields.AutoField: id>]
>>> OrderLineItem._meta.pk_fields
[
    <django.db.models.fields.ForeignKey: product>,
    <django.db.models.fields.ForeignKey: order>
]
```

----------------------------------------

TITLE: Implementing YearArchiveView
DESCRIPTION: Custom YearArchiveView implementation for Article model with specific configuration options.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.views.generic.dates import YearArchiveView

from myapp.models import Article


class ArticleYearArchiveView(YearArchiveView):
    queryset = Article.objects.all()
    date_field = "pub_date"
    make_object_list = True
    allow_future = True
```

----------------------------------------

TITLE: Using Prefetch with Deferred Fields for Performance Optimization
DESCRIPTION: Shows how to use performance optimization techniques like deferred fields with Prefetch. This example only loads the name field of the Pizza model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_52

LANGUAGE: python
CODE:
```
>>> queryset = Pizza.objects.only("name")
>>>
>>> restaurants = Restaurant.objects.prefetch_related(
...     Prefetch("best_pizza", queryset=queryset)
... )
```

----------------------------------------

TITLE: Loading Multiple Fixtures in a Single Command (Shell)
DESCRIPTION: Shows how to load multiple fixtures ('mammals', 'birds', 'insects') at once in a specified order using django-admin loaddata. Each argument should correspond to a fixture label, and ordering is strictly followed. Inputs: one or more fixture base names; Output: database loaded sequentially with each set of fixture data. Limitations: constraints may cause errors if dependencies across fixtures are violated.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
django-admin loaddata mammals birds insects
```

----------------------------------------

TITLE: Generating Messages with Specific Locales - Shell
DESCRIPTION: Examples demonstrating the use of the `django-admin makemessages` command with the `--locale` (`-l`) and `--exclude` (`-x`) options. Shows how to process one or multiple locales and how to exclude specific locales from processing.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_18

LANGUAGE: Shell
CODE:
```
django-admin makemessages --locale=pt_BR
```

LANGUAGE: Shell
CODE:
```
django-admin makemessages --locale=pt_BR --locale=fr
```

LANGUAGE: Shell
CODE:
```
django-admin makemessages -l pt_BR
```

LANGUAGE: Shell
CODE:
```
django-admin makemessages -l pt_BR -l fr
```

LANGUAGE: Shell
CODE:
```
django-admin makemessages --exclude=pt_BR
```

LANGUAGE: Shell
CODE:
```
django-admin makemessages --exclude=pt_BR --exclude=fr
```

LANGUAGE: Shell
CODE:
```
django-admin makemessages -x pt_BR
```

LANGUAGE: Shell
CODE:
```
django-admin makemessages -x pt_BR -x fr
```

----------------------------------------

TITLE: Creating a Django FileResponse from a Binary File
DESCRIPTION: Demonstrates the basic usage of Django's `FileResponse` class in a Python console environment (`pycon`). It imports `FileResponse` and creates an instance by passing an open file handle (`open("myfile.png", "rb")`) representing a binary file. This response type is optimized for serving files.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_25

LANGUAGE: pycon
CODE:
```
>>> from django.http import FileResponse
>>> response = FileResponse(open("myfile.png", "rb"))
```

----------------------------------------

TITLE: Custom Header RemoteUserMiddleware Implementation
DESCRIPTION: Example of extending RemoteUserMiddleware to use a custom HTTP header instead of REMOTE_USER for authentication.
SOURCE: https://github.com/django/django/blob/main/docs/howto/auth-remote-user.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.contrib.auth.middleware import RemoteUserMiddleware


class CustomHeaderRemoteUserMiddleware(RemoteUserMiddleware):
    header = "HTTP_AUTHUSER"
```

----------------------------------------

TITLE: Using Foreign Key Values Directly
DESCRIPTION: Shows how to access foreign key values directly instead of retrieving the whole related object, reducing unnecessary object instantiation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
entry.blog_id
```

LANGUAGE: python
CODE:
```
entry.blog.id
```

----------------------------------------

TITLE: Defining Custom Template Tag Function in Python
DESCRIPTION: This snippet shows the structure of a custom template tag function that accepts arguments and keyword arguments. It demonstrates how to handle the passed parameters within the function.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
def my_tag(a, b, *args, **kwargs):
    warning = kwargs["warning"]
    profile = kwargs["profile"]
    ...
    return ...
```

----------------------------------------

TITLE: Django Admin Display Decorator Usage
DESCRIPTION: Demonstrates how to use the admin.display decorator to customize the display of model methods in the admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.contrib import admin


class Question(models.Model):
    # ...
    @admin.display(
        boolean=True,
        ordering="pub_date",
        description="Published recently?",
    )
    def was_published_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=1) <= self.pub_date <= now
```

----------------------------------------

TITLE: Configuring Inline Admin for Foreign Key Relationship
DESCRIPTION: Sets up an admin interface with FriendshipInline to display related Friendship objects on the Person admin page. The explicit fk_name parameter specifies which foreign key to use for the inline.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_68

LANGUAGE: python
CODE:
```
from django.contrib import admin
from myapp.models import Friendship, Person


class FriendshipInline(admin.TabularInline):
    model = Friendship
    fk_name = "to_person"


class PersonAdmin(admin.ModelAdmin):
    inlines = [
        FriendshipInline,
    ]


admin.site.register(Person, PersonAdmin)
```

----------------------------------------

TITLE: Creating Functional Unique Constraints with Expressions in Python
DESCRIPTION: Demonstrates creating a `UniqueConstraint` based on a database function or expression using the positional `*expressions` argument. This example enforces uniqueness on the lowercased 'name' field (in descending order) combined with the 'category' field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
from django.db.models import UniqueConstraint
from django.db.models.functions import Lower

UniqueConstraint(Lower("name").desc(), "category", name="unique_lower_name_category")
```

----------------------------------------

TITLE: Using Multiple Formsets in a Django View
DESCRIPTION: Illustrates how to use multiple formsets in a single Django view by using prefixes to avoid name clashing. It shows the creation and processing of two different formsets.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
from django.forms import formset_factory
from django.shortcuts import render
from myapp.forms import ArticleForm, BookForm

def manage_articles(request):
    ArticleFormSet = formset_factory(ArticleForm)
    BookFormSet = formset_factory(BookForm)
    if request.method == "POST":
        article_formset = ArticleFormSet(request.POST, request.FILES, prefix="articles")
        book_formset = BookFormSet(request.POST, request.FILES, prefix="books")
        if article_formset.is_valid() and book_formset.is_valid():
            # do something with the cleaned_data on the formsets.
            pass
    else:
        # Handle GET request
```

----------------------------------------

TITLE: Using SearchVector for Multi-Field Full Text Search in Django
DESCRIPTION: Shows how to use SearchVector to search across multiple fields, including related models.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from django.contrib.postgres.search import SearchVector
>>> Entry.objects.annotate(
...     search=SearchVector("body_text", "blog__tagline"),
... ).filter(search="Cheese")
[<Entry: Cheese on Toast recipes>, <Entry: Pizza Recipes>]
```

----------------------------------------

TITLE: Customizing Existing AppConfig
DESCRIPTION: Example showing how to customize an existing application's configuration by subclassing its AppConfig.
SOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
# anthology/apps.py

from rock_n_roll.apps import RockNRollConfig


class JazzManoucheConfig(RockNRollConfig):
    verbose_name = "Jazz Manouche"


# anthology/settings.py

INSTALLED_APPS = [
    "anthology.apps.JazzManoucheConfig",
    # ...
]
```

----------------------------------------

TITLE: Exempting a View from CSRF Protection in Django
DESCRIPTION: This snippet demonstrates how to use the csrf_exempt decorator to mark a view as being exempt from CSRF protection.
SOURCE: https://github.com/django/django/blob/main/docs/ref/csrf.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt


@csrf_exempt
def my_view(request):
    return HttpResponse("Hello world")
```

----------------------------------------

TITLE: Customizing Queryset for Model Formset in Python
DESCRIPTION: Demonstrates how to override the default queryset used by a model formset, either by passing a queryset argument or by creating a custom formset class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_22

LANGUAGE: pycon
CODE:
```
>>> formset = AuthorFormSet(queryset=Author.objects.filter(name__startswith="O"))
```

LANGUAGE: python
CODE:
```
from django.forms import BaseModelFormSet
from myapp.models import Author


class BaseAuthorFormSet(BaseModelFormSet):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.queryset = Author.objects.filter(name__startswith="O")
```

LANGUAGE: pycon
CODE:
```
>>> AuthorFormSet = modelformset_factory(
...     Author, fields=["name", "title"], formset=BaseAuthorFormSet
... )
```

----------------------------------------

TITLE: Accessing Individual BoundField Objects in Django Forms
DESCRIPTION: Examples of how to access individual fields in a Django form as BoundField objects using dictionary syntax and iteration.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_33

LANGUAGE: python
CODE:
```
>>> form = ContactForm()
>>> print(form["subject"])
<input id="id_subject" type="text" name="subject" maxlength="100" required>

>>> form = ContactForm()
>>> for boundfield in form:
...     print(boundfield)
...
<input id="id_subject" type="text" name="subject" maxlength="100" required>
<input type="text" name="message" id="id_message" required>
<input type="email" name="sender" id="id_sender" required>
<input type="checkbox" name="cc_myself" id="id_cc_myself">
```

----------------------------------------

TITLE: Setting Date/Time Format in Django
DESCRIPTION: These settings control the formatting of dates and times in a Django application. `DATE_FORMAT` sets the default format for displaying dates, and `DATE_INPUT_FORMATS` defines the accepted input formats for date fields.  `DATETIME_FORMAT` sets the format for datetime fields and `DATETIME_INPUT_FORMATS` controls acceptable inputs.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_13

LANGUAGE: text
CODE:
```
Default: ``'N j, Y'`` (e.g. ``Feb. 4, 2003``)

The default formatting to use for displaying date fields in any part of the
system. Note that the locale-dictated format has higher precedence and will be
applied instead. See :tfilter:`allowed date format strings <date>`.
```

LANGUAGE: text
CODE:
```
Default::

    [
        "%Y-%m-%d",  # '2006-10-25'
        "%m/%d/%Y",  # '10/25/2006'
        "%m/%d/%y",  # '10/25/06'
        "%b %d %Y",  # 'Oct 25 2006'
        "%b %d, %Y",  # 'Oct 25, 2006'
        "%d %b %Y",  # '25 Oct 2006'
        "%d %b, %Y",  # '25 Oct, 2006'
        "%B %d %Y",  # 'October 25 2006'
        "%B %d, %Y",  # 'October 25, 2006'
        "%d %B %Y",  # '25 October 2006'
        "%d %B, %Y",  # '25 October, 2006'
    ]

A list of formats that will be accepted when inputting data on a date field.
Formats will be tried in order, using the first valid one. Note that these
format strings use Python's :ref:`datetime module syntax
<strftime-strptime-behavior>`, not the format strings from the :tfilter:`date`
template filter.

The locale-dictated format has higher precedence and will be applied instead.
```

LANGUAGE: text
CODE:
```
Default: ``'N j, Y, P'`` (e.g. ``Feb. 4, 2003, 4 p.m.``)

The default formatting to use for displaying datetime fields in any part of the
system. Note that the locale-dictated format has higher precedence and will be
applied instead. See :tfilter:`allowed date format strings <date>`.
```

LANGUAGE: text
CODE:
```
Default::

    [
        "%Y-%m-%d %H:%M:%S",  # '2006-10-25 14:30:59'
        "%Y-%m-%d %H:%M:%S.%f",  # '2006-10-25 14:30:59.000200'
        "%Y-%m-%d %H:%M",  # '2006-10-25 14:30'
        "%m/%d/%Y %H:%M:%S",  # '10/25/2006 14:30:59'
        "%m/%d/%Y %H:%M:%S.%f",  # '10/25/2006 14:30:59.000200'
        "%m/%d/%Y %H:%M",  # '10/25/2006 14:30'
        "%m/%d/%y %H:%M:%S",  # '10/25/06 14:30:59'
        "%m/%d/%y %H:%M:%S.%f",  # '10/25/06 14:30:59.000200'
        "%m/%d/%y %H:%M",  # '10/25/06 14:30'
    ]

A list of formats that will be accepted when inputting data on a datetime
field. Formats will be tried in order, using the first valid one. Note that
these format strings use Python's :ref:`datetime module syntax
<strftime-strptime-behavior>`, not the format strings from the :tfilter:`date`
template filter. Date-only formats are not included as datetime fields will
automatically try :setting:`DATE_INPUT_FORMATS` in last resort.

The locale-dictated format has higher precedence and will be applied instead.
```

----------------------------------------

TITLE: Using Cycle Tag for Alternating Values in a Loop (Django)
DESCRIPTION: Illustrates the basic usage of the `{% cycle %}` tag within a `{% for %}` loop to alternate between string literals ('row1', 'row2'). This is commonly used for applying alternating CSS classes to table rows or list items.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_4

LANGUAGE: html+django
CODE:
```
{% for o in some_list %}
    <tr class="{% cycle 'row1' 'row2' %}">
        ...
    </tr>
{% endfor %}
```

----------------------------------------

TITLE: Initializing a Formset with Data
DESCRIPTION: Shows how to initialize a formset with pre-existing data by passing a list of dictionaries to the initial parameter, which populates the first form and displays additional empty forms.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> import datetime
>>> from django.forms import formset_factory
>>> from myapp.forms import ArticleForm
>>> ArticleFormSet = formset_factory(ArticleForm, extra=2)
>>> formset = ArticleFormSet(
...     initial=[
...         {
...             "title": "Django is now open source",
...             "pub_date": datetime.date.today(),
...         }
...     ]
... )

>>> for form in formset:
...     print(form)
...
<div><label for="id_form-0-title">Title:</label><input type="text" name="form-0-title" value="Django is now open source" id="id_form-0-title"></div>
<div><label for="id_form-0-pub_date">Pub date:</label><input type="text" name="form-0-pub_date" value="2023-02-11" id="id_form-0-pub_date"></div>
<div><label for="id_form-1-title">Title:</label><input type="text" name="form-1-title" id="id_form-1-title"></div>
<div><label for="id_form-1-pub_date">Pub date:</label><input type="text" name="form-1-pub_date" id="id_form-1-pub_date"></div>
<div><label for="id_form-2-title">Title:</label><input type="text" name="form-2-title" id="id_form-2-title"></div>
<div><label for="id_form-2-pub_date">Pub date:</label><input type="text" name="form-2-pub_date" id="id_form-2-pub_date"></div>
```

----------------------------------------

TITLE: Filtered Book Annotation
DESCRIPTION: Example of combining filter and annotate to count authors for books with specific titles.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
from django.db.models import Avg, Count
Book.objects.filter(name__startswith="Django").annotate(num_authors=Count("authors"))
```

----------------------------------------

TITLE: Limiting Maximum Instantiated Forms with absolute_max
DESCRIPTION: Shows how to protect against memory exhaustion attacks by limiting the maximum number of forms that can be instantiated using the absolute_max parameter in formset_factory.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> from django.forms.formsets import formset_factory
>>> from myapp.forms import ArticleForm
>>> ArticleFormSet = formset_factory(ArticleForm, absolute_max=1500)
>>> data = {
...     "form-TOTAL_FORMS": "1501",
...     "form-INITIAL_FORMS": "0",
... }
>>> formset = ArticleFormSet(data)
>>> len(formset.forms)
1500
>>> formset.is_valid()
False
>>> formset.non_form_errors()
['Please submit at most 1000 forms.']
```

----------------------------------------

TITLE: Declaring Always-computed Model Fields with GeneratedField in Django - Python
DESCRIPTION: Demonstrates how to use Django 5.0's `GeneratedField` to create a model field whose value is always derived from other fields at the database level. Requires import of `F` expressions and a supporting database backend. Key parameters include `expression` (computation formula), `output_field` (type of computed field), and `db_persist` (whether to store computed value physically). Input: an instance of model Square; output: area is always the square of side. Limitations: Behavior and support may vary by backend.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
from django.db import models\nfrom django.db.models import F\n\n\nclass Square(models.Model):\n    side = models.IntegerField()\n    area = models.GeneratedField(\n        expression=F(\"side\") * F(\"side\"),\n        output_field=models.BigIntegerField(),\n        db_persist=True,\n    )
```

----------------------------------------

TITLE: Configuring Multiple Databases in Django Settings
DESCRIPTION: Example settings.py configuration defining two databases - a default PostgreSQL database and a MySQL database called 'users'. This shows how to set up database connections with different engines, credentials, and aliases.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
DATABASES = {
    "default": {
        "NAME": "app_data",
        "ENGINE": "django.db.backends.postgresql",
        "USER": "postgres_user",
        "PASSWORD": "s3krit",
    },
    "users": {
        "NAME": "user_data",
        "ENGINE": "django.db.backends.mysql",
        "USER": "mysql_user",
        "PASSWORD": "priv4te",
    },
}
```

----------------------------------------

TITLE: Popping Session Values (Sync)
DESCRIPTION: Example of retrieving and removing a value from the session using the pop method with a default fallback.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
fav_color = request.session.pop('fav_color', 'blue')
```

----------------------------------------

TITLE: Case-Insensitive Regex Filtering using `iregex` Lookup in Django (Python and SQL)
DESCRIPTION: Illustrates using the `__iregex` lookup for case-insensitive regular expression matching in Django QuerySets. Similar to `regex`, the specific syntax depends on the database backend. Shows a Python example and lists the corresponding SQL equivalents for MySQL, Oracle, PostgreSQL, and SQLite, highlighting the different ways case-insensitivity is achieved.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_124

LANGUAGE: Python
CODE:
```
Entry.objects.get(title__iregex=r"^(an?|the) +")
```

LANGUAGE: SQL
CODE:
```
SELECT ... WHERE title REGEXP '^(an?|the) +'; -- MySQL

SELECT ... WHERE REGEXP_LIKE(title, '^(an?|the) +', 'i'); -- Oracle

SELECT ... WHERE title ~* '^(an?|the) +'; -- PostgreSQL

SELECT ... WHERE title REGEXP '(?i)^(an?|the) +'; -- SQLite
```

----------------------------------------

TITLE: Creating a Custom Select Widget for ModelChoiceField in Django
DESCRIPTION: Example of a custom Select widget that adds data attributes to option elements based on model instance properties, used with ModelChoiceField.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
from django import forms


class ToppingSelect(forms.Select):
    def create_option(
        self, name, value, label, selected, index, subindex=None, attrs=None
    ):
        option = super().create_option(
            name, value, label, selected, index, subindex, attrs
        )
        if value:
            option["attrs"]["data-price"] = value.instance.price
        return option


class PizzaForm(forms.ModelForm):
    class Meta:
        model = Pizza
        fields = ["topping"]
        widgets = {"topping": ToppingSelect}
```

----------------------------------------

TITLE: Loading Custom Tag Libraries - HTML+Django Template - html+django
DESCRIPTION: Describes using the 'load' tag to import custom template tag and filter libraries, either entirely or selectively by specifying names. Requires that custom libraries are properly registered in Django. Inputs are library and tag/filter names; output is registration of new template behaviors available within the template file.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_23

LANGUAGE: html+django
CODE:
```
{% load somelibrary package.otherlibrary %}
```

LANGUAGE: html+django
CODE:
```
{% load foo bar from somelibrary %}
```

----------------------------------------

TITLE: Comparing Django Model Instances
DESCRIPTION: Shows how Django model instances are compared using the equality operator, which compares primary key values behind the scenes.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_45

LANGUAGE: python
CODE:
```
>>> some_entry == other_entry
>>> some_entry.id == other_entry.id
```

----------------------------------------

TITLE: Applying title Filter in Django Templates
DESCRIPTION: The title filter converts a string into titlecase by making words start with an uppercase character and the remaining characters lowercase.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_92

LANGUAGE: html+django
CODE:
```
{{ value|title }}
```

----------------------------------------

TITLE: Assigning a Custom Form to ModelAdmin Python
DESCRIPTION: This snippet shows how to assign a custom Django form (`MyArticleAdminForm`) to a `ModelAdmin` subclass (`ArticleAdmin`) using the `form` attribute. This allows for custom validation logic and form modifications specific to the admin interface for the associated model. The custom form must be a subclass of `django.forms.ModelForm`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_60

LANGUAGE: python
CODE:
```
class ArticleAdmin(admin.ModelAdmin):
    form = MyArticleAdminForm
```

----------------------------------------

TITLE: Using Email Backend as Context Manager
DESCRIPTION: Demonstrates how to use Django's email backend as a context manager to send multiple emails using the same connection.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.core import mail

with mail.get_connection() as connection:
    mail.EmailMessage(
        subject1,
        body1,
        from1,
        [to1],
        connection=connection,
    ).send()
    mail.EmailMessage(
        subject2,
        body2,
        from2,
        [to2],
        connection=connection,
    ).send()
```

----------------------------------------

TITLE: Using Related Field Lookups for List Filters in Django Admin
DESCRIPTION: Shows how to create list filters using related field lookups with the __ syntax in a Django ModelAdmin class.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.UserAdmin):
    list_filter = ["company__name"]
```

----------------------------------------

TITLE: Setting CSS Classes for Required and Error Fields in Django Forms - Python
DESCRIPTION: Demonstrates how to customize the styling of required and error fields in Django forms by setting the error_css_class and required_css_class class attributes. Requires the Django framework. Key parameters are error_css_class and required_css_class, which define CSS classes to be added to relevant form fields in the rendered HTML. Inputs are form data; outputs are HTML with proper class attributes attached to required/error fields and labels. This approach allows consistent styling for validation states and customization at the form or field level.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
from django import forms


class ContactForm(forms.Form):
    error_css_class = "error"
    required_css_class = "required"

    # ... and the rest of your fields here
```

----------------------------------------

TITLE: Checking Deployment Settings
DESCRIPTION: Shows how to run deployment-specific checks using the '--deploy' option, optionally pointing to a production settings module using '--settings'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_7

LANGUAGE: Console
CODE:
```
django-admin check --deploy --settings=production_settings
```

----------------------------------------

TITLE: Defining a Function-Based View Handling GET Requests in Django
DESCRIPTION: This snippet shows a simple Django function-based view. It checks if the incoming request method is GET using conditional branching (`if request.method == "GET"`) and returns a basic `HttpResponse` if it is. This illustrates the traditional way of handling different HTTP methods within a single function.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.http import HttpResponse


def my_view(request):
    if request.method == "GET":
        # <view logic>
        return HttpResponse("result")
```

----------------------------------------

TITLE: Configuring Django Static File Serving in Development - Python
DESCRIPTION: This code snippet appends a URL pattern to the Django application's urlpatterns list, enabling development-time serving of user-uploaded media files from MEDIA_ROOT using django.views.static.serve. It requires the Django framework and expects the settings.DEBUG flag and settings.MEDIA_ROOT to be configured. The route maps URLs starting with /media/ to the static file-serving view and should not be used in production deployments.
SOURCE: https://github.com/django/django/blob/main/docs/ref/views.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.urls import re_path
from django.views.static import serve

# ... the rest of your URLconf goes here ...

if settings.DEBUG:
    urlpatterns += [
        re_path(
            r"^media/(?P<path>.*)$",
            serve,
            {
                "document_root": settings.MEDIA_ROOT,
            },
        ),
    ]
```

----------------------------------------

TITLE: Using transaction context managers in Django 1.3
DESCRIPTION: Demonstrates how to use transaction management functions as context managers in Python 2.5 and above. This allows for cleaner and more Pythonic transaction handling.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
with transaction.autocommit():
    ...
```

----------------------------------------

TITLE: Using translate tag in Django templates
DESCRIPTION: Demonstrates how to use the {% translate %} tag to translate constant strings or variable content in Django templates.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_19

LANGUAGE: html+django
CODE:
```
<title>{% translate "This is the title." %}</title>
<title>{% translate myvar %}</title>
```

----------------------------------------

TITLE: Creating Custom AppConfig Class
DESCRIPTION: Example of creating a custom AppConfig class for a 'Rock n Roll' application with proper naming configuration.
SOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
# rock_n_roll/apps.py

from django.apps import AppConfig


class RockNRollConfig(AppConfig):
    name = "rock_n_roll"
    verbose_name = "Rock 'n' roll"
```

----------------------------------------

TITLE: Handling Client Disconnects in Asynchronous Django Views using Python
DESCRIPTION: Demonstrates how to catch the `asyncio.CancelledError` within an asynchronous Django view (`async def my_view`) using a try/except block. This handles cases where the client disconnects before the view finishes processing a potentially long-running request. Catching this specific error allows for necessary cleanup operations before re-raising the exception to ensure proper request termination.
SOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
async def my_view(request):
    try:
        # Do some work
        ...
    except asyncio.CancelledError:
        # Handle disconnect
        raise
```

----------------------------------------

TITLE: Custom Authentication Check in Django View
DESCRIPTION: Demonstrates a custom authentication check in a Django view function. This example checks if the user's email ends with a specific domain.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_22

LANGUAGE: Python
CODE:
```
from django.shortcuts import redirect

def my_view(request):
    if not request.user.email.endswith("@example.com"):
        return redirect("/login/?next=%s" % request.path)
    # ...
```

----------------------------------------

TITLE: Applying Filters to Template Blocks (Django)
DESCRIPTION: Demonstrates the `{% filter %}` tag, which applies one or more template filters to the entire block of content enclosed between `{% filter %}` and `{% endfilter %}`. In this example, the text content is first forcefully escaped (`force_escape`) and then converted to lowercase (`lower`).
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_14

LANGUAGE: html+django
CODE:
```
{% filter force_escape|lower %}
    This text will be HTML-escaped, and will appear in all lowercase.
{% endfilter %}
```

----------------------------------------

TITLE: Configuring ModelChoiceField with Default and Custom to_field_name in Django
DESCRIPTION: Examples showing how to configure ModelChoiceField with a default to_field_name (using primary key) and with a custom field name for option values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
# No custom to_field_name
field1 = forms.ModelChoiceField(queryset=...)
```

----------------------------------------

TITLE: Setting Default Primary Key Field in Django
DESCRIPTION: This setting, `DEFAULT_AUTO_FIELD`, specifies the default primary key field type for models that do not define a primary key. The current default is `django.db.models.AutoField`
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_16

LANGUAGE: text
CODE:
```
Default: ``'``:class:`django.db.models.AutoField`\ ``'``

Default primary key field type to use for models that don't have a field with
:attr:`primary_key=True <django.db.models.Field.primary_key>`.
```

----------------------------------------

TITLE: M2M Relationship Modification Example
DESCRIPTION: Demonstrates adding a topping to a pizza through the many-to-many relationship and shows the resulting signal arguments.
SOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> p = Pizza.objects.create(...)
>>> t = Topping.objects.create(...)
>>> p.toppings.add(t)
```

----------------------------------------

TITLE: Demonstrating Primary Key Change Behavior in Django (pycon)
DESCRIPTION: Illustrates that changing the primary key value of an existing Django model instance and saving it results in the creation of a new database object, rather than updating the original.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_9

LANGUAGE: pycon
CODE:
```
>>> fruit = Fruit.objects.create(name="Apple")
>>> fruit.name = "Pear"
>>> fruit.save()
>>> Fruit.objects.values_list("name", flat=True)
<QuerySet ['Apple', 'Pear']>
```

----------------------------------------

TITLE: URL Encoding Example in Django get_absolute_url Method
DESCRIPTION: Demonstrates safe URL construction with Unicode characters by using quote() and iri_to_uri() functions to properly encode non-ASCII characters in URLs
SOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from urllib.parse import quote
from django.utils.encoding import iri_to_uri

def get_absolute_url(self):
    url = "/person/%s/?x=0&y=0" % quote(self.location)
    return iri_to_uri(url)
```

----------------------------------------

TITLE: Django Test Client Redirect Following - Python
DESCRIPTION: Demonstrates following redirects and accessing the redirect chain using Django's test client.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> response = c.get("/redirect_me/", follow=True)
>>> response.redirect_chain
[('http://testserver/next/', 302), ('http://testserver/final/', 302)]
```

----------------------------------------

TITLE: Applying a Query Logger Wrapper and Reviewing the Log in Django (Python)
DESCRIPTION: This snippet demonstrates the instantiation and use of the QueryLogger class as a context-managed wrapper around arbitrary query-generating code (e.g., do_queries()). After exiting the context, the log entries are printed. This approach isolates query logging to critical code paths and avoids affecting unrelated parts of the application.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/instrumentation.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.db import connection

ql = QueryLogger()
with connection.execute_wrapper(ql):
    do_queries()
# Now we can print the log.
print(ql.queries)
```

----------------------------------------

TITLE: Adding Help Text to Django Form Fields
DESCRIPTION: Demonstrates using the `help_text` argument when defining fields in a Django `Form` (`HelpTextContactForm`). This text provides guidance to the user and is typically displayed next to the field in the rendered HTML, often within a specific CSS class like 'helptext'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_9

LANGUAGE: pycon
CODE:
```
>>> from django import forms
>>> class HelpTextContactForm(forms.Form):
...     subject = forms.CharField(max_length=100, help_text="100 characters max.")
...     message = forms.CharField()
...     sender = forms.EmailField(help_text="A valid email address, please.")
...     cc_myself = forms.BooleanField(required=False)
...
>>> f = HelpTextContactForm(auto_id=False)
>>> print(f)
<div>Subject:<div class="helptext">100 characters max.</div><input type="text" name="subject" maxlength="100" required></div>
<div>Message:<input type="text" name="message" required></div>
<div>Sender:<div class="helptext">A valid email address, please.</div><input type="email" name="sender" required></div>
<div>Cc myself:<input type="checkbox" name="cc_myself"></div>
```

----------------------------------------

TITLE: Implementing a Custom Django Template Filter with Auto-escaping
DESCRIPTION: This snippet demonstrates how to create a custom Django template filter that emphasizes the first character of a string. It handles auto-escaping properly by using the needs_autoescape flag and conditional_escape function.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
from django import template
from django.utils.html import conditional_escape
from django.utils.safestring import mark_safe

register = template.Library()


@register.filter(needs_autoescape=True)
def initial_letter_filter(text, autoescape=True):
    first, other = text[0], text[1:]
    if autoescape:
        esc = conditional_escape
    else:
        esc = lambda x: x
    result = "<strong>%s</strong>%s" % (esc(first), esc(other))
    return mark_safe(result)
```

----------------------------------------

TITLE: Using values() with Annotation Expressions Python
DESCRIPTION: Uses values() with a keyword argument to include an annotated expression in the result dictionaries. The expression, often using a database function like Lower(), is calculated and included with the specified keyword name as the dictionary key.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_18

LANGUAGE: Python
CODE:
```
>>> from django.db.models.functions import Lower
>>> Blog.objects.values(lower_name=Lower("name"))
```

----------------------------------------

TITLE: Author Detail View URL Configuration
DESCRIPTION: URL pattern setup for the custom author detail view
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.urls import path
from books.views import AuthorDetailView

urlpatterns = [
    path("authors/<int:pk>/", AuthorDetailView.as_view(), name="author-detail"),
]
```

----------------------------------------

TITLE: Deleting All Objects of a Model in Django
DESCRIPTION: Demonstrates the safer way to delete all objects of a model by explicitly requesting a complete queryset rather than using a method on the manager.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_50

LANGUAGE: python
CODE:
```
Entry.objects.all().delete()
```

----------------------------------------

TITLE: Disabling Actions in Django ModelAdmin
DESCRIPTION: Examples showing different ways to disable actions in Django admin, including global action disabling and model-specific configurations
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
# Globally disable delete selected
admin.site.disable_action("delete_selected")

# This ModelAdmin will not have delete_selected available
class SomeModelAdmin(admin.ModelAdmin):
    actions = ["some_other_action"]
    ...

# This one will
class AnotherModelAdmin(admin.ModelAdmin):
    actions = ["delete_selected", "a_third_action"]
    ...
```

----------------------------------------

TITLE: YearArchiveView URL Configuration
DESCRIPTION: URL pattern configuration for the yearly article archive view.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.urls import path

from myapp.views import ArticleYearArchiveView

urlpatterns = [
    path("<int:year>/", ArticleYearArchiveView.as_view(), name="article_year_archive"),
]
```

----------------------------------------

TITLE: Implementing Mixed Public/Private Caching with patch_cache_control
DESCRIPTION: Demonstrates how to conditionally set cache directives based on user authentication using patch_cache_control. Public entries are cached publicly, while authenticated user views are cached privately.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_45

LANGUAGE: python
CODE:
```
from django.views.decorators.cache import patch_cache_control
from django.views.decorators.vary import vary_on_cookie


@vary_on_cookie
def list_blog_entries_view(request):
    if request.user.is_anonymous:
        response = render_only_public_entries()
        patch_cache_control(response, public=True)
    else:
        response = render_private_and_public_entries(request.user)
        patch_cache_control(response, private=True)

    return response
```

----------------------------------------

TITLE: Author Model Definition
DESCRIPTION: Example model class showing field definitions for an Author entity with basic attributes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.db import models


class Author(models.Model):
    name = models.CharField(max_length=100)
    title = models.CharField(max_length=3)
    birth_date = models.DateField(blank=True, null=True)
```

----------------------------------------

TITLE: Using SQL AS Clauses with raw() to Map Fields
DESCRIPTION: Example showing how to use SQL's AS clauses to map fields from a query to model fields. This allows querying from tables with different field names than the model.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> Person.objects.raw(
...     """
...     SELECT first AS first_name,
...            last AS last_name,
...            bd AS birth_date,
...            pk AS id,
...     FROM some_other_table
...     """
... )
```

----------------------------------------

TITLE: Defining a Custom Field with Default Validators in Django - Python
DESCRIPTION: Defines a custom SlugField as a subclass of CharField in Django, assigning Django's built-in validate_slug to its default_validators. Shows how to associate field validation logic using validators to enforce character rules. Dependencies include django.core.validators and django.forms.CharField, with 'validate_slug' ensuring only valid slugs are permitted. Input is string data for the field, output validation errors raised if the check fails.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.core import validators
from django.forms import CharField


class SlugField(CharField):
    default_validators = [validators.validate_slug]
```

----------------------------------------

TITLE: Installing Argon2 Support for Django (Bash)
DESCRIPTION: Command to install the `argon2-cffi` library, which is required to use the Argon2 password hashing algorithm with Django. Using `django[argon2]` ensures compatibility with Django's specified version.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
python -m pip install django[argon2]
```

----------------------------------------

TITLE: Configuring Logging to Silence Specific Django Security Logger (Python)
DESCRIPTION: This Python dictionary snippet demonstrates how to customize Django's logging configuration within the `LOGGING` setting. It specifically shows how to silence messages from the `django.security.DisallowedHost` logger by directing its output to a `logging.NullHandler`. Setting `propagate` to `False` prevents these messages from being passed to parent loggers (like the root `django` logger). This pattern can be used to suppress unwanted log messages from specific sources.
SOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
LOGGING = {
    # ...
    "handlers": {
        "null": {
            "class": "logging.NullHandler",
        },
    },
    "loggers": {
        "django.security.DisallowedHost": {
            "handlers": ["null"],
            "propagate": False,
        },
    },
    # ...
}
```

----------------------------------------

TITLE: Defining Required Fields in Custom User Model for Django
DESCRIPTION: Example of defining REQUIRED_FIELDS in a custom user model, which specifies which fields will be prompted for when creating a superuser with the createsuperuser management command.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
class MyUser(AbstractBaseUser):
    ...
    date_of_birth = models.DateField()
    height = models.FloatField()
    ...
    REQUIRED_FIELDS = ["date_of_birth", "height"]
```

----------------------------------------

TITLE: Class-level Middleware Settings Modification in Django
DESCRIPTION: Demonstrates applying the modify_settings decorator at the class level to modify middleware settings for all test methods.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_38

LANGUAGE: python
CODE:
```
from django.test import TestCase, modify_settings


@modify_settings(
    MIDDLEWARE={
        "append": "django.middleware.cache.FetchFromCacheMiddleware",
        "prepend": "django.middleware.cache.UpdateCacheMiddleware",
    }
)
class MiddlewareTestCase(TestCase):
    def test_cache_middleware(self):
        response = self.client.get("/")
        # ...
```

----------------------------------------

TITLE: Running Django Tests in Bash
DESCRIPTION: These Bash commands demonstrate how to run Django tests for a specific module (shortcuts) and how to run the entire Django test suite.
SOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_4

LANGUAGE: Bash
CODE:
```
$ ./runtests.py shortcuts
```

LANGUAGE: Bash
CODE:
```
$ ./runtests.py
```

----------------------------------------

TITLE: Using the filesizeformat Filter in HTML+Django Template
DESCRIPTION: This snippet demonstrates the `filesizeformat` template filter. `{{ value|filesizeformat }}` takes a numeric value (representing bytes) and formats it into a human-readable string representing the file size, using units like KB, MB, etc. For example, if `value` is 123456789, the filter outputs `117.7 MB`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_4

LANGUAGE: html+django
CODE:
```
{{ value|filesizeformat }}
```

----------------------------------------

TITLE: Sending Mass Emails with Django send_mass_mail()
DESCRIPTION: Demonstrates how to send multiple emails efficiently using a single connection with send_mass_mail(). This example sends two different messages to two different sets of recipients.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
message1 = (
    "Subject here",
    "Here is the message",
    "from@example.com",
    ["first@example.com", "other@example.com"],
)
message2 = (
    "Another Subject",
    "Here is another message",
    "from@example.com",
    ["second@test.com"],
)
send_mass_mail((message1, message2), fail_silently=False)
```

----------------------------------------

TITLE: Registering Custom Filters in Django
DESCRIPTION: This code snippet shows how to register custom filters with Django's template library using both function and decorator syntax.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
register.filter("cut", cut)
register.filter("lower", lower)

@register.filter(name="cut")
def cut(value, arg):
    return value.replace(arg, "")

@register.filter
def lower(value):
    return value.lower()
```

----------------------------------------

TITLE: Using assertTemplateUsed as a Context Manager in Django Tests
DESCRIPTION: Demonstrates how to use the assertTemplateUsed method as a context manager to verify template usage during rendering operations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_41

LANGUAGE: python
CODE:
```
with self.assertTemplateUsed("index.html"):
    render_to_string("index.html")
with self.assertTemplateUsed(template_name="index.html"):
    render_to_string("index.html")
```

----------------------------------------

TITLE: Recommended Pluralization Approach in Django
DESCRIPTION: Demonstrates the recommended approach for handling pluralization in Django. This method works correctly across different languages with varying pluralization rules.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
text = ngettext(
    "There is %(count)d %(name)s object available.",
    "There are %(count)d %(name)s objects available.",
    count,
) % {
    "count": count,
    "name": Report._meta.verbose_name,
}
```

----------------------------------------

TITLE: Implementing a Context-aware Simple Django Template Tag
DESCRIPTION: This snippet shows how to create a simple Django template tag that accesses the current context. It uses the takes_context parameter to receive the context as an argument.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_9

LANGUAGE: Python
CODE:
```
@register.simple_tag(takes_context=True)
def current_time(context, format_string):
    timezone = context["timezone"]
    return your_get_current_time_method(timezone, format_string)
```

----------------------------------------

TITLE: Applying Lookups Directly in Django ORM Queries (Python)
DESCRIPTION: Shows usage of custom lookups (like LessThan) as direct query expressions or annotations within Django ORM. Requires Django ORM, model definitions (e.g., Book, F), and the custom lookup class. Accepts a left-hand side expression and a right-hand side value. Output is a filtered QuerySet or annotated QuerySet.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/lookups.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
Book.objects.filter(LessThan(F("word_count"), 7500))
```

LANGUAGE: python
CODE:
```
Book.objects.annotate(is_short_story=LessThan(F("word_count"), 7500))
```

----------------------------------------

TITLE: Registering Custom Lookups for Custom Model Fields (Django Python)
DESCRIPTION: This snippet illustrates the replacement pattern for custom model fields that previously implemented `get_prep_lookup()` or `get_db_prep_lookup()`. Instead of overriding those methods on the field, define a custom `Lookup` class (e.g., `MyFieldExact` inheriting from `Exact`) implementing the necessary preparation logic in its `get_prep_lookup()` method, and then register this lookup with the custom field using `MyField.register_lookup(MyFieldExact)`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.db.models import Field
from django.db.models.lookups import Exact


class MyField(Field): ...


class MyFieldExact(Exact):
    def get_prep_lookup(self):
        # do_custom_stuff_for_myfield
        ...


MyField.register_lookup(MyFieldExact)
```

----------------------------------------

TITLE: Copying Django Model Instances with Inheritance
DESCRIPTION: Demonstrates how to copy a Django model instance that uses inheritance by setting both pk and id to None in addition to the _state.adding flag.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_52

LANGUAGE: python
CODE:
```
class ThemeBlog(Blog):
    theme = models.CharField(max_length=200)


django_blog = ThemeBlog(name="Django", tagline="Django is easy", theme="python")
django_blog.save()  # django_blog.pk == 3

django_blog.pk = None
django_blog.id = None
django_blog._state.adding = True
django_blog.save()  # django_blog.pk == 4
```

----------------------------------------

TITLE: Logging All Database Queries with a Custom Wrapper Class in Django (Python)
DESCRIPTION: This snippet provides a complete Python class (QueryLogger) that can be used as a callable wrapper for Django's database query execution. The class logs every query's SQL, parameters, execution status, exceptions, and duration by appending structured metadata to its internal list. On instantiation and use with connection.execute_wrapper, it allows denormalized and programmatic inspection of all SQL executed in the wrapped scope. Requires Python's time.monotonic and Django database connection.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/instrumentation.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
import time


class QueryLogger:
    def __init__(self):
        self.queries = []

    def __call__(self, execute, sql, params, many, context):
        current_query = {"sql": sql, "params": params, "many": many}
        start = time.monotonic()
        try:
            result = execute(sql, params, many, context)
        except Exception as e:
            current_query["status"] = "error"
            current_query["exception"] = e
            raise
        else:
            current_query["status"] = "ok"
            return result
        finally:
            duration = time.monotonic() - start
            current_query["duration"] = duration
            self.queries.append(current_query)
```

----------------------------------------

TITLE: Loading Fixtures into the Database Using django-admin (Shell)
DESCRIPTION: Shows how to use the 'django-admin loaddata' management command to load serialized fixture data into the project's default database. Dependencies: Django installed and configured; referenced fixture files must exist and be accessible. Key parameter: <fixture label> specifies the base name of the fixture file (without extension if you want automatic type detection). Input: fixture label (required). Output: database populated with fixture's contents if loading succeeds. Limitations: errors occur if fixture not found or incompatible with serialization format.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
django-admin loaddata <fixture label>
```

----------------------------------------

TITLE: Configuring Django Redis Cache Backend
DESCRIPTION: Configuration for Redis cache backend selecting database 10 and setting a custom connection pool class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
        "OPTIONS": {
            "db": "10",
            "pool_class": "redis.BlockingConnectionPool",
        },
    }
}
```

----------------------------------------

TITLE: Defining Composite Primary Keys in Models - Django - Python
DESCRIPTION: Illustrates how to define a Django model with a composite primary key using the new CompositePrimaryKey class in Django 5.2. Dependencies include an up-to-date Django installation with support for CompositePrimaryKey, and this pattern is only valid with supported versions. The 'pk' attribute is assigned a composite of 'version' and 'name' fields. This snippet requires models to be migrated for schema changes to take effect, and limitations include compatibility only with supported database backends.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.2.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.db import models


class Release(models.Model):
    pk = models.CompositePrimaryKey("version", "name")
    version = models.IntegerField()
    name = models.CharField(max_length=20)
```

----------------------------------------

TITLE: Acquiring CSRF Token from Cookie in JavaScript
DESCRIPTION: Shows how to retrieve the CSRF token from the 'csrftoken' cookie using JavaScript, which is useful when CSRF_USE_SESSIONS and CSRF_COOKIE_HTTPONLY are False.
SOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}
const csrftoken = getCookie('csrftoken');
```

----------------------------------------

TITLE: Using querystring Tag in Django Templates
DESCRIPTION: The querystring tag adds or modifies parameters in the query string, replacing any existing values for specified keys. This snippet shows the basic usage of adding or changing query parameters.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_27

LANGUAGE: html+django
CODE:
```
{% querystring color="red" size="S" %}
```

----------------------------------------

TITLE: Rendering Paginated Book List with Publisher Context in Django Template (HTML+Django)
DESCRIPTION: Defines a Django template for displaying a publisher's name and a paginated list of their books. Assumes page_obj, paginator, and publisher are provided in the context by a corresponding view. The template extends base.html, loops through books in page_obj, and creates navigation links for pagination. Expected in conjunction with PublisherDetailView; assumes Bootstrap-compatible or standard HTML layout.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_3

LANGUAGE: html+django
CODE:
```
{% extends \"base.html\" %}\n\n{% block content %}\n    <h2>Publisher {{ publisher.name }}</h2>\n\n    <ol>\n      {% for book in page_obj %}\n        <li>{{ book.title }}</li>\n      {% endfor %}\n    </ol>\n\n    <div class=\"pagination\">\n        <span class=\"step-links\">\n            {% if page_obj.has_previous %}\n                <a href=\"?page={{ page_obj.previous_page_number }}\">previous</a>\n            {% endif %}\n\n            <span class=\"current\">\n                Page {{ page_obj.number }} of {{ paginator.num_pages }}.\n            </span>\n\n            {% if page_obj.has_next %}\n                <a href=\"?page={{ page_obj.next_page_number }}\">next</a>\n            {% endif %}\n        </span>\n    </div>\n{% endblock %}
```

----------------------------------------

TITLE: Using Coalesce Function with Django QuerySet
DESCRIPTION: Example showing how to use the Coalesce function with Django QuerySet to provide fallback values for company taglines.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_35

LANGUAGE: python
CODE:
```
from django.db.models import F, Value, CharField
qs = Company.objects.annotate(
    tagline=Coalesce(
        [F("motto"), F("ticker_name"), F("description"), Value("No Tagline")],
        output_field=CharField(),
    )
)
```

----------------------------------------

TITLE: Secure SQL Position Function Implementation
DESCRIPTION: Corrected implementation of the Position function that prevents SQL injection by using proper parameter passing.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_37

LANGUAGE: python
CODE:
```
class Position(Func):
    function = "POSITION"
    arg_joiner = " IN "

    def __init__(self, expression, substring):
        super().__init__(substring, expression)
```

----------------------------------------

TITLE: Using Functional API for TextChoices and IntegerChoices (Python/Django)
DESCRIPTION: Illustrates the use of the functional API for creating `TextChoices` and `IntegerChoices` classes dynamically. Shows how to define the enumeration name and members as a string, and how the `.choices` property provides the value-label pairs.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_9

LANGUAGE: pycon
CODE:
```
>>> MedalType = models.TextChoices("MedalType", "GOLD SILVER BRONZE")
>>> MedalType.choices
[('GOLD', 'Gold'), ('SILVER', 'Silver'), ('BRONZE', 'Bronze')]
>>> Place = models.IntegerChoices("Place", "FIRST SECOND THIRD")
>>> Place.choices
[(1, 'First'), (2, 'Second'), (3, 'Third')]
```

----------------------------------------

TITLE: Configuring DateDetailView URL Routing in Django (Python)
DESCRIPTION: This snippet shows how to define a URL route using Django's path() function to connect date-based detail URLs to the DateDetailView generic view. It uses Django's as_view() with 'model' and 'date_field' arguments to specify the model (Article) and the date field (pub_date) used for lookups. Dependencies include 'django.urls' and 'django.views.generic.dates.DateDetailView', and the Article model must be defined in the application. Inputs are requests to a URL matching the embedded pattern, and output is rendering an appropriate object detail page or raising a 404 if not found. This setup assumes the default template name structure with a '_detail' suffix.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.urls import path
from django.views.generic.dates import DateDetailView

urlpatterns = [
    path(
        "<int:year>/<str:month>/<int:day>/<int:pk>/",
        DateDetailView.as_view(model=Article, date_field="pub_date"),
        name="archive_date_detail",
    ),
]
```

----------------------------------------

TITLE: Mixing Q Objects with Keyword Arguments in Django
DESCRIPTION: Demonstrates the correct way to combine Q objects with keyword arguments in a Django query, where Q objects must precede keyword arguments.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_43

LANGUAGE: python
CODE:
```
Poll.objects.get(
    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),
    question__startswith="Who",
)
```

----------------------------------------

TITLE: Uploading a File Using Django Test Client POST Method
DESCRIPTION: Shows how to upload a file using the Django test client's POST method. The example demonstrates opening a file and submitting it along with other form data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_8

LANGUAGE: pycon
CODE:
```
>>> c = Client()
>>> with open("wishlist.doc", "rb") as fp:
...     c.post("/customers/wishes/", {"name": "fred", "attachment": fp})
...
```

----------------------------------------

TITLE: Excluding Extra Fields from Cleaned Data in Django Forms - Python
DESCRIPTION: Shows that extra (undefined) keys in the input data to a Django Form are not included in cleaned_data. Only fields defined in the form are accessible after validation. Inputs are arbitrary data with extra keys. Output is cleaned_data with only declared fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
>>> data = {\n...     \"subject\": \"hello\",\n...     \"message\": \"Hi there\",\n...     \"sender\": \"foo@example.com\",\n...     \"cc_myself\": True,\n...     \"extra_field_1\": \"foo\",\n...     \"extra_field_2\": \"bar\",\n...     \"extra_field_3\": \"baz\",\n... }\n>>> f = ContactForm(data)\n>>> f.is_valid()\nTrue\n>>> f.cleaned_data  # Doesn't contain extra_field_1, etc.\n{'cc_myself': True, 'message': 'Hi there', 'sender': 'foo@example.com', 'subject': 'hello'}
```

----------------------------------------

TITLE: Database Migration for Upgrading MD5 Passwords to PBKDF2 in Django
DESCRIPTION: This migration code automatically upgrades legacy MD5 password hashes to use PBKDF2-wrapped MD5 hashes for improved security. It searches for users with MD5 passwords, processes each one, and saves the upgraded password hash.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.db import migrations

from ..hashers import PBKDF2WrappedMD5PasswordHasher


def forwards_func(apps, schema_editor):
    User = apps.get_model("auth", "User")
    users = User.objects.filter(password__startswith="md5$")
    hasher = PBKDF2WrappedMD5PasswordHasher()
    for user in users:
        algorithm, salt, md5_hash = user.password.split("$", 2)
        user.password = hasher.encode_md5_hash(md5_hash, salt)
        user.save(update_fields=["password"])


class Migration(migrations.Migration):
    dependencies = [
        ("accounts", "0001_initial"),
        # replace this with the latest migration in contrib.auth
        ("auth", "####_migration_name"),
    ]

    operations = [
        migrations.RunPython(forwards_func),
    ]
```

----------------------------------------

TITLE: Using assertNumQueries as a Context Manager in Django Tests
DESCRIPTION: Shows how to use assertNumQueries as a context manager to verify the exact number of database queries executed by a block of code.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_43

LANGUAGE: python
CODE:
```
with self.assertNumQueries(2):
    Person.objects.create(name="Aaron")
    Person.objects.create(name="Daniel")
```

----------------------------------------

TITLE: Instantiating a Django Model (Example for pre_init)
DESCRIPTION: This snippet demonstrates the creation of an instance of a hypothetical Django `Question` model. It passes keyword arguments `question_text` and `pub_date` (using `timezone.now()`). This specific example is used in the documentation to illustrate the values of `sender`, `args`, and `kwargs` that would be sent to a `pre_init` signal handler upon this model's instantiation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
q = Question(question_text="What's new?", pub_date=timezone.now())
```

----------------------------------------

TITLE: Handling Integrity Errors with Nested atomic Blocks in Django
DESCRIPTION: An example showing how to handle database integrity errors using nested atomic blocks. This pattern allows for database operations to continue after catching specific integrity errors without rolling back the entire transaction.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.db import IntegrityError, transaction


@transaction.atomic
def viewfunc(request):
    create_parent()

    try:
        with transaction.atomic():
            generate_relationships()
    except IntegrityError:
        handle_exception()

    add_children()
```

----------------------------------------

TITLE: Defining Article Model with ForeignKey to Site in Django
DESCRIPTION: This code snippet defines an Article model with a foreign key relationship to the Site model, allowing an article to be associated with a single site.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.contrib.sites.models import Site
from django.db import models


class Article(models.Model):
    headline = models.CharField(max_length=200)
    # ...
    site = models.ForeignKey(Site, on_delete=models.CASCADE)
```

----------------------------------------

TITLE: Asynchronous Signal Sending in Django
DESCRIPTION: This example illustrates how to send a signal asynchronously using the asend() method. It's implemented as an async function that must be awaited, demonstrating the integration of async/await syntax with Django's signal system.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
async def asend_pizza(self, toppings, size):
    await pizza_done.asend(sender=self.__class__, toppings=toppings, size=size)
    ...
```

----------------------------------------

TITLE: Implementing a Basic CheckConstraint in Python
DESCRIPTION: Provides an example of a `CheckConstraint` used within a Django model's `Meta.constraints`. It enforces the condition that the 'age' field must be greater than or equal to 18 using a `Q` object.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
from django.db.models import Q, CheckConstraint

CheckConstraint(condition=Q(age__gte=18), name='age_gte_18')
```

----------------------------------------

TITLE: Bulk Creating ManyToMany Relationships with Through Model
DESCRIPTION: Shows how to use bulk_create() with a ManyToMany through model to efficiently create multiple relationship records in a single query.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
PizzaToppingRelationship = Pizza.toppings.through
PizzaToppingRelationship.objects.bulk_create(
    [
        PizzaToppingRelationship(pizza=my_pizza, topping=pepperoni),
        PizzaToppingRelationship(pizza=your_pizza, topping=pepperoni),
        PizzaToppingRelationship(pizza=your_pizza, topping=mushroom),
    ],
    ignore_conflicts=True,
)
```

LANGUAGE: python
CODE:
```
my_pizza.toppings.add(pepperoni)
your_pizza.toppings.add(pepperoni, mushroom)
```

----------------------------------------

TITLE: Squashing Migrations in Django
DESCRIPTION: Demonstrates the command to squash multiple migrations into a single migration. This helps optimize and simplify the migration history of a Django project.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_11

LANGUAGE: shell
CODE:
```
$ ./manage.py squashmigrations myapp 0004
```

----------------------------------------

TITLE: Querying Database with Specific Alias in Django
DESCRIPTION: This snippet demonstrates the use of the `using()` method in Django's QuerySet API. It allows specifying the database alias against which a query should be executed, enabling interaction with multiple databases configured in the project.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_58

LANGUAGE: pycon
CODE:
```
# queries the database with the 'default' alias.
>>> Entry.objects.all()

# queries the database with the 'backup' alias
>>> Entry.objects.using("backup")
```

----------------------------------------

TITLE: Using PostgreSQL Full Text Search in Django
DESCRIPTION: Shows how to perform full-text search on Django models using PostgreSQL's built-in search functionality. This example searches for entries containing a specific word in the body text.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/search.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> Entry.objects.filter(body_text__search="cheese")
[<Entry: Cheese on Toast recipes>, <Entry: Pizza recipes>]
```

----------------------------------------

TITLE: Creating Custom Manager from_queryset Django
DESCRIPTION: This snippet demonstrates how to create a custom manager class that combines methods from a custom `Manager` base class and a custom `QuerySet` class. It uses `Manager.from_queryset()` to return a new manager subclass.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_8

LANGUAGE: Python
CODE:
```
class CustomManager(models.Manager):
    def manager_only_method(self):
        return


class CustomQuerySet(models.QuerySet):
    def manager_and_queryset_method(self):
        return


class MyModel(models.Model):
    objects = CustomManager.from_queryset(CustomQuerySet)()
```

----------------------------------------

TITLE: Using Django limit_choices_to with Dictionary (Python)
DESCRIPTION: Demonstrates using the `limit_choices_to` option on a Django `ForeignKey` field with a dictionary. This restricts the available choices in forms (like the admin) to `User` instances where `is_staff` is `True`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_33

LANGUAGE: Python
CODE:
```
staff_member = models.ForeignKey(
    User,
    on_delete=models.CASCADE,
    limit_choices_to={"is_staff": True},
)
```

----------------------------------------

TITLE: Testing Django DetailView Behavior in Python
DESCRIPTION: This snippet defines a test class `QuestionDetailViewTests` inheriting from Django's `TestCase` to test the behavior of the `DetailView` for questions. The `test_future_question` method asserts that accessing the detail view for a question with a future publication date returns a 404 Not Found status code. The `test_past_question` method asserts that the detail view for a question with a past publication date successfully displays the question's text.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
.. code-block:: python
    :caption: ``polls/tests.py``

    class QuestionDetailViewTests(TestCase):
        def test_future_question(self):
            """
            The detail view of a question with a pub_date in the future
            returns a 404 not found.
            """
            future_question = create_question(question_text="Future question.", days=5)
            url = reverse("polls:detail", args=(future_question.id,))
            response = self.client.get(url)
            self.assertEqual(response.status_code, 404)

        def test_past_question(self):
            """
            The detail view of a question with a pub_date in the past
            displays the question's text.
            """
            past_question = create_question(question_text="Past Question.", days=-5)
            url = reverse("polls:detail", args=(past_question.id,))
            response = self.client.get(url)
            self.assertContains(response, past_question.question_text)
```

----------------------------------------

TITLE: Custom Search Implementation in Django ModelAdmin
DESCRIPTION: Implementation of get_search_results method to extend the default search functionality by also allowing searches on integer fields like 'age', combining results from the default search and the custom numeric search.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_43

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    list_display = ["name", "age"]
    search_fields = ["name"]

    def get_search_results(self, request, queryset, search_term):
        queryset, may_have_duplicates = super().get_search_results(
            request,
            queryset,
            search_term,
        )
        try:
            search_term_as_int = int(search_term)
        except ValueError:
            pass
        else:
            queryset |= self.model.objects.filter(age=search_term_as_int)
        return queryset, may_have_duplicates
```

----------------------------------------

TITLE: Defining Grouped Model Choices with Dictionary (Python)
DESCRIPTION: Shows how to structure the `choices` dictionary to group related options under a common name. The outer dictionary keys represent group names, and their values are dictionaries containing the actual field value to label mappings. Ungrouped options can be included alongside groups.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_4

LANGUAGE: Python
CODE:
```
MEDIA_CHOICES = {
    "Audio": {
        "vinyl": "Vinyl",
        "cd": "CD",
    },
    "Video": {
        "vhs": "VHS Tape",
        "dvd": "DVD",
    },
    "unknown": "Unknown",
}
```

----------------------------------------

TITLE: Checking if Formset Data Has Changed
DESCRIPTION: Shows how to check if any form data in the formset has been changed from its initial state using the has_changed() method, useful for determining if any user input has occurred.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
>>> data = {
...     "form-TOTAL_FORMS": "1",
...     "form-INITIAL_FORMS": "0",
...     "form-0-title": "",
...     "form-0-pub_date": "",
... }
>>> formset = ArticleFormSet(data)
>>> formset.has_changed()
False
```

----------------------------------------

TITLE: Sorting by Related Fields in Django ModelAdmin
DESCRIPTION: Example showing how to configure sorting for a column that displays data from a related model, using the ordering parameter with a lookup to the related field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
class Blog(models.Model):
    title = models.CharField(max_length=255)
    author = models.ForeignKey(Person, on_delete=models.CASCADE)


class BlogAdmin(admin.ModelAdmin):
    list_display = ["title", "author", "author_first_name"]

    @admin.display(ordering="author__first_name")
    def author_first_name(self, obj):
        return obj.author.first_name
```

----------------------------------------

TITLE: Using Firstof Tag for Conditional Output (Django)
DESCRIPTION: Shows the `{% firstof %}` tag, which outputs the value of the first variable in the provided list (`var1`, `var2`, `var3`) that evaluates to True in a boolean context (i.e., exists, is not empty, not False, not zero). If all variables evaluate to False, nothing is output.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_15

LANGUAGE: html+django
CODE:
```
{% firstof var1 var2 var3 %}
```

----------------------------------------

TITLE: Middleware to Rewrite X-Forwarded Headers for Django (Python)
DESCRIPTION: Provides a custom Django middleware class to rewrite X-Forwarded headers so only the most recent proxy information is used. This helps get accurate host data in multi-proxy environments. Inputs: HttpRequest with potential X-Forwarded headers; output: Machined request.META with modified header values. Should be installed before other middleware relying on get_host().
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class MultipleProxyMiddleware:
    FORWARDED_FOR_FIELDS = [
        "HTTP_X_FORWARDED_FOR",
        "HTTP_X_FORWARDED_HOST",
        "HTTP_X_FORWARDED_SERVER",
    ]

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        """
        Rewrites the proxy headers so that only the most
        recent proxy is used.
        """
        for field in self.FORWARDED_FOR_FIELDS:
            if field in request.META:
                if "," in request.META[field]:
                    parts = request.META[field].split(",")
                    request.META[field] = parts[-1].strip()
        return self.get_response(request)

```

----------------------------------------

TITLE: Customizing ModelForm in Django Admin
DESCRIPTION: Illustrates how to provide a custom ModelForm for use in the admin interface, overriding default form behavior.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django import forms
from django.contrib import admin
from myapp.models import Person


class PersonForm(forms.ModelForm):
    class Meta:
        model = Person
        exclude = ["name"]


class PersonAdmin(admin.ModelAdmin):
    exclude = ["age"]
    form = PersonForm
```

----------------------------------------

TITLE: Implementing a Basic View in Django
DESCRIPTION: Demonstrates how to create a simple View subclass that responds to GET requests with a 'Hello, World!' message.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/base.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
from django.views import View


class MyView(View):
    def get(self, request, *args, **kwargs):
        return HttpResponse("Hello, World!")
```

----------------------------------------

TITLE: Isolating Apps for Testing in Django
DESCRIPTION: Demonstrates the use of the isolate_apps decorator to create isolated model registries for testing. This allows creation of temporary models that are cleanly deleted after tests.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_39

LANGUAGE: python
CODE:
```
from django.db import models
from django.test import SimpleTestCase
from django.test.utils import isolate_apps


class MyModelTests(SimpleTestCase):
    @isolate_apps("app_label")
    def test_model_definition(self):
        class TestModel(models.Model):
            pass

        ...
```

LANGUAGE: python
CODE:
```
with isolate_apps("app_label"):

    class TestModel(models.Model):
        pass

    ...
```

LANGUAGE: python
CODE:
```
@isolate_apps("app_label", attr_name="apps")
class TestModelDefinition(SimpleTestCase):
    def test_model_definition(self):
        class TestModel(models.Model):
            pass

        self.assertIs(self.apps.get_model("app_label", "TestModel"), TestModel)
```

LANGUAGE: python
CODE:
```
class TestModelDefinition(SimpleTestCase):
    @isolate_apps("app_label", kwarg_name="apps")
    def test_model_definition(self, apps):
        class TestModel(models.Model):
            pass

        self.assertIs(apps.get_model("app_label", "TestModel"), TestModel)
```

----------------------------------------

TITLE: Aggregating Annotations in Django ORM
DESCRIPTION: This example shows how to aggregate on the result of an annotation. It calculates the average number of authors per book by first annotating the set of books with the author count, then aggregating that count.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_26

LANGUAGE: pycon
CODE:
```
>>> from django.db.models import Avg, Count
>>> Book.objects.annotate(num_authors=Count("authors")).aggregate(Avg("num_authors"))
{'num_authors__avg': 1.66}
```

----------------------------------------

TITLE: Configuring Django settings for Daphne integration
DESCRIPTION: Django settings configuration to enable Daphne integration with the runserver command. Adds daphne to INSTALLED_APPS and configures the ASGI_APPLICATION setting to point to the project's ASGI application.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/daphne.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
INSTALLED_APPS = [
    "daphne",
    ...,
]

ASGI_APPLICATION = "myproject.asgi.application"
```

----------------------------------------

TITLE: Retrieving Multiple Objects as a Dictionary with in_bulk() Method
DESCRIPTION: This snippet demonstrates using in_bulk() to retrieve model instances by a list of field values, returned as a dictionary mapping values to objects. It supports custom field lookups via the field_name parameter and includes examples with primary key and slug fields. It handles empty input lists gracefully and mentions the async in_bulk() variant. Dependencies include Django ORM and model definitions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_79

LANGUAGE: Python
CODE:
```
Blog.objects.in_bulk([1])
Blog.objects.in_bulk([1, 2])
Blog.objects.in_bulk([])
Blog.objects.in_bulk()
Blog.objects.in_bulk(["beatles_blog"], field_name="slug")
Blog.objects.distinct("name").in_bulk(field_name="name")
```

----------------------------------------

TITLE: Configuring raw_id_fields in TabularInline
DESCRIPTION: Example showing how to use raw_id_fields in an InlineModelAdmin to replace the default select dropdown with an Input widget for a ForeignKey or ManyToManyField.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_64

LANGUAGE: python
CODE:
```
class BookInline(admin.TabularInline):
    model = Book
    raw_id_fields = ["pages"]
```

----------------------------------------

TITLE: Using filesizeformat Filter
DESCRIPTION: Shows how to format file sizes in a human-readable format using the filesizeformat filter.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_71

LANGUAGE: html+django
CODE:
```
{{ value|filesizeformat }}
```

----------------------------------------

TITLE: Conditional Aggregation Example
DESCRIPTION: Shows how to use conditional aggregation with filter argument to count books meeting specific criteria.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
highly_rated = Count("book", filter=Q(book__rating__gte=7))
Author.objects.annotate(num_books=Count("book"), highly_rated_books=highly_rated)
```

----------------------------------------

TITLE: Defining a Basic Custom System Check Function in Python
DESCRIPTION: Provides a template for creating a custom Django system check function. The function must accept `app_configs` (a list of applications to inspect, or None for all) and `**kwargs`. It should perform validation logic and return a list of `Error` or other `CheckMessage` instances if issues are found, or an empty list otherwise. The `@register()` decorator is used to register the check with the framework.
SOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.core.checks import Error, register


@register()
def example_check(app_configs, **kwargs):
    errors = []
    # ... your check logic here
    if check_failed:
        errors.append(
            Error(
                "an error",
                hint="A hint.",
                obj=checked_object,
                id="myapp.E001",
            )
        )
    return errors
```

----------------------------------------

TITLE: Illustrating Django `safe` Filter Output vs. Default Escaping
DESCRIPTION: Shows the rendered output of a variable containing '<b>' both with default Django auto-escaping (`&lt;b&gt;`) and when the `safe` filter is applied (`<b>`). This clarifies the effect of the `safe` filter described previously.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_16

LANGUAGE: html+django
CODE:
```
This will be escaped: &lt;b&gt;
This will not be escaped: <b>
```

----------------------------------------

TITLE: Running Migrate with Custom Settings Module - Command Line
DESCRIPTION: Demonstrates running the `django-admin migrate` command using the `--settings` option. This allows specifying the Python package path to the settings module to be used, overriding the default or the `DJANGO_SETTINGS_MODULE` environment variable.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_50

LANGUAGE: Command Line
CODE:
```
django-admin migrate --settings=mysite.settings
```

----------------------------------------

TITLE: Setting Advanced Ordering with Query Expressions in Django Model Meta
DESCRIPTION: Shows how to use Django query expressions (`F` objects) within the `ordering` attribute of a model's `Meta` class for more complex ordering logic, such as controlling the sorting of null values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.db.models import F

ordering = [F("author").asc(nulls_last=True)]
```

----------------------------------------

TITLE: Accessing ManyToMany Through Model Instance via Reverse Relationship - Django - Pycon
DESCRIPTION: Shows an alternative method to retrieve a specific instance of the intermediate `through` model (`Membership`) by accessing the reverse relationship manager (`membership_set`) from one of the related objects (`Person`) and filtering. Shows accessing attributes of the intermediate instance.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_25

LANGUAGE: pycon
CODE:
```
>>> ringos_membership = ringo.membership_set.get(group=beatles)
>>> ringos_membership.date_joined
datetime.date(1962, 8, 16)
>>> ringos_membership.invite_reason
'Needed a new drummer.'
```

----------------------------------------

TITLE: Filtering QuerySets by Time - Django ORM (Python)
DESCRIPTION: Demonstrates filtering of datetime fields by specific time values or ranges using '__time' and 'range' lookups in Django. Inputs are datetime.time objects; outputs are QuerySets matching the time criteria. Requires datetime module and Django ORM; supports timezone-aware filtering when applicable.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_115

LANGUAGE: python
CODE:
```
Entry.objects.filter(pub_date__time=datetime.time(14, 30))
Entry.objects.filter(pub_date__time__range=(datetime.time(8), datetime.time(17)))
```

----------------------------------------

TITLE: Tagging Django Test Case Classes
DESCRIPTION: Shows how to apply tags to entire test case classes and demonstrates tag inheritance in test class hierarchies.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_45

LANGUAGE: python
CODE:
```
@tag("slow", "core")
class SampleTestCase(TestCase): ...
```

----------------------------------------

TITLE: Loading Nested/Directory Fixtures Using django-admin (Shell)
DESCRIPTION: Provides an example of loading a fixture from a nested directory path using Django's management command. Dependencies: Django; the referenced JSON file (foo/bar/mydata.json) must be in a supported fixture directory or specified path. Input: relative/absolute path to fixture file; Output: corresponding fixture loaded into the database as JSON.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
django-admin loaddata foo/bar/mydata.json
```

----------------------------------------

TITLE: Attaching Files in Django EmailMessage
DESCRIPTION: Example showing how to attach a file to an EmailMessage using the attach_file method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
message.attach_file("/images/weather_map.png")
```

----------------------------------------

TITLE: Filtering QuerySets by Day - Django ORM (Python)
DESCRIPTION: Filters date/datetime fields to match specific days or ranges, using '__day' and comparison lookups. Inputs are integers representing the day of the month; outputs are QuerySets including any records from any month/year with a matching day number. Works with DateField and DateTimeField (with respect to current time zone if enabled).
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_109

LANGUAGE: python
CODE:
```
Entry.objects.filter(pub_date__day=3)
Entry.objects.filter(pub_date__day__gte=3)
```

----------------------------------------

TITLE: Configuring Django Filesystem Cache Backend
DESCRIPTION: Configuration example for Django's filesystem cache backend with a 60 second timeout and 1000 item capacity limit.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": "/var/tmp/django_cache",
        "TIMEOUT": 60,
        "OPTIONS": {"MAX_ENTRIES": 1000},
    }
}
```

----------------------------------------

TITLE: Formatting Dates Using Default Format in Django Templates - HTML+Django
DESCRIPTION: Illustrates default usage of the 'date' filter without an explicit format string, causing it to use the global DATE_FORMAT. Requires a datetime variable and Django's template context with appropriate localization. Output is a locale-sensitive, formatted date as a string. Escapes or literal strings may be required to prevent unintended substitutions for special characters.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_53

LANGUAGE: html+django
CODE:
```
{{ value|date }}
```

----------------------------------------

TITLE: Updating Multiple Session Values (Sync)
DESCRIPTION: Example of updating multiple session values at once using the update method with a dictionary.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
request.session.update({'fav_color': 'red'})
```

----------------------------------------

TITLE: Specifying Multiple Extensions for Makemessages (Bash)
DESCRIPTION: Demonstrates how to use the `django-admin makemessages` command for a specific locale (`de`), specifying multiple file extensions (`html`, `txt`, `xml`) to scan for translatable strings. Extensions can be comma-separated or the option can be used multiple times.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_17

LANGUAGE: bash
CODE:
```
django-admin makemessages --locale=de --extension=html,txt --extension xml
```

----------------------------------------

TITLE: Using truncatewords Filter in Django Templates
DESCRIPTION: Shows how to use the truncatewords filter, which truncates a string after a specified number of words. Newlines within the string are removed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_95

LANGUAGE: html+django
CODE:
```
{{ value|truncatewords:2 }}
```

----------------------------------------

TITLE: Initializing Django EmailMessage
DESCRIPTION: Example of creating an EmailMessage instance with various parameters including subject, body, sender, recipients, BCC, reply-to headers, and custom headers.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.core.mail import EmailMessage

email = EmailMessage(
    "Hello",
    "Body goes here",
    "from@example.com",
    ["to1@example.com", "to2@example.com"],
    ["bcc@example.com"],
    reply_to=["another@example.com"],
    headers={"Message-ID": "foo"},
)
```

----------------------------------------

TITLE: Formatting Dates with Date Filter in Django Templates - HTML+Django
DESCRIPTION: Shows how to use the "date" template filter to format a datetime variable within a Django template. Requires Django templating environment and a context variable (value) containing a datetime object. The filter string specifies the output format. Input is any valid datetime; output is a string formatted according to the given pattern. Limitations depend on the available format specifiers and current locale.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_51

LANGUAGE: html+django
CODE:
```
{{ value|date:"D d M Y" }}
```

----------------------------------------

TITLE: Implementing Admin Action as ModelAdmin Method in Django
DESCRIPTION: This code demonstrates how to implement the 'make_published' action as a method of the ArticleAdmin class. It also shows how to use the message_user method to display a success message after the action is performed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.contrib import messages
from django.utils.translation import ngettext

class ArticleAdmin(admin.ModelAdmin):
    ...

    actions = ["make_published"]

    @admin.action(description="Mark selected stories as published")
    def make_published(self, request, queryset):
        updated = queryset.update(status="p")
        self.message_user(
            request,
            ngettext(
                "%d story was successfully marked as published.",
                "%d stories were successfully marked as published.",
                updated,
            )
            % updated,
            messages.SUCCESS,
        )
```

----------------------------------------

TITLE: Configuring Non-Caching Headers with add_never_cache_headers
DESCRIPTION: Adds headers to prevent caching of a response, including an Expires header set to current time and Cache-Control headers with no-cache directives. Only adds headers if they don't already exist.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
add_never_cache_headers(response)
```

----------------------------------------

TITLE: Configuring PersonAdmin with List Display Links
DESCRIPTION: Shows how to configure PersonAdmin with multiple linked fields in the admin list display.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    list_display = ["first_name", "last_name", "birthday"]
    list_display_links = ["first_name", "last_name"]
```

----------------------------------------

TITLE: Implementing Custom Authorization Logic in a Django Authentication Backend (Python)
DESCRIPTION: This code illustrates how to add permission logic to a custom Django authentication backend. The MagicAdminBackend class extends BaseBackend and implements has_perm, granting all permissions to a user whose username matches the ADMIN_LOGIN value from settings. Key dependencies include django.contrib.auth and settings. The input parameters are the user object and permission string; the output is a boolean granting permission based on the logic implemented.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.contrib.auth.backends import BaseBackend


class MagicAdminBackend(BaseBackend):
    def has_perm(self, user_obj, perm, obj=None):
        return user_obj.username == settings.ADMIN_LOGIN

```

----------------------------------------

TITLE: Creating a Basic Django Migration in Python
DESCRIPTION: This snippet shows the structure of a basic Django migration file. It defines a Migration class with dependencies and operations, which are used to specify schema changes.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [("migrations", "0001_initial")]

    operations = [
        migrations.DeleteModel("Tribble"),
        migrations.AddField("Author", "rating", models.IntegerField(default=0)),
    ]
```

----------------------------------------

TITLE: Migrating Multiple Databases with Django Management Commands
DESCRIPTION: Terminal commands showing how to run migrations on different databases using the --database option with the migrate command. This demonstrates how to synchronize models onto each configured database.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
$ ./manage.py migrate
$ ./manage.py migrate --database=users
```

----------------------------------------

TITLE: Creating Functional Unique Constraints with Django ORM in Python
DESCRIPTION: This code snippet demonstrates how to define a Django model with functional unique constraints using the new 'expressions' positional argument of UniqueConstraint, enabled in Django 4.0. It requires Django 4.0+, and additionally imports Lower from django.db.models.functions to perform case-insensitive uniqueness enforcement on first_name and descending last_name fields. The 'constraints' option in the inner Meta class specifies a UniqueConstraint that applies Lower() to both fields, enforcing uniqueness on those expressions. Inputs are model field values; the output is a DB table schema enforcing this constraint. Limitations include the need for database backend support for the given expressions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models
from django.db.models import UniqueConstraint
from django.db.models.functions import Lower


class MyModel(models.Model):
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)

    class Meta:
        constraints = [
            UniqueConstraint(
                Lower("first_name"),
                Lower("last_name").desc(),
                name="first_last_name_unique",
            ),
        ]
```

----------------------------------------

TITLE: Configuring Cookie-Based Sessions
DESCRIPTION: Setting the SESSION_ENGINE to use signed cookies for session storage. This stores session data directly in the client's browser as signed (but not encrypted) cookies.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
"django.contrib.sessions.backends.signed_cookies"
```

----------------------------------------

TITLE: Rendering Comment Notification Email in Django Template Language
DESCRIPTION: This snippet demonstrates how to structure an email notification for a new comment using Django's template language. It dynamically inserts the commented object and the full text of the comment into the email body.
SOURCE: https://github.com/django/django/blob/main/tests/templates/comments/comment_notification_email.txt#2025-04-23_snippet_0

LANGUAGE: Django Template Language
CODE:
```
A comment has been posted on {{ content_object }}.
The comment reads as follows:
{{ comment }}
```

----------------------------------------

TITLE: Implementing Form Processing View with SingleObjectMixin in Django
DESCRIPTION: FormView implementation with SingleObjectMixin for handling form submissions with author context.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.http import HttpResponseForbidden
from django.urls import reverse
from django.views.generic import FormView
from django.views.generic.detail import SingleObjectMixin


class AuthorInterestFormView(SingleObjectMixin, FormView):
    template_name = "books/author_detail.html"
    form_class = AuthorInterestForm
    model = Author

    def post(self, request, *args, **kwargs):
        if not request.user.is_authenticated:
            return HttpResponseForbidden()
        self.object = self.get_object()
        return super().post(request, *args, **kwargs)

    def get_success_url(self):
        return reverse("author-detail", kwargs={"pk": self.object.pk})
```

----------------------------------------

TITLE: Extracting Date Components with Django ORM - Python
DESCRIPTION: Demonstrates extracting date-based parts (year, ISO year, quarter, month, week, day, weekday) using Django ORM's annotate, values, and Extract function subclasses. Requires Django and an Experiment model with date fields. Inputs include various datetime/date fields; outputs are dictionaries keyed by part name. Assumes proper timezone handling and that the model fields are compatible; limitations include only supporting parts valid for DateField.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
>>> from datetime import UTC, datetime\n>>> from django.db.models.functions import (\n...     ExtractDay,\n...     ExtractMonth,\n...     ExtractQuarter,\n...     ExtractWeek,\n...     ExtractIsoWeekDay,\n...     ExtractWeekDay,\n...     ExtractIsoYear,\n...     ExtractYear,\n... )\n>>> start_2015 = datetime(2015, 6, 15, 23, 30, 1, tzinfo=UTC)\n>>> end_2015 = datetime(2015, 6, 16, 13, 11, 27, tzinfo=UTC)\n>>> Experiment.objects.create(\n...     start_datetime=start_2015,\n...     start_date=start_2015.date(),\n...     end_datetime=end_2015,\n...     end_date=end_2015.date(),\n... )\n>>> Experiment.objects.annotate(\n...     year=ExtractYear("start_date"),\n...     isoyear=ExtractIsoYear("start_date"),\n...     quarter=ExtractQuarter("start_date"),\n...     month=ExtractMonth("start_date"),\n...     week=ExtractWeek("start_date"),\n...     day=ExtractDay("start_date"),\n...     weekday=ExtractWeekDay("start_date"),\n...     isoweekday=ExtractIsoWeekDay("start_date"),\n... ).values(\n...     "year",\n...     "isoyear",\n...     "quarter",\n...     "month",\n...     "week",\n...     "day",\n...     "weekday",\n...     "isoweekday",\n... ).get(\n...     end_date__year=ExtractYear("start_date")\n... )\n{'year': 2015, 'isoyear': 2015, 'quarter': 2, 'month': 6, 'week': 25,\n 'day': 15, 'weekday': 2, 'isoweekday': 1}\n
```

----------------------------------------

TITLE: Configuring Password Validators in Django Settings
DESCRIPTION: Example configuration for enabling password validation in Django using the AUTH_PASSWORD_VALIDATORS setting. This setup includes four built-in validators with custom options.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 9,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
```

----------------------------------------

TITLE: Defining USE_I18N setting
DESCRIPTION: This setting controls whether Django's translation system is enabled. Setting it to False disables translation for performance optimization. It is related to LANGUAGE_CODE and USE_TZ settings. The default value is True.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_60



----------------------------------------

TITLE: Initial Values Not Used as Fallback During Validation
DESCRIPTION: Clarifies that `initial` values specified for Django form fields are only for initial display of unbound forms. They are *not* used as fallback data during the validation process if a field's value is missing in the submitted data. Required fields will still raise validation errors if empty.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_7

LANGUAGE: pycon
CODE:
```
>>> class CommentForm(forms.Form):
...     name = forms.CharField(initial="Your name")
...     url = forms.URLField(initial="https://")
...     comment = forms.CharField()
...
>>> data = {"name": "", "url": "", "comment": "Foo"}
>>> f = CommentForm(data)
>>> f.is_valid()
False
# The form does *not* fallback to using the initial values.
>>> f.errors
{'url': ['This field is required.'], 'name': ['This field is required.']}
```

----------------------------------------

TITLE: Comprehensive Question Publication Tests
DESCRIPTION: Test methods to verify was_published_recently() behavior for old and recent questions.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
def test_was_published_recently_with_old_question(self):
    """
    was_published_recently() returns False for questions whose pub_date
    is older than 1 day.
    """
    time = timezone.now() - datetime.timedelta(days=1, seconds=1)
    old_question = Question(pub_date=time)
    self.assertIs(old_question.was_published_recently(), False)


def test_was_published_recently_with_recent_question(self):
    """
    was_published_recently() returns True for questions whose pub_date
    is within the last day.
    """
    time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)
    recent_question = Question(pub_date=time)
    self.assertIs(recent_question.was_published_recently(), True)
```

----------------------------------------

TITLE: Running a Specific Test Class
DESCRIPTION: This command shows how to run a single test class from the Django test suite, specifically the TranslationTests class from the i18n module, using a custom settings file.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_7

LANGUAGE: console
CODE:
```
$ ./runtests.py --settings=path.to.settings i18n.tests.TranslationTests
```

----------------------------------------

TITLE: Annotating Multiple Window Functions for Group Statistics - Django ORM - Python
DESCRIPTION: Shows how to annotate a QuerySet with multiple window functions (average, max, and min ratings) using a shared partition and ordering specification abstracted into a Python dictionary. Requires Django and a 'Movie' model with appropriate fields. This approach avoids repetition and adds 'avg_rating', 'best', and 'worst' fields to each movie object, reflecting statistics relative to each movie's peer group.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
>>> from django.db.models import Avg, F, Max, Min, Window
>>> window = {
...     "partition_by": [F("studio"), F("genre")],
...     "order_by": "released__year",
... }
>>> Movie.objects.annotate(
...     avg_rating=Window(
...         expression=Avg("rating"),
...         **window,
...     ),
...     best=Window(
...         expression=Max("rating"),
...         **window,
...     ),
...     worst=Window(
...         expression=Min("rating"),
...         **window,
...     ),
... )
```

----------------------------------------

TITLE: Defining Relative Lazy Relationships in Django
DESCRIPTION: This snippet shows how to define a relationship using a string reference to a model that is defined later in the same `models.py` file. The `Car` model references the `Manufacturer` model by its name "Manufacturer" before the `Manufacturer` class is defined.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_46

LANGUAGE: python
CODE:
```
from django.db import models


class Car(models.Model):
    manufacturer = models.ForeignKey(
        "Manufacturer",
        on_delete=models.CASCADE,
    )


class Manufacturer(models.Model):
    name = models.TextField()
    suppliers = models.ManyToManyField("self", symmetrical=False)
```

----------------------------------------

TITLE: Using Named Endblock Tags in Django Templates
DESCRIPTION: Demonstrates how to use named endblock tags for improved readability in larger templates. This helps identify which block is being closed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_12

LANGUAGE: html+django
CODE:
```
{% block content %}
...
{% endblock content %}
```

----------------------------------------

TITLE: Django Admin Fieldset Configuration
DESCRIPTION: Demonstrates how to organize form fields into fieldsets for better organization in the admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None, {"fields": ["question_text"]}),
        ("Date information", {"fields": ["pub_date"]}),
    ]


admin.site.register(Question, QuestionAdmin)
```

----------------------------------------

TITLE: Creating a Conditional UniqueConstraint in Python
DESCRIPTION: Shows how to create a partial `UniqueConstraint` that applies only to rows matching a specific condition, defined using a `Q` object passed to the `condition` parameter. This example enforces uniqueness on the 'user' field only for rows where 'status' is 'DRAFT'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
from django.db.models import Q, UniqueConstraint

UniqueConstraint(fields=["user"], condition=Q(status="DRAFT"), name="unique_draft_user")
```

----------------------------------------

TITLE: Language Preference Check in Django View
DESCRIPTION: View function demonstrating how to check the user's language preference using request.LANGUAGE_CODE
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_64

LANGUAGE: python
CODE:
```
from django.http import HttpResponse


def hello_world(request, count):
    if request.LANGUAGE_CODE == "de-at":
        return HttpResponse("You prefer to read Austrian German.")
    else:
        return HttpResponse("You prefer to read another language.")
```

----------------------------------------

TITLE: Checking for Session Keys in Django Views
DESCRIPTION: Example of checking if a key exists in the session dictionary using the __contains__ method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
'fav_color' in request.session
```

----------------------------------------

TITLE: Configuring Password Validation in Django 1.9
DESCRIPTION: Example configuration for Django's password validation using the AUTH_PASSWORD_VALIDATORS setting. This setup enables basic password validation including checks for similarity to user attributes, minimum length, common passwords, and numeric-only passwords.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
```

----------------------------------------

TITLE: Using a Django Tag with 'as' Syntax for Context Variable (HTML+Django)
DESCRIPTION: This Django template snippet shows an improved usage pattern for a context-setting tag (`current_time`). The `as my_current_time` clause allows the template author to specify the name of the variable (`my_current_time`) where the tag's result should be stored in the context. This avoids hardcoding variable names and potential conflicts.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_35

LANGUAGE: html+django
CODE:
```
{% current_time "%Y-%m-%d %I:%M %p" as my_current_time %}
<p>The current time is {{ my_current_time }}.</p>
```

----------------------------------------

TITLE: Data Deserialization
DESCRIPTION: Example of deserializing data and handling deserialized objects.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
for deserialized_object in serializers.deserialize("xml", data):
    if object_should_be_saved(deserialized_object):
        deserialized_object.save()
```

----------------------------------------

TITLE: Traditional Retrieval and Save Pattern (Python)
DESCRIPTION: Shows the typical try/except pattern for retrieving or creating an object when not using get_or_create(). Handles DoesNotExist for manual creation. Highlights why using get_or_create() is preferable in concurrent environments. Requires Person model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_71

LANGUAGE: python
CODE:
```
try:
    obj = Person.objects.get(first_name="John", last_name="Lennon")
except Person.DoesNotExist:
    obj = Person(first_name="John", last_name="Lennon", birthday=date(1940, 10, 9))
    obj.save()
```

----------------------------------------

TITLE: Calling QuerySet Methods like `count()` in Django Templates
DESCRIPTION: Demonstrates accessing methods on objects returned by other methods within a Django template. Specifically, it calls the `count()` method on the QuerySet returned by `task.comment_set.all` to display the number of comments related to the `task` object. No arguments can be passed to methods called this way.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_26

LANGUAGE: html+django
CODE:
```
{{ task.comment_set.all.count }}
```

----------------------------------------

TITLE: Enabling Default Label and id Generation in Django Forms with auto_id=True - Python
DESCRIPTION: Demonstrates how setting auto_id=True on a Django form instance includes label elements and uses field names for id attributes in the rendered HTML. Inputs are a form created with auto_id=True. Outputs are HTML markup with proper association between label for attributes and field ids. This maintains accessibility and usability for assistive devices, following Django's default rendering conventions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
>>> f = ContactForm(auto_id=True)
>>> print(f)
<div><label for="subject">Subject:</label><input type="text" name="subject" maxlength="100" required id="subject"></div>
<div><label for="message">Message:</label><textarea name="message" cols="40" rows="10" required id="message"></textarea></div>
<div><label for="sender">Sender:</label><input type="email" name="sender" required id="sender"></div>
<div><label for="cc_myself">Cc myself:</label><input type="checkbox" name="cc_myself" id="cc_myself"></div>
```

----------------------------------------

TITLE: Applying Database Functions to Composite Primary Keys in Django ORM - Python
DESCRIPTION: Showcases Django ORM usage of database functions with composite primary keys, specifically Max and Count. Demonstrates that Max on a composite pk raises ValueError due to multi-column input while Count works. Requires Django ORM and setup models. Inputs: field names as arguments; outputs: aggregation results or raised ValueError.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
Max("order_id")  # OK
Max("pk")  # ValueError
Count("pk")  # OK
```

----------------------------------------

TITLE: Incorrectly Chaining `etag` and `last_modified` Decorators in Python
DESCRIPTION: Presents an incorrect example of attempting to use both ETag and Last-Modified checks by chaining the `@etag` and `@last_modified` decorators. This pattern leads to incorrect behavior because the decorators act independently. The `condition` decorator should be used instead for simultaneous checks.
SOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
# Bad code. Don't do this!
@etag(etag_func)
@last_modified(last_modified_func)
def my_view(request): ...


# End of bad code.
```

----------------------------------------

TITLE: Filtering on Annotations
DESCRIPTION: Demonstrates filtering QuerySets based on annotation values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
Book.objects.annotate(num_authors=Count("authors")).filter(num_authors__gt=1)
```

----------------------------------------

TITLE: Filtering and Updating Related Objects in Django
DESCRIPTION: Shows how to filter objects based on related fields and update only the columns in the model's main table using QuerySet update.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_57

LANGUAGE: python
CODE:
```
>>> b = Blog.objects.get(pk=1)

# Update all the headlines belonging to this Blog.
>>> Entry.objects.filter(blog=b).update(headline="Everything is the same")
```

----------------------------------------

TITLE: Defining a Simple `get_absolute_url` Method (Python)
DESCRIPTION: Provides a basic example of implementing the `get_absolute_url` method on a Django model. This version constructs the URL string directly using the instance's `id`, which may not be the most portable approach compared to using `django.urls.reverse`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
def get_absolute_url(self):
    return "/people/%i/" % self.id
```

----------------------------------------

TITLE: Dynamic URL Configuration for Publisher Books
DESCRIPTION: URL pattern configuration for dynamic publisher filtering
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.urls import path
from books.views import PublisherBookListView

urlpatterns = [
    path("books/<publisher>/", PublisherBookListView.as_view()),
]
```

----------------------------------------

TITLE: Running Django inspectdb Utility via Shell
DESCRIPTION: This code snippet demonstrates how to run the Django inspectdb management command from the shell to automatically generate model definitions by introspecting an existing database's schema. It requires an initialized Django project and access credentials for the database already specified in the settings. Expected output is direct to the console, unless redirected; the standard input is not used.
SOURCE: https://github.com/django/django/blob/main/docs/howto/legacy-databases.txt#_snippet_0

LANGUAGE: shell
CODE:
```
$ python manage.py inspectdb
```

----------------------------------------

TITLE: Configuring Default Auto Field in Django AppConfig
DESCRIPTION: Configures the default_auto_field attribute in a custom AppConfig to use AutoField as the default primary key type for models in the app.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.apps import AppConfig


class MyAppConfig(AppConfig):
    default_auto_field = "django.db.models.AutoField"
    name = "my_app"
```

----------------------------------------

TITLE: Implementing WeekArchiveView in Django
DESCRIPTION: Example of how to create a WeekArchiveView for displaying articles by week. It includes the view definition, URL configuration, and an HTML template for rendering the archive.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_9

LANGUAGE: Python
CODE:
```
from django.views.generic.dates import WeekArchiveView

from myapp.models import Article


class ArticleWeekArchiveView(WeekArchiveView):
    queryset = Article.objects.all()
    date_field = "pub_date"
    week_format = "%W"
    allow_future = True
```

LANGUAGE: Python
CODE:
```
from django.urls import path

from myapp.views import ArticleWeekArchiveView

urlpatterns = [
    # Example: /2012/week/23/
    path(
        "<int:year>/week/<int:week>/",
        ArticleWeekArchiveView.as_view(),
        name="archive_week",
    ),
]
```

LANGUAGE: HTML
CODE:
```
<h1>Week {{ week|date:'W' }}</h1>

<ul>
    {% for article in object_list %}
        <li>{{ article.pub_date|date:"F j, Y" }}: {{ article.title }}</li>
    {% endfor %}
</ul>

<p>
    {% if previous_week %}
        Previous Week: {{ previous_week|date:"W" }} of year {{ previous_week|date:"Y" }}
    {% endif %}
    {% if previous_week and next_week %}--{% endif %}
    {% if next_week %}
        Next week: {{ next_week|date:"W" }} of year {{ next_week|date:"Y" }}
    {% endif %}
</p>
```

----------------------------------------

TITLE: Accessing Last Page of Paginated Results in Django
DESCRIPTION: Demonstrates how to access the final page of paginated results using the 'last' keyword as the page value.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-multiple-object.txt#2025-04-23_snippet_2

LANGUAGE: text
CODE:
```
/objects/?page=last
```

----------------------------------------

TITLE: Basic Template Variable Lookup Example in Django
DESCRIPTION: Demonstrates dictionary, attribute and list-index lookups in Django templates using different data structures.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> from django.template import Context, Template
>>> t = Template("My name is {{ person.first_name }}.")
>>> d = {"person": {"first_name": "Joe", "last_name": "Johnson"}}
>>> t.render(Context(d))
"My name is Joe."

>>> class PersonClass:
...     pass
...
>>> p = PersonClass()
>>> p.first_name = "Ron"
>>> p.last_name = "Nasty"
>>> t.render(Context({"person": p}))
"My name is Ron."

>>> t = Template("The first stooge in the list is {{ stooges.0 }}.")
>>> c = Context({"stooges": ["Larry", "Curly", "Moe"]})
>>> t.render(c)
"The first stooge in the list is Larry."
```

----------------------------------------

TITLE: Django Middleware Configuration for Internationalization
DESCRIPTION: Example middleware configuration showing correct ordering for LocaleMiddleware with session and common middleware
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_63

LANGUAGE: python
CODE:
```
MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
]
```

----------------------------------------

TITLE: Custom Permission Implementation for Django Admin Actions
DESCRIPTION: Example of implementing custom permissions for admin actions using the ModelAdmin class and action decorator
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.contrib.auth import get_permission_codename


class ArticleAdmin(admin.ModelAdmin):
    actions = ["make_published"]

    @admin.action(permissions=["publish"])
    def make_published(self, request, queryset):
        queryset.update(status="p")

    def has_publish_permission(self, request):
        """Does the user have the publish permission?"""
        opts = self.opts
        codename = get_permission_codename("publish", opts)
        return request.user.has_perm("%s.%s" % (opts.app_label, codename))
```

----------------------------------------

TITLE: Accessing Cleaned Data for Partially Valid Forms - Python
DESCRIPTION: This snippet shows that if the form is not valid, cleaned_data only contains entries for valid fields, omitting those with validation errors. Useful for partial processing or feedback. Requires form validation. Output is cleaned_data dictionary with valid fields only.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
>>> data = {\n...     \"subject\": \"\",\n...     \"message\": \"Hi there\",\n...     \"sender\": \"invalid email address\",\n...     \"cc_myself\": True,\n... }\n>>> f = ContactForm(data)\n>>> f.is_valid()\nFalse\n>>> f.cleaned_data\n{'cc_myself': True, 'message': 'Hi there'}
```

----------------------------------------

TITLE: Configuring Multiple Databases in Django Settings
DESCRIPTION: Example of configuring multiple databases in Django settings, including an auth database and a primary/replica setup with two read replicas.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
DATABASES = {
    "default": {},
    "auth_db": {
        "NAME": "auth_db_name",
        "ENGINE": "django.db.backends.mysql",
        "USER": "mysql_user",
        "PASSWORD": "swordfish",
    },
    "primary": {
        "NAME": "primary_name",
        "ENGINE": "django.db.backends.mysql",
        "USER": "mysql_user",
        "PASSWORD": "spam",
    },
    "replica1": {
        "NAME": "replica1_name",
        "ENGINE": "django.db.backends.mysql",
        "USER": "mysql_user",
        "PASSWORD": "eggs",
    },
    "replica2": {
        "NAME": "replica2_name",
        "ENGINE": "django.db.backends.mysql",
        "USER": "mysql_user",
        "PASSWORD": "bacon",
    },
}
```

----------------------------------------

TITLE: Using Custom Readonly Fields and Display Methods - Django Admin in Python
DESCRIPTION: Illustrates defining readonly_fields in ModelAdmin, including a custom display method that uses format_html_join and mark_safe to render a computed address report with HTML line breaks. The readonly field presents non-editable data in the admin, which may be sourced from model methods or admin methods. Requires Django and optional use of django.utils.html and django.utils.safestring. Handles presentation of computed data and includes a fallback message if the address is unavailable.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_36

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.utils.html import format_html_join
from django.utils.safestring import mark_safe


class PersonAdmin(admin.ModelAdmin):
    readonly_fields = ["address_report"]

    # description functions like a model field's verbose_name
    @admin.display(description="Address")
    def address_report(self, instance):
        # assuming get_full_address() returns a list of strings
        # for each line of the address and you want to separate each
        # line by a linebreak
        return format_html_join(
            mark_safe("<br>"),
            "{}",
            ((line,) for line in instance.get_full_address()),
        ) or mark_safe("<span class='errors'>I can't determine this address.</span>")
```

----------------------------------------

TITLE: Referencing Django Constraint Classes Conventionally in Python
DESCRIPTION: Shows the standard convention for importing and referencing Django model constraint classes. It advises importing `models` from `django.db` and then accessing constraints like `models.CheckConstraint` or `models.UniqueConstraint`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.db import models

# Refer to constraints as models.<Foo>Constraint
# e.g., models.CheckConstraint, models.UniqueConstraint
```

----------------------------------------

TITLE: Defining Django DecimalField (999.99) - Python
DESCRIPTION: Example demonstrating how to configure a Django `DecimalField` to store numbers with a maximum of 5 digits in total, including 2 decimal places. This configuration allows storing values up to 999.99.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_17

LANGUAGE: Python
CODE:
```
models.DecimalField(..., max_digits=5, decimal_places=2)
```

----------------------------------------

TITLE: Django Fixture Directory Configuration
DESCRIPTION: Sets `FIXTURE_DIRS` as a list of directories for Django to search for fixture data files, supplementing each application's `fixtures` directory. Defaults to an empty list.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_44

LANGUAGE: plaintext
CODE:
```
FIXTURE_DIRS
----------------

Default: `[]` (Empty list)

List of directories searched for :ref:`fixture <fixtures-explanation>` files,
in addition to the `fixtures` directory of each application, in search order.

Note that these paths should use Unix-style forward slashes, even on Windows.

See :ref:`initial-data-via-fixtures` and :ref:`topics-testing-fixtures`.
```

----------------------------------------

TITLE: Sending a Custom Signal in Django
DESCRIPTION: This snippet demonstrates how to send a custom 'pizza_done' signal within a PizzaStore class. It shows the usage of the send() method to dispatch the signal with custom parameters.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
class PizzaStore:
    ...

    def send_pizza(self, toppings, size):
        pizza_done.send(sender=self.__class__, toppings=toppings, size=size)
        ...
```

----------------------------------------

TITLE: Registering Custom Admin Action with ModelAdmin in Django
DESCRIPTION: This snippet shows how to register the custom 'make_published' action with the ArticleAdmin class. It also sets up list_display and ordering options for the admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.contrib import admin
from myapp.models import Article

@admin.action(description="Mark selected stories as published")
def make_published(modeladmin, request, queryset):
    queryset.update(status="p")

class ArticleAdmin(admin.ModelAdmin):
    list_display = ["title", "status"]
    ordering = ["title"]
    actions = [make_published]

admin.site.register(Article, ArticleAdmin)
```

----------------------------------------

TITLE: Updating Existing Model Instance in Django 3.0
DESCRIPTION: Demonstrates how to update an existing model instance with a specific primary key value in Django 3.0, using update_or_create() or filter().update() methods instead of save().
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> MyModel.objects.update_or_create(pk=existing_pk, defaults={"name": "new name"})
>>> MyModel.objects.filter(pk=existing_pk).update(name="new name")
```

----------------------------------------

TITLE: Customizing Field Labels and Rendered Output in Django Forms - Python
DESCRIPTION: Demonstrates changing a form field's label at runtime and observing the effect on HTML output generated by as_div(). This allows for dynamic UI customization. Inputs include a form instance with fields; output is the altered HTML string.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
>>> f.as_div().split(\"</div>\")[0]\n'<div><label for=\"id_subject\">Subject:</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_subject\">'\n>>> f[\"subject\"].label = \"Topic\"\n>>> f.as_div().split(\"</div>\")[0]\n'<div><label for=\"id_subject\">Topic:</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_subject\">'
```

----------------------------------------

TITLE: Testing Custom Error Handlers in Django
DESCRIPTION: A complete example showing how to test custom error views. It defines a custom error handler, a view that raises PermissionDenied, and a test case that verifies the handler works correctly.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/views.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
from django.core.exceptions import PermissionDenied
from django.http import HttpResponse
from django.test import SimpleTestCase, override_settings
from django.urls import path


def response_error_handler(request, exception=None):
    return HttpResponse("Error handler content", status=403)


def permission_denied_view(request):
    raise PermissionDenied


urlpatterns = [
    path("403/", permission_denied_view),
]

handler403 = response_error_handler


# ROOT_URLCONF must specify the module that contains handler403 = ...
@override_settings(ROOT_URLCONF=__name__)
class CustomErrorHandlerTests(SimpleTestCase):
    def test_handler_renders_template_response(self):
        response = self.client.get("/403/")
        # Make assertions on the response here. For example:
        self.assertContains(response, "Error handler content", status_code=403)
```

----------------------------------------

TITLE: Defining URL Patterns with Application Namespace in Django
DESCRIPTION: Illustrates how to set up URL patterns in a Django application, including setting the app_name for namespace and defining URL patterns using path.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
from django.urls import path

from . import views

app_name = "polls"
urlpatterns = [
    path("", views.IndexView.as_view(), name="index"),
    path("<int:pk>/", views.DetailView.as_view(), name="detail"),
    ...,
]
```

----------------------------------------

TITLE: Implementing Person Model with Concatenated Name Display
DESCRIPTION: Demonstrates how to create a Person model with a full_name property using Django's Concat function for admin ordering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
from django.db.models import Value
from django.db.models.functions import Concat

class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)

    @admin.display(ordering=Concat("first_name", Value(" "), "last_name"))
    def full_name(self):
        return self.first_name + " " + self.last_name
```

----------------------------------------

TITLE: Demonstrating Django RESTRICT on_delete Behavior (pycon)
DESCRIPTION: An interactive Python session demonstrating the `on_delete=models.RESTRICT` behavior using the previously defined `Artist`, `Album`, and `Song` models. It shows scenarios where deletion is prevented and where it is allowed due to cascading relationships.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_31

LANGUAGE: pycon
CODE:
```
>>> artist_one = Artist.objects.create(name="artist one")
>>> artist_two = Artist.objects.create(name="artist two")
>>> album_one = Album.objects.create(artist=artist_one)
>>> album_two = Album.objects.create(artist=artist_two)
>>> song_one = Song.objects.create(artist=artist_one, album=album_one)
>>> song_two = Song.objects.create(artist=artist_one, album=album_two)
>>> album_one.delete()
# Raises RestrictedError.
>>> artist_two.delete()
# Raises RestrictedError.
>>> artist_one.delete()
(4, {'Song': 2, 'Album': 1, 'Artist': 1})
```

----------------------------------------

TITLE: Time Zone Selection Form Template in Django
DESCRIPTION: A Django template snippet that renders a form allowing users to select their preferred time zone. It highlights the currently active time zone and submits the selection to the set_timezone view.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_4

LANGUAGE: html
CODE:
```
{% load tz %}
{% get_current_timezone as TIME_ZONE %}
<form action="{% url 'set_timezone' %}" method="POST">
    {% csrf_token %}
    <label for="timezone">Time zone:</label>
    <select name="timezone">
        {% for city, tz in timezones.items %}
        <option value="{{ tz }}"{% if tz == TIME_ZONE %} selected{% endif %}>{{ city }}</option>
        {% endfor %}
    </select>
    <input type="submit" value="Set">
</form>
```

----------------------------------------

TITLE: Configuring ModelChoiceField with Custom Empty Labels in Django
DESCRIPTION: Examples of how to customize the empty label in a ModelChoiceField or disable it completely by setting empty_label to None.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
# A custom empty label
field1 = forms.ModelChoiceField(queryset=..., empty_label="(Nothing)")

# No empty label
field2 = forms.ModelChoiceField(queryset=..., empty_label=None)
```

----------------------------------------

TITLE: Defining WSGI_APPLICATION setting
DESCRIPTION: This setting specifies the Python path to the WSGI application object. It is used by Django's built-in servers. It usually points to a callable in the wsgi.py file created by django-admin startproject. If not set, django.core.wsgi.get_wsgi_application() is used.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_66



----------------------------------------

TITLE: Preserving Model State During Transaction Rollback in Django
DESCRIPTION: Example showing how to manually revert a model's field values when a transaction rollback occurs. This prevents inconsistent model state since Django doesn't automatically revert field values on rollback.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.db import DatabaseError, transaction

obj = MyModel(active=False)
obj.active = True
try:
    with transaction.atomic():
        obj.save()
except DatabaseError:
    obj.active = False

if obj.active:
    ...
```

----------------------------------------

TITLE: Creating an Empty Migration in Django
DESCRIPTION: Demonstrates how to create an empty migration file using Django's management command. This is useful for creating custom migrations or data migrations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_8

LANGUAGE: shell
CODE:
```
python manage.py makemigrations --empty yourappname
```

----------------------------------------

TITLE: Returning TemplateResponse Directly from Django View (Python)
DESCRIPTION: This code snippet shows a Django view function (`blog_index`) that directly returns a `TemplateResponse` object. It imports `TemplateResponse` and initializes it with the request object, the template name "entry_list.html", and a context dictionary containing all `Entry` objects (assuming `Entry` is a defined Django model). This serves as a concise way to render a template with context, acting as an alternative to `django.shortcuts.render()`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/template-response.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.template.response import TemplateResponse


def blog_index(request):
    return TemplateResponse(
        request, "entry_list.html", {"entries": Entry.objects.all()}
    )
```

----------------------------------------

TITLE: Overriding TestCase Setup and Teardown Methods
DESCRIPTION: Example showing the proper way to override setUpClass and tearDownClass methods in a TestCase subclass while ensuring the parent implementation is called.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
class MyTestCase(TestCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        ...

    @classmethod
    def tearDownClass(cls):
        ...
        super().tearDownClass()
```

----------------------------------------

TITLE: Creating a Formset with Multiple Empty Forms
DESCRIPTION: Demonstrates creating a formset with additional empty forms by setting the extra parameter, which determines how many blank forms appear beyond any initial data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> ArticleFormSet = formset_factory(ArticleForm, extra=2)
```

----------------------------------------

TITLE: Using Relative Paths with Extends Tag (Django)
DESCRIPTION: Shows examples of using the `{% extends %}` tag with relative paths (`./` and `../`) to specify parent templates. The paths are relative to the directory of the current template file.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_12

LANGUAGE: html+django
CODE:
```
{% extends "./base2.html" %}
{% extends "../base1.html" %}
{% extends "./my/base3.html" %}
```

----------------------------------------

TITLE: Registering URL for RecordInterestView in Django (Python)
DESCRIPTION: Defines a URL pattern in Django that routes requests for a specific author's interest page to the RecordInterestView class-based view. Uses Django's path function from django.urls and imports the custom view from books.views. Expects 'pk' as a URL parameter for identifying the Author instance.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.urls import path\nfrom books.views import RecordInterestView\n\nurlpatterns = [\n    # ...\n    path(\n        \"author/<int:pk>/interest/\",\n        RecordInterestView.as_view(),\n        name=\"author-interest\",\n    ),\n]
```

----------------------------------------

TITLE: Configuring Test Database Settings in Django (Python)
DESCRIPTION: This Python dictionary demonstrates how to configure specific settings for the test database within the main `DATABASES` configuration in a Django project. It shows setting a custom `NAME` ('mytestdatabase') for the test database associated with the 'default' database alias, overriding the default naming convention ('test_' + DATABASE_NAME). This configuration resides within the `TEST` dictionary nested inside a specific database connection's settings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_9

LANGUAGE: Python
CODE:
```
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "USER": "mydatabaseuser",
        "NAME": "mydatabase",
        "TEST": {
            "NAME": "mytestdatabase",
        },
    },
}
```

----------------------------------------

TITLE: Adding Optional Arguments to Django Management Commands
DESCRIPTION: Extends the custom management command with optional named arguments using the argparse library. Shows how to handle both positional and named arguments in the command handler.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-management-commands.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
class Command(BaseCommand):
    def add_arguments(self, parser):
        # Positional arguments
        parser.add_argument("poll_ids", nargs="+", type=int)

        # Named (optional) arguments
        parser.add_argument(
            "--delete",
            action="store_true",
            help="Delete poll instead of closing it",
        )

    def handle(self, *args, **options):
        # ...
        if options["delete"]:
            poll.delete()
        # ...
```

----------------------------------------

TITLE: Defining ForeignKey with Direct Model Reference
DESCRIPTION: Demonstrates how to define a ForeignKey field in a Django model by directly referencing the related model class, requiring the related model to be imported.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_26

LANGUAGE: python
CODE:
```
from django.db import models
from geography.models import ZipCode


class Restaurant(models.Model):
    # ...
    zip_code = models.ForeignKey(
        ZipCode,
        on_delete=models.SET_NULL,
        blank=True,
        null=True,
    )
```

----------------------------------------

TITLE: Custom Django Manager QuerySet Filtering Python
DESCRIPTION: Defines a custom `DahlBookManager` that filters the default QuerySet to only include books by "Roald Dahl" by overriding `get_queryset`. The `Book` model then uses both the default `models.Manager` (`objects`) and this custom manager (`dahl_objects`). Requires `django.db.models`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_3

LANGUAGE: python
CODE:
```
# First, define the Manager subclass.
class DahlBookManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(author="Roald Dahl")


# Then hook it into the Book model explicitly.
class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.CharField(max_length=50)

    objects = models.Manager()  # The default manager.
    dahl_objects = DahlBookManager()  # The Dahl-specific manager.
```

----------------------------------------

TITLE: Displaying Grouped Content with ifchanged - HTML+Django Template - html+django
DESCRIPTION: Demonstrates use of the 'ifchanged' tag in a loop to conditionally display information only when the relevant value changes, such as rendering a date or hour only on change. Assumes the presence of 'days' iterable in the context, with each 'date' object supporting date formatting. When using variable arguments, the tag checks for changes in one or several values between iterations. Input variables affect output HTML structure, and requires context setup for loops.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_21

LANGUAGE: html+django
CODE:
```
<h1>Archive for {{ year }}</h1>

{% for date in days %}
    {% ifchanged %}<h3>{{ date|date:"F" }}</h3>{% endifchanged %}
    <a href="{{ date|date:"M/d"|lower }}/">{{ date|date:"j" }}</a>
{% endfor %}
```

LANGUAGE: html+django
CODE:
```
{% for date in days %}
    {% ifchanged date.date %} {{ date.date }} {% endifchanged %}
    {% ifchanged date.hour date.date %}
        {{ date.hour }}
    {% endifchanged %}
{% endfor %}
```

LANGUAGE: html+django
CODE:
```
{% for match in matches %}
    <div style="background-color:
        {% ifchanged match.ballot_id %}
            {% cycle "red" "blue" %}
        {% else %}
            gray
        {% endifchanged %}
    ">{{ match }}</div>
{% endfor %}
```

----------------------------------------

TITLE: Setting Up Test Environment in Python
DESCRIPTION: This method sets up the test environment by calling setup_test_environment and configuring the DEBUG setting. It prepares the system for test execution.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
def setup_test_environment(self, **kwargs):
    setup_test_environment()
    django.conf.settings.DEBUG = self.debug_mode
```

----------------------------------------

TITLE: Setting `app_label` in Django Model Meta (Python)
DESCRIPTION: Specifies the application label (`app_label`) for a Django model defined outside of an application listed in `INSTALLED_APPS`. This ensures Django knows which application the model belongs to.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
app_label = "myapp"
```

----------------------------------------

TITLE: Configuring Inline Admin for Generic Relations
DESCRIPTION: Sets up an admin interface for Product with GenericTabularInline to manage related Image objects. Uses the special GenericTabularInline class from django.contrib.contenttypes.admin to properly handle the generic relationship.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_74

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.contrib.contenttypes.admin import GenericTabularInline

from myapp.models import Image, Product


class ImageInline(GenericTabularInline):
    model = Image


class ProductAdmin(admin.ModelAdmin):
    inlines = [
        ImageInline,
    ]


admin.site.register(Product, ProductAdmin)
```

----------------------------------------

TITLE: Limitations of prefetch_related with filtered queries in Django
DESCRIPTION: Illustrates a limitation of prefetch_related() where subsequent filtered queries on related objects will ignore the prefetched cache and execute new database queries.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_40

LANGUAGE: python
CODE:
```
>>> pizzas = Pizza.objects.prefetch_related("toppings")
>>> [list(pizza.toppings.filter(spicy=True)) for pizza in pizzas]
```

----------------------------------------

TITLE: Using vary_on_cookie Decorator in Django
DESCRIPTION: Demonstrates the vary_on_cookie decorator which is a convenience shortcut for vary_on_headers("Cookie"). This makes the cache vary based on the Cookie header, common for user-specific content.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_41

LANGUAGE: python
CODE:
```
@vary_on_cookie
def my_view(request): ...
```

----------------------------------------

TITLE: Creating CSRF-Enforcing Test Client in Python
DESCRIPTION: Demonstrates how to create a test client that enforces CSRF checks for testing purposes.
SOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> from django.test import Client
>>> csrf_client = Client(enforce_csrf_checks=True)
```

----------------------------------------

TITLE: Applying ASGI Middleware in Django
DESCRIPTION: This snippet demonstrates how to wrap Django's ASGI application object with middleware. It imports a hypothetical middleware class and applies it to the existing application.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/index.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from some_asgi_library import AmazingMiddleware

application = AmazingMiddleware(application)
```

----------------------------------------

TITLE: Post-Migrate Signal Handler Registration
DESCRIPTION: Example of registering a callback function for the post_migrate signal in a Django AppConfig.
SOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.apps import AppConfig
from django.db.models.signals import post_migrate


def my_callback(sender, **kwargs):
    # Your specific logic here
    pass


class MyAppConfig(AppConfig):
    ...

    def ready(self):
        post_migrate.connect(my_callback, sender=self)
```

----------------------------------------

TITLE: Multiple Field Validation Errors in Django
DESCRIPTION: Shows how to raise validation errors for multiple fields simultaneously using a dictionary of ValidationError objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
raise ValidationError(
    {
        "title": ValidationError(_("Missing title."), code="required"),
        "pub_date": ValidationError(_("Invalid date."), code="invalid"),
    }
)
```

----------------------------------------

TITLE: Persistence of F() Assignments Across Multiple Saves
DESCRIPTION: Illustrates that `F()` objects assigned to model fields remain attached to the model instance after `save()` and will be re-applied on subsequent `save()` calls. In this example, `stories_filed` is incremented twice. To avoid this behavior, the model object should be reloaded after saving, for instance, using `refresh_from_db()`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
reporter = Reporters.objects.get(name="Tintin")
reporter.stories_filed = F("stories_filed") + 1
reporter.save()

reporter.name = "Tintin Jr."
reporter.save()
```

----------------------------------------

TITLE: Alternative Method for Saving a File to a Django Model Instance
DESCRIPTION: Demonstrates an equivalent way to save a new file to a Django model instance using a single line of code. This method automatically saves the model instance after saving the file.
SOURCE: https://github.com/django/django/blob/main/docs/ref/files/file.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> car.photo.save("myphoto.jpg", content, save=True)
```

----------------------------------------

TITLE: Slicing String Fields using F() Expressions in Django
DESCRIPTION: Demonstrates using Python's array-slicing syntax in conjunction with `F()` expressions to modify string-based, text-based, or ArrayFields directly in the database. This example replaces a writer's name with a substring of itself (characters from index 1 up to, but not including, index 5). Requires `refresh_from_db()` to see the change on the instance.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_6

LANGUAGE: pycon
CODE:
```
>>> # Replacing a name with a substring of itself.
>>> writer = Writers.objects.get(name="Priyansh")
>>> writer.name = F("name")[1:5]
>>> writer.save()
>>> writer.refresh_from_db()
>>> writer.name
'riya'
```

----------------------------------------

TITLE: Configuring Django MySQL Connection via Option File - Python
DESCRIPTION: This Python snippet shows how to configure Django's database settings to connect to a MySQL database using an option file (like my.cnf) specified via the read_default_file key in the OPTIONS dictionary. This allows database credentials and other connection parameters to be managed outside the Django settings file.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_6

LANGUAGE: Python
CODE:
```
# settings.py
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "OPTIONS": {
            "read_default_file": "/path/to/my.cnf",
        },
    }
}
```

----------------------------------------

TITLE: Exempting a View from X-Frame-Options in Django
DESCRIPTION: This snippet shows how to use the xframe_options_exempt decorator to prevent the X-Frame-Options header from being set for a specific view. This allows the page to be loaded in a frame on any site.
SOURCE: https://github.com/django/django/blob/main/docs/ref/clickjacking.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
from django.views.decorators.clickjacking import xframe_options_exempt


@xframe_options_exempt
def ok_to_load_in_a_frame(request):
    return HttpResponse("This page is safe to load in a frame on any site.")
```

----------------------------------------

TITLE: Implementing Custom Django Template Tag - HTML Usage Example
DESCRIPTION: Example showing how to use the custom 'upper' template tag in Django templates. The tag converts enclosed content to uppercase, including variable interpolation.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_40

LANGUAGE: html
CODE:
```
{% upper %}This will appear in uppercase, {{ your_name }}.{% endupper %}
```

----------------------------------------

TITLE: Configuring LOCALE_PATHS in Django Settings
DESCRIPTION: Example of setting up LOCALE_PATHS in Django settings to specify directories where Django should look for translation files. This helps Django locate translation files for internationalization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_53

LANGUAGE: Python
CODE:
```
LOCALE_PATHS = [
    "/home/www/project/common_files/locale",
    "/var/local/translations/locale",
]
```

----------------------------------------

TITLE: Using Custom Template Tag in Django Template
DESCRIPTION: This example demonstrates how to use a custom template tag in a Django template, passing both positional and keyword arguments to the tag.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_20

LANGUAGE: html+django
CODE:
```
{% my_tag 123 "abcd" book.title warning=message|lower profile=user.profile %}
```

----------------------------------------

TITLE: Setting Explicit Verbose Name for Django CharField (Python)
DESCRIPTION: Demonstrates setting an explicit verbose name for a `CharField` by providing the string as the first positional argument. This verbose name is used in forms and the Django admin interface for display purposes.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_11

LANGUAGE: Python
CODE:
```
first_name = models.CharField("person's first name", max_length=30)
```

----------------------------------------

TITLE: Example of Import Organization in Django Files
DESCRIPTION: Demonstrates the correct import organization pattern for Django files. Imports are grouped by category (future, standard library, third-party, Django, local Django, try/except) and sorted alphabetically within each group.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
# future
from __future__ import unicode_literals

# standard library
import json
from itertools import chain

# third-party
import bcrypt

# Django
from django.http import Http404
from django.http.response import (
    Http404,
    HttpResponse,
    HttpResponseNotAllowed,
    StreamingHttpResponse,
    cookie,
)

# local Django
from .models import LogEntry

# try/except
try:
    import yaml
except ImportError:
    yaml = None

CONSTANT = "foo"


class Example: ...
```

----------------------------------------

TITLE: Accessing json_script Data in JavaScript
DESCRIPTION: Example of accessing data from json_script filter in JavaScript code.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_74

LANGUAGE: javascript
CODE:
```
const value = JSON.parse(document.getElementById('hello-data').textContent);
```

----------------------------------------

TITLE: Custom Admin Form Override for View Permission
DESCRIPTION: Shows how to override ModelAdmin.get_form to handle view-only access by checking change permissions and returning appropriate form.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.1.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
class MyAdmin(admin.ModelAdmin):
    def get_form(self, request, obj=None, **kwargs):
        if not self.has_change_permission(request, obj):
            return super().get_form(request, obj, **kwargs)
        return CustomForm
```

----------------------------------------

TITLE: Django Admin Tabular Inline Configuration
DESCRIPTION: Shows how to use TabularInline for a more compact display of inline related objects.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class ChoiceInline(admin.TabularInline): ...
```

----------------------------------------

TITLE: Getting Explicit SMTP Email Connection in Django 1.2+ (Python)
DESCRIPTION: This snippet demonstrates how to explicitly request an SMTP email connection using `get_connection()` by providing the backend's fully qualified path. This is useful when specific backend functionality (SMTP in this case) is required, regardless of the default `EMAIL_BACKEND` setting.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
from django.core.mail import get_connection

connection = get_connection("django.core.mail.backends.smtp.EmailBackend")
messages = get_notification_email()
connection.send_messages(messages)
```

----------------------------------------

TITLE: Translating Model Method Descriptions with @display Decorator
DESCRIPTION: Shows how to use the @display decorator with a translatable description for a model method, which is useful for providing localized descriptions in the admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_14

LANGUAGE: Python
CODE:
```
from django.contrib import admin
from django.db import models
from django.utils.translation import gettext_lazy as _


class MyThing(models.Model):
    kind = models.ForeignKey(
        ThingKind,
        on_delete=models.CASCADE,
        related_name="kinds",
        verbose_name=_("kind"),
    )

    @admin.display(description=_("Is it a mouse?"))
    def is_mouse(self):
        return self.kind.type == MOUSE_TYPE
```

----------------------------------------

TITLE: Registering a Django Template Tag via Decorator with Name (Python)
DESCRIPTION: This Python snippet shows an alternative method for registering a Django template tag using the `@register.tag` decorator. The `name` argument explicitly sets the tag's name in the template to 'current_time'. The decorated function `do_current_time` is the compilation function for the tag.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
@register.tag(name="current_time")
def do_current_time(parser, token): ...
```

----------------------------------------

TITLE: Using Async Streaming Generator in a Django View
DESCRIPTION: Defines an asynchronous Django view function `my_streaming_view` that takes a request object. It returns a `StreamingHttpResponse`, initializing it with the result of calling the `streaming_response` asynchronous generator function. This demonstrates how to connect the disconnect-handling generator to an actual HTTP response.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
async def my_streaming_view(request):
    return StreamingHttpResponse(streaming_response())
```

----------------------------------------

TITLE: Using escapejs Filter in Django Templates
DESCRIPTION: Example of using the escapejs filter to safely embed JavaScript values from Django template variables.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_69

LANGUAGE: html+django
CODE:
```
<script>
let myValue = '{{ value|escapejs }}'
```

----------------------------------------

TITLE: Wrapping Django ValidationError Messages with gettext - Python
DESCRIPTION: Contrasts the recommended practice of wrapping error messages with Django's translation (_), allowing error messages to be translated for internationalization, against non-localized versions. Intended for use in custom ValidationError raising within forms or model validation, where localization is desired. Requires Django's translation utility and is constrained by the need for _ to be imported and translation catalogs present.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
# Good
ValidationError(_("Invalid value"))

# Bad
ValidationError("Invalid value")
```

----------------------------------------

TITLE: Extracting with Explicit Timezone in Django ORM - Python
DESCRIPTION: Illustrates extraction of date/time components using the tzinfo parameter directly in the Extract functions. This requires zoneinfo and the Django model. The explicit tzinfo argument overrides any active Django timezone for precise localization and is needed when extracting according to a specific timezone context.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_9

LANGUAGE: Python
CODE:
```
>>> import zoneinfo\n>>> melb = zoneinfo.ZoneInfo("Australia/Melbourne")\n>>> Experiment.objects.annotate(\n...     day=ExtractDay("start_datetime", tzinfo=melb),\n...     weekday=ExtractWeekDay("start_datetime", tzinfo=melb),\n...     isoweekday=ExtractIsoWeekDay("start_datetime", tzinfo=melb),\n...     hour=ExtractHour("start_datetime", tzinfo=melb),\n... ).values("day", "weekday", "isoweekday", "hour").get(\n...     end_datetime__year=ExtractYear("start_datetime"),\n... )\n{'day': 16, 'weekday': 3, 'isoweekday': 2, 'hour': 9}\n
```

----------------------------------------

TITLE: Basic Savepoint Handling with Nested Atomic Blocks
DESCRIPTION: Illustrates how savepoints work with on_commit callbacks in nested atomic blocks. Both callbacks will be executed when the outer transaction commits successfully.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
with transaction.atomic():  # Outer atomic, start a new transaction
    transaction.on_commit(foo)

    with transaction.atomic():  # Inner atomic block, create a savepoint
        transaction.on_commit(bar)

# foo() and then bar() will be called when leaving the outermost block
```

----------------------------------------

TITLE: Inheriting Meta Class in Django Model
DESCRIPTION: Demonstrates how a child model inherits from a base model and explicitly defines its Meta class, inheriting from the parent's Meta class to override specific options like `db_table`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_37

LANGUAGE: Python
CODE:
```
            ordering = ["name"]


    class Student(CommonInfo):
        # ...
        class Meta(CommonInfo.Meta):
            db_table = "student_info"
```

----------------------------------------

TITLE: CSV Template for Django's Template System
DESCRIPTION: A Django template that iterates over data rows and formats them as CSV. It uses the addslashes filter to handle quotes properly in the output.
SOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-csv.txt#2025-04-23_snippet_3

LANGUAGE: html+django
CODE:
```
{% for row in data %}"{{ row.0|addslashes }}", "{{ row.1|addslashes }}", "{{ row.2|addslashes }}", "{{ row.3|addslashes }}", "{{ row.4|addslashes }}"
{% endfor %}
```

----------------------------------------

TITLE: Dynamic Publisher ListView Implementation
DESCRIPTION: ListView with custom get_queryset and get_context_data methods for dynamic publisher filtering
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.shortcuts import get_object_or_404
from django.views.generic import ListView
from books.models import Book, Publisher


class PublisherBookListView(ListView):
    template_name = "books/books_by_publisher.html"

    def get_queryset(self):
        self.publisher = get_object_or_404(Publisher, name=self.kwargs["publisher"])
        return Book.objects.filter(publisher=self.publisher)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["publisher"] = self.publisher
        return context
```

----------------------------------------

TITLE: Translating ForeignKey Verbose Names in Django Models
DESCRIPTION: Shows how to make the verbose name of a ForeignKey relationship translatable using gettext_lazy(), allowing for localized field names in the admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_12

LANGUAGE: Python
CODE:
```
class MyThing(models.Model):
    kind = models.ForeignKey(
        ThingKind,
        on_delete=models.CASCADE,
        related_name="kinds",
        verbose_name=_("kind"),
    )
```

----------------------------------------

TITLE: Implementing Custom Template Tag Renderer in Python
DESCRIPTION: This class defines the Node subclass for the 'current_time' custom tag. It includes the __init__ method to store the format string and the render method to generate the output.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
import datetime
from django import template


class CurrentTimeNode(template.Node):
    def __init__(self, format_string):
        self.format_string = format_string

    def render(self, context):
        return datetime.datetime.now().strftime(self.format_string)
```

----------------------------------------

TITLE: Customizing Django Storage Backends in Settings (Python)
DESCRIPTION: This snippet demonstrates how to define additional or custom file storage options in the Django STORAGES setting. It shows adding a new alias ('example'), specifying the backend and its initialization options such as file location and base URL. The STORAGES setting is a nested dictionary whose keys are storage aliases and whose values specify backend and custom options. Prerequisites include available backend classes and directory paths; Output is an updated Django storage configuration.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_56

LANGUAGE: python
CODE:
```
STORAGES = {
    # ...
    "example": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
        "OPTIONS": {
            "location": "/example",
            "base_url": "/example/",
        },
    },
}
```

----------------------------------------

TITLE: Creating Custom FieldListFilter with Custom Separator in Django Admin
DESCRIPTION: Demonstrates how to create a custom FieldListFilter that uses a custom separator for multiple values in the query string.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
class FilterWithCustomSeparator(admin.FieldListFilter):
    # custom list separator that should be used to separate values.
    list_separator = "|"

    def __init__(self, field, request, params, model, model_admin, field_path):
        self.lookup_kwarg = "%s__in" % field_path
        super().__init__(field, request, params, model, model_admin, field_path)

    def expected_parameters(self):
        return [self.lookup_kwarg]
```

----------------------------------------

TITLE: Using Replace Function in Django ORM
DESCRIPTION: Demonstrates text replacement in database fields using the Replace function
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_35

LANGUAGE: python
CODE:
```
>>> from django.db.models import Value
>>> from django.db.models.functions import Replace
>>> Author.objects.create(name="Margaret Johnson")
>>> Author.objects.create(name="Margaret Smith")
>>> Author.objects.update(name=Replace("name", Value("Margaret"), Value("Margareth")))
2
>>> Author.objects.values("name")
<QuerySet [{'name': 'Margareth Johnson'}, {'name': 'Margareth Smith'}]>
```

----------------------------------------

TITLE: Configuring File Handler in Django Logging
DESCRIPTION: Shows how to configure a file handler to save logs to a general.log file with DEBUG level.
SOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
"handlers": {
    "file": {
        "class": "logging.FileHandler",
        "filename": "general.log",
    },
}
```

----------------------------------------

TITLE: Deep Relationship Aggregation in Django
DESCRIPTION: Demonstrates aggregating across deep relationship chains to find the youngest author age.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
Store.objects.aggregate(youngest_age=Min("books__authors__age"))
```

----------------------------------------

TITLE: Querying Current Time with Now() in Django ORM - Python
DESCRIPTION: Shows filtering records against the database server's current date and time using Now(). Requires Django ORM and a model with a published DateTimeField. The filter returns objects published on or before the current timestamp; database-specific differences in retrieving current time are handled by Django under the hood.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_10

LANGUAGE: Python
CODE:
```
>>> from django.db.models.functions import Now\n>>> Article.objects.filter(published__lte=Now())\n<QuerySet [<Article: How to Django>]>\n
```

----------------------------------------

TITLE: Accessing ManyToMany Through Model Instance Directly - Django - Pycon
DESCRIPTION: Demonstrates how to retrieve a specific instance of the intermediate `through` model (`Membership`) by querying it directly using its foreign keys to the related objects. Shows accessing attributes of the intermediate instance.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_24

LANGUAGE: pycon
CODE:
```
>>> ringos_membership = Membership.objects.get(group=beatles, person=ringo)
>>> ringos_membership.date_joined
datetime.date(1962, 8, 16)
>>> ringos_membership.invite_reason
'Needed a new drummer.'
```

----------------------------------------

TITLE: Applying FilteredRelation for Conditional JOINs in Django ORM with Python
DESCRIPTION: Illustrates the use of FilteredRelation() to create conditional JOIN annotations in Django querysets. By providing a relation name and a Q condition, it allows annotating filtered related objects for further queryset filtering. The example finds restaurants having vegetarian pizzas with 'mozzarella' in their name, improving query performance over filtering directly in the WHERE clause. Limitations include incompatibility with QuerySet.only(), prefetch_related(), and generic foreign keys inherited from parents.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_127

LANGUAGE: pycon
CODE:
```
>>> from django.db.models import FilteredRelation, Q
>>> Restaurant.objects.annotate(
...     pizzas_vegetarian=FilteredRelation(
...         "pizzas",
...         condition=Q(pizzas__vegetarian=True),
...     ),
... ).filter(pizzas_vegetarian__name__icontains="mozzarella")
```

LANGUAGE: pycon
CODE:
```
>>> Restaurant.objects.filter(
...     pizzas__vegetarian=True,
...     pizzas__name__icontains="mozzarella",
... )
```

----------------------------------------

TITLE: Configuring SQLite Connection Timeout in Django Settings
DESCRIPTION: Configure the SQLite database connection timeout option within the Django settings file to make SQLite wait longer before raising 'database is locked' errors due to concurrency issues.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_11

LANGUAGE: python
CODE:
```
"OPTIONS": {
    # ...
    "timeout": 20,
    # ...
}
```

----------------------------------------

TITLE: Implementing Auth Router in Django
DESCRIPTION: Implementation of a Django database router to direct all operations for auth and contenttypes models to a dedicated auth_db database.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class AuthRouter:
    """
    A router to control all database operations on models in the
    auth and contenttypes applications.
    """

    route_app_labels = {"auth", "contenttypes"}

    def db_for_read(self, model, **hints):
        """
        Attempts to read auth and contenttypes models go to auth_db.
        """
        if model._meta.app_label in self.route_app_labels:
            return "auth_db"
        return None

    def db_for_write(self, model, **hints):
        """
        Attempts to write auth and contenttypes models go to auth_db.
        """
        if model._meta.app_label in self.route_app_labels:
            return "auth_db"
        return None

    def allow_relation(self, obj1, obj2, **hints):
        """
        Allow relations if a model in the auth or contenttypes apps is
        involved.
        """
        if (
            obj1._meta.app_label in self.route_app_labels
            or obj2._meta.app_label in self.route_app_labels
        ):
            return True
        return None

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        """
        Make sure the auth and contenttypes apps only appear in the
        'auth_db' database.
        """
        if app_label in self.route_app_labels:
            return db == "auth_db"
        return None
```

----------------------------------------

TITLE: Filtering and Ordering with Collation in Django ORM with Python
DESCRIPTION: These snippets demonstrate using the Collate function to filter or order by fields using a specified collation, useful for case-insensitive or locale-aware queries in Django. Required dependencies: the Collate function and optionally Value for explicit value wrapping. Parameters include the value, field name, and the collation name. Outputs are querysets filtered or ordered according to the collation, such as case-insensitive matches or custom alphabetic ordering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> Author.objects.filter(name=Collate(Value("john"), "nocase"))
<QuerySet [<Author: John>, <Author: john>]>
```

LANGUAGE: python
CODE:
```
>>> Author.objects.order_by(Collate("name", "et-x-icu"))
<QuerySet [<Author: Ursula>, <Author: Veronika>, <Author: Ülle>]>
```

----------------------------------------

TITLE: Defining a Custom Model Manager for Use in Django Migrations
DESCRIPTION: This example demonstrates how to create a custom model manager that can be used in migrations by setting the use_in_migrations attribute to True.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
class MyManager(models.Manager):
    use_in_migrations = True


class MyModel(models.Model):
    objects = MyManager()
```

----------------------------------------

TITLE: Customizing Choice Fields in Django ModelAdmin
DESCRIPTION: This method demonstrates how to override the default formfield for choice fields in the admin interface, providing different choices based on user permissions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_52

LANGUAGE: python
CODE:
```
class MyModelAdmin(admin.ModelAdmin):
    def formfield_for_choice_field(self, db_field, request, **kwargs):
        if db_field.name == "status":
            kwargs["choices"] = [
                ("accepted", "Accepted"),
                ("denied", "Denied"),
            ]
            if request.user.is_superuser:
                kwargs["choices"].append(("ready", "Ready for deployment"))
        return super().formfield_for_choice_field(db_field, request, **kwargs)
```

----------------------------------------

TITLE: Customizing SelectDateWidget Empty Labels in Python
DESCRIPTION: This Python snippet demonstrates how to customize the placeholder labels for the year, month, and day select boxes within a Django SelectDateWidget. The `empty_label` attribute can accept a single string for all selects or a tuple/list of three strings for individual customization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
# A custom empty label with string
field1 = forms.DateField(widget=SelectDateWidget(empty_label="Nothing"))

# A custom empty label with tuple
field1 = forms.DateField(
    widget=SelectDateWidget(
        empty_label=("Choose Year", "Choose Month", "Choose Day"),
    ),
)
```

----------------------------------------

TITLE: Using timeuntil Filter in Django Templates
DESCRIPTION: The timeuntil filter is similar to timesince, but measures the time from now until the given date. It can take an optional argument for the comparison point.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_91

LANGUAGE: html+django
CODE:
```
{{ conference_date|timeuntil:from_date }}
```

----------------------------------------

TITLE: If/Elif Equivalent of the Firstof Tag (Django)
DESCRIPTION: Provides the equivalent logic of the `{% firstof var1 var2 var3 %}` tag using standard `{% if %}` and `{% elif %}` tags. This clarifies the behavior of `firstof` by showing its conditional structure.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_16

LANGUAGE: html+django
CODE:
```
{% if var1 %}
    {{ var1 }}
{% elif var2 %}
    {{ var2 }}

```

----------------------------------------

TITLE: Using json_script Filter
DESCRIPTION: Shows how to safely output Python objects as JSON in a script tag for JavaScript use.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_73

LANGUAGE: html+django
CODE:
```
{{ value|json_script:"hello-data" }}
```

----------------------------------------

TITLE: Custom Formset Validation Implementation
DESCRIPTION: Implements custom validation to ensure unique article titles in a formset
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from django.core.exceptions import ValidationError
from django.forms import BaseFormSet
from django.forms import formset_factory
from myapp.forms import ArticleForm

class BaseArticleFormSet(BaseFormSet):
    def clean(self):
        """Checks that no two articles have the same title."""
        if any(self.errors):
            # Don't bother validating the formset unless each form is valid on its own
            return
        titles = set()
        for form in self.forms:
            if self.can_delete and self._should_delete_form(form):
                continue
            title = form.cleaned_data.get("title")
            if title in titles:
                raise ValidationError("Articles in a set must have distinct titles.")
            titles.add(title)
```

----------------------------------------

TITLE: Configuring Cached Sitemap Index with Custom URL Name in Django URLs
DESCRIPTION: This Python code illustrates how to configure sitemap index and individual sitemap views in `urls.py` when applying caching and using a custom URL name for the sitemap view. It uses the `cache_page` decorator to cache both the index and sitemap views for 86400 seconds (24 hours). Crucially, it passes `sitemap_url_name='sitemaps'` to the `views.index` configuration, which matches the `name='sitemaps'` assigned to the individual sitemap URL pattern. This allows the index view to correctly generate URLs for the cached sitemap sections.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.contrib.sitemaps import views as sitemaps_views
from django.views.decorators.cache import cache_page

urlpatterns = [
    path(
        "sitemap.xml",
        cache_page(86400)(sitemaps_views.index),
        {"sitemaps": sitemaps, "sitemap_url_name": "sitemaps"},
    ),
    path(
        "sitemap-<section>.xml",
        cache_page(86400)(sitemaps_views.sitemap),
        {"sitemaps": sitemaps},
        name="sitemaps",
    ),
]
```

----------------------------------------

TITLE: Retrieving the Earliest Object with earliest() Method in Django ORM
DESCRIPTION: This snippet details earliest() for fetching the earliest object based on specified fields, with an asynchronous variant aearliest(). It functions similarly to latest() but retrieves the first in order. Requires proper model ordering and get_latest_by configuration. Dependencies include Django ORM.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_82

LANGUAGE: Python
CODE:
```
Entry.objects.earliest("pub_date")
Entry.objects.earliest("pub_date", "-expire_date")
```

----------------------------------------

TITLE: Configuring Complex ModelAdmin Fieldsets in Django
DESCRIPTION: Demonstrates how to create complex fieldset layouts for the admin interface, including collapsible sections and custom CSS classes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.contrib import admin


class FlatPageAdmin(admin.ModelAdmin):
    fieldsets = [
        (
            None,
            {
                "fields": ["url", "title", "content", "sites"],
            },
        ),
        (
            "Advanced options",
            {
                "classes": ["collapse"],
                "fields": ["registration_required", "template_name"],
            },
        ),
    ]
```

----------------------------------------

TITLE: Using async_to_sync Adapter Function
DESCRIPTION: Examples of using async_to_sync as both a direct wrapper and decorator to convert async functions to sync functions. Preserves threadlocals and contextvars across the boundary.
SOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from asgiref.sync import async_to_sync


async def get_data(): ...


sync_get_data = async_to_sync(get_data)


@async_to_sync
async def get_other_data(): ...
```

----------------------------------------

TITLE: Setting a Custom JSON Encoder for JsonResponse - Django - Python
DESCRIPTION: This snippet shows how to customize the JSON encoding process for a JsonResponse in Django by specifying a custom encoder class via the 'encoder' parameter. Replace MyJSONEncoder with your own encoder subclassing DjangoJSONEncoder or another JSON encoder. All 'data' supplied will be serialized using the provided encoder. This is useful for complex serialization or supporting data types not handled by the default encoder.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
>>> response = JsonResponse(data, encoder=MyJSONEncoder)
```

----------------------------------------

TITLE: Configuring Filesystem Cache in Django
DESCRIPTION: Setting up a file-based cache backend in Django settings. This configuration stores each cache value as a separate file in the specified directory.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": "/var/tmp/django_cache",
    }
}
```

----------------------------------------

TITLE: Implementing a Context-Setting Node with Dynamic Variable Name (Python)
DESCRIPTION: This Python snippet defines `CurrentTimeNode3`, a Django template Node designed to work with the 'as var_name' syntax. It stores both the format string and the target variable name (`var_name`) provided during compilation. The `render` method calculates and formats the current time, then assigns it to the context using the dynamically provided variable name: `context[self.var_name]`. It returns an empty string.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_36

LANGUAGE: python
CODE:
```
class CurrentTimeNode3(template.Node):
    def __init__(self, format_string, var_name):
        self.format_string = format_string
        self.var_name = var_name

    def render(self, context):
        context[self.var_name] = datetime.datetime.now().strftime(self.format_string)
        return ""
```

----------------------------------------

TITLE: Chaining annotate() before values() with Transforms Python
DESCRIPTION: Another equivalent method showing how to apply an annotation (with a transform and related lookup) before the values() call. This explicitly separates the annotation step from the selection of fields in values() and subsequent aggregation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_27

LANGUAGE: Python
CODE:
```
>>> Blog.objects.annotate(entry__authors__name__lower=Lower("entry__authors__name")).values(
...     "entry__authors__name__lower"
... ).annotate(entries=Count("entry"))
```

----------------------------------------

TITLE: Prefetch Related Lookup Ordering Examples and Pitfalls
DESCRIPTION: Illustrates the importance of lookup ordering in prefetch_related. Shows working examples and common errors that can occur when lookups are improperly ordered.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_54

LANGUAGE: python
CODE:
```
>>> prefetch_related("pizzas__toppings", "pizzas")

>>> prefetch_related("pizzas__toppings", Prefetch("pizzas", queryset=Pizza.objects.all()))

>>> prefetch_related("pizza_list__toppings", Prefetch("pizzas", to_attr="pizza_list"))
```

----------------------------------------

TITLE: Running Django Server on Hostname (IPv4) - Shell
DESCRIPTION: Starts the Django development server, binding to the address resolved from the hostname `localhost` (typically 127.0.0.1) on the specified port (8000). This uses the hostname lookup for binding.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_28

LANGUAGE: shell
CODE:
```
django-admin runserver localhost:8000
```

----------------------------------------

TITLE: Implementing Feed Content Methods in Django
DESCRIPTION: Core methods for generating feed content including items and get_object implementations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
def items(self, obj):
    """
    Takes the object returned by get_object() and returns a list of
    items to publish in this feed.
    """

def get_object(self, request, *args, **kwargs):
    """
    Takes the current request and the arguments from the URL, and
    returns an object represented by this feed. Raises
    django.core.exceptions.ObjectDoesNotExist on error.
    """
```

----------------------------------------

TITLE: Generated HTML for ModelChoiceField with Default to_field_name in Django
DESCRIPTION: HTML output generated by a ModelChoiceField using the default to_field_name, which uses the primary key of each object as option values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_22

LANGUAGE: html
CODE:
```
<select id="id_field1" name="field1">
<option value="obj1.pk">Object1</option>
<option value="obj2.pk">Object2</option>
...
</select>
```

----------------------------------------

TITLE: Using blocktranslate tag with pluralization in Django templates
DESCRIPTION: Demonstrates how to use the {% blocktranslate %} tag with pluralization in Django templates.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_25

LANGUAGE: html+django
CODE:
```
{% blocktranslate count counter=list|length %}
There is only one {{ name }} object.
{% plural %}
There are {{ counter }} {{ name }} objects.
{% endblocktranslate %}
```

----------------------------------------

TITLE: Using a Callable for Dynamic Initial Field Values
DESCRIPTION: Illustrates setting the `initial` argument of a Django form field (`DateField`) to a callable (e.g., `datetime.date.today`). The callable is executed only when the unbound form is rendered, allowing for dynamic initial values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_8

LANGUAGE: pycon
CODE:
```
>>> import datetime
>>> class DateForm(forms.Form):
...     day = forms.DateField(initial=datetime.date.today)
...
>>> print(DateForm())
<div><label for="id_day">Day:</label><input type="text" name="day" value="2023-02-11" required id="id_day"></div>
```

----------------------------------------

TITLE: Accessing Django Field Choice Display Value (pycon)
DESCRIPTION: Demonstrates how to access the display value of a Django model field defined with choices using the automatically generated get_FOO_display() method in the Django shell.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_6

LANGUAGE: pycon
CODE:
```
>>> p = Person(name="Fred Flintstone", shirt_size="L")
>>> p.save()
>>> p.shirt_size
'L'
>>> p.get_shirt_size_display()
'Large'
```

----------------------------------------

TITLE: Accessing Custom Django Model Methods in Templates
DESCRIPTION: Shows how a custom method (`foo`), defined on a Django model (`Task` in the previous Python example), can be called directly from within a template using dot notation (`{{ task.foo }}`). Assumes a `Task` instance is passed to the template context as `task`. Arguments cannot be passed to methods called from templates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_28

LANGUAGE: html+django
CODE:
```
{{ task.foo }}
```

----------------------------------------

TITLE: Chaining order_by() Before values() (Preferred Style) Python
DESCRIPTION: Demonstrates chaining the order_by() method before values(). This is the preferred Django style, placing methods that affect the database query (like order_by()) before methods that affect the output format (like values()).
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_29

LANGUAGE: Python
CODE:
```
Blog.objects.order_by("id").values()
```

----------------------------------------

TITLE: Configuring Memcached Backend with IP/Port in Django (Python)
DESCRIPTION: This Python snippet shows how to configure the Django `CACHES` setting to use a single Memcached instance running on localhost (127.0.0.1) port 11211. It specifies the `PyMemcacheCache` backend, which requires the `pymemcache` Python library.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
        "LOCATION": "127.0.0.1:11211",
    }
}
```

----------------------------------------

TITLE: Effect of Deleting an Object on M2M Relationship (pycon)
DESCRIPTION: Shows the impact of deleting a `Publication` instance (`p1`) using `delete()`. Subsequent queries show the deleted publication is removed from the list of all publications, and articles previously related to it (`a1`) no longer list it in their `publications`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_18

LANGUAGE: pycon
CODE:
```
>>> p1.delete()
>>> Publication.objects.all()
<QuerySet [<Publication: Highlights for Children>, <Publication: Science News>, <Publication: Science Weekly>]>
>>> a1 = Article.objects.get(pk=1)
>>> a1.publications.all()
<QuerySet []>
```

----------------------------------------

TITLE: Configuring SMTP Host for Email in Django
DESCRIPTION: Defines the hostname or IP address ('localhost' by default) of the SMTP server used for sending emails.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_26

LANGUAGE: python
CODE:
```
EMAIL_HOST = 'localhost'
```

----------------------------------------

TITLE: Has_keys Lookup for JSONField in Django
DESCRIPTION: Shows the has_keys lookup which returns objects where all the given keys exist in the top-level of the JSONField data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_35

LANGUAGE: python
CODE:
```
>>> Dog.objects.create(name="Rufus", data={"breed": "labrador"})
<Dog: Rufus>
>>> Dog.objects.create(name="Meg", data={"breed": "collie", "owner": "Bob"})
<Dog: Meg>
>>> Dog.objects.filter(data__has_keys=["breed", "owner"])
<QuerySet [<Dog: Meg>]>
```

----------------------------------------

TITLE: Creating Custom Template Tags with Multiple Arguments in Django
DESCRIPTION: Example demonstrating how to create a template tag helper function that accepts any number of positional or keyword arguments using *args and **kwargs in Django.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
@register.simple_tag
def my_tag(a, b, *args, **kwargs):
    warning = kwargs["warning"]
    profile = kwargs["profile"]
    ...
    return ...
```

----------------------------------------

TITLE: Configuring DjangoTemplates OPTIONS
DESCRIPTION: Example of configuring the OPTIONS for the DjangoTemplates backend, including custom libraries.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
OPTIONS = {
    "libraries": {
        "myapp_tags": "path.to.myapp.tags",
        "admin.urls": "django.contrib.admin.templatetags.admin_urls",
    },
}
```

----------------------------------------

TITLE: Documenting Migration Operation Classes in Django ORM - reStructuredText
DESCRIPTION: This snippet provides reStructuredText documentation for core migration operation classes in Django's ORM. It defines parameters, behaviors, and intended uses for each class, including 'CreateModel', 'DeleteModel', 'RenameModel', and others, with detailed notes on arguments, reversibility, and practical usage tips. The documentation assumes familiarity with Django models and migrations, and it presumes the reader is comfortable writing Sphinx-compatible docstrings or user-facing technical documentation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_0

LANGUAGE: reStructuredText
CODE:
```
Migration Operations
====================

.. module:: django.db.migrations.operations

Migration files are composed of one or more ``Operation``\s, objects that
declaratively record what the migration should do to your database.

Django also uses these ``Operation`` objects to work out what your models
looked like historically, and to calculate what changes you've made to
your models since the last migration so it can automatically write
your migrations; that's why they're declarative, as it means Django can
easily load them all into memory and run through them without touching
the database to work out what your project should look like.

There are also more specialized ``Operation`` objects which are for things like
:ref:`data migrations <data-migrations>` and for advanced manual database
manipulation. You can also write your own ``Operation`` classes if you want
to encapsulate a custom change you commonly make.

If you need an empty migration file to write your own ``Operation`` objects
into, use ``python manage.py makemigrations --empty yourappname``, but be aware
that manually adding schema-altering operations can confuse the migration
autodetector and make resulting runs of :djadmin:`makemigrations` output
incorrect code.

All of the core Django operations are available from the
``django.db.migrations.operations`` module.

For introductory material, see the :doc:`migrations topic guide
</topics/migrations>`.

Schema Operations
=================

``CreateModel``
---------------

.. class:: CreateModel(name, fields, options=None, bases=None, managers=None)

Creates a new model in the project history and a corresponding table in the
database to match it.

``name`` is the model name, as would be written in the ``models.py`` file.

``fields`` is a list of 2-tuples of ``(field_name, field_instance)``.
The field instance should be an unbound field (so just
``models.CharField(...)``, rather than a field taken from another model).

``options`` is an optional dictionary of values from the model's ``Meta`` class.

``bases`` is an optional list of other classes to have this model inherit from;
it can contain both class objects as well as strings in the format
``"appname.ModelName"`` if you want to depend on another model (so you inherit
from the historical version). If it's not supplied, it defaults to inheriting
from the standard ``models.Model``.

``managers`` takes a list of 2-tuples of ``(manager_name, manager_instance)``.
The first manager in the list will be the default manager for this model during
migrations.

``DeleteModel``
---------------

.. class:: DeleteModel(name)

Deletes the model from the project history and its table from the database.

``RenameModel``
---------------

.. class:: RenameModel(old_name, new_name)

Renames the model from an old name to a new one.

You may have to manually add
this if you change the model's name and quite a few of its fields at once; to
the autodetector, this will look like you deleted a model with the old name
and added a new one with a different name, and the migration it creates will
lose any data in the old table.

``AlterModelTable``
-------------------

.. class:: AlterModelTable(name, table)

Changes the model's table name (the :attr:`~django.db.models.Options.db_table`
option on the ``Meta`` subclass).

``AlterModelTableComment``
--------------------------

.. class:: AlterModelTableComment(name, table_comment)

Changes the model's table comment (the
:attr:`~django.db.models.Options.db_table_comment` option on the ``Meta``
subclass).

``AlterUniqueTogether``
-----------------------

.. class:: AlterUniqueTogether(name, unique_together)

Changes the model's set of unique constraints (the
:attr:`~django.db.models.Options.unique_together` option on the ``Meta``
subclass).

``AlterIndexTogether``
----------------------

.. class:: AlterIndexTogether(name, index_together)

Changes the model's set of custom indexes (the ``index_together`` option on the
``Meta`` subclass).

.. warning::

    ``AlterIndexTogether`` is officially supported only for pre-Django 4.2
    migration files. For backward compatibility reasons, it's still part of the
    public API, and there's no plan to deprecate or remove it, but it should
    not be used for new migrations. Use
    :class:`~django.db.migrations.operations.AddIndex` and
    :class:`~django.db.migrations.operations.RemoveIndex` operations instead.

``AlterOrderWithRespectTo``
---------------------------

.. class:: AlterOrderWithRespectTo(name, order_with_respect_to)

Makes or deletes the ``_order`` column needed for the
:attr:`~django.db.models.Options.order_with_respect_to` option on the ``Meta``
subclass.

``AlterModelOptions``
---------------------

.. class:: AlterModelOptions(name, options)

Stores changes to miscellaneous model options (settings on a model's ``Meta``)
like ``permissions`` and ``verbose_name``. Does not affect the database, but
persists these changes for :class:`RunPython` instances to use. ``options``
should be a dictionary mapping option names to values.

``AlterModelManagers``
----------------------

.. class:: AlterModelManagers(name, managers)

Alters the managers that are available during migrations.

``AddField``
------------

.. class:: AddField(model_name, name, field, preserve_default=True)

Adds a field to a model. ``model_name`` is the model's name, ``name`` is
the field's name, and ``field`` is an unbound Field instance (the thing
you would put in the field declaration in ``models.py`` - for example,
``models.IntegerField(null=True)``.

The ``preserve_default`` argument indicates whether the field's default
value is permanent and should be baked into the project state (``True``),
or if it is temporary and just for this migration (``False``) - usually
because the migration is adding a non-nullable field to a table and needs
a default value to put into existing rows. It does not affect the behavior
of setting defaults in the database directly - Django never sets database
defaults and always applies them in the Django ORM code.

.. warning::

    On older databases, adding a field with a default value may cause a full
    rewrite of the table. This happens even for nullable fields and may have a
    negative performance impact. To avoid that, the following steps should be
    taken.

    * Add the nullable field without the default value and run the
      :djadmin:`makemigrations` command. This should generate a migration with
      an ``AddField`` operation.

    * Add the default value to your field and run the :djadmin:`makemigrations`
      command. This should generate a migration with an ``AlterField``
      operation.

``RemoveField``
---------------

.. class:: RemoveField(model_name, name)

Removes a field from a model.

Bear in mind that when reversed, this is actually adding a field to a model.
The operation is reversible (apart from any data loss, which is irreversible)
if the field is nullable or if it has a default value that can be used to
populate the recreated column. If the field is not nullable and does not have a
default value, the operation is irreversible.

.. versionchanged:: 6.0

    :class:`~django.db.backends.base.schema.BaseDatabaseSchemaEditor` and
    PostgreSQL backends no longer use ``CASCADE`` to delete dependent related
    database objects, such as views. Any dependent objects that are not managed
    by Django may need to be removed manually before running ``RemoveField``.

``AlterField``
--------------

.. class:: AlterField(model_name, name, field, preserve_default=True)

Alters a field's definition, including changes to its type,
:attr:`~django.db.models.Field.null`, :attr:`~django.db.models.Field.unique`,
:attr:`~django.db.models.Field.db_column` and other field attributes.

The ``preserve_default`` argument indicates whether the field's default
value is permanent and should be baked into the project state (``True``),
or if it is temporary and just for this migration (``False``) - usually
because the migration is altering a nullable field to a non-nullable one and
needs a default value to put into existing rows. It does not affect the
behavior of setting defaults in the database directly - Django never sets
database defaults and always applies them in the Django ORM code.

Note that not all changes are possible on all databases - for example, you
cannot change a text-type field like ``models.TextField()`` into a number-type
field like ``models.IntegerField()`` on most databases.

``RenameField``
---------------

.. class:: RenameField(model_name, old_name, new_name)

Changes a field's name (and, unless :attr:`~django.db.models.Field.db_column`
is set, its column name).

``AddIndex``
------------

.. class:: AddIndex(model_name, index)

Creates an index in the database table for the model with ``model_name``.
``index`` is an instance of the :class:`~django.db.models.Index` class.

``RemoveIndex``
---------------

.. class:: RemoveIndex(model_name, name)

Removes the index named ``name`` from the model with ``model_name``.

``RenameIndex``
---------------

.. class:: RenameIndex(model_name, new_name, old_name=None, old_fields=None)

Renames an index in the database table for the model with ``model_name``.
Exactly one of ``old_name`` and ``old_fields`` can be provided. ``old_fields``
is an iterable of the strings, often corresponding to fields of
``index_together`` (pre-Django 5.1 option).

On databases that don't support an index renaming statement (SQLite), the
operation will drop and recreate the index, which can be expensive.

``AddConstraint``
-----------------

.. class:: AddConstraint(model_name, constraint)

Creates a :doc:`constraint </ref/models/constraints>` in the database table for
the model with ``model_name``.

``RemoveConstraint``
--------------------

.. class:: RemoveConstraint(model_name, name)

Removes the constraint named ``name`` from the model with ``model_name``.

``AlterConstraint``
-------------------
```

----------------------------------------

TITLE: Implementing a Context-Aware Inclusion Tag in Django
DESCRIPTION: Demonstrates an inclusion tag that uses the takes_context option to access the template context without requiring explicit arguments.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
@register.inclusion_tag("link.html", takes_context=True)
def jump_link(context):
    return {
        "link": context["home_link"],
        "title": context["home_title"],
    }
```

----------------------------------------

TITLE: Class-Based View with CSRF-Protected File Upload
DESCRIPTION: Implementation of a file upload view using class-based approach with CSRF protection and proper upload handler modification.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.utils.decorators import method_decorator
from django.views import View
from django.views.decorators.csrf import csrf_exempt, csrf_protect


@method_decorator(csrf_exempt, name="dispatch")
class UploadFileView(View):
    def setup(self, request, *args, **kwargs):
        request.upload_handlers.insert(0, ProgressBarUploadHandler(request))
        super().setup(request, *args, **kwargs)

    @method_decorator(csrf_protect)
    def post(self, request, *args, **kwargs):
        # Process request
        ...
```

----------------------------------------

TITLE: Configuring In-Memory Backend in Django Settings
DESCRIPTION: Shows how to configure the locmem (in-memory) email backend for testing.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"
```

----------------------------------------

TITLE: Configuring Local-memory Cache in Django
DESCRIPTION: Setting up an in-memory cache backend in Django settings. This provides speed advantages but is per-process and generally not suitable for production environments.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake",
    }
}
```

----------------------------------------

TITLE: Commenting Out Code Blocks in Django Templates
DESCRIPTION: Demonstrates the `{% comment %}` tag to ignore a section of the template during rendering. An optional note can be added within the opening tag for documentation purposes. Nested `comment` tags are not allowed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_3

LANGUAGE: html+django
CODE:
```
<p>Rendered text with {{ pub_date|date:"c" }}</p>
{% comment "Optional note" %}
    <p>Commented out text with {{ create_date|date:"c" }}</p>
{% endcomment %}
```

----------------------------------------

TITLE: Basic Question Detail Template
DESCRIPTION: Simple template that displays the question object for the detail view.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_7

LANGUAGE: html+django
CODE:
```
{{ question }}
```

----------------------------------------

TITLE: Initializing SimpleArrayField with IntegerField in Django Forms
DESCRIPTION: Demonstrates how to create a form field for an array of integers using SimpleArrayField. It shows usage, validation, and handling of valid and invalid input.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/forms.txt#2025-04-23_snippet_0

LANGUAGE: pycon
CODE:
```
>>> from django import forms
>>> from django.contrib.postgres.forms import SimpleArrayField

>>> class NumberListForm(forms.Form):
...     numbers = SimpleArrayField(forms.IntegerField())
...

>>> form = NumberListForm({"numbers": "1,2,3"})
>>> form.is_valid()
True
>>> form.cleaned_data
{'numbers': [1, 2, 3]}

>>> form = NumberListForm({"numbers": "1,2,a"})
>>> form.is_valid()
False
```

----------------------------------------

TITLE: Using blocktranslate tag with context in Django templates
DESCRIPTION: Shows how to use the context keyword with the {% blocktranslate %} tag to provide contextual information for translation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_26

LANGUAGE: html+django
CODE:
```
{% blocktranslate with name=user.username context "greeting" %}Hi {{ name }}{% endblocktranslate %}
```

----------------------------------------

TITLE: Filtering QuerySets by Quarter - Django ORM (Python)
DESCRIPTION: Shows how to retrieve date/datetime records by calendar quarter using '__quarter'. Takes an integer 1-4 representing the yearly quarter; outputs a QuerySet of records within the matching quarter. Useful for financial or seasonal reports. Handles time zone conversions per USE_TZ setting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_114

LANGUAGE: python
CODE:
```
Entry.objects.filter(pub_date__quarter=2)
```

----------------------------------------

TITLE: Configuring Django Per-Site Cache Middleware
DESCRIPTION: Configuration of Django's site-wide caching middleware showing the required middleware ordering.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
MIDDLEWARE = [
    "django.middleware.cache.UpdateCacheMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.cache.FetchFromCacheMiddleware",
]
```

----------------------------------------

TITLE: Using get_or_create with exact lookups in Django
DESCRIPTION: Demonstrates how to use 'defaults__exact' for exact lookups with the get_or_create() method in Django when dealing with a field named 'defaults'. This is important to avoid conflicts when using the 'defaults' parameter for specifying default values during object creation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_73

LANGUAGE: python
CODE:
```
Foo.objects.get_or_create(defaults__exact="bar", defaults={"defaults": "baz"})
```

----------------------------------------

TITLE: Creating FormSet Classes using formset_factory in Django Python
DESCRIPTION: Defines the `formset_factory` function signature. This factory function takes a Django form class and optional configuration parameters (like `extra`, `can_order`, `can_delete`, `max_num`, `min_num`, validation flags, etc.) to return a new `FormSet` class. The returned class is typically derived from `BaseFormSet` unless a different `formset` base class is provided.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/formsets.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
.. function:: formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True, renderer=None)
```

----------------------------------------

TITLE: Creating Aware Datetime from String in Python
DESCRIPTION: This code demonstrates how to create an aware datetime object from a string representation of a date and time, along with a specified time zone. It uses Django's dateparse utility and the zoneinfo module.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
>>> import zoneinfo
>>> from django.utils.dateparse import parse_datetime
>>> naive = parse_datetime("2012-02-21 10:28:45")
>>> naive.replace(tzinfo=zoneinfo.ZoneInfo("Europe/Helsinki"))
datetime.datetime(2012, 2, 21, 10, 28, 45, tzinfo=zoneinfo.ZoneInfo(key='Europe/Helsinki'))
```

----------------------------------------

TITLE: Filtering QuerySets by Weekday - Django ORM (Python)
DESCRIPTION: Filters by day-of-week using '__week_day', where integer input of 1=Sunday through 7=Saturday. Inputs are integers; outputs are QuerySets including all records matching the specified weekday. Handles any month/year; chaining of range lookups is supported. Weekdays are based on Django's internal mapping.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_112

LANGUAGE: python
CODE:
```
Entry.objects.filter(pub_date__week_day=2)
Entry.objects.filter(pub_date__week_day__gte=2)
```

----------------------------------------

TITLE: Executing Custom SQL Query with Django Connection
DESCRIPTION: Example of executing a custom SQL query using Django's database connection. Shows how to update and select data using parameterized queries with cursor execution and result fetching.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.db import connection

def my_custom_sql(self):
    with connection.cursor() as cursor:
        cursor.execute("UPDATE bar SET foo = 1 WHERE baz = %s", [self.baz])
        cursor.execute("SELECT foo FROM bar WHERE baz = %s", [self.baz])
        row = cursor.fetchone()

    return row
```

----------------------------------------

TITLE: Iterating Through a Formset
DESCRIPTION: Shows how to instantiate a formset and iterate through its forms, displaying the HTML for each form which includes properly named input fields.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> formset = ArticleFormSet()
>>> for form in formset:
...     print(form)
...
<div><label for="id_form-0-title">Title:</label><input type="text" name="form-0-title" id="id_form-0-title"></div>
<div><label for="id_form-0-pub_date">Pub date:</label><input type="text" name="form-0-pub_date" id="id_form-0-pub_date"></div>
```

----------------------------------------

TITLE: Filtering QuerySets by Minute - Django ORM (Python)
DESCRIPTION: Filters QuerySets to match specific minute values or ranges in datetime and time fields, using the '__minute' lookup. Inputs are integers from 0 to 59; outputs are QuerySets filtered for the minute component. Works on DateTimeField or TimeField, chaining range queries where needed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_118

LANGUAGE: python
CODE:
```
Event.objects.filter(timestamp__minute=29)
Event.objects.filter(time__minute=46)
Event.objects.filter(timestamp__minute__gte=29)
```

----------------------------------------

TITLE: Using Prefetch with to_attr for Custom Attribute Assignment
DESCRIPTION: Shows how to assign prefetched results to custom attributes using to_attr. This allows prefetching the same relation multiple times with different querysets.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_49

LANGUAGE: python
CODE:
```
>>> vegetarian_pizzas = Pizza.objects.filter(vegetarian=True)
>>> Restaurant.objects.prefetch_related(
...     Prefetch("pizzas", to_attr="menu"),
...     Prefetch("pizzas", queryset=vegetarian_pizzas, to_attr="vegetarian_menu"),
... )
```

----------------------------------------

TITLE: Tagging Tests in Django Test Framework
DESCRIPTION: Demonstrates how to apply tags to test methods and classes for selectively running tests using the tag decorator.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_44

LANGUAGE: python
CODE:
```
from django.test import tag


class SampleTestCase(TestCase):
    @tag("fast")
    def test_fast(self): ...

    @tag("slow")
    def test_slow(self): ...

    @tag("slow", "core")
    def test_slow_but_core(self): ...
```

----------------------------------------

TITLE: Creating PostgreSQL User with Database Creation Privileges
DESCRIPTION: Shell command to create a PostgreSQL user with database creation privileges but without superuser or role creation abilities.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
$ createuser --createdb -R -S <user_name>
```

----------------------------------------

TITLE: Using truncatechars Filter in Django Templates
DESCRIPTION: The truncatechars filter truncates a string if it is longer than the specified number of characters, ending with an ellipsis.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_93

LANGUAGE: html+django
CODE:
```
{{ value|truncatechars:7 }}
```

----------------------------------------

TITLE: Creating a Custom ModelChoiceField with Custom Labels in Django
DESCRIPTION: Example of subclassing ModelChoiceField to provide customized string representations of model objects by overriding the label_from_instance method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
from django.forms import ModelChoiceField


class MyModelChoiceField(ModelChoiceField):
    def label_from_instance(self, obj):
        return "My Object #%i" % obj.id
```

----------------------------------------

TITLE: Configuring Shared Memcached Backend (Multiple Servers, Same Port) in Django (Python)
DESCRIPTION: This Python snippet demonstrates configuring Django's `CACHES` setting to use multiple Memcached servers (172.19.26.240 and 172.19.26.242, both on port 11211) as a single shared cache. The `LOCATION` setting accepts a list of server addresses. It uses the `PyMemcacheCache` backend.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
        "LOCATION": [
            "172.19.26.240:11211",
            "172.19.26.242:11211",
        ],
    }
}
```

----------------------------------------

TITLE: Calling Custom QuerySet Methods from Django Manager Python
DESCRIPTION: Defines custom methods (`authors`, `editors`) on a `PersonQuerySet`. A custom `PersonManager` is created, overriding `get_queryset` to return an instance of this `PersonQuerySet`. The custom methods are then explicitly mirrored on the `PersonManager`, calling the corresponding QuerySet methods. This allows calling `Person.people.authors()` or `Person.people.editors()`. Requires `django.db.models` and potentially translation utilities.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_5

LANGUAGE: python
CODE:
```
class PersonQuerySet(models.QuerySet):
    def authors(self):
        return self.filter(role="A")

    def editors(self):
        return self.filter(role="E")


class PersonManager(models.Manager):
    def get_queryset(self):
        return PersonQuerySet(self.model, using=self._db)

    def authors(self):
        return self.get_queryset().authors()

    def editors(self):
        return self.get_queryset().editors()


class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    role = models.CharField(max_length=1, choices={"A": _("Author"), "E": _("Editor")})
    people = PersonManager()
```

----------------------------------------

TITLE: Sending Separate Emails to Multiple Recipients with Django
DESCRIPTION: Demonstrates how to send separate emails to different recipients using send_mass_mail(). Each recipient receives their own email without seeing other recipients.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
datatuple = (
    ("Subject", "Message.", "from@example.com", ["john@example.com"]),
    ("Subject", "Message.", "from@example.com", ["jane@example.com"]),
)
send_mass_mail(datatuple)
```

----------------------------------------

TITLE: Creating Database Cache Table (Shell)
DESCRIPTION: This shell command is used to create the necessary database table for Django's database cache backend. The table name used will correspond to the `LOCATION` specified in the `CACHES` setting for the database cache.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_10

LANGUAGE: shell
CODE:
```
python manage.py createcachetable
```

----------------------------------------

TITLE: Displaying Messages with Level Checking in Templates
DESCRIPTION: Enhanced template code that checks message levels to add conditional content
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_4

LANGUAGE: html
CODE:
```
{% if messages %}
<ul class="messages">
    {% for message in messages %}
    <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>
        {% if message.level == DEFAULT_MESSAGE_LEVELS.ERROR %}Important: {% endif %}
        {{ message }}
    </li>
    {% endfor %}
</ul>
{% endif %}
```

----------------------------------------

TITLE: Defining Custom File Upload Path in Django Model
DESCRIPTION: This snippet demonstrates how to define a callable function for the `upload_to` argument of a Django `FileField`. The function takes the model instance and original filename, returning a dynamic path based on the instance's attributes. It then shows how to use this function when defining the `FileField` in a model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_20

LANGUAGE: Python
CODE:
```
def user_directory_path(instance, filename):
    # file will be uploaded to MEDIA_ROOT/user_<id>/<filename>
    return "user_{0}/{1}".format(instance.user.id, filename)


class MyModel(models.Model):
    upload = models.FileField(upload_to=user_directory_path)
```

----------------------------------------

TITLE: Custom URL Configuration in Django ModelAdmin
DESCRIPTION: Demonstrates how to add custom URLs to a ModelAdmin by extending get_urls() method with custom views and templates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_45

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.template.response import TemplateResponse
from django.urls import path


class MyModelAdmin(admin.ModelAdmin):
    def get_urls(self):
        urls = super().get_urls()
        my_urls = [path("my_view/", self.admin_site.admin_view(self.my_view))]
        return my_urls + urls

    def my_view(self, request):
        # ...
        context = dict(
            # Include common variables for rendering the admin template.
            self.admin_site.each_context(request),
            # Anything else you want in the context...
            key=value,
        )
        return TemplateResponse(request, "sometemplate.html", context)
```

----------------------------------------

TITLE: Defining Models with Generic Relation in Django
DESCRIPTION: Creates Image and Product models where Image uses a GenericForeignKey to reference any model, enabling a polymorphic relationship. This allows images to be associated with various content types.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_73

LANGUAGE: python
CODE:
```
from django.contrib.contenttypes.fields import GenericForeignKey
from django.db import models


class Image(models.Model):
    image = models.ImageField(upload_to="images")
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey("content_type", "object_id")


class Product(models.Model):
    name = models.CharField(max_length=100)
```

----------------------------------------

TITLE: Configuring Django Middleware for REMOTE_USER Authentication
DESCRIPTION: Configuration of Django MIDDLEWARE setting to enable RemoteUserMiddleware for REMOTE_USER authentication. Must be placed after AuthenticationMiddleware.
SOURCE: https://github.com/django/django/blob/main/docs/howto/auth-remote-user.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
MIDDLEWARE = [
    "...",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.auth.middleware.RemoteUserMiddleware",
    "...",
]
```

----------------------------------------

TITLE: Quoting IRI Components and Encoding URIs - Django - Python
DESCRIPTION: Demonstrates the use of Python's standard library function quote and Django's iri_to_uri utility for converting and encoding Unicode paths and values into valid URL components. Dependencies: urllib.parse (standard), django.utils.encoding; requires Django installed to use iri_to_uri. The first example shows URL-safe quoting for components, and the second converts a full IRI to a URI, preserving correctly quoted segments. Input: Unicode path/component strings; Output: ASCII-compatible, URL-encoded strings. Useful for Django developers building internationalized applications requiring fully compliant URLs.
SOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from urllib.parse import quote
>>> from django.utils.encoding import iri_to_uri
>>> quote("Paris & Orléans")
'Paris%20%26%20Orl%C3%A9ans'
>>> iri_to_uri("/favorites/François/%s" % quote("Paris & Orléans"))
'/favorites/Fran%C3%A7ois/Paris%20%26%20Orl%C3%A9ans'
```

----------------------------------------

TITLE: Assigning Related Unsaved Instances in Django ORM (Python)
DESCRIPTION: Demonstrates assignment of a new Author instance to a Book object's ForeignKey, with saving steps and illustrating that post-Django 1.8, assigning an unsaved Author instance to a ForeignKey raises a ValueError to prevent inadvertent data loss. Also shows object creation, attribute saving, and retrieving related objects. Requires Django ORM configured and models Book and Author defined with the appropriate ForeignKey relationships. Throws errors for unsaved related assignments.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_1

LANGUAGE: pycon
CODE:
```
>>> book = Book.objects.create(name="Django")
>>> book.author = Author(name="John")
>>> book.author.save()
>>> book.save()

>>> Book.objects.get(name="Django")
>>> book.author
>>>
```

LANGUAGE: pycon
CODE:
```
>>> book.author = Author(name="john")
Traceback (most recent call last):
...
ValueError: Cannot assign "<Author: John>": "Author" instance isn't saved in the database.
```

----------------------------------------

TITLE: Configuring Ignorable 404 URLs in Django Settings
DESCRIPTION: This snippet demonstrates how to set up the IGNORABLE_404_URLS setting in Django to prevent reporting of 404 errors for specific URL patterns.
SOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
import re

IGNORABLE_404_URLS = [
    re.compile(r"\.(php|cgi)$"),
    re.compile(r"^/phpmyadmin/"),
]
```

----------------------------------------

TITLE: Using defer() and only() QuerySet methods in Django
DESCRIPTION: Demonstrates how to use the new queryset methods defer() and only() to selectively retrieve fields from the database, improving performance for large text fields or expensive processing.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
QuerySet.defer()
QuerySet.only()
```

----------------------------------------

TITLE: Creating an HTML Form in Django Templates
DESCRIPTION: Example of a simple HTML form in a Django template that collects a user's name. The form uses the POST method and includes a text input field and submit button, with optional pre-filling from a context variable.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_0

LANGUAGE: html
CODE:
```
<form action="/your-name/" method="post">
    <label for="your_name">Your name: </label>
    <input id="your_name" type="text" name="your_name" value="{{ current_name }}">
    <input type="submit" value="OK">
</form>
```

----------------------------------------

TITLE: Using Explicit FieldListFilter in Django Admin
DESCRIPTION: Shows how to use an explicit FieldListFilter class for a specific field in the list_filter configuration of a Django ModelAdmin.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    list_filter = [
        ("is_staff", admin.BooleanFieldListFilter),
    ]
```

----------------------------------------

TITLE: Loading Multiple Django Template Tag Libraries Simultaneously
DESCRIPTION: Shows the syntax for loading multiple custom template tag and filter libraries in Django using a single `{% load %}` tag. Library names are separated by spaces. This example loads both the `humanize` and `i18n` (internationalization) libraries, making tags and filters from both available in the current template.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_30

LANGUAGE: html+django
CODE:
```
{% load humanize i18n %}
```

----------------------------------------

TITLE: Using first Filter
DESCRIPTION: Demonstrates using the first filter to get the first item from a list.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_72

LANGUAGE: html+django
CODE:
```
{{ value|first }}
```

----------------------------------------

TITLE: Using Aggregates in Subquery Expressions (Python)
DESCRIPTION: Shows how to use aggregates within a Subquery expression to find posts where the post length is greater than the total length of all combined comments. It demonstrates the specific combination of filter, values, and annotate methods required.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
from django.db.models import OuterRef, Subquery, Sum
comments = Comment.objects.filter(post=OuterRef("pk")).order_by().values("post")
total_comments = comments.annotate(total=Sum("length")).values("total")
Post.objects.filter(length__gt=Subquery(total_comments))
```

----------------------------------------

TITLE: Adding Multiple Records to ManyToManyField in Django
DESCRIPTION: This example shows how to add multiple records to a ManyToManyField in a single operation. It creates four Author objects and adds them all to an Entry's authors field in one add() method call.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> john = Author.objects.create(name="John")
>>> paul = Author.objects.create(name="Paul")
>>> george = Author.objects.create(name="George")
>>> ringo = Author.objects.create(name="Ringo")
>>> entry.authors.add(john, paul, george, ringo)
```

----------------------------------------

TITLE: Django Model Configuration Example
DESCRIPTION: Example of Django model configuration syntax for ordering and unique constraints
SOURCE: https://github.com/django/django/blob/main/docs/ref/checks.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class Meta:
    ordering = ['field1', 'field2']
    unique_together = [('field1', 'field2')]
```

----------------------------------------

TITLE: Defining USE_X_FORWARDED_HOST setting
DESCRIPTION: This setting determines whether to use the X-Forwarded-Host header. It should be enabled if a proxy setting this header is in use, and it takes priority over USE_X_FORWARDED_PORT. The header can include the port number, and in this case, USE_X_FORWARDED_PORT shouldn't be used.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_63



----------------------------------------

TITLE: Defining USE_X_FORWARDED_PORT setting
DESCRIPTION: This setting enables the use of the X-Forwarded-Port header. It should be enabled when a proxy sets this header. USE_X_FORWARDED_HOST takes priority.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_64



----------------------------------------

TITLE: Serving User-Uploaded Files in Development with Django URLconf
DESCRIPTION: Configures URLs to serve user-uploaded media files during development using Django's static file serving view.
SOURCE: https://github.com/django/django/blob/main/docs/howto/static-files/index.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # ... the rest of your URLconf goes here ...
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
```

----------------------------------------

TITLE: Bad Practice: Hardcoding URLs in Django Templates (HTML+Django)
DESCRIPTION: Illustrates an undesirable way to generate URLs within Django templates by hardcoding the path structure and embedding the object's `id`. This approach is brittle and difficult to maintain if URL structures change.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_26

LANGUAGE: html+django
CODE:
```
<!-- BAD template code. Avoid! -->
<a href="/people/{{ object.id }}/">{{ object.name }}</a>
```

----------------------------------------

TITLE: Combining Transforms, Related Lookups, and Aggregation in values() Python
DESCRIPTION: Demonstrates a complex example using values() with a transform applied to a field on a related model via lookups, combined with aggregation. Groups by the transformed related field and counts entries.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_25

LANGUAGE: Python
CODE:
```
>>> from django.db.models import CharField, Count
>>> from django.db.models.functions import Lower
>>> CharField.register_lookup(Lower)
>>> Blog.objects.values("entry__authors__name__lower").annotate(entries=Count("entry"))
```

----------------------------------------

TITLE: Writing Conditional Expressions - HTML+Django Template - html+django
DESCRIPTION: Illustrates the correct structuring of logical operations using Django's template 'if' tag, highlighting operator precedence rules. Shows how combined conditions should be constructed using logical 'and' and 'or' within a single tag. No dependencies are required; snippet is meant to clarify best practices for template logic. The input is template context variables and the output is conditional block rendering without support for chained comparisons.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_20

LANGUAGE: html+django
CODE:
```
{% if a > b > c %}  (WRONG)
```

LANGUAGE: html+django
CODE:
```
{% if a > b and b > c %}
```

----------------------------------------

TITLE: Django ModelAdmin Configuration Example
DESCRIPTION: These error codes show valid configurations for Django ModelAdmin class attributes like list_display, list_filter, raw_id_fields etc. The codes represent validation rules for admin interface customization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/checks.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class ModelAdmin:
    raw_id_fields = ['foreign_key_field']  # Must be list/tuple of ForeignKey/M2M fields
    list_display = ['field1', 'field2']     # Must be list/tuple of model fields
    list_filter = ['field1']                # Must be list/tuple of fields
    ordering = ['field1', '-field2']        # Must be list/tuple of field names
    readonly_fields = ['field1']            # Must be list/tuple of field names/callables
    autocomplete_fields = ['foreign_key']   # Must be list/tuple of ForeignKey/M2M fields
```

----------------------------------------

TITLE: Using AsyncClient to set HTTP headers in Django tests
DESCRIPTION: Example showing how to initialize an AsyncClient and make a request with custom HTTP headers. This demonstrates the difference from the synchronous client where headers don't need the HTTP_ prefix.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_47

LANGUAGE: pycon
CODE:
```
>>> c = AsyncClient()
>>> c.get("/customers/details/", {"name": "fred", "age": 7}, ACCEPT="application/json")
```

----------------------------------------

TITLE: Implementing Conditional CSRF Protection in Django View
DESCRIPTION: Example of how to implement conditional CSRF protection in a Django view using csrf_exempt and csrf_protect decorators. The view is generally unprotected but applies CSRF protection only for a specific execution path based on a condition.
SOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.views.decorators.csrf import csrf_exempt, csrf_protect


@csrf_exempt
def my_view(request):
    @csrf_protect
    def protected_path(request):
        do_something()

    if some_condition():
        return protected_path(request)
    else:
        do_something_else()
```

----------------------------------------

TITLE: Installing Uvicorn with Gunicorn
DESCRIPTION: Command to install Uvicorn along with Gunicorn and the Uvicorn worker for production deployment.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/uvicorn.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
python -m pip install uvicorn uvicorn-worker gunicorn
```

----------------------------------------

TITLE: Defining Custom Model Permissions in Django Model Meta
DESCRIPTION: Illustrates how to add extra, custom permissions to a Django model using the `permissions` attribute within its `Meta` class. Permissions are defined as a list of tuples, each containing a permission code and a human-readable name.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
permissions = [("can_deliver_pizzas", "Can deliver pizzas")]
```

----------------------------------------

TITLE: Checking User Permissions with ModelBackend in Django (Python)
DESCRIPTION: Checks if the `user_obj` has a specific permission string (`perm`) using `get_all_permissions` within the `ModelBackend`. Returns `False` if the user is inactive (`is_active` is False). The asynchronous version `ahas_perm()` was added in Django 5.2.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
has_perm(user_obj, perm, obj=None)
```

LANGUAGE: python
CODE:
```
ahas_perm(user_obj, perm, obj=None)
```

----------------------------------------

TITLE: Parameterized Insert with Variable Substitution Using RunSQL in Django (Python)
DESCRIPTION: Demonstrates parameterized execution with variable substitution in a migration using RunSQL. This approach uses placeholders (%s) and supplies parameter values, which is recommended for dynamic and safe value insertion. Dependencies: Django migrations; Inputs: SQL with placeholders, parameter list; Output: Executes the insert using the supplied parameters.
SOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
migrations.RunSQL([("INSERT INTO musician (name) VALUES (%s);", ["Reinhardt"])])
```

----------------------------------------

TITLE: Creating an Inline Formset in Python
DESCRIPTION: Demonstrates how to create an inline formset for related Book objects belonging to an Author using inlineformset_factory.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_33

LANGUAGE: python
CODE:
```
>>> from django.forms import inlineformset_factory
>>> BookFormSet = inlineformset_factory(Author, Book, fields=["title"])
>>> author = Author.objects.get(name="Mike Royko")
>>> formset = BookFormSet(instance=author)
```

----------------------------------------

TITLE: Signing Objects with Django's Signer Class
DESCRIPTION: Shows how to sign and unsign complex data structures like dictionaries using the sign_object() and unsign_object() methods of the Signer class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signing.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> signed_obj = signer.sign_object({"message": "Hello!"})
>>> signed_obj
'eyJtZXNzYWdlIjoiSGVsbG8hIn0:bzb48DBkB-bwLaCnUVB75r5VAPUEpzWJPrTb80JMIXM'
>>> obj = signer.unsign_object(signed_obj)
>>> obj
{'message': 'Hello!'}
```

----------------------------------------

TITLE: Overriding get_changeform_initial_data in ModelAdmin Python
DESCRIPTION: This code snippet shows how to override the `get_changeform_initial_data` method in a Django `ModelAdmin`. This method provides a hook to set initial data for fields in the admin change form. The example returns a dictionary setting the initial value of the 'name' field to 'custom_initial_value'. This overrides the default behavior of populating initial data from GET parameters.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_57

LANGUAGE: python
CODE:
```
def get_changeform_initial_data(self, request):
    return {"name": "custom_initial_value"}
```

----------------------------------------

TITLE: Defining Django Model Choices using Callable Function Python
DESCRIPTION: Illustrates how to define choices for a Django model field using a callable function that returns a dictionary or list of tuples. This approach is useful when choices need to be dynamically generated, potentially based on settings or external data, and can be cached if necessary. The example shows a function returning a dictionary of currencies and its use in a CharField.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_2

LANGUAGE: Python
CODE:
```
def get_currencies():
    return {i: i for i in settings.CURRENCIES}


class Expense(models.Model):
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    currency = models.CharField(max_length=3, choices=get_currencies)
```

----------------------------------------

TITLE: Handling RelatedObjectDoesNotExist Exception in Django
DESCRIPTION: This snippet illustrates how to catch the `RelatedObjectDoesNotExist` exception, which occurs when attempting to access a reverse one-to-one relationship for which no corresponding object exists in the related table. The exception is a subclass of the target model's `DoesNotExist`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_44

LANGUAGE: python
CODE:
```
try:
    user.supervisor_of
except User.supervisor_of.RelatedObjectDoesNotExist:
    pass
```

----------------------------------------

TITLE: Querying ContentType for User Model in Python
DESCRIPTION: This snippet demonstrates how to lookup the ContentType for the User model and use it to query for a specific user or access the User model class.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.contrib.contenttypes.models import ContentType
>>> user_type = ContentType.objects.get(app_label="auth", model="user")
>>> user_type
<ContentType: user>

>>> user_type.model_class()
<class 'django.contrib.auth.models.User'>
>>> user_type.get_object_for_this_type(username="Guido")
<User: Guido>
```

----------------------------------------

TITLE: Using Django Admin Command Line Utility
DESCRIPTION: Command to verify Django admin command line utility is available for use
SOURCE: https://github.com/django/django/blob/main/docs/topics/install.txt#2025-04-23_snippet_3

LANGUAGE: bash
CODE:
```
django-admin
```

----------------------------------------

TITLE: Documentation of contains() and acontains() methods in Django ORM
DESCRIPTION: Covers how contains() checks if a specific object is in a QuerySet, returning True or False efficiently. The asynchronous contains() acontains() performs the same check without explicit iteration. This is optimal for membership testing in large datasets.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_87

LANGUAGE: Python
CODE:
```
Returns ``True`` if the :class:`.QuerySet` contains ``obj``, and ``False`` if not.
```

----------------------------------------

TITLE: Manually Selecting Databases for Django Model Save Operations
DESCRIPTION: Examples of how to manually specify which database to use when saving Django model instances.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
my_object.save(using="legacy_users")
```

----------------------------------------

TITLE: Customizing login_required Decorator Parameters in Django
DESCRIPTION: Shows how to customize the redirect_field_name parameter of the login_required decorator. This changes the query string parameter used to store the redirect path.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_19

LANGUAGE: Python
CODE:
```
from django.contrib.auth.decorators import login_required

@login_required(redirect_field_name="my_redirect_field")
def my_view(request): ...
```

----------------------------------------

TITLE: Implementing Reverse Generic Relations in Django
DESCRIPTION: Shows how to create a Bookmark model with a reverse generic relationship to TaggedItem using GenericRelation field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.contrib.contenttypes.fields import GenericRelation
from django.db import models


class Bookmark(models.Model):
    url = models.URLField()
    tags = GenericRelation(TaggedItem)
```

----------------------------------------

TITLE: Lazy Translation for Model Field Help Text in Django
DESCRIPTION: Demonstrates how to use gettext_lazy() to provide translatable help text for a model field, ensuring that translations are only processed when needed.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_11

LANGUAGE: Python
CODE:
```
from django.db import models
from django.utils.translation import gettext_lazy as _


class MyThing(models.Model):
    name = models.CharField(help_text=_("This is the help text"))
```

----------------------------------------

TITLE: Creating Database Cache Table in Django
DESCRIPTION: Command to create a database table for Django's database-cache system. The command creates tables in the correct format that Django's cache system expects.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
python manage.py createcachetable
```

----------------------------------------

TITLE: Setting a Context Variable in a Django Template Tag (Python)
DESCRIPTION: This Python code defines `CurrentTimeNode2`, a Django template Node class that sets a variable in the template context instead of outputting directly. The `render` method calculates the current time, formats it according to `self.format_string`, and assigns the result to the context dictionary using the hardcoded key 'current_time'. It returns an empty string, as is standard practice for context-setting tags.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_33

LANGUAGE: python
CODE:
```
import datetime
from django import template


class CurrentTimeNode2(template.Node):
    def __init__(self, format_string):
        self.format_string = format_string

    def render(self, context):
        context["current_time"] = datetime.datetime.now().strftime(self.format_string)
        return ""
```

----------------------------------------

TITLE: Generating CSV Files Using Django's Template System
DESCRIPTION: An alternative approach to generating CSV files using Django's template system instead of the csv module. This method passes data to a template which formats it as CSV content.
SOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-csv.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
from django.template import loader


def some_view(request):
    # Create the HttpResponse object with the appropriate CSV header.
    response = HttpResponse(
        content_type="text/csv",
        headers={"Content-Disposition": 'attachment; filename="somefilename.csv"'},
    )

    # The data is hardcoded here, but you could load it from a database or
    # some other source.
    csv_data = (
        ("First row", "Foo", "Bar", "Baz"),
        ("Second row", "A", "B", "C", '"Testing"', "Here's a quote"),
    )

    t = loader.get_template("my_template_name.txt")
    c = {"data": csv_data}
    response.write(t.render(c))
    return response
```

----------------------------------------

TITLE: Mapping Keys vs. Positional Formatting in ValidationError - Python
DESCRIPTION: Illustrates how to prefer mapping keys over positional formatting for error messages in Django ValidationError, improving override and translation capabilities. The approach takes advantage of named Python string formatting in the message and requires values to be passed as a dictionary to the params argument. Main use is in Django forms or fields for flexible message substitution, and is subject to the presence of Django's translation functions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
ValidationError(
    _(\"Invalid value: %(value)s\"),
    params={\"value\": \"42\"},
)

# Bad
ValidationError(
    _(\"Invalid value: %s\"),
    params=(\"42\",),
)
```

----------------------------------------

TITLE: Creating a Django Model with ArrayField
DESCRIPTION: Defines a Post model with an ArrayField to store tags. This example demonstrates how to use ArrayField with a base field of CharField and allows for blank values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib.postgres.fields import ArrayField
from django.db import models


class Post(models.Model):
    name = models.CharField(max_length=200)
    tags = ArrayField(models.CharField(max_length=200), blank=True)

    def __str__(self):
        return self.name
```

----------------------------------------

TITLE: Accessing Paginated Results via Query String in Django
DESCRIPTION: Shows the URL format for accessing a specific page of results using the 'page' query string parameter.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-multiple-object.txt#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
/objects/?page=3
```

----------------------------------------

TITLE: Implementing Custom SimpleListFilter in Django Admin
DESCRIPTION: Demonstrates how to create a custom list filter by subclassing SimpleListFilter. This example filters people by the decade they were born in, implementing lookups and queryset methods.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from datetime import date

from django.contrib import admin
from django.utils.translation import gettext_lazy as _


class DecadeBornListFilter(admin.SimpleListFilter):
    # Human-readable title which will be displayed in the
    # right admin sidebar just above the filter options.
    title = _("decade born")

    # Parameter for the filter that will be used in the URL query.
    parameter_name = "decade"

    def lookups(self, request, model_admin):
        """
        Returns a list of tuples. The first element in each
        tuple is the coded value for the option that will
        appear in the URL query. The second element is the
        human-readable name for the option that will appear
        in the right sidebar.
        """
        return [
            ("80s", _("in the eighties")),
            ("90s", _("in the nineties")),
        ]

    def queryset(self, request, queryset):
        """
        Returns the filtered queryset based on the value
        provided in the query string and retrievable via
        `self.value()`.
        """
        # Compare the requested value (either '80s' or '90s')
        # to decide how to filter the queryset.
        if self.value() == "80s":
            return queryset.filter(
                birthday__gte=date(1980, 1, 1),
                birthday__lte=date(1989, 12, 31),
            )
        if self.value() == "90s":
            return queryset.filter(
                birthday__gte=date(1990, 1, 1),
                birthday__lte=date(1999, 12, 31),
            )


class PersonAdmin(admin.ModelAdmin):
    list_filter = [DecadeBornListFilter]
```

----------------------------------------

TITLE: Defining a Custom HandField in Django
DESCRIPTION: This code defines a custom Django model field called HandField. It subclasses models.Field and sets a fixed max_length of 104 characters to store 52 card values and their suits.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
from django.db import models


class HandField(models.Field):
    description = "A hand of cards (bridge style)"

    def __init__(self, *args, **kwargs):
        kwargs["max_length"] = 104
        super().__init__(*args, **kwargs)
```

----------------------------------------

TITLE: Custom Field Validation with Excluded Fields in Django
DESCRIPTION: Demonstrates how to handle validation for fields that might be excluded from a ModelForm using clean_fields() method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
class Article(models.Model):
    ...

    def clean_fields(self, exclude=None):
        super().clean_fields(exclude=exclude)
        if self.status == "draft" and self.pub_date is not None:
            if exclude and "status" in exclude:
                raise ValidationError(
                    _("Draft entries may not have a publication date.")
                )
            else:
                raise ValidationError(
                    {
                        "status": _(
                            "Set status to draft if there is not a publication date."
                        ),
                    }
                )
```

----------------------------------------

TITLE: Defining Article Model with ManyToMany Relationship to Site in Django
DESCRIPTION: This code snippet defines an Article model with a many-to-many relationship to the Site model, allowing an article to be associated with multiple sites.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib.sites.models import Site
from django.db import models


class Article(models.Model):
    headline = models.CharField(max_length=200)
    # ...
    sites = models.ManyToManyField(Site)
```

----------------------------------------

TITLE: Overriding Default Manager in Child Class Django
DESCRIPTION: This snippet defines a Django model class inheriting from `AbstractBase`. It explicitly sets a different manager (`OtherManager()`) as its default manager using the `default_manager` attribute, overriding the inherited default `objects` manager.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_12

LANGUAGE: Python
CODE:
```
class ChildB(AbstractBase):
    # ...
    # An explicit default manager.
    default_manager = OtherManager()
```

----------------------------------------

TITLE: Submitting Multiple Values for a Select Field in Django Test Client POST
DESCRIPTION: Demonstrates how to submit multiple values for a select field using the Django test client's POST method. The example shows submitting three selected values for a field named 'choices'.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
{"choices": ["a", "b", "d"]}
```

----------------------------------------

TITLE: Launching Shell with Verbose Auto Imports - Django - Shell
DESCRIPTION: Demonstrates how to start the Django management shell with automatic model import from all installed apps, using the --verbosity flag to show detailed information about the imports. This requires an existing Django project and assumes access to the manage.py utility. Inputs are command-line arguments; the output includes printed import statements for various core Django models.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.2.txt#2025-04-23_snippet_0

LANGUAGE: Shell
CODE:
```
$ python -Wall manage.py shell --verbosity=2
6 objects imported automatically, including:

  from django.contrib.admin.models import LogEntry
  from django.contrib.auth.models import Group, Permission, User
  from django.contrib.contenttypes.models import ContentType
  from django.contrib.sessions.models import Session
```

----------------------------------------

TITLE: Handling Password Reset in Django
DESCRIPTION: The PasswordResetForm class in Django's authentication system was vulnerable to user email enumeration. This has been mitigated by handling and logging exceptions during password reset email sending using the django-contrib-auth-logger.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.16.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib.auth.forms import PasswordResetForm
```

----------------------------------------

TITLE: Run Django testserver on specific IP/port with fixture (Console)
DESCRIPTION: Provides another example of using the `--addrport` option with `django-admin testserver`. This snippet demonstrates running the server on a specific IP address (`1.2.3.4`) and port (`7000`) while loading the `test` fixture.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_45

LANGUAGE: console
CODE:
```
django-admin testserver --addrport 1.2.3.4:7000 test
```

----------------------------------------

TITLE: Optimizing TransactionTestCase with available_apps in Django
DESCRIPTION: This code demonstrates how to use the available_apps attribute in TransactionTestCase to optimize Django's test suite by limiting the models and applications used during testing.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class TransactionTestCase:
    available_apps = None  # Set this to a list of applications to optimize
```

----------------------------------------

TITLE: Getting Full URL for Django Model Object
DESCRIPTION: This code snippet demonstrates how to get the full URL (including domain) for a Django model object using the sites framework.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> from django.contrib.sites.models import Site
>>> obj = MyModel.objects.get(id=3)
>>> obj.get_absolute_url()
'/mymodel/objects/3/'
>>> Site.objects.get_current().domain
'example.com'
>>> "https://%s%s" % (Site.objects.get_current().domain, obj.get_absolute_url())
'https://example.com/mymodel/objects/3/'
```

----------------------------------------

TITLE: Sample Unmanaged Django Model for Legacy Table in Python
DESCRIPTION: This code sample shows a Django model class mapped to a legacy database table, with managed=False to prevent Django from managing the table's schema. It defines a primary key and additional fields, and sets db_table to 'CENSUS_PERSONS' to reflect the legacy table name. Dependencies include a configured Django project and database setup, and the model expects no table creation or migration from Django for this model.
SOURCE: https://github.com/django/django/blob/main/docs/howto/legacy-databases.txt#_snippet_2

LANGUAGE: python
CODE:
```
class Person(models.Model):
    id = models.IntegerField(primary_key=True)
    first_name = models.CharField(max_length=70)

    class Meta:
        managed = False
        db_table = "CENSUS_PERSONS"
```

----------------------------------------

TITLE: Defining YearArchiveView Class in Django
DESCRIPTION: Class definition for YearArchiveView, a generic date-based view for displaying yearly archives. It includes various attributes and methods for customizing the view's behavior.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_11

LANGUAGE: Python
CODE:
```
class YearArchiveView():
    # Attributes and methods listed in the documentation
    pass
```

----------------------------------------

TITLE: Running Migrate with Verbosity Level 2 - Command Line
DESCRIPTION: Shows how to use the `django-admin migrate` command with the `--verbosity` option set to `2`. This increases the amount of notification and debug information printed to the console, providing more detailed output.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_52

LANGUAGE: Command Line
CODE:
```
django-admin migrate --verbosity 2
```

----------------------------------------

TITLE: Case-Insensitive Exact Match 'iexact' and Usage Notes
DESCRIPTION: Describes 'iexact' for case-insensitive exact matching, with examples demonstrating its use and corresponding SQL 'ILIKE' syntax. Highlights SQLite's limitations with non-ASCII case insensitivity and mentions related caveats.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_95

LANGUAGE: ReStructuredText
CODE:
```
.. fieldlookup:: iexact

``iexact``
~~~~~~~~~~

Case-insensitive exact match. If the value provided for comparison is ``None``,
it will be interpreted as an SQL ``NULL`` (see :lookup:`isnull` for more
details).

Example::

    Blog.objects.get(name__iexact="beatles blog")
    Blog.objects.get(name__iexact=None)

SQL equivalents:

.. code-block:: sql

    SELECT ... WHERE name ILIKE 'beatles blog';
    SELECT ... WHERE name IS NULL;

Note the first query will match ``'Beatles Blog'``, ``'beatles blog'``,
``'BeAtLes BLoG'``, etc.

.. admonition:: SQLite users

    When using the SQLite backend and non-ASCII strings, bear in mind the
    :ref:`database note <sqlite-string-matching>` about string comparisons.
    SQLite does not do case-insensitive matching for non-ASCII strings.
```

----------------------------------------

TITLE: Configuring ArticleAdmin with Prepopulated Fields
DESCRIPTION: Shows how to set up automatic slug generation from title field in ArticleAdmin.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
class ArticleAdmin(admin.ModelAdmin):
    prepopulated_fields = {"slug": ["title"]}
```

----------------------------------------

TITLE: Including App URLs in Django Project URLconf
DESCRIPTION: Demonstrates how to include an app's URLs in the main project URLconf.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_46

LANGUAGE: python
CODE:
```
path("clients/", include("project_name.app_name.urls"))
```

----------------------------------------

TITLE: Setting Data Upload Limits in Django
DESCRIPTION: These settings define the limits for data uploads to prevent denial-of-service attacks. `DATA_UPLOAD_MAX_MEMORY_SIZE` limits the size of request bodies before raising a `RequestDataTooBig` exception. `DATA_UPLOAD_MAX_NUMBER_FIELDS` sets the maximum number of parameters received via GET or POST before `TooManyFields` exception. `DATA_UPLOAD_MAX_NUMBER_FILES` limits the number of files uploaded via POST before `TooManyFiles` is raised.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_11

LANGUAGE: text
CODE:
```
Default: ``2621440`` (i.e. 2.5 MB).

The maximum size in bytes that a request body may be before a
:exc:`~django.core.exceptions.SuspiciousOperation` (``RequestDataTooBig``) is
raised. The check is done when accessing ``request.body`` or ``request.POST``
and is calculated against the total request size excluding any file upload
data. You can set this to ``None`` to disable the check. Applications that are
expected to receive unusually large form posts should tune this setting.
```

LANGUAGE: text
CODE:
```
Default: ``1000``

The maximum number of parameters that may be received via GET or POST before a
:exc:`~django.core.exceptions.SuspiciousOperation` (``TooManyFields``) is
raised. You can set this to ``None`` to disable the check. Applications that
are expected to receive an unusually large number of form fields should tune
this setting.
```

LANGUAGE: text
CODE:
```
Default: ``100``

The maximum number of files that may be received via POST in a
``multipart/form-data`` encoded request before a
:exc:`~django.core.exceptions.SuspiciousOperation` (``TooManyFiles``) is
raised. You can set this to ``None`` to disable the check. Applications that
are expected to receive an unusually large number of file fields should tune
this setting.
```

----------------------------------------

TITLE: Creating HTML Template for ArticleDetailView in Django
DESCRIPTION: Provides an example of an HTML template for displaying article details, including usage of context variables.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-display.txt#2025-04-23_snippet_2

LANGUAGE: html
CODE:
```
<h1>{{ object.headline }}</h1>
<p>{{ object.content }}</p>
<p>Reporter: {{ object.reporter }}</p>
<p>Published: {{ object.pub_date|date }}</p>
<p>Date: {{ now|date }}</p>
```

----------------------------------------

TITLE: Filtering by Minute - SQL Equivalent
DESCRIPTION: Maps Django's minute field filtering to SQL using EXTRACT; compares the minute part of time/datetime fields to provided values. Takes integer inputs representing minute values (0-59). Outputs all records matching the requested minute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_119

LANGUAGE: sql
CODE:
```
SELECT ... WHERE EXTRACT('minute' FROM timestamp) = '29';
SELECT ... WHERE EXTRACT('minute' FROM time) = '46';
```

----------------------------------------

TITLE: Installing Django Upgrades with pip
DESCRIPTION: Command to upgrade Django to the latest version using pip. The --upgrade or -U flag tells pip to upgrade the package if it's already installed.
SOURCE: https://github.com/django/django/blob/main/docs/howto/upgrade-version.txt#2025-04-23_snippet_2

LANGUAGE: console
CODE:
```
$ python -m pip install -U Django
```

----------------------------------------

TITLE: Applying lower Filter in Django Templates
DESCRIPTION: The lower filter converts a string into all lowercase characters.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_78

LANGUAGE: html+django
CODE:
```
{{ value|lower }}
```

----------------------------------------

TITLE: Defining DecimalValidator in Django
DESCRIPTION: Validator class that enforces constraints on decimal numbers including maximum digits and decimal places. Raises ValidationError for violations of digit constraints.
SOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
DecimalValidator(max_digits, decimal_places)
```

----------------------------------------

TITLE: Extracting with Timezone Override in Django ORM - Python
DESCRIPTION: Demonstrates extracting date/time parts from DateTimeField while temporarily overriding Django's timezone. Requires django.utils.timezone, zoneinfo, and a model with DateTimeField. The code adjusts the returned values according to the custom timezone used, and is useful for applications that need localized data output.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
>>> from django.utils import timezone\n>>> import zoneinfo\n>>> melb = zoneinfo.ZoneInfo("Australia/Melbourne")  # UTC+10:00\n>>> with timezone.override(melb):\n...     Experiment.objects.annotate(\n...         day=ExtractDay("start_datetime"),\n...         weekday=ExtractWeekDay("start_datetime"),\n...         isoweekday=ExtractIsoWeekDay("start_datetime"),\n...         hour=ExtractHour("start_datetime"),\n...     ).values("day", "weekday", "isoweekday", "hour").get(\n...         end_datetime__year=ExtractYear("start_datetime"),\n...     )\n...\n{'day': 16, 'weekday': 3, 'isoweekday': 2, 'hour': 9}\n
```

----------------------------------------

TITLE: Rendering Django Form as HTML Div Elements
DESCRIPTION: Demonstrates the output of the as_div() method, which renders form fields as a series of <div> elements.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_22

LANGUAGE: HTML
CODE:
```
<div>
<label for="id_subject">Subject:</label>
<input type="text" name="subject" maxlength="100" required id="id_subject">
</div>
<div>
<label for="id_message">Message:</label>
<input type="text" name="message" required id="id_message">
</div>
<div>
<label for="id_sender">Sender:</label>
<input type="email" name="sender" required id="id_sender">
</div>
<div>
<label for="id_cc_myself">Cc myself:</label>
<input type="checkbox" name="cc_myself" id="id_cc_myself">
</div>
```

----------------------------------------

TITLE: Configuring ADMINS
DESCRIPTION: This snippet shows an example configuration for the ADMINS setting. The ADMINS setting specifies a list of email addresses that receive error notifications when DEBUG is False and AdminEmailHandler is configured in LOGGING.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_1

LANGUAGE: python
CODE:
```
ADMINS = ["john@example.com", '"Ng, Mary" <mary@example.com>']
```

----------------------------------------

TITLE: Installing Pre-commit Hooks for Django Development
DESCRIPTION: Commands to install pre-commit and configure Git hooks for automatic code checking and formatting before committing code for review. This helps identify simple issues early and standardizes code formatting.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
$ python -m pip install pre-commit
$ pre-commit install
```

----------------------------------------

TITLE: Demonstrating Idempotency of M2M Add Operation (pycon)
DESCRIPTION: Shows that calling `add()` with a `Publication` (`p3`) that is already related to the `Article` (`a2`) does not create a duplicate relationship or raise an error. The operation is idempotent.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_7

LANGUAGE: pycon
CODE:
```
>>> a2.publications.add(p3)
```

----------------------------------------

TITLE: Applying safe and safeseq Filters in Django Templates
DESCRIPTION: The safe filter marks a string as not requiring further HTML escaping. The safeseq filter applies the safe filter to each element of a sequence.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_84

LANGUAGE: html+django
CODE:
```
{{ var|safe|escape }}
```

LANGUAGE: html+django
CODE:
```
{{ some_list|safeseq|join:", " }}
```

----------------------------------------

TITLE: Annotating QuerySet with Window Function (Average) - Django ORM - Python
DESCRIPTION: Demonstrates Django's Window annotation to calculate the average rating for movies grouped by studio and genre and ordered by release year. Requires Django models named 'Movie' and respective fields ('rating', 'studio', 'genre', 'released__year'). The call returns a QuerySet where each movie entry is annotated with 'avg_rating', representing the peer-average in its group. The partitions and ordering enable meaningful peer comparison.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
>>> from django.db.models import Avg, F, Window
>>> Movie.objects.annotate(
...     avg_rating=Window(
...         expression=Avg("rating"),
...         partition_by=[F("studio"), F("genre")],
...         order_by="released__year",
...     ),
... )
```

----------------------------------------

TITLE: Returning Related Model Data as Dictionaries (FK by ID Field Name) Python
DESCRIPTION: Uses values() specifying the explicit ForeignKey ID field name ('blog_id'). The resulting dictionary uses the ID field name ('blog_id') as the key, storing the primary key of the related object, matching the default values() output for this field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_24

LANGUAGE: Python
CODE:
```
>>> Entry.objects.values("blog_id")
```

----------------------------------------

TITLE: Setting the active language and persisting it in a cookie
DESCRIPTION: Demonstrates how to explicitly set the active language for the current thread and persist it in a cookie for future requests.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_59

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.http import HttpResponse
from django.utils import translation

user_language = "fr"
translation.activate(user_language)
response = HttpResponse(...)
response.set_cookie(settings.LANGUAGE_COOKIE_NAME, user_language)
```

----------------------------------------

TITLE: Using a Custom InlineFormSet
DESCRIPTION: Demonstrates how to use a custom InlineFormSet when creating an inline formset using inlineformset_factory.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_35

LANGUAGE: python
CODE:
```
>>> from django.forms import inlineformset_factory
>>> BookFormSet = inlineformset_factory(
...     Author, Book, fields=["title"], formset=CustomInlineFormSet
... )
>>> author = Author.objects.get(name="Mike Royko")
>>> formset = BookFormSet(instance=author)
```

----------------------------------------

TITLE: Settings Override Decorator in Django Tests
DESCRIPTION: Shows how to use the override_settings decorator to modify settings at the method or class level in Django tests.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_35

LANGUAGE: python
CODE:
```
from django.test import TestCase, override_settings


class LoginTestCase(TestCase):
    @override_settings(LOGIN_URL="/other/login/")
    def test_login(self):
        response = self.client.get("/sekrit/")
        self.assertRedirects(response, "/other/login/?next=/sekrit/")
```

----------------------------------------

TITLE: Inheriting Auto-Escaping Settings in Django Child Templates
DESCRIPTION: Demonstrates a child Django template (`child.html`) extending `base.html` (where `autoescape` was turned off in the example). Due to inheritance of the `autoescape off` setting from the parent template's wrapping block, variables like `{{ greeting }}` within the child template's blocks will also not be auto-escaped.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_20

LANGUAGE: html+django
CODE:
```
{% extends "base.html" %}
{% block title %}This &amp; that{% endblock %}
{% block content %}{{ greeting }}{% endblock %}
```

----------------------------------------

TITLE: Default Options for PyMemcacheCache Backend in Django (Python)
DESCRIPTION: This Python snippet shows the default options applied to the `PyMemcacheCache` backend within the Django `CACHES` setting. These options, including handling of Unicode keys, default noreply behavior, and serialization method (`pickle_serde`), can be overridden via the `OPTIONS` dictionary.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
"OPTIONS": {
    "allow_unicode_keys": True,
    "default_noreply": False,
    "serde": pymemcache.serde.pickle_serde,
}
```

----------------------------------------

TITLE: Defining GeoDjango Model for Spatial Data
DESCRIPTION: Example of creating a GeoDjango model class with a character field and polygon field to store spatial data imported from a shapefile.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/layermapping.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib.gis.db import models


class TestGeo(models.Model):
    name = models.CharField(max_length=25)  # corresponds to the 'str' field
    poly = models.PolygonField(srid=4269)  # we want our model in a different SRID

    def __str__(self):
        return "Name: %s" % self.name
```

----------------------------------------

TITLE: Applying distinct() on Multiple Specific Fields (PostgreSQL) Python
DESCRIPTION: Applies DISTINCT ON (fields) for multiple fields on PostgreSQL. Requires order_by() to list these fields first in the same order. Filters results to the first row for each unique combination of the specified fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_11

LANGUAGE: Python
CODE:
```
>>> Entry.objects.order_by("author", "pub_date").distinct("author", "pub_date")
```

----------------------------------------

TITLE: Basic Key Lookup in Django JSONField
DESCRIPTION: Shows how to query a JSONField based on dictionary keys, including creating objects with nested JSON data and querying by specific key values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
>>> Dog.objects.create(
...     name="Rufus",
...     data={
...         "breed": "labrador",
...         "owner": {
...             "name": "Bob",
...             "other_pets": [
...                 {
...                     "name": "Fishy",
...                 }
...             ],
...         },
...     },
... )
<Dog: Rufus>
>>> Dog.objects.create(name="Meg", data={"breed": "collie", "owner": None})
<Dog: Meg>
>>> Dog.objects.filter(data__breed="collie")
<QuerySet [<Dog: Meg>]>
```

----------------------------------------

TITLE: Installing Uvicorn Package
DESCRIPTION: Command to install the Uvicorn ASGI server using pip package manager.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/uvicorn.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
python -m pip install uvicorn
```

----------------------------------------

TITLE: Using Non-Escaped String Literals as Django Filter Arguments
DESCRIPTION: Illustrates that string literals provided as arguments to Django template filters (like `default`) are inserted directly without any automatic HTML escaping. They act as if passed through the `safe` filter. Template authors are responsible for ensuring literals are correctly escaped if needed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_22

LANGUAGE: html+django
CODE:
```
{{ data|default:"This is a string literal." }}
```

----------------------------------------

TITLE: Defining Multiple Fixtures in a Django TestCase (Python)
DESCRIPTION: Demonstrates specifying multiple fixtures in the 'fixtures' attribute of a Django TestCase class to ensure they are loaded in order at test setup. Requires Django and all listed fixture files ('mammals', 'birds', 'insects') to be present. Input: ordered list of fixtures; Output: test database pre-populated with the combined data from all specified fixtures.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
class AnimalTestCase(TestCase):
    fixtures = ["mammals", "birds", "insects"]
```

----------------------------------------

TITLE: Extending Django Admin Change Form Template
DESCRIPTION: Example of overriding the object-tools-items block in the admin change_form.html template to add a custom link alongside the History tool for Page models.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_75

LANGUAGE: html+django
CODE:
```
{% extends "admin/change_form.html" %}
{% load i18n admin_urls %}
{% block object-tools-items %}
    <li>
        <a href="{% url opts|admin_urlname:'history' original.pk|admin_urlquote %}" class="historylink">{% translate "History" %}</a>
    </li>
    <li>
        <a href="mylink/" class="historylink">My Link</a>
    </li>
    {% if has_absolute_url %}
        <li>
            <a href="{% url 'admin:view_on_site' content_type_id original.pk %}" class="viewsitelink">{% translate "View on site" %}</a>
        </li>
    {% endif %}
{% endblock %}
```

----------------------------------------

TITLE: Using blocktranslate tag with multiple expressions in Django templates
DESCRIPTION: Shows how to use multiple expressions inside a single {% blocktranslate %} tag in Django templates.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_24

LANGUAGE: html+django
CODE:
```
{% blocktranslate with book_t=book|title author_t=author|title %}
This is {{ book_t }} by {{ author_t }}
{% endblocktranslate %}
```

----------------------------------------

TITLE: Documentation of last() and alast() methods in Django ORM
DESCRIPTION: Provides details about retrieving the last object in a QuerySet using the last() method and its asynchronous version alast(). These methods return the last element based on the queryset's ordering, with alast() performing asynchronously. They depend on the QuerySet being ordered or default ordering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_84

LANGUAGE: Python
CODE:
```
 works like :meth:`first()`, but returns the last object in the queryset.
```

----------------------------------------

TITLE: Defining Django DecimalField (Large Number) - Python
DESCRIPTION: Example demonstrating how to configure a Django `DecimalField` to store large numbers with a maximum of 19 digits in total, including 10 decimal places. This allows storing values up to approximately one billion with high precision.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_18

LANGUAGE: Python
CODE:
```
models.DecimalField(..., max_digits=19, decimal_places=10)
```

----------------------------------------

TITLE: Configuring Redis Cache Backend with Replication in Django (Python)
DESCRIPTION: This Python snippet configures the Django `CACHES` setting to use multiple Redis servers in a replication setup. The first server in the `LOCATION` list acts as the leader (for writes), and the others act as read replicas. Read operations are distributed randomly among replicas. Requires the `redis-py` library.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": [
            "redis://127.0.0.1:6379",  # leader
            "redis://127.0.0.1:6378",  # read-replica 1
            "redis://127.0.0.1:6377",  # read-replica 2
        ],
    }
}
```

----------------------------------------

TITLE: Defining Custom Field in Django Model
DESCRIPTION: Example of how to use a custom field (BetterCharField) in a Django model definition.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_11

LANGUAGE: Python
CODE:
```
class MyModel(models.Model):
    # ...
    my_field = BetterCharField(25)
```

----------------------------------------

TITLE: Using pgettext for Contextual Translations in Python
DESCRIPTION: Demonstrates how to use pgettext() function to provide context for translations, allowing translators to give different translations for the same string in different contexts.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_9

LANGUAGE: Python
CODE:
```
from django.utils.translation import pgettext

month = pgettext("month name", "May")
```

----------------------------------------

TITLE: Iterating Over QueryDict Items and Values in Python
DESCRIPTION: Demonstrates how to iterate over items and values in a QueryDict, which returns only the last value for each key.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
>>> q = QueryDict("a=1&a=2&a=3")
>>> list(q.items())
[('a', '3')]
>>> list(q.values())
['3']
```

----------------------------------------

TITLE: Implementing Custom JSON Encoder in Python
DESCRIPTION: Demonstrates how to create a custom JSON encoder class that handles special Django types. It extends the default JSON encoder to handle custom types.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
if isinstance(obj, YourCustomType):
    return str(obj)
return super().default(obj)
```

----------------------------------------

TITLE: Validating a Valid Formset
DESCRIPTION: Demonstrates validating a formset with the is_valid() method, showing how an empty formset with proper management form data is considered valid since no forms were modified.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> from django.forms import formset_factory
>>> from myapp.forms import ArticleForm
>>> ArticleFormSet = formset_factory(ArticleForm)
>>> data = {
...     "form-TOTAL_FORMS": "1",
...     "form-INITIAL_FORMS": "0",
... }
>>> formset = ArticleFormSet(data)
>>> formset.is_valid()
True
```

----------------------------------------

TITLE: Using LPad Function in Django Models
DESCRIPTION: Shows how to left-pad text fields with the LPad function
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
>>> from django.db.models import Value
>>> from django.db.models.functions import LPad
>>> Author.objects.create(name="John", alias="j")
```

----------------------------------------

TITLE: Storing Manager from_queryset Class Django
DESCRIPTION: This snippet shows that the manager class returned by `Manager.from_queryset()` can be assigned to a variable. This variable can then be used to instantiate the custom manager on a model.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_9

LANGUAGE: Python
CODE:
```
MyManager = CustomManager.from_queryset(CustomQuerySet)


class MyModel(models.Model):
    objects = MyManager()
```

----------------------------------------

TITLE: Run Django testserver on custom address/port with fixtures (Alternate Option Order) (Console)
DESCRIPTION: Illustrates that the order of options and arguments doesn't affect the execution of `django-admin testserver`. This example shows the `--addrport` option placed after the fixture arguments with the same result as the previous snippet.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_44

LANGUAGE: console
CODE:
```
django-admin testserver fixture1 fixture2 --addrport 7000
```

----------------------------------------

TITLE: Using Placeholders in Abstract Model Related Names (Django)
DESCRIPTION: Shows how to use %(app_label)s and %(class)s placeholders in related_name and related_query_name attributes of fields in Django abstract base classes to generate unique reverse accessors for inheriting models.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_39

LANGUAGE: Python
CODE:
```
    from django.db import models


    class Base(models.Model):
        m2m = models.ManyToManyField(
            OtherModel,
            related_name="%(app_label)s_%(class)s_related",
            related_query_name="%(app_label)s_%(class)ss",
        )

        class Meta:
            abstract = True


    class ChildA(Base):
        pass


    class ChildB(Base):
        pass
```

----------------------------------------

TITLE: Calculating Average Price Directly on Model Manager (pycon)
DESCRIPTION: A simplified version of calculating the average book price, demonstrating that calling `aggregate()` directly on the model manager (`Book.objects`) is equivalent to calling it on the full QuerySet (`Book.objects.all()`). Imports `Avg` from `django.db.models`. The output is a dictionary with the calculated average price.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_4

LANGUAGE: pycon
CODE:
```
>>> Book.objects.aggregate(Avg("price"))
{'price__avg': 34.35}
```

----------------------------------------

TITLE: Configuring Django App for Reusability
DESCRIPTION: Modifies the AppConfig in apps.py to use the new module name and adds a label for the app. This configuration is necessary when preparing a Django app for reuse in other projects.
SOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.apps import AppConfig


class PollsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "django_polls"
    label = "polls"
```

----------------------------------------

TITLE: Customizing Empty Value Display for Individual Fields
DESCRIPTION: Example showing how to set a custom empty value display for a specific field by using the empty_value parameter with the admin.display decorator.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    list_display = ["name", "birth_date_view"]

    @admin.display(empty_value="unknown")
    def birth_date_view(self, obj):
        return obj.birth_date
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'overlap' Lookup in Django Python
DESCRIPTION: Uses the `overlap` lookup (`__overlap`, SQL operator `&&`) to query the `ages` `IntegerRangeField`. This finds `Event` objects where the `ages` range shares any point in common (overlaps) with the specified `NumericRange(8, 12)`. Requires the `Event` model and `NumericRange`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_22

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__overlap=NumericRange(8, 12))
<QuerySet [<Event: Soft play>]>
```

----------------------------------------

TITLE: Configuring Sortable Fields in Django ModelAdmin
DESCRIPTION: Example showing how to customize sortable columns in the admin change list view by overriding the get_sortable_by method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_44

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    def get_sortable_by(self, request):
        return {*self.get_list_display(request)} - {"rank"}
```

----------------------------------------

TITLE: Custom FileSystemStorage Example in Django
DESCRIPTION: Example of using Django's FileSystemStorage with a custom location. This allows storing files in a specific directory regardless of the MEDIA_ROOT setting.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.core.files.storage import FileSystemStorage
from django.db import models

fs = FileSystemStorage(location="/media/photos")


class Car(models.Model):
    ...
    photo = models.ImageField(storage=fs)
```

----------------------------------------

TITLE: Demonstrating HttpRequest.accepts Usage in Django (Python)
DESCRIPTION: Provides an example of the accepts() method, which evaluates whether a given mime_type is accepted by the client's Accept header. Inputs: a specific mime_type string; output: Boolean indicating whether the mime type is accepted. Defaults accommodate browsers' typical Accept: */* behavior.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> request.accepts("text/html")
True

```

----------------------------------------

TITLE: Applying distinct() on Specific Fields (PostgreSQL) Python
DESCRIPTION: Applies the DISTINCT ON (fields) clause to a QuerySet on PostgreSQL. Requires an order_by() clause that starts with the same fields in the same order. Returns the first row for each unique combination of the specified fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_9

LANGUAGE: Python
CODE:
```
>>> Entry.objects.order_by("pub_date").distinct("pub_date")
```

----------------------------------------

TITLE: Using QuerySet intersection method in Django
DESCRIPTION: Demonstrates how to use the INTERSECT SQL operator through Django's QuerySet.intersection() method to return shared elements between multiple QuerySets.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_31

LANGUAGE: python
CODE:
```
>>> qs1.intersection(qs2, qs3)
```

----------------------------------------

TITLE: Applying Multiple Decorators to Django Class-Based Views (Python/Django)
DESCRIPTION: This example demonstrates two equivalent ways to apply multiple decorators to a class-based view. The first approach uses a list of decorators, while the second applies multiple method_decorator declarations. Both achieve the same result of applying never_cache and login_required in sequence.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
decorators = [never_cache, login_required]


@method_decorator(decorators, name="dispatch")
class ProtectedView(TemplateView):
    template_name = "secret.html"


@method_decorator(never_cache, name="dispatch")
@method_decorator(login_required, name="dispatch")
class ProtectedView(TemplateView):
    template_name = "secret.html"
```

----------------------------------------

TITLE: Using linebreaks Filter
DESCRIPTION: Demonstrates converting plain text line breaks to HTML breaks and paragraphs.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_76

LANGUAGE: html+django
CODE:
```
{{ value|linebreaks }}
```

----------------------------------------

TITLE: Specifying NullBooleanField Widget Choices in Django Forms - Python
DESCRIPTION: This Python code block demonstrates how to instantiate a NullBooleanField using a custom widget, specifically Select, with explicit choices for representing unknown, yes, or no values. Required dependencies include Django's forms, Select widget, and appropriate field imports. It shows how to customize presentation and underlying stored values for tri-state boolean fields, commonly used when a boolean may be set to True, False, or Unknown/null.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
NullBooleanField(
    widget=Select(
        choices=[
            ("", "Unknown"),
            (True, "Yes"),
            (False, "No"),
        ]
    )
)
```

----------------------------------------

TITLE: Defining Models with Multi-table Inheritance (Django)
DESCRIPTION: Shows how to define a parent model (Place) and a child model (Restaurant) using Django's multi-table inheritance. The child model automatically inherits fields from the parent and is linked via an implicit OneToOneField.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_40

LANGUAGE: python
CODE:
```
from django.db import models


class Place(models.Model):
    name = models.CharField(max_length=50)
    address = models.CharField(max_length=80)


class Restaurant(Place):
    serves_hot_dogs = models.BooleanField(default=False)
    serves_pizza = models.BooleanField(default=False)
```

----------------------------------------

TITLE: Creating ModelForm Class with modelform_factory (Django, Python)
DESCRIPTION: The modelform_factory function returns a ModelForm class customized for a given Django model. It requires a model and can take optional arguments to specify included or excluded model fields, custom widgets, field classes, labels, help texts, error messages, and a formfield_callback for advanced customization. The fields to include must be provided explicitly, either via function arguments or within a Meta class; otherwise, ImproperlyConfigured will be raised. Inputs include the model and configuration options, and the output is a dynamic ModelForm class tailored to the specified model and options. Requires Django's django.forms.models module.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/models.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfield_callback=None, widgets=None, localized_fields=None, labels=None, help_texts=None, error_messages=None, field_classes=None)
```

----------------------------------------

TITLE: Implementing Custom CSV Serializer in Python
DESCRIPTION: Defines a custom CSV serializer class that extends Django's base serializer. It converts model instances to CSV format, including a header row with field names.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
import csv

from django.apps import apps
from django.core import serializers
from django.core.serializers.base import DeserializationError


class Serializer(serializers.python.Serializer):
    def get_dump_object(self, obj):
        dumped_object = super().get_dump_object(obj)
        row = [dumped_object["model"], str(dumped_object["pk"])]
        row += [str(value) for value in dumped_object["fields"].values()]
        return ",".join(row), dumped_object["model"]

    def end_object(self, obj):
        dumped_object_str, model = self.get_dump_object(obj)
        if self.first:
            fields = [field.name for field in apps.get_model(model)._meta.fields]
            header = ",".join(fields)
            self.stream.write(f"model,{header}\n")
        self.stream.write(f"{dumped_object_str}\n")

    def getvalue(self):
        return super(serializers.python.Serializer, self).getvalue()
```

----------------------------------------

TITLE: Year Archive Template Example
DESCRIPTION: Django template for displaying yearly article archives with date lists and object lists.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_5

LANGUAGE: html
CODE:
```
<ul>
    {% for date in date_list %}
        <li>{{ date|date }}</li>
    {% endfor %}
</ul>

<div>
    <h1>All Articles for {{ year|date:"Y" }}</h1>
    {% for obj in object_list %}
        <p>
            {{ obj.title }} - {{ obj.pub_date|date:"F j, Y" }}
        </p>
    {% endfor %}
</div>
```

----------------------------------------

TITLE: Configuring URL Patterns for RedirectViews in Django
DESCRIPTION: Shows how to set up URL patterns for custom and built-in RedirectViews in Django's urls.py file.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/base.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.urls import path
from django.views.generic.base import RedirectView

from article.views import ArticleCounterRedirectView, ArticleDetailView

urlpatterns = [
    path(
        "counter/<int:pk>/",
        ArticleCounterRedirectView.as_view(),
        name="article-counter",
    ),
    path("details/<int:pk>/", ArticleDetailView.as_view(), name="article-detail"),
    path(
        "go-to-django/",
        RedirectView.as_view(url="https://www.djangoproject.com/"),
        name="go-to-django",
    ),
]
```

----------------------------------------

TITLE: HTML form for language selection in Django templates
DESCRIPTION: A template code example showing how to create a language selection form that uses Django's set_language view to change the user's language preference.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_58

LANGUAGE: html
CODE:
```
{% load i18n %}

<form action="{% url 'set_language' %}" method="post">{% csrf_token %}
    <input name="next" type="hidden" value="{{ redirect_to }}">
    <select name="language">
        {% get_current_language as LANGUAGE_CODE %}
        {% get_available_languages as LANGUAGES %}
        {% get_language_info_list for LANGUAGES as languages %}
        {% for language in languages %}
            <option value="{{ language.code }}"{% if language.code == LANGUAGE_CODE %} selected{% endif %}>
                {{ language.name_local }} ({{ language.code }})
            </option>
        {% endfor %}
    </select>
    <input type="submit" value="Go">
</form>
```

----------------------------------------

TITLE: Defining FileExtensionValidator in Django
DESCRIPTION: Validator class that checks if a file's extension is in an allowed list. Raises ValidationError if the file extension is not allowed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
FileExtensionValidator(allowed_extensions, message, code)
```

----------------------------------------

TITLE: Detailed Question Template with Choices
DESCRIPTION: Template that displays question text and iterates through related choices using Django template language.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_9

LANGUAGE: html+django
CODE:
```
<h1>{{ question.question_text }}</h1>
<ul>
{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }}</li>
{% endfor %}
</ul>
```

----------------------------------------

TITLE: Implementing TestCase.setUpTestData in Django
DESCRIPTION: An example showing how to use TestCase.setUpTestData to set up data once for all test methods in a test case for better performance.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
from django.test import TestCase


class MyTests(TestCase):
    @classmethod
    def setUpTestData(cls):
        # Set up data for the whole TestCase
        cls.foo = Foo.objects.create(bar="Test")
        ...

    def test1(self):
        # Some test using self.foo
        ...

    def test2(self):
        # Some other test using self.foo
        ...
```

----------------------------------------

TITLE: Limiting Editable Objects in Model Formset in Python
DESCRIPTION: Shows how to limit the number of editable objects in a model formset using max_num and extra parameters.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_27

LANGUAGE: pycon
CODE:
```
>>> Author.objects.order_by("name")
<QuerySet [<Author: Charles Baudelaire>, <Author: Paul Verlaine>, <Author: Walt Whitman>]>

>>> AuthorFormSet = modelformset_factory(Author, fields=["name"], max_num=1)
>>> formset = AuthorFormSet(queryset=Author.objects.order_by("name"))
>>> [x.name for x in formset.get_queryset()]
['Charles Baudelaire', 'Paul Verlaine', 'Walt Whitman']
```

LANGUAGE: pycon
CODE:
```
>>> AuthorFormSet = modelformset_factory(Author, fields=["name"], max_num=4, extra=2)
>>> formset = AuthorFormSet(queryset=Author.objects.order_by("name"))
>>> for form in formset:
...     print(form)
...
<div><label for="id_form-0-name">Name:</label><input id="id_form-0-name" type="text" name="form-0-name" value="Charles Baudelaire" maxlength="100"><input type="hidden" name="form-0-id" value="1" id="id_form-0-id"></div>
```

----------------------------------------

TITLE: Extending Django Admin Change Form Template for Custom JavaScript
DESCRIPTION: This snippet demonstrates how to extend the Django admin change form template to include custom JavaScript for handling inline form events. It loads a custom JavaScript file using the static template tag.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/javascript.txt#2025-04-23_snippet_0

LANGUAGE: html
CODE:
```
{% extends 'admin/change_form.html' %}
{% load static %}

{% block admin_change_form_document_ready %}
{{ block.super }}
<script src="{% static 'app/formset_handlers.js' %}"></script>
{% endblock %}
```

----------------------------------------

TITLE: Using `resolve` to Prevent 404 Errors Before Redirecting in Django (Python)
DESCRIPTION: Demonstrates a practical use case for `django.urls.resolve` within a Django view. Before performing an `HttpResponseRedirect` based on the HTTP referer, the code resolves the target URL's path using `resolve`. It then attempts to call the resolved view function (`view`) with the extracted arguments and the current request object. If this call raises an `Http404` exception, it safely redirects to the root ('/') instead, preventing a potential redirect to a non-existent page. Requires `urllib.parse.urlsplit`, `django.urls.resolve`, `django.http.Http404`, and `django.http.HttpResponseRedirect`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from urllib.parse import urlsplit
from django.urls import resolve
from django.http import Http404, HttpResponseRedirect


def myview(request):
    next = request.META.get("HTTP_REFERER", None) or "/"
    response = HttpResponseRedirect(next)

    # modify the request and response as required, e.g. change locale
    # and set corresponding locale cookie

    view, args, kwargs = resolve(urlsplit(next).path)
    kwargs["request"] = request
    try:
        view(*args, **kwargs)
    except Http404:
        return HttpResponseRedirect("/")
    return response
```

----------------------------------------

TITLE: Using regroup Tag in Django Templates
DESCRIPTION: This snippet demonstrates the regroup tag which groups a list of objects by a common attribute. In this example, cities are grouped by country and displayed in a hierarchical list.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_35

LANGUAGE: html+django
CODE:
```
{% regroup cities by country as country_list %}

<ul>
{% for country in country_list %}
    <li>{{ country.grouper }}
    <ul>
        {% for city in country.list %}
          <li>{{ city.name }}: {{ city.population }}</li>
        {% endfor %}
    </ul>
    </li>
{% endfor %}
</ul>
```

----------------------------------------

TITLE: Calling Parent's render_to_response Method in Django View
DESCRIPTION: This snippet demonstrates how to call the parent class's render_to_response method in a Django class-based view. It uses the super() function to access the parent class's implementation, passing the context dictionary as an argument.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_12

LANGUAGE: Python
CODE:
```
super().render_to_response(context)
```

----------------------------------------

TITLE: Implementing db_type Method for Custom Django Field
DESCRIPTION: This snippet shows how to implement the db_type method for a custom Django field. It returns a SQL column type based on the field's max_length attribute.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_10

LANGUAGE: Python
CODE:
```
def db_type(self, connection):
    return "char(%s)" % self.max_length
```

----------------------------------------

TITLE: Handling Pluralization with ngettext in Django
DESCRIPTION: Demonstrates how to implement pluralization using Django's ngettext function. It handles singular and plural forms based on a count variable.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
from django.http import HttpResponse
from django.utils.translation import ngettext


def hello_world(request, count):
    page = ngettext(
        "there is %(count)d object",
        "there are %(count)d objects",
        count,
    ) % {
        "count": count,
    }
    return HttpResponse(page)
```

----------------------------------------

TITLE: Django Session Login Implementation
DESCRIPTION: Basic implementation of a login system using Django sessions to store member ID after successful authentication.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
def login(request):
    m = Member.objects.get(username=request.POST["username"])
    if m.check_password(request.POST["password"]):
        request.session["member_id"] = m.id
        return HttpResponse("You're logged in.")
    else:
        return HttpResponse("Your username and password didn't match.")
```

----------------------------------------

TITLE: Implementing DayArchiveView in Django
DESCRIPTION: Example of how to create a DayArchiveView for displaying articles by day. It includes the view definition, URL configuration, and an HTML template for rendering the daily archive.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_10

LANGUAGE: Python
CODE:
```
from django.views.generic.dates import DayArchiveView

from myapp.models import Article


class ArticleDayArchiveView(DayArchiveView):
    queryset = Article.objects.all()
    date_field = "pub_date"
    allow_future = True
```

LANGUAGE: Python
CODE:
```
from django.urls import path

from myapp.views import ArticleDayArchiveView

urlpatterns = [
    # Example: /2012/nov/10/
    path(
        "<int:year>/<str:month>/<int:day>/",
        ArticleDayArchiveView.as_view(),
        name="archive_day",
    ),
]
```

LANGUAGE: HTML
CODE:
```
<h1>{{ day }}</h1>

<ul>
    {% for article in object_list %}
        <li>{{ article.pub_date|date:"F j, Y" }}: {{ article.title }}</li>
    {% endfor %}
</ul>

<p>
    {% if previous_day %}
        Previous Day: {{ previous_day }}
    {% endif %}
    {% if previous_day and next_day %}--{% endif %}
    {% if next_day %}
        Next Day: {{ next_day }}
    {% endif %}
</p>
```

----------------------------------------

TITLE: Creating Django File from Python File Object (Python)
DESCRIPTION: Demonstrates how to create a Django File object from a standard Python file object. This is useful when you have an existing file opened with Python's built-in open() and need to pass its contents to a Django file field's save method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_21

LANGUAGE: Python
CODE:
```
from django.core.files import File

# Open an existing file using Python's built-in open()
f = open("/path/to/hello.world")
myfile = File(f)
```

----------------------------------------

TITLE: Using AsyncClient in an asynchronous test method
DESCRIPTION: Example of an asynchronous test method using AsyncClient to make an HTTP request. Shows how the request method must be awaited when using AsyncClient.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_48

LANGUAGE: python
CODE:
```
async def test_my_thing(self):
    response = await self.async_client.get("/some-url/")
    self.assertEqual(response.status_code, 200)
```

----------------------------------------

TITLE: Creating a File Object in Django
DESCRIPTION: Example showing how to manually create a Django File object from a Python file object. This demonstrates basic file handling but notes that files need to be closed manually.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> from django.core.files import File

# Create a Python file object using open()
>>> f = open("/path/to/hello.world", "w")
>>> myfile = File(f)
```

----------------------------------------

TITLE: Implementing Custom Widget Overrides in Django ModelAdmin
DESCRIPTION: Example showing how to use formfield_overrides to replace default TextField widget with a custom RichTextEditorWidget in Django admin. The dictionary key is the field class itself, not a string, with values passed to the form field's __init__() method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.db import models

# Import our custom widget and our model from where they're defined
from myapp.models import MyModel
from myapp.widgets import RichTextEditorWidget


class MyModelAdmin(admin.ModelAdmin):
    formfield_overrides = {
        models.TextField: {"widget": RichTextEditorWidget},
    }
```

----------------------------------------

TITLE: Getting Email Connection with Arguments in Django 1.2+ (Python)
DESCRIPTION: This snippet shows how to pass additional configuration arguments (like hostname and port) directly to `get_connection()` when obtaining an email connection. These arguments are passed to the backend's constructor.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
connection = get_connection(
    "django.core.mail.backends.smtp.EmailBackend", hostname="localhost", port=1234
)
```

----------------------------------------

TITLE: Using slice Filter in Django Templates
DESCRIPTION: The slice filter returns a slice of the list using Python's list slicing syntax.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_85

LANGUAGE: html+django
CODE:
```
{{ some_list|slice:":2" }}
```

----------------------------------------

TITLE: Getting Generic Email Connection in Django 1.2+ (Python)
DESCRIPTION: This snippet shows the recommended way to obtain an email connection instance in Django 1.2+ using `get_connection()` from `django.core.mail`. This function returns a connection instance based on the `EMAIL_BACKEND` setting, promoting flexibility.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
from django.core.mail import get_connection

connection = get_connection()
messages = get_notification_email()
connection.send_messages(messages)
```

----------------------------------------

TITLE: ManyToManyField Related Name Clash (Django)
DESCRIPTION: Shows a Supplier model inheriting from Place with a ManyToManyField that causes a reverse name clash error because the default related name conflicts with the implicit parent link field's reverse name.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_45

LANGUAGE: python
CODE:
```
class Supplier(Place):
    customers = models.ManyToManyField(Place)
```

----------------------------------------

TITLE: ModelAdmin with Date Hierarchy Configuration
DESCRIPTION: Example of configuring a ModelAdmin class with the date_hierarchy option for date-based navigation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.contrib import admin


class AuthorAdmin(admin.ModelAdmin):
    date_hierarchy = "pub_date"
```

----------------------------------------

TITLE: Disabling Block Auto-Escaping with Django `autoescape` Tag
DESCRIPTION: Demonstrates using the `{% autoescape off %}` template tag in Django to disable HTML auto-escaping for an entire block of template content. Any variables rendered within this block, like `{{ name }}`, will not be escaped.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_17

LANGUAGE: html+django
CODE:
```
{% autoescape off %}
    Hello {{ name }}
{% endautoescape %}
```

----------------------------------------

TITLE: Installing and Running Tests with Tox
DESCRIPTION: This snippet shows how to install Tox and use it to run Django's automated test suite. Tox runs tests in isolated environments and includes checks for code formatting, import sorting, and documentation spelling.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_1

LANGUAGE: console
CODE:
```
$ python -m pip install tox
$ tox
```

----------------------------------------

TITLE: Custom Signal Definition in Django
DESCRIPTION: Example showing how to define a custom signal for application-specific events.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
import django.dispatch

pizza_done = django.dispatch.Signal()
```

----------------------------------------

TITLE: Prefetching Django GenericForeignKey Relationships with GenericPrefetch (Python)
DESCRIPTION: Illustrates the use of `GenericPrefetch` to efficiently prefetch related objects through a `GenericForeignKey` when those objects might belong to different models (ContentTypes). The example sets up `Bookmark`, `Animal`, and `TaggedItem` objects, then uses `GenericPrefetch` with specific querysets for `Bookmark` and `Animal` to optimize the retrieval of `TaggedItem` objects along with their related `content_object`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_6

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.contenttypes.prefetch import GenericPrefetch
>>> bookmark = Bookmark.objects.create(url="https://www.djangoproject.com/")
>>> animal = Animal.objects.create(name="lion", weight=100)
>>> TaggedItem.objects.create(tag="great", content_object=bookmark)
>>> TaggedItem.objects.create(tag="awesome", content_object=animal)
>>> prefetch = GenericPrefetch(
...     "content_object", [Bookmark.objects.all(), Animal.objects.only("name")]
... )
>>> TaggedItem.objects.prefetch_related(prefetch).all()
<QuerySet [<TaggedItem: Great>, <TaggedItem: Awesome>]>
```

----------------------------------------

TITLE: Filtering Many-to-Many Fields in Django ModelAdmin
DESCRIPTION: This method shows how to customize the formfield for many-to-many fields in the admin interface, filtering the queryset based on the current user.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_51

LANGUAGE: python
CODE:
```
class MyModelAdmin(admin.ModelAdmin):
    def formfield_for_manytomany(self, db_field, request, **kwargs):
        if db_field.name == "cars":
            kwargs["queryset"] = Car.objects.filter(owner=request.user)
        return super().formfield_for_manytomany(db_field, request, **kwargs)
```

----------------------------------------

TITLE: Defining Abstract Base Model with Extra Manager Django
DESCRIPTION: This snippet defines an abstract Django model class (`Meta.abstract = True`) and assigns an instance of `OtherManager()` to an attribute named `extra_manager`. This manager is intended to be inherited by subclasses alongside other managers.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_13

LANGUAGE: Python
CODE:
```
class ExtraManager(models.Model):
    extra_manager = OtherManager()

    class Meta:
        abstract = True
```

----------------------------------------

TITLE: Configuring RelatedOnlyFieldListFilter in Django Admin
DESCRIPTION: Demonstrates how to use RelatedOnlyFieldListFilter to limit choices in a related model filter to only the objects involved in that relation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class BookAdmin(admin.ModelAdmin):
    list_filter = [
        ("author", admin.RelatedOnlyFieldListFilter),
    ]
```

----------------------------------------

TITLE: Creating Custom AdminSite Subclass (Python)
DESCRIPTION: This code shows how to create a custom AdminSite subclass with a custom site header and register a model with it.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_79

LANGUAGE: Python
CODE:
```
from django.contrib import admin

from .models import MyModel


class MyAdminSite(admin.AdminSite):
    site_header = "Monty Python administration"


admin_site = MyAdminSite(name="myadmin")
admin_site.register(MyModel)
```

----------------------------------------

TITLE: Defining Recursive Many-to-Many Relationships in Django
DESCRIPTION: This snippet demonstrates defining a recursive relationship where a model has a many-to-many relationship with itself. Using the string "self" as the first argument to `ManyToManyField` creates this self-referential link.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_45

LANGUAGE: python
CODE:
```
from django.db import models


class Manufacturer(models.Model):
    name = models.TextField()
    suppliers = models.ManyToManyField("self", symmetrical=False)
```

----------------------------------------

TITLE: Base Field Attribute Modification Impact in Django Forms - Python
DESCRIPTION: Shows that altering a Form class's base_fields attribute affects all future instances of that Form in the Python process. Adjusting label_suffix here permanently changes the display for subsequent forms. Requires understanding of class vs. instance attribute behavior. Output is HTML with updated label suffix.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
>>> f.base_fields[\"subject\"].label_suffix = \"?\"\n>>> another_f = ContactForm(auto_id=False)\n>>> another_f.as_div().split(\"</div>\")[0]\n'<div><label for=\"id_subject\">Subject?</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_subject\">'
```

----------------------------------------

TITLE: SQL Equivalent of Complex Django Q Object Query
DESCRIPTION: Displays the SQL representation of a complex Django query using Q objects with AND and OR conditions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_42

LANGUAGE: sql
CODE:
```
SELECT * from polls WHERE question LIKE 'Who%'
    AND (pub_date = '2005-05-02' OR pub_date = '2005-05-06')
```

----------------------------------------

TITLE: Defining Django Model with Proper Field Naming Conventions
DESCRIPTION: Shows the correct way to name fields in a Django model using lowercase and underscores. This naming convention aligns with Python's PEP 8 style guide and Django's conventions.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
class Person(models.Model):
    first_name = models.CharField(max_length=20)
    last_name = models.CharField(max_length=40)
```

----------------------------------------

TITLE: Using Callable Functions in Django ModelAdmin list_display
DESCRIPTION: Example showing how to use a callable function with the admin.display decorator in list_display to create custom display columns.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
@admin.display(description="Name")
def upper_case_name(obj):
    return f"{obj.first_name} {obj.last_name}".upper()


class PersonAdmin(admin.ModelAdmin):
    list_display = [upper_case_name]
```

----------------------------------------

TITLE: Defining a Deferrable UniqueConstraint in Python
DESCRIPTION: Demonstrates how to make a `UniqueConstraint` deferrable, meaning its enforcement is postponed until the end of the database transaction. It uses the `deferrable` parameter with `Deferrable.DEFERRED`. Note that support depends on the database backend.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
from django.db.models import Deferrable, UniqueConstraint

UniqueConstraint(
    name="unique_order",
    fields=["order"],
    deferrable=Deferrable.DEFERRED,
)
```

----------------------------------------

TITLE: Using blocktranslate tag in Django templates
DESCRIPTION: Demonstrates how to use the {% blocktranslate %} tag to translate complex sentences with placeholders for variable content.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_23

LANGUAGE: html+django
CODE:
```
{% blocktranslate %}This string will have {{ value }} inside.{% endblocktranslate %}
```

----------------------------------------

TITLE: Traversing Custom to_attr Lookups in Prefetch Related
DESCRIPTION: Demonstrates how lookups created with custom to_attr can still be traversed by other lookups. This example prefetches vegetarian pizzas and their toppings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_50

LANGUAGE: python
CODE:
```
>>> vegetarian_pizzas = Pizza.objects.filter(vegetarian=True)
>>> Restaurant.objects.prefetch_related(
...     Prefetch("pizzas", queryset=vegetarian_pizzas, to_attr="vegetarian_menu"),
...     "vegetarian_menu__toppings",
... )
```

----------------------------------------

TITLE: Manipulating Session Data Outside of Views in Django
DESCRIPTION: This snippet demonstrates how to create, save, and retrieve session data using the SessionStore API outside of Django views.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
>>> from django.contrib.sessions.backends.db import SessionStore
>>> s = SessionStore()
>>> # stored as seconds since epoch since datetimes are not serializable in JSON.
>>> s["last_login"] = 1376587691
>>> s.create()
>>> s.session_key
'2b1189a188b44ad18c35e113ac6ceead'
>>> s = SessionStore(session_key="2b1189a188b44ad18c35e113ac6ceead")
>>> s["last_login"]
1376587691
```

----------------------------------------

TITLE: Using Salt with Django's Signer Class
DESCRIPTION: Demonstrates the use of the salt argument in the Signer class to create different signatures for the same input in different contexts.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signing.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> signer = Signer()
>>> signer.sign("My string")
'My string:v9G-nxfz3iQGTXrePqYPlGvH79WTcIgj1QIQSUODTW0'
>>> signer.sign_object({"message": "Hello!"})
'eyJtZXNzYWdlIjoiSGVsbG8hIn0:bzb48DBkB-bwLaCnUVB75r5VAPUEpzWJPrTb80JMIXM'
>>> signer = Signer(salt="extra")
>>> signer.sign("My string")
'My string:YMD-FR6rof3heDkFRffdmG4pXbAZSOtb-aQxg3vmmfc'
>>> signer.unsign("My string:YMD-FR6rof3heDkFRffdmG4pXbAZSOtb-aQxg3vmmfc")
'My string'
>>> signer.sign_object({"message": "Hello!"})
'eyJtZXNzYWdlIjoiSGVsbG8hIn0:-UWSLCE-oUAHzhkHviYz3SOZYBjFKllEOyVZNuUtM-I'
>>> signer.unsign_object(
...     "eyJtZXNzYWdlIjoiSGVsbG8hIn0:-UWSLCE-oUAHzhkHviYz3SOZYBjFKllEOyVZNuUtM-I"
... )
{'message': 'Hello!'}
```

----------------------------------------

TITLE: Defining RedirectView Class in Django
DESCRIPTION: Redirects to a given URL. Supports permanent and temporary redirects with optional query string handling.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
class RedirectView():
    # Attributes
    http_method_names
    pattern_name
    permanent
    query_string
    url

    # Methods
    as_view()
    delete()
    dispatch()
    get()
    head()
    http_method_not_allowed()
    options()
    post()
    put()
    setup()
```

----------------------------------------

TITLE: Caching Template Fragment with Language-specific Content in Django
DESCRIPTION: Shows how to cache a template fragment with language-specific content using the {% cache %} tag and translation variables.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_26

LANGUAGE: html+django
CODE:
```
{% load i18n %}
{% load cache %}

{% get_current_language as LANGUAGE_CODE %}

{% cache 600 welcome LANGUAGE_CODE %}
    {% translate "Welcome to example.com" %}
{% endcache %}
```

----------------------------------------

TITLE: Defining Many-to-One Relationship with Custom Field Name (Python)
DESCRIPTION: Demonstrates that the attribute name used for a `ForeignKey` field does not need to match the name of the related model. The example uses a custom field name, `company_that_makes_it`, for the relationship to the Manufacturer model.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_15

LANGUAGE: Python
CODE:
```
class Car(models.Model):
    company_that_makes_it = models.ForeignKey(
        Manufacturer,
        on_delete=models.CASCADE,
    )
    # ...
```

----------------------------------------

TITLE: Configuring Permissions for Uploaded File Directories in Django
DESCRIPTION: Sets the numeric mode (None by default, meaning OS-dependent) applied to directories created during file uploads. Also affects default permissions for collected static directories.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_39

LANGUAGE: python
CODE:
```
FILE_UPLOAD_DIRECTORY_PERMISSIONS = None
```

----------------------------------------

TITLE: Creating ManyToMany Relationships via RelatedManager Methods with Through Defaults - Django - Pycon
DESCRIPTION: Shows how to use the `add`, `create`, and `set` methods on the related manager when a `through` model is used. Requires providing values for required fields on the intermediate model using the `through_defaults` argument.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_19

LANGUAGE: pycon
CODE:
```
>>> beatles.members.add(john, through_defaults={"date_joined": date(1960, 8, 1)})
>>> beatles.members.create(
...     name="George Harrison", through_defaults={"date_joined": date(1960, 8, 1)}
... )
>>> beatles.members.set(
...     [john, paul, ringo, george], through_defaults={"date_joined": date(1960, 8, 1)}
... )
```

----------------------------------------

TITLE: Comparing View Functions in Django Test Client Response
DESCRIPTION: Shows how to verify which view function served a response by using resolver_match.func. Includes examples for both function-based views and class-based views.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
# my_view here is a function based view.
self.assertEqual(response.resolver_match.func, my_view)

# Class-based views need to compare the view_class, as the
# functions generated by as_view() won't be equal.
self.assertIs(response.resolver_match.func.view_class, MyView)
```

----------------------------------------

TITLE: Adding Dependencies for Cross-App Model Access in Django Migrations
DESCRIPTION: Shows how to properly set up dependencies when a migration in one app needs to access models from another app. This ensures all required models are available during migration.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
class Migration(migrations.Migration):
    dependencies = [
        ("app1", "0001_initial"),
        # added dependency to enable using models from app2 in move_m1
        ("app2", "0004_foobar"),
    ]

    operations = [
        migrations.RunPython(move_m1),
    ]
```

----------------------------------------

TITLE: Combining Q Objects with Negation in Django
DESCRIPTION: Demonstrates how to use the negation (~) operator with Q objects to create complex queries combining normal and NOT conditions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_40

LANGUAGE: python
CODE:
```
Q(question__startswith="Who") | ~Q(pub_date__year=2005)
```

----------------------------------------

TITLE: Creating and Using RequestContext with Extra Processors (Django, Python)
DESCRIPTION: Shows how to instantiate a RequestContext with a custom processor to inject extra variables (such as ip_address) into the context. The snippet demonstrates context processor definition and usage within a Django view, as well as integrating this with a Django Template. Requires import of django.http, django.template, and adherence to Django template rendering API. Inputs include request and a dictionary of context variables; outputs are rendered HttpResponse.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
from django.template import RequestContext, Template


def ip_address_processor(request):
    return {"ip_address": request.META["REMOTE_ADDR"]}


def client_ip_view(request):
    template = Template("{{ title }}: {{ ip_address }}")
    context = RequestContext(
        request,
        {
            "title": "Your IP Address",
        },
        [ip_address_processor],
    )
    return HttpResponse(template.render(context))
```

----------------------------------------

TITLE: Supporting HTTP HEAD and GET Methods with Django ListView (Python)
DESCRIPTION: Demonstrates a subclass of ListView (BookListView) supporting both GET (list objects) and custom HEAD method that returns the Last-Modified header based on the latest Book. Requires Django and a Book model with publication_date. GET returns a rendered template list; HEAD returns an empty response with HTTP-compliant date header showing the latest update. Extends default ListView to handle API-like requirements efficiently.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/index.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.urls import path
from books.views import BookListView

urlpatterns = [
    path("books/", BookListView.as_view()),
]
```

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
from django.views.generic import ListView
from books.models import Book


class BookListView(ListView):
    model = Book

    def head(self, *args, **kwargs):
        last_book = self.get_queryset().latest("publication_date")
        response = HttpResponse(
            # RFC 1123 date format.
            headers={
                "Last-Modified": last_book.publication_date.strftime(
                    "%a, %d %b %Y %H:%M:%S GMT"
                )
            },
        )
        return response
```

----------------------------------------

TITLE: Caching Template Fragment with User-specific Data in Django
DESCRIPTION: Demonstrates how to cache a template fragment with user-specific data using the {% cache %} tag. The cache is uniquely identified by the user's username.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_25

LANGUAGE: html+django
CODE:
```
{% load cache %}
{% cache 500 sidebar request.user.username %}
    .. sidebar for logged in user ..
{% endcache %}
```

----------------------------------------

TITLE: Handling Empty Querysets in Django Aggregation
DESCRIPTION: These snippets demonstrate how aggregation behaves with empty querysets. The first example shows the default behavior of returning None, while the second shows how to use the default parameter to return a specific value (0 in this case) when the queryset is empty.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_27

LANGUAGE: pycon
CODE:
```
>>> from django.db.models import Sum
>>> Book.objects.filter(name__contains="web").aggregate(Sum("price"))
{"price__sum": None}
```

LANGUAGE: pycon
CODE:
```
>>> Book.objects.filter(name__contains="web").aggregate(Sum("price", default=0))
{"price__sum": Decimal("0")}
```

----------------------------------------

TITLE: Reverse M2M Relationship Modification
DESCRIPTION: Shows how to remove a pizza from a topping's related set using the reverse relationship.
SOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> t.pizza_set.remove(p)
```

----------------------------------------

TITLE: Setting Email Content Type in Django
DESCRIPTION: Example showing how to change the content subtype of an EmailMessage from plain text to HTML.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
msg = EmailMessage(subject, html_content, from_email, [to])
msg.content_subtype = "html"  # Main content is now text/html
msg.send()
```

----------------------------------------

TITLE: Illustrating ValueError on M2M Add Before Save (pycon)
DESCRIPTION: Demonstrates that attempting to add a related object to a `ManyToManyField` (`publications`) before the parent object (`a1`) has been saved results in a `ValueError`. Django requires the parent object to have a primary key (ID) before relationships can be established.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_3

LANGUAGE: pycon
CODE:
```
>>> a1.publications.add(p1)
Traceback (most recent call last):
...
ValueError: "<Article: Django lets you build web apps easily>" needs to have a value for field "id" before this many-to-many relationship can be used.
```

----------------------------------------

TITLE: Using a Callable for Dynamic Storage Selection in Django
DESCRIPTION: Example showing how to use a callable function to dynamically select different storage backends based on environment conditions, such as using local storage for development and remote storage for production.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.db import models
from .storages import MyLocalStorage, MyRemoteStorage


def select_storage():
    return MyLocalStorage() if settings.DEBUG else MyRemoteStorage()


class MyModel(models.Model):
    my_file = models.FileField(storage=select_storage)
```

----------------------------------------

TITLE: Defining Static Assets in ModelAdmin using Media Class Python
DESCRIPTION: This Python snippet demonstrates how to define custom CSS and JavaScript assets for Django admin add/change views using an inner `Media` class within a `ModelAdmin` subclass (`ArticleAdmin`). It specifies a CSS file (`my_styles.css`) to be included for all media types and a JavaScript file (`my_code.js`). Django's staticfiles app automatically handles prepending the appropriate URL (STATIC_URL or MEDIA_URL).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_59

LANGUAGE: python
CODE:
```
class ArticleAdmin(admin.ModelAdmin):
    class Media:
        css = {
            "all": ["my_styles.css"],
        }
        js = ["my_code.js"]
```

----------------------------------------

TITLE: Using apnumber Filter in Django Template
DESCRIPTION: Demonstrates the usage of the apnumber filter, which converts numbers 1-9 to words and leaves other numbers as is.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_1

LANGUAGE: django
CODE:
```
{{ 1|apnumber }} becomes one.
{{ 2|apnumber }} becomes two.
{{ 10|apnumber }} becomes 10.
```

----------------------------------------

TITLE: Defining GISModelAdmin Class with Custom Widget Attributes in Python
DESCRIPTION: This snippet defines the GISModelAdmin class with two attributes: gis_widget for specifying the widget class for GeometryFields, and gis_widget_kwargs for passing keyword arguments to the widget. It extends Django's admin functionality for geographic data management.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/admin.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class GISModelAdmin:
    gis_widget = ...
    gis_widget_kwargs = ...
```

----------------------------------------

TITLE: Multiple File Upload Field Implementation in Django
DESCRIPTION: Custom form field and widget implementation for handling multiple file uploads in a single field. The code creates a MultipleFileInput widget that allows multiple file selection and a MultipleFileField that properly validates multiple files.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django import forms


class MultipleFileInput(forms.ClearableFileInput):
    allow_multiple_selected = True


class MultipleFileField(forms.FileField):
    def __init__(self, *args, **kwargs):
        kwargs.setdefault("widget", MultipleFileInput())
        super().__init__(*args, **kwargs)

    def clean(self, data, initial=None):
        single_file_clean = super().clean
        if isinstance(data, (list, tuple)):
            result = [single_file_clean(d, initial) for d in data]
        else:
            result = [single_file_clean(data, initial)]
        return result


class FileFieldForm(forms.Form):
    file_field = MultipleFileField()
```

----------------------------------------

TITLE: Configuring Custom Cache Backend in Django
DESCRIPTION: Setting up a custom cache backend in Django settings using the Python import path. This allows for using customized or third-party cache backends.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "path.to.backend",
    }
}
```

----------------------------------------

TITLE: Creating a Model Formset in Python
DESCRIPTION: Demonstrates how to create a model formset for the Author model using modelformset_factory. It sets the fields to be included and enables edit-only mode to prevent creating new objects.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
>>> AuthorFormSet = modelformset_factory(
...     Author,
...     fields=["name", "title"],
...     edit_only=True,
... )
```

----------------------------------------

TITLE: Using Localize Template Tag in Django Templates
DESCRIPTION: Example of using the 'localize' template tag to enable or disable localization for specific blocks in a Django template. This provides fine-grained control over which parts of a template should use localized formatting.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/formatting.txt#2025-04-23_snippet_1

LANGUAGE: html+django
CODE:
```
{% load l10n %}

{% localize on %}
    {{ value }}
{% endlocalize %}

{% localize off %}
    {{ value }}
{% endlocalize %}
```

----------------------------------------

TITLE: Using JavaScript Translation Catalog in HTML
DESCRIPTION: Shows how to include the JavaScript translation catalog in an HTML template.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_35

LANGUAGE: html
CODE:
```
<script src="{% url 'javascript-catalog' %}"></script>
```

----------------------------------------

TITLE: Storing Static Prefix for Multiple Uses
DESCRIPTION: Demonstrates storing the STATIC_URL prefix in a variable for multiple uses, which is more efficient than calling get_static_prefix multiple times in the same template.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_109

LANGUAGE: html+django
CODE:
```
{% load static %}
{% get_static_prefix as STATIC_PREFIX %}

<img src="{{ STATIC_PREFIX }}images/hi.jpg" alt="Hi!">
<img src="{{ STATIC_PREFIX }}images/hi2.jpg" alt="Hello!">
```

----------------------------------------

TITLE: Verifying Custom CSRF Token in Django
DESCRIPTION: This method verifies the custom CSRF token by checking its timestamp and comparing it with the stored token. It implements additional security checks and handles token rotation.
SOURCE: https://github.com/django/django/blob/main/tests/forms_tests/tests/filepath_test_files/real-text-file.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
def _verify_token(self, request_token, cookie_token):
    if not cookie_token or not request_token:
        return False
    
    try:
        cookie_ts = self._get_timestamp(cookie_token)
        request_ts = self._get_timestamp(request_token)

        if cookie_ts is None or request_ts is None:
            return False

        if abs(cookie_ts - request_ts) > settings.CSRF_TIMEOUT:
            return False

        if cookie_token != request_token:
            return False

        return True
    except Exception:
        return False
```

----------------------------------------

TITLE: Defining a Django Proxy Model
DESCRIPTION: Demonstrates how to define a proxy model (`MyPerson`) that inherits from a base model (`Person`) and adds custom Python behavior (`do_something`) without creating a new database table. The `Meta.proxy = True` attribute is key.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_47

LANGUAGE: python
CODE:
```
from django.db import models


class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)


class MyPerson(Person):
    class Meta:
        proxy = True

    def do_something(self):
        # ...
        pass
```

----------------------------------------

TITLE: Defining a Sitemap for Static Views in Django
DESCRIPTION: This Python snippet defines a custom `Sitemap` class named `StaticViewSitemap` in a `sitemaps.py` file. It's designed for generating sitemap entries for static views (views not tied to database models). The `items` method returns a list of URL names (strings) corresponding to these static views. The `location` method uses `django.urls.reverse` to generate the actual URL for each named item. Default `priority` and `changefreq` values are also set for all URLs generated by this sitemap.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
# sitemaps.py
from django.contrib import sitemaps
from django.urls import reverse


class StaticViewSitemap(sitemaps.Sitemap):
    priority = 0.5
    changefreq = "daily"

    def items(self):
        return ["main", "about", "license"]

    def location(self, item):
        return reverse(item)
```

----------------------------------------

TITLE: Using firstof Tag in Django Templates
DESCRIPTION: The firstof tag outputs the first truthy value among the given variables. It can include a fallback string and supports auto-escaping control.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_17

LANGUAGE: html+django
CODE:
```
{% firstof var1 var2 var3 "fallback value" %}
```

LANGUAGE: html+django
CODE:
```
{% autoescape off %}
    {% firstof var1 var2 var3 "<strong>fallback value</strong>" %}
{% endautoescape %}
```

LANGUAGE: html+django
CODE:
```
{% firstof var1 var2|safe var3 "<strong>fallback value</strong>"|safe %}
```

----------------------------------------

TITLE: Querying for Missing Keys with isnull in Django JSONField
DESCRIPTION: Demonstrates how to query for objects where a specific key is missing in the JSONField data using the isnull lookup.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
>>> Dog.objects.create(name="Shep", data={"breed": "collie"})
<Dog: Shep>
>>> Dog.objects.filter(data__owner__isnull=True)
<QuerySet [<Dog: Shep>]>
```

----------------------------------------

TITLE: Using truncatechars_html Filter in Django Templates
DESCRIPTION: Demonstrates the usage of the truncatechars_html filter, which truncates a string after a certain number of characters while being aware of HTML tags. It closes any open tags after truncation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_94

LANGUAGE: html+django
CODE:
```
{{ value|truncatechars_html:7 }}
```

----------------------------------------

TITLE: Customizing View on Site URL in Django Admin
DESCRIPTION: Example of implementing a custom view_on_site method in a ModelAdmin class that returns a specific URL based on the model instance's properties, allowing for custom 'View on site' links.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_39

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.urls import reverse


class PersonAdmin(admin.ModelAdmin):
    def view_on_site(self, obj):
        url = reverse("person-detail", kwargs={"slug": obj.slug})
        return "https://example.com" + url
```

----------------------------------------

TITLE: Using pluralize Filter in Django Templates
DESCRIPTION: The pluralize filter returns a plural suffix if the value is not 1, '1', or an object of length 1. It can take an optional argument for custom suffixes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_81

LANGUAGE: html+django
CODE:
```
You have {{ num_messages }} message{{ num_messages|pluralize }}.
```

LANGUAGE: html+django
CODE:
```
You have {{ num_walruses }} walrus{{ num_walruses|pluralize:"es" }}.
```

LANGUAGE: html+django
CODE:
```
You have {{ num_cherries }} cherr{{ num_cherries|pluralize:"y,ies" }}.
```

----------------------------------------

TITLE: Using verbatim Tag in Django Templates
DESCRIPTION: Demonstrates how to use the verbatim tag to prevent template rendering of specific content.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_48

LANGUAGE: html+django
CODE:
```
{% verbatim %}
    {{if dying}}Still alive.{{/if}}
{% endverbatim %}
```

LANGUAGE: html+django
CODE:
```
{% verbatim myblock %}
    Avoid template rendering via the {% verbatim %}{% endverbatim %} block.
{% endverbatim myblock %}
```

----------------------------------------

TITLE: Using Length Function in Django Models
DESCRIPTION: Shows how to get the length of text fields and register Length as a transform
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
>>> # Get the length of the name and goes_by fields
>>> from django.db.models.functions import Length
>>> Author.objects.create(name="Margaret Smith")
>>> author = Author.objects.annotate(
...     name_length=Length("name"), goes_by_length=Length("goes_by")
... ).get()
>>> print(author.name_length, author.goes_by_length)
(14, None)
```

LANGUAGE: python
CODE:
```
>>> from django.db.models import CharField
>>> from django.db.models.functions import Length
>>> CharField.register_lookup(Length)
>>> # Get authors whose name is longer than 7 characters
>>> authors = Author.objects.filter(name__length__gt=7)
```

----------------------------------------

TITLE: Creating Django ContentFile from String (Python)
DESCRIPTION: Shows how to create a Django ContentFile object directly from a Python string. This is useful for generating file content programmatically and associating it with a Django file field without needing an intermediate file on the filesystem.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_22

LANGUAGE: Python
CODE:
```
from django.core.files.base import ContentFile

myfile = ContentFile("hello world")
```

----------------------------------------

TITLE: Cache Versioning in Django
DESCRIPTION: Demonstrates how to use cache versioning to manage different versions of cached data. Shows setting and retrieving cached values with specific versions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_35

LANGUAGE: pycon
CODE:
```
>>> # Set version 2 of a cache key
>>> cache.set("my_key", "hello world!", version=2)
>>> # Get the default version (assuming version=1)
>>> cache.get("my_key")
None
>>> # Get version 2 of the same key
>>> cache.get("my_key", version=2)
'hello world!'
```

----------------------------------------

TITLE: Wrapping Streaming Content Generator in Django
DESCRIPTION: Demonstrates how to properly wrap streaming content in a generator function without consuming the entire stream in memory.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
def wrap_streaming_content(content):
    for chunk in content:
        yield alter_content(chunk)
```

----------------------------------------

TITLE: Configuring Dummy Cache in Django for Development
DESCRIPTION: Setting up a dummy cache backend that implements the cache interface without actually caching. This is useful for development environments where caching is not needed.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.dummy.DummyCache",
    }
}
```

----------------------------------------

TITLE: Template Block vs Include Performance Note
DESCRIPTION: Demonstrates the performance difference between Django template block and include tags. Using {% block %} is noted to be faster than {% include %}.
SOURCE: https://github.com/django/django/blob/main/docs/topics/performance.txt#2025-04-23_snippet_1

LANGUAGE: django
CODE:
```
{% block %} <!-- Faster --> {% endblock %}
{% include 'template.html' %} <!-- Slower -->
```

----------------------------------------

TITLE: Migration Dependencies Configuration
DESCRIPTION: Shows how to configure migration dependencies and run_before attributes to control migration order.
SOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.db import migrations

class Migration(migrations.Migration):
    dependencies = [
        ("myapp", "0123_the_previous_migration"),
    ]

    run_before = [
        ("third_party_app", "0001_do_awesome"),
    ]
```

----------------------------------------

TITLE: Partial Evaluation and Caching in Django QuerySets
DESCRIPTION: Demonstrates how partial evaluation of QuerySets affects caching behavior, showing cases where the cache is used and where it isn't.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
>>> queryset = Entry.objects.all()
>>> print(queryset[5])  # Queries the database
>>> print(queryset[5])  # Queries the database again

>>> queryset = Entry.objects.all()
>>> [entry for entry in queryset]  # Queries the database
>>> print(queryset[5])  # Uses cache
>>> print(queryset[5])  # Uses cache

>>> [entry for entry in queryset]
>>> bool(queryset)
>>> entry in queryset
>>> list(queryset)
```

----------------------------------------

TITLE: Initializing Django Sitemap in URLconf (Python)
DESCRIPTION: This code snippet shows how to activate sitemap generation in a Django project by adding a URL pattern to the URLconf. It maps the '/sitemap.xml' path to the sitemap view function.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib.sitemaps.views import sitemap

path(
    "sitemap.xml",
    sitemap,
    {"sitemaps": sitemaps},
    name="django.contrib.sitemaps.views.sitemap",
)
```

----------------------------------------

TITLE: Defining ProhibitNullCharactersValidator in Django
DESCRIPTION: Validator class that checks for null characters in string values. Raises ValidationError if the string contains null characters.
SOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
ProhibitNullCharactersValidator(message=None, code=None)
```

----------------------------------------

TITLE: Capturing on-commit callbacks in Django tests
DESCRIPTION: This snippet demonstrates capturing and asserting on-commit callbacks in a Django test case. It posts data to a contact form endpoint and checks the response, callbacks, and sent emails.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_24

LANGUAGE: Python
CODE:
```
with self.captureOnCommitCallbacks(execute=True) as callbacks:
    response = self.client.post(
        "/contact/",
        {"message": "I like your site"},
    )

self.assertEqual(response.status_code, 200)
self.assertEqual(len(callbacks), 1)
self.assertEqual(len(mail.outbox), 1)
self.assertEqual(mail.outbox[0].subject, "Contact Form")
self.assertEqual(mail.outbox[0].body, "I like your site")
```

----------------------------------------

TITLE: Using Upper Function in Django ORM
DESCRIPTION: Demonstrates converting text to uppercase in the database
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_42

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Upper
>>> Author.objects.create(name="Margaret Smith")
>>> author = Author.objects.annotate(name_upper=Upper("name")).get()
>>> print(author.name_upper)
MARGARET SMITH
```

----------------------------------------

TITLE: Querying ManyToMany Relationships via Related Model Attributes with Through Model - Django - Pycon
DESCRIPTION: Demonstrates querying across a many-to-many relationship that uses a `through` model by filtering on attributes of the related model (`Person`), similar to standard many-to-many queries.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_22

LANGUAGE: pycon
CODE:
```
# Find all the groups with a member whose name starts with 'Paul'
>>> Group.objects.filter(members__name__startswith="Paul")
<QuerySet [<Group: The Beatles>]>
```

----------------------------------------

TITLE: Filtering QuerySets by ISO Weekday - Django ORM (Python)
DESCRIPTION: Uses '__iso_week_day' to filter by ISO 8601 weekday, where 1 is Monday and 7 is Sunday. Requires Django ORM and valid date/datetime fields. Inputs must be integers between 1 and 7. Outputs QuerySets for the specified ISO weekday; other filtering can be chained (e.g., ranges).
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_113

LANGUAGE: python
CODE:
```
Entry.objects.filter(pub_date__iso_week_day=1)
Entry.objects.filter(pub_date__iso_week_day__gte=1)
```

----------------------------------------

TITLE: Customizing Maximum Inline Forms in InlineModelAdmin
DESCRIPTION: Example showing how to override get_max_num method to dynamically determine the maximum number of inline forms based on the model instance.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_66

LANGUAGE: python
CODE:
```
class BinaryTreeAdmin(admin.TabularInline):
    model = BinaryTree

    def get_max_num(self, request, obj=None, **kwargs):
        max_num = 10
        if obj and obj.parent:
            return max_num - 5
        return max_num
```

----------------------------------------

TITLE: Using dwithin Filter in GeoDjango
DESCRIPTION: Example of using the dwithin lookup to filter Zipcode objects where the distance between the geometry field and the lookup geometry is within the specified distance (5 meters).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__dwithin=(geom, D(m=5)))
```

----------------------------------------

TITLE: Customizing Field Classes in Django ModelForm
DESCRIPTION: This snippet demonstrates how to use custom field classes in a Django ModelForm. It uses the field_classes attribute of the Meta class to specify a custom form field class for the 'slug' field.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.forms import ModelForm
from myapp.models import Article


class ArticleForm(ModelForm):
    class Meta:
        model = Article
        fields = ["pub_date", "headline", "content", "reporter", "slug"]
        field_classes = {
            "slug": MySlugFormField,
        }
```

----------------------------------------

TITLE: Basic Formset Validation Example
DESCRIPTION: Demonstrates invalid formset due to missing management data
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
data = {
    "form-0-title": "Test",
    "form-0-pub_date": "",
}
formset = ArticleFormSet(data)
formset.is_valid()
False
```

----------------------------------------

TITLE: Combining Media Objects Example
DESCRIPTION: Demonstrates how to combine two widget Media objects and their resulting output
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_13

LANGUAGE: pycon
CODE:
```
>>> from django import forms
>>> class CalendarWidget(forms.TextInput):
...     class Media:
...         css = {
...             "all": ["pretty.css"],
...         }
...         js = ["animations.js", "actions.js"]
...

>>> class OtherWidget(forms.TextInput):
...     class Media:
...         js = ["whizbang.js"]
...

>>> w1 = CalendarWidget()
>>> w2 = OtherWidget()
>>> print(w1.media + w2.media)
<link href="https://static.example.com/pretty.css" media="all" rel="stylesheet">
<script src="https://static.example.com/animations.js"></script>
<script src="https://static.example.com/actions.js"></script>
<script src="https://static.example.com/whizbang.js"></script>
```

----------------------------------------

TITLE: Deleting Objects from Specific Databases in Django
DESCRIPTION: Demonstrates how to delete objects from specific databases using the using keyword argument with the delete() method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
>>> u = User.objects.using("legacy_users").get(username="fred")
>>> u.delete()  # will delete from the `legacy_users` database
```

LANGUAGE: python
CODE:
```
>>> user_obj.save(using="new_users")
>>> user_obj.delete(using="legacy_users")
```

----------------------------------------

TITLE: Creating a GIN Index in Django with PostgreSQL
DESCRIPTION: Creates a GIN (Generalized Inverted Index) with options for fast updates and pending list limit. Useful for full-text search and indexing array or JSON data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
GinIndex(*expressions, fastupdate=None, gin_pending_list_limit=None, **options)
```

----------------------------------------

TITLE: Annotating with Type Casting Using ExpressionWrapper - Django ORM - Python
DESCRIPTION: This snippet shows how to wrap a Django F expression computation in an ExpressionWrapper to enforce a specific output_field (here, DateTimeField). This approach is necessary when combining fields of different types (such as a datetime and a timedelta), or if the resulting field requires explicit typing. Requires importing DateTimeField, ExpressionWrapper, and F from django.db.models, and is intended for use when annotating querysets.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.db.models import DateTimeField, ExpressionWrapper, F

Ticket.objects.annotate(
    expires=ExpressionWrapper(
        F("active_at") + F("duration"), output_field=DateTimeField()
    )
)
```

----------------------------------------

TITLE: Using ModelForm Factory Function in Django
DESCRIPTION: This snippet demonstrates how to use the modelform_factory function to create a ModelForm dynamically. It creates a form for the Book model with specified fields and then modifies it to use a Textarea widget for the 'title' field.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
from django.forms import modelform_factory
from myapp.models import Book
BookForm = modelform_factory(Book, fields=["author", "title"])

from django.forms import Textarea
Form = modelform_factory(Book, form=BookForm, widgets={"title": Textarea()})
```

----------------------------------------

TITLE: Using staff_member_required Decorator for Admin Views in Python
DESCRIPTION: Demonstrates the use of the @staff_member_required decorator to enforce authorization on admin views, redirecting to login if the user is not a staff member.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_89

LANGUAGE: python
CODE:
```
from django.contrib.admin.views.decorators import staff_member_required


@staff_member_required
def my_view(request): ...
```

----------------------------------------

TITLE: Querying GeoDjango Model using 'contains' Lookup (Python)
DESCRIPTION: Illustrates performing a spatial query using the GeoDjango ORM. It imports the `WorldBorder` model and filters objects where the `mpoly` geometry field contains the point defined by `pnt_wkt`. Requires the `world.models.WorldBorder` model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_11

LANGUAGE: pycon
CODE:
```
>>> from world.models import WorldBorder
>>> WorldBorder.objects.filter(mpoly__contains=pnt_wkt)
<QuerySet [<WorldBorder: United States>]>
```

----------------------------------------

TITLE: Fixing Multiple File Upload Validation in Django Forms
DESCRIPTION: To prevent a security vulnerability, Django's FileInput and ClearableFileInput widgets now raise a ValueError when the 'multiple' HTML attribute is set. To maintain the old behavior, set 'allow_multiple_selected' to True.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.1.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.forms import ClearableFileInput, FileInput

# New behavior raises ValueError
FileInput(attrs={'multiple': True})  # Raises ValueError

# To keep old behavior
FileInput(attrs={'multiple': True}, allow_multiple_selected=True)
```

----------------------------------------

TITLE: Resolving Multiple Foreign Keys in Inline Formsets
DESCRIPTION: Shows how to resolve ambiguity when a model has multiple foreign keys to the same model by using the fk_name parameter in inlineformset_factory.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_36

LANGUAGE: python
CODE:
```
>>> FriendshipFormSet = inlineformset_factory(
...     Friend, Friendship, fk_name="from_friend", fields=["to_friend", "length_in_months"]
... )
```

----------------------------------------

TITLE: Switching Language in Django Template
DESCRIPTION: Demonstrates how to switch languages within a Django template using the language tag.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_32

LANGUAGE: html
CODE:
```
{% load i18n %}

{% get_current_language as LANGUAGE_CODE %}
<!-- Current language: {{ LANGUAGE_CODE }} -->
<p>{% translate "Welcome to our page" %}</p>

{% language 'en' %}
    {% get_current_language as LANGUAGE_CODE %}
    <!-- Current language: {{ LANGUAGE_CODE }} -->
    <p>{% translate "Welcome to our page" %}</p>
{% endlanguage %}
```

----------------------------------------

TITLE: TimeField Truncation Example in Django
DESCRIPTION: Demonstrates using TruncHour with TimeFields to group and count experiments by hour.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
>>> from datetime import UTC, datetime
>>> from django.db.models import Count, TimeField
>>> from django.db.models.functions import TruncHour
>>> start1 = datetime(2014, 6, 15, 14, 30, 50, 321, tzinfo=UTC)
>>> start2 = datetime(2014, 6, 15, 14, 40, 2, 123, tzinfo=UTC)
>>> start3 = datetime(2015, 12, 31, 17, 5, 27, 999, tzinfo=UTC)
>>> Experiment.objects.create(start_datetime=start1, start_time=start1.time())
>>> Experiment.objects.create(start_datetime=start2, start_time=start2.time())
>>> Experiment.objects.create(start_datetime=start3, start_time=start3.time())
>>> experiments_per_hour = (
...     Experiment.objects.annotate(
...         hour=TruncHour("start_datetime", output_field=TimeField()),
...     )
...     .values("hour")
...     .annotate(experiments=Count("id"))
... )
```

----------------------------------------

TITLE: Exploring GDAL Data Source with Python Console
DESCRIPTION: Example showing how to inspect a shapefile's properties using Django's GDAL DataSource API, including examining fields, features, geometry type and spatial reference system.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/layermapping.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.gdal import DataSource
>>> ds = DataSource("test_poly.shp")
>>> layer = ds[0]
>>> print(layer.fields)  # Exploring the fields in the layer, we only want the 'str' field.
['float', 'int', 'str']
>>> print(len(layer))  # getting the number of features in the layer (should be 3)
3
>>> print(layer.geom_type)  # Should be 'Polygon'
Polygon
>>> print(layer.srs)  # WGS84 in WKT
GEOGCS["GCS_WGS_1984",
    DATUM["WGS_1984",
        SPHEROID["WGS_1984",6378137,298.257223563]],
    PRIMEM["Greenwich",0],
    UNIT["Degree",0.017453292519943295]]
```

----------------------------------------

TITLE: Translating text outside Django views using try-finally
DESCRIPTION: A function that demonstrates how to translate text outside of Django views by activating a language, performing the translation, and then restoring the original language.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_60

LANGUAGE: python
CODE:
```
from django.utils import translation


def welcome_translated(language):
    cur_language = translation.get_language()
    try:
        translation.activate(language)
        text = translation.gettext("welcome")
    finally:
        translation.activate(cur_language)
    return text
```

----------------------------------------

TITLE: Creating and Using a Custom Formset in Django
DESCRIPTION: Demonstrates how to create a custom formset with a base formset class that passes custom parameters to individual forms. It shows the usage of formset_factory and get_form_kwargs method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
from django.forms import BaseFormSet
from django.forms import formset_factory

class BaseArticleFormSet(BaseFormSet):
    def get_form_kwargs(self, index):
        kwargs = super().get_form_kwargs(index)
        kwargs["custom_kwarg"] = index
        return kwargs

ArticleFormSet = formset_factory(MyArticleForm, formset=BaseArticleFormSet)
formset = ArticleFormSet()
```

----------------------------------------

TITLE: Applying distinct() on Multiple Related Fields (PostgreSQL) Python
DESCRIPTION: Applies DISTINCT ON (fields) for multiple related fields on PostgreSQL. Requires order_by() to list these fields first in the same order. Filters results to the first row for each unique combination of the specified related fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_12

LANGUAGE: Python
CODE:
```
>>> Entry.objects.order_by("blog__name", "mod_date").distinct("blog__name", "mod_date")
```

----------------------------------------

TITLE: Demonstrating uncached callable attributes in Django ORM
DESCRIPTION: Shows how callable attributes in Django ORM trigger new database queries on each call, unlike cached non-callable attributes. This example uses the authors relationship method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> entry = Entry.objects.get(id=1)
>>> entry.authors.all()  # query performed
>>> entry.authors.all()  # query performed again
```

----------------------------------------

TITLE: Custom Formset Error Message
DESCRIPTION: Shows how to customize formset error messages when management form is missing
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
formset = ArticleFormSet({}, error_messages={"missing_management_form": "Sorry, something went wrong."})
formset.is_valid()
False
formset.non_form_errors()
['Sorry, something went wrong.']
```

----------------------------------------

TITLE: Formatting Date Value with Django `formats` Module (Python)
DESCRIPTION: This snippet shows how to directly format a date/time value using a specific format key (e.g., 'DATETIME_FORMAT') with the `formats.date_format()` function from `django.utils.formats`. This leverages the locale-aware formatting capabilities.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
from django.utils import formats

value_formatted = formats.date_format(value, "DATETIME_FORMAT")
```

----------------------------------------

TITLE: Using Django StringAgg and ArrayAgg Aggregates
DESCRIPTION: Demonstrates the usage of `StringAgg` to concatenate values from `field1` with a semicolon delimiter, and `ArrayAgg` to collect values from `field2` (numeric) and `field1` (string) into arrays using the Django ORM's `aggregate` method on a `TestModel` queryset.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_6

LANGUAGE: pycon
CODE:
```
>>> TestModel.objects.aggregate(result=StringAgg("field1", delimiter=";"))
{'result': 'foo;bar;test'}
>>> TestModel.objects.aggregate(result=ArrayAgg("field2"))
{'result': [1, 2, 3]}
>>> TestModel.objects.aggregate(result=ArrayAgg("field1"))
{'result': ['foo', 'bar', 'test']}
```

----------------------------------------

TITLE: Registering Flatpages URLs at Specific Path - Django Python
DESCRIPTION: This snippet demonstrates how to include the default URL patterns provided by the `django.contrib.flatpages` app under a specific path in your project's root URLconf. This makes flatpages accessible via URLs starting with the specified path, like '/pages/about/'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#_snippet_0

LANGUAGE: Python
CODE:
```
urlpatterns = [
    path("pages/", include("django.contrib.flatpages.urls")),
]
```

----------------------------------------

TITLE: Checking User Authentication Eligibility with ModelBackend in Django (Python)
DESCRIPTION: Returns `True` if the user is allowed to authenticate, `False` otherwise. Specifically, this method returns `False` for users with `is_active=False` to align with `AuthenticationForm` behavior. Custom user models without an `is_active` field are allowed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
user_can_authenticate()
```

----------------------------------------

TITLE: Using Right Function in Django ORM
DESCRIPTION: Example of extracting rightmost characters from a text field
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_37

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Right
>>> Author.objects.create(name="Margaret Smith")
>>> author = Author.objects.annotate(last_letter=Right("name", 1)).get()
>>> print(author.last_letter)
h
```

----------------------------------------

TITLE: Defining Model and Field Table Comments - Django ORM - Python
DESCRIPTION: This snippet demonstrates how to use the new db_comment attribute introduced in Django 4.2 to add comments to both model fields and database tables via the Meta class. It shows two model classes (Question and Answer) that utilize db_comment on individual fields and db_table_comment for the table. Dependencies include Django 4.2+ and usage of django.db.models.Model and its Meta inner class. The parameters db_comment and db_table_comment specify human-readable notes for database schema documentation. Input consists of Python model definitions, and the output affects the generated SQL and database schema.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models


class Question(models.Model):
    text = models.TextField(db_comment="Poll question")
    pub_date = models.DateTimeField(
        db_comment="Date and time when the question was published",
    )

    class Meta:
        db_table_comment = "Poll questions"


class Answer(models.Model):
    question = models.ForeignKey(
        Question,
        on_delete=models.CASCADE,
        db_comment="Reference to a question",
    )
    answer = models.TextField(db_comment="Question answer")

    class Meta:
        db_table_comment = "Question answers"
```

----------------------------------------

TITLE: Using Custom JSON Encoder with Django Serializer
DESCRIPTION: Shows how to use a custom JSON encoder (LazyEncoder) with Django's serialization function to serialize model instances.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.core.serializers import serialize

serialize("json", SomeModel.objects.all(), cls=LazyEncoder)
```

----------------------------------------

TITLE: Testing and Setting Session Cookies in Django View
DESCRIPTION: This snippet demonstrates how to test if cookies are enabled, set a test cookie, and handle login functionality in a Django view.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
from django.shortcuts import render


def login(request):
    if request.method == "POST":
        if request.session.test_cookie_worked():
            request.session.delete_test_cookie()
            return HttpResponse("You're logged in.")
        else:
            return HttpResponse("Please enable cookies and try again.")
    request.session.set_test_cookie()
    return render(request, "foo/login_form.html")
```

----------------------------------------

TITLE: Using Django's Default Storage System Directly
DESCRIPTION: Example showing how to use Django's default storage system directly, without going through a model's file field. Demonstrates creating, reading, and deleting files.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> from django.core.files.base import ContentFile
>>> from django.core.files.storage import default_storage

>>> path = default_storage.save("path/to/file", ContentFile(b"new content"))
>>> path
'path/to/file'

>>> default_storage.size(path)
11
>>> default_storage.open(path).read()
b'new content'

>>> default_storage.delete(path)
>>> default_storage.exists(path)
False
```

----------------------------------------

TITLE: Combining QuerySets with AND Operator in Django ORM (Python)
DESCRIPTION: Demonstrates how to combine two Django QuerySets using the & (AND) operator, illustrating equivalence to chained filter calls. Both versions produce querysets filtered by x=1 and y=2. Requires a Django model named Model. Inputs are filter keyword arguments; output is a filtered QuerySet.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_60

LANGUAGE: python
CODE:
```
Model.objects.filter(x=1) & Model.objects.filter(y=2)
Model.objects.filter(x=1).filter(y=2)
```

----------------------------------------

TITLE: Equivalent Manual Form Implementation in Python
DESCRIPTION: Shows how to manually create form classes equivalent to the ModelForm examples, illustrating the underlying form definitions that Django would generate automatically.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django import forms


class AuthorForm(forms.Form):
    name = forms.CharField(max_length=100)
    title = forms.CharField(
        max_length=3,
        widget=forms.Select(choices=TITLE_CHOICES),
    )
    birth_date = forms.DateField(required=False)


class BookForm(forms.Form):
    name = forms.CharField(max_length=100)
    authors = forms.ModelMultipleChoiceField(queryset=Author.objects.all())
```

----------------------------------------

TITLE: Using yesno Filter in Django Templates
DESCRIPTION: Demonstrates the yesno filter, which maps values for True, False, and optionally None to specified strings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_104

LANGUAGE: html+django
CODE:
```
{{ value|yesno:"yeah,no,maybe" }}
```

----------------------------------------

TITLE: Using vary_on_headers with Multiple Headers
DESCRIPTION: Shows how to use vary_on_headers with multiple header parameters to make caching mechanisms vary on both User-Agent and Cookie. This creates separate cache entries for each unique combination of these headers.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_40

LANGUAGE: python
CODE:
```
@vary_on_headers("User-Agent", "Cookie")
def my_view(request): ...
```

----------------------------------------

TITLE: Implementing a Custom RedirectView in Django
DESCRIPTION: Demonstrates how to create a RedirectView subclass that performs a custom action before redirecting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/base.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.shortcuts import get_object_or_404
from django.views.generic.base import RedirectView

from articles.models import Article


class ArticleCounterRedirectView(RedirectView):
    permanent = False
    query_string = True
    pattern_name = "article-detail"

    def get_redirect_url(self, *args, **kwargs):
        article = get_object_or_404(Article, pk=kwargs["pk"])
        article.update_counter()
        return super().get_redirect_url(*args, **kwargs)
```

----------------------------------------

TITLE: Creating and Automatically Closing a File Object with Context Manager
DESCRIPTION: Improved approach for creating a Django File object using a context manager (with statement) to ensure files are automatically closed, preventing resource leaks.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> from django.core.files import File

# Create a Python file object using open() and the with statement
>>> with open("/path/to/hello.world", "w") as f:
...     myfile = File(f)
...     myfile.write("Hello World")
...
>>> myfile.closed
True
>>> f.closed
True
```

----------------------------------------

TITLE: Correct Django Template Extension Pattern
DESCRIPTION: Shows the proper way to structure a Django template with the extends tag as the first non-comment line. This example demonstrates proper spacing and block naming conventions.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_2

LANGUAGE: html+django
CODE:
```
{% extends "base.html" %}

{% block content %}
  <h1 class="font-semibold text-xl">
    {{ pages.title }}
  </h1>
{% endblock content %}
```

----------------------------------------

TITLE: Implementing Custom Django Template Tag - Python Implementation
DESCRIPTION: Python implementation of a custom 'upper' template tag that capitalizes all content between {% upper %} and {% endupper %}. Demonstrates parser usage, node creation, and content rendering.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_41

LANGUAGE: python
CODE:
```
def do_upper(parser, token):
    nodelist = parser.parse(("endupper",))
    parser.delete_first_token()
    return UpperNode(nodelist)


class UpperNode(template.Node):
    def __init__(self, nodelist):
        self.nodelist = nodelist

    def render(self, context):
        output = self.nodelist.render(context)
        return output.upper()
```

----------------------------------------

TITLE: Subclassing ModelForm Meta Class in Django
DESCRIPTION: This snippet demonstrates how to subclass the Meta inner class of a parent ModelForm to modify the fields or exclude lists. It creates a new form that inherits from EnhancedArticleForm and excludes the 'body' field.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
class RestrictedArticleForm(EnhancedArticleForm):
    class Meta(ArticleForm.Meta):
        exclude = ["body"]
```

----------------------------------------

TITLE: HTML Template for Author Update Form in Django
DESCRIPTION: Example of an HTML template for rendering an author update form in Django, including CSRF token and form fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_7

LANGUAGE: html
CODE:
```
<form method="post">{% csrf_token %}
    {{ form.as_p }}
    <input type="submit" value="Update">
</form>
```

----------------------------------------

TITLE: Retrieving Direct User Permissions with ModelBackend in Django (Python)
DESCRIPTION: Returns the set of permission strings assigned directly to the `user_obj`. Returns an empty set if the user is anonymous or inactive (`is_active` is False). The asynchronous version `aget_user_permissions()` was added in Django 5.2.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
get_user_permissions(user_obj, obj=None)
```

LANGUAGE: python
CODE:
```
aget_user_permissions(user_obj, obj=None)
```

----------------------------------------

TITLE: Using dictsort with regroup Tag in Django Templates
DESCRIPTION: This snippet demonstrates sorting data before regrouping by using the dictsort filter. This is useful when the input data is not already sorted according to the grouping attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_37

LANGUAGE: html+django
CODE:
```
{% regroup cities|dictsort:"country" by country as country_list %}
```

----------------------------------------

TITLE: Resetting Primary Key Sequences in Django TransactionTestCase
DESCRIPTION: This example shows how to use the reset_sequences attribute in TransactionTestCase to ensure primary key sequences are reset before each test run, which can be useful for tests that depend on specific primary key values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
class TestsThatDependsOnPrimaryKeySequences(TransactionTestCase):
    reset_sequences = True

    def test_animal_pk(self):
        lion = Animal.objects.create(name="lion", sound="roar")
        # lion.pk is guaranteed to always be 1
        self.assertEqual(lion.pk, 1)
```

----------------------------------------

TITLE: Rendering Object Details in DateDetailView Template (Django, HTML+django)
DESCRIPTION: This template snippet demonstrates how to display the title attribute of the object provided by Django's DateDetailView. It uses the double-curly-brace Django template syntax to insert the value, assuming the context variable 'object' is available. Inputs are context dictionaries from the DateDetailView, and output is the rendered HTML page. No additional dependencies are required, but this template should be named according to the default suffix (e.g., article_detail.html) unless otherwise configured.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_13

LANGUAGE: html+django
CODE:
```
<h1>{{ object.title }}</h1>
```

----------------------------------------

TITLE: Creating Intermediate Page for Admin Action in Django
DESCRIPTION: This snippet shows how to create an admin action that returns an intermediate page. The 'export_as_json' function serializes selected objects as JSON and returns an HttpResponse.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.core import serializers
from django.http import HttpResponse

def export_as_json(modeladmin, request, queryset):
    response = HttpResponse(content_type="application/json")
    serializers.serialize("json", queryset, stream=response)
    return response
```

----------------------------------------

TITLE: Using Django's STORAGES Setting with a Callable
DESCRIPTION: Example using the storages registry to select a storage backend defined in the STORAGES setting. This approach allows for centralized configuration of storage backends.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.core.files.storage import storages


def select_storage():
    return storages["mystorage"]


class MyModel(models.Model):
    upload = models.FileField(storage=select_storage)
```

----------------------------------------

TITLE: Custom Form Renderer Configuration in Python
DESCRIPTION: Demonstrates how to create a custom form renderer class and configure it in Django settings
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.forms.renderers import TemplatesSetting


class CustomFormRenderer(TemplatesSetting):
    form_template_name = "form_snippet.html"


FORM_RENDERER = "project.settings.CustomFormRenderer"
```

----------------------------------------

TITLE: Implementing Trigram Similarity Search with PostgreSQL in Django
DESCRIPTION: Demonstrates how to use PostgreSQL's trigram similarity comparison to find similar names based on letter sequences. This method compares combinations of three letters between search and source strings.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/search.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> Author.objects.filter(name__unaccent__lower__trigram_similar="Hélène")
[<Author: Helen Mirren>, <Author: Hélène Joy>]
```

----------------------------------------

TITLE: Removing ManyToMany Relationships with Non-Unique Through Models - Django - Pycon
DESCRIPTION: Illustrates the behavior of the `remove` method when the intermediate `through` model does not enforce uniqueness on the related object pair. Shows that `remove` deletes *all* intermediate instances for the specified related object.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_20

LANGUAGE: pycon
CODE:
```
>>> Membership.objects.create(
...     person=ringo,
...     group=beatles,
...     date_joined=date(1968, 9, 4),
...     invite_reason="You've been gone for a month and we miss you.",
... )
>>> beatles.members.all()
<QuerySet [<Person: Ringo Starr>, <Person: Paul McCartney>, <Person: Ringo Starr>]>
>>> # This deletes both of the intermediate model instances for Ringo Starr
>>> beatles.members.remove(ringo)
>>> beatles.members.all()
<QuerySet [<Person: Paul McCartney>]>
```

----------------------------------------

TITLE: Configurable Parameter Field Implementation in Django
DESCRIPTION: A more flexible approach to custom field implementation allowing the max_length parameter to be specified at field instantiation time rather than hardcoded.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
# This is a much more flexible example.
class BetterCharField(models.Field):
    def __init__(self, max_length, *args, **kwargs):
        self.max_length = max_length
```

----------------------------------------

TITLE: Checking Proxy Model Permissions in Django Console
DESCRIPTION: This interactive console example demonstrates how to fetch content types for proxy models, retrieve associated permissions, add them to a user, and check permission inheritance behavior between proxy and concrete models.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> # Fetch the content type for the proxy model.
>>> content_type = ContentType.objects.get_for_model(Student, for_concrete_model=False)
>>> student_permissions = Permission.objects.filter(content_type=content_type)
>>> [p.codename for p in student_permissions]
['add_student', 'change_student', 'delete_student', 'view_student',
'can_deliver_pizzas']
>>> for permission in student_permissions:
...     user.user_permissions.add(permission)
...
>>> user.has_perm("app.add_person")
False
>>> user.has_perm("app.can_eat_pizzas")
False
>>> user.has_perms(("app.add_student", "app.can_deliver_pizzas"))
True
```

----------------------------------------

TITLE: Defining AUTH_PASSWORD_VALIDATORS setting
DESCRIPTION: This setting is a list of password validator classes. The default value is an empty list, meaning no validators are used by default.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_76



----------------------------------------

TITLE: Sorting List of Dictionaries by Nested Key Using Dictsort in Django Templates - HTML+Django
DESCRIPTION: Demonstrates advanced usage of the 'dictsort' filter with a nested key ('author.age'). This is used within a for loop to iterate and display sorted books by author age. Requires a list of dictionaries with nested structures. Output is an ordered sequence for template rendering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_60

LANGUAGE: html+django
CODE:
```
{% for book in books|dictsort:"author.age" %}
    * {{ book.title }} ({{ book.author.name }})
{% endfor %}
```

----------------------------------------

TITLE: Correct Usage of Keyword Arguments for Django Model Index
DESCRIPTION: Shows the correct way to define a Django model index (`models.Index`) using keyword arguments (`fields=["headline", "-pub_date"], name="index_name"). This explicit syntax is required in Django 2.0+ for clarity and consistency.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
models.Index(fields=["headline", "-pub_date"], name="index_name")
```

----------------------------------------

TITLE: Configuring Database Routers in Django
DESCRIPTION: This setting, `DATABASE_ROUTERS`, specifies a list of routers used to determine which database to use for database queries in a multi-database configuration.  It defaults to an empty list, indicating no custom routing is in effect.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_12

LANGUAGE: text
CODE:
```
Default: ``[]`` (Empty list)

The list of routers that will be used to determine which database
to use when performing a database query.
```

----------------------------------------

TITLE: Checking Django Version Shell
DESCRIPTION: Command executed in the shell to verify if Django is installed and to display its version. This is a common first step to ensure the environment is correctly set up before starting development.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#_snippet_0

LANGUAGE: Shell
CODE:
```
python -m django --version
```

----------------------------------------

TITLE: Custom Author DetailView Implementation
DESCRIPTION: DetailView with overridden get_object method to update last_accessed timestamp
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from django.utils import timezone
from django.views.generic import DetailView
from books.models import Author


class AuthorDetailView(DetailView):
    queryset = Author.objects.all()

    def get_object(self):
        obj = super().get_object()
        # Record the last accessed date
        obj.last_accessed = timezone.now()
        obj.save()
        return obj
```

----------------------------------------

TITLE: Setting Permissions for Uploaded Files in Django
DESCRIPTION: Defines the numeric mode (0o644 by default) applied to newly uploaded files. If None, behavior is OS-dependent. Does not apply to temporary files in FILE_UPLOAD_TEMP_DIR. Also affects default permissions for collected static files.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_40

LANGUAGE: python
CODE:
```
FILE_UPLOAD_PERMISSIONS = 0o644
```

----------------------------------------

TITLE: Enhancing Django Form error handling with add_error() method
DESCRIPTION: This snippet describes the new Form.add_error() API that simplifies adding validation errors to specific fields from any location in form processing. It replaces direct manipulation of private error-related attributes and supports attaching ValidationError instances with metadata like codes and parameters. The method improves error management flexibility and consistency.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.txt#_snippet_4

LANGUAGE: Python
CODE:
```
form.add_error('field_name', ValidationError('Error message', code='invalid'))
```

----------------------------------------

TITLE: Overriding Default Database Table Name in Django Model Meta (Python)
DESCRIPTION: Sets a custom database table name (`db_table`) for a Django model, overriding the default name automatically generated by Django (which is typically `app_label_modelname`).
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
db_table = "music_album"
```

----------------------------------------

TITLE: Extending Django Model Checks with Custom Logic in Python
DESCRIPTION: Demonstrates how to add custom checks to a Django model class (`MyModel`) by overriding the `check()` classmethod. The overridden method should call `super().check(**kwargs)` to include checks from the parent class and then add its own custom validation logic, returning a list of any generated `CheckMessage` instances.
SOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class MyModel(models.Model):
    @classmethod
    def check(cls, **kwargs):
        errors = super().check(**kwargs)
        # ... your own checks ...
        return errors
```

----------------------------------------

TITLE: Customizing Model Form for Formset in Python
DESCRIPTION: Shows how to create a custom model form with custom validation and use it in a model formset factory.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
class AuthorForm(forms.ModelForm):
    class Meta:
        model = Author
        fields = ["name", "title"]

    def clean_name(self):
        # custom validation for the name field
        ...
```

LANGUAGE: python
CODE:
```
AuthorFormSet = modelformset_factory(Author, form=AuthorForm)
```

----------------------------------------

TITLE: Setting Default From Email Address in Django
DESCRIPTION: Specifies the default email address ('webmaster@localhost') used in the 'From:' header for automated site correspondence. This does not affect error emails sent to ADMINS/MANAGERS (see SERVER_EMAIL).
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_20

LANGUAGE: python
CODE:
```
DEFAULT_FROM_EMAIL = 'webmaster@localhost'
```

----------------------------------------

TITLE: Sending Test Email to Recipients - Shell
DESCRIPTION: Uses the `sendtestemail` management command to send a test email to the specified email addresses (`foo@example.com`, `bar@example.com`). This command helps verify that Django's email sending configuration is working correctly.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_30

LANGUAGE: shell
CODE:
```
django-admin sendtestemail foo@example.com bar@example.com
```

----------------------------------------

TITLE: Vulnerable QuerySet.order_by() Usage Example in Django 3.1.12
DESCRIPTION: Demonstration of the security vulnerability where unsanitized user input in QuerySet.order_by() could lead to SQL injection. This issue was present in Django 3.1.12 and fixed in 3.1.13.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.13.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
QuerySet.order_by()
```

----------------------------------------

TITLE: Creating HTML Form for Voting in Django Template
DESCRIPTION: This snippet shows how to create an HTML form in a Django template to allow users to vote on poll choices. It includes radio buttons for each choice and uses CSRF protection.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial04.txt#2025-04-23_snippet_0

LANGUAGE: html
CODE:
```
<form action="{% url 'polls:vote' question.id %}" method="post">
{% csrf_token %}
<fieldset>
    <legend><h1>{{ question.question_text }}</h1></legend>
    {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}
    {% for choice in question.choice_set.all %}
        <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}">
        <label for="choice{{ forloop.counter }}">{{ choice.choice_text }}</label><br>
    {% endfor %}
</fieldset>
<input type="submit" value="Vote">
</form>
```

----------------------------------------

TITLE: Configuring Apache httpd.conf for Django with mod_wsgi
DESCRIPTION: Basic Apache configuration for running a Django application with mod_wsgi. Includes WSGIScriptAlias for URL routing, WSGIPythonHome for virtual environment setup, and directory permissions for the WSGI file.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/modwsgi.txt#2025-04-23_snippet_0

LANGUAGE: apache
CODE:
```
WSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py
WSGIPythonHome /path/to/venv
WSGIPythonPath /path/to/mysite.com

<Directory /path/to/mysite.com/mysite>
<Files wsgi.py>
Require all granted
</Files>
</Directory>
```

----------------------------------------

TITLE: Non-atomic Batch Migration Example
DESCRIPTION: Demonstrates how to perform a non-atomic migration for large data sets using batched updates.
SOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
import uuid
from django.db import migrations, transaction

def gen_uuid(apps, schema_editor):
    MyModel = apps.get_model("myapp", "MyModel")
    while MyModel.objects.filter(uuid__isnull=True).exists():
        with transaction.atomic():
            for row in MyModel.objects.filter(uuid__isnull=True)[:1000]:
                row.uuid = uuid.uuid4()
                row.save()

class Migration(migrations.Migration):
    atomic = False

    operations = [
        migrations.RunPython(gen_uuid),
    ]
```

----------------------------------------

TITLE: Resolving a URL Path to a View using `resolve` in Django (Python)
DESCRIPTION: Conceptual Python code showing how to use `django.urls.resolve` to find the view function and associated metadata for a given URL path ('/some/path/'). The function returns a `ResolverMatch` object if a match is found, allowing access to details like the URL pattern name (`match.url_name`). Raises `Resolver404` if no match exists.
SOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
# Resolve a URL
match = resolve("/some/path/")
# Print the URL pattern that matches the URL
print(match.url_name)
```

----------------------------------------

TITLE: Customizing id Attribute Format in Django Forms with auto_id="id_for_%s" - Python
DESCRIPTION: Shows how to customize the format of id attributes in rendered HTML by setting auto_id to a format string on form instantiation. Inputs are a ContactForm with auto_id set to 'id_for_%s'. Outputs are HTML blocks with id attributes constructed from the specified format. Facilitates integration into projects with specific id naming conventions that differ from Django's defaults.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
>>> f = ContactForm(auto_id="id_for_%s")
>>> print(f)
<div><label for="id_for_subject">Subject:</label><input type="text" name="subject" maxlength="100" required id="id_for_subject"></div>
<div><label for="id_for_message">Message:</label><textarea name="message" cols="40" rows="10" required id="id_for_message"></textarea></div>
<div><label for="id_for_sender">Sender:</label><input type="email" name="sender" required id="id_for_sender"></div>
<div><label for="id_for_cc_myself">Cc myself:</label><input type="checkbox" name="cc_myself" id="id_for_cc_myself"></div>
```

----------------------------------------

TITLE: Accessing CSS Classes for Form Fields
DESCRIPTION: Shows how to access and add CSS classes to form fields using the css_classes method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_39

LANGUAGE: pycon
CODE:
```
>>> f = ContactForm(data={"message": ""})
>>> f["message"].css_classes()
'required'

>>> f = ContactForm(data={"message": ""})
>>> f["message"].css_classes("foo bar")
'foo bar required'
```

----------------------------------------

TITLE: Specifying SSL Key File for SMTP Client Authentication in Django
DESCRIPTION: Sets the path to a PEM-formatted private key file (None by default) for client authentication if EMAIL_USE_SSL or EMAIL_USE_TLS is True. Requires EMAIL_SSL_CERTFILE to be set as well.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_35

LANGUAGE: python
CODE:
```
EMAIL_SSL_KEYFILE = None
```

----------------------------------------

TITLE: Creating a GIN Index for Search Vectors in Django
DESCRIPTION: Demonstrates how to create a GIN index on a search vector to improve search performance. This is useful when searching across many records as it significantly speeds up search operations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
GinIndex(
    SearchVector("body_text", "headline", config="english"),
    name="search_vector_idx",
)
```

----------------------------------------

TITLE: Setting Database Default with Function (Python/Django)
DESCRIPTION: Demonstrates how to set a database-computed default value for a model field using the `db_default` attribute. This example uses the `Now()` database function to set the default value of a `DateTimeField` to the current timestamp at the database level.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_13

LANGUAGE: Python
CODE:
```
created = models.DateTimeField(db_default=Now())
```

----------------------------------------

TITLE: Using Current Time Custom Tag in Django Template
DESCRIPTION: This snippet shows the usage of a custom 'current_time' template tag that displays the current date/time formatted according to a parameter.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_21

LANGUAGE: html+django
CODE:
```
<p>The time is {% current_time "%Y-%m-%d %I:%M %p" %}.</p>
```

----------------------------------------

TITLE: Using Model.refresh_from_db with select_for_update in Django (Python)
DESCRIPTION: Illustrates calling `refresh_from_db` with the `from_queryset` argument set to `MyModel.objects.select_for_update()`. This acquires a row-level lock on the corresponding database record before reloading the model's values, which persists until the end of the current transaction.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
obj.refresh_from_db(from_queryset=MyModel.objects.select_for_update())
```

----------------------------------------

TITLE: Using keep_lazy Decorator for Lazy Translation in Python
DESCRIPTION: Demonstrates how to use the keep_lazy decorator to handle lazy translation objects in utility functions. It allows delaying the evaluation of lazy translations until they need to be converted to strings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
from django.utils.functional import keep_lazy, keep_lazy_text


def fancy_utility_function(s, *args, **kwargs):
    # Do some conversion on string 's'
    ...


fancy_utility_function = keep_lazy(str)(fancy_utility_function)


# Or more succinctly:
@keep_lazy(str)
def fancy_utility_function(s, *args, **kwargs): ...
```

----------------------------------------

TITLE: Configuring X-Frame-Options Header in Django
DESCRIPTION: Sets the default value for X_FRAME_OPTIONS to 'DENY' to enhance security by preventing clickjacking attacks.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
X_FRAME_OPTIONS = 'DENY'
```

----------------------------------------

TITLE: Using Model Formset in Python
DESCRIPTION: Shows how to instantiate and print a model formset created from the Author model.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_21

LANGUAGE: pycon
CODE:
```
>>> formset = AuthorFormSet()
>>> print(formset)
<input type="hidden" name="form-TOTAL_FORMS" value="1" id="id_form-TOTAL_FORMS"><input type="hidden" name="form-INITIAL_FORMS" value="0" id="id_form-INITIAL_FORMS"><input type="hidden" name="form-MIN_NUM_FORMS" value="0" id="id_form-MIN_NUM_FORMS"><input type="hidden" name="form-MAX_NUM_FORMS" value="1000" id="id_form-MAX_NUM_FORMS">
<div><label for="id_form-0-name">Name:</label><input id="id_form-0-name" type="text" name="form-0-name" maxlength="100"></div>
<div><label for="id_form-0-title">Title:</label><select name="form-0-title" id="id_form-0-title">
<option value="" selected>---------</option>
<option value="MR">Mr.</option>
<option value="MRS">Mrs.</option>
<option value="MS">Ms.</option>
</select><input type="hidden" name="form-0-id" id="id_form-0-id"></div>
```

----------------------------------------

TITLE: Using get_media_prefix Template Tag
DESCRIPTION: Shows how to use the get_media_prefix template tag to access the MEDIA_URL setting. This example stores the media URL in a data attribute for potential JavaScript use, with proper escaping.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_110

LANGUAGE: html+django
CODE:
```
{% load static %}
<body data-media-url="{% get_media_prefix %}">
```

----------------------------------------

TITLE: Configuring StaticViewSitemap in Django URLs
DESCRIPTION: This Python code shows how to integrate the custom `StaticViewSitemap` (defined elsewhere, presumably in `sitemaps.py`) into the Django URL configuration (`urls.py`). It defines URL patterns for the static views (`main`, `about`, `license`) and associates them with their respective view functions. A `sitemaps` dictionary maps the key 'static' to the `StaticViewSitemap` class. Finally, it sets up the `/sitemap.xml` URL pattern to use the `sitemap` view, passing it the `sitemaps` dictionary.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
# urls.py
from django.contrib.sitemaps.views import sitemap
from django.urls import path

from .sitemaps import StaticViewSitemap
from . import views

sitemaps = {
    "static": StaticViewSitemap,
}

urlpatterns = [
    path("", views.main, name="main"),
    path("about/", views.about, name="about"),
    path("license/", views.license, name="license"),
    # ...
    path(
        "sitemap.xml",
        sitemap,
        {"sitemaps": sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
]
```

----------------------------------------

TITLE: Generating Date List in Django BaseDateListView
DESCRIPTION: The get_date_list method returns a list of dates for which the queryset contains entries. It uses the QuerySet.dates() method and allows customization of date_type and ordering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
def get_date_list(queryset, date_type=None, ordering='ASC'):
    Returns the list of dates of type ``date_type`` for which ``queryset``
    contains entries. For example, ``get_date_list(qs, 'year')`` will
    return the list of years for which ``qs`` has entries. If
    ``date_type`` isn't provided, the result of
    :meth:`~BaseDateListView.get_date_list_period` is used. ``date_type``
    and ``ordering`` are passed to
    :meth:`QuerySet.dates()<django.db.models.query.QuerySet.dates>`.
```

----------------------------------------

TITLE: Translating URL Patterns in Django
DESCRIPTION: Shows how to make URL patterns translatable using the gettext_lazy function in Django's URL configuration.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_47

LANGUAGE: python
CODE:
```
from django.conf.urls.i18n import i18n_patterns
from django.urls import include, path
from django.utils.translation import gettext_lazy as _

from about import views as about_views
from news import views as news_views
from sitemaps.views import sitemap

urlpatterns = [
    path("sitemap.xml", sitemap, name="sitemap-xml"),
]

news_patterns = (
    [
        path("", news_views.index, name="index"),

```

----------------------------------------

TITLE: Disabling View on Site Button in Django Admin
DESCRIPTION: Example of setting view_on_site to False in a ModelAdmin class to disable the 'View on site' button that would normally appear in the admin interface for models with a get_absolute_url method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_38

LANGUAGE: python
CODE:
```
from django.contrib import admin


class PersonAdmin(admin.ModelAdmin):
    view_on_site = False
```

----------------------------------------

TITLE: Working with Proxy Model Permissions in Django
DESCRIPTION: This example illustrates how permissions work with proxy models in Django. It defines a base model and a proxy model with custom permissions, then demonstrates permission checking behavior.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
class Person(models.Model):
    class Meta:
        permissions = [("can_eat_pizzas", "Can eat pizzas")]


class Student(Person):
    class Meta:
        proxy = True
        permissions = [("can_deliver_pizzas", "Can deliver pizzas")]
```

----------------------------------------

TITLE: Verifying Django Installation in Python Shell
DESCRIPTION: This snippet shows how to verify Django installation by importing Django and printing its version in the Python shell. It demonstrates the expected output format for the Django version.
SOURCE: https://github.com/django/django/blob/main/docs/intro/install.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> import django
>>> print(django.get_version())
|version|
```

----------------------------------------

TITLE: Class Method 'as_manager()' in Django ORM
DESCRIPTION: Defines the 'as_manager()' class method which returns a Manager instance that copies QuerySet methods, enabling custom query managers. It clarifies that this method does not have an async variant because it does not perform a query execution.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_91

LANGUAGE: Python
CODE:
```
.. classmethod:: as_manager()

Class method that returns an instance of :class:`~django.db.models.Manager`
with a copy of the ``QuerySet``’s methods. See
:ref:`create-manager-with-queryset-methods` for more details.

Note that unlike the other entries in this section, this does not have an
asynchronous variant as it does not execute a query.
```

----------------------------------------

TITLE: Using Callable Views in Django URLconfs
DESCRIPTION: Illustrates the enhancement in Django 0.96 URLconfs allowing direct use of callable view functions instead of only strings referencing them. The first snippet shows the older style using a string path to the view. The second snippet demonstrates the new, more direct style where the imported view function itself is used as the callback in the URL pattern definition.
SOURCE: https://github.com/django/django/blob/main/docs/releases/0.96.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.conf.urls.defaults import *

urlpatterns = patterns("", ("^myview/$", "mysite.myapp.views.myview"))
```

LANGUAGE: python
CODE:
```
from django.conf.urls.defaults import *
from mysite.myapp.views import myview

urlpatterns = patterns("", ("^myview/$", myview))
```

----------------------------------------

TITLE: Configuring Django Settings Manually in Python
DESCRIPTION: Shows how to configure Django settings manually using the configure() function, useful when bypassing DJANGO_SETTINGS_MODULE.
SOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.conf import settings

settings.configure(DEBUG=True)
```

----------------------------------------

TITLE: Defining Abstract Base Model with Manager Django
DESCRIPTION: This snippet defines an abstract Django model class (`Meta.abstract = True`) and assigns a custom manager instance (`CustomManager()`) to the default `objects` attribute. This manager is then inherited by subclasses.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_10

LANGUAGE: Python
CODE:
```
class AbstractBase(models.Model):
    # ...
    objects = CustomManager()

    class Meta:
        abstract = True
```

----------------------------------------

TITLE: Effect of Bulk Deleting Objects on M2M Relationships (pycon)
DESCRIPTION: Demonstrates the effect of performing a bulk delete operation on `Publication` instances matching a filter (`title__startswith="Science"`). The subsequent query for all `Publication` objects shows that only the non-deleted ones remain, implicitly removing the M2M relationships associated with the deleted publications.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_28

LANGUAGE: pycon
CODE:
```
>>> Publication.objects.filter(title__startswith="Science").delete()
>>> Publication.objects.all()
```

----------------------------------------

TITLE: Creating GEOS Geometry Objects from Different Formats
DESCRIPTION: Examples of creating GEOSGeometry objects using different input formats including WKT, HEX, WKB, and GeoJSON. Shows how to use the GEOSGeometry constructor with various spatial data formats.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.geos import GEOSGeometry
>>> pnt = GEOSGeometry("POINT(5 23)")  # WKT
>>> pnt = GEOSGeometry("010100000000000000000014400000000000003740")  # HEX
>>> pnt = GEOSGeometry(
...     memoryview(
...         b"\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x00\x007@"
...     )
... )  # WKB
>>> pnt = GEOSGeometry(
...     '{ "type": "Point", "coordinates": [ 5.000000, 23.000000 ] }'
... )  # GeoJSON
```

----------------------------------------

TITLE: Django Form Renderer Class Configuration
DESCRIPTION: Specifies `FORM_RENDERER`, the class responsible for rendering forms and widgets in Django templates. Defaults to Django's built-in template renderer class. Valid options include DjangoTemplates, Jinja2, and TemplatesSetting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_46

LANGUAGE: plaintext
CODE:
```
FORM_RENDERER
-----------------

Default: `'django.forms.renderers.DjangoTemplates'`

The class that renders forms and form widgets. It must implement
:ref:`the low-level render API <low-level-widget-render-api>`. Included form
renderers are:

* `'django.forms.renderers.DjangoTemplates'`
* `'django.forms.renderers.Jinja2'`
* `'django.forms.renderers.TemplatesSetting'`
```

----------------------------------------

TITLE: Defining ExclusionConstraint in Django Model
DESCRIPTION: Example of using ExclusionConstraint to restrict overlapping reservations in the same room, excluding canceled reservations. It demonstrates the use of expressions, operators, and conditions in the constraint definition.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/constraints.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.contrib.postgres.constraints import ExclusionConstraint
from django.contrib.postgres.fields import DateTimeRangeField, RangeOperators
from django.db import models
from django.db.models import Q


class Room(models.Model):
    number = models.IntegerField()


class Reservation(models.Model):
    room = models.ForeignKey("Room", on_delete=models.CASCADE)
    timespan = DateTimeRangeField()
    cancelled = models.BooleanField(default=False)

    class Meta:
        constraints = [
            ExclusionConstraint(
                name="exclude_overlapping_reservations",
                expressions=[
                    ("timespan", RangeOperators.OVERLAPS),
                    ("room", RangeOperators.EQUAL),
                ],
                condition=Q(cancelled=False),
            ),
        ]
```

----------------------------------------

TITLE: Using KT() Expressions for JSONField Text Value Lookups
DESCRIPTION: Shows how to use KT() expressions to represent text values of keys, indices, or path transforms in JSONField. This allows for advanced querying and annotation based on JSON paths.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
>>> from django.db.models.fields.json import KT
>>> Dog.objects.create(
...     name="Shep",
...     data={
...         "owner": {"name": "Bob"},
...         "breed": ["collie", "lhasa apso"],
...     },
... )
<Dog: Shep>
>>> Dog.objects.annotate(
...     first_breed=KT("data__breed__1"), owner_name=KT("data__owner__name")
... ).filter(first_breed__startswith="lhasa", owner_name="Bob")
<QuerySet [<Dog: Shep>]>
```

----------------------------------------

TITLE: Invalid Query Using Q Objects After Keyword Arguments
DESCRIPTION: Shows an invalid Django query where keyword arguments are placed before Q objects, which is not allowed in Django's query syntax.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_44

LANGUAGE: python
CODE:
```
# INVALID QUERY
Poll.objects.get(
    question__startswith="Who",
    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),
)
```

----------------------------------------

TITLE: Retrieving validation error data and converting to JSON in Django Forms
DESCRIPTION: The snippet explains the mechanism for accessing ValidationError metadata via form.errors.as_data() and serializing errors including codes to JSON with errors.as_json(). This supports better error inspection and customization, such as error message rewriting or serialization for APIs. Dependencies include django.forms.Form and django.core.exceptions.ValidationError.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.txt#_snippet_5

LANGUAGE: Python
CODE:
```
errors_data = form.errors.as_data()
json_errors = form.errors.as_json()
```

----------------------------------------

TITLE: Implementing a Custom QuerySet with Manager Integration in Django 1.7
DESCRIPTION: Example of creating a custom QuerySet with chainable methods that can be used directly as a Manager using the new as_manager() class method, allowing DRY code organization for model queries.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.txt#_snippet_0

LANGUAGE: Python
CODE:
```
class FoodQuerySet(models.QuerySet):
    def pizzas(self):
        return self.filter(kind="pizza")

    def vegetarian(self):
        return self.filter(vegetarian=True)


class Food(models.Model):
    kind = models.CharField(max_length=50)
    vegetarian = models.BooleanField(default=False)
    objects = FoodQuerySet.as_manager()


Food.objects.pizzas().vegetarian()
```

----------------------------------------

TITLE: Demonstrating Default HTML Output of Django Form Fields in Python
DESCRIPTION: Displays the rendered HTML for a basic Django form with CharField and URLField, showing its default output using the print function. Requires Django and an instance of the CommentForm; shows the difference in input types for URL and text fields as rendered HTML. Inputs are form initialization without auto-generated IDs; output is the HTML code. Useful for previewing the default widget rendering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> f = CommentForm(auto_id=False)
>>> print(f)
<div>Name:<input type="text" name="name" required></div>
<div>Url:<input type="url" name="url" required></div>
<div>Comment:<input type="text" name="comment" required></div>
```

----------------------------------------

TITLE: Using Trim Function in Django ORM
DESCRIPTION: Shows how to remove leading and trailing spaces from a text field
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_41

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Trim
>>> Author.objects.create(name="  John  ", alias="j")
>>> Author.objects.update(name=Trim("name"))
1
>>> print(Author.objects.get(alias="j").name)
John
```

----------------------------------------

TITLE: Instantiating GEOS LineString with a Single Sequence in Python
DESCRIPTION: Shows how to create a `LineString` object by passing a single sequence (like a tuple or list) containing the coordinate points to the constructor. The elements within the sequence can be either coordinate tuples `(x, y)` or `Point` objects. Both examples yield the same `LineString`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_9

LANGUAGE: pycon
CODE:
```
>>> ls = LineString(((0, 0), (1, 1)))
>>> ls = LineString([Point(0, 0), Point(1, 1)])
```

----------------------------------------

TITLE: Using time Filter in Django Templates
DESCRIPTION: The time filter formats a time according to the given format, which can be a predefined format or a custom one. It accepts timezone-related format specifiers for timezone-aware datetime objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_89

LANGUAGE: html+django
CODE:
```
{{ value|time:"H:i" }}
```

LANGUAGE: html+django
CODE:
```
{{ value|time:"H\h i\m" }}
```

LANGUAGE: html+django
CODE:
```
{{ value|time:"TIME_FORMAT" }}
```

LANGUAGE: html+django
CODE:
```
{{ value|time }}
```

----------------------------------------

TITLE: Django SingleObjectMixin Class Definition
DESCRIPTION: Class that provides functionality for looking up a single object associated with the current HTTP request. Includes methods for querying objects, handling slugs, and managing context data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-single-object.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class SingleObjectMixin:
    model = None
    queryset = None
    slug_field = 'slug'
    slug_url_kwarg = 'slug'
    pk_url_kwarg = 'pk'
    context_object_name = None
    query_pk_and_slug = False
```

----------------------------------------

TITLE: Accessing HTTP Headers in Django Templates
DESCRIPTION: Example of accessing HTTP headers in Django templates using underscores in place of hyphens, which is useful for template variable access.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_2

LANGUAGE: html+django
CODE:
```
{{ request.headers.user_agent }}
```

----------------------------------------

TITLE: Illustrating TypeError on M2M Add with Incorrect Type (pycon)
DESCRIPTION: Demonstrates that attempting to add an object of an incorrect type (an `Article` instance `a1` instead of a `Publication`) to the `publications` `ManyToManyField` raises a `TypeError`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_8

LANGUAGE: pycon
CODE:
```
>>> a2.publications.add(a1)
Traceback (most recent call last):
...
TypeError: 'Publication' instance expected
```

----------------------------------------

TITLE: Creating Field Indexes with Custom Order Using Django ORM (Python)
DESCRIPTION: Shows how to define an index by specifying a list of field names with explicit sorting using Django's ORM. The 'fields' keyword takes a list where field names prefixed by a hyphen indicate descending order. Dependencies include the correct field names defined in the model; this produces SQL indexes with custom column orders. Limitations include database backend restrictions (some databases may not support descending indexes or specific ordering).
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/indexes.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
Index(fields=['headline', '-pub_date'])
```

----------------------------------------

TITLE: Querying Database for Form Field Choices in Django (Discouraged)
DESCRIPTION: This snippet demonstrates a common mistake where a database query is executed during module import to populate form field choices. This approach is discouraged as it can slow down project startup and potentially cache stale data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class LocationForm(forms.Form):
    country = forms.ChoiceField(choices=[c.name for c in Country.objects.all()])
```

----------------------------------------

TITLE: Manual Email Connection Management
DESCRIPTION: Shows how to manually control email connection opening and closing for sending messages.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
from django.core import mail

connection = mail.get_connection()

# Manually open the connection
connection.open()

# Construct an email message that uses the connection
email1 = mail.EmailMessage(
    "Hello",
    "Body goes here",
    "from@example.com",
    ["to1@example.com"],
    connection=connection,
)
email1.send()  # Send the email

# Construct two more messages
```

----------------------------------------

TITLE: Creating JSON Fixture for Django Person Model
DESCRIPTION: Example JSON fixture demonstrating how to define initial data for a Person model with two records. Shows the structure for model name, primary key, and field values.
SOURCE: https://github.com/django/django/blob/main/docs/howto/initial-data.txt#2025-04-23_snippet_0

LANGUAGE: json
CODE:
```
[
  {
    "model": "myapp.person",
    "pk": 1,
    "fields": {
      "first_name": "John",
      "last_name": "Lennon"
    }
  },
  {
    "model": "myapp.person",
    "pk": 2,
    "fields": {
      "first_name": "Paul",
      "last_name": "McCartney"
    }
  }
]
```

----------------------------------------

TITLE: Checking Secure Connection in Django
DESCRIPTION: Shows the method to check if a request is secure in Django. This method's behavior was impacted by the security fix to ensure correct HTTPS detection.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.22.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
HttpRequest.is_secure()
```

----------------------------------------

TITLE: Setting up Property-based Admin Display
DESCRIPTION: Demonstrates the traditional way of setting up admin display properties using the property() function instead of decorators.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
def my_property(self):
    return self.first_name + " " + self.last_name

my_property.short_description = "Full name of the person"
my_property.admin_order_field = "last_name"
my_property.boolean = False

full_name = property(my_property)
```

----------------------------------------

TITLE: Rendering MultiWidget Subwidgets in a Django Template
DESCRIPTION: Illustrates how to iterate over the `widget.subwidgets` context variable provided by `MultiWidget` within a Django template. It uses the `{% include %}` template tag to render each subwidget using its specific template name (`subwidget.template_name`) and passing the subwidget itself as context.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_13

LANGUAGE: html+django
CODE:
```
{% for subwidget in widget.subwidgets %}
    {% include subwidget.template_name with widget=subwidget %}
{% endfor %}
```

----------------------------------------

TITLE: Using non_atomic_requests Decorator in Django
DESCRIPTION: Examples showing how to use the non_atomic_requests decorator to exclude specific views from the ATOMIC_REQUESTS setting. Demonstrates basic usage and specifying a particular database.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import transaction


@transaction.non_atomic_requests
def my_view(request):
    do_stuff()


@transaction.non_atomic_requests(using="other")
def my_other_view(request):
    do_stuff_on_the_other_database()
```

----------------------------------------

TITLE: Configuring Dummy Backend in Django Settings
DESCRIPTION: Example of configuring the dummy email backend that does nothing with messages.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
EMAIL_BACKEND = "django.core.mail.backends.dummy.EmailBackend"
```

----------------------------------------

TITLE: Implementing Inline Form Event Listeners in JavaScript
DESCRIPTION: This JavaScript code adds event listeners for 'formset:added' and 'formset:removed' events in the Django admin. It demonstrates how to handle the addition and removal of inline forms, specifically for the 'author_set' formset.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/javascript.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
document.addEventListener('formset:added', (event) => {
    if (event.detail.formsetName == 'author_set') {
        // Do something
    }
});
document.addEventListener('formset:removed', (event) => {
    // Row removed
});
```

----------------------------------------

TITLE: Custom Languages Configuration in Django Settings
DESCRIPTION: Example of restricting available languages using the LANGUAGES setting with translation-aware language names
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_65

LANGUAGE: python
CODE:
```
from django.utils.translation import gettext_lazy as _

LANGUAGES = [
    ("de", _("German")),
    ("en", _("English")),
]
```

----------------------------------------

TITLE: Importing Django PostgreSQL Module
DESCRIPTION: This snippet shows how to import the django.contrib.postgres module in Python. The module provides PostgreSQL-specific fields and features for Django projects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/index.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
.. module:: django.contrib.postgres
    :synopsis: PostgreSQL-specific fields and features
```

----------------------------------------

TITLE: Using SHA1 Hash Function in Django ORM
DESCRIPTION: Demonstrates generating SHA1 hash of a text field
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_38

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import SHA1
>>> Author.objects.create(name="Margaret Smith")
>>> author = Author.objects.annotate(name_sha1=SHA1("name")).get()
>>> print(author.name_sha1)
b87efd8a6c991c390be5a68e8a7945a7851c7e5c
```

----------------------------------------

TITLE: Using Contained_by Lookup with ArrayField in Django
DESCRIPTION: Shows how to use the 'contained_by' lookup with ArrayField in Django. This example demonstrates querying for posts where the tags are a subset of the given values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> Post.objects.create(name="First post", tags=["thoughts", "django"])
>>> Post.objects.create(name="Second post", tags=["thoughts"])
>>> Post.objects.create(name="Third post", tags=["tutorial", "django"])

>>> Post.objects.filter(tags__contained_by=["thoughts", "django"])
<QuerySet [<Post: First post>, <Post: Second post>]>

>>> Post.objects.filter(tags__contained_by=["thoughts", "django", "tutorial"])
<QuerySet [<Post: First post>, <Post: Second post>, <Post: Third post>]>
```

----------------------------------------

TITLE: Getting and Setting GDALRaster Scale Attribute in Python
DESCRIPTION: Illustrates accessing the pixel width and height (scale) used for georeferencing via the `scale` attribute and modifying its x-component. The scale represents coefficients 1 and 5 of the geotransform.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_41

LANGUAGE: pycon
CODE:
```
>>> rst = GDALRaster({"width": 10, "height": 20, "srid": 4326})
>>> rst.scale
[1.0, -1.0]
>>> rst.scale.x = 2
>>> rst.scale
[2.0, -1.0]
```

----------------------------------------

TITLE: Customizing Success Messages with ModelForms in Django
DESCRIPTION: Shows how to override the get_success_message method to access fields from the saved object in a ModelForm when using SuccessMessageMixin.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.contrib.messages.views import SuccessMessageMixin
from django.views.generic.edit import CreateView
from myapp.models import ComplicatedModel


class ComplicatedCreateView(SuccessMessageMixin, CreateView):
    model = ComplicatedModel
    success_url = "/success/"
    success_message = "%(calculated_field)s was created successfully"

    def get_success_message(self, cleaned_data):
        return self.success_message % dict(
            cleaned_data,
            calculated_field=self.object.calculated_field,
        )
```

----------------------------------------

TITLE: Named Migration Creation
DESCRIPTION: Example showing how to create a migration with a custom name using the --name option.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
$ python manage.py makemigrations --name changed_my_model your_app_label
```

----------------------------------------

TITLE: Defining Dynamic Constraint Names in Abstract Base Classes using Python
DESCRIPTION: Demonstrates how to define constraints in abstract base classes with dynamically generated names to avoid collisions in subclasses. It uses `%(app_label)s` and `%(class)s` placeholders within the `name` parameter, which are replaced by the concrete model's app label and class name respectively. This example uses a `CheckConstraint`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.db.models import Q, CheckConstraint

CheckConstraint(condition=Q(age__gte=18), name='%(app_label)s_%(class)s_is_adult')
```

----------------------------------------

TITLE: Configuring STATICFILES_DIRS with Namespace Prefixes in Python
DESCRIPTION: Configures static file directories with optional prefixes to create namespaces for specific file collections. This allows referencing files with a namespace prefix in templates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_81

LANGUAGE: python
CODE:
```
STATICFILES_DIRS = [
    # ...
    ("downloads", "/opt/webfiles/stats"),
]
```

----------------------------------------

TITLE: Creating an Inclusion Tag Template in Django
DESCRIPTION: Shows the template used by the inclusion tag to render its output. This template is specified by the tag writer and uses the context provided by the tag function.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_16

LANGUAGE: html
CODE:
```
<ul>
{% for choice in choices %}
    <li> {{ choice }} </li>
{% endfor %}
</ul>
```

----------------------------------------

TITLE: Configuring Custom Templates for Sitemap Views in Django URLs
DESCRIPTION: This Python snippet demonstrates how to specify custom templates for both the sitemap index and individual sitemap views within a Django `urls.py` file. By passing the `template_name='custom_sitemap.html'` parameter in the dictionary argument to both the `views.index` and `views.sitemap` functions within the `path()` definitions, these views will render using the specified custom template instead of the default ones.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.contrib.sitemaps import views

urlpatterns = [
    path(
        "custom-sitemap.xml",
        views.index,
        {"sitemaps": sitemaps, "template_name": "custom_sitemap.html"},
        name="django.contrib.sitemaps.views.index",
    ),
    path(
        "custom-sitemap-<section>.xml",
        views.sitemap,
        {"sitemaps": sitemaps, "template_name": "custom_sitemap.html"},
        name="django.contrib.sitemaps.views.sitemap",
    ),
]
```

----------------------------------------

TITLE: Defining Django ForeignKey with related_query_name
DESCRIPTION: This code defines a Django model `Tag` with a `ForeignKey` to an `Article` model. It explicitly sets both `related_name` (for the reverse relation manager) and `related_query_name` (for the reverse lookup name in queries), demonstrating how to customize the query name.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_36

LANGUAGE: Python
CODE:
```
class Tag(models.Model):
    article = models.ForeignKey(
        Article,
        on_delete=models.CASCADE,
        related_name="tags",
        related_query_name="tag",
    )
    name = models.CharField(max_length=255)
```

----------------------------------------

TITLE: Defining the `condition` Decorator Signature in Python
DESCRIPTION: Shows the signature of the `django.views.decorators.http.condition` decorator. It accepts optional `etag_func` and `last_modified_func` arguments, which are functions used to compute the ETag and last modified time for a resource, respectively. These functions receive the request object and the view's arguments.
SOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
condition(etag_func=None, last_modified_func=None)
```

----------------------------------------

TITLE: Using Count with Distinct in M2M Queries (pycon)
DESCRIPTION: Illustrates how the `count()` method on a QuerySet interacts with `distinct()` when querying across many-to-many relationships. It shows the count before and after applying `distinct()` to get the number of unique articles matching the criteria.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_13

LANGUAGE: pycon
CODE:
```
>>> Article.objects.filter(publications__title__startswith="Science").count()
2

>>> Article.objects.filter(publications__title__startswith="Science").distinct().count()
1
```

----------------------------------------

TITLE: Viewing Queries for Multiple Databases in Django
DESCRIPTION: This snippet shows how to view SQL queries when using multiple databases in Django. It uses the connections dictionary to access queries for a specific database alias.
SOURCE: https://github.com/django/django/blob/main/docs/faq/models.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from django.db import connections
>>> connections["my_db_alias"].queries
```

----------------------------------------

TITLE: Querying Spatial Containment in Django ORM
DESCRIPTION: Example of using the 'within' lookup to find geometries that are spatially within a given geometry across different spatial database backends.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__within=geom)
```

----------------------------------------

TITLE: Constructing Path to Django Built-in Form Templates in Python
DESCRIPTION: This Python snippet demonstrates how to dynamically determine the filesystem path to Django's built-in form templates (standard or Jinja2). This is useful when configuring the `DIRS` option in the `TEMPLATES` setting, especially when using the `TemplatesSetting` renderer without relying on `APP_DIRS=True`. It requires the `django` package.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/renderers.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
import django

django.__path__[0] + "/forms/templates"  # or '/forms/jinja2'
```

----------------------------------------

TITLE: Django Admin Choice Registration
DESCRIPTION: Shows how to register the Choice model with the admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.contrib import admin

from .models import Choice, Question

# ...
admin.site.register(Choice)
```

----------------------------------------

TITLE: Creating Functional Indexes in Django Models
DESCRIPTION: Demonstrates how to create functional indexes on expressions and database functions using the new expressions argument of Index().
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
from django.db import models
from django.db.models import F, Index, Value
from django.db.models.functions import Lower, Upper


class MyModel(models.Model):
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    height = models.IntegerField()
    weight = models.IntegerField()

    class Meta:
        indexes = [
            Index(
                Lower("first_name"),
                Upper("last_name").desc(),
                name="first_last_name_idx",
            ),
            Index(
                F("height") / (F("weight") + Value(5)),
                name="calc_idx",
            ),
        ]
```

----------------------------------------

TITLE: Defining Models with Natural Keys in Python
DESCRIPTION: Demonstrates how to implement natural keys for Django models. It defines a custom manager with a get_by_natural_key method for more human-readable serialized data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.db import models


class PersonManager(models.Manager):
    def get_by_natural_key(self, first_name, last_name):
        return self.get(first_name=first_name, last_name=last_name)


class Person(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    birthdate = models.DateField()

    objects = PersonManager()

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=["first_name", "last_name"],
                name="unique_first_last_name",
            ),
        ]
```

----------------------------------------

TITLE: Using dictsort Template Filter in Django
DESCRIPTION: The dictsort template filter in Django is used to sort dictionaries. It has been updated to use a restricted resolution logic that doesn't call methods or allow indexing on dictionaries, to prevent potential information disclosure.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
dictsort
```

----------------------------------------

TITLE: Custom Django Field with Customizable Parameters
DESCRIPTION: Implementation of a CommaSepField that stores lists as comma-separated values. The deconstruct method properly handles the custom separator parameter to ensure correct migration serialization.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.db import models


class CommaSepField(models.Field):
    "Implements comma-separated storage of lists"

    def __init__(self, separator=",", *args, **kwargs):
        self.separator = separator
        super().__init__(*args, **kwargs)

    def deconstruct(self):
        name, path, args, kwargs = super().deconstruct()
        # Only include kwarg if it's not the default
        if self.separator != ",":
            kwargs["separator"] = self.separator
        return name, path, args, kwargs
```

----------------------------------------

TITLE: Signing and Unsigning Complex Data Structures in Django
DESCRIPTION: Demonstrates the use of sign_object() and unsign_object() methods, as well as dumps() and loads() functions, to protect complex data structures like dictionaries and lists.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signing.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> from django.core import signing
>>> signer = signing.TimestampSigner()
>>> value = signer.sign_object({"foo": "bar"})
>>> value
'eyJmb28iOiJiYXIifQ:1stLrZ:_QiOBHafwucBF9FyAr54qEs84ZO1UdsO1XiTJCvvdno'
>>> signer.unsign_object(value)
{'foo': 'bar'}
>>> value = signing.dumps({"foo": "bar"})
>>> value
'eyJmb28iOiJiYXIifQ:1stLsC:JItq2ZVjmAK6ivrWI-v1Gk1QVf2hOF52oaEqhZHca7I'
>>> signing.loads(value)
{'foo': 'bar'}

>>> from django.core import signing
>>> value = signing.dumps(("a", "b", "c"))
>>> signing.loads(value)
['a', 'b', 'c']
```

----------------------------------------

TITLE: Adding Custom Content to Django Admin Base Template
DESCRIPTION: Demonstration of using the extrabody block to add custom JavaScript that shows an alert when the admin page loads.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_77

LANGUAGE: html+django
CODE:
```
{% extends 'admin/base.html' %}

{% block extrabody %}
    {{ block.super }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            window.alert('Welcome!');
        });
    </script>
{% endblock extrabody %}
```

----------------------------------------

TITLE: Customizing Changelist Formset in Django ModelAdmin
DESCRIPTION: This method demonstrates how to use a custom formset for the changelist page in the admin interface by overriding the get_changelist_formset method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_54

LANGUAGE: python
CODE:
```
from django.forms import BaseModelFormSet


class MyAdminFormSet(BaseModelFormSet):
    pass


class MyModelAdmin(admin.ModelAdmin):
    def get_changelist_formset(self, request, **kwargs):
        kwargs["formset"] = MyAdminFormSet
        return super().get_changelist_formset(request, **kwargs)
```

----------------------------------------

TITLE: Indexing Results from a raw() Query
DESCRIPTION: Example showing how to use indexing with raw() query results to retrieve specific objects. Both standard and SQL-limited indexing approaches are shown.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> first_person = Person.objects.raw("SELECT * FROM myapp_person")[0]
```

----------------------------------------

TITLE: Allowed F-string Usage in Django
DESCRIPTION: Shows proper f-string usage in Django code with simple variable and property access. These examples demonstrate acceptable f-string patterns according to Django coding conventions.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
# Allowed
f"hello {user}"
f"hello {user.name}"
f"hello {self.user.name}"
```

----------------------------------------

TITLE: Defining a Custom Deployment Check Issuing a Warning in Python
DESCRIPTION: Provides an example of a custom system check registered to run only during deployment (`deploy=True`). This check verifies a custom setting `ENABLE_ANALYTICS` and issues a `Warning` message if the setting is not `True`. It relies on `django.conf.settings` and `django.core.checks.Warning`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.core.checks import Warning, register


@register("myapp", deploy=True)
def check_enable_analytics_is_true_on_deploy(app_configs, **kwargs):
    errors = []
    if getattr(settings, "ENABLE_ANALYTICS", None) is not True:
        errors.append(
            Warning(
                "The ENABLE_ANALYTICS setting should be set to True in deployment.",
                id="myapp.W001",
            )
        )
    return errors
```

----------------------------------------

TITLE: Customizing Manifest Storage Location in Django (Python)
DESCRIPTION: This Python code demonstrates how to create a custom static files storage class by subclassing `ManifestStaticFilesStorage`. It overrides the `__init__` method to specify a different `manifest_storage` backend (in this case, `StaticFilesStorage` pointing to `settings.BASE_DIR`), allowing developers to control where the `staticfiles.json` manifest file is stored. Depends on `django.conf.settings`, `ManifestStaticFilesStorage`, and `StaticFilesStorage`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.contrib.staticfiles.storage import (
    ManifestStaticFilesStorage,
    StaticFilesStorage,
)


class MyManifestStaticFilesStorage(ManifestStaticFilesStorage):
    def __init__(self, *args, **kwargs):
        manifest_storage = StaticFilesStorage(location=settings.BASE_DIR)
        super().__init__(*args, manifest_storage=manifest_storage, **kwargs)
```

----------------------------------------

TITLE: Using OpClass for Custom Operator Classes in Django Indexes
DESCRIPTION: Represents an expression with a custom operator class for use in functional indexes, unique constraints, or exclusion constraints. Requires 'django.contrib.postgres' in INSTALLED_APPS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
OpClass(expression, name)
```

LANGUAGE: python
CODE:
```
Index(
    OpClass(Lower("username"), name="varchar_pattern_ops"),
    name="lower_username_idx",
)
```

LANGUAGE: python
CODE:
```
UniqueConstraint(
    OpClass(Upper("description"), name="text_pattern_ops"),
    name="upper_description_unique",
)
```

LANGUAGE: python
CODE:
```
ExclusionConstraint(
    name="exclude_overlapping_ops",
    expressions=[
        (OpClass("circle", name="circle_ops"), RangeOperators.OVERLAPS),
    ],
)
```

----------------------------------------

TITLE: Implementing PostgreSQL Extension Loader Operation
DESCRIPTION: Example implementation of a custom Django migration operation that manages PostgreSQL extensions. Shows how to create and drop database extensions through migrations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.db.migrations.operations.base import Operation


class LoadExtension(Operation):
    reversible = True

    def __init__(self, name):
        self.name = name

    def state_forwards(self, app_label, state):
        pass

    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        schema_editor.execute("CREATE EXTENSION IF NOT EXISTS %s" % self.name)

    def database_backwards(self, app_label, schema_editor, from_state, to_state):
        schema_editor.execute("DROP EXTENSION %s" % self.name)

    def describe(self):
        return "Creates extension %s" % self.name

    @property
    def migration_name_fragment(self):
        return "create_extension_%s" % self.name
```

----------------------------------------

TITLE: Converting to UTC in Templates
DESCRIPTION: Demonstrates forcing conversion of a value to UTC using the utc template filter.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_9

LANGUAGE: html+django
CODE:
```
{% load tz %}

{{ value|utc }}
```

----------------------------------------

TITLE: Defining Custom Error Messages for MultiValueField in Django (Python)
DESCRIPTION: This Python code defines a custom `PhoneField` class inheriting from `django.forms.MultiValueField`. It demonstrates how to configure individual error messages for nested fields (`CharField` instances for country code and phone number) when `require_all_fields` is set to `False`. It sets specific 'incomplete' messages for each part and uses `RegexValidator` for format validation. An optional extension field is also included.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
from django.core.validators import RegexValidator


class PhoneField(MultiValueField):
    def __init__(self, **kwargs):
        # Define one message for all fields.
        error_messages = {
            "incomplete": "Enter a country calling code and a phone number.",
        }
        # Or define a different message for each field.
        fields = (
            CharField(
                error_messages={"incomplete": "Enter a country calling code."},
                validators=[
                    RegexValidator(r"^[0-9]+$", "Enter a valid country calling code."),
                ],
            ),
            CharField(
                error_messages={"incomplete": "Enter a phone number."},
                validators=[RegexValidator(r"^[0-9]+$", "Enter a valid phone number.")],
            ),
            CharField(
                validators=[RegexValidator(r"^[0-9]+$", "Enter a valid extension.")],
                required=False,
            ),
        )
        super().__init__(
            error_messages=error_messages,
            fields=fields,
            require_all_fields=False,
            **kwargs
        )
```

----------------------------------------

TITLE: Updating Django Admin URL Configuration
DESCRIPTION: The AdminSite.root() method for setting up admin URLs will be removed. Include admin.site.urls instead.
SOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
# Old method:
AdminSite.root()

# New method:
admin.site.urls
```

----------------------------------------

TITLE: Configuring Nginx Default Server for Unrecognized Hosts
DESCRIPTION: Nginx configuration to respond with a 444 No Response status for unrecognized hosts, which helps protect against certain CSRF attacks targeting invalid hostnames.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/checklist.txt#2025-04-23_snippet_3

LANGUAGE: nginx
CODE:
```
server {
    listen 80 default_server;
    return 444;
}
```

----------------------------------------

TITLE: Working with GDAL Layer Spatial Properties in Python
DESCRIPTION: Examples showing how to work with spatial properties and filters in a GDAL Layer.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> layer.extent.tuple
(-104.609252, 29.763374, -95.23506, 38.971823)
>>> print(layer.srs)
GEOGCS["GCS_WGS_1984",
    DATUM["WGS_1984",
        SPHEROID["WGS_1984",6378137,298.257223563]],
    PRIMEM["Greenwich",0],
    UNIT["Degree",0.017453292519943295]]
```

----------------------------------------

TITLE: Using Substr Function in Django ORM
DESCRIPTION: Example of extracting a substring from a text field
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_40

LANGUAGE: python
CODE:
```
>>> # Set the alias to the first 5 characters of the name as lowercase
>>> from django.db.models.functions import Lower, Substr
>>> Author.objects.create(name="Margaret Smith")
>>> Author.objects.update(alias=Lower(Substr("name", 1, 5)))
1
>>> print(Author.objects.get(name="Margaret Smith").alias)
marga
```

----------------------------------------

TITLE: Learning Cache Keys with learn_cache_key
DESCRIPTION: Determines which headers to use for cache key generation based on the Vary header in a response. Stores this information to optimize future requests to the same path.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
learn_cache_key(request, response, cache_timeout=None, key_prefix=None, cache=None)
```

----------------------------------------

TITLE: Using Model.refresh_from_db with select_related in Django (Python)
DESCRIPTION: Demonstrates using the `from_queryset` argument with `refresh_from_db` to include `select_related('related_field')` in the reloading query. This pre-fetches the specified related object, ensuring it remains cached on the instance after the refresh, which would otherwise clear cached relations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
obj.refresh_from_db(from_queryset=MyModel.objects.select_related("related_field"))
```

----------------------------------------

TITLE: Creating a Custom iTunes RSS Feed Generator in Django
DESCRIPTION: This snippet shows how to start implementing a custom iTunes RSS feed generator by subclassing Rss201rev2Feed and overriding the root_attributes method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
class iTunesFeed(Rss201rev2Feed):
    def root_attributes(self):
        attrs = super().root_attributes()
        attrs["xmlns:itunes"] = "http://www.itunes.com/dtds/podcast-1.0.dtd"
        return attrs
```

----------------------------------------

TITLE: Filtering QuerySet with RawSQL in __in Filter - Django ORM - Python
DESCRIPTION: Illustrates the use of a RawSQL expression as the right-hand side of a QuerySet filter with an '__in' lookup in Django ORM. Django and proper model setup are required. The 'param' parameter is securely passed to prevent SQL injection, and the filter narrows the queryset to rows whose 'id' appears in the subquery. Outputs a filtered QuerySet based on the result of the subquery.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
>>> queryset.filter(id__in=RawSQL("select id from sometable where col = %s", (param,)))
```

----------------------------------------

TITLE: Combining QuerySets with XOR Operator in Django ORM (Python)
DESCRIPTION: Demonstrates how to use the ^ (XOR) operator between Django QuerySets and with Q objects to match rows where only one of the conditions is true. Requires importing Q from django.db.models. Applicable when needing exclusive filtering between conditions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_64

LANGUAGE: python
CODE:
```
Model.objects.filter(x=1) ^ Model.objects.filter(y=2)
from django.db.models import Q

Model.objects.filter(Q(x=1) ^ Q(y=2))
```

----------------------------------------

TITLE: Retrieving the Current Site in a Django View (Python)
DESCRIPTION: Shows the common pattern of retrieving the current `Site` object within a Django view function using `Site.objects.get_current()`. This approach involves a potential database hit (or cache lookup) within the view. Depends on `django.contrib.sites.models.Site`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.contrib.sites.models import Site


def my_view(request):
    site = Site.objects.get_current()
    ...
```

----------------------------------------

TITLE: Disabling Django Logging Configuration
DESCRIPTION: Example showing how to disable Django's automatic logging configuration and implement manual configuration using Python's logging module.
SOURCE: https://github.com/django/django/blob/main/docs/topics/logging.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
LOGGING_CONFIG = None

import logging.config

logging.config.dictConfig(...)
```

----------------------------------------

TITLE: Setting Up Django Messages Testing with MessagesTestMixin
DESCRIPTION: Shows how to create a test case class that includes the MessagesTestMixin for testing messages in Django applications.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
from django.contrib.messages.test import MessagesTestMixin
from django.test import TestCase


class MsgTestCase(MessagesTestMixin, TestCase):
    pass
```

----------------------------------------

TITLE: Creating HTML Template for Poll Results in Django
DESCRIPTION: This HTML template displays the results of a poll, showing the number of votes for each choice and providing a link to vote again.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial04.txt#2025-04-23_snippet_3

LANGUAGE: html
CODE:
```
<h1>{{ question.question_text }}</h1>

<ul>
{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>
{% endfor %}
</ul>

<a href="{% url 'polls:detail' question.id %}">Vote again?</a>
```

----------------------------------------

TITLE: Passing Extra Options to View Functions in Django URLconf
DESCRIPTION: This example shows how to pass extra options to view functions in Django's URLconf. It demonstrates the use of an optional third argument in the path function to provide additional keyword arguments to the view.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
from django.urls import path
from . import views

urlpatterns = [
    path("blog/<int:year>/", views.year_archive, {"foo": "bar"}),
]
```

----------------------------------------

TITLE: Counting Formset Errors with total_error_count
DESCRIPTION: Demonstrates using the total_error_count method to determine how many validation errors exist across all forms in the formset, which can differ from the length of the errors list.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
>>> # Using the previous example
>>> formset.errors
[{}, {'pub_date': ['This field is required.']}]
>>> len(formset.errors)
2
>>> formset.total_error_count()
1
```

----------------------------------------

TITLE: Setting Custom Exception Reporter Filter in Django View
DESCRIPTION: Demonstrates how to set a custom exception reporter filter for a specific view. This provides granular control over which filter to use within any given view.
SOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
def my_view(request):
    if request.user.is_authenticated:
        request.exception_reporter_filter = CustomExceptionReporterFilter()
    ...
```

----------------------------------------

TITLE: Handling Streaming Response Content in Django Middleware
DESCRIPTION: Shows how to handle both streaming and non-streaming responses in Django middleware by checking the response type and wrapping or altering content accordingly.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
if response.streaming:
    response.streaming_content = wrap_streaming_content(response.streaming_content)
else:
    response.content = alter_content(response.content)
```

----------------------------------------

TITLE: Inheriting Meta Class in Django Abstract Models
DESCRIPTION: Illustrates an abstract base class (`CommonInfo`) with a defined `Meta` class. Child classes can inherit or extend this Meta class, as described in the surrounding text.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_36

LANGUAGE: Python
CODE:
```
from django.db import models


class CommonInfo(models.Model):
    # ...
    class Meta:
        abstract = True
```

----------------------------------------

TITLE: Correctly Escaping Sequence Elements with Auto-escaping Off
DESCRIPTION: Shows the proper method to escape each element in a sequence (`my_list`) when auto-escaping is disabled. The `escapeseq` filter is applied first to ensure individual elements are escaped before the `join` filter concatenates them.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_2

LANGUAGE: html+django
CODE:
```
{% autoescape off %}
    {{ my_list|escapeseq|join:", " }}
{% endautoescape %}
```

----------------------------------------

TITLE: Customizing Empty Value Display in Django Admin
DESCRIPTION: Example showing how to customize empty value display for the entire admin site, replacing the default dash with a custom string.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
from django.contrib import admin

admin.site.empty_value_display = "(None)"
```

----------------------------------------

TITLE: Configuring Cache-Only Backend for Sessions
DESCRIPTION: Setting the SESSION_ENGINE to use cache-only session storage which is faster but less persistent than database storage, as sessions can be lost if cache is cleared.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
"django.contrib.sessions.backends.cache"
```

----------------------------------------

TITLE: Skipping Django tests based on database features with skipUnlessDBFeature
DESCRIPTION: Example showing how to skip a test if a specific database feature is not supported using the skipUnlessDBFeature decorator. This test will only run if the database supports transactions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_54

LANGUAGE: python
CODE:
```
class MyTests(TestCase):
    @skipUnlessDBFeature("supports_transactions")
    def test_transaction_behavior(self):
        # ... conditional test code
        pass
```

----------------------------------------

TITLE: Using sensitive_variables Decorator to Hide Sensitive Information
DESCRIPTION: This snippet demonstrates the use of the sensitive_variables decorator to prevent sensitive local variables from being included in error reports.
SOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.views.decorators.debug import sensitive_variables


@sensitive_variables("user", "pw", "cc")
def process_info(user):
    pw = user.pass_word
    cc = user.credit_card_number
    name = user.name
    ...
```

----------------------------------------

TITLE: Using urlizetrunc Filter in Django Templates
DESCRIPTION: Shows how to use the urlizetrunc filter, which converts URLs and email addresses into clickable links and truncates URLs longer than the specified character limit.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_101

LANGUAGE: html+django
CODE:
```
{{ value|urlizetrunc:15 }}
```

----------------------------------------

TITLE: Using SearchQuery with Different Search Types in Django
DESCRIPTION: Shows various ways to use SearchQuery with different search types, including 'plain', 'phrase', 'raw', and 'websearch'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> from django.contrib.postgres.search import SearchQuery
>>> SearchQuery("red tomato")  # two keywords
>>> SearchQuery("tomato red")  # same results as above
>>> SearchQuery("red tomato", search_type="phrase")  # a phrase
>>> SearchQuery("tomato red", search_type="phrase")  # a different phrase
>>> SearchQuery("'tomato' & ('red' | 'green')", search_type="raw")  # boolean operators
>>> SearchQuery(
...     "'tomato' ('red' OR 'green')", search_type="websearch"
... )  # websearch operators
```

----------------------------------------

TITLE: Using admin_urlname Filter in Django Templates
DESCRIPTION: Demonstrates the use of the admin_urlname filter in Django templates to easily reverse admin URLs for add and delete actions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_87

LANGUAGE: html+django
CODE:
```
{% load admin_urls %}
<a href="{% url opts|admin_urlname:'add' %}">Add user</a>
<a href="{% url opts|admin_urlname:'delete' user.pk %}">Delete this user</a>
```

----------------------------------------

TITLE: Modifying Middleware Settings in Django Tests
DESCRIPTION: Demonstrates how to modify middleware settings in tests using the modify_settings context manager to append, prepend, or remove middleware classes.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_34

LANGUAGE: python
CODE:
```
from django.test import TestCase


class MiddlewareTestCase(TestCase):
    def test_cache_middleware(self):
        with self.modify_settings(
            MIDDLEWARE={
                "append": "django.middleware.cache.FetchFromCacheMiddleware",
                "prepend": "django.middleware.cache.UpdateCacheMiddleware",
                "remove": [
                    "django.contrib.sessions.middleware.SessionMiddleware",
                    "django.contrib.auth.middleware.AuthenticationMiddleware",
                    "django.contrib.messages.middleware.MessageMiddleware",
                ],
            }
        ):
            response = self.client.get("/")
            # ...
```

----------------------------------------

TITLE: Setting SMTP Host Password for Email Authentication in Django
DESCRIPTION: Specifies the password (empty string by default) for SMTP authentication, used in conjunction with EMAIL_HOST_USER. Django will not attempt authentication if either setting is empty.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_27

LANGUAGE: python
CODE:
```
EMAIL_HOST_PASSWORD = ''
```

----------------------------------------

TITLE: Configuring uWSGI for Django using INI file
DESCRIPTION: Example INI configuration file for uWSGI with Django-specific settings. This configuration includes project path, WSGI module, process management, and logging options in a reusable format.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/uwsgi.txt#2025-04-23_snippet_2

LANGUAGE: ini
CODE:
```
[uwsgi]
chdir=/path/to/your/project
module=mysite.wsgi:application
master=True
pidfile=/tmp/project-master.pid
vacuum=True
max-requests=5000
daemonize=/var/log/uwsgi/yourproject.log
```

----------------------------------------

TITLE: Configuring ArchiveIndexView URL Pattern
DESCRIPTION: URL configuration for the article archive index view using Django's path routing.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.urls import path
from django.views.generic.dates import ArchiveIndexView

from myapp.models import Article

urlpatterns = [
    path(
        "archive/",
        ArchiveIndexView.as_view(model=Article, date_field="pub_date"),
        name="article_archive",
    ),
]
```

----------------------------------------

TITLE: Customizing BoundField Rendering in Forms - Django - Python
DESCRIPTION: Shows how to override the default BoundField behavior for form fields on both the class and form levels. A custom BoundField subclass modifies generated CSS classes, and a form specifies this bound_field_class to use the custom logic. Requires Django's forms module and familiarity with overriding widget and form rendering. Inputs are typical form fields; outputs are adjusted HTML with enhanced classes for styling or accessibility; ensure the Django version being used supports these attributes.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.2.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
from django import forms


class CustomBoundField(forms.BoundField):

    custom_class = "custom"

    def css_classes(self, extra_classes=None):
        result = super().css_classes(extra_classes)
        if self.custom_class not in result:
            result += f" {self.custom_class}"
        return result.strip()


class CustomForm(forms.Form):
    bound_field_class = CustomBoundField

    name = forms.CharField(
        label="Your Name",
        max_length=100,
        required=False,
        widget=forms.TextInput(attrs={"class": "name-input-class"}),
    )
    email = forms.EmailField(label="Your Email")
```

----------------------------------------

TITLE: Loading Django Fixtures from Stdin (Bash)
DESCRIPTION: Illustrates loading database fixtures into Django from standard input (`-`) using the `loaddata` command. The `--format` option is mandatory when loading from stdin to specify the data format (here, JSON).
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_14

LANGUAGE: bash
CODE:
```
django-admin loaddata --format=json -
```

----------------------------------------

TITLE: Implementing get_prep_value for Custom Django Field
DESCRIPTION: This snippet shows how to implement the get_prep_value method for a custom HandField, converting a Python object back to a database-friendly format.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_14

LANGUAGE: Python
CODE:
```
class HandField(models.Field):
    # ...

    def get_prep_value(self, value):
        return "".join(
            ["".join(l) for l in (value.north, value.east, value.south, value.west)]
        )
```

----------------------------------------

TITLE: Adding HTTP Cache Headers with patch_response_headers
DESCRIPTION: Adds Expires and Cache-Control headers to an HttpResponse object if they don't already exist. The cache_timeout parameter specifies seconds, defaulting to CACHE_MIDDLEWARE_SECONDS setting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
patch_response_headers(response, cache_timeout=None)
```

----------------------------------------

TITLE: Updating URL Patterns in Django for New Include Syntax
DESCRIPTION: Example of updating URL patterns to use the new include() syntax in Django 1.9. The new syntax replaces the 3-tuple argument with separate namespace and app_name arguments.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
polls_patterns = [
    url(...),
]

urlpatterns = [
    url(r"^polls/", include((polls_patterns, "polls", "author-polls"))),
]
```

LANGUAGE: python
CODE:
```
polls_patterns = (
    [
        url(...),
    ],
    "polls",
)  # 'polls' is the app_name

urlpatterns = [
    url(r"^polls/", include(polls_patterns, namespace="author-polls")),
]
```

----------------------------------------

TITLE: Creating Custom Format Definition in Python
DESCRIPTION: Example of a custom format definition for the English locale that changes the thousand separator to a non-breaking space instead of the default comma. This demonstrates how to customize locale-specific formatting.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/formatting.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
THOUSAND_SEPARATOR = "\xa0"
```

----------------------------------------

TITLE: Filtering by Year - SQL Equivalent
DESCRIPTION: Provides standard SQL translation for Django '__year' queries by bounding with BETWEEN or comparison operators. Inputs are string representations of date boundaries for the start or end of the year; output includes all matching rows. Syntax may vary across databases; verify with your backend's SQL dialect.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_105

LANGUAGE: sql
CODE:
```
SELECT ... WHERE pub_date BETWEEN '2005-01-01' AND '2005-12-31';
SELECT ... WHERE pub_date >= '2005-01-01';
```

----------------------------------------

TITLE: Using Extract and Trunc Functions in Django QuerySets
DESCRIPTION: Demonstrates the new Extract and Trunc functions for querying datetime components. Extract allows extracting components as integers, while Trunc enables truncating dates/datetimes to significant components.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
from django.db.models.functions import Extract, Trunc
from django.db.models import Count

# Extract year from date
Event.objects.annotate(year=Extract('date', 'year')).values('year').annotate(count=Count('id'))

# Truncate to day for daily sales
Sale.objects.annotate(day=Trunc('timestamp', 'day')).values('day').annotate(total=Sum('amount'))
```

----------------------------------------

TITLE: Incrementing a Field Value Using Python Assignment - Django ORM - Python
DESCRIPTION: This snippet retrieves a Product model instance, increments its number_sold field by one in Python, and saves the result. Dependencies include a Product model and the Django ORM environment. Inputs: product name as the lookup key; outputs: the number_sold field is increased by one in the database. This approach is simple but susceptible to race conditions if multiple processes update the same record concurrently.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
>>> product = Product.objects.get(name="Venezuelan Beaver Cheese")
>>> product.number_sold += 1
>>> product.save()
```

----------------------------------------

TITLE: Using MD5 Hash Function in Django ORM
DESCRIPTION: Shows how to generate MD5 hash of a text field using Django's MD5 database function
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import MD5
>>> Author.objects.create(name="Margaret Smith")
>>> author = Author.objects.annotate(name_md5=MD5("name")).get()
>>> print(author.name_md5)
749fb689816b2db85f5b169c2055b247
```

----------------------------------------

TITLE: Configuring Sitemap Index View in Django URLs
DESCRIPTION: This Python snippet demonstrates setting up URL patterns in `urls.py` to generate a sitemap index file using Django's sitemap framework. It defines two paths: one for the index file (`sitemap.xml`) using `views.index`, and another pattern (`sitemap-<section>.xml`) for individual sitemap files using `views.sitemap` which captures the section name. Both views are passed the same `sitemaps` dictionary, which contains the definitions for the individual sitemaps.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.contrib.sitemaps import views

urlpatterns = [
    path(
        "sitemap.xml",
        views.index,
        {"sitemaps": sitemaps},
        name="django.contrib.sitemaps.views.index",
    ),
    path(
        "sitemap-<section>.xml",
        views.sitemap,
        {"sitemaps": sitemaps},
        name="django.contrib.sitemaps.views.sitemap",
    ),
]
```

----------------------------------------

TITLE: Storing querystring Output in a Variable in Django Templates
DESCRIPTION: This snippet shows how to store the output of the querystring tag in a template variable using the 'as' keyword, which is useful when multiple links to the same page are needed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_33

LANGUAGE: html+django
CODE:
```
{% querystring page=page.next_page_number as next_page %}
```

----------------------------------------

TITLE: Customizing Empty Value Display for a ModelAdmin
DESCRIPTION: Example showing how to set a custom empty value display at the ModelAdmin level, affecting all fields in that admin view.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
class PersonAdmin(admin.ModelAdmin):
    empty_value_display = "unknown"
```

----------------------------------------

TITLE: Testing with Multiple Host Names in Django
DESCRIPTION: This snippet shows how to test a Django application that uses multiple host names. It demonstrates using the @override_settings decorator to modify the ALLOWED_HOSTS setting for a specific test.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.test import TestCase, override_settings


class MultiDomainTestCase(TestCase):
    @override_settings(ALLOWED_HOSTS=["otherserver"])
    def test_other_domain(self):
        response = self.client.get("http://otherserver/foo/bar/")
```

----------------------------------------

TITLE: Defining MaxLengthValidator in Django
DESCRIPTION: Validator class that checks if the length of a value exceeds a maximum limit. Raises ValidationError if the length is greater than limit_value.
SOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
MaxLengthValidator(limit_value, message=None)
```

----------------------------------------

TITLE: Configuring Multiple AdminSites in URLconf (Python)
DESCRIPTION: This snippet shows how to configure multiple AdminSite instances with different URLs in the project's URLconf.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_82

LANGUAGE: Python
CODE:
```
# urls.py
from django.urls import path
from myproject.admin import advanced_site, basic_site

urlpatterns = [
    path("basic-admin/", basic_site.urls),
    path("advanced-admin/", advanced_site.urls),
]
```

----------------------------------------

TITLE: Decorating the dispatch Method in a Class-Based View (Python/Django)
DESCRIPTION: This code shows how to apply a decorator to every instance of a class-based view by decorating the dispatch method. It uses method_decorator to transform a function decorator into a method decorator applied to the dispatch method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.views.generic import TemplateView


class ProtectedView(TemplateView):
    template_name = "secret.html"

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
```

----------------------------------------

TITLE: Regular Expression URL Pattern Configuration
DESCRIPTION: URLconf example using regular expressions with re_path() for more complex URL pattern matching. Shows how to capture named groups for year, month, and slug values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.urls import path, re_path

from . import views

urlpatterns = [
    path("articles/2003/", views.special_case_2003),
    re_path(r"^articles/(?P<year>[0-9]{4})/$", views.year_archive),
    re_path(r"^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$", views.month_archive),
    re_path(
        r"^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<slug>[\w-]+)/$",
        views.article_detail,
    ),
]
```

----------------------------------------

TITLE: Creating a Custom PBKDF2 Hasher with Increased Iterations (Python)
DESCRIPTION: Defines a custom Django password hasher by subclassing `PBKDF2PasswordHasher`. It overrides the `iterations` attribute, multiplying the default value by 100 to increase the work factor and enhance security against brute-force attacks.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.contrib.auth.hashers import PBKDF2PasswordHasher


class MyPBKDF2PasswordHasher(PBKDF2PasswordHasher):
    """
    A subclass of PBKDF2PasswordHasher that uses 100 times more iterations.
    """

    iterations = PBKDF2PasswordHasher.iterations * 100
```

----------------------------------------

TITLE: Implementing User Authentication Check Method in Django
DESCRIPTION: Method that determines if a user is allowed to authenticate. Returns False for users with is_active=False, while allowing custom user models without an is_active field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
def user_can_authenticate():
    # Returns whether the user is allowed to authenticate
    # Returns False for users with is_active=False
    pass
```

----------------------------------------

TITLE: Generating Query Strings for URLs - querystring Tag in HTML+Django Template - html+django
DESCRIPTION: Shows the use of the 'querystring' tag to dynamically construct or modify query strings for URLs, based on request parameters and additional assignments. Built-in to Django, requires context access to 'request.GET' or provided mappings. Input parameters are mappings and assignments; output is a correctly encoded query string for use in links.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_26

LANGUAGE: html+django
CODE:
```
{% querystring %}
```

LANGUAGE: html+django
CODE:
```
{% querystring size="M" %}
```

----------------------------------------

TITLE: Using a Complex Simple Block Tag in Django Templates
DESCRIPTION: Demonstrates how to use the custom 'msgbox' block tag in a Django template, showing different message levels and content.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_14

LANGUAGE: html
CODE:
```
{% extends "base.html" %}

{% load testapptags %}

{% block content %}

  {% msgbox level="error" %}
    Please fix all errors. Further documentation can be found at
    <a href="http://example.com">Docs</a>.
  {% endmsgbox %}

  {% msgbox level="info" %}
    More information at: <a href="http://othersite.com">Other Site</a>/
  {% endmsgbox %}

{% endblock %}
```

----------------------------------------

TITLE: Using ComboField for Combined Validation in Django Forms (Python)
DESCRIPTION: This Python console session demonstrates how to use `django.forms.ComboField` to apply multiple validation rules sequentially. It initializes a `ComboField` with a `CharField` (max length 20) and an `EmailField`. The `clean` method first successfully validates a valid email within the length limit, returning the cleaned string. It then shows a `ValidationError` being raised when the input string exceeds the `CharField`'s maximum length, even if it's a valid email format. Requires `django.forms`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_17

LANGUAGE: pycon
CODE:
```
>>> from django.forms import ComboField
>>> f = ComboField(fields=[CharField(max_length=20), EmailField()])
>>> f.clean("test@example.com")
'test@example.com'
>>> f.clean("longemailaddress@example.com")
Traceback (most recent call last):
...
ValidationError: ['Ensure this value has at most 20 characters (it has 28).']
```

----------------------------------------

TITLE: Django Language Code Setting Reference
DESCRIPTION: Reference to the LANGUAGE_CODE setting in Django configuration that now allows sublanguages when base language is available.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.3.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
LANGUAGE_CODE
```

----------------------------------------

TITLE: Custom Path Converter Implementation
DESCRIPTION: Example of creating and registering a custom path converter for handling four-digit year values in URLs. Includes regex pattern matching and value conversion methods.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class FourDigitYearConverter:
    regex = "[0-9]{4}"

    def to_python(self, value):
        return int(value)

    def to_url(self, value):
        return "%04d" % value
```

LANGUAGE: python
CODE:
```
from django.urls import path, register_converter

from . import converters, views

register_converter(converters.FourDigitYearConverter, "yyyy")

urlpatterns = [
    path("articles/2003/", views.special_case_2003),
    path("articles/<yyyy:year>/", views.year_archive),
    ...,
]
```

----------------------------------------

TITLE: Setting Up Django for Standalone Usage
DESCRIPTION: Demonstrates the complete process of configuring Django settings and calling django.setup() for standalone Django usage in a Python script.
SOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
import django
from django.conf import settings
from myapp import myapp_defaults

settings.configure(default_settings=myapp_defaults, DEBUG=True)
django.setup()

# Now this script or any imported module can use any part of Django it needs.
from myapp import models
```

----------------------------------------

TITLE: Overriding BoundField Class at Project Level in Django
DESCRIPTION: This snippet shows how to override the BoundField class at the project level by defining a custom FORM_RENDERER setting. It includes code for both the renderer and the settings file.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_43

LANGUAGE: python
CODE:
```
# mysite/renderers.py
from django.forms.renderers import DjangoTemplates

from .forms import CustomBoundField


class CustomRenderer(DjangoTemplates):
    bound_field_class = CustomBoundField
```

LANGUAGE: python
CODE:
```
# settings.py
FORM_RENDERER = "mysite.renderers.CustomRenderer"
```

----------------------------------------

TITLE: Automating Model and Mapping Generation with ogrinspect in Django Console
DESCRIPTION: Shows the command-line usage of the ogrinspect management command for introspecting vector data sources and generating corresponding Django model code and a mapping dictionary. It describes importing a shapefile, specifying spatial reference (SRID), geometry field type (MultiPolygon), and outputting both the model class and LayerMapping dictionary for copy-paste use. Requirements: Django (with GIS support), GDAL data source, and command-line access. Outputs Django model code to standard output for fast application scaffolding.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
$ python manage.py ogrinspect world/data/TM_WORLD_BORDERS-0.3.shp WorldBorder \
    --srid=4326 --mapping --multi
```

LANGUAGE: python
CODE:
```
# This is an auto-generated Django model module created by ogrinspect.
from django.contrib.gis.db import models


class WorldBorder(models.Model):
    fips = models.CharField(max_length=2)
    iso2 = models.CharField(max_length=2)
    iso3 = models.CharField(max_length=3)
    un = models.IntegerField()
    name = models.CharField(max_length=50)
    area = models.IntegerField()
    pop2005 = models.IntegerField()
    region = models.IntegerField()
    subregion = models.IntegerField()
    lon = models.FloatField()
    lat = models.FloatField()
    geom = models.MultiPolygonField(srid=4326)


# Auto-generated `LayerMapping` dictionary for WorldBorder model
worldborders_mapping = {
    "fips": "FIPS",
    "iso2": "ISO2",
    "iso3": "ISO3",
    "un": "UN",
    "name": "NAME",
    "area": "AREA",
    "pop2005": "POP2005",
    "region": "REGION",
    "subregion": "SUBREGION",
    "lon": "LON",
    "lat": "LAT",
    "geom": "MULTIPOLYGON",
}
```

----------------------------------------

TITLE: Using format_html_join for Multiple HTML Formatting in Python
DESCRIPTION: Shows how to use format_html_join to format and join multiple HTML fragments safely. It can handle both positional and keyword arguments through an iterator.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
format_html_join(
    "\n",
    "<li>{} {}</li>",
    ((u.first_name, u.last_name) for u in users),
)
```

LANGUAGE: python
CODE:
```
format_html_join(
    "\n",
    '<li data-id="{id}">{id} {title}</li>',
    ({"id": b.id, "title": b.title} for b in books),
)
```

----------------------------------------

TITLE: Setting TIME_ZONE using tzlocal in Python
DESCRIPTION: Example of how to automatically detect and set the timezone based on the system timezone using the tzlocal library. This can be used as an alternative to the removed support for settings.TIME_ZONE = None.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from tzlocal import get_localzone

TIME_ZONE = get_localzone().zone
```

----------------------------------------

TITLE: Using intword Filter in Django Template
DESCRIPTION: Demonstrates the intword filter, which converts large numbers to friendly text representations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_3

LANGUAGE: django
CODE:
```
{{ 1000000|intword }} becomes 1.0 million.
{{ 1200000|intword }} becomes 1.2 million.
{{ 1200000000|intword }} becomes 1.2 billion.
{{ -1200000000|intword }} becomes -1.2 billion.
```

----------------------------------------

TITLE: Applying the `condition` Decorator to a Django View in Python
DESCRIPTION: Demonstrates applying the `@condition` decorator from `django.views.decorators.http` to a Django view function (`front_page`). It specifies the `latest_entry` function as the `last_modified_func` to enable conditional processing based on the resource's last modification time, potentially returning a 304 Not Modified response.
SOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.views.decorators.http import condition


@condition(last_modified_func=latest_entry)
def front_page(request, blog_id): ...
```

----------------------------------------

TITLE: Using Annotated Expression in values() with Related Lookups Python
DESCRIPTION: An alternative syntax to achieve the same result as the previous example. Uses a keyword argument in values() with an explicit annotation expression referencing a related field and applying a transform before the aggregation is performed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_26

LANGUAGE: Python
CODE:
```
>>> Blog.objects.values(entry__authors__name__lower=Lower("entry__authors__name")).annotate(
...     entries=Count("entry")
... )
```

----------------------------------------

TITLE: Using Custom Template Tags with Multiple Arguments in Django Templates
DESCRIPTION: Example showing how to call a custom template tag with multiple positional and keyword arguments in a Django template.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_6

LANGUAGE: html
CODE:
```
{% my_tag 123 "abcd" book.title warning=message|lower profile=user.profile %}
```

----------------------------------------

TITLE: Renaming Django Manager Python
DESCRIPTION: Shows how to define a custom name (`people`) for the default Django Manager instance on a model, overriding the default `objects` name. Requires `django.db.models`. Allows accessing model objects via `Person.people` instead of `Person.objects`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models


class Person(models.Model):
    # ...
    people = models.Manager()
```

----------------------------------------

TITLE: Attaching Request User to Formset Models in Django Admin
DESCRIPTION: Implementation of save_formset method to associate the current user with each model instance in a formset before saving, including proper handling of deleted objects and many-to-many relationships.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_41

LANGUAGE: python
CODE:
```
class ArticleAdmin(admin.ModelAdmin):
    def save_formset(self, request, form, formset, change):
        instances = formset.save(commit=False)
        for obj in formset.deleted_objects:
            obj.delete()
        for instance in instances:
            instance.user = request.user
            instance.save()
        formset.save_m2m()
```

----------------------------------------

TITLE: Using QuerySet Iterator with Custom Chunk Size in Django
DESCRIPTION: This code demonstrates how to use the QuerySet iterator method with a custom chunk size to control the number of rows fetched at a time when streaming large result sets from the database.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_13

LANGUAGE: Python
CODE:
```
Book.objects.iterator(chunk_size=100)
```

----------------------------------------

TITLE: Using Sqrt Function in Django Models
DESCRIPTION: Demonstrates calculating square roots and registering Sqrt as a transform
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Sqrt
>>> Vector.objects.create(x=4.0, y=12.0)
>>> vector = Vector.objects.annotate(x_sqrt=Sqrt("x"), y_sqrt=Sqrt("y")).get()
>>> vector.x_sqrt, vector.y_sqrt
(2.0, 3.46410)
```

LANGUAGE: python
CODE:
```
>>> from django.db.models import FloatField
>>> from django.db.models.functions import Sqrt
>>> FloatField.register_lookup(Sqrt)
>>> # Get vectors whose sqrt() is less than 5
>>> vectors = Vector.objects.filter(x__sqrt__lt=5, y__sqrt__lt=5)
```

----------------------------------------

TITLE: Importing Shapefile Data with LayerMapping in GeoDjango Python Script
DESCRIPTION: Provides a Python script template for setting up a data import from a shapefile using GeoDjango's LayerMapping utility. The script defines a field mapping between the WorldBorder model and the shapefile, constructs an absolute path for the shapefile, and implements a run() function to perform the data import while optionally printing progress. Dependencies include Django, GeoDjango, the world.models.WorldBorder model, and GDAL. The mapping object and the transform parameter avoid unnecessary coordinate transformations. Inputs include a shapefile in WGS84; the output is population of the WorldBorder model in the database.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from pathlib import Path
from django.contrib.gis.utils import LayerMapping
from .models import WorldBorder

world_mapping = {
    "fips": "FIPS",
    "iso2": "ISO2",
    "iso3": "ISO3",
    "un": "UN",
    "name": "NAME",
    "area": "AREA",
    "pop2005": "POP2005",
    "region": "REGION",
    "subregion": "SUBREGION",
    "lon": "LON",
    "lat": "LAT",
    "mpoly": "MULTIPOLYGON",
}

world_shp = Path(__file__).resolve().parent / "data" / "TM_WORLD_BORDERS-0.3.shp"


def run(verbose=True):
    lm = LayerMapping(WorldBorder, world_shp, world_mapping, transform=False)
    lm.save(strict=True, verbose=verbose)
```

----------------------------------------

TITLE: Using truncatewords_html Filter in Django Templates
DESCRIPTION: Demonstrates the truncatewords_html filter, which truncates a string after a certain number of words while being aware of HTML tags. It closes any open tags after truncation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_96

LANGUAGE: html+django
CODE:
```
{{ value|truncatewords_html:2 }}
```

----------------------------------------

TITLE: Customizing Django's test client
DESCRIPTION: This code shows how to customize Django's test client by subclassing Client and using the client_class attribute in a TestCase.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_29

LANGUAGE: Python
CODE:
```
from django.test import Client, TestCase


class MyTestClient(Client):
    # Specialized methods for your environment
    ...


class MyTest(TestCase):
    client_class = MyTestClient

    def test_my_stuff(self):
        # Here self.client is an instance of MyTestClient...
        call_some_test_code()
```

----------------------------------------

TITLE: Adding PostGIS Extension using Django Migration in Python
DESCRIPTION: Django migration code to add the PostGIS extension to a database. This is an alternative method to enable PostGIS if the database user doesn't have superuser privileges.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/postgis.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib.postgres.operations import CreateExtension
from django.db import migrations


class Migration(migrations.Migration):
    operations = [CreateExtension("postgis"), ...]
```

----------------------------------------

TITLE: Aggregating across Django Generic Relations (Python)
DESCRIPTION: Demonstrates how to perform database aggregation (specifically, counting related objects) across a GenericRelation using Django's ORM. This example counts the total number of 'tags' (representing TaggedItem objects linked via a GenericRelation) associated with all Bookmark objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_5

LANGUAGE: pycon
CODE:
```
>>> Bookmark.objects.aggregate(Count("tags"))
{'tags__count': 3}
```

----------------------------------------

TITLE: Using LazyObject for Storage in Django Tests
DESCRIPTION: Example of using LazyObject to delay storage evaluation, which allows for overriding storage settings in tests with override_settings. This approach prevents storage from being instantiated during model class loading.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.core.files.storage import storages
from django.utils.functional import LazyObject


class OtherStorage(LazyObject):
    def _setup(self):
        self._wrapped = storages["mystorage"]


my_storage = OtherStorage()


class MyModel(models.Model):
    upload = models.FileField(storage=my_storage)
```

----------------------------------------

TITLE: Accessing and Creating Storage Backends with Django storages API in Python
DESCRIPTION: This code snippet demonstrates how to access the dictionary of available storage backend definitions and how to instantiate a custom storage backend using Django's storages API. The snippet relies on the django.core.files.storage module and presumes the project has a properly configured STORAGES setting. Inputs include a storage alias or a backend dictionary, and the output is a storage instance suitable for storing files in tests or other scenarios. It is intended for developers who need dynamic storage instantiation and examination, especially in third-party or testing contexts.
SOURCE: https://github.com/django/django/blob/main/docs/ref/files/storage.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.core.files.storage import storages
>>> storages.backends
{'default': {'BACKEND': 'django.core.files.storage.FileSystemStorage'},
 'staticfiles': {'BACKEND': 'django.contrib.staticfiles.storage.StaticFilesStorage'},
 'custom': {'BACKEND': 'package.storage.CustomStorage'}}
>>> storage_instance = storages.create_storage({"BACKEND": "package.storage.CustomStorage"})
```

----------------------------------------

TITLE: Adding Custom Fields to Django Formset
DESCRIPTION: Demonstrates how to add custom fields to a Django formset by overriding the add_fields method of the formset base class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_23

LANGUAGE: pycon
CODE:
```
>>> from django.forms import BaseFormSet
>>> from django.forms import formset_factory
>>> from myapp.forms import ArticleForm
>>> class BaseArticleFormSet(BaseFormSet):
...     def add_fields(self, form, index):
...         super().add_fields(form, index)
```

----------------------------------------

TITLE: Using QuerySet difference method in Django
DESCRIPTION: Shows how to use the EXCEPT SQL operator through Django's QuerySet.difference() method to keep only elements present in one QuerySet but not in others.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_32

LANGUAGE: python
CODE:
```
>>> qs1.difference(qs2, qs3)
```

----------------------------------------

TITLE: Configuring Django Settings for Number Formatting
DESCRIPTION: This snippet shows Django settings for configuring number formatting when USE_L10N is off. It demonstrates how to set decimal and thousand separators.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_12

LANGUAGE: Python
CODE:
```
USE_L10N = False
USE_THOUSAND_SEPARATOR = True
DECIMAL_SEPARATOR = ","
THOUSAND_SEPARATOR = "."
```

----------------------------------------

TITLE: Registering Custom Transform with Django Field Types
DESCRIPTION: Demonstrates how to register the UpperCase transform with CharField and TextField, allowing case-insensitive queries on these field types.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.db.models import CharField, TextField

CharField.register_lookup(UpperCase)
TextField.register_lookup(UpperCase)
```

----------------------------------------

TITLE: Running a Single Test Method
DESCRIPTION: This command executes a specific test method from a test class in Django's test suite, in this case the test_lazy_objects method from the TranslationTests class in the i18n module.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_8

LANGUAGE: console
CODE:
```
$ ./runtests.py --settings=path.to.settings i18n.tests.TranslationTests.test_lazy_objects
```

----------------------------------------

TITLE: Using LayerMapping to Import Spatial Data
DESCRIPTION: Demonstration of using LayerMapping to import features from a shapefile into a GeoDjango model, including field mapping configuration and execution of the import process.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/layermapping.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.utils import LayerMapping
>>> from geoapp.models import TestGeo
>>> mapping = {
...     "name": "str",  # The 'name' model field maps to the 'str' layer field.
...     "poly": "POLYGON",  # For geometry fields use OGC name.
... }  # The mapping is a dictionary
>>> lm = LayerMapping(TestGeo, "test_poly.shp", mapping)
>>> lm.save(verbose=True)  # Save the layermap, imports the data.
Saved: Name: 1
Saved: Name: 2
Saved: Name: 3
```

----------------------------------------

TITLE: Configuring CallbackFilter in Django Logging Settings
DESCRIPTION: This Django `LOGGING` configuration snippet shows how to define and apply a `CallbackFilter`. It defines a filter named `skip_unreadable_posts` which uses the `CallbackFilter` class and passes the previously defined `skip_unreadable_post` function as the callback. This filter is then applied to the `mail_admins` handler, preventing `UnreadablePostError` exceptions from triggering admin emails.
SOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
LOGGING = {
    # ...
    "filters": {
        "skip_unreadable_posts": {
            "()": "django.utils.log.CallbackFilter",
            "callback": skip_unreadable_post,
        },
    },
    "handlers": {
        "mail_admins": {
            "level": "ERROR",
            "filters": ["skip_unreadable_posts"],
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    # ...
}
```

----------------------------------------

TITLE: Using widthratio Tag in Django Templates
DESCRIPTION: Shows how to use the widthratio tag for calculating proportional values in templates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_49

LANGUAGE: html+django
CODE:
```
<img src="bar.png" alt="Bar"
     height="10" width="{% widthratio this_value max_value max_width %}">
```

LANGUAGE: html+django
CODE:
```
{% widthratio this_value max_value max_width as width %}
{% blocktranslate %}The width is: {{ width }}{% endblocktranslate %}
```

----------------------------------------

TITLE: Creating Related Objects in a Transaction with Django
DESCRIPTION: This snippet demonstrates creating related objects within a transaction atomic block in Django. It shows how foreign key constraints may need to be deferred to allow creation of objects with circular dependencies.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_10

LANGUAGE: Python
CODE:
```
from django.db import transaction

with transaction.atomic():
    Book.objects.create(author_id=1)
    Author.objects.create(id=1)
```

----------------------------------------

TITLE: Using the Silent Keyword with Named Cycle Tag (Django)
DESCRIPTION: Demonstrates the `silent` keyword used with a named `{% cycle %}` tag (`{% cycle ... as rowcolors silent %}`). This declares the cycle and makes its current value available via the `rowcolors` variable (e.g., for use in an included subtemplate) but prevents the initial tag usage from rendering the first value ('row1') directly.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_10

LANGUAGE: html+django
CODE:
```
{% for obj in some_list %}
    {% cycle 'row1' 'row2' as rowcolors silent %}
    <tr class="{{ rowcolors }}">{% include "subtemplate.html" %}</tr>
{% endfor %}
```

----------------------------------------

TITLE: Testing for Multipart Forms in Django
DESCRIPTION: This snippet shows how to use the is_multipart() method to check if a form requires multipart encoding. It includes a Python example and a Django template example.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_45

LANGUAGE: python
CODE:
```
>>> f = ContactFormWithMugshot()
>>> f.is_multipart()
True
```

LANGUAGE: html
CODE:
```
{% if form.is_multipart %}
    <form enctype="multipart/form-data" method="post" action="/foo/">
{% else %}
    <form method="post" action="/foo/">
{% endif %}
{{ form }}
</form>
```

----------------------------------------

TITLE: Implementing a BlogSitemap Class (Python)
DESCRIPTION: This example demonstrates how to create a Sitemap subclass for a blog system. It defines methods for items, lastmod, and sets changefreq and priority attributes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib.sitemaps import Sitemap
from blog.models import Entry


class BlogSitemap(Sitemap):
    changefreq = "never"
    priority = 0.5

    def items(self):
        return Entry.objects.filter(is_draft=False)

    def lastmod(self, obj):
        return obj.pub_date
```

----------------------------------------

TITLE: Implementing Separate Detail and Form Views in Django
DESCRIPTION: Alternative implementation using separate DetailView and FormView classes with shared template and model.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django import forms
from django.views.generic import DetailView
from books.models import Author


class AuthorInterestForm(forms.Form):
    message = forms.CharField()


class AuthorDetailView(DetailView):
    model = Author

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["form"] = AuthorInterestForm()
        return context
```

----------------------------------------

TITLE: Translating text using Django's translation context manager
DESCRIPTION: A more concise way to translate text outside of Django views using the translation.override context manager, which automatically restores the original language.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_61

LANGUAGE: python
CODE:
```
from django.utils import translation


def welcome_translated(language):
```

----------------------------------------

TITLE: Configuring Label Suffix in Django Forms - Python
DESCRIPTION: Illustrates configuration of the label_suffix parameter in a Django form to control the character appended after label text. Demonstrates passing label_suffix as an empty string and as a custom string (' ->') during form instantiation. Inputs are the form's auto_id and label_suffix arguments; outputs are HTML showing different suffixes after labels. This allows customization of form presentation to match project- or locale-specific requirements.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
>>> f = ContactForm(auto_id="id_for_%s", label_suffix="")
>>> print(f)
<div><label for="id_for_subject">Subject</label><input type="text" name="subject" maxlength="100" required id="id_for_subject"></div>
<div><label for="id_for_message">Message</label><textarea name="message" cols="40" rows="10" required id="id_for_message"></textarea></div>
<div><label for="id_for_sender">Sender</label><input type="email" name="sender" required id="id_for_sender"></div>
<div><label for="id_for_cc_myself">Cc myself</label><input type="checkbox" name="cc_myself" id="id_for_cc_myself"></div>
>>> f = ContactForm(auto_id="id_for_%s", label_suffix=" ->")
>>> print(f)
<div><label for="id_for_subject">Subject -&gt;</label><input type="text" name="subject" maxlength="100" required id="id_for_subject"></div>
<div><label for="id_for_message">Message -&gt;</label><textarea name="message" cols="40" rows="10" required id="id_for_message"></textarea></div>
<div><label for="id_for_sender">Sender -&gt;</label><input type="email" name="sender" required id="id_for_sender"></div>
<div><label for="id_for_cc_myself">Cc myself -&gt;</label><input type="checkbox" name="cc_myself" id="id_for_cc_myself"></div>
```

----------------------------------------

TITLE: Defining a Subclassed Custom Func for SQL Functions - Django ORM - Python
DESCRIPTION: This snippet defines a custom Func subclass 'Lower' representing the SQL LOWER function, which can then be used to annotate querysets. This technique is preferred if the same function is needed in multiple places, allowing code reuse and clarity. Assumes you are working with fields compatible with the SQL LOWER function (i.e., strings).
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
class Lower(Func):
    function = "LOWER"


queryset.annotate(field_lower=Lower("field"))
```

----------------------------------------

TITLE: Parsing 'as' Syntax in a Django Tag Compilation Function (Python)
DESCRIPTION: This Python function `do_current_time` is a refactored compilation function for a Django template tag that supports the `as var_name` syntax. It splits the token contents and uses a regular expression (`re.search`) to parse the arguments, extracting the format string and the target variable name specified after 'as'. It includes error handling for incorrect arguments or invalid syntax and instantiates `CurrentTimeNode3` with the extracted format string and variable name.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_37

LANGUAGE: python
CODE:
```
import re


def do_current_time(parser, token):
    # This version uses a regular expression to parse tag contents.
    try:
        # Splitting by None == splitting by spaces.
        tag_name, arg = token.contents.split(None, 1)
    except ValueError:
        raise template.TemplateSyntaxError(
            "%r tag requires arguments" % token.contents.split()[0]
        )
    m = re.search(r"(.*?) as (\w+)", arg)
    if not m:
        raise template.TemplateSyntaxError("%r tag had invalid arguments" % tag_name)
    format_string, var_name = m.groups()
    if not (format_string[0] == format_string[-1] and format_string[0] in ('"', "'")):
        raise template.TemplateSyntaxError(
            "%r tag's argument should be in quotes" % tag_name
        )
    return CurrentTimeNode3(format_string[1:-1], var_name)
```

----------------------------------------

TITLE: Querying GeoIP2 for Country and City Information in Python
DESCRIPTION: Demonstrates how to use the GeoIP2 class to query country and city information for IP addresses and domain names. Shows various methods including country(), city(), lat_lon(), and geos().
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoip2.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.geoip2 import GeoIP2
>>> g = GeoIP2()
>>> g.country("google.com")
{'continent_code': 'NA',
 'continent_name': 'North America',
 'country_code': 'US',
 'country_name': 'United States',
 'is_in_european_union': False}
>>> g.city("72.14.207.99")
{'accuracy_radius': 1000,
 'city': 'Mountain View',
 'continent_code': 'NA',
 'continent_name': 'North America',
 'country_code': 'US',
 'country_name': 'United States',
 'is_in_european_union': False,
 'latitude': 37.419200897216797,
 'longitude': -122.05740356445312,
 'metro_code': 807,
 'postal_code': '94043',
 'region_code': 'CA',
 'region_name': 'California',
 'time_zone': 'America/Los_Angeles',
 'dma_code': 807,
 'region': 'CA'}
>>> g.lat_lon("salon.com")
(39.0437, -77.4875)
>>> g.lon_lat("uh.edu")
(-95.4342, 29.834)
>>> g.geos("24.124.1.80").wkt
'POINT (-97 38)'
```

----------------------------------------

TITLE: Creating a flexible custom makemessages command with arguments
DESCRIPTION: Creates a more flexible custom makemessages command with an additional argument for specifying extra keywords to be passed to xgettext.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_56

LANGUAGE: python
CODE:
```
from django.core.management.commands import makemessages


class Command(makemessages.Command):
    def add_arguments(self, parser):
        super().add_arguments(parser)
        parser.add_argument(
            "--extra-keyword",
            dest="xgettext_keywords",
            action="append",
        )

    def handle(self, *args, **options):
        xgettext_keywords = options.pop("xgettext_keywords")
        if xgettext_keywords:
            self.xgettext_options = makemessages.Command.xgettext_options[:] + [
                "--keyword=%s" % kwd for kwd in xgettext_keywords
            ]
        super().handle(*args, **options)
```

----------------------------------------

TITLE: Configuring Django PyMemcache Cache Backend
DESCRIPTION: Configuration for PyMemcache backend with client pooling, error handling as cache misses, and TCP_NODELAY flag enabled.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
        "LOCATION": "127.0.0.1:11211",
        "OPTIONS": {
            "no_delay": True,
            "ignore_exc": True,
            "max_pool_size": 4,
            "use_pooling": True,
        },
    }
}
```

----------------------------------------

TITLE: Customizing aria-describedby for Django Form Fields in Python
DESCRIPTION: Illustrates how to override the default `aria-describedby` attribute for a `CharField`'s widget within a Django `UserForm`. This example adds a custom description ID (`custom-description`) before the standard help text ID (`id_username_helptext`) by passing a dictionary to the `attrs` argument of the widget, controlling the order screen readers announce descriptions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_11

LANGUAGE: pycon
CODE:
```
>>> class UserForm(forms.Form):
...     username = forms.CharField(
...         max_length=255,
...         help_text="e.g., user@example.com",
...         widget=forms.TextInput(
...             attrs={"aria-describedby": "custom-description id_username_helptext"},
...         ),
...     )
...
>>> f = UserForm()
>>> print(f["username"])
<input type="text" name="username" aria-describedby="custom-description id_username_helptext" maxlength="255" id="id_username" required>
```

----------------------------------------

TITLE: Importing SessionStore in Django
DESCRIPTION: This snippet shows how to import the SessionStore object from the configured session engine in Django settings.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
>>> from importlib import import_module
>>> from django.conf import settings
>>> SessionStore = import_module(settings.SESSION_ENGINE).SessionStore
```

----------------------------------------

TITLE: Using django.utils.html.remove_tags Function
DESCRIPTION: The remove_tags template filter is now available as a standard Python function in django.utils.html module.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
django.utils.html.remove_tags()
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'not_gt' Lookup in Django Python
DESCRIPTION: Utilizes the `not_gt` lookup (`__not_gt`, SQL operator `&<`) on the `ages` field. This query filters `Event` objects where the `ages` range does not extend to the right of (is not strictly greater than) the specified `NumericRange(3, 10)`, meaning its upper bound is less than or equal to the upper bound of the queried range. Requires the `Event` model and `NumericRange`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_26

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__not_gt=NumericRange(3, 10))
<QuerySet [<Event: Soft play>]>
```

----------------------------------------

TITLE: Using INI configuration file with uWSGI
DESCRIPTION: Simple command to start uWSGI using a configuration file. This allows for easier management of server settings compared to command-line arguments.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/uwsgi.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
uwsgi --ini uwsgi.ini
```

----------------------------------------

TITLE: Using AdminURLFieldWidget with Custom Validator
DESCRIPTION: Example of customizing AdminURLFieldWidget validation by passing a custom validator_class parameter during initialization, used for URL field validation in Django admin.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.2.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
AdminURLFieldWidget.__init__(validator_class=CustomURLValidator)
```

----------------------------------------

TITLE: Specifying Django Settings via Command Line
DESCRIPTION: Demonstrates how to specify the Django settings module directly via the command line when running django-admin.
SOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
django-admin runserver --settings=mysite.settings
```

----------------------------------------

TITLE: Complete Upload Handler Replacement in Django
DESCRIPTION: Shows how to completely replace the default upload handlers with a custom handler list.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
request.upload_handlers = [ProgressBarUploadHandler(request)]
```

----------------------------------------

TITLE: Overriding a Model Record by Saving with Primary Key - Django ORM - Python
DESCRIPTION: This snippet demonstrates how saving a Django model instance with an explicit primary key value will override the corresponding record in the database. It is useful primarily for bulk operations where primary-key collisions are not expected. Dependencies include a defined Blog model and a correctly configured Django project. Input parameters: id, name, and tagline. The output is an updated database row for the specified primary key. Potential constraint: if the primary key value already exists, the existing row will be overwritten.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
b4 = Blog(id=3, name="Not Cheddar", tagline="Anything but cheese.")
b4.save()  # Overrides the previous blog with ID=3!
```

----------------------------------------

TITLE: Min Validation Example
DESCRIPTION: Shows validation of minimum number of forms in a formset
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
from django.forms import formset_factory
from myapp.forms import ArticleForm
ArticleFormSet = formset_factory(ArticleForm, min_num=3, validate_min=True)
data = {
    "form-TOTAL_FORMS": "2",
    "form-INITIAL_FORMS": "0",
    "form-0-title": "Test",
    "form-0-pub_date": "1904-06-16",
    "form-1-title": "Test 2",
    "form-1-pub_date": "1912-06-23",
}
```

----------------------------------------

TITLE: Accessing Django Cache Backends
DESCRIPTION: Demonstrates how to access configured cache backends using django.core.cache.caches and the default cache shortcut.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_30

LANGUAGE: pycon
CODE:
```
>>> from django.core.cache import caches
>>> cache1 = caches["myalias"]
>>> cache2 = caches["myalias"]
>>> cache1 is cache2
True
```

LANGUAGE: pycon
CODE:
```
>>> from django.core.cache import cache
```

----------------------------------------

TITLE: Initializing and Manipulating OGRGeometry Objects in Django (Python)
DESCRIPTION: Shows creation of OGRGeometry objects from a WKT polygon string using Django's GIS API and accessing geometry attributes and transformations such as dimension, 3D status, measured status, geometry counts, geometry name, area, extent, and SRID-related properties. Demonstrates set_3d and set_measured methods to toggle extra dimensions in the geometry, as well as property accessors for area and envelope calculations. Requires the django.contrib.gis.gdal.OGRGeometry class and appropriate input strings (e.g., valid WKT). Outputs are numbers, booleans, and strings depending on the attribute queried.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_9

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.gdal import OGRGeometry
>>> polygon = OGRGeometry("POLYGON((0 0, 5 0, 5 5, 0 5))")
```

LANGUAGE: pycon
CODE:
```
>>> polygon.dimension
2
```

LANGUAGE: pycon
CODE:
```
>>> p = OGRGeometry("POINT (1 2 3)")
>>> p.is_3d
True
>>> p.set_3d(False)
>>> p.wkt
"POINT (1 2)"
```

LANGUAGE: pycon
CODE:
```
>>> p = OGRGeometry("POINT (1 2)")
>>> p.is_measured
False
>>> p.set_measured(True)
>>> p.wkt
"POINT M (1 2 0)"
```

LANGUAGE: pycon
CODE:
```
>>> polygon.geom_count
1
```

LANGUAGE: pycon
CODE:
```
>>> polygon.point_count
4
```

LANGUAGE: pycon
CODE:
```
>>> polygon.geom_name
'POLYGON'
```

LANGUAGE: pycon
CODE:
```
>>> polygon.area
25.0
```

LANGUAGE: pycon
CODE:
```
>>> point.extent
(0.0, 0.0, 5.0, 5.0)
```

LANGUAGE: pycon
CODE:
```
>>> city.geom.srs.name
'GCS_WGS_1984'
```

----------------------------------------

TITLE: Potential Pitfalls with Disabled Auto-escaping and Filter Chaining
DESCRIPTION: Illustrates a scenario where disabling auto-escaping (`{% autoescape off %}`) can lead to unexpected results when chaining filters like `join` and `escape`. Because `join` is executed first within the `autoescape off` context, its result (the joined string) is marked as safe, preventing the subsequent `escape` filter from having any effect.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_1

LANGUAGE: html+django
CODE:
```
{% autoescape off %}
    {{ my_list|join:", "|escape }}
{% endautoescape %}
```

----------------------------------------

TITLE: Configuring LOGGING with Filters - Django Settings - Python
DESCRIPTION: This snippet provides an updated configuration example for the LOGGING setting in Django, showcasing the addition of a require_debug_false filter to the mail_admins handler using django.utils.log.RequireDebugFalse. This setup ensures that admin error emails are only sent when DEBUG is False. Key parameters include filter definitions, handler configuration, and the use of the AdminEmailHandler class. The code is intended for project settings files, and assumes proper installation of Django and access to its logging framework.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
LOGGING = {
    # ...
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        }
    },
    "handlers": {
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        }
    },
}
```

----------------------------------------

TITLE: Redirecting to Custom View in Django Admin Action
DESCRIPTION: This code demonstrates how to create an admin action that redirects to a custom view. It passes the selected object IDs and content type as GET parameters to the custom export view.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.contrib.contenttypes.models import ContentType
from django.http import HttpResponseRedirect

def export_selected_objects(modeladmin, request, queryset):
    selected = queryset.values_list("pk", flat=True)
    ct = ContentType.objects.get_for_model(queryset.model)
    return HttpResponseRedirect(
        "/export/?ct=%s&ids=%s"
        % (
            ct.pk,
            ",".join(str(pk) for pk in selected),
        )
    )
```

----------------------------------------

TITLE: Django Ignorable 404 URLs Regular Expressions
DESCRIPTION: Specifies `IGNORABLE_404_URLS`, a list of compiled regex objects matching URLs to ignore in 404 error reports. Defaults to an empty list.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_48

LANGUAGE: plaintext
CODE:
```
IGNORABLE_404_URLS
----------------------

Default: `[]` (Empty list)

List of compiled regular expression objects describing URLs that should be
ignored when reporting HTTP 404 errors via email (see
:doc:`/howto/error-reporting`). Regular expressions are matched against
:meth:`request's full paths <django.http.HttpRequest.get_full_path>` (including
query string, if any). Use this if your site does not provide a commonly
requested file such as `favicon.ico` or `robots.txt`.

This is only used if
:class:`~django.middleware.common.BrokenLinkEmailsMiddleware` is enabled (see
:doc:`/topics/http/middleware`).
```

----------------------------------------

TITLE: Defining a Custom HttpResponse Subclass with HTTPStatus - Django - Python
DESCRIPTION: This snippet demonstrates how to define a custom HttpResponse subclass (HttpResponseNoContent) in Django by specifying a custom HTTP status code using Python's http.HTTPStatus module. It requires importing HTTPStatus from the standard library and HttpResponse from django.http. The example shows how to set the status_code attribute directly within the new class, which will then be used for responses instantiated from this subclass.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
from http import HTTPStatus
from django.http import HttpResponse


class HttpResponseNoContent(HttpResponse):
    status_code = HTTPStatus.NO_CONTENT
```

----------------------------------------

TITLE: Initializing SpatialReference Objects in Python
DESCRIPTION: Shows various ways to initialize a `SpatialReference` object, representing a coordinate system. Initialization can be done using shorthand strings ('WGS84'), EPSG codes (integer 4326 or string 'EPSG:4326'), PROJ strings, or OGC Well Known Text (WKT).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_29

LANGUAGE: pycon
CODE:
```
>>> wgs84 = SpatialReference("WGS84")  # shorthand string
>>> wgs84 = SpatialReference(4326)  # EPSG code
>>> wgs84 = SpatialReference("EPSG:4326")  # EPSG string
>>> proj = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs "
>>> wgs84 = SpatialReference(proj)  # PROJ string
>>> wgs84 = SpatialReference(
...     """GEOGCS["WGS 84",
... DATUM["WGS_1984",
...      SPHEROID["WGS 84",6378137,298.257223563,
...          AUTHORITY["EPSG","7030"]],
...      AUTHORITY["EPSG","6326"]],
... PRIMEM["Greenwich",0,
...      AUTHORITY["EPSG","8901"]],
...      AUTHORITY["EPSG","4326"]]]"""  # WKT string
... )
```

----------------------------------------

TITLE: Customizing Paginator Error Messages in Python
DESCRIPTION: This example illustrates how to customize the error messages raised by the Django `Paginator`. By passing a dictionary to the `error_messages` parameter during instantiation, specifically overriding the `no_results` key, the default `EmptyPage` exception message is replaced with a custom one when accessing a non-existent page. This requires importing `Paginator` from `django.core.paginator`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/paginator.txt#2025-04-23_snippet_1

LANGUAGE: pycon
CODE:
```
>>> paginator = Paginator(
...     [1, 2, 3],
...     2,
...     error_messages={"no_results": "Page does not exist"},
... )
>>> paginator.page(5)
Traceback (most recent call last):
  ...
EmptyPage: Page does not exist
```

----------------------------------------

TITLE: Configuring Default Index Tablespace in Django
DESCRIPTION: Defines the default tablespace (empty string, meaning database default) for indexes on fields without a specific tablespace, applicable only if the database backend supports tablespaces.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_21

LANGUAGE: python
CODE:
```
DEFAULT_INDEX_TABLESPACE = ''
```

----------------------------------------

TITLE: Using Custom Managers with Reverse Relations in Django 1.7
DESCRIPTION: Example showing how to specify a custom manager when traversing a reverse relationship between models, allowing more control over reverse relation queries.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.txt#_snippet_1

LANGUAGE: Python
CODE:
```
class Blog(models.Model):
    pass


class Entry(models.Model):
    blog = models.ForeignKey(Blog)

    objects = models.Manager()  # Default Manager
    entries = EntryManager()  # Custom Manager


b = Blog.objects.get(id=1)
b.entry_set(manager="entries").all()
```

----------------------------------------

TITLE: DateTime Complex Truncation in Django
DESCRIPTION: Advanced example showing multiple truncation operations with different precisions and timezone handling.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
>>> from datetime import UTC, date, datetime
>>> from django.db.models import Count
>>> from django.db.models.functions import (
...     TruncDate,
...     TruncDay,
...     TruncHour,
...     TruncMinute,
...     TruncSecond,
... )
>>> import zoneinfo
>>> start1 = datetime(2014, 6, 15, 14, 30, 50, 321, tzinfo=UTC)
>>> Experiment.objects.create(start_datetime=start1, start_date=start1.date())
>>> melb = zoneinfo.ZoneInfo("Australia/Melbourne")
>>> Experiment.objects.annotate(
...     date=TruncDate("start_datetime"),
...     day=TruncDay("start_datetime", tzinfo=melb),
...     hour=TruncHour("start_datetime", tzinfo=melb),
...     minute=TruncMinute("start_datetime"),
...     second=TruncSecond("start_datetime"),
... ).values("date", "day", "hour", "minute", "second").get()
```

----------------------------------------

TITLE: Removing All Keys with querystring Tag in Django Templates
DESCRIPTION: This snippet shows how to remove all keys from a query string by setting them to None. When all keys are removed, the output will be a simple question mark.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_31

LANGUAGE: html+django
CODE:
```
{% querystring my_query_dict my_dict color=None size=None fabric=None type=None %}
```

----------------------------------------

TITLE: Skipping Django tests based on database features with skipIfDBFeature
DESCRIPTION: Example showing how to skip a test if a specific database feature is supported using the skipIfDBFeature decorator. This test will not run if the database supports transactions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_53

LANGUAGE: python
CODE:
```
class MyTests(TestCase):
    @skipIfDBFeature("supports_transactions")
    def test_transaction_behavior(self):
        # ... conditional test code
        pass
```

----------------------------------------

TITLE: Raw Database Cursor Usage with Multiple Databases
DESCRIPTION: Example of using raw database cursors with multiple databases using django.db.connections.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
from django.db import connections

with connections["my_db_alias"].cursor() as cursor:
    ...
```

----------------------------------------

TITLE: Defining Django Models for RESTRICT Example (Python)
DESCRIPTION: Defines three Django models, `Artist`, `Album`, and `Song`, to illustrate the behavior of `on_delete=models.RESTRICT`. `Album` and `Song` have foreign keys to `Artist`, and `Song` has a foreign key to `Album` with the RESTRICT deletion behavior.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_30

LANGUAGE: Python
CODE:
```
class Artist(models.Model):
    name = models.CharField(max_length=10)

class Album(models.Model):
    artist = models.ForeignKey(Artist, on_delete=models.CASCADE)

class Song(models.Model):
    artist = models.ForeignKey(Artist, on_delete=models.CASCADE)
    album = models.ForeignKey(Album, on_delete=models.RESTRICT)
```

----------------------------------------

TITLE: Using formfield_callback in Django ModelForm
DESCRIPTION: This example shows how to use the formfield_callback attribute in a Django ModelForm to customize field creation. It defines a custom function that returns a special field for the 'slug' field and uses default behavior for other fields.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.forms import ModelForm
from myapp.models import Article


def formfield_for_dbfield(db_field, **kwargs):
    if db_field.name == "slug":
        return MySlugFormField()
    return db_field.formfield(**kwargs)


class ArticleForm(ModelForm):
    class Meta:
        model = Article
        fields = ["pub_date", "headline", "content", "reporter", "slug"]
        formfield_callback = formfield_for_dbfield
```

----------------------------------------

TITLE: Removing Parameters with querystring Tag in Django Templates
DESCRIPTION: This snippet demonstrates how to remove parameters from a query string by passing None as the value. In this example, the color parameter would be removed from the query string.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_28

LANGUAGE: html+django
CODE:
```
{% querystring color=None %}
```

----------------------------------------

TITLE: Filtering QuerySets with Composite Primary Keys - Pycon
DESCRIPTION: Shows how to filter Django QuerySets using a composite pk tuple. Demonstrates counting rows where the composite primary key matches provided values. Depends on models having been set up with composite primary keys. Input: tuple to filter; output: count of matching records.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_3

LANGUAGE: pycon
CODE:
```
>>> OrderLineItem.objects.filter(pk=(1, "A755H")).count()
1
```

----------------------------------------

TITLE: Redirecting inspectdb Output to models.py via Shell
DESCRIPTION: This shell command adds Unix output redirection onto the Django inspectdb management command, saving the auto-generated models into a file named models.py. The developer must have Django set up and specify database details in the settings as prerequisites. Input is provided by the database and output is written directly to models.py.
SOURCE: https://github.com/django/django/blob/main/docs/howto/legacy-databases.txt#_snippet_1

LANGUAGE: shell
CODE:
```
$ python manage.py inspectdb > models.py
```

----------------------------------------

TITLE: Using a Context-Setting Django Tag (HTML+Django)
DESCRIPTION: This Django template snippet demonstrates how to use the `current_time` tag (implemented by `CurrentTimeNode2`). The tag itself doesn't output anything but sets the `current_time` variable in the context. This variable is then accessed and displayed later in the template using standard variable syntax `{{ current_time }}`.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_34

LANGUAGE: html+django
CODE:
```
{% current_time "%Y-%m-%d %I:%M %p" %}<p>The time is {{ current_time }}.</p>
```

----------------------------------------

TITLE: Using Extent Aggregation in GeoDjango
DESCRIPTION: Example of using the Extent aggregate function to get the bounding box (as a 4-tuple) of city polygons filtered by name.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_34

LANGUAGE: python
CODE:
```
>>> qs = City.objects.filter(name__in=("Houston", "Dallas")).aggregate(Extent("poly"))
>>> print(qs["poly__extent"])
(-96.8016128540039, 29.7633724212646, -95.3631439208984, 32.782058715820)
```

----------------------------------------

TITLE: Using Django's Database Routing in Interactive Examples
DESCRIPTION: Interactive examples demonstrating how Django's database routing works with the configured routers in practice.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
# This retrieval will be performed on the 'auth_db' database
fred = User.objects.get(username="fred")
fred.first_name = "Frederick"

# This save will also be directed to 'auth_db'
fred.save()

# These retrieval will be randomly allocated to a replica database
dna = Person.objects.get(name="Douglas Adams")

# A new object has no database allocation when created
mh = Book(title="Mostly Harmless")

# This assignment will consult the router, and set mh onto
# the same database as the author object
mh.author = dna

# This save will force the 'mh' instance onto the primary database...
mh.save()

# ... but if we re-retrieve the object, it will come back on a replica
mh = Book.objects.get(title="Mostly Harmless")
```

----------------------------------------

TITLE: Configuring Django Template Engine with Custom Libraries
DESCRIPTION: Demonstrates initializing the Django `Engine` with a custom `libraries` dictionary. This dictionary maps desired template tag library labels (e.g., 'myapp_tags') to the dotted Python path of the module containing the tags ('path.to.myapp.tags'). This allows loading these custom tags using `{% load myapp_tags %}` in templates. It also shows aliasing an existing library ('admin.urls').
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
Engine(
    libraries={
        "myapp_tags": "path.to.myapp.tags",
        "admin.urls": "django.contrib.admin.templatetags.admin_urls",
    },
)
```

----------------------------------------

TITLE: Using stringformat Filter in Django Templates
DESCRIPTION: The stringformat filter formats the variable according to a string formatting specifier, using the old-string-formatting syntax without the leading '%'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_87

LANGUAGE: html+django
CODE:
```
{{ value|stringformat:"E" }}
```

----------------------------------------

TITLE: Running Django Test Suite with GeoDjango Tests
DESCRIPTION: Shell command to run the complete Django test suite including GeoDjango tests using specific settings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
$ ./runtests.py --settings=postgis
```

----------------------------------------

TITLE: Registering GeoDjango Model with GISModelAdmin (Python)
DESCRIPTION: Shows how to register a GeoDjango model (`WorldBorder`) in `admin.py` using `admin.GISModelAdmin` instead of the standard `ModelAdmin`. This provides an enhanced admin interface for geometry fields, typically including an OpenStreetMap base layer for better context. Requires `django.contrib.gis.admin`, the model definition, and installation of PROJ datum shifting files.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
admin.site.register(WorldBorder, admin.GISModelAdmin)
```

----------------------------------------

TITLE: Translation with Named Placeholders in Django
DESCRIPTION: Demonstrates using named-string interpolation with Django's translation system. This approach allows translators to reorder placeholder text for different languages.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
def my_view(request, m, d):
    output = _("Today is %(month)s %(day)s.") % {"month": m, "day": d}
    return HttpResponse(output)
```

----------------------------------------

TITLE: Fixing Unicode encoding errors in uWSGI file uploads
DESCRIPTION: Configuration snippet to add to uwsgi.ini for preventing UnicodeEncodeError when uploading files with non-ASCII filenames. This sets the proper UTF-8 environment variable.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/uwsgi.txt#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
env = LANG=en_US.UTF-8
```

----------------------------------------

TITLE: Retrieving a Field Instance via Django _meta (Python Interactive)
DESCRIPTION: Demonstrates how to use the _meta.get_field() method to retrieve a single field instance (including related fields) by name from a Django model class. Shows cases for a direct model field, a related model field, and an illustration of raising a FieldDoesNotExist exception for unknown names. Requires Django and an existing model (e.g., User) to be present in the environment. The parameter field_name specifies the name of the field or related accessor; the result is either a field/relationship object or raises an exception.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/meta.txt#2025-04-23_snippet_0

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.auth.models import User

# A field on the model
>>> User._meta.get_field("username")
<django.db.models.fields.CharField: username>

# A field from another model that has a relation with the current model
>>> User._meta.get_field("logentry")
<ManyToOneRel: admin.logentry>

# A non existent field
>>> User._meta.get_field("does_not_exist")
Traceback (most recent call last):
    ...
FieldDoesNotExist: User has no field named 'does_not_exist'
```

----------------------------------------

TITLE: Configuring Memcached Backend with Unix Socket in Django (Python)
DESCRIPTION: This Python snippet configures the Django `CACHES` setting to connect to a Memcached instance via a local Unix socket file located at `/tmp/memcached.sock`. It uses the `PyMemcacheCache` backend, requiring the `pymemcache` library.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
        "LOCATION": "unix:/tmp/memcached.sock",
    }
}
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'lower_inf' Lookup in Django Python
DESCRIPTION: Shows the `lower_inf` lookup (`__lower_inf`) used with the `ages` field. This query finds `Event` objects where the `ages` range has an unbounded (infinite) lower bound. Requires the `Event` model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_32

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__lower_inf=True)
<QuerySet []>
```

----------------------------------------

TITLE: Implementing Custom Django Migration Operation Template
DESCRIPTION: Template showing the basic structure and required methods for creating a custom Django migration operation. Includes initialization, state management, database operations, and descriptive methods.
SOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.db.migrations.operations.base import Operation


class MyCustomOperation(Operation):
    # If this is False, it means that this operation will be ignored by
    # sqlmigrate; if true, it will be run and the SQL collected for its output.
    reduces_to_sql = False

    # If this is False, Django will refuse to reverse past this operation.
    reversible = False

    # This categorizes the operation. The corresponding symbol will be
    # displayed by the makemigrations command.
    category = OperationCategory.ADDITION

    def __init__(self, arg1, arg2):
        # Operations are usually instantiated with arguments in migration
        # files. Store the values of them on self for later use.
        pass

    def state_forwards(self, app_label, state):
        # The Operation should take the 'state' parameter (an instance of
        # django.db.migrations.state.ProjectState) and mutate it to match
        # any schema changes that have occurred.
        pass

    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        # The Operation should use schema_editor to apply any changes it
        # wants to make to the database.
        pass

    def database_backwards(self, app_label, schema_editor, from_state, to_state):
        # If reversible is True, this is called when the operation is reversed.
        pass

    def describe(self):
        # This is used to describe what the operation does.
        return "Custom Operation"

    @property
    def migration_name_fragment(self):
        # Optional. A filename part suitable for automatically naming a
        # migration containing this operation, or None if not applicable.
        return "custom_operation_%s_%s" % (self.arg1, self.arg2)
```

----------------------------------------

TITLE: Using Custom QueryDict with querystring Tag in Django Templates
DESCRIPTION: This example demonstrates using custom QueryDict instances as positional arguments to replace request.GET. Key-value pairs from later arguments take precedence over earlier ones.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_30

LANGUAGE: html+django
CODE:
```
{% querystring my_query_dict my_dict size="S" type=None %}
```

----------------------------------------

TITLE: Configuring Message Storage in Django Settings
DESCRIPTION: Example of setting a custom message storage backend in Django settings.py
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
MESSAGE_STORAGE = "django.contrib.messages.storage.cookie.CookieStorage"
```

----------------------------------------

TITLE: Serving Django in a subdirectory with mod_wsgi daemon mode
DESCRIPTION: Configuration for serving a Django application in a subdirectory (e.g., /mysite) when using mod_wsgi daemon mode, by specifying the process group in the WSGIScriptAlias directive.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/modwsgi.txt#2025-04-23_snippet_4

LANGUAGE: apache
CODE:
```
WSGIScriptAlias /mysite /path/to/mysite.com/mysite/wsgi.py process-group=example.com
```

----------------------------------------

TITLE: Showing Error Messages to Unauthenticated Users in Django
DESCRIPTION: This code demonstrates how to display an error message to unauthenticated users trying to access a protected view, rather than redirecting them to a login page.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
from django.shortcuts import render


def my_view(request):
    if not request.user.is_authenticated:
        # Code incomplete in the original document
```

----------------------------------------

TITLE: Disabling Reverse Relation with Django ForeignKey
DESCRIPTION: This snippet demonstrates how to prevent Django from creating a reverse relation from the related model (User) back to the current model by setting the `related_name` attribute to `'+'`. This is useful when the reverse relation is not needed or desired.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_35

LANGUAGE: Python
CODE:
```
user = models.ForeignKey(
    User,
    on_delete=models.CASCADE,
    related_name="+",
)
```

----------------------------------------

TITLE: Configuring Advanced Filesystem Template Loader in Django
DESCRIPTION: Shows how to configure a specific filesystem loader with custom directories in the OPTIONS dictionary of the TEMPLATES setting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "OPTIONS": {
            "loaders": [
                (
                    "django.template.loaders.filesystem.Loader",
                    [BASE_DIR / "templates"],
                ),
            ],
        },
    }
]
```

----------------------------------------

TITLE: Setting Accepted Time Input Formats in Django Settings (Python)
DESCRIPTION: This snippet defines TIME_INPUT_FORMATS, which enumerates the valid string formats that will be accepted for time fields in Django forms and models. It is a list of Python datetime-compatible format strings, tried in order to accept various user input patterns for time values. Dependencies include Python's datetime module formatting conventions. Input: user-entered time strings; Output: parsed datetime.time objects or validation errors.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_58

LANGUAGE: python
CODE:
```
TIME_INPUT_FORMATS = [
    "%H:%M:%S",  # '14:30:59'
    "%H:%M:%S.%f",  # '14:30:59.000200'
    "%H:%M",  # '14:30'
]
```

----------------------------------------

TITLE: Defining Django Models with ManyToManyField
DESCRIPTION: This snippet defines two Django models, `Topping` and `Pizza`, using the `django.db.models` API. The `Pizza` model includes a `ManyToManyField` named `toppings` that establishes a many-to-many relationship with the `Topping` model. This model setup serves as the context for explaining the `m2m_changed` signal.
SOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class Topping(models.Model):
    # ...
    pass


class Pizza(models.Model):
    # ...
    toppings = models.ManyToManyField(Topping)
```

----------------------------------------

TITLE: Converting Geometry to GeoJSON in Django
DESCRIPTION: Example showing how to convert a geometric point to GeoJSON format using the AsGeoJSON function in Django. Returns a GeoJSON representation containing type and coordinates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> City.objects.annotate(json=AsGeoJSON("point")).get(name="Chicago").json
{"type":"Point","coordinates":[-87.65018,41.85039]}
```

----------------------------------------

TITLE: Setting Time Zone in Django Templates
DESCRIPTION: Shows how to set specific time zones for template blocks using the timezone tag. Can set to a named zone or None for server time.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_6

LANGUAGE: html+django
CODE:
```
{% load tz %}

{% timezone "Europe/Paris" %}
    Paris time: {{ value }}
{% endtimezone %}

{% timezone None %}
    Server time: {{ value }}
{% endtimezone %}
```

----------------------------------------

TITLE: Enabling Localization in Form Fields with Python
DESCRIPTION: Example of how to create a form with localized input and output data by using the 'localize' argument in a DecimalField. This allows Django to use locale-specific formats for parsing and displaying numbers.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/formatting.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class CashRegisterForm(forms.Form):
    product = forms.CharField()
    revenue = forms.DecimalField(max_digits=4, decimal_places=2, localize=True)
```

----------------------------------------

TITLE: Grouping by Display String in Django Templates
DESCRIPTION: This snippet demonstrates grouping by the display string of a field with choices rather than the choice key, using Django's get_FOO_display method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_39

LANGUAGE: html+django
CODE:
```
{% regroup cities by get_country_display as country_list %}
```

----------------------------------------

TITLE: Configuring Default Character Set in Django Settings
DESCRIPTION: Specifies the default charset (UTF-8) used for all HttpResponse objects if a MIME type isn't manually set. This value is used when constructing the Content-Type header.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_17

LANGUAGE: python
CODE:
```
DEFAULT_CHARSET = 'utf-8'
```

----------------------------------------

TITLE: Using Mod Function in Django Models
DESCRIPTION: Shows how to use the Mod function to calculate the remainder between two vector coordinates
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Mod
>>> Vector.objects.create(x=5.4, y=2.3)
>>> vector = Vector.objects.annotate(mod=Mod("x", "y")).get()
>>> vector.mod
0.8
```

----------------------------------------

TITLE: Using Left Function in Django Models
DESCRIPTION: Demonstrates using the Left function to get the leftmost characters of a text field
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Left
>>> Author.objects.create(name="Margaret Smith")
>>> author = Author.objects.annotate(first_initial=Left("name", 1)).get()
>>> print(author.first_initial)
M
```

----------------------------------------

TITLE: Using TrigramWordSimilarity for Word-Based Fuzzy Matching
DESCRIPTION: Shows how to use TrigramWordSimilarity to find records based on word-level similarity. This method matches substrings within words, as demonstrated by searching for authors with names containing substrings similar to 'Kat'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_13

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.postgres.search import TrigramWordSimilarity
>>> Author.objects.create(name="Katy Stevens")
>>> Author.objects.create(name="Stephen Keats")
>>> test = "Kat"
>>> Author.objects.annotate(
...     similarity=TrigramWordSimilarity(test, "name"),
... ).filter(
...     similarity__gt=0.3
... ).order_by("-similarity")
[<Author: Katy Stevens>]
```

----------------------------------------

TITLE: Run Django testserver with fixtures (Console)
DESCRIPTION: Demonstrates the basic usage of the `django-admin testserver` command. It shows how to start a Django development server that uses a temporary test database populated with data from a specified fixture file (`mydata.json`).
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_42

LANGUAGE: console
CODE:
```
django-admin testserver mydata.json
```

----------------------------------------

TITLE: Resetting Query List in Django
DESCRIPTION: This snippet demonstrates how to manually clear the query list in Django using the reset_queries() function.
SOURCE: https://github.com/django/django/blob/main/docs/faq/models.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.db import reset_queries

reset_queries()
```

----------------------------------------

TITLE: Determining Bound and Unbound State of Django Forms in Python
DESCRIPTION: Shows how to check if a Django form instance is bound or unbound by accessing its 'is_bound' attribute. Assumes Django form class and instance exist; takes no parameters beyond the form instance and returns a Boolean indicating binding state. Highlights that passing an empty dictionary results in a bound form.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> f = ContactForm()
>>> f.is_bound
False
>>> f = ContactForm({"subject": "hello"})
>>> f.is_bound
True
```

LANGUAGE: python
CODE:
```
>>> f = ContactForm({})
>>> f.is_bound
True
```

----------------------------------------

TITLE: Rendering Boolean HTML5 Attributes in Django Form Widgets Using Python
DESCRIPTION: Demonstrates how setting boolean values for widget attributes results in correct HTML5 boolean attribute rendering. Requires Django; uses TextInput's attrs argument with True or False, and renders the HTML. Inputs are widget attributes; outputs are string representations of HTML input elements, showing presence or absence of the 'required' attribute based on the boolean value.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
>>> name = forms.TextInput(attrs={"required": True})
>>> name.render("name", "A name")
'<input name="name" type="text" value="A name" required>'
>>>
>>> name = forms.TextInput(attrs={"required": False})
>>> name.render("name", "A name")
'<input name="name" type="text" value="A name">'
```

----------------------------------------

TITLE: Using StrIndex Function in Django ORM
DESCRIPTION: Shows how to find the position of a substring within a text field
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_39

LANGUAGE: python
CODE:
```
>>> from django.db.models import Value as V
>>> from django.db.models.functions import StrIndex
>>> Author.objects.create(name="Margaret Smith")
>>> Author.objects.create(name="Smith, Margaret")
>>> Author.objects.create(name="Margaret Jackson")
>>> Author.objects.filter(name="Margaret Jackson").annotate(
...     smith_index=StrIndex("name", V("Smith"))
... ).get().smith_index
0
>>> authors = Author.objects.annotate(smith_index=StrIndex("name", V("Smith"))).filter(
...     smith_index__gt=0
... )
<QuerySet [<Author: Margaret Smith>, <Author: Smith, Margaret>]>
```

----------------------------------------

TITLE: Setting Language with Cookies in Django Tests
DESCRIPTION: Shows how to set the language for a test client request using cookies when LocaleMiddleware is enabled. This example sets the language to French.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
from django.conf import settings


def test_language_using_cookie(self):
    self.client.cookies.load({settings.LANGUAGE_COOKIE_NAME: "fr"})
    response = self.client.get("/")
    self.assertEqual(response.content, b"Bienvenue sur mon site.")
```

----------------------------------------

TITLE: Handling Auto-Escaping in Custom Template Tag Renderer
DESCRIPTION: This snippet demonstrates how to handle auto-escaping when creating a new context for sub-rendering in a custom template tag.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
from django.template import Context


def render(self, context):
    # ...
    new_context = Context({"var": obj}, autoescape=context.autoescape)
    # ... Do something with new_context ...
```

----------------------------------------

TITLE: Initializing Distance Objects in Python with GeoDjango
DESCRIPTION: Demonstrates creating Distance objects using different units (kilometers and miles) and shows the string representation of these objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/measure.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.measure import D, Distance
>>> d1 = Distance(km=5)
>>> print(d1)
5.0 km
>>> d2 = D(mi=5)  # `D` is an alias for `Distance`
>>> print(d2)
5.0 mi
```

----------------------------------------

TITLE: Adding Multiple Managers to a Django Proxy Model
DESCRIPTION: Demonstrates how to add additional managers (`secondary`) to a proxy model (`MyPerson`) without replacing the default inherited manager, by using an abstract base class (`ExtraManagers`) that defines the extra managers and inheriting from it.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_51

LANGUAGE: python
CODE:
```
# Create an abstract class for the new manager.
class ExtraManagers(models.Model):
    secondary = NewManager()

    class Meta:
        abstract = True


class MyPerson(Person, ExtraManagers):
    class Meta:
        proxy = True
```

----------------------------------------

TITLE: JSONArray Function Example in Django
DESCRIPTION: Shows how to use the JSONArray function to create JSON arrays from field values and expressions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
>>> from django.db.models import F
>>> from django.db.models.functions import JSONArray, Lower
>>> Author.objects.create(name="Margaret Smith", alias="msmith", age=25)
>>> author = Author.objects.annotate(
...     json_array=JSONArray(
...         Lower("name"),
...         "alias",
...         F("age") * 2,
...     )
... ).get()
>>> author.json_array
```

----------------------------------------

TITLE: Parsing Durations with Django's parse_duration
DESCRIPTION: Parses a string and returns a datetime.timedelta object. Accepts formats like "DD HH:MM:SS.uuuuuu", ISO 8601 duration format (e.g., P4DT1H15M20S), or PostgreSQL day-time interval format.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
parse_duration(value)
```

----------------------------------------

TITLE: Importing Django Core Validators in Python
DESCRIPTION: This code snippet shows the import of various validator functions from Django's core validators module. These validators are mentioned in relation to a security vulnerability (CVE-2021-33571) involving IPv4 address validation.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.4.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.core.validators import URLValidator, validate_ipv4_address, validate_ipv46_address
```

----------------------------------------

TITLE: Querying Spatial Intersection in Django ORM
DESCRIPTION: Example of using the 'intersects' lookup to find geometries that spatially intersect with a given geometry across different spatial database backends.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__intersects=geom)
```

----------------------------------------

TITLE: Configuring Multiple Databases with Empty Default in Django
DESCRIPTION: Example settings.py configuration with an intentionally empty default database and two non-default MySQL databases. This approach requires setting up DATABASE_ROUTERS to handle all queries and explicitly specifying the database for migrations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
DATABASES = {
    "default": {},
    "users": {
        "NAME": "user_data",
        "ENGINE": "django.db.backends.mysql",
        "USER": "mysql_user",
        "PASSWORD": "superS3cret",
    },
    "customers": {
        "NAME": "customer_data",
        "ENGINE": "django.db.backends.mysql",
        "USER": "mysql_cust",
        "PASSWORD": "veryPriv@ate",
    },
}
```

----------------------------------------

TITLE: Applying the `last_modified` Decorator to a Django View in Python
DESCRIPTION: Illustrates using the `@last_modified` decorator as a shortcut when only the last modified time needs to be checked. It applies the decorator with the `latest_entry` function directly to the `front_page` view.
SOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
@last_modified(latest_entry)
def front_page(request, blog_id): ...
```

----------------------------------------

TITLE: Implementing RSS and Atom Feed Classes in Django - Python
DESCRIPTION: This code defines two Django feed classes to serve both RSS and Atom versions of site news feeds, demonstrating inheritance and feed type specification. It requires django.contrib.syndication.views.Feed, a model named NewsItem with a pub_date field, and django.utils.feedgenerator.Atom1Feed. The 'RssSiteNewsFeed' outputs the latest NewsItems in RSS with hardcoded metadata; 'AtomSiteNewsFeed' subclasses it to use Atom and sets a subtitle. Inputs are database items retrieved via ORM; the output is an RSS or Atom feed for URLs configured for each class.

SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
from django.contrib.syndication.views import Feed
from policebeat.models import NewsItem
from django.utils.feedgenerator import Atom1Feed

class RssSiteNewsFeed(Feed):
    title = "Police beat site news"
    link = "/sitenews/"
    description = "Updates on changes and additions to police beat central."

    def items(self):
        return NewsItem.objects.order_by("-pub_date")[:5]

class AtomSiteNewsFeed(RssSiteNewsFeed):
    feed_type = Atom1Feed
    subtitle = RssSiteNewsFeed.description
```

----------------------------------------

TITLE: Using TrigramWordDistance for Word-Level Distance Matching
DESCRIPTION: Shows how to use TrigramWordDistance to find records based on word-level distance calculation. This allows for finding words with similar patterns, filtering results by a maximum distance threshold.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_15

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.postgres.search import TrigramWordDistance
>>> Author.objects.create(name="Katy Stevens")
>>> Author.objects.create(name="Stephen Keats")
>>> test = "Kat"
>>> Author.objects.annotate(
...     distance=TrigramWordDistance(test, "name"),
... ).filter(
...     distance__lte=0.7
... ).order_by("distance")
[<Author: Katy Stevens>]
```

----------------------------------------

TITLE: Configuring Database Cache Backend in Django (Python)
DESCRIPTION: This Python snippet configures the Django `CACHES` setting to use a database table for caching. It sets the `BACKEND` to `DatabaseCache` and specifies the desired table name ('my_cache_table') in the `LOCATION` setting. Requires the cache table to be created separately.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "my_cache_table",
    }
}
```

----------------------------------------

TITLE: Demonstrating ChoiceField and Widget Behavior in Django Forms Using Python
DESCRIPTION: Shows how widgets that inherit from Select synchronize their choices with their associated form field and how updating one affects the other. Assumes the use of Django; primarily illustrates the manipulation of 'choices' on both the field and the widget, with immediate effects. Inputs are choice definitions and assignments; outputs are updated lists of choices for form fields and widgets. Useful for understanding dynamic choice management in Django.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> from django import forms
>>> CHOICES = {"1": "First", "2": "Second"}
>>> choice_field = forms.ChoiceField(widget=forms.RadioSelect, choices=CHOICES)
>>> choice_field.choices
[('1', 'First'), ('2', 'Second')]
>>> choice_field.widget.choices
[('1', 'First'), ('2', 'Second')]
>>> choice_field.widget.choices = []
>>> choice_field.choices = [("1", "First and only")]
>>> choice_field.widget.choices
[('1', 'First and only')]
```

----------------------------------------

TITLE: Customizing Radio Button Rendering with Django Templates
DESCRIPTION: This Django template snippet demonstrates how to iterate over the choices of a RadioSelect widget (`myform.beatles`) to gain granular control over the HTML rendering. It wraps each radio input (`radio.tag`) within its corresponding label (`radio.choice_label`) and associates them using `radio.id_for_label`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_18

LANGUAGE: html+django
CODE:
```
<fieldset>
    <legend>{{ myform.beatles.label }}</legend>
    {% for radio in myform.beatles %}
    <label for="{{ radio.id_for_label }}">
        {{ radio.choice_label }}
        <span class="radio">{{ radio.tag }}</span>
    </label>
    {% endfor %}
</fieldset>
```

----------------------------------------

TITLE: Basic Translation Override Example in Django
DESCRIPTION: Demonstrates using translation.override() to temporarily set a language and get translated text using gettext
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_62

LANGUAGE: python
CODE:
```
with translation.override(language):
    return translation.gettext("welcome")
```

----------------------------------------

TITLE: Creating ContentFile Objects in Python with Django
DESCRIPTION: Demonstrates how to create ContentFile objects with string and byte content using Django's core.files.base module. ContentFile inherits from File but operates on string content rather than actual files.
SOURCE: https://github.com/django/django/blob/main/docs/ref/files/file.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.core.files.base import ContentFile

f1 = ContentFile("esta frase está en español")
f2 = ContentFile(b"these are bytes")
```

----------------------------------------

TITLE: Setting Maximum Memory Size for File Uploads in Django
DESCRIPTION: Specifies the maximum size (in bytes, default 2.5MB) an uploaded file can reach before being streamed to the filesystem instead of being held in memory.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_38

LANGUAGE: python
CODE:
```
FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440
```

----------------------------------------

TITLE: Registering a Django Template Tag via Function Call (Python)
DESCRIPTION: This Python code demonstrates registering a custom Django template tag using the `tag()` method of a `Library` instance (named `register`). It associates the tag name 'current_time' (a string) with its corresponding compilation function `do_current_time`.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
register.tag("current_time", do_current_time)
```

----------------------------------------

TITLE: Using blocktranslate tag with trimmed option in Django templates
DESCRIPTION: Demonstrates how to use the trimmed option with the {% blocktranslate %} tag to remove unnecessary whitespace and newlines.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_27

LANGUAGE: html+django
CODE:
```
{% blocktranslate trimmed %}
  First sentence.
  Second paragraph.
{% endblocktranslate %}
```

----------------------------------------

TITLE: Creating Django Translation Files (Bash)
DESCRIPTION: Shows using the `django-admin makemessages` command to create or update translation message files (`.po`) for a specific locale (`de`) and to include files with a particular extension (`xhtml`) during the source code scan.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_16

LANGUAGE: bash
CODE:
```
django-admin makemessages --locale=de --extension xhtml
```

----------------------------------------

TITLE: Defining DiscoverRunner Attributes in Python
DESCRIPTION: This snippet shows the definition of key attributes for the DiscoverRunner class, including test_suite, test_runner, and test_loader. These attributes determine how tests are collected, executed, and reported.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
class DiscoverRunner:
    test_suite = unittest.TestSuite
    test_runner = unittest.TextTestRunner
    test_loader = unittest.defaultTestLoader
```

----------------------------------------

TITLE: Configuring Sorting for Custom Fields in Django Admin
DESCRIPTION: Example showing how to use the ordering parameter with admin.display decorator to enable sorting by a specific database field when a custom display method is clicked in the admin list.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
from django.contrib import admin
from django.db import models
from django.utils.html import format_html


class Person(models.Model):
    first_name = models.CharField(max_length=50)
    color_code = models.CharField(max_length=6)

    @admin.display(ordering="first_name")
    def colored_first_name(self):
        return format_html(
            '<span style="color: #{};"{}</span>',
            self.color_code,
            self.first_name,
        )


class PersonAdmin(admin.ModelAdmin):
    list_display = ["first_name", "colored_first_name"]
```

----------------------------------------

TITLE: Querying Spatial Overlap in Django ORM
DESCRIPTION: Example of using the 'overlaps' lookup to find geometries that spatially overlap with a given geometry across different spatial database backends.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__overlaps=geom)
```

----------------------------------------

TITLE: Saving Individual Objects in a Django QuerySet
DESCRIPTION: Shows how to save each object in a QuerySet individually when you need the save() method to be called explicitly for each instance.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_58

LANGUAGE: python
CODE:
```
for item in my_queryset:
    item.save()
```

----------------------------------------

TITLE: Creating Model with File Outside Request Context
DESCRIPTION: A Django management command that creates a model with a file field outside the request context. It uses ContentFile to create a file object from binary content.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.core.management.base import BaseCommand
from django.core.files.base import ContentFile


class MyCommand(BaseCommand):
    def handle(self, *args, **options):
        content_file = ContentFile(b"Hello world!", name="hello-world.txt")
        instance = ModelWithFileField(file_field=content_file)
        instance.save()
```

----------------------------------------

TITLE: Running Django Development Server (Default) - Shell
DESCRIPTION: Starts the Django development server using default settings, typically binding to 127.0.0.1 on port 8000. This command is the simplest way to run the server during development.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_21

LANGUAGE: shell
CODE:
```
django-admin runserver
```

----------------------------------------

TITLE: Interpolating Strings with ngettext in JavaScript
DESCRIPTION: Demonstrates using ngettext and interpolate functions in JavaScript to handle pluralization and string formatting for internationalization.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_39

LANGUAGE: javascript
CODE:
```
const data = {
  count: 10,
  total: 50
};

const formats = ngettext(
    'Total: %(total)s, there is %(count)s object',
    'there are %(count)s of a total of %(total)s objects',
    data.count
);
const string = interpolate(formats, data, true);
```

----------------------------------------

TITLE: Lazy String Formatting with Translation Support - Django - Python
DESCRIPTION: Shows how to use format_lazy from django.utils.text along with pgettext_lazy to create lazily formatted URL patterns that can include translated strings. Requires django.utils.text.format_lazy, django.utils.translation.pgettext_lazy, and Django path and as_view utilities. Accepts a format string and lazy translation objects, outputs a lazily evaluated string (e.g., for URL patterns). Inputs: format_string, args, and kwargs; Outputs: lazy formatted string, facilitating i18n. Useful for building translation-aware URL patterns.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
from django.utils.text import format_lazy
from django.utils.translation import pgettext_lazy

urlpatterns = [
    path(
        format_lazy("{person}/<int:pk>/", person=pgettext_lazy("URL", "person")),
        PersonDetailView.as_view(),
    ),
]
```

----------------------------------------

TITLE: Checking Filesystem Encoding in Python
DESCRIPTION: Code to verify the filesystem encoding configuration for handling non-ASCII filenames
SOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
import sys

sys.getfilesystemencoding()
```

----------------------------------------

TITLE: Blocking Database Query Execution via Custom Wrapper in Django (Python)
DESCRIPTION: This snippet defines a simple Python function that raises an Exception when called, thereby preventing any database query execution within its scope. It demonstrates a minimal wrapper—'blocker'—that can be installed with Django's connection.execute_wrapper to enforce a 'no database access' policy in sensitive blocks of code. No external dependencies beyond standard Python and Django's ORM connection object are required.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/instrumentation.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
def blocker(*args):
    raise Exception("No database access allowed here.")
```

----------------------------------------

TITLE: Using Radians Function in Django Models
DESCRIPTION: Shows how to convert degrees to radians and register Radians as a transform
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Radians
>>> Vector.objects.create(x=-90, y=180)
>>> vector = Vector.objects.annotate(x_r=Radians("x"), y_r=Radians("y")).get()
>>> vector.x_r, vector.y_r
(-1.5707963267948966, 3.141592653589793)
```

LANGUAGE: python
CODE:
```
>>> from django.db.models import FloatField
>>> from django.db.models.functions import Radians
>>> FloatField.register_lookup(Radians)
>>> # Get vectors whose radians are less than 1
>>> vectors = Vector.objects.filter(x__radians__lt=1, y__radians__lt=1)
```

----------------------------------------

TITLE: Using Reverse Function in Django ORM
DESCRIPTION: Shows how to reverse characters in a text field
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_36

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Reverse
>>> Author.objects.create(name="Margaret Smith")
>>> author = Author.objects.annotate(backward=Reverse("name")).get()
>>> print(author.backward)
htimS teragraM
```

----------------------------------------

TITLE: Creating YAML Fixture for Django Person Model
DESCRIPTION: Example YAML fixture showing the same Person model data in YAML format. Demonstrates the more concise YAML syntax for defining model fixtures.
SOURCE: https://github.com/django/django/blob/main/docs/howto/initial-data.txt#2025-04-23_snippet_1

LANGUAGE: yaml
CODE:
```
- model: myapp.person
  pk: 1
  fields:
    first_name: John
    last_name: Lennon
- model: myapp.person
  pk: 2
  fields:
    first_name: Paul
    last_name: McCartney
```

----------------------------------------

TITLE: Filtering QuerySets by ISO Week Number - Django ORM (Python)
DESCRIPTION: Performs Django ORM queries to match date/datetime fields for week numbers using the ISO-8601 standard ('__week'). Inputs are integers from 1 to 52 or 53; outputs are QuerySets for matching week numbers, with start and end range supported. No direct SQL equivalent; relies on backend-specific implementation. Handles timezone conversion if enabled.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_111

LANGUAGE: python
CODE:
```
Entry.objects.filter(pub_date__week=52)
Entry.objects.filter(pub_date__week__gte=32, pub_date__week__lte=38)
```

----------------------------------------

TITLE: Defining Self-Referential ManyToManyField in Django
DESCRIPTION: This snippet defines a Django model 'Person' with a 'ManyToManyField' named 'friends' that points to itself. This is used to illustrate the default symmetrical behavior of self-referential many-to-many relationships.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_38

LANGUAGE: Python
CODE:
```
from django.db import models


class Person(models.Model):
    friends = models.ManyToManyField("self")
```

----------------------------------------

TITLE: Making Middleware Compatible with Both Sync and Async
DESCRIPTION: A decorator that marks middleware as compatible with both synchronous and asynchronous code. Requires implementing request type detection to be used effectively.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
sync_and_async_middleware(middleware)
```

----------------------------------------

TITLE: Running Migrate with Custom PYTHONPATH - Command Line
DESCRIPTION: Example of using the `django-admin migrate` command with the `--pythonpath` option. This option adds a specified filesystem path to Python's `sys.path`, useful when the project directory is not in the standard path or when running `django-admin` outside the project root.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_49

LANGUAGE: Command Line
CODE:
```
django-admin migrate --pythonpath='/home/djangoprojects/myproject'
```

----------------------------------------

TITLE: Creating and Outputting an Atom 1.0 Feed in Django
DESCRIPTION: This snippet demonstrates how to create an Atom 1.0 feed using Django's feedgenerator module, add an item to it, and print it to standard output.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
>>> from django.utils import feedgenerator
>>> from datetime import datetime
>>> f = feedgenerator.Atom1Feed(
...     title="My Blog",
...     link="https://www.example.com/",
...     description="In which I write about what I ate today.",
...     language="en",
...     author_name="Myself",
...     feed_url="https://example.com/atom.xml",
... )
>>> f.add_item(
...     title="Hot dog today",
...     link="https://www.example.com/entries/1/",
...     pubdate=datetime.now(),
...     description="<p>Today I had a Vienna Beef hot dog. It was pink, plump and perfect.</p>",
... )
>>> print(f.writeString("UTF-8"))
<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
...
</feed>
```

----------------------------------------

TITLE: Testing Email Content with EmailMultiAlternatives
DESCRIPTION: Example showing how to test email content using the body_contains method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
def test_contains_email_content(self):
    subject = "Hello World"
    from_email = "from@example.com"
    to = "to@example.com"
    msg = EmailMultiAlternatives(subject, "I am content.", from_email, [to])
    msg.attach_alternative("<p>I am content.</p>", "text/html")
```

----------------------------------------

TITLE: Using Savepoints in Django Transaction
DESCRIPTION: Demonstrates the use of savepoints within an atomic transaction block to perform partial rollbacks. Shows how to create, commit, and rollback to savepoints while handling database operations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.db import transaction

# open a transaction
@transaction.atomic
def viewfunc(request):
    a.save()
    # transaction now contains a.save()

    sid = transaction.savepoint()

    b.save()
    # transaction now contains a.save() and b.save()

    if want_to_keep_b:
        transaction.savepoint_commit(sid)
        # open transaction still contains a.save() and b.save()
    else:
        transaction.savepoint_rollback(sid)
        # open transaction now contains only a.save()
```

----------------------------------------

TITLE: Using get_or_create with ManyToManyField
DESCRIPTION: Illustrates using get_or_create through a ManyToManyField, which restricts queries within the relation's context.  Shows potential integrity problems if not used consistently due to uniqueness constraints in the database and the isolated scope of the get_or_create call. Requires Chapter and Book models to be defined with a ManyToMany relationship.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_74

LANGUAGE: python
CODE:
```
book = Book.objects.create(title="Ulysses")
book.chapters.get_or_create(title="Telemachus")
book.chapters.get_or_create(title="Telemachus")
Chapter.objects.create(title="Chapter 1")
book.chapters.get_or_create(title="Chapter 1")
# Raises IntegrityError
```

----------------------------------------

TITLE: Setting Custom Migration Module in Django
DESCRIPTION: Example of configuring MIGRATION_MODULES in Django settings to specify custom packages for app migrations. This example directs the blog app to use a non-default migration package.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_54

LANGUAGE: Python
CODE:
```
{"blog": "blog.db_migrations"}
```

----------------------------------------

TITLE: Defining Geographic Models in Django
DESCRIPTION: This snippet demonstrates how to create geographic models in Django using GeoDjango. It defines two models: Zipcode with a polygon field and Elevation with a raster field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/model-api.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.contrib.gis.db import models


class Zipcode(models.Model):
    code = models.CharField(max_length=5)
    poly = models.PolygonField()


class Elevation(models.Model):
    name = models.CharField(max_length=100)
    rast = models.RasterField()
```

----------------------------------------

TITLE: Parsing Datetimes with Django's parse_datetime
DESCRIPTION: Converts a string to a datetime.datetime object, supporting UTC offsets that are converted to datetime.timezone instances. Returns None for badly formatted strings and raises ValueError for well-formatted but invalid datetimes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
parse_datetime(value)
```

----------------------------------------

TITLE: Enabling Localization for Model Formset Fields in Python
DESCRIPTION: Shows how to enable localization for specific fields or all fields in a model formset factory.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_25

LANGUAGE: pycon
CODE:
```
>>> AuthorFormSet = modelformset_factory(
...     Author, fields=['name', 'title', 'birth_date'],
...     localized_fields=['birth_date'])
```

----------------------------------------

TITLE: Creating Initial Data with RunPython in Django (Python)
DESCRIPTION: Shows how to use RunPython to initialize data for a new model via custom Python code within a migration file. The functions create Country objects using historical model instances, ensuring that reversibility is provided by the reverse_func. Suitable for creating data migrations while maintaining compatibility with versioned model states. Requirements: Django migrations, historical model API.
SOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.db import migrations


def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    Country = apps.get_model("myapp", "Country")
    db_alias = schema_editor.connection.alias
    Country.objects.using(db_alias).bulk_create(
        [
            Country(name="USA", code="us"),
            Country(name="France", code="fr"),
        ]
    )


def reverse_func(apps, schema_editor):
    # forwards_func() creates two Country instances,
    # so reverse_func() should delete them.
    Country = apps.get_model("myapp", "Country")
    db_alias = schema_editor.connection.alias
    Country.objects.using(db_alias).filter(name="USA", code="us").delete()
    Country.objects.using(db_alias).filter(name="France", code="fr").delete()


class Migration(migrations.Migration):
    dependencies = []

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
```

----------------------------------------

TITLE: Comparing GEOS Polygon Areas in Python
DESCRIPTION: Illustrates the recommended method for comparing two `Polygon` objects based on their size. Direct comparison using operators like `>` compares the underlying `LineString` representation, which might not yield a meaningful geometric comparison. Instead, the `.area` property should be used to explicitly compare the polygons' areas.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_13

LANGUAGE: pycon
CODE:
```
>>> if poly_1.area > poly_2.area:
...     pass
...
```

----------------------------------------

TITLE: Setting Database Default with Complex Expression (Python/Django)
DESCRIPTION: Illustrates setting a database-computed default value using a more complex expression involving database functions and literals. This example calculates a date 90 days from the current time and truncates it to the month, setting it as the default for a `DateField`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_14

LANGUAGE: Python
CODE:
```
month_due = models.DateField(
    db_default=TruncMonth(
        Now() + timedelta(days=90),
        output_field=models.DateField(),
    )
)
```

----------------------------------------

TITLE: Configuring Custom Field Names in Generic Relations
DESCRIPTION: Example of setting up a GenericRelation with custom field names for content type and object ID fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
tags = GenericRelation(
    TaggedItem,
```

----------------------------------------

TITLE: Creating Aliases for `cached_property` Correctly (Django 2.2+) in Python
DESCRIPTION: This snippet illustrates the recommended method, highlighted in Django 2.2 documentation, for creating an alias for a `cached_property`. It uses the built-in `property` function along with `operator.attrgetter` to create a new property (`alias`) that correctly accesses the cached value of the original property (`base`). This avoids the potential `TypeError` raised by direct assignment.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
import operator


class A:
    ...

    alias = property(operator.attrgetter("base"))
```

----------------------------------------

TITLE: Removed Django Components and Features
DESCRIPTION: This snippet lists various Django components, classes, methods, and features that have been removed in version 2.0. It includes removals from multiple modules such as utils, template, contrib, gis, and core Django functionalities.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
django.utils.feedgenerator.RssFeed
app_name argument to include()
Field._get_val_from_obj()
django.template.loaders.eggs.Loader
current_app parameter to contrib.auth function-based views
callable_obj keyword argument to SimpleTestCase.assertRaisesMessage()
allow_tags attribute on ModelAdmin methods
enclosure keyword argument to SyndicationFeed.add_item()
django.template.loader.LoaderOrigin
django.template.base.StringOrigin
makemigrations --exit option
get_srid() and set_srid() methods of django.contrib.gis.geos.GEOSGeometry
get_x(), set_x(), get_y(), set_y(), get_z(), and set_z() methods of django.contrib.gis.geos.Point
get_coords() and set_coords() methods of django.contrib.gis.geos.Point
cascaded_union property of django.contrib.gis.geos.MultiPolygon
django.utils.functional.allow_lazy()
shell --plain option
django.core.urlresolvers module
CommaSeparatedIntegerField
Context.has_key() method
Storage.accessed_time(), created_time(), and modified_time() methods
MySQL __search lookup
User.is_authenticated() and User.is_anonymous() as methods
Model._meta.virtual_fields attribute
virtual_only in Field.contribute_to_class() and virtual in Model._meta.add_field()
javascript_catalog() and json_catalog() views
django.contrib.gis.utils.precision_wkt()
Widget._format_value()
FileField methods get_directory_name() and get_filename()
mark_for_escaping() function and related classes
Manager.use_for_related_fields
Meta.manager_inheritance_from_future
settings.MIDDLEWARE_CLASSES
```

----------------------------------------

TITLE: Using escapeseq Filter with join
DESCRIPTION: Demonstrates using the escapeseq filter in combination with join to safely escape sequence elements.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_70

LANGUAGE: html+django
CODE:
```
{% autoescape off %}
    {{ my_list|escapeseq|join:", " }}
{% endautoescape %}
```

----------------------------------------

TITLE: Using pgettext_lazy for Model Field Help Text in Django
DESCRIPTION: Shows how to use pgettext_lazy() to provide translatable help text for a model field with context, which is useful for lazy loading of translations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_10

LANGUAGE: Python
CODE:
```
from django.db import models
from django.utils.translation import pgettext_lazy


class MyThing(models.Model):
    name = models.CharField(
        help_text=pgettext_lazy("help text for MyThing model", "This is the help text")
    )
```

----------------------------------------

TITLE: Checking Divisibility with Divisibleby Filter in Django Templates - HTML+Django
DESCRIPTION: Shows how to use the 'divisibleby' filter to test if a value is divisible by a given argument (here, '3'). Takes an integer variable as input; outputs boolean True or False. Requires Django templates; no extra dependencies.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_67

LANGUAGE: html+django
CODE:
```
{{ value|divisibleby:"3" }}
```

----------------------------------------

TITLE: Inheriting Multiple Managers via Abstract Bases Django
DESCRIPTION: This snippet defines a Django model class that inherits from two abstract base classes, `AbstractBase` and `ExtraManager`. This allows the model to inherit the default manager (`CustomManager`) from `AbstractBase` and an additional manager (`OtherManager`) via the `extra_manager` attribute from `ExtraManager`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_14

LANGUAGE: Python
CODE:
```
class ChildC(AbstractBase, ExtraManager):
    # ...
    # Default manager is CustomManager, but OtherManager is
    # also available via the "extra_manager" attribute.
    pass
```

----------------------------------------

TITLE: Customizing UserCreationForm to Limit Username Length (Django Python)
DESCRIPTION: This snippet defines a custom Django form `MyUserCreationForm` inheriting from `UserCreationForm`. It overrides the `username` field to enforce a `max_length` of 30 characters, providing a way to retain the older limit after the default `AbstractUser.username` length was increased to 150 in Django 1.10.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.contrib.auth.forms import UserCreationForm


class MyUserCreationForm(UserCreationForm):
    username = forms.CharField(
        max_length=30,
        help_text="Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.",
    )
```

----------------------------------------

TITLE: Adding a Column and Updating Migration State Using RunSQL in Django (Python)
DESCRIPTION: Illustrates usage of RunSQL with state_operations, where the SQL command alters the schema and state_operations updates Django's migration state via an AddField operation. Ensures schema and migration state stay synchronized. Dependencies: Django.db.models; Inputs: SQL alteration, corresponding state operations; Output: Adds a column in database and migration state.
SOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
migrations.RunSQL(
    "ALTER TABLE musician ADD COLUMN name varchar(255) NOT NULL;",
    state_operations=[
        migrations.AddField(
            "musician",
            "name",
            models.CharField(max_length=255),
        ),
    ],
)
```

----------------------------------------

TITLE: Implementing CurrentSiteManager in a Django Model (Python)
DESCRIPTION: Shows how to add `CurrentSiteManager` to a Django model (`Photo`) alongside the default `models.Manager`. This manager automatically filters querysets to include only objects associated with the current site, identified by a `ForeignKey` named `site` by default. Requires `django.contrib.sites`, `django.db.models` and the `SITE_ID` setting to be defined.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.contrib.sites.models import Site
from django.contrib.sites.managers import CurrentSiteManager
from django.db import models


class Photo(models.Model):
    photo = models.FileField(upload_to="photos")
    photographer_name = models.CharField(max_length=100)
    pub_date = models.DateField()
    site = models.ForeignKey(Site, on_delete=models.CASCADE)
    objects = models.Manager()
    on_site = CurrentSiteManager()
```

----------------------------------------

TITLE: Using resetcycle Tag in Django Templates
DESCRIPTION: This snippet demonstrates the resetcycle tag which resets a previous cycle so it restarts from its first item. This example resets the odd/even cycle for each coach's athletes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_40

LANGUAGE: html+django
CODE:
```
{% for coach in coach_list %}
    <h1>{{ coach.name }}</h1>
    {% for athlete in coach.athlete_set.all %}
        <p class="{% cycle 'odd' 'even' %}">{{ athlete.name }}</p>
    {% endfor %}
    {% resetcycle %}
{% endfor %}
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'not_lt' Lookup in Django Python
DESCRIPTION: Leverages the `not_lt` lookup (`__not_lt`, SQL operator `&>`) on the `ages` field. This query selects `Event` objects where the `ages` range does not extend to the left of (is not strictly less than) the provided `NumericRange(0, 15)`, meaning its lower bound is greater than or equal to the lower bound of the queried range. Requires the `Event` model and `NumericRange`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_25

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__not_lt=NumericRange(0, 15))
<QuerySet [<Event: Soft play>, <Event: Pub trip>]>
```

----------------------------------------

TITLE: Using Round Function in Django Models
DESCRIPTION: Shows how to round numeric values and register Round as a transform
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Round
>>> Vector.objects.create(x=5.4, y=-2.37)
>>> vector = Vector.objects.annotate(x_r=Round("x"), y_r=Round("y", precision=1)).get()
>>> vector.x_r, vector.y_r
(5.0, -2.4)
```

LANGUAGE: python
CODE:
```
>>> from django.db.models import FloatField
>>> from django.db.models.functions import Round
>>> FloatField.register_lookup(Round)
>>> # Get vectors whose round() is less than 20
>>> vectors = Vector.objects.filter(x__round__lt=20, y__round__lt=20)
```

----------------------------------------

TITLE: Preventing Formset Memory Exhaustion with max_num (Django Formsets/Python)
DESCRIPTION: Details the introduction of the `max_num` argument for formset factories in Django 1.4.4. This enforces a strict maximum number of forms (defaulting to 1000) that can be created based on client-provided data in the management form, mitigating potential memory exhaustion vulnerabilities. This limit is configurable via the `max_num` argument passed to the formset factory.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.4.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
max_num
```

----------------------------------------

TITLE: Using the Localtime Filter
DESCRIPTION: Shows how to force conversion of a value to the current time zone using the localtime template filter.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_8

LANGUAGE: html+django
CODE:
```
{% load tz %}

{{ value|localtime }}
```

----------------------------------------

TITLE: Signing and Unsigning Values with Django's Signer Class
DESCRIPTION: Demonstrates how to use Django's Signer class to sign and unsign string values. It shows basic usage, handling of non-string values, and error handling for tampered signatures.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signing.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.core.signing import Signer
>>> signer = Signer()
>>> value = signer.sign("My string")
>>> value
'My string:v9G-nxfz3iQGTXrePqYPlGvH79WTcIgj1QIQSUODTW0'

>>> original = signer.unsign(value)
>>> original
'My string'

>>> signed = signer.sign(2.5)
>>> original = signer.unsign(signed)
>>> original
'2.5'

>>> from django.core import signing
>>> value += "m"
>>> try:
...     original = signer.unsign(value)
... except signing.BadSignature:
...     print("Tampering detected!")
...
```

----------------------------------------

TITLE: Accessing Django Database Connection Signal
DESCRIPTION: Demonstrates how to access the 'connection_created' signal from Django's database backends signals module. This signal is sent when a database connection is initiated.
SOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
django.db.backends.signals.connection_created
```

----------------------------------------

TITLE: Using GEOSGeometry Objects in GeoDjango
DESCRIPTION: Demonstrates creating models using GEOSGeometry objects, including automatic coordinate system transformation between different SRID values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.geos import GEOSGeometry
>>> poly = GEOSGeometry("POLYGON(( 10 10, 10 20, 20 20, 20 15, 10 10))")
>>> z = Zipcode(code=77096, poly=poly)
>>> z.save()
```

----------------------------------------

TITLE: Demonstrating Default Required Field Error in Django CharField using Python
DESCRIPTION: This snippet demonstrates the default behavior of a `django.forms.CharField`. When the `clean()` method is called with an empty string on a required field (which is the default), it raises a `ValidationError` with the standard message "This field is required.".
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_12

LANGUAGE: pycon
CODE:
```
>>> from django import forms
>>> generic = forms.CharField()
>>> generic.clean("")
Traceback (most recent call last):
  ...
ValidationError: ['This field is required.']
```

----------------------------------------

TITLE: Defining Asymmetric Self-Referential ManyToManyField with Through Model in Django
DESCRIPTION: This snippet defines two Django models, 'Manufacturer' and 'Supply', to demonstrate an asymmetric self-referential many-to-many relationship using an intermediary 'through' model. The 'Manufacturer' model has a 'clients' field pointing to itself via the 'Supply' model, with 'symmetrical=False' and specified 'related_name'. The 'Supply' model explicitly defines the 'supplier' and 'client' foreign keys linking back to 'Manufacturer'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_39

LANGUAGE: Python
CODE:
```
from django.db import models


class Manufacturer(models.Model):
    name = models.CharField(max_length=255)
    clients = models.ManyToManyField(
        "self", symmetrical=False, related_name="suppliers", through="Supply"
    )


class Supply(models.Model):
    supplier = models.ForeignKey(
        Manufacturer, models.CASCADE, related_name="supplies_given"
    )
    client = models.ForeignKey(
        Manufacturer, models.CASCADE, related_name="supplies_received"
    )
    product = models.CharField(max_length=255)
```

----------------------------------------

TITLE: Using translate tag with context in Django templates
DESCRIPTION: Shows how to use the context keyword with the {% translate %} tag to provide contextual information for translation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_22

LANGUAGE: html+django
CODE:
```
{% translate "May" context "month name" %}
```

----------------------------------------

TITLE: Importing Models in Django Package __init__.py (Python)
DESCRIPTION: Demonstrates how to explicitly import models from individual files within a Django application's 'models' package into the package's `__init__.py` file. This approach helps organize models when there are many, avoids namespace clutter, and improves code readability and tool compatibility.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_54

LANGUAGE: python
CODE:
```
from .organic import Person
from .synthetic import Robot
```

----------------------------------------

TITLE: Running Django project with Hypercorn
DESCRIPTION: Command to start a Django project using Hypercorn. This runs a single process listening on 127.0.0.1:8000 and requires that the project is on the Python path. For best results, run this from the same directory as your manage.py file.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/hypercorn.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
hypercorn myproject.asgi:application
```

----------------------------------------

TITLE: Creating Django Model Instances with Range Data in Python
DESCRIPTION: Demonstrates creating instances of the `Event` model using the Django ORM within a Python interactive console (`pycon`). It initializes two `Event` objects: 'Soft play' with an age range of 0 to 10 (exclusive upper bound) and 'Pub trip' with an age range starting from 21 (inclusive lower bound, unbounded upper). Requires `datetime`, `django.utils.timezone`, and the previously defined `Event` model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_17

LANGUAGE: pycon
CODE:
```
>>> import datetime
>>> from django.utils import timezone
>>> now = timezone.now()
>>> Event.objects.create(name="Soft play", ages=(0, 10), start=now)
>>> Event.objects.create(
...     name="Pub trip", ages=(21, None), start=now - datetime.timedelta(days=1)
... )
```

----------------------------------------

TITLE: Using pgettext for Contextual Translation in JavaScript
DESCRIPTION: Demonstrates the pgettext function for providing contextually translated words in JavaScript.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_41

LANGUAGE: javascript
CODE:
```
document.write(pgettext("month name", "May"))
```

----------------------------------------

TITLE: Implementing Custom CSV Deserializer in Python
DESCRIPTION: Defines a custom CSV deserializer class that extends Django's base deserializer. It reads CSV data and converts it back into model instances.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
class Deserializer(serializers.python.Deserializer):
    def __init__(self, stream_or_string, **options):
        if isinstance(stream_or_string, bytes):
            stream_or_string = stream_or_string.decode()
        if isinstance(stream_or_string, str):
            stream_or_string = stream_or_string.splitlines()
        try:
            objects = csv.DictReader(stream_or_string)
        except Exception as exc:
            raise DeserializationError() from exc
        super().__init__(objects, **options)

    def _handle_object(self, obj):
        try:
            model_fields = apps.get_model(obj["model"])._meta.fields
            obj["fields"] = {
                field.name: obj[field.name]
                for field in model_fields
                if field.name in obj
            }
            yield from super()._handle_object(obj)
        except (GeneratorExit, DeserializationError):
            raise
        except Exception as exc:
            raise DeserializationError(f"Error deserializing object: {exc}") from exc
```

----------------------------------------

TITLE: Implementing Hybrid HTML/JSON Detail View in Django
DESCRIPTION: View class capable of returning both HTML and JSON responses based on request parameters.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.views.generic.detail import SingleObjectTemplateResponseMixin


class HybridDetailView(
    JSONResponseMixin, SingleObjectTemplateResponseMixin, BaseDetailView
):
    def render_to_response(self, context):
        if self.request.GET.get("format") == "json":
            return self.render_to_json_response(context)
        else:
            return super().render_to_response(context)
```

----------------------------------------

TITLE: Adding translator comments in Django templates
DESCRIPTION: Demonstrates how to add comments for translators in Django templates using both the {% comment %} tag and one-line comment constructs.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_29

LANGUAGE: html+django
CODE:
```
{% comment %}Translators: View verb{% endcomment %}
{% translate "View" %}

{% comment %}Translators: Short intro blurb{% endcomment %}
<p>{% blocktranslate %}A multiline translatable
literal.{% endblocktranslate %}</p>

{# Translators: Label of a button that triggers search #}
<button type="submit">{% translate "Go" %}</button>

{# Translators: This is a text of the base template #}
```

----------------------------------------

TITLE: Clearing the Django Site Object Cache in Python
DESCRIPTION: Demonstrates how Django caches the current `Site` object after the first call to `Site.objects.get_current()` and how to force a database refresh using `Site.objects.clear_cache()`. Subsequent calls retrieve the cached site unless the cache is explicitly cleared. Depends on `django.contrib.sites.models.Site`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
# First call; current site fetched from database.
current_site = Site.objects.get_current()
# ...

# Second call; current site fetched from cache.
current_site = Site.objects.get_current()
# ...

# Force a database query for the third call.
Site.objects.clear_cache()
current_site = Site.objects.get_current()
```

----------------------------------------

TITLE: Conditional Block Override in Django Templates
DESCRIPTION: Shows that block tags are always evaluated first, regardless of surrounding conditional tags. This example will always override the title block content.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_13

LANGUAGE: html+django
CODE:
```
{% if change_title %}
    {% block title %}Hello!{% endblock title %}
{% endif %}
```

----------------------------------------

TITLE: Creating Custom Message Levels
DESCRIPTION: Example of defining and using a custom message level constant
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
CRITICAL = 50


def my_view(request):
    messages.add_message(request, CRITICAL, "A serious error occurred.")
```

----------------------------------------

TITLE: Field Group as_field_group Example with Django
DESCRIPTION: Shows how to use the as_field_group method to render field elements together
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_10

LANGUAGE: html+django
CODE:
```
{{ form.non_field_errors }}
<div class="fieldWrapper">
  {{ form.subject.as_field_group }}
</div>
<div class="fieldWrapper">
  {{ form.message.as_field_group }}
</div>
<div class="fieldWrapper">
  {{ form.sender.as_field_group }}
</div>
<div class="fieldWrapper">
  {{ form.cc_myself.as_field_group }}
</div>
```

----------------------------------------

TITLE: Accessing Base Model Instances via Proxy Model
DESCRIPTION: Shows that instances created using the base model (`Person`) can be accessed and retrieved using the proxy model (`MyPerson`), confirming they operate on the same underlying data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_48

LANGUAGE: pycon
CODE:
```
>>> p = Person.objects.create(first_name="foobar")
>>> MyPerson.objects.get(first_name="foobar")
<MyPerson: foobar>
```

----------------------------------------

TITLE: Override MESSAGE_LEVEL Django Python
DESCRIPTION: This snippet shows how to override the MESSAGE_LEVEL setting in Django using the imported constants. It sets the minimum message level recorded by the framework. This is necessary if you override MESSAGE_LEVEL in your settings.py and utilize the built-in constants.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_78

LANGUAGE: python
CODE:
```
MESSAGE_LEVEL = message_constants.DEBUG
```

----------------------------------------

TITLE: Creating Conditional (Partial) Indexes with Django ORM (Python)
DESCRIPTION: Demonstrates defining a partial index by passing a Q object to the 'condition' parameter, limiting the index to rows matching the given filter. This is especially useful for optimizing queries targeting table subsets. The example requires an import of Q from django.db.models; note that support varies across databases, with PostgreSQL enforcing 'IMMUTABLE' for any function and other backends ignoring the argument.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/indexes.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
condition=Q(pages__gt=400)
```

----------------------------------------

TITLE: Configuring AdminEmailHandler with HTML Emails in Django Settings
DESCRIPTION: This configuration snippet shows how to set up the `AdminEmailHandler` in Django's `LOGGING` setting. It specifies the handler's level as `ERROR` and enables HTML attachments in the error emails by setting `include_html` to `True`. This provides a richer context, similar to the debug page when `DEBUG` is `True`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
"handlers": {
    "mail_admins": {
        "level": "ERROR",
        "class": "django.utils.log.AdminEmailHandler",
        "include_html": True,
    },
}
```

----------------------------------------

TITLE: Sending Site-Specific Email in Django View
DESCRIPTION: This code snippet demonstrates how to send a site-specific email in a Django view function, using the current site's name and domain.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.contrib.sites.shortcuts import get_current_site
from django.core.mail import send_mail


def register_for_newsletter(request):
    # Check form values, etc., and subscribe the user.
    # ...

    current_site = get_current_site(request)
    send_mail(
        "Thanks for subscribing to %s alerts" % current_site.name,
        "Thanks for your subscription. We appreciate it.\n\n-The %s team."
        % (current_site.name,),
        "editor@%s" % current_site.domain,
        [user.email],
    )

    # ...
```

----------------------------------------

TITLE: Checking Current Site in Django View
DESCRIPTION: This code snippet shows how to check the current site's domain in a Django view function and perform different actions based on the result.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.contrib.sites.shortcuts import get_current_site


def my_view(request):
    current_site = get_current_site(request)
    if current_site.domain == "foo.com":
        # Do something
        pass
    else:
        # Do something else.
        pass
```

----------------------------------------

TITLE: Checking Specific Django Apps
DESCRIPTION: Shows how to use the 'check' command to run system checks on a subset of apps by providing their app labels as arguments.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_4

LANGUAGE: Console
CODE:
```
django-admin check auth admin myapp
```

----------------------------------------

TITLE: Defining GenericIPAddressField in Django
DESCRIPTION: Documents the GenericIPAddressField, used for storing IPv4 or IPv6 addresses as strings. It supports limiting input to a specific protocol ('IPv4' or 'IPv6') and unpacking IPv4 mapped addresses. Blank values are stored as null.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_24

LANGUAGE: Python
CODE:
```
GenericIPAddressField(protocol='both', unpack_ipv4=False, **options)
```

----------------------------------------

TITLE: Preventing Message Expiration in Django
DESCRIPTION: Demonstrates how to prevent messages from being cleared after accessing them by setting the storage.used flag to False.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
storage = messages.get_messages(request)
for message in storage:
    do_something_with(message)
storage.used = False
```

----------------------------------------

TITLE: Creating Test Database in Django
DESCRIPTION: The create_test_db function creates a new test database and runs migrations. It handles existing databases based on the autoclobber and keepdb flags. It returns the name of the created test database.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
create_test_db(verbosity=1, autoclobber=False, keepdb=False)
```

----------------------------------------

TITLE: Applying timesince Filter in Django Templates
DESCRIPTION: The timesince filter formats a date as the time since that date. It can take an optional argument for the comparison point.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_90

LANGUAGE: html+django
CODE:
```
{{ blog_date|timesince:comment_date }}
```

----------------------------------------

TITLE: Implementing CycleNode Render Logic in Python
DESCRIPTION: This Python snippet defines the `render` method for a Django template Node (`CycleNode`). It manages state specific to the rendering process by storing an `itertools.cycle` iterator in the `context.render_context` dictionary, keyed by the node instance (`self`). This ensures each `CycleNode` instance maintains its own cycle state within a template render, preventing conflicts. On each call, it retrieves the iterator (or creates it if not present) and returns the next value.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
        def __init__(self, cyclevars):
            self.cyclevars = cyclevars

        def render(self, context):
            if self not in context.render_context:
                context.render_context[self] = itertools.cycle(self.cyclevars)
            cycle_iter = context.render_context[self]
            return next(cycle_iter)
```

----------------------------------------

TITLE: Creating and Saving Model Instances in Django Shell (pycon)
DESCRIPTION: Demonstrates creating instances of the `Publication` model and saving them to the database using the `save()` method within a Python interactive console session (`pycon`). This prepares data for subsequent many-to-many relationship examples.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_1

LANGUAGE: pycon
CODE:
```
>>> p1 = Publication(title="The Python Journal")
>>> p1.save()
>>> p2 = Publication(title="Science News")
>>> p2.save()
>>> p3 = Publication(title="Science Weekly")
>>> p3.save()
```

----------------------------------------

TITLE: Using TrigramSimilarity for Fuzzy Text Matching
DESCRIPTION: Demonstrates how to use TrigramSimilarity to find matching records based on text similarity. This example searches for authors with names similar to a test string, filtering by a similarity threshold.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_12

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.postgres.search import TrigramSimilarity
>>> Author.objects.create(name="Katy Stevens")
>>> Author.objects.create(name="Stephen Keats")
>>> test = "Katie Stephens"
>>> Author.objects.annotate(
...     similarity=TrigramSimilarity("name", test),
... ).filter(
...     similarity__gt=0.3
... ).order_by("-similarity")
[<Author: Katy Stevens>, <Author: Stephen Keats>]
```

----------------------------------------

TITLE: Verifying Python Installation in Shell
DESCRIPTION: This snippet demonstrates how to verify Python installation by running the 'python' command in the shell. It shows the expected output, including Python version and additional information.
SOURCE: https://github.com/django/django/blob/main/docs/intro/install.txt#2025-04-23_snippet_0

LANGUAGE: pycon
CODE:
```
Python 3.x.y
[GCC 4.x] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
```

----------------------------------------

TITLE: Setting Up Django Test Runner for Reusable Applications
DESCRIPTION: This code shows how to set up a custom test runner script (runtests.py) for running tests in a reusable Django application, including setting up the Django environment and running the tests.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
#!/usr/bin/env python
import os
import sys

import django
from django.conf import settings
from django.test.utils import get_runner

if __name__ == "__main__":
    os.environ["DJANGO_SETTINGS_MODULE"] = "tests.test_settings"
    django.setup()
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    failures = test_runner.run_tests(["tests"])
    sys.exit(bool(failures))
```

----------------------------------------

TITLE: Using Django's TimestampSigner for Time-Limited Signatures
DESCRIPTION: Illustrates the use of TimestampSigner, a subclass of Signer that includes a timestamp in the signature, allowing for time-limited signature validation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signing.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> from datetime import timedelta
>>> from django.core.signing import TimestampSigner
>>> signer = TimestampSigner()
>>> value = signer.sign("hello")
>>> value
'hello:1stLqR:_rvr4oXCgT4HyfwjXaU39QvTnuNuUthFRCzNOy4Hqt0'
>>> signer.unsign(value)
'hello'
>>> signer.unsign(value, max_age=10)
SignatureExpired: Signature age 15.5289158821 > 10 seconds
>>> signer.unsign(value, max_age=20)
'hello'
>>> signer.unsign(value, max_age=timedelta(seconds=20))
'hello'
```

----------------------------------------

TITLE: Conditional Widget Type Rendering in Django Template
DESCRIPTION: Template code showing how to conditionally render form fields based on their widget type.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_38

LANGUAGE: html+django
CODE:
```
{% for field in form %}
    {% if field.widget_type == 'checkbox' %}
        # render one way
    {% else %}
        # render another way
    {% endif %}
{% endfor %}
```

----------------------------------------

TITLE: Implementing value_to_string method for HandField in Django
DESCRIPTION: This snippet shows how to implement the value_to_string method for a custom HandField in Django. It demonstrates how to convert the field's value to a string representation using existing conversion methods.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
class HandField(models.Field):
    # ...

    def value_to_string(self, obj):
        value = self.value_from_object(obj)
        return self.get_prep_value(value)
```

----------------------------------------

TITLE: Creating Custom Permissions Programmatically in Django
DESCRIPTION: This code creates a custom permission for a BlogPost model. It first gets the content type for the model, then creates a permission with a specified codename, name, and content type. This permission can then be assigned to users or groups.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from myapp.models import BlogPost
from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType

content_type = ContentType.objects.get_for_model(BlogPost)
permission = Permission.objects.create(
    codename="can_publish",
    name="Can Publish Posts",
    content_type=content_type,
)
```

----------------------------------------

TITLE: Direct Serializer Usage
DESCRIPTION: Example of using a serializer object directly with file output support.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
XMLSerializer = serializers.get_serializer("xml")
xml_serializer = XMLSerializer()
xml_serializer.serialize(queryset)
data = xml_serializer.getvalue()
```

----------------------------------------

TITLE: Non-Atomic Migration Class
DESCRIPTION: Example of creating a Django migration class that runs outside of a transaction by setting atomic=False.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.db import migrations


class Migration(migrations.Migration):
    atomic = False
```

----------------------------------------

TITLE: Defining Django ArchiveIndexView Class
DESCRIPTION: Defines the ArchiveIndexView class in Django, used for displaying archives of objects. It includes a comprehensive list of attributes and methods for this view.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_10

LANGUAGE: Python
CODE:
```
class ArchiveIndexView():
    # Attributes and methods listed in the documentation
```

----------------------------------------

TITLE: Querying Spatial Above Overlap in PostGIS
DESCRIPTION: Example of using the 'overlaps_above' lookup to find geometries whose bounding box overlaps or is above a given geometry's bounding box in PostGIS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__overlaps_above=geom)
```

----------------------------------------

TITLE: Customizing AuthenticationForm in Python
DESCRIPTION: Example of subclassing AuthenticationForm to allow all users to log in regardless of 'active' status.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_36

LANGUAGE: python
CODE:
```
from django.contrib.auth.forms import AuthenticationForm


class AuthenticationFormWithInactiveUsersOkay(AuthenticationForm):
    def confirm_login_allowed(self, user):
        pass
```

----------------------------------------

TITLE: Database Connection Check in RunPython Migration
DESCRIPTION: Shows how to check database connection alias in a RunPython operation to run migrations selectively on specific databases.
SOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import migrations

def forwards(apps, schema_editor):
    if schema_editor.connection.alias != "default":
        return
    # Your migration code goes here

class Migration(migrations.Migration):
    dependencies = [
        # Dependencies to other migrations
    ]

    operations = [
        migrations.RunPython(forwards),
    ]
```

----------------------------------------

TITLE: Setting Message Level Per-Request in Django
DESCRIPTION: Shows how to set the minimum recorded message level for a request using the set_level method and retrieve the current level with get_level.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.contrib import messages

# Change the messages level to ensure the debug message is added.
messages.set_level(request, messages.DEBUG)
messages.debug(request, "Test message...")

# In another request, record only messages with a level of WARNING and higher
messages.set_level(request, messages.WARNING)
messages.success(request, "Your profile was updated.")  # ignored
messages.warning(request, "Your account is about to expire.")  # recorded

# Set the messages level back to default.
messages.set_level(request, None)
```

----------------------------------------

TITLE: Using UserAttributeSimilarityValidator in Django
DESCRIPTION: The UserAttributeSimilarityValidator class is used for password validation in Django. It compares submitted passwords to user attributes to prevent similar passwords. The implementation has been updated to ignore relatively long values to mitigate potential denial-of-service attacks.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
UserAttributeSimilarityValidator
```

----------------------------------------

TITLE: Using keep_lazy_text Decorator for Text-Returning Functions in Python
DESCRIPTION: Shows how to use the keep_lazy_text decorator, which is a shortcut for keep_lazy(str), for functions that return text and need to handle lazy arguments.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
from django.utils.functional import keep_lazy, keep_lazy_text


# Our previous example was:
@keep_lazy(str)
def fancy_utility_function(s, *args, **kwargs): ...


# Which can be rewritten as:
@keep_lazy_text
def fancy_utility_function(s, *args, **kwargs): ...
```

----------------------------------------

TITLE: Detecting AJAX Requests Using Headers in Django - Python
DESCRIPTION: This snippet provides a method to replicate the deprecated HttpRequest.is_ajax() functionality by directly inspecting the 'X-Requested-With' request header. It assumes a Django view context and utilizes the request object's headers dictionary to check if the AJAX-specific value ('XMLHttpRequest') is present. There are no third-party dependencies required, and the function returns a boolean indicating whether the request was sent via AJAX. Limitations include reliance on the client correctly setting the header, which is standard practice but not guaranteed.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
request.headers.get('x-requested-with') == 'XMLHttpRequest'
```

----------------------------------------

TITLE: Creating README for a Reusable Django App
DESCRIPTION: Provides a template for a README file in RST format for a reusable Django app. The README includes a brief description of the app, installation instructions, and quick start guide.
SOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_2

LANGUAGE: rst
CODE:
```
============
django-polls
============

django-polls is a Django app to conduct web-based polls. For each
question, visitors can choose between a fixed number of answers.

Detailed documentation is in the "docs" directory.

Quick start
-----------

1. Add "polls" to your INSTALLED_APPS setting like this::

    INSTALLED_APPS = [
        ...,
        "django_polls",
    ]

2. Include the polls URLconf in your project urls.py like this::

    path("polls/", include("django_polls.urls")),

3. Run ``python manage.py migrate`` to create the models.

4. Start the development server and visit the admin to create a poll.

5. Visit the ``/polls/`` URL to participate in the poll.
```

----------------------------------------

TITLE: Disabling Media Inheritance in Extended Widgets in Django
DESCRIPTION: Shows how to prevent a widget from inheriting media assets from its parent by setting extend=False in its Media class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> class FancyCalendarWidget(CalendarWidget):
...     class Media:
...         extend = False
...         css = {
...             "all": ["fancy.css"],
...         }
...         js = ["whizbang.js"]
...

>>> w = FancyCalendarWidget()
>>> print(w.media)
<link href="https://static.example.com/fancy.css" media="all" rel="stylesheet">
<script src="https://static.example.com/whizbang.js"></script>
```

----------------------------------------

TITLE: Overriding Model.refresh_from_db to Load All Deferred Fields in Django (Python)
DESCRIPTION: Demonstrates overriding the `refresh_from_db` method on a Django model (`ExampleModel`). The custom implementation checks if the `fields` argument (containing the field(s) to be reloaded) includes any deferred fields for the instance. If so, it modifies the `fields` set to include *all* deferred fields before calling the parent implementation via `super()`, effectively ensuring all deferred data is loaded at once when any single deferred field is accessed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class ExampleModel(models.Model):
    def refresh_from_db(self, using=None, fields=None, **kwargs):
        # fields contains the name of the deferred field to be
        # loaded.
        if fields is not None:
            fields = set(fields)
            deferred_fields = self.get_deferred_fields()
            # If any deferred field is going to be loaded
            if fields.intersection(deferred_fields):
                # then load all of them
                fields = fields.union(deferred_fields)
        super().refresh_from_db(using, fields, **kwargs)
```

----------------------------------------

TITLE: Using rjust Filter in Django Templates
DESCRIPTION: The rjust filter right-aligns the value in a field of a given width. It takes the field size as an argument.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_83

LANGUAGE: html+django
CODE:
```
"{{ value|rjust:"10" }}"
```

----------------------------------------

TITLE: Overriding Storage Settings in Django Tests
DESCRIPTION: Example test that overrides storage settings using the Django test utilities. This ensures the LazyObject approach works correctly by verifying the storage instance is of the expected type.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
@override_settings(
    STORAGES={
        "mystorage": {
            "BACKEND": "django.core.files.storage.InMemoryStorage",
        }
    }
)
def test_storage():
    model = MyModel()
    assert isinstance(model.upload.storage, InMemoryStorage)
```

----------------------------------------

TITLE: Using Custom UserCreationForm in Django Admin (Django Python)
DESCRIPTION: This code demonstrates how to integrate a custom user creation form (`MyUserCreationForm`) into the Django admin interface. It defines a custom `UserAdmin` class that specifies `MyUserCreationForm` as its `add_form`, then unregisters the default `User` admin and registers the `User` model with the custom admin class.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.contrib.auth.models import User


class UserAdmin(BaseUserAdmin):
    add_form = MyUserCreationForm


admin.site.unregister(User)
admin.site.register(User, UserAdmin)
```

----------------------------------------

TITLE: Filtering by Day - SQL Equivalent
DESCRIPTION: Translates Django day filters into SQL by extracting day numbers with EXTRACT and applying comparisons. Inputs and outputs as above, syntax will depend on SQL engine. Can match multiple records from different months that share the same day value.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_110

LANGUAGE: sql
CODE:
```
SELECT ... WHERE EXTRACT('day' FROM pub_date) = '3';
SELECT ... WHERE EXTRACT('day' FROM pub_date) >= '3';
```

----------------------------------------

TITLE: Setting Django Admin Session Cookie Domain
DESCRIPTION: Example of configuring the SESSION_COOKIE_DOMAIN setting to resolve login issues when the cookie domain doesn't match the browser domain.
SOURCE: https://github.com/django/django/blob/main/docs/faq/admin.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
SESSION_COOKIE_DOMAIN = 'www.example.com'
```

----------------------------------------

TITLE: SQL Representation of OR Combination (SQL)
DESCRIPTION: Provides the SQL equivalent for combining query conditions using the OR operator. Filters rows where either x=1 or y=2.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_63

LANGUAGE: sql
CODE:
```
SELECT ... WHERE x=1 OR y=2
```

----------------------------------------

TITLE: Implementing Basic Custom Storage Class in Django
DESCRIPTION: Shows how to create a basic subclass of Django's Storage class, which is the first step in implementing custom file storage.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-file-storage.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.core.files.storage import Storage


class MyStorage(Storage): ...
```

----------------------------------------

TITLE: Manually Selecting Databases for Django QuerySets
DESCRIPTION: Examples of how to manually select a specific database for Django QuerySets using the using() method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
# This will run on the 'default' database.
Author.objects.all()

# So will this.
Author.objects.using("default")

# This will run on the 'other' database.
Author.objects.using("other")
```

----------------------------------------

TITLE: Preserving Text Space with spaceless Tag in Django Templates
DESCRIPTION: This snippet shows that the spaceless tag only removes space between tags, not space between tags and text. The whitespace around the word 'Hello' is preserved in this example.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_43

LANGUAGE: html+django
CODE:
```
{% spaceless %}
    <strong>
        Hello
    </strong>
{% endspaceless %}
```

----------------------------------------

TITLE: Defining a Geographic Model in GeoDjango
DESCRIPTION: Creates a Django model class 'WorldBorder' with fields corresponding to attributes in the world borders shapefile, including a MultiPolygonField for storing geographic data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
from django.contrib.gis.db import models


class WorldBorder(models.Model):
    # Regular Django fields corresponding to the attributes in the
    # world borders shapefile.
    name = models.CharField(max_length=50)
    area = models.IntegerField()
    pop2005 = models.IntegerField("Population 2005")
    fips = models.CharField("FIPS Code", max_length=2, null=True)
    iso2 = models.CharField("2 Digit ISO", max_length=2)
    iso3 = models.CharField("3 Digit ISO", max_length=3)
    un = models.IntegerField("United Nations Code")
    region = models.IntegerField("Region Code")
    subregion = models.IntegerField("Sub-Region Code")
    lon = models.FloatField()
    lat = models.FloatField()

    # GeoDjango-specific: a geometry field (MultiPolygonField)
    mpoly = models.MultiPolygonField()

    # Returns the string representation of the model.
    def __str__(self):
        return self.name
```

----------------------------------------

TITLE: Accessing PostgreSQL Database Shell with Query
DESCRIPTION: Demonstrates using the 'dbshell' command with a '--' separator to pass a raw SQL query to the underlying PostgreSQL client using the '-c' option.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_10

LANGUAGE: Console
CODE:
```
$ django-admin dbshell -- -c 'select current_user'
 current_user
--------------
 postgres
(1 row)
```

----------------------------------------

TITLE: Using Callable Path in Django FilePathField (Python)
DESCRIPTION: Demonstrates how to use a callable function to dynamically set the `path` attribute for a `FilePathField` in a Django model. The example defines a function `images_path` that constructs the path using `os.path.join` and Django settings, then assigns it to the `path` argument of `FilePathField`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_23

LANGUAGE: Python
CODE:
```
import os
from django.conf import settings
from django.db import models


def images_path():
    return os.path.join(settings.LOCAL_FILE_DIR, "images")


class MyModel(models.Model):
    file = models.FilePathField(path=images_path)
```

----------------------------------------

TITLE: Accessing MySQL/MariaDB Database Shell with Query
DESCRIPTION: Demonstrates using the 'dbshell' command with a '--' separator to pass a raw SQL query to the underlying MySQL/MariaDB client using the '-e' option.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_11

LANGUAGE: Console
CODE:
```
$ django-admin dbshell -- -e "select user()"
+----------------------+
| user()               |
+----------------------+
| djangonaut@localhost |
+----------------------+
```

----------------------------------------

TITLE: Creating Django Apps/Projects in a Specific Directory (Shell)
DESCRIPTION: Shows the usage of the `startapp` and `startproject` commands in Django 1.4 with an optional destination directory argument. The first command creates a new app named `myapp` inside `/path/to/new/app`, and the second creates a project `myproject` inside `/path/to/new/project`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
django-admin.py startapp myapp /path/to/new/app
django-admin.py startproject myproject /path/to/new/project
```

----------------------------------------

TITLE: Rendering Django Form with Error Messages and ARIA Attributes
DESCRIPTION: Example HTML output of a rendered Django form with validation errors. Shows how Django automatically adds aria-invalid and aria-describedby attributes to associate error messages with form inputs for accessibility.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_32

LANGUAGE: html
CODE:
```
<div>
  <label for="id_subject">Subject:</label>
  <ul class="errorlist" id="id_subject_error"><li>This field is required.</li></ul>
  <input type="text" name="subject" maxlength="100" required aria-invalid="true" aria-describedby="id_subject_error" id="id_subject">
</div>
<div>
  <label for="id_message">Message:</label>
  <textarea name="message" cols="40" rows="10" required id="id_message">Hi there</textarea>
</div>
<div>
  <label for="id_sender">Sender:</label>
  <ul class="errorlist" id="id_sender_error"><li>Enter a valid email address.</li></ul>
  <input type="email" name="sender" value="invalid email address" maxlength="320" required aria-invalid="true" aria-describedby="id_sender_error" id="id_sender">
</div>
<div>
    <label for="id_cc_myself">Cc myself:</label>
    <input type="checkbox" name="cc_myself" id="id_cc_myself" checked>
</div>
```

----------------------------------------

TITLE: Rendering a Django Template with Different Contexts (Python Console)
DESCRIPTION: Demonstrates the process of rendering a compiled Django `Template` object multiple times with different `Context` objects in a Python interactive session (pycon). It first imports `Context` and `Template`, creates a `Template` instance, then creates two separate `Context` instances with different values for the 'my_name' variable, and finally calls the `template.render()` method with each context to produce the final rendered strings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_3

LANGUAGE: pycon
CODE:
```
>>> from django.template import Context, Template
>>> template = Template("My name is {{ my_name }}.")

>>> context = Context({"my_name": "Adrian"})
>>> template.render(context)
"My name is Adrian."

>>> context = Context({"my_name": "Dolores"})
>>> template.render(context)
"My name is Dolores."
```

----------------------------------------

TITLE: Configuring Default Exception Reporter Filter in Django
DESCRIPTION: Sets the default exception reporter filter class ('django.views.debug.SafeExceptionReporterFilter') used if none is assigned to the HttpRequest instance. This allows filtering of sensitive information in error reports.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_19

LANGUAGE: python
CODE:
```
DEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'
```

----------------------------------------

TITLE: Caching Template Fragment with Variable Timeout in Django
DESCRIPTION: Illustrates how to use a variable for the cache timeout in the {% cache %} tag.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_27

LANGUAGE: html+django
CODE:
```
{% cache 600 sidebar %} ... {% endcache %}
{% cache my_timeout sidebar %} ... {% endcache %}
```

----------------------------------------

TITLE: Defining Item Publication Date in Django Feed
DESCRIPTION: This snippet demonstrates three methods to specify the publication date for items in a Django feed: a method taking an item, a method for all items, and a hard-coded attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
def item_pubdate(self, item):
    """
    Takes an item, as returned by items(), and returns the item's
    pubdate.
    """

def item_pubdate(self):
    """
    Returns the pubdate for every item in the feed.
    """

item_pubdate = datetime.datetime(2005, 5, 3)  # Hard-coded pubdate.
```

----------------------------------------

TITLE: Example HTML Output for Custom Radio Buttons
DESCRIPTION: This HTML code block shows the rendered output resulting from the previous Django template example. Each radio button input is nested within its label tag, along with the choice text, demonstrating the customized structure achieved through template iteration.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_19

LANGUAGE: html
CODE:
```
<fieldset>
    <legend>Radio buttons</legend>
    <label for="id_beatles_0">
        John
        <span class="radio"><input id="id_beatles_0" name="beatles" type="radio" value="john" required></span>
    </label>
    <label for="id_beatles_1">
        Paul
        <span class="radio"><input id="id_beatles_1" name="beatles" type="radio" value="paul" required></span>
    </label>
    <label for="id_beatles_2">
        George
        <span class="radio"><input id="id_beatles_2" name="beatles" type="radio" value="george" required></span>
    </label>
    <label for="id_beatles_3">
        Ringo
        <span class="radio"><input id="id_beatles_3" name="beatles" type="radio" value="ringo" required></span>
    </label>
</fieldset>
```

----------------------------------------

TITLE: Invalidating Cached Template Fragment in Django
DESCRIPTION: Shows how to invalidate a cached template fragment using the make_template_fragment_key function and the cache.delete method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_29

LANGUAGE: pycon
CODE:
```
>>> from django.core.cache import cache
>>> from django.core.cache.utils import make_template_fragment_key
# cache key for {% cache 500 sidebar username %}
>>> key = make_template_fragment_key("sidebar", [username])
>>> cache.delete(key)  # invalidates cached template fragment
True
```

----------------------------------------

TITLE: Setting Default Exception Reporter in Django
DESCRIPTION: Defines the default exception reporter class ('django.views.debug.ExceptionReporter') used when no specific reporter is assigned to an HttpRequest instance. This is relevant for custom error reporting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_18

LANGUAGE: python
CODE:
```
DEFAULT_EXCEPTION_REPORTER = 'django.views.debug.ExceptionReporter'
```

----------------------------------------

TITLE: Customizing Deletion Widget in Django Formset
DESCRIPTION: Shows how to customize the widget used for deletion in a Django formset by setting the deletion_widget attribute or overriding the get_deletion_widget method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_22

LANGUAGE: pycon
CODE:
```
>>> from django.forms import BaseFormSet, formset_factory
>>> from myapp.forms import ArticleForm
>>> class BaseArticleFormSet(BaseFormSet):
...     deletion_widget = HiddenInput
...

>>> ArticleFormSet = formset_factory(
...     ArticleForm, formset=BaseArticleFormSet, can_delete=True
... )
```

LANGUAGE: pycon
CODE:
```
>>> from django.forms import BaseFormSet, formset_factory
>>> from myapp.forms import ArticleForm
>>> class BaseArticleFormSet(BaseFormSet):
...     def get_deletion_widget(self):
...         return HiddenInput(attrs={"class": "deletion"})
...

>>> ArticleFormSet = formset_factory(
...     ArticleForm, formset=BaseArticleFormSet, can_delete=True
... )
```

----------------------------------------

TITLE: Handling Savepoint Rollbacks with on_commit Callbacks
DESCRIPTION: Demonstrates how on_commit callbacks are discarded when a savepoint is rolled back due to an exception, while callbacks registered in the outer transaction are still executed.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
with transaction.atomic():  # Outer atomic, start a new transaction
    transaction.on_commit(foo)

    try:
        with transaction.atomic():  # Inner atomic block, create a savepoint
            transaction.on_commit(bar)
            raise SomeError()  # Raising an exception - abort the savepoint
    except SomeError:
        pass

# foo() will be called, but not bar()
```

----------------------------------------

TITLE: Defining Orderable Related Objects with `order_with_respect_to` in Django (Python)
DESCRIPTION: Shows how to make related objects (`Answer`) orderable with respect to a parent object (`Question`) using the `order_with_respect_to` Meta option set to the `ForeignKey` field ('question'). This is useful when the order of related items matters.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
from django.db import models


class Question(models.Model):
    text = models.TextField()
    # ...


class Answer(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    # ...

    class Meta:
        order_with_respect_to = "question"
```

----------------------------------------

TITLE: Disabling Label and id Generation in Django Forms with auto_id=False - Python
DESCRIPTION: Illustrates the effect of setting auto_id to False in the Django Form constructor, which suppresses the rendering of <label> tags and id attributes in generated HTML. The input is a Form instance created with auto_id=False. Outputs are HTML fragments for each field without label tags or id attributes. Useful for cases where custom markup handling is required, or when default Django accessibility behaviors are not desired.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
>>> f = ContactForm(auto_id=False)
>>> print(f)
<div>Subject:<input type="text" name="subject" maxlength="100" required></div>
<div>Message:<textarea name="message" cols="40" rows="10" required></textarea></div>
<div>Sender:<input type="email" name="sender" required></div>
<div>Cc myself:<input type="checkbox" name="cc_myself"></div>
```

----------------------------------------

TITLE: Testing Language Override in Django
DESCRIPTION: A test method that demonstrates using translation.override to test language-specific content in a response.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
def test_language_using_override(self):
    with translation.override("fr"):
        response = self.client.get("/")
    self.assertEqual(response.content, b"Bienvenue sur mon site.")
```

----------------------------------------

TITLE: Setting Order of Related Objects in Django (Pycon)
DESCRIPTION: Shows how to use the `set_RELATED_order()` method (e.g., `set_answer_order()`) on a parent object (`question`) to define a new order for its related objects (`Answer`) by passing a list of their primary keys. This method is available when `order_with_respect_to` is set.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_7

LANGUAGE: pycon
CODE:
```
>>> question.set_answer_order([3, 1, 2])
```

----------------------------------------

TITLE: Pickling and Unpickling a Django QuerySet's Query Attribute in Python
DESCRIPTION: Demonstrates how to pickle only the query definition (not the results) by pickling the QuerySet's `query` attribute. This pickled state can be loaded later and assigned to a new QuerySet's `query` attribute to recreate the original query without hitting the database during unpickling.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_4

LANGUAGE: python
CODE:
```
>>> import pickle
>>> query = pickle.loads(s)  # Assuming 's' is the pickled string.
>>> qs = MyModel.objects.all()
>>> qs.query = query  # Restore the original 'query'.
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'fully_lt' Lookup in Django Python
DESCRIPTION: Employs the `fully_lt` lookup (`__fully_lt`, SQL operator `<<`) on the `ages` field. This query retrieves `Event` objects where the entire `ages` range is strictly less than (comes entirely before) the provided `NumericRange(11, 15)`. Requires the `Event` model and `NumericRange`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_23

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__fully_lt=NumericRange(11, 15))
<QuerySet [<Event: Soft play>]>
```

----------------------------------------

TITLE: Using week_day lookup in Django querysets
DESCRIPTION: Shows how to use the new week_day lookup type for DateField and DateTimeField to filter objects based on the day of the week.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
Model.objects.filter(date_field__week_day=2)  # Monday
```

----------------------------------------

TITLE: Defining Static Media Requirements for a Custom Widget in Django
DESCRIPTION: Demonstrates how to create a CalendarWidget that extends TextInput and defines CSS and JavaScript requirements using a static inner Media class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django import forms


class CalendarWidget(forms.TextInput):
    class Media:
        css = {
            "all": ["pretty.css"],
        }
        js = ["animations.js", "actions.js"]
```

----------------------------------------

TITLE: Documenting Django View Example - Python
DESCRIPTION: Example showing how to document a Django view function with docstrings that describe the view's purpose, context variables, and template usage.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/admindocs.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.shortcuts import render

from myapp.models import MyModel


def my_view(request, slug):
    """
    Display an individual :model:`myapp.MyModel`.

    **Context**

    ``mymodel``
        An instance of :model:`myapp.MyModel`.

    **Template:**

    :template:`myapp/my_template.html`
    """
    context = {"mymodel": MyModel.objects.get(slug=slug)}
    return render(request, "myapp/my_template.html", context)
```

----------------------------------------

TITLE: Working with Image Data in Django ImageField
DESCRIPTION: Example showing how to properly access image data from an ImageField using PIL. It demonstrates that while some metadata is directly accessible, working with the actual image requires reopening the file.
SOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> from PIL import Image
>>> car = Car.objects.get(name="57 Chevy")
>>> car.photo.width
191
>>> car.photo.height
287
>>> image = Image.open(car.photo)
# Raises ValueError: seek of closed file.
>>> car.photo.open()
<ImageFieldFile: cars/chevy.jpg>
>>> image = Image.open(car.photo)
>>> image
<PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=191x287 at 0x7F99A94E9048>
```

----------------------------------------

TITLE: Django Format Module Path Setting
DESCRIPTION: Defines `FORMAT_MODULE_PATH`, a list of Python paths to custom locale-specific format definitions. Django searches these paths for `formats.py` files. Defaults to `None`, meaning no custom formats.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_47

LANGUAGE: plaintext
CODE:
```
FORMAT_MODULE_PATH
----------------------

Default: `None`

A full Python path to a Python package that contains custom format definitions
for project locales. If not `None`, Django will check for a `formats.py`
file, under the directory named as the current locale, and will use the
formats defined in this file.

The name of the directory containing the format definitions is expected to be
named using :term:`locale name` notation, for example `de`, `pt_BR`, `en_US`, etc.

For example, if :setting:`FORMAT_MODULE_PATH` is set to `mysite.formats`,
and current language is `en` (English), Django will expect a directory tree
like:

    mysite/
        formats/
            __init__.py
            en/
                __init__.py
                formats.py

You can also set this setting to a list of Python paths, for example::

    FORMAT_MODULE_PATH = [
        "mysite.formats",
        "some_app.formats",
    ]

When Django searches for a certain format, it will go through all given Python
paths until it finds a module that actually defines the given format. This
means that formats defined in packages farther up in the list will take
precedence over the same formats in packages farther down.

Available formats are:

* :setting:`DATE_FORMAT`
* :setting:`DATE_INPUT_FORMATS`
* :setting:`DATETIME_FORMAT`
* :setting:`DATETIME_INPUT_FORMATS`
* :setting:`DECIMAL_SEPARATOR`
* :setting:`FIRST_DAY_OF_WEEK`
* :setting:`MONTH_DAY_FORMAT`
* :setting:`NUMBER_GROUPING`
* :setting:`SHORT_DATE_FORMAT`
* :setting:`SHORT_DATETIME_FORMAT`
* :setting:`THOUSAND_SEPARATOR`
* :setting:`TIME_FORMAT`
* :setting:`TIME_INPUT_FORMATS`
* :setting:`YEAR_MONTH_FORMAT`
```

----------------------------------------

TITLE: Clearing select_related fields in Django QuerySet
DESCRIPTION: Shows how to clear the list of related fields added by previous select_related() calls by passing None as a parameter.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_37

LANGUAGE: python
CODE:
```
>>> without_relations = queryset.select_related(None)
```

----------------------------------------

TITLE: Defining WeekMixin Class in Django
DESCRIPTION: WeekMixin class provides functionality for retrieving and parsing the week component of a date. It includes methods for getting the week format, retrieving the week value, and navigating to next and previous weeks.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
class WeekMixin:
    week_format = '%U'
    week = None

    def get_week_format(self):
        return self.week_format

    def get_week(self):
        # Implementation details omitted
        pass

    def get_next_week(self, date):
        # Implementation details omitted
        pass

    def get_prev_week(self, date):
        # Implementation details omitted
        pass
```

----------------------------------------

TITLE: Using Length Function with Django GIS
DESCRIPTION: Example showing how to use the Length function to annotate and filter geographic data based on line length.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.db.models.functions import Length
>>> Track.objects.annotate(length=Length("line")).filter(length__gt=100)
```

----------------------------------------

TITLE: Adding Built-in Template Tags/Filters to Django Engine
DESCRIPTION: Illustrates how to add custom template tag modules to the list of built-in libraries when configuring the Django `Engine`. By providing a list of dotted Python paths to the `builtins` parameter (e.g., `['myapp.builtins']`), the tags and filters defined in those modules become available in all templates without needing an explicit `{% load %}` tag.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
Engine(
    builtins=["myapp.builtins"],
)
```

----------------------------------------

TITLE: Running Django Tests Sequentially with SerializeMixin
DESCRIPTION: This code snippet demonstrates how to use SerializeMixin to ensure that certain test classes run sequentially, which is useful for tests that share common resources and cannot be run in parallel.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
import os

from django.test import TestCase
from django.test.testcases import SerializeMixin


class ImageTestCaseMixin(SerializeMixin):
    lockfile = __file__

    def setUp(self):
        self.filename = os.path.join(temp_storage_dir, "my_file.png")
        self.file = create_file(self.filename)


class RemoveImageTests(ImageTestCaseMixin, TestCase):
    def test_remove_image(self):
        os.remove(self.filename)
        self.assertFalse(os.path.exists(self.filename))


class ResizeImageTests(ImageTestCaseMixin, TestCase):
    def test_resize_image(self):
        resize_image(self.file, (48, 48))
        self.assertEqual(get_image_size(self.file), (48, 48))
```

----------------------------------------

TITLE: Customizing Django Admin Base Site Template
DESCRIPTION: Example of customizing the Django admin base site template by modifying the branding block to change the site header and include color theme toggle.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_7

LANGUAGE: html
CODE:
```
{% block branding %}
<div id="site-name"><a href="{% url 'admin:index' %}">Polls Administration</a></div>
{% if user.is_anonymous %}
  {% include "admin/color_theme_toggle.html" %}
{% endif %}
{% endblock %}
```

----------------------------------------

TITLE: Setting Blank Label for Choices Enumeration (Python/Django)
DESCRIPTION: Explains how to define a custom label for the "blank" or "unknown" choice in a `Choices` enumeration, particularly when the enumeration uses a concrete data type that doesn't allow `None`. This is done by setting the `__empty__` class attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_11

LANGUAGE: Python
CODE:
```
class Answer(models.IntegerChoices):
    NO = 0, _("No")
    YES = 1, _("Yes")

    __empty__ = _("(Unknown)")
```

----------------------------------------

TITLE: Formatting Form Errors in Django Templates
DESCRIPTION: This template code iterates through a collection of errors organized by field names. It creates a hierarchical bullet-point structure where each field name is displayed as a top-level bullet, followed by nested bullets for each error message associated with that field.
SOURCE: https://github.com/django/django/blob/main/django/forms/templates/django/forms/errors/dict/text.txt#2025-04-23_snippet_0

LANGUAGE: django-template
CODE:
```
{% for field, errors in errors %}* {{ field }}
{% for error in errors %}  * {{ error }}
{% endfor %}{% endfor %}
```

----------------------------------------

TITLE: Filtering Annotated QuerySet by Window Function Rank - Django ORM - Python
DESCRIPTION: Example of annotating a QuerySet with a window function (rank within category) and another aggregation (count of actors), then filtering using a disjunctive predicate (OR). Requires Django ORM and Q objects. The usage demonstrates a limitation: filtering with OR against a window annotation results in a NotImplementedError due to unsupported post-aggregation disjunctive conditions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
>>> qs = Movie.objects.annotate(
...     category_rank=Window(Rank(), partition_by="category", order_by="-rating"),
...     scenes_count=Count("actors"),
... ).filter(Q(category_rank__lte=3) | Q(title__contains="Batman"))
>>> list(qs)
NotImplementedError: Heterogeneous disjunctive predicates against window functions
are not implemented when performing conditional aggregation.
```

----------------------------------------

TITLE: Configuring Custom Exception Reporter Filter in Django Settings
DESCRIPTION: Shows how to set a custom exception reporter filter in Django settings. This allows site-wide customization of error report filtering behavior.
SOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
DEFAULT_EXCEPTION_REPORTER_FILTER = "path.to.your.CustomExceptionReporterFilter"
```

----------------------------------------

TITLE: Using gettext in JavaScript
DESCRIPTION: Example of using the gettext function for translation in JavaScript code.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_36

LANGUAGE: javascript
CODE:
```
document.write(gettext("this is to be translated"))
```

----------------------------------------

TITLE: Querying Django HStoreField: values Lookup with ArrayField Contains (Python)
DESCRIPTION: Shows how to use the 'values' transform for HStoreField, combined with the 'contains' lookup, to filter objects whose dict values include those in the given array (uses SQL avals()). Available in Django with PostgreSQL hstore. Input is a list of expected values; output is a QuerySet of matching objects. Note: Result order of values is not guaranteed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_15

LANGUAGE: pycon
CODE:
```
>>> Dog.objects.create(name="Rufus", data={"breed": "labrador"})\n>>> Dog.objects.create(name="Meg", data={"breed": "collie", "owner": "Bob"})\n\n>>> Dog.objects.filter(data__values__contains=["collie"])\n<QuerySet [<Dog: Meg>]>
```

----------------------------------------

TITLE: Using isolate_apps Decorator for Model Definition Testing in Django
DESCRIPTION: This code snippet illustrates how to use the isolate_apps decorator in a Django test case. It demonstrates defining test models with automatic and explicit app label assignment within an isolated environment.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
from django.db import models
from django.test import SimpleTestCase
from django.test.utils import isolate_apps


class TestModelDefinition(SimpleTestCase):
    @isolate_apps("app_label", "other_app_label")
    def test_model_definition(self):
        # This model automatically receives app_label='app_label'
        class TestModel(models.Model):
            pass

        class OtherAppModel(models.Model):
            class Meta:
                app_label = "other_app_label"

        ...
```

----------------------------------------

TITLE: Configuring Language-Specific Search in Django with PostgreSQL
DESCRIPTION: Shows how to specify a different search configuration for language-specific searches.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> from django.contrib.postgres.search import SearchQuery, SearchVector
>>> Entry.objects.annotate(
...     search=SearchVector("body_text", config="french"),
... ).filter(search=SearchQuery("œuf", config="french"))
[<Entry: Pain perdu>]
```

----------------------------------------

TITLE: Setting Session Values (Async)
DESCRIPTION: Example of setting a value in the session dictionary using the asynchronous aset method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
await request.session.aset('fav_color', 'red')
```

----------------------------------------

TITLE: Emulating XOR with CASE and MOD (SQL, portable approach)
DESCRIPTION: Provides the portable SQL approach Django uses for databases that do not natively support XOR. It sums CASE expressions for each condition and checks if the sum is odd, matching rows where conditions are met an odd number of times.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_66

LANGUAGE: sql
CODE:
```
(x OR y OR ... OR z) AND
1=MOD(
    (CASE WHEN x THEN 1 ELSE 0 END) +
    (CASE WHEN y THEN 1 ELSE 0 END) +
    ...
    (CASE WHEN z THEN 1 ELSE 0 END),
    2
)
```

----------------------------------------

TITLE: Reversible Data Changes with RunSQL in Django (Python)
DESCRIPTION: Shows how to make a migration operation reversible by supplying both SQL and reverse_sql for RunSQL. When rolling back, the specified reverse SQL will delete the inserted data. Useful for robust migration practices. Requirements: Django migrations; Inputs: SQL and reverse SQL as lists of tuples.
SOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
migrations.RunSQL(
    sql=[("INSERT INTO musician (name) VALUES (%s);", ["Reinhardt"])],
    reverse_sql=[("DELETE FROM musician where name=%s;", ["Reinhardt"])],
)
```

----------------------------------------

TITLE: Specifying Default Ordering Fields with `get_latest_by` in Django Model Meta (Python)
DESCRIPTION: Illustrates how to use the `get_latest_by` Meta option in a Django model. It can specify a single field (like `order_date`) or a list of fields (like `['-priority', 'order_date']`) to determine the default ordering used by the `latest()` and `earliest()` methods on the model's manager. A leading hyphen indicates descending order.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
# Latest by ascending order_date.
get_latest_by = "order_date"

# Latest by priority descending, order_date ascending.
get_latest_by = ["-priority", "order_date"]
```

----------------------------------------

TITLE: Path Resolution in Media Assets with Static and External URLs in Django
DESCRIPTION: Shows how Django resolves different types of paths in media definitions, including absolute paths and relative paths with automatic prefix resolution.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> from django import forms
>>> class CalendarWidget(forms.TextInput):
...     class Media:
...         css = {
...             "all": ["/css/pretty.css"],
...         }
...         js = ["animations.js", "https://othersite.com/actions.js"]
...

>>> w = CalendarWidget()
>>> print(w.media)
<link href="/css/pretty.css" media="all" rel="stylesheet">
<script src="https://uploads.example.com/animations.js"></script>
```

----------------------------------------

TITLE: Using Template Variables with the Cycle Tag (Django)
DESCRIPTION: Shows how to use template variables (`rowvalue1`, `rowvalue2`) as arguments to the `{% cycle %}` tag, allowing dynamic alternation based on context data. Variable values used in the cycle are HTML-escaped by default.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_5

LANGUAGE: html+django
CODE:
```
{% for o in some_list %}
    <tr class="{% cycle rowvalue1 rowvalue2 %}">
        ...
    </tr>
{% endfor %}
```

----------------------------------------

TITLE: Behavior of Initial Values in Bound Django Forms
DESCRIPTION: Demonstrates that providing data when instantiating a Django `Form` makes it bound. In a bound form, the provided data is used for rendering and validation, and any `initial` values set on the fields are ignored. Validation errors are included in the HTML output.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_6

LANGUAGE: pycon
CODE:
```
>>> class CommentForm(forms.Form):
...     name = forms.CharField()
...     url = forms.URLField()
...     comment = forms.CharField()
...
>>> default_data = {"name": "Your name", "url": "https://"}
>>> f = CommentForm(default_data, auto_id=False)
>>> print(f)
<div>Name:
  <input type="text" name="name" value="Your name" required>
</div>
<div>Url:
  <ul class="errorlist"><li>Enter a valid URL.</li></ul>
  <input type="url" name="url" value="https://" required aria-invalid="true">
</div>
<div>Comment:
  <ul class="errorlist"><li>This field is required.</li></ul>
  <input type="text" name="comment" required aria-invalid="true">
</div>
```

----------------------------------------

TITLE: Initializing DateTime Form Field with Cached Initial Value
DESCRIPTION: Demonstrates how BoundField.initial caches return values when using callable initial values like datetime.now.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_36

LANGUAGE: pycon
CODE:
```
>>> from datetime import datetime
>>> class DatedCommentForm(CommentForm):
...     created = forms.DateTimeField(initial=datetime.now)
...
>>> f = DatedCommentForm()
>>> f["created"].initial
datetime.datetime(2021, 7, 27, 9, 5, 54)
>>> f["created"].initial
datetime.datetime(2021, 7, 27, 9, 5, 54)
```

----------------------------------------

TITLE: Implementing a Custom COALESCE Expression in Django
DESCRIPTION: Complete implementation of a custom COALESCE SQL function as a Django query expression. The implementation includes initialization, validation, expression resolution, and SQL generation with vendor-specific handling.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
import copy
from django.db.models import Expression


class Coalesce(Expression):
    template = "COALESCE( %(expressions)s )"

    def __init__(self, expressions, output_field):
        super().__init__(output_field=output_field)
        if len(expressions) < 2:
            raise ValueError("expressions must have at least 2 elements")
        for expression in expressions:
            if not hasattr(expression, "resolve_expression"):
                raise TypeError("%r is not an Expression" % expression)
        self.expressions = expressions

    def resolve_expression(
        self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False
    ):
        c = self.copy()
        c.is_summary = summarize
        for pos, expression in enumerate(self.expressions):
            c.expressions[pos] = expression.resolve_expression(
                query, allow_joins, reuse, summarize, for_save
            )
        return c

    def as_sql(self, compiler, connection, template=None):
        sql_expressions, sql_params = [], []
        for expression in self.expressions:
            sql, params = compiler.compile(expression)
            sql_expressions.append(sql)
            sql_params.extend(params)
        template = template or self.template
        data = {"expressions": ",".join(sql_expressions)}
        return template % data, sql_params


    def as_oracle(self, compiler, connection):
        """
        Example of vendor specific handling (Oracle in this case).
        Let's make the function name lowercase.
        """
        return self.as_sql(compiler, connection, template="coalesce( %(expressions)s )")
```

----------------------------------------

TITLE: Django Session Logout Implementation
DESCRIPTION: Simple logout functionality that removes the member_id from the session.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
def logout(request):
    try:
        del request.session["member_id"]
    except KeyError:
        pass
    return HttpResponse("You're logged out.")
```

----------------------------------------

TITLE: Setting UTF-8 Locale in Unix Environment
DESCRIPTION: Shell command to set the LANG environment variable for UTF-8 support
SOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
export LANG="en_US.UTF-8"
```

----------------------------------------

TITLE: Creating Geometry Objects with SRID
DESCRIPTION: Demonstrates creating various geometry objects with specified SRID (Spatial Reference System Identifier). Shows construction using GEOSGeometry, LineString, and Point classes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.geos import GEOSGeometry, LineString, Point
>>> print(GEOSGeometry("POINT (0 0)", srid=4326))
SRID=4326;POINT (0 0)
>>> print(LineString((0, 0), (1, 1), srid=4326))
SRID=4326;LINESTRING (0 0, 1 1)
>>> print(Point(0, 0, srid=32140))
SRID=32140;POINT (0 0)
```

----------------------------------------

TITLE: Defining `etag` and `last_modified` Decorator Signatures in Python
DESCRIPTION: Shows the function signatures for the shortcut decorators `django.views.decorators.http.etag` and `django.views.decorators.http.last_modified`. The `etag` decorator takes an `etag_func`, and `last_modified` takes a `last_modified_func`, allowing conditional processing based on only one of these values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
etag(etag_func)
last_modified(last_modified_func)
```

----------------------------------------

TITLE: Serializing with Natural Keys in Django
DESCRIPTION: Shows how to use the serializers.serialize() function with natural keys by setting use_natural_foreign_keys and use_natural_primary_keys parameters to True.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> serializers.serialize(
...     "json",
...     [book1, book2],
...     indent=2,
...     use_natural_foreign_keys=True,
...     use_natural_primary_keys=True,
... )
```

----------------------------------------

TITLE: Override MESSAGE_TAGS Django Python
DESCRIPTION: This snippet demonstrates how to override the MESSAGE_TAGS setting and relies on constants to avoid circular import problems. This is useful for customizing how different message levels are rendered as CSS classes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_79

LANGUAGE: python
CODE:
```
from django.contrib.messages import constants as message_constants

MESSAGE_TAGS = {message_constants.INFO: ""}
```

----------------------------------------

TITLE: Configuring PostgreSQL Connection with Service/Passfile in Django Settings
DESCRIPTION: Demonstrates how to configure a Django database connection for PostgreSQL using a service name from a `pg_service.conf` file and a password from a `pgpass` file. It requires specifying the `service` and `passfile` paths within the `OPTIONS` dictionary in the `DATABASES` setting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_0

LANGUAGE: python
CODE:
```
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "OPTIONS": {
            "service": "my_service",
            "passfile": ".my_pgpass"
        }
    }
}
```

----------------------------------------

TITLE: Multi-Database ModelAdmin Implementation
DESCRIPTION: Custom ModelAdmin class that supports operations on multiple databases in Django's admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
class MultiDBModelAdmin(admin.ModelAdmin):
    using = "other"

    def save_model(self, request, obj, form, change):
        obj.save(using=self.using)

    def delete_model(self, request, obj):
        obj.delete(using=self.using)

    def get_queryset(self, request):
        return super().get_queryset(request).using(self.using)

    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        return super().formfield_for_foreignkey(
            db_field, request, using=self.using, **kwargs
        )

    def formfield_for_manytomany(self, db_field, request, **kwargs):
        return super().formfield_for_manytomany(
            db_field, request, using=self.using, **kwargs
        )
```

----------------------------------------

TITLE: Manually Creating and Linking Related Object - Django Model save() - Python
DESCRIPTION: Shows how to manually create and link a related object by explicitly constructing the Entry, setting its foreign key, and saving with force_insert=True. Equivalent to using RelatedManager's create(), but more verbose. Inputs are field values and parent instance; output is a saved Entry linked to a Blog. Demonstrates how direct instantiation can replicate RelatedManager functionality.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
>>> b = Blog.objects.get(id=1)
>>> e = Entry(blog=b, headline="Hello", body_text="Hi", pub_date=datetime.date(2005, 1, 1))
>>> e.save(force_insert=True)
```

----------------------------------------

TITLE: Determining Plural Forms with pluralidx in JavaScript
DESCRIPTION: Illustrates the use of the pluralidx function to determine if a plural form should be used based on a count in JavaScript.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_43

LANGUAGE: javascript
CODE:
```
document.write(pluralidx(0));
// true
document.write(pluralidx(1));
// false
document.write(pluralidx(2));
// true
```

----------------------------------------

TITLE: Querying for BCrypt Passwords in Django User Model - Django ORM - Python
DESCRIPTION: This code snippet demonstrates how to query the Django User model for users whose passwords are encrypted using the legacy BCryptPasswordHasher. It requires Django's authentication system and the database to be set up. The variable 'User' is set to the active user model, and a query is performed to filter users with passwords starting with 'bcrypt$$'. The result is a queryset containing all such users, allowing further processing or migration. The approach is specific to data migration and audit tasks, and depends on the authentication backend configuration.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.1.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib.auth import get_user_model

User = get_user_model()
User.objects.filter(password__startswith="bcrypt$$")
```

----------------------------------------

TITLE: Implementing Custom Unsigned Auto Field in Django
DESCRIPTION: This snippet demonstrates how to create a custom UnsignedAutoField in Django, including both db_type and rel_db_type methods for MySQL compatibility.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_12

LANGUAGE: Python
CODE:
```
class UnsignedAutoField(models.AutoField):
    def db_type(self, connection):
        return "integer UNSIGNED AUTO_INCREMENT"

    def rel_db_type(self, connection):
        return "integer UNSIGNED"
```

----------------------------------------

TITLE: Defining a Template Filter with is_safe Keyword Argument - Django Templates - Python
DESCRIPTION: This snippet shows the recommended method for defining template filters in Django by providing the is_safe flag as a keyword argument to the @register.filter decorator. This style improves compatibility with decorators and is the preferred way to specify filter safety. It is used within Django template libraries and requires Django's template system.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
@register.filter(is_safe=True)
def noop(value):
    return value
```

----------------------------------------

TITLE: Form with Custom Media Definition
DESCRIPTION: Example of a form with both inherited widget media and custom media declarations
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_16

LANGUAGE: pycon
CODE:
```
>>> class ContactForm(forms.Form):
...     date = DateField(widget=CalendarWidget)
...     name = CharField(max_length=40, widget=OtherWidget)
...     class Media:
...         css = {
...             "all": ["layout.css"],
...         }
...

>>> f = ContactForm()
>>> f.media
<link href="https://static.example.com/pretty.css" media="all" rel="stylesheet">
<link href="https://static.example.com/layout.css" media="all" rel="stylesheet">
<script src="https://static.example.com/animations.js"></script>
<script src="https://static.example.com/actions.js"></script>
<script src="https://static.example.com/whizbang.js"></script>
```

----------------------------------------

TITLE: Creating Deconstructible Custom Class for Django Migrations
DESCRIPTION: This example shows how to use the @deconstructible decorator to make a custom class serializable in Django migrations. It includes an __eq__() method for change detection.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_13

LANGUAGE: Python
CODE:
```
from django.utils.deconstruct import deconstructible


@deconstructible
class MyCustomClass:
    def __init__(self, foo=1):
        self.foo = foo
        ...

    def __eq__(self, other):
        return self.foo == other.foo
```

----------------------------------------

TITLE: Storing translated string in a variable in Django templates
DESCRIPTION: Demonstrates how to retrieve a translated string without displaying it, storing it in a variable for later use.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_21

LANGUAGE: html+django
CODE:
```
{% translate "This is the title" as the_title %}

<title>{{ the_title }}</title>
<meta name="description" content="{{ the_title }}">
```

----------------------------------------

TITLE: Dumping Compressed Django Data to File (Bash)
DESCRIPTION: Shows how to use the `django-admin dumpdata` command to output serialized database data to a file (`mydata.json.gz`) which is automatically compressed using gzip due to the `.gz` extension. Requires the corresponding compression library to be available.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_13

LANGUAGE: bash
CODE:
```
django-admin dumpdata -o mydata.json.gz
```

----------------------------------------

TITLE: Setting UTF-8 encoding in Apache environment
DESCRIPTION: Configuration to fix UnicodeEncodeError when uploading or writing files with non-ASCII characters by setting the appropriate language and locale environment variables in Apache.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/modwsgi.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
export LANG='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'
```

----------------------------------------

TITLE: Configuring Logger Mappings in Django
DESCRIPTION: Demonstrates how to configure logger mappings to process records and forward them to handlers.
SOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
"loggers": {
    "": {
        "level": "DEBUG",
        "handlers": ["file"],
    },
}
```

----------------------------------------

TITLE: Updating QueryDict in Python
DESCRIPTION: Shows how the update method appends values to existing keys rather than replacing them.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
>>> q = QueryDict("a=1", mutable=True)
>>> q.update({"a": "2"})
>>> q.getlist("a")
['1', '2']
>>> q["a"]  # returns the last
'2'
```

----------------------------------------

TITLE: Nesting Django `autoescape` Tags for Granular Control
DESCRIPTION: Illustrates nesting the `autoescape` tag in Django templates. It shows disabling auto-escaping for a larger block (`{% autoescape off %}`) and then re-enabling it for a specific subsection using `{% autoescape on %}` within that block. This allows fine-grained control over escaping behavior.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_18

LANGUAGE: html+django
CODE:
```
Auto-escaping is on by default. Hello {{ name }}

{% autoescape off %}
    This will not be auto-escaped: {{ data }}.

    Nor this: {{ other_data }}
    {% autoescape on %}
        Auto-escaping applies again: {{ name }}
    {% endautoescape %}
{% endautoescape %}
```

----------------------------------------

TITLE: Escaping percent signs in translation strings in Python
DESCRIPTION: Demonstrates how to handle percent signs in translation strings that are incorrectly detected as Python format strings by escaping them with a double percent sign.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_52

LANGUAGE: python
CODE:
```
from django.utils.translation import gettext as _

output = _("10%% interest")
```

----------------------------------------

TITLE: Django File Upload Directory Permissions Setting
DESCRIPTION: Setting used to control permissions on uploaded file directories that was not being properly applied to intermediate directories on Python 3.7+
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.10.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
FILE_UPLOAD_DIRECTORY_PERMISSIONS
```

----------------------------------------

TITLE: Installing and Running aiosmtpd for Local Email Testing
DESCRIPTION: This shell command installs the aiosmtpd package and starts a minimal SMTP server for local email testing. The server listens on localhost:8025 and prints email headers and body to standard output, useful for development and debugging.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_19

LANGUAGE: shell
CODE:
```
python -m pip install "aiosmtpd >= 1.4.5"

python -m aiosmtpd -n -l localhost:8025
```

----------------------------------------

TITLE: Converting Timezone-Aware Datetime Parameters in Python
DESCRIPTION: Code examples showing how to convert timezone-aware datetime objects to naive UTC datetimes for database queries, and how to convert naive datetimes back to timezone-aware objects when reading from the database.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.utils import timezone

param = timezone.make_naive(param, timezone.utc)
```

LANGUAGE: python
CODE:
```
from django.utils import timezone

value = timezone.make_aware(value, timezone.utc)
```

----------------------------------------

TITLE: Configuring AdminEmailHandler with a Custom Email Backend in Django Settings
DESCRIPTION: This snippet demonstrates how to override the default email backend used by `AdminEmailHandler`. By specifying the `email_backend` parameter within the handler's configuration in the `LOGGING` setting, a different backend (in this case, `django.core.mail.backends.filebased.EmailBackend`) can be used instead of the one defined in `settings.EMAIL_BACKEND`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
"handlers": {
    "mail_admins": {
        "level": "ERROR",
        "class": "django.utils.log.AdminEmailHandler",
        "email_backend": "django.core.mail.backends.filebased.EmailBackend",
    },
}
```

----------------------------------------

TITLE: Retrieving Initial Form Field Values in Django - Python
DESCRIPTION: This snippet illustrates how Django Form's get_initial_for_field method fetches the initial value for a field, especially when the field's initial value is a callable (such as uuid.uuid4). It shows that BoundField.initial provides caching, causing repeated accesses to return the same value, whereas get_initial_for_field re-evaluates the callable each time. Requires Django's forms module and Python's uuid library. Input is a form field and its field_name; output is the initial value, which may vary for callables.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
>>> import uuid\n>>> class UUIDCommentForm(CommentForm):\n...     identifier = forms.UUIDField(initial=uuid.uuid4)\n...\n>>> f = UUIDCommentForm()\n>>> f.get_initial_for_field(f.fields[\"identifier\"], \"identifier\")\nUUID('972ca9e4-7bfe-4f5b-af7d-07b3aa306334')\n>>> f.get_initial_for_field(f.fields[\"identifier\"], \"identifier\")\nUUID('1b411fab-844e-4dec-bd4f-e9b0495f04d0')\n>>> # Using BoundField.initial, for comparison\n>>> f[\"identifier\"].initial\nUUID('28a09c59-5f00-4ed9-9179-a3b074fa9c30')\n>>> f[\"identifier\"].initial\nUUID('28a09c59-5f00-4ed9-9179-a3b074fa9c30')
```

----------------------------------------

TITLE: Demonstrating Error When Assigning Unsaved Objects to Relations in Django
DESCRIPTION: Example showing how Django 1.8.4+ raises a ValueError when attempting to save a model with an unsaved related object assigned to prevent data loss. This is part of the backwards incompatible changes in Django 1.8.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> book = Book.objects.create(name="Django")
>>> book.author = Author(name="John")
>>> book.save()
Traceback (most recent call last):
...
ValueError: save() prohibited to prevent data loss due to unsaved related object 'author'.
```

----------------------------------------

TITLE: Customizing makemessages with additional xgettext options
DESCRIPTION: Extends the Django makemessages command to pass additional options to xgettext by overriding the xgettext_options attribute.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_55

LANGUAGE: python
CODE:
```
from django.core.management.commands import makemessages


class Command(makemessages.Command):
    xgettext_options = makemessages.Command.xgettext_options + ["--keyword=mytrans"]
```

----------------------------------------

TITLE: Initializing QueryDict in Python
DESCRIPTION: Creates a QueryDict object based on a query string. The resulting dictionary will have multiple values per key where applicable.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
>>> QueryDict("a=1&a=2&c=3")
<QueryDict: {'a': ['1', '2'], 'c': ['3']}>
```

----------------------------------------

TITLE: Configuring Custom Language Settings in Django
DESCRIPTION: Example of defining custom language settings in Django using gettext_lazy for translation support. This configuration restricts language selection to German and English only.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_52

LANGUAGE: Python
CODE:
```
from django.utils.translation import gettext_lazy as _

LANGUAGES = [
    ("de", _("German")),
    ("en", _("English")),
]
```

----------------------------------------

TITLE: Middleware Settings Modification with Decorator in Django
DESCRIPTION: Shows how to use the modify_settings decorator to alter middleware configuration at the method level in Django tests.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_37

LANGUAGE: python
CODE:
```
from django.test import TestCase, modify_settings


class MiddlewareTestCase(TestCase):
    @modify_settings(
        MIDDLEWARE={
            "append": "django.middleware.cache.FetchFromCacheMiddleware",
            "prepend": "django.middleware.cache.UpdateCacheMiddleware",
        }
    )
    def test_cache_middleware(self):
        response = self.client.get("/")
        # ...
```

----------------------------------------

TITLE: Warning Filter Configuration for Naive Datetimes
DESCRIPTION: Python code to configure warnings as errors for naive datetime usage in Django models.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
import warnings

warnings.filterwarnings(
    "error",
    r"DateTimeField .* received a naive datetime",
    RuntimeWarning,
    r"django\.db\.models\.fields",
)
```

----------------------------------------

TITLE: Configuring Django Template Backend Options in Python
DESCRIPTION: Demonstrates how to set up the 'builtins' option in Django's template backend configuration. This allows adding custom template tag modules to the built-ins without needing to use the {% load %} tag.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
OPTIONS = {
    "builtins": ["myapp.builtins"],
}
```

----------------------------------------

TITLE: Example of Creating and Using a Parameterized Decorator
DESCRIPTION: Shows how to create a parameterized decorator from CacheMiddleware and apply it to a view function with a specific cache timeout value.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
cache_page = decorator_from_middleware_with_args(CacheMiddleware)


@cache_page(3600)
def my_view(request):
    pass
```

----------------------------------------

TITLE: Sorting List of Lists by Index with Dictsort in Django Templates - HTML+Django
DESCRIPTION: Demonstrates the use of dictsort to order a list of lists (or tuples) by the element at the specified index (here, index 0). Expects 'value' to be a list of sequences. Only works if index is provided as an integer (not a string); returns sorted list for template display or logic.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_63

LANGUAGE: html+django
CODE:
```
{{ value|dictsort:0 }}
```

----------------------------------------

TITLE: Using patch_vary_headers Utility Function
DESCRIPTION: Demonstrates direct modification of the Vary header using patch_vary_headers utility function, which adds or sets headers that a response varies on. This example adds the Cookie header to the response's Vary header.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_43

LANGUAGE: python
CODE:
```
from django.shortcuts import render
from django.utils.cache import patch_vary_headers


def my_view(request):
    ...
    response = render(request, "template_name", context)
    patch_vary_headers(response, ["Cookie"])
    return response
```

----------------------------------------

TITLE: Defining a Custom Django Test Runner Class
DESCRIPTION: This code defines the signature of a custom Django test runner class, DiscoverRunner, which can be used to customize the test discovery and execution process in Django.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
class DiscoverRunner(pattern='test*.py', top_level=None, verbosity=1, interactive=True, failfast=False, keepdb=False, reverse=False, debug_mode=False, debug_sql=False, parallel=0, tags=None, exclude_tags=None, test_name_patterns=None, pdb=False, buffer=False, enable_faulthandler=True, timing=True, shuffle=False, logger=None, durations=None, **kwargs):
```

----------------------------------------

TITLE: Configuring AdminEmailHandler with a Custom Reporter Class in Django Settings
DESCRIPTION: This configuration illustrates how to customize the traceback text sent by `AdminEmailHandler`. The `reporter_class` parameter is set to a string import path pointing to a custom `django.views.debug.ExceptionReporter` subclass (`somepackage.error_reporter.CustomErrorReporter`). This allows for modifying the content and format of the error report email.
SOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
"handlers": {
    "mail_admins": {
        "level": "ERROR",
        "class": "django.utils.log.AdminEmailHandler",
        "include_html": True,
        "reporter_class": "somepackage.error_reporter.CustomErrorReporter",
    },
}
```

----------------------------------------

TITLE: Creating a Hash Index in Django with PostgreSQL
DESCRIPTION: Creates a Hash index with an option for fill factor. Useful for equality comparisons on large tables.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
HashIndex(*expressions, fillfactor=None, **options)
```

----------------------------------------

TITLE: Translation with Computed Values in Django
DESCRIPTION: Demonstrates how translation works on computed values in Django. The translation function is applied after joining words into a single string.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
def my_view(request):
    words = ["Welcome", "to", "my", "site."]
    output = _(" ".join(words))
    return HttpResponse(output)
```

----------------------------------------

TITLE: URL Reversal with Language Activation in Django
DESCRIPTION: Demonstration of using reverse() function with language activation to generate language-specific URLs.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_49

LANGUAGE: python
CODE:
```
>>> from django.urls import reverse
>>> from django.utils.translation import activate

>>> activate("en")
>>> reverse("news:category", kwargs={"slug": "recent"})
'/en/news/category/recent/'

>>> activate("nl")
>>> reverse("news:category", kwargs={"slug": "recent"})
'/nl/nieuws/categorie/recent/'
```

----------------------------------------

TITLE: Defining Disallowed User Agents in Django
DESCRIPTION: Provides a list (empty by default) of compiled regular expression objects for User-Agent strings forbidden from accessing any page. This requires the CommonMiddleware to be active.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_23

LANGUAGE: python
CODE:
```
DISALLOWED_USER_AGENTS = []
```

----------------------------------------

TITLE: Using strip_tags() Function in Django
DESCRIPTION: Demonstrates the usage of strip_tags() function from django.utils.html, which now has an upper limit of recursive calls to HTMLParser before raising a SuspiciousOperation exception. It's crucial to escape the result before marking it as safe.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.17.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.utils.html import strip_tags, escape

# Strip HTML tags from input
stripped_content = strip_tags(input_content)

# Always escape the result before marking as safe
safe_content = escape(stripped_content)
```

----------------------------------------

TITLE: Defining YEAR_MONTH_FORMAT setting
DESCRIPTION: This setting defines the default formatting for date fields on Django admin change-list pages when only the year and month are displayed. The locale-dictated format has higher precedence. It is related to DATE_FORMAT, DATETIME_FORMAT, TIME_FORMAT, and MONTH_DAY_FORMAT settings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_67



----------------------------------------

TITLE: Using EmptyFieldListFilter in Django Admin
DESCRIPTION: Shows how to configure EmptyFieldListFilter to filter on both empty strings and null values for a specific field in the Django admin.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class BookAdmin(admin.ModelAdmin):
    list_filter = [
        ("title", admin.EmptyFieldListFilter),
    ]
```

----------------------------------------

TITLE: Pluralized Contextual Translation with npgettext in JavaScript
DESCRIPTION: Shows how to use the npgettext function for pluralized contextual translations in JavaScript.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_42

LANGUAGE: javascript
CODE:
```
document.write(npgettext('group', 'party', 1));
// party
document.write(npgettext('group', 'party', 2));
// parties
```

----------------------------------------

TITLE: Sending Multiple Emails with Django EmailMessage
DESCRIPTION: This snippet demonstrates how to send multiple emails using Django's EmailMessage class and a single connection. It shows the creation of email objects and sending them in a batch, followed by manually closing the connection.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
"Hello",
"Body goes here",
"from@example.com",
["to2@example.com"],
)
email3 = mail.EmailMessage(
    "Hello",
    "Body goes here",
    "from@example.com",
    ["to3@example.com"],
)

# Send the two emails in a single call -
connection.send_messages([email2, email3])
# The connection was already open so send_messages() doesn't close it.
# We need to manually close the connection.
connection.close()
```

----------------------------------------

TITLE: Manually Escaping HTML in Django Template String Literals
DESCRIPTION: Demonstrates the correct way to include characters that have special meaning in HTML (like '<') within a string literal filter argument in Django templates. Since literals aren't auto-escaped, manual escaping (e.g., using `&lt;`) is required if the literal itself should represent escaped HTML.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_23

LANGUAGE: html+django
CODE:
```
{{ data|default:"3 &lt; 2" }}
```

----------------------------------------

TITLE: Weighting Search Vectors in Django Full Text Search
DESCRIPTION: Demonstrates how to assign weights to different fields in a search query for more relevant results.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> from django.contrib.postgres.search import SearchQuery, SearchRank, SearchVector
>>> vector = SearchVector("body_text", weight="A") + SearchVector(
...     "blog__tagline", weight="B"
... )
>>> query = SearchQuery("cheese")
>>> Entry.objects.annotate(rank=SearchRank(vector, query)).filter(rank__gte=0.3).order_by(
```

----------------------------------------

TITLE: Creating GDALRaster Objects in Python
DESCRIPTION: Demonstrates various ways to create GDALRaster objects, including from a file path, from a dictionary defining a new raster, and from bytes representing a raster file. Shows how to access basic properties of the raster.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_32

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.gdal import GDALRaster
>>> rst = GDALRaster("/path/to/your/raster.tif", write=False)
>>> rst.name
'/path/to/your/raster.tif'
>>> rst.width, rst.height  # This file has 163 x 174 pixels
(163, 174)
>>> rst = GDALRaster(
...     {  # Creates an in-memory raster
...         "srid": 4326,
...         "width": 4,
...         "height": 4,
...         "datatype": 1,
...         "bands": [
...             {
...                 "data": (2, 3),
...                 "offset": (1, 1),
...                 "size": (2, 2),
...                 "shape": (2, 1),
...                 "nodata_value": 5,
...             }
...         ],
...     }
... )
>>> rst.srs.srid
4326
>>> rst.width, rst.height
(4, 4)
>>> rst.bands[0].data()
array([[5, 5, 5, 5],
       [5, 2, 3, 5],
       [5, 2, 3, 5],
       [5, 5, 5, 5]], dtype=uint8)
>>> rst_file = open("/path/to/your/raster.tif", "rb")
>>> rst_bytes = rst_file.read()
>>> rst = GDALRaster(rst_bytes)
>>> rst.is_vsi_based
True
>>> rst.name  # Stored in a random path in the vsimem filesystem.
'/vsimem/da300bdb-129d-49a8-b336-e410a9428dad'
```

----------------------------------------

TITLE: Incorrect Pluralization Implementation in Django
DESCRIPTION: Shows an incorrect approach to pluralization that won't work correctly for all languages. This example highlights why you shouldn't implement your own singular-or-plural logic.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
from django.utils.translation import ngettext
from myapp.models import Report

count = Report.objects.count()
if count == 1:
    name = Report._meta.verbose_name
else:
    name = Report._meta.verbose_name_plural

text = ngettext(
    "There is %(count)d %(name)s available.",
    "There are %(count)d %(name)s available.",
    count,
) % {"count": count, "name": name}
```

----------------------------------------

TITLE: Using Geometric Methods on GEOSGeometry Objects (Python)
DESCRIPTION: Demonstrates using methods provided by the GEOS library directly on `GEOSGeometry` objects in Python. The example shows creating a `Point` object and then using the `contains` method on both the point and a retrieved `MultiPolygon` (`sm.mpoly`) to check for spatial containment. Requires `django.contrib.gis.geos.Point` and a model instance `sm` with a geometry field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_18

LANGUAGE: pycon
CODE:
```
>>> pnt = Point(12.4604, 43.9420)
>>> sm.mpoly.contains(pnt)
True
>>> pnt.contains(sm.mpoly)
False
```

----------------------------------------

TITLE: Enabling Secure Content Type Nosniff in Django
DESCRIPTION: Sets SECURE_CONTENT_TYPE_NOSNIFF to True by default to prevent MIME type sniffing security vulnerabilities.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
SECURE_CONTENT_TYPE_NOSNIFF = True
```

----------------------------------------

TITLE: Extending Django Field Checks for Custom Validation in Python
DESCRIPTION: Example of adding custom validation logic to a Django model field by inheriting from a base field (`models.IntegerField`) and overriding the `check()` method. The custom `RangedIntegerField` adds `min` and `max` arguments and includes a check (`_check_min_max_values`) to ensure `min` is not greater than `max`. The overridden `check()` method calls the superclass's `check()` and extends the returned errors with custom ones.
SOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.core import checks
from django.db import models


class RangedIntegerField(models.IntegerField):
    def __init__(self, min=None, max=None, **kwargs):
        super().__init__(**kwargs)
        self.min = min
        self.max = max

    def check(self, **kwargs):
        # Call the superclass
        errors = super().check(**kwargs)

        # Do some custom checks and add messages to `errors`:
        errors.extend(self._check_min_max_values(**kwargs))

        # Return all errors and warnings
        return errors

    def _check_min_max_values(self, **kwargs):
        if self.min is not None and self.max is not None and self.min > self.max:
            return [
                checks.Error(
                    "min greater than max.",
                    hint="Decrease min or increase max.",
                    obj=self,
                    id="myapp.E001",
                )
            ]
        # When no error, return an empty list
        return []
```

----------------------------------------

TITLE: Using AsWKT to Convert Geometry to WKT in Django ORM (Python)
DESCRIPTION: This Python code snippet demonstrates how to use the GeoDjango `AsWKT` database function within a Django ORM query. It annotates a `City` model instance with a new field 'wkt', which contains the Well-Known Text (WKT) representation of the 'point' geometry field for the specified city ('Chelyabinsk'). Requires a Django project with GeoDjango enabled and a `City` model having 'point' and 'name' fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_6

LANGUAGE: pycon
CODE:
```
>>> City.objects.annotate(wkt=AsWKT("point")).get(name="Chelyabinsk").wkt
'POINT (55.137555 61.451728)'
```

----------------------------------------

TITLE: Using Named resetcycle in Django Templates
DESCRIPTION: This example shows how to reset specific named cycle tags. In this case, only the 'tick' cycle is reset when an item's category changes, while the 'stripe' cycle continues uninterrupted.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_41

LANGUAGE: html+django
CODE:
```
{% for item in list %}
    <p class="{% cycle 'odd' 'even' as stripe %} {% cycle 'major' 'minor' 'minor' 'minor' 'minor' as tick %}">
        {{ item.data }}
    </p>
    {% ifchanged item.category %}
        <h1>{{ item.category }}</h1>
        {% if not forloop.first %}{% resetcycle tick %}{% endif %}
    {% endifchanged %}
{% endfor %}
```

----------------------------------------

TITLE: Using StringAgg Aggregate with Django Models and ManyToMany Relationships
DESCRIPTION: Illustrates the usage of StringAgg aggregate function with Django models involving ManyToMany relationships. The example uses Article and Publication models to concatenate publication titles.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> article = Article.objects.create(headline="NASA uses Python")
>>> article.publications.create(title="The Python Journal")
<Publication: Publication object (1)>
>>> article.publications.create(title="Science News")
<Publication: Publication object (2)>
>>> from django.contrib.postgres.aggregates import StringAgg
>>> Article.objects.annotate(
...     publication_names=StringAgg(
...         "publications__title",
...         delimiter=", ",
...         order_by="publications__title",
...     )
... ).values("headline", "publication_names")
<QuerySet [{
    'headline': 'NASA uses Python', 'publication_names': 'Science News, The Python Journal'
}]>
```

----------------------------------------

TITLE: Excluding a Django View from APPEND_SLASH Behavior using Decorator (Python)
DESCRIPTION: This Python snippet demonstrates how to use the `no_append_slash` decorator from `django.views.decorators.common` to prevent the `CommonMiddleware` from automatically appending a slash to the URL for a specific function-based view (`sensitive_fbv`). This is useful when the default URL normalization behavior (redirecting `foo.com/bar` to `foo.com/bar/`) is not desired for a particular endpoint. The view function itself simply returns an `HttpResponse`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/middleware.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.views.decorators.common import no_append_slash


@no_append_slash
def sensitive_fbv(request, *args, **kwargs):
    """View to be excluded from APPEND_SLASH."""
    return HttpResponse()
```

----------------------------------------

TITLE: Registering Custom AdminSite in URLconf (Python)
DESCRIPTION: This snippet shows how to register a custom AdminSite instance in the project's URLconf.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_80

LANGUAGE: Python
CODE:
```
from django.urls import path

from myapp.admin import admin_site

urlpatterns = [
    path("myadmin/", admin_site.urls),
]
```

----------------------------------------

TITLE: Setting Number Formatting in Django
DESCRIPTION: These settings are related to number formatting. `DECIMAL_SEPARATOR` specifies the character used as the decimal separator, with the default being a dot (`.`). Locale-specific formatting takes precedence.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_15

LANGUAGE: text
CODE:
```
Default: ``'.'`` (Dot)

Default decimal separator used when formatting decimal numbers.

Note that the locale-dictated format has higher precedence and will be applied
instead.
```

----------------------------------------

TITLE: Querying Spatial Right Overlap in PostGIS
DESCRIPTION: Example of using the 'overlaps_right' lookup to find geometries whose bounding box overlaps or is to the right of a given geometry's bounding box in PostGIS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__overlaps_right=geom)
```

----------------------------------------

TITLE: Example SQL WHERE Clause for Admin Search Query - SQL
DESCRIPTION: Provides sample SQL WHERE clause logic for a Django admin search box with multiple search fields and query words, demonstrating the use of ILIKE and icontains lookups. The first example matches if any search word appears in any designated field; the second shows phrase search with quoted phrases. Used as illustration for how Django admin search_fields are internally mapped to SQL. Output is for reference only and not intended to be executed directly.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_37

LANGUAGE: sql
CODE:
```
WHERE (first_name ILIKE '%john%' OR last_name ILIKE '%john%')
AND (first_name ILIKE '%lennon%' OR last_name ILIKE '%lennon%')
```

LANGUAGE: sql
CODE:
```
WHERE (first_name ILIKE '%john winston%' OR last_name ILIKE '%john winston%')
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'adjacent_to' Lookup in Django Python
DESCRIPTION: Demonstrates the `adjacent_to` lookup (`__adjacent_to`, SQL operator `-|-`) on the `ages` field. This query finds `Event` objects where the `ages` range shares a boundary point with (is adjacent to) the given `NumericRange(10, 21)`. Requires the `Event` model and `NumericRange`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_27

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__adjacent_to=NumericRange(10, 21))
<QuerySet [<Event: Soft play>, <Event: Pub trip>]>
```

----------------------------------------

TITLE: Downloading and Extracting GEOS Source
DESCRIPTION: Commands to download and extract the GEOS source code archive.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
$ wget https://download.osgeo.org/geos/geos-X.Y.Z.tar.bz2
$ tar xjf geos-X.Y.Z.tar.bz2
```

----------------------------------------

TITLE: Raising Multiple ValidationError Instances in Django - Python
DESCRIPTION: Demonstrates how to raise multiple validation errors at once by passing a list to ValidationError, using recommended patterns (with individual ValidationError instances, codes, and params) and alternate patterns (plain strings). Useful in form field validation where multiple issues must be reported together. Requires Django forms and translation framework, and enhances error reporting through field or form cleaning methods.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
# Good
raise ValidationError(
    [
        ValidationError(_("Error 1"), code="error1"),
        ValidationError(_("Error 2"), code="error2"),
    ]
)

# Bad
raise ValidationError(
    [
        _(\"Error 1\"),
        _(\"Error 2\"),
    ]
)
```

----------------------------------------

TITLE: Creating a Django Feed with Static File Stylesheet
DESCRIPTION: This snippet shows how to use Django's static files system to provide a stylesheet for an RSS feed by leveraging the static template tag.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
from django.contrib.syndication.views import Feed
from django.templatetags.static import static


class FeedWithStaticFileStylesheet(Feed):
    stylesheets = [
        static("rss_styles.xslt"),
    ]
```

----------------------------------------

TITLE: Generating Placeholder Text - lorem Tag in HTML+Django Template - html+django
DESCRIPTION: Provides multiple usages of the 'lorem' tag to insert random or common 'lorem ipsum' text for design mockups, with options for word/paragraph count, HTML wrapping, and randomness. Relies on Django's built-in lorem generator; accepts arguments for count, type (w/p/b), and randomization. Outputs random placeholder text as per call signature.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_24

LANGUAGE: html+django
CODE:
```
{% lorem %}
```

LANGUAGE: html+django
CODE:
```
{% lorem 3 p %}
```

LANGUAGE: html+django
CODE:
```
{% lorem 2 w random %}
```

----------------------------------------

TITLE: Using captureOnCommitCallbacks in Django Tests
DESCRIPTION: A partial example showing the TestCase.captureOnCommitCallbacks method usage for testing transaction.on_commit callbacks.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
from django.core import mail
from django.test import TestCase


class ContactTests(TestCase):
    def test_post(self):
```

----------------------------------------

TITLE: Creating HStore Extension in Django Migration
DESCRIPTION: Demonstrates how to create an HStore extension in a PostgreSQL database using a Django migration file. This operation should be performed before any CreateModel or AddField operations involving HStoreField.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/operations.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib.postgres.operations import HStoreExtension


class Migration(migrations.Migration):
    ...

    operations = [HStoreExtension(), ...]
```

----------------------------------------

TITLE: Managing Permission Caching in Django User Objects
DESCRIPTION: This example shows how permission caching works in Django. It demonstrates that permissions are cached when first checked and how to refresh the user instance to get updated permissions after adding new ones.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.contrib.auth.models import Permission, User
from django.contrib.contenttypes.models import ContentType
from django.shortcuts import get_object_or_404

from myapp.models import BlogPost


def user_gains_perms(request, user_id):
    user = get_object_or_404(User, pk=user_id)
    # any permission check will cache the current set of permissions
    user.has_perm("myapp.change_blogpost")

    content_type = ContentType.objects.get_for_model(BlogPost)
    permission = Permission.objects.get(
        codename="change_blogpost",
        content_type=content_type,
    )
    user.user_permissions.add(permission)

    # Checking the cached permission set
    user.has_perm("myapp.change_blogpost")  # False

    # Request new instance of User
    # Be aware that user.refresh_from_db() won't clear the cache.
    user = get_object_or_404(User, pk=user_id)

    # Permission cache is repopulated from the database
    user.has_perm("myapp.change_blogpost")  # True

    ...
```

----------------------------------------

TITLE: Custom Empty Value Display in ModelAdmin
DESCRIPTION: Demonstrates how to customize the display of empty values in the admin interface using empty_value_display and display decorator.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.contrib import admin


class AuthorAdmin(admin.ModelAdmin):
    empty_value_display = "-empty-"
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'upper_inf' Lookup in Django Python
DESCRIPTION: Uses the `upper_inf` lookup (`__upper_inf`) on the `ages` field. This query retrieves `Event` objects where the `ages` range has an unbounded (infinite) upper bound (`None` in the Python representation). Requires the `Event` model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_34

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__upper_inf=True)
<QuerySet [<Event: Pub trip>]>
```

----------------------------------------

TITLE: Importing Constants Django Python
DESCRIPTION: This snippet demonstrates how to import the `constants` module from `django.contrib.messages` to avoid circular import issues when overriding the `MESSAGE_LEVEL` setting. It is crucial for correct behavior when integrating with Django's message framework.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_77

LANGUAGE: python
CODE:
```
from django.contrib.messages import constants as message_constants
```

----------------------------------------

TITLE: Adding Extra Message Tags in Django Messages Framework
DESCRIPTION: Shows how to add additional CSS or identifier tags to messages for more granular control over styling and behavior.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
messages.add_message(request, messages.INFO, "Over 9000!", extra_tags="dragonball")
messages.error(request, "Email box full", extra_tags="email")
```

----------------------------------------

TITLE: Overriding Label Suffix in a Django Form Field
DESCRIPTION: Illustrates how to use the `label_suffix` argument on a specific field (`IntegerField`) within a Django `Form` (`ContactForm`) to override the default or form-level label suffix. The example also shows setting a form-level `label_suffix` during form instantiation and prints the resulting HTML.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_4

LANGUAGE: pycon
CODE:
```
>>> class ContactForm(forms.Form):
...     age = forms.IntegerField()
...     nationality = forms.CharField()
...     captcha_answer = forms.IntegerField(label="2 + 2", label_suffix=" =")
...
>>> f = ContactForm(label_suffix="?")
>>> print(f)
<div><label for="id_age">Age?</label><input type="number" name="age" required id="id_age"></div>
<div><label for="id_nationality">Nationality?</label><input type="text" name="nationality" required id="id_nationality"></div>
<div><label for="id_captcha_answer">2 + 2 =</label><input type="number" name="captcha_answer" required id="id_captcha_answer"></div>
```

----------------------------------------

TITLE: Decoding URI to IRI - Django - Python
DESCRIPTION: Shows usage of Django's uri_to_iri utility to convert percent-encoded URIs back to Unicode IRIs as expected in Python/Django web applications. Dependencies: django.utils.encoding and its uri_to_iri function (Django must be installed). Inputs are percent-encoded URL paths or query parameters; outputs are Unicode strings when valid, otherwise preserves encoding for non-valid data. Demonstrates correct decoding of UTF-8 percent-encodings and default handling of reserved or invalid octet-sequences.
SOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from django.utils.encoding import uri_to_iri
>>> uri_to_iri("/%E2%99%A5%E2%99%A5/?utf8=%E2%9C%93")
'/♥♥/?utf8=✓'
>>> uri_to_iri("%A9hello%3Fworld")
'%A9hello%3Fworld'
```

----------------------------------------

TITLE: Naming a Cycle Tag and Reusing its Value (Django)
DESCRIPTION: Shows how to name a `{% cycle %}` tag using the `as` keyword (e.g., `as rowcolors`). This allows referencing the *current* value of the cycle elsewhere in the template using the assigned variable name (`rowcolors`) without advancing the cycle. Advancing the cycle requires another `{% cycle rowcolors %}` call.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_8

LANGUAGE: html+django
CODE:
```
{% cycle 'row1' 'row2' as rowcolors %}
```

LANGUAGE: html+django
CODE:
```
<tr>
    <td class="{% cycle 'row1' 'row2' as rowcolors %}">...</td>
    <td class="{{ rowcolors }}">...</td>
</tr>
<tr>
    <td class="{% cycle rowcolors %}">...</td>
    <td class="{{ rowcolors }}">...</td>
</tr>
```

----------------------------------------

TITLE: Database-specific Custom Type Implementation in Django
DESCRIPTION: Implementation of a custom MytypeField that maps to a PostgreSQL custom type. This demonstrates how to define the database representation of a custom field.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.db import models


class MytypeField(models.Field):
    def db_type(self, connection):
        return "mytype"
```

----------------------------------------

TITLE: Django WSGI Script with Authentication Support
DESCRIPTION: WSGI script that integrates Django's authentication with Apache. The script imports the check_password function from Django's auth handlers to verify user credentials.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/apache-auth.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
import os

os.environ["DJANGO_SETTINGS_MODULE"] = "mysite.settings"

from django.contrib.auth.handlers.modwsgi import check_password

from django.core.handlers.wsgi import WSGIHandler

application = WSGIHandler()
```

----------------------------------------

TITLE: Using make_list Filter in Django Templates
DESCRIPTION: The make_list filter returns the value turned into a list. For strings, it creates a list of characters. For integers, it casts to a string before creating a list.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_79

LANGUAGE: html+django
CODE:
```
{{ value|make_list }}
```

----------------------------------------

TITLE: Installing SpatiaLite Library from Source
DESCRIPTION: This shell script downloads the SpatiaLite library source, extracts it, and compiles and installs the library.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/spatialite.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
$ wget https://www.gaia-gis.it/gaia-sins/libspatialite-sources/libspatialite-X.Y.Z.tar.gz
$ tar xaf libspatialite-X.Y.Z.tar.gz
$ cd libspatialite-X.Y.Z
$ ./configure
$ make
$ sudo make install
```

----------------------------------------

TITLE: Defining Natural Key Dependencies in Django Model
DESCRIPTION: Shows how to define dependencies for natural keys to control serialization order. The natural_key() method is extended with a dependencies attribute.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
class Book(models.Model):
    name = models.CharField(max_length=100)
    author = models.ForeignKey(Person, on_delete=models.CASCADE)

    def natural_key(self):
        return (self.name,) + self.author.natural_key()

    natural_key.dependencies = ["example_app.person"]
```

----------------------------------------

TITLE: Validating Host Headers and Handling Exceptions (Django/Python)
DESCRIPTION: Explains that calling the `request.get_host()` method triggers validation against the `ALLOWED_HOSTS` setting. If the request's Host header is not found in the allowed list, Django raises a `SuspiciousOperation` exception, preventing the application from processing requests with potentially malicious Host headers.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.4.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
request.get_host()
```

LANGUAGE: python
CODE:
```
SuspiciousOperation
```

----------------------------------------

TITLE: Styling Poll Links with CSS in Django
DESCRIPTION: Basic CSS styling that changes the color of poll links to green in the Django polls application.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial06.txt#2025-04-23_snippet_0

LANGUAGE: css
CODE:
```
li a {
    color: green;
}
```

----------------------------------------

TITLE: Structuring Django Model with Meta Class
DESCRIPTION: Illustrates the correct placement of the Meta class within a Django model, following it with a single blank line after field definitions. This structure improves readability and follows Django's conventions.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
class Person(models.Model):
    first_name = models.CharField(max_length=20)
    last_name = models.CharField(max_length=40)

    class Meta:
        verbose_name_plural = "people"
```

----------------------------------------

TITLE: Annotating QuerySet with Arithmetic and Aggregation (Count) - Django ORM - Python
DESCRIPTION: This snippet shows how to annotate a Django queryset with a computed field by combining arithmetic expressions and an aggregate (Count). The example calculates 'managers_required' for each Company by dividing 'num_employees' by 4 and adding the count of managers, in a single database query. It depends on django.db.models.Count and assumes appropriate numeric and related fields exist. The output is a queryset where each Company includes the computed 'managers_required' attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
from django.db.models import Count

Company.objects.annotate(
    managers_required=(Count("num_employees") / 4) + Count("num_managers")
)
```

----------------------------------------

TITLE: Serializing Django Form Errors as JSON in Python
DESCRIPTION: Demonstrates serialization of form errors to JSON using the as_json() method. Returns error messages with error codes for each field. Suitable for AJAX or API responses; escaping is optional and must be handled as described if directly embedding in HTML.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> f.errors.as_json()
{"sender": [{"message": "Enter a valid email address.", "code": "invalid"}],
"subject": [{"message": "This field is required.", "code": "required"}]}
```

----------------------------------------

TITLE: Implementing decompress in a Custom MultiWidget in Python
DESCRIPTION: Provides an example implementation of the mandatory `decompress` method for a hypothetical `SplitDateTimeWidget` subclassing `MultiWidget`. This method takes a combined `datetime` object and splits it into a list containing the date and time components, defensively handling the case where the input `value` might be None by returning `[None, None]`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.forms import MultiWidget


class SplitDateTimeWidget(MultiWidget):
    # ...

    def decompress(self, value):
        if value:
            return [value.date(), value.time()]
        return [None, None]
```

----------------------------------------

TITLE: HTML Template for Displaying Items
DESCRIPTION: Creates an HTML template to iterate through 'items' context variable and display each item's name and description in a list. Requires familiarity with Django template syntax and context variables.
SOURCE: https://github.com/django/django/blob/main/tests/view_tests/media/%2F.txt#_snippet_3

LANGUAGE: HTML
CODE:
```
<ul>
{% for item in items %}
    <li>
        <h2>{{ item.name }}</h2>
        <p>{{ item.description }}</p>
    </li>
{% endfor %}
</ul>
```

----------------------------------------

TITLE: Defining Custom Serialization Module in Django Settings (Python)
DESCRIPTION: This snippet shows how to configure the SERIALIZATION_MODULES setting in Django to add a custom YAML serializer. It requires a valid import path to the YAML serializer module, allowing you to extend the framework's serialization capabilities. The setting is a dictionary mapping format names to import paths, enabling Django to use additional serialization formats beyond those built in. Input: none directly (just settings); Output: configuration enabling Django to use 'yaml' serialization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_55

LANGUAGE: python
CODE:
```
SERIALIZATION_MODULES = {"yaml": "path.to.yaml_serializer"}
```

----------------------------------------

TITLE: Enabling Facets for Django Admin Model - Python
DESCRIPTION: This Python snippet shows how to configure a Django ModelAdmin to always show facet counts, bypassing the need for a query parameter. It demonstrates setting the show_facets attribute to admin.ShowFacets.ALWAYS on a custom ModelAdmin subclass. Requires Django installed and the admin app enabled; admin.ShowFacets enum is available in recent Django versions. Takes no direct parameters, but should be added to the relevant ModelAdmin for the model needing persistent facets.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
from django.contrib import admin


class MyModelAdmin(admin.ModelAdmin):
    ...
    # Have facets always shown for this model admin.
    show_facets = admin.ShowFacets.ALWAYS
```

----------------------------------------

TITLE: Referencing Django Auth Decorators for Login Requirements
DESCRIPTION: Reference to the login_required decorator that could be used to protect views from anonymous access. This is mentioned as a mitigation that was already available in the admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.4.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.contrib.auth.decorators.login_required
```

----------------------------------------

TITLE: Translation without Alias in Django View
DESCRIPTION: Shows translation using the full gettext function name without an alias. This approach is identical in functionality to using the '_' alias but is more verbose.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.http import HttpResponse
from django.utils.translation import gettext


def my_view(request):
    output = gettext("Welcome to my site.")
    return HttpResponse(output)
```

----------------------------------------

TITLE: Updating Context Stack Dynamically in Django (Python)
DESCRIPTION: This code snippet demonstrates how to use the Django Context object as a stack, pushing and popping dictionaries and updating context data. It shows the use of update and pop methods to change and restore context variables, helpful for managing template context in nested scopes. Inputs are string key-value pairs; output depends on the context state. Requires Django's Context API.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
>>> c = Context()
>>> c["foo"] = "first level"
>>> c.update({"foo": "updated"})
{'foo': 'updated'}
>>> c["foo"]
'updated'
>>> c.pop()
{'foo': 'updated'}
>>> c["foo"]
'first level'
```

----------------------------------------

TITLE: Setting Plural Verbose Name in Django Model Meta
DESCRIPTION: Shows how to define a custom, human-readable plural name for a Django model using the `verbose_name_plural` attribute within its `Meta` class. If not provided, Django defaults to the `verbose_name` plus 's'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
verbose_name_plural = "stories"
```

----------------------------------------

TITLE: Enhanced Question QuerySet Filter
DESCRIPTION: Updated get_queryset method to filter out future questions using timezone-aware comparison.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
def get_queryset(self):
    """
    Return the last five published questions (not including those set to be
    published in the future).
    """
    return Question.objects.filter(pub_date__lte=timezone.now()).order_by("-pub_date")[
        :5
    ]
```

----------------------------------------

TITLE: Querying Django Application Registry
DESCRIPTION: Example showing how to access the Django application registry to get configuration information.
SOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.apps import apps
>>> apps.get_app_config("admin").verbose_name
'Administration'
```

----------------------------------------

TITLE: Inheriting Default Manager from Abstract Base Django
DESCRIPTION: This snippet defines a Django model class that inherits from `AbstractBase`. Since it doesn't define its own managers, it automatically inherits the `objects` manager (an instance of `CustomManager`) from the base class as its default.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_11

LANGUAGE: Python
CODE:
```
class ChildA(AbstractBase):
    # ...
    # This class has CustomManager as the default manager.
    pass
```

----------------------------------------

TITLE: Run Django testserver on custom address/port with fixtures (Console)
DESCRIPTION: Shows how to use the `django-admin testserver` command to specify a custom IP address and port using the `--addrport` option. This example sets the server to run on port 7000 and load data from `fixture1` and `fixture2`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_43

LANGUAGE: console
CODE:
```
django-admin testserver --addrport 7000 fixture1 fixture2
```

----------------------------------------

TITLE: Configuring Cached Database Backend for Sessions
DESCRIPTION: Setting the SESSION_ENGINE to use the cached database backend which provides a write-through cache for session data, applying writes to both database and cache.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
"django.contrib.sessions.backends.cached_db"
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'startswith' Lookup in Django Python
DESCRIPTION: Shows how to use the `startswith` lookup (`__startswith`) on the `ages` field. This query filters `Event` objects whose `ages` range has a lower bound equal to the specified value (21 in this case). Requires the `Event` model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_28

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__startswith=21)
<QuerySet [<Event: Pub trip>]>
```

----------------------------------------

TITLE: Importing Custom User Models in Tests with Django
DESCRIPTION: Example of explicitly importing a custom user model in a test module to ensure it's registered before swapping it with override_settings. Without this import, tests will fail with an ImproperlyConfigured error.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib.auth.tests.custom_user import CustomUser


@override_settings(AUTH_USER_MODEL="auth.CustomUser")
class CustomUserFeatureTests(TestCase):
    def test_something(self):
        # Test code here
        ...
```

----------------------------------------

TITLE: Registering a Django System Check with Tags in Python
DESCRIPTION: Demonstrates how to register a custom system check function using the `@register()` decorator with specific tags (e.g., `Tags.compatibility`). Tagging allows running specific groups of checks. The check function `my_check` should contain the validation logic.
SOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.core.checks import register, Tags


@register(Tags.compatibility)
def my_check(app_configs, **kwargs):
    # ... perform compatibility checks and collect errors
    return errors
```

----------------------------------------

TITLE: DatetimeField Range Filtering Limitation - SQL Example
DESCRIPTION: Demonstrates the limitation when filtering datetime fields with date-only boundaries. Results include data only up to midnight of the final day. Inputs are timestamp strings; output includes records from the exact start to 00:00:00 of the end date, excluding later times on that day. Ensure date and datetime types are not mixed to avoid incomplete ranges.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_102

LANGUAGE: sql
CODE:
```
SELECT ... WHERE pub_date BETWEEN '2005-01-01 00:00:00' and '2005-03-31 00:00:00';
```

----------------------------------------

TITLE: Defining Media Assets Using Script Objects
DESCRIPTION: Example showing how to define media assets using Script objects with custom HTML attributes
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
class Media:
    js = [
        Script(
            "https://cdn.example.com/something.min.js",
            **{
                "crossorigin": "anonymous",
                "async": True,
            },
        ),
    ]
```

----------------------------------------

TITLE: Setting Default Ordering on a Django Proxy Model
DESCRIPTION: Illustrates using a proxy model (`OrderedPerson`) to define a different default ordering (`ordering = ["last_name"]`) for queries compared to the base model (`Person`), while still using the same database table.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_49

LANGUAGE: python
CODE:
```
class OrderedPerson(Person):
    class Meta:
        ordering = ["last_name"]
        proxy = True
```

----------------------------------------

TITLE: Marking Middleware as Asynchronous-Only
DESCRIPTION: A decorator that marks middleware as asynchronous-only. Django will wrap it in an asynchronous event loop when called from the WSGI request path.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
async_only_middleware(middleware)
```

----------------------------------------

TITLE: Installing Django App Package Using Pip
DESCRIPTION: Shell command for installing a local Django package using pip with user-specific installation.
SOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
python -m pip install --user django-polls/dist/django-polls-0.1.tar.gz
```

----------------------------------------

TITLE: Enabling Field Localization in Django ModelForm
DESCRIPTION: This snippet demonstrates how to enable localization for specific fields in a Django ModelForm using the localized_fields attribute of the Meta class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
from django.forms import ModelForm
from myapp.models import Author
class AuthorForm(ModelForm):
    class Meta:
        model = Author
        localized_fields = ['birth_date']
```

----------------------------------------

TITLE: Configuring JavaScriptCatalog View in Django URLs
DESCRIPTION: Examples of how to configure the JavaScriptCatalog view in Django URL patterns for translating JavaScript.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_34

LANGUAGE: python
CODE:
```
from django.views.i18n import JavaScriptCatalog

urlpatterns = [
    path("jsi18n/", JavaScriptCatalog.as_view(), name="javascript-catalog"),
]

# Example with custom packages
urlpatterns = [
    path(
        "jsi18n/myapp/",
        JavaScriptCatalog.as_view(packages=["your.app.label"]),
        name="javascript-catalog",
    ),
]

# Example with i18n_patterns()
from django.conf.urls.i18n import i18n_patterns

urlpatterns = i18n_patterns(
    path("jsi18n/", JavaScriptCatalog.as_view(), name="javascript-catalog"),
)
```

----------------------------------------

TITLE: Setting Django Settings Module as Environment Variable for Tests
DESCRIPTION: These commands show how to set the DJANGO_SETTINGS_MODULE environment variable for running tests, with examples for both Unix-like systems and Windows command prompt.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_4

LANGUAGE: console
CODE:
```
$ DJANGO_SETTINGS_MODULE=my_postgres_settings tox -e py312-postgres
```

LANGUAGE: doscon
CODE:
```
...\.> set DJANGO_SETTINGS_MODULE=my_postgres_settings
...\.> tox -e py312-postgres
```

----------------------------------------

TITLE: Case-Sensitive Regex Filtering using `regex` Lookup in Django (Python and SQL)
DESCRIPTION: Demonstrates using the `__regex` lookup for case-sensitive regular expression matching in Django QuerySets. The specific regex syntax depends on the database backend (MySQL, Oracle, PostgreSQL, SQLite). For SQLite, which lacks native regex support, Django uses Python's `re` module via a user-defined function. Provides a Python example using a raw string and lists SQL equivalents for various databases.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_123

LANGUAGE: Python
CODE:
```
Entry.objects.get(title__regex=r"^(An?|The) +")
```

LANGUAGE: SQL
CODE:
```
SELECT ... WHERE title REGEXP BINARY '^(An?|The) +'; -- MySQL

SELECT ... WHERE REGEXP_LIKE(title, '^(An?|The) +', 'c'); -- Oracle

SELECT ... WHERE title ~ '^(An?|The) +'; -- PostgreSQL

SELECT ... WHERE title REGEXP '^(An?|The) +'; -- SQLite
```

----------------------------------------

TITLE: Configuring Apache for Group-Based Authorization with Django
DESCRIPTION: Apache configuration that extends authentication to include group-based authorization. This setup restricts access to the '/secret' path to users who are members of the 'secret-agents' group in Django.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/apache-auth.txt#2025-04-23_snippet_3

LANGUAGE: apache
CODE:
```
WSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py

WSGIProcessGroup %{GLOBAL}
WSGIApplicationGroup %{GLOBAL}

<Location "/secret">
    AuthType Basic
    AuthName "Top Secret"
    AuthBasicProvider wsgi
    WSGIAuthUserScript /path/to/mysite.com/mysite/wsgi.py
    WSGIAuthGroupScript /path/to/mysite.com/mysite/wsgi.py
    Require group secret-agents
    Require valid-user
</Location>
```

----------------------------------------

TITLE: Defining ArticleForm and formset_factory Usage - Django Forms - Python
DESCRIPTION: Illustrates creation of a basic ArticleForm with title and pub_date fields, then uses Django's formset_factory to build an ArticleFormSet for managing multiple form instances. It demonstrates both the creation pattern and intended class structure within interactive Python environments. Use requires django.forms and the respective fields; no external dependencies except Django.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> class ArticleForm(Form):
...     title = CharField()
...     pub_date = DateField()
...
>>> ArticleFormSet = formset_factory(ArticleForm)
```

----------------------------------------

TITLE: Media Inheritance with an Extended Widget in Django
DESCRIPTION: Demonstrates how a widget inherits media assets from its parent widget when extending a widget class with its own Media definition.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> class FancyCalendarWidget(CalendarWidget):
...     class Media:
...         css = {
...             "all": ["fancy.css"],
...         }
...         js = ["whizbang.js"]
...

>>> w = FancyCalendarWidget()
>>> print(w.media)
<link href="https://static.example.com/pretty.css" media="all" rel="stylesheet">
<link href="https://static.example.com/fancy.css" media="all" rel="stylesheet">
<script src="https://static.example.com/animations.js"></script>
<script src="https://static.example.com/actions.js"></script>
<script src="https://static.example.com/whizbang.js"></script>
```

----------------------------------------

TITLE: Assigning and Accessing Composite Primary Keys in Django Shell - Pycon
DESCRIPTION: Demonstrates interactive usage of composite primary keys with Django ORM objects. Shows creation of related Product, Order, and OrderLineItem models, then inspects the assigned composite primary key as a tuple. Requires access to a Django shell environment and properly configured models/database. Inputs: field values for object creation; output: tuple representation of pk.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_1

LANGUAGE: pycon
CODE:
```
>>> product = Product.objects.create(name="apple")
>>> order = Order.objects.create(reference="A755H")
>>> item = OrderLineItem.objects.create(product=product, order=order, quantity=1)
>>> item.pk
(1, "A755H")
```

----------------------------------------

TITLE: Demonstrating HttpRequest.get_signed_cookie Usage in Django (Python)
DESCRIPTION: Presents interactive shell examples of using get_signed_cookie() for various scenarios: retrieving, missing, wrong salt, and expired cookies. Requires that signed cookies are previously set using Django's signing mechanism. Inputs: cookie key, salt, max_age, and default; outputs: cookie value or exceptions/return values for error cases.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> request.get_signed_cookie("name")
'Tony'
>>> request.get_signed_cookie("name", salt="name-salt")
'Tony' # assuming cookie was set using the same salt
>>> request.get_signed_cookie("nonexistent-cookie")
KeyError: 'nonexistent-cookie'
>>> request.get_signed_cookie("nonexistent-cookie", False)
False
>>> request.get_signed_cookie("cookie-that-was-tampered-with")
BadSignature: ...
>>> request.get_signed_cookie("name", max_age=60)
SignatureExpired: Signature age 1677.3839159 > 60 seconds
>>> request.get_signed_cookie("name", False, max_age=60)
False

```

----------------------------------------

TITLE: Using Unlocalize Template Filter in Django Templates
DESCRIPTION: Example of using the 'unlocalize' template filter to force a single value to be displayed without localization in a Django template. This is useful for machine-readable outputs like JavaScript or XML.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/formatting.txt#2025-04-23_snippet_3

LANGUAGE: html+django
CODE:
```
{% load l10n %}

{{ value|unlocalize }}
```

----------------------------------------

TITLE: Registering Post-Render Callback with TemplateResponse in Django (Python)
DESCRIPTION: This Django view function (`my_view`) demonstrates creating a `TemplateResponse` instance for "mytemplate.html". It registers a callback function, `my_render_callback` (assumed to be defined elsewhere, along with `do_post_processing`), using `add_post_render_callback`. This callback will be executed after the template rendering is complete, receiving the final rendered response object as an argument, allowing for content-sensitive post-processing.
SOURCE: https://github.com/django/django/blob/main/docs/ref/template-response.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
# Do content-sensitive processing
do_post_processing()


def my_view(request):
    # Create a response
    response = TemplateResponse(request, "mytemplate.html", {})
    # Register the callback
    response.add_post_render_callback(my_render_callback)
    # Return the response
    return response
```

----------------------------------------

TITLE: Checking Specific System Check Tags
DESCRIPTION: Demonstrates using the '--tag' option with the 'check' command to limit the system checks performed to specific categories like 'models' or 'compatibility'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_5

LANGUAGE: Console
CODE:
```
django-admin check --tag models --tag compatibility
```

----------------------------------------

TITLE: Defining i18n URL Patterns in Django
DESCRIPTION: Demonstrates how to use i18n_patterns to automatically prepend the current active language code to URL patterns in Django.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_44

LANGUAGE: python
CODE:
```
from django.conf.urls.i18n import i18n_patterns
from django.urls import include, path

from about import views as about_views
from news import views as news_views
from sitemap.views import sitemap

urlpatterns = [
    path("sitemap.xml", sitemap, name="sitemap-xml"),
]

news_patterns = (
    [
        path("", news_views.index, name="index"),
        path("category/<slug:slug>/", news_views.category, name="category"),
        path("<slug:slug>/", news_views.details, name="detail"),
    ],
    "news",
)

urlpatterns += i18n_patterns(
    path("about/", about_views.main, name="about"),
    path("news/", include(news_patterns, namespace="news")),
)
```

----------------------------------------

TITLE: Accessing Form Field Names
DESCRIPTION: Shows how to access the name attribute of BoundField instances in a form.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_37

LANGUAGE: pycon
CODE:
```
>>> f = ContactForm()
>>> print(f["subject"].name)
subject
>>> print(f["message"].name)
message
```

----------------------------------------

TITLE: Determining the Installed Django Version
DESCRIPTION: Demonstrates how to use the 'version' command to display the current Django version installed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_2

LANGUAGE: Console
CODE:
```
django-admin version
```

----------------------------------------

TITLE: Manual List Retrieval with Error Handling
DESCRIPTION: Equivalent example showing manual list retrieval and 404 handling without the shortcut.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.http import Http404


def my_view(request):
    my_objects = list(MyModel.objects.filter(published=True))
    if not my_objects:
        raise Http404("No MyModel matches the given query.")
```

----------------------------------------

TITLE: Effect of Deleting Object on Reverse M2M Relationship (pycon)
DESCRIPTION: Shows the impact of deleting an `Article` instance (`a2`) using `delete()`. Subsequent queries show the deleted article is removed from the list of all articles, and publications previously related to it (`p2`) no longer list it in their reverse `article_set`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_19

LANGUAGE: pycon
CODE:
```
>>> a2.delete()
>>> Article.objects.all()
<QuerySet [<Article: Django lets you build web apps easily>]>
>>> p2.article_set.all()
<QuerySet []>
```

----------------------------------------

TITLE: Setting UTF-8 encoding in mod_wsgi daemon mode
DESCRIPTION: Alternative configuration to fix UnicodeEncodeError when using mod_wsgi daemon mode by setting language and locale options in the WSGIDaemonProcess directive.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/modwsgi.txt#2025-04-23_snippet_2

LANGUAGE: text
CODE:
```
WSGIDaemonProcess example.com lang='en_US.UTF-8' locale='en_US.UTF-8'
```

----------------------------------------

TITLE: Safe Format for Date Filter Usage - Django Template
DESCRIPTION: This snippet provides an example of the intended, safe usage of the date template filter by specifying a conventional date format string (e.g., \"j/m/Y\"). This prevents disclosure of secret application settings as only valid date formats are used.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.11.txt#2025-04-23_snippet_2

LANGUAGE: django-template
CODE:
```
"j/m/Y"
```

----------------------------------------

TITLE: Forcing Bytestring Conversion with force_bytes
DESCRIPTION: Similar to smart_bytes, but resolves lazy instances to bytestrings rather than keeping them as lazy objects. Can optionally skip conversion of non-string-like objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
force_bytes(s, encoding='utf-8', strings_only=False, errors='strict')
```

----------------------------------------

TITLE: Django Template Radio Button Iteration Example
DESCRIPTION: Demonstrates how to iterate over radio buttons in a Django template for more granular control over markup generation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_16

LANGUAGE: Django Template
CODE:
```
<fieldset>
    <legend>{{ myform.beatles.label }}</legend>
    {% for radio in myform.beatles %}
    <div class="myradio">
        {{ radio }}
    </div>
    {% endfor %}
</fieldset>
```

----------------------------------------

TITLE: Implementing JSON Template View in Django
DESCRIPTION: View class combining JSONResponseMixin with TemplateView for JSON responses.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.views.generic import TemplateView


class JSONView(JSONResponseMixin, TemplateView):
    def render_to_response(self, context, **response_kwargs):
        return self.render_to_json_response(context, **response_kwargs)
```

----------------------------------------

TITLE: Has_any_keys Lookup for JSONField in Django
DESCRIPTION: Demonstrates the has_any_keys lookup which returns objects where any of the given keys exist in the top-level of the JSONField data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_36

LANGUAGE: python
CODE:
```
>>> Dog.objects.create(name="Rufus", data={"breed": "labrador"})
<Dog: Rufus>
>>> Dog.objects.create(name="Meg", data={"owner": "Bob"})
<Dog: Meg>
>>> Dog.objects.filter(data__has_any_keys=["owner", "breed"])
<QuerySet [<Dog: Rufus>, <Dog: Meg>]>
```

----------------------------------------

TITLE: Calculating Distance Between Australian Cities
DESCRIPTION: Example demonstrating how to calculate distances between geographic points using the Distance function in Django GIS, specifically measuring distances from Hobart to other Australian cities.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.db.models.functions import Distance
>>> pnt = AustraliaCity.objects.get(name="Hobart").point
>>> for city in AustraliaCity.objects.annotate(distance=Distance("point", pnt)):
...     print(city.name, city.distance)
...
Wollongong 990071.220408 m
Shellharbour 972804.613941 m
Thirroul 1002334.36351 m
...
```

----------------------------------------

TITLE: Using naturalday Filter in Django Template
DESCRIPTION: Shows how the naturalday filter converts dates to 'today', 'tomorrow', or 'yesterday' when appropriate.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_4

LANGUAGE: django
CODE:
```
{{ date|naturalday }} becomes yesterday.
{{ date|naturalday }} becomes today.
{{ date|naturalday }} becomes tomorrow.
```

----------------------------------------

TITLE: Updating a Django Model Field using Python Logic
DESCRIPTION: Illustrates a standard Python approach to incrementing a model field. This involves retrieving the object, modifying the attribute value in Python memory, and then saving the object back to the database. This method can be less efficient and potentially prone to race conditions in concurrent environments compared to using F() expressions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
# Tintin filed a news story!
reporter = Reporters.objects.get(name="Tintin")
reporter.stories_filed += 1
reporter.save()
```

----------------------------------------

TITLE: Implementing NotEqual Lookup in Django
DESCRIPTION: Creates a custom NotEqual lookup that generates SQL for inequality comparisons. It implements the as_sql method to produce the appropriate SQL statement and registers the lookup with all Field subclasses.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db.models import Lookup


class NotEqual(Lookup):
    lookup_name = "ne"

    def as_sql(self, compiler, connection):
        lhs, lhs_params = self.process_lhs(compiler, connection)
        rhs, rhs_params = self.process_rhs(compiler, connection)
        params = lhs_params + rhs_params
        return "%s <> %s" % (lhs, rhs), params

from django.db.models import Field

Field.register_lookup(NotEqual)
```

----------------------------------------

TITLE: Defining USE_THOUSAND_SEPARATOR setting
DESCRIPTION: This setting controls whether numbers are displayed with a thousand separator. When set to True, Django formats numbers using NUMBER_GROUPING and THOUSAND_SEPARATOR settings. Locale dictates the values for these settings, taking precedence over project settings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_61



----------------------------------------

TITLE: Querying Spatial Relationships with DE-9IM in Django ORM
DESCRIPTION: Example of using the 'relate' lookup with DE-9IM intersection pattern to define specific geometric relationships in PostGIS, MariaDB, and SpatiaLite.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__relate=(geom, "T*T***FF*"))
```

----------------------------------------

TITLE: Incrementally Adding Content to HttpResponse in Python
DESCRIPTION: Demonstrates how to use an HttpResponse object as a file-like object to add content incrementally.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
>>> response = HttpResponse()
>>> response.write("<p>Here's the text of the web page.</p>")
>>> response.write("<p>Here's another paragraph.</p>")
```

----------------------------------------

TITLE: Creating a BRIN Index in Django with PostgreSQL
DESCRIPTION: Creates a BRIN (Block Range INdex) with options for automatic summarization and pages per range. Useful for large tables with linearly ordered data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
BrinIndex(*expressions, autosummarize=None, pages_per_range=None, **options)
```

----------------------------------------

TITLE: Using HasKey Lookup in Django ORM Queries
DESCRIPTION: Illustrates the safe usage of the has_key lookup in Django ORM queries, which is not affected by the SQL injection vulnerability on Oracle. This method uses the __ syntax for JSON field lookups.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.17.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
# Safe usage of has_key lookup
MyModel.objects.filter(json_field__has_key='some_key')
```

----------------------------------------

TITLE: Configuring Unknown User Creation in RemoteUserBackend (Python)
DESCRIPTION: A boolean attribute on `RemoteUserBackend` that controls whether a new user object is created if the username provided via `REMOTE_USER` does not exist in the database. Defaults to `True`. Set to `False` to prevent automatic user creation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
create_unknown_user
```

----------------------------------------

TITLE: Instantiating GEOS Point Objects in Python
DESCRIPTION: Illustrates two equivalent ways to create a `Point` geometry object using Django's GEOS interface. The first method uses separate `x` and `y` coordinate arguments, while the second uses a single sequence (a list or tuple) containing the coordinates. Both methods result in the same `Point` object.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_6

LANGUAGE: pycon
CODE:
```
>>> pnt = Point(5, 23)
>>> pnt = Point([5, 23])
```

----------------------------------------

TITLE: Configuring Database Dependencies in Django Test Cases
DESCRIPTION: This snippet shows how to set database dependencies for Django test cases. The 'databases' attribute can be set to '__all__' to allow queries on all databases, replicating the previous behavior of 'allow_database_queries=True' and 'multi_db=True'.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
databases='__all__'
```

----------------------------------------

TITLE: Handling Disconnects in Async Django Streaming Response Generators
DESCRIPTION: Defines an asynchronous generator function `streaming_response` intended for use with Django's `StreamingHttpResponse`. It demonstrates how to wrap the streaming logic in a try...except block to catch `asyncio.CancelledError`, allowing for cleanup actions when a client disconnects during the stream. The generator yields chunks from an assumed `my_streaming_iterator`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
async def streaming_response():
    try:
        # Do some work here
        async for chunk in my_streaming_iterator():
            yield chunk
    except asyncio.CancelledError:
        # Handle disconnect
        ...
        raise
```

----------------------------------------

TITLE: Defining Django CreateView Class
DESCRIPTION: Defines the CreateView class in Django, which is used for creating new objects. It lists the available attributes and methods for this view.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
class CreateView():
    # Attributes and methods listed in the documentation
```

----------------------------------------

TITLE: Referencing Static File from Another App in Django
DESCRIPTION: This snippet demonstrates how to reference a static file that belongs to a different app within a Django project. It's a common pattern for organizing and accessing static assets across multiple apps.
SOURCE: https://github.com/django/django/blob/main/tests/servers/another_app/static/another_app/another_app_static_file.txt#2025-04-23_snippet_0

LANGUAGE: Plain Text
CODE:
```
static file from another_app
```

----------------------------------------

TITLE: Database Query Testing with TestCase in Django
DESCRIPTION: Demonstrates how to configure TestCase to allow queries against specific non-default databases using the databases attribute.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
class OtherDBTests(TestCase):
    databases = {"other"}

    def test_other_db_query(self): ...
```

----------------------------------------

TITLE: Generating RSS Feed with Django's feedgenerator
DESCRIPTION: Demonstrates how to create an RSS feed using Django's feedgenerator module. It shows initializing a feed, adding an item, and writing the feed to a file.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_24

LANGUAGE: pycon
CODE:
```
>>> from django.utils import feedgenerator
>>> feed = feedgenerator.Rss201rev2Feed(
...     title="Poynter E-Media Tidbits",
...     link="https://www.poynter.org/tag/e-media-tidbits/",
...     description="A group blog by the sharpest minds in online media/journalism/publishing.",
...     language="en",
... )
>>> feed.add_item(
...     title="Hello",
...     link="https://www.holovaty.com/test/",
...     description="Testing.",
... )
>>> with open("test.rss", "w") as fp:
...     feed.write(fp, "utf-8")
...
```

----------------------------------------

TITLE: Named Tuple Result Fetching Function
DESCRIPTION: Function to convert database cursor results into named tuples, providing both attribute-based and index-based access to results.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from collections import namedtuple

def namedtuplefetchall(cursor):
    """
    Return all rows from a cursor as a namedtuple.
    Assume the column names are unique.
    """
    desc = cursor.description
    nt_result = namedtuple("Result", [col[0] for col in desc])
    return [nt_result(*row) for row in cursor.fetchall()]
```

----------------------------------------

TITLE: Archive Index Template Example
DESCRIPTION: Django template for displaying the archive index of articles with publication dates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_2

LANGUAGE: html
CODE:
```
<ul>
    {% for article in latest %}
        <li>{{ article.pub_date }}: {{ article.title }}</li>
    {% endfor %}
</ul>
```

----------------------------------------

TITLE: Using naturaltime Filter in Django Template
DESCRIPTION: Demonstrates the naturaltime filter, which converts datetime values to human-readable time differences.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_5

LANGUAGE: django
CODE:
```
{{ datetime|naturaltime }} becomes now.
{{ datetime|naturaltime }} becomes 29 seconds ago.
{{ datetime|naturaltime }} becomes a minute ago.
{{ datetime|naturaltime }} becomes 4 minutes ago.
{{ datetime|naturaltime }} becomes 59 minutes ago.
{{ datetime|naturaltime }} becomes an hour ago.
{{ datetime|naturaltime }} becomes 2 hours ago.
{{ datetime|naturaltime }} becomes 1 day, 2 hours ago.
{{ datetime|naturaltime }} becomes 30 seconds from now.
{{ datetime|naturaltime }} becomes a minute from now.
{{ datetime|naturaltime }} becomes 4 minutes from now.
{{ datetime|naturaltime }} becomes an hour from now.
{{ datetime|naturaltime }} becomes 2 hours from now.
{{ datetime|naturaltime }} becomes 1 day from now.
{{ datetime|naturaltime }} becomes 1 week, 2 days from now.
```

----------------------------------------

TITLE: Creating Locale-Independent Django Management Commands
DESCRIPTION: Demonstrates how to create a management command that runs without an active locale using the @no_translations decorator. This prevents translated content from being inserted into the database.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-management-commands.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.core.management.base import BaseCommand, no_translations


class Command(BaseCommand):
    ...

    @no_translations
    def handle(self, *args, **options): ...
```

----------------------------------------

TITLE: Fixing SQL Injection in QuerySet Methods (Python/Django)
DESCRIPTION: Addresses CVE-2022-28346, fixing potential SQL injection vulnerabilities in QuerySet.annotate(), aggregate(), and extra() methods when using dictionary expansion for kwargs.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.13.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
QuerySet.annotate(**kwargs)
QuerySet.aggregate(**kwargs)
QuerySet.extra(**kwargs)
```

----------------------------------------

TITLE: Project Layout with Top-Level App Directory (Text)
DESCRIPTION: Shows an alternative Django project structure where an application (`myapp`) is placed adjacent to `manage.py` and outside the main project package (`mysite`). This allows the app to be imported as a top-level module (e.g., `import myapp`) rather than using the project prefix.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_2

LANGUAGE: text
CODE:
```
manage.py
myapp/
    __init__.py
    models.py
mysite/
    __init__.py
    settings.py
    urls.py
```

----------------------------------------

TITLE: Implementing Custom Template Tag Compilation Function in Python
DESCRIPTION: This function parses the raw template tag and creates a Node object. It handles argument parsing and error checking for the 'current_time' custom tag.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
from django import template


def do_current_time(parser, token):
    try:
        # split_contents() knows not to split quoted strings.
        tag_name, format_string = token.split_contents()
    except ValueError:
        raise template.TemplateSyntaxError(
            "%r tag requires a single argument" % token.contents.split()[0]
        )
    if not (format_string[0] == format_string[-1] and format_string[0] in ('"', "'")):
        raise template.TemplateSyntaxError(
            "%r tag's argument should be in quotes" % tag_name
        )
    return CurrentTimeNode(format_string[1:-1])
```

----------------------------------------

TITLE: Setting up RemoteUserBackend Authentication
DESCRIPTION: Configuration of Django AUTHENTICATION_BACKENDS setting to use RemoteUserBackend for handling REMOTE_USER authentication.
SOURCE: https://github.com/django/django/blob/main/docs/howto/auth-remote-user.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.RemoteUserBackend",
]
```

----------------------------------------

TITLE: Relative Lazy Relationship in an Abstract Django Model
DESCRIPTION: This snippet shows an abstract model (`AbstractCar`) defined in `products/models.py` that uses a relative lazy reference ("Manufacturer") to a model that is not defined in the same file or application. This reference will be resolved when a concrete model subclasses `AbstractCar`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_47

LANGUAGE: python
CODE:
```
from django.db import models


class AbstractCar(models.Model):
    manufacturer = models.ForeignKey("Manufacturer", on_delete=models.CASCADE)

    class Meta:
        abstract = True
```

----------------------------------------

TITLE: Implementing Custom Database-Backed Session Engine in Python
DESCRIPTION: This code snippet demonstrates how to create a custom database-backed session engine in Django. It extends the AbstractBaseSession model with an additional account_id field and customizes the SessionStore to handle this new field.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
from django.contrib.sessions.backends.db import SessionStore as DBStore
from django.contrib.sessions.base_session import AbstractBaseSession
from django.db import models


class CustomSession(AbstractBaseSession):
    account_id = models.IntegerField(null=True, db_index=True)

    @classmethod
    def get_session_store_class(cls):
        return SessionStore


class SessionStore(DBStore):
    @classmethod
    def get_model_class(cls):
        return CustomSession

    def create_model_instance(self, data):
        obj = super().create_model_instance(data)
        try:
            account_id = int(data.get("_auth_user_id"))
        except (ValueError, TypeError):
            account_id = None
        obj.account_id = account_id
        return obj
```

----------------------------------------

TITLE: Setting Universal User-Agent Access in robots.txt
DESCRIPTION: This configuration allows all web crawlers to access the entire website without restrictions. It uses a wildcard (*) to match any User-Agent.
SOURCE: https://github.com/django/django/blob/main/tests/generic_views/templates/generic_views/robots.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
User-Agent: *
```

----------------------------------------

TITLE: Rendering HTML Output with Required/Custom Label Classes using Django Forms - Python
DESCRIPTION: Shows Python REPL usage for inspecting a Django Form instance's HTML rendering output, focusing on the presence of 'required' CSS classes in div and label elements. Also demonstrates using BoundField.label_tag() and BoundField.legend_tag() with additional attributes. Assumes the existence of a ContactForm and relevant field definitions. Inputs are bound form data and field names; outputs include HTML fragments that integrate the specified class attributes. Useful for visually confirming frontend behaviors tied to form validation and required states in Django templates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
>>> f = ContactForm(data)
>>> print(f)
<div class="required"><label for="id_subject" class="required">Subject:</label> ...
<div class="required"><label for="id_message" class="required">Message:</label> ...
<div class="required"><label for="id_sender" class="required">Sender:</label> ...
<div><label for="id_cc_myself">Cc myself:</label> ...
>>> f["subject"].label_tag()
<label class="required" for="id_subject">Subject:</label>
>>> f["subject"].legend_tag()
<legend class="required" for="id_subject">Subject:</legend>
>>> f["subject"].label_tag(attrs={"class": "foo"})
<label for="id_subject" class="foo required">Subject:</label>
>>> f["subject"].legend_tag(attrs={"class": "foo"})
<legend for="id_subject" class="foo required">Subject:</legend>
```

----------------------------------------

TITLE: Querying Non-Range Fields with 'contained_by' Lookup in Django Python
DESCRIPTION: Shows that the `contained_by` lookup can also be applied to non-range fields like `DateTimeField`. This query filters `Event` objects where the `start` timestamp is contained within the specified `DateTimeTZRange`. Requires the `Event` model, `DateTimeTZRange`, `datetime`, and `django.utils.timezone`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_21

LANGUAGE: pycon
CODE:
```
>>> from django.db.backends.postgresql.psycopg_any import DateTimeTZRange
>>> Event.objects.filter(
...     start__contained_by=DateTimeTZRange(
...         timezone.now() - datetime.timedelta(hours=1),
...         timezone.now() + datetime.timedelta(hours=1),
...     ),
... )
<QuerySet [<Event: Soft play>]>
```

----------------------------------------

TITLE: Compiling Django Messages (i18n)
DESCRIPTION: Provides examples of using the 'compilemessages' command with options like '--locale'/'--exclude' to specify languages and '--use-fuzzy' to include fuzzy translations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_8

LANGUAGE: Console
CODE:
```
django-admin compilemessages --locale=pt_BR
django-admin compilemessages --locale=pt_BR --locale=fr -f
django-admin compilemessages -l pt_BR
django-admin compilemessages -l pt_BR -l fr --use-fuzzy
django-admin compilemessages --exclude=pt_BR
django-admin compilemessages --exclude=pt_BR --exclude=fr
django-admin compilemessages -x pt_BR
django-admin compilemessages -x pt_BR -x fr
```

----------------------------------------

TITLE: Implementing MonthArchiveView
DESCRIPTION: Custom MonthArchiveView implementation for Article model with specific settings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.views.generic.dates import MonthArchiveView

from myapp.models import Article


class ArticleMonthArchiveView(MonthArchiveView):
    queryset = Article.objects.all()
    date_field = "pub_date"
    allow_future = True
```

----------------------------------------

TITLE: Mixing Strings and Variables in the Cycle Tag (Django)
DESCRIPTION: Illustrates the flexibility of the `{% cycle %}` tag by mixing string literals ('row1', 'row3') and template variables (`rowvalue2`) as arguments for the cycle sequence.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_7

LANGUAGE: html+django
CODE:
```
{% for o in some_list %}
    <tr class="{% cycle 'row1' rowvalue2 'row3' %}">
        ...
    </tr>
{% endfor %}
```

----------------------------------------

TITLE: Implementing a Basic RSS Feed Class in Django
DESCRIPTION: This example demonstrates how to create a simple RSS feed for a police beat news site using Django's Feed class. It shows how to define feed attributes and methods to populate feed items.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.contrib.syndication.views import Feed
from django.urls import reverse
from policebeat.models import NewsItem


class LatestEntriesFeed(Feed):
    title = "Police beat site news"
    link = "/sitenews/"
    description = "Updates on changes and additions to police beat central."

    def items(self):
        return NewsItem.objects.order_by("-pub_date")[:5]

    def item_title(self, item):
        return item.title

    def item_description(self, item):
        return item.description

    # item_link is only needed if NewsItem has no get_absolute_url method.
    def item_link(self, item):
        return reverse("news-item", args=[item.pk])
```

----------------------------------------

TITLE: Filtering Inline Instances in Django ModelAdmin
DESCRIPTION: This method filters inline instances in the admin interface, hiding a specific inline (MyInline) in the add view.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_49

LANGUAGE: python
CODE:
```
def get_formsets_with_inlines(self, request, obj=None):
    for inline in self.get_inline_instances(request, obj):
        # hide MyInline in the add view
        if not isinstance(inline, MyInline) or obj is not None:
            yield inline.get_formset(request, obj), inline
```

----------------------------------------

TITLE: Custom Inline Management in Django ModelAdmin
DESCRIPTION: Example of custom inline model management in Django admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_48

LANGUAGE: python
CODE:
```
class MyModelAdmin(admin.ModelAdmin):
    inlines = [MyInline, SomeOtherInline]
```

----------------------------------------

TITLE: Failing Silently with Django Messages Framework
DESCRIPTION: Demonstrates how to add messages with fail_silently option to prevent exceptions when the messages framework is disabled in reusable apps.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
messages.add_message(
    request,
    messages.SUCCESS,
    "Profile details updated.",
    fail_silently=True,
)
messages.info(request, "Hello world.", fail_silently=True)
```

----------------------------------------

TITLE: Deprecation of '=' as Comparison Operator in Django Template if Tag - reStructuredText
DESCRIPTION: Addresses the deprecation of using a single equals sign (=) as a comparison operator in the Django template {% if %} tag. The double equals (==) is now the required syntax for equality testing to avoid confusion and inconsistent template behavior.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_13

LANGUAGE: reStructuredText
CODE:
```
``=`` as comparison operator in ``if`` template tag
---------------------------------------------------

Using a single equals sign with the ``{% if %}`` template tag for equality
testing was undocumented and untested. It's now deprecated in favor of ``==``.
```

----------------------------------------

TITLE: Generating Coverage Report for Django Tests
DESCRIPTION: This command generates a report of the code coverage data collected from running Django tests with coverage.py.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_23

LANGUAGE: shell
CODE:
```
coverage report
```

----------------------------------------

TITLE: Illustrating FieldError in select_related for Nested Non-Relational Fields (Django Python)
DESCRIPTION: This Python console snippet shows that Django 1.10 introduced stricter validation for `select_related()`, raising a `FieldError` even when a non-relational field ('name') is nested within a valid relation ('author'). This ensures only full relational paths are specified.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_7

LANGUAGE: pycon
CODE:
```
>>> Book.objects.select_related("author__name")
Traceback (most recent call last):
...
FieldError: Non-relational field given in select_related: 'name'
```

----------------------------------------

TITLE: Using Filters within Smart `if` Tag Expressions in Django Templates
DESCRIPTION: Demonstrates the capability of the enhanced `if` tag in Django 1.2+ to incorporate template filters (like `lower`) directly within the conditional expression. This example compares the lowercased email addresses of a user and a message recipient to conditionally apply a CSS class.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_2

LANGUAGE: html+django
CODE:
```
  <div
    {% if user.email|lower == message.recipient|lower %}
      class="highlight"
    {% endif %}
  >{{ message }}</div>
```

----------------------------------------

TITLE: Activating Virtual Environment - DOS Prompt
DESCRIPTION: Activates the previously created virtual environment on Windows. Executing the `activate.bat` script within the environment's `Scripts` directory modifies the command prompt's path to use the environment's Python and packages.
SOURCE: https://github.com/django/django/blob/main/docs/howto/windows.txt#_snippet_2

LANGUAGE: doscon
CODE:
```
...\> project-name\Scripts\activate.bat
```

----------------------------------------

TITLE: Defining a Callback Function for Django CallbackFilter
DESCRIPTION: This Python function `skip_unreadable_post` is designed to be used with `django.utils.log.CallbackFilter`. It inspects the log record's exception info (`record.exc_info`). If the exception value is an instance of `UnreadablePostError`, the function returns `False` to prevent the record from being processed further (e.g., sent via `AdminEmailHandler`). Otherwise, it returns `True`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.http import UnreadablePostError


def skip_unreadable_post(record):
    if record.exc_info:
        exc_type, exc_value = record.exc_info[:2]
        if isinstance(exc_value, UnreadablePostError):
            return False
    return True
```

----------------------------------------

TITLE: Implementing a Node to Discard Content in Django (Python)
DESCRIPTION: This Python snippet defines the `CommentNode` class for a simple Django template tag intended to discard content (similar to `{% comment %}`). Its `render` method simply returns an empty string, effectively removing any content parsed between the tag's start and end blocks from the final rendered output.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_39

LANGUAGE: python
CODE:
```
class CommentNode(template.Node):
    def render(self, context):
        return ""
```

----------------------------------------

TITLE: Creating a Django Project Using a Custom Template (Shell)
DESCRIPTION: Demonstrates using the `django-admin.py startproject` command with the `--template` option, introduced in Django 1.4. This command creates a new project named `myproject` based on the structure and files defined in the custom template located at `/path/to/my_project_template`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
django-admin.py startproject --template=/path/to/my_project_template myproject
```

----------------------------------------

TITLE: Applying striptags Filter in Django Templates
DESCRIPTION: The striptags filter attempts to strip all HTML tags from the input. Note that it doesn't guarantee HTML-safe output.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_88

LANGUAGE: html+django
CODE:
```
{{ value|striptags }}
```

----------------------------------------

TITLE: Configuring Allowed Hosts with ALLOWED_HOSTS (Django Settings/Python)
DESCRIPTION: Introduces the `ALLOWED_HOSTS` setting in Django 1.4.4 to mitigate Host header poisoning. This setting requires a list of valid host/domain names for the site. The default value `['*']` allows all hosts for backward compatibility, but specifying a restrictive list is strongly recommended for security. Host validation using this setting is disabled when `DEBUG` is `True` or when running tests.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.4.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
ALLOWED_HOSTS
```

LANGUAGE: python
CODE:
```
['*']
```

LANGUAGE: python
CODE:
```
DEBUG
```

----------------------------------------

TITLE: Insecure Email Handling Example in Django
DESCRIPTION: Example demonstrating incorrect handling of user input for email sending, without proper validation
SOURCE: https://github.com/django/django/blob/main/docs/internals/security.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.core.mail import send_mail
from django.http import JsonResponse


def my_proof_of_concept(request):
    email = request.GET.get("email", "")
    send_mail("Email subject", "Email body", email, ["admin@example.com"])
    return JsonResponse(status=200)
```

----------------------------------------

TITLE: Custom Django Model Manager for Multiple Databases
DESCRIPTION: Implementation of a custom model manager that properly handles multiple database configurations through get_queryset().
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
class MyManager(models.Manager):
    def get_queryset(self):
        qs = CustomQuerySet(self.model)
        if self._db is not None:
            qs = qs.using(self._db)
        return qs
```

----------------------------------------

TITLE: Creating Custom Lazy Translation Functions in Django
DESCRIPTION: Demonstrates how to create a custom lazy function for delayed translations, useful when you need to pass translatable strings as arguments to other functions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_17

LANGUAGE: Python
CODE:
```
from django.utils.functional import lazy
from django.utils.translation import gettext_lazy as _


def to_lower(string):
    return string.lower()


to_lower_lazy = lazy(to_lower, str)

# Usage
lazy_string = to_lower_lazy(_("My STRING!"))
```

----------------------------------------

TITLE: Test Tag Inheritance in Django Tests
DESCRIPTION: Demonstrates how tags are inherited in Django's test framework when subclassing test cases and defining methods with their own tags.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_46

LANGUAGE: python
CODE:
```
@tag("foo")
class SampleTestCaseChild(SampleTestCase):
    @tag("bar")
    def test(self): ...
```

----------------------------------------

TITLE: Distance Lookup Syntax in GeoDjango
DESCRIPTION: Demonstrates the syntax patterns for distance lookup operations in GeoDjango. The lookup requires a geometry/raster, distance value, and optional 'spheroid' parameter for more accurate calculation with geodetic coordinate systems.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
<field>__<distance lookup>=(<geometry/raster>, <distance value>[, "spheroid"])
<field>__<distance lookup>=(<raster>, <band_index>, <distance value>[, "spheroid"])
<field>__<band_index>__<distance lookup>=(<raster>, <band_index>, <distance value>[, "spheroid"])
```

----------------------------------------

TITLE: Contained_by Lookup for JSONField in Django
DESCRIPTION: Shows the contained_by lookup which is the inverse of contains, returning objects where the key-value pairs on the object are a subset of those in the passed value.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_33

LANGUAGE: python
CODE:
```
>>> Dog.objects.create(name="Rufus", data={"breed": "labrador", "owner": "Bob"})
<Dog: Rufus>
>>> Dog.objects.create(name="Meg", data={"breed": "collie", "owner": "Bob"})
<Dog: Meg>
>>> Dog.objects.create(name="Fred", data={})
<Dog: Fred>
>>> Dog.objects.create(
...     name="Merry", data={"breed": "pekingese", "tricks": ["fetch", "dance"]}
... )
>>> Dog.objects.filter(data__contained_by={"breed": "collie", "owner": "Bob"})
<QuerySet [<Dog: Meg>, <Dog: Fred>]>
>>> Dog.objects.filter(data__contained_by={"breed": "collie"})
<QuerySet [<Dog: Fred>]>
>>> Dog.objects.filter(
...     data__contained_by={"breed": "pekingese", "tricks": ["dance", "fetch", "hug"]}
... )
<QuerySet [<Dog: Merry>, <Dog: Fred>]>
```

----------------------------------------

TITLE: Using wordcount Filter in Django Templates
DESCRIPTION: Demonstrates the wordcount filter, which returns the number of words in a given string.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_102

LANGUAGE: html+django
CODE:
```
{{ value|wordcount }}
```

----------------------------------------

TITLE: Navigating Ordered Related Objects in Django (Pycon)
DESCRIPTION: Illustrates using the `get_next_in_order()` and `get_previous_in_order()` methods on a related object (`answer`) to navigate through the sequence defined by `order_with_respect_to`. These methods allow accessing the next or previous object based on the established order.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_8

LANGUAGE: pycon
CODE:
```
>>> answer = Answer.objects.get(id=2)
>>> answer.get_next_in_order()
<Answer: 3>
>>> answer.get_previous_in_order()
<Answer: 1>
```

----------------------------------------

TITLE: Using Tan Function in Django Models
DESCRIPTION: Shows how to calculate tangent values and register Tan as a transform
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Tan
>>> Vector.objects.create(x=0, y=12)
>>> vector = Vector.objects.annotate(x_tan=Tan("x"), y_tan=Tan("y")).get()
>>> vector.x_tan, vector.y_tan
(0.0, -0.6358599286615808)
```

LANGUAGE: python
CODE:
```
>>> from django.db.models import FloatField
>>> from django.db.models.functions import Tan
>>> FloatField.register_lookup(Tan)
>>> # Get vectors whose tangent is less than 0
>>> vectors = Vector.objects.filter(x__tan__lt=0, y__tan__lt=0)
```

----------------------------------------

TITLE: Setting Email File Path for File Backend in Django
DESCRIPTION: Specifies the directory path where the file email backend should store output email files. This setting is only used when EMAIL_BACKEND is set to 'django.core.mail.backends.filebased.EmailBackend' and is not defined by default.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_25

LANGUAGE: python
CODE:
```
# EMAIL_FILE_PATH = '/path/to/email/output/' # Example, not set by default
```

----------------------------------------

TITLE: Using stringfilter Decorator for String-Only Filters
DESCRIPTION: This example demonstrates how to use the stringfilter decorator to ensure a filter only receives string input.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django import template
from django.template.defaultfilters import stringfilter

register = template.Library()

@register.filter
@stringfilter
def lower(value):
    return value.lower()
```

----------------------------------------

TITLE: Commenting in Django Templates
DESCRIPTION: Demonstrates how to use inline comments in Django templates using the {# #} syntax. Comments can contain any template code and are limited to single lines.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_8

LANGUAGE: html+django
CODE:
```
{# greeting #}hello
```

LANGUAGE: html+django
CODE:
```
{# {% if foo %}bar{% else %} #}
```

----------------------------------------

TITLE: Using SearchHeadline for Highlighted Search Results in Django
DESCRIPTION: Demonstrates how to use SearchHeadline to highlight search terms in the results.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> from django.contrib.postgres.search import SearchHeadline, SearchQuery
>>> query = SearchQuery("red tomato")
>>> entry = Entry.objects.annotate(
...     headline=SearchHeadline(
...         "body_text",
...         query,
...         start_sel="<span>",
...         stop_sel="</span>",
...     ),
... ).get()
>>> print(entry.headline)
Sandwich with <span>tomato</span> and <span>red</span> cheese.
```

----------------------------------------

TITLE: Unit Testing Django Context Against Dictionary (Python)
DESCRIPTION: This test case shows a pattern for asserting Context contents during unit tests, verifying that Context.flatten() returns a dictionary matching the expected structure, including Django's default built-ins. It uses unittest.TestCase for test method structure. Inputs are context variable assignments; output is assertion with expected dictionary.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
class ContextTest(unittest.TestCase):
    def test_against_dictionary(self):
        c1 = Context()
        c1["update"] = "value"
        self.assertEqual(
            c1.flatten(),
            {
                "True": True,
                "None": None,
                "False": False,
                "update": "value",
            },
        )
```

----------------------------------------

TITLE: Using unordered_list Filter in Django Templates
DESCRIPTION: Shows how the unordered_list filter recursively converts a self-nested list into an HTML unordered list, without opening and closing <ul> tags.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_97

LANGUAGE: html+django
CODE:
```
{{ var|unordered_list }}
```

----------------------------------------

TITLE: Querying Zipcode Polygons Disjoint from Geometry in Django
DESCRIPTION: Illustrates using the disjoint spatial lookup to filter Zipcode objects whose polygon is spatially disjoint from a given geometry.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__disjoint=geom)
```

----------------------------------------

TITLE: Configuring Secure Proxy SSL Header in Django Settings
DESCRIPTION: Shows the Django setting used to configure the SSL header for secure proxy. This setting is now respected by HttpRequest.scheme for both HTTP and HTTPS requests.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.22.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
SECURE_PROXY_SSL_HEADER
```

----------------------------------------

TITLE: Installing Hypercorn for Django using pip
DESCRIPTION: Command to install the Hypercorn ASGI server using pip. This is the prerequisite step before running a Django project with Hypercorn.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/hypercorn.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
python -m pip install hypercorn
```

----------------------------------------

TITLE: Creating String Template in Django
DESCRIPTION: Shows how to manually create a Django template using a string
SOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.template import Template

t2 = Template("This is a string template.")
```

----------------------------------------

TITLE: Unpacking `ResolverMatch` Object from `resolve` in Django (Python)
DESCRIPTION: Conceptual Python code illustrating that the `ResolverMatch` object returned by `django.urls.resolve` can be directly unpacked into a triple. This triple contains the resolved view function (`func`), parsed positional arguments (`args`), and parsed keyword arguments (`kwargs`) extracted from the URL path.
SOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
func, args, kwargs = resolve("/some/path/")
```

----------------------------------------

TITLE: Using Extent3D Aggregation in GeoDjango
DESCRIPTION: Example of using the Extent3D aggregate function to get the 3D bounding box (as a 6-tuple) of city polygons filtered by name.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_35

LANGUAGE: python
CODE:
```
>>> qs = City.objects.filter(name__in=("Houston", "Dallas")).aggregate(Extent3D("poly"))
>>> print(qs["poly__extent3d"])
(-96.8016128540039, 29.7633724212646, 0, -95.3631439208984, 32.782058715820, 0)
```

----------------------------------------

TITLE: Querying Zipcode Polygons Covered by Geometry in Django
DESCRIPTION: Illustrates using the coveredby spatial lookup to filter Zipcode objects whose polygon is completely covered by a given geometry.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__coveredby=geom)
```

----------------------------------------

TITLE: Implementing Custom Template Backend for Foobar in Python
DESCRIPTION: A complete example of implementing a custom template backend for a fictional 'foobar' template system in Django. The implementation includes the required BaseEngine subclass, template handling methods, and template rendering functionality.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-backend.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.template import TemplateDoesNotExist, TemplateSyntaxError
from django.template.backends.base import BaseEngine
from django.template.backends.utils import csrf_input_lazy, csrf_token_lazy

import foobar


class FooBar(BaseEngine):
    # Name of the subdirectory containing the templates for this engine
    # inside an installed application.
    app_dirname = "foobar"

    def __init__(self, params):
        params = params.copy()
        options = params.pop("OPTIONS").copy()
        super().__init__(params)

        self.engine = foobar.Engine(**options)

    def from_string(self, template_code):
        try:
            return Template(self.engine.from_string(template_code))
        except foobar.TemplateCompilationFailed as exc:
            raise TemplateSyntaxError(exc.args)

    def get_template(self, template_name):
        try:
            return Template(self.engine.get_template(template_name))
        except foobar.TemplateNotFound as exc:
            raise TemplateDoesNotExist(exc.args, backend=self)
        except foobar.TemplateCompilationFailed as exc:
            raise TemplateSyntaxError(exc.args)


class Template:
    def __init__(self, template):
        self.template = template

    def render(self, context=None, request=None):
        if context is None:
            context = {}
        if request is not None:
            context["request"] = request
            context["csrf_input"] = csrf_input_lazy(request)
            context["csrf_token"] = csrf_token_lazy(request)
        return self.template.render(context)
```

----------------------------------------

TITLE: Defining a Point using Well Known Text (WKT) in Python
DESCRIPTION: This snippet demonstrates defining a geographic point using the Well Known Text (WKT) standard format within a Python interactive session (like the Django shell). The string stores longitude and latitude coordinates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_10

LANGUAGE: pycon
CODE:
```
>>> pnt_wkt = "POINT(-95.3385 29.7245)"
```

----------------------------------------

TITLE: Incrementing Cache Key Version in Django
DESCRIPTION: Shows how to increment the version of a specific cache key using the incr_version() method, leaving other keys unaffected.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_36

LANGUAGE: pycon
CODE:
```
>>> # Increment the version of 'my_key'
>>> cache.incr_version("my_key")
>>> # The default version still isn't available
>>> cache.get("my_key")
None
# Version 2 isn't available, either
>>> cache.get("my_key", version=2)
None
>>> # But version 3 *is* available
>>> cache.get("my_key", version=3)
'hello world!'
```

----------------------------------------

TITLE: Django First Day of Week Setting
DESCRIPTION: Specifies the `FIRST_DAY_OF_WEEK` in Django, a value from 0 (Sunday) to 6 (Saturday), used when displaying calendars. Defaults to 0, representing Sunday.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_43

LANGUAGE: plaintext
CODE:
```
FIRST_DAY_OF_WEEK
---------------------

Default: `0` (Sunday)

A number representing the first day of the week. This is especially useful
when displaying a calendar. This value is only used when not using
format internationalization, or when a format cannot be found for the
current locale.

The value must be an integer from 0 to 6, where 0 means Sunday, 1 means
Monday and so on.
```

----------------------------------------

TITLE: Rendering a Widget Directly with Custom Attributes Using Django Forms in Python
DESCRIPTION: Exemplifies creating a widget instance with specific HTML attributes and rendering it with values, showing direct usage of the widget rendering API. Requires Django (forms.TextInput) and demonstrates how to instantiate a widget and render an HTML input tag. Inputs are widget attributes and rendering parameters; output is a string of HTML representing a form field rendered by the widget. Shows conditional boolean attribute rendering in output.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> from django import forms
>>> name = forms.TextInput(attrs={"size": 10, "title": "Your name"})
>>> name.render("name", "A name")
'<input title="Your name" type="text" name="name" value="A name" size="10">'
```

----------------------------------------

TITLE: Basic Upload Handler Modification in Django
DESCRIPTION: Demonstrates inserting a custom ProgressBarUploadHandler at the start of the upload handlers list to enable progress tracking before other handlers.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
request.upload_handlers.insert(0, ProgressBarUploadHandler(request))
```

----------------------------------------

TITLE: Integrating FlatPageSitemap in Django URLconf
DESCRIPTION: Provides an example of how to include the `FlatPageSitemap` in a Django project's `urls.py`. It imports the necessary classes and adds a path definition that uses the `sitemap` view with a dictionary mapping 'flatpages' to an instance of `FlatPageSitemap`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#_snippet_8

LANGUAGE: python
CODE:
```
from django.contrib.flatpages.sitemaps import FlatPageSitemap\nfrom django.contrib.sitemaps.views import sitemap\nfrom django.urls import path\n\nurlpatterns = [\n    # ...\n    # the sitemap\n    path(\n        "sitemap.xml",\n        sitemap,\n        {"sitemaps": {"flatpages": FlatPageSitemap}},\n        name="django.contrib.sitemaps.views.sitemap",\n    ),\n]
```

----------------------------------------

TITLE: Processing Messages in Python Code
DESCRIPTION: Example of handling messages outside of templates using get_messages()
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.contrib.messages import get_messages

storage = get_messages(request)
for message in storage:
    do_something_with_the_message(message)
```

----------------------------------------

TITLE: Querying Articles for Current Site in Django View
DESCRIPTION: This code snippet demonstrates how to query articles associated with the current site in a Django view function.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib.sites.shortcuts import get_current_site


def article_detail(request, article_id):
    try:
        a = Article.objects.get(id=article_id, sites__id=get_current_site(request).id)
    except Article.DoesNotExist:
        raise Http404("Article does not exist on this site")
    # ...
```

----------------------------------------

TITLE: PostgreSQL Savepoint Rollback Example
DESCRIPTION: Illustrates using savepoints for fine-grained transaction control in PostgreSQL, allowing rollback of specific operations while preserving others.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
a.save()  # Succeeds, and never undone by savepoint rollback
sid = transaction.savepoint()
try:
    b.save()  # Could throw exception
    transaction.savepoint_commit(sid)
except IntegrityError:
    transaction.savepoint_rollback(sid)
c.save()  # Succeeds, and a.save() is never undone
```

----------------------------------------

TITLE: Enabling PostgreSQL Connection Pool in Django (psycopg)
DESCRIPTION: Explains how to enable a connection pool for a PostgreSQL database connection when using the `psycopg` driver. This is done by adding the `pool` key to the `OPTIONS` dictionary in the `DATABASES` setting, setting it to `True` for defaults or a dictionary for custom pool options. Requires `psycopg[pool]` or `psycopg-pool`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_5

LANGUAGE: python
CODE:
```
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        # ...
        "OPTIONS": {
            "pool": True
        }
    }
}
```

----------------------------------------

TITLE: Creating Django App from Local Template Directory - Shell
DESCRIPTION: This command creates a new Django app structure, but instead of using the default app template, it uses files found in a specified local directory path as the template source.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_38

LANGUAGE: shell
CODE:
```
django-admin startapp --template=/Users/jezdez/Code/my_app_template myapp
```

----------------------------------------

TITLE: Basic Spatial Aggregation Examples in GeoDjango
DESCRIPTION: Demonstrates using the Extent and Union spatial aggregate functions to calculate the bounding box extent and geometric union of all WorldBorder geometries.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_33

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.db.models import Extent, Union
>>> WorldBorder.objects.aggregate(Extent("mpoly"), Union("mpoly"))
```

----------------------------------------

TITLE: Exception Handling in Django Templates
DESCRIPTION: Demonstrates how Django templates handle exceptions during variable resolution and the silent_variable_failure behavior.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> t = Template("My name is {{ person.first_name }}.")
>>> class PersonClass3:
...     def first_name(self):
...         raise AssertionError("foo")
...
>>> p = PersonClass3()
>>> t.render(Context({"person": p}))
Traceback (most recent call last):
...
AssertionError: foo

>>> class SilentAssertionError(Exception):
...     silent_variable_failure = True
...
>>> class PersonClass4:
...     def first_name(self):
...         raise SilentAssertionError
...
>>> p = PersonClass4()
>>> t.render(Context({"person": p}))
"My name is ."
```

----------------------------------------

TITLE: Inspecting OGR Data Sources with ogrinspect in Django
DESCRIPTION: The ogrinspect function is used to inspect OGR data sources. It takes a data_source and model_name as required parameters, with additional optional keyword arguments.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/ogrinspect.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
ogrinspect(data_source, model_name, **kwargs)
```

----------------------------------------

TITLE: Running pytest with Warnings Enabled
DESCRIPTION: Command to run pytest with Python warnings enabled and output capture disabled. This configuration ensures that deprecation warnings are visible when using pytest instead of Django's test runner.
SOURCE: https://github.com/django/django/blob/main/docs/howto/upgrade-version.txt#2025-04-23_snippet_1

LANGUAGE: console
CODE:
```
$ PYTHONWARNINGS=always pytest tests --capture=no
```

----------------------------------------

TITLE: Configuring AuditEntryAdmin without Links
DESCRIPTION: Example of configuring an admin interface without any linked fields in the list display.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
class AuditEntryAdmin(admin.ModelAdmin):
    list_display = ["timestamp", "message"]
    list_display_links = None
```

----------------------------------------

TITLE: SQL Representation of AND Combination (SQL)
DESCRIPTION: Shows the SQL equivalent of combining two query conditions with the AND operator. The statement is a simple SELECT with WHERE conditions for both x=1 and y=2.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_61

LANGUAGE: sql
CODE:
```
SELECT ... WHERE x=1 AND y=2
```

----------------------------------------

TITLE: Demonstrating HttpRequest.get_preferred_type Usage in Django (Python)
DESCRIPTION: Shows sample cases for content negotiation using get_preferred_type(), based on the Accept header of the incoming HTTP request. Inputs: list of acceptable media types; outputs: matched preferred media type string or None. Examples assume certain Accept headers are set by the client, and demonstrate how the method chooses the most appropriate type.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> request.get_preferred_type(["text/html", "application/json"])
"text/html"
>>> request.get_preferred_type(["application/json", "text/plain"])
"application/json"
>>> request.get_preferred_type(["application/xml", "text/plain"])
None

```

----------------------------------------

TITLE: Registering Flatpages as Catchall URL Pattern - Django Python
DESCRIPTION: This snippet sets up flatpages as a fallback for any URL that hasn't matched previous patterns in the URLconf. It uses `re_path` with a regular expression to capture the URL and pass it to the flatpage view. This pattern should typically be placed at the end of your `urlpatterns` list.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#_snippet_1

LANGUAGE: Python
CODE:
```
from django.contrib.flatpages import views

# Your other patterns here
urlpatterns += [
    re_path(r"^(?P<url>.*/)$", views.flatpage),
]
```

----------------------------------------

TITLE: Spatial Lookup Examples in GeoDjango
DESCRIPTION: Demonstrates spatial lookup queries using both geometry and raster fields with various filter conditions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> qs = Zipcode.objects.filter(poly__contains=pnt)
>>> qs = Elevation.objects.filter(poly__contains=rst)
>>> qs = Elevation.objects.filter(rast__contains=geom)
>>> qs = Elevation.objects.filter(rast__1__contains=(rst, 1))
```

----------------------------------------

TITLE: Using Implicit Verbose Name for Django CharField (Python)
DESCRIPTION: Shows how Django automatically generates a verbose name for a field if one is not explicitly provided. The verbose name is derived from the field's attribute name by converting underscores to spaces.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_12

LANGUAGE: Python
CODE:
```
first_name = models.CharField(max_length=30)
```

----------------------------------------

TITLE: Defining Base Template Auto-Escaping Behavior in Django
DESCRIPTION: Shows a base Django template (`base.html`) where auto-escaping is turned off globally for the main content area using `{% autoescape off %}`. This setting will affect any child templates that extend this base template and render content within the defined blocks (`title`, `content`).
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_19

LANGUAGE: html+django
CODE:
```
{% autoescape off %}
<h1>{% block title %}{% endblock %}</h1>
{% block content %}
{% endblock %}
{% endautoescape %}
```

----------------------------------------

TITLE: Using spaceless Tag in Django Templates
DESCRIPTION: This snippet demonstrates the spaceless tag which removes whitespace between HTML tags, including tab characters and newlines. This example compresses a paragraph with a link into a more compact form.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_42

LANGUAGE: html+django
CODE:
```
{% spaceless %}
    <p>
        <a href="foo/">Foo</a>
    </p>
{% endspaceless %}
```

----------------------------------------

TITLE: Filtering QuerySets by ISO Year - Django ORM (Python)
DESCRIPTION: Filters records by the ISO 8601 week-numbering year using '__iso_year' lookups in Django. Requires understanding of ISO weeks and that some years may overlap calendar years. Inputs are integers, outputs are QuerySets matching the ISO year. Similar to year filtering, but aligned to week-based calendar rules. USE_TZ option applies for time zone conversion.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_106

LANGUAGE: python
CODE:
```
Entry.objects.filter(pub_date__iso_year=2005)
Entry.objects.filter(pub_date__iso_year__gte=2005)
```

----------------------------------------

TITLE: Has_key Lookup for JSONField in Django
DESCRIPTION: Demonstrates the has_key lookup which returns objects where the given key exists in the top-level of the JSONField data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_34

LANGUAGE: python
CODE:
```
>>> Dog.objects.create(name="Rufus", data={"breed": "labrador"})
<Dog: Rufus>
>>> Dog.objects.create(name="Meg", data={"breed": "collie", "owner": "Bob"})
<Dog: Meg>
>>> Dog.objects.filter(data__has_key="owner")
<QuerySet [<Dog: Meg>]>
```

----------------------------------------

TITLE: Generating Messages While Ignoring Patterns - Shell
DESCRIPTION: An example demonstrating the use of the `django-admin makemessages` command with the `--ignore` (`-i`) option. This allows specifying glob-style patterns to exclude specific files or directories from being processed when searching for translation strings. The option can be used multiple times.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_20

LANGUAGE: Shell
CODE:
```
django-admin makemessages --locale=en_US --ignore=apps/* --ignore=secret/*.html
```

----------------------------------------

TITLE: Creating QueryDict from Keys in Python
DESCRIPTION: Uses the fromkeys class method to create a new QueryDict with specified keys and a default value.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> QueryDict.fromkeys(["a", "a", "b"], value="val")
<QueryDict: {'a': ['val', 'val'], 'b': ['val']}>
```

----------------------------------------

TITLE: Blocking Database Query with Connection-Specific Error Message in Django (Python)
DESCRIPTION: In this version of the blocker, the wrapper accepts the full set of parameters (execute, sql, params, many, context) and uses the context object to extract the database connection alias. The function raises an Exception with a detailed message, informing which specific database connection access was blocked. This design facilitates more granular debugging and policy enforcement.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/instrumentation.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
def blocker(execute, sql, params, many, context):
    alias = context["connection"].alias
    raise Exception("Access to database '{}' blocked here".format(alias))
```

----------------------------------------

TITLE: Ranking Search Results with SearchRank in Django
DESCRIPTION: Shows how to use SearchRank to order search results by relevancy.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> from django.contrib.postgres.search import SearchQuery, SearchRank, SearchVector
>>> vector = SearchVector("body_text")
>>> query = SearchQuery("cheese")
>>> Entry.objects.annotate(rank=SearchRank(vector, query)).order_by("-rank")
[<Entry: Cheese on Toast recipes>, <Entry: Pizza recipes>]
```

----------------------------------------

TITLE: Using NON_FIELD_ERRORS Constant
DESCRIPTION: Shows how to use the NON_FIELD_ERRORS constant for ValidationErrors that don't belong to a specific field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.core.exceptions import NON_FIELD_ERRORS, ValidationError

errors = {
    NON_FIELD_ERRORS: ["This is a non-field error"]
}
```

----------------------------------------

TITLE: Importing NumericRange from psycopg_any in Python
DESCRIPTION: Imports the `NumericRange` class from `django.db.backends.postgresql.psycopg_any`. This class is used to represent numeric ranges, typically when constructing lookup values for querying PostgreSQL numeric range fields (like `IntegerRangeField` or `DecimalRangeField`) via the Django ORM.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_18

LANGUAGE: pycon
CODE:
```
>>> from django.db.backends.postgresql.psycopg_any import NumericRange
```

----------------------------------------

TITLE: Multi-database Testing with TransactionTestCase in Django
DESCRIPTION: Example showing how to configure TransactionTestCase to flush multiple test databases after test execution. Uses the databases attribute to specify which databases should be flushed.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
class TestMyViews(TransactionTestCase):
    databases = {"default", "other"}

    def test_index_page_view(self):
        call_some_test_code()
```

----------------------------------------

TITLE: Using Slice Transforms with ArrayField in Django
DESCRIPTION: Shows how to use slice transforms with ArrayField in Django. This example demonstrates querying for posts based on slices of the tags array.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> Post.objects.create(name="First post", tags=["thoughts", "django"])
>>> Post.objects.create(name="Second post", tags=["thoughts"])
>>> Post.objects.create(name="Third post", tags=["django", "python", "thoughts"])

>>> Post.objects.filter(tags__0_1=["thoughts"])
<QuerySet [<Post: First post>, <Post: Second post>]>

>>> Post.objects.filter(tags__0_2__contains=["thoughts"])
<QuerySet [<Post: First post>, <Post: Second post>]>
```

----------------------------------------

TITLE: Querying Zipcode Polygons Equal to Geometry in Django
DESCRIPTION: Demonstrates using the equals spatial lookup to filter Zipcode objects whose polygon is spatially equal to a given geometry.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__equals=geom)
```

----------------------------------------

TITLE: Querying ArrayField with Overlap Lookup in Django
DESCRIPTION: Demonstrates the use of the 'overlap' lookup with ArrayField in Django. This example shows how to query for posts that share any tags with the given values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> Post.objects.create(name="First post", tags=["thoughts", "django"])
>>> Post.objects.create(name="Second post", tags=["thoughts", "tutorial"])
>>> Post.objects.create(name="Third post", tags=["tutorial", "django"])

>>> Post.objects.filter(tags__overlap=["thoughts"])
<QuerySet [<Post: First post>, <Post: Second post>]>

>>> Post.objects.filter(tags__overlap=["thoughts", "tutorial"])
<QuerySet [<Post: First post>, <Post: Second post>, <Post: Third post>]>

>>> Post.objects.filter(tags__overlap=Post.objects.values_list("tags"))
<QuerySet [<Post: First post>, <Post: Second post>, <Post: Third post>]>
```

----------------------------------------

TITLE: Using CurrentSiteManager with a Custom Field Name in Python
DESCRIPTION: Demonstrates how to configure `CurrentSiteManager` when the model's `ForeignKey` to the `Site` model is named differently (e.g., `publish_on` instead of `site`). The custom field name (`"publish_on"`) is passed as an argument to the `CurrentSiteManager` constructor. Requires `django.contrib.sites`, `django.db.models`, and the `SITE_ID` setting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.contrib.sites.models import Site
from django.contrib.sites.managers import CurrentSiteManager
from django.db import models


class Photo(models.Model):
    photo = models.FileField(upload_to="photos")
    photographer_name = models.CharField(max_length=100)
    pub_date = models.DateField()
    publish_on = models.ForeignKey(Site, on_delete=models.CASCADE)
    objects = models.Manager()
    on_site = CurrentSiteManager("publish_on")
```

----------------------------------------

TITLE: Updating Django Translation Utility Functions
DESCRIPTION: The get_date_formats() and get_partial_date_formats() functions in django.utils.translation will be removed. Use django.utils.formats.get_format() for locale-aware formatting.
SOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
django.utils.translation.get_date_formats()
django.utils.translation.get_partial_date_formats()

# Use instead:
django.utils.formats.get_format()
```

----------------------------------------

TITLE: Using GenericIPAddressField in Django Models
DESCRIPTION: GenericIPAddressField is another model field class that has been updated to convert arguments to the correct types before querying, addressing MySQL typecasting issues.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.11.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
from django.db.models import GenericIPAddressField
```

----------------------------------------

TITLE: Using Template Engines Directly
DESCRIPTION: Example of accessing and using a configured template engine directly.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.template import engines

django_engine = engines["django"]
template = django_engine.from_string("Hello {{ name }}!")
```

----------------------------------------

TITLE: Annotating QuerySet with Custom SQL Function Using Func - Django ORM - Python
DESCRIPTION: This snippet annotates a queryset with a computed field, using Django's Func expression to apply a database function (in this case LOWER for string case conversion) to an existing model field. The output field is added as 'field_lower' to each model instance. Dependencies include django.db.models.F and Func. The function parameter determines the SQL function applied.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from django.db.models import F, Func

queryset.annotate(field_lower=Func(F("field"), function="LOWER"))
```

----------------------------------------

TITLE: Using interpolate for String Formatting in JavaScript
DESCRIPTION: Shows how to use the interpolate function for string formatting with translations in JavaScript.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_38

LANGUAGE: javascript
CODE:
```
const formats = ngettext(
  'There is %s object. Remaining: %s',
  'There are %s objects. Remaining: %s',
  11
);
const string = interpolate(formats, [11, 20]);
// string is 'There are 11 objects. Remaining: 20'
```

----------------------------------------

TITLE: Initializing and Using GDAL DataSource in Python
DESCRIPTION: Example demonstrating how to create and inspect a GDAL DataSource object for reading geospatial data files.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.gdal import DataSource
>>> ds = DataSource("/path/to/your/cities.shp")
>>> ds.name
'/path/to/your/cities.shp'
>>> ds.layer_count  # This file only contains one layer
1
```

----------------------------------------

TITLE: Subclassing Choices with Custom Data Type (Python/Django)
DESCRIPTION: Demonstrates how to create a custom `Choices` enumeration that uses a data type other than `str` or `int`, specifically `datetime.date`. This is achieved by multiple inheritance, subclassing both the desired type and `models.Choices`, allowing enumeration members to hold values of that type.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_10

LANGUAGE: Python
CODE:
```
class MoonLandings(datetime.date, models.Choices):
    APOLLO_11 = 1969, 7, 20, "Apollo 11 (Eagle)"
    APOLLO_12 = 1969, 11, 19, "Apollo 12 (Intrepid)"
    APOLLO_14 = 1971, 2, 5, "Apollo 14 (Antares)"
    APOLLO_15 = 1971, 7, 30, "Apollo 15 (Falcon)"
    APOLLO_16 = 1972, 4, 21, "Apollo 16 (Orion)"
    APOLLO_17 = 1972, 12, 11, "Apollo 17 (Challenger)"
```

----------------------------------------

TITLE: Importing Database Exceptions
DESCRIPTION: Shows how to import database exceptions from the django.db module.
SOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.db import Error, InterfaceError, DatabaseError, DataError, OperationalError, IntegrityError, InternalError, ProgrammingError, NotSupportedError
```

----------------------------------------

TITLE: Using Model.refresh_from_db with a Custom QuerySet in Django (Python)
DESCRIPTION: Example of calling `refresh_from_db` with the `from_queryset` argument in Django. This allows specifying a custom queryset, like `MyModel.active_objects.all()`, to be used for reloading the object's data. This is useful in scenarios like soft deletion where the default manager might not find the object.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
obj.refresh_from_db(from_queryset=MyModel.active_objects.all())
```

----------------------------------------

TITLE: Parsing Times with Django's parse_time
DESCRIPTION: Parses a string and returns a datetime.time object. Doesn't support UTC offsets, returning None if one is present. Returns None for badly formatted strings and raises ValueError for well-formatted but invalid times.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
parse_time(value)
```

----------------------------------------

TITLE: Grouping by Foreign Key Description in Django Templates
DESCRIPTION: This example shows how to group items by a property of a related object using the regroup tag. Any valid template lookup can be used as a grouping attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_38

LANGUAGE: html+django
CODE:
```
{% regroup cities by country.description as country_list %}
```

----------------------------------------

TITLE: Running Django Server with IPv6 (Default) - Shell
DESCRIPTION: Starts the Django development server, enabling IPv6 support and binding to the default IPv6 loopback address (::1) on port 8000. The `-6` flag explicitly enables IPv6 mode.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_25

LANGUAGE: shell
CODE:
```
django-admin runserver -6
```

----------------------------------------

TITLE: Executing Django Shell Command String - Shell
DESCRIPTION: Executes a Python command provided directly as a string within the Django shell environment. This allows running small snippets of Django-aware Python code non-interactively from the command line.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_35

LANGUAGE: shell
CODE:
```
django-admin shell --command="import django; print(django.__version__)"
```

----------------------------------------

TITLE: Modifying Vary Headers with patch_vary_headers
DESCRIPTION: Updates the Vary header in an HttpResponse object with new header names that should be considered for caching. If newheaders contains an asterisk, Vary will consist of just '*'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
patch_vary_headers(response, newheaders)
```

----------------------------------------

TITLE: Creating Covering Indexes with the "include" Option in Django ORM (Python)
DESCRIPTION: Shows how to create a covering index to optimize index-only scans using the 'include' parameter. Non-key fields can be added to the index for efficient selects without additional lookups, benefiting primarily PostgreSQL. Requirements include explicit 'name', 'fields', and an 'include' list of additional field names. Limitations: Only PostgreSQL supports this option, and included columns cannot be used for ordering or filtering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/indexes.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
Index(name="covering_index", fields=["headline"], include=["pub_date"])
```

----------------------------------------

TITLE: Form Media Inheritance Example
DESCRIPTION: Shows how forms inherit media from their widgets and can define additional media
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_15

LANGUAGE: pycon
CODE:
```
>>> from django import forms
>>> class ContactForm(forms.Form):
...     date = DateField(widget=CalendarWidget)
...     name = CharField(max_length=40, widget=OtherWidget)
...

>>> f = ContactForm()
>>> f.media
<link href="https://static.example.com/pretty.css" media="all" rel="stylesheet">
<script src="https://static.example.com/animations.js"></script>
<script src="https://static.example.com/actions.js"></script>
<script src="https://static.example.com/whizbang.js"></script>
```

----------------------------------------

TITLE: Listing Public FlatPages with Django Tag
DESCRIPTION: Demonstrates loading the `flatpages` template tags and using `get_flatpages` to retrieve all public flatpages for the current site. It then iterates through the resulting `flatpages` list to create a list of links.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#_snippet_5

LANGUAGE: html+django
CODE:
```
{% load flatpages %}\n{% get_flatpages as flatpages %}\n<ul>\n    {% for page in flatpages %}\n        <li><a href="{{ page.url }}">{{ page.title }}</a></li>\n    {% endfor %}\n</ul>
```

----------------------------------------

TITLE: Configuring Django with Custom Default Settings
DESCRIPTION: Demonstrates configuring Django with custom default settings from a module, overriding specific settings as needed.
SOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.conf import settings
from myapp import myapp_defaults

settings.configure(default_settings=myapp_defaults, DEBUG=True)
```

----------------------------------------

TITLE: Using WebDriverWait in Selenium tests with Django
DESCRIPTION: This snippet demonstrates how to use WebDriverWait in Selenium tests to ensure the page has loaded before proceeding with assertions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_26

LANGUAGE: Python
CODE:
```
def test_login(self):
    from selenium.webdriver.support.wait import WebDriverWait

    timeout = 2
    ...
    self.selenium.find_element(By.XPATH, '//input[@value="Log in"]').click()
    # Wait until the response is received
    WebDriverWait(self.selenium, timeout).until(
        lambda driver: driver.find_element(By.TAG_NAME, "body")
    )
```

----------------------------------------

TITLE: Combining SearchVector Objects in Django Full Text Search
DESCRIPTION: Demonstrates how to combine multiple SearchVector objects for more complex searches.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> Entry.objects.annotate(
...     search=SearchVector("body_text") + SearchVector("blog__tagline"),
... ).filter(search="Cheese")
[<Entry: Cheese on Toast recipes>, <Entry: Pizza Recipes>]
```

----------------------------------------

TITLE: Checking Specific Databases
DESCRIPTION: Illustrates how to use the '--database' option with the 'check' command to specify which databases should be included in checks requiring database access.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_6

LANGUAGE: Console
CODE:
```
django-admin check --database default --database other
```

----------------------------------------

TITLE: Clearing Prefetch Related Behavior in Django
DESCRIPTION: Shows how to clear any prefetch_related behavior by passing None as a parameter. This is useful when you want to remove prefetching from a queryset.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_45

LANGUAGE: python
CODE:
```
>>> non_prefetched = qs.prefetch_related(None)
```

----------------------------------------

TITLE: Context Stack Operations in Django
DESCRIPTION: Demonstrates Context stack operations using push and pop methods, including context manager usage.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
>>> c = Context()
>>> c["foo"] = "first level"
>>> with c.push():
...     c["foo"] = "second level"
...     c["foo"]
...
'second level'
>>> c["foo"]
'first level'
```

----------------------------------------

TITLE: MonthArchiveView URL Configuration
DESCRIPTION: URL patterns for monthly article archives supporting both numeric and string month formats.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.urls import path

from myapp.views import ArticleMonthArchiveView

urlpatterns = [
    path(
        "<int:year>/<int:month>/",
        ArticleMonthArchiveView.as_view(month_format="%m"),
        name="archive_month_numeric",
    ),
    path(
        "<int:year>/<str:month>/",
        ArticleMonthArchiveView.as_view(),
        name="archive_month",
    ),
]
```

----------------------------------------

TITLE: Creating Django App from Remote Archive URL Template - Shell
DESCRIPTION: Use this command to create a new Django app structure from a template contained within a compressed archive file hosted at a given URL, which Django will download and extract.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_39

LANGUAGE: shell
CODE:
```
django-admin startapp --template=https://github.com/githubuser/django-app-template/archive/main.zip myapp
```

----------------------------------------

TITLE: Parsing Dates with Django's parse_date
DESCRIPTION: Parses an ISO 8601 formatted date string and returns a datetime.date object. Returns None if the string is not well-formatted, and raises ValueError if well-formatted but invalid.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
parse_date(value)
```

----------------------------------------

TITLE: Customizing UserChangeForm to Limit last_name Length in Django
DESCRIPTION: Defines a custom form `MyUserChangeForm` inheriting from `django.contrib.auth.forms.UserChangeForm`. It overrides the `last_name` field to enforce a `max_length` of 30 characters, demonstrating how to preserve the pre-Django 2.0 limit after the default was increased to 150. This is used when you want to keep the old restriction despite the model change.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.contrib.auth.forms import UserChangeForm


class MyUserChangeForm(UserChangeForm):
    last_name = forms.CharField(max_length=30, required=False)
```

----------------------------------------

TITLE: Querying Models in Multi-table Inheritance (Django Pycon)
DESCRIPTION: Illustrates that both the parent model (Place) and the child model (Restaurant) can be queried independently, even though the child inherits fields from the parent.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_41

LANGUAGE: pycon
CODE:
```
>>> Place.objects.filter(name="Bob's Cafe")
>>> Restaurant.objects.filter(name="Bob's Cafe")
```

----------------------------------------

TITLE: Registering GeoDjango Model with Basic Admin (Python)
DESCRIPTION: Shows the code required in an `admin.py` file to register a GeoDjango model (`WorldBorder`) with the standard Django admin interface using `admin.ModelAdmin`. This enables basic viewing and editing of the model's fields, including a simple interface for the geometry field. Requires `django.contrib.gis.admin` and the model definition (e.g., `world.models.WorldBorder`).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
from django.contrib.gis import admin
from .models import WorldBorder

admin.site.register(WorldBorder, admin.ModelAdmin)
```

----------------------------------------

TITLE: Using the translations Argument with raw()
DESCRIPTION: Example of using the translations argument to map fields in a query to model fields with a dictionary. This provides an alternative to using SQL AS clauses for field mapping.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> name_map = {"first": "first_name", "last": "last_name", "bd": "birth_date", "pk": "id"}
>>> Person.objects.raw("SELECT * FROM some_other_table", translations=name_map)
```

----------------------------------------

TITLE: Initializing RangeMinValueValidator in Django PostgreSQL
DESCRIPTION: Creates a RangeMinValueValidator instance to validate that the lower bound of a range is not less than a specified limit value. A custom error message can be provided.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/validators.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
RangeMinValueValidator(limit_value, message=None)
```

----------------------------------------

TITLE: Initializing KeysValidator in Django PostgreSQL
DESCRIPTION: Creates a KeysValidator instance to validate the presence of specified keys in a dictionary. It can optionally enforce strict validation to ensure no extra keys are present. Custom error messages can be provided for missing or extra keys.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/validators.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
KeysValidator(keys, strict=False, messages=None)
```

----------------------------------------

TITLE: Implementing Combined View Router in Django
DESCRIPTION: View class that routes GET and POST requests to appropriate view implementations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.views import View


class AuthorView(View):
    def get(self, request, *args, **kwargs):
        view = AuthorDetailView.as_view()
        return view(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        view = AuthorInterestFormView.as_view()
        return view(request, *args, **kwargs)
```

----------------------------------------

TITLE: Customizing Form Field for Custom Django Model Field
DESCRIPTION: This snippet demonstrates how to override the formfield method to customize the form field used by ModelForm for a custom field.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_16

LANGUAGE: Python
CODE:
```
class HandField(models.Field):
    # ...

    def formfield(self, **kwargs):
        # Exclude the field from the ModelForm when some condition is met.
        some_condition = kwargs.get("some_condition", False)
        if some_condition:
            return None

        # Set up some defaults while letting the caller override them.
        defaults = {"form_class": MyFormField}
        defaults.update(kwargs)
        return super().formfield(**defaults)
```

----------------------------------------

TITLE: Custom Comment Model Implementation
DESCRIPTION: Example of implementing a custom comment model with a title field using the BanningCommentManager
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.db import models
from django.contrib.comments.models import Comment

from my_comments_app.managers import BanningCommentManager


class CommentWithTitle(Comment):
    title = models.CharField(max_length=300)

    objects = BanningCommentManager()
```

----------------------------------------

TITLE: Django Session Comment Handling Example
DESCRIPTION: Shows how to implement a basic comment system using Django sessions to prevent multiple submissions from the same user.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
def post_comment(request, new_comment):
    if request.session.get("has_commented", False):
        return HttpResponse("You've already commented.")
    c = comments.Comment(comment=new_comment)
    c.save()
    request.session["has_commented"] = True
    return HttpResponse("Thanks for your comment!")
```

----------------------------------------

TITLE: Configuring Oracle Database Connection in Django Settings
DESCRIPTION: Provide the connection details for an Oracle database in the Django settings file, specifying the database engine, service name, user credentials, and host.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_15

LANGUAGE: python
CODE:
```
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.oracle",
        "NAME": "xe",
        "USER": "a_user",
        "PASSWORD": "a_password",
        "HOST": "",
        "PORT": "",
    }
}
```

----------------------------------------

TITLE: Configuring Filesystem Template Loader with Specific Directories
DESCRIPTION: Demonstrates how to override the DIRS setting and specify directories for a particular filesystem loader in Django templates configuration.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
    }
]
```

----------------------------------------

TITLE: Registering a Deployment-Specific Django System Check in Python
DESCRIPTION: Shows how to register a system check that only runs when the `--deploy` option is used with the `check` command. This is achieved by passing `deploy=True` to the `@register()` decorator, along with any relevant tags like `Tags.security`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
@register(Tags.security, deploy=True)
def my_check(app_configs, **kwargs): ...
```

----------------------------------------

TITLE: Using Length Lookup with ArrayField in Django
DESCRIPTION: Shows how to use the 'len' lookup with ArrayField in Django. This example demonstrates querying for posts based on the number of tags they have.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> Post.objects.create(name="First post", tags=["thoughts", "django"])
>>> Post.objects.create(name="Second post", tags=["thoughts"])

>>> Post.objects.filter(tags__len=1)
<QuerySet [<Post: Second post>]>
```

----------------------------------------

TITLE: Configuring Test Database Dependencies in Django
DESCRIPTION: This snippet shows how to configure dependencies between test databases in Django's settings. It allows specifying the order in which test databases should be created.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
"TEST": {
    "DEPENDENCIES": ["diamonds", "clubs"],
},
```

----------------------------------------

TITLE: Adding Custom Arguments to Django Test Command
DESCRIPTION: This class method allows adding custom arguments to the Django test management command. It uses the argparse.ArgumentParser to define new command-line options.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
@classmethod
def add_arguments(cls, parser):
    # Override this method to add custom arguments
    # Use parser.add_argument() to define new options
```

----------------------------------------

TITLE: SQL Query with Literal Percent Signs
DESCRIPTION: Examples showing how to handle literal percent signs in SQL queries, both with and without parameters.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
cursor.execute("SELECT foo FROM bar WHERE baz = '30%'")
cursor.execute("SELECT foo FROM bar WHERE baz = '30%%' AND id = %s", [self.id])
```

----------------------------------------

TITLE: Configuring Basic Feed Properties in Django
DESCRIPTION: Core configuration options for Django feeds including categories, copyright notice, and TTL settings. Demonstrates both method-based and attribute-based approaches.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
author_link = "https://www.example.com/"  # Hard-coded author URL.

categories = ["python", "django"]  # Hard-coded list of categories.

feed_copyright = "Copyright (c) 2007, Sally Smith"  # Hard-coded copyright notice.

ttl = 600  # Hard-coded Time To Live.
```

----------------------------------------

TITLE: Using get_static_prefix Template Tag
DESCRIPTION: Shows how to use the get_static_prefix template tag for more control over where and how STATIC_URL is injected into the template. This provides direct access to the static URL prefix.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_108

LANGUAGE: html+django
CODE:
```
{% load static %}
<img src="{% get_static_prefix %}images/hi.jpg" alt="Hi!">
```

----------------------------------------

TITLE: Defining DateDetailView Class in Django
DESCRIPTION: Declaration of the DateDetailView class, which is a generic view for displaying a single object on a specific date. It combines functionality from date-based and detail view mixins.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
class DateDetailView():
```

----------------------------------------

TITLE: Incorrect Usage of Unescaped HTML in Django String Literals
DESCRIPTION: Shows an incorrect example of using an unescaped '<' character within a string literal filter argument in Django. This is flagged as bad practice because string literals are not automatically escaped, which could lead to incorrect rendering or cross-site scripting (XSS) vulnerabilities if the literal contained user-controlled data mistakenly thought to be safe.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_24

LANGUAGE: html+django
CODE:
```
{{ data|default:"3 < 2" }}  {# Bad! Don't do this. #}
```

----------------------------------------

TITLE: Django Multiple Inheritance with Explicit AutoField
DESCRIPTION: Demonstrates multiple inheritance in Django models where parent models define explicit AutoField primary keys to avoid conflicts in the child model.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_52

LANGUAGE: Python
CODE:
```
class Article(models.Model):
    article_id = models.AutoField(primary_key=True)
    ...

class Book(models.Model):
    book_id = models.AutoField(primary_key=True)
    ...

class BookReview(Book, Article):
    pass
```

----------------------------------------

TITLE: Defining StepValueValidator in Django
DESCRIPTION: Validator class that ensures a value is an integral multiple of a step size, with optional offset. Raises ValidationError if the value doesn't match the step pattern.
SOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
StepValueValidator(limit_value, message=None, offset=None)
```

----------------------------------------

TITLE: Disabling Auto-escaping within the Cycle Tag (Django)
DESCRIPTION: Demonstrates disabling auto-escaping specifically for the output of the `{% cycle %}` tag using `{% autoescape off %}`. This is necessary if the variables (`rowvalue1`, `rowvalue2`) contain pre-formatted HTML or other content that should not be escaped.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_6

LANGUAGE: html+django
CODE:
```
{% for o in some_list %}
    <tr class="{% autoescape off %}{% cycle rowvalue1 rowvalue2 %}{% endautoescape %}">
        ...
    </tr>
{% endfor %}
```

----------------------------------------

TITLE: Defining Item Categories in Django Feed
DESCRIPTION: This snippet demonstrates three methods to specify categories for items in a Django feed: a method taking an item, a method for all items, and a hard-coded attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
def item_categories(self, item):
    """
    Takes an item, as returned by items(), and returns the item's
    categories.
    """

def item_categories(self):
    """
    Returns the categories for every item in the feed.
    """

item_categories = ["python", "django"]  # Hard-coded categories.
```

----------------------------------------

TITLE: Using ljust Filter in Django Templates
DESCRIPTION: The ljust filter left-justifies the value in a field of a given width. It takes the field size as an argument.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_77

LANGUAGE: html+django
CODE:
```
"{{ value|ljust:"10" }}"
```

----------------------------------------

TITLE: Django Template with Language-Specific URLs
DESCRIPTION: Template code showing how to create links to content in different languages using the language template tag.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_50

LANGUAGE: html
CODE:
```
{% load i18n %}

{% get_available_languages as languages %}

{% translate "View this category in:" %}
{% for lang_code, lang_name in languages %}
    {% language lang_code %}
    <a href="{% url 'category' slug=category.slug %}">{{ lang_name }}</a>
    {% endlanguage %}
{% endfor %}
```

----------------------------------------

TITLE: Getting Date List Period in Django BaseDateListView
DESCRIPTION: The get_date_list_period method returns the aggregation period for date_list. By default, it returns the date_list_period attribute of the class.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
def get_date_list_period():
    Returns the aggregation period for ``date_list``. Returns
    :attr:`~BaseDateListView.date_list_period` by default.
```

----------------------------------------

TITLE: Instantiating GEOS LineString with Separate Arguments in Python
DESCRIPTION: Demonstrates creating a `LineString` geometry object by passing its constituent points as separate arguments to the constructor. These arguments can be either coordinate tuples `(x, y)` or `Point` objects. Both examples shown produce the identical `LineString`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_8

LANGUAGE: pycon
CODE:
```
>>> ls = LineString((0, 0), (1, 1))
>>> ls = LineString(Point(0, 0), Point(1, 1))
```

----------------------------------------

TITLE: Writing Integration Tests for Django Checks Issuing Warnings in Python
DESCRIPTION: Illustrates how to write an integration test for a system check that produces a warning (not an error) using `django.test.SimpleTestCase`. It uses `override_settings` to trigger the warning condition and `call_command` with a `StringIO` object passed to `stderr` to capture the output. The test would typically assert that the expected warning message is present in the captured `stderr` content (assertion part not shown in snippet).
SOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from io import StringIO

from django.core.management import call_command
from django.test import SimpleTestCase, override_settings


class EnableAnalyticsDeploymentCheckTest(SimpleTestCase):
```

----------------------------------------

TITLE: Implementing Time Zone Middleware in Django
DESCRIPTION: A middleware class that activates the appropriate time zone for each request based on a value stored in the user's session. This allows for per-user time zone settings.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
import zoneinfo

from django.utils import timezone


class TimezoneMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        tzname = request.session.get("django_timezone")
        if tzname:
            timezone.activate(zoneinfo.ZoneInfo(tzname))
        else:
            timezone.deactivate()
        return self.get_response(request)
```

----------------------------------------

TITLE: Example of Extracting Source Expressions in Django
DESCRIPTION: Simple example showing how to retrieve the source expressions from a Django query expression, specifically a Sum function.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_33

LANGUAGE: python
CODE:
```
>>> Sum(F("foo")).get_source_expressions()
[F('foo')]
```

----------------------------------------

TITLE: Defining MonthMixin Class in Django
DESCRIPTION: MonthMixin class provides functionality for retrieving and parsing the month component of a date. It includes methods for getting the month format, retrieving the month value, and navigating to next and previous months.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class MonthMixin:
    month_format = '%b'
    month = None

    def get_month_format(self):
        return self.month_format

    def get_month(self):
        # Implementation details omitted
        pass

    def get_next_month(self, date):
        # Implementation details omitted
        pass

    def get_previous_month(self, date):
        # Implementation details omitted
        pass
```

----------------------------------------

TITLE: Migrating Multiple Databases with Empty Default Configuration
DESCRIPTION: Terminal commands showing how to run migrations when using a configuration with an empty default database. In this case, you must always specify a database name when running migrations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
$ ./manage.py migrate --database=users
$ ./manage.py migrate --database=customers
```

----------------------------------------

TITLE: Using distance_lte Filter in GeoDjango
DESCRIPTION: Example of using the distance_lte lookup to filter Zipcode objects where the distance from a geometry field to the lookup geometry is less than or equal to the specified distance (5 meters).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__distance_lte=(geom, D(m=5)))
```

----------------------------------------

TITLE: Setting Request Encoding in Django View
DESCRIPTION: Example of setting custom encoding for form data processing in a Django view
SOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
def some_view(request):
    # We know that the data must be encoded as KOI8-R (for some reason).
    request.encoding = "koi8-r"
    ...
```

----------------------------------------

TITLE: Implementing Cache Router for Multiple Databases in Django
DESCRIPTION: A router class that controls database cache operations when using multiple databases. This router directs read operations to a replica database and write operations to a primary database.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
class CacheRouter:
    """A router to control all database cache operations"""

    def db_for_read(self, model, **hints):
        "All cache read operations go to the replica"
        if model._meta.app_label == "django_cache":
            return "cache_replica"
        return None

    def db_for_write(self, model, **hints):
        "All cache write operations go to primary"
        if model._meta.app_label == "django_cache":
            return "cache_primary"
        return None

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        "Only install the cache model on primary"
        if app_label == "django_cache":
            return db == "cache_primary"
        return None
```

----------------------------------------

TITLE: Querying Django HStoreField: has_keys Lookup (Python)
DESCRIPTION: Shows filtering with 'has_keys', which returns all objects whose hstore dict contains all keys from a list (SQL ?& operator). Requires Django and HStoreField, with PostgreSQL. Input is a list of required keys; output is a QuerySet of fully matching model instances.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_13

LANGUAGE: pycon
CODE:
```
>>> Dog.objects.create(name="Rufus", data={})\n>>> Dog.objects.create(name="Meg", data={"breed": "collie", "owner": "Bob"})\n\n>>> Dog.objects.filter(data__has_keys=["breed", "owner"])\n<QuerySet [<Dog: Meg>]>
```

----------------------------------------

TITLE: Rendering FlatPage in Django Template
DESCRIPTION: Shows a basic HTML template (`flatpages/default.html`) that renders a `FlatPage` object passed as the `flatpage` context variable. It displays the `title` and `content` attributes, which are marked safe from escaping.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#_snippet_4

LANGUAGE: html+django
CODE:
```
<!DOCTYPE html>\n<html lang="en">\n<head>\n<title>{{ flatpage.title }}</title>\n</head>\n<body>\n{{ flatpage.content }}\n</body>\n</html>
```

----------------------------------------

TITLE: Creating MANIFEST.in for Django App Package
DESCRIPTION: Defines the MANIFEST.in file for a Django app package. This file specifies additional files to be included in the package distribution, such as static files and templates.
SOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_4

LANGUAGE: text
CODE:
```
recursive-include django_polls/static *
recursive-include django_polls/templates *
```

----------------------------------------

TITLE: Illustrating Prohibited QuerySet reverse() After Slicing in Django
DESCRIPTION: Demonstrates a prohibited operation in Django 2.0 using the Python console syntax (`pycon`). Calling `reverse()` on a QuerySet after it has been sliced (`[:2]`) raises a `TypeError`. This change prevents potentially confusing or unexpected results that could occur from applying the slice after the reversal.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_4

LANGUAGE: pycon
CODE:
```
>>> Model.objects.all()[:2].reverse()
Traceback (most recent call last):
...
TypeError: Cannot reverse a query once a slice has been taken.
```

----------------------------------------

TITLE: Calculating PercentRank in Django Database Queries
DESCRIPTION: Demonstrates the calculation of PercentRank window function in Django. It shows how the relative rank is computed for rows in a frame clause, with a formula and example table.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_43

LANGUAGE: text
CODE:
```
(rank - 1) / (total rows - 1)
```

----------------------------------------

TITLE: Generated HTML for Custom Select Widget with Data Attributes in Django
DESCRIPTION: HTML output generated by a custom Select widget that adds data-price attributes to option elements based on the Topping model's price field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_28

LANGUAGE: html
CODE:
```
<select id="id_topping" name="topping" required>
<option value="" selected>---------</option>
<option value="1" data-price="1.50">mushrooms</option>
<option value="2" data-price="1.25">onions</option>
<option value="3" data-price="1.75">peppers</option>
<option value="4" data-price="2.00">pineapple</option>
</select>
```

----------------------------------------

TITLE: Disabling Inherited Ordering in Child Meta (Django)
DESCRIPTION: Provides an example of how to explicitly disable ordering inherited from a parent model by setting the `ordering` attribute to an empty list in the child model's `Meta` class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_44

LANGUAGE: python
CODE:
```
class ChildModel(ParentModel):
    # ...
    class Meta:
        # Remove parent's ordering effect
        ordering = []
```

----------------------------------------

TITLE: Resolving Relative Lazy Relationships in Concrete Django Models
DESCRIPTION: This snippet, from `production/models.py`, shows how the relative lazy reference ("Manufacturer") from the abstract `AbstractCar` model (defined elsewhere) is resolved. When `Car` subclasses `AbstractCar`, the `manufacturer` field resolves to the `Manufacturer` model defined within the `production` application.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_48

LANGUAGE: python
CODE:
```
from django.db import models
from products.models import AbstractCar


class Manufacturer(models.Model):
    name = models.TextField()


class Car(AbstractCar):
    pass
```

----------------------------------------

TITLE: Implementing Tablespaces in Django Models
DESCRIPTION: An example Django model that demonstrates how to specify different tablespaces for tables, fields, and indexes. The example shows table tablespace configuration via Meta class and field-level tablespace settings for various index types including many-to-many relationships.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/tablespaces.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class TablespaceExample(models.Model):
    name = models.CharField(max_length=30, db_index=True, db_tablespace="indexes")
    data = models.CharField(max_length=255, db_index=True)
    shortcut = models.CharField(max_length=7)
    edges = models.ManyToManyField(to="self", db_tablespace="indexes")

    class Meta:
        db_tablespace = "tables"
        indexes = [models.Index(fields=["shortcut"], db_tablespace="other_indexes")]
```

----------------------------------------

TITLE: Creating GeoDjango User and Database in PostgreSQL
DESCRIPTION: SQL commands to create a new user and database for GeoDjango. These commands are typically executed as the postgres superuser to set up the initial database environment.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/postgis.txt#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
postgres# CREATE USER geodjango PASSWORD 'my_passwd';
postgres# CREATE DATABASE geodjango OWNER geodjango;
```

----------------------------------------

TITLE: Running Selenium Tests with Multiple Browsers
DESCRIPTION: This command runs Django's Selenium tests with specified browsers (Firefox and Chrome in this example). These tests require the selenium package and actual browser installations on the test machine.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_11

LANGUAGE: console
CODE:
```
$ ./runtests.py --selenium=firefox,chrome
```

----------------------------------------

TITLE: Defining CheckMessage Class in Python for Django System Checks
DESCRIPTION: This code defines the CheckMessage class used for creating warning and error messages in Django's system check framework. It includes parameters for severity level, message content, hints, related objects, and a unique identifier.
SOURCE: https://github.com/django/django/blob/main/docs/ref/checks.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class CheckMessage(level, msg, hint=None, obj=None, id=None):
    # Constructor arguments:
    # level: Severity of the message (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    # msg: Short string describing the problem (< 80 chars, no newlines)
    # hint: Single-line string providing a fix hint (optional)
    # obj: Optional object providing context (should have __str__() method)
    # id: Optional unique identifier string (format: applabel.X001)
```

----------------------------------------

TITLE: Querying with Trigram Word Similarity in Django
DESCRIPTION: Shows how to use the trigram_word_similar lookup in Django for trigram word similarity searches on Sentence objects. This lookup requires the 'django.contrib.postgres' app and the pg_trgm PostgreSQL extension.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/lookups.txt#2025-04-23_snippet_1

LANGUAGE: pycon
CODE:
```
>>> Sentence.objects.filter(name__trigram_word_similar="Middlesborough")
['<Sentence: Gumby rides on the path of Middlesbrough>']
```

----------------------------------------

TITLE: Django Multiple Inheritance with Common Ancestor and OneToOneField
DESCRIPTION: Shows how to use a common ancestor model and OneToOneField relationships from parent models to the ancestor to handle multiple inheritance and avoid primary key conflicts.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_53

LANGUAGE: Python
CODE:
```
class Piece(models.Model):
    pass


class Article(Piece):
    article_piece = models.OneToOneField(
        Piece, on_delete=models.CASCADE, parent_link=True
    )
    ...


class Book(Piece):
    book_piece = models.OneToOneField(Piece, on_delete=models.CASCADE, parent_link=True)
    ...


class BookReview(Book, Article):
    pass
```

----------------------------------------

TITLE: Querying Empty Geometries in Django ORM with PostGIS
DESCRIPTION: Example of using the 'isempty' lookup to find empty geometries in PostGIS using Django ORM.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__isempty=True)
```

----------------------------------------

TITLE: Updating Django Authentication Context Processor
DESCRIPTION: The django.core.context_processors.auth method will be removed in favor of django.contrib.auth.context_processors.auth.
SOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
# Old method:
django.core.context_processors.auth

# New method:
django.contrib.auth.context_processors.auth
```

----------------------------------------

TITLE: Fetching the Latest Object with latest() Method in Django ORM
DESCRIPTION: This code uses latest() to retrieve the most recent object in a model table based on one or multiple date fields, supporting an asynchronous version alatest(). It explains the use of ordering in case of multiple fields, reliance on get_latest_by model meta option, and behavior with null values. Dependencies include Django ORM and model configuration.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_81

LANGUAGE: Python
CODE:
```
Entry.objects.latest("pub_date")
Entry.objects.latest("pub_date", "-expire_date")
```

----------------------------------------

TITLE: Creating a Base Template with Inheritance in Django
DESCRIPTION: Shows how to create a base 'skeleton' template that defines blocks for child templates to override. This example creates a two-column page layout with placeholders for title, sidebar, and content.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_9

LANGUAGE: html+django
CODE:
```
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="style.css">
    <title>{% block title %}My amazing site{% endblock %}</title>
</head>

<body>
    <div id="sidebar">
        {% block sidebar %}
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/blog/">Blog</a></li>
        </ul>
        {% endblock %}
    </div>

    <div id="content">
        {% block content %}{% endblock %}
    </div>
</body>
</html>
```

----------------------------------------

TITLE: Querying Geometric Equality in Django ORM
DESCRIPTION: Example of using the 'equals' lookup to find geometries that are spatially equal to a given geometry across different spatial database backends.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly=geom)
```

----------------------------------------

TITLE: Marking Middleware as Synchronous-Only
DESCRIPTION: A decorator that marks middleware as synchronous-only, which is the default in Django but allows future-proofing if the default changes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
sync_only_middleware(middleware)
```

----------------------------------------

TITLE: Running Django Tests with Verbosity Option
DESCRIPTION: Demonstrates how to run Django tests using the manage.py command with verbosity option. This command creates a test database and executes the tests, providing detailed output on the process.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/overview.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
Creating test database...
Creating table myapp_animal
Creating table myapp_mineral
```

----------------------------------------

TITLE: Emulating SQL Conditional Aggregation with CASE - SQL
DESCRIPTION: Shows an alternative SQL technique for performing conditional aggregation on databases that do not support FILTER WHERE. Uses CASE expressions inside count functions to sum values for each account type. Output columns reflect count per account_type as before.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_8

LANGUAGE: sql
CODE:
```
SELECT count(CASE WHEN account_type=1 THEN id ELSE null) as regular,
       count(CASE WHEN account_type=2 THEN id ELSE null) as gold,
       count(CASE WHEN account_type=3 THEN id ELSE null) as platinum
FROM clients;
```

----------------------------------------

TITLE: Using Power Function in Django Models
DESCRIPTION: Demonstrates using the Power function to raise one vector coordinate to the power of another
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Power
>>> Vector.objects.create(x=2, y=-2)
>>> vector = Vector.objects.annotate(power=Power("x", "y")).get()
>>> vector.power
0.25
```

----------------------------------------

TITLE: Querying with Unaccent Lookup in Django
DESCRIPTION: Demonstrates the use of the unaccent lookup in Django for accent-insensitive searches on City names and User first names. This lookup requires the 'django.contrib.postgres' app and the unaccent PostgreSQL extension.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/lookups.txt#2025-04-23_snippet_2

LANGUAGE: pycon
CODE:
```
>>> City.objects.filter(name__unaccent="México")
['<City: Mexico>']

>>> User.objects.filter(first_name__unaccent__startswith="Jerem")
['<User: Jeremy>', '<User: Jérémy>', '<User: Jérémie>', '<User: Jeremie>']
```

----------------------------------------

TITLE: Setting DYLD_FALLBACK_LIBRARY_PATH for macOS GeoDjango Dependencies - Shell
DESCRIPTION: This shell snippet sets the DYLD_FALLBACK_LIBRARY_PATH environment variable on macOS, ensuring that the system dynamically loads the correct PostgreSQL and shared libraries required by GeoDjango. No dependencies beyond a correctly installed PostgreSQL library directory are required. The command should be executed before launching processes that depend on these libraries, such as Python scripts using GeoDjango; the expected input is the environment execution context and it outputs the updated process environment. Limitations: applies only to macOS and assumes /opt/local/lib locations are valid.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_10

LANGUAGE: shell
CODE:
```
export DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib:/opt/local/lib/postgresql14
```

----------------------------------------

TITLE: Configuring Custom RemoteUserMiddleware
DESCRIPTION: Configuration of Django MIDDLEWARE setting to use a custom RemoteUserMiddleware implementation for authentication.
SOURCE: https://github.com/django/django/blob/main/docs/howto/auth-remote-user.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
MIDDLEWARE = [
    "...",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "mysite.middleware.CustomHeaderRemoteUserMiddleware",
    "...",
]
```

----------------------------------------

TITLE: Managing Index Naming in Meta Classes with Django ORM (Python)
DESCRIPTION: Illustrates how to avoid index name collisions in abstract base classes by using placeholders in the index name. This leverages 'app_label' and 'class' substitutions within the string, ensuring that unique names are generated for subclasses. The key input is a string with substitution placeholders, and the output is a per-model index name. Required dependencies: Django model Meta options and valid field names.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/indexes.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
Index(fields=['title'], name='%(app_label)s_%(class)s_title_index')
```

----------------------------------------

TITLE: Testing Django Check Command with ENABLE_ANALYTICS Setting
DESCRIPTION: Tests the behavior of Django's check command when ENABLE_ANALYTICS setting is set to None. Verifies that the command outputs the expected warning message for deployment checks.
SOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_10

LANGUAGE: Python
CODE:
```
        @override_settings(ENABLE_ANALYTICS=None)
        def test_when_set_to_none(self):
            stderr = StringIO()
            call_command("check", "-t", "myapp", "--deploy", stderr=stderr)
            message = (
                "(myapp.W001) The ENABLE_ANALYTICS setting should be set "
                "to True in deployment."
            )
            self.assertIn(message, stderr.getvalue())
```

----------------------------------------

TITLE: Installing Jinja2 for Django Integration
DESCRIPTION: Shows the command to install Jinja2 using pip, which is required for using the Jinja2 backend in Django.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_13

LANGUAGE: shell
CODE:
```
$ python -m pip install Jinja2
```

----------------------------------------

TITLE: Querying Zipcode Polygons Spatially Containing Geometry in Django
DESCRIPTION: Demonstrates using the contains spatial lookup to filter Zipcode objects whose polygon spatially contains a given geometry.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__contains=geom)
```

----------------------------------------

TITLE: Hardcoding Specific Flatpages URLs - Django Python
DESCRIPTION: This snippet shows how to define specific, named URLs in your URLconf that map directly to the flatpage view. It explicitly provides the flatpage URL lookup value using the `kwargs` argument. This approach allows for reversing the URL using names like 'about' or 'license'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#_snippet_2

LANGUAGE: Python
CODE:
```
from django.contrib.flatpages import views

urlpatterns += [
    path("about-us/", views.flatpage, kwargs={"url": "/about-us/"}, name="about"),
    path("license/", views.flatpage, kwargs={"url": "/license/"}, name="license"),
]
```

----------------------------------------

TITLE: Configuring Admin URLs in Django 1.0 (Python)
DESCRIPTION: This snippet demonstrates the updated method for configuring admin URLs in Django 1.0's root `urls.py`. It requires importing `django.contrib.admin`, calling `admin.autodiscover()` to load `admin.py` files from installed apps, and using `admin.site.root` for the admin URL pattern.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
from django.conf.urls.defaults import *

# The next two lines enable the admin and load each admin.py file:
from django.contrib import admin

admin.autodiscover()

urlpatterns = patterns(
    "",
    (r"^admin/(.*)", admin.site.root),
    # ... the rest of your URLs here ...
)
```

----------------------------------------

TITLE: Defining and Using HStoreField in Django Models (Python)
DESCRIPTION: Demonstrates how to define a Django model using the HStoreField for key-value storage, and provides example Python shell (pycon) commands for creating and querying model instances using various HStore lookups. Requires Django with 'django.contrib.postgres' in INSTALLED_APPS and PostgreSQL with hstore extension enabled. Input includes model instances and queries, output shows QuerySet results for different lookups; supports operations like filter by key, contains, contained_by, has_key, has_any_keys, has_keys, keys, and values. Limitations: Proper setup in both Django and PostgreSQL required; typo in key names during queries may silently return undesired results due to key lookup fallback.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
from django.contrib.postgres.fields import HStoreField\nfrom django.db import models\n\n\nclass Dog(models.Model):\n    name = models.CharField(max_length=200)\n    data = HStoreField()\n\n    def __str__(self):\n        return self.name
```

LANGUAGE: pycon
CODE:
```
>>> Dog.objects.create(name="Rufus", data={"breed": "labrador"})\n>>> Dog.objects.create(name="Meg", data={"breed": "collie"})\n\n>>> Dog.objects.filter(data__breed="collie")\n<QuerySet [<Dog: Meg>]>
```

LANGUAGE: pycon
CODE:
```
>>> Dog.objects.filter(data__breed__contains="l")\n<QuerySet [<Dog: Rufus>, <Dog: Meg>]>
```

LANGUAGE: pycon
CODE:
```
>>> from django.db.models import F\n>>> rufus = Dog.objects.annotate(breed=F("data__breed"))[0]\n>>> rufus.breed\n'labrador'
```

----------------------------------------

TITLE: Initializing MultiWidget with a Dictionary in Python REPL
DESCRIPTION: Shows how to initialize `MultiWidget` with a dictionary to assign custom suffixes (or no suffix using an empty string key) to the `name` attribute of subwidgets. The `render` method output reflects these custom suffixes ('name' and 'name_last').
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_11

LANGUAGE: pycon
CODE:
```
>>> widget = MultiWidget(widgets={"": TextInput, "last": TextInput})
>>> widget.render("name", ["john", "paul"])
'<input type="text" name="name" value="john"><input type="text" name="name_last" value="paul">'
```

----------------------------------------

TITLE: Defining UniqueConstraint Treating NULLs as Not Distinct in Python (PostgreSQL 15+)
DESCRIPTION: Demonstrates how to create a `UniqueConstraint` where NULL values are considered equal (not distinct) using `nulls_distinct=False`. This ensures only one row can have a NULL value in the constrained column(s). This feature requires PostgreSQL 15 or newer.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_11

LANGUAGE: Python
CODE:
```
from django.db.models import UniqueConstraint

UniqueConstraint(name="ordering", fields=["ordering"], nulls_distinct=False)
```

----------------------------------------

TITLE: Using patch_cache_control Function in Django's cache Utils
DESCRIPTION: The patch_cache_control function modifies the Cache-Control header of HTTP responses by adding keyword arguments to it. Parameter names are converted to lowercase with hyphens, and boolean True values are added as flags.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
patch_cache_control(response, **kwargs)
```

----------------------------------------

TITLE: Contains Lookup for JSONField in Django
DESCRIPTION: Demonstrates the contains lookup which returns objects where all the given key-value pairs are contained in the top level of the JSONField.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
>>> Dog.objects.create(name="Rufus", data={"breed": "labrador", "owner": "Bob"})
<Dog: Rufus>
>>> Dog.objects.create(name="Meg", data={"breed": "collie", "owner": "Bob"})
<Dog: Meg>
>>> Dog.objects.create(name="Fred", data={})
<Dog: Fred>
>>> Dog.objects.create(
...     name="Merry", data={"breed": "pekingese", "tricks": ["fetch", "dance"]}
... )
>>> Dog.objects.filter(data__contains={"owner": "Bob"})
<QuerySet [<Dog: Rufus>, <Dog: Meg>]>
>>> Dog.objects.filter(data__contains={"breed": "collie"})
<QuerySet [<Dog: Meg>]>
>>> Dog.objects.filter(data__contains={"tricks": ["dance"]})
<QuerySet [<Dog: Merry>]>
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'contained_by' Lookup in Django Python
DESCRIPTION: Demonstrates the `contained_by` lookup (`__contained_by`, SQL operator `<@`) on the `ages` `IntegerRangeField`. This query retrieves `Event` objects whose entire `ages` range falls within the specified `NumericRange(0, 15)`. Requires the `Event` model and `NumericRange`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_20

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__contained_by=NumericRange(0, 15))
<QuerySet [<Event: Soft play>]>
```

----------------------------------------

TITLE: Using a Custom Hasher in Django Settings (Python)
DESCRIPTION: Shows how to configure Django to use a custom password hasher (like the `MyPBKDF2PasswordHasher` from the previous example) by adding its full Python path as the first element in the `PASSWORD_HASHERS` list in the settings file.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
PASSWORD_HASHERS = [
```

----------------------------------------

TITLE: Creating a GEOSGeometry Object from EWKT (Python)
DESCRIPTION: Shows an alternative way to create a geometry object with an SRID using Extended Well Known Text (EWKT), which includes the SRID definition directly in the string. Requires `django.contrib.gis.geos.GEOSGeometry`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_14

LANGUAGE: pycon
CODE:
```
>>> pnt = GEOSGeometry("SRID=32140;POINT(954158.1 4215137.1)")
```

----------------------------------------

TITLE: Set Operations on LineString Objects
DESCRIPTION: Demonstrates set-like operations (union, intersection, difference, symmetric difference) between LineString objects using Python operators.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.geos import LineString
>>> ls1 = LineString((0, 0), (2, 2))
>>> ls2 = LineString((1, 1), (3, 3))
>>> print(ls1 | ls2)  # equivalent to `ls1.union(ls2)`
MULTILINESTRING ((0 0, 1 1), (1 1, 2 2), (2 2, 3 3))
>>> print(ls1 & ls2)  # equivalent to `ls1.intersection(ls2)`
LINESTRING (1 1, 2 2)
>>> print(ls1 - ls2)  # equivalent to `ls1.difference(ls2)`
LINESTRING(0 0, 1 1)
>>> print(ls1 ^ ls2)  # equivalent to `ls1.sym_difference(ls2)`
MULTILINESTRING ((0 0, 1 1), (2 2, 3 3))
```

----------------------------------------

TITLE: Checking Default Model Permissions in Django (Python)
DESCRIPTION: Illustrates how to check if a user (`user`) has specific default permissions (add, change, delete, view) for a given model ('Bar' in app 'foo'). This is done using the `user.has_perm()` method, passing the permission string in the format 'app_label.action_modelname'.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
# add: user.has_perm('foo.add_bar')
# change: user.has_perm('foo.change_bar')
# delete: user.has_perm('foo.delete_bar')
# view: user.has_perm('foo.view_bar')
```

----------------------------------------

TITLE: Defining `__str__` Method for a Django Model (Python)
DESCRIPTION: Shows how to define the `__str__` method on a Django model (`Person`) to provide a human-readable string representation, typically used in the Django admin and templates. It imports `models` from `django.db` and returns a formatted string of the person's first and last names.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
from django.db import models


class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)

    def __str__(self):
        return f"{self.first_name} {self.last_name}"
```

----------------------------------------

TITLE: Example Input: List of Dictionaries for Dictsort - Python
DESCRIPTION: Provides a sample list of dictionaries representing people with names and ages. This is used as input for dictsort demonstration. Output would be the same structure, sorted according to criteria specified in the Django template. No external dependencies required.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_58

LANGUAGE: python
CODE:
```
[
    {"name": "zed", "age": 19},
    {"name": "amy", "age": 22},
    {"name": "joe", "age": 31},
]
```

----------------------------------------

TITLE: Context Object Manipulation in Django
DESCRIPTION: Shows various operations for manipulating Context objects including push, pop, and dictionary operations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> from django.template import Context
>>> c = Context({"foo": "bar"})
>>> c["foo"]
'bar'
>>> del c["foo"]
>>> c["foo"]
Traceback (most recent call last):
...
KeyError: 'foo'
>>> c["newvariable"] = "hello"
>>> c["newvariable"]
'hello'
```

----------------------------------------

TITLE: Using TrigramDistance for Distance-Based Text Matching
DESCRIPTION: Demonstrates how to use TrigramDistance to find records by text distance. Instead of similarity, this uses the inverse concept of distance, where lower values indicate better matches.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_14

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.postgres.search import TrigramDistance
>>> Author.objects.create(name="Katy Stevens")
>>> Author.objects.create(name="Stephen Keats")
>>> test = "Katie Stephens"
>>> Author.objects.annotate(
...     distance=TrigramDistance("name", test),
... ).filter(
...     distance__lte=0.7
... ).order_by("distance")
[<Author: Katy Stevens>, <Author: Stephen Keats>]
```

----------------------------------------

TITLE: Listing FlatPages for User with Django Tag
DESCRIPTION: Shows how to use the `get_flatpages` template tag with a `for` clause specifying a user object (`someuser`). This allows the tag to include flatpages marked `registration_required=True` if the user is authenticated.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#_snippet_6

LANGUAGE: html+django
CODE:
```
{% get_flatpages for someuser as about_pages %}
```

----------------------------------------

TITLE: Proper Spacing in Django Template Expressions
DESCRIPTION: Shows proper spacing in Django template expressions with single spaces between tokens except around dots for attribute access and pipes for filters. This demonstrates correct template syntax formatting.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_13

LANGUAGE: html+django
CODE:
```
{% if user.name|lower == "admin" %}
```

----------------------------------------

TITLE: Converting Datetime to Local Time Zone in Django
DESCRIPTION: This snippet shows how to convert a datetime object to the current time zone in Django. It uses Django's timezone utilities to activate a specific time zone and convert a datetime object to that time zone.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
>>> from django.utils import timezone
>>> timezone.activate(zoneinfo.ZoneInfo("Asia/Singapore"))
# For this example, we set the time zone to Singapore, but here's how
# you would obtain the current time zone in the general case.
>>> current_tz = timezone.get_current_timezone()
>>> local = paris.astimezone(current_tz)
>>> local
datetime.datetime(2012, 3, 3, 8, 30, tzinfo=zoneinfo.ZoneInfo(key='Asia/Singapore'))
>>> local.date()
datetime.date(2012, 3, 3)
```

----------------------------------------

TITLE: Excluding Django Objects with Chained Conditions (OR equivalent) using Python and SQL
DESCRIPTION: Demonstrates chaining `exclude()` calls in Python to filter out objects matching *any* of the specified conditions (equivalent to OR logic for exclusion). Each `exclude` call translates to a separate `AND NOT` condition in the resulting SQL.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_7

LANGUAGE: python
CODE:
```
Entry.objects.exclude(pub_date__gt=datetime.date(2005, 1, 3)).exclude(headline="Hello")
```

LANGUAGE: sql
CODE:
```
SELECT ...
WHERE NOT pub_date > '2005-1-3'
AND NOT headline = 'Hello'
```

----------------------------------------

TITLE: Defining a Custom Feed Type in Django Feed Class - Python
DESCRIPTION: This Python snippet demonstrates how to specify a custom feed type (such as Atom 1.0) in a Django syndication Feed class by setting the 'feed_type' class attribute. The code requires importing Atom1Feed from django.utils.feedgenerator and expects integration into a Django project with properly configured syndication and feedgenerator modules. The key parameter is 'feed_type', which should be set to a class (not an instance); changing it alters the output feed format. The output is a Django feed view that emits Atom if the feed_type is set accordingly.

SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
from django.utils.feedgenerator import Atom1Feed

class MyFeed(Feed):
    feed_type = Atom1Feed
```

----------------------------------------

TITLE: Creating a Django Feed with View-Rendered Stylesheet
DESCRIPTION: This snippet demonstrates how to use a view in your Django project to render an XSLT document for styling an RSS feed by using reverse_lazy to link to the view.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
from django.contrib.syndication.views import Feed
from django.urls import reverse_lazy


class FeedWithStylesheetView(Feed):
    stylesheets = [
        reverse_lazy("your-custom-view-name"),
    ]
```

----------------------------------------

TITLE: Configuring File Backend in Django Settings
DESCRIPTION: Example configuration for the file-based email backend with a specified file path.
SOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
EMAIL_FILE_PATH = "/tmp/app-messages"  # change this to a proper location
```

----------------------------------------

TITLE: Iterating and Accessing Features and Geometries in GDAL Layers in Python
DESCRIPTION: Shows how to iterate over features in a GDAL Layer, access attribute fields by name, retrieve geometrical counts, perform array slicing to get subsets of feature objects, and access features by feature ID. Demonstrates retrieval of feature geometries and export to WKT and GeoJSON using GeoDjango interfaces. This assumes that ds and lyr are already defined and is intended for use in the Django shell. Outputs are printed names, point counts, geometry WKT/GeoJSON, or feature details as examples.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> for feat in lyr:
...     print(feat.get("NAME"), feat.geom.num_points)
...
Guernsey 18
Jersey 26
South Georgia South Sandwich Islands 338
Taiwan 363
```

LANGUAGE: python
CODE:
```
>>> lyr[0:2]
[<django.contrib.gis.gdal.feature.Feature object at 0x2f47690>, <django.contrib.gis.gdal.feature.Feature object at 0x2f47650>]
```

LANGUAGE: python
CODE:
```
>>> feat = lyr[234]
>>> print(feat.get("NAME"))
San Marino
```

LANGUAGE: python
CODE:
```
>>> geom = feat.geom
>>> print(geom.wkt)
POLYGON ((12.415798 43.957954,12.450554 ...
>>> print(geom.json)
{ "type": "Polygon", "coordinates": [ [ [ 12.415798, 43.957954 ], [ 12.450554, 43.979721 ], ...
```

----------------------------------------

TITLE: Querying ArrayField with Contains Lookup in Django
DESCRIPTION: Demonstrates how to use the 'contains' lookup with ArrayField in Django. This example shows querying for posts that have specific tags using the contains lookup.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> Post.objects.create(name="First post", tags=["thoughts", "django"])
>>> Post.objects.create(name="Second post", tags=["thoughts"])
>>> Post.objects.create(name="Third post", tags=["tutorial", "django"])

>>> Post.objects.filter(tags__contains=["thoughts"])
<QuerySet [<Post: First post>, <Post: Second post>]>

>>> Post.objects.filter(tags__contains=["django"])
<QuerySet [<Post: First post>, <Post: Third post>]>

>>> Post.objects.filter(tags__contains=["django", "thoughts"])
<QuerySet [<Post: First post>]>
```

----------------------------------------

TITLE: Installing Daphne via pip
DESCRIPTION: Command to install the Daphne ASGI server using pip. This installs the Daphne package which provides the necessary server functionality for running Django as an ASGI application.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/daphne.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
python -m pip install daphne
```

----------------------------------------

TITLE: Using SearchVectorField for Efficient Text Search
DESCRIPTION: Shows how to use a SearchVectorField for faster text search operations by pre-computing and storing search vectors in the database. This avoids recalculating vectors during each query.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_11

LANGUAGE: pycon
CODE:
```
>>> Entry.objects.update(search_vector=SearchVector("body_text"))
>>> Entry.objects.filter(search_vector="cheese")
[<Entry: Cheese on Toast recipes>, <Entry: Pizza recipes>]
```

----------------------------------------

TITLE: Accessing GML Representation of OGRGeometry in Python
DESCRIPTION: Demonstrates accessing the `.gml` attribute of an `OGRGeometry` object initialized with a WKT string ('POINT(1 2)'). This attribute returns a string representation of the geometry in GML format.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_10

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("POINT(1 2)").gml
'<gml:Point><gml:coordinates>1,2</gml:coordinates></gml:Point>'
```

----------------------------------------

TITLE: Setting Default File Upload Permissions in Django
DESCRIPTION: Sets the default file upload permissions to 0o644 to avoid inconsistencies between different upload handlers.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
FILE_UPLOAD_PERMISSIONS = 0o644
```

----------------------------------------

TITLE: Creating Geometry Objects from Strings in Python using GEOS
DESCRIPTION: Demonstrates how to create a GEOSGeometry object from a string containing spatial data using the fromstr function.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_20

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.geos import fromstr
>>> pnt = fromstr("POINT(-90.5 29.5)", srid=4326)
```

----------------------------------------

TITLE: Using a Database Query Blocker Wrapper in a Django View (Python)
DESCRIPTION: This snippet demonstrates how to use the previously defined 'blocker' function as a context manager with Django's connection.execute_wrapper in a view. By wrapping the render operation, it ensures that no SQL queries are executed while rendering the template, typically after prefetching all necessary data. Dependencies are the Django ORM, connection management, and the shortcuts render function.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/instrumentation.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.db import connection
from django.shortcuts import render


def my_view(request):
    context = {...}  # Code to generate context with all data.
    template_name = ...
    with connection.execute_wrapper(blocker):
        return render(request, template_name, context)
```

----------------------------------------

TITLE: Implementing TodayArchiveView in Django
DESCRIPTION: Example of how to create a TodayArchiveView for displaying articles published today. It includes the view definition and URL configuration.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_11

LANGUAGE: Python
CODE:
```
from django.views.generic.dates import TodayArchiveView

from myapp.models import Article


class ArticleTodayArchiveView(TodayArchiveView):
    queryset = Article.objects.all()
    date_field = "pub_date"
    allow_future = True
```

LANGUAGE: Python
CODE:
```
from django.urls import path

from myapp.views import ArticleTodayArchiveView

urlpatterns = [
    path("today/", ArticleTodayArchiveView.as_view(), name="archive_today"),
]
```

----------------------------------------

TITLE: Registering a Django System Check Using a Function Call in Python
DESCRIPTION: Illustrates an alternative method for registering a system check function without using the `@register` decorator. The `register` function is called directly, passing the check function (`my_check`) as the first argument, followed by tags and options like `deploy=True`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
def my_check(app_configs, **kwargs): ...


register(my_check, Tags.security, deploy=True)
```

----------------------------------------

TITLE: Equivalent vary_on_cookie Implementation
DESCRIPTION: Shows the equivalent implementation of vary_on_cookie using vary_on_headers with the Cookie header specified. Both decorators achieve the same caching behavior.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_42

LANGUAGE: python
CODE:
```
@vary_on_headers("Cookie")
def my_view(request): ...
```

----------------------------------------

TITLE: Defining Unique Together Constraints in Django Model Meta (Legacy)
DESCRIPTION: Shows how to enforce uniqueness across multiple fields using the `unique_together` attribute in a model's `Meta` class. Both list-of-lists and single-list formats are demonstrated. Note: Using `UniqueConstraint` with the `constraints` option is now preferred.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
unique_together = [["driver", "restaurant"]]
```

LANGUAGE: python
CODE:
```
unique_together = ["driver", "restaurant"]
```

----------------------------------------

TITLE: Executing Django Shell Commands from Standard Input - Shell
DESCRIPTION: Executes multiple Python commands provided via standard input within the Django shell environment. This method is useful for running longer scripts or multiple lines of code without saving them to a file. The `<<EOF ... EOF` syntax is a common shell here-document technique.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_36

LANGUAGE: shell
CODE:
```
django-admin shell <<EOF\nimport django\nprint(django.__version__)\nEOF
```

----------------------------------------

TITLE: Performing GeoDjango Distance Queries using Lookups in Python
DESCRIPTION: Shows how to query `SouthTexasCity` objects based on distance from a reference point (`pnt`). It utilizes `GEOSGeometry` to define the reference point (SRID 4326) and the `Distance` object (`D`) for specifying distances with units (km, mi, chain). The examples filter using `distance_lte` (less than or equal to) and `distance_gte` (greater than or equal to) lookups against the `point` field. GeoDjango handles the necessary transformations and calculations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_6

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.geos import GEOSGeometry
>>> from django.contrib.gis.measure import D  # ``D`` is a shortcut for ``Distance``
>>> from geoapp.models import SouthTexasCity
# Distances will be calculated from this point, which does not have to be projected.
>>> pnt = GEOSGeometry("POINT(-96.876369 29.905320)", srid=4326)
# If numeric parameter, units of field (meters in this case) are assumed.
>>> qs = SouthTexasCity.objects.filter(point__distance_lte=(pnt, 7000))
# Find all Cities within 7 km, > 20 miles away, and > 100 chains away (an obscure unit)
>>> qs = SouthTexasCity.objects.filter(point__distance_lte=(pnt, D(km=7)))
>>> qs = SouthTexasCity.objects.filter(point__distance_gte=(pnt, D(mi=20)))
>>> qs = SouthTexasCity.objects.filter(point__distance_gte=(pnt, D(chain=100)))
```

----------------------------------------

TITLE: Initializing MultiWidget with a List in Python REPL
DESCRIPTION: Demonstrates initializing a `MultiWidget` instance using a list of `TextInput` widgets in a Python interactive console (`pycon`). It shows how the `render` method generates HTML input elements with default numerical suffixes (`_0`, `_1`) for the `name` attribute based on the list structure.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_10

LANGUAGE: pycon
CODE:
```
>>> from django.forms import MultiWidget, TextInput
>>> widget = MultiWidget(widgets=[TextInput, TextInput])
>>> widget.render("name", ["john", "paul"])
'<input type="text" name="name_0" value="john"><input type="text" name="name_1" value="paul">'
```

----------------------------------------

TITLE: Converting Objects to Strings with smart_str
DESCRIPTION: Returns a str object representing an arbitrary object, treating bytestrings using the specified encoding. Can optionally skip conversion of non-string-like objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
smart_str(s, encoding='utf-8', strings_only=False, errors='strict')
```

----------------------------------------

TITLE: Implementing Value Conversion Methods for Custom Django Field
DESCRIPTION: This code shows the implementation of from_db_value and to_python methods for a custom HandField, handling conversion between database values and Python objects.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_13

LANGUAGE: Python
CODE:
```
import re

from django.core.exceptions import ValidationError
from django.db import models
from django.utils.translation import gettext_lazy as _


def parse_hand(hand_string):
    """Takes a string of cards and splits into a full hand."""
    p1 = re.compile(".{26}")
    p2 = re.compile("..")
    args = [p2.findall(x) for x in p1.findall(hand_string)]
    if len(args) != 4:
        raise ValidationError(_("Invalid input for a Hand instance"))
    return Hand(*args)


class HandField(models.Field):
    # ...

    def from_db_value(self, value, expression, connection):
        if value is None:
            return value
        return parse_hand(value)

    def to_python(self, value):
        if isinstance(value, Hand):
            return value

        if value is None:
            return value

        return parse_hand(value)
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'contains' Lookup in Django Python
DESCRIPTION: Illustrates using the `contains` lookup (`__contains`, SQL operator `@>`) on the `ages` `IntegerRangeField` of the `Event` model. This Django ORM query filters for `Event` objects where the `ages` range completely encompasses the specified `NumericRange(4, 5)`. Requires the `Event` model and `NumericRange`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_19

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__contains=NumericRange(4, 5))
<QuerySet [<Event: Soft play>]>
```

----------------------------------------

TITLE: Instantiating a Closed GEOS LinearRing in Python
DESCRIPTION: Demonstrates the creation of a `LinearRing` object using a sequence of coordinate tuples. A `LinearRing` is a specific type of `LineString` that must be closed, meaning its first and last coordinates must be identical, as shown with `(0, 0)` in the example. Providing non-closing coordinates would raise an error.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_11

LANGUAGE: pycon
CODE:
```
>>> ls = LinearRing((0, 0), (0, 1), (1, 1), (0, 0))
```

----------------------------------------

TITLE: Starting Django Shell with bpython - Shell
DESCRIPTION: Explicitly starts the Django interactive shell using the bpython interpreter. Use this command to specifically select bpython when multiple interactive shells are available.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_33

LANGUAGE: shell
CODE:
```
django-admin shell -i bpython
```

----------------------------------------

TITLE: Django Language Fallback Behavior with English Variants
DESCRIPTION: Explains how Django handles missing English strings when an English variant is activated. Instead of using the project's LANGUAGE_CODE setting as fallback, Django will use the original source strings. This creates different behavior for English users compared to users of other languages.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_66

LANGUAGE: markdown
CODE:
```
* When an English variant is activated and English strings are missing, the
  fallback language will not be the :setting:`LANGUAGE_CODE` of the project,
  but the original strings. For example, an English user visiting a site with
  :setting:`LANGUAGE_CODE` set to Spanish and original strings written in
  Russian will see Russian text rather than Spanish.
```

----------------------------------------

TITLE: Converting Function Decorators to Method Decorators
DESCRIPTION: Transforms a function decorator into a method decorator for use with methods or classes. When used with a class, name parameter specifies which method to decorate. Can accept a list/tuple of decorators to apply in reverse order.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
method_decorator(decorator, name='')
```

----------------------------------------

TITLE: Implementing CharField with Integer List Validator
DESCRIPTION: Example showing how to replace deprecated CommaSeparatedIntegerField with CharField using validate_comma_separated_integer_list validator.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
from django.core.validators import validate_comma_separated_integer_list
from django.db import models


class MyModel(models.Model):
    numbers = models.CharField(..., validators=[validate_comma_separated_integer_list])
```

----------------------------------------

TITLE: Querying Django HStoreField: contained_by Lookup (Python)
DESCRIPTION: Demonstrates use of the 'contained_by' lookup for HStoreField, returning objects whose key-value pairs all exist within the provided dictionary (SQL <@ operator). This is the inverse of 'contains'. Depends on the Django ORM and HStoreField with PostgreSQL. Inputs are dicts representing supersets; outputs are QuerySets with subset matches.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_10

LANGUAGE: pycon
CODE:
```
>>> Dog.objects.create(name="Rufus", data={"breed": "labrador", "owner": "Bob"})\n>>> Dog.objects.create(name="Meg", data={"breed": "collie", "owner": "Bob"})\n>>> Dog.objects.create(name="Fred", data={})\n\n>>> Dog.objects.filter(data__contained_by={"breed": "collie", "owner": "Bob"})\n<QuerySet [<Dog: Meg>, <Dog: Fred>]>
```

LANGUAGE: pycon
CODE:
```
>>> Dog.objects.filter(data__contained_by={"breed": "collie"})\n<QuerySet [<Dog: Fred>]>
```

----------------------------------------

TITLE: Configuring Database Settings in Django for GeoDjango
DESCRIPTION: Sets up the database connection settings in the Django project's settings.py file for use with GeoDjango and PostGIS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": "geodjango",
        "USER": "geo",
    },
}
```

----------------------------------------

TITLE: Instantiating a Django Template Object Directly
DESCRIPTION: Shows how to create a `django.template.Template` object directly by passing the raw template code as a string argument to its constructor. This compiles the template string, making it ready for rendering with a context. The example uses a simple template string with a variable `{{ my_name }}`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.template import Template

template = Template("My name is {{ my_name }}.")
```

----------------------------------------

TITLE: Configuring pyproject.toml for a Django App Package
DESCRIPTION: Defines the pyproject.toml file for a Django app package. This file specifies build system requirements, project metadata, dependencies, and classifiers for the package.
SOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_3

LANGUAGE: toml
CODE:
```
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "django-polls"
version = "0.1"
dependencies = [
    "django>=X.Y",  # Replace "X.Y" as appropriate
]
description = "A Django app to conduct web-based polls."
readme = "README.rst"
requires-python = ">= 3.12"
authors = [
    {name = "Your Name", email = "yourname@example.com"},
]
classifiers = [
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: X.Y",  # Replace "X.Y" as appropriate
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]

[project.urls]
Homepage = "https://www.example.com/"
```

----------------------------------------

TITLE: Running Migrate Skipping System Checks - Command Line
DESCRIPTION: Shows how to use the `django-admin migrate` command with the `--skip-checks` option. This bypasses the system checks that Django normally performs before executing a management command, potentially speeding up execution but also skipping validations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_54

LANGUAGE: Command Line
CODE:
```
django-admin migrate --skip-checks
```

----------------------------------------

TITLE: Filtering FlatPages by URL Prefix in Django Tag
DESCRIPTION: Illustrates using the `starts_with` argument with the `get_flatpages` template tag to limit the returned flatpages to those whose URLs begin with a specified prefix. The prefix can be a string literal or a context variable, and can be combined with the user filter.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#_snippet_7

LANGUAGE: html+django
CODE:
```
{% get_flatpages '/about/' as about_pages %}\n{% get_flatpages about_prefix as about_pages %}\n{% get_flatpages '/about/' for someuser as about_pages %}
```

----------------------------------------

TITLE: Converting IRIs to URIs
DESCRIPTION: Converts an Internationalized Resource Identifier (IRI) portion to a URI, handling internationalized characters for web protocols.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
iri_to_uri(iri)
```

----------------------------------------

TITLE: Altering Table Engine in MySQL
DESCRIPTION: This SQL snippet shows how to alter a table's engine to MyISAM in MySQL. It's an example of adding database-specific options to CREATE TABLE statements in Django using migrations.
SOURCE: https://github.com/django/django/blob/main/docs/faq/models.txt#2025-04-23_snippet_3

LANGUAGE: sql
CODE:
```
ALTER TABLE myapp_mytable ENGINE=MyISAM;
```

----------------------------------------

TITLE: Retrieving All Field Instances via Django _meta (Python Interactive)
DESCRIPTION: Illustrates usage of _meta.get_fields() to fetch a tuple of all fields associated with a Django model class, optionally including hidden fields. The include_parents and include_hidden parameters control the breadth of fields included (fields from parent classes or hidden/internal fields). The output is a tuple of various field and relationship instances. Prerequisites: Django and an appropriate model. Useful for code that needs to dynamically explore all fields in models.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/meta.txt#2025-04-23_snippet_1

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.auth.models import User
>>> User._meta.get_fields()
(<ManyToOneRel: admin.logentry>,
 <django.db.models.fields.AutoField: id>,
 <django.db.models.fields.CharField: password>,
 <django.db.models.fields.DateTimeField: last_login>,
 <django.db.models.fields.BooleanField: is_superuser>,
 <django.db.models.fields.CharField: username>,
 <django.db.models.fields.CharField: first_name>,
 <django.db.models.fields.CharField: last_name>,
 <django.db.models.fields.EmailField: email>,
 <django.db.models.fields.BooleanField: is_staff>,
 <django.db.models.fields.BooleanField: is_active>,
 <django.db.models.fields.DateTimeField: date_joined>,
 <django.db.models.fields.related.ManyToManyField: groups>,
 <django.db.models.fields.related.ManyToManyField: user_permissions>)
```

LANGUAGE: pycon
CODE:
```
# Also include hidden fields.
>>> User._meta.get_fields(include_hidden=True)
(<ManyToOneRel: auth.user_groups>,
 <ManyToOneRel: auth.user_user_permissions>,
 <ManyToOneRel: admin.logentry>,
 <django.db.models.fields.AutoField: id>,
 <django.db.models.fields.CharField: password>,
 <django.db.models.fields.DateTimeField: last_login>,
 <django.db.models.fields.BooleanField: is_superuser>,
 <django.db.models.fields.CharField: username>,
 <django.db.models.fields.CharField: first_name>,
 <django.db.models.fields.CharField: last_name>,
 <django.db.models.fields.EmailField: email>,
 <django.db.models.fields.BooleanField: is_staff>,
 <django.db.models.fields.BooleanField: is_active>,
 <django.db.models.fields.DateTimeField: date_joined>,
 <django.db.models.fields.related.ManyToManyField: groups>,
 <django.db.models.fields.related.ManyToManyField: user_permissions>)
```

----------------------------------------

TITLE: Registering Lookups with Django Fields (Python)
DESCRIPTION: Demonstrates the registration of custom lookup classes to Django model fields using the RegisterLookupMixin API. Requires Django models and custom lookup class definitions. Registration overrides existing lookups with the same name and allows for both class-level and instance-level customization. Key parameters include the lookup class to be registered and an optional lookup name.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/lookups.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
DateField.register_lookup(YearExact)
User._meta.get_field("date_joined").register_lookup(MonthExact)
```

----------------------------------------

TITLE: Dictionary Result Fetching Function
DESCRIPTION: Function to convert database cursor results into a list of dictionaries, where each dictionary maps column names to values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
def dictfetchall(cursor):
    """
    Return all rows from a cursor as a dict.
    Assume the column names are unique.
    """
    columns = [col[0] for col in cursor.description]
    return [dict(zip(columns, row)) for row in cursor.fetchall()]
```

----------------------------------------

TITLE: Creating a Custom PBKDF2-Wrapped MD5 Password Hasher in Django
DESCRIPTION: This code defines a custom password hasher class that wraps MD5 passwords with PBKDF2 for increased security. It extends the PBKDF2PasswordHasher class and implements custom encoding methods to handle legacy MD5 hashes.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.contrib.auth.hashers import (
    PBKDF2PasswordHasher,
    MD5PasswordHasher,
)


class PBKDF2WrappedMD5PasswordHasher(PBKDF2PasswordHasher):
    algorithm = "pbkdf2_wrapped_md5"

    def encode_md5_hash(self, md5_hash, salt, iterations=None):
        return super().encode(md5_hash, salt, iterations)

    def encode(self, password, salt, iterations=None):
        _, _, md5_hash = MD5PasswordHasher().encode(password, salt).split("$", 2)
        return self.encode_md5_hash(md5_hash, salt, iterations)
```

----------------------------------------

TITLE: Defining PostgreSQL Service Configuration File (.pg_service.conf)
DESCRIPTION: Provides an example of the content for a PostgreSQL connection service file (`.pg_service.conf`). This file defines named connection configurations that can be referenced by client applications, like Django, to avoid specifying host, user, database, and port inline.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_1

LANGUAGE: text
CODE:
```
[my_service]
host=localhost
user=USER
dbname=NAME
port=5432
```

----------------------------------------

TITLE: Multiple Meta Inheritance in Django Abstract Models
DESCRIPTION: Illustrates how to inherit Meta options from multiple abstract base classes in Django by explicitly inheriting their respective Meta classes within the child model's Meta class definition.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_38

LANGUAGE: Python
CODE:
```
    from django.db import models


    class CommonInfo(models.Model):
        name = models.CharField(max_length=100)
        age = models.PositiveIntegerField()

        class Meta:
            abstract = True
            ordering = ["name"]


    class Unmanaged(models.Model):
        class Meta:
            abstract = True
            managed = False


    class Student(CommonInfo, Unmanaged):
        home_group = models.CharField(max_length=5)

        class Meta(CommonInfo.Meta, Unmanaged.Meta):
            pass
```

----------------------------------------

TITLE: QuerySet Values and Values List Methods
DESCRIPTION: Fixed QuerySet.values() and values_list() methods when used with aggregation and subquery annotations
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.7.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
QuerySet.values()
QuerySet.values_list()
```

----------------------------------------

TITLE: Basic Django Serialization
DESCRIPTION: Basic example of serializing Django model data using the serializers module.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.core import serializers

data = serializers.serialize("xml", SomeModel.objects.all())
```

----------------------------------------

TITLE: Removing Default Date and Time Format Constants in Django Forms
DESCRIPTION: Constants for default date, time, and datetime input formats in django.forms.fields will be removed. Use django.utils.formats.get_format() to get appropriate formats.
SOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
DEFAULT_DATE_INPUT_FORMATS
DEFAULT_TIME_INPUT_FORMATS
DEFAULT_DATETIME_INPUT_FORMATS

# Use instead:
django.utils.formats.get_format()
```

----------------------------------------

TITLE: Writing Geometry Objects to WKB in Python using GEOS
DESCRIPTION: Shows how to use the WKBWriter class to convert a GEOSGeometry object to Well-Known Binary (WKB) format.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_23

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.geos import Point, WKBWriter
>>> pnt = Point(1, 1)
>>> wkb_w = WKBWriter()
>>> wkb_w.write(pnt)
<read-only buffer for 0x103a898f0, size -1, offset 0 at 0x103a89930>
```

----------------------------------------

TITLE: Using Custom Hand Object in Django Model
DESCRIPTION: This snippet demonstrates how to use a custom Hand object in a Django model. It shows retrieving a Hand object from a model instance, printing a specific attribute, and saving a new Hand object to the model.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
example = MyModel.objects.get(pk=1)
print(example.hand.north)

new_hand = Hand(north, east, south, west)
example.hand = new_hand
example.save()
```

----------------------------------------

TITLE: Dynamic Lookup Selection in Django Custom Field
DESCRIPTION: Implements a custom get_lookup method for a CoordinatesField that dynamically selects a lookup based on the lookup name. This allows for flexible querying on multi-dimensional data.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
class CoordinatesField(Field):
    def get_lookup(self, lookup_name):
        if lookup_name.startswith("x"):
            try:
                dimension = int(lookup_name.removeprefix("x"))
            except ValueError:
                pass
            else:
                return get_coordinate_lookup(dimension)
        return super().get_lookup(lookup_name)
```

----------------------------------------

TITLE: Defining Nested ArrayField in Django Model
DESCRIPTION: Demonstrates how to create a nested ArrayField in a Django model to represent a chessboard. The field uses two levels of ArrayField, each with a size of 8, to store a 2D array of chess pieces.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib.postgres.fields import ArrayField
from django.db import models


class ChessBoard(models.Model):
    board = ArrayField(
        ArrayField(
            models.CharField(max_length=10, blank=True),
            size=8,
        ),
        size=8,
    )
```

----------------------------------------

TITLE: Configuring Django Feed URLs for Atom and RSS - Python
DESCRIPTION: This snippet demonstrates configuring Django URL patterns to serve RSS and Atom feeds by mapping URLs to their respective Feed class instances. Dependencies include Django's URL utilities and the feed classes previously defined (AtomSiteNewsFeed and RssSiteNewsFeed). Each path associates a URL endpoint with a feed instance, enabling users to access news feeds in both Atom and RSS formats. The input is HTTP requests to the corresponding endpoints; the output is XML responses for each feed type.

SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
from django.urls import path
from myproject.feeds import AtomSiteNewsFeed, RssSiteNewsFeed

urlpatterns = [
    # ...
    path("sitenews/rss/", RssSiteNewsFeed()),
    path("sitenews/atom/", AtomSiteNewsFeed()),
    # ...
]
```

----------------------------------------

TITLE: Defining a Class-Based View for URL Reversal in Django (Python)
DESCRIPTION: Python code snippet defining a simple Django class-based view (`ArchiveView`) derived from `django.views.View` and creating a callable instance using `as_view()`. This callable instance (`archive`) can potentially be used directly with `django.urls.reverse`, provided the same object is used in the URLConf. However, reversing namespaced views by view object is not supported.
SOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.views import View


class ArchiveView(View): ...


archive = ArchiveView.as_view()
```

----------------------------------------

TITLE: Using a Context-Aware Inclusion Tag Template in Django
DESCRIPTION: Shows the template used by the context-aware inclusion tag, which uses variables provided by the tag function.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_18

LANGUAGE: html
CODE:
```
Jump directly to <a href="{{ link }}">{{ title }}</a>.
```

----------------------------------------

TITLE: Using a Simple Block Tag in Django Templates
DESCRIPTION: Shows how to use the custom 'chart' block tag in a Django template. The content between the tags is passed to the tag function after being rendered.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_11

LANGUAGE: html
CODE:
```
{% chart %}
  digraph G {
      label = "Chart for {{ request.user }}"
      A -> {B C}
  }
{% endchart %}
```

----------------------------------------

TITLE: Adding Global Admin Actions in Django
DESCRIPTION: Examples of adding actions globally to the Django admin site using AdminSite.add_action()
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.contrib import admin

admin.site.add_action(export_selected_objects)

# With explicit naming
admin.site.add_action(export_selected_objects, "export_selected")
```

----------------------------------------

TITLE: Creating View Decorators from Middleware Classes
DESCRIPTION: Converts a middleware class to a view decorator, allowing middleware functionality to be applied on a per-view basis. Compatible with Django 1.9 style middleware with process_request(), process_exception(), and process_response() methods.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
decorator_from_middleware(middleware_class)
```

----------------------------------------

TITLE: Inspecting Generated ModelForm Fields for Composite Key Model - Pycon
DESCRIPTION: Demonstrates that a ModelForm for a model with a composite primary key will not include the pk field, confirming its exclusion. Executed in the Django shell, reporting form state and included fields. Input: instantiation of form; output: representation showing which fields are present.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_9

LANGUAGE: pycon
CODE:
```
>>> OrderLineItemForm()
<OrderLineItemForm bound=False, valid=Unknown, fields=(product;order;quantity)>
```

----------------------------------------

TITLE: Defining CSS for Multiple Output Media Types with a Single File in Django
DESCRIPTION: Shows how to specify a CSS file that applies to multiple output media types using a comma-separated list as the dictionary key.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
class Media:
    css = {
        "screen": ["pretty.css"],
        "tv,projector": ["lo_res.css"],
        "print": ["newspaper.css"],
    }
```

----------------------------------------

TITLE: Example of Invalid Field Name (Double Underscore)
DESCRIPTION: Shows a Django model definition with an invalid field name ('foo__bar') containing consecutive underscores, which conflicts with Django's query lookup syntax.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_29

LANGUAGE: python
CODE:
```
class Example(models.Model):
    foo__bar = models.IntegerField()  # 'foo__bar' has two underscores!
```

----------------------------------------

TITLE: Using intcomma Filter in Django Template
DESCRIPTION: Shows how the intcomma filter adds commas to large numbers for better readability.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_2

LANGUAGE: django
CODE:
```
{{ 4500|intcomma }} becomes 4,500.
{{ 4500.2|intcomma }} becomes 4,500.2.
{{ 45000|intcomma }} becomes 45,000.
{{ 450000|intcomma }} becomes 450,000.
{{ 4500000|intcomma }} becomes 4,500,000.
```

----------------------------------------

TITLE: Getting WKB Buffer Size for OGRGeometry in Python
DESCRIPTION: Demonstrates retrieving the size (in bytes) required for the Well-Known Binary (WKB) representation of an `OGRGeometry` object ('POINT(1 2)') by accessing the `.wkb_size` attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_13

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("POINT(1 2)").wkb_size
21
```

----------------------------------------

TITLE: Illustrating FieldError in select_related for Non-Relational Fields (Django Python)
DESCRIPTION: This Python console snippet demonstrates that calling `select_related()` with a non-relational field name (like 'title' on a Book model) raises a `FieldError` in Django 1.10 and later, enforcing that only relational fields can be used.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_6

LANGUAGE: pycon
CODE:
```
>>> Book.objects.select_related("title")
Traceback (most recent call last):
...
FieldError: Non-relational field given in select_related: 'title'
```

----------------------------------------

TITLE: Cleaning Remote Usernames in RemoteUserBackend (Python)
DESCRIPTION: A method hook in `RemoteUserBackend` used to perform any necessary cleaning on the `username` obtained from the external source (e.g., stripping LDAP DN information) before using it to get or create a user object. It should return the cleaned username.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
clean_username(username)
```

----------------------------------------

TITLE: Implementing Class-Level Deprecation Warning Ignore in Python
DESCRIPTION: Shows how to ignore deprecation warnings for an entire test case class using the ignore_warnings decorator.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/submitting-patches.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
from django.test import ignore_warnings
from django.utils.deprecation import RemovedInDjangoXXWarning

@ignore_warnings(category=RemovedInDjangoXXWarning)
class MyDeprecatedTests(unittest.TestCase): ...
```

----------------------------------------

TITLE: Using database cursors as context managers in Django 1.7+
DESCRIPTION: This snippet demonstrates how to use a database cursor as a context manager within Django 1.7+, enhancing resource management by automatically handling cursor closing. It replaces the traditional try-finally pattern for cleaner code. No external dependencies beyond Django are required.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.txt#_snippet_2

LANGUAGE: Python
CODE:
```
with connection.cursor() as c:
    c.execute(...)
```

----------------------------------------

TITLE: Using get_language_info for Localized Language Information
DESCRIPTION: Shows how to use the get_language_info() function to retrieve detailed information about a language, including its name in different forms and writing direction.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_18

LANGUAGE: Python
CODE:
```
>>> from django.utils.translation import activate, get_language_info
>>> activate("fr")
>>> li = get_language_info("de")
>>> print(li["name"], li["name_local"], li["name_translated"], li["bidi"])
German Deutsch Allemand False
```

----------------------------------------

TITLE: Applying distinct() on Subset of Ordered Fields (PostgreSQL) Python
DESCRIPTION: Applies DISTINCT ON (fields) on PostgreSQL where the distinct fields are a subset of the fields listed in order_by(). The distinct fields must still appear at the beginning of the order_by() clause in the correct order.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_13

LANGUAGE: Python
CODE:
```
>>> Entry.objects.order_by("author", "pub_date").distinct("author")
```

----------------------------------------

TITLE: Getting Current Time Zone in Templates
DESCRIPTION: Demonstrates retrieving the current time zone name using the get_current_timezone template tag.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_7

LANGUAGE: html+django
CODE:
```
{% get_current_timezone as TIME_ZONE %}
```

----------------------------------------

TITLE: Custom Storage Backend Implementation
DESCRIPTION: Example of implementing a custom file storage backend with modified open method behavior
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from django.core.files import File
from django.core.files.storage import FileSystemStorage


class Spam(File):
    """
    Spam, spam, spam, spam and spam.
    """

    def ham(self):
        return "eggs"


class SpamStorage(FileSystemStorage):
    """
    A custom file storage backend.
    """

    def open(self, name, mode="rb"):
        return Spam(open(self.path(name), mode))
```

----------------------------------------

TITLE: Defining Item Copyright Notice in Django Feed
DESCRIPTION: This snippet shows three ways to define the copyright notice for items in a Django Atom feed: a method taking an item, a method for all items, and a hard-coded attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
def item_copyright(self, obj):
    """
    Takes an item, as returned by items(), and returns the item's
    copyright notice as a normal Python string.
    """

def item_copyright(self):
    """
    Returns the copyright notice for every item in the feed.
    """

item_copyright = "Copyright (c) 2007, Sally Smith"  # Hard-coded copyright notice.
```

----------------------------------------

TITLE: Explicitly Inheriting ModelAdmin Actions (Django 2.2+) in Python
DESCRIPTION: This snippet demonstrates the updated approach in Django 2.2 and later for inheriting `ModelAdmin` actions. Standard Python inheritance rules now apply, requiring explicit concatenation of the base class's `actions` list with the subclass's list if the intention is to combine them. This code achieves the same result as the older implicit behavior.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class SubAdmin(BaseAdmin):
    actions = BaseAdmin.actions + ["b"]
```

----------------------------------------

TITLE: Running Django Test Suite with GeoDjango in Python
DESCRIPTION: Demonstrates how to run the Django test suite including GeoDjango tests using the runtests.py script. This is applicable when using spatial database backends.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.4.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
runtests.py
```

----------------------------------------

TITLE: Defining Django Models for Aggregation Examples (Python)
DESCRIPTION: Defines four Django models (`Author`, `Publisher`, `Book`, `Store`) used throughout the aggregation examples. These models represent entities in an online bookstore inventory system and include various field types (`CharField`, `IntegerField`, `DecimalField`, `FloatField`, `DateField`) and relationships (`ManyToManyField`, `ForeignKey`) to illustrate different aggregation scenarios.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db import models


class Author(models.Model):
    name = models.CharField(max_length=100)
    age = models.IntegerField()


class Publisher(models.Model):
    name = models.CharField(max_length=300)


class Book(models.Model):
    name = models.CharField(max_length=300)
    pages = models.IntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    rating = models.FloatField()
    authors = models.ManyToManyField(Author)
    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
    pubdate = models.DateField()


class Store(models.Model):
    name = models.CharField(max_length=300)
    books = models.ManyToManyField(Book)
```

----------------------------------------

TITLE: Database Router Implementation for Migration Control
DESCRIPTION: Demonstrates how to implement a database router to control migration execution using hints.
SOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class MyRouter:
    def allow_migrate(self, db, app_label, model_name=None, **hints):
        if "target_db" in hints:
            return db == hints["target_db"]
        return True
```

----------------------------------------

TITLE: Rendering a Django Tag with Variable Resolution (Python)
DESCRIPTION: This Python snippet defines the `FormatTimeNode` class for a Django template tag. In its `__init__` method, it stores the name of the variable to be formatted as a `template.Variable` instance and the format string. The `render` method resolves the actual value of the variable using `self.date_to_be_formatted.resolve(context)`, formats it using `strftime`, and returns the formatted string. It includes error handling for `template.VariableDoesNotExist`, returning an empty string if the variable cannot be found in the context.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_32

LANGUAGE: python
CODE:
```
class FormatTimeNode(template.Node):
    def __init__(self, date_to_be_formatted, format_string):
        self.date_to_be_formatted = template.Variable(date_to_be_formatted)
        self.format_string = format_string

    def render(self, context):
        try:
            actual_date = self.date_to_be_formatted.resolve(context)
            return actual_date.strftime(self.format_string)
        except template.VariableDoesNotExist:
            return ""
```

----------------------------------------

TITLE: Accessing Cleaned Data Directly in Form Clean Method Python
DESCRIPTION: This snippet shows an alternative way to access cleaned data within the form's `clean` method, particularly useful if the parent form's `clean` method might not return the `cleaned_data` dictionary. It calls `super().clean()` without assigning its return value and then accesses the cleaned data directly via `self.cleaned_data`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
def clean(self):
    super().clean()
    cc_myself = self.cleaned_data.get("cc_myself")
    ...
```

----------------------------------------

TITLE: Setting Django Colors Environment Variable (Shell)
DESCRIPTION: This shell command sets the DJANGO_COLORS environment variable. It specifies custom foreground, background, and options for different color roles like 'error' and 'notice', overriding default colors.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_55

LANGUAGE: shell
CODE:
```
export DJANGO_COLORS="error=yellow/blue,blink;notice=magenta"
```

----------------------------------------

TITLE: Django Settings Changes
DESCRIPTION: Examples of deprecated Django settings that will be removed and their replacements.
SOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
# Old settings to be removed
AUTH_PROFILE_MODULE = 'accounts.UserProfile'
IGNORABLE_404_STARTS = '/media/'
IGNORABLE_404_ENDS = '.php'
CACHE_BACKEND = 'memcached://127.0.0.1:11211/'

# New settings format
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
    }
}
IGNORABLE_404_URLS = ['/media/', '.php']
```

----------------------------------------

TITLE: Reversing Admin URLs for Specific Admin Instance in Python
DESCRIPTION: Illustrates how to find a URL in a specific admin instance by providing the instance name as a current_app hint to the reverse call.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_86

LANGUAGE: python
CODE:
```
>>> change_url = reverse("admin:polls_choice_change", args=(c.id,), current_app="custom")
```

----------------------------------------

TITLE: Implicit Parent Link OneToOneField (Django)
DESCRIPTION: Displays the structure of the OneToOneField that Django automatically creates on the child model (Restaurant) to link it back to its parent (Place) in multi-table inheritance. This field is used for the reverse relationship.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_43

LANGUAGE: python
CODE:
```
place_ptr = models.OneToOneField(
    Place,
    on_delete=models.CASCADE,
    parent_link=True,
    primary_key=True,
)
```

----------------------------------------

TITLE: Defining CSS Requirements for Multiple Media Types in Django
DESCRIPTION: Example showing how to specify different CSS files for different output media types in a widget's Media class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
class Media:
    css = {
        "screen": ["pretty.css"],
        "print": ["newspaper.css"],
    }
```

----------------------------------------

TITLE: Django Spatial Database Settings Configuration
DESCRIPTION: Example Django settings configuration for GeoDjango tests using PostGIS backend with multiple databases.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": "geodjango",
        "USER": "geodjango",
    },
    "other": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": "other",
        "USER": "geodjango",
    },
}

SECRET_KEY = "django_tests_secret_key"
```

----------------------------------------

TITLE: Setting Django Async Unsafe Environment Variable
DESCRIPTION: Code to set the DJANGO_ALLOW_ASYNC_UNSAFE environment variable in Python to allow sync code execution in async contexts. This should be used with caution, especially in production environments.
SOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
import os

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
```

----------------------------------------

TITLE: Querying Django HStoreField: has_any_keys Lookup (Python)
DESCRIPTION: Demonstrates retrieving objects with any matching keys from a list using 'has_any_keys' (SQL ?| operator) on an HStoreField. Dependencies: Django and PostgreSQL with hstore. Input is a list of keys to match; output lists objects whose hstore dict has at least one of the provided keys.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_12

LANGUAGE: pycon
CODE:
```
>>> Dog.objects.create(name="Rufus", data={"breed": "labrador"})\n>>> Dog.objects.create(name="Meg", data={"owner": "Bob"})\n>>> Dog.objects.create(name="Fred", data={})\n\n>>> Dog.objects.filter(data__has_any_keys=["owner", "breed"])\n<QuerySet [<Dog: Rufus>, <Dog: Meg>]>
```

----------------------------------------

TITLE: Using Prefetch Related with Multiple Databases in Django
DESCRIPTION: Demonstrates how Prefetch respects database choices when using multiple databases. Shows various combinations of inner and outer queries using different databases.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_53

LANGUAGE: python
CODE:
```
>>> # Both inner and outer queries will use the 'replica' database
>>> Restaurant.objects.prefetch_related("pizzas__toppings").using("replica")
>>> Restaurant.objects.prefetch_related(
...     Prefetch("pizzas__toppings"),
... ).using("replica")
>>>
>>> # Inner will use the 'replica' database; outer will use 'default' database
>>> Restaurant.objects.prefetch_related(
...     Prefetch("pizzas__toppings", queryset=Toppings.objects.using("replica")),
... )
>>>
>>> # Inner will use 'replica' database; outer will use 'cold-storage' database
>>> Restaurant.objects.prefetch_related(
...     Prefetch("pizzas__toppings", queryset=Toppings.objects.using("replica")),
... ).using("cold-storage")
```

----------------------------------------

TITLE: Customizing User Model Form Validation - Django - Python
DESCRIPTION: This snippet demonstrates how to subclass the built-in Django UserChangeForm to restrict the 'first_name' field to a 30-character maximum length, overriding the default value introduced in Django 3.1 migrations. It is intended for projects with a custom user model based on AbstractUser who wish to keep a legacy constraint. The required dependencies are Django's forms and authentication system; the form field 'first_name' is explicitly set with max_length=30 and can be left blank (required=False). Input consists of user update data, and output is a Django form instance enforcing the field length restriction.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django import forms
from django.contrib.auth.forms import UserChangeForm


class MyUserChangeForm(UserChangeForm):
    first_name = forms.CharField(max_length=30, required=False)
```

----------------------------------------

TITLE: Configuring Windows Filesystem Cache in Django
DESCRIPTION: Setting up a file-based cache backend in Django settings for Windows environments. This configuration includes the drive letter at the beginning of the path.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": "c:/foo/bar",
    }
}
```

----------------------------------------

TITLE: Model Field Choices with Enums and Nested Groups in Django - Python (Legacy Style)
DESCRIPTION: Shows the classical method of specifying choices for Django model fields in Python, using either enums or lists of 2-tuples (possibly grouped). Demonstrates use of `TextChoices` for enumerations and nested groupings for selection fields (e.g., sport categories). Used in class `Winner`. Inputs: Enums or lists of value-label tuples; outputs: drop-down or radio widgets for forms, and field validation in models.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
from django.db import models\n\nMedal = models.TextChoices(\"Medal\", \"GOLD SILVER BRONZE\")\n\nSPORT_CHOICES = [\n    (\"Martial Arts\", [(\"judo\", \"Judo\"), (\"karate\", \"Karate\")]),\n    (\"Racket\", [(\"badminton\", \"Badminton\"), (\"tennis\", \"Tennis\")]),\n    (\"unknown\", \"Unknown\"),\n]\n\n\nclass Winner(models.Model):\n    name = models.CharField(...)\n    medal = models.CharField(..., choices=Medal.choices)\n    sport = models.CharField(..., choices=SPORT_CHOICES)
```

----------------------------------------

TITLE: Creating, Modifying, and Deleting Redirects using Django's Python API
DESCRIPTION: This snippet demonstrates how to use Django's database API to create, change, and delete redirects programmatically. It shows interactions with the Redirect model, including creating a new redirect, modifying an existing one, and deleting a redirect.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/redirects.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.conf import settings
>>> from django.contrib.redirects.models import Redirect
>>> # Add a new redirect.
>>> redirect = Redirect.objects.create(
...     site_id=1,
...     old_path="/contact-us/",
...     new_path="/contact/",
... )
>>> # Change a redirect.
>>> redirect.new_path = "/contact-details/"
>>> redirect.save()
>>> redirect
<Redirect: /contact-us/ ---> /contact-details/>
>>> # Delete a redirect.
>>> Redirect.objects.filter(site_id=1, old_path="/contact-us/").delete()
(1, {'redirects.Redirect': 1})
```

----------------------------------------

TITLE: Rendering Django Form as HTML Table
DESCRIPTION: Shows the output of the as_table() method, which renders form fields as rows in an HTML table.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_25

LANGUAGE: HTML
CODE:
```
<tr><th><label for="id_subject">Subject:</label></th><td><input id="id_subject" type="text" name="subject" maxlength="100" required></td></tr>
<tr><th><label for="id_message">Message:</label></th><td><input type="text" name="message" id="id_message" required></td></tr>
<tr><th><label for="id_sender">Sender:</label></th><td><input type="email" name="sender" id="id_sender" required></td></tr>
<tr><th><label for="id_cc_myself">Cc myself:</label></th><td><input type="checkbox" name="cc_myself" id="id_cc_myself"></td></tr>
```

----------------------------------------

TITLE: Defining URL Patterns with Default View Arguments in Django
DESCRIPTION: This snippet demonstrates how to define URL patterns in Django's URLconf, including a pattern with a default argument for the view function. It shows both the URLconf setup and the corresponding view function definition.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
# URLconf
from django.urls import path

from . import views

urlpatterns = [
    path("blog/", views.page),
    path("blog/page<int:num>/", views.page),
]


# View (in blog/views.py)
def page(request, num=1):
    # Output the appropriate page of blog entries, according to num.
    ...
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'fully_gt' Lookup in Django Python
DESCRIPTION: Uses the `fully_gt` lookup (`__fully_gt`, SQL operator `>>`) on the `ages` field. This query finds `Event` objects where the entire `ages` range is strictly greater than (comes entirely after) the specified `NumericRange(11, 15)`. Requires the `Event` model and `NumericRange`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_24

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__fully_gt=NumericRange(11, 15))
<QuerySet [<Event: Pub trip>]>
```

----------------------------------------

TITLE: Rendering Multiple Django Formsets with Unique Prefixes
DESCRIPTION: Creates and renders two different formsets (ArticleFormSet and BookFormSet) with distinct prefixes to avoid field name conflicts. The prefixes 'articles' and 'books' ensure unique HTML name/id attributes for each formset's fields.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
article_formset = ArticleFormSet(prefix="articles")
book_formset = BookFormSet(prefix="books")
return render(
    request,
    "manage_articles.html",
    {
        "article_formset": article_formset,
        "book_formset": book_formset,
    },
)
```

----------------------------------------

TITLE: Retrieving User Messages with Django Messages Framework (Python)
DESCRIPTION: This snippet illustrates the current method for retrieving user messages using `messages.get_messages(request)` from the `django.contrib.messages` framework. This function retrieves messages associated with the current request, typically stored in the session or cookies, depending on the storage backend.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
from django.contrib import messages

for message in messages.get_messages(request):
    ...
```

----------------------------------------

TITLE: Creating Custom Collation in Django Migration
DESCRIPTION: Shows how to create a custom collation for German phone book ordering in a PostgreSQL database using a Django migration file. This collation can be used with the db_collation parameter on CharField, TextField, and their subclasses.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/operations.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib.postgres.operations import CreateCollation


class Migration(migrations.Migration):
    ...

    operations = [
        CreateCollation(
            "case_insensitive",
            provider="icu",
            locale="und-u-ks-level2",
            deterministic=False,
        ),
        ...,
    ]
```

----------------------------------------

TITLE: Defining Admin Fields Layout in Django 1.0 (ModelOneAdmin - Python)
DESCRIPTION: This snippet demonstrates the simplified `fields` syntax in Django 1.0 within a `ModelAdmin` class (in `admin.py`). For a simple layout without grouping, `fields` is just a tuple listing the desired field names in order.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
class ModelOneAdmin(admin.ModelAdmin):
    fields = ("foo", "bar")
```

----------------------------------------

TITLE: Linking to Django Ticket 20078 using reStructuredText
DESCRIPTION: Uses the reStructuredText `:ticket:` role to create a hyperlink to issue 20078 in the Django project's ticket tracker. The ticket number '20078' itself serves as the link text. This refers to the bug fix preventing filtering on password hashes in the user admin.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.1.txt#2025-04-23_snippet_3

LANGUAGE: rst
CODE:
```
:ticket:`20078`
```

----------------------------------------

TITLE: Django Blog Entry Creation Example
DESCRIPTION: Interactive example showing creation of blog entries and different filtering approaches with their results.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
>>> from datetime import date
>>> beatles = Blog.objects.create(name="Beatles Blog")
>>> pop = Blog.objects.create(name="Pop Music Blog")
>>> Entry.objects.create(
...     blog=beatles,
...     headline="New Lennon Biography",
...     pub_date=date(2008, 6, 1),
... )
>>> Entry.objects.create(
...     blog=beatles,
...     headline="New Lennon Biography in Paperback",
...     pub_date=date(2009, 6, 1),
... )
>>> Entry.objects.create(
...     blog=pop,
...     headline="Best Albums of 2008",
...     pub_date=date(2008, 12, 15),
... )
>>> Entry.objects.create(
...     blog=pop,
...     headline="Lennon Would Have Loved Hip Hop",
...     pub_date=date(2020, 4, 1),
... )
```

----------------------------------------

TITLE: Validating Unbound Django Forms and Checking Errors in Python
DESCRIPTION: Demonstrates that calling is_valid() on an unbound Django form always returns False and the 'errors' attribute is an empty dictionary. No external dependencies beyond Django; inputs are none, and outputs are a Boolean and an empty error dictionary.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> f = ContactForm()
>>> f.is_valid()
False
>>> f.errors
{}
```

----------------------------------------

TITLE: Using Quoted Table Names for Oracle in Django Model Meta (Python)
DESCRIPTION: Demonstrates using a quoted string for the `db_table` option in Django Model Meta. This is necessary for Oracle databases to prevent Django from shortening the name or converting it to uppercase, ensuring the specified name (e.g., lowercase with special characters) is preserved.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
db_table = '"name_left_in_lowercase"'
```

----------------------------------------

TITLE: Transforming GDALRaster SRS using the transform Method in Python
DESCRIPTION: Shows how to reproject a GDALRaster to a different spatial reference system (SRS) using the `transform` method. It initializes a raster with SRID 3086 and then transforms it to SRID 4326 (WGS84), demonstrating the resulting change in origin coordinates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_46

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.gdal import SpatialReference # Assuming necessary import
>>> rst = GDALRaster(
...     {
...         "width": 6,
...         "height": 6,
...         "srid": 3086,
...         "origin": [500000, 400000],
...         "scale": [100, -100],
...         "bands": [{"data": range(36), "nodata_value": 99}],
...     }
... )
>>> target_srs = SpatialReference(4326)
>>> target = rst.transform(target_srs)
>>> target.origin
[-82.98492744885776, 27.601924753080144]
```

----------------------------------------

TITLE: Combining SearchQuery Objects Logically in Django
DESCRIPTION: Demonstrates how to combine SearchQuery objects using logical operators for more complex queries.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> from django.contrib.postgres.search import SearchQuery
>>> SearchQuery("meat") & SearchQuery("cheese")  # AND
>>> SearchQuery("meat") | SearchQuery("cheese")  # OR
>>> ~SearchQuery("meat")  # NOT
```

----------------------------------------

TITLE: Using ordinal Filter in Django Template
DESCRIPTION: Shows how the ordinal filter converts integers to their ordinal representation as a string.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_6

LANGUAGE: django
CODE:
```
{{ 1|ordinal }} becomes 1st.
{{ 2|ordinal }} becomes 2nd.
{{ 3|ordinal }} becomes 3rd.
```

----------------------------------------

TITLE: Serializing Database State in Django
DESCRIPTION: The serialize_db_to_string function serializes the database state to an in-memory JSON string. This is useful for restoring database state between tests when transactions are not supported or serialized_rollback is enabled.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
serialize_db_to_string()
```

----------------------------------------

TITLE: Demonstrating WSGI Header Normalization in Python
DESCRIPTION: This snippet illustrates how HTTP headers are normalized when placed into the WSGI environ, converting to uppercase and replacing dashes with underscores.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.18.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
X-Auth-User -> HTTP_X_AUTH_USER
```

----------------------------------------

TITLE: Querying Django HStoreField: has_key Lookup (Python)
DESCRIPTION: Illustrates the use of the 'has_key' lookup on HStoreField, which filters all objects where a specific key exists in the hstore dict (SQL ? operator). Requires Django model with HStoreField and PostgreSQL backend. Input parameter is the name of the key to check; output is a QuerySet listing matching model instances.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_11

LANGUAGE: pycon
CODE:
```
>>> Dog.objects.create(name="Rufus", data={"breed": "labrador"})\n>>> Dog.objects.create(name="Meg", data={"breed": "collie", "owner": "Bob"})\n\n>>> Dog.objects.filter(data__has_key="owner")\n<QuerySet [<Dog: Meg>]>
```

----------------------------------------

TITLE: Potential Vulnerability in django.utils.html.strip_tags (Python)
DESCRIPTION: The strip_tags() function was vulnerable to a denial-of-service attack with certain inputs containing nested incomplete HTML entities. This affected the striptags template filter. The function has been modified to avoid recursive calls to HTMLParser.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.23.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.utils.html.strip_tags
```

----------------------------------------

TITLE: Defining PostgreSQL Password File (.pgpass) Content
DESCRIPTION: Illustrates the format for a PostgreSQL password file (`.pgpass`). This file allows storing passwords for connections based on host, port, database, user, and password, enabling connections without interactive password prompts, often used alongside service files.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_2

LANGUAGE: text
CODE:
```
localhost:5432:NAME:USER:PASSWORD
```

----------------------------------------

TITLE: Django Internal IPs List
DESCRIPTION: Lists `INTERNAL_IPS`, a list of IP addresses as strings that are considered internal. They enable debug context variables, admin bookmarklets, and internal email marking.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_50

LANGUAGE: plaintext
CODE:
```
INTERNAL_IPS
----------------

Default: `[]` (Empty list)

A list of IP addresses, as strings, that:

* Allow the :func:`~django.template.context_processors.debug` context processor
to add some variables to the template context.
* Can use the :ref:`admindocs bookmarklets <admindocs-bookmarklets>` even if
not logged in as a staff user.
* Are marked as "internal" (as opposed to "EXTERNAL") in
:class:`~django.utils.log.AdminEmailHandler` emails.
```

----------------------------------------

TITLE: Optimizing QuerySet Evaluation with Caching
DESCRIPTION: Demonstrates the optimal approach for evaluating a QuerySet once and reusing its results, minimizing database queries through result cache reuse.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
members = group.members.all()

if display_group_members:
    if members:
        if current_user in members:
            print("You and", len(members) - 1, "other users are members of this group.")
        else:
            print("There are", len(members), "members in this group.")

        for member in members:
            print(member.username)
    else:
        print("There are no members in this group.")
```

----------------------------------------

TITLE: Creating and Adding M2M Related Object in One Step (pycon)
DESCRIPTION: Uses the `create()` method on the `ManyToManyField` manager (`a2.publications`) to create a new `Publication` instance and immediately associate it with the `Article` (`a2`) in a single operation.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_9

LANGUAGE: pycon
CODE:
```
>>> new_publication = a2.publications.create(title="Highlights for Children")
```

----------------------------------------

TITLE: Creating a HTML Form Styled as a Link for POST Logout in Django
DESCRIPTION: HTML code snippet demonstrating how to create a form that submits a POST request for logout but is styled to appear as a link. Includes CSRF token and a button styled to look like a link.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.txt#2025-04-23_snippet_2

LANGUAGE: html
CODE:
```
<form id="logout-form" method="post" action="{% url 'admin:logout' %}">
  {% csrf_token %}
  <button type="submit">{% translate "Log out" %}</button>
</form>
```

----------------------------------------

TITLE: Restoring Optional `obj` Argument in InlineModelAdmin.has_add_permission() (Python)
DESCRIPTION: Restores backwards compatibility by making the `obj` argument of `InlineModelAdmin.has_add_permission()` optional again. This bugfix addresses issue #30097, ensuring third-party code calling this method without the `obj` argument continues to work as expected.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.1.6.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
InlineModelAdmin.has_add_permission()
```

----------------------------------------

TITLE: Proper Variable Interpolation in Django Templates
DESCRIPTION: Shows the correct spacing for variable interpolation in Django templates with one space between braces and variable content. This demonstrates proper template variable syntax.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_5

LANGUAGE: html+django
CODE:
```
{{ user }}
```

----------------------------------------

TITLE: Implementing Deprecated Function with Warning in Python
DESCRIPTION: Shows how to implement a deprecated function that raises a warning while maintaining backwards compatibility.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/submitting-patches.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
import warnings
from django.utils.deprecation import RemovedInDjangoXXWarning

# RemovedInDjangoXXWarning.
def old_private_helper():
    # Helper function that is only used in foo().
    pass

def foo():
    warnings.warn(
        "foo() is deprecated.",
        category=RemovedInDjangoXXWarning,
        stacklevel=2,
    )
    old_private_helper()
    ...
```

----------------------------------------

TITLE: Querying Spatial Below Overlap in PostGIS
DESCRIPTION: Example of using the 'overlaps_below' lookup to find geometries whose bounding box overlaps or is below a given geometry's bounding box in PostGIS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__overlaps_below=geom)
```

----------------------------------------

TITLE: Defining DayArchiveView Class in Django
DESCRIPTION: Declaration of the DayArchiveView class, which is a generic view for displaying archives by day. It inherits from multiple mixins to provide date-based and list functionality.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
class DayArchiveView():
```

----------------------------------------

TITLE: Formset Ordering Example
DESCRIPTION: Demonstrates how to create a formset with ordering capability
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
from django.forms import formset_factory
from myapp.forms import ArticleForm
ArticleFormSet = formset_factory(ArticleForm, can_order=True)
formset = ArticleFormSet(
    initial=[
        {"title": "Article #1", "pub_date": datetime.date(2008, 5, 10)},
        {"title": "Article #2", "pub_date": datetime.date(2008, 5, 11)},
    ]
)
```

----------------------------------------

TITLE: Querying Spatial Data with GDAL DataSource in Python
DESCRIPTION: Demonstrates using Python to obtain the full path to a shapefile via pathlib, then opening the shapefile as a GDAL DataSource with GeoDjango. This uses the world app to show how to resolve package-relative data paths robustly and then leverages DataSource (from django.contrib.gis.gdal). Required dependencies are pathlib, an importable world Python package, and GeoDjango installed. Outputs include the DataSource instance representation pointing to the shapefile used for further spatial operations. No output is produced unless print() is used.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> from pathlib import Path
>>> import world
>>> world_shp = Path(world.__file__).resolve().parent / "data" / "TM_WORLD_BORDERS-0.3.shp"
```

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.gdal import DataSource
>>> ds = DataSource(world_shp)
>>> print(ds)
/ ... /geodjango/world/data/TM_WORLD_BORDERS-0.3.shp (ESRI Shapefile)
```

----------------------------------------

TITLE: Configuring Oracle Database Settings
DESCRIPTION: These settings are specific to Oracle databases.  `DATAFILE_TMP` sets the initial size for `DATAFILE_TMP`. `DATAFILE_EXTSIZE` defines the amount by which the DATAFILE is extended. `DATAFILE_TMP_EXTSIZE` determines how much `DATAFILE_TMP` extends.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_10

LANGUAGE: text
CODE:
```
Default: ``'50M'``

This is an Oracle-specific setting.

The initial size of the DATAFILE_TMP.
```

LANGUAGE: text
CODE:
```
Default: ``'25M'``

This is an Oracle-specific setting.

The amount by which the DATAFILE is extended when more space is required.
```

LANGUAGE: text
CODE:
```
Default: ``'25M'``

This is an Oracle-specific setting.

The amount by which the DATAFILE_TMP is extended when more space is required.
```

----------------------------------------

TITLE: Setting Up Test Databases in Django
DESCRIPTION: The setup_databases function creates test databases. It takes arguments for parallelism, keepdb flag, and serialized aliases. It returns a configuration for database changes.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
setup_databases(verbosity=1, interactive=True, *, parallel=0, keepdb=False, aliases=None, serialized_aliases=None)
```

----------------------------------------

TITLE: Starting Django Shell with Standard Python - Shell
DESCRIPTION: Forces the Django interactive shell to use the standard Python interpreter, even if richer shells like IPython or bpython are installed. This is useful for testing in a basic environment.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_34

LANGUAGE: shell
CODE:
```
django-admin shell -i python
```

----------------------------------------

TITLE: Database-agnostic Field Implementation in Django
DESCRIPTION: Example of a MyDateField that handles database differences by checking the connection vendor and returning the appropriate column type for each supported database.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
class MyDateField(models.Field):
    def db_type(self, connection):
        if connection.vendor == "mysql":
            return "datetime"
        else:
            return "timestamp"
```

----------------------------------------

TITLE: Installing bcrypt Support for Django (Bash)
DESCRIPTION: Command to install the `bcrypt` library, necessary for using the bcrypt password hashing algorithm with Django. Using `django[bcrypt]` ensures compatibility with Django's specified version.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
python -m pip install django[bcrypt]
```

----------------------------------------

TITLE: Using Window Function with Avg in Django QuerySet
DESCRIPTION: Example of using Window function in Django to calculate average ratings partitioned by studio and genre with a sliding frame range of 12 years before and after.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
Movie.objects.annotate(
    avg_rating=Window(
        expression=Avg("rating"),
        partition_by=[F("studio"), F("genre")],
        order_by="released__year",
        frame=ValueRange(start=-12, end=12),
    ),
)
```

----------------------------------------

TITLE: Testing a Class-Based View in Django
DESCRIPTION: This snippet demonstrates how to test a class-based view in Django outside of the request/response cycle. It shows how to instantiate the view, set it up with a request, and test its get_context_data method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.test import RequestFactory, TestCase
from .views import HomeView


class HomePageTest(TestCase):
    def test_environment_set_in_context(self):
        request = RequestFactory().get("/")
        view = HomeView()
        view.setup(request)

        context = view.get_context_data()
        self.assertIn("environment", context)
```

----------------------------------------

TITLE: Using urlize Filter in Django Templates
DESCRIPTION: The urlize and urlizetrunc template filters in Django were vulnerable to a denial-of-service attack with large inputs containing specific character sequences. This security issue has been addressed in version 4.2.16.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.16.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
{{ text|urlize }}
```

----------------------------------------

TITLE: Removing M2M Relationship via Reverse Manager (pycon)
DESCRIPTION: Demonstrates removing a specific many-to-many relationship using the `remove()` method on the reverse relationship manager (`p2.article_set.remove(a5)`). It verifies the removal by checking the related sets from both sides.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_23

LANGUAGE: pycon
CODE:
```
>>> p2.article_set.remove(a5)
>>> p2.article_set.all()
<QuerySet []>
>>> a5.publications.all()
<QuerySet []>
```

----------------------------------------

TITLE: CSS Styling to Make a Form Button Appear as a Link
DESCRIPTION: CSS styling that makes a form and its submit button appear as an inline link. It removes the button's default appearance and adds text decoration to mimic a link's behavior.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.txt#2025-04-23_snippet_3

LANGUAGE: css
CODE:
```
#logout-form {
  display: inline;
}
#logout-form button {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  text-decoration: underline;
}
```

----------------------------------------

TITLE: Database Connection Thread Safety Example
DESCRIPTION: Example demonstrating thread safety restrictions when using database connections with sync_to_async
SOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
# DJANGO_SETTINGS_MODULE=settings.py python -m asyncio
>>> import asyncio
>>> from asgiref.sync import sync_to_async
>>> from django.db import connection
>>> # In an async context so you cannot use the database directly:
>>> connection.cursor()
django.core.exceptions.SynchronousOnlyOperation: You cannot call this from
an async context - use a thread or sync_to_async.
>>> # Nor can you pass resolved connection attributes across threads:
>>> await sync_to_async(connection.cursor)()
django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread
can only be used in that same thread. The object with alias 'default' was
created in thread id 4371465600 and this is thread id 6131478528.
```

----------------------------------------

TITLE: Handling Lists with querystring Tag in Django Templates
DESCRIPTION: This snippet shows how querystring tag handles list values. When a list is passed, it preserves the list structure in the query string, creating multiple parameters with the same key.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_29

LANGUAGE: html+django
CODE:
```
{% querystring color=my_list %}
```

----------------------------------------

TITLE: Demonstrating Old vs New unordered_list Template Filter Syntax in Python
DESCRIPTION: Shows the deprecated verbose syntax for the unordered_list template filter compared to the new more concise syntax. The old syntax uses nested lists with empty lists as placeholders, while the new syntax is more straightforward.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
["States", [["Kansas", [["Lawrence", []], ["Topeka", []]]], ["Illinois", []]]]
```

LANGUAGE: Python
CODE:
```
["States", ["Kansas", ["Lawrence", "Topeka"], "Illinois"]]
```

----------------------------------------

TITLE: Using Static Template Tag with Context Variables
DESCRIPTION: Shows how to use the static template tag with a context variable instead of a hardcoded string. This allows for dynamic selection of static files based on variables passed to the template.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_106

LANGUAGE: html+django
CODE:
```
{% load static %}
<link rel="stylesheet" href="{% static user_stylesheet %}" media="screen">
```

----------------------------------------

TITLE: Defining Simple Django Model Python
DESCRIPTION: A basic Django Model definition for a Book, including title and author fields. This model implicitly gets the default `objects` manager, which returns all instances by default. Requires `django.db.models`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_2

LANGUAGE: python
CODE:
```
from django.db import models


class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.CharField(max_length=50)
```

----------------------------------------

TITLE: Using cache_control Decorator with Private Cache
DESCRIPTION: Shows how to use the cache_control decorator to mark a response as private, preventing it from being stored in public caches. Useful for views that return user-specific or sensitive information.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_44

LANGUAGE: python
CODE:
```
from django.views.decorators.cache import cache_control


@cache_control(private=True)
def my_view(request): ...
```

----------------------------------------

TITLE: Implementing Case-Insensitive Transform in Django ORM
DESCRIPTION: Defines an UpperCase transformer that uses the SQL UPPER() function to perform case-insensitive comparisons. It sets bilateral=True to apply the transformation to both left and right-hand sides of the comparison.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.db.models import Transform


class UpperCase(Transform):
    lookup_name = "upper"
    function = "UPPER"
    bilateral = True
```

----------------------------------------

TITLE: Configuring Custom Format Module Path in Django Settings
DESCRIPTION: Example of setting the FORMAT_MODULE_PATH in Django settings to specify where custom format files will be located. This allows overriding the default locale formats provided by Django.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/formatting.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
FORMAT_MODULE_PATH = [
    "mysite.formats",
    "some_app.formats",
]
```

----------------------------------------

TITLE: Using PostgreSQL Unaccented Case-insensitive Search in Django
DESCRIPTION: Shows how to use PostgreSQL's unaccented case-insensitive comparison to search for names regardless of accents. This is useful for handling non-English names in search queries.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/search.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> Author.objects.filter(name__unaccent__icontains="Helen")
[<Author: Helen Mirren>, <Author: Helena Bonham Carter>, <Author: Hélène Joy>]
```

----------------------------------------

TITLE: Proper Block Tag Naming in Django Templates
DESCRIPTION: Demonstrates proper naming of blocks in Django templates where the block name is repeated in the endblock tag when they are not on the same line. This improves code readability.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_11

LANGUAGE: html+django
CODE:
```
{% block header %}

  Code goes here

{% endblock header %}
```

----------------------------------------

TITLE: Overriding Cache Key Prefix for Custom Cached DB Session Store in Python
DESCRIPTION: This snippet shows how to override the cache key prefix when migrating from Django's built-in cached_db session store to a custom one. This prevents namespace clashes in the cache.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
class SessionStore(CachedDBStore):
    cache_key_prefix = "mysessions.custom_cached_db_backend"

    # ...
```

----------------------------------------

TITLE: Formatting Django Command Output with Black (Shell)
DESCRIPTION: This shell command runs the django-admin inspectdb command and pipes its standard output to the black command. This is useful for automatically formatting command output that generates code, such as from inspectdb.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_58

LANGUAGE: shell
CODE:
```
django-admin inspectdb | black -
```

----------------------------------------

TITLE: Connecting Signal Handler to Settings Change in Django
DESCRIPTION: Example showing how to register a callback function to be notified of Django settings changes using AppConfig.
SOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.apps import AppConfig
from django.core.signals import setting_changed


def my_callback(sender, **kwargs):
    print("Setting changed!")


class MyAppConfig(AppConfig):
    ...

    def ready(self):
        setting_changed.connect(my_callback)
```

----------------------------------------

TITLE: Customizing Django Admin Theme Colors
DESCRIPTION: Example of adding custom theme colors to Django admin by overriding the base.html template and defining CSS variables for primary, secondary, and link colors.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_76

LANGUAGE: html+django
CODE:
```
{% extends 'admin/base.html' %}

{% block extrastyle %}{{ block.super }}
<style>
html[data-theme="light"], :root {
  --primary: #9774d5;
  --secondary: #785cab;
  --link-fg: #7c449b;
  --link-selected-fg: #8f5bb2;
}
</style>
{% endblock %}
```

----------------------------------------

TITLE: Alternative Syntax for regroup Tag in Django Templates
DESCRIPTION: This snippet shows an alternative syntax for the regroup tag, unpacking the namedtuple directly in the for loop. This approach provides a cleaner way to access the group object fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_36

LANGUAGE: html+django
CODE:
```
{% regroup cities by country as country_list %}

<ul>
{% for country, local_cities in country_list %}
    <li>{{ country }}
    <ul>
        {% for city in local_cities %}
          <li>{{ city.name }}: {{ city.population }}</li>
        {% endfor %}
    </ul>
    </li>
{% endfor %}
</ul>
```

----------------------------------------

TITLE: Implementing get_internal_type for Custom Django Field
DESCRIPTION: Example of implementing get_internal_type method for a custom field, allowing it to emulate built-in field types for database operations.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_17

LANGUAGE: Python
CODE:
```
class HandField(models.Field):
    # ...

    def get_internal_type(self):
        return "CharField"
```

----------------------------------------

TITLE: Querying Spatial Left Relationship in PostGIS
DESCRIPTION: Example of using the 'left' lookup to find geometries whose bounding box is strictly to the left of a given geometry's bounding box in PostGIS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__left=geom)
```

----------------------------------------

TITLE: Accessing LineString Coordinates as a Tuple of Tuples in Python
DESCRIPTION: Demonstrates accessing the coordinates of a LineString `OGRGeometry` ('LINESTRING (1 2,3 4)') as a tuple of coordinate tuples using the `.tuple` attribute. Each inner tuple represents a point (x, y) along the line.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_16

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("LINESTRING (1 2,3 4)").tuple
((1.0, 2.0), (3.0, 4.0))
```

----------------------------------------

TITLE: Defining Topping and Pizza Models for Relationship Example in Django
DESCRIPTION: Example models for demonstrating relationship choices between Pizza and Topping in Django, used to showcase ModelChoiceField customization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
from django.db import models


class Topping(models.Model):
    name = models.CharField(max_length=100)
    price = models.DecimalField(decimal_places=2, max_digits=6)

    def __str__(self):
        return self.name


class Pizza(models.Model):
    topping = models.ForeignKey(Topping, on_delete=models.CASCADE)
```

----------------------------------------

TITLE: Implementing Efficient AbsoluteValueLessThan Lookup in Django
DESCRIPTION: Creates an efficient AbsoluteValueLessThan lookup that generates optimized SQL for comparing absolute values. It implements the as_sql method to produce a range-based SQL query and registers it with the AbsoluteValue transformer.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.db.models import Lookup


class AbsoluteValueLessThan(Lookup):
    lookup_name = "lt"

    def as_sql(self, compiler, connection):
        lhs, lhs_params = compiler.compile(self.lhs.lhs)
        rhs, rhs_params = self.process_rhs(compiler, connection)
        params = lhs_params + rhs_params + lhs_params + rhs_params
        return "%s < %s AND %s > -%s" % (lhs, rhs, lhs, rhs), params


AbsoluteValue.register_lookup(AbsoluteValueLessThan)
```

----------------------------------------

TITLE: Re-rendering Django TemplateResponse Content Example
DESCRIPTION: This example demonstrates how TemplateResponse objects handle rendering and content assignment. It shows that once rendered, the content doesn't change on re-rendering, but can be explicitly updated by assigning to the content property.
SOURCE: https://github.com/django/django/blob/main/docs/ref/template-response.txt#2025-04-23_snippet_0

LANGUAGE: pycon
CODE:
```
# Set up a rendered TemplateResponse
>>> from django.template.response import TemplateResponse
>>> t = TemplateResponse(request, "original.html", {})
>>> t.render()
>>> print(t.content)
Original content

# Re-rendering doesn't change content
>>> t.template_name = "new.html"
>>> t.render()
>>> print(t.content)
Original content

# Assigning content does change, no render() call required
>>> t.content = t.rendered_content
>>> print(t.content)
New content
```

----------------------------------------

TITLE: Sending Site-Specific Email Using Django Templates
DESCRIPTION: This code snippet shows how to send a site-specific email using Django's template system for more flexibility in email content.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.core.mail import send_mail
from django.template import loader


def register_for_newsletter(request):
    # Check form values, etc., and subscribe the user.
    # ...

    subject = loader.get_template("alerts/subject.txt").render({})
    message = loader.get_template("alerts/message.txt").render({})
    send_mail(subject, message, "editor@ljworld.com", [user.email])

    # ...
```

----------------------------------------

TITLE: Retrieving Order of Related Objects in Django (Pycon)
DESCRIPTION: Demonstrates using the `get_RELATED_order()` method (e.g., `get_answer_order()`) on a parent object (`question`) to retrieve the current order of related objects (`Answer`) as a list of their primary keys. This method is automatically added when `order_with_respect_to` is used.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_6

LANGUAGE: pycon
CODE:
```
>>> question = Question.objects.get(id=1)
>>> question.get_answer_order()
[1, 2, 3]
```

----------------------------------------

TITLE: Creating Compressed GTiff Raster in Python using Django and GDAL
DESCRIPTION: This snippet demonstrates how to create a compressed GeoTIFF raster using Django's GDALRaster class. It sets various options including compression, tiling, and block size.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_49

LANGUAGE: python
CODE:
```
GDALRaster(
    {
        "driver": "GTiff",
        "name": "/path/to/new/file.tif",
        "srid": 4326,
        "width": 255,
        "height": 255,
        "nr_of_bands": 1,
        "papsz_options": {
            "compress": "packbits",
            "tiled": "yes",
            "blockxsize": 23,
            "blockysize": 23,
        },
    }
)
```

----------------------------------------

TITLE: Accessing Primary Key Fields via Django _meta.pk_fields (Python Interactive)
DESCRIPTION: Demonstrates the retrieval of fields that make up the primary key of a Django model via the _meta.pk_fields attribute. Shows results for a model with a composite primary key (TenantUser) and a standard single-field primary key (User). Prerequisite: Django >= 5.2 and appropriate model definitions. Returns a list of Field instances corresponding to the primary key component fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/meta.txt#2025-04-23_snippet_3

LANGUAGE: pycon
CODE:
```
>>> TenantUser._meta.pk_fields
[
    <django.db.models.fields.IntegerField: tenant_id>,
    <django.db.models.fields.IntegerField: id>
]
```

LANGUAGE: pycon
CODE:
```
>>> User._meta.pk_fields
[<django.db.models.fields.AutoField: id>]
```

----------------------------------------

TITLE: Explicit Primary Key Assignment in Django
DESCRIPTION: Shows how to explicitly set an auto-incrementing primary key value before saving an object.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
>>> b3 = Blog(id=3, name="Cheddar Talk", tagline="Thoughts on cheese.")
>>> b3.id  # Returns 3.
>>> b3.save()
>>> b3.id  # Returns 3.
```

----------------------------------------

TITLE: Adding Translator Comments in Django Views
DESCRIPTION: Shows how to add comments for translators using the 'Translators:' prefix. These comments appear in the .po file and provide context to translators.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
def my_view(request):
    # Translators: This message appears on the home page only
    output = gettext("Welcome to my site.")
```

----------------------------------------

TITLE: Incorrect Spacing in Django Template Tags
DESCRIPTION: Shows incorrect spacing in Django template tags with no spaces between braces and tag content. This is presented as an improper format to avoid.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_10

LANGUAGE: html+django
CODE:
```
{%load humanize%}
```

----------------------------------------

TITLE: Defining CSRF Failure View Signature
DESCRIPTION: Specifies the required signature for a custom view function used by the CSRF protection middleware when a request is rejected. The function must accept the request object and an optional reason string, and should return an HttpResponseForbidden.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_8

LANGUAGE: Python
CODE:
```
def csrf_failure(request, reason=""): ...
```

----------------------------------------

TITLE: Handling Forward References in Django Deserialization
DESCRIPTION: Demonstrates how to handle forward references when deserializing data with natural keys by using handle_forward_references=True and managing deferred fields.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
objs_with_deferred_fields = []

for obj in serializers.deserialize("xml", data, handle_forward_references=True):
    obj.save()
    if obj.deferred_fields is not None:
        objs_with_deferred_fields.append(obj)

for obj in objs_with_deferred_fields:
    obj.save_deferred_fields()
```

----------------------------------------

TITLE: Using ngettext for Pluralization in JavaScript
DESCRIPTION: Demonstrates how to use the ngettext function for handling plural forms in JavaScript translations.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_37

LANGUAGE: javascript
CODE:
```
const objectCount = 1 // or 0, or 2, or 3, ...
const string = ngettext(
    'literal for the singular case',
    'literal for the plural case',
    objectCount
);
```

----------------------------------------

TITLE: Configuring the In-Memory Template Loader in Django
DESCRIPTION: Shows how to use the locmem.Loader which loads templates from a Python dictionary, useful for testing template functionality.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "OPTIONS": {
            "loaders": [
                (
                    "django.template.loaders.locmem.Loader",
                    {
                        "index.html": "content here",
                    },
                ),
            ],
        },
    }
]
```

----------------------------------------

TITLE: Positioning of Translator Comments in Django Templates
DESCRIPTION: Examples showing proper and improper placement of translator comments in Django templates. Comments must be at the end of a line to be correctly associated with translation strings.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_3

LANGUAGE: html+django
CODE:
```
{# Translators: This is ignored #}{% trans "Translate me" %}
{{ title }}{# Translators: Extracted and associated with 'Welcome' below #}
<h1>{% trans "Welcome" %}</h1>
```

----------------------------------------

TITLE: Accessing Z Coordinates of a LineString Geometry in Python
DESCRIPTION: Demonstrates getting a list of Z coordinates from a 3D LineString `OGRGeometry` ('LINESTRING (1 2 3,4 5 6)') via the `.z` attribute. It returns a list of Z values or `None` if the LineString is 2D.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_23

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("LINESTRING (1 2 3,4 5 6)").z
[3.0, 6.0]
```

----------------------------------------

TITLE: Using URLValidator class reference in Django
DESCRIPTION: Reference to the URLValidator class that had security vulnerability on Python 3.9.5+ where it didn't prohibit newlines and tabs, potentially enabling header injection attacks if used outside form fields.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.22.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.core.validators.URLValidator
```

----------------------------------------

TITLE: Using sensitive_post_parameters Decorator to Hide POST Data
DESCRIPTION: This example shows how to use the sensitive_post_parameters decorator to prevent sensitive POST parameters from being included in error reports.
SOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.views.decorators.debug import sensitive_post_parameters


@sensitive_post_parameters("pass_word", "credit_card_number")
def record_user_profile(request):
    UserProfile.create(
        user=request.user,
        password=request.POST["pass_word"],
        credit_card=request.POST["credit_card_number"],
        name=request.POST["name"],
    )
    ...
```

----------------------------------------

TITLE: Using Custom Reverse Managers in Django Models
DESCRIPTION: Demonstrates how to use a custom reverse manager for related objects in Django models. Shows syntax for specifying a different manager and calling custom methods.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_62

LANGUAGE: python
CODE:
```
from django.db import models


class Entry(models.Model):
    # ...
    objects = models.Manager()  # Default Manager
    entries = EntryManager()  # Custom Manager


b = Blog.objects.get(id=1)
b.entry_set(manager="entries").all()

b.entry_set(manager="entries").is_published()
```

----------------------------------------

TITLE: Using Query Parameters with Django Test Client POST Method
DESCRIPTION: Shows how to include query parameters when making a POST request using the Django test client. The example demonstrates sending form data and query parameters in the same request.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_10

LANGUAGE: pycon
CODE:
```
>>> c.post(
...     "/login/", {"name": "fred", "passwd": "secret"}, query_params={"visitor": "true"}
... )
```

----------------------------------------

TITLE: Overriding Default AdminSite with Custom AppConfig (Python)
DESCRIPTION: This code demonstrates how to override the default AdminSite by creating a custom AppConfig with a custom AdminSite subclass.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_81

LANGUAGE: Python
CODE:
```
# myproject/admin.py
from django.contrib import admin


class MyAdminSite(admin.AdminSite): ...

# myproject/apps.py
from django.contrib.admin.apps import AdminConfig


class MyAdminConfig(AdminConfig):
    default_site = "myproject.admin.MyAdminSite"

# myproject/settings.py
INSTALLED_APPS = [
    # ...
    "myproject.apps.MyAdminConfig",  # replaces 'django.contrib.admin'
    # ...
]
```

----------------------------------------

TITLE: Django Import Path Changes
DESCRIPTION: Examples of deprecated import paths and modules that will be removed, showing the old imports that should no longer be used and their replacements.
SOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
# Old deprecated imports
from django.contrib.csrf import * 
from django.contrib.gis.db.backend import *
from django.core.management import setup_environ, execute_manager

# New recommended imports
from django.conf.urls import include, patterns, url, handler404, handler500
from django.contrib.gis.geoip import GeoIP
```

----------------------------------------

TITLE: URL Routing with Regular Expressions (Previous Django Syntax)
DESCRIPTION: Example of the traditional URL routing syntax using regular expressions in Django versions prior to 2.0. This approach requires explicit regex patterns with named capture groups.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
url(r"^articles/(?P<year>[0-9]{4})/$", views.year_archive)
```

----------------------------------------

TITLE: Querying ManyToMany Relationships via Through Model Attributes - Django - Pycon
DESCRIPTION: Shows how to filter queries based on attributes of the intermediate `through` model (`Membership`) when querying the related model (`Person`).
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_23

LANGUAGE: pycon
CODE:
```
# Find all the members of the Beatles that joined after 1 Jan 1961
>>> Person.objects.filter(
...     group__name="The Beatles", membership__date_joined__gt=date(1961, 1, 1)
... )
<QuerySet [<Person: Ringo Starr]>
```

----------------------------------------

TITLE: Running Specific Test Modules
DESCRIPTION: This command demonstrates how to run only selected test modules from Django's test suite, in this case the generic_relations and i18n modules, using a custom settings file.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_6

LANGUAGE: console
CODE:
```
$ ./runtests.py --settings=path.to.settings generic_relations i18n
```

----------------------------------------

TITLE: Replacing Default Manager on a Django Proxy Model
DESCRIPTION: Shows how to replace the default manager (`objects`) on a proxy model (`MyPerson`) by assigning a custom manager class (`NewManager`) to it. This manager will be the default when querying `MyPerson`.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_50

LANGUAGE: python
CODE:
```
from django.db import models


class NewManager(models.Manager):
    # ...
    pass


class MyPerson(Person):
    objects = NewManager()

    class Meta:
        proxy = True
```

----------------------------------------

TITLE: Creating a Basic Form in Django
DESCRIPTION: Defines a simple ArticleForm using Django's forms module, with title and publication date fields that will be used as the basis for formset examples.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django import forms
>>> class ArticleForm(forms.Form):
...     title = forms.CharField()
...     pub_date = forms.DateField()
```

----------------------------------------

TITLE: Defining Media as a Dynamic Property in Django Widgets
DESCRIPTION: Demonstrates how to define the media property as a dynamic property method that returns a forms.Media instance with CSS and JavaScript requirements.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
class CalendarWidget(forms.TextInput):
    @property
    def media(self):
        return forms.Media(
            css={"all": ["pretty.css"]}, js=["animations.js", "actions.js"]
        )
```

----------------------------------------

TITLE: Including URLconf with Explicit Namespace in Django
DESCRIPTION: Shows how to include a list of URL patterns with an explicit namespace using a tuple, allowing for more flexibility in namespace assignment.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
from django.urls import include, path

from . import views

polls_patterns = (
    [
        path("", views.IndexView.as_view(), name="index"),
        path("<int:pk>/", views.DetailView.as_view(), name="detail"),
    ],
    "polls",
)

urlpatterns = [
    path("polls/", include(polls_patterns)),
]
```

----------------------------------------

TITLE: Configuring Django PyLibMC Cache Backend
DESCRIPTION: Configuration for PyLibMC memcached backend with binary protocol, SASL authentication, and ketama behavior mode enabled.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.memcached.PyLibMCCache",
        "LOCATION": "127.0.0.1:11211",
        "OPTIONS": {
            "binary": True,
            "username": "user",
            "password": "pass",
            "behaviors": {
                "ketama": True,
            },
        },
    }
}
```

----------------------------------------

TITLE: Returning Related Model Data as Dictionaries (FK by Field Name) Python
DESCRIPTION: Uses values() specifying a ForeignKey field name directly ('blog'). The resulting dictionary uses the field name ('blog') as the key, storing the primary key of the related object.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_23

LANGUAGE: Python
CODE:
```
>>> Entry.objects.values("blog")
```

----------------------------------------

TITLE: Defining Custom Primary Key in Django Model (Python)
DESCRIPTION: Shows how to explicitly set a field as the primary key for a Django model using `primary_key=True`. When a primary key is explicitly defined, Django will not automatically add the default `id` column.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_10

LANGUAGE: Python
CODE:
```
id = models.BigAutoField(primary_key=True)
```

----------------------------------------

TITLE: Incorrect Template Load and Extends Ordering
DESCRIPTION: Demonstrates an incorrect Django template pattern where load tags precede extends tags. This is presented as an anti-pattern to avoid when writing Django templates.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_4

LANGUAGE: html+django
CODE:
```
{% load i18n %}
{% extends "base.html" %}

{% block content %}
  <h1 class="font-semibold text-xl">
    {{ pages.title }}
  </h1>
{% endblock content %}
```

----------------------------------------

TITLE: Defining Post-Render Callback for Django TemplateResponse
DESCRIPTION: This code snippet shows how to define a post-render callback function for a TemplateResponse. This allows for operations that must be performed on a fully rendered response, such as caching.
SOURCE: https://github.com/django/django/blob/main/docs/ref/template-response.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.template.response import TemplateResponse


def my_render_callback(response):
```

----------------------------------------

TITLE: Comparing CurrentSiteManager Filtering with Manual Filtering in Python
DESCRIPTION: Illustrates that using the `CurrentSiteManager` (`Photo.on_site.all()`) produces the same result as manually filtering the default manager by the `SITE_ID` setting (`Photo.objects.filter(site=settings.SITE_ID)`). Assumes the `Photo` model and `on_site` manager from the previous example and the `settings.SITE_ID` is configured.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
Photo.objects.filter(site=settings.SITE_ID)
Photo.on_site.all()
```

----------------------------------------

TITLE: Inspecting GDAL Layer Properties in Python
DESCRIPTION: Examples showing how to access and iterate through layer properties in a GDAL DataSource.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> for layer in ds:
...     print('Layer "%s": %i %ss' % (layer.name, len(layer), layer.geom_type.name))
...
Layer "cities": 3 Points
```

----------------------------------------

TITLE: Accessing Y Coordinate of a Point Geometry in Python
DESCRIPTION: Shows how to get the Y coordinate of a Point `OGRGeometry` ('POINT (1 2)') by accessing its `.y` attribute. It returns the floating-point value of the Y coordinate.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_18

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("POINT (1 2)").y
2.0
```

----------------------------------------

TITLE: Creating a Dynamically Generated Manager Class for Django Migrations
DESCRIPTION: This snippet shows how to create a manager class using the from_queryset function and make it usable in migrations by inheriting from the generated class.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
class MyManager(MyBaseManager.from_queryset(CustomQuerySet)):
    use_in_migrations = True


class MyModel(models.Model):
    objects = MyManager()
```

----------------------------------------

TITLE: Security Update in dictsort Template Filter
DESCRIPTION: Fix for CVE-2021-45116 addressing potential information disclosure in the dictsort template filter by implementing restricted resolution logic that prevents method calls and dictionary indexing.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.26.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
dictsort
```

----------------------------------------

TITLE: ImproperlyConfigured Error Example for Custom User Models
DESCRIPTION: Example of the error message displayed when a custom user model is not properly imported in tests before being referenced by AUTH_USER_MODEL setting.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_1

LANGUAGE: pytb
CODE:
```
ImproperlyConfigured: AUTH_USER_MODEL refers to model 'auth.CustomUser' that has not been installed
```

----------------------------------------

TITLE: Migration with Database Router Hints
DESCRIPTION: Shows how to use database router hints in a migration to target specific databases.
SOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.db import migrations

def forwards(apps, schema_editor):
    # Your migration code goes here
    ...

class Migration(migrations.Migration):
    dependencies = [
        # Dependencies to other migrations
    ]

    operations = [
        migrations.RunPython(forwards, hints={"target_db": "default"}),
    ]
```

----------------------------------------

TITLE: Implementing run_tests Method in Python
DESCRIPTION: This method runs the test suite with specified test labels. It returns the number of failed tests and supports various formats for test selection.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
def run_tests(self, test_labels, **kwargs):
    # Run the test suite
    # Return the number of tests that failed
```

----------------------------------------

TITLE: Index Lookup in Django JSONField
DESCRIPTION: Shows how to use numeric keys as array indices when querying JSONField data. This allows accessing elements within JSON arrays by their position.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
>>> Dog.objects.filter(data__owner__other_pets__0__name="Fishy")
<QuerySet [<Dog: Rufus>]>
```

----------------------------------------

TITLE: Defining a Person Model in Django
DESCRIPTION: Example of defining a Person model with first_name, last_name, and birth_date fields in Django's ORM. This model serves as the foundation for raw SQL query examples.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class Person(models.Model):
    first_name = models.CharField(...)
    last_name = models.CharField(...)
    birth_date = models.DateField(...)
```

----------------------------------------

TITLE: Using Django Localtime Template Tag
DESCRIPTION: Demonstrates how to activate/deactivate time zone conversion for a template block using the localtime tag. Requires loading the tz template tag library.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_5

LANGUAGE: html+django
CODE:
```
{% load tz %}

{% localtime on %}
    {{ value }}
{% endlocaltime %}

{% localtime off %}
    {{ value }}
{% endlocaltime %}
```

----------------------------------------

TITLE: Mitigating DoS in django.utils.html.urlize() (Python)
DESCRIPTION: The urlize and urlizetrunc template filters were vulnerable to denial-of-service attacks with inputs containing many brackets. This affects the django.utils.html.urlize() function.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.14.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.utils.html.urlize()
```

----------------------------------------

TITLE: Default STATICFILES_FINDERS Configuration in Python
DESCRIPTION: The default configuration for static file finders which specifies the backends used to locate static files. Includes FileSystemFinder for STATICFILES_DIRS and AppDirectoriesFinder for app-specific static directories.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_83

LANGUAGE: python
CODE:
```
[
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]
```

----------------------------------------

TITLE: Authenticating Remote Users with RemoteUserBackend in Django (Python)
DESCRIPTION: Authenticates a user based on the trusted username provided in `remote_user` (typically from `request.META['REMOTE_USER']`). If `create_unknown_user` is `True` (default) and the user doesn't exist, a new user object is created. Returns the user object, or `None` if `create_unknown_user` is `False` and the user is not found. `request` is an optional HttpRequest. The asynchronous version `aauthenticate()` was added in Django 5.2.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
authenticate(request, remote_user)
```

LANGUAGE: python
CODE:
```
aauthenticate(request, remote_user)
```

----------------------------------------

TITLE: Saving Objects to Different Databases in Django
DESCRIPTION: Examples of saving Person objects to multiple databases while handling primary key conflicts. Shows two approaches: clearing the primary key and using force_insert.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> p = Person(name="Fred")
>>> p.save(using="first")
>>> p.pk = None  # Clear the primary key.
>>> p.save(using="second")  # Write a completely new object.
```

LANGUAGE: python
CODE:
```
>>> p = Person(name="Fred")
>>> p.save(using="first")
>>> p.save(using="second", force_insert=True)
```

----------------------------------------

TITLE: Tearing Down Test Databases in Django
DESCRIPTION: The teardown_databases function destroys test databases and restores pre-test conditions. It takes the configuration returned by setup_databases, along with parallel and keepdb flags.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
teardown_databases(old_config, parallel=0, keepdb=False)
```

----------------------------------------

TITLE: Forcing String Conversion with force_str
DESCRIPTION: Similar to smart_str, but resolves lazy instances to strings rather than keeping them as lazy objects. Can optionally skip conversion of non-string-like objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
force_str(s, encoding='utf-8', strings_only=False, errors='strict')
```

----------------------------------------

TITLE: Fixing Race Condition in QuerySet.update_or_create()
DESCRIPTION: Reference to a bug fix addressing a race condition in Django's QuerySet.update_or_create() method that could potentially cause data loss. The fix was implemented in ticket #29499.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.16.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
QuerySet.update_or_create()
```

----------------------------------------

TITLE: Referencing Meta.constraints Attribute in Django Models
DESCRIPTION: This code snippet demonstrates how to reference the Meta.constraints attribute in Django models. It's mentioned in the context of a bugfix for the __len lookup in ArrayField.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.5.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
:attr:`Meta.constraints <django.db.models.Options.constraints>`
```

----------------------------------------

TITLE: Defining RestructuredText Table of Contents for Django Mixins
DESCRIPTION: RestructuredText markup that defines the documentation structure and table of contents for Django class-based views mixins documentation. It uses toctree directive to organize sub-pages.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins.txt#2025-04-23_snippet_0

LANGUAGE: restructuredtext
CODE:
```
.. toctree::
   :maxdepth: 1

   mixins-simple
   mixins-single-object
   mixins-multiple-object
   mixins-editing
   mixins-date-based
```

----------------------------------------

TITLE: Basic HTML Radio Button Rendering in Django
DESCRIPTION: Shows the basic HTML structure of how radio buttons are rendered by Django's RadioSelect widget inside div tags.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_15

LANGUAGE: HTML
CODE:
```
<div>
  <div><input type="radio" name="..."></div>
  ...
</div>
```

----------------------------------------

TITLE: Disabling Autoawait Feature in IPython Shell
DESCRIPTION: Provides the IPython magic command (`%autoawait off`) to disable the automatic event loop and await functionality in an IPython interactive shell. This is useful to prevent `django.core.exceptions.SynchronousOnlyOperation` errors when running synchronous Django code (like ORM operations without `sync_to_async`) within an IPython session, which implicitly runs an event loop.
SOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
%autoawait off
```

----------------------------------------

TITLE: Using BigAutoField in Django Models
DESCRIPTION: Introduces BigAutoField, a new field type that acts like AutoField but can store larger numbers. It's guaranteed to fit numbers from 1 to 9223372036854775807.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
from django.db import models

class MyModel(models.Model):
    id = models.BigAutoField(primary_key=True)
```

----------------------------------------

TITLE: Implementing Selenium Screenshots Test Case in Django
DESCRIPTION: Example of using Selenium test case with screenshot functionality for testing admin UI across different screen sizes and configurations. Uses the @screenshot_cases decorator to specify different test scenarios.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.test.selenium import SeleniumTestCase, screenshot_cases
from django.urls import reverse


class SeleniumTests(SeleniumTestCase):
    @screenshot_cases(["desktop_size", "mobile_size", "rtl", "dark", "high_contrast"])
    def test_login_button_centered(self):
        self.selenium.get(self.live_server_url + reverse("admin:login"))
        self.take_screenshot("login")
        ...
```

----------------------------------------

TITLE: Getting Date Formats with Django `formats` Module (Python)
DESCRIPTION: This snippet demonstrates the recommended way to retrieve date, datetime, and time format strings using `formats.get_format()` from `django.utils.formats`. This function respects localization settings (`USE_L10N`) and falls back to default formats if localization is disabled.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
from django.utils import formats

date_format = formats.get_format("DATE_FORMAT")
datetime_format = formats.get_format("DATETIME_FORMAT")
time_format = formats.get_format("TIME_FORMAT")
```

----------------------------------------

TITLE: Retrieving Current Message Level in Django
DESCRIPTION: Demonstrates how to get the current message level using the get_level method from the messages framework.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.contrib import messages

current_level = messages.get_level(request)
```

----------------------------------------

TITLE: Using third-party decorators with async tests in Django
DESCRIPTION: Example showing how to correctly use third-party decorators that aren't async-compatible by wrapping the test method with async_to_sync inside the decorator chain.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_49

LANGUAGE: python
CODE:
```
from asgiref.sync import async_to_sync
from django.test import TestCase


class MyTests(TestCase):
    @mock.patch(...)
    @async_to_sync
    async def test_my_thing(self): ...
```

----------------------------------------

TITLE: Proper Comment and Extends Ordering in Django Templates
DESCRIPTION: Demonstrates that comments can precede extends tags in Django templates while maintaining proper style. This shows the correct ordering of template elements.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_3

LANGUAGE: html+django
CODE:
```
{# This is a comment #}
{% extends "base.html" %}

{% block content %}
  <h1 class="font-semibold text-xl">
    {{ pages.title }}
  </h1>
{% endblock content %}
```

----------------------------------------

TITLE: Instantiating GEOS Polygon Objects with Rings in Python
DESCRIPTION: Shows two equivalent ways to instantiate a `Polygon` object having an exterior ring and one interior ring (a hole). The first method uses sequences of coordinate tuples directly for both the exterior and interior rings. The second method uses pre-constructed `LinearRing` objects for the exterior and interior boundaries. Both approaches result in the same `Polygon` geometry.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_12

LANGUAGE: pycon
CODE:
```
>>> ext_coords = ((0, 0), (0, 1), (1, 1), (1, 0), (0, 0))
>>> int_coords = ((0.4, 0.4), (0.4, 0.6), (0.6, 0.6), (0.6, 0.4), (0.4, 0.4))
>>> poly = Polygon(ext_coords, int_coords)
>>> poly = Polygon(LinearRing(ext_coords), LinearRing(int_coords))
```

----------------------------------------

TITLE: Month Archive Template Example
DESCRIPTION: Django template for displaying monthly article archives with navigation links.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_8

LANGUAGE: html
CODE:
```
<ul>
    {% for article in object_list %}
        <li>{{ article.pub_date|date:"F j, Y" }}: {{ article.title }}</li>
    {% endfor %}
</ul>

<p>
    {% if previous_month %}
        Previous Month: {{ previous_month|date:"F Y" }}
    {% endif %}
    {% if next_month %}
        Next Month: {{ next_month|date:"F Y" }}
    {% endif %}
</p>
```

----------------------------------------

TITLE: Configuring Django Custom Database Engine - Django Python
DESCRIPTION: Shows how to update the `DATABASES` setting in `settings.py` to use a custom database backend implemented in a local module path (e.g., 'mydbengine') instead of referencing a built-in Django backend directly.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_25

LANGUAGE: python
CODE:
```
DATABASES = {
        "default": {
            "ENGINE": "mydbengine",
            "# ...": ""
        },
    }
```

----------------------------------------

TITLE: Implementing Custom Serializer for Decimal in Django Migrations
DESCRIPTION: This snippet demonstrates how to create a custom serializer for the Decimal type in Django migrations. It defines a DecimalSerializer class and registers it with the MigrationWriter.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_12

LANGUAGE: Python
CODE:
```
from decimal import Decimal

from django.db.migrations.serializer import BaseSerializer
from django.db.migrations.writer import MigrationWriter


class DecimalSerializer(BaseSerializer):
    def serialize(self):
        return repr(self.value), {"from decimal import Decimal"}


MigrationWriter.register_serializer(Decimal, DecimalSerializer)
```

----------------------------------------

TITLE: Implementing Deconstruct Method for a Custom Django Field
DESCRIPTION: This example shows how to implement the deconstruct method for a custom HandField that forces a specific max_length. The deconstruct method is used for serialization during model migrations.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.db import models


class HandField(models.Field):
    def __init__(self, *args, **kwargs):
        kwargs["max_length"] = 104
        super().__init__(*args, **kwargs)

    def deconstruct(self):
        name, path, args, kwargs = super().deconstruct()
        del kwargs["max_length"]
        return name, path, args, kwargs
```

----------------------------------------

TITLE: Reading WKT Data in Python using GEOS
DESCRIPTION: Demonstrates how to use the WKTReader class to create a GEOSGeometry object from Well-Known Text (WKT) data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_22

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.geos import WKTReader
>>> wkt_r = WKTReader()
>>> wkt_r.read("POINT(1 1)")
<Point object at 0x103a88b50>
```

----------------------------------------

TITLE: Creating JavaScript message files with Django makemessages
DESCRIPTION: Command for creating or updating message files specifically for JavaScript translations using the djangojs domain parameter with makemessages.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_54

LANGUAGE: shell
CODE:
```
django-admin makemessages -d djangojs -l de
```

----------------------------------------

TITLE: Using Quoted db_table (Lowercase) - Django Python
DESCRIPTION: Demonstrates setting a quoted name for the `db_table` option in a model's `Meta` class. This prevents the Oracle backend's default transformations (like uppercasing and truncating identifiers), which is useful when dealing with legacy databases that use specific casing or naming longer than 30 characters.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_22

LANGUAGE: python
CODE:
```
class LegacyModel(models.Model):
        class Meta:
            db_table = '"name_left_in_lowercase"'
```

----------------------------------------

TITLE: Verifying Django QuerySet State After Deletion
DESCRIPTION: This snippet demonstrates the state of a Django QuerySet after a delete operation. It shows that the QuerySet cache is cleared and related objects are updated accordingly. The example uses the article_set reverse relation from Publication to Article.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
>>> print(q)
<QuerySet []>
>>> p1.article_set.all()
<QuerySet [<Article: NASA uses Python>]>
```

----------------------------------------

TITLE: Defining Item Enclosure MIME Type in Django Feed
DESCRIPTION: This snippet shows three ways to define the enclosure MIME type for items in a Django feed: a method taking an item, a method for all items, and a hard-coded attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
def item_enclosure_mime_type(self, item):
    """
    Takes an item, as returned by items(), and returns the item's
    enclosure MIME type.
    """

def item_enclosure_mime_type(self):
    """
    Returns the enclosure MIME type for every item in the feed.
    """

item_enclosure_mime_type = "audio/mpeg"  # Hard-coded enclosure MIME type.
```

----------------------------------------

TITLE: Using ogrinspect Command in GeoDjango
DESCRIPTION: Management command for inspecting OGR-compatible data sources and generating GeoDjango models. Supports various options for customizing field definitions, geometry handling, and model generation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/commands.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django-admin ogrinspect data_source model_name
```

----------------------------------------

TITLE: Defining CheckConstraint with Ordered Q Objects in Python
DESCRIPTION: Illustrates how to define a `CheckConstraint` where the order of evaluation of conditions might matter for performance. While `Q` argument order isn't guaranteed, the order of `Q` expressions combined with `&` is preserved.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
from django.db.models import Q, CheckConstraint

CheckConstraint(
    condition=Q(age__gte=18) & Q(expensive_check=condition),
    name="age_gte_18_and_others",
)
```

----------------------------------------

TITLE: Demonstrating XSS Vulnerability in Django Templates
DESCRIPTION: Example showing how unsanitized template variables in style tags can lead to XSS vulnerabilities. The code demonstrates a case where Django's automatic escaping doesn't provide complete protection.
SOURCE: https://github.com/django/django/blob/main/docs/topics/security.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
<style class={{ var }}>...</style>
```

----------------------------------------

TITLE: Using Django Functions in Jinja2 Templates
DESCRIPTION: Shows how to use Django-specific functions like 'static' and 'url' in Jinja2 templates after configuring the custom environment.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_15

LANGUAGE: jinja2
CODE:
```
<img src="{{ static('path/to/company-logo.png') }}" alt="Company Logo">

<a href="{{ url('admin:index') }}">Administration</a>
```

----------------------------------------

TITLE: Parsing Arguments in a Django Tag Compilation Function (Python)
DESCRIPTION: This Python function `do_format_time` serves as the compilation function for a custom Django template tag. It uses `token.split_contents()` to parse the tag's arguments, expecting a tag name, a variable name (like 'blog_entry.date_updated'), and a quoted format string. It performs error handling for incorrect argument counts and validates that the format string is properly quoted before instantiating and returning the corresponding `FormatTimeNode`.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
from django import template


def do_format_time(parser, token):
    try:
        # split_contents() knows not to split quoted strings.
        tag_name, date_to_be_formatted, format_string = token.split_contents()
    except ValueError:
        raise template.TemplateSyntaxError(
            "%r tag requires exactly two arguments" % token.contents.split()[0]
        )
    if not (format_string[0] == format_string[-1] and format_string[0] in ('"', "'")):
        raise template.TemplateSyntaxError(
            "%r tag's argument should be in quotes" % tag_name
        )
    return FormatTimeNode(date_to_be_formatted, format_string[1:-1])
```

----------------------------------------

TITLE: Class-level Settings Override in Django Tests
DESCRIPTION: Demonstrates applying the override_settings decorator at the class level to modify settings for all test methods in a TestCase.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_36

LANGUAGE: python
CODE:
```
from django.test import TestCase, override_settings


@override_settings(LOGIN_URL="/other/login/")
class LoginTestCase(TestCase):
    def test_login(self):
        response = self.client.get("/sekrit/")
        self.assertRedirects(response, "/other/login/?next=/sekrit/")
```

----------------------------------------

TITLE: Configuring Custom Exception Reporter in Django Settings
DESCRIPTION: Illustrates how to specify a custom error reporter class in Django settings for site-wide customization of error reporting beyond filtering.
SOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
DEFAULT_EXCEPTION_REPORTER = "path.to.your.CustomExceptionReporter"
```

----------------------------------------

TITLE: Accessing X Coordinate of a Point Geometry in Python
DESCRIPTION: Shows how to get the X coordinate of a Point `OGRGeometry` ('POINT (1 2)') by accessing its `.x` attribute. It returns the floating-point value of the X coordinate.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_17

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("POINT (1 2)").x
1.0
```

----------------------------------------

TITLE: Defining MinLengthValidator in Django
DESCRIPTION: Validator class that checks if the length of a value is below a minimum limit. Raises ValidationError if the length is less than limit_value.
SOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
MinLengthValidator(limit_value, message=None)
```

----------------------------------------

TITLE: Defining Django DeleteView Class
DESCRIPTION: Defines the DeleteView class in Django, used for deleting objects. It provides a list of attributes and methods available for this view.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_9

LANGUAGE: Python
CODE:
```
class DeleteView():
    # Attributes and methods listed in the documentation
```

----------------------------------------

TITLE: Applying method_decorator to Authentication Decorators
DESCRIPTION: Updated code showing the correct way to apply authentication decorators to class methods using method_decorator in Django 1.2.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.utils.decorators import method_decorator


class MyClass(object):
    @method_decorator(login_required)
    def my_view(self, request):
        pass
```

----------------------------------------

TITLE: Django ManyToMany Through Field Reference
DESCRIPTION: Example of Django ManyToMany field reference syntax used in through_fields validation
SOURCE: https://github.com/django/django/blob/main/docs/ref/checks.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
through_fields=['field1', 'field2']
```

----------------------------------------

TITLE: Defining TransactionManagementError Exception in Django (Python)
DESCRIPTION: Defines the `TransactionManagementError` exception class, located within the `django.db.transaction` module. This exception is raised to indicate any problems encountered during database transaction handling in Django applications.
SOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
.. exception:: TransactionManagementError
```

----------------------------------------

TITLE: Setting PostgreSQL Database Role in Django
DESCRIPTION: Demonstrates how to specify a different role for database connections than the role used to establish the initial connection. This is achieved by adding the `assume_role` key with the desired role name to the `OPTIONS` dictionary within the database configuration in Django's `DATABASES` setting.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_4

LANGUAGE: python
CODE:
```
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        # ...
        "OPTIONS": {
            "assume_role": "my_application_role"
        }
    }
}
```

----------------------------------------

TITLE: Defining Item Comments URL in Django Feed
DESCRIPTION: This snippet demonstrates three methods to specify the comments URL for items in a Django feed: a method taking an item, a method for all items, and a hard-coded attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
def item_comments(self, obj):
    """
    Takes an item, as returned by items(), and returns the item's
    comments URL as a normal Python string.
    """

def item_comments(self):
    """
    Returns the comments URL for every item in the feed.
    """

item_comments = "https://www.example.com/comments"  # Hard-coded comments URL
```

----------------------------------------

TITLE: Configuring Apache for Django Authentication with mod_wsgi
DESCRIPTION: Apache configuration that sets up a protected location requiring authentication against Django's user database. This configuration defines a '/secret' path that will prompt for authentication credentials to be checked against Django's user system.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/apache-auth.txt#2025-04-23_snippet_0

LANGUAGE: apache
CODE:
```
WSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py
WSGIPythonPath /path/to/mysite.com

WSGIProcessGroup %{GLOBAL}
WSGIApplicationGroup %{GLOBAL}

<Location "/secret">
    AuthType Basic
    AuthName "Top Secret"
    Require valid-user
    AuthBasicProvider wsgi
    WSGIAuthUserScript /path/to/mysite.com/mysite/wsgi.py
</Location>
```

----------------------------------------

TITLE: Defining Feed Category Methods in Django
DESCRIPTION: Methods for providing feed categories dynamically. Includes object-based and static implementations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
def categories(self, obj):
    """
    Takes the object returned by get_object() and returns the feed's
    categories as iterable over strings.
    """

def categories(self):
    """
    Returns the feed's categories as iterable over strings.
    """
```

----------------------------------------

TITLE: Custom Vendor SQL Generation by Overriding as_sql in Func Subclasses - Django ORM - Python
DESCRIPTION: This snippet demonstrates how to override the as_sql method in a Django Func subclass (ConcatPair) to customize SQL rendering for specific database vendors, such as MySQL. It changes the SQL function from CONCAT to CONCAT_WS, adapting the SQL template accordingly. Intended for advanced users writing reusable custom database functions. The example assumes that this subclass will only be used where the specific SQL modifications are needed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
class ConcatPair(Func):
    ...
    function = "CONCAT"
    ...

    def as_mysql(self, compiler, connection, **extra_context):
        return super().as_sql(
            compiler,
            connection,
            function="CONCAT_WS",
            template="%(function)s('', %(expressions)s)",
            **extra_context
        )
```

----------------------------------------

TITLE: Incorrect Block Indentation in Django Templates
DESCRIPTION: Shows incorrect indentation of top-level blocks in Django templates using extends. This demonstrates an indentation pattern to avoid in extended templates.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_16

LANGUAGE: html+django
CODE:
```
{% extends "base.html" %}


```

----------------------------------------

TITLE: Implementing AbsoluteValue Transformer in Django
DESCRIPTION: Creates an AbsoluteValue transformer that applies the ABS() SQL function to a field. It registers the transformer with IntegerField, allowing it to be chained with other lookups.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.db.models import Transform


class AbsoluteValue(Transform):
    lookup_name = "abs"
    function = "ABS"

from django.db.models import IntegerField

IntegerField.register_lookup(AbsoluteValue)
```

----------------------------------------

TITLE: Install tblib package for parallel testing (Console)
DESCRIPTION: Explains how to install the `tblib` package using pip. This package is required for displaying tracebacks correctly when using Django's parallel test execution (`--parallel`) and is installed via the Python module runner.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_41

LANGUAGE: console
CODE:
```
python -m pip install tblib
```

----------------------------------------

TITLE: Password Hasher Runtime Hardening Method Reference
DESCRIPTION: Reference to the new BasePasswordHasher.harden_runtime() method introduced to mitigate timing attacks in password verification by equalizing runtime between existing passwords with different work factors.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.3.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
BasePasswordHasher.harden_runtime()
```

----------------------------------------

TITLE: Implementing a Complex Feed with Dynamic Content in Django
DESCRIPTION: This example shows how to create a more complex feed that generates content dynamically based on URL parameters. It demonstrates the use of get_object() method and customizing feed attributes with methods.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
from django.contrib.syndication.views import Feed


class BeatFeed(Feed):
    description_template = "feeds/beat_description.html"

    def get_object(self, request, beat_id):
        return Beat.objects.get(pk=beat_id)

    def title(self, obj):
        return "Police beat central: Crimes for beat %s" % obj.beat

    def link(self, obj):
        return obj.get_absolute_url()

    def description(self, obj):
        return "Crimes recently reported in police beat %s" % obj.beat

    def items(self, obj):
        return Crime.objects.filter(beat=obj).order_by("-crime_date")[:30]
```

----------------------------------------

TITLE: Initializing GeoDjango Form with Custom Widget Attributes in Python
DESCRIPTION: This snippet demonstrates how to create a custom GeoDjango form with a PointField using the OSMWidget. It shows how to pass custom widget attributes, specifically setting 'display_raw' to True.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/forms-api.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib.gis import forms


class MyGeoForm(forms.Form):
    point = forms.PointField(widget=forms.OSMWidget(attrs={"display_raw": True}))
```

----------------------------------------

TITLE: Referencing Django SessionBase Flush Method in Python
DESCRIPTION: This code snippet refers to the flush() method of Django's SessionBase class, which has been modified to avoid creating new empty sessions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.22.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
contrib.sessions.backends.base.SessionBase.flush()
```

----------------------------------------

TITLE: Updating Django Syndication Feed Views
DESCRIPTION: The views.feed() view and feeds.Feed class in django.contrib.syndication will be removed. Use the class-based view views.Feed instead.
SOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
# Old method:
django.contrib.syndication.views.feed()
django.contrib.syndication.feeds.Feed

# New method:
django.contrib.syndication.views.Feed
```

----------------------------------------

TITLE: Using Prepared Geometries for Faster Spatial Operations in Python
DESCRIPTION: Demonstrates how to use prepared geometries to perform faster spatial operations, such as containment checks.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_18

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.geos import Point, Polygon
>>> poly = Polygon.from_bbox((0, 0, 5, 5))
>>> prep_poly = poly.prepared
>>> prep_poly.contains(Point(2.5, 2.5))
True
```

----------------------------------------

TITLE: Entering Superuser Details
DESCRIPTION: This snippet shows the prompts and expected input for creating a Django superuser, including username, email, and password confirmation.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_10

LANGUAGE: text
CODE:
```
Username: admin

Email address: admin@example.com

Password: **********
Password (again): *********
Superuser created successfully.
```

----------------------------------------

TITLE: ModelForm Exclusion of Composite Primary Key Fields - Python
DESCRIPTION: Shows that Django forms.ModelForm automatically excludes virtual composite primary key (pk) from generated form fields. OrderLineItemForm references OrderLineItem, and fields = "__all__" includes all real fields except the composite pk. Dependencies: Django forms module and properly configured model with composite key.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
class OrderLineItemForm(forms.ModelForm):
    class Meta:
        model = OrderLineItem
        fields = "__all__"
```

----------------------------------------

TITLE: Configuring SSL Redirect in Django Settings
DESCRIPTION: Demonstrates the Django setting for SSL redirect. The security fix ensures this setting works correctly when using a reverse-proxy connecting via HTTPS.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.22.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
SECURE_SSL_REDIRECT
```

----------------------------------------

TITLE: Following redirects with Django test client
DESCRIPTION: Shows how to use the new 'follow' argument in the test client's get() and post() methods to automatically follow redirects in tests.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
Client.get(url, follow=True)
Client.post(url, data, follow=True)
```

----------------------------------------

TITLE: Using Sign Function in Django Models
DESCRIPTION: Demonstrates using the Sign function to get the sign of numeric values and register it as a transform
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Sign
>>> Vector.objects.create(x=5.4, y=-2.3)
>>> vector = Vector.objects.annotate(x_sign=Sign("x"), y_sign=Sign("y")).get()
>>> vector.x_sign, vector.y_sign
(1, -1)
```

LANGUAGE: python
CODE:
```
>>> from django.db.models import FloatField
>>> from django.db.models.functions import Sign
>>> FloatField.register_lookup(Sign)
>>> # Get vectors whose signs of components are less than 0.
>>> vectors = Vector.objects.filter(x__sign__lt=0, y__sign__lt=0)
```

----------------------------------------

TITLE: Accessing GDALRaster Extent Attribute in Python
DESCRIPTION: Shows how to retrieve the spatial extent (xmin, ymin, xmax, ymax) of a GDALRaster using the `extent` attribute. It also demonstrates how changes to the raster's origin attribute dynamically affect the calculated extent.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_43

LANGUAGE: pycon
CODE:
```
>>> rst = GDALRaster({"width": 10, "height": 20, "srid": 4326})
>>> rst.extent
(0.0, -20.0, 10.0, 0.0)
>>> rst.origin.x = 100
>>> rst.extent
(100.0, -20.0, 110.0, 0.0)
```

----------------------------------------

TITLE: Rendering Django Forms Using Grouped Fields in Django Templates - HTML+Django template
DESCRIPTION: Demonstrates the traditional method to manually render each individual form field component (label, help_text, errors, and widget) for a Django form using HTML+Django template syntax. Assumes access to a Django form context variable. Required fields (e.g. email, password) are shown as individual form inputs inside rows and columns. This approach is verbose and can be replaced by field group rendering in Django 5.0. Inputs are Django `BoundField` instances. Outputs a complete HTML form structure embedded with Django template tags.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_0

LANGUAGE: HTML+Django template
CODE:
```
<form>\n...\n<div>\n  {{ form.name.label_tag }}\n  {% if form.name.help_text %}\n    <div class=\"helptext\" id=\"{{ form.name.auto_id }}_helptext\">\n      {{ form.name.help_text|safe }}\n    </div>\n  {% endif %}\n  {{ form.name.errors }}\n  {{ form.name }}\n  <div class=\"row\">\n    <div class=\"col\">\n      {{ form.email.label_tag }}\n      {% if form.email.help_text %}\n        <div class=\"helptext\" id=\"{{ form.email.auto_id }}_helptext\">\n          {{ form.email.help_text|safe }}\n        </div>\n      {% endif %}\n      {{ form.email.errors }}\n      {{ form.email }}\n    </div>\n    <div class=\"col\">\n      {{ form.password.label_tag }}\n      {% if form.password.help_text %}\n        <div class=\"helptext\" id=\"{{ form.password.auto_id }}_helptext\">\n          {{ form.password.help_text|safe }}\n        </div>\n      {% endif %}\n      {{ form.password.errors }}\n      {{ form.password }}\n    </div>\n  </div>\n</div>\n...\n</form>
```

----------------------------------------

TITLE: Modifying Windows GIS Environment Variables for GeoDjango - Batch
DESCRIPTION: This Windows batch script sets environment variables (OSGEO4W_ROOT, GDAL_DATA, PROJ_LIB, PATH) and updates the Windows registry so that GeoDjango can find the required GIS libraries (GDAL, PROJ, etc) provided by the OSGeo4W installation. It requires administrative privileges and should be executed inside an Administrator cmd.exe shell. The script takes no parameters; it expects that OSGeo4W is installed in C:\\OSGeo4W unless customized. Outputs are persistent environment variables and registry entries for the current system. Users must log out and log back in for changes to take effect.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_11

LANGUAGE: bat
CODE:
```
set OSGEO4W_ROOT=C:\\OSGeo4W
set GDAL_DATA=%OSGEO4W_ROOT%\apps\gdal\share\gdal
set PROJ_LIB=%OSGEO4W_ROOT%\share\proj
set PATH=%PATH%;%OSGEO4W_ROOT%\bin
reg ADD "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment" /v Path /t REG_EXPAND_SZ /f /d "%PATH%"
reg ADD "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment" /v GDAL_DATA /t REG_EXPAND_SZ /f /d "%GDAL_DATA%"
reg ADD "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment" /v PROJ_LIB /t REG_EXPAND_SZ /f /d "%PROJ_LIB%"
```

----------------------------------------

TITLE: Creating a B-Tree Index in Django with PostgreSQL
DESCRIPTION: Creates a B-Tree index with options for fill factor and item deduplication. B-Tree is the default index type in PostgreSQL.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
BTreeIndex(*expressions, fillfactor=None, deduplicate_items=None, **options)
```

----------------------------------------

TITLE: Forcing INSERT on Parent Models using force_insert - Django ORM - Python
DESCRIPTION: These examples show how to use the force_insert parameter when saving Django model instances, especially with multi-table inheritance. Providing a tuple of parent classes or models.Model forces the ORM to execute SQL INSERTs for child and parent models. Prerequisites: multi-table-inherited models (e.g., Restaurant, Place, Rating) and correct project setup. Key parameters: pk, name, and rating. This method is intended for advanced use cases; forcing insertions outside ordinary use can cause complexity or errors if not handled carefully.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
Restaurant(pk=1, name="Bob's Cafe").save(force_insert=(Place,))
```

LANGUAGE: python
CODE:
```
Restaurant(pk=1, name="Bob's Cafe", rating=4).save(force_insert=(Place, Rating))
```

----------------------------------------

TITLE: Example Hashed CSS Output After Processing
DESCRIPTION: This CSS snippet shows the result after Django's `ManifestStaticFilesStorage` processes a file containing an `@import` rule. The original path (`../admin/css/base.css`) is replaced with its corresponding hashed version (`../admin/css/base.27e20196a850.css`), demonstrating the core functionality of the storage backend.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_3

LANGUAGE: css
CODE:
```
.. code-block:: css

    @import url("../admin/css/base.27e20196a850.css");
```

----------------------------------------

TITLE: Configuring Remote Users After Authentication in Django (Python)
DESCRIPTION: A method called by `RemoteUserBackend` immediately after fetching or creating a user during authentication. It allows for custom configuration of the user object (e.g., setting group memberships based on LDAP attributes). Receives the `request` (optional), the `user` object, and a boolean `created` indicating if the user was just created. Returns the configured user object. `aconfigure_user` is called from async contexts, `configure_user` from sync.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_14

LANGUAGE: python
CODE:
```
configure_user(request, user, created=True)
```

LANGUAGE: python
CODE:
```
aconfigure_user(request, user, created=True)
```

----------------------------------------

TITLE: Generating Messages Following Symlinks - Shell
DESCRIPTION: An example showing how to use the `django-admin makemessages` command with the `--symlinks` (`-s`) option. This option instructs the command to follow symbolic links when searching for new translation strings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_19

LANGUAGE: Shell
CODE:
```
django-admin makemessages --locale=de --symlinks
```

----------------------------------------

TITLE: Using auto_id Setting with Django BoundFields
DESCRIPTION: Shows how the auto_id setting affects the HTML output of form fields, specifically whether ID attributes are included.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_34

LANGUAGE: python
CODE:
```
>>> f = ContactForm(auto_id=False)
>>> print(f["message"])
<input type="text" name="message" required>
>>> f = ContactForm(auto_id="id_%s")
>>> print(f["message"])
<input type="text" name="message" id="id_message" required>
```

----------------------------------------

TITLE: FormMixin Class Definition in Django
DESCRIPTION: A mixin class that provides form creation and display functionality. Includes methods for handling form initialization, processing, and success/error handling.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-editing.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class FormMixin:
    initial = {}
    form_class = None
    success_url = None
    prefix = None

    def get_initial(self):
        return self.initial.copy()

    def get_form_class(self):
        return self.form_class

    def get_form(self, form_class=None):
        if form_class is None:
            form_class = self.get_form_class()
        return form_class(**self.get_form_kwargs())
```

----------------------------------------

TITLE: Defining TemplateView Class in Django
DESCRIPTION: Renders a template with a given context. Extends View with template rendering capabilities.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class TemplateView():
    # Attributes
    content_type
    extra_context
    http_method_names
    response_class
    template_engine
    template_name

    # Methods
    as_view()
    dispatch()
    get()
    get_context_data()
    head()
    http_method_not_allowed()
    render_to_response()
    setup()
```

----------------------------------------

TITLE: Customizing Static Files Storage Permissions in Django
DESCRIPTION: This snippet demonstrates how to create a custom StaticFilesStorage subclass to set custom file and directory permissions for collected static files. It overrides the __init__ method to set custom permission modes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib.staticfiles import storage


class MyStaticFilesStorage(storage.StaticFilesStorage):
    def __init__(self, *args, **kwargs):
        kwargs["file_permissions_mode"] = 0o640
        kwargs["directory_permissions_mode"] = 0o760
        super().__init__(*args, **kwargs)
```

----------------------------------------

TITLE: Querying Zipcode Polygons Crossing Geometry in Django
DESCRIPTION: Shows how to use the crosses spatial lookup to filter Zipcode objects whose polygon spatially crosses a given geometry.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__crosses=geom)
```

----------------------------------------

TITLE: Generating Random UUIDs in Django with PostgreSQL
DESCRIPTION: Demonstrates the usage of the RandomUUID function to update Article objects with version 4 UUIDs. This function is specific to PostgreSQL and available from django.contrib.postgres.functions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/functions.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.contrib.postgres.functions import RandomUUID
>>> Article.objects.update(uuid=RandomUUID())
```

----------------------------------------

TITLE: Accessing LiveServerTestCase Port in Django 1.11.2
DESCRIPTION: New functionality allowing binding to a specific port through LiveServerTestCase.port attribute. This feature was reintroduced following changes to port zero binding behavior in Django 1.11.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.2.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
LiveServerTestCase.port
```

----------------------------------------

TITLE: Querying Zipcode Polygons Containing Geometry in Django
DESCRIPTION: Demonstrates using the bbcontains spatial lookup to filter Zipcode objects whose polygon bounding box contains a given geometry.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__bbcontains=geom)
```

----------------------------------------

TITLE: Octal Mode Prefix Explanation
DESCRIPTION: This snippet emphasizes the importance of prefixing file modes with "0o" to denote octal numbers in Python, ensuring correct behavior when specifying file permission modes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_41

LANGUAGE: plaintext
CODE:
```
Always prefix the mode with `0o`.

If you're not familiar with file modes, please note that the `0o` prefix
is very important: it indicates an octal number, which is the way that
modes must be specified. If you try to use `644`, you'll get totally
incorrect behavior.
```

----------------------------------------

TITLE: Defining WeekArchiveView Class in Django
DESCRIPTION: Class definition for WeekArchiveView, a generic date-based view for displaying weekly archives. It includes attributes and methods for handling week-specific functionality.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_13

LANGUAGE: Python
CODE:
```
class WeekArchiveView():
    # Attributes and methods listed in the documentation
    pass
```

----------------------------------------

TITLE: Creating a UniqueConstraint with Included Columns (Covering Index) in Python
DESCRIPTION: Illustrates how to add non-key columns to a `UniqueConstraint` using the `include` parameter, creating a covering index. This can improve query performance by allowing index-only scans. This example includes 'full_name' in the index defined on 'room' and 'date'. This feature is primarily supported by PostgreSQL.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_9

LANGUAGE: Python
CODE:
```
from django.db.models import UniqueConstraint

UniqueConstraint(name="unique_booking", fields=["room", "date"], include=["full_name"])
```

----------------------------------------

TITLE: Backward-Compatible Event Listener for Django < 4.1
DESCRIPTION: This JavaScript snippet provides a backward-compatible way to handle inline form events in Django versions older than 4.1. It uses jQuery for older versions and falls back to the modern event listener for newer versions, checking for the presence of 'event.detail.formsetName'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/javascript.txt#2025-04-23_snippet_2

LANGUAGE: javascript
CODE:
```
function handleFormsetAdded(row, formsetName) {
    // Do something
}

$(document).on('formset:added', (event, $row, formsetName) => {
    if (event.detail && event.detail.formsetName) {
        // Django >= 4.1
        handleFormsetAdded(event.target, event.detail.formsetName)
    } else {
        // Django < 4.1, use $row and formsetName
        handleFormsetAdded($row.get(0), formsetName)
    }
})
```

----------------------------------------

TITLE: Using textContent Instead of innerHTML in JavaScript for XSS Prevention (Django Admin)
DESCRIPTION: Details the fix for an XSS vulnerability in Django's admin add/change related popup. Unsafe usage of `Element.innerHTML` was replaced with `Element.textContent` to prevent arbitrary script execution by treating content as plain text. This change enhances security and was also applied to the debug view.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.14.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
Element.innerHTML
```

LANGUAGE: javascript
CODE:
```
Element.textContent
```

----------------------------------------

TITLE: Stored Procedure Call Example
DESCRIPTION: Example of calling an Oracle stored procedure using Django's database cursor.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_14

LANGUAGE: sql
CODE:
```
CREATE PROCEDURE "TEST_PROCEDURE"(v_i INTEGER, v_text NVARCHAR2(10)) AS
    p_i INTEGER;
    p_text NVARCHAR2(10);
BEGIN
    p_i := v_i;
    p_text := v_text;
    ...
END;
```

LANGUAGE: python
CODE:
```
with connection.cursor() as cursor:
    cursor.callproc("test_procedure", [1, "test"])
```

----------------------------------------

TITLE: Adding Database-Generated Annotations with raw()
DESCRIPTION: Example of using raw SQL to include database-generated values (like age calculations in PostgreSQL) in query results, which can be accessed as model attributes.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
>>> people = Person.objects.raw("SELECT *, age(birth_date) AS age FROM myapp_person")
>>> for p in people:
...     print("%s is %s." % (p.first_name, p.age))
...
John is 37.
Jane is 42.
...
```

----------------------------------------

TITLE: Setting Django Colors with Base Palette (Shell)
DESCRIPTION: This shell command sets the DJANGO_COLORS environment variable, first loading colors from the 'light' palette. It then overrides the colors for the 'error' and 'notice' roles with custom specifications.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_56

LANGUAGE: shell
CODE:
```
export DJANGO_COLORS="light;error=yellow/blue,blink;notice=magenta"
```

----------------------------------------

TITLE: Setting Up Test Databases in Python
DESCRIPTION: This function creates test databases by calling setup_databases. It's used to prepare the database environment for running tests.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
def setup_databases(verbosity, interactive, *, time_keeper=None, keepdb=False, debug_sql=False, parallel=0, aliases=None, serialized_aliases=None, **kwargs):
    # Create test databases
    # Return data structure for teardown
```

----------------------------------------

TITLE: Case-Insensitive Suffix Matching - SQL Equivalent
DESCRIPTION: Shows the SQL equivalent for a case-insensitive endswith (suffix) filter using ILIKE and the % wildcard pattern in the WHERE clause. Works in SQL databases supporting ILIKE (such as PostgreSQL). Takes a string pattern and matches any value ending with the specified substring, regardless of case. Not universally supported on all SQL backends.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_99

LANGUAGE: sql
CODE:
```
SELECT ... WHERE headline ILIKE '%Lennon'
```

----------------------------------------

TITLE: Example HTML Output of Named Cycle Tag Usage (Django)
DESCRIPTION: Provides the expected HTML output for the preceding example that uses a named `{% cycle %}` tag (`rowcolors`). It demonstrates how the first row uses 'row1' for both cells (due to referencing the current value), and the second row uses 'row2' for both cells after the cycle is advanced.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_9

LANGUAGE: html+django
CODE:
```
<tr>
    <td class="row1">...</td>
    <td class="row1">...</td>
</tr>
<tr>
    <td class="row2">...</td>
    <td class="row2">...</td>
</tr>
```

----------------------------------------

TITLE: Multi-Database TabularInline Implementation
DESCRIPTION: Custom InlineModelAdmin class for handling inline models with multiple databases in Django's admin interface.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
class MultiDBTabularInline(admin.TabularInline):
    using = "other"

    def get_queryset(self, request):
        return super().get_queryset(request).using(self.using)

    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        return super().formfield_for_foreignkey(
            db_field, request, using=self.using, **kwargs
        )

    def formfield_for_manytomany(self, db_field, request, **kwargs):
        return super().formfield_for_manytomany(
            db_field, request, using=self.using, **kwargs
        )
```

----------------------------------------

TITLE: Using unit_attname Method for Unit Conversion
DESCRIPTION: Demonstrates the use of unit_attname class method to get the attribute abbreviation for different unit names.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/measure.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> print(Distance.unit_attname("US Survey Foot"))
survey_ft
>>> print(Distance.unit_attname("centimeter"))
cm
```

----------------------------------------

TITLE: Updated manage.py Script Structure in Django 1.4 (Python)
DESCRIPTION: This snippet shows the recommended structure for the `manage.py` file in Django 1.4 projects. It sets the `DJANGO_SETTINGS_MODULE` environment variable and uses `execute_from_command_line` to handle management commands, addressing path and import issues present in previous versions. `{{ project_name }}` should be replaced with the project's Python package name.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
#!/usr/bin/env python
import os, sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "{{ project_name }}.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)
```

----------------------------------------

TITLE: Referencing Django Storage Constant (RST)
DESCRIPTION: This snippet references the `OS_OPEN_FLAGS` constant, likely used within `FileSystemStorage`. The context is adjusting the `stacklevel` for a deprecation warning related to this constant to ensure it points to the correct call site.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_8

LANGUAGE: restructuredtext
CODE:
```
``OS_OPEN_FLAGS``
```

----------------------------------------

TITLE: Closing Cache Connection in Django
DESCRIPTION: Shows how to close the connection to the cache using the close() method, if implemented by the cache backend.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_34

LANGUAGE: pycon
CODE:
```
>>> cache.close()
```

----------------------------------------

TITLE: Running Django Test Coverage Commands
DESCRIPTION: Console commands for running test coverage analysis on Django test suite using coverage tool with sqlite settings.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_13

LANGUAGE: console
CODE:
```
$ coverage run ./runtests.py --settings=test_sqlite
$ coverage combine
$ coverage html
```

----------------------------------------

TITLE: Checking Future Question Publication in Django Shell
DESCRIPTION: This snippet demonstrates how to use the Django shell to check if a Question instance with a future publication date is incorrectly considered as recently published.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_0

LANGUAGE: pycon
CODE:
```
>>> import datetime
>>> from django.utils import timezone
>>> # create a Question instance with pub_date 30 days in the future
>>> future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=30))
>>> # was it published recently?
>>> future_question.was_published_recently()
True
```

----------------------------------------

TITLE: Explicitly Setting AutoField as Primary Key in Django Model
DESCRIPTION: Defines an AutoField as the primary key in a Django model to maintain the historical behavior.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
from django.db import models


class MyModel(models.Model):
    id = models.AutoField(primary_key=True)
```

----------------------------------------

TITLE: Creating SQL Tables for Django Models
DESCRIPTION: This SQL snippet shows the creation of database tables for Django models, including foreign key constraints and indexes. It demonstrates how Django translates model definitions into database-specific SQL statements.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_3

LANGUAGE: sql
CODE:
```
"choice_text" varchar(200) NOT NULL,
"votes" integer NOT NULL,
"question_id" bigint NOT NULL
);
ALTER TABLE "polls_choice"
  ADD CONSTRAINT "polls_choice_question_id_c5b4b260_fk_polls_question_id"
    FOREIGN KEY ("question_id")
    REFERENCES "polls_question" ("id")
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "polls_choice_question_id_c5b4b260" ON "polls_choice" ("question_id");

COMMIT;
```

----------------------------------------

TITLE: Preventing Directory Traversal in Storage.save() (Python)
DESCRIPTION: Custom Storage subclasses that override generate_filename() without proper path validation were vulnerable to directory traversal attacks when calling save(). This affects classes derived from django.core.files.storage.Storage.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.14.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
django.core.files.storage.Storage.generate_filename()
```

LANGUAGE: python
CODE:
```
django.core.files.storage.Storage.save()
```

----------------------------------------

TITLE: Specifying opclasses for PostgreSQL Indexes with Django ORM (Python)
DESCRIPTION: Shows how to associate specific PostgreSQL operator classes with model fields in an index by using the 'opclasses' keyword. This ensures the index will use the specified operator class for advanced indexing strategies like 'jsonb_path_ops' in a GIN index. 'name', 'fields', and 'opclasses' must all be provided and matched in length; limitations include that opclasses are ignored by other database backends.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/indexes.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
GinIndex(name='json_index', fields=['jsonfield'], opclasses=['jsonb_path_ops'])
```

----------------------------------------

TITLE: Parsing Until an End Tag in Django Compilation Function (Python)
DESCRIPTION: This Python function `do_comment` demonstrates how to implement the compilation logic for a paired Django template tag (like `{% comment %}`...`{% endcomment %}`). It uses `parser.parse(('endcomment',))` to collect all template nodes encountered until the `{% endcomment %}` tag. `parser.delete_first_token()` removes the opening tag token itself. Finally, it returns a `CommentNode` instance, which will handle the rendering (or lack thereof) of the parsed content.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_38

LANGUAGE: python
CODE:
```
def do_comment(parser, token):
    nodelist = parser.parse(("endcomment",))
    parser.delete_first_token()
    return CommentNode()
```

----------------------------------------

TITLE: Enabling Oracle Connection Pool (Custom) - Django Python
DESCRIPTION: Enables and customizes the connection pool for the Oracle backend. Setting the "pool" option to a dictionary within `OPTIONS` allows passing specific parameters (like minimum and maximum connections) to the `oracledb` driver's `create_pool()` function, overriding defaults.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_20

LANGUAGE: python
CODE:
```
DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.oracle",
            "# ...": "",
            "OPTIONS": {
                "pool": {
                    "min": 1,
                    "max": 10,
                    "# ...": ""
                }
            },
        },
    }
```

----------------------------------------

TITLE: Adding Fractional Seconds to MySQL DateTime Column - SQL
DESCRIPTION: This SQL command snippet illustrates how to modify an existing MySQL DATETIME column to include support for fractional seconds by specifying the precision (e.g., DATETIME(6)) in an ALTER TABLE statement. This is necessary if Django's DateTimeField should store fractional seconds on legacy columns, as Django doesn't auto-upgrade them.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_10

LANGUAGE: SQL
CODE:
```
ALTER TABLE `your_table` MODIFY `your_datetime_column` DATETIME(6)
```

----------------------------------------

TITLE: Feed Item Title and Description Configuration in Django
DESCRIPTION: Methods and attributes for setting feed item titles and descriptions. Shows both dynamic and static approaches.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
item_title = "Breaking News: Nothing Happening"  # Hard-coded title.

item_description = "A description of the item."  # Hard-coded description.

def item_title(self, item):
    """
    Takes an item, as returned by items(), and returns the item's
    title as a normal Python string.
    """

def item_description(self, item):
    """
    Takes an item, as returned by items(), and returns the item's
    description as a normal Python string.
    """
```

----------------------------------------

TITLE: Django File Upload Temporary Directory Setting
DESCRIPTION: Defines the `FILE_UPLOAD_TEMP_DIR` setting, specifying the directory for temporarily storing large upload files in Django. Defaults to `None`, utilizing the OS's temporary directory if unspecified.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_42

LANGUAGE: plaintext
CODE:
```
FILE_UPLOAD_TEMP_DIR
------------------------

Default: `None`

The directory to store data to (typically files larger than
:setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`) temporarily while uploading files.
If `None`, Django will use the standard temporary directory for the operating
system. For example, this will default to `/tmp` on *nix-style operating
systems.

See :doc:`/topics/files` for details.
```

----------------------------------------

TITLE: Customizing BoundField CSS Classes in Django Forms
DESCRIPTION: This snippet demonstrates how to add a custom CSS class to all form fields by overriding the BoundField class. It includes a custom WrappedBoundField class and shows how to use it in a UserForm.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_42

LANGUAGE: python
CODE:
```
class WrappedBoundField(BoundField):
    def css_classes(self, extra_classes=None):
        parent_css_classes = super().css_classes(extra_classes)
        return f"field-class {parent_css_classes}".strip()


class UserForm(forms.Form):
    bound_field_class = WrappedBoundField
    name = CharField()
```

----------------------------------------

TITLE: Specifying mysqlclient Package Dependency for Django
DESCRIPTION: This line defines the minimum required version of the mysqlclient package for Django. It ensures compatibility with MySQL databases in Django projects.
SOURCE: https://github.com/django/django/blob/main/tests/requirements/mysql.txt#2025-04-23_snippet_0

LANGUAGE: Plain Text
CODE:
```
mysqlclient >= 2.2.1
```

----------------------------------------

TITLE: Default HTML Structure for CheckboxSelectMultiple
DESCRIPTION: Illustrates the default HTML structure generated by the Django CheckboxSelectMultiple widget. It typically renders an outer div containing multiple inner divs, each wrapping one checkbox input element.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_20

LANGUAGE: html
CODE:
```
<div>
  <div><input type="checkbox" name="..." ></div>
  ...
</div>
```

----------------------------------------

TITLE: Using QuerySet.extra() to add custom SQL select and where clauses in Django
DESCRIPTION: This code snippet demonstrates how to use Django's QuerySet.extra() method to include additional custom SQL fields in select statements and to add explicit WHERE and FROM clauses. It highlights how to construct complex queries with custom SQL, including parameter substitution and subqueries. Dependencies include Django's ORM and RawSQL expressions. It outputs a QuerySet with extra fields or conditions, allowing for flexible and advanced query customization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_56

LANGUAGE: Python
CODE:
```
qs.extra(
    select={"val": "select col from sometable where othercol = %s"},
    select_params=(someparam,),
)
```

LANGUAGE: Python
CODE:
```
qs.annotate(val=RawSQL("select col from sometable where othercol = %s", (someparam,)))
```

LANGUAGE: Python
CODE:
```
Entry.objects.extra(
    select={"is_recent": "pub_date > '2006-01-01'"}
)
```

LANGUAGE: Python
CODE:
```
Blog.objects.extra(
    select={
        "entry_count": "SELECT COUNT(*) FROM blog_entry WHERE blog_entry.blog_id = blog_blog.id"
    },
)
```

LANGUAGE: Python
CODE:
```
Blog.objects.extra(
    select={"a": "%s", "b": "%s"},
    select_params=("one", "two"),
)
```

LANGUAGE: Python
CODE:
```
Entry.objects.extra(where=["foo='a' OR bar = 'a'", "baz = 'a'"])
```

LANGUAGE: Python
CODE:
```
Entry.objects.extra(
    where=["foo='a' OR bar='a'"],
    tables=["custom_table"]
)
```

LANGUAGE: Python
CODE:
```
q = Entry.objects.extra(select={"is_recent": "pub_date > '2006-01-01'"})
q = q.extra(order_by=["-is_recent"])

```

LANGUAGE: Python
CODE:
```
Entry.objects.extra(where=["headline=%s"], params=["Lennon"])
```

----------------------------------------

TITLE: Configuring Database Routers in Django Settings
DESCRIPTION: Example of configuring the DATABASE_ROUTERS setting in Django to use the AuthRouter and PrimaryReplicaRouter classes.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
DATABASE_ROUTERS = ["path.to.AuthRouter", "path.to.PrimaryReplicaRouter"]
```

----------------------------------------

TITLE: Applying random Filter in Django Templates
DESCRIPTION: The random filter returns a random item from the given list.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_82

LANGUAGE: html+django
CODE:
```
{{ value|random }}
```

----------------------------------------

TITLE: Migration Example for Handling ExclusionConstraint Changes in Django
DESCRIPTION: Python code for creating a Django migration that uses SeparateDatabaseAndState to update the migration state without running SQL operations when changing from deprecated opclasses to OpClass() in ExclusionConstraint.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class Migration(migrations.Migration):
    ...

    operations = [
        migrations.SeparateDatabaseAndState(
            database_operations=[],
            state_operations=[
                migrations.RemoveConstraint(...),
                migrations.AddConstraint(...),
            ],
        ),
    ]
```

----------------------------------------

TITLE: Defining MonthArchiveView Class in Django
DESCRIPTION: Class definition for MonthArchiveView, a generic date-based view for displaying monthly archives. It includes attributes and methods for handling month-specific functionality.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_12

LANGUAGE: Python
CODE:
```
class MonthArchiveView():
    # Attributes and methods listed in the documentation
    pass
```

----------------------------------------

TITLE: Retrieving objects by non-indexed columns in Django
DESCRIPTION: Shows a less efficient way to retrieve objects using a non-indexed column. This query may be slower as the database cannot use an index to locate the record quickly.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> entry = Entry.objects.get(headline="News Item Title")
```

----------------------------------------

TITLE: Retrieving Dated Items in Django BaseDateListView
DESCRIPTION: The get_dated_items() method returns a 3-tuple containing date_list, object_list, and extra_context. It provides the core functionality for retrieving date-based data in the view.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
def get_dated_items():
    Returns a 3-tuple containing (``date_list``, ``object_list``,
    ``extra_context``).

    ``date_list`` is the list of dates for which data is available.
    ``object_list`` is the list of objects. ``extra_context`` is a
    dictionary of context data that will be added to any context data
    provided by the
    :class:`~django.views.generic.list.MultipleObjectMixin`.
```

----------------------------------------

TITLE: Using Log Function in Django Models
DESCRIPTION: Demonstrates using the Log function to calculate logarithm of vector coordinates
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
>>> Vector.objects.create(x=2.0, y=4.0)
>>> vector = Vector.objects.annotate(log=Log("x", "y")).get()
>>> vector.log
2.0
```

----------------------------------------

TITLE: Fixing FieldListFilter.get_queryset() Crash in Python
DESCRIPTION: Fixed admin's FieldListFilter.get_queryset() crash on invalid input.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
FieldListFilter.get_queryset()
```

----------------------------------------

TITLE: Custom Assertions for Django TestCase
DESCRIPTION: Examples of custom assertion methods provided by Django's TestCase class for testing web applications, including assertions for form fields, HTTP responses, and template usage.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_40

LANGUAGE: python
CODE:
```
with self.assertRaisesMessage(ValueError, "invalid literal for int()"):
    int("a")
```

LANGUAGE: python
CODE:
```
self.assertFieldOutput(
    EmailField, {"a@a.com": "a@a.com"}, {"aaa": ["Enter a valid email address."]}
)
```

LANGUAGE: python
CODE:
```
self.assertFormError(form, field, errors, msg_prefix='')
```

LANGUAGE: python
CODE:
```
self.assertFormSetError(formset, form_index, field, errors, msg_prefix='')
```

LANGUAGE: python
CODE:
```
self.assertContains(response, text, count=None, status_code=200, msg_prefix='', html=False)
```

LANGUAGE: python
CODE:
```
self.assertNotContains(response, text, status_code=200, msg_prefix='', html=False)
```

LANGUAGE: python
CODE:
```
self.assertTemplateUsed(response, template_name, msg_prefix='', count=None)
```

----------------------------------------

TITLE: Resetting Language in Django Test Teardown
DESCRIPTION: Shows how to reset the active language to the default language code in the tearDown method of a Django test. This ensures language preferences don't leak between tests.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
def tearDown(self):
    translation.activate(settings.LANGUAGE_CODE)
```

----------------------------------------

TITLE: Correcting DisallowedModelAdminLookup Exception in Python
DESCRIPTION: Fixed an incorrect DisallowedModelAdminLookup exception when using a nested reverse relation in list_filter.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
list_filter = ['nested__reverse__relation']
```

----------------------------------------

TITLE: Configuring Basic ModelAdmin Fields in Django
DESCRIPTION: Demonstrates how to set up basic field configurations for a ModelAdmin class, including excluding fields and specifying a subset of fields to display.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
fields = ["name", "title"]


class AuthorAdmin(admin.ModelAdmin):
    exclude = ["birth_date"]
```

----------------------------------------

TITLE: Using Localize Template Filter in Django Templates
DESCRIPTION: Example of using the 'localize' template filter to force localization of a single value in a Django template. This allows applying locale-specific formatting to individual values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/formatting.txt#2025-04-23_snippet_2

LANGUAGE: html+django
CODE:
```
{% load l10n %}

{{ value|localize }}
```

----------------------------------------

TITLE: Referencing Prefixed Static Files in Django Template
DESCRIPTION: Demonstrates how to reference a static file using the static template tag with a namespace prefix that was configured in STATICFILES_DIRS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_82

LANGUAGE: html+django
CODE:
```
<a href="{% static 'downloads/polls_20101022.tar.gz' %}">
```

----------------------------------------

TITLE: Implementing Custom Exception Reporter in Django
DESCRIPTION: Demonstrates how to create a custom exception reporter by subclassing Django's ExceptionReporter and overriding the get_traceback_data method.
SOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
from django.views.debug import ExceptionReporter


class CustomExceptionReporter(ExceptionReporter):
    def get_traceback_data(self):
        data = super().get_traceback_data()
        # ... remove/add something here ...
        return data
```

----------------------------------------

TITLE: Configuring Log Formatters in Django
DESCRIPTION: Shows how to define formatters for customizing log output with different verbosity levels.
SOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
"formatters": {
    "verbose": {
        "format": "{name} {levelname} {asctime} {module} {process:d} {thread:d} {message}",
        "style": "{",
    },
    "simple": {
        "format": "{levelname} {message}",
        "style": "{",
    },
}
```

----------------------------------------

TITLE: Converting Objects to Bytestrings with smart_bytes
DESCRIPTION: Returns a bytestring version of an arbitrary object, encoded as specified. Can optionally skip conversion of non-string-like objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict')
```

----------------------------------------

TITLE: Basic Store Price Aggregation in Django
DESCRIPTION: Shows how to find minimum and maximum book prices across all stores using Django's Min and Max aggregation functions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
Store.objects.aggregate(min_price=Min("books__price"), max_price=Max("books__price"))
```

----------------------------------------

TITLE: Django Debug Configuration Setting
DESCRIPTION: Example of the debug setting that should be disabled in production to prevent access to the technical 500 debug page that contained the XSS vulnerability CVE-2017-12794.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.8.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
DEBUG = True
```

----------------------------------------

TITLE: Comparing Django Models with Custom Primary Key
DESCRIPTION: Demonstrates that Django model comparisons work with any primary key field name, not just 'id', by comparing the primary key values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_46

LANGUAGE: python
CODE:
```
>>> some_obj == other_obj
>>> some_obj.name == other_obj.name
```

----------------------------------------

TITLE: Replacing models.permalink() decorator with reverse() in Python
DESCRIPTION: Example of migrating from the deprecated models.permalink() decorator to using django.urls.reverse() directly in a model method.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.db import models


class MyModel(models.Model):
    ...

    @models.permalink
    def url(self):
        return ("guitarist_detail", [self.slug])
```

LANGUAGE: Python
CODE:
```
from django.db import models
from django.urls import reverse


class MyModel(models.Model):
    ...

    def url(self):
        return reverse("guitarist_detail", args=[self.slug])
```

----------------------------------------

TITLE: Accessing Custom Storage in Django
DESCRIPTION: Shows how to access a custom storage that has been configured in the STORAGES setting using its alias from the storages dictionary.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-file-storage.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.core.files.storage import storages

example_storage = storages["example"]
```

----------------------------------------

TITLE: Implementing MySQL-Specific NotEqual Lookup in Django
DESCRIPTION: Creates a custom NotEqual lookup for MySQL that uses '!=' instead of '<>' operator. This demonstrates how to provide database-specific implementations for lookups.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
class MySQLNotEqual(NotEqual):
    def as_mysql(self, compiler, connection, **extra_context):
        lhs, lhs_params = self.process_lhs(compiler, connection)
        rhs, rhs_params = self.process_rhs(compiler, connection)
        params = lhs_params + rhs_params
        return "%s != %s" % (lhs, rhs), params


Field.register_lookup(MySQLNotEqual)
```

----------------------------------------

TITLE: Accessing Properties of Lazy-Loaded GEOSGeometry Objects (Python)
DESCRIPTION: Illustrates the concept of lazy geometries in GeoDjango. Accessing the geometry field (`sm.mpoly`) on a retrieved model instance triggers the creation of a `GEOSGeometry` object. This snippet then shows how to access various representations (WKT, WKB, GeoJSON) of this loaded geometry object. Requires the `WorldBorder` model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_17

LANGUAGE: pycon
CODE:
```
>>> sm = WorldBorder.objects.get(name="San Marino")
>>> sm.mpoly
<MultiPolygon object at 0x24c6798>
>>> sm.mpoly.wkt  # WKT
MULTIPOLYGON (((12.4157980000000006 43.9579540000000009, 12.4505540000000003 43.9797209999999978, ...
>>> sm.mpoly.wkb  # WKB (as Python binary buffer)
<read-only buffer for 0x1fe2c70, size -1, offset 0 at 0x2564c40>
>>> sm.mpoly.geojson  # GeoJSON
'{ "type": "MultiPolygon", "coordinates": [ [ [ [ 12.415798, 43.957954 ], [ 12.450554, 43.979721 ], ...`
```

----------------------------------------

TITLE: Defining YearMixin Class in Django
DESCRIPTION: YearMixin class provides functionality for retrieving and parsing the year component of a date. It includes methods for getting the year format, retrieving the year value, and navigating to next and previous years.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class YearMixin:
    year_format = '%Y'
    year = None

    def get_year_format(self):
        return self.year_format

    def get_year(self):
        # Implementation details omitted
        pass

    def get_next_year(self, date):
        # Implementation details omitted
        pass

    def get_previous_year(self, date):
        # Implementation details omitted
        pass
```

----------------------------------------

TITLE: Deferring Model Fields in Raw Queries
DESCRIPTION: Example demonstrating how to selectively include fields in a raw query, with Django automatically deferring the loading of omitted fields until they are accessed.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> people = Person.objects.raw("SELECT id, first_name FROM myapp_person")
```

----------------------------------------

TITLE: Moving Objects Between Databases in Django
DESCRIPTION: Example showing the process of moving a Django model instance from one database to another using the save() method with the using parameter.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
p = Person(name="Fred")
p.save(using="first")  # (statement 1)
p.save(using="second")  # (statement 2)
```

----------------------------------------

TITLE: Applying slugify Filter in Django Templates
DESCRIPTION: The slugify filter converts a string to ASCII, converts spaces to hyphens, removes non-alphanumeric characters, and converts to lowercase.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_86

LANGUAGE: html+django
CODE:
```
{{ value|slugify }}
```

----------------------------------------

TITLE: Python Import Warning Example
DESCRIPTION: Example of an import warning message when the project locale directory conflicts with Python standard library.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_13

LANGUAGE: pytb
CODE:
```
/usr/lib/python2.6/gettext.py:49: ImportWarning: Not importing directory '/path/to/project/locale': missing __init__.py.
import locale, copy, os, re, struct, sys
```

----------------------------------------

TITLE: Custom Form Class in Django ModelAdmin
DESCRIPTION: Example of customizing form class based on user permissions by overriding get_form method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_47

LANGUAGE: python
CODE:
```
class MyModelAdmin(admin.ModelAdmin):
    def get_form(self, request, obj=None, **kwargs):
        if request.user.is_superuser:
            kwargs["form"] = MySuperuserForm
        return super().get_form(request, obj, **kwargs)
```

----------------------------------------

TITLE: Callable Variables in Django Templates
DESCRIPTION: Shows how Django templates handle callable variables and method invocations during template rendering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> class PersonClass2:
...     def name(self):
...         return "Samantha"
...
>>> t = Template("My name is {{ person.name }}.")
>>> t.render(Context({"person": PersonClass2}))
"My name is Samantha."
```

----------------------------------------

TITLE: Fixing Regression in Django's LocaleMiddleware
DESCRIPTION: Resolves a crash in LocaleMiddleware when processing language codes longer than 500 characters, addressing a regression introduced in Django 4.2.14.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.15.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
LocaleMiddleware
```

----------------------------------------

TITLE: Fixed WKBWriter Methods for Empty Polygons
DESCRIPTION: Bug fix for WKBWriter.write() and write_hex() methods when handling empty polygons on GEOS 3.6.1+ systems.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.14.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
WKBWriter.write()
WKBWriter.write_hex()
```

----------------------------------------

TITLE: Django Primary Key Lookups
DESCRIPTION: Examples of using the pk lookup shortcut for querying by primary key in different ways.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
>>> Blog.objects.get(id__exact=14)  # Explicit form
>>> Blog.objects.get(id=14)  # __exact is implied
>>> Blog.objects.get(pk=14)  # pk implies id__exact
>>> Blog.objects.filter(pk__in=[1, 4, 7])
```

----------------------------------------

TITLE: Creating a Bloom Index in Django with PostgreSQL
DESCRIPTION: Creates a Bloom index with optional length and columns parameters. Requires the bloom extension to be activated on PostgreSQL.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
BloomIndex(*expressions, length=None, columns=(), **options)
```

----------------------------------------

TITLE: Naive vs Aware DateTime Comparison
DESCRIPTION: Example showing TypeError when comparing naive and aware datetimes in Python.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
>>> from django.utils import timezone
>>> aware = timezone.now()
>>> naive = timezone.make_naive(aware)
>>> naive == aware
Traceback (most recent call last):
...
TypeError: can't compare offset-naive and offset-aware datetimes
```

----------------------------------------

TITLE: Arithmetic Operations with Distance Objects
DESCRIPTION: Demonstrates arithmetic operations (addition and subtraction) between Distance objects with different units.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/measure.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> print(d1 + d2)  # Adding 5 miles to 5 kilometers
13.04672 km
>>> print(d2 - d1)  # Subtracting 5 kilometers from 5 miles
1.89314403881 mi
```

----------------------------------------

TITLE: Using upper Filter in Django Templates
DESCRIPTION: Demonstrates the upper filter, which converts a string into all uppercase characters.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_98

LANGUAGE: html+django
CODE:
```
{{ value|upper }}
```

----------------------------------------

TITLE: Manual Template Rendering in Django
DESCRIPTION: Equivalent example showing manual template rendering without using the render() shortcut.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
from django.template import loader


def my_view(request):
    # View code here...
    t = loader.get_template("myapp/index.html")
    c = {"foo": "bar"}
    return HttpResponse(t.render(c, request), content_type="application/xhtml+xml")
```

----------------------------------------

TITLE: Applying distinct() on Specific Fields (Related - PostgreSQL) Python
DESCRIPTION: Applies DISTINCT ON (fields) on PostgreSQL, specifying a related model's field. Requires order_by() to match the distinct fields. Note that using the related model object field ('blog') may require explicit ordering by the ID ('blog_id') if the related model has default ordering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_10

LANGUAGE: Python
CODE:
```
>>> Entry.objects.order_by("blog").distinct("blog")
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'lower_inc' Lookup in Django Python
DESCRIPTION: Demonstrates the `lower_inc` lookup (`__lower_inc`) on the `ages` field. This query filters `Event` objects based on whether their `ages` range has an inclusive lower bound (represented by `[` in PostgreSQL). Requires the `Event` model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_31

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__lower_inc=True)
<QuerySet [<Event: Soft play>, <Event: Pub trip>]>
```

----------------------------------------

TITLE: Compiling Messages While Ignoring Directories
DESCRIPTION: Illustrates using the '--ignore' option with the 'compilemessages' command to skip compiling messages in directories matching glob-style patterns.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_9

LANGUAGE: Console
CODE:
```
django-admin compilemessages --ignore=cache --ignore=outdated/*/locale
```

----------------------------------------

TITLE: Adding Database Table Comment in Django Model Meta (Python)
DESCRIPTION: Defines a Django model `Answer` with a `db_table_comment` in its Meta class. This comment is added to the corresponding database table, providing documentation for direct database users.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
class Answer(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    answer = models.TextField()

    class Meta:
        db_table_comment = "Question answers"
```

----------------------------------------

TITLE: Implicitly Refreshing a Django Model Field via Deletion (Pycon)
DESCRIPTION: Demonstrates using the Python interactive console (`pycon`) how deleting a field attribute from a fetched Django model instance (`obj.field`) and subsequently accessing it (`obj.field`) implicitly triggers a database query to reload just that field's value.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_3

LANGUAGE: pycon
CODE:
```
>>> obj = MyModel.objects.first()
>>> del obj.field
>>> obj.field  # Loads the field from the database
```

----------------------------------------

TITLE: SQL Migration for Creating WorldBorder Model Table
DESCRIPTION: Shows the SQL that will be generated to create the database table for the WorldBorder model, including the geometry field for spatial data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_3

LANGUAGE: SQL
CODE:
```
BEGIN;
--
-- Create model WorldBorder
--
CREATE TABLE "world_worldborder" (
    "id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "name" varchar(50) NOT NULL,
    "area" integer NOT NULL,
    "pop2005" integer NOT NULL,
    "fips" varchar(2) NOT NULL,
    "iso2" varchar(2) NOT NULL,
    "iso3" varchar(3) NOT NULL,
    "un" integer NOT NULL,
    "region" integer NOT NULL,
    "subregion" integer NOT NULL,
    "lon" double precision NOT NULL,
    "lat" double precision NOT NULL
    "mpoly" geometry(MULTIPOLYGON,4326) NOT NULL
)
;
CREATE INDEX "world_worldborder_mpoly_id" ON "world_worldborder" USING GIST ("mpoly");
COMMIT;
```

----------------------------------------

TITLE: Streaming an HttpRequest with ElementTree in Django (Python)
DESCRIPTION: The snippet demonstrates passing a Django HttpRequest (which exposes a file-like interface) into xml.etree.ElementTree.iterparse() for efficient, memory-friendly XML parsing from request body. Assumes the request's body is an XML stream and that the xml.etree.ElementTree module is available. Each parsed element can be processed incrementally, useful for large XML payloads.
SOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
import xml.etree.ElementTree as ET

for element in ET.iterparse(request):
    process(element)

```

----------------------------------------

TITLE: Defining ModelForm with FileInput Widget for FileField - Django Forms - Python
DESCRIPTION: Shows how to define a ModelForm for a Document model, manually specifying the FileInput widget for the document FileField. This approach disables Django's default ClearableFileInput checkbox for clearing files, restoring legacy behavior when a file field is not required to support clearing values. Requires django.forms and a custom Document model accessible in myapp.models. The code sets the widgets dict in Meta with the document field mapped to forms.FileInput.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django import forms
from myapp.models import Document


class DocumentForm(forms.ModelForm):
    class Meta:
        model = Document
        widgets = {"document": forms.FileInput}
```

----------------------------------------

TITLE: Flattening a Django Context Stack to a Dictionary (Python)
DESCRIPTION: Demonstrates the use of the Context.flatten() method in Django to gather all contextual variables—including built-ins—into a single dictionary. This is useful for inspection, debugging, or test assertions. Assumes a valid Django Context object with custom and default variables. Outputs a dictionary containing all stack variables; no input required beyond the context instance.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> c = Context()
>>> c["foo"] = "first level"
>>> c.update({"bar": "second level"})
{'bar': 'second level'}
>>> c.flatten()
{'True': True, 'None': None, 'foo': 'first level', 'False': False, 'bar': 'second level'}
```

----------------------------------------

TITLE: Using Sin Function in Django Models
DESCRIPTION: Shows how to calculate sine values and register Sin as a transform
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Sin
>>> Vector.objects.create(x=5.4, y=-2.3)
>>> vector = Vector.objects.annotate(x_sin=Sin("x"), y_sin=Sin("y")).get()
>>> vector.x_sin, vector.y_sin
(-0.7727644875559871, -0.7457052121767203)
```

LANGUAGE: python
CODE:
```
>>> from django.db.models import FloatField
>>> from django.db.models.functions import Sin
>>> FloatField.register_lookup(Sin)
>>> # Get vectors whose sin() is less than 0
>>> vectors = Vector.objects.filter(x__sin__lt=0, y__sin__lt=0)
```

----------------------------------------

TITLE: Generating .po File Entries for Translations
DESCRIPTION: Example of how Django generates .po file entries for various types of translatable strings in templates.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_31

LANGUAGE: po
CODE:
```
#. Translators: View verb
# path/to/template/file.html:10
msgid "View"
msgstr ""

#. Translators: Short intro blurb
# path/to/template/file.html:13
msgid ""
"A multiline translatable"
"literal."
msgstr ""

# ...

#. Translators: Label of a button that triggers search
# path/to/template/file.html:100
msgid "Go"
msgstr ""

#. Translators: This is a text of the base template
# path/to/template/file.html:103
msgid "Ambiguous translatable block of text"
msgstr ""
```

----------------------------------------

TITLE: Referencing Django Setting in Python
DESCRIPTION: This snippet demonstrates how to reference a Django setting in Python code. It specifically mentions the new DATA_UPLOAD_MAX_NUMBER_FILES setting, which is introduced to mitigate the potential denial-of-service vulnerability in file uploads.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.7.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
:setting:`DATA_UPLOAD_MAX_NUMBER_FILES`
```

----------------------------------------

TITLE: Querying Zipcode Polygons Contained by Geometry in Django
DESCRIPTION: Illustrates using the contained spatial lookup to filter Zipcode objects whose polygon bounding box is completely contained by a given geometry.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__contained=geom)
```

----------------------------------------

TITLE: Using Django Statistical Regression Aggregates
DESCRIPTION: Illustrates how to apply statistical aggregate functions in Django. It shows `RegrCount` calculating the count of pairs where both `y` ('field3') and `x` ('field2') are non-null, and `RegrAvgX`/`RegrAvgY` computing the average of the independent ('field2') and dependent ('field3') variables respectively.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_7

LANGUAGE: pycon
CODE:
```
>>> TestModel.objects.aggregate(count=RegrCount(y="field3", x="field2"))
{'count': 2}
>>> TestModel.objects.aggregate(
...     avgx=RegrAvgX(y="field3", x="field2"), avgy=RegrAvgY(y="field3", x="field2")
... )
{'avgx': 2, 'avgy': 13}
```

----------------------------------------

TITLE: Specifying SSL Certificate File for SMTP Client Authentication in Django
DESCRIPTION: Sets the path to a PEM-formatted certificate chain file (None by default) for client authentication if EMAIL_USE_SSL or EMAIL_USE_TLS is True. Requires EMAIL_SSL_KEYFILE to be set as well.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_34

LANGUAGE: python
CODE:
```
EMAIL_SSL_CERTFILE = None
```

----------------------------------------

TITLE: Comprehensive Django Feed Class Example with All Hooks - Python
DESCRIPTION: This example shows a Django Feed class illustrating all supported attributes and optional/required methods for customizing feed output. Dependencies are the Django syndication Feed view and feedgenerator utilities. The code demonstrates overriding class attributes or methods for feed type, templates, metadata (title, link, description, language, author info, etc.), supporting both hardcoded values and logic via methods that can take an optional object. Developers provide either an attribute or one of several method overrides per property. The output is an XML news feed customized via these properties; the input may be a context object from 'get_object()'.

SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
from django.contrib.syndication.views import Feed
from django.utils import feedgenerator

class ExampleFeed(Feed):
    # FEED TYPE -- Optional. This should be a class that subclasses
    # django.utils.feedgenerator.SyndicationFeed. This designates
    # which type of feed this should be: RSS 2.0, Atom 1.0, etc. If
    # you don't specify feed_type, your feed will be RSS 2.0. This
    # should be a class, not an instance of the class.

    feed_type = feedgenerator.Rss201rev2Feed

    # TEMPLATE NAMES -- Optional. These should be strings
    # representing names of Django templates that the system should
    # use in rendering the title and description of your feed items.
    # Both are optional. If a template is not specified, the
    # item_title() or item_description() methods are used instead.

    title_template = None
    description_template = None

    # LANGUAGE -- Optional. This should be a string specifying a language
    # code. Defaults to django.utils.translation.get_language().
    language = "de"

    # TITLE -- One of the following three is required. The framework
    # looks for them in this order.

    def title(self, obj):
        """
        Takes the object returned by get_object() and returns the
        feed's title as a normal Python string.
        """

    def title(self):
        """
        Returns the feed's title as a normal Python string.
        """

    title = "foo"  # Hard-coded title.

    # LINK -- One of the following three is required. The framework
    # looks for them in this order.

    def link(self, obj):
        """
        # Takes the object returned by get_object() and returns the URL
        # of the HTML version of the feed as a normal Python string.
        """

    def link(self):
        """
        Returns the URL of the HTML version of the feed as a normal Python
        string.
        """

    link = "/blog/"  # Hard-coded URL.

    # FEED_URL -- One of the following three is optional. The framework
    # looks for them in this order.

    def feed_url(self, obj):
        """
        # Takes the object returned by get_object() and returns the feed's
        # own URL as a normal Python string.
        """

    def feed_url(self):
        """
        Returns the feed's own URL as a normal Python string.
        """

    feed_url = "/blog/rss/"  # Hard-coded URL.

    # GUID -- One of the following three is optional. The framework looks
    # for them in this order. This property is only used for Atom feeds
    # (where it is the feed-level ID element). If not provided, the feed
    # link is used as the ID.

    def feed_guid(self, obj):
        """
        Takes the object returned by get_object() and returns the globally
        unique ID for the feed as a normal Python string.
        """

    def feed_guid(self):
        """
        Returns the feed's globally unique ID as a normal Python string.
        """

    feed_guid = "/foo/bar/1234"  # Hard-coded guid.

    # DESCRIPTION -- One of the following three is required. The framework
    # looks for them in this order.

    def description(self, obj):
        """
        Takes the object returned by get_object() and returns the feed's
        description as a normal Python string.
        """

    def description(self):
        """
        Returns the feed's description as a normal Python string.
        """

    description = "Foo bar baz."  # Hard-coded description.

    # AUTHOR NAME --One of the following three is optional. The framework
    # looks for them in this order.

    def author_name(self, obj):
        """
        Takes the object returned by get_object() and returns the feed's
        author's name as a normal Python string.
        """

    def author_name(self):
        """
        Returns the feed's author's name as a normal Python string.
        """

    author_name = "Sally Smith"  # Hard-coded author name.

    # AUTHOR EMAIL --One of the following three is optional. The framework
    # looks for them in this order.

    def author_email(self, obj):
        """
        Takes the object returned by get_object() and returns the feed's
        author's email as a normal Python string.
        """

    def author_email(self):
        """
        Returns the feed's author's email as a normal Python string.
        """

    author_email = "test@example.com"  # Hard-coded author email.

    # AUTHOR LINK --One of the following three is optional. The framework
    # looks for them in this order. In each case, the URL should include
    # the scheme (such as "https://") and domain name.

    def author_link(self, obj):
        """
        Takes the object returned by get_object() and returns the feed's
        author's URL as a normal Python string.
        """

    def author_link(self):
        """
        Returns the feed's author's URL as a normal Python string.
        """
```

----------------------------------------

TITLE: Instantiating GEOS MultiPoint Collections in Python
DESCRIPTION: Demonstrates two equivalent ways to create a `MultiPoint` geometry collection object. The first method involves passing individual `Point` objects as separate arguments to the `MultiPoint` constructor. The second method passes a single sequence (like a tuple) containing the `Point` objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_14

LANGUAGE: pycon
CODE:
```
>>> mp = MultiPoint(Point(0, 0), Point(1, 1))
>>> mp = MultiPoint((Point(0, 0), Point(1, 1)))
```

----------------------------------------

TITLE: Retrieving Language Info in Django Template
DESCRIPTION: Shows how to retrieve and display information about a specific language using the get_language_info tag.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_33

LANGUAGE: html
CODE:
```
{% get_language_info for LANGUAGE_CODE as lang %}
{% get_language_info for "pl" as lang %}

Language code: {{ lang.code }}<br>
Name of language: {{ lang.name_local }}<br>
Name in English: {{ lang.name }}<br>
Bi-directional: {{ lang.bidi }}
Name in the active language: {{ lang.name_translated }}
```

----------------------------------------

TITLE: Defining BaseDateListView Class in Django
DESCRIPTION: BaseDateListView is a base class that provides common behavior for all date-based views. It is not meant to be instantiated directly but serves as a parent class for other date-based views.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class BaseDateListView:
    # Implementation details omitted
    pass
```

----------------------------------------

TITLE: Configuring MacPorts Path
DESCRIPTION: Sets up PATH environment variable to include MacPorts binaries and PostgreSQL executables.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_9

LANGUAGE: shell
CODE:
```
export PATH=/opt/local/bin:/opt/local/lib/postgresql14/bin
```

----------------------------------------

TITLE: Serializing GeoDjango Models to GeoJSON in Python
DESCRIPTION: This snippet demonstrates how to use the GeoJSON serializer to serialize City objects. It specifies a custom geometry field and limits the properties to only include the 'name' field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/serializers.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.core.serializers import serialize
from my_app.models import City

serialize("geojson", City.objects.all(), geometry_field="point", fields=["name"])
```

----------------------------------------

TITLE: Setting SQLite Transaction Mode in Django Settings
DESCRIPTION: Specify the transaction mode for the SQLite database connection in Django settings. Setting it to 'IMMEDIATE' ensures transactions wait for the configured timeout before failing.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_12

LANGUAGE: python
CODE:
```
"OPTIONS": {
    # ...
    "transaction_mode": "IMMEDIATE",
    # ...
}
```

----------------------------------------

TITLE: Automating Git Bisect for Django Regression
DESCRIPTION: Command to automate the git bisect process using a specific Django test. This will run the test on each bisected commit to find the first 'bad' commit.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/triaging-tickets.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
$ git bisect run tests/runtests.py migrations.test_regression
```

----------------------------------------

TITLE: Using Cache Control Decorators in Django Views
DESCRIPTION: The cache_control() and never_cache() decorators in Django are used to control caching behavior of views. The check added in Django 4.0 has been relaxed to allow the use of duck-typed HttpRequest objects.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
django.views.decorators.cache.cache_control()
django.views.decorators.cache.never_cache()
```

----------------------------------------

TITLE: Querying Zipcode Polygons Properly Containing Geometry in Django
DESCRIPTION: Shows how to use the contains_properly spatial lookup to filter Zipcode objects whose polygon contains a given geometry without touching its boundary.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__contains_properly=geom)
```

----------------------------------------

TITLE: Creating GeometryCollection Objects in Python using GEOS
DESCRIPTION: Shows how to instantiate GeometryCollection objects by passing in other GEOSGeometry objects as arguments or as a sequence.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_17

LANGUAGE: pycon
CODE:
```
>>> poly = Polygon(((0, 0), (0, 1), (1, 1), (0, 0)))
>>> gc = GeometryCollection(Point(0, 0), MultiPoint(Point(0, 0), Point(1, 1)), poly)
>>> gc = GeometryCollection((Point(0, 0), MultiPoint(Point(0, 0), Point(1, 1)), poly))
```

----------------------------------------

TITLE: Writing QUnit Tests for Django JavaScript
DESCRIPTION: Example of a QUnit test module with beforeEach setup and two test cases demonstrating how to test button click behaviors. The module shows proper test structure with fixture setup and assertions.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/javascript.txt#2025-04-23_snippet_0

LANGUAGE: javascript
CODE:
```
QUnit.module('magicTricks', {
    beforeEach: function() {
        const $ = django.jQuery;
        $('#qunit-fixture').append('<button class="button"></button>');
    }
});

QUnit.test('removeOnClick removes button on click', function(assert) {
    const $ = django.jQuery;
    removeOnClick('.button');
    assert.equal($('.button').length, 1);
    $('.button').click();
    assert.equal($('.button').length, 0);
});

QUnit.test('copyOnClick adds button on click', function(assert) {
    const $ = django.jQuery;
    copyOnClick('.button');
    assert.equal($('.button').length, 1);
    $('.button').click();
    assert.equal($('.button').length, 2);
});
```

----------------------------------------

TITLE: Defining Range Operator Constants in Python
DESCRIPTION: Defines a Python class `RangeOperators` that holds string constants representing the standard PostgreSQL range operators (e.g., `@>`, `<`, `&&`). This class serves as a convenient way to refer to these operators programmatically, potentially reducing typos compared to using raw strings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_35

LANGUAGE: python
CODE:
```
class RangeOperators:
    EQUAL = "="
    NOT_EQUAL = "<>"
    CONTAINS = "@>"
    CONTAINED_BY = "<@"
    OVERLAPS = "&&"
    FULLY_LT = "<<"
    FULLY_GT = ">>"
    NOT_LT = "&>"
    NOT_GT = "&<"
    ADJACENT_TO = "-|"
```

----------------------------------------

TITLE: Mapping OGR Data Sources in Django
DESCRIPTION: The mapping function is used to create a mapping of OGR data sources. It takes a data_source as a required parameter, with optional parameters for geometry name, layer key, and multi-geometry support.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/ogrinspect.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
mapping(data_source, geom_name='geom', layer_key=0, multi_geom=False)
```

----------------------------------------

TITLE: Django Authentication Backend Request Parameter
DESCRIPTION: Fixed authentication handling when multiple authentication backends don't accept a positional request argument.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.2.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
django.contrib.auth.authenticate()
```

----------------------------------------

TITLE: Proper Top-level Block Indentation in Django Templates
DESCRIPTION: Demonstrates proper indentation for top-level blocks in Django templates that use extends. Top-level blocks should not be indented within templates that extend other templates.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_15

LANGUAGE: html+django
CODE:
```
{% extends "base.html" %}

{% block content %}
```

----------------------------------------

TITLE: Setting MySQL Default Storage Engine via Init Command - Python
DESCRIPTION: This Python snippet shows how to use the init_command option within the OPTIONS dictionary of Django's database settings to set the default storage engine (e.g., INNODB) when connecting to the MySQL database. This command is executed upon each connection but is primarily useful during initial table creation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_9

LANGUAGE: Python
CODE:
```
"OPTIONS": {
    "init_command": "SET default_storage_engine=INNODB",
}
```

----------------------------------------

TITLE: Non-Supported: ForeignKey to Composite Key Model - Python
DESCRIPTION: This example demonstrates an unsupported use case in Django: defining a ForeignKey to a model with a composite primary key. The code defines a model Foo where the ForeignKey (item) references OrderLineItem, which is not allowed with composite primary keys. Django will raise an error if attempted. Provided for explanatory purposes only; not functional with current Django versions.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class Foo(models.Model):
    item = models.ForeignKey(OrderLineItem, on_delete=models.CASCADE)
```

----------------------------------------

TITLE: ProcessFormView Class Definition in Django
DESCRIPTION: A mixin that implements basic HTTP GET and POST workflow for form processing. Handles form rendering and submission processing.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-editing.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
class ProcessFormView(View):
    def get(self, request, *args, **kwargs):
        return self.render_to_response(self.get_context_data())

    def post(self, request, *args, **kwargs):
        form = self.get_form()
        if form.is_valid():
            return self.form_valid(form)
        return self.form_invalid(form)
```

----------------------------------------

TITLE: Customizing Check Parameters in Django Commands
DESCRIPTION: Shows how to override the get_check_kwargs method to customize the parameters passed to the check method, specifically enabling database-related checks.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-management-commands.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
def get_check_kwargs(self, options):
    kwargs = super().get_check_kwargs(options)
    return {**kwargs, "databases": [options["database"]]}
```

----------------------------------------

TITLE: Fixing Queryset Crash with Nested OuterRef() Annotations in Django 4.2
DESCRIPTION: Resolves a regression that caused queryset crashes when filtering against deeply nested OuterRef() annotations.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.5.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
OuterRef()
```

----------------------------------------

TITLE: Fixing QuerySet Operations with EmptyQuerySet in Python
DESCRIPTION: Fixed QuerySet.union(), intersection(), and difference() when combining with an EmptyQuerySet.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
queryset.union(EmptyQuerySet())
queryset.intersection(EmptyQuerySet())
queryset.difference(EmptyQuerySet())
```

----------------------------------------

TITLE: Handling Inherited Non-editable Primary Keys in Admin Inlines in Python
DESCRIPTION: Fixed crash in admin's inlines when a model has an inherited non-editable primary key.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
class InlineModel(admin.TabularInline):
    model = ModelWithInheritedPK
```

----------------------------------------

TITLE: Adding Background Image with CSS in Django
DESCRIPTION: CSS code that adds a background image to the body element using relative paths in a Django static file.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial06.txt#2025-04-23_snippet_2

LANGUAGE: css
CODE:
```
body {
    background: white url("images/background.png") no-repeat;
}
```

----------------------------------------

TITLE: Referencing Django Ticket in Release Notes
DESCRIPTION: This snippet shows how to reference a Django ticket number (33681) in the release notes documentation using reStructuredText syntax.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.5.txt#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
:ticket:`33681`
```

----------------------------------------

TITLE: Loading Templates with select_template()
DESCRIPTION: Example of how Django searches for templates when using select_template(), based on the TEMPLATES configuration.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
select_template(['story_253_detail.html', 'story_detail.html'])
```

----------------------------------------

TITLE: Checking Django Settings Configuration Status
DESCRIPTION: Example of checking if Django settings are already configured before calling configure(), using the settings.configured property.
SOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.conf import settings

if not settings.configured:
    settings.configure(myapp_defaults, DEBUG=True)
```

----------------------------------------

TITLE: Getting Session Values with Default (Sync)
DESCRIPTION: Example of retrieving a value from the session with a default fallback using the get method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
fav_color = request.session.get('fav_color', 'red')
```

----------------------------------------

TITLE: Retrieving Formatting Settings with get_format in JavaScript
DESCRIPTION: Shows how to use the get_format function to retrieve configured i18n formatting settings in JavaScript.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_40

LANGUAGE: javascript
CODE:
```
document.write(get_format('DATE_FORMAT'));
// 'N j, Y'
```

----------------------------------------

TITLE: Correcting JSONField CheckConstraints Validation in Django 4.2
DESCRIPTION: Fixes a regression that caused incorrect validation of CheckConstraints on __isnull lookups against JSONField.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.5.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
CheckConstraints
```

----------------------------------------

TITLE: Adding Messages in Django Views
DESCRIPTION: Examples of adding different types of messages in Django views using shortcut methods
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
messages.debug(request, "%s SQL statements were executed." % count)
messages.info(request, "Three credits remain in your account.")
messages.success(request, "Profile details updated.")
messages.warning(request, "Your account expires in three days.")
messages.error(request, "Document deleted.")
```

----------------------------------------

TITLE: Django QuerySet Deletion
DESCRIPTION: Reference to delete() method causing performance issues on MySQL when filtering against aggregate functions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.1.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
QuerySet.delete()
```

----------------------------------------

TITLE: Enabling Implicit TLS/SSL for SMTP Connection in Django
DESCRIPTION: Specifies whether to use an implicit TLS/SSL (secure) connection (False by default) when communicating with the SMTP server, typically on port 465. Mutually exclusive with EMAIL_USE_TLS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_33

LANGUAGE: python
CODE:
```
EMAIL_USE_SSL = False
```

----------------------------------------

TITLE: Creating MultiPolygon Objects in Python using GEOS
DESCRIPTION: Demonstrates how to instantiate MultiPolygon objects by passing Polygon objects as arguments or as a sequence.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_16

LANGUAGE: pycon
CODE:
```
>>> p1 = Polygon(((0, 0), (0, 1), (1, 1), (0, 0)))
>>> p2 = Polygon(((1, 1), (1, 2), (2, 2), (1, 1)))
>>> mp = MultiPolygon(p1, p2)
>>> mp = MultiPolygon([p1, p2])
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'upper_inc' Lookup in Django Python
DESCRIPTION: Illustrates the `upper_inc` lookup (`__upper_inc`) on the `ages` field. This query selects `Event` objects based on whether their `ages` range has an inclusive upper bound (represented by `]` in PostgreSQL). Requires the `Event` model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_33

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__upper_inc=True)
<QuerySet []>
```

----------------------------------------

TITLE: Converting Geometry to WKB in Django
DESCRIPTION: Example demonstrating conversion of a geometric point to Well-Known Binary (WKB) format using the AsWKB function in Django.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> bytes(City.objects.annotate(wkb=AsWKB("point")).get(name="Chelyabinsk").wkb)
b'\x01\x01\x00\x00\x00]3\xf9f\x9b\x91K@\x00X\x1d9\xd2\xb9N@'
```

----------------------------------------

TITLE: Using Truncator HTML Methods Reference
DESCRIPTION: Reference to django.utils.text.Truncator's chars() and words() methods with html=True parameter that were vulnerable to DoS attacks. These methods power the truncatechars_html and truncatewords_html template filters.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.11.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.utils.text.Truncator.chars(html=True)
django.utils.text.Truncator.words(html=True)
```

----------------------------------------

TITLE: Customizing Message Tags in Django Settings
DESCRIPTION: Example of customizing message tags by overriding default tags for specific message levels
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.INFO: "",
    50: "critical",
}
```

----------------------------------------

TITLE: ListView Pagination Implementation
DESCRIPTION: Shows how to implement pagination in a Django ListView class by setting the paginate_by attribute.
SOURCE: https://github.com/django/django/blob/main/docs/topics/pagination.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.views.generic import ListView

from myapp.models import Contact


class ContactListView(ListView):
    paginate_by = 2
    model = Contact
```

----------------------------------------

TITLE: Configuring SMTP Port for Email in Django
DESCRIPTION: Defines the port number (25 by default) for the SMTP server specified in EMAIL_HOST.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_29

LANGUAGE: python
CODE:
```
EMAIL_PORT = 25
```

----------------------------------------

TITLE: Adding Comments in Django Templates
DESCRIPTION: Shows how to include single-line comments in Django templates using the {# #} syntax.
SOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_3

LANGUAGE: html
CODE:
```
{# this won't be rendered #}
```

----------------------------------------

TITLE: Setting Timeout for Email Operations in Django
DESCRIPTION: Specifies a timeout duration in seconds (None by default, meaning no timeout) for blocking email operations like the SMTP connection attempt.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_36

LANGUAGE: python
CODE:
```
EMAIL_TIMEOUT = None
```

----------------------------------------

TITLE: Querying with Trigram Similarity in Django
DESCRIPTION: Demonstrates how to use the trigram_similar lookup in Django to perform trigram similarity searches on City names. This lookup requires the 'django.contrib.postgres' app and the pg_trgm PostgreSQL extension.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/lookups.txt#2025-04-23_snippet_0

LANGUAGE: pycon
CODE:
```
>>> City.objects.filter(name__trigram_similar="Middlesborough")
['<City: Middlesbrough>']
```

----------------------------------------

TITLE: Using wordwrap Filter in Django Templates
DESCRIPTION: Shows how to use the wordwrap filter, which wraps words at a specified line length.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_103

LANGUAGE: html+django
CODE:
```
{{ value|wordwrap:5 }}
```

----------------------------------------

TITLE: Recreating Deleted Model Instances for M2M (pycon)
DESCRIPTION: Recreates `Publication` (`p1`) and `Article` (`a2`) instances that were deleted in previous examples. It then adds multiple publications to `a2` to set up data for the next demonstration.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_27

LANGUAGE: pycon
CODE:
```
>>> p1 = Publication(title="The Python Journal")
>>> p1.save()
>>> a2 = Article(headline="NASA uses Python")
>>> a2.save()
>>> a2.publications.add(p1, p2, p3)
```

----------------------------------------

TITLE: Using Ord Function in Django ORM
DESCRIPTION: Example of using the Ord function to get Unicode code point of first character
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_33

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Ord
>>> Author.objects.create(name="Margaret Smith")
>>> author = Author.objects.annotate(name_code_point=Ord("name")).get()
>>> print(author.name_code_point)
77
```

----------------------------------------

TITLE: Installing Binutils on Debian/Ubuntu
DESCRIPTION: Installs the binutils package required for library discovery on Debian-based systems.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
$ sudo apt-get install binutils
```

----------------------------------------

TITLE: Creating PostgreSQL Superuser
DESCRIPTION: Shell command to create a PostgreSQL superuser.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
$ createuser --superuser <user_name>
```

----------------------------------------

TITLE: Creating a Django Feed with Custom Media Attribute Stylesheet
DESCRIPTION: This snippet demonstrates how to use the Stylesheet class to set a custom media attribute (like 'print' instead of the default 'screen') for a feed stylesheet.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
from django.contrib.syndication.views import Feed
from django.utils.feedgenerator import Stylesheet


class FeedWithHardcodedStylesheet(Feed):
    stylesheets = [
        Stylesheet("https://example.com/rss_stylesheet.xslt", media="print"),
    ]
```

----------------------------------------

TITLE: Custom Cache Key Validation in Django
DESCRIPTION: Demonstrates how to create a custom cache backend with custom key validation logic by subclassing a built-in backend and overriding the validate_key method.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_37

LANGUAGE: python
CODE:
```
from django.core.cache.backends.locmem import LocMemCache


class CustomLocMemCache(LocMemCache):
    def validate_key(self, key):
        """Custom validation, raising exceptions or warnings as needed."""
        ...
```

----------------------------------------

TITLE: Performing GeoDjango Distance Queries with Raster Bands in Python
DESCRIPTION: Demonstrates a distance query where one side of the comparison is a raster object. The example filters `SouthTexasCity` objects based on their distance from a raster (`rst`). It specifically uses a 3-tuple `(rst, 2, D(km=7))` with the `distance_gte` lookup to specify that the third band (index 2) of the raster `rst` should be used for the distance calculation, filtering for results at least 7 km away.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_7

LANGUAGE: pycon
CODE:
```
>>> qs = SouthTexasCity.objects.filter(point__distance_gte=(rst, 2, D(km=7)))
```

----------------------------------------

TITLE: Customizing Simple Block Tag End Name in Django
DESCRIPTION: Demonstrates how to customize the closing tag name for a simple block tag using the end_name parameter in the decorator.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
@register.simple_block_tag(end_name="endofchart")
def chart(content):
    return render_chart(source=content)
```

----------------------------------------

TITLE: Advanced Raster Creation in GeoDjango
DESCRIPTION: Shows creating raster models using GDALRaster objects with explicit parameter specifications including dimensions, scale, and band data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.gdal import GDALRaster
>>> rast = GDALRaster({
...     "width": 10,
...     "height": 10,
...     "name": "Canyon",
...     "srid": 4326,
...     "scale": [0.1, -0.1],
...     "bands": [{"data": range(100)}],
... })
>>> dem = Elevation(name="Canyon", rast=rast)
>>> dem.save()
```

----------------------------------------

TITLE: Running Django Management Command with Specific PATH (Shell)
DESCRIPTION: This shell command executes the django-admin makemigrations command, explicitly setting the PATH environment variable for this command execution. This can be used to control which version of tools like 'black' are found and used.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_57

LANGUAGE: shell
CODE:
```
PATH=path/to/venv/bin django-admin makemigrations
```

----------------------------------------

TITLE: Configuring Logging for runserver Output (Django Python)
DESCRIPTION: This snippet provides a sample Django `LOGGING` configuration dictionary. It's needed if Django's default logging is disabled or overridden, ensuring that request/response output from the `runserver` command is still visible by explicitly configuring a handler and logger for `django.server` using `django.utils.log.ServerFormatter`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
LOGGING = {
    # ...
    "formatters": {
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[%(server_time)s] %(message)s",
        }
    },
    "handlers": {
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
    },
    "loggers": {
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        }
    },
}
```

----------------------------------------

TITLE: Caching Related Model Instances with ORM in Django (Python)
DESCRIPTION: Demonstrates how Django ORM caches related model instances to reduce database queries in version 1.5. Shows sequence of relationship traversals on 'Poll' and 'Choice' objects, and asserts that a related lookup does not trigger redundant SQL queries if the instance has already been loaded. No external dependencies beyond a standard Django model setup with relevant relationships. Inputs are standard ORM model queries; output is validation that the same objects are referenced without additional database access. Assumes a context with 'Poll' and 'Choice' models, highlighting improvements for performance and correctness.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> first_poll = Poll.objects.all()[0]\n>>> first_choice = first_poll.choice_set.all()[0]\n>>> first_choice.poll is first_poll\nTrue
```

----------------------------------------

TITLE: Creating an SP-GiST Index in Django with PostgreSQL
DESCRIPTION: Creates an SP-GiST (Space-Partitioned Generalized Search Tree) index with an option for fill factor. Useful for non-balanced data structures like quadtrees or k-d trees.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
SpGistIndex(*expressions, fillfactor=None, **options)
```

----------------------------------------

TITLE: Rendering Widget Media with Static URL
DESCRIPTION: Example showing how CalendarWidget media is rendered with different static URL configurations
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_8

LANGUAGE: pycon
CODE:
```
>>> w = CalendarWidget()
>>> print(w.media)
<link href="/css/pretty.css" media="all" rel="stylesheet">
<script src="https://static.example.com/animations.js"></script>
<script src="https://othersite.com/actions.js"></script>
```

----------------------------------------

TITLE: Defining Django Field Description
DESCRIPTION: This snippet shows how to define the 'description' attribute for a custom Django Field. This attribute provides a verbose description, often used by documentation tools like django.contrib.admindocs. It demonstrates using the translation function _() and string interpolation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_50

LANGUAGE: Python
CODE:
```
description = _("String (up to %(max_length)s)")
```

----------------------------------------

TITLE: Creating Geometry Objects from Files in Python using GEOS
DESCRIPTION: Shows how to create a GEOSGeometry object from a file containing spatial data using the fromfile function.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_19

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.geos import fromfile
>>> g = fromfile("/home/bob/geom.wkt")
```

----------------------------------------

TITLE: Calculating Latest Entry Timestamp for Conditional View in Python
DESCRIPTION: Defines a function `latest_entry` that takes a request object and `blog_id`. It queries the `Entry` model, filters by `blog_id`, finds the entry with the latest `published` date using `.latest("published")`, and returns that `published` datetime object. This function is designed to be used as a `last_modified_func` for Django's conditional view decorators.
SOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
def latest_entry(request, blog_id):
    return Entry.objects.filter(blog=blog_id).latest("published").published
```

----------------------------------------

TITLE: Using GeometryCollection and Polygon in Django GIS
DESCRIPTION: The GeometryCollection and Polygon classes in Django's GIS module are used for handling geometric data. A long-standing bug that caused crashes on some platforms (particularly macOS with ARM64 architecture) has been fixed.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
django.contrib.gis.geos.Polygon
```

----------------------------------------

TITLE: Running a Specific Django Test
DESCRIPTION: Command to run a specific test file in Django's test suite. This example runs a regression test for migrations.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/triaging-tickets.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
$ ./runtests.py migrations.test_regression
```

----------------------------------------

TITLE: Installing Geospatial Libraries on Debian/Ubuntu
DESCRIPTION: Command to install required geospatial libraries on Debian/Ubuntu systems using apt-get.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
$ sudo apt-get install binutils libproj-dev gdal-bin
```

----------------------------------------

TITLE: Adding Root Elements to Django Syndication Feed
DESCRIPTION: This snippet shows how to add custom root elements to a Django syndication feed by overriding the add_root_elements method. In this example, the code adds an iTunes explicit tag with a 'clean' value.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_22

LANGUAGE: python
CODE:
```
def add_root_elements(self, handler):
    super().add_root_elements(handler)
    handler.addQuickElement("itunes:explicit", "clean")
```

----------------------------------------

TITLE: Instantiating GEOS MultiLineString Collections in Python
DESCRIPTION: Shows two equivalent methods for creating a `MultiLineString` geometry collection. The first approach passes individual `LineString` objects (`ls1`, `ls2`) as separate arguments to the constructor. The second approach passes a single sequence (a list in this case) containing the `LineString` objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_15

LANGUAGE: pycon
CODE:
```
>>> ls1 = LineString((0, 0), (1, 1))
>>> ls2 = LineString((2, 2), (3, 3))
>>> mls = MultiLineString(ls1, ls2)
>>> mls = MultiLineString([ls1, ls2])
```

----------------------------------------

TITLE: SQL Conditional Aggregation Using FILTER WHERE - SQL
DESCRIPTION: Provides SQL code representing aggregate counts per account_type using the SQL 2003 FILTER WHERE clause. This query syntax is supported by certain SQL backends and results in efficient conditional aggregation within a single SELECT statement. Outputs a result set with one column per account type count.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_7

LANGUAGE: sql
CODE:
```
SELECT count('id') FILTER (WHERE account_type=1) as regular,
       count('id') FILTER (WHERE account_type=2) as gold,
       count('id') FILTER (WHERE account_type=3) as platinum
FROM clients;
```

----------------------------------------

TITLE: Workaround: Using ForeignObject for Referencing Composite Primary Keys - Python
DESCRIPTION: Demonstrates a workaround for referencing models with composite primary keys using Django's internal ForeignObject. The model Foo includes fields for the components of the composite key and uses ForeignObject to set up the link. This avoids the use of ForeignKey, which does not support composite primary keys. Dependencies: Django internal API, which may change without notice; ForeignObject is not covered by Django's stable API policy. Key parameters: from_fields/to_fields specify correspondence between model and composite key fields.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class Foo(models.Model):
    item_order_id = models.IntegerField()
    item_product_id = models.CharField(max_length=20)
    item = models.ForeignObject(
        OrderLineItem,
        on_delete=models.CASCADE,
        from_fields=("item_order_id", "item_product_id"),
        to_fields=("order_id", "product_id"),
    )
```

----------------------------------------

TITLE: Accessing GDALRaster Bands Attribute in Python
DESCRIPTION: Illustrates how to access the list of GDALBand objects associated with a GDALRaster using the `bands` attribute. The example initializes a raster with two bands and shows checking the number of bands (`len`) and accessing pixel data from the second band (`bands[1].data()`).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_44

LANGUAGE: pycon
CODE:
```
>>> rst = GDALRaster(
...     {
...         "width": 1,
...         "height": 2,
...         "srid": 4326,
...         "bands": [{"data": [0, 1]}, {"data": [2, 3]}],
...     }
... )
>>> len(rst.bands)
2
>>> rst.bands[1].data()
array([[ 2.,  3.]], dtype=float32)
```

----------------------------------------

TITLE: Using ExclusionConstraint with Custom Range Function in Django
DESCRIPTION: Example of defining an ExclusionConstraint using a custom TsTzRange function for models that define ranges using two separate fields instead of native PostgreSQL range types. It demonstrates the use of RangeBoundary and custom functions in constraint expressions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/constraints.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.contrib.postgres.constraints import ExclusionConstraint
from django.contrib.postgres.fields import (
    DateTimeRangeField,
    RangeBoundary,
    RangeOperators,
)
from django.db import models
from django.db.models import Func, Q


class TsTzRange(Func):
    function = "TSTZRANGE"
    output_field = DateTimeRangeField()


class Reservation(models.Model):
    room = models.ForeignKey("Room", on_delete=models.CASCADE)
    start = models.DateTimeField()
    end = models.DateTimeField()
    cancelled = models.BooleanField(default=False)

    class Meta:
        constraints = [
            ExclusionConstraint(
                name="exclude_overlapping_reservations",
                expressions=[
                    (
                        TsTzRange("start", "end", RangeBoundary()),
                        RangeOperators.OVERLAPS,
                    ),
                    ("room", RangeOperators.EQUAL),
                ],
                condition=Q(cancelled=False),
            ),
        ]
```

----------------------------------------

TITLE: Applying `last_modified` Decorator Functionally in Python
DESCRIPTION: Shows an alternative way to apply the `last_modified` decorator without using the `@` syntax. The decorator is called as a function (`last_modified(latest_entry)`) which returns a new function that wraps the original `front_page` view.
SOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
def front_page(request, blog_id): ...


front_page = last_modified(latest_entry)(front_page)
```

----------------------------------------

TITLE: Unsafe Template Operation Prevention
DESCRIPTION: Example showing how to prevent unsafe operations in templates using alters_data attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_7

LANGUAGE: html+django
CODE:
```
I will now delete this valuable data. {{ data.delete }}
```

----------------------------------------

TITLE: Annotated SQL Query Output Example for Custom Func - SQL
DESCRIPTION: This SQL snippet represents the database query generated by Django ORM when annotating a field using the LOWER SQL function in an annotated queryset. It shows how the annotation produces a new result column ('field_lower') by applying LOWER(.) to the 'field' column in the 'db_table'. Serves as an illustration of the kind of SQL produced when using Func-based annotations in Django.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_15

LANGUAGE: sql
CODE:
```
SELECT
    ...
    LOWER("db_table"."field") as "field_lower"
```

----------------------------------------

TITLE: Django Force Script Name Setting
DESCRIPTION: Defines `FORCE_SCRIPT_NAME`, which overrides the `SCRIPT_NAME` environment variable in HTTP requests, useful for URL rewriting and in standalone scripts. Defaults to `None`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_45

LANGUAGE: plaintext
CODE:
```
FORCE_SCRIPT_NAME
---------------------

Default: `None`

If not `None`, this will be used as the value of the `SCRIPT_NAME`
environment variable in any HTTP request. This setting can be used to override
the server-provided value of `SCRIPT_NAME`, which may be a rewritten version
of the preferred value or not supplied at all. It is also used by
:func:`django.setup()` to set the URL resolver script prefix outside of the
request/response cycle (e.g. in management commands and standalone scripts) to
generate correct URLs when `FORCE_SCRIPT_NAME` is provided.
```

----------------------------------------

TITLE: Accessing Point Coordinates as a Tuple in Python
DESCRIPTION: Illustrates retrieving the coordinates of a Point `OGRGeometry` ('POINT (1 2)') as a simple tuple using the `.tuple` attribute. This provides direct access to the (x, y) coordinates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_15

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("POINT (1 2)").tuple
(1.0, 2.0)
```

----------------------------------------

TITLE: JSON Serialization Format
DESCRIPTION: Example of Django's JSON serialization format structure.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_5

LANGUAGE: json
CODE:
```
[
    {
        "pk": "4b678b301dfd8a4e0dad910de3ae245b",
        "model": "sessions.session",
        "fields": {
            "expire_date": "2013-01-16T08:16:59.844Z"
        }
    }
]
```

----------------------------------------

TITLE: Using translate tag with noop option in Django templates
DESCRIPTION: Shows how to use the noop option with the {% translate %} tag to skip translation but still perform variable lookup.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_20

LANGUAGE: html+django
CODE:
```
<title>{% translate "myvar" noop %}</title>
```

----------------------------------------

TITLE: Referencing New Django Setting for File Upload Limit
DESCRIPTION: Mentions the new Django setting 'DATA_UPLOAD_MAX_NUMBER_FILES' introduced to mitigate the denial-of-service vulnerability by limiting the number of file parts parsed in multipart forms.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.18.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
:setting:`DATA_UPLOAD_MAX_NUMBER_FILES`
```

----------------------------------------

TITLE: Estimating Memory Usage for scrypt Password Hasher
DESCRIPTION: This formula calculates the minimum memory requirement for the scrypt password hashing algorithm based on work_factor and block_size parameters.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
work_factor * 2 * block_size * 64
```

----------------------------------------

TITLE: Adding Custom Context to Feed Templates in Django
DESCRIPTION: This snippet demonstrates how to add custom context data to feed templates by overriding the get_context_data() method in a Feed subclass. It allows passing additional information to title and description templates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
from mysite.models import Article
from django.contrib.syndication.views import Feed


class ArticlesFeed(Feed):
    title = "My articles"
    description_template = "feeds/articles.html"

    def items(self):
        return Article.objects.order_by("-pub_date")[:5]

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["foo"] = "bar"
        return context
```

----------------------------------------

TITLE: Setting DJANGO_COLORS Environment Variable - Shell
DESCRIPTION: Shows how to set the `DJANGO_COLORS` environment variable to `light` in a Unix/Bash shell. This variable allows customizing the color palette used for syntax highlighting in Django management command output.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_48

LANGUAGE: Shell
CODE:
```
export DJANGO_COLORS="light"
```

----------------------------------------

TITLE: Installing uWSGI with pip
DESCRIPTION: Commands to install uWSGI using pip, either the current stable version or the Long Term Support (LTS) version. This is the first step to set up uWSGI for Django deployment.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/uwsgi.txt#2025-04-23_snippet_0

LANGUAGE: console
CODE:
```
# Install current stable version.
$ python -m pip install uwsgi

# Or install LTS (long term support).
$ python -m pip install https://projects.unbit.it/downloads/uwsgi-lts.tar.gz
```

----------------------------------------

TITLE: Creating and Configuring a PostGIS Database in Shell
DESCRIPTION: Commands to create a new database and enable the PostGIS extension. This is typically done after installing PostGIS to set up a spatial database.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/postgis.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
$ createdb  <db name>
$ psql <db name>
> CREATE EXTENSION postgis;
```

----------------------------------------

TITLE: Defining TodayArchiveView Class in Django
DESCRIPTION: Declaration of the TodayArchiveView class, which is a specialized version of DayArchiveView for displaying today's archive. It inherits similar attributes and methods as DayArchiveView.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
class TodayArchiveView():
```

----------------------------------------

TITLE: Generated SQL for Django Models
DESCRIPTION: This SQL code represents the database schema that Django would generate for the Question and Choice models. It shows the CREATE TABLE statements for both models, including field definitions and primary keys.
SOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
BEGIN;
--
-- Create model Question
--
CREATE TABLE "polls_question" (
    "id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "question_text" varchar(200) NOT NULL,
    "pub_date" timestamp with time zone NOT NULL
);
--
-- Create model Choice
--
CREATE TABLE "polls_choice" (
    "id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
```

----------------------------------------

TITLE: Accessing GDAL Layer Attributes in Python
DESCRIPTION: Examples demonstrating how to access various attributes of a GDAL Layer object.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> layer = ds[0]
>>> layer.name
'cities'
>>> layer.num_feat
3
>>> layer.geom_type.name
'Point'
>>> layer.num_fields
4
>>> layer.fields
['Name', 'Population', 'Density', 'Created']
>>> [ft.__name__ for ft in layer.field_types]
['OFTString', 'OFTReal', 'OFTReal', 'OFTDate']
>>> layer.field_widths
[80, 11, 24, 10]
>>> layer.field_precisions
[0, 0, 15, 0]
```

----------------------------------------

TITLE: Generated SQL for Django Model (SQL)
DESCRIPTION: This SQL snippet shows the `CREATE TABLE` statement that Django automatically generates for the `Person` model defined previously. It illustrates the table naming convention (`myapp_person`), the automatic addition of an `id` primary key field, and the mapping of `CharField` to `VARCHAR` with the specified length. Note that the syntax is specific to PostgreSQL in this example.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_1

LANGUAGE: SQL
CODE:
```
CREATE TABLE myapp_person (
    "id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "first_name" varchar(30) NOT NULL,
    "last_name" varchar(30) NOT NULL
);
```

----------------------------------------

TITLE: Python Deprecation Warning Flag
DESCRIPTION: Command line option to enable display of deprecation warnings in Python.
SOURCE: https://github.com/django/django/blob/main/docs/internals/release-process.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
python -Wd
```

----------------------------------------

TITLE: Changing FileField Behavior in Django Models
DESCRIPTION: FileField no longer automatically deletes files from backend storage when a model instance is deleted. Manual cleanup of orphaned files is now required.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.5.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.db.models import FileField

# FileField usage example (not provided in the text)
class MyModel(models.Model):
    file = FileField(upload_to='uploads/')
```

----------------------------------------

TITLE: Correcting Field.has_changed() Behavior for Disabled Form Fields in Python
DESCRIPTION: This change fixes the Field.has_changed() method to return False for disabled form fields, including BooleanField, MultipleChoiceField, MultiValueField, FileField, ModelChoiceField, and ModelMultipleChoiceField.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.4.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
Field.has_changed()
```

----------------------------------------

TITLE: Basic Django Template Extension
DESCRIPTION: Example of using the extends template tag with a constant value.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_9

LANGUAGE: html+django
CODE:
```
{% extends "base.html" %}
```

----------------------------------------

TITLE: Configuring PostGIS Version in Django Settings
DESCRIPTION: Example of manually setting the PostGIS version to avoid automatic version detection query during initialization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
POSTGIS_VERSION = (X, Y, Z)
```

----------------------------------------

TITLE: Creating a GiST Index in Django with PostgreSQL
DESCRIPTION: Creates a GiST (Generalized Search Tree) index with options for buffering and fill factor. Useful for spatial data and other complex data types.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
GistIndex(*expressions, buffering=None, fillfactor=None, **options)
```

----------------------------------------

TITLE: Building and Installing GDAL
DESCRIPTION: Commands to build and install GDAL from source using CMake.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_8

LANGUAGE: shell
CODE:
```
$ cd gdal-X.Y.Z
$ mkdir build
$ cd build
$ cmake ..
$ cmake --build .
$ sudo cmake --build . --target install
```

----------------------------------------

TITLE: Handling `cached_property` Aliases (Problematic Pre-Django 2.2) in Python
DESCRIPTION: This snippet demonstrates an incorrect or problematic way (especially flagged in Python 3.6+) to create an alias for a `django.utils.functional.cached_property`. Direct assignment like `alias = base` does not result in a cached alias and will raise a `TypeError` in Python 3.6+ because the same `cached_property` instance cannot be assigned to multiple names. Django 2.2 documentation advises against this pattern.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.utils.functional import cached_property


class A:
    @cached_property
    def base(self):
        return ...

    alias = base
```

----------------------------------------

TITLE: Referencing Django HttpResponse Class in Python
DESCRIPTION: This code snippet shows how to reference the HttpResponse class from Django's http module. It's mentioned in the context of explaining that Django itself wasn't vulnerable to the header injection issue.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.2.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
```

----------------------------------------

TITLE: Applying Dictsort with Incorrect Index Type (String) in Django Templates - HTML+Django
DESCRIPTION: Demonstrates a case where 'dictsort' is given a string index ("0") instead of an integer. Results in empty output. Serves as a caution for proper parameter types in Django template filters. Requires a variable named 'values'.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_66

LANGUAGE: html+django
CODE:
```
{{ values|dictsort:"0" }}
```

----------------------------------------

TITLE: Setting up upstream remote for Django repository
DESCRIPTION: Adds the official Django repository as an upstream remote, allowing synchronization with the main project.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
git remote add upstream https://github.com/django/django.git
git fetch upstream
```

----------------------------------------

TITLE: Referencing Django Auth Logout View in Security Fix Description
DESCRIPTION: Reference to the Django authentication logout view that had a security vulnerability allowing session creation during anonymous access. The note describes how this could be exploited for denial-of-service attacks.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.4.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.contrib.auth.views.logout()
```

----------------------------------------

TITLE: Listing Available Tox Testing Environments
DESCRIPTION: This command displays all the default testing environments configured in Django's tox.ini file, including Python version compatibility checks and code quality tools like Black and Flake8.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_2

LANGUAGE: console
CODE:
```
$ tox -l
py3
black
blacken-docs
flake8>=3.7.0
docs
isort>=5.1.0
```

----------------------------------------

TITLE: Running Runserver Without Color Output - Command Line
DESCRIPTION: Example demonstrating the `django-admin runserver` command with the `--no-color` option. This disables the colorized output that Django commands often use for better readability, useful when piping output or in terminals that don't support ANSI colors.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_53

LANGUAGE: Command Line
CODE:
```
django-admin runserver --no-color
```

----------------------------------------

TITLE: New Signature for allow_migrate Router Method in Django - reStructuredText
DESCRIPTION: Explains an updated method signature for allow_migrate in custom database routers: from (db, model) to (db, app_label, model_name=None, **hints). The change affects custom router implementations and clarifies how migration decisions are signaled to Django migrations.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_16

LANGUAGE: reStructuredText
CODE:
```
Signature of the ``allow_migrate`` router method
------------------------------------------------

The signature of the :meth:`allow_migrate` method of database routers has
changed from ``allow_migrate(db, model)`` to
``allow_migrate(db, app_label, model_name=None, **hints)``.

When ``model_name`` is set, the value that was previously given through the
``model`` positional argument may now be found inside the ``hints`` dictionary
under the key ``'model'``.

After switching to the new signature the router will also be called by the
:class:`~django.db.migrations.operations.RunPython` and
:class:`~django.db.migrations.operations.RunSQL` operations.
```

----------------------------------------

TITLE: Querying Zipcode Polygons Covering Geometry in Django
DESCRIPTION: Demonstrates using the covers spatial lookup to filter Zipcode objects whose polygon completely covers a given geometry.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__covers=geom)
```

----------------------------------------

TITLE: Defining ModelForm with Explicit Fields in Django
DESCRIPTION: This snippet demonstrates how to define a ModelForm that explicitly lists all fields to be used, addressing a security concern in Django 1.6. It uses the special value '__all__' to include all model fields.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_13

LANGUAGE: Python
CODE:
```
class MyModelForm(ModelForm):
    class Meta:
        fields = "__all__"
        model = MyModel
```

----------------------------------------

TITLE: Effect of Silent Keyword on Subsequent Cycle Tag Uses (Django)
DESCRIPTION: Illustrates that when a named cycle is defined using the `silent` keyword, subsequent calls to advance that cycle (e.g., `{% cycle rowcolors %}`) will also be silent and produce no output directly. The value is advanced internally but not rendered by the tag itself.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_11

LANGUAGE: html+django
CODE:
```
{% cycle 'row1' 'row2' as rowcolors silent %}
{% cycle rowcolors %}
```

----------------------------------------

TITLE: Configuring File Upload Handlers in Django
DESCRIPTION: Defines a list of upload handler classes used for processing file uploads. The default includes MemoryFileUploadHandler and TemporaryFileUploadHandler, allowing customization of the upload process.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_37

LANGUAGE: python
CODE:
```
FILE_UPLOAD_HANDLERS = [
    "django.core.files.uploadhandler.MemoryFileUploadHandler",
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
]
```

----------------------------------------

TITLE: Django Database Models Window Expression
DESCRIPTION: Reference to Window expressions in Django database models, which can now be used in conditions outside of queryset filters, such as in When conditions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.1.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
django.db.models.expressions.Window
```

----------------------------------------

TITLE: Setting X-XSS-Protection Header in Django Middleware - Python
DESCRIPTION: This snippet demonstrates how to set the 'X-XSS-Protection' HTTP header in a custom Django middleware, intended for legacy browser support since this header is no longer set by SecurityMiddleware in Django 4.0. The code should be placed in a custom middleware class and assumes access to the 'response' object within the 'process_response' or equivalent handler. Includes no external dependencies beyond Django's core middleware framework.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
response.headers.setdefault("X-XSS-Protection", "1; mode=block")
```

----------------------------------------

TITLE: Using SchemaEditor Context Manager in Django (Python)
DESCRIPTION: This snippet demonstrates how to obtain a backend-specific SchemaEditor instance using the connection.schema_editor() context manager in Django. It shows usage for running schema operations such as delete_model within a transactionally safe block. The approach ensures that resources are properly managed and that SQL operations are deferred or grouped as needed. The context manager pattern is a prerequisite for custom schema operations or backend extensions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/schema-editor.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
with connection.schema_editor() as schema_editor:\n    schema_editor.delete_model(MyModel)\n
```

----------------------------------------

TITLE: Generating Cache Keys with get_cache_key
DESCRIPTION: Creates a cache key based on the request path and registered headers. Returns None if no headerlist is stored, indicating the page needs to be rebuilt.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
get_cache_key(request, key_prefix=None, method='GET', cache=None)
```

----------------------------------------

TITLE: Running Tests with Django Management Command (Shell)
DESCRIPTION: Shell command used to execute the Django test suite via the `manage.py` utility. The release notes mention a change in its exit status code: it now returns 0 for success and 1 for any failures, rather than the number of failed tests.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.2.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
python manage.py test
```

----------------------------------------

TITLE: Destroying Test Database in Django
DESCRIPTION: The destroy_test_db function destroys the test database and restores the original database name. If keepdb is True, it only closes the connection without destroying the database.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
destroy_test_db(old_database_name, verbosity=1, keepdb=False)
```

----------------------------------------

TITLE: Customizing SearchRank Weights in Django PostgreSQL
DESCRIPTION: Shows how to customize the weight values for SearchRank by passing a list of four floats. This allows for fine-tuning the importance of different matching criteria when ranking search results.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_9

LANGUAGE: pycon
CODE:
```
>>> rank = SearchRank(vector, query, weights=[0.2, 0.4, 0.6, 0.8])
>>> Entry.objects.annotate(rank=rank).filter(rank__gte=0.3).order_by("-rank")
```

----------------------------------------

TITLE: Using raw() Method in Django QuerySets
DESCRIPTION: The raw() method allows developers to supply raw SQL. Users are advised to perform appropriate manual type conversions before executing queries to prevent MySQL typecasting issues.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.11.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
Model.objects.raw('SELECT * FROM myapp_model')
```

----------------------------------------

TITLE: Using Chr Function in Django Models
DESCRIPTION: Demonstrates using the Chr function to convert numbers to characters
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Chr
>>> Author.objects.create(name="Margaret Smith")
>>> author = Author.objects.filter(name__startswith=Chr(ord("M"))).get()
>>> print(author.name)
Margaret Smith
```

----------------------------------------

TITLE: Adding custom lookups and transforms to Django ORM
DESCRIPTION: The snippet explains how to extend Django's ORM with custom lookup operators (e.g., 'day_lte') and transforms (e.g., extracting 'year' from a date). These allow for more flexible and readable queries. Dependencies include django.db.models.Lookup and django.db.models.Transform classes, with configuration needed to register new operators and transformations for specific fields.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.txt#_snippet_3

LANGUAGE: Python
CODE:
```
class DayLteLookup(Lookup):
    lookup_name = 'day_lte'
    def as_sql(self, compiler, connection):
        # SQL implementation for 'day_lte'
        pass
```

LANGUAGE: Python
CODE:
```
class YearTransform(Transform):
    function = 'EXTRACT'
    template = '%(function)s(YEAR FROM %(field)s)'
    def as_sql(self, compiler, connection):
        # SQL for 'year' transform
        pass
```

----------------------------------------

TITLE: Using Union Aggregation in GeoDjango
DESCRIPTION: Examples of using the Union aggregate function to create a geometric union of all Zipcode polygons, including a more efficient approach with spatial filtering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_37

LANGUAGE: python
CODE:
```
>>> u = Zipcode.objects.aggregate(Union(poly))  # This may take a long time.
>>> u = Zipcode.objects.filter(poly__within=bbox).aggregate(
...     Union(poly)
... )  # A more sensible approach.
```

----------------------------------------

TITLE: Accessing GDALRaster Name and Driver in Python
DESCRIPTION: Demonstrates how to access the name (file path) and the driver name of a GDALRaster object after its creation. Assumes a `GDALRaster` object `rst` has been previously initialized, potentially from a file, as shown in the surrounding context example.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_34

LANGUAGE: pycon
CODE:
```
>>> rst.name
'/tmp/tmp7x9H4J.tif'           # The exact filename will be different on your computer
>>> rst.driver.name
'GTiff'
```

----------------------------------------

TITLE: Specifying PostgreSQL Operator Classes for UniqueConstraint in Python
DESCRIPTION: Shows how to specify PostgreSQL operator classes for fields within a `UniqueConstraint` using the `opclasses` parameter. This is useful for utilizing specific index types or behaviors. This example applies `varchar_pattern_ops` to the 'username' field. This parameter is ignored by databases other than PostgreSQL.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_10

LANGUAGE: Python
CODE:
```
from django.db.models import UniqueConstraint

UniqueConstraint(
    name="unique_username", fields=["username"], opclasses=["varchar_pattern_ops"]
)
```

----------------------------------------

TITLE: Using MakeLine Aggregation in GeoDjango
DESCRIPTION: Example of using the MakeLine aggregate function to create a LineString from city polygons filtered by name.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_36

LANGUAGE: python
CODE:
```
>>> qs = City.objects.filter(name__in=("Houston", "Dallas")).aggregate(MakeLine("poly"))
>>> print(qs["poly__makeline"])
LINESTRING (-95.3631510000000020 29.7633739999999989, -96.8016109999999941 32.7820570000000018)
```

----------------------------------------

TITLE: Starting a uWSGI server for Django using command line
DESCRIPTION: Example command with comprehensive options to start a uWSGI server for a Django project. It includes settings for the project path, module configuration, socket binding, process management, and logging.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/uwsgi.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
uwsgi --chdir=/path/to/your/project \
    --module=mysite.wsgi:application \
    --env DJANGO_SETTINGS_MODULE=mysite.settings \
    --master --pidfile=/tmp/project-master.pid \
    --socket=127.0.0.1:49152 \      # can also be a file
    --processes=5 \                 # number of worker processes
    --uid=1000 --gid=2000 \         # if root, uwsgi can drop privileges
    --harakiri=20 \                 # respawn processes taking more than 20 seconds
    --max-requests=5000 \           # respawn processes after serving 5000 requests
    --vacuum \                      # clear environment on exit
    --home=/path/to/virtual/env \   # optional path to a virtual environment
    --daemonize=/var/log/uwsgi/yourproject.log      # background the process
```

----------------------------------------

TITLE: Getting and Setting GDALRaster SRID Attribute in Python
DESCRIPTION: Shows how to get and set the Spatial Reference System Identifier (SRID) directly using the `srid` attribute, which acts as a shortcut for accessing `rst.srs.srid`. Setting the `srid` attribute directly modifies the underlying `srs` object.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_38

LANGUAGE: pycon
CODE:
```
>>> rst = GDALRaster({"width": 10, "height": 20, "srid": 4326})
>>> rst.srid
4326
>>> rst.srid = 3086
>>> rst.srid
3086
>>> rst.srs.srid  # This is equivalent
3086
```

----------------------------------------

TITLE: Using update() as a Context Manager in Django (Python)
DESCRIPTION: Shows the use of Django's Context.update() as a context manager. update() temporarily overrides values and restores the previous state when exiting the block, preventing mismatched push/pop operations. This pattern is especially useful for ensuring context cleanup in nested scopes. Relies on Django's Context class. Inputs are dictionary updates, outputs are string lookups from the context.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
>>> c = Context()
>>> c["foo"] = "first level"
>>> with c.update({"foo": "second level"}):
...     c["foo"]
...
'second level'
>>> c["foo"]
'first level'
```

----------------------------------------

TITLE: Subclassing Django Database Backend - Django Python
DESCRIPTION: Provides an example of how to subclass an existing Django database backend (specifically PostgreSQL here) to modify its behavior or features. This involves creating a custom module with a `base.py` file containing subclasses of the backend's `DatabaseWrapper` and `DatabaseFeatures`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_24

LANGUAGE: python
CODE:
```
from django.db.backends.postgresql import base, features


class DatabaseFeatures(features.DatabaseFeatures):
    def allows_group_by_selected_pks_on_model(self, model):
        return True


class DatabaseWrapper(base.DatabaseWrapper):
    features_class = DatabaseFeatures
```

----------------------------------------

TITLE: Querying Django HStoreField: contains Lookup (Python)
DESCRIPTION: Shows how to filter Django model objects using the HStoreField 'contains' lookup, which returns objects where all provided key-value pairs exist in the hstore field (backed by SQL @> operator). Requires Django, PostgreSQL with hstore, and HStoreField present on a model. Inputs are dicts of filter conditions; outputs are QuerySets containing matching model instances. Limitation: Only keys and values present in the filter dict will be matched exactly.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_9

LANGUAGE: pycon
CODE:
```
>>> Dog.objects.create(name="Rufus", data={"breed": "labrador", "owner": "Bob"})\n>>> Dog.objects.create(name="Meg", data={"breed": "collie", "owner": "Bob"})\n>>> Dog.objects.create(name="Fred", data={})\n\n>>> Dog.objects.filter(data__contains={"owner": "Bob"})\n<QuerySet [<Dog: Rufus>, <Dog: Meg>]>
```

LANGUAGE: pycon
CODE:
```
>>> Dog.objects.filter(data__contains={"breed": "collie"})\n<QuerySet [<Dog: Meg>]>
```

----------------------------------------

TITLE: Using F Expression Bitwise Operations
DESCRIPTION: F expressions now support bitwise operations using .bitand() and .bitor() methods instead of & and | operators.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
.bitand()
.bitor()
```

----------------------------------------

TITLE: Valid date format example
DESCRIPTION: Example of a legitimate date format string that should be used with the date template filter.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.7.txt#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
"j/m/Y"
```

----------------------------------------

TITLE: Initializing Custom Storage with Settings in Django
DESCRIPTION: Demonstrates how to properly initialize a custom storage class by retrieving options from Django settings, ensuring it can be instantiated without arguments.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-file-storage.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.core.files.storage import Storage


class MyStorage(Storage):
    def __init__(self, option=None):
        if not option:
            option = settings.CUSTOM_STORAGE_OPTIONS
        ...
```

----------------------------------------

TITLE: Defining Django View Function with Correct Parameter Naming
DESCRIPTION: Demonstrates the correct way to name the first parameter in a Django view function as 'request'. This convention improves code readability and consistency across Django projects.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
def my_view(request, foo): ...
```

----------------------------------------

TITLE: Validating ForeignKey Query Object Types in Django ORM (Python)
DESCRIPTION: Shows an example where Book.objects.filter(author=book) is performed, illustrating that as of newer Django versions, query relation lookups require proper instance types. Passing an incorrect model (e.g., Book instead of Author for author=...) triggers a ValueError. Requires models Book and Author with appropriate relations, and Django's ORM environment.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_2

LANGUAGE: pycon
CODE:
```
>>> book = Book.objects.create(name="Django")
>>> book = Book.objects.filter(author=book)
Traceback (most recent call last):
...
ValueError: Cannot query "<Book: Django>": Must be "Author" instance.
```

----------------------------------------

TITLE: Using Swappable Models in Django
DESCRIPTION: Django allows the use of swappable models like auth.User. A regression in Django 4.0 that caused the creation of bogus migrations for models referencing swappable models has been fixed.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
auth.User
```

----------------------------------------

TITLE: Using JSONBAgg Aggregate with Django Models and Queries
DESCRIPTION: Demonstrates the use of JSONBAgg aggregate function with Django models and complex queries. The example uses Room and HotelReservation models to aggregate JSON data and filter results.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> from django.contrib.postgres.aggregates import JSONBAgg
>>> Room.objects.annotate(
...     requirements=JSONBAgg(
...         "hotelreservation__requirements",
...         order_by="-hotelreservation__start",
...     )
... ).filter(requirements__0__sea_view=True).values("number", "requirements")
<QuerySet [{'number': 102, 'requirements': [
    {'parking': False, 'sea_view': True, 'double_bed': False},
    {'parking': True, 'double_bed': True}
]}]>
```

----------------------------------------

TITLE: Managing GDALRaster Metadata
DESCRIPTION: Demonstrates how to set, update and remove metadata for a GDALRaster object. Shows metadata dictionary manipulation including setting values to None to remove items.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_47

LANGUAGE: python
CODE:
```
>>> rst = GDALRaster({"width": 10, "height": 20, "srid": 4326})
>>> rst.metadata
{}
>>> rst.metadata = {"DEFAULT": {"OWNER": "Django", "VERSION": "1.0"}}
>>> rst.metadata
{'DEFAULT': {'OWNER': 'Django', 'VERSION': '1.0'}}
>>> rst.metadata = {"DEFAULT": {"OWNER": None, "VERSION": "2.0"}}
>>> rst.metadata
{'DEFAULT': {'VERSION': '2.0'}}
```

----------------------------------------

TITLE: Using distance_gte Filter in GeoDjango
DESCRIPTION: Example of using the distance_gte lookup to filter Zipcode objects where the distance from a geometry field to the lookup geometry is greater than or equal to the specified distance (5 meters).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_29

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__distance_gte=(geom, D(m=5)))
```

----------------------------------------

TITLE: Using distance_lt Filter in GeoDjango
DESCRIPTION: Example of using the distance_lt lookup to filter Zipcode objects where the distance from a geometry field to the lookup geometry is less than the specified distance (5 meters).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_30

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__distance_lt=(geom, D(m=5)))
```

----------------------------------------

TITLE: Running Django with Uvicorn
DESCRIPTION: Command to start a Django application using Uvicorn ASGI server. The server will listen on 127.0.0.1:8000 and requires the project to be in the Python path.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/uvicorn.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
python -m uvicorn myproject.asgi:application
```

----------------------------------------

TITLE: Customizing Django Shell Auto-Imports
DESCRIPTION: This snippet demonstrates how to create a custom shell command by subclassing django.core.management.commands.shell.Command and overriding the get_auto_imports() method to add URL-related functions to the shell namespace.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-shell.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.core.management.commands import shell


class Command(shell.Command):
    def get_auto_imports(self):
        return super().get_auto_imports() + [
            "django.urls.reverse",
            "django.urls.resolve",
        ]
```

----------------------------------------

TITLE: Defining CheckConstraint for Nullable Fields on Oracle < 23c in Python
DESCRIPTION: Shows how to correctly define a `CheckConstraint` for nullable fields on Oracle versions prior to 23c. It includes an explicit check for `NULL` (`Q(age__isnull=True)`) using an OR condition to ensure the constraint validation behaves consistently with database validation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
from django.db.models import Q, CheckConstraint

CheckConstraint(condition=Q(age__gte=18) | Q(age__isnull=True), name="age_gte_18")
```

----------------------------------------

TITLE: Illustrating Basic Web Page Caching Logic (Pseudocode)
DESCRIPTION: This pseudocode demonstrates the fundamental workflow of a web cache. It checks if a requested page exists in the cache; if found, it returns the cached version, otherwise, it generates the page, saves it to the cache for future requests, and then returns the generated page.
SOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
given a URL, try finding that page in the cache
if the page is in the cache:
    return the cached page
else:
    generate the page
    save the generated page in the cache (for next time)
    return the generated page
```

----------------------------------------

TITLE: Accessing the Numeric Code of an OGRGeomType in Python
DESCRIPTION: Illustrates obtaining the integer code (e.g., 3 for Polygon) associated with an `OGRGeomType` object (`gt1`) using the `.num` attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_27

LANGUAGE: pycon
CODE:
```
>>> gt1.num
3
```

----------------------------------------

TITLE: Rendering Django Formset HTML with Ordering
DESCRIPTION: Example of HTML output for a Django formset with ordering capability. Shows how the ORDER field is added to each form in the formset.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_18

LANGUAGE: html
CODE:
```
<div><label for="id_form-0-pub_date">Pub date:</label><input type="text" name="form-0-pub_date" value="2008-05-10" id="id_form-0-pub_date"></div>
<div><label for="id_form-0-ORDER">Order:</label><input type="number" name="form-0-ORDER" value="1" id="id_form-0-ORDER"></div>
<div><label for="id_form-1-title">Title:</label><input type="text" name="form-1-title" value="Article #2" id="id_form-1-title"></div>
<div><label for="id_form-1-pub_date">Pub date:</label><input type="text" name="form-1-pub_date" value="2008-05-11" id="id_form-1-pub_date"></div>
<div><label for="id_form-1-ORDER">Order:</label><input type="number" name="form-1-ORDER" value="2" id="id_form-1-ORDER"></div>
<div><label for="id_form-2-title">Title:</label><input type="text" name="form-2-title" id="id_form-2-title"></div>
<div><label for="id_form-2-pub_date">Pub date:</label><input type="text" name="form-2-pub_date" id="id_form-2-pub_date"></div>
<div><label for="id_form-2-ORDER">Order:</label><input type="number" name="form-2-ORDER" id="id_form-2-ORDER"></div>
```

----------------------------------------

TITLE: Setting Custom Exception Reporter in Django View
DESCRIPTION: Shows how to set a custom exception reporter for a specific view, allowing granular control over which reporter to use within any given view.
SOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
def my_view(request):
    if request.user.is_authenticated:
        request.exception_reporter_class = CustomExceptionReporter()
    ...
```

----------------------------------------

TITLE: Getting the Associated Django Field Type for an OGRGeomType in Python
DESCRIPTION: Demonstrates retrieving the name of the corresponding Django `GeometryField` subclass (e.g., 'PolygonField') for an `OGRGeomType` object (`gt1`) by accessing the `.django` attribute. Returns `None` if no direct mapping exists.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_28

LANGUAGE: pycon
CODE:
```
>>> gt1.django
'PolygonField'
```

----------------------------------------

TITLE: Rendered Script Object HTML Output
DESCRIPTION: Shows how the Script object media definition is rendered as HTML
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_11

LANGUAGE: html
CODE:
```
<script src="https://cdn.example.com/something.min.js"
        crossorigin="anonymous"
        async>
</script>
```

----------------------------------------

TITLE: Creating Permissions for Proxy Models in Django
DESCRIPTION: This snippet demonstrates how to create permissions for a proxy model by passing for_concrete_model=False to ContentTypeManager.get_for_model() to get the appropriate ContentType.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
content_type = ContentType.objects.get_for_model(
    BlogPostProxy, for_concrete_model=False
)
```

----------------------------------------

TITLE: Implementing item_geometry Method in ZipcodeFeed
DESCRIPTION: This example demonstrates how to implement the item_geometry method in a ZipcodeFeed class. It returns a polygon for each item in the feed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/feeds.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
class ZipcodeFeed(Feed):
    def item_geometry(self, obj):
        # Returns the polygon.
        return obj.poly
```

----------------------------------------

TITLE: Setting and Getting the SRID of a GEOSGeometry Point in Python
DESCRIPTION: This snippet demonstrates how to interact with the `srid` property of a Django `GEOSGeometry` object. It first creates a `Point` object without an SRID, prints its default `srid` value (None), then assigns the WGS84 SRID (4326) to it, and finally confirms the assignment by printing the `srid` again. This requires the `Point` class from Django's GIS module.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_4

LANGUAGE: pycon
CODE:
```
>>> pnt = Point(5, 23)
>>> print(pnt.srid)
None
>>> pnt.srid = 4326
>>> pnt.srid
4326
```

----------------------------------------

TITLE: Accessing and Converting Field Attribute Data using Django Field class (Python)
DESCRIPTION: Illustrates retrieving and converting the properties of Field objects (attributes of a spatial feature) by key, including name, type (integer), type name, numeric value, width, and precision. Examples include direct property retrieval and type conversion functions such as as_double(), as_int(), as_string(), and as_datetime(). Requires an instance of a Django GIS Field object, and supports flexible data access patterns with type safety. Outputs may be strings, integers, floats, or tuples, depending on the accessor used. Non-numeric precision is returned as zero.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_8

LANGUAGE: pycon
CODE:
```
>>> city["Name"].name
'Name'
```

LANGUAGE: pycon
CODE:
```
>>> city["Density"].type
2
```

LANGUAGE: pycon
CODE:
```
>>> city["Name"].type_name
'String'
```

LANGUAGE: pycon
CODE:
```
>>> city["Population"].value
102121
```

LANGUAGE: pycon
CODE:
```
>>> city["Name"].width
80
```

LANGUAGE: pycon
CODE:
```
>>> city["Density"].precision
15
```

LANGUAGE: pycon
CODE:
```
>>> city["Density"].as_double()
874.7
```

LANGUAGE: pycon
CODE:
```
>>> city["Population"].as_int()
102121
```

LANGUAGE: pycon
CODE:
```
>>> city["Name"].as_string()
'Pueblo'
```

LANGUAGE: pycon
CODE:
```
>>> city["Created"].as_datetime()
(c_long(1999), c_long(5), c_long(23), c_long(0), c_long(0), c_long(0), c_long(0))
```

----------------------------------------

TITLE: Disabling Automatic Imports in Django Shell
DESCRIPTION: This snippet shows how to permanently disable automatic imports in the Django shell by overriding the get_auto_imports() method to return None.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-shell.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class Command(shell.Command):
    def get_auto_imports(self):
        return None
```

----------------------------------------

TITLE: Querying with TransactionNow in Django PostgreSQL
DESCRIPTION: Illustrates the use of the TransactionNow function to filter Article objects based on the current transaction time. This function returns the date and time when the current transaction started on the database server.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/functions.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from django.contrib.postgres.functions import TransactionNow
>>> Article.objects.filter(published__lte=TransactionNow())
<QuerySet [<Article: How to Django>]>
```

----------------------------------------

TITLE: Loading Apache Authentication Modules
DESCRIPTION: Apache configuration to load the required authentication modules. These modules (mod_auth_basic and mod_authz_user) are needed for basic authentication to work with Apache 2.2.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/apache-auth.txt#2025-04-23_snippet_1

LANGUAGE: apache
CODE:
```
LoadModule auth_basic_module modules/mod_auth_basic.so
LoadModule authz_user_module modules/mod_authz_user.so
```

----------------------------------------

TITLE: Configuring Email Date Header Timezone in Django
DESCRIPTION: Determines whether the SMTP 'Date' header uses the local timezone (True) or UTC (False, default).
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_31

LANGUAGE: python
CODE:
```
EMAIL_USE_LOCALTIME = False
```

----------------------------------------

TITLE: Defining DayMixin Class in Django
DESCRIPTION: DayMixin class provides functionality for retrieving and parsing the day component of a date. It includes methods for getting the day format, retrieving the day value, and navigating to next and previous days.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
class DayMixin:
    day_format = '%d'
    day = None

    def get_day_format(self):
        return self.day_format

    def get_day(self):
        # Implementation details omitted
        pass

    def get_next_day(self, date):
        # Implementation details omitted
        pass

    def get_previous_day(self, date):
        # Implementation details omitted
        pass
```

----------------------------------------

TITLE: Executing Basic Raw SQL Query with Manager.raw()
DESCRIPTION: Example of using the raw() method to execute a basic SQL query that returns all Person objects. This demonstrates the simplest use case of raw SQL queries returning model instances.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> for p in Person.objects.raw("SELECT * FROM myapp_person"):
...     print(p)
...
John Smith
Jane Jones
```

----------------------------------------

TITLE: Shallow Copying Django Manager pycon
DESCRIPTION: This snippet, shown as a Python console example, illustrates the requirement that Django manager instances must be shallow-copyable. It demonstrates importing the `copy` module and using `copy.copy()` to create a copy of a `MyManager` instance.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#_snippet_17

LANGUAGE: pycon
CODE:
```
>>> import copy
>>> manager = MyManager()
>>> my_copy = copy.copy(manager)
```

----------------------------------------

TITLE: Enabling IPython Autoawait
DESCRIPTION: Command to enable autoawait in IPython environment for async code execution
SOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
%autoawait on
```

----------------------------------------

TITLE: Implementing Django Shortcut Function in Python
DESCRIPTION: This snippet adds the 'make_toast()' function to Django's shortcuts module. The function simply returns the string 'toast'.
SOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
def make_toast():
    return "toast"
```

----------------------------------------

TITLE: Querying Spatial Relationships in Oracle Spatial
DESCRIPTION: Example of using the 'relate' lookup with Oracle-specific relation strings to define geometric relationships in Oracle Spatial.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__relate=(geom, "anyinteract"))
```

----------------------------------------

TITLE: SQL Query with NOT EXISTS for Conditional Filtering
DESCRIPTION: This SQL snippet shows the database query generated by the preceding Django ORM Python code. It selects from the `client` table (`c0`) and uses a `NOT EXISTS` clause with a correlated subquery. The subquery checks for the existence of another row (`c1`) in the `client` table with the same `account_type` but a different `id`, effectively filtering for rows where no other row shares the same `account_type`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_10

LANGUAGE: sql
CODE:
```
SELECT ...
FROM client c0
WHERE NOT EXISTS (
  SELECT c1.id
  FROM client c1
  WHERE c1.account_type = c0.account_type AND NOT c1.id = c0.id
)
```

----------------------------------------

TITLE: Configuring ABSOLUTE_URL_OVERRIDES
DESCRIPTION: This snippet demonstrates how to configure the ABSOLUTE_URL_OVERRIDES setting. This setting allows users to override the get_absolute_url() methods on a per-installation basis, mapping model names to functions that return URLs.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_0

LANGUAGE: python
CODE:
```
ABSOLUTE_URL_OVERRIDES = {
    "blogs.blog": lambda o: "/blogs/%s/" % o.slug,
    "news.story": lambda o: "/stories/%s/%s/" % (o.pub_year, o.slug),
}
```

----------------------------------------

TITLE: Defining a Mixin for Content Negotiation in Django (Incomplete)
DESCRIPTION: Starts the definition of a `JsonableResponseMixin` intended to provide JSON responses for Django form views based on content negotiation. This version is presented as an alternative or improvement to the previous mixin, likely aiming to use `request.get_preferred_type()` for more accurate content type determination. The provided snippet is incomplete.
SOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
class JsonableResponseMixin:
    """
    Mixin to add JSON support to a form.
    Must be used with an object-based FormView (e.g. CreateView).
    """
```

----------------------------------------

TITLE: Demonstrating SQL Function Limitations with Composite Keys - SQL
DESCRIPTION: Illustrates the limitation of SQL aggregate functions when used with composite keys. Shows that functions like MAX accept only a single column expression, and will error if given multiple (as in a composite primary key). Inputs: column names; output: result or error.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_6

LANGUAGE: sql
CODE:
```
MAX("order_id")  -- OK
MAX("product_id", "order_id")  -- ERROR
```

----------------------------------------

TITLE: Installing SpatiaLite on macOS using Homebrew
DESCRIPTION: This shell script uses Homebrew to install SpatiaLite and its dependencies on macOS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/spatialite.txt#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
$ brew update
$ brew install spatialite-tools
$ brew install gdal
```

----------------------------------------

TITLE: Django Session Cookie Domain Setting
DESCRIPTION: Reference to the SESSION_COOKIE_DOMAIN setting that was related to a session cookie deletion bug fixed in this release.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
SESSION_COOKIE_DOMAIN
```

----------------------------------------

TITLE: Reading WKB Data in Python using GEOS
DESCRIPTION: Shows how to use the WKBReader class to create a GEOSGeometry object from Well-Known Binary (WKB) data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_21

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.geos import WKBReader
>>> wkb_r = WKBReader()
>>> wkb_r.read("0101000000000000000000F03F000000000000F03F")
<Point object at 0x103a88910>
```

----------------------------------------

TITLE: Filtering by Second using `second` Lookup in Django (Python and SQL)
DESCRIPTION: Illustrates filtering Django QuerySets based on the second component of datetime or time fields using the `__second` lookup. Supports exact matches (e.g., `__second=31`) or comparisons (e.g., `__second__gte=31`). Includes Python examples and the corresponding SQL `EXTRACT` equivalents. Requires time zone definitions in the database when `USE_TZ` is `True` for datetime fields.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_121

LANGUAGE: Python
CODE:
```
Event.objects.filter(timestamp__second=31)
Event.objects.filter(time__second=2)
Event.objects.filter(timestamp__second__gte=31)
```

LANGUAGE: SQL
CODE:
```
SELECT ... WHERE EXTRACT('second' FROM timestamp) = '31';
SELECT ... WHERE EXTRACT('second' FROM time) = '2';
SELECT ... WHERE EXTRACT('second' FROM timestamp) >= '31';
```

----------------------------------------

TITLE: Custom SQL Server Length Function Implementation
DESCRIPTION: Example of adding SQL Server support by monkey patching a custom method for the Length function to use LEN instead of LENGTH.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_38

LANGUAGE: python
CODE:
```
from django.db.models.functions import Length


def sqlserver_length(self, compiler, connection):
    return self.as_sql(compiler, connection, function="LEN")


Length.as_sqlserver = sqlserver_length
```

----------------------------------------

TITLE: Testing Django User Authentication Properties
DESCRIPTION: Code demonstrates testing User.is_authenticated and User.is_anonymous properties for set membership, which was fixed in ticket #27309.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.3.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
User.is_authenticated
User.is_anonymous
```

----------------------------------------

TITLE: Using Repeat Function in Django ORM
DESCRIPTION: Shows how to repeat a text field value multiple times
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_34

LANGUAGE: python
CODE:
```
>>> from django.db.models.functions import Repeat
>>> Author.objects.create(name="John", alias="j")
>>> Author.objects.update(name=Repeat("name", 3))
1
>>> print(Author.objects.get(alias="j").name)
JohnJohnJohn
```

----------------------------------------

TITLE: Demonstrating UnicodeDecodeError Stack Trace in Python
DESCRIPTION: This snippet shows the typical error message format when a UnicodeDecodeError occurs in Python. The error happens when a bytestring containing non-ASCII characters is incorrectly decoded using the ASCII codec.
SOURCE: https://github.com/django/django/blob/main/docs/faq/troubleshooting.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
UnicodeDecodeError: 'ascii' codec can't decode byte 0x?? in position ?:
ordinal not in range(128)
```

----------------------------------------

TITLE: Defining a Template Filter with is_safe Attribute (Deprecated Style) - Django Templates - Python
DESCRIPTION: This code example demonstrates the deprecated method of defining template filters in Django by assigning the is_safe attribute directly to the filter function after its definition. This approach was previously used to declare filters as safe but caused compatibility issues, especially when combined with decorators. Users should avoid this old style in new code.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
@register.filter
def noop(value):
    return value

noop.is_safe = True
```

----------------------------------------

TITLE: Fixing Username Enumeration in ModelBackend.authenticate() (Python)
DESCRIPTION: The authenticate() method in django.contrib.auth.backends.ModelBackend allowed timing attacks to enumerate users with unusable passwords. This vulnerability affects the authentication process.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.14.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.contrib.auth.backends.ModelBackend.authenticate()
```

----------------------------------------

TITLE: Unicode Username Validation Implementation
DESCRIPTION: Demonstrates the new username validation that explicitly accepts Unicode characters by default on Python 3, with options for ASCII or Unicode validation.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator

# Choose between ASCII or Unicode username validation
# Default is UnicodeUsernameValidator on Python 3
```

----------------------------------------

TITLE: Defining Model Relationships with default_related_name
DESCRIPTION: Example demonstrating model relationships with default_related_name setting and proper query lookup usage.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
from django.db import models


class Foo(models.Model):
    pass


class Bar(models.Model):
    foo = models.ForeignKey(Foo)

    class Meta:
        default_related_name = "bars"
```

----------------------------------------

TITLE: Defining Item Update Date in Django Feed
DESCRIPTION: This snippet shows three ways to define the update date for items in a Django feed: a method taking an item, a method for all items, and a hard-coded attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
def item_updateddate(self, item):
    """
    Takes an item, as returned by items(), and returns the item's
    updateddate.
    """

def item_updateddate(self):
    """
    Returns the updateddate for every item in the feed.
    """

item_updateddate = datetime.datetime(2005, 5, 3)  # Hard-coded updateddate.
```

----------------------------------------

TITLE: Feed Enclosure Configuration in Django
DESCRIPTION: Methods and attributes for configuring feed enclosures, including URLs, lengths, and MIME types.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
item_enclosures = []  # Hard-coded enclosure list

item_enclosure_url = "/foo/bar.mp3"  # Hard-coded enclosure link.

item_enclosure_length = 32000  # Hard-coded enclosure length.

def item_enclosures(self, item):
    """
    Takes an item, as returned by items(), and returns a list of
    django.utils.feedgenerator.Enclosure objects.
    """
```

----------------------------------------

TITLE: Updating URL Pattern for Authentication View in Django
DESCRIPTION: This snippet demonstrates how to update a URL pattern for an authentication view to use the 'url' function with a 'name' parameter, which is the new recommended approach in Django 1.6.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_9

LANGUAGE: Python
CODE:
```
url(
    r"^reset/done/$",
    "django.contrib.auth.views.password_reset_complete",
    name="password_reset_complete",
)
```

----------------------------------------

TITLE: PostgreSQL Full Text Search Feature Addition
DESCRIPTION: Introduces full text search functionality in django.contrib.postgres, allowing search across multiple fields with language configurations and result ranking.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
from django.contrib.postgres.search import TrigramSimilarity, TrigramDistance

# Trigram lookups and expressions are now supported
# Use trigram_similar lookup and similarity/distance expressions
```

----------------------------------------

TITLE: Getting and Setting GDALRaster Origin Attribute in Python
DESCRIPTION: Shows how to access the top-left origin coordinates (x, y) of a GDALRaster using the `origin` attribute and how to modify its x-coordinate. The origin represents coefficients 0 and 3 of the geotransform.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_40

LANGUAGE: pycon
CODE:
```
>>> rst = GDALRaster({"width": 10, "height": 20, "srid": 4326})
>>> rst.origin
[0.0, 0.0]
>>> rst.origin.x = 1
>>> rst.origin
[1.0, 0.0]
```

----------------------------------------

TITLE: Handling Geometry Fields in Raw SQL Queries (Python)
DESCRIPTION: Provides guidance on performing raw SQL queries involving geometry fields in GeoDjango. It highlights the need to wrap the geometry field name using `connection.ops.select` to ensure the database returns the geometry in a format GEOS can understand. Requires `django.db.connection` or `connections` and a relevant model (e.g., `City`).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_16

LANGUAGE: pycon
CODE:
```
>>> from django.db import connection
>>> # or if you're querying a non-default database:
>>> from django.db import connections
>>> connection = connections["your_gis_db_alias"]
>>> City.objects.raw(
...     "SELECT id, name, %s as point from myapp_city" % (connection.ops.select % "point")
... )
```

----------------------------------------

TITLE: Implementing a Category-Specific Feed with get_object() in Django - Python
DESCRIPTION: Shows how to subclass Django's Feed class to create category-specific feeds, properly implementing get_object() to retrieve a database object based on a parameter from the URL. Demonstrates injecting dependencies from django.shortcuts and project models, highlighting the Feed class extension point for custom logic. Takes 'request' and category_id as input, returning the fetched category or raising NotFound. The method is intended for use in Feed view generation and requires a valid Category model with Django ORM access.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
from django.contrib.syndication.views import Feed
from django.shortcuts import get_object_or_404
from myproject.models import Category


class LatestEntriesByCategory(Feed):
    def get_object(self, request, category_id):
        return get_object_or_404(Category, id=category_id)

    # ...
```

----------------------------------------

TITLE: Starting Daphne with a Django ASGI application
DESCRIPTION: Command to start the Daphne server with a Django ASGI application. This command should be run from the same directory as manage.py to ensure the project is on the Python path.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/daphne.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
daphne myproject.asgi:application
```

----------------------------------------

TITLE: Configuring Feed URLs with Patterns in Django URLconf - Python
DESCRIPTION: Demonstrates use of the "patterns" function in Django URLconf to define routes for feeds using both the legacy "feed" view and the new Feed class approach. Shows inclusion of parameters in URL regex patterns, providing routing context for dynamic feed generation. This requires Django settings, functional endpoints or Feed class instantiations, and appropriate import of pattern helpers. Expects URL patterns as input and returns a tuple or other routing object usable by Django's URL resolver.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
(
    r"^feeds/(?P<url>.*)/$",
    "django.contrib.syndication.views.feed",
    {"feed_dict": feeds},
)
```

LANGUAGE: python
CODE:
```
from django.conf.urls.defaults import *
from myproject.feeds import LatestEntries, LatestEntriesByCategory

urlpatterns = patterns(
    "",
    # ...
    (r"^feeds/latest/$", LatestEntries()),
    (r"^feeds/categories/(?P<category_id>\\d+)/$", LatestEntriesByCategory()),
    # ...
)
```

----------------------------------------

TITLE: Dynamic Settings Assignment in Python
DESCRIPTION: Demonstrates how to dynamically assign settings using Python list comprehension, creating a list of string representations of numbers.
SOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
MY_SETTING = [str(i) for i in range(30)]
```

----------------------------------------

TITLE: Incorrect Template Tag Loading Order
DESCRIPTION: Shows incorrect ordering of template tags in a load statement. Tags should be in alphabetical order according to Django conventions.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_8

LANGUAGE: html+django
CODE:
```
{% load l10 i18n tz %}
```

----------------------------------------

TITLE: Connecting a Feed to a URL in Django URLconf
DESCRIPTION: This snippet shows how to connect a Feed class instance to a URL in Django's URLconf. It demonstrates the use of the path() function to map a URL to the feed.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.urls import path
from myproject.feeds import LatestEntriesFeed

urlpatterns = [
    # ...
    path("latest/feed/", LatestEntriesFeed()),
    # ...
]
```

----------------------------------------

TITLE: Installing ReportLab with pip
DESCRIPTION: Command to install the ReportLab PDF library using pip package manager.
SOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-pdf.txt#2025-04-23_snippet_0

LANGUAGE: console
CODE:
```
$ python -m pip install reportlab
```

----------------------------------------

TITLE: Django Debug Template Implementation
DESCRIPTION: A comprehensive template that renders debug information including exception details, traceback, request data, and Django configuration. This template is used by Django's debug page when DEBUG=True to provide detailed error information for developers.
SOURCE: https://github.com/django/django/blob/main/django/views/templates/technical_500.txt#2025-04-23_snippet_0

LANGUAGE: django-template
CODE:
```
{% firstof exception_type 'Report' %}{% if request %} at {{ request.path_info }}{% endif %}
{% firstof exception_value 'No exception message supplied' %}
{% if request %}
Request Method: {{ request.META.REQUEST_METHOD }}
Request URL: {{ request_insecure_uri }}{% endif %}
Django Version: {{ django_version_info }}
Python Executable: {{ sys_executable }}
Python Version: {{ sys_version_info }}
Python Path: {{ sys_path }}
Server time: {{server_time|date:"r"}}
Installed Applications:
{{ settings.INSTALLED_APPS|pprint }}
Installed Middleware:
{{ settings.MIDDLEWARE|pprint }}
{% if template_does_not_exist %}Template loader postmortem
{% if postmortem %}Django tried loading these templates, in this order:
{% for entry in postmortem %}
Using engine {{ entry.backend.name }}:
{% if entry.tried %}{% for attempt in entry.tried %}    * {{ attempt.0.loader_name }}: {{ attempt.0.name }} ({{ attempt.1 }})
{% endfor %}{% else %}    This engine did not provide a list of tried templates.
{% endif %}{% endfor %}
{% else %}No templates were found because your 'TEMPLATES' setting is not configured.
{% endif %}
{% endif %}{% if template_info %}
Template error:
In template {{ template_info.name }}, error at line {{ template_info.line }}
   {{ template_info.message }}
{% for source_line in template_info.source_lines %}{% if source_line.0 == template_info.line %}   {{ source_line.0 }} : {{ template_info.before }} {{ template_info.during }} {{ template_info.after }}{% else %}   {{ source_line.0 }} : {{ source_line.1 }}{% endif %}{% endfor %}{% endif %}{% if frames %}

Traceback (most recent call last):
{% for frame in frames %}{% ifchanged frame.exc_cause %}{% if frame.exc_cause %}
{% if frame.exc_cause_explicit %}The above exception ({{ frame.exc_cause }}) was the direct cause of the following exception:{% else %}During handling of the above exception ({{ frame.exc_cause }}), another exception occurred:{% endif %}
{% endif %}{% endifchanged %}  {% if frame.tb %}File "{{ frame.filename }}"{% if frame.context_line %}, line {{ frame.lineno }}{% endif %}, in {{ frame.function }}
{% if frame.context_line %}    {% spaceless %}{{ frame.context_line }}{% endspaceless %}{{ frame.tb_area_colno }}{% endif %}{% elif forloop.first %}None{% else %}Traceback: None{% endif %}
{% endfor %}
{% if exception_type %}Exception Type: {{ exception_type }}{% if request %} at {{ request.path_info }}{% endif %}
{% if exception_value %}Exception Value: {{ exception_value }}{% endif %}{% if exception_notes %}{{ exception_notes }}{% endif %}{% endif %}{% endif %}
{% if raising_view_name %}Raised during: {{ raising_view_name }}{% endif %}
{% if request %}Request information:
{% if user_str %}USER: {{ user_str }}{% endif %}

GET:{% for k, v in request_GET_items %}
{{ k }} = {{ v|stringformat:"r" }}{% empty %} No GET data{% endfor %}

POST:{% for k, v in filtered_POST_items %}
{{ k }} = {{ v|stringformat:"r" }}{% empty %} No POST data{% endfor %}

FILES:{% for k, v in request_FILES_items %}
{{ k }} = {{ v|stringformat:"r" }}{% empty %} No FILES data{% endfor %}

COOKIES:{% for k, v in request_COOKIES_items %}
{{ k }} = {{ v|stringformat:"r" }}{% empty %} No cookie data{% endfor %}

META:{% for k, v in request_meta.items|dictsort:0 %}
{{ k }} = {{ v|stringformat:"r" }}{% endfor %}
{% else %}Request data not supplied
{% endif %}
Settings:
Using settings module {{ settings.SETTINGS_MODULE }}{% for k, v in settings.items|dictsort:0 %}
{{ k }} = {{ v|stringformat:"r" }}{% endfor %}

{% if not is_email %}
You're seeing this error because you have DEBUG = True in your
Django settings file. Change that to False, and Django will
display a standard page generated by the handler for this status code.
{% endif %}
```

----------------------------------------

TITLE: Using ArraySubquery for JSON Object Annotation in Django
DESCRIPTION: This snippet demonstrates how to use ArraySubquery to annotate an author with a list of their books as JSON objects. It filters books by author, creates JSON objects for each book, and uses ArraySubquery to aggregate the results.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/expressions.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
>>> from django.db.models import OuterRef
>>> from django.db.models.functions import JSONObject
>>> from django.contrib.postgres.expressions import ArraySubquery
>>> books = Book.objects.filter(author=OuterRef("pk")).values(
...     json=JSONObject(title="title", pages="pages")
... )
>>> author = Author.objects.annotate(books=ArraySubquery(books)).first()
>>> author.books
[{'title': 'Solaris', 'pages': 204}, {'title': 'The Cyberiad', 'pages': 295}]
```

----------------------------------------

TITLE: Creating a GEOS Point with Specific SRID (Python)
DESCRIPTION: Demonstrates creating a `Point` geometry object using specific coordinates and assigning it a Spatial Reference Identifier (SRID) of 32140. This SRID corresponds to a coordinate system specific to south Texas using meters. Requires `django.contrib.gis.geos.GEOSGeometry` and `Point`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_13

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.geos import GEOSGeometry, Point
>>> pnt = Point(954158.1, 4215137.1, srid=32140)
```

----------------------------------------

TITLE: Using BoolOr Aggregate with Django Models
DESCRIPTION: Shows how to use the BoolOr aggregate function with Django models. The example uses a Comment model and demonstrates aggregating boolean fields and conditions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> from django.db.models import Q
>>> from django.contrib.postgres.aggregates import BoolOr
>>> Comment.objects.aggregate(boolor=BoolOr("published"))
{'boolor': True}
>>> Comment.objects.aggregate(boolor=BoolOr(Q(rank__gt=2)))
{'boolor': False}
```

----------------------------------------

TITLE: Using RedisCache Backend in Django
DESCRIPTION: The RedisCache backend in Django is used for caching with Redis. A bug in Django 4.0 that caused a crash when handling boolean values has been fixed.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
RedisCache
```

----------------------------------------

TITLE: Syncing Deprecated Storage Settings with STORAGES in Django 4.2
DESCRIPTION: Resolves an issue where the deprecated DEFAULT_FILE_STORAGE and STATICFILES_STORAGE settings were not properly synchronized with the STORAGES setting.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.5.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
DEFAULT_FILE_STORAGE
STATICFILES_STORAGE
STORAGES
```

----------------------------------------

TITLE: Installing GeoDjango Dependencies with Homebrew
DESCRIPTION: Installs required PostgreSQL, PostGIS, GDAL, and libgeoip packages using Homebrew package manager.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_7

LANGUAGE: shell
CODE:
```
$ brew install postgresql
$ brew install postgis
$ brew install gdal
$ brew install libgeoip
```

----------------------------------------

TITLE: Fixed Parameter Database Type Field in Django
DESCRIPTION: Example of a field with hardcoded parameters, showing a less flexible approach to custom field implementation where the column length is fixed in the code.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
# This is a silly example of hardcoded parameters.
class CharMaxlength25Field(models.Field):
    def db_type(self, connection):
        return "char(25)"


# In the model:
class MyModel(models.Model):
    # ...
    my_field = CharMaxlength25Field()
```

----------------------------------------

TITLE: Accessing Compressed and Network Rasters in Python using GDAL
DESCRIPTION: These examples demonstrate how to access compressed rasters (zip, gzip, tar) and network rasters using GDAL's virtual filesystem capabilities in Python.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_51

LANGUAGE: python
CODE:
```
from django.contrib.gis.gdal import GDALRaster
rst = GDALRaster("/vsizip/path/to/your/file.zip/path/to/raster.tif")
rst = GDALRaster("/vsigzip/path/to/your/file.gz")
rst = GDALRaster("/vsitar/path/to/your/file.tar/path/to/raster.tif")

rst = GDALRaster("/vsicurl/https://example.com/raster.tif")
rst.name
```

----------------------------------------

TITLE: Caching i18n JavaScript Catalog View in Django
DESCRIPTION: Shows how to implement server-side caching for the JavaScriptCatalog view to reduce CPU load when serving internationalized JavaScript.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_45

LANGUAGE: python
CODE:
```
from django.views.decorators.cache import cache_page
from django.views.i18n import JavaScriptCatalog

# The value returned by get_version() must change when translations change.
urlpatterns = [
    path(
        "jsi18n/",
        cache_page(86400, key_prefix="jsi18n-%s" % get_version())(
            JavaScriptCatalog.as_view()
        ),
        name="javascript-catalog",
    ),
]
```

----------------------------------------

TITLE: Creating Empty GEOS Point Objects in Python
DESCRIPTION: Shows two equivalent methods for instantiating an empty `Point` object within Django's GEOS framework. An empty point can be created either by calling the `Point` constructor with no arguments or by passing an empty sequence (like an empty list) to the constructor.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_7

LANGUAGE: pycon
CODE:
```
>>> pnt = Point()
>>> pnt = Point([])
```

----------------------------------------

TITLE: Querying Django HStoreField: keys Lookup with ArrayField Overlap (Python)
DESCRIPTION: Demonstrates using the 'keys' transform in conjunction with an ArrayField lookup like 'overlap', retrieving objects where the array of dict keys has at least one element in common with a provided list (uses SQL akeys() and array overlap). Supported in Django HStoreField on PostgreSQL. Input: list of keys to overlap-match; output: QuerySet of matching objects. Limitation: key order is unreliable and suited mainly for array operations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_14

LANGUAGE: pycon
CODE:
```
>>> Dog.objects.create(name="Rufus", data={"toy": "bone"})\n>>> Dog.objects.create(name="Meg", data={"breed": "collie", "owner": "Bob"})\n\n>>> Dog.objects.filter(data__keys__overlap=["breed", "toy"])\n<QuerySet [<Dog: Rufus>, <Dog: Meg>]>
```

----------------------------------------

TITLE: Normalizing a GEOS MultiPoint Geometry in Python
DESCRIPTION: Demonstrates the `normalize()` method on a `MultiPoint` object to convert its internal coordinate order to a canonical form. The example shows creating a `MultiPoint`, printing its initial WKT representation, calling `normalize()` in-place (modifying the object), and printing the resulting normalized WKT representation. The `clone=True` option could be used to return a new normalized object without modifying the original.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_5

LANGUAGE: pycon
CODE:
```
>>> g = MultiPoint(Point(0, 0), Point(2, 2), Point(1, 1))
>>> print(g)
MULTIPOINT (0 0, 2 2, 1 1)
>>> g.normalize()
>>> print(g)
MULTIPOINT (2 2, 1 1, 0 0)
```

----------------------------------------

TITLE: Demonstrating Deferred Loading of Fields
DESCRIPTION: Example showing how fields omitted from the raw query are loaded on demand when accessed, which can result in additional database queries for each deferred field.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
>>> for p in Person.objects.raw("SELECT id, first_name FROM myapp_person"):
...     print(
...         p.first_name,  # This will be retrieved by the original query
...         p.last_name,  # This will be retrieved on demand
...     )
...
John Smith
Jane Jones
```

----------------------------------------

TITLE: Filtering by Month - SQL Equivalent
DESCRIPTION: Provides the SQL equivalent for month extraction and comparison, using EXTRACT to filter by month value. Inputs are strings for the month number; output is all records where the field's month matches the specified value(s). Database syntax and function support may vary.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_108

LANGUAGE: sql
CODE:
```
SELECT ... WHERE EXTRACT('month' FROM pub_date) = '12';
SELECT ... WHERE EXTRACT('month' FROM pub_date) >= '6';
```

----------------------------------------

TITLE: Rendering Django Form Labels with Label Suffix - HTML Template
DESCRIPTION: Example showing how to render form field labels with the new label_suffix behavior in Django 1.6 templates.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_7

LANGUAGE: html
CODE:
```
{{ form.my_field.label_tag }}: {{ form.my_field }}
```

LANGUAGE: html
CODE:
```
{{ form.my_field.label_tag }} {{ form.my_field }}
```

LANGUAGE: html
CODE:
```
<label for="id_my_field">My Field:</label> <input id="id_my_field" type="text" name="my_field" />
```

----------------------------------------

TITLE: Rebasing and squashing commits
DESCRIPTION: Combines multiple commits into a single, coherent commit to simplify the change history before submitting a pull request.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
git rebase -i HEAD~2
```

----------------------------------------

TITLE: Client-side Caching for i18n JavaScript Catalog in Django
DESCRIPTION: Demonstrates how to implement client-side caching for the JavaScriptCatalog view using conditional decorators in Django.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_46

LANGUAGE: python
CODE:
```
from django.utils import timezone
from django.views.decorators.http import last_modified
from django.views.i18n import JavaScriptCatalog

last_modified_date = timezone.now()

urlpatterns = [
    path(
        "jsi18n/",
        last_modified(lambda req, **kw: last_modified_date)(
            JavaScriptCatalog.as_view()
        ),
        name="javascript-catalog",
    ),
]
```

----------------------------------------

TITLE: Creating Parameterized View Decorators from Middleware
DESCRIPTION: Similar to decorator_from_middleware but returns a function that accepts arguments to be passed to the middleware class, allowing for customizable middleware-based decorators like cache_page.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
decorator_from_middleware_with_args(middleware_class)
```

----------------------------------------

TITLE: Querying Valid Geometries in Django ORM
DESCRIPTION: Example of using the 'isvalid' lookup to find valid geometries across different spatial database backends using Django ORM.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__isvalid=True)
```

----------------------------------------

TITLE: Handling Timezone Formats in Database Functions
DESCRIPTION: Shows how database functions now handle datetime.timezone formats created using datetime.timedelta instances, outputting UTC offset strings.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
timezone(timedelta(hours=5))
```

----------------------------------------

TITLE: Security URL Checking Example in Django's redirect system
DESCRIPTION: This snippet shows an example URL that would be incorrectly considered safe by Django's is_safe_url() function prior to the fix for CVE-2016-2512. This vulnerability could allow malicious redirects or XSS attacks.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.3.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
http://mysite.example.com\@attacker.com
```

----------------------------------------

TITLE: Creating a Django Feed with Hardcoded Stylesheet URL
DESCRIPTION: This snippet demonstrates how to add a hardcoded stylesheet URL to a Django syndication feed by setting the stylesheets attribute on the feed class.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
from django.contrib.syndication.views import Feed


class FeedWithHardcodedStylesheet(Feed):
    stylesheets = [
        "https://example.com/rss_stylesheet.xslt",
    ]
```

----------------------------------------

TITLE: Installing psycopg Module for PostgreSQL Support - Dos Console
DESCRIPTION: This command installs the psycopg package using Python's package manager pip within a Windows command shell. psycopg acts as the interface between Python (and thus Django/GeoDjango) and PostgreSQL. This must run in an environment where pip and Python are available, typically within an activated virtual environment. The user must enter the command at the prompt; no parameters are required. Output is the downloaded and installed psycopg module, available for Django to use as its backend adapter.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_12

LANGUAGE: doscon
CODE:
```
...\> py -m pip install psycopg
```

----------------------------------------

TITLE: Creating Multidimensional Arrays with SimpleArrayField in Django Forms
DESCRIPTION: Shows how to use SimpleArrayField for creating multidimensional arrays in Django forms. It demonstrates chaining SimpleArrayFields with a custom delimiter for 2D data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/forms.txt#2025-04-23_snippet_1

LANGUAGE: pycon
CODE:
```
>>> from django import forms
>>> from django.contrib.postgres.forms import SimpleArrayField

>>> class GridForm(forms.Form):
...     places = SimpleArrayField(SimpleArrayField(IntegerField()), delimiter="|")
...

>>> form = GridForm({"places": "1,2|2,1|4,3"})
>>> form.is_valid()
True
>>> form.cleaned_data
{'places': [[1, 2], [2, 1], [4, 3]]}
```

----------------------------------------

TITLE: XML Serialization Format
DESCRIPTION: Example of Django's XML serialization format structure.
SOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_4

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="utf-8"?>
<django-objects version="1.0">
    <object pk="123" model="sessions.session">
        <field type="DateTimeField" name="expire_date">2013-01-16T08:16:59.844560+00:00</field>
        <!-- ... -->
    </object>
</django-objects>
```

----------------------------------------

TITLE: Defining a GeoDjango Model with a Projected PointField in Python
DESCRIPTION: Defines a Django model named `SouthTexasCity` using `django.contrib.gis.db.models`. It includes a `CharField` for the city name and a `PointField` to store geographic coordinates using the projected SRID 32140 (suitable for South Texas), with units in meters. This model structure allows for storing and querying spatial data specific to that region.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.contrib.gis.db import models


class SouthTexasCity(models.Model):
    name = models.CharField(max_length=30)
    # A projected coordinate system (only valid for South Texas!)
    # is used, units are in meters.
    point = models.PointField(srid=32140)
```

----------------------------------------

TITLE: Creating a new branch for a ticket
DESCRIPTION: Creates a new branch based on the upstream main branch to work on a specific ticket. This isolates the work for the ticket.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
git checkout -b ticket_xxxxx upstream/main
```

----------------------------------------

TITLE: Demonstrating XSS vulnerability in Django debug template tag
DESCRIPTION: This snippet shows the {% debug %} template tag, which was vulnerable to XSS attacks in previous versions. The security fix ensures proper encoding of the current context and limits output based on the DEBUG setting.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_0

LANGUAGE: django
CODE:
```
{% debug %}
```

----------------------------------------

TITLE: Setting PostgreSQL Transaction Isolation Level in Django
DESCRIPTION: Shows how to configure a higher transaction isolation level (like `SERIALIZABLE`) for a PostgreSQL database connection in Django. This is done by adding the `isolation_level` key to the `OPTIONS` dictionary in the `DATABASES` setting, typically using an `IsolationLevel` enum from `psycopg_any`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_3

LANGUAGE: python
CODE:
```
from django.db.backends.postgresql.psycopg_any import IsolationLevel

DATABASES = {
    # ...
    "OPTIONS": {
        "isolation_level": IsolationLevel.SERIALIZABLE
    }
}
```

----------------------------------------

TITLE: Querying Spatial Touch in Django ORM
DESCRIPTION: Example of using the 'touches' lookup to find geometries that spatially touch a given geometry across different spatial database backends.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__touches=geom)
```

----------------------------------------

TITLE: Internal API Indicator Example - Python
DESCRIPTION: Demonstrates the Python convention for marking internal APIs using leading underscore (_) prefix. This is referenced in the documentation as a way to identify internal APIs that are not covered by stability guarantees.
SOURCE: https://github.com/django/django/blob/main/docs/misc/api-stability.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
_internal_method
```

----------------------------------------

TITLE: Generated HTML Output for Radio Buttons
DESCRIPTION: Shows the final HTML output generated by Django when rendering radio buttons with labels and required attributes.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_17

LANGUAGE: HTML
CODE:
```
<fieldset>
    <legend>Radio buttons</legend>
    <div class="myradio">
        <label for="id_beatles_0"><input id="id_beatles_0" name="beatles" type="radio" value="john" required> John</label>
    </div>
    <div class="myradio">
        <label for="id_beatles_1"><input id="id_beatles_1" name="beatles" type="radio" value="paul" required> Paul</label>
    </div>
    <div class="myradio">
        <label for="id_beatles_2"><input id="id_beatles_2" name="beatles" type="radio" value="george" required> George</label>
    </div>
    <div class="myradio">
```

----------------------------------------

TITLE: Using Index Transforms with ArrayField in Django
DESCRIPTION: Demonstrates how to use index transforms with ArrayField in Django. This example shows querying for posts based on specific positions in the tags array.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> Post.objects.create(name="First post", tags=["thoughts", "django"])
>>> Post.objects.create(name="Second post", tags=["thoughts"])

>>> Post.objects.filter(tags__0="thoughts")
<QuerySet [<Post: First post>, <Post: Second post>]>

>>> Post.objects.filter(tags__1__iexact="Django")
<QuerySet [<Post: First post>]>

>>> Post.objects.filter(tags__276="javascript")
<QuerySet []>
```

----------------------------------------

TITLE: Generated SQL for Case-Insensitive Query in Django
DESCRIPTION: Shows the SQL generated by Django when using the custom UpperCase transform for a case-insensitive query on the Author model.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_5

LANGUAGE: sql
CODE:
```
SELECT ... WHERE UPPER("author"."name") = UPPER('doe')
```

----------------------------------------

TITLE: Referencing Django File Upload Classes in Python
DESCRIPTION: This snippet demonstrates how to reference Django's FileField, ImageField, ClearableFileInput, and FileInput classes. These classes are central to the security fix implemented in Django 3.2.19 for handling multiple file uploads.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.19.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
:class:`.forms.FileField`
:class:`.forms.ImageField`
:class:`~django.forms.ClearableFileInput`
:class:`~django.forms.FileInput`
```

----------------------------------------

TITLE: Running Django JavaScript Tests via Command Line
DESCRIPTION: Command to execute all JavaScript tests for Django from the command line using npm. This requires Node.js and the dependencies to be installed first.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/javascript.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
$ npm test
```

----------------------------------------

TITLE: Implementing Test-Level Deprecation Warning Ignore in Python
DESCRIPTION: Shows how to ignore deprecation warnings for a specific test using the ignore_warnings decorator.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/submitting-patches.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.test import ignore_warnings
from django.utils.deprecation import RemovedInDjangoXXWarning

@ignore_warnings(category=RemovedInDjangoXXWarning)
def test_foo(self): ...
```

----------------------------------------

TITLE: Testing Deprecation Warnings in Python
DESCRIPTION: Demonstrates how to write a test that verifies deprecation warnings are properly raised with the correct message.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/submitting-patches.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
from django.utils.deprecation import RemovedInDjangoXXWarning

def test_foo_deprecation_warning(self):
    msg = "Expected deprecation message"
    with self.assertWarnsMessage(RemovedInDjangoXXWarning, msg) as ctx:
        # invoke deprecated behavior
        ...
    self.assertEqual(ctx.filename, __file__)
```

----------------------------------------

TITLE: Importing Pathlib Module in Python
DESCRIPTION: This snippet imports the pathlib module, which provides classes representing filesystem paths with semantics appropriate for different operating systems. It allows for more intuitive and platform-independent path manipulations in Python.
SOURCE: https://github.com/django/django/blob/main/tests/staticfiles_tests/project/pathlib/pathlib.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
pathlib
```

----------------------------------------

TITLE: Querying GeoDjango Model using 'intersects' Lookup with GEOS Point (Python)
DESCRIPTION: Shows how to create a `Point` object using `django.contrib.gis.geos.Point` and then use it in an `intersects` spatial lookup combined with the `get` method to retrieve a single `WorldBorder` instance whose geometry intersects the point. Requires `django.contrib.gis.geos.Point` and the `world.models.WorldBorder` model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_12

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.geos import Point
>>> pnt = Point(12.4604, 43.9420)
>>> WorldBorder.objects.get(mpoly__intersects=pnt)
<WorldBorder: San Marino>
```

----------------------------------------

TITLE: Using LPad Function in Django ORM
DESCRIPTION: Demonstrates using the LPad function to pad a string field with a specified character from the left side
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_31

LANGUAGE: python
CODE:
```
>>> Author.objects.update(name=LPad("name", 8, Value("abc")))
1
>>> print(Author.objects.get(alias="j").name)
abcaJohn
```

----------------------------------------

TITLE: Optimizing Indexed Raw Queries with SQL LIMIT
DESCRIPTION: Example of optimizing index retrieval by using SQL LIMIT clause to reduce the query result size at the database level, which is more efficient for large datasets.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> first_person = Person.objects.raw("SELECT * FROM myapp_person LIMIT 1")[0]
```

----------------------------------------

TITLE: Setting up Postgres.app Path on macOS
DESCRIPTION: Adds Postgres.app binaries to the system PATH for command-line access.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_6

LANGUAGE: bash
CODE:
```
export PATH=$PATH:/Applications/Postgres.app/Contents/Versions/X.Y/bin
```

----------------------------------------

TITLE: Creating Article FormSets in Python
DESCRIPTION: Example showing two equivalent ways to initialize a formset: with no arguments and with data=None. Both methods create an empty formset.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_7

LANGUAGE: pycon
CODE:
```
>>> formset = ArticleFormSet()
>>> formset = ArticleFormSet(data=None)
```

----------------------------------------

TITLE: Accessing GDALRaster Geotransform Attribute in Python
DESCRIPTION: Demonstrates retrieving the affine transformation matrix (geotransform) of a GDALRaster object as a tuple of six coefficients using the `geotransform` attribute. The default geotransform `[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]` is shown.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_39

LANGUAGE: pycon
CODE:
```
>>> rst = GDALRaster({"width": 10, "height": 20, "srid": 4326})
>>> rst.geotransform
[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]
```

----------------------------------------

TITLE: Optimizing ManyToManyField Serialization in Django 4.2.2
DESCRIPTION: Addresses a regression that caused unnecessary selection of non-nullable ManyToManyField without a natural key during serialization.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.5.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
ManyToManyField
```

----------------------------------------

TITLE: Configuring Apache mod_wsgi for GeoDjango Deployment
DESCRIPTION: Example configuration for Apache's mod_wsgi to ensure thread safety when deploying GeoDjango applications. It recommends setting the 'threads' attribute to 1 and increasing the number of processes instead.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/deployment.txt#2025-04-23_snippet_0

LANGUAGE: apache
CODE:
```
WSGIDaemonProcess threads=1
```

----------------------------------------

TITLE: Fixing Denial-of-Service Vulnerability in Django's Truncator Class
DESCRIPTION: Addresses CVE-2023-43665 by limiting the input processed by Truncator in HTML mode to the first five million characters. This affects the chars() and words() methods, which are used in truncatechars_html and truncatewords_html template filters.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.12.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.utils.text.Truncator
```

----------------------------------------

TITLE: Setting Language with HTTP Headers in Django Tests
DESCRIPTION: Demonstrates how to set the language for a test client request using the Accept-Language HTTP header. This example sets the preferred language to French.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
def test_language_using_header(self):
    response = self.client.get("/", headers={"accept-language": "fr"})
    self.assertEqual(response.content, b"Bienvenue sur mon site.")
```

----------------------------------------

TITLE: Thread-Safe Implementation of CycleNode in Python
DESCRIPTION: This class shows a thread-safe implementation of the CycleNode used in Django's built-in cycle template tag. It uses render_context to store state between render method invocations.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
class CycleNode(template.Node):
    def __init__(self, cyclevars):
```

----------------------------------------

TITLE: Configuring Sphinx Intersphinx Mapping for Django Documentation
DESCRIPTION: Configuration snippet showing how to set up Intersphinx mapping to link back to Django documentation in Sphinx documentation builds.
SOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
intersphinx_mapping = {
    # ...
    "django": (
        "https://docs.djangoproject.com/en/stable/",
        None,
    ),
}
```

----------------------------------------

TITLE: Using list_editable admin option in Django
DESCRIPTION: Shows how to use the new list_editable admin option to make fields editable on admin list views for bulk editing.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
list_editable = ['field1', 'field2']
```

----------------------------------------

TITLE: Creating a Django Feed with Multiple Stylesheets
DESCRIPTION: This snippet shows how to combine multiple stylesheets for a Django feed, using both simple URL strings and the Stylesheet class for more complex configurations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
from django.contrib.syndication.views import Feed
from django.utils.feedgenerator import Stylesheet


class MultiStylesheetFeed(Feed):
    stylesheets = [
        "/stylesheet1.xsl",
        Stylesheet("/stylesheet2.xsl"),
    ]
```

----------------------------------------

TITLE: Rendered Output of Extended Template in Django
DESCRIPTION: Shows the potential rendered HTML output when a child template extends a base template. This example assumes two blog entries in the blog_entries variable.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_11

LANGUAGE: html+django
CODE:
```
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="style.css">
    <title>My amazing blog</title>
</head>

<body>
    <div id="sidebar">
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/blog/">Blog</a></li>
        </ul>
    </div>

    <div id="content">
        <h2>Entry one</h2>
        <p>This is my first entry.</p>

        <h2>Entry two</h2>
        <p>This is my second entry.</p>
    </div>
</body>
</html>
```

----------------------------------------

TITLE: Checking SQLite R*Tree Module Support in SQLite3
DESCRIPTION: This snippet demonstrates how to check if SQLite is compiled with R*Tree module support by creating a virtual table using rtree.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/spatialite.txt#2025-04-23_snippet_0

LANGUAGE: sqlite3
CODE:
```
sqlite> CREATE VIRTUAL TABLE testrtree USING rtree(id,minX,maxX,minY,maxY);
```

----------------------------------------

TITLE: Django Collectstatic Management Command
DESCRIPTION: Command for collecting static files that had incorrect permissions on intermediate directories when run on Python 3.7+
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.10.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
collectstatic
```

----------------------------------------

TITLE: Comparing Context Equality via Flattened Dict in Django (Python)
DESCRIPTION: This snippet illustrates how two Context objects with equivalent variables can be compared for equality after flattening. The equality holds if both sets of variables are the same—even if constructed differently. Useful in testing scenarios; relies on the Context.flatten() method. Inputs are variables assigned to Context, output is a boolean result.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
>>> c1 = Context()
>>> c1["foo"] = "first level"
>>> c1["bar"] = "second level"
>>> c2 = Context()
>>> c2.update({"bar": "second level", "foo": "first level"})
{'foo': 'first level', 'bar': 'second level'}
>>> c1 == c2
True
```

----------------------------------------

TITLE: Preventing Foreign Key Constraint Addition in Primary Key Alteration in Python
DESCRIPTION: Prevented a primary key alteration from adding a foreign key constraint if db_constraint=False.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_12

LANGUAGE: Python
CODE:
```
models.ForeignKey(to=Model, db_constraint=False)
```

----------------------------------------

TITLE: Deprecating Old {% cycle %} Tag Syntax in Django Templates
DESCRIPTION: The old comma-separated syntax for the {% cycle %} template tag is deprecated in Django 1.9. This syntax caused parsing issues with the current syntax and will be removed in Django 1.10.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_6

LANGUAGE: html+django
CODE:
```
{% cycle row1,row2,row3 %}
```

----------------------------------------

TITLE: Using BoolAnd Aggregate with Django Models
DESCRIPTION: Illustrates the usage of BoolAnd aggregate function with Django models. The example uses a Comment model and demonstrates aggregating boolean fields and conditions.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> from django.db.models import Q
>>> from django.contrib.postgres.aggregates import BoolAnd
>>> Comment.objects.aggregate(booland=BoolAnd("published"))
{'booland': False}
>>> Comment.objects.aggregate(booland=BoolAnd(Q(rank__lt=100)))
{'booland': True}
```

----------------------------------------

TITLE: Running Tests Starting at a Specific Module
DESCRIPTION: This command runs Django's test suite starting from a specified top-level module (wsgi in this example), skipping all modules that would normally be run before it.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_9

LANGUAGE: console
CODE:
```
$ ./runtests.py --start-at=wsgi
```

----------------------------------------

TITLE: Referencing ExclusionConstraint Class in Django for PostgreSQL
DESCRIPTION: This snippet demonstrates how to reference the ExclusionConstraint class from the django.contrib.postgres.constraints module. It is used for defining exclusion constraints when working with PostgreSQL range types in Django models.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_36

LANGUAGE: Python
CODE:
```
from django.contrib.postgres.constraints import ExclusionConstraint
```

----------------------------------------

TITLE: Using inspectdb Command in GeoDjango
DESCRIPTION: GeoDjango's override of the inspectdb management command that adds support for geometry fields in auto-generated model definitions. Requires django.contrib.gis in INSTALLED_APPS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/commands.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django-admin inspectdb
```

----------------------------------------

TITLE: Retrieving Field Values and Geometries from GDAL Layer in Python
DESCRIPTION: Examples showing how to retrieve field values and geometries from a GDAL Layer.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> layer.get_fields("Name")
['Pueblo', 'Lawrence', 'Houston']
>>> [pt.tuple for pt in layer.get_geoms()]
[(-104.609252, 38.255001), (-95.23506, 38.971823), (-95.363151, 29.763374)]
```

----------------------------------------

TITLE: Defining a Custom Feed Class in GeoDjango
DESCRIPTION: This snippet demonstrates how to create a custom Feed class in GeoDjango, showing different ways to define geometry and item_geometry methods. These methods can be defined as class attributes, functions without arguments, or functions with a single argument.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/feeds.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib.gis.feeds import Feed


class MyFeed(Feed):
    # First, as a class attribute.
    geometry = ...
    item_geometry = ...

    # Also a function with no arguments
    def geometry(self): ...

    def item_geometry(self): ...

    # And as a function with a single argument
    def geometry(self, obj): ...

    def item_geometry(self, item): ...
```

----------------------------------------

TITLE: Creating Custom Aggregate Function in Django ORM (Python)
DESCRIPTION: Demonstrates how to create a custom SUM aggregate function with support for SUM(ALL field). It shows the implementation of the Sum class inheriting from Aggregate, defining the function, template, and initialization method.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
from django.db.models import Aggregate


class Sum(Aggregate):
    # Supports SUM(ALL field).
    function = "SUM"
    template = "%(function)s(%(all_values)s%(expressions)s)"
    allow_distinct = False
    arity = 1

    def __init__(self, expression, all_values=False, **extra):
        super().__init__(expression, all_values="ALL " if all_values else "", **extra)
```

----------------------------------------

TITLE: Implementing Field Deprecation Checks in Django
DESCRIPTION: Shows how to add system check attributes to a custom model field for deprecation and removal. This helps manage the deprecation lifecycle of custom fields.
SOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
class IPAddressField(Field):
    system_check_deprecated_details = {
        "msg": (
            "IPAddressField has been deprecated. Support for it (except "
            "in historical migrations) will be removed in Django 1.9."
        ),
        "hint": "Use GenericIPAddressField instead.",  # optional
        "id": "fields.W900",  # pick a unique ID for your field.
    }

class IPAddressField(Field):
    system_check_removed_details = {
        "msg": (
            "IPAddressField has been removed except for support in "
            "historical migrations."
        ),
        "hint": "Use GenericIPAddressField instead.",
        "id": "fields.E900",  # pick a unique ID for your field.
    }
```

----------------------------------------

TITLE: Implementing geometry Method in ZipcodeFeed
DESCRIPTION: This example shows how to implement the geometry method in a ZipcodeFeed class. It returns the extent of a polygon, which is a tuple representing a bounding box.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/feeds.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class ZipcodeFeed(Feed):
    def geometry(self, obj):
        # Can also return: `obj.poly`, and `obj.poly.centroid`.
        return obj.poly.extent  # tuple like: (X0, Y0, X1, Y1).
```

----------------------------------------

TITLE: Performing Coordinate Transformation in Python
DESCRIPTION: Shows how to use the CoordTransform class to transform geometries from one coordinate system to another. In this example, it transforms geometries from WGS84 to NAD83 coordinate system.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_31

LANGUAGE: pycon
CODE:
```
>>> ct = CoordTransform(SpatialReference("WGS84"), SpatialReference("NAD83"))
>>> for feat in layer:
...     geom = feat.geom  # getting clone of feature geometry
...     geom.transform(ct)  # transforming
```

----------------------------------------

TITLE: Django SingleObjectTemplateResponseMixin Class Definition
DESCRIPTION: Mixin class for template-based response rendering for single object views. Provides functionality for determining template names and handling template rendering.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-single-object.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class SingleObjectTemplateResponseMixin(TemplateResponseMixin):
    template_name_field = None
    template_name_suffix = '_detail'
```

----------------------------------------

TITLE: Implementing Custom Location Header Middleware in Python
DESCRIPTION: Middleware class that converts relative redirect URLs to absolute URIs for compatibility with older Apache/mod_scgi versions. The middleware intercepts responses and modifies the Location header if present.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class LocationHeaderFix(object):
    def process_response(self, request, response):
        if "Location" in response:
            response["Location"] = request.build_absolute_uri(response["Location"])
        return response
```

----------------------------------------

TITLE: Django Settings Configuration
DESCRIPTION: Example shows the default ALLOWED_HOSTS values when DEBUG=True, including localhost variations for development environments.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.3.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
['localhost', '127.0.0.1', '::1']
```

----------------------------------------

TITLE: Running Django Server on Hostname (IPv6) - Shell
DESCRIPTION: Starts the Django development server with IPv6 enabled, binding to the IPv6 address resolved from the hostname `localhost` (typically ::1) on the specified port (8000).
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_29

LANGUAGE: shell
CODE:
```
django-admin runserver -6 localhost:8000
```

----------------------------------------

TITLE: Configuring MySQL Host with Unix Socket
DESCRIPTION: Example showing how to configure the `HOST` setting within the MySQL database configuration dictionary in Django to use a Unix socket for connection instead of a network host and port. This is done by providing a path starting with a forward slash ('/').
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_7

LANGUAGE: Python
CODE:
```
"HOST": "/var/run/mysql"
```

----------------------------------------

TITLE: Configuring SQLite PRAGMA Options via init_command in Django
DESCRIPTION: Use the 'init_command' option within the SQLite database configuration in Django settings to set specific PRAGMA options upon database connection, such as synchronous writes or cache size.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_13

LANGUAGE: python
CODE:
```
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        # ...
        "OPTIONS": {
            "init_command": "PRAGMA synchronous=3; PRAGMA cache_size=2000;",
        }
    }
}
```

----------------------------------------

TITLE: Accessing Feature Geometry and Attributes with Django OGRFeature (Python)
DESCRIPTION: Demonstrates retrieving a geometry as a coordinate tuple and accessing various feature-level attributes for OGR vector data in Django. Shows use of property accessors (e.g., geom) and methods like get() and index() for querying attribute values by name. Requires Django's GIS contrib and an active OGRFeature instance. Inputs include feature attribute names (like 'Population') and output types depend on the property queried (numbers, strings, etc.).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_7

LANGUAGE: pycon
CODE:
```
>>> city.geom.tuple
(-104.609252, 38.255001)
```

LANGUAGE: pycon
CODE:
```
>>> city.get("Population")
102121
```

LANGUAGE: pycon
CODE:
```
>>> city.fid
0
```

LANGUAGE: pycon
CODE:
```
>>> city.layer_name
'cities'
```

LANGUAGE: pycon
CODE:
```
>>> city.index("Population")
1
```

----------------------------------------

TITLE: Filtering Queryset in Django BaseDateListView
DESCRIPTION: The get_dated_queryset method filters the queryset using provided lookup arguments. It enforces restrictions such as allow_empty and allow_future on the queryset.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
def get_dated_queryset(**lookup):
    Returns a queryset, filtered using the query arguments defined by
    ``lookup``. Enforces any restrictions on the queryset, such as
    ``allow_empty`` and ``allow_future``.
```

----------------------------------------

TITLE: Accessing JSON Representation of OGRGeometry in Python
DESCRIPTION: Illustrates obtaining the GeoJSON representation of an `OGRGeometry` object ('POINT(1 2)') using the `.json` attribute. This returns a string containing the geometry's structure and coordinates in JSON format.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_12

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("POINT(1 2)").json
'{ "type": "Point", "coordinates": [ 1.000000, 2.000000 ] }'
```

----------------------------------------

TITLE: Accessing M Coordinates of a LineString Geometry in Python
DESCRIPTION: Shows how to retrieve a list of M (measure) coordinates from a LineString `OGRGeometry` with M values ('LINESTRING(0 1 2 10, 1 2 3 11, 2 3 4 12)') using the `.m` attribute. It returns a list of M values or `None` if the LineString lacks M coordinates.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_24

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("LINESTRING(0 1 2 10, 1 2 3 11, 2 3 4 12)").m
[10.0, 11.0, 12.0]
```

----------------------------------------

TITLE: Negated Q Objects in Case Expressions
DESCRIPTION: Example of a problematic pattern where negated Q objects in Case expressions would try to generate a subquery and crash. This bug was fixed in Django 1.8.2.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
Case(When(~Q(friends__age__lte=30)))
```

----------------------------------------

TITLE: Generating Custom CSRF Token in Django
DESCRIPTION: This snippet defines a custom CSRF token generator class that overrides Django's default implementation. It uses a combination of timestamp and random bytes to create a unique token.
SOURCE: https://github.com/django/django/blob/main/tests/forms_tests/tests/filepath_test_files/real-text-file.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
class CustomCSRFTokenGenerator(CSRFTokenGenerator):
    def _generate_token(self):
        ts = int(time.time() * 1000)
        rand = random.getrandbits(32)
        return f"{ts:x}{rand:x}"

    def _get_timestamp(self, token):
        try:
            return int(token[:12], 16)
        except ValueError:
            return None
```

----------------------------------------

TITLE: Building Test Suite in Python
DESCRIPTION: This method constructs a test suite based on provided test labels. It supports various formats for specifying tests and returns a TestSuite instance ready for execution.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
def build_suite(self, test_labels=None, **kwargs):
    # Construct test suite based on test_labels
    # Return TestSuite instance
```

----------------------------------------

TITLE: Accessing GDALRaster Height Attribute in Python
DESCRIPTION: Demonstrates retrieving the height (in pixels) of a GDALRaster object using its `height` attribute. A GDALRaster is initialized in-memory with specified width, height, and SRID for demonstration.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_36

LANGUAGE: pycon
CODE:
```
>>> GDALRaster({"width": 10, "height": 20, "srid": 4326}).height
20
```

----------------------------------------

TITLE: Accessing Y Coordinates of a LineString Geometry in Python
DESCRIPTION: Illustrates retrieving a list of all Y coordinates from a LineString `OGRGeometry` ('LINESTRING (1 2,3 4)') using the `.y` attribute. It returns a list of floating-point Y values corresponding to each vertex.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_22

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("LINESTRING (1 2,3 4)").y
[2.0, 4.0]
```

----------------------------------------

TITLE: Legacy Primary Key Field Introspection in Single-Field Models - Pycon
DESCRIPTION: Demonstrates the legacy approach to retrieving the primary key field in models with a single-field primary key by inspecting the 'primary_key' attribute. Provided for comparison with newer composite key approaches; relies on looping through a model's fields in _meta.get_fields() and checking the primary_key attribute.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_10

LANGUAGE: pycon
CODE:
```
>>> pk_field = None
>>> for field in Product._meta.get_fields():
...     if field.primary_key:
...         pk_field = field
...         break
...
>>> pk_field
<django.db.models.fields.AutoField: id>
```

----------------------------------------

TITLE: Invalid Database Default Referencing Another Field (Python/Django)
DESCRIPTION: Provides an example of an invalid use of `db_default`. Database defaults cannot reference other fields or models within the database expression, as shown by attempting to set a default based on the value of the 'start' field.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_15

LANGUAGE: Python
CODE:
```
end = models.IntegerField(db_default=F("start") + 50)
```

----------------------------------------

TITLE: GDALBand Data Manipulation
DESCRIPTION: Shows various methods of reading and writing pixel data in a GDALBand, including array operations, block access, and data shaping. Demonstrates NumPy array integration and different input formats.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_48

LANGUAGE: python
CODE:
```
>>> rst = GDALRaster(
...     {"width": 4, "height": 4, "srid": 4326, "datatype": 1, "nr_of_bands": 1}
... )
>>> bnd = rst.bands[0]
>>> bnd.data(range(16))
>>> bnd.data()
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]], dtype=int8)
>>> bnd.data(offset=(1, 1), size=(2, 2))
array([[ 5,  6],
       [ 9, 10]], dtype=int8)
>>> bnd.data(data=[-1, -2, -3, -4], offset=(1, 1), size=(2, 2))
>>> bnd.data()
array([[ 0,  1,  2,  3],
       [ 4, -1, -2,  7],
       [ 8, -3, -4, 11],
       [12, 13, 14, 15]], dtype=int8)
>>> bnd.data(data="\x9d\xa8\xb3\xbe", offset=(1, 1), size=(2, 2))
>>> bnd.data()
array([[  0,   1,   2,   3],
       [  4, -99, -88,   7],
       [  8, -77, -66,  11],
       [ 12,  13,  14,  15]], dtype=int8)
>>> bnd.data([1], shape=(1, 1))
>>> bnd.data()
array([[1, 1, 1, 1],
       [1, 1, 1, 1],
       [1, 1, 1, 1],
       [1, 1, 1, 1]], dtype=uint8)
>>> bnd.data(range(4), shape=(1, 4))
array([[0, 0, 0, 0],
       [1, 1, 1, 1],
       [2, 2, 2, 2],
       [3, 3, 3, 3]], dtype=uint8)
```

----------------------------------------

TITLE: Proper Template Tag Loading with Alphabetical Order
DESCRIPTION: Demonstrates loading Django template tags in correct alphabetical order with proper spacing. This example shows the preferred format for the load tag.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_7

LANGUAGE: html+django
CODE:
```
{% load i18n l10 tz %}
```

----------------------------------------

TITLE: Filtering by Minute using SQL EXTRACT
DESCRIPTION: Shows the SQL equivalent for filtering based on the minute component of a timestamp field. This corresponds to Django's `__minute` lookup. Note that the exact SQL syntax may vary across different database engines. When Django's `USE_TZ` setting is True, datetime fields are converted to the current time zone before filtering, requiring time zone definitions in the database.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_120

LANGUAGE: SQL
CODE:
```
SELECT ... WHERE EXTRACT('minute' FROM timestamp) >= '29';
```

----------------------------------------

TITLE: URL Structure Example in Django
DESCRIPTION: Demonstrates the structure of a URL in Django, highlighting the 'slug' component which contains only letters, numbers, underscores or hyphens and is commonly used for readable URL paths.
SOURCE: https://github.com/django/django/blob/main/docs/glossary.txt#2025-04-23_snippet_0

LANGUAGE: reStructuredText
CODE:
```
https://www.djangoproject.com/weblog/2008/apr/12/**spring**/
```

----------------------------------------

TITLE: Referencing Django's Default 404 View in Python
DESCRIPTION: Reference to the Django view function that generates the default 404 page, which was affected by a security vulnerability fixed in this release.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.10.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.views.defaults.page_not_found()
```

----------------------------------------

TITLE: Django Template Debug Tag Usage
DESCRIPTION: Example of the debug template tag syntax that was subject to an XSS vulnerability (CVE-2022-22818). The tag's behavior was modified to prevent XSS attacks by disabling output when DEBUG is False and ensuring proper context variable escaping when DEBUG is True.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.27.txt#2025-04-23_snippet_0

LANGUAGE: django
CODE:
```
{% debug %}
```

----------------------------------------

TITLE: Fixing Potential DoS Vulnerability in Django's uri_to_iri() Function
DESCRIPTION: Addresses CVE-2023-41164, a security issue in django.utils.encoding.uri_to_iri() that could lead to a denial of service attack with inputs containing a large number of Unicode characters.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.5.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.utils.encoding.uri_to_iri()
```

----------------------------------------

TITLE: Importing Django Group Authorization Function
DESCRIPTION: WSGI script import statement that adds group authorization support. The groups_for_user function is imported alongside check_password to enable group-based access control.
SOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/apache-auth.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.contrib.auth.handlers.modwsgi import check_password, groups_for_user
```

----------------------------------------

TITLE: Example CSS @import Rule Before Hashing
DESCRIPTION: This CSS snippet demonstrates a typical `@import` rule referencing another CSS file using a relative path. It serves as the input example for Django's `ManifestStaticFilesStorage`, which will process this file and replace the path with a hashed version.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_2

LANGUAGE: css
CODE:
```
.. code-block:: css

    @import url("../admin/css/base.css");
```

----------------------------------------

TITLE: Using Spatial Filters with GDAL Layer in Python
DESCRIPTION: Example demonstrating how to apply and use spatial filters on a GDAL Layer.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> print(layer.spatial_filter)
None
>>> print(len(layer))
3
>>> [feat.get("Name") for feat in layer]
['Pueblo', 'Lawrence', 'Houston']
>>> ks_extent = (-102.051, 36.99, -94.59, 40.00)  # Extent for state of Kansas
>>> layer.spatial_filter = ks_extent
>>> len(layer)
1
>>> [feat.get("Name") for feat in layer]
['Lawrence']
>>> layer.spatial_filter = None
>>> len(layer)
3
```

----------------------------------------

TITLE: SameSite Cookie Flag in delete_cookie Method
DESCRIPTION: Added support for setting the SameSite cookie flag when deleting cookies through HttpResponse.delete_cookie method. This functionality allows proper cookie security configuration during deletion.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.9.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
HttpResponse.delete_cookie(samesite='Strict')
```

----------------------------------------

TITLE: Exploring Layer and Field Metadata with GeoDjango GDAL in Python
DESCRIPTION: Illustrates how to explore metadata for a shapefile using GeoDjango's GDAL Layer object in Python. Snippets show retrieving layer count, accessing the first layer, examining geometry types, counts, allowable fields, OGR field types, attribute field names, and the associated spatial reference (including PROJ string). Requires GeoDjango and a properly loaded DataSource object. Outputs include metadata about the shapefile and format of fields supported by the data layer.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
>>> print(len(ds))
1
>>> lyr = ds[0]
>>> print(lyr)
TM_WORLD_BORDERS-0.3
```

LANGUAGE: python
CODE:
```
>>> print(lyr.geom_type)
Polygon
>>> print(len(lyr))
246
```

LANGUAGE: python
CODE:
```
>>> srs = lyr.srs
>>> print(srs)
GEOGCS["WGS 84",
DATUM["WGS_1984",
    SPHEROID["WGS 84",6378137,298.257223563,
        AUTHORITY["EPSG","7030"]],
    AUTHORITY["EPSG","6326"]],
PRIMEM["Greenwich",0,
    AUTHORITY["EPSG","8901"]],
UNIT["degree",0.0174532925199433,
    AUTHORITY["EPSG","9122"]],
AXIS["Latitude",NORTH],
AXIS["Longitude",EAST],
AUTHORITY["EPSG","4326"]]
>>> srs.proj  # PROJ representation
'+proj=longlat +datum=WGS84 +no_defs'
```

LANGUAGE: python
CODE:
```
>>> print(lyr.fields)
['FIPS', 'ISO2', 'ISO3', 'UN', 'NAME', 'AREA', 'POP2005', 'REGION', 'SUBREGION', 'LON', 'LAT']
```

LANGUAGE: python
CODE:
```
>>> [fld.__name__ for fld in lyr.field_types]
['OFTString', 'OFTString', 'OFTString', 'OFTInteger', 'OFTString', 'OFTInteger', 'OFTInteger64', 'OFTInteger', 'OFTInteger', 'OFTReal', 'OFTReal']
```

----------------------------------------

TITLE: Defining DateMixin Class in Django
DESCRIPTION: DateMixin class provides common behavior for all date-based views. It includes attributes and methods for specifying the date field, controlling the display of future dates, and retrieving date-related information.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class DateMixin:
    date_field = None
    allow_future = False

    def get_date_field(self):
        return self.date_field

    def get_allow_future(self):
        return self.allow_future
```

----------------------------------------

TITLE: Getting Current Time Without Time Zone Support in Python
DESCRIPTION: A simple snippet showing how to get the current time when Django's time zone support is disabled, resulting in a naive datetime object in local time.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
import datetime

now = datetime.datetime.now()
```

----------------------------------------

TITLE: Creating a Test for Django Shortcut Function in Python
DESCRIPTION: This snippet creates a test case for a new Django shortcut function 'make_toast()'. It uses the SimpleTestCase class and checks if the function returns the expected string 'toast'.
SOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.shortcuts import make_toast
from django.test import SimpleTestCase


class MakeToastTests(SimpleTestCase):
    def test_make_toast(self):
        self.assertEqual(make_toast(), "toast")
```

----------------------------------------

TITLE: Defining Subclasses of CheckMessage in Python for Django System Checks
DESCRIPTION: This code defines subclasses of CheckMessage for common severity levels (Debug, Info, Warning, Error, Critical). These subclasses allow creating messages with pre-defined severity levels, simplifying the message creation process.
SOURCE: https://github.com/django/django/blob/main/docs/ref/checks.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class Debug(msg, hint=None, obj=None, id=None)
class Info(msg, hint=None, obj=None, id=None)
class Warning(msg, hint=None, obj=None, id=None)
class Error(msg, hint=None, obj=None, id=None)
class Critical(msg, hint=None, obj=None, id=None)
```

----------------------------------------

TITLE: Creating Area Objects from Distance Multiplication
DESCRIPTION: Shows how multiplying two Distance objects creates an Area object with squared units.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/measure.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> a = d1 * d2  # Returns an Area object.
>>> print(a)
40.2336 sq_km
```

----------------------------------------

TITLE: Customizing non_db_attrs for Django Field Migration Detection
DESCRIPTION: Example of overriding the non_db_attrs property in a custom Django field to specify which attributes don't affect the database schema, helping Django detect no-op AlterField operations.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class CommaSepField(models.Field):
    @property
    def non_db_attrs(self):
        return super().non_db_attrs + ("separator",)
```

----------------------------------------

TITLE: Directory Traversal Prevention in Storage.save()
DESCRIPTION: Security patch for CVE-2021-45452 preventing directory traversal attacks in Storage.save() method when handling file names.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.26.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
Storage.save()
```

----------------------------------------

TITLE: Incorrect Usage of Positional Arguments for Django Form Fields
DESCRIPTION: Example of incorrect form field initialization (`forms.IntegerField(25, 10)`) using positional arguments for optional parameters like `max_value` and `min_value`. Django 2.0 prohibits this to prevent runtime errors arising from incorrect argument ordering and requires keyword arguments for clarity.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
forms.IntegerField(25, 10)
```

----------------------------------------

TITLE: Format of Stored Password String in Django
DESCRIPTION: Illustrates the format in which Django stores user passwords in the database. The string contains the algorithm name, the number of iterations (work factor), a random salt, and the resulting hash, all separated by dollar signs ($).
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
<algorithm>$<iterations>$<salt>$<hash>
```

----------------------------------------

TITLE: Converting Distance Units in GeoDjango
DESCRIPTION: Shows how to convert distances between different units by accessing unit attributes of Distance objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/measure.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
>>> print(d1.mi)  # Converting 5 kilometers to miles
3.10685596119
>>> print(d2.km)  # Converting 5 miles to kilometers
8.04672
```

----------------------------------------

TITLE: Setting Library Path in Linux Environment
DESCRIPTION: Sets the LD_LIBRARY_PATH environment variable to include /usr/local/lib for GeoDjango library access.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
export LD_LIBRARY_PATH=/usr/local/lib
```

----------------------------------------

TITLE: Running Tests Starting After a Specific Module
DESCRIPTION: This command runs Django's test suite starting after a specified top-level module (wsgi in this example), running only modules that would normally be run after it.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_10

LANGUAGE: console
CODE:
```
$ ./runtests.py --start-after=wsgi
```

----------------------------------------

TITLE: Creating Raster Models in GeoDjango
DESCRIPTION: Example of creating and saving models with raster fields using file paths and GDALRaster objects.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> from elevation.models import Elevation
>>> dem = Elevation(name="Volcano", rast="/path/to/raster/volcano.tif")
>>> dem.save()
```

----------------------------------------

TITLE: Accessing Session Data Using Django ORM
DESCRIPTION: This snippet shows how to access session data directly using Django's ORM, including decoding the session data.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
>>> from django.contrib.sessions.models import Session
>>> s = Session.objects.get(pk="2b1189a188b44ad18c35e113ac6ceead")
>>> s.expire_date
datetime.datetime(2005, 8, 20, 13, 35, 12)
>>> s.session_data
'KGRwMQpTJ19hdXRoX3VzZXJfaWQnCnAyCkkxCnMuMTExY2ZjODI2Yj...'
>>> s.get_decoded()
{'user_id': 42}
```

----------------------------------------

TITLE: QuerySet Method Fixes in Django 3.0.5
DESCRIPTION: Documentation of bug fixes related to QuerySet.values() and values_list() methods when handling aggregations and Subquery annotations that conflict with field names.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.5.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
QuerySet.values()
QuerySet.values_list()
```

----------------------------------------

TITLE: Setting Database Column Comment (Python/Django)
DESCRIPTION: Shows how to add a comment to the database column corresponding to a Django model field using the `db_comment` attribute. This comment is useful for documenting the field directly in the database schema for users who access the database directly.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#_snippet_12

LANGUAGE: Python
CODE:
```
pub_date = models.DateTimeField(
    db_comment="Date and time when the article was published",
)
```

----------------------------------------

TITLE: Setting Default Model Tablespace in Django
DESCRIPTION: Specifies the default tablespace (empty string, meaning database default) for models without a specific tablespace, applicable only if the database backend supports tablespaces.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_22

LANGUAGE: python
CODE:
```
DEFAULT_TABLESPACE = ''
```

----------------------------------------

TITLE: Setting Proxy Environment Variables - DOS Prompt
DESCRIPTION: Sets the `http_proxy` and `https_proxy` environment variables in the current command prompt session. These variables are used by pip to configure proxy settings, which is necessary when connecting to the internet behind a proxy server to install packages.
SOURCE: https://github.com/django/django/blob/main/docs/howto/windows.txt#_snippet_5

LANGUAGE: doscon
CODE:
```
...\> set http_proxy=http://username:password@proxyserver:proxyport
...\> set https_proxy=https://username:password@proxyserver:proxyport
```

----------------------------------------

TITLE: Warping a GDALRaster using the warp Method in Python
DESCRIPTION: Demonstrates how to use the `warp` method to create a warped version of a GDALRaster, specifically for aggregation. It initializes a 6x6 raster and then warps it into a 3x3 raster with double the pixel scale (200x200 instead of 100x100), effectively aggregating 2x2 blocks of pixels using the default 'NearestNeighbour' resampling.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_45

LANGUAGE: pycon
CODE:
```
>>> rst = GDALRaster(
...     {
...         "width": 6,
...         "height": 6,
...         "srid": 3086,
...         "origin": [500000, 400000],
...         "scale": [100, -100],
...         "bands": [{"data": range(36), "nodata_value": 99}],
...     }
... )
>>> target = rst.warp({"scale": [200, -200], "width": 3, "height": 3})
>>> target.bands[0].data()
array([[  7.,   9.,  11.],
       [ 19.,  21.,  23.],
       [ 31.,  33.,  35.]], dtype=float32)
```

----------------------------------------

TITLE: Building Absolute URI in Django
DESCRIPTION: Illustrates the method to build an absolute URI in Django. The security fix affects this method's behavior when determining the scheme (HTTP or HTTPS).
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.22.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
HttpRequest.build_absolute_uri()
```

----------------------------------------

TITLE: Django QuerySet Selection for Update
DESCRIPTION: Reference to select_for_update() method used with related fields pointing to proxy models in the 'of' argument.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.1.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
QuerySet.select_for_update()
```

----------------------------------------

TITLE: Querying Strict Above Spatial Relationship in PostGIS
DESCRIPTION: Example of using the 'strictly_above' lookup to find geometries whose bounding box is strictly above a given geometry's bounding box in PostGIS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_25

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__strictly_above=geom)
```

----------------------------------------

TITLE: Python Week Day Calculation Equivalent to Django Extract
DESCRIPTION: This snippet calculates the weekday in Python to match Django's week_day lookup, where Sunday is 1 and Saturday is 7. No Django dependency, but can help developers understand the mapping applied by Django extract functions. Takes a datetime instance and applies a modular arithmetic operation to adjust the isoweekday to Django's convention. Outputs a single integer.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> from datetime import datetime
>>> dt = datetime(2015, 6, 15)
>>> (dt.isoweekday() % 7) + 1
2
```

----------------------------------------

TITLE: Fixing Regression in Django's intcomma Template Filter
DESCRIPTION: Resolves a bug introduced in Django 4.2.10 where the intcomma template filter could incorrectly add a leading comma to string representations of float numbers.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.11.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
intcomma
```

----------------------------------------

TITLE: Exists Annotation in QuerySets
DESCRIPTION: Fixed functionality of Exists() annotation when used with QuerySet aggregations on Oracle database
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.7.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
Exists()
```

----------------------------------------

TITLE: Accessing Media Subsets
DESCRIPTION: Example showing how to access specific media types using subscript operator
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_12

LANGUAGE: pycon
CODE:
```
>>> w = CalendarWidget()
>>> print(w.media)
<link href="https://static.example.com/pretty.css" media="all" rel="stylesheet">
<script src="https://static.example.com/animations.js"></script>
<script src="https://static.example.com/actions.js"></script>

>>> print(w.media["css"])
<link href="https://static.example.com/pretty.css" media="all" rel="stylesheet">
```

----------------------------------------

TITLE: Accessing Z Coordinate of a Point Geometry in Python
DESCRIPTION: Illustrates retrieving the Z coordinate of a 3D Point `OGRGeometry` ('POINT (1 2 3)') using the `.z` attribute. It returns the floating-point Z value or `None` if the point is 2D.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_19

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("POINT (1 2 3)").z
3.0
```

----------------------------------------

TITLE: Using Storage.save() Method in Django
DESCRIPTION: The Storage.save() method in Django is used for saving files. It has been updated to prevent potential directory-traversal vulnerabilities when passed crafted file names.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
Storage.save()
```

----------------------------------------

TITLE: Example GeoJSON Output from Django Serializer
DESCRIPTION: This snippet shows the expected GeoJSON output from the serialization of City objects. It includes a single feature with geometry and properties.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/serializers.txt#2025-04-23_snippet_1

LANGUAGE: json
CODE:
```
{
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "id": 1,
            "geometry": {"type": "Point", "coordinates": [-87.650175, 41.850385]},
            "properties": {"name": "Chicago"},
        }
    ],
}
```

----------------------------------------

TITLE: Django Template Extension with Variable
DESCRIPTION: Example of using the extends template tag with a context variable.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_10

LANGUAGE: html+django
CODE:
```
{% extends templ %}
```

----------------------------------------

TITLE: Accessing Django Field Properties Example
DESCRIPTION: Example of Django field property reference syntax as shown in error messages
SOURCE: https://github.com/django/django/blob/main/docs/ref/checks.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
app_label.model.field_name
```

----------------------------------------

TITLE: Downloading PROJ Source and Data Files
DESCRIPTION: Commands to download PROJ source code and datum shifting files.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
$ wget https://download.osgeo.org/proj/proj-X.Y.Z.tar.gz
$ wget https://download.osgeo.org/proj/proj-data-X.Y.tar.gz
```

----------------------------------------

TITLE: Running GeoDjango Tests Only
DESCRIPTION: Shell command to run only the GeoDjango test suite using specific settings.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_7

LANGUAGE: shell
CODE:
```
$ ./runtests.py --settings=postgis gis_tests
```

----------------------------------------

TITLE: Password Reset URL Pattern Update - Django URL Configuration
DESCRIPTION: Example of updating password reset URL patterns for Django 1.6's new base64 user PK encoding, replacing the old base36 encoding.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
url(
    r"^reset/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$",
    "django.contrib.auth.views.password_reset_confirm",
    name="password_reset_confirm",
),
```

LANGUAGE: python
CODE:
```
url(
    r"^reset/(?P<uidb64>[0-9A-Za-z_\-]+)/(?P<token>.+)/$",
    "django.contrib.auth.views.password_reset_confirm",
    name="password_reset_confirm",
),
```

LANGUAGE: python
CODE:
```
url(
    r"^reset/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$",
    "django.contrib.auth.views.password_reset_confirm_uidb36",
),
```

----------------------------------------

TITLE: Potential XSS Vulnerability in Python URL Validation
DESCRIPTION: This code snippet shows a potential XSS vulnerability where leading whitespace is not stripped from URLs, allowing malicious JavaScript to be considered safe.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.18.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
\njavascript:...
```

----------------------------------------

TITLE: Installing JavaScript Test Dependencies for Django
DESCRIPTION: Command to install the Node.js dependencies required for running Django's JavaScript tests from the command line. This should be run from the root of the Django checkout.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/javascript.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
$ npm install
```

----------------------------------------

TITLE: Querying Zipcode Polygons Overlapping Geometry in Django
DESCRIPTION: Shows how to use the bboverlaps spatial lookup to filter Zipcode objects whose polygon bounding box overlaps with a given geometry.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__bboverlaps=geom)
```

----------------------------------------

TITLE: Template Tag Syntax - Django cycle Tag
DESCRIPTION: Example showing the deprecated comma-separated syntax for the Django cycle template tag that will be removed.
SOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
{% cycle %}
```

----------------------------------------

TITLE: Example Output: Sorted List of Tuples by Index after Dictsort - Python
DESCRIPTION: Illustrates the expected result after applying the 'dictsort' filter to sort the list of tuples by the first item (index 0). No additional context required. Used for the Django template example above.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_65

LANGUAGE: python
CODE:
```
[
    ("a", "42"),
    ("b", "foo"),
    ("c", "string"),
]
```

----------------------------------------

TITLE: Initializing RangeMaxValueValidator in Django PostgreSQL
DESCRIPTION: Creates a RangeMaxValueValidator instance to validate that the upper bound of a range is not greater than a specified limit value. A custom error message can be provided.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/validators.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
RangeMaxValueValidator(limit_value, message=None)
```

----------------------------------------

TITLE: Accessing GDALRaster Width Attribute in Python
DESCRIPTION: Shows how to retrieve the width (in pixels) of a GDALRaster object by accessing its `width` attribute. A GDALRaster is initialized in-memory with specified width, height, and SRID for the example.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_35

LANGUAGE: pycon
CODE:
```
>>> GDALRaster({"width": 10, "height": 20, "srid": 4326}).width
10
```

----------------------------------------

TITLE: Legacy Approach Fails for Composite Primary Key Models - Pycon
DESCRIPTION: Shows that using the old approach to identify primary key fields fails in models with composite primary keys, as the primary_key attribute will be False for all fields. Demonstrates iterating over OrderLineItem's fields and checking primary_key; returns an empty list. Requires understanding of Django's internal _meta options.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_11

LANGUAGE: pycon
CODE:
```
>>> pk_fields = []
>>> for field in OrderLineItem._meta.get_fields():
...     if field.primary_key:
...         pk_fields.append(field)
...
>>> pk_fields
[]
```

----------------------------------------

TITLE: Defining Stealth Options in Custom Django Management Commands
DESCRIPTION: Illustrates how to define `stealth_options` in a custom Django management command inheriting from `BaseCommand`. This allows the command to accept options passed via `call_command()` that are not explicitly defined using `parser.add_argument()`, thus bypassing the validation introduced in Django 2.0 that checks if all passed options are defined by the command's argument parser.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
class MyCommand(BaseCommand):
    stealth_options = ("option_name", ...)
```

----------------------------------------

TITLE: Querying for Users with Weak Password Hashes (Django Python)
DESCRIPTION: This script demonstrates how to use the Django ORM to identify users whose passwords might be stored using weak hashing algorithms (unsalted MD5/SHA1, salted MD5/SHA1, crypt) that were removed from the default `PASSWORD_HASHERS` setting in Django 1.10. It checks password field prefixes and length after registering the `Length` lookup for `CharField`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django.contrib.auth import get_user_model

User = get_user_model()

# Unsalted MD5/SHA1:
User.objects.filter(password__startswith="md5$$")
User.objects.filter(password__startswith="sha1$$")
# Salted MD5/SHA1:
User.objects.filter(password__startswith="md5$").exclude(password__startswith="md5$$")
User.objects.filter(password__startswith="sha1$").exclude(password__startswith="sha1$$")
# Crypt hasher:
User.objects.filter(password__startswith="crypt$$")

from django.db.models import CharField
from django.db.models.functions import Length

CharField.register_lookup(Length)
# Unsalted MD5 passwords might not have an 'md5$$' prefix:
User.objects.filter(password__length=32)
```

----------------------------------------

TITLE: Validating select_related() Field Existence and Type in Django ORM (Python)
DESCRIPTION: Demonstrates usage of select_related() with invalid or non-relational fields in Django ORM. Snippets show errors raised for non-existent fields and for fields that exist but are not relational, thus enforcing better query validation. Requires Book model defined, with select_related() invoked on its related manager.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_3

LANGUAGE: pycon
CODE:
```
>>> book = Book.objects.select_related("nonexistent_field")
Traceback (most recent call last):
...
FieldError: Invalid field name(s) given in select_related: 'nonexistent_field'
```

LANGUAGE: pycon
CODE:
```
>>> book = Book.objects.select_related("name")
Traceback (most recent call last):
...
FieldError: Non-relational field given in select_related: 'name'
```

----------------------------------------

TITLE: Converting Geometry to KML in Django
DESCRIPTION: Example showing conversion of a polygon to Keyhole Markup Language (KML) format using the AsKML function in Django.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> qs = Zipcode.objects.annotate(kml=AsKML("poly"))
>>> print(qs[0].kml)
<Polygon><outerBoundaryIs><LinearRing><coordinates>-103.04135,36.217596,0 ...
-103.04135,36.217596,0</coordinates></LinearRing></outerBoundaryIs></Polygon>
```

----------------------------------------

TITLE: Incorrect Usage of Positional Arguments for Django Model Index
DESCRIPTION: Example of incorrect index definition (`models.Index(["headline", "-pub_date"], "index_name")`) using positional arguments for the `fields` and `name` parameters. Django 2.0 prohibits this syntax and requires keyword arguments for defining model indexes.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
models.Index(["headline", "-pub_date"], "index_name")
```

----------------------------------------

TITLE: Recommended Project Layout with External manage.py (Text)
DESCRIPTION: Illustrates the recommended Django 1.4 project directory structure where `manage.py` resides outside the main project package (`mysite`). This layout facilitates importing project components using the project name prefix (e.g., `mysite.settings`, `mysite.urls`).
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
manage.py
mysite/
    __init__.py
    settings.py
    urls.py
    myapp/
        __init__.py
        models.py
```

----------------------------------------

TITLE: Finding Homebrew Install Path on macOS
DESCRIPTION: This shell command shows how to find the Homebrew install path on macOS, which is needed to set the SPATIALITE_LIBRARY_PATH.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/spatialite.txt#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
$ brew --prefix
```

----------------------------------------

TITLE: Accessing SpatialReference Attributes in Python
DESCRIPTION: Demonstrates how to access various attributes of a SpatialReference object created from WKT (Well-Known Text) representation. Shows retrieval of geographic coordinate system, datum, authority, and other spatial reference properties.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_30

LANGUAGE: pycon
CODE:
```
>>> wkt = 'GEOGCS["WGS 84", DATUM["WGS_1984, ... AUTHORITY["EPSG","4326"]]'
>>> srs = SpatialReference(wkt)  # could also use 'WGS84', or 4326
>>> print(srs["GEOGCS"])
WGS 84
>>> print(srs["DATUM"])
WGS_1984
>>> print(srs["AUTHORITY"])
EPSG
>>> print(srs["AUTHORITY", 1])  # The authority value
4326
>>> print(srs["TOWGS84", 4])  # the fourth value in this wkt
0
>>> print(srs["UNIT|AUTHORITY"])  # For the units authority, have to use the pipe symbol.
EPSG
>>> print(srs["UNIT|AUTHORITY", 1])  # The authority value for the units
9122
```

----------------------------------------

TITLE: Accessing HEX WKB Representation of OGRGeometry in Python
DESCRIPTION: Shows how to retrieve the hexadecimal Well-Known Binary (WKB) representation of an `OGRGeometry` object ('POINT(1 2)') by accessing its `.hex` attribute. This returns the geometry's binary data encoded as a hex string.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_11

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("POINT(1 2)").hex
'0101000000000000000000F03F0000000000000040'
```

----------------------------------------

TITLE: Accessing the Name of an OGRGeomType in Python
DESCRIPTION: Shows how to retrieve the short-hand string name (e.g., 'Polygon') corresponding to an `OGRGeomType` object (`gt1`) by accessing its `.name` attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_26

LANGUAGE: pycon
CODE:
```
>>> gt1.name
'Polygon'
```

----------------------------------------

TITLE: Using get_max_age Function in Django for Cache Control
DESCRIPTION: This function extracts the max-age value from a response's Cache-Control header and returns it as an integer, or None if not found or not an integer.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
get_max_age(response)
```

----------------------------------------

TITLE: Accessing GDALRaster Properties in Python
DESCRIPTION: Shows how to access various properties of a GDALRaster object, including the name and driver. Demonstrates creating rasters with different drivers (in-memory and file-based).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_33

LANGUAGE: pycon
CODE:
```
>>> GDALRaster({"width": 10, "height": 10, "name": "myraster", "srid": 4326}).name
'myraster'
>>> GDALRaster({"width": 10, "height": 10, "srid": 4326}).driver.name
'MEM'
>>> import tempfile
>>> rstfile = tempfile.NamedTemporaryFile(suffix=".tif")
>>> rst = GDALRaster(
...     {
```

----------------------------------------

TITLE: Creating and Serving In-Memory Raster using Django HttpResponse
DESCRIPTION: This example shows how to create a raster in GDAL's virtual memory filesystem and serve it as a file in a Django HttpResponse. It creates a 6x6 raster with custom properties and band data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_50

LANGUAGE: python
CODE:
```
from django.http import HttpResponse
rst = GDALRaster(
    {
        "name": "/vsimem/temporarymemfile",
        "driver": "tif",
        "width": 6,
        "height": 6,
        "srid": 3086,
        "origin": [500000, 400000],
        "scale": [100, -100],
        "bands": [{"data": range(36), "nodata_value": 99}],
    }
)
HttpResponse(rast.vsi_buffer, "image/tiff")
```

----------------------------------------

TITLE: Writing Unit Tests for Django System Checks in Python
DESCRIPTION: Illustrates how to write a basic unit test for a Django system check. It involves calling the `check()` method on the object being checked, defining the expected list of `CheckMessage` instances (e.g., `Error`), and using `assertEqual` to compare the actual returned messages with the expected ones.
SOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.core.checks import Error

errors = checked_object.check()
expected_errors = [
    Error(
        "an error",
        hint="A hint.",
        obj=checked_object,
        id="myapp.E001",
    )
]
self.assertEqual(errors, expected_errors)
```

----------------------------------------

TITLE: Django Safe URL Validation Function
DESCRIPTION: Reference to Django's URL safety validation function that had a security vulnerability with numeric URLs.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.7.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.utils.http.is_safe_url()
```

----------------------------------------

TITLE: Rendering Widget Media with ManifestStaticFilesStorage
DESCRIPTION: Example showing how media is rendered when using Django's ManifestStaticFilesStorage
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_9

LANGUAGE: pycon
CODE:
```
>>> w = CalendarWidget()
>>> print(w.media)
<link href="/css/pretty.css" media="all" rel="stylesheet">
<script src="https://static.example.com/animations.27e20196a850.js"></script>
<script src="https://othersite.com/actions.js"></script>
```

----------------------------------------

TITLE: Correcting Duplicate ID Attribute in `AdminFileWidget` in Django Admin
DESCRIPTION: Fixes a regression in Django 5.0 where the `AdminFileWidget`, used for file uploads in the admin interface, incorrectly rendered two 'id' attributes on the 'Clear' checkbox element. This could lead to invalid HTML or issues with JavaScript targeting the element.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.4.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
AdminFileWidget
```

----------------------------------------

TITLE: Accessing Django Session in Python
DESCRIPTION: This snippet demonstrates the potential vulnerability in previous Django versions where accessing request.session could create an empty session record. This behavior has been fixed in version 1.4.21 to prevent potential DoS attacks.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.21.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
request.session
```

----------------------------------------

TITLE: Accessing M Coordinate of a Point Geometry in Python
DESCRIPTION: Demonstrates accessing the M (measure) coordinate of a Point ZM `OGRGeometry` ('POINT ZM (1 2 3 4)') via the `.m` attribute. It returns the floating-point M value or `None` if the point doesn't have an M coordinate.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_20

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("POINT ZM (1 2 3 4)").m
4.0
```

----------------------------------------

TITLE: Using templatetag in Django Templates
DESCRIPTION: Demonstrates how to use the templatetag tag to output template syntax characters.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_44

LANGUAGE: html+django
CODE:
```
The {% templatetag openblock %} characters open a block.
```

----------------------------------------

TITLE: Updating Decorators with method_decorator in Django 1.2
DESCRIPTION: Example showing how to modify class methods that use authentication decorators like login_required to work with Django 1.2's new decorator behavior.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
class MyClass(object):
    @login_required
    def my_view(self, request):
        pass
```

----------------------------------------

TITLE: Creating a Django Feed with Explicit MIME Type Stylesheet
DESCRIPTION: This snippet shows how to specify the MIME type of a stylesheet URL using Django's Stylesheet class when the extension doesn't allow for automatic detection.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
from django.contrib.syndication.views import Feed
from django.utils.feedgenerator import Stylesheet


class FeedWithHardcodedStylesheet(Feed):
    stylesheets = [
        Stylesheet("https://example.com/rss_stylesheet", mimetype="text/xsl"),
    ]
```

----------------------------------------

TITLE: Form Widget Value Omission Method
DESCRIPTION: Implementation requirement for custom widgets to handle value omission in form data processing
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.2.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.forms.Widget.value_omitted_from_data
```

----------------------------------------

TITLE: Asset Ordering in Combined Media
DESCRIPTION: Shows how asset order is preserved when combining Media objects with dependencies
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_14

LANGUAGE: pycon
CODE:
```
>>> from django import forms
>>> class CalendarWidget(forms.TextInput):
...     class Media:
...         js = ["jQuery.js", "calendar.js", "noConflict.js"]
...
>>> class TimeWidget(forms.TextInput):
...     class Media:
...         js = ["jQuery.js", "time.js", "noConflict.js"]
...
>>> w1 = CalendarWidget()
>>> w2 = TimeWidget()
>>> print(w1.media + w2.media)
<script src="https://static.example.com/jQuery.js"></script>
<script src="https://static.example.com/calendar.js"></script>
<script src="https://static.example.com/time.js"></script>
<script src="https://static.example.com/noConflict.js"></script>
```

----------------------------------------

TITLE: Getting and Setting GDALRaster Skew Attribute in Python
DESCRIPTION: Demonstrates accessing the skew coefficients used for georeferencing through the `skew` attribute and modifying its x-component. The skew represents coefficients 2 and 4 of the geotransform; they are often zero for north-up images.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_42

LANGUAGE: pycon
CODE:
```
>>> rst = GDALRaster({"width": 10, "height": 20, "srid": 4326})
>>> rst.skew
[0.0, 0.0]
>>> rst.skew.x = 3
>>> rst.skew
[3.0, 0.0]
```

----------------------------------------

TITLE: Rendering Custom Form Fields with CSS Classes - Django Forms - HTML
DESCRIPTION: Displays the HTML output after rendering a form using a customized BoundField as defined in the previous Python snippet. Shows HTML <div> blocks with applied 'custom' CSS classes on form fields. This output is generated by Django's template rendering system using defined form and field attributes; dependencies are the CustomForm and CustomBoundField Python definitions. Inputs are form field values; outputs are HTML div, label, and input elements; potential limitations may occur on browsers lacking support for advanced input types or CSS classes.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.2.txt#2025-04-23_snippet_3

LANGUAGE: HTML
CODE:
```
<div class="custom">
  <label for="id_name">Your Name:</label>
  <input type="text" name="name" class="name-input-class" maxlength="100" id="id_name">
</div>

<div class="custom">
  <label for="id_email">Your Email:</label>
  <input type="email" name="email" maxlength="320" required="" id="id_email">
</div>
```

----------------------------------------

TITLE: Force-pushing changes after rebase
DESCRIPTION: Updates the remote branch with the rebased commits, overwriting the previous history. This is used for topic branches that have been reworked.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_7

LANGUAGE: shell
CODE:
```
git push -f origin ticket_xxxxx
```

----------------------------------------

TITLE: Including admin URLs with namespace support in Django
DESCRIPTION: Demonstrates the new way to include admin URLs with namespace support using include(admin.site.urls).
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
urlpatterns = [
    path('admin/', include(admin.site.urls)),
]
```

----------------------------------------

TITLE: Importing HTTP Exceptions
DESCRIPTION: Demonstrates how to import HTTP exceptions from the django.http module.
SOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.http import UnreadablePostError
```

----------------------------------------

TITLE: Python DateTime Edge Case Example
DESCRIPTION: Demonstrates an edge case when subtracting one year from a datetime in Python.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
>>> import datetime
>>> def one_year_before(value):  # Wrong example.
...     return value.replace(year=value.year - 1)
...
>>> one_year_before(datetime.datetime(2012, 3, 1, 10, 0))
datetime.datetime(2011, 3, 1, 10, 0)
>>> one_year_before(datetime.datetime(2012, 2, 29, 10, 0))
Traceback (most recent call last):
...
ValueError: day is out of range for month
```

----------------------------------------

TITLE: Importing Django Test Signal
DESCRIPTION: Shows how to import the 'setting_changed' signal from Django's core signals module for use in non-test situations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
from django.core.signals import setting_changed
```

----------------------------------------

TITLE: Mitigating DoS Vulnerability in Django's urlize() Function
DESCRIPTION: Addresses CVE-2024-41990 and CVE-2024-41991 by improving the handling of large inputs with specific character sequences and Unicode characters in urlize and urlizetrunc template filters.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.15.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.utils.html.urlize()
```

----------------------------------------

TITLE: Defining Hidden Settings Regex in Django SafeExceptionReporterFilter
DESCRIPTION: Shows the default regular expression used to match sensitive settings and request.META values in Django's SafeExceptionReporterFilter.
SOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
import re

re.compile(r"API|AUTH|TOKEN|KEY|SECRET|PASS|SIGNATURE|HTTP_COOKIE", flags=re.IGNORECASE)
```

----------------------------------------

TITLE: Importing Django Core Exceptions
DESCRIPTION: Shows how to import Django's core exception classes from the django.core.exceptions module.
SOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.core.exceptions import AppRegistryNotReady, ObjectDoesNotExist, ObjectNotUpdated, EmptyResultSet, FullResultSet, FieldDoesNotExist, MultipleObjectsReturned, SuspiciousOperation, PermissionDenied, ViewDoesNotExist, MiddlewareNotUsed, ImproperlyConfigured, FieldError, ValidationError
```

----------------------------------------

TITLE: Non-form Error HTML Rendering
DESCRIPTION: Shows how non-form errors are rendered in HTML with a special 'nonform' class
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_14

LANGUAGE: html
CODE:
```
<ul class="errorlist nonform">
    <li>Articles in a set must have distinct titles.</li>
</ul>
```

----------------------------------------

TITLE: Rendering Basic HTML Form Structure in Django Template
DESCRIPTION: Demonstrates the HTML markup generated by Django for a form, showing the label and input elements with their attributes for a basic text field.
SOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_2

LANGUAGE: html+django
CODE:
```
<label for="your_name">Your name: </label>
<input id="your_name" type="text" name="your_name" maxlength="100" required>
```

----------------------------------------

TITLE: Allowed F-string Pattern with Local Variables in Django
DESCRIPTION: Shows proper f-string usage with complex expressions assigned to local variables before use in the f-string. This demonstrates the preferred pattern for complex expressions in f-strings.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
# Allowed with local variable assignment
user = get_user()
f"hello {user}"
user_days_old = user.age * 365.25
f"you are {user_days_old} days old"
```

----------------------------------------

TITLE: Handling User Model Changes with setting_changed Signal in Django
DESCRIPTION: Example of using the setting_changed signal to clear the cache when AUTH_USER_MODEL changes during testing. This is needed when caching the result of get_user_model() at module level.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django.apps import apps
from django.contrib.auth import get_user_model
from django.core.signals import setting_changed
from django.dispatch import receiver


@receiver(setting_changed)
def user_model_swapped(*, setting, **kwargs):
    if setting == "AUTH_USER_MODEL":
        apps.clear_cache()
        from myapp import some_module

        some_module.UserModel = get_user_model()
```

----------------------------------------

TITLE: Enabling Oracle Connection Pool (Defaults) - Django Python
DESCRIPTION: Enables the connection pool for the Oracle backend using the `oracledb` driver. Setting the "pool" option to `True` within the `OPTIONS` dictionary utilizes the driver's default parameters for creating the connection pool.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_19

LANGUAGE: python
CODE:
```
DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.oracle",
            "# ...": "",
            "OPTIONS": {
                "pool": True,
            },
        },
    }
```

----------------------------------------

TITLE: PO File Handling Enhancement in Django 3.0.5
DESCRIPTION: Added support for processing .po files that contain different plural equations for the same language, improving internationalization capabilities.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.5.txt#2025-04-23_snippet_1

LANGUAGE: text
CODE:
```
.po
```

----------------------------------------

TITLE: Raising ValidationError on Empty Data in FormSet - Django Forms - Python (Pycon)
DESCRIPTION: Shows the result of instantiating a Django FormSet with an empty dictionary, raising a ValidationError due to missing or tampered ManagementForm data. This behavior is new in Django 1.3 and increases consistency with form handling elsewhere in the framework. Intended for use in interactive Python environments, and requires previous creation of ArticleFormSet.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
>>> ArticleFormSet({})
Traceback (most recent call last):
...
ValidationError: [u'ManagementForm data is missing or has been tampered with']
```

----------------------------------------

TITLE: Fixing QuerySet Operations with values_list() Annotations
DESCRIPTION: Bug fix for combining annotated values_list() querysets using union(), difference(), or intersection() operations that previously crashed due to mismatching columns. Fixed regression from Django 1.11.8.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.12.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
values_list().union()
values_list().difference()
values_list().intersection()
```

----------------------------------------

TITLE: Accessing Request Cookies in Django (Python)
DESCRIPTION: Refers to the dictionary-like object in Django's request object where parsed cookies are stored. In version 1.8.15, its parser was simplified to better match browser behavior and handle potentially invalid cookies (per RFC 6265) set via JavaScript's `document.cookie`, mitigating a CSRF bypass vulnerability.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.15.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
request.COOKIES
```

----------------------------------------

TITLE: Generating Custom Password Reset Email Subject in Django
DESCRIPTION: This snippet defines the subject line for a custom password reset email in Django. It uses the autoescape tag to disable automatic HTML escaping for the site name, allowing for potential HTML formatting in the site name if needed.
SOURCE: https://github.com/django/django/blob/main/tests/auth_tests/templates/registration/password_reset_subject.txt#2025-04-23_snippet_0

LANGUAGE: Django Template Language
CODE:
```
{% autoescape off %}Custom password reset on {{ site_name }}{% endautoescape %}
```

----------------------------------------

TITLE: Configuring ALLOWED_HOSTS setting in Django 1.3.6
DESCRIPTION: Demonstrates the new ALLOWED_HOSTS setting introduced in Django 1.3.6 to mitigate host header poisoning. The default value is shown, along with a recommendation to set a more restrictive value for production environments.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.6.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
ALLOWED_HOSTS = ['*']
```

----------------------------------------

TITLE: Installing Colorama for Windows ANSI Support - DOS Batch
DESCRIPTION: Demonstrates how to install the `colorama` Python package using `pip` from the Windows command prompt. This package is required on older Windows versions (like legacy `cmd.exe`) to enable ANSI color support for Django command output.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_47

LANGUAGE: DOS Batch
CODE:
```
py -m pip install "colorama >= 0.4.6"
```

----------------------------------------

TITLE: Accessing template context in Django test client response
DESCRIPTION: Demonstrates the new simplified way to access template context in test client responses, using request.context[key] syntax.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
request.context[key]
```

----------------------------------------

TITLE: SQL Representation of XOR Combination (SQL)
DESCRIPTION: Shows an example SQL query using the XOR operator to select rows where x equals 1 or y equals 2, but not both. Note: Native XOR only supported on some databases.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_65

LANGUAGE: sql
CODE:
```
SELECT ... WHERE x=1 XOR y=2
```

----------------------------------------

TITLE: Model Display Method Override
DESCRIPTION: Restored functionality to override get_FOO_display method in Django models.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.7.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
django.db.models.Model.get_FOO_display
```

----------------------------------------

TITLE: Expected Output: Sorted Book Titles after Nested Dictsort - HTML+Django
DESCRIPTION: Shows how book titles would be displayed in order after sorting by nested 'author.age' with dictsort in a Django template. Output is a simple list rendering. Used in conjunction with the for-loop template code and the provided input data.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_62

LANGUAGE: html+django
CODE:
```
* Alice (Lewis)
* 1984 (George)
* Timequake (Kurt)
```

----------------------------------------

TITLE: Vulnerability fix in UserAttributeSimilarityValidator
DESCRIPTION: Security fix addressing CVE-2021-45115 where UserAttributeSimilarityValidator was vulnerable to DoS attacks due to processing artificially large passwords. The fix implements length restrictions for comparison values.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.26.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
UserAttributeSimilarityValidator
```

----------------------------------------

TITLE: Proper Spacing in Django Template Tags
DESCRIPTION: Demonstrates correct spacing inside Django template tags with one space between braces and tag content. This shows proper formatting of template tags.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_9

LANGUAGE: html+django
CODE:
```
{% load humanize %}
```

----------------------------------------

TITLE: Accessing Django Test Signal
DESCRIPTION: Demonstrates how to access the 'template_rendered' signal from Django's test signals module. This signal is only available during testing.
SOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
django.test.signals.template_rendered
```

----------------------------------------

TITLE: Checking for Protected Type Objects
DESCRIPTION: Determines if an object instance is of a protected type, which are preserved as-is when passed to force_str with strings_only=True.
SOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
is_protected_type(obj)
```

----------------------------------------

TITLE: Bugfix for Auto-reloader with Empty DIRS in TEMPLATES (Python/Django)
DESCRIPTION: Fixes a regression in Django 3.2.4 where the auto-reloader failed to detect changes when the DIRS option in TEMPLATES setting contained an empty string.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.13.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
TEMPLATES = [
    {
        'DIRS': [''],
        # other options...
    },
]
```

----------------------------------------

TITLE: Deprecation of Field.related Attribute in Django Models - reStructuredText
DESCRIPTION: Explains the deprecation of the private Field.related attribute in favor of Field.rel, an instance of ForeignObjectRel, in the Django ORM. The related module and legacy attributes are removed in Django 1.10, and developers should transition their code accordingly.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_11

LANGUAGE: reStructuredText
CODE:
```
Model ``Field.related``
-----------------------

Private attribute ``django.db.models.Field.related`` is deprecated in favor
of ``Field.rel``.  The latter is an instance of
``django.db.models.fields.related.ForeignObjectRel`` which replaces
``django.db.models.related.RelatedObject``. The ``django.db.models.related``
module has been removed and the ``Field.related`` attribute will be removed in
Django 1.10.
```

----------------------------------------

TITLE: Referencing Django FileField Custom upload_to Attribute
DESCRIPTION: This snippet demonstrates the reference to Django's FileField custom upload_to attribute, which is related to a bugfix in version 3.2.3. The fix addresses an issue where saving FileField would raise a SuspiciousFileOperation even with a valid custom upload_to path.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.3.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
~django.db.models.FileField.upload_to
```

----------------------------------------

TITLE: Referencing Django URLValidator Class in Python
DESCRIPTION: This snippet demonstrates how to reference the URLValidator class from Django's core validators module. It's used in the context of explaining a security vulnerability related to header injection.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.2.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.core.validators import URLValidator
```

----------------------------------------

TITLE: Defining Custom Django Model Field (1.2+) in Python
DESCRIPTION: This snippet illustrates the updated API for custom Django `Field` subclasses introduced in version 1.2 to support multiple databases. The `db_type`, `get_db_prep_save`, `get_db_prep_value`, and `get_db_prep_lookup` methods now accept a `connection` argument to specify the target database. Additionally, new methods `get_prep_value` and `get_prep_lookup` were introduced to separate general value preparation from database-specific preparation. The optional `prepared` argument indicates if the value has already undergone initial preparation via `get_prep_value` or `get_prep_lookup`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class CustomModelField(models.Field):
    ...

    def db_type(self, connection): ...

    def get_prep_value(self, value): ...

    def get_prep_lookup(self, lookup_type, value): ...

    def get_db_prep_save(self, value, connection): ...

    def get_db_prep_value(self, value, connection, prepared=False): ...

    def get_db_prep_lookup(self, lookup_type, value, connection, prepared=False): ...
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'endswith' Lookup in Django Python
DESCRIPTION: Illustrates the `endswith` lookup (`__endswith`) on the `ages` field. This query finds `Event` objects where the `ages` range has an upper bound equal to the specified value (10 in this case). Note that PostgreSQL canonical range representation excludes the upper bound, so this lookup compares against the stored upper bound value. Requires the `Event` model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_29

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__endswith=10)
<QuerySet [<Event: Soft play>]>
```

----------------------------------------

TITLE: Updating Django URL Configuration for App Namespace
DESCRIPTION: Example of updating URL configuration to use the new app_name attribute instead of explicitly setting the namespace in the include() function. This change simplifies URL configuration in Django 1.9.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
# mysite/urls.py
urlpatterns = [url(r"^polls/", include("polls.urls", namespace="polls")), ...]

# polls/urls.py
app_name = "polls"  # added
urlpatterns = [...]
```

----------------------------------------

TITLE: Creating Empty GEOS LineString Objects in Python
DESCRIPTION: Illustrates two equivalent ways to instantiate an empty `LineString` object in Django's GEOS interface. An empty `LineString` can be created by calling the constructor without any arguments or by passing an empty sequence (like an empty list).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_10

LANGUAGE: pycon
CODE:
```
>>> ls = LineString()
>>> ls = LineString([])
```

----------------------------------------

TITLE: Querying Spatial Left Overlap in PostGIS
DESCRIPTION: Example of using the 'overlaps_left' lookup to find geometries whose bounding box overlaps or is to the left of a given geometry's bounding box in PostGIS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__overlaps_left=geom)
```

----------------------------------------

TITLE: Checking Python Version - DOS Prompt
DESCRIPTION: Verifies the installed Python version using the `py` launcher in the Windows command prompt after installation. This command confirms that Python is correctly installed and accessible from the prompt.
SOURCE: https://github.com/django/django/blob/main/docs/howto/windows.txt#_snippet_0

LANGUAGE: doscon
CODE:
```
...\> py --version
```

----------------------------------------

TITLE: Querying PostgreSQL Range Fields with 'isempty' Lookup in Django Python
DESCRIPTION: Uses the `isempty` lookup (`__isempty`) on the `ages` field. This query checks for `Event` objects where the `ages` range is empty (contains no points). Requires the `Event` model.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_30

LANGUAGE: pycon
CODE:
```
>>> Event.objects.filter(ages__isempty=True)
<QuerySet []>
```

----------------------------------------

TITLE: Referencing Django Authentication View in Python
DESCRIPTION: This snippet demonstrates how to reference the Django authentication login view, which is mentioned as one of the cases relying on user input for redirection.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.20.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
django.contrib.auth.views.login()
```

----------------------------------------

TITLE: Querying Spatial Right Relationship in PostGIS
DESCRIPTION: Example of using the 'right' lookup to find geometries whose bounding box is strictly to the right of a given geometry's bounding box in PostGIS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_20

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__right=geom)
```

----------------------------------------

TITLE: Accessing HTTP Request Scheme in Django
DESCRIPTION: Demonstrates how to access the HTTP request scheme in Django, which was affected by the security fix. The fix ensures correct detection of HTTPS when using a reverse-proxy.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.22.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.http.HttpRequest.scheme
```

----------------------------------------

TITLE: Improper Block Tag Closure in Django Templates
DESCRIPTION: Shows improper closure of block tags in Django templates where the block name is missing from the endblock tag. This is presented as an anti-pattern when blocks span multiple lines.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_12

LANGUAGE: html+django
CODE:
```
{% block header %}

  Code goes here

{% endblock %}
```

----------------------------------------

TITLE: Incorrect Variable Spacing in Django Templates
DESCRIPTION: Shows incorrect spacing for variable interpolation in Django templates with no spaces between braces and variable content. This is presented as an anti-pattern to avoid.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_6

LANGUAGE: html+django
CODE:
```
{{user}}
```

----------------------------------------

TITLE: Referencing PostgreSQL Backend Method (RST)
DESCRIPTION: This snippet references the `init_connection_state` method within the PostgreSQL database backend. The context is restoring the ability to override timezone and role setting behavior within this method, which was affected by a regression in Django 5.1.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_11

LANGUAGE: restructuredtext
CODE:
```
``init_connection_state``
```

----------------------------------------

TITLE: Using Percent Literals in Django Raw SQL Queries
DESCRIPTION: Examples showing the unified behavior of percent literals in cursor.execute() queries. Double percent signs are only needed when providing replacement parameters, regardless of database backend.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
# No parameters, no percent doubling
cursor.execute("SELECT foo FROM bar WHERE baz = '30%'")

# Parameters passed, non-placeholders have to be doubled
cursor.execute("SELECT foo FROM bar WHERE baz = '30%%' and id = %s", [self.id])
```

----------------------------------------

TITLE: Referencing Django StringAgg Aggregation Function in Python
DESCRIPTION: This snippet demonstrates how to reference the StringAgg aggregation function from Django's contrib.postgres.aggregates module. The function was subject to a SQL injection vulnerability in previous versions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.28.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib.postgres.aggregates import StringAgg
```

----------------------------------------

TITLE: Django StringAgg Security Issue Reference
DESCRIPTION: Reference to the StringAgg aggregation function that was subject to SQL injection vulnerability through crafted delimiter input (CVE-2020-7471).
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.3.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
StringAgg(delimiter)
```

----------------------------------------

TITLE: Working with LineString Coordinates
DESCRIPTION: Shows how to manipulate LineString geometries using Python indexing and list operations. Demonstrates coordinate access, modification, and coordinate list manipulation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
>>> from django.contrib.gis.geos import LineString
>>> line = LineString((0, 0), (0, 50), (50, 50), (50, 0), (0, 0))
>>> line[0]
(0.0, 0.0)
>>> line[-2]
(50.0, 0.0)
```

----------------------------------------

TITLE: Importing GeoDjango Utils Module
DESCRIPTION: Module import statement for GeoDjango's utility collection, which provides tools for geospatial web application development.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/utils.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.contrib.gis.utils
```

----------------------------------------

TITLE: Using no-python-format flag in translation strings
DESCRIPTION: Shows how to use the no-python-format flag to prevent gettext from treating percent signs as format specifiers in translation strings.
SOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_53

LANGUAGE: python
CODE:
```
# xgettext:no-python-format
output = _("10% interest")
```

----------------------------------------

TITLE: Enabling Pickling for `forms.FileField` in Django
DESCRIPTION: Notes a bugfix (:ticket:`26212`) in Django 1.8.10 that makes `forms.FileField` instances picklable. This allows instances of this field to be serialized, for example, for caching or storing in sessions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_6

LANGUAGE: Python
CODE:
```
forms.FileField
```

----------------------------------------

TITLE: Converting Geometry to GML in Django
DESCRIPTION: Example demonstrating conversion of a polygon to Geographic Markup Language (GML) format using the AsGML function in Django.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
>>> qs = Zipcode.objects.annotate(gml=AsGML("poly"))
>>> print(qs[0].gml)
<gml:Polygon srsName="EPSG:4326"><gml:OuterBoundaryIs>-147.78711,70.245363 ...
-147.78711,70.245363</gml:OuterBoundaryIs></gml:Polygon>
```

----------------------------------------

TITLE: Generated HTML for ModelChoiceField with Custom to_field_name in Django
DESCRIPTION: HTML output generated by a ModelChoiceField using a custom to_field_name, which uses the specified field of each object as option values.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_24

LANGUAGE: html
CODE:
```
<select id="id_field2" name="field2">
<option value="obj1.name">Object1</option>
<option value="obj2.name">Object2</option>
...
</select>
```

----------------------------------------

TITLE: Referencing Django's UsernameField in Forms Module
DESCRIPTION: This code snippet references the UsernameField class from Django's auth forms module. This field is the focus of the security fix in Django 4.1.13, addressing a potential denial of service vulnerability on Windows systems.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.13.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.contrib.auth.forms.UsernameField
```

----------------------------------------

TITLE: Publishing work to GitHub
DESCRIPTION: Pushes the local branch with changes to the user's GitHub repository, making it available for review and pull requests.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
git push origin ticket_xxxxx
```

----------------------------------------

TITLE: Interpreting Successful Django Test Output
DESCRIPTION: Shows the output of a successful Django test run. It displays the number of tests run, execution time, and a success message.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/overview.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
----------------------------------------------------------------------
Ran 22 tests in 0.221s

OK
```

----------------------------------------

TITLE: Implementing Query Expression Source Methods in Django
DESCRIPTION: Basic implementation of getter and setter methods for source expressions in a Django query expression class.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_34

LANGUAGE: python
CODE:
```
def get_source_expressions(self):
    return self.expressions


def set_source_expressions(self, expressions):
    self.expressions = expressions
```

----------------------------------------

TITLE: Importing Session Exceptions
DESCRIPTION: Shows how to import session exceptions from the django.contrib.sessions.exceptions module.
SOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
from django.contrib.sessions.exceptions import SessionInterrupted
```

----------------------------------------

TITLE: Cloning Django Development Version
DESCRIPTION: Git command to clone Django's main development branch from GitHub repository
SOURCE: https://github.com/django/django/blob/main/docs/topics/install.txt#2025-04-23_snippet_1

LANGUAGE: console
CODE:
```
$ git clone https://github.com/django/django.git
```

----------------------------------------

TITLE: Preventing Data Leakage in Django Admin
DESCRIPTION: This snippet demonstrates a potential data leakage vulnerability in Django's admin interface through query string manipulation. The fix raises an exception for invalid 'to_field' values that aren't related fields to models registered with the admin.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.14.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
"/admin/auth/user/?pop=1&t=password"
```

----------------------------------------

TITLE: Using FilteredRelation() with Multiple Relationships in Django
DESCRIPTION: Fixes a regression in Django 4.0 where multiple FilteredRelation() relationships to the same field were ignored.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.4.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
FilteredRelation()
```

----------------------------------------

TITLE: Using select_for_update with 'self' in multi-table inheritance
DESCRIPTION: Example of a fixed bug where using 'self' in the 'of' argument with select_for_update() could cause data loss with multi-table inheritance by locking the parent model instead of the queryset's model.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.1.15.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
select_for_update()
```

----------------------------------------

TITLE: Fixing Session Flushing Issue in cached_db Backend
DESCRIPTION: The code shows problematic method calls that were fixed in Django 1.8.2. The issue occurred when session.flush() in the cached_db backend set the session key to an empty string rather than None, leading to potential session reuse across users.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
session.flush()
```

----------------------------------------

TITLE: Example Directory Structure for Template Inheritance
DESCRIPTION: Displays a sample directory structure to provide context for the relative path examples used with the `{% extends %}` tag. It shows the location of `template.html` relative to potential parent templates (`base1.html`, `base2.html`, `base3.html`).
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_13

LANGUAGE: text
CODE:
```
dir1/
    template.html
    base2.html
    my/
        base3.html
base1.html
```

----------------------------------------

TITLE: QuerySet Ordering with GROUP BY
DESCRIPTION: Fixed regression where QuerySet.ordered attribute incorrectly returned True for GROUP BY queries on models with Meta.ordering.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.2.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
.annotate().values()
```

----------------------------------------

TITLE: Querying Strict Below Spatial Relationship in PostGIS
DESCRIPTION: Example of using the 'strictly_below' lookup to find geometries whose bounding box is strictly below a given geometry's bounding box in PostGIS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_26

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__strictly_below=geom)
```

----------------------------------------

TITLE: Example Django Version Output
DESCRIPTION: Provides examples of the output format when running the 'django-admin version' command, adhering to PEP 440 schema.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_3

LANGUAGE: text
CODE:
```
1.4.dev17026
1.4a1
1.4
```

----------------------------------------

TITLE: Referencing Django SessionMiddleware in Python
DESCRIPTION: This snippet refers to the Django SessionMiddleware, which has been modified to address the security vulnerability by preventing the creation of empty session records.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.22.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
django.contrib.sessions.middleware.SessionMiddleware
```

----------------------------------------

TITLE: Example of Invalid Field Name (Reserved Word)
DESCRIPTION: Illustrates a Django model definition with an invalid field name ('pass') that is a Python reserved word, which will cause a Python syntax error.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_28

LANGUAGE: python
CODE:
```
class Example(models.Model):
    pass = models.IntegerField() # 'pass' is a reserved word!
```

----------------------------------------

TITLE: Getting Runtime Help for Django Commands
DESCRIPTION: Shows how to use the 'help' command to get general usage information, list available commands, or display details for a specific command.
SOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#_snippet_1

LANGUAGE: Console
CODE:
```
django-admin help
```

LANGUAGE: Console
CODE:
```
django-admin help --commands
```

LANGUAGE: Console
CODE:
```
django-admin help <command>
```

----------------------------------------

TITLE: Closing Rings in an OGRGeometry LineString in Python
DESCRIPTION: Shows the usage of the `close_rings()` method on an `OGRGeometry` object representing an unclosed LinearRing. The method modifies the geometry in-place by adding the starting point to the end, effectively closing the ring. The result is verified by checking the `.wkt` attribute.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_14

LANGUAGE: pycon
CODE:
```
>>> triangle = OGRGeometry("LINEARRING (0 0,0 1,1 0)")
>>> triangle.close_rings()
>>> triangle.wkt
'LINEARRING (0 0,0 1,1 0,0 0)'
```

----------------------------------------

TITLE: Defining URLIZE_ASSUME_HTTPS setting
DESCRIPTION: This is a transitional setting for Django 6.x, setting HTTPS as the default protocol in URLs processed by urlize and urlizetrunc template filters when True. It is deprecated.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_65



----------------------------------------

TITLE: Method Signature - Django Database Router allow_migrate
DESCRIPTION: Method signature for allow_migrate database router method used for controlling migrations, showing parameter structure and hints.
SOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
allow_migrate(self, db, app_label, model_name=None, **hints)
```

----------------------------------------

TITLE: Configuring Oracle Connection (Full DSN) - Django Python
DESCRIPTION: Shows how to configure the Oracle connection `NAME` setting using the Full DSN (Data Source Name) string format. Like Easy Connect, this format is used when `HOST` and `PORT` are left empty and provides explicit control over the connection description.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_18

LANGUAGE: python
CODE:
```
"NAME": (
        "(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521))"
        "(CONNECT_DATA=(SERVICE_NAME=orclpdb1)))"
    )
```

----------------------------------------

TITLE: Setting DJANGO_SETTINGS_MODULE in Windows Command Prompt
DESCRIPTION: Example of setting the DJANGO_SETTINGS_MODULE environment variable and running django-admin in a Windows command prompt.
SOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_3

LANGUAGE: doscon
CODE:
```
set DJANGO_SETTINGS_MODULE=mysite.settings
django-admin runserver
```

----------------------------------------

TITLE: Extra Method Signature for Complex WHERE Clauses in Django
DESCRIPTION: Shows the method signature for extra(), a method to inject specific clauses into generated SQL. This method should only be used as a last resort when the Django query syntax can't express complex WHERE clauses.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_55

LANGUAGE: python
CODE:
```
extra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None)
```

----------------------------------------

TITLE: Accessing Uploaded Files in Views (Python)
DESCRIPTION: This snippet shows a simple view function accessing an uploaded file from `request.FILES`. It serves as context for the subsequent table explaining the API changes for accessing uploaded file attributes between Django 0.96 and 1.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
  def my_view(request):
      f = request.FILES["file_field_name"]
      ...
```

----------------------------------------

TITLE: Removing Message Model and Related Methods in Django Authentication
DESCRIPTION: The Message model in django.contrib.auth, along with its related manager and methods in the User model, will be removed. The messages framework should be used instead.
SOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
user.message_set.create()
user.get_and_delete_messages()
```

----------------------------------------

TITLE: Accessing X Coordinates of a LineString Geometry in Python
DESCRIPTION: Shows how to get a list of all X coordinates from a LineString `OGRGeometry` ('LINESTRING (1 2,3 4)') by accessing its `.x` attribute. It returns a list of floating-point X values for each vertex.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_21

LANGUAGE: pycon
CODE:
```
>>> OGRGeometry("LINESTRING (1 2,3 4)").x
[1.0, 3.0]
```

----------------------------------------

TITLE: Configuring Oracle Connection (HOST/PORT) - Django Python
DESCRIPTION: Configures the default database connection for Oracle using HOST and PORT settings. This method is used when connecting via SID (like 'xe' in the example) without relying on a tnsnames.ora file or similar naming method. Both HOST and PORT must be specified.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_16

LANGUAGE: python
CODE:
```
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.oracle",
        "NAME": "xe",
        "USER": "a_user",
        "PASSWORD": "a_password",
        "HOST": "dbprod01ned.mycompany.com",
        "PORT": "1540",
    }
}
```

----------------------------------------

TITLE: Adding CSRF Check Flag to Django Test Client
DESCRIPTION: Introduces the 'enforce_csrf_checks' flag to the Django test client. This new feature allows developers to perform full CSRF checks on forms when using the test client, which is useful for testing CSRF-related functionality.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.2.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
enforce_csrf_checks
```

----------------------------------------

TITLE: Handling Instance-only Descriptors in Model.__init__() in Python
DESCRIPTION: Fixed a regression causing Model.__init__() to crash if a field has an instance-only descriptor.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
Model.__init__()
```

----------------------------------------

TITLE: Fixing Widget.render() Deprecation Warning in Python
DESCRIPTION: Removed an incorrect deprecation warning about a missing 'renderer' argument if a Widget.render() method accepts **kwargs.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
Widget.render(**kwargs)
```

----------------------------------------

TITLE: Fixing Regular Expression DoS in Django's Truncator.words() Method
DESCRIPTION: Addresses a security vulnerability (CVE-2024-27351) in django.utils.text.Truncator.words() method and the truncatewords_html template filter. The fix prevents potential denial-of-service attacks using crafted strings.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.11.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.utils.text.Truncator.words()
```

----------------------------------------

TITLE: Fixing Query Crash with Aliased `GeneratedField` Lookups in Django
DESCRIPTION: Corrects a crash in Django 5.0 that occurred when executing database queries involving table aliases where a lookup was performed on a `GeneratedField` belonging to the aliased table. This ensures the ORM handles queries on generated fields within aliased tables correctly.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.4.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
GeneratedField
```

----------------------------------------

TITLE: Fixing JSONField Lookup Crash in Django 1.11.26
DESCRIPTION: This bugfix resolves a crash occurring when using specific lookups (contains, contained_by, has_key, has_keys, or has_any_keys) on django.contrib.postgres.fields.JSONField, particularly when a key transform is involved in the expression.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.26.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
Fixed a crash when using a ``contains``, ``contained_by``, ``has_key``,
  ``has_keys``, or ``has_any_keys`` lookup on
  ``django.contrib.postgres.fields.JSONField``, if the right or left hand
  side of an expression is a key transform (:ticket:`30826`).
```

----------------------------------------

TITLE: Admin Empty Field List Filter
DESCRIPTION: Fixed crash in admin EmptyFieldListFilter when used with GenericRelation.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.2.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
django.contrib.admin.EmptyFieldListFilter
```

----------------------------------------

TITLE: Fixing PostgreSQL Crash with Specific Timezone Settings in Django
DESCRIPTION: Addresses a bugfix (:ticket:`26177`) in Django 1.8.10 that resolved a crash occurring when using PostgreSQL with the settings `TIME_ZONE=None` and `USE_TZ=False` simultaneously. This ensures correct behavior under this specific configuration.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
TIME_ZONE=None
```

LANGUAGE: Python
CODE:
```
USE_TZ=False
```

----------------------------------------

TITLE: Evaluating limit_choices_to in ModelForm Instantiation in Python
DESCRIPTION: Fixed a regression preventing a model field's limit_choices_to from being evaluated when a ModelForm is instantiated.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_14

LANGUAGE: Python
CODE:
```
class MyModelForm(forms.ModelForm):
    class Meta:
        model = MyModel
        fields = ['field_with_limit_choices_to']
```

----------------------------------------

TITLE: Documentation Content Structure in reStructuredText
DESCRIPTION: Main structural elements of the contribution guide documentation including section headers and admonitions, written in reStructuredText markup language.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/new-contributors.txt#2025-04-23_snippet_0

LANGUAGE: reStructuredText
CODE:
```
===========================
Advice for new contributors
===========================

.. admonition:: Get up and running!

    If you are new to contributing to Django, the :doc:`/intro/contributing`
    tutorial will give you an introduction to the tools and the workflow.
```

----------------------------------------

TITLE: Writing Geometry Objects to WKT in Python using GEOS
DESCRIPTION: Demonstrates how to use the WKTWriter class to convert a GEOSGeometry object to Well-Known Text (WKT) format.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_24

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.geos import Point, WKTWriter
>>> pnt = Point(1, 1)
>>> wkt_w = WKTWriter()
>>> wkt_w.write(pnt)
'POINT (1.0000000000000000 1.0000000000000000)'
```

----------------------------------------

TITLE: Initializing and Comparing OGRGeomType Objects in Python
DESCRIPTION: Demonstrates initializing `OGRGeomType` objects using different inputs (integer type code or case-insensitive string name) and performing equality comparisons between `OGRGeomType` instances and other types (integer or string). Requires importing `OGRGeomType` from `django.contrib.gis.gdal`.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_25

LANGUAGE: pycon
CODE:
```
>>> from django.contrib.gis.gdal import OGRGeomType
>>> gt1 = OGRGeomType(3)  # Using an integer for the type
>>> gt2 = OGRGeomType("Polygon")  # Using a string
>>> gt3 = OGRGeomType("POLYGON")  # It's case-insensitive
>>> print(gt1 == 3, gt1 == "Polygon")  # Equivalence works w/non-OGRGeomType objects
True True
```

----------------------------------------

TITLE: Defining Inherited ModelAdmin Actions (Pre-Django 2.2) in Python
DESCRIPTION: This snippet illustrates the older Django behavior (prior to version 2.2) where `actions` defined in a base `ModelAdmin` class were automatically collected and combined with actions defined in a subclass. In this example, `SubAdmin` would implicitly inherit the 'a' action from `BaseAdmin`, resulting in actions ['a', 'b'].
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.contrib import admin


class BaseAdmin(admin.ModelAdmin):
    actions = ["a"]


class SubAdmin(BaseAdmin):
    actions = ["b"]
```

----------------------------------------

TITLE: Defining View Class in Django
DESCRIPTION: Base class for all views in Django. Defines core functionality like dispatch and HTTP method handling.
SOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class View():
    # Attributes
    http_method_names

    # Methods
    as_view()
    dispatch()
    head()
    http_method_not_allowed()
    setup()
```

----------------------------------------

TITLE: Fixing Migration Crash on MySQL 8.0.13+ for Non-nullable Fields
DESCRIPTION: A bug fix for Django 3.2 where migrations would crash on MySQL 8.0.13+ when altering BinaryField, JSONField, or TextField to be non-nullable. This addresses ticket #32503.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.5.txt#2025-04-23_snippet_2

LANGUAGE: SQL
CODE:
```
ALTER TABLE ... MODIFY COLUMN ... NOT NULL
```

----------------------------------------

TITLE: Vulnerable SQL Position Function Implementation
DESCRIPTION: Example of an unsafe implementation of a Position function that is vulnerable to SQL injection due to string interpolation.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_36

LANGUAGE: python
CODE:
```
from django.db.models import Func


class Position(Func):
    function = "POSITION"
    template = "%(function)s('%(substring)s' in %(expressions)s)"

    def __init__(self, expression, substring):
        # substring=substring is an SQL injection vulnerability!
        super().__init__(expression, substring=substring)
```

----------------------------------------

TITLE: Django Branch Pattern
DESCRIPTION: Pattern used for stable branch names in Django's version control system.
SOURCE: https://github.com/django/django/blob/main/docs/internals/release-process.txt#2025-04-23_snippet_4

LANGUAGE: git
CODE:
```
stable/A.B.x
```

----------------------------------------

TITLE: Fixing SQL Injection in QuerySet Methods for Django
DESCRIPTION: Addresses CVE-2022-28346, a potential SQL injection vulnerability in QuerySet's annotate(), aggregate(), and extra() methods when using dictionary expansion for kwargs.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.4.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
QuerySet.annotate(**kwargs)
QuerySet.aggregate(**kwargs)
QuerySet.extra(**kwargs)
```

----------------------------------------

TITLE: Importing Django Database Signal Module
DESCRIPTION: Shows the import statement for Django's database backends module, which contains signals related to database operations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.db import backends
```

----------------------------------------

TITLE: Referencing Trunc() and Extract() Functions in Django 3.2.14
DESCRIPTION: This snippet demonstrates how to reference the Trunc() and Extract() database functions in Django 3.2.14. These functions were subject to a SQL injection vulnerability if untrusted data was used as kind/lookup_name values. The fix ensures safer usage of these functions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.14.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.db.models.functions import Trunc, Extract
```

----------------------------------------

TITLE: Configuring SpatiaLite Build for macOS
DESCRIPTION: This shell command shows how to configure the SpatiaLite library and tools build process specifically for macOS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/spatialite.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
$ ./configure --target=macosx
```

----------------------------------------

TITLE: Updated Spanish Localization Date Format with Escaped Characters
DESCRIPTION: The corrected Spanish localization date format with proper escaping for 'd', 'e', and 'o' characters to prevent conflicts with Django 1.4's new date format specifiers.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
DATE_FORMAT = r"j \d\e F \d\e Y"
```

----------------------------------------

TITLE: Configuring Git user information
DESCRIPTION: Sets up the user's name and email for Git commits. This information is used to associate commits with the user's GitHub account.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
$ git config --global user.name "Your Real Name"
$ git config --global user.email "you@email.com"
```

----------------------------------------

TITLE: Cloning Django Repository and Running Tests with SQLite
DESCRIPTION: This snippet demonstrates how to fork Django, clone your fork, install requirements, and run the test suite with the default SQLite settings. It covers the basic steps to get started with testing Django from a fresh repository clone.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_0

LANGUAGE: console
CODE:
```
$ git clone https://github.com/YourGitHubName/django.git django-repo
$ cd django-repo/tests
$ python -m pip install -e ..
$ python -m pip install -r requirements/py3.txt
$ ./runtests.py
```

----------------------------------------

TITLE: Using Direct Assignment with Related Objects (Deprecated)
DESCRIPTION: Example showing the deprecated direct assignment approach for reverse foreign key or many-to-many relations, which will be removed in a future Django version. This method can cause confusion because it creates an implicit save.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
>>> new_list = [obj1, obj2, obj3]
>>> e.related_set = new_list
```

----------------------------------------

TITLE: Example New Unique Filename Suffix Generation
DESCRIPTION: Illustrates the new format appended by `Storage.get_available_name()` to resolve filename conflicts during file uploads. It consists of an underscore followed by a random 7-character alphanumeric string. This change prevents a potential denial-of-service attack caused by excessive `os.stat()` calls associated with the previous sequential numbering method.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.9.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
"_x3a1gho"
```

----------------------------------------

TITLE: Django QuerySet Ordering
DESCRIPTION: Reference to order_by() method used with JSONField for PostgreSQL database operations.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.1.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
QuerySet.order_by()
```

----------------------------------------

TITLE: Installing Django Development Version
DESCRIPTION: Command to install Django from local development source using pip in editable mode
SOURCE: https://github.com/django/django/blob/main/docs/topics/install.txt#2025-04-23_snippet_2

LANGUAGE: console
CODE:
```
$ python -m pip install -e django/
```

----------------------------------------

TITLE: Implementing Custom Manager with Backward Compatibility in Django
DESCRIPTION: This snippet demonstrates how to create a custom manager class that works with both old and new Django versions. It defines a get_queryset_compat method to handle differences in queryset retrieval between versions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_11

LANGUAGE: Python
CODE:
```
class YourCustomManager(models.Manager):
    def get_queryset(self):
        return YourCustomQuerySet()  # for example

    if django.VERSION < (1, 6):
        get_query_set = get_queryset

    def active(self):  # for example
        return self.get_queryset_compat().filter(active=True)

    def get_queryset_compat(self):
        get_queryset = (
            self.get_query_set if hasattr(self, "get_query_set") else self.get_queryset
        )
        return get_queryset()
```

----------------------------------------

TITLE: Demonstrating Settings Leak in Django Date Template Filter - Django Template
DESCRIPTION: This snippet shows how a template can use a user-specified variable as a format for the date filter, which, if unvalidated, can be exploited by a malicious user to access sensitive Django settings. The code expects two context variables: last_updated (a date or datetime object) and user_date_format (the format string to use). The vulnerability appears if user_date_format is set to the name of a Django setting like SECRET_KEY, allowing access to that value. The fix restricts such access to only date/time settings.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.11.txt#2025-04-23_snippet_0

LANGUAGE: django-template
CODE:
```
{{ last_updated|date:user_date_format }}
```

----------------------------------------

TITLE: Disallowed F-string Patterns in Django
DESCRIPTION: Shows improper f-string usage in Django code with function calls and complex expressions inside the braces. These patterns should be avoided according to Django coding standards.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
# Disallowed
f"hello {get_user()}"
f"you are {user.age * 365.25} days old"
```

----------------------------------------

TITLE: Applying phone2numeric Filter in Django Templates
DESCRIPTION: The phone2numeric filter converts a phone number (possibly containing letters) to its numerical equivalent.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_80

LANGUAGE: html+django
CODE:
```
{{ value|phone2numeric }}
```

----------------------------------------

TITLE: Django URL Pattern Function Reference
DESCRIPTION: Reference to the re_path function used with RegexPattern for URL routing in Django, which was fixed to handle missing optional named groups correctly.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.1.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.urls.re_path
```

----------------------------------------

TITLE: Cloning a forked Django repository
DESCRIPTION: Creates a local copy of the user's forked Django repository from GitHub. This allows the user to work on the code locally.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
git clone https://github.com/GitHub_nick/django.git
```

----------------------------------------

TITLE: Preventing SQL Injection in Django QuerySet Methods
DESCRIPTION: Addresses CVE-2024-42005 by enhancing security in QuerySet.values() and values_list() methods when working with models containing JSONField, preventing SQL injection via crafted JSON object keys.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.15.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
QuerySet.values()
QuerySet.values_list()
```

----------------------------------------

TITLE: Database Backend Import Pattern
DESCRIPTION: Code example showing the new import paths for database backend base classes in Django's updated architecture.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
from django.db.backends.base.base import BaseDatabaseWrapper
from django.db.backends.base.client import BaseDatabaseClient
from django.db.backends.base.creation import BaseDatabaseCreation
from django.db.backends.base.features import BaseDatabaseFeatures
from django.db.backends.base.introspection import BaseDatabaseIntrospection
from django.db.backends.base.introspection import FieldInfo, TableInfo
from django.db.backends.base.operations import BaseDatabaseOperations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.backends.base.validation import BaseDatabaseValidation
```

----------------------------------------

TITLE: Configuring Oracle Connection (Easy Connect) - Django Python
DESCRIPTION: Shows how to configure the Oracle connection `NAME` setting using the Easy Connect string format. This format is used when both `HOST` and `PORT` are left empty and is often required for configurations like RAC or pluggable databases without using a tnsnames.ora file.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_17

LANGUAGE: python
CODE:
```
"NAME": "localhost:1521/orclpdb1"
```

----------------------------------------

TITLE: Example Old Sequential Filename Suffixes
DESCRIPTION: Shows the old method used by `Storage.get_available_name()` for generating unique filenames, which involved appending an underscore followed by a sequential number. This iterative approach could lead to performance degradation and a denial-of-service vulnerability due to numerous `os.stat()` system calls when many files with the same name were uploaded.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.9.txt#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
"_1", "_2"
```

----------------------------------------

TITLE: Django Template Tag Reference
DESCRIPTION: Template tag mentioned in bugfix that was modified to handle any iterable.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.1.txt#2025-04-23_snippet_2

LANGUAGE: Django Template
CODE:
```
{% for %}
```

----------------------------------------

TITLE: Referencing Django QuerySet Method
DESCRIPTION: Code reference to Django's select_for_update() method used in the context of discussing a data loss bug fix.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.4.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
select_for_update
```

----------------------------------------

TITLE: Demonstrating Changes in Django Model Relations API
DESCRIPTION: Example showing the difference in behavior of model relation attributes between Django 1.8 and older versions, specifically around get_all_related_objects() method.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
>>> p = Poll.objects.get(pk=1)
>>> p._meta.get_all_related_objects()
[<ManyToOneRel: polls.choice>]
>>> p._meta.get_all_related_objects()[0].model
<class 'polls.models.Poll'>
>>> p._meta.get_all_related_objects()[0].related_model
<class 'polls.models.Choice'>
```

LANGUAGE: python
CODE:
```
>>> p._meta.get_all_related_objects()
[<RelatedObject: polls:choice related to poll>]
>>> p._meta.get_all_related_objects()[0].model
<class 'polls.models.Choice'>
```

----------------------------------------

TITLE: Starting Git Bisect for Regression Debugging
DESCRIPTION: Commands to start the git bisect process for debugging a regression in Django. This marks the current point as 'bad' since the test fails.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/triaging-tickets.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
$ git bisect bad
You need to start by "git bisect start"
Do you want me to do it for you [Y/n]? y
```

----------------------------------------

TITLE: Fixing LoginView's redirect_field_name in Template Context in Python
DESCRIPTION: Fixed the value of redirect_field_name in LoginView's template context. It's now an empty string if the corresponding parameter isn't sent in a request.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_9

LANGUAGE: Python
CODE:
```
LoginView.as_view(template_name='login.html')
```

----------------------------------------

TITLE: Referencing Django File Upload Classes in Python
DESCRIPTION: This snippet demonstrates how to reference Django's FileField and ImageField classes for handling file uploads. It also mentions the ClearableFileInput and FileInput form widgets, which now include additional security measures.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.9.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
:class:`.forms.FileField`
:class:`.forms.ImageField`
:class:`~django.forms.ClearableFileInput`
:class:`~django.forms.FileInput`
```

----------------------------------------

TITLE: Pull Request Merge Workflow Commands
DESCRIPTION: Series of git commands showing the workflow for merging a pull request into Django's main branch, including rebasing, fast-forward merging, and branch cleanup.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/committing-code.txt#2025-04-23_snippet_1

LANGUAGE: console
CODE:
```
$ # Pull in the latest changes from main.
$ git checkout main
$ git pull upstream main
$ # Rebase the pull request on main.
$ git checkout pr/####
$ git rebase main
$ git checkout main
$ # Merge the work as "fast-forward" to main to avoid a merge commit.
$ # (in practice, you can omit "--ff-only" since you just rebased)
$ git merge --ff-only pr/XXXX
$ # If you're not sure if you did things correctly, check that only the
$ # changes you expect will be pushed to upstream.
$ git push --dry-run upstream main
$ # Push!
$ git push upstream main
$ # Delete the pull request branch.
$ git branch -d pr/xxxx
```

----------------------------------------

TITLE: Regular Expression Usage in Django Validators
DESCRIPTION: This snippet shows the problematic use of $ instead of \Z in regular expressions within Django validators, which allowed newline characters and could lead to header injection attacks. The issue affected various validators including EmailValidator.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.21.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
$
```

LANGUAGE: Python
CODE:
```
\Z
```

----------------------------------------

TITLE: Fixing QuerySet Union and Difference Operations in Python
DESCRIPTION: This snippet addresses a bug in Django's QuerySet union() and difference() methods when combining with a queryset that raises EmptyResultSet.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.4.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
QuerySet.union()
QuerySet.difference()
```

----------------------------------------

TITLE: Generating SQL for Indexes on Session Table - Django Management Command - Shell
DESCRIPTION: Demonstrates use of the Django management command to generate SQL for adding indexes to the sessions table. This script is run in the shell and is useful for projects upgrading to Django 1.3 that store sessions in the database and seek improved query performance. Requires an active Django project and manage.py script. The command outputs raw SQL that can be executed on the database to optimize session expiration queries.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
python manage.py sqlindexes sessions
```

----------------------------------------

TITLE: Running JavaScript Tests with Tox
DESCRIPTION: This command runs Django's JavaScript test suite using Tox, which executes npm install to update dependencies and then runs npm test to execute the JavaScript tests.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_5

LANGUAGE: console
CODE:
```
$ tox -e javascript
```

----------------------------------------

TITLE: Removing XMLField in Django Models
DESCRIPTION: django.db.models.fields.XMLField will be removed. Replace all uses of XMLField with TextField.
SOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
# Old field:
django.db.models.fields.XMLField

# Replace with:
django.db.models.fields.TextField
```

----------------------------------------

TITLE: Declaring Django File Handling Module in reStructuredText
DESCRIPTION: This snippet declares the Django file handling module using reStructuredText directives. It specifies the module name and provides a brief synopsis of its functionality.
SOURCE: https://github.com/django/django/blob/main/docs/ref/files/index.txt#2025-04-23_snippet_0

LANGUAGE: reStructuredText
CODE:
```
.. module:: django.core.files
   :synopsis: File handling and storage
```

----------------------------------------

TITLE: Setting Custom CSRF Token in Django Response
DESCRIPTION: This method sets the custom CSRF token in the response cookies. It generates a new token using the custom generator and sets it with appropriate security flags.
SOURCE: https://github.com/django/django/blob/main/tests/forms_tests/tests/filepath_test_files/real-text-file.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
def _set_csrf_token(self, request, response):
    if not request.META.get("CSRF_COOKIE_USED", False):
        return

    token = self._generate_token()
    response.set_cookie(
        settings.CSRF_COOKIE_NAME,
        token,
        max_age=settings.CSRF_COOKIE_AGE,
        domain=settings.CSRF_COOKIE_DOMAIN,
        path=settings.CSRF_COOKIE_PATH,
        secure=settings.CSRF_COOKIE_SECURE,
        httponly=settings.CSRF_COOKIE_HTTPONLY,
        samesite=settings.CSRF_COOKIE_SAMESITE,
    )
```

----------------------------------------

TITLE: Raising SuspiciousOperation Exception in Django
DESCRIPTION: When Host header validation fails in Django 1.3.5, a SuspiciousOperation exception is raised. This is part of the tightened security measures to prevent Host header poisoning attacks.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.5.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
django.core.exceptions.SuspiciousOperation
```

----------------------------------------

TITLE: ModelAdmin List Filter Ordering Fix
DESCRIPTION: Correction to ensure ModelAdmin list_filter choices for foreign objects properly respect the model's Meta.ordering configuration
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.5.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
class MyModelAdmin(ModelAdmin):
    list_filter = ["foreign_key_field"]  # Now respects Meta.ordering of foreign objects
```

----------------------------------------

TITLE: KeyTransform Bug Fix for JSON and HStore Fields
DESCRIPTION: Fix for KeyTransform() functionality when used with JSONField and HStoreField in conjunction with parameterized expressions
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.5.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
KeyTransform("key_name", JSONField())  # Now works correctly with parameterized expressions
```

----------------------------------------

TITLE: Directly Using String Interpolation in ValidationError - Python
DESCRIPTION: Shows a shortcut, less recommended pattern, for raising ValidationError using direct string interpolation. Used at the end of the validation chain (such as in Form.clean()), where error message customization is not required. Requires Django's translation utility (_) and outputs a localized string, but is less reusable and may not work optimally with error serialization.
SOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
ValidationError(_("Invalid value: %s") % value)
```

----------------------------------------

TITLE: Referencing Django ticket for QuerySet.aggregate() crash after annotate()
DESCRIPTION: This snippet references a Django ticket number for a bug that caused a crash of QuerySet.aggregate() after annotate() on an aggregate function with a default in Django 4.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_8

LANGUAGE: plaintext
CODE:
```
:ticket:`33468`
```

----------------------------------------

TITLE: Alternative Syntax for method_decorator with Variable Assignment
DESCRIPTION: Another approach to applying method_decorator to login_required in Django 1.2, using a variable to store the decorated method.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.utils.decorators import method_decorator

login_required_m = method_decorator(login_required)


class MyClass(object):
    @login_required_m
    def my_view(self, request):
        pass
```

----------------------------------------

TITLE: PyPI Release Upload Command
DESCRIPTION: Command to upload Django release packages to PyPI using twine.
SOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_7

LANGUAGE: shell
CODE:
```
twine upload --repository django dist/*
```

----------------------------------------

TITLE: Preventing Paginator's Unordered Object List Warning in Python
DESCRIPTION: Prevented Paginator's unordered object list warning from evaluating a QuerySet.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
Paginator(queryset, per_page=10)
```

----------------------------------------

TITLE: Using extra() Method in Django QuerySets
DESCRIPTION: The extra() method allows developers to supply SQL fragments. Users are advised to perform appropriate manual type conversions before executing queries to prevent MySQL typecasting issues.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.11.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
Model.objects.extra(select={'new_field': "SELECT ... "})
```

----------------------------------------

TITLE: Defining RedirectCycleError Exception in Django Tests (Python)
DESCRIPTION: Defines the `RedirectCycleError` exception class, part of the `django.test.client` module. This exception is raised by the Django test client when it detects a redirection loop or a chain of redirects that exceeds a predefined limit during test execution.
SOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
.. exception:: client.RedirectCycleError
```

----------------------------------------

TITLE: System Check Configuration for Database Tables in Django Models
DESCRIPTION: Modification allowing multiple models to use the same db_table name when database routers are configured. This relaxes a system check that was added in Django 2.2.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.5.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
db_table = "shared_table"  # Now allowed for multiple models when using database routers
```

----------------------------------------

TITLE: Deprecation of GeoQuerySet Aggregate Methods in Django - reStructuredText
DESCRIPTION: Lists the deprecated GeoQuerySet aggregate methods, including collect(), extent(), extent3d(), make_line(), and unionagg(), and suggests their function-based aggregate replacements. These are legacy ORM features for GIS aggregations and should be refactored in existing code.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_15

LANGUAGE: reStructuredText
CODE:
```
``GeoQuerySet`` aggregate methods
---------------------------------

The ``collect()``, ``extent()``, ``extent3d()``, ``make_line()``, and
``unionagg()`` aggregate methods are deprecated and should be replaced by their
function-based aggregate equivalents (``Collect``, ``Extent``, ``Extent3D``,
``MakeLine``, and ``Union``).
```

----------------------------------------

TITLE: Referencing Django Setting in Release Notes
DESCRIPTION: This snippet demonstrates how to reference a Django setting (CACHES-OPTIONS) in the release notes documentation using reStructuredText syntax.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.5.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
:setting:`OPTIONS <CACHES-OPTIONS>`
```

----------------------------------------

TITLE: Importing URL Resolver Exceptions
DESCRIPTION: Demonstrates how to import URL resolver exceptions from the django.urls module.
SOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
from django.urls import Resolver404, NoReverseMatch
```

----------------------------------------

TITLE: Adding Release Notes for Django Feature in reStructuredText
DESCRIPTION: This snippet updates the release notes for Django 2.2 to include information about the new 'make_toast()' function in the shortcuts module.
SOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_3

LANGUAGE: reStructuredText
CODE:
```
:mod:`django.shortcuts`
~~~~~~~~~~~~~~~~~~~~~~~

* The new :func:`django.shortcuts.make_toast` function returns ``'toast'``.
```

----------------------------------------

TITLE: Documenting New Django Feature in reStructuredText
DESCRIPTION: This snippet adds documentation for the new 'make_toast()' function in Django's shortcuts module. It includes a function description and version information.
SOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_2

LANGUAGE: reStructuredText
CODE:
```
``make_toast()``
================

.. function:: make_toast()

.. versionadded:: 2.2

Returns ``'toast'``.
```

----------------------------------------

TITLE: Referencing Django ORM Window Function (RST)
DESCRIPTION: This snippet references the `Window()` function/class from Django's ORM. It's mentioned in the context of fixing a regression in Django 5.1 that caused a crash when an empty sequence was passed to the `order_by` parameter.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_4

LANGUAGE: restructuredtext
CODE:
```
``Window()``
```

----------------------------------------

TITLE: Referencing GEOS Version Function in Python
DESCRIPTION: Reference to the GEOS version tuple function that was being called repetitively, causing potential random crashes with LooseVersion.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.10.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
geos_version_tuple()
```

----------------------------------------

TITLE: Using the date template filter with user input vulnerability example
DESCRIPTION: Example of the security vulnerability in the date template filter when using unvalidated user input as a format string, allowing potential settings leakage.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.7.txt#2025-04-23_snippet_0

LANGUAGE: django
CODE:
```
{{ last_updated|date:user_date_format }}
```

----------------------------------------

TITLE: Running Link Check on Django Documentation
DESCRIPTION: Command to verify that all links in the documentation are working properly. This helps identify broken links or links that need to be updated to canonical locations.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-documentation.txt#2025-04-23_snippet_4

LANGUAGE: console
CODE:
```
$ make linkcheck
```

----------------------------------------

TITLE: Fixing cache.get_or_set() behavior for None values in Django
DESCRIPTION: Prevents cache.get_or_set() from caching None if the default argument is a callable that returns None. This fix addresses the issue reported in ticket #28601.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.7.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
cache.get_or_set()
```

----------------------------------------

TITLE: Identifying PostgreSQL Indexes with Unnecessary Text Casting in Django 4.2
DESCRIPTION: This SQL query is used to find PostgreSQL indexes that might have been created with unnecessary `::text` casting due to a regression in Django versions 4.2 to 4.2.5 when using the `__isnull` lookup on string-based fields. These indexes may need to be recreated to resolve potential performance issues. The query searches the `pg_indexes` system catalog for index definitions containing the pattern `'%::text IS %NULL'`. No specific dependencies beyond standard PostgreSQL access.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.6.txt#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
      SELECT indexname, indexdef
      FROM pg_indexes
      WHERE indexdef LIKE '%::text IS %NULL';
```

----------------------------------------

TITLE: Referencing method_decorator Utility in Python (Sphinx Syntax)
DESCRIPTION: Reference using Sphinx syntax to the Django `method_decorator` utility function from `django.utils.decorators`. This utility is necessary for applying function decorators (like `sensitive_post_parameters`) to methods of classes, which was missing in the previous implementation for admin views.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.4.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
:func:`~django.utils.decorators.method_decorator`
```

----------------------------------------

TITLE: Django Get or Create Query Defaults Validation
DESCRIPTION: Modified validation of fields in the defaults argument for QuerySet get_or_create() and update_or_create() methods to allow settable model properties.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.2.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
QuerySet.get_or_create()
QuerySet.update_or_create()
```

----------------------------------------

TITLE: Updating Django Test Client Login Method in Python
DESCRIPTION: Code example showing how to migrate from Django 0.96's Client.login() method to Django 1.0's newer approach. The old method required a login path with username and password, while the new method directly accepts username and password parameters.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_18

LANGUAGE: python
CODE:
```
from django.test import Client

c = Client()
c.login("/path/to/login", "myuser", "mypassword")
```

LANGUAGE: python
CODE:
```
# ... same as above, but then:
c.login(username="myuser", password="mypassword")
```

----------------------------------------

TITLE: Specifying 'SCRIPT_NAME' Setting and Example URL in Django - Markdown
DESCRIPTION: This snippet includes 'SCRIPT_NAME' (a WSGI/server-provided environment variable) and its use in constructing URLs in Django settings, as well as an example URL ('http://myhost/'). It demonstrates contextual configuration rather than functional code, with the purpose of documenting bugfix behavior. These entries are used to help developers understand the scope of the fixed regression in static/media file serving.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.5.txt#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
SCRIPT_NAME
```

LANGUAGE: plaintext
CODE:
```
http://myhost/
```

----------------------------------------

TITLE: Updating Django Source Code with Git
DESCRIPTION: Command to pull the latest changes from the Django Git repository to update the local codebase
SOURCE: https://github.com/django/django/blob/main/docs/topics/install.txt#2025-04-23_snippet_4

LANGUAGE: bash
CODE:
```
git pull
```

----------------------------------------

TITLE: Rebasing on upstream changes
DESCRIPTION: Updates the local branch with changes from the upstream Django repository, placing local commits on top of the latest upstream commits.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_8

LANGUAGE: shell
CODE:
```
git fetch upstream
git rebase upstream/main
```

----------------------------------------

TITLE: Django Deprecation Warning Example
DESCRIPTION: Example of a Django deprecation warning class used when features are marked for removal in future versions.
SOURCE: https://github.com/django/django/blob/main/docs/internals/release-process.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
RemovedInDjango51Warning
```

----------------------------------------

TITLE: Configuring Django 1.2+ Database Settings (Python)
DESCRIPTION: This snippet demonstrates the new method (introduced in Django 1.2) for defining database connections using a nested dictionary named `DATABASES` in `settings.py`. Each key in the outer dictionary represents a database alias ('default' being the standard), and the inner dictionary contains the connection parameters with shortened keys (e.g., `NAME`, `ENGINE`, `USER`). The `ENGINE` setting now requires a fully qualified path.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
DATABASES = {
    "default": {
        "NAME": "test_db",
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "USER": "myusername",
        "PASSWORD": "s3krit",
    }
}
```

----------------------------------------

TITLE: Updating Signal Handling in Django 1.0
DESCRIPTION: Code changes required to update signal handling from Django 0.96 to 1.0, including modifying callback signatures and using the new Signal class methods.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_15

LANGUAGE: python
CODE:
```
def callback(sender)

sig = object()
dispatcher.connect(callback, sig)
dispatcher.send(sig, sender)
dispatcher.connect(callback, sig, sender=Any)
```

LANGUAGE: python
CODE:
```
def callback(sender, **kwargs)

sig = django.dispatch.Signal()
sig.connect(callback)
sig.send(sender)
sig.connect(callback, sender=None)
```

----------------------------------------

TITLE: Using distance_gt Filter in GeoDjango
DESCRIPTION: Example of using the distance_gt lookup to filter Zipcode objects where the distance from a geometry field to the lookup geometry is greater than the specified distance (5 meters).
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
Zipcode.objects.filter(poly__distance_gt=(geom, D(m=5)))
```

----------------------------------------

TITLE: Using urlize() Function Reference
DESCRIPTION: Reference to django.utils.html.urlize() function that was vulnerable to DoS attacks due to regex backtracking issues. The function is used by urlize and urlizetrunc template filters.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.11.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.utils.html.urlize()
```

----------------------------------------

TITLE: Defining Admin Fields Layout in Django 0.96 (ModelOne - Python)
DESCRIPTION: This snippet shows the old (Django 0.96) `fields` syntax within an inner `Admin` class for a simple, non-grouped field layout. The syntax involves nested tuples and dictionaries, which was considered confusing and has been simplified in Django 1.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
class ModelOne(models.Model):
    ...

    class Admin:
        fields = ((None, {"fields": ("foo", "bar")}),)
```

----------------------------------------

TITLE: Fixing Serialization of PostgreSQL Fields with None Values in Django
DESCRIPTION: Details a bugfix (:ticket:`26215`) in Django 1.8.10 that corrected serialization issues for `RangeField` and `ArrayField` (from `django.contrib.postgres.fields`) when they contained `None` values.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_8

LANGUAGE: Python
CODE:
```
django.contrib.postgres.fields.RangeField
```

LANGUAGE: Python
CODE:
```
django.contrib.postgres.fields.ArrayField
```

----------------------------------------

TITLE: Example MySQL Option File Configuration - INI
DESCRIPTION: This INI configuration snippet provides an example of the content of a MySQL option file (my.cnf) used by the read_default_file setting in Django. It shows typical [client] section parameters like database, user, password, and default-character-set for connecting to the database.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_7

LANGUAGE: INI
CODE:
```
# my.cnf
[client]
database = NAME
user = USER
password = PASSWORD
default-character-set = utf8mb4
```

----------------------------------------

TITLE: Using URLValidator in Python 3.9.5+
DESCRIPTION: Security vulnerability note regarding URLValidator behavior with newlines and tabs in Python 3.9.5+. The validator previously didn't prohibit newlines and tabs, potentially allowing header injection attacks when used outside of form fields.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.10.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
from django.core.validators import URLValidator
from django.http import HttpResponse
from django.forms import URLField
```

----------------------------------------

TITLE: Referencing Django Auth Form Class (RST)
DESCRIPTION: This snippet uses the ReStructuredText `:class:` role to reference the `django.contrib.auth.forms.PasswordResetForm` class. It's mentioned in relation to a security vulnerability allowing potential user email enumeration.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_2

LANGUAGE: restructuredtext
CODE:
```
:class:`~django.contrib.auth.forms.PasswordResetForm`
```

----------------------------------------

TITLE: Using Field Lookups in Meta.ordering
DESCRIPTION: Restored functionality to use field lookups in Meta.ordering that was regressed in Django 3.0
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.7.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
Meta.ordering
```

----------------------------------------

TITLE: Correcting HTML for Required AdminFileWidget in HTML
DESCRIPTION: Fixed invalid HTML for a required AdminFileWidget.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_4

LANGUAGE: HTML
CODE:
```
<input type="file" required>
```

----------------------------------------

TITLE: Widget Empty Choice Selection Fix
DESCRIPTION: Bug fix addressing incorrect initial empty choice selection behavior in SelectMultiple and CheckboxSelectMultiple widgets. Resolved regression introduced in Django 1.11.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.12.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
SelectMultiple
CheckboxSelectMultiple
```

----------------------------------------

TITLE: Fixing QuerySet Count for Union, Difference, and Intersection Queries in Python
DESCRIPTION: This bugfix addresses issues with the QuerySet.count() method when used with union(), difference(), and intersection() queries.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.4.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
QuerySet.count()
QuerySet.union()
QuerySet.difference()
QuerySet.intersection()
```

----------------------------------------

TITLE: Demonstrating Vulnerable Host Header in Django 1.4.1
DESCRIPTION: This snippet shows an example of a vulnerable Host header that could be exploited in Django versions 1.3.3 and 1.4.1. The header contains malicious username/password information that could lead to security issues.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.2.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
Host: validsite.com:random@evilsite.com
```

----------------------------------------

TITLE: Django Migration Consistency Check Function
DESCRIPTION: Fix for allow_migrate() function call in makemigrations command to use correct app_label and model_name arguments during migration consistency checks.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.4.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
allow_migrate()
```

----------------------------------------

TITLE: Defining LoginForm with PasswordInput widget - Django Forms - Python
DESCRIPTION: Defines a custom LoginForm using Django's forms.Form with a password field rendered using the PasswordInput widget. The render_value parameter is explicitly set to True, replicating pre-1.3 behavior where the password value is sent back to the browser when a form is rendered with errors. Depends on django.forms being available. Key parameters include max_length for username (100), and render_value for PasswordInput which, if True, can expose password values in the form, potentially reducing security.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
class LoginForm(forms.Form):
    username = forms.CharField(max_length=100)
    password = forms.CharField(widget=forms.PasswordInput(render_value=True))
```

----------------------------------------

TITLE: Building Django Documentation Locally with Sphinx
DESCRIPTION: Commands to generate HTML output from the documentation source files located in the docs directory using the make tool provided by Sphinx.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-documentation.txt#2025-04-23_snippet_2

LANGUAGE: console
CODE:
```
$ cd docs
$ make html
```

----------------------------------------

TITLE: Defining Django Template Origin Class
DESCRIPTION: Class definition for Origin which contains metadata about template sources including name, template_name, and loader attributes. Used to track template source information and manage template loading in Django.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_23

LANGUAGE: python
CODE:
```
class Origin(name, template_name=None, loader=None):\n    name  # The path to the template as returned by the template loader\n    template_name  # The relative path to the template\n    loader  # The template loader instance
```

----------------------------------------

TITLE: Generating Pagination Links with Legacy Template Constructs - Django Templates
DESCRIPTION: This snippet demonstrates how to construct a paginated navigation URL in pre-Django 5.1 using for-loops and conditional logic in Django’s template language. It manually iterates over query parameters to reconstruct the query string, excluding 'page', and appends the next page number. The required dependency is Django's template language prior to the introduction of 'querystring'. Inputs are the request GET dict and the next page number; output is a URL suitable for use in an anchor tag. Limitations include verbosity, possible errors if the structure of request.GET changes, and lack of reusability.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.txt#2025-04-23_snippet_0

LANGUAGE: html+django
CODE:
```
{# Linebreaks added for readability, this should be one, long line. #}\n<a href="?{% for key, values in request.GET.iterlists %}\n  {% if key != \"page\" %}\n    {% for value in values %}\n      {{ key }}={{ value }}&amp;\n    {% endfor %}\n  {% endif %}\n{% endfor %}page={{ page.next_page_number }}">Next page</a>
```

----------------------------------------

TITLE: Restructured Text Documentation Format
DESCRIPTION: Documentation formatting using reStructuredText markup for Django's contribution guidelines. Includes sections on submitting changes, claiming tickets, contribution style, and deprecation procedures.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/submitting-patches.txt#2025-04-23_snippet_0

LANGUAGE: restructuredtext
CODE:
```
========================
Submitting contributions
========================

We're always grateful for contributions to Django's code. Indeed, bug reports
with associated contributions will get fixed *far* more quickly than those
without a solution.
```

----------------------------------------

TITLE: Updating Django Admin Command Syntax in Bash
DESCRIPTION: Command-line examples showing the syntax change for django-admin.py in Django 1.0, where subcommands must now precede options rather than follow them.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_20

LANGUAGE: bash
CODE:
```
$ django-admin.py --settings=foo.bar runserver
```

LANGUAGE: bash
CODE:
```
$ django-admin.py runserver --settings=foo.bar
```

----------------------------------------

TITLE: Legacy 404 Ignore Settings
DESCRIPTION: Example of default legacy settings for ignoring certain 404 errors in Django pre-1.4
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
IGNORABLE_404_STARTS = ("/cgi-bin/", "/_vti_bin", "/_vti_inf")
IGNORABLE_404_ENDS = (
    "mail.pl",
    "mailform.pl",
    "mail.cgi",
    "mailform.cgi",
    "favicon.ico",
    ".php",
)
```

----------------------------------------

TITLE: Fixed Database Field Subtraction Operations
DESCRIPTION: Bug fix for database operations involving subtraction of DurationField or IntegerField from DateField on Oracle and PostgreSQL databases.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.6.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
DurationField
IntegerField
DateField
```

----------------------------------------

TITLE: Using assertFormsetError() Method in Django Tests
DESCRIPTION: The assertFormsetError() method is used in Django tests to assert formset errors. A regression in Django 4.0 that caused a crash when used with a formset named 'form' has been fixed.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
assertFormsetError()
```

----------------------------------------

TITLE: Django QuerySet DateTime Update with F Expression
DESCRIPTION: Fix for QuerySet.update() operation on SQLite when updating DateTimeField using F() expression combined with timedelta.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.4.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
QuerySet.update()
```

----------------------------------------

TITLE: Installing SQLite from Source with R*Tree Support
DESCRIPTION: This shell script downloads the SQLite amalgamation source, extracts it, and compiles SQLite with R*Tree support enabled.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/spatialite.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
$ wget https://www.sqlite.org/YYYY/sqlite-amalgamation-XXX0000.zip
$ unzip sqlite-amalgamation-XXX0000.zip
$ cd sqlite-amalgamation-XXX0000

$ CFLAGS="-DSQLITE_ENABLE_RTREE=1" ./configure
$ make
$ sudo make install
$ cd ..
```

----------------------------------------

TITLE: Referencing Django Auth Logout View in Python
DESCRIPTION: This snippet demonstrates how to reference the Django authentication logout view. It highlights the potential security issue addressed in this release.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.22.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
django.contrib.auth.views.logout()
```

----------------------------------------

TITLE: Django Validator and Form Field References
DESCRIPTION: This code snippet lists the affected Django validators and form fields that were vulnerable to newline injection. These include validate_ipv4_address, validate_slug, URLValidator, and their corresponding form fields.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.21.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
django.core.validators.validate_ipv4_address
```

LANGUAGE: Python
CODE:
```
django.core.validators.validate_slug
```

LANGUAGE: Python
CODE:
```
django.core.validators.URLValidator
```

LANGUAGE: Python
CODE:
```
GenericIPAddresseField
```

LANGUAGE: Python
CODE:
```
IPAddressField
```

LANGUAGE: Python
CODE:
```
SlugField
```

LANGUAGE: Python
CODE:
```
URLField
```

----------------------------------------

TITLE: Installing GeoDjango Dependencies with MacPorts
DESCRIPTION: Installs required PostgreSQL, GEOS, PROJ, PostGIS, GDAL, and libgeoip packages using MacPorts package manager.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_8

LANGUAGE: shell
CODE:
```
$ sudo port install postgresql14-server
$ sudo port install geos
$ sudo port install proj6
$ sudo port install postgis3
$ sudo port install gdal
$ sudo port install libgeoip
```

----------------------------------------

TITLE: Custom MySQL Search Lookup Implementation
DESCRIPTION: Implementation of a custom search lookup to replace the deprecated __search query lookup for MySQL.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
from django.db import models


class Search(models.Lookup):
    lookup_name = "search"

    def as_mysql(self, compiler, connection):
        lhs, lhs_params = self.process_lhs(compiler, connection)
        rhs, rhs_params = self.process_rhs(compiler, connection)
        params = lhs_params + rhs_params
        return "MATCH (%s) AGAINST (%s IN BOOLEAN MODE)" % (lhs, rhs), params


models.CharField.register_lookup(Search)
models.TextField.register_lookup(Search)
```

----------------------------------------

TITLE: Marking a Good Commit in Git Bisect
DESCRIPTION: Command to mark a commit as 'good' in the git bisect process, indicating a point before the regression was introduced.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/triaging-tickets.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
$ git bisect good
Bisecting: X revisions left to test after this (roughly Y steps)
...
```

----------------------------------------

TITLE: Updating Django ORM Queries with Backslash Escaping
DESCRIPTION: Demonstrates the change in how backslashes in query parameters are handled by the Django database API in version 0.96. The first snippet shows the pre-0.96 method (now incorrect) requiring double backslashes to match a single literal backslash. The second snippet shows the correct 0.96 method, where a single backslash parameter correctly matches a single literal backslash in the database, as the API now handles escaping.
SOURCE: https://github.com/django/django/blob/main/docs/releases/0.96.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
# Find text containing a single backslash
MyModel.objects.filter(text__contains="\\\\")
```

LANGUAGE: python
CODE:
```
# Find text containing a single backslash
MyModel.objects.filter(text__contains="\\")
```

----------------------------------------

TITLE: Testing ReportLab Installation in Python
DESCRIPTION: Example of how to test ReportLab installation by importing it in the Python interactive interpreter.
SOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-pdf.txt#2025-04-23_snippet_1

LANGUAGE: pycon
CODE:
```
>>> import reportlab
```

----------------------------------------

TITLE: Fixing Memory Exhaustion in Django's floatformat() Function
DESCRIPTION: Addresses CVE-2024-41989 by limiting the number of digits processed in scientific notation to 200, preventing memory exhaustion attacks.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.15.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.utils.numberformat.floatformat()
```

----------------------------------------

TITLE: Using 'STATIC_URL' and 'MEDIA_URL' in Django Settings - Markdown
DESCRIPTION: These snippets represent the use of 'STATIC_URL' and 'MEDIA_URL' configuration settings in a Django project. They are not code, but references to Django settings involved in static and media file URL prefixing. These references explain which settings were previously affected by a regression and how the bugfix restores proper URL construction.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.5.txt#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
STATIC_URL
```

LANGUAGE: plaintext
CODE:
```
MEDIA_URL
```

----------------------------------------

TITLE: Backport Commit Message Pattern
DESCRIPTION: Standard format for writing commit messages when backporting changes to older Django versions, including the version number, ticket reference, and original commit information.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/committing-code.txt#2025-04-23_snippet_3

LANGUAGE: none
CODE:
```
[<Django version>] Fixed <ticket> -- <description>

Backport of <revision> from <branch>.
```

LANGUAGE: none
CODE:
```
[1.3.x] Fixed #17028 -- Changed diveintopython.org -> diveintopython.net.

Backport of 80c0cbf1c97047daed2c5b41b296bbc56fe1d7e3 from main.
```

LANGUAGE: none
CODE:
```
Regression in 6ecccad711b52f9273b1acb07a57d3f806e93928.
```

----------------------------------------

TITLE: Updating Django-Admin Manual Page
DESCRIPTION: Commands for updating and validating the django-admin manual page documentation
SOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
$ cd docs
$ make man
$ man _build/man/django-admin.1  # do a quick sanity check
$ cp _build/man/django-admin.1 man/django-admin.1
```

----------------------------------------

TITLE: Potential SQL Injection via Unsanitized QuerySet.order_by() Input
DESCRIPTION: A security vulnerability (CVE-2021-35042) where unsanitized user input to QuerySet.order_by() could lead to SQL injection. This issue affected the deprecated path for column reference validation.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.5.txt#2025-04-23_snippet_0

LANGUAGE: SQL
CODE:
```
QuerySet.order_by()
```

----------------------------------------

TITLE: Running ldconfig After Library Installation
DESCRIPTION: Command to run ldconfig after installing each library on Linux platforms to update the shared library cache.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
$ sudo make install
$ sudo ldconfig
```

----------------------------------------

TITLE: Executing Django Project Creation Command in Python
DESCRIPTION: This command is used to start a new Django project. It generates a project template with a settings.py file, which had a documentation link issue that was fixed in this release.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.7.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
manage.py startproject
```

----------------------------------------

TITLE: Deprecation of SessionAuthenticationMiddleware and Update to AuthenticationMiddleware usage - reStructuredText
DESCRIPTION: This snippet describes the changes to session authentication middleware in Django. The SessionAuthenticationMiddleware was added in 1.7 and its logic moved to 'auth.get_user()', with session verification being unconditionally enabled in Django 1.10, making the middleware obsolete. Developers are advised to review middleware configuration and upgrade guides.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_9

LANGUAGE: reStructuredText
CODE:
```
Using ``AuthenticationMiddleware`` without ``SessionAuthenticationMiddleware``
------------------------------------------------------------------------------

``django.contrib.auth.middleware.SessionAuthenticationMiddleware`` was
added in Django 1.7. In Django 1.7.2, its functionality was moved to
``auth.get_user()`` and, for backwards compatibility, enabled only if
``'django.contrib.auth.middleware.SessionAuthenticationMiddleware'`` appears in
``MIDDLEWARE_CLASSES``.

In Django 1.10, session verification will be enabled regardless of whether or not
``SessionAuthenticationMiddleware`` is enabled (at which point
``SessionAuthenticationMiddleware`` will have no significance). You can add it
to your ``MIDDLEWARE_CLASSES`` sometime before then to opt-in. Please read the
:ref:`upgrade considerations <session-invalidation-on-password-change>` first.
```

----------------------------------------

TITLE: Downloading and Extracting GDAL Source
DESCRIPTION: Commands to download and extract the GDAL source code archive.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_7

LANGUAGE: shell
CODE:
```
$ wget https://download.osgeo.org/gdal/X.Y.Z/gdal-X.Y.Z.tar.gz
$ tar xzf gdal-X.Y.Z.tar.gz
```

----------------------------------------

TITLE: Identifying Potential SQL Injection in Django Database Functions
DESCRIPTION: Describes a security vulnerability (CVE-2022-34265) in Django 4.0.5 where Trunc() and Extract() database functions were susceptible to SQL injection if untrusted data was used as kind/lookup_name value.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.6.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
Trunc(kind)
```

LANGUAGE: python
CODE:
```
Extract(lookup_name)
```

----------------------------------------

TITLE: RST Table of Contents Configuration
DESCRIPTION: ReStructuredText directive configuring a table of contents with maximum depth of 2 levels, including links to API stability, design philosophies and distributions documentation.
SOURCE: https://github.com/django/django/blob/main/docs/misc/index.txt#2025-04-23_snippet_0

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 2

   api-stability
   design-philosophies
   distributions
```

----------------------------------------

TITLE: Building and Installing PROJ
DESCRIPTION: Commands to build and install PROJ from source using CMake.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_6

LANGUAGE: shell
CODE:
```
$ cd proj-X.Y.Z
$ mkdir build
$ cd build
$ cmake ..
$ cmake --build .
$ sudo cmake --build . --target install
```

----------------------------------------

TITLE: Referencing LooseVersion in Python
DESCRIPTION: Reference to the LooseVersion class involved in random crashes with GEOS version handling since Django 2.0.6.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.10.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
LooseVersion
```

----------------------------------------

TITLE: Environment Variable Configuration for Django Async Safety
DESCRIPTION: Configuration option to disable the async-safety mechanism in Django 3.0.1 using the DJANGO_ALLOW_ASYNC_UNSAFE environment variable. This fix restores Django functionality in Jupyter and other async environments.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.1.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
DJANGO_ALLOW_ASYNC_UNSAFE
```

----------------------------------------

TITLE: Searching Django Documentation with grep (Unix)
DESCRIPTION: Demonstrates how to use the Unix grep utility to search for specific phrases in Django's documentation files.
SOURCE: https://github.com/django/django/blob/main/docs/intro/whatsnext.txt#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ grep -r max_length /path/to/django/docs/
```

----------------------------------------

TITLE: Configuring Django Documentation Index Links in RST
DESCRIPTION: Defines index links for the documentation using reStructuredText reference and document directives to point to the general index, module index and glossary.
SOURCE: https://github.com/django/django/blob/main/docs/contents.txt#2025-04-23_snippet_1

LANGUAGE: rst
CODE:
```
* :ref:`genindex`
* :ref:`modindex`
* :doc:`glossary`
```

----------------------------------------

TITLE: Generating HTML Documentation with Batch File (Windows)
DESCRIPTION: Shows how to use the included batch file to generate HTML documentation from Django's source files on Windows systems.
SOURCE: https://github.com/django/django/blob/main/docs/intro/whatsnext.txt#2025-04-23_snippet_3

LANGUAGE: batch
CODE:
```
cd path\to\django\docs
make.bat html
```

----------------------------------------

TITLE: Setting Up Virtual Environment and Installing Documentation Dependencies
DESCRIPTION: Instructions for creating a virtual environment, activating it, and installing the required dependencies for building Django's documentation locally.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-documentation.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
$ python -m venv .venv
$ source .venv/bin/activate
$ python -m pip install -r docs/requirements.txt
```

----------------------------------------

TITLE: Integrating Pull Requests with Git in Shell
DESCRIPTION: This snippet demonstrates how to create a new branch and apply changes from a pull request to a local Django repository. It uses git commands to checkout a new branch and curl to fetch and apply the patch.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_9

LANGUAGE: shell
CODE:
```
git checkout -b pull_xxxxx upstream/main
curl -L https://github.com/django/django/pull/xxxxx.patch | git am
```

----------------------------------------

TITLE: Using Subquery() aliases in GROUP BY clause
DESCRIPTION: Documentation of a bugfix that corrects the handling of Subquery() aliases within GROUP BY clauses, which was a regression introduced in Django 3.0.7.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.11.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
Subquery()
```

----------------------------------------

TITLE: Using FilePathField in Django Models
DESCRIPTION: FilePathField is one of the model field classes that has been updated to convert arguments to the correct types before querying, addressing MySQL typecasting issues.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.11.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
from django.db.models import FilePathField
```

----------------------------------------

TITLE: Django Release Candidate Format
DESCRIPTION: Shows the format for alpha, beta, and release candidate versions of Django releases.
SOURCE: https://github.com/django/django/blob/main/docs/internals/release-process.txt#2025-04-23_snippet_1

LANGUAGE: rst
CODE:
```
``A.B alpha/beta/rc N``
```

----------------------------------------

TITLE: Vulnerable Number Formatting Function Reference in Django
DESCRIPTION: Reference to the django.utils.numberformat.format() function that was vulnerable to memory exhaustion when handling Decimal numbers with large digits or exponents. Used in admin interface and template filters like floatformat, filesizeformat, and intcomma.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.19.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
django.utils.numberformat.format()
```

LANGUAGE: Python
CODE:
```
'{:f}'.format()
```

----------------------------------------

TITLE: HStoreField isnull Lookup
DESCRIPTION: Reference to the isnull lookup for HStoreField that was fixed in Django 1.8.2.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
isnull
```

----------------------------------------

TITLE: Creating a Hyperlink in reStructuredText
DESCRIPTION: This snippet demonstrates how to create a hyperlink in reStructuredText, using a reference-style link with a separate URL definition.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.7.txt#2025-04-23_snippet_2

LANGUAGE: reStructuredText
CODE:
```
.. _release advisory: https://www.djangoproject.com/weblog/2011/sep/10/127/
```

----------------------------------------

TITLE: Using HttpResponse class reference in Django
DESCRIPTION: Reference to Django's HttpResponse class which provides protection against header injection by prohibiting newlines in HTTP headers.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.22.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.http.HttpResponse
```

----------------------------------------

TITLE: Addressing Memory Exhaustion in django.utils.numberformat.format() (Python)
DESCRIPTION: Addresses CVE-2019-6975 where `django.utils.numberformat.format()` could cause significant memory usage when formatting `Decimal` instances with many digits or large exponents via `'{:f}'.format()`. The fix involves formatting decimals with over 200 digits using scientific notation. This function is used internally by `contrib.admin` and the `floatformat`, `filesizeformat`, and `intcomma` template filters.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.1.6.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.utils.numberformat.format()
```

LANGUAGE: python
CODE:
```
contrib.admin
```

LANGUAGE: django
CODE:
```
floatformat
```

LANGUAGE: django
CODE:
```
filesizeformat
```

LANGUAGE: django
CODE:
```
intcomma
```

LANGUAGE: python
CODE:
```
'{:f}'.format()
```

----------------------------------------

TITLE: Reference to Django SplitArrayField Bug Fix
DESCRIPTION: Code reference showing the affected component ArrayField(BooleanField()) in SplitArrayField where data loss was occurring after the first True value.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.9.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
ArrayField(BooleanField())
```

----------------------------------------

TITLE: QuerySet Operations in Django
DESCRIPTION: Demonstration of QuerySet operations that were fixed in this release, involving values(), values_list(), union(), difference(), and intersection() methods with annotated and unannotated querysets.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.13.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
QuerySet.values()
QuerySet.values_list()
union()
difference()
intersection()
```

----------------------------------------

TITLE: Configuring BrinIndex in Django Models
DESCRIPTION: Demonstrates the usage of pages_per_range parameter in BrinIndex, which is now properly handled in the deconstruct() method when set to None.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.5.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
BrinIndex.deconstruct()
```

----------------------------------------

TITLE: Defining a Model in Django 0.96 (Python)
DESCRIPTION: This snippet shows an example `Author` model definition in Django 0.96. It uses `maxlength` for CharField, includes `prepopulate_from` for the slug field, defines an inner `Admin` class for admin configuration, and uses the `__str__` method for string representation. This structure is deprecated in Django 1.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class Author(models.Model):
    first_name = models.CharField(maxlength=30)
    last_name = models.CharField(maxlength=30)
    slug = models.CharField(maxlength=60, prepopulate_from=("first_name", "last_name"))

    class Admin:
        list_display = ["first_name", "last_name"]

    def __str__(self):
        return "%s %s" % (self.first_name, self.last_name)
```

----------------------------------------

TITLE: Limiting Input Length in get_supported_language_variant() (Python)
DESCRIPTION: The get_supported_language_variant() function was vulnerable to DoS attacks with long strings containing specific characters. It now limits input to 500 characters and raises ValueError for longer inputs depending on the 'strict' parameter.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.14.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
django.utils.translation.get_supported_language_variant()
```

----------------------------------------

TITLE: Example Output: Sorted List of Dictionaries after Dictsort - Python
DESCRIPTION: Shows the expected output after applying the 'dictsort' filter by 'name'. The list of dictionaries is sorted alphabetically by the 'name' field. No dependencies except Python.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_59

LANGUAGE: python
CODE:
```
[
    {"name": "amy", "age": 22},
    {"name": "joe", "age": 31},
    {"name": "zed", "age": 19},
]
```

----------------------------------------

TITLE: Installing Sphinx Documentation Generator with pip
DESCRIPTION: Shows how to install Sphinx, the documentation generator used by Django, using pip.
SOURCE: https://github.com/django/django/blob/main/docs/intro/whatsnext.txt#2025-04-23_snippet_1

LANGUAGE: bash
CODE:
```
$ python -m pip install Sphinx
```

----------------------------------------

TITLE: Enabling Pickling for `utils.translation.lazy_number()` in Django
DESCRIPTION: References a bugfix (:ticket:`26212`) in Django 1.8.10 ensuring that objects produced by `utils.translation.lazy_number()` are picklable. This allows lazy numerical values used in translations to be serialized.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_7

LANGUAGE: Python
CODE:
```
utils.translation.lazy_number()
```

----------------------------------------

TITLE: Django Validator Class References
DESCRIPTION: Code references to Django validator classes affected by CVE-2021-33571 vulnerability related to IPv4 address validation.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.24.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.core.validators.URLValidator
django.core.validators.validate_ipv4_address
django.core.validators.validate_ipv46_address
```

----------------------------------------

TITLE: Django HTTP Request Scheme Detection Properties
DESCRIPTION: References to Django HTTP request properties and methods affected by the CVE-2019-12781 security fix, including scheme detection, security verification, and URL building behind reverse-proxies.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.3.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.http.HttpRequest.scheme
HttpRequest.is_secure()
HttpRequest.build_absolute_uri()
SECURE_SSL_REDIRECT
SECURE_PROXY_SSL_HEADER
```

----------------------------------------

TITLE: Migrating Existing UUID Field Models on MariaDB 10.7+
DESCRIPTION: Example showing how to update model definitions to use the compatible Char32UUIDField for existing models with UUIDField on MariaDB 10.7+, maintaining backwards compatibility with previous Django versions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
class Char32UUIDField(models.UUIDField): ...


class MyModel(models.Model):
    uuid = Char32UUIDField(primary_key=True, default=uuid.uuid4)
```

----------------------------------------

TITLE: Referencing Django GenericIPAddressField in Python
DESCRIPTION: This snippet demonstrates how to reference the GenericIPAddressField class from Django's forms module. It is mentioned in the context of the security fix, where the field now defines a max_length of 39 characters to prevent potential denial-of-service attacks.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.18.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.forms.GenericIPAddressField
```

----------------------------------------

TITLE: Referencing Django is_safe_url() security check function
DESCRIPTION: A code reference to the Django utility function that had a security flaw allowing some numeric URLs to be incorrectly considered safe for redirects.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.18.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.utils.http.is_safe_url()
```

----------------------------------------

TITLE: Referencing NFKC Normalization Function in Python
DESCRIPTION: This snippet references the NFKC normalization function from Python's unicodedata module, which is relevant to the security vulnerability discussed in the release notes.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.23.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
unicodedata.normalize
```

----------------------------------------

TITLE: Referencing Django Cache DB SessionStore Flush Method in Python
DESCRIPTION: This snippet refers to the flush() method of Django's cache_db SessionStore, which has also been modified to prevent the creation of new empty sessions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.22.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
cache_db.SessionStore.flush()
```

----------------------------------------

TITLE: Django Authentication Login View Reference
DESCRIPTION: Reference to Django's authentication login view function that was affected by the CVE-2017-7233 security vulnerability.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.7.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.contrib.auth.views.login()
```

----------------------------------------

TITLE: Implementing `harden_runtime()` for `BCryptPasswordHasher` in Django
DESCRIPTION: `BCryptPasswordHasher` also received the `harden_runtime()` method implementation in Django 1.8.10. While its rounds hadn't changed since 1.4, this provides consistency and supports subclasses that might increase the work factor, contributing to the CVE-2016-2513 fix.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_4

LANGUAGE: Python
CODE:
```
BCryptPasswordHasher
```

----------------------------------------

TITLE: Fixing Data Loss in SplitArrayField with ArrayField(BooleanField())
DESCRIPTION: This fix addresses a bug in SplitArrayField when used with ArrayField(BooleanField()). Previously, all values after the first True value were incorrectly marked as checked instead of preserving the passed values. The fix ensures that the original values are maintained correctly.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.27.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.contrib.postgres.forms import SplitArrayField
from django.db import models

class MyModel(models.Model):
    boolean_array = models.ArrayField(models.BooleanField())

class MyForm(forms.ModelForm):
    boolean_array = SplitArrayField(forms.BooleanField(), size=5)
```

----------------------------------------

TITLE: Modifying PostgreSQL User Role Privileges
DESCRIPTION: SQL command to modify an existing user's role to allow database creation without superuser or role creation privileges.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_2

LANGUAGE: psql
CODE:
```
postgres# ALTER ROLE <user_name> CREATEDB NOSUPERUSER NOCREATEROLE;
```

----------------------------------------

TITLE: Discussing `PBKDF2PasswordHasher` Iteration Increase in Django
DESCRIPTION: Explains that `PBKDF2PasswordHasher` increased default iterations in Django versions post-1.6. This change inadvertently created a timing difference (CVE-2016-2513) between logins for users with older hashes and non-existent users. Django 1.8.10 addressed this with `harden_runtime()`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
PBKDF2PasswordHasher
```

----------------------------------------

TITLE: Test Database Migration Setting
DESCRIPTION: Reference to the test database migration setting that was fixed to properly sync during database creation.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.2.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
TEST_MIGRATE
```

----------------------------------------

TITLE: Configuring Oracle Database Options in Django
DESCRIPTION: Shows the configuration option for disabling 'returning into' functionality in Oracle databases, which may cause errors on INSERTs for some tables in Django 1.11.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.5.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
'use_returning_into': False
```

----------------------------------------

TITLE: Importing Django Admindocs Module in Python
DESCRIPTION: This code snippet demonstrates how to import the admindocs module from Django. The admindocs module is mentioned in the context of a security vulnerability (CVE-2021-33203) related to potential directory traversal.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.4.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.contrib import admindocs
```

----------------------------------------

TITLE: Fixing KeyTransform() for JSONField and HStoreField in Django
DESCRIPTION: This bugfix addresses a crash in KeyTransform() when used with django.contrib.postgres.fields.JSONField and HStoreField on expressions with params. The issue was tracked under ticket #30672.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.24.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
KeyTransform()
```

LANGUAGE: python
CODE:
```
django.contrib.postgres.fields.JSONField
```

LANGUAGE: python
CODE:
```
django.contrib.postgres.fields.HStoreField
```

----------------------------------------

TITLE: Django model's save method triggered from admin
DESCRIPTION: Reference to Django model's save() method that was being triggered inappropriately in the admin interface when a user with view-only permissions on a parent model but edit permissions on inlines submitted a form.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.1.15.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
save()
```

----------------------------------------

TITLE: Fixing `Model.full_clean()` Crash with `db_default` Expressions in Django
DESCRIPTION: Addresses a bug in Django 5.0 where `Model.full_clean()` crashed on fields using expressions in `db_default`. As a side effect of the fix, `Model.full_clean()` no longer validates empty values for fields that have a `db_default` set, changing the validation behavior.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.4.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
Model.full_clean()
```

LANGUAGE: python
CODE:
```
db_default
```

----------------------------------------

TITLE: Accessing SpatialRefSys and GeometryColumns Models via Django Spatial Backends - Python
DESCRIPTION: Demonstrates how to obtain ORM model classes for querying spatial metadata (SpatialRefSys and GeometryColumns) using the spatial backend's ops methods for specific database aliases. This new method ensures correct model association with non-default connections, as spatial metadata table structures can vary by backend. Each call produces a model class for querying spatial tables, requiring valid named database connections and appropriate Django/GIS setup.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_28

LANGUAGE: python
CODE:
```
from django.db import connections
SpatialRefSys = connections["my_spatialite"].ops.spatial_ref_sys()
GeometryColumns = connections["my_postgis"].ops.geometry_columns()
```

----------------------------------------

TITLE: Fixing SQL Injection in QuerySet.explain() for PostgreSQL (Python/Django)
DESCRIPTION: Addresses CVE-2022-28347, fixing a potential SQL injection vulnerability in the QuerySet.explain() method when using dictionary expansion for options on PostgreSQL.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.13.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
QuerySet.explain(**options)
```

----------------------------------------

TITLE: Demonstrating URL Reversing Vulnerability in Django
DESCRIPTION: This snippet shows how URL reversing could generate scheme-relative URLs, potentially redirecting users to malicious sites. The fix ensures no URL starts with two slashes, replacing the second slash with its URL encoded counterpart.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.14.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
reverse()
```

----------------------------------------

TITLE: Writing Commit Message for Django Contribution
DESCRIPTION: Demonstrates the format for writing a commit message when contributing to Django. The message should follow commit message guidelines and include a reference to the fixed issue number.
SOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_6

LANGUAGE: text
CODE:
```
Fixed #99999 -- Added a shortcut function to make toast.
```

----------------------------------------

TITLE: Defining a Hand Class for Bridge Card Game in Python
DESCRIPTION: This code defines a Python class called Hand to represent a hand of cards in the game of Bridge. It initializes with four parameters representing the cards held by each player (north, east, south, west).
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
class Hand:
    """A hand of cards (bridge style)"""

    def __init__(self, north, east, south, west):
        # Input parameters are lists of cards ('Ah', '9s', etc.)
        self.north = north
        self.east = east
        self.south = south
        self.west = west

    # ... (other possibly useful methods omitted) ...
```

----------------------------------------

TITLE: Creating Custom Comment Manager for User Group Exclusion in Django
DESCRIPTION: Code snippet demonstrating how to implement a custom comment manager to exclude comments from specific user groups after the removal of COMMENTS_BANNED_USERS_GROUP functionality.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.conf import settings
from django.contrib.comments.managers import CommentManager
```

----------------------------------------

TITLE: Git Alias Configuration for Pull Request Checkout
DESCRIPTION: Git configuration alias that allows easy checkout of pull requests using a PR number. The alias should be added to ~/.gitconfig with upstream set to django/django.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/committing-code.txt#2025-04-23_snippet_0

LANGUAGE: ini
CODE:
```
[alias]
    pr = !sh -c \"git fetch upstream pull/${1}/head:pr/${1} && git checkout pr/${1}\"
```

----------------------------------------

TITLE: Referencing FileResponse Class in Django
DESCRIPTION: This snippet demonstrates how to reference the FileResponse class from Django's http module. It's mentioned in the context of a security vulnerability fix related to the Content-Disposition header.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.7.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
:class:`~django.http.FileResponse`
```

----------------------------------------

TITLE: Getting and Setting GDALRaster SRS Attribute in Python
DESCRIPTION: Illustrates how to get and set the spatial reference system (SRS) of a GDALRaster object using the `srs` attribute. It shows accessing the SRID via `srs.srid` and setting the SRS using an integer SRID (3086). Requires a GDALRaster object.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_37

LANGUAGE: pycon
CODE:
```
>>> rst = GDALRaster({"width": 10, "height": 20, "srid": 4326})
>>> rst.srs.srid
4326
>>> rst.srs = 3086
>>> rst.srs.srid
3086
```

----------------------------------------

TITLE: Building and Installing GEOS
DESCRIPTION: Commands to build and install GEOS from source using CMake.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
$ cd geos-X.Y.Z
$ mkdir build
$ cd build
$ cmake -DCMAKE_BUILD_TYPE=Release ..
$ cmake --build .
$ sudo cmake --build . --target install
```

----------------------------------------

TITLE: Committing changes to a branch
DESCRIPTION: Records changes made to files in the repository. Multiple commits can be made as work progresses on the ticket.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
git commit
```

----------------------------------------

TITLE: Extracting PROJ Source and Data Files
DESCRIPTION: Commands to extract PROJ source code and datum shifting files.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
$ tar xzf proj-X.Y.Z.tar.gz
$ cd proj-X.Y.Z/data
$ tar xzf ../../proj-data-X.Y.tar.gz
$ cd ../..
```

----------------------------------------

TITLE: Specifying Documentation Build Dependencies in Plain Text
DESCRIPTION: This snippet lists Python package dependencies required for the Django project's documentation tooling, likely within a requirements file. It specifies `pyenchant` and `sphinxcontrib-spelling` for spell checking, `Sphinx` (version 4.5.0 or higher) as the documentation generator, and `blacken-docs` for formatting code examples within the documentation.
SOURCE: https://github.com/django/django/blob/main/docs/requirements.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
pyenchant
Sphinx>=4.5.0
sphinxcontrib-spelling
blacken-docs
```

----------------------------------------

TITLE: SQL Template for Window Frame Clause - SQL
DESCRIPTION: Displays the template for a window frame clause as output by Django ORM's ValueRange or RowRange classes. Used internally to compose SQL for window functions. The placeholders are replaced with frame type (ROWS/RANGE), the start expression, and the end expression. Not executable; serves as a pattern reference.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_28

LANGUAGE: sql
CODE:
```
%(frame_type)s BETWEEN %(start)s AND %(end)s
```

----------------------------------------

TITLE: Related Name Clash Traceback (Django Pytb)
DESCRIPTION: Displays the specific validation error traceback raised by Django when a ManyToManyField (or ForeignKey) on a child model in multi-table inheritance has a default related name that clashes with the implicit parent link field's reverse name.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#_snippet_46

LANGUAGE: pytb
CODE:
```
Reverse query name for 'Supplier.customers' clashes with reverse query
name for 'Supplier.place_ptr'.

HINT: Add or change a related_name argument to the definition for
'Supplier.customers' or 'Supplier.place_ptr'.
```

----------------------------------------

TITLE: Django Authentication Login Method
DESCRIPTION: Reference to the django.contrib.auth.login() method which calls session.flush() when switching accounts and was affected by the cached_db backend security issue.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
django.contrib.auth.login()
```

----------------------------------------

TITLE: Accessing Reverse Foreign Key from Proxy Model in Python
DESCRIPTION: Demonstrates how reverse foreign keys from proxy models are now propagated to their concrete class. The reverse relation can be accessed as a descriptor on the proxied model class and used in queryset filtering.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
# Example usage:
proxy_model = ProxyModel.objects.get(id=1)
concrete_model = proxy_model._meta.concrete_model

# Accessing reverse relation
related_objects = concrete_model.related_set.all()

# Using in queryset filtering
filtered_objects = ConcreteModel.objects.filter(related__some_field=value)
```

----------------------------------------

TITLE: Referencing QuerySet Class in Python
DESCRIPTION: Reference to the Django `QuerySet` class, which represents a collection of database objects obtained from a query. The release note addresses a bug related to the pickling (serialization) of QuerySet instances.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.4.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
QuerySet
```

----------------------------------------

TITLE: Specifying Django Project Dependencies
DESCRIPTION: This snippet lists the required Python packages and their minimum versions for the Django project. It includes conditional dependencies based on the Python version and operating system.
SOURCE: https://github.com/django/django/blob/main/tests/requirements/py3.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
aiosmtpd >= 1.4.5
asgiref >= 3.8.1
argon2-cffi >= 23.1.0
bcrypt >= 4.1.1
black >= 25.1.0
docutils >= 0.19
geoip2 >= 4.8.0
jinja2 >= 2.11.0
numpy >= 1.26.0; python_version < '3.14'
Pillow >= 10.1.0; sys.platform != 'win32' or python_version < '3.14'
# pylibmc/libmemcached can't be built on Windows.
pylibmc; sys_platform != 'win32'
pymemcache >= 3.4.0
pywatchman; sys_platform != 'win32'
PyYAML >= 6.0.2
redis >= 5.1.0
selenium >= 4.23.0
sqlparse >= 0.5.0
tblib >= 3.0.0
tzdata
colorama >= 0.4.6; sys_platform == 'win32'
```

----------------------------------------

TITLE: Assigning Composite Tuple to pk and Accessing Related Fields - Pycon
DESCRIPTION: Illustrates manual assignment of a composite primary key tuple to a model instance (OrderLineItem), and how this assignment reflects on the instance and its fields. Demonstrates that assigning a tuple to pk automatically sets values in the constituent fields. Assumes models are set up for composite primary keys; executed within the Django shell.
Inputs: tuple for pk; outputs: tuple pk and corresponding field values.
SOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_2

LANGUAGE: pycon
CODE:
```
>>> item = OrderLineItem(pk=(2, "B142C"))
>>> item.pk
(2, "B142C")
>>> item.product_id
2
>>> item.order_id
"B142C"
```

----------------------------------------

TITLE: Using ManyToManyField in Django Models
DESCRIPTION: References the usage of ManyToManyField in Django models, which had a regression fixed related to admin change history logging and initial data handling in model forms.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.5.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
ManyToManyField
```

----------------------------------------

TITLE: Defining GeoDjango Module Documentation in reStructuredText
DESCRIPTION: Module directive that defines the Django GIS extensions module namespace and provides a synopsis of its purpose.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/index.txt#2025-04-23_snippet_0

LANGUAGE: restructuredtext
CODE:
```
.. module:: django.contrib.gis
    :synopsis: Geographic Information System (GIS) extensions for Django
```

----------------------------------------

TITLE: Updating ModelAdmin.lookup_allowed Method in Django Admin
DESCRIPTION: The signature of the undocumented lookup_allowed method on ModelAdmin has changed to address a security issue.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.5.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
class MyModelAdmin(admin.ModelAdmin):
    # Updated lookup_allowed method (exact signature not provided)
    def lookup_allowed(self, lookup, value):
        # Implementation
        pass
```

----------------------------------------

TITLE: Django QuerySet Select For Update Method
DESCRIPTION: Method for locking database rows that had a bug when using proxy model related fields in the 'of' argument
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.10.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
select_for_update()
```

----------------------------------------

TITLE: Subquery Expression Resolution
DESCRIPTION: Fixed the equality comparison of resolved Subquery() expressions that were incorrectly considered equal
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.7.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
Subquery()
```

----------------------------------------

TITLE: Using empty clause in Django for template tag
DESCRIPTION: Demonstrates the new empty clause in the for template tag to display content when looping over an empty sequence.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_8

LANGUAGE: Django Template
CODE:
```
{% for item in items %}
    {{ item }}
{% empty %}
    No items found.
{% endfor %}
```

----------------------------------------

TITLE: Configuring TEMPLATES DIRS Option in Django Settings
DESCRIPTION: Addresses a regression in Django 3.2.4 where the auto-reloader failed to detect changes when the DIRS option in TEMPLATES setting contained an empty string.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.4.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
TEMPLATES = {
    'DIRS': [''],
}
```

----------------------------------------

TITLE: Reusing Case Instance in Query
DESCRIPTION: Example of a code pattern that previously caused a crash when the same Case instance was reused in a query. This bug was fixed in Django 1.8.2.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
Case
```

----------------------------------------

TITLE: Migrating GeoDjango Backend Imports for PostGIS Adaptor - Python
DESCRIPTION: Illustrates migration from direct import of PostGISAdaptor in the old GeoDjango backend to the new access pattern using connection.ops.Adapter. The before-and-after snippets show the deprecated import path and the updated, modular approach conforming to Django 1.2's multi-backend design. Requires a properly configured Django spatial database connection and reflects changes to the spatial backend API. Accepts no external parameters but requires that the project settings enable the connection.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_27

LANGUAGE: python
CODE:
```
from django.contrib.gis.db.backend.postgis import PostGISAdaptor
```

LANGUAGE: python
CODE:
```
from django.db import connection

PostGISAdaptor = connection.ops.Adapter
```

----------------------------------------

TITLE: Setting Email Subject Prefix in Django
DESCRIPTION: Specifies a prefix ('[Django] ' by default, including the space) added to the subject line of emails sent via mail_admins or mail_managers.
SOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_30

LANGUAGE: python
CODE:
```
EMAIL_SUBJECT_PREFIX = '[Django] '
```

----------------------------------------

TITLE: Exploiting Template Settings Leak Using SECRET_KEY - Django Template
DESCRIPTION: This snippet demonstrates how a malicious user exploits the vulnerability by supplying the name of a sensitive setting (e.g., \"SECRET_KEY\") instead of a valid date format, causing the filter to reveal that value. This misuse assumes insufficient validation of the user_date_format variable.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.11.txt#2025-04-23_snippet_1

LANGUAGE: django-template
CODE:
```
"SECRET_KEY"
```

----------------------------------------

TITLE: RST External Links Definition for Python Resources
DESCRIPTION: ReStructuredText markup defining external links to Python-related resources including the official Python website, documentation, and learning materials.
SOURCE: https://github.com/django/django/blob/main/docs/intro/index.txt#2025-04-23_snippet_1

LANGUAGE: rst
CODE:
```
.. _python: https://www.python.org/
.. _list of Python resources for non-programmers: https://wiki.python.org/moin/BeginnersGuide/NonProgrammers
.. _Python documentation: https://docs.python.org/3/
.. _books about Python: https://wiki.python.org/moin/PythonBooks
```

----------------------------------------

TITLE: Generating HTML Documentation with Make (Unix/Linux)
DESCRIPTION: Demonstrates how to use the Makefile to generate HTML documentation from Django's source files on Unix-like systems.
SOURCE: https://github.com/django/django/blob/main/docs/intro/whatsnext.txt#2025-04-23_snippet_2

LANGUAGE: bash
CODE:
```
$ cd path/to/django/docs
$ make html
```

----------------------------------------

TITLE: Using HTML+Django Template Tags with cycle in subtemplate
DESCRIPTION: Example of a Django template fragment that includes a subtemplate containing a cycle tag, demonstrating how the thread-safety changes in Django 1.2 affect template rendering behavior.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_5

LANGUAGE: html+django
CODE:
```
{% for object in object_list %}
    {% include "subtemplate.html" %}
{% endfor %}
```

----------------------------------------

TITLE: Resolving PostgreSQL Migration Crash with Partial `UniqueConstraint` in Django
DESCRIPTION: Fixes a bug specific to Django 5.0 running on PostgreSQL 15 or newer. A database migration attempting to add a partial `UniqueConstraint` that utilized the `nulls_distinct` option (introduced in PostgreSQL 15) would cause a crash. This fix ensures migrations apply correctly under these conditions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.4.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
UniqueConstraint
```

LANGUAGE: sql
CODE:
```
nulls_distinct
```

----------------------------------------

TITLE: Configuring Django Locale Formats
DESCRIPTION: A reference to the locale formats configuration file that handles date, time, and number formatting for specific locales in Django. The file is located at conf/locale/<locale>/formats.py and requires manual updates through pull requests.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/localizing.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
conf/locale/<locale>/formats.py
```

----------------------------------------

TITLE: Django PostgreSQL Array Field Configuration
DESCRIPTION: Reference to SplitArrayField and ArrayField with BooleanField, which was fixed to correctly preserve boolean values after the first True value.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.1.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
ArrayField(BooleanField())
```

----------------------------------------

TITLE: Django Setting Combinations in PostgreSQL
DESCRIPTION: Example of Django settings that were causing a crash on PostgreSQL before the fix in this release. The issue affected applications using PostgreSQL with specific timezone configurations.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.3.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
TIME_ZONE=None and USE_TZ=False
```

----------------------------------------

TITLE: Django Authentication Logout Method
DESCRIPTION: Reference to the django.contrib.auth.logout() method which calls session.flush() and was affected by the cached_db backend security issue.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.contrib.auth.logout()
```

----------------------------------------

TITLE: Referencing Django ModelAdmin Attribute in Release Notes
DESCRIPTION: Code reference to a Django ModelAdmin attribute that was crashing when invalid UUIDs were entered.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.2.txt#2025-04-23_snippet_4

LANGUAGE: markdown
CODE:
```
``ModelAdmin.raw_id_fields``
```

----------------------------------------

TITLE: Deprecation of %(<foo>)s Syntax in ModelFormMixin.success_url - reStructuredText
DESCRIPTION: Informs that the legacy %(<foo>)s syntax for dynamic success_url assignment in ModelFormMixin is deprecated and will be removed in Django 1.10. Alternative approaches for URL formatting should be used instead.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_14

LANGUAGE: reStructuredText
CODE:
```
``%(<foo>)s`` syntax in ``ModelFormMixin.success_url``
------------------------------------------------------

The legacy ``%(<foo>)s`` syntax in :attr:`ModelFormMixin.success_url
<django.views.generic.edit.ModelFormMixin.success_url>` is deprecated and
will be removed in Django 1.10.
```

----------------------------------------

TITLE: Demonstrating Callable Behavior in Django Templates
DESCRIPTION: Illustrates how callables in Django 1.3 templates are automatically executed regardless of their access method. Both examples will return the user's full name instead of the bound method object.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_8

LANGUAGE: pycon
CODE:
```
>>> Template("{{ user.get_full_name }}").render(Context({"user": user}))
u'Joe Bloggs'
>>> Template("{{ full_name }}").render(Context({"full_name": user.get_full_name}))
u'&lt;bound method User.get_full_name of &lt;...'
```

----------------------------------------

TITLE: Django Static File Serving View
DESCRIPTION: Reference to Django's static file serving view that was affected by the CVE-2017-7234 open redirect vulnerability.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.7.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
django.views.static.serve
```

----------------------------------------

TITLE: Migration Plan Display Fix for RunPython Operations
DESCRIPTION: Fixed behavior of migrate --plan command to correctly handle RunPython operations without docstrings in reverse_code callables.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.7.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
migrate --plan
```

----------------------------------------

TITLE: Identifying Vulnerable Function in Django utils.text
DESCRIPTION: This snippet references the `django.utils.text.wrap()` function, which is identified in the Django 5.0.13 release notes as having a potential denial-of-service vulnerability (CVE-2025-26699) when used with very long input strings.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.13.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
django.utils.text.wrap()
```

----------------------------------------

TITLE: Applying Decorators Directly in Django URLconfs
DESCRIPTION: Demonstrates how to apply view decorators, such as `login_required`, directly within the URLconf in Django 0.96. This is enabled by the ability to use callables as view callbacks. The example shows wrapping a generic view (`object_list`) with the `login_required` decorator directly in the `urlpatterns` definition.
SOURCE: https://github.com/django/django/blob/main/docs/releases/0.96.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
from django.conf.urls.defaults import *
from django.contrib.auth.decorators import login_required
from django.views.generic.list_detail import object_list
from mysite.myapp.models import MyModel

info = {
    "queryset": MyModel.objects.all(),
}

urlpatterns = patterns("", ("^myview/$", login_required(object_list), info))
```

----------------------------------------

TITLE: Referencing Django 404 Handler Function
DESCRIPTION: Shows the Python path to Django's default 404 page handler that was affected by the security vulnerability. The function was updated to prevent content spoofing through malicious URLs.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.18.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.views.defaults.page_not_found()
```

----------------------------------------

TITLE: Vulnerable Function Reference in Django Archive Utils
DESCRIPTION: Reference to the django.utils.archive.extract() function that contained a directory traversal vulnerability when handling archive paths. This function is used by startapp --template and startproject --template commands.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.12.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.utils.archive.extract()
```

----------------------------------------

TITLE: Creating a Cities Dictionary in Python for Django Templates
DESCRIPTION: This code creates a list of city dictionaries containing name, population, and country information. This list is used in the subsequent regroup tag examples to demonstrate grouping functionality.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_34

LANGUAGE: python
CODE:
```
cities = [
    {"name": "Mumbai", "population": "19,000,000", "country": "India"},
    {"name": "Calcutta", "population": "15,000,000", "country": "India"},
    {"name": "New York", "population": "20,000,000", "country": "USA"},
    {"name": "Chicago", "population": "7,000,000", "country": "USA"},
    {"name": "Tokyo", "population": "33,000,000", "country": "Japan"},
]
```

----------------------------------------

TITLE: Disabling Oracle RETURNING INTO - Django Python
DESCRIPTION: Disables the use of the `RETURNING INTO` clause by the Oracle backend. By default, Oracle uses this clause for efficient `AutoField` retrieval during inserts, but it can cause `DatabaseError` in specific unusual setups. Setting `use_returning_into` to `False` forces a separate `SELECT` query for retrieval.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_21

LANGUAGE: python
CODE:
```
"OPTIONS": {
        "use_returning_into": False,
    }
```

----------------------------------------

TITLE: Malicious date format injection example
DESCRIPTION: Example of how a malicious user could exploit the date filter vulnerability by providing a settings key instead of a valid date format to access secret information.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.7.txt#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
"SECRET_KEY"
```

----------------------------------------

TITLE: Implementing BanningCommentManager in Django
DESCRIPTION: Custom comment manager class that filters out comments from banned users based on group membership settings
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
class BanningCommentManager(CommentManager):
    def get_query_set(self):
        qs = super().get_query_set()
        if getattr(settings, "COMMENTS_BANNED_USERS_GROUP", None):
            where = [
                "user_id NOT IN (SELECT user_id FROM auth_user_groups WHERE group_id = %s)"
            ]
            params = [settings.COMMENTS_BANNED_USERS_GROUP]
            qs = qs.extra(where=where, params=params)
        return qs
```

----------------------------------------

TITLE: Admin ForeignKeyRawIdWidget Security Fix
DESCRIPTION: Implementation of proper URL encoding for query parameters in the admin ForeignKeyRawIdWidget to prevent XSS attacks
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.7.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
ForeignKeyRawIdWidget
```

----------------------------------------

TITLE: Using Django Admindocs Template Detail View
DESCRIPTION: Reference to the admindocs TemplateDetailView that had a potential directory traversal vulnerability allowing staff members to check arbitrary file existence.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.12.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.contrib.admindocs
```

----------------------------------------

TITLE: Running Django JavaScript Tests with HTTP Server
DESCRIPTION: Command to start a simple HTTP server for running Django JavaScript tests with code coverage in a browser. This is necessary when measuring code coverage for the tests.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/javascript.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
python -m http.server
```

----------------------------------------

TITLE: Template Debug Information Dictionary Structure in Python
DESCRIPTION: An example of the template_debug dictionary structure used for providing contextual line information in custom Django template engines. This structure helps display detailed error information in the Django debug page.
SOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-backend.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
{
    "name": "/path/to/template.html",
    "message": "Invalid block tag: 'syntax'",
    "source_lines": [
        (1, "some\n"),
        (2, "lines\n"),
        (3, "before\n"),
        (4, "Hello {% syntax error %} {{ world }}\n"),
        (5, "some\n"),
        (6, "lines\n"),
        (7, "after\n"),
        (8, ""),
    ],
    "line": 4,
    "before": "Hello ",
    "during": "{% syntax error %}",
    "after": " {{ world }}\n",
    "total": 9,
    "bottom": 9,
    "top": 1,
}
```

----------------------------------------

TITLE: Using Quoted db_table (Other User/Long) - Django Python
DESCRIPTION: Shows how to use a quoted name for `db_table` to specify a table owned by another user or a table with a name that might otherwise be transformed or truncated by Oracle's naming rules. The quoted string is passed directly to the database.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_23

LANGUAGE: python
CODE:
```
class ForeignModel(models.Model):
        class Meta:
            db_table = '"OTHER_USER"."NAME_ONLY_SEEMS_OVER_30"'
```

----------------------------------------

TITLE: Identifying Vulnerable Django Template Filter
DESCRIPTION: This snippet references the `:tfilter:wordwrap` template filter, which is noted alongside `django.utils.text.wrap()` in the Django 5.0.13 release notes as being subject to a potential denial-of-service attack (CVE-2025-26699) when processing very long strings.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.13.txt#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
:tfilter:`wordwrap`
```

----------------------------------------

TITLE: Referencing UsernameField in Django's Auth Forms
DESCRIPTION: This snippet refers to the UsernameField class from Django's authentication forms, which is the focus of the security fix in this release.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.23.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.contrib.auth.forms.UsernameField
```

----------------------------------------

TITLE: Fixing Missing PostgreSQL Pattern Ops Index in Django AddField
DESCRIPTION: Addresses a bugfix in Django 1.8.14 (ticket #26889) where the `AddField` migration operation on PostgreSQL failed to create the necessary `varchar_pattern_ops` or `text_pattern_ops` index for `CharField` or `TextField` model fields respectively. This ensures proper database indexing for efficient pattern matching queries (e.g., LIKE 'value%') on PostgreSQL.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.14.txt#2025-04-23_snippet_1

LANGUAGE: sql
CODE:
```
varchar/text_pattern_ops
```

LANGUAGE: python
CODE:
```
CharField
```

LANGUAGE: python
CODE:
```
TextField
```

LANGUAGE: python
CODE:
```
AddField
```

----------------------------------------

TITLE: Preventing Migration Crash with `GeneratedField` Using `contains`/`Value` in Django
DESCRIPTION: Addresses a migration crash in Django 5.0 encountered when adding a `GeneratedField` whose definition depended on the `__contains` or `__icontains` lookups, or involved a `Value` object containing a literal percent sign ('%'). This fix allows such generated fields to be added via migrations without error.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.4.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
GeneratedField
```

LANGUAGE: python
CODE:
```
__contains
```

LANGUAGE: python
CODE:
```
__icontains
```

LANGUAGE: python
CODE:
```
Value
```

----------------------------------------

TITLE: Referencing django.contrib.auth.views.login() function in Python
DESCRIPTION: A code reference to the Django authentication login view function that was affected by the CVE-2017-7233 vulnerability related to unsafe URL redirects.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.18.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.contrib.auth.views.login()
```

----------------------------------------

TITLE: Referencing Django ticket for makemigrations crash on _order field
DESCRIPTION: This snippet references a Django ticket number for a regression that caused a crash of makemigrations on models without Meta.order_with_respect_to but with a field named _order in Django 4.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_5

LANGUAGE: plaintext
CODE:
```
:ticket:`33449`
```

----------------------------------------

TITLE: Identifying Admin Views add_view and user_change_password in Python
DESCRIPTION: References the `add_view` and `user_change_password` methods, likely within the Django user admin implementation (`django.contrib.auth.admin.UserAdmin`). These specific views were previously decorated incorrectly with `sensitive_post_parameters`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.4.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
add_view
```

LANGUAGE: python
CODE:
```
user_change_password
```

----------------------------------------

TITLE: SQL Injection Vulnerability in JSONField and HStoreField Lookups (Python)
DESCRIPTION: Key and index lookups for JSONField and key lookups for HStoreField were vulnerable to SQL injection attacks when using a crafted dictionary with dictionary expansion in QuerySet.filter().
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.23.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
django.contrib.postgres.fields.JSONField
```

LANGUAGE: python
CODE:
```
django.contrib.postgres.fields.HStoreField
```

----------------------------------------

TITLE: ModelAdmin List Editable Memory Usage Fix
DESCRIPTION: Resolution for a regression introduced in Django 1.10 that caused excessive memory consumption when using ModelAdmin.list_editable feature.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.14.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
ModelAdmin.list_editable
```

----------------------------------------

TITLE: Setting up Python Path on macOS
DESCRIPTION: Modifies PATH environment variable to use the custom Python installation on macOS.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
export PATH=/Library/Frameworks/Python.framework/Versions/Current/bin:$PATH
```

----------------------------------------

TITLE: SQL Constraint Generation - 64-bit Platform Example
DESCRIPTION: Example showing how Django 1.1 generates foreign key constraint names on 64-bit platforms before the name generation change. Creates a 16-character digest in the constraint name.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_0

LANGUAGE: sql
CODE:
```
ALTER TABLE myapp_sometable ADD CONSTRAINT object_id_refs_id_5e8f10c132091d1e FOREIGN KEY ...
```

----------------------------------------

TITLE: Expressing Exception Type 'MiddlewareNotUsed' in Django Middleware - Markdown
DESCRIPTION: This snippet references the 'MiddlewareNotUsed' exception, which indicates a middleware should be excluded during Django middleware processing. No imports or setup are required; it is not shown as executable code but as a named exception type important for middleware lifecycle in Django. The changelog uses this reference to highlight a bugfix related to async middleware processing.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.5.txt#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
MiddlewareNotUsed
```

----------------------------------------

TITLE: Referencing Django ticket for help_text HTML-escaping regression
DESCRIPTION: This snippet references a Django ticket number for a regression where help_text was HTML-escaped in automatically-generated forms in Django 4.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
:ticket:`33419`
```

----------------------------------------

TITLE: Incorrect Spacing in Django Template Expressions
DESCRIPTION: Shows incorrect spacing in Django template expressions with inconsistent spaces around operators, dots, and pipes. This demonstrates syntax formatting to avoid.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_14

LANGUAGE: html+django
CODE:
```
{% if user . name | lower  ==  "admin" %}

{{ user.name | upper }}
```

----------------------------------------

TITLE: Disabling Template Autoescaping in Django 1.0
DESCRIPTION: Examples of how to disable Django's new default autoescaping behavior for individual variables and entire template sections using the 'safe' filter and 'autoescape' tag.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_14

LANGUAGE: html
CODE:
```
This will be escaped: {{ data }}
This will not be escaped: {{ data|safe }}
```

LANGUAGE: html
CODE:
```
{% autoescape off %}
   ... unescaped template content here ...
{% endautoescape %}
```

----------------------------------------

TITLE: Updating URLconf for Django Shortcut View
DESCRIPTION: This snippet shows how to update the URLconf to use the new location of the shortcut view in Django 1.6. It replaces the deprecated django.conf.urls.shortcut with the new path in django.contrib.contenttypes.views.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_12

LANGUAGE: Python
CODE:
```
(r"^prefix/", include("django.conf.urls.shortcut")),
```

LANGUAGE: Python
CODE:
```
(
    r"^prefix/(?P<content_type_id>\d+)/(?P<object_id>.*)/$",
    "django.contrib.contenttypes.views.shortcut",
),
```

----------------------------------------

TITLE: Installing colorama with pip - DOS Prompt
DESCRIPTION: Installs the `colorama` Python package using pip, specifying a minimum version of 0.4.6. This is a recommended dependency for enabling colored terminal output on older Windows versions or legacy terminals when using Django.
SOURCE: https://github.com/django/django/blob/main/docs/howto/windows.txt#_snippet_4

LANGUAGE: doscon
CODE:
```
...\> py -m pip install "colorama >= 0.4.6"
```

----------------------------------------

TITLE: Generating Django Admin Man Page in Console
DESCRIPTION: This command generates an updated version of the Django admin man page. It should be run in the 'docs' directory as part of the release process. The resulting man page will be written to 'docs/_build/man/django-admin.1'.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-documentation.txt#2025-04-23_snippet_5

LANGUAGE: console
CODE:
```
$ make man
```

----------------------------------------

TITLE: Referencing prefetch_related Method in Python (Sphinx Syntax)
DESCRIPTION: Reference using Sphinx syntax to the `prefetch_related` method of a Django QuerySet. This method is used to optimize database access by fetching related objects in separate queries. The bugfix allows QuerySets using `prefetch_related` to be pickled and unpickled multiple times without error.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.4.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
:meth:`~django.db.models.query.QuerySet.prefetch_related`
```

----------------------------------------

TITLE: Referencing Django ticket for ModelAdmin.radio_fields layout bug
DESCRIPTION: This snippet references a Django ticket number for a regression that caused incorrect ModelAdmin.radio_fields layout in the admin in Django 4.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_6

LANGUAGE: plaintext
CODE:
```
:ticket:`33407`
```

----------------------------------------

TITLE: Example Commit Message Format
DESCRIPTION: Template showing the proper format for commit messages in Django, including the subject line, body formatting, and proper character line limits.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/committing-code.txt#2025-04-23_snippet_2

LANGUAGE: none
CODE:
```
Fixed #18307 -- Added git workflow guidelines.

Refactored the Django's documentation to remove mentions of SVN
specific tasks. Added guidelines of how to use Git, GitHub, and
how to use pull request together with Trac instead.
```

----------------------------------------

TITLE: Implementing XSS-Vulnerable Greeting Tag - Python
DESCRIPTION: Example showing a simple_tag implementation that is vulnerable to XSS attacks in older Django versions due to lack of escaping.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
@register.simple_tag(takes_context=True)
def greeting(context):
    return "Hello {0}!".format(context["request"].user.first_name)
```

----------------------------------------

TITLE: Legacy URL Template Tag Usage
DESCRIPTION: Example of using the deprecated URL template tag syntax.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_11

LANGUAGE: html+django
CODE:
```
{% url sample %}
```

----------------------------------------

TITLE: Project Name Template Configuration in YAML
DESCRIPTION: Basic YAML template file that includes a placeholder for project name using Django template syntax
SOURCE: https://github.com/django/django/blob/main/tests/admin_scripts/custom_templates/project_template/additional_dir/requirements.txt#2025-04-23_snippet_0

LANGUAGE: yaml
CODE:
```
# some file for {{ project_name }} test project
```

----------------------------------------

TITLE: Configuring ModelAdmin in Django 1.0 (Python)
DESCRIPTION: This snippet shows the new approach for configuring the admin interface in Django 1.0, typically placed in an `admin.py` file. It defines an `AuthorAdmin` class inheriting from `admin.ModelAdmin`, specifies `list_display`, uses `prepopulated_fields` (replacing the model's `prepopulate_from`), and registers the `Author` model with the admin site using `admin.site.register`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django.contrib import admin
from models import Author


class AuthorAdmin(admin.ModelAdmin):
    list_display = ["first_name", "last_name"]
    prepopulated_fields = {"slug": ("first_name", "last_name")}


admin.site.register(Author, AuthorAdmin)
```

----------------------------------------

TITLE: Importing Forms Module in Django 1.0 (Python)
DESCRIPTION: Shows the updated import statement for the forms library in Django 1.0. The `newforms` module was renamed to `forms`. If the alias `as forms` was used previously, only the module name in the import statement needs changing.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_12

LANGUAGE: python
CODE:
```
from django import forms
```

----------------------------------------

TITLE: Subtemplate using cycle tag in Django templates
DESCRIPTION: Code snippet showing a subtemplate that uses the cycle template tag, which is affected by thread-safety changes in Django 1.2.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_6

LANGUAGE: html+django
CODE:
```
{% cycle 'even' 'odd' %}
```

----------------------------------------

TITLE: Downloading Sample Geospatial Data using Shell Commands
DESCRIPTION: Shell commands to download sample geospatial data files (cities shapefile and raster image) from Django's test data repository.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_0

LANGUAGE: shell
CODE:
```
$ wget https://raw.githubusercontent.com/django/django/main/tests/gis_tests/data/cities/cities.{shp,prj,shx,dbf}
$ wget https://raw.githubusercontent.com/django/django/main/tests/gis_tests/data/rasters/raster.tif
```

----------------------------------------

TITLE: Example Admin URL Exploiting Data Leakage via Query Parameters
DESCRIPTION: Demonstrates a potential data leakage vulnerability in `contrib.admin` prior to Django 1.5.9. By manipulating the `pop` and `t` (aliased as `to_field`) query parameters in an admin change form URL, an authenticated user with permissions to view the form could potentially expose arbitrary field data (like password hashes) in the page's HTML source. The fix involves validating the `to_field` parameter.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.9.txt#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
"/admin/auth/user/?pop=1&t=password"
```

----------------------------------------

TITLE: Referencing Django Expression in Release Notes
DESCRIPTION: This snippet shows how to reference a Django expression (IsNull()) in the release notes documentation.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.5.txt#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
``IsNull()``
```

----------------------------------------

TITLE: Using IPAddressField in Django Models
DESCRIPTION: IPAddressField (now deprecated) is the third model field class that has been updated to convert arguments to the correct types before querying, addressing MySQL typecasting issues.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.11.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
from django.db.models import IPAddressField
```

----------------------------------------

TITLE: RST Table of Contents Structure for Django Getting Started Guide
DESCRIPTION: ReStructuredText markup defining the table of contents and document structure for Django's getting started documentation, including tutorial sections and additional resources.
SOURCE: https://github.com/django/django/blob/main/docs/intro/index.txt#2025-04-23_snippet_0

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   overview
   install
   tutorial01
   tutorial02
   tutorial03
   tutorial04
   tutorial05
   tutorial06
   tutorial07
   tutorial08
   reusable-apps
   whatsnext
   contributing
```

----------------------------------------

TITLE: Formatting Release Notes Header in reStructuredText
DESCRIPTION: This snippet demonstrates how to format a header and subheader for release notes using reStructuredText syntax. It includes the version number and underlines for emphasis.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.7.txt#2025-04-23_snippet_0

LANGUAGE: reStructuredText
CODE:
```
==========================
Django 1.2.7 release notes
==========================
```

----------------------------------------

TITLE: Running Spelling Check on Django Documentation
DESCRIPTION: Command to run the spelling checker on the documentation to identify and fix spelling errors before committing changes. Requires installing sphinxcontrib-spelling package.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-documentation.txt#2025-04-23_snippet_3

LANGUAGE: console
CODE:
```
$ make spelling
```

----------------------------------------

TITLE: Configuring Pre-1.2 Django Database Settings (Python)
DESCRIPTION: This snippet shows the old method (pre-Django 1.2) of defining database connection parameters using individual `DATABASE_*` settings directly in the `settings.py` file. This format is deprecated from Django 1.2 onwards and will be removed in Django 1.4.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
DATABASE_NAME = "test_db"
DATABASE_ENGINE = "postgresql_psycopg2"
DATABASE_USER = "myusername"
DATABASE_PASSWORD = "s3krit"
```

----------------------------------------

TITLE: Referencing Django Ticket in Release Notes
DESCRIPTION: This snippet references a Django ticket number related to a bug fix in the release notes. It uses the :ticket: directive to create a link to the ticket in the Django issue tracker.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.6.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
:ticket:`34291`
```

----------------------------------------

TITLE: Referencing Django ticket for migration crash on altering primary key type
DESCRIPTION: This snippet references a Django ticket number for a duplicate operation regression that caused a migration crash when altering a primary key type for a concrete parent model referenced by a foreign key in Django 4.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_7

LANGUAGE: plaintext
CODE:
```
:ticket:`33462`
```

----------------------------------------

TITLE: Fixed ClearableFileInput Default Value Handling in Django Forms
DESCRIPTION: Bug fix for the Clear checkbox behavior in ClearableFileInput when used with model form fields that have a default value specified.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.6.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
ClearableFileInput
```

----------------------------------------

TITLE: Creating New Documentation Branch
DESCRIPTION: Git commands for creating a new documentation branch from the current stable branch
SOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
$ git checkout -b stable/4.2.x origin/stable/4.1.x
$ git push origin stable/4.2.x:stable/4.2.x
```

----------------------------------------

TITLE: Document on ForeignKey on_delete Behavior and QuerySet Methods
DESCRIPTION: This section explains that ForeignKeys with 'on_delete=DO_NOTHING' don't block deletion speed-path, but query generation details are subject to database implementation. It does not include code but discusses ORM behavior and underlying query mechanics.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_90



----------------------------------------

TITLE: RST Documentation for Django Issue Reporting
DESCRIPTION: ReStructuredText formatted documentation explaining Django's bug reporting and feature request guidelines, including security reporting procedures, best practices for bug reports, UI/UX considerations, and decision-making processes.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/bugs-and-features.txt#2025-04-23_snippet_0

LANGUAGE: rst
CODE:
```
======================================
Reporting bugs and requesting features
======================================

.. Important::

    Please report security issues **only** to
    security@djangoproject.com.  This is a private list only open to
    long-time, highly trusted Django developers, and its archives are
    not public. For further details, please see :doc:`our security
    policies </internals/security>`.
```

----------------------------------------

TITLE: Altering IP Address Field in Oracle for Django Comments App
DESCRIPTION: SQL query to alter the IP address column in the DJANGO_COMMENTS table for Oracle databases to support IPv6 addresses, changing it to use VARCHAR2(39).
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_5

LANGUAGE: sql
CODE:
```
ALTER TABLE DJANGO_COMMENTS MODIFY (ip_address VARCHAR2(39));
```

----------------------------------------

TITLE: PyPy Implementation Example
DESCRIPTION: Reference to PyPy as an alternative Python implementation that can offer performance improvements for Django applications.
SOURCE: https://github.com/django/django/blob/main/docs/topics/performance.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
# PyPy implementation
# Example usage with Django requires PyPy version corresponding to supported Python versions
```

----------------------------------------

TITLE: Adapting Form Imports for Django 0.96
DESCRIPTION: Shows how to modify Python import statements for Django forms during the transition period in version 0.96. The first snippet represents the standard import in Django 0.95. The second snippet shows the recommended way in 0.96 to continue using the old forms system by importing from `django.oldforms` while the new `django.newforms` library is introduced. This facilitates a gradual migration.
SOURCE: https://github.com/django/django/blob/main/docs/releases/0.96.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
from django import forms  # 0.95-style
```

LANGUAGE: python
CODE:
```
from django import oldforms as forms  # 0.96-style
```

----------------------------------------

TITLE: Getting Date Formats with Deprecated Functions (Python)
DESCRIPTION: This snippet shows the deprecated way of retrieving date, datetime, and time format strings using `get_date_formats()` from `django.utils.translation`. This function is superseded by the locale-aware `django.utils.formats` module.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_21

LANGUAGE: python
CODE:
```
from django.utils.translation import get_date_formats

date_format, datetime_format, time_format = get_date_formats()
```

----------------------------------------

TITLE: Referencing Django ticket for makemigrations crash on renaming field of renamed model
DESCRIPTION: This snippet references a Django ticket number for a regression that caused a crash of makemigrations when renaming a field of a renamed model in Django 4.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_9

LANGUAGE: plaintext
CODE:
```
:ticket:`33480`
```

----------------------------------------

TITLE: Referencing Django Model Save Methods (RST)
DESCRIPTION: These snippets use the ReStructuredText `:meth:` role to reference the `.Model.save` and `.Model.asave` methods. The context is adjusting the `stacklevel` for deprecation warnings related to these methods to ensure they point to the correct call site.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_7

LANGUAGE: restructuredtext
CODE:
```
:meth:`.Model.save`
```

LANGUAGE: restructuredtext
CODE:
```
:meth:`.Model.asave`
```

----------------------------------------

TITLE: PostgreSQL SearchQuery Operator Fix
DESCRIPTION: Fixed functionality to allow combining contrib.postgres.search.SearchQuery with multiple & or | operators
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.2.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
contrib.postgres.search.SearchQuery
```

----------------------------------------

TITLE: Granting EXECUTE Privileges on Oracle SYS Packages
DESCRIPTION: Grant the necessary EXECUTE privileges on the SYS.DBMS_LOB and SYS.DBMS_RANDOM packages to the Oracle database user used by Django, which are required by the Oracle backend.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_14

LANGUAGE: sql
CODE:
```
GRANT EXECUTE ON SYS.DBMS_LOB TO user;
GRANT EXECUTE ON SYS.DBMS_RANDOM TO user;
```

----------------------------------------

TITLE: MySQL Error Example
DESCRIPTION: Example of a MySQL error message that occurs when the max_allowed_packet setting is too small for LayerMapping operations.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/layermapping.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
OperationalError: (1153, "Got a packet bigger than 'max_allowed_packet' bytes")
```

----------------------------------------

TITLE: Referencing Django Auth Form Classes (RST)
DESCRIPTION: These snippets use the ReStructuredText `:class:` role to reference `BaseUserCreationForm` and `AdminUserCreationForm`. The context is a bug fix in Django 5.1 where a new `usable_password` field was incorrectly included in the base form; it was moved to the new admin-specific form.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_6

LANGUAGE: restructuredtext
CODE:
```
:class:`~django.contrib.auth.forms.BaseUserCreationForm`
```

LANGUAGE: restructuredtext
CODE:
```
:class:`~django.contrib.auth.forms.AdminUserCreationForm`
```

----------------------------------------

TITLE: Referencing Django AuthenticationForm Class in Release Notes
DESCRIPTION: Code reference to the Django authentication form class that had a security vulnerability in Django 1.11.8 where information could be leaked about users.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.2.txt#2025-04-23_snippet_0

LANGUAGE: markdown
CODE:
```
:class:`~django.contrib.auth.forms.AuthenticationForm`
```

----------------------------------------

TITLE: Referencing WKBWriter Class in Python
DESCRIPTION: Reference to the WKBWriter class that had an issue with repetitive calls to the GEOS version function.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.10.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
WKBWriter
```

----------------------------------------

TITLE: Fixing Migration Crash on MySQL 8.0.13+ for Nullable Fields with Default
DESCRIPTION: A bug fix for Django 3.2 where migrations would crash on MySQL 8.0.13+ when adding nullable BinaryField, JSONField, or TextField with a default value. This addresses ticket #32832.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.5.txt#2025-04-23_snippet_3

LANGUAGE: SQL
CODE:
```
ALTER TABLE ... ADD COLUMN ... DEFAULT ...
```

----------------------------------------

TITLE: Specifying psycopg and psycopg-pool versions for Django PostgreSQL integration
DESCRIPTION: This snippet defines the minimum required versions of psycopg with binary support and psycopg-pool for Django's PostgreSQL database integration. It ensures compatibility and optimal performance when using PostgreSQL with Django.
SOURCE: https://github.com/django/django/blob/main/tests/requirements/postgres.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
psycopg[binary]>=3.1.12
psycopg-pool>=3.2.0
```

----------------------------------------

TITLE: Configuring Inline Admin Editing in Django 0.96 (Python)
DESCRIPTION: This snippet illustrates the old method (Django 0.96) for defining inline editing in the admin interface. The `edit_inline` and `num_in_admin` arguments were specified directly on the `ForeignKey` field within the model definition (`models.py`). This approach is deprecated in Django 1.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
class Parent(models.Model): ...


class Child(models.Model):
    parent = models.ForeignKey(Parent, edit_inline=models.STACKED, num_in_admin=3)
```

----------------------------------------

TITLE: Linking to Django Ticket 18985 using reStructuredText
DESCRIPTION: Uses the reStructuredText `:ticket:` role to create a hyperlink to issue 18985 in the Django project's ticket tracker. The ticket number '18985' itself serves as the link text. This refers to the bug fix regarding module-level warnings during tests.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.1.txt#2025-04-23_snippet_2

LANGUAGE: rst
CODE:
```
:ticket:`18985`
```

----------------------------------------

TITLE: Linking to Django Security Advisory in reStructuredText
DESCRIPTION: This snippet demonstrates how to create a hyperlink in reStructuredText format, specifically linking to the Django security advisory for version 1.4.1.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.1.txt#2025-04-23_snippet_0

LANGUAGE: reStructuredText
CODE:
```
.. _security advisory: https://www.djangoproject.com/weblog/2012/jul/30/security-releases-issued/
```

----------------------------------------

TITLE: Installing Sphinx for Django Documentation
DESCRIPTION: Command to install the Sphinx documentation system using pip, which is a prerequisite for building the HTML documentation.
SOURCE: https://github.com/django/django/blob/main/docs/README.rst#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
python -m pip install Sphinx
```

----------------------------------------

TITLE: Referencing django.contrib.auth Module in Python (Sphinx Syntax)
DESCRIPTION: Reference using Sphinx syntax to the Django `django.contrib.auth` module. This module contains Django's core authentication framework, including user management and views. The context is the correction of decorator usage within this module's admin views.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.4.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
:mod:`django.contrib.auth`
```

----------------------------------------

TITLE: Configuring Inline Admin Editing in Django 1.0 (Python)
DESCRIPTION: This snippet demonstrates the new method (Django 1.0) for defining inline editing in the admin interface, using `admin.py`. An inline class (`ChildInline`) inheriting from `admin.StackedInline` (or `admin.TabularInline`) is defined, specifying the model and `extra` count. This inline class is then added to the `inlines` list of the parent model's `ModelAdmin` class (`ParentAdmin`).
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_4

LANGUAGE: python
CODE:
```
class ChildInline(admin.StackedInline):
    model = Child
    extra = 3


class ParentAdmin(admin.ModelAdmin):
    model = Parent
    inlines = [ChildInline]


admin.site.register(Parent, ParentAdmin)
```

----------------------------------------

TITLE: Example Input: List of Tuples for Dictsort Index Sort - Python
DESCRIPTION: Contains a list of tuples, each with two elements: a string and a value. Use as input for the dictsort index demonstration. Outputs a reordered list according to the string component. Standalone Python; no dependencies.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_64

LANGUAGE: python
CODE:
```
[
    ("a", "42"),
    ("c", "string"),
    ("b", "foo"),
]
```

----------------------------------------

TITLE: Fixed GDAL Exception Handling
DESCRIPTION: Resolution for GDALException issues raised by GDALClose when using GDAL version 2.0 or higher.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.6.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
GDALException
GDALClose
```

----------------------------------------

TITLE: Fixed Request Data Exception Handling in Django
DESCRIPTION: Resolution for RequestDataTooBig and TooManyFieldsSent exceptions to properly return bad request responses instead of crashing.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.6.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
RequestDataTooBig
TooManyFieldsSent
```

----------------------------------------

TITLE: Resolving SQL Injection in QuerySet.explain() for PostgreSQL in Django
DESCRIPTION: Fixes CVE-2022-28347, a potential SQL injection vulnerability in the QuerySet.explain() method when using dictionary expansion for options on PostgreSQL.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.4.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
QuerySet.explain(**options)
```

----------------------------------------

TITLE: Instantiating Deprecated SMTPConnection (Python)
DESCRIPTION: This snippet illustrates the deprecated method of directly instantiating `SMTPConnection` from `django.core.mail` to send emails. This approach is replaced by a generic email backend API in Django 1.2 and later.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_13

LANGUAGE: python
CODE:
```
from django.core.mail import SMTPConnection

connection = SMTPConnection()
messages = get_notification_email()
connection.send_messages(messages)
```

----------------------------------------

TITLE: Referencing Django's Static File Serving Function in Python
DESCRIPTION: This snippet refers to Django's static file serving function, which was vulnerable to a denial-of-service attack in older versions due to line-by-line file reading.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.18.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
django.views.static.serve
```

----------------------------------------

TITLE: Example Input: List of Books with Nested Author Dictionaries - Python
DESCRIPTION: Provides a sample list of dictionaries each representing a book with a nested 'author' dictionary for name and age. Serves as input to the nested dictsort example in Django templates. No dependencies beyond Python.
SOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_61

LANGUAGE: python
CODE:
```
[
    {"title": "1984", "author": {"name": "George", "age": 45}},
    {"title": "Timequake", "author": {"name": "Kurt", "age": 75}},
    {"title": "Alice", "author": {"name": "Lewis", "age": 33}},
]
```

----------------------------------------

TITLE: Post-Release Git Push Commands
DESCRIPTION: Commands to push the release commits and tags to the remote repository.
SOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_8

LANGUAGE: shell
CODE:
```
git push
git push --tags
```

----------------------------------------

TITLE: Release Package Checksum Generation
DESCRIPTION: Commands to generate MD5, SHA1, and SHA256 checksums for Django release packages.
SOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
cd dist
md5sum *
sha1sum *
sha256sum *
```

----------------------------------------

TITLE: Defining HTML Element in Django Template
DESCRIPTION: This snippet demonstrates the use of an HTML 'morbi' element in a Django template. It appears to be a placeholder or example of custom HTML within the project.
SOURCE: https://github.com/django/django/blob/main/tests/utils_tests/files/strip_tags2.txt#2025-04-23_snippet_0

LANGUAGE: HTML
CODE:
```
<morbi>
```

----------------------------------------

TITLE: SQL Template for Window Frame Clause with Exclusion - SQL
DESCRIPTION: Shows a template for window frame clauses that include an exclusion, as output by Django's ORM. This is used for advanced window expressions where part of the result set is excluded (e.g., CURRENT_ROW, GROUP, TIES). Meant as an implementation detail reference rather than executable code.
SOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_29

LANGUAGE: sql
CODE:
```
%(frame_type)s BETWEEN %(start)s AND %(end)s EXCLUDE %(exclusion)s
```

----------------------------------------

TITLE: Referencing Django Template Filters (RST)
DESCRIPTION: These snippets use the ReStructuredText `:tfilter:` role to reference the `urlize` and `urlizetrunc` template filters. They are mentioned in the context of a potential denial-of-service vulnerability.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_1

LANGUAGE: restructuredtext
CODE:
```
:tfilter:`urlize`
```

LANGUAGE: restructuredtext
CODE:
```
:tfilter:`urlizetrunc`
```

----------------------------------------

TITLE: Creating Table of Contents for File Handling Documentation in reStructuredText
DESCRIPTION: This snippet creates a table of contents for the file handling documentation using the toctree directive. It sets the maximum depth to 2 and lists the submodules to be included.
SOURCE: https://github.com/django/django/blob/main/docs/ref/files/index.txt#2025-04-23_snippet_1

LANGUAGE: reStructuredText
CODE:
```
.. toctree::
   :maxdepth: 2

   file
   storage
   uploads
```

----------------------------------------

TITLE: Creating Table of Contents in reStructuredText for Django Internals Documentation
DESCRIPTION: A reStructuredText directive that creates a table of contents for the Django internals documentation, linking to various sections about contributing, mailing lists, organization, security, release processes, deprecation, git, and release procedures.
SOURCE: https://github.com/django/django/blob/main/docs/internals/index.txt#2025-04-23_snippet_0

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 2

   contributing/index
   mailing-lists
   organization
   security
   release-process
   deprecation
   git
   howto-release-django
```

----------------------------------------

TITLE: Referencing Django Storage Class (RST)
DESCRIPTION: This snippet uses the ReStructuredText `:class:` role to reference the `django.core.files.storage.FileSystemStorage` class. It's mentioned in relation to adjusting the stacklevel for a deprecation warning concerning `OS_OPEN_FLAGS` usage.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_9

LANGUAGE: restructuredtext
CODE:
```
:class:`~django.core.files.storage.FileSystemStorage`
```

----------------------------------------

TITLE: jQuery Extension Pattern
DESCRIPTION: Example of the jQuery.extend() pattern that was vulnerable to prototype pollution before being patched. This shows the syntax that could be exploited in versions before jQuery 3.4.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.2.txt#2025-04-23_snippet_1

LANGUAGE: javascript
CODE:
```
jQuery.extend(true, {}, ...)
```

----------------------------------------

TITLE: Django Version Number Format
DESCRIPTION: Demonstrates the format of Django version numbers using A.B or A.B.C pattern, where A.B represents feature releases and C represents patch releases.
SOURCE: https://github.com/django/django/blob/main/docs/internals/release-process.txt#2025-04-23_snippet_0

LANGUAGE: rst
CODE:
```
``A.B`` or ``A.B.C``
```

----------------------------------------

TITLE: Features Removed in Django 1.8 - reStructuredText
DESCRIPTION: Enumerates the features removed in Django 1.8, such as django.contrib.comments, transaction management APIs, template tag behaviors, various modules, settings, and backward-compatible shims. This reference is vital for developers upgrading legacy codebases, as it provides a checklist for migration and highlights functionality no longer available.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_17

LANGUAGE: reStructuredText
CODE:
```
.. _removed-features-1.8:

Features removed in 1.8
=======================

These features have reached the end of their deprecation cycle and are removed
in Django 1.8. See :ref:`deprecated-features-1.6` for details, including how to
remove usage of these features.

* ``django.contrib.comments`` is removed.

* The following transaction management APIs are removed:

  - ``TransactionMiddleware``
  - the decorators and context managers ``autocommit``, ``commit_on_success``,
    and ``commit_manually``, defined in ``django.db.transaction``
  - the functions ``commit_unless_managed`` and ``rollback_unless_managed``,
    also defined in ``django.db.transaction``
  - the ``TRANSACTIONS_MANAGED`` setting

* The :ttag:`cycle` and :ttag:`firstof` template tags auto-escape their
  arguments.

* The ``SEND_BROKEN_LINK_EMAILS`` setting is removed.

* ``django.middleware.doc.XViewMiddleware`` is removed.

* The ``Model._meta.module_name`` alias is removed.

* The backward compatible shims introduced to rename ``get_query_set``
  and similar queryset methods are removed. This affects the following classes:
  ``BaseModelAdmin``, ``ChangeList``, ``BaseCommentNode``,
  ``GenericForeignKey``, ``Manager``, ``SingleRelatedObjectDescriptor`` and
  ``ReverseSingleRelatedObjectDescriptor``.

* The backward compatible shims introduced to rename the attributes
  ``ChangeList.root_query_set`` and ``ChangeList.query_set`` are removed.

* ``django.views.defaults.shortcut`` and ``django.conf.urls.shortcut`` are
  removed.

* Support for the Python Imaging Library (PIL) module is removed.

* The following private APIs are removed:

  - ``django.db.backend``
  - ``django.db.close_connection()``
  - ``django.db.backends.creation.BaseDatabaseCreation.set_autocommit()``
  - ``django.db.transaction.is_managed()``
  - ``django.db.transaction.managed()``

* ``django.forms.widgets.RadioInput`` is removed.

* The module ``django.test.simple`` and the class
  ``django.test.simple.DjangoTestSuiteRunner`` are removed.

* The module ``django.test._doctest`` is removed.

* The ``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting is removed. This change
  affects both ``django.middleware.cache.CacheMiddleware`` and
  ``django.middleware.cache.UpdateCacheMiddleware`` despite the lack of a
  deprecation warning in the latter class.

* Usage of the hardcoded *Hold down "Control", or "Command" on a Mac, to select
  more than one.* string to override or append to user-provided ``help_text`` in
  forms for ``ManyToMany`` model fields is not performed by Django anymore
  either at the model or forms layer.

* The ``Model._meta.get_(add|change|delete)_permission`` methods are removed.

* The session key ``django_language`` is no longer read for backwards
  compatibility.

* Geographic Sitemaps are removed
  (``django.contrib.gis.sitemaps.views.index`` and
  ``django.contrib.gis.sitemaps.views.sitemap``).

* ``django.utils.html.fix_ampersands``, the ``fix_ampersands`` template filter,
  and ``django.utils.html.clean_html`` are removed.
```

----------------------------------------

TITLE: Installing Binutils on RedHat/CentOS
DESCRIPTION: Installs the binutils package required for library discovery on RedHat-based systems.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
$ sudo yum install binutils
```

----------------------------------------

TITLE: Template Comment Syntax with Translation Tags in Django
DESCRIPTION: Example of correctly using comments with translation tags in Django templates. Shows how translator comments are now properly recognized even when placed on the same line.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_2

LANGUAGE: html+django
CODE:
```
{# A comment #}{% trans "This literal was incorrectly ignored. Not anymore" %}
```

----------------------------------------

TITLE: Fixing UnboundLocalError in RenameField with Nonexistent Field in Python
DESCRIPTION: Fixed UnboundLocalError crash in RenameField with nonexistent field.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_13

LANGUAGE: Python
CODE:
```
migrations.RenameField(model_name='Model', old_name='nonexistent_field', new_name='new_field')
```

----------------------------------------

TITLE: Fixed JSONField Lookup Operations in Django
DESCRIPTION: Bug fix for PostgreSQL JSONField lookups (contains, contained_by, has_key, has_keys, has_any_keys) when using key transforms in expressions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.7.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.contrib.postgres.fields.JSONField
```

----------------------------------------

TITLE: Importing unittest in Django 1.3
DESCRIPTION: Shows how to import the unittest module in Django 1.3 to take advantage of new unittest2 features. Django provides an alias that will use unittest2 if available.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
from django.utils import unittest
```

----------------------------------------

TITLE: Pushing Changes to GitHub for Django Contribution
DESCRIPTION: Shows the Git command to push local changes to a fork on GitHub. The branch name 'ticket_99999' is used as an example and should be replaced with the actual branch name.
SOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_7

LANGUAGE: console
CODE:
```
$ git push origin ticket_99999
```

----------------------------------------

TITLE: Django Aggregation Classes
DESCRIPTION: Database aggregation classes that were fixed in Django 2.2.3 to properly handle the filter argument.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.3.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.db.models.Avg
django.db.models.StdDev
django.db.models.Variance
```

----------------------------------------

TITLE: Preventing Attribute Value Localization in Widget Templates in HTML
DESCRIPTION: Prevented attribute values in the django/forms/widgets/attrs.html template from being localized so that numeric attributes (e.g. max and min) of NumberInput work correctly.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_10

LANGUAGE: HTML
CODE:
```
{% include "django/forms/widgets/attrs.html" %}
```

----------------------------------------

TITLE: Modifying Custom SQL Data Loading in Django Tests
DESCRIPTION: Data inserted using custom SQL is no longer visible during testing. Use test fixtures or setUp() method to insert test data.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.5.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
# Example of using setUp() to insert test data (not provided in the text)
class MyTestCase(TestCase):
    def setUp(self):
        # Insert test data here
        pass
```

----------------------------------------

TITLE: User Authentication Property Reference
DESCRIPTION: Properties mentioned in authentication comparison bugfix that now support equality and OR operations.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.1.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
User.is_authenticated
User.is_anonymous
```

----------------------------------------

TITLE: Git Commands for Django Contribution Workflow
DESCRIPTION: These Git commands show the process of creating a branch, staging changes, reviewing differences, and committing changes when contributing to Django.
SOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_5

LANGUAGE: Bash
CODE:
```
$ git checkout -b ticket_99999
```

LANGUAGE: Bash
CODE:
```
$ git add --all
```

LANGUAGE: Bash
CODE:
```
$ git diff --cached
```

LANGUAGE: Bash
CODE:
```
$ git commit
```

----------------------------------------

TITLE: Django Admin Documentation View Example
DESCRIPTION: Example of a callable view object that previously caused crashes in django.contrib.admindocs but was fixed in this release.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.13.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.contrib.syndication.views.Feed
```

----------------------------------------

TITLE: Referencing sensitive_post_parameters Decorator in Python (Sphinx Syntax)
DESCRIPTION: Reference using Sphinx syntax to the Django `sensitive_post_parameters` function decorator. This decorator is used to prevent specific POST parameters from being included in error reports for security reasons. The release note fixes its improper application in certain admin views.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.4.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
:func:`~django.views.decorators.debug.sensitive_post_parameters`
```

----------------------------------------

TITLE: Enabling Future Template Tags in Django Templates
DESCRIPTION: These snippets show how to enable the new auto-escaping behavior for 'cycle' and 'firstof' template tags using the 'future' template library in Django 1.6.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_10

LANGUAGE: Django Template Language
CODE:
```
{% load cycle from future %}
```

LANGUAGE: Django Template Language
CODE:
```
{% load firstof from future %}
```

----------------------------------------

TITLE: Fixing Regression in QuerySet.values_list() with prefetch_related()
DESCRIPTION: A bug fix for Django 3.2 where QuerySet.values_list() with named=True would crash after using prefetch_related(). This addresses ticket #32812.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.5.txt#2025-04-23_snippet_1

LANGUAGE: SQL
CODE:
```
QuerySet.values_list(…, named=True)
```

LANGUAGE: SQL
CODE:
```
prefetch_related()
```

----------------------------------------

TITLE: Configuring System Library Path in Linux
DESCRIPTION: Updates the system-wide library configuration to include /usr/local/lib and reloads the configuration.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_1

LANGUAGE: shell
CODE:
```
$ sudo echo /usr/local/lib >> /etc/ld.so.conf
$ sudo ldconfig
```

----------------------------------------

TITLE: Preventing Shared Cache in `ContentTypeManager` Instances in Django
DESCRIPTION: Describes a fix (:ticket:`26286`) in Django 1.8.10 that prevents separate instances of `ContentTypeManager` from sharing the same cache. This ensures proper cache isolation between manager instances.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_11

LANGUAGE: Python
CODE:
```
ContentTypeManager
```

----------------------------------------

TITLE: Defining Pre-1.2 Feed URLs (Python)
DESCRIPTION: This snippet illustrates the old method of defining URL patterns for syndication feeds in a Django URLconf. It uses a dictionary (`feeds`) where keys are URL slugs and values are instances of the deprecated `Feed` class from `django.contrib.syndication.feeds`. This approach is replaced by using the class-based view `Feed` from `django.contrib.syndication.views` directly in `urlpatterns`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_24

LANGUAGE: python
CODE:
```
from django.conf.urls.defaults import *
from myproject.feeds import LatestEntries, LatestEntriesByCategory

feeds = {
    "latest": LatestEntries,
    "categories": LatestEntriesByCategory,
}

urlpatterns = patterns(
```

----------------------------------------

TITLE: Installing Django Test Dependencies and Running Tests
DESCRIPTION: Steps to navigate to test directory, install Django in editable mode, install Python 3 requirements, and execute the test suite runner. Requires a pre-configured virtual environment.
SOURCE: https://github.com/django/django/blob/main/tests/README.rst#2025-04-23_snippet_0

LANGUAGE: bash
CODE:
```
$ cd tests
$ python -m pip install -e ..
$ python -m pip install -r requirements/py3.txt
$ ./runtests.py
```

----------------------------------------

TITLE: Security Documentation in ReStructuredText
DESCRIPTION: Structured documentation of Django security vulnerabilities, including CVE references, affected versions, patch commit references, and brief descriptions. The document chronicles security issues from 2006-2012 and provides links to full descriptions and patches for each vulnerability.
SOURCE: https://github.com/django/django/blob/main/docs/releases/security.txt#2025-04-23_snippet_0

LANGUAGE: restructuredtext
CODE:
```
December 10, 2012 - No CVE 1
----------------------------

Additional hardening of ``Host`` header handling. `Full description
<https://www.djangoproject.com/weblog/2012/dec/10/security/>`__

Versions affected
~~~~~~~~~~~~~~~~~

* Django 1.3 :commit:`(patch) <2da4ace0bc1bc1d79bf43b368cb857f6f0cd6b1b>`
* Django 1.4 :commit:`(patch) <319627c184e71ae267d6b7f000e293168c7b6e09>`
```

----------------------------------------

TITLE: Creating a Compatible UUID Field for MariaDB Migration
DESCRIPTION: A UUIDField subclass that maintains compatibility with pre-Django 5.0 UUIDField implementation on MariaDB 10.7+. This subclass continues to use CHAR(32) storage rather than the native UUID type now used by default.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
class Char32UUIDField(models.UUIDField):
    def db_type(self, connection):
        return "char(32)"

    def get_db_prep_value(self, value, connection, prepared=False):
        value = super().get_db_prep_value(value, connection, prepared)
        if value is not None:
            value = value.hex
        return value
```

----------------------------------------

TITLE: Memory Exhaustion Vulnerability in django.utils.encoding.uri_to_iri (Python)
DESCRIPTION: The uri_to_iri() function could lead to significant memory usage due to excessive recursion when re-percent-encoding invalid UTF-8 octet sequences. The function has been modified to avoid recursion in these cases.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.23.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
django.utils.encoding.uri_to_iri
```

----------------------------------------

TITLE: Django Middleware Process Request Example
DESCRIPTION: Reference to MiddlewareMixin.process_request() method used in async context for thread sensitivity enforcement.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.1.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
MiddlewareMixin.process_request()
```

----------------------------------------

TITLE: Django Admin Static Files Structure - Text
DESCRIPTION: Shows the required directory structure for overriding jQuery in Django admin when IE8 support is needed.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_4

LANGUAGE: text
CODE:
```
app/static/admin/js/vendor/
    jquery.js
    jquery.min.js
```

----------------------------------------

TITLE: Django CommonMiddleware Path Reference
DESCRIPTION: Code path references showing the affected middleware and setting components that were vulnerable to open redirect attacks before the security patch.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.15.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.middleware.common.CommonMiddleware
```

LANGUAGE: python
CODE:
```
APPEND_SLASH
```

----------------------------------------

TITLE: Linking to Django Ticket 19895 using reStructuredText
DESCRIPTION: Uses the reStructuredText `:ticket:` role to create a hyperlink to issue 19895 in the Django project's ticket tracker. The link text displayed is 'our ticket tracker'. This markup is used within the release notes to provide a direct reference to the bug report detailing the memory leak.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.1.txt#2025-04-23_snippet_0

LANGUAGE: rst
CODE:
```
:ticket:`our ticket tracker <19895>`
```

----------------------------------------

TITLE: Referencing Django ticket for TestCase.captureOnCommitCallbacks() bug
DESCRIPTION: This snippet references a Django ticket number for a bug where TestCase.captureOnCommitCallbacks() could execute callbacks multiple times in Django 4.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_1

LANGUAGE: plaintext
CODE:
```
:ticket:`33410`
```

----------------------------------------

TITLE: Retrieving User Messages with Deprecated API (Python)
DESCRIPTION: This snippet shows the deprecated method `user.get_and_delete_messages()` for retrieving messages associated with a user. This method fetched and simultaneously cleared the messages from the database.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
for message in user.get_and_delete_messages():
    ...
```

----------------------------------------

TITLE: Managing XML Fixture Deserialization Security (Django Management/Shell)
DESCRIPTION: Discusses changes to the XML deserializer used by the `loaddata` management command in Django 1.4.4 to address security vulnerabilities (CVE-2013-1664, CVE-2013-1665). The deserializer now rejects XML documents containing a DTD (DOCTYPE definition). The standard workflow using `dumpdata` to generate fixtures and `loaddata` to load them is generally unaffected because `dumpdata` does not generate DTDs, but custom XML fixtures must not include a DTD.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.4.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
dumpdata
```

LANGUAGE: shell
CODE:
```
loaddata
```

----------------------------------------

TITLE: Referencing Django Authentication Method in Release Notes
DESCRIPTION: Code reference to the Django authentication method that had a regression causing crashes when authentication backends don't consistently handle request parameter.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.2.txt#2025-04-23_snippet_1

LANGUAGE: markdown
CODE:
```
``contrib.auth.authenticate()``
```

----------------------------------------

TITLE: Configuring Admin URLs in Django 0.96 (Python)
DESCRIPTION: This snippet shows the typical way to include the admin site URLs in the root `urls.py` file in Django 0.96. It uses `include('django.contrib.admin.urls')` within the `urlpatterns`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_9

LANGUAGE: python
CODE:
```
from django.conf.urls.defaults import *

urlpatterns = patterns(
    "",
    (r"^admin/", include("django.contrib.admin.urls")),
    # ... the rest of your URLs here ...
)
```

----------------------------------------

TITLE: Referencing Django Model Fields
DESCRIPTION: Code reference to Django's DateField and DateTimeField types mentioned in the context of a MySQL query parameter bug fix.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.4.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
DateField, DateTimeField
```

----------------------------------------

TITLE: Granting Superuser Privileges to Existing User
DESCRIPTION: SQL command to grant superuser privileges to an existing PostgreSQL user.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_4

LANGUAGE: psql
CODE:
```
postgres# ALTER ROLE <user_name> SUPERUSER;
```

----------------------------------------

TITLE: Modifying QuerySet.reverse() to affect nulls_first and nulls_last in Django
DESCRIPTION: Ensures that QuerySet.reverse() properly affects the nulls_first and nulls_last ordering. This fix addresses the issue reported in ticket #28722.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.7.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
QuerySet.reverse()
```

----------------------------------------

TITLE: Removing Option Value Casting in Widget Templates in Python and HTML
DESCRIPTION: Removed casting of the option value to a string in the template context of various widgets. Casting is now done in the template using the |stringformat:'s' filter.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_11

LANGUAGE: Python
CODE:
```
{{ widget.value|stringformat:'s' }}
```

----------------------------------------

TITLE: Declaring Multi-table Model Inheritance with Custom to_field in Django (Python)
DESCRIPTION: This snippet demonstrates how to declare a multi-table inheritance structure using Django's ORM, specifically highlighting the use of a custom 'to_field' and 'parent_link' in a child model's OneToOneField. 'Parent' is a standard model with fields 'name' and a unique 'other_value', while 'Child' inherits from 'Parent' and establishes a OneToOne relationship back to 'Parent' with advanced parameters. The snippet is provided as an example of a scenario that can result in database integrity errors as of Django 1.0. There are no external dependencies beyond Django itself. Inputs are Django model class declarations; the output is the creation of model tables with specified relationships, though the pattern is not recommended due to known issues.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
class Parent(models.Model):
    name = models.CharField(max_length=10)
    other_value = models.IntegerField(unique=True)


class Child(Parent):
    father = models.OneToOneField(
        Parent, primary_key=True, to_field="other_value", parent_link=True
    )
    value = models.IntegerField()
```

----------------------------------------

TITLE: Identifying Vulnerability in `django.utils.http.is_safe_url()` in Django
DESCRIPTION: This function was central to the CVE-2016-2512 vulnerability. Before the fix in Django 1.8.10, it incorrectly flagged certain URLs containing basic authentication as safe, enabling potential malicious redirects and XSS attacks. The fix enhanced its validation logic.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
django.utils.http.is_safe_url()
```

----------------------------------------

TITLE: Django IPv4 Address Validation
DESCRIPTION: References to Django validator classes that had security issues with handling leading zeros in IPv4 addresses, potentially allowing SSRF, RFI, and LFI attacks.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.12.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.core.validators.URLValidator
django.core.validators.validate_ipv4_address
django.core.validators.validate_ipv46_address
```

----------------------------------------

TITLE: Default Value Change of RedirectView.permanent Attribute - reStructuredText
DESCRIPTION: This note informs developers that the default value of the attribute "RedirectView.permanent" (from django.views.generic.base) will change from True to False in Django 1.9. Applications relying on the previous default should specify the attribute explicitly to avoid changes in behavior after upgrading Django.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_8

LANGUAGE: reStructuredText
CODE:
```
Default value of ``RedirectView.permanent``
-------------------------------------------

The default value of the
:attr:`RedirectView.permanent <django.views.generic.base.RedirectView.permanent>`
attribute will change from ``True`` to ``False`` in Django 1.9.
```

----------------------------------------

TITLE: Django Module Import References
DESCRIPTION: References to Django modules related to the security fixes, including authentication views and URL validation utilities that were affected by the security issues.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.3.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.contrib.auth.views.login()
```

LANGUAGE: python
CODE:
```
django.utils.http.is_safe_url()
```

----------------------------------------

TITLE: Using RemoteUserMiddleware in Django Authentication
DESCRIPTION: This snippet refers to the RemoteUserMiddleware and RemoteUserBackend in Django's authentication system. The update addresses a session hijacking vulnerability by logging out the user on failed login attempts.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.14.txt#2025-04-23_snippet_2

LANGUAGE: Python
CODE:
```
django.contrib.auth.middleware.RemoteUserMiddleware
```

----------------------------------------

TITLE: Referencing Django Management Command in Release Notes
DESCRIPTION: Code reference to the Django migrations management command that had a regression when working with migrations directories without __init__.py files.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.2.txt#2025-04-23_snippet_3

LANGUAGE: markdown
CODE:
```
``makemigrations``
```

----------------------------------------

TITLE: Referencing Django QuerySet Method in Release Notes
DESCRIPTION: Code reference to a Django QuerySet method that had a regression when used with annotations.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.2.txt#2025-04-23_snippet_2

LANGUAGE: markdown
CODE:
```
``QuerySet.values_list(..., flat=True)``
```

----------------------------------------

TITLE: Deprecation of the ssi Template Tag - reStructuredText
DESCRIPTION: Documents that the ssi template tag, which includes files by absolute path, is deprecated and will be removed in Django 1.10. The include tag is recommended in most situations as a safer/maintainable alternative.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_12

LANGUAGE: reStructuredText
CODE:
```
``ssi`` template tag
--------------------

The ``ssi`` template tag allows files to be included in a template by
absolute path. This is of limited use in most deployment situations, and
the :ttag:`include` tag often makes more sense. This tag is now deprecated and
will be removed in Django 1.10.
```

----------------------------------------

TITLE: Referencing Django QuerySet Method in Release Notes
DESCRIPTION: This snippet demonstrates how to reference a Django QuerySet method (filter()) in the release notes documentation.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.5.txt#2025-04-23_snippet_2

LANGUAGE: plaintext
CODE:
```
``QuerySet.filter()``
```

----------------------------------------

TITLE: Referencing Django Field Cache Method (RST)
DESCRIPTION: This snippet references the `FieldCacheMixin.get_cache_name()` method. The context is adjusting the `stacklevel` for a deprecation warning associated with this method to ensure it points to the correct call site.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_10

LANGUAGE: restructuredtext
CODE:
```
``FieldCacheMixin.get_cache_name()``
```

----------------------------------------

TITLE: Reallowing Dashes in TLDs for `URLValidator` in Django
DESCRIPTION: Highlights a fix (:ticket:`26204`) in Django 1.8.10 that corrected a regression from Django 1.8. `URLValidator` now correctly permits dashes within top-level domain names (TLDs) during URL validation.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_9

LANGUAGE: Python
CODE:
```
URLValidator
```

----------------------------------------

TITLE: Referencing `django.contrib.auth.views.login()` in Django Redirect Fix
DESCRIPTION: Highlights `django.contrib.auth.views.login()` as an example component potentially affected by CVE-2016-2512. This view relies on user input for redirects, which necessitated improved validation via `is_safe_url()` in Django 1.8.10 to prevent malicious redirects.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
django.contrib.auth.views.login()
```

----------------------------------------

TITLE: Release Branch Security Merge
DESCRIPTION: Git commands for merging security patches into a release branch
SOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_3

LANGUAGE: shell
CODE:
```
$ git checkout stable/4.1.x
$ git merge --ff-only security/4.1.x
```

----------------------------------------

TITLE: Introducing `BasePasswordHasher.harden_runtime()` Method in Django
DESCRIPTION: Introduced in Django 1.8.10 to mitigate CVE-2016-2513, this method allows password hashers to equalize the runtime between checking passwords with older work factors and the current default, preventing timing attacks. It's implemented for `PBKDF2PasswordHasher` and `BCryptPasswordHasher`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
BasePasswordHasher.harden_runtime()
```

----------------------------------------

TITLE: Creating New Stable Branch
DESCRIPTION: Commands for creating a new stable branch from main for a feature release
SOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
$ git checkout -b stable/5.2.x upstream/main
$ git push upstream -u stable/5.2.x:stable/5.2.x
```

----------------------------------------

TITLE: Defining Admin Fieldsets Layout in Django 1.0 (ModelTwoAdmin - Python)
DESCRIPTION: This snippet shows the new `fieldsets` attribute in Django 1.0 used within a `ModelAdmin` class (in `admin.py`) to define grouped fields. The structure is similar to the old `fields` syntax for fieldsets but uses the dedicated `fieldsets` attribute, improving clarity.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_8

LANGUAGE: python
CODE:
```
class ModelTwoAdmin(admin.ModelAdmin):
    fieldsets = (
        ("group1", {"fields": ("foo", "bar"), "classes": "collapse"}),
        ("group2", {"fields": ("spam", "eggs"), "classes": "collapse wide"}),
    )
```

----------------------------------------

TITLE: Identifying Vulnerable Function in Django's Encoding Module
DESCRIPTION: Highlights the specific Django utility function that was vulnerable to a potential denial of service attack. The function uri_to_iri() in django.utils.encoding could be exploited with inputs containing a large number of Unicode characters.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.21.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.utils.encoding.uri_to_iri()
```

----------------------------------------

TITLE: Referencing Django static serve view function
DESCRIPTION: A code reference to the Django view function for serving static files that contained the CVE-2017-7234 open redirect vulnerability.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.18.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
django.views.static.serve
```

----------------------------------------

TITLE: Referencing GEOS Version Function - Python
DESCRIPTION: Code reference to geos_version_tuple() function in WKBWriter class that was causing random crashes with LooseVersion since Django 1.11.14.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.17.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
geos_version_tuple()
```

----------------------------------------

TITLE: Fixing unquoted table names in Subquery SQL with OuterRef in Django
DESCRIPTION: Addresses an issue where table names in Subquery SQL were left unquoted when using OuterRef. This fix is related to ticket #28689 and improves SQL generation.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.7.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
Subquery
```

LANGUAGE: Python
CODE:
```
OuterRef
```

----------------------------------------

TITLE: Referencing Django ticket for class-based view name display bug
DESCRIPTION: This snippet references a Django ticket number for a regression that caused displaying an incorrect name for class-based views on the technical 404 debug page in Django 4.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_3

LANGUAGE: plaintext
CODE:
```
:ticket:`33425`
```

----------------------------------------

TITLE: Model Parent Preservation in Django Delete Operation
DESCRIPTION: Fix for Model.delete() with keep_parents=True to properly preserve parent reverse relationships in multi-table inheritance scenarios.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.4.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
Model.delete(keep_parents=True)
```

----------------------------------------

TITLE: Updated Django Integer Validation Function
DESCRIPTION: This snippet mentions the undocumented validate_integer() function, which has been updated to use a stricter validation method using regular expressions instead of simple exception handling with int() casting.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.21.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
validate_integer()
```

LANGUAGE: Python
CODE:
```
int()
```

----------------------------------------

TITLE: RST Table of Contents Definition
DESCRIPTION: ReStructuredText directive defining the table of contents structure for Django's documentation, listing all major framework components with a maximum depth of 2 levels.
SOURCE: https://github.com/django/django/blob/main/docs/topics/index.txt#2025-04-23_snippet_0

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 2

   install
   db/index
   http/index
   forms/index
   templates
   class-based-views/index
   migrations
   files
   testing/index
   auth/index
   cache
   conditional-view-processing
   composite-primary-key
   signing
   email
   i18n/index
   logging
   pagination
   security
   performance
   serialization
   settings
   signals
   checks
   external-packages
   async
```

----------------------------------------

TITLE: Cloning Django Repository via Git Console
DESCRIPTION: Shows how to clone the Django repository from GitHub to your local machine using Git. This is the first step to start contributing to Django's documentation.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-documentation.txt#2025-04-23_snippet_0

LANGUAGE: console
CODE:
```
$ git clone https://github.com/django/django.git
```

----------------------------------------

TITLE: Exploiting SSI Directory Traversal Vulnerability (Django Template)
DESCRIPTION: Demonstrates a directory traversal vulnerability using the `ssi` template tag in Django versions prior to 1.4.7. This example shows how a relative path, crafted to start with an allowed root specified in `ALLOWED_INCLUDE_ROOTS` (e.g., "/var/www"), could potentially be used to access unintended files outside that root, such as `/etc/passwd`. This vulnerability required the path argument to `ssi` to be influenced by user input.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.7.txt#2025-04-23_snippet_0

LANGUAGE: html+django
CODE:
```
{% ssi "/var/www/../../etc/passwd" %}
```

----------------------------------------

TITLE: Specifying Minimum Oracle Database Driver Version for Django
DESCRIPTION: This line defines the minimum version of the oracledb driver required for Django to work with Oracle databases. It ensures compatibility with Django's Oracle database backend.
SOURCE: https://github.com/django/django/blob/main/tests/requirements/oracle.txt#2025-04-23_snippet_0

LANGUAGE: Plain Text
CODE:
```
oracledb >= 2.3.0
```

----------------------------------------

TITLE: Creating Table of Contents for Django HTTP Request Handling Documentation
DESCRIPTION: A reStructuredText (reST) formatted table of contents that organizes documentation for Django's HTTP request handling features. It uses the toctree directive to create a structured list of topics related to handling HTTP requests in Django.
SOURCE: https://github.com/django/django/blob/main/docs/topics/http/index.txt#2025-04-23_snippet_0

LANGUAGE: reST
CODE:
```
.. toctree::
   :maxdepth: 1

   urls
   views
   decorators
   file-uploads
   shortcuts
   generic-views
   middleware
   sessions
```

----------------------------------------

TITLE: Referencing Django Auth Logger (RST)
DESCRIPTION: This snippet uses the ReStructuredText `:ref:` role to reference the documentation section for the `django-contrib-auth-logger`. This logger is now used to handle and log exceptions during password reset email sending.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_3

LANGUAGE: restructuredtext
CODE:
```
:ref:`django-contrib-auth-logger`
```

----------------------------------------

TITLE: Relocation of FlatPageSitemap Class - reStructuredText
DESCRIPTION: Notes that django.contrib.sitemaps.FlatPageSitemap has moved to django.contrib.flatpages.sitemaps.FlatPageSitemap. The old import path is deprecated and to be removed in Django 1.9. Codebases should update their imports accordingly.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_10

LANGUAGE: reStructuredText
CODE:
```
``django.contrib.sitemaps.FlatPageSitemap``
-------------------------------------------

``django.contrib.sitemaps.FlatPageSitemap`` has moved to
``django.contrib.flatpages.sitemaps.FlatPageSitemap``. The old import location
is deprecated and will be removed in Django 1.9.
```

----------------------------------------

TITLE: ForeignKey Method Implementation
DESCRIPTION: Reference to the ForeignKey.get_db_prep_value() method that was implemented to fix issues with UUIDField primary keys in foreign key relationships.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_5

LANGUAGE: python
CODE:
```
ForeignKey.get_db_prep_value()
```

----------------------------------------

TITLE: Python Version Compatibility Check
DESCRIPTION: Specifies Python version requirements for Django 1.10. The framework requires Python 2.7, 3.4, or 3.5, with recommendation to use the latest release of each series.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
# Python version requirements for Django 1.10
# Required: Python 2.7, 3.4, or 3.5
```

----------------------------------------

TITLE: Changing MySQL Table Storage Engine - SQL
DESCRIPTION: This SQL command snippet demonstrates how to change the storage engine of an existing MySQL table using an ALTER TABLE statement. This is presented as an option when the database server's default storage engine cannot be changed and tables need to be converted after creation, for instance, to InnoDB.
SOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_8

LANGUAGE: SQL
CODE:
```
ALTER TABLE <tablename> ENGINE=INNODB;
```

----------------------------------------

TITLE: Referenced Class in Security Fix - MultiPartParser
DESCRIPTION: Reference to the MultiPartParser class that contained a directory-traversal vulnerability when handling uploaded files with crafted filenames. The vulnerability was patched in this release.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.14.txt#2025-04-23_snippet_0

LANGUAGE: plaintext
CODE:
```
MultiPartParser
```

----------------------------------------

TITLE: Downgrading Django's Vendored Six Library in Python
DESCRIPTION: This code snippet shows the downgrade of Django's vendored version of the 'six' library to maintain compatibility with Python 2.5.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.18.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
django.utils.six
```

----------------------------------------

TITLE: Updating Django Management Command Calls in Python
DESCRIPTION: Example demonstrating how to migrate from direct calls to management methods to using call_command() in Django 1.0. This affects code that programmatically executes Django management commands.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_19

LANGUAGE: python
CODE:
```
from django.core import management

management.flush(verbosity=0, interactive=False)
management.load_data(["test_data"], verbosity=0)
```

LANGUAGE: python
CODE:
```
from django.core import management

management.call_command("flush", verbosity=0, interactive=False)
management.call_command("loaddata", "test_data", verbosity=0)
```

----------------------------------------

TITLE: Identifying Django's Vendored Six Library
DESCRIPTION: This snippet refers to the specific Python module path where Django includes its vendored (bundled) version of the 'six' compatibility library. In Django 1.6.9, this library was upgraded to version 1.9.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.9.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.utils.six
```

----------------------------------------

TITLE: Using safeseq template filter in Django
DESCRIPTION: Shows how to use the new safeseq template filter to mark each item in a list as safe for output without escaping.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_9

LANGUAGE: Django Template
CODE:
```
{{ my_list|safeseq }}
```

----------------------------------------

TITLE: Configuring Django Documentation TOC Structure in RST
DESCRIPTION: Sets up the documentation structure using reStructuredText toctree directives. Defines hidden and nested (maxdepth: 3) table of contents sections for organizing Django's documentation into logical categories.
SOURCE: https://github.com/django/django/blob/main/docs/contents.txt#2025-04-23_snippet_0

LANGUAGE: rst
CODE:
```
.. toctree::
    :hidden:

    index

.. toctree::
    :maxdepth: 3

    intro/index
    topics/index
    howto/index
    faq/index
    ref/index
    misc/index
    glossary
    releases/index
    internals/index
```

----------------------------------------

TITLE: MySQL Query Reference
DESCRIPTION: SQL query referenced in MySQL connection bugfix that previously caused crashes when not returning results.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.1.txt#2025-04-23_snippet_0

LANGUAGE: SQL
CODE:
```
SELECT @@SQL_AUTO_IS_NULL
```

----------------------------------------

TITLE: Fixing Slicing of Subwidgets in `BoundField` in Django
DESCRIPTION: Mentions a bugfix (:ticket:`26267`) in Django 1.8.10 that restored the expected behavior allowing slicing operations on subwidgets within a `BoundField` instance.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_10

LANGUAGE: Python
CODE:
```
BoundField
```

----------------------------------------

TITLE: Restoring URL Reversing for Partial Views in Django 1.4.12
DESCRIPTION: This snippet highlights the restoration of the ability to use reverse() on views created with functools.partial(). It addresses a regression from the previous security release.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.12.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
reverse()
```

LANGUAGE: Python
CODE:
```
functools.partial()
```

----------------------------------------

TITLE: Configuring OpenSolaris Library Path
DESCRIPTION: Updates the OpenSolaris system library path using the crle utility.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_2

LANGUAGE: shell
CODE:
```
# crle -l $OLD_PATH:/usr/local/lib
```

----------------------------------------

TITLE: Displaying Password Storage Details in Django Admin
DESCRIPTION: This snippet describes how Django handles password display and management in the admin interface. It explains that passwords are not directly displayed or stored in the database, but password storage details are shown along with a link to a password change form.
SOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_40

LANGUAGE: markdown
CODE:
```
User passwords are not displayed in the admin (nor stored in the database), but
the :doc:`password storage details </topics/auth/passwords>` are displayed.
Included in the display of this information is a link to
a password change form that allows admins to change or unset user passwords.
```

----------------------------------------

TITLE: Referencing Django ticket for ResolverMatch repr bug
DESCRIPTION: This snippet references a Django ticket number for a regression that caused an incorrect repr of ResolverMatch for class-based views in Django 4.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_4

LANGUAGE: plaintext
CODE:
```
:ticket:`33426`
```

----------------------------------------

TITLE: Referencing Django Admindocs Module
DESCRIPTION: Code reference showing the Django admindocs module path affected by CVE-2021-33203 vulnerability.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.24.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.contrib.admindocs
```

----------------------------------------

TITLE: Git Release Tagging Command
DESCRIPTION: Command to create a signed Git tag for a Django release with a specific version number.
SOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
git tag --sign --message="Tag 4.1.1" 4.1.1
```

----------------------------------------

TITLE: Demonstrating Directory Traversal Exploit in Django Template Tag (html+django)
DESCRIPTION: This snippet illustrates a potential directory traversal attack using the ssi template tag in Django when the ALLOWED_INCLUDE_ROOTS setting allows paths such as /var/www. It shows how a crafted relative path can bypass root restrictions to read files outside the intended directory. The input to the ssi tag is a file path, and its abuse could cause the server to include sensitive files like /etc/passwd. Requires Django template rendering context and improper configuration of ALLOWED_INCLUDE_ROOTS.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.3.txt#2025-04-23_snippet_0

LANGUAGE: html+django
CODE:
```
{% ssi "/var/www/../../etc/passwd" %}
```

----------------------------------------

TITLE: Referencing Django GenericIPAddressField Model in Python
DESCRIPTION: This snippet shows how to reference the GenericIPAddressField class from Django's models module. It is mentioned to clarify that this model field was not affected by the security vulnerability addressed in this release.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.18.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
django.db.models.GenericIPAddressField
```

----------------------------------------

TITLE: Defining GeoDjango Documentation Table of Contents
DESCRIPTION: Table of contents directive that structures the documentation hierarchy with a maximum depth of 2 levels, listing all major GeoDjango documentation sections.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/index.txt#2025-04-23_snippet_1

LANGUAGE: restructuredtext
CODE:
```
.. toctree::
    :maxdepth: 2

    tutorial
    install/index
    model-api
    db-api
    forms-api
    geoquerysets
    functions
    measure
    geos
    gdal
    geoip2
    utils
    commands
    admin
    feeds
    sitemaps
    testing
    deployment
```

----------------------------------------

TITLE: Defining Custom Django Model Field (Pre-1.2) in Python
DESCRIPTION: This snippet shows the structure of a custom Django `Field` subclass before version 1.2. It defines methods like `db_type`, `get_db_prep_save`, `get_db_prep_value`, and `get_db_prep_lookup` for handling database type definition and value preparation for saving, general use, and lookups, respectively. This API assumed a single database connection and is contrasted with the changes introduced in Django 1.2.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_3

LANGUAGE: python
CODE:
```
class CustomModelField(models.Field):
    ...

    def db_type(self): ...

    def get_db_prep_save(self, value): ...

    def get_db_prep_value(self, value): ...

    def get_db_prep_lookup(self, lookup_type, value): ...
```

----------------------------------------

TITLE: Fixing GenericRelation Query for Proxy Models in Python
DESCRIPTION: This bugfix resolves a queryset crash that occurred when using a GenericRelation to a proxy model.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.4.txt#2025-04-23_snippet_3

LANGUAGE: Python
CODE:
```
GenericRelation
```

----------------------------------------

TITLE: Referencing Django HTML Utility Function (RST)
DESCRIPTION: This snippet uses a ReStructuredText role to reference the `django.utils.html.urlize()` function within the documentation, indicating its involvement in a potential denial-of-service vulnerability.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_0

LANGUAGE: restructuredtext
CODE:
```
``django.utils.html.urlize()``
```

----------------------------------------

TITLE: SQL Constraint Generation - Platform-Agnostic Example
DESCRIPTION: Example showing how Django 1.1 generates foreign key constraint names after the change, using an 8-character digest regardless of platform word size.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_1

LANGUAGE: sql
CODE:
```
ALTER TABLE myapp_sometable ADD CONSTRAINT object_id_refs_id_32091d1e FOREIGN KEY ...
```

----------------------------------------

TITLE: Comparing Values Using `ifnotequal` Tag in Django Templates (Legacy)
DESCRIPTION: Demonstrates the syntax for the `ifnotequal` template tag, used in versions prior to Django 1.2 for checking inequality between two variables (`a` and `b`). This tag is presented as the older method, now superseded by the enhanced `if` tag introduced in Django 1.2.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_0

LANGUAGE: html+django
CODE:
```
{% ifnotequal a b %}
 ...
{% endifnotequal %}
```

----------------------------------------

TITLE: Importing Translation Functions in Django 1.0
DESCRIPTION: Example of how to import and alias the ugettext function for internationalization in Django 1.0, as _() is no longer in builtins.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
from django.utils.translation import ugettext as _
```

----------------------------------------

TITLE: Referencing Django ORM Prefetch Function (RST)
DESCRIPTION: This snippet references the `Prefetch()` function/class from Django's ORM. It's mentioned in the context of fixing a regression in Django 5.1 that caused a crash for sliced querysets without ordering.
SOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_5

LANGUAGE: restructuredtext
CODE:
```
``Prefetch()``
```

----------------------------------------

TITLE: Importing Forms Module in Django 0.96 (Python)
DESCRIPTION: Shows the recommended way to import the `newforms` module (introduced in Django 0.96) by aliasing it to `forms`. This practice facilitated the transition to Django 1.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_11

LANGUAGE: python
CODE:
```
from django import newforms as forms
```

----------------------------------------

TITLE: Importing GeoDjango Test Runner in Python
DESCRIPTION: Shows the deprecated function-based test runner and the new class-based test runner for GeoDjango. The new runner is preferred for executing the GeoDjango test suite.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.4.txt#2025-04-23_snippet_0

LANGUAGE: Python
CODE:
```
django.contrib.gis.tests.run_gis_tests  # Deprecated
django.contrib.gis.tests.GeoDjangoTestSuiteRunner  # New class-based runner
```

----------------------------------------

TITLE: MySQL SQL Mode Query
DESCRIPTION: SQL query that was causing validation crashes in MySQL database integration
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.2.txt#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
SELECT @@sql_mode
```

----------------------------------------

TITLE: Configuring Django Database Engine for MySQL
DESCRIPTION: Illustrates changing the `DATABASE_ENGINE` setting in Django's settings file. The first snippet shows the standard MySQL engine configuration, while the second shows how to switch to the deprecated 'mysql_old' backend as a temporary workaround for older `MySQLdb` versions (< 1.2.1p2). Upgrading `MySQLdb` is strongly recommended.
SOURCE: https://github.com/django/django/blob/main/docs/releases/0.96.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
DATABASE_ENGINE = "mysql"
```

LANGUAGE: python
CODE:
```
DATABASE_ENGINE = "mysql_old"
```

----------------------------------------

TITLE: Defining Table of Contents for Django Models and Databases Documentation - reStructuredText
DESCRIPTION: This snippet uses reStructuredText directives to define the table of contents and introduce the articles related to Django's models and database layer. The :maxdepth: option specifies how many heading levels to include, while the .. toctree:: directive lists the documentation sub-pages for models and related topics. It requires a Sphinx-compatible build environment and proper file paths for all included documentation files.
SOURCE: https://github.com/django/django/blob/main/docs/topics/db/index.txt#2025-04-23_snippet_0

LANGUAGE: reStructuredText
CODE:
```
.. module:: django.db

A model is the single, definitive source of information about your data. It
contains the essential fields and behaviors of the data you\'re storing.
Generally, each model maps to a single database table.

.. toctree::
   :maxdepth: 1

   models
   queries
   aggregation
   search
   managers
   sql
   transactions
   multi-db
   tablespaces
   optimization
   instrumentation
   fixtures
   examples/index
```

----------------------------------------

TITLE: Updating Spanish Localization Date Format in Django
DESCRIPTION: Example of updating a Spanish localization date format to escape the 'e' and 'o' characters which became format specifiers in Django 1.4. This prevents conflicts with the new date format strings.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_7

LANGUAGE: python
CODE:
```
DATE_FORMAT = r"j \de F \de Y"
```

----------------------------------------

TITLE: Configuring max_allowed_packet in MySQL Configuration - INI
DESCRIPTION: This code snippet shows how to set the max_allowed_packet option in MySQL's configuration file (my.cnf) under the [mysqld] section. The setting increases the allowed packet size to 10 megabytes, which may be necessary for applications handling large queries or data transfers. To apply the change, you must add this line to the [mysqld] section of my.cnf and restart the MySQL server. The parameter value can be adjusted as needed, and no dependencies are required beyond access to the configuration file and server restart capabilities.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/layermapping.txt#2025-04-23_snippet_4

LANGUAGE: ini
CODE:
```
[mysqld]

    max_allowed_packet = 10M
```

----------------------------------------

TITLE: Rebuilding Database Tables After Django Upgrade
DESCRIPTION: This script iterates through all models in a Django project and rebuilds their database tables. It's meant to be used after upgrading to Django 2.0 to recreate foreign keys with new definitions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_11

LANGUAGE: Python
CODE:
```
from django.apps import apps
from django.db import connection

for app in apps.get_app_configs():
    for model in app.get_models(include_auto_created=True):
        if model._meta.managed and not (model._meta.proxy or model._meta.swapped):
            for base in model.__bases__:
                if hasattr(base, "_meta"):
                    base._meta.local_many_to_many = []
            model._meta.local_many_to_many = []
            with connection.schema_editor() as editor:
                editor._remake_table(model)
```

----------------------------------------

TITLE: Setting Name for Class-based Model Indexes in Python
DESCRIPTION: Fixed model initialization to set the name of class-based model indexes for models that only inherit models.Model.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_5

LANGUAGE: Python
CODE:
```
class MyModel(models.Model):
    class Meta:
        indexes = [models.Index(fields=['field_name'])]
```

----------------------------------------

TITLE: PostgreSQL Index Creation with Field Ordering
DESCRIPTION: Resolved crash when creating database indexes with field ordering and opclasses on PostgreSQL.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.7.txt#2025-04-23_snippet_2

LANGUAGE: python
CODE:
```
django.db.models.Index
```

----------------------------------------

TITLE: Potential XSS Vulnerability in Django Debug Template Tag
DESCRIPTION: The {% debug %} template tag in Django 3.2.11 and earlier versions could potentially lead to XSS attacks due to improper encoding of the current context. This vulnerability has been addressed in version 3.2.12.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.12.txt#2025-04-23_snippet_0

LANGUAGE: Django
CODE:
```
{% debug %}
```

----------------------------------------

TITLE: Updating Basque DATE_FORMAT string in Django
DESCRIPTION: Fixes the Basque DATE_FORMAT string to ensure correct date formatting for the Basque locale. This fix is related to ticket #28710.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.7.txt#2025-04-23_snippet_1

LANGUAGE: Python
CODE:
```
DATE_FORMAT
```

----------------------------------------

TITLE: Updating Model Field Definitions for Django 1.0
DESCRIPTION: Examples of updating model field definitions, particularly changing FloatField to DecimalField and adjusting default date values.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_16

LANGUAGE: python
CODE:
```
class Article(models.Model):
    title = models.CharField(maxlength=100)
    published = models.DateField(default=LazyDate())
```

LANGUAGE: python
CODE:
```
import datetime

class Article(models.Model):
    title = models.CharField(max_length=100)
    published = models.DateField(default=datetime.datetime.now)
```

LANGUAGE: python
CODE:
```
class MyModel(models.Model):
    field_name = models.FloatField(max_digits=10, decimal_places=3)
    ...
```

LANGUAGE: python
CODE:
```
class MyModel(models.Model):
    field_name = models.DecimalField(max_digits=10, decimal_places=3)
    ...
```

----------------------------------------

TITLE: Defining a Model in Django 1.0 (Python)
DESCRIPTION: This snippet demonstrates the updated `Author` model definition for Django 1.0. It replaces `maxlength` with `max_length`, removes the `prepopulate_from` argument (moved to admin.py), removes the inner `Admin` class, and replaces the `__str__` method with `__unicode__` which should return a Unicode string.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_1

LANGUAGE: python
CODE:
```
class Author(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    slug = models.CharField(max_length=60)

    def __unicode__(self):
        return u"%s %s" % (self.first_name, self.last_name)
```

----------------------------------------

TITLE: Interpreting Failed Django Test Output
DESCRIPTION: Illustrates the output of a failed Django test run. It provides detailed information about which test failed, including the file, line number, and assertion that caused the failure.
SOURCE: https://github.com/django/django/blob/main/docs/topics/testing/overview.txt#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
======================================================================
FAIL: test_was_published_recently_with_future_poll (polls.tests.PollMethodTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/dev/mysite/polls/tests.py", line 16, in test_was_published_recently_with_future_poll
    self.assertIs(future_poll.was_published_recently(), False)
AssertionError: True is not False

----------------------------------------------------------------------
Ran 1 test in 0.003s

FAILED (failures=1)
```

----------------------------------------

TITLE: Citing Django in APA Style
DESCRIPTION: This snippet demonstrates how to cite Django in APA style for academic or publication purposes. It includes the software name, version, release year, and official website.
SOURCE: https://github.com/django/django/blob/main/docs/faq/general.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
Django (Version 1.5) [Computer Software]. (2013). Retrieved from https://www.djangoproject.com/.
```

----------------------------------------

TITLE: Referencing Django FileField Documentation Link
DESCRIPTION: Code reference showing the path to FileField upload_to attribute documentation in Django's model API.
SOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.23.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.db.models.FileField.upload_to
```

----------------------------------------

TITLE: FileField Deconstruction Fix
DESCRIPTION: Fixed bug where FileField instances with callable storage were not correctly deconstructed in Django 3.1.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.2.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
FileField
```

----------------------------------------

TITLE: LazyObject Compatibility for Python < 2.6
DESCRIPTION: Code snippet showing how to maintain compatibility for LazyObject with Python versions earlier than 2.6 by adding the __members__ property.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_10

LANGUAGE: python
CODE:
```
__members__ = property(lambda self: self.__dir__())
```

----------------------------------------

TITLE: Creating User Message with Deprecated API (Python)
DESCRIPTION: This snippet shows the deprecated method (pre-Django 1.2) of adding a message for a user using `user.message_set.create()`. This API relied directly on the `Message` model and is replaced by the messages framework in `django.contrib.messages`.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_17

LANGUAGE: python
CODE:
```
user.message_set.create("a message")
```

----------------------------------------

TITLE: Altering IP Address Field in MySQL for Django Comments App
DESCRIPTION: SQL query to alter the IP address column in the django_comments table for MySQL databases to support IPv6 addresses, changing it from an IPAddressField to a field that can store longer addresses.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_4

LANGUAGE: sql
CODE:
```
ALTER TABLE django_comments MODIFY ip_address VARCHAR(39);
```

----------------------------------------

TITLE: Django Authentication Form Security Fix References
DESCRIPTION: Code references mentioned in the security fix documentation, highlighting the classes and methods affected by CVE-2018-6188 vulnerability in the AuthenticationForm implementation.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.10.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
django.contrib.auth.forms.AuthenticationForm
```

LANGUAGE: python
CODE:
```
confirm_login_allowed()
```

LANGUAGE: python
CODE:
```
is_active=False
```

LANGUAGE: python
CODE:
```
ModelBackend
```

LANGUAGE: python
CODE:
```
contrib.auth.authenticate()
```

LANGUAGE: python
CODE:
```
ModelAdmin.raw_id_fields
```

----------------------------------------

TITLE: Defining Admin Fieldsets Layout in Django 0.96 (ModelTwo - Python)
DESCRIPTION: This snippet illustrates the old (Django 0.96) `fields` syntax used to define fieldsets within an inner `Admin` class. It defines named groups ('group1', 'group2') with associated fields and CSS classes ('collapse', 'wide'). This syntax is replaced by the more explicit `fieldsets` attribute in Django 1.0.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_6

LANGUAGE: python
CODE:
```
class ModelTwo(models.Model):
    ...

    class Admin:
        fields = (
            ("group1", {"fields": ("foo", "bar"), "classes": "collapse"}),
            ("group2", {"fields": ("spam", "eggs"), "classes": "collapse wide"}),
        )
```

----------------------------------------

TITLE: Linking to Python Bug 17468 using reStructuredText
DESCRIPTION: Uses the reStructuredText `:bpo:` role (bugs.python.org) to create a hyperlink to issue 17468 in the Python bug tracker. The link text displayed is 'a related issue'. This markup links to an upstream Python issue connected to the Django memory leak mentioned in the release notes.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.1.txt#2025-04-23_snippet_1

LANGUAGE: rst
CODE:
```
:bpo:`a related issue <17468>`
```

----------------------------------------

TITLE: Django Installation Error with Old Setuptools - Shell
DESCRIPTION: Shows syntax errors that occur when installing Django 1.9/1.9.1 with setuptools 5.5.x.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_5

LANGUAGE: shell
CODE:
```
Compiling django/conf/app_template/apps.py ...
  File "django/conf/app_template/apps.py", line 4
    class {{ camel_case_app_name }}Config(AppConfig):
          ^
SyntaxError: invalid syntax

Compiling django/conf/app_template/models.py ...
  File "django/conf/app_template/models.py", line 1
    {{ unicode_literals }}from django.db import models
                             ^
SyntaxError: invalid syntax
```

----------------------------------------

TITLE: Referencing NFKC Normalization Function in Python
DESCRIPTION: This code snippet refers to the NFKC normalization function from Python's unicodedata module, which is central to the security vulnerability discussed in the release notes. The function is used for Unicode normalization in Django's UsernameField.
SOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.13.txt#2025-04-23_snippet_0

LANGUAGE: python
CODE:
```
unicodedata.normalize
```

----------------------------------------

TITLE: Demonstrating Vulnerable Host Header in Django 1.3.3 and 1.4.1
DESCRIPTION: This code snippet shows an example of a Host header that would be incorrectly accepted by Django versions 1.3.3 and 1.4.1 when running on validsite.com. It demonstrates how an attacker could inject arbitrary information into the Host header.
SOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.4.txt#2025-04-23_snippet_0

LANGUAGE: text
CODE:
```
Host: validsite.com:random@evilsite.com
```

----------------------------------------

TITLE: Example Data Table Structure
DESCRIPTION: Defines the structure and sample data of a table with three fields (FIELD1, FIELD2, FIELD3) used in subsequent Django aggregate function examples. Note the presence of a null value in FIELD3.
SOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_5

LANGUAGE: text
CODE:
```
| FIELD1 | FIELD2 | FIELD3 |
|--------|--------|--------|
|    foo |      1 |     13 |
|    bar |      2 | (null) |
|   test |      3 |     13 |
```

----------------------------------------

TITLE: Release Checksum Template
DESCRIPTION: Template for creating the release checksum verification file with instructions for GPG key verification.
SOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_6

LANGUAGE: text
CODE:
```
This file contains MD5, SHA1, and SHA256 checksums for the source-code
tarball and wheel files of Django <<VERSION>>, released <<DATE>>.

To use this file, you will need a working install of PGP or other
compatible public-key encryption software. You will also need to have
the Django release manager's public key in your keyring. This key has
the ID ``XXXXXXXXXXXXXXXX`` and can be imported from the MIT
keyserver, for example, if using the open-source GNU Privacy Guard
implementation of PGP:

    gpg --keyserver pgp.mit.edu --recv-key XXXXXXXXXXXXXXXX

or via the GitHub API:

    curl https://github.com/<<RELEASE MANAGER GITHUB USERNAME>>.gpg | gpg --import -

Once the key is imported, verify this file:

    gpg --verify <<THIS FILENAME>>

Once you have verified this file, you can use normal MD5, SHA1, or SHA256
checksumming applications to generate the checksums of the Django
package and compare them to the checksums listed below.

Release packages
================

https://www.djangoproject.com/download/<<VERSION>>/tarball/
https://www.djangoproject.com/download/<<VERSION>>/wheel/

MD5 checksums
=============

<<MD5SUM>>  <<RELEASE TAR.GZ FILENAME>>
<<MD5SUM>>  <<RELEASE WHL FILENAME>>

SHA1 checksums
==============

<<SHA1SUM>>  <<RELEASE TAR.GZ FILENAME>>
<<SHA1SUM>>  <<RELEASE WHL FILENAME>>

SHA256 checksums
================

<<SHA256SUM>>  <<RELEASE TAR.GZ FILENAME>>
<<SHA256SUM>>  <<RELEASE WHL FILENAME>>
```

----------------------------------------

TITLE: Creating a Table of Contents for Django FAQ in reStructuredText
DESCRIPTION: This snippet defines a table of contents for Django FAQ documentation using reStructuredText syntax. It specifies a maximum depth of 2 levels and includes links to various FAQ topic pages.
SOURCE: https://github.com/django/django/blob/main/docs/faq/index.txt#2025-04-23_snippet_0

LANGUAGE: reStructuredText
CODE:
```
.. toctree::
   :maxdepth: 2

   general
   install
   usage
   help
   models
   admin
   contributing
   troubleshooting
```

----------------------------------------

TITLE: Django Security Documentation Structure in reStructuredText
DESCRIPTION: Documentation outlining Django's security policies, severity levels, disclosure process, and notification procedures. Written in reStructuredText format with sections covering support policy, severity classifications, and notification request requirements.
SOURCE: https://github.com/django/django/blob/main/docs/internals/security.txt#2025-04-23_snippet_3

LANGUAGE: reStructuredText
CODE:
```
.. _severity-levels:\n\nSecurity issue severity levels\n==============================\n\nThe severity level of a security vulnerability is determined by the attack\ntype.\n\nSeverity levels are:\n\n* **High**\n\n  * Remote code execution\n  * SQL injection\n\n* **Moderate**\n\n  * Cross site scripting (XSS)\n  * Cross site request forgery (CSRF)\n  * Denial-of-service attacks\n  * Broken authentication\n\n* **Low**\n\n  * Sensitive data exposure\n  * Broken session management\n  * Unvalidated redirects/forwards\n  * Issues requiring an uncommon configuration option
```

----------------------------------------

TITLE: Linking Django Release Notes using reStructuredText toctree
DESCRIPTION: These snippets use the reStructuredText `toctree` directive to generate tables of contents that link to specific Django release note documents. Each `toctree` corresponds to a major Django release series (e.g., 6.0, 5.2, 5.1, etc.) and lists the pages for the major version and its subsequent patch releases. The `:maxdepth: 1` option ensures that only the top-level headings from the linked documents are included in the generated table of contents for this index page. This pattern is repeated for all documented Django versions.
SOURCE: https://github.com/django/django/blob/main/docs/releases/index.txt#2025-04-23_snippet_0

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   6.0
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   5.2.1
   5.2
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   5.1.9
   5.1.8
   5.1.7
   5.1.6
   5.1.5
   5.1.4
   5.1.3
   5.1.2
   5.1.1
   5.1
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   5.0.14
   5.0.13
   5.0.12
   5.0.11
   5.0.10
   5.0.9
   5.0.8
   5.0.7
   5.0.6
   5.0.5
   5.0.4
   5.0.3
   5.0.2
   5.0.1
   5.0
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   4.2.21
   4.2.20
   4.2.19
   4.2.18
   4.2.17
   4.2.16
   4.2.15
   4.2.14
   4.2.13
   4.2.12
   4.2.11
   4.2.10
   4.2.9
   4.2.8
   4.2.7
   4.2.6
   4.2.5
   4.2.4
   4.2.3
   4.2.2
   4.2.1
   4.2
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   4.1.13
   4.1.12
   4.1.11
   4.1.10
   4.1.9
   4.1.8
   4.1.7
   4.1.6
   4.1.5
   4.1.4
   4.1.3
   4.1.2
   4.1.1
   4.1
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   4.0.10
   4.0.9
   4.0.8
   4.0.7
   4.0.6
   4.0.5
   4.0.4
   4.0.3
   4.0.2
   4.0.1
   4.0
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   3.2.25
   3.2.24
   3.2.23
   3.2.22
   3.2.21
   3.2.20
   3.2.19
   3.2.18
   3.2.17
   3.2.16
   3.2.15
   3.2.14
   3.2.13
   3.2.12
   3.2.11
   3.2.10
   3.2.9
   3.2.8
   3.2.7
   3.2.6
   3.2.5
   3.2.4
   3.2.3
   3.2.2
   3.2.1
   3.2
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   3.1.14
   3.1.13
   3.1.12
   3.1.11
   3.1.10
   3.1.9
   3.1.8
   3.1.7
   3.1.6
   3.1.5
   3.1.4
   3.1.3
   3.1.2
   3.1.1
   3.1
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   3.0.14
   3.0.13
   3.0.12
   3.0.11
   3.0.10
   3.0.9
   3.0.8
   3.0.7
   3.0.6
   3.0.5
   3.0.4
   3.0.3
   3.0.2
   3.0.1
   3.0
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   2.2.28
   2.2.27
   2.2.26
   2.2.25
   2.2.24
   2.2.23
   2.2.22
   2.2.21
   2.2.20
   2.2.19
   2.2.18
   2.2.17
   2.2.16
   2.2.15
   2.2.14
   2.2.13
   2.2.12
   2.2.11
   2.2.10
   2.2.9
   2.2.8
   2.2.7
   2.2.6
   2.2.5
   2.2.4
   2.2.3
   2.2.2
   2.2.1
   2.2
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   2.1.15
   2.1.14
   2.1.13
   2.1.12
   2.1.11
   2.1.10
   2.1.9
   2.1.8
   2.1.7
   2.1.6
   2.1.5
   2.1.4
   2.1.3
   2.1.2
   2.1.1
   2.1
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   2.0.13
   2.0.12
   2.0.11
   2.0.10
   2.0.9
   2.0.8
   2.0.7
   2.0.6
   2.0.5
   2.0.4
   2.0.3
   2.0.2
   2.0.1
   2.0
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   1.11.29
   1.11.28
   1.11.27
   1.11.26
   1.11.25
   1.11.24
   1.11.23
   1.11.22
   1.11.21
   1.11.20
   1.11.19
   1.11.18
   1.11.17
   1.11.16
   1.11.15
   1.11.14
   1.11.13
   1.11.12
   1.11.11
   1.11.10
   1.11.9
   1.11.8
   1.11.7
   1.11.6
   1.11.5
   1.11.4
   1.11.3
   1.11.2
   1.11.1
   1.11
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   1.10.8
   1.10.7
   1.10.6
   1.10.5
   1.10.4
   1.10.3
   1.10.2
   1.10.1
   1.10
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   1.9.13
   1.9.12
   1.9.11
   1.9.10
   1.9.9
   1.9.8
   1.9.7
   1.9.6
   1.9.5
   1.9.4
   1.9.3
   1.9.2
   1.9.1
   1.9
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   1.8.19
   1.8.18
   1.8.17
   1.8.16
   1.8.15
   1.8.14
   1.8.13
   1.8.12
   1.8.11
   1.8.10
   1.8.9
   1.8.8
   1.8.7
   1.8.6
   1.8.5
   1.8.4
   1.8.3
   1.8.2
   1.8.1
   1.8
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   1.7.11
   1.7.10
   1.7.9
   1.7.8
   1.7.7
   1.7.6
   1.7.5
   1.7.4
   1.7.3
   1.7.2
   1.7.1
   1.7
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   1.6.11
   1.6.10
   1.6.9
   1.6.8
   1.6.7
   1.6.6
   1.6.5
   1.6.4
   1.6.3
   1.6.2
   1.6.1
   1.6
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   1.5.12
   1.5.11
   1.5.10
   1.5.9
   1.5.8
   1.5.7
   1.5.6
   1.5.5
   1.5.4
   1.5.3
   1.5.2
   1.5.1
   1.5
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   1.4.22
   1.4.21
   1.4.20
   1.4.19
   1.4.18
   1.4.17
   1.4.16
   1.4.15
   1.4.14
   1.4.13
   1.4.12
   1.4.11
   1.4.10
   1.4.9
   1.4.8
   1.4.7
   1.4.6
   1.4.5
   1.4.4
   1.4.3
   1.4.2
   1.4.1
   1.4
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   1.3.7
   1.3.6
   1.3.5
   1.3.4
   1.3.3
   1.3.2
   1.3.1
   1.3
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   1.2.7
   1.2.6
   1.2.5
   1.2.4
   1.2.3
   1.2.2
   1.2.1
   1.2
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   1.1.4
   1.1.3
   1.1.2
   1.1
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   1.0.2
   1.0.1
   1.0
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :maxdepth: 1

   0.96
   0.95
```

LANGUAGE: rst
CODE:
```
.. toctree::
   :hidden:

   security
```

----------------------------------------

TITLE: SQL Injection Parameter Reference
DESCRIPTION: Reference to the tolerance parameter that was vulnerable to SQL injection in GIS functions on Oracle.
SOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.4.txt#2025-04-23_snippet_2

LANGUAGE: sql
CODE:
```
tolerance
```

----------------------------------------

TITLE: Git Push Branch and Branch Deletion Commands
DESCRIPTION: Demonstrates how to push a feature branch to upstream and then delete it using Git commands. The example shows pushing a branch named 'feature_antigravity' and then deleting it using the colon syntax.
SOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/committing-code.txt#2025-04-23_snippet_4

LANGUAGE: shell
CODE:
```
git push upstream feature_antigravity
```

LANGUAGE: shell
CODE:
```
git push upstream :feature_antigravity
```

----------------------------------------

TITLE: No code snippets found
DESCRIPTION: This document is a design philosophy guide and contains no code snippets.
SOURCE: https://github.com/django/django/blob/main/docs/misc/design-philosophies.txt#2025-04-23_snippet_0

