TITLE: Form Setup with React Hook Form
DESCRIPTION: Implementation of form setup using useForm hook with Zod validation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
"use client"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"

const formSchema = z.object({
  username: z.string().min(2, {
    message: "Username must be at least 2 characters.",
  }),
})

export function ProfileForm() {
  // 1. Define your form.
  const form = useForm<z.infer<typeof formSchema>>({ 
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: "",
    },
  })

  // 2. Define a submit handler.
  function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // âœ… This will be type-safe and validated.
    console.log(values)
  }
}
```

----------------------------------------

TITLE: Implementing DataTable Component with Row Selection in React
DESCRIPTION: A React component that implements a data table with sorting, filtering, pagination, column visibility, and row selection functionality using React Table.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_12

LANGUAGE: tsx
CODE:
```
export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({})
  const [rowSelection, setRowSelection] = React.useState({})

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  })

  return (
    <div>
      <div className="rounded-md border">
        <Table />
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Configure Global Styles (globals.css)
DESCRIPTION: Configures global styles in the `globals.css` file, importing Tailwind CSS and tw-animate-css, defining custom variants for dark mode, and setting CSS variables for theming. The code block includes theme definitions for both light and dark modes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_2

LANGUAGE: css
CODE:
```
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

----------------------------------------

TITLE: Complete Form Implementation
DESCRIPTION: Full example of a form implementation with all components and validation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
"use client"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"

import { Button } from "@/components/ui/button"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"

const formSchema = z.object({
  username: z.string().min(2, {
    message: "Username must be at least 2 characters.",
  }),
})

export function ProfileForm() {
  // ...

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder="shadcn" {...field} />
              </FormControl>
              <FormDescription>
                This is your public display name.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  )
}
```

----------------------------------------

TITLE: Importing useToast Hook
DESCRIPTION: How to import the useToast hook to display toast notifications in your components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-22_snippet_4

LANGUAGE: tsx
CODE:
```
import { useToast } from "@/hooks/use-toast"
```

----------------------------------------

TITLE: Implementing Row Selection in React Table
DESCRIPTION: This snippet shows how to add row selection functionality to the DataTable. It includes updating the column definitions to include a selection checkbox for each row and the header.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_11

LANGUAGE: tsx
CODE:
```
"use client"

import { ColumnDef } from "@tanstack/react-table"

import { Badge } from "@/components/ui/badge"
import { Checkbox } from "@/components/ui/checkbox"

export const columns: ColumnDef<Payment>[] = [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
]
```

----------------------------------------

TITLE: Basic Form Structure with React Hook Form
DESCRIPTION: Demonstrates the basic anatomy of a form using the Form and FormField components with React Hook Form.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
<Form>
  <FormField
    control={...}
    name="..."
    render={() => (
      <FormItem>
        <FormLabel />
        <FormControl>
          { /* Your form field */}
        </FormControl>
        <FormDescription />
        <FormMessage />
      </FormItem>
    )}
  />
</Form>
```

----------------------------------------

TITLE: Implementing Pagination in React Table Component
DESCRIPTION: This snippet shows how to add pagination to a DataTable component using @tanstack/react-table. It includes setting up the table instance with pagination model and adding pagination controls.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_7

LANGUAGE: tsx
CODE:
```
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  useReactTable,
} from "@tanstack/react-table"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  })

  // ...
}
```

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  })

  return (
    <div>
      <div className="rounded-md border">
        <Table>
          { // .... }
        </Table>
      </div>
      <div className="flex items-center justify-end space-x-2 py-4">
        <Button
          variant="outline"
          size="sm"
          onClick={() => table.previousPage()}
          disabled={!table.getCanPreviousPage()}
        >
          Previous
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => table.nextPage()}
          disabled={!table.getCanNextPage()}
        >
          Next
        </Button>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing ThemeProvider in Next.js root layout
DESCRIPTION: Demonstrates how to wrap the root layout with the ThemeProvider component. It also adds the suppressHydrationWarning prop to the html tag to prevent hydration warnings related to theme changes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/next.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { ThemeProvider } from "@/components/theme-provider"

export default function RootLayout({ children }: RootLayoutProps) {
  return (
    <>
      <html lang="en" suppressHydrationWarning>
        <head />
        <body>
          <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
          >
            {children}
          </ThemeProvider>
        </body>
      </html>
    </>
  )
}
```

----------------------------------------

TITLE: Implementing Filtering in React Table Component
DESCRIPTION: This snippet shows how to add filtering capabilities to the DataTable. It includes updating the table instance with column filters state and model, and adding a search input for email filtering.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      sorting,
      columnFilters,
    },
  })

  return (
    <div>
      <div className="flex items-center py-4">
        <Input
          placeholder="Filter emails..."
          value={(table.getColumn("email")?.getFilterValue() as string) ?? ""}
          onChange={(event) =>
            table.getColumn("email")?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
      </div>
      <div className="rounded-md border">
        <Table>{ ... }</Table>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Initializing shadcn Project with CLI
DESCRIPTION: Use the 'init' command to initialize configuration and dependencies for a new project. This command installs dependencies, adds the 'cn' util, and configures CSS variables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Defining Slate Theme Color Variables in CSS
DESCRIPTION: This CSS defines a complete color theme system with light and dark mode variables using the OKLCH color space. It includes variables for background, foreground, interactive elements (cards, popovers), state indicators (primary, secondary, accent), as well as specialized variables for charts and sidebar components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_7

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.129 0.042 264.695);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.129 0.042 264.695);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.129 0.042 264.695);
  --primary: oklch(0.208 0.042 265.755);
  --primary-foreground: oklch(0.984 0.003 247.858);
  --secondary: oklch(0.968 0.007 247.896);
  --secondary-foreground: oklch(0.208 0.042 265.755);
  --muted: oklch(0.968 0.007 247.896);
  --muted-foreground: oklch(0.554 0.046 257.417);
  --accent: oklch(0.968 0.007 247.896);
  --accent-foreground: oklch(0.208 0.042 265.755);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.929 0.013 255.508);
  --input: oklch(0.929 0.013 255.508);
  --ring: oklch(0.704 0.04 256.788);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.984 0.003 247.858);
  --sidebar-foreground: oklch(0.129 0.042 264.695);
  --sidebar-primary: oklch(0.208 0.042 265.755);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.968 0.007 247.896);
  --sidebar-accent-foreground: oklch(0.208 0.042 265.755);
  --sidebar-border: oklch(0.929 0.013 255.508);
  --sidebar-ring: oklch(0.704 0.04 256.788);
}

.dark {
  --background: oklch(0.129 0.042 264.695);
  --foreground: oklch(0.984 0.003 247.858);
  --card: oklch(0.208 0.042 265.755);
  --card-foreground: oklch(0.984 0.003 247.858);
  --popover: oklch(0.208 0.042 265.755);
  --popover-foreground: oklch(0.984 0.003 247.858);
  --primary: oklch(0.929 0.013 255.508);
  --primary-foreground: oklch(0.208 0.042 265.755);
  --secondary: oklch(0.279 0.041 260.031);
  --secondary-foreground: oklch(0.984 0.003 247.858);
  --muted: oklch(0.279 0.041 260.031);
  --muted-foreground: oklch(0.704 0.04 256.788);
  --accent: oklch(0.279 0.041 260.031);
  --accent-foreground: oklch(0.984 0.003 247.858);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.551 0.027 264.364);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.208 0.042 265.755);
  --sidebar-foreground: oklch(0.984 0.003 247.858);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.279 0.041 260.031);
  --sidebar-accent-foreground: oklch(0.984 0.003 247.858);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.551 0.027 264.364);
}
```

----------------------------------------

TITLE: Adding Column Visibility Control to React Table
DESCRIPTION: This snippet demonstrates how to implement column visibility control in the DataTable. It includes updating the table instance with visibility state and adding a dropdown menu for toggling column visibility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_10

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({})

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
    },
  })

  return (
    <div>
      <div className="flex items-center py-4">
        <Input
          placeholder="Filter emails..."
          value={table.getColumn("email")?.getFilterValue() as string}
          onChange={(event) =>
            table.getColumn("email")?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="ml-auto">
              Columns
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            {table
              .getAllColumns()
              .filter(
                (column) => column.getCanHide()
              )
              .map((column) => {
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    className="capitalize"
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) =>
                      column.toggleVisibility(!!value)
                    }
                  >
                    {column.id}
                  </DropdownMenuCheckboxItem>
                )
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <div className="rounded-md border">
        <Table>{ ... }</Table>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Adding Toaster Component to Layout
DESCRIPTION: Code example showing how to integrate the Toaster component into the root layout of a React application, which is necessary to display toast notifications.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sonner.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { Toaster } from "@/components/ui/sonner"

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Creating a ThemeProvider component in Next.js
DESCRIPTION: Defines a ThemeProvider component that wraps the NextThemesProvider from next-themes. This component will be used to provide theme context to the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/next.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
```

----------------------------------------

TITLE: Adding Sorting Functionality to React Table
DESCRIPTION: This snippet demonstrates how to implement sorting in the DataTable component. It includes updating the table instance with sorting state and model, and making a header cell sortable.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import {
  ColumnDef,
  SortingState,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    state: {
      sorting,
    },
  })

  return (
    <div>
      <div className="rounded-md border">
        <Table>{ ... }</Table>
      </div>
    </div>
  )
}
```

LANGUAGE: tsx
CODE:
```
"use client"

import { ColumnDef } from "@tanstack/react-table"
import { ArrowUpDown } from "lucide-react"

export const columns: ColumnDef<Payment>[] = [
  {
    accessorKey: "email",
    header: ({ column }) => {
      return (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          Email
          <ArrowUpDown className="ml-2 h-4 w-4" />
        </Button>
      )
    },
  },
]
```

----------------------------------------

TITLE: Defining Payment Data Type and Sample Data in TypeScript
DESCRIPTION: Defines the Payment type and provides sample payment data for the table.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
type Payment = {
  id: string
  amount: number
  status: "pending" | "processing" | "success" | "failed"
  email: string
}

export const payments: Payment[] = [
  {
    id: "728ed52f",
    amount: 100,
    status: "pending",
    email: "m@example.com",
  },
  {
    id: "489e1d42",
    amount: 125,
    status: "processing",
    email: "example@gmail.com",
  },
  // ...
]
```

----------------------------------------

TITLE: Creating a Reusable DataTable Component with TanStack Table
DESCRIPTION: Implements a reusable DataTable component using TanStack Table and shadcn/ui Table components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
"use client"

import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
}

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  })

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          {table.getHeaderGroups().map((headerGroup) => (
            <TableRow key={headerGroup.id}>
              {headerGroup.headers.map((header) => {
                return (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                )
              })}
            </TableRow>
          ))}
        </TableHeader>
        <TableBody>
          {table.getRowModel().rows?.length ? (
            table.getRowModel().rows.map((row) => (
              <TableRow
                key={row.id}
                data-state={row.getIsSelected() && "selected"}
              >
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={columns.length} className="h-24 text-center">
                No results.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  )
}
```

----------------------------------------

TITLE: Initializing shadcn/ui in Next.js Project
DESCRIPTION: Command to create a new Next.js project or configure an existing one with shadcn/ui. This command launches an interactive setup process where you can choose between a standalone Next.js project or a Monorepo setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Implementing Theme Toggle Component
DESCRIPTION: Creates a dropdown menu component for toggling between light, dark, and system themes. Includes animated icons and accessibility features.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/vite.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Moon, Sun } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { useTheme } from "@/components/theme-provider"

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

----------------------------------------

TITLE: Configuring Tailwind Content Paths
DESCRIPTION: Tailwind configuration to include registry components in the build process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#2025-04-21_snippet_2

LANGUAGE: ts
CODE:
```
// tailwind.config.ts
export default {
  content: ["./registry/**/*.{js,ts,jsx,tsx}"],
}
```

----------------------------------------

TITLE: Basic Select Component Implementation
DESCRIPTION: Example implementation of a theme selector using the Select component with Light, Dark, and System options.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Select>
  <SelectTrigger className="w-[180px]">
    <SelectValue placeholder="Theme" />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value="light">Light</SelectItem>
    <SelectItem value="dark">Dark</SelectItem>
    <SelectItem value="system">System</SelectItem>
  </SelectContent>
</Select>
```

----------------------------------------

TITLE: Using Drawer Component in React
DESCRIPTION: Example of using the Drawer component with its sub-components in a React application. It demonstrates how to structure a drawer with a trigger, content, header, footer, and close button.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Drawer>
  <DrawerTrigger>Open</DrawerTrigger>
  <DrawerContent>
    <DrawerHeader>
      <DrawerTitle>Are you absolutely sure?</DrawerTitle>
      <DrawerDescription>This action cannot be undone.</DrawerDescription>
    </DrawerHeader>
    <DrawerFooter>
      <Button>Submit</Button>
      <DrawerClose>
        <Button variant="outline">Cancel</Button>
      </DrawerClose>
    </DrawerFooter>
  </DrawerContent>
</Drawer>
```

----------------------------------------

TITLE: Style Configuration - JSON
DESCRIPTION: Configuration for setting the component style theme. This setting cannot be changed after initialization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "style": "new-york"
}
```

----------------------------------------

TITLE: Form Field Implementation Example
DESCRIPTION: Shows a practical example of implementing a username form field with React Hook Form.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
const form = useForm()

<FormField
  control={form.control}
  name="username"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Username</FormLabel>
      <FormControl>
        <Input placeholder="shadcn" {...field} />
      </FormControl>
      <FormDescription>This is your public display name.</FormDescription>
      <FormMessage />
    </FormItem>
  )}
/>
```

----------------------------------------

TITLE: Creating Theme Provider Context in React
DESCRIPTION: Implements a ThemeProvider component using React Context to manage theme state (dark/light/system) with local storage persistence. Includes a custom hook useTheme for accessing theme context throughout the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/vite.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { createContext, useContext, useEffect, useState } from "react"

type Theme = "dark" | "light" | "system"

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light"

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider")

  return context
}
```

----------------------------------------

TITLE: Defining Column Definitions for Payment Data Table
DESCRIPTION: Creates column definitions for the Payment data table using TanStack Table's ColumnDef.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
"use client"

import { ColumnDef } from "@tanstack/react-table"

// This type is used to define the shape of our data.
// You can use a Zod schema here if you want.
export type Payment = {
  id: string
  amount: number
  status: "pending" | "processing" | "success" | "failed"
  email: string
}

export const columns: ColumnDef<Payment>[] = [
  {
    accessorKey: "status",
    header: "Status",
  },
  {
    accessorKey: "email",
    header: "Email",
  },
  {
    accessorKey: "amount",
    header: "Amount",
  },
]
```

----------------------------------------

TITLE: Defining Advanced Chart Configuration with Icons in TypeScript
DESCRIPTION: This snippet shows an advanced chart configuration object that includes labels, icons, and theme-specific colors. It demonstrates how to use the ChartConfig type for type safety.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { Monitor } from "lucide-react"

import { type ChartConfig } from "@/components/ui/chart"

const chartConfig = {
  desktop: {
    label: "Desktop",
    icon: Monitor,
    // A color like 'hsl(220, 98%, 61%)' or 'var(--color-name)'
    color: "#2563eb",
    // OR a theme object with 'light' and 'dark' keys
    theme: {
      light: "#2563eb",
      dark: "#dc2626",
    },
  },
} satisfies ChartConfig
```

----------------------------------------

TITLE: Using Tabs Component in React
DESCRIPTION: This example demonstrates how to use the Tabs component in a React application, creating a tabbed interface with 'Account' and 'Password' sections.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tabs.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Tabs defaultValue="account" className="w-[400px]">
  <TabsList>
    <TabsTrigger value="account">Account</TabsTrigger>
    <TabsTrigger value="password">Password</TabsTrigger>
  </TabsList>
  <TabsContent value="account">Make changes to your account here.</TabsContent>
  <TabsContent value="password">Change your password here.</TabsContent>
</Tabs>
```

----------------------------------------

TITLE: Basic Usage of Navigation Menu in React
DESCRIPTION: Example of how to use the Navigation Menu components to create a basic menu structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<NavigationMenu>
  <NavigationMenuList>
    <NavigationMenuItem>
      <NavigationMenuTrigger>Item One</NavigationMenuTrigger>
      <NavigationMenuContent>
        <NavigationMenuLink>Link</NavigationMenuLink>
      </NavigationMenuContent>
    </NavigationMenuItem>
  </NavigationMenuList>
</NavigationMenu>
```

----------------------------------------

TITLE: Framework Integration Cards Component in JSX
DESCRIPTION: A React component that displays a grid of linked cards showing different framework integration options. Each card contains an SVG icon and framework name using Tailwind CSS for styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_1

LANGUAGE: JSX
CODE:
```
<div className="grid sm:grid-cols-2 gap-4 mt-8 sm:gap-6">
  <LinkedCard href="/docs/installation/next">
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      className="w-10 h-10"
      fill="currentColor"
    >
      <title>Next.js</title>
      <path d="M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z" />
    </svg>
    <p className="font-medium mt-2">Next.js</p>
  </LinkedCard>
  <!-- Additional framework cards omitted for brevity -->
</div>
```

----------------------------------------

TITLE: Implementing Persisted Sidebar State in Next.js
DESCRIPTION: Shows how to set up the SidebarProvider in a Next.js application to persist the sidebar state across page reloads using cookies. This example is typically placed in the app/layout.tsx file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
import { cookies } from "next/headers"

import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar"
import { AppSidebar } from "@/components/app-sidebar"

export async function Layout({ children }: { children: React.ReactNode }) {
  const cookieStore = await cookies()
  const defaultOpen = cookieStore.get("sidebar_state")?.value === "true"

  return (
    <SidebarProvider defaultOpen={defaultOpen}>
      <AppSidebar />
      <main>
        <SidebarTrigger />
        {children}
      </main>
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Integrating ThemeProvider in Root Layout
DESCRIPTION: Shows how to wrap the application's root component with the ThemeProvider, setting default theme and storage key configurations.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/vite.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { ThemeProvider } from "@/components/theme-provider"

function App() {
  return (
    <ThemeProvider defaultTheme="dark" storageKey="vite-ui-theme">
      {children}
    </ThemeProvider>
  )
}

export default App
```

----------------------------------------

TITLE: Configuring Components JSON Schema
DESCRIPTION: Configuration file showing the updated components.json structure with import aliases for components, utils, UI, lib and hooks
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "tailwind": {
    // ...
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
```

----------------------------------------

TITLE: Adding Pagination Controls to DataTable
DESCRIPTION: Implementation of pagination controls in a DataTable using the DataTablePagination component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_15

LANGUAGE: tsx
CODE:
```
<DataTablePagination table={table} />
```

----------------------------------------

TITLE: Command Dialog Menu Implementation - TypeScript React
DESCRIPTION: Implementation of a command menu in a dialog with keyboard shortcut (Cmd/Ctrl + K) to toggle visibility
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/command.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
export function CommandMenu() {
  const [open, setOpen] = React.useState(false)

  React.useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === "k" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault()
        setOpen((open) => !open)
      }
    }
    document.addEventListener("keydown", down)
    return () => document.removeEventListener("keydown", down)
  }, [])

  return (
    <CommandDialog open={open} onOpenChange={setOpen}>
      <CommandInput placeholder="Type a command or search..." />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>
        <CommandGroup heading="Suggestions">
          <CommandItem>Calendar</CommandItem>
          <CommandItem>Search Emoji</CommandItem>
          <CommandItem>Calculator</CommandItem>
        </CommandGroup>
      </CommandList>
    </CommandDialog>
  )
}
```

----------------------------------------

TITLE: Creating a Complete Bar Chart with Grid, Axis, Tooltip, and Legend in TypeScript
DESCRIPTION: This comprehensive example demonstrates how to create a fully-featured bar chart using Recharts and custom components. It includes a grid, x-axis, tooltip, and legend.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
import { Bar, BarChart, CartesianGrid, XAxis } from "recharts"
import { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from "@/components/ui/chart"

<ChartContainer config={chartConfig} className="h-[200px] w-full">
  <BarChart accessibilityLayer data={chartData}>
    <CartesianGrid vertical={false} />
    <XAxis
      dataKey="month"
      tickLine={false}
      tickMargin={10}
      axisLine={false}
      tickFormatter={(value) => value.slice(0, 3)}
    />
    <ChartTooltip content={<ChartTooltipContent />} />
    <ChartLegend content={<ChartLegendContent />} />
    <Bar dataKey="desktop" fill="var(--color-desktop)" radius={4} />
    <Bar dataKey="mobile" fill="var(--color-mobile)" radius={4} />
  </BarChart>
</ChartContainer>
```

----------------------------------------

TITLE: Root CSS Variables Definition
DESCRIPTION: Complete list of CSS custom properties defining the theme variables for both light and dark modes
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_3

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}
```

----------------------------------------

TITLE: Adding Column Visibility Toggle to DataTable
DESCRIPTION: Implementation of a column visibility toggle in a DataTable using the DataTableViewOptions component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_16

LANGUAGE: tsx
CODE:
```
<DataTableViewOptions table={table} />
```

----------------------------------------

TITLE: Updated CSS Variables with Inline Theme
DESCRIPTION: Demonstrates the updated CSS variable configuration using @theme inline directive and HSL color values.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_3

LANGUAGE: css
CODE:
```
:root {
  --background: hsl(0 0% 100%);
  --foreground: hsl(0 0% 3.9%);
}

.dark {
  --background: hsl(0 0% 3.9%);
  --foreground: hsl(0 0% 98%);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
}
```

----------------------------------------

TITLE: Configure Path Aliases (tsconfig.json)
DESCRIPTION: Configures the path aliases in the `tsconfig.json` file, setting the base URL and defining an alias `@/*` to point to the root directory.  This allows for cleaner imports.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  }
}
```

----------------------------------------

TITLE: Implementing Mode Toggle Component in React
DESCRIPTION: This snippet shows the implementation of a ModeToggle component using React. It uses a dropdown menu to allow users to switch between light, dark, and system themes, and updates the document's class list accordingly.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/astro.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import * as React from "react"
import { Moon, Sun } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function ModeToggle() {
  const [theme, setThemeState] = React.useState<
    "theme-light" | "dark" | "system"
  >("theme-light")

  React.useEffect(() => {
    const isDarkMode = document.documentElement.classList.contains("dark")
    setThemeState(isDarkMode ? "dark" : "theme-light")
  }, [])

  React.useEffect(() => {
    const isDark =
      theme === "dark" ||
      (theme === "system" &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    document.documentElement.classList[isDark ? "add" : "remove"]("dark")
  }, [theme])

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setThemeState("theme-light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setThemeState("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setThemeState("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

----------------------------------------

TITLE: Basic Card Component Usage
DESCRIPTION: Example showing the basic structure of a card component with header, content, and footer sections
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card Description</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Card Content</p>
  </CardContent>
  <CardFooter>
    <p>Card Footer</p>
  </CardFooter>
</Card>
```

----------------------------------------

TITLE: Initial CSS Variables Configuration
DESCRIPTION: Shows the initial CSS variable setup with @layer base and @theme directives for managing color themes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_2

LANGUAGE: css
CODE:
```
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
  }
}

@theme {
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));
}
```

----------------------------------------

TITLE: Basic Command Menu Implementation - TypeScript React
DESCRIPTION: Example of implementing a basic command menu with groups, items, and separators
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/command.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Command>
  <CommandInput placeholder="Type a command or search..." />
  <CommandList>
    <CommandEmpty>No results found.</CommandEmpty>
    <CommandGroup heading="Suggestions">
      <CommandItem>Calendar</CommandItem>
      <CommandItem>Search Emoji</CommandItem>
      <CommandItem>Calculator</CommandItem>
    </CommandGroup>
    <CommandSeparator />
    <CommandGroup heading="Settings">
      <CommandItem>Profile</CommandItem>
      <CommandItem>Billing</CommandItem>
      <CommandItem>Settings</CommandItem>
    </CommandGroup>
  </CommandList>
</Command>
```

----------------------------------------

TITLE: Creating Inline Theme Script in Astro
DESCRIPTION: This snippet demonstrates how to create an inline script in Astro to handle theme preferences. It checks localStorage and system preferences to set the initial theme, and observes changes to update localStorage accordingly.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/astro.mdx#2025-04-21_snippet_0

LANGUAGE: astro
CODE:
```
---
import '../styles/globals.css'
---

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>

<html lang="en">
	<body>
      <h1>Astro</h1>
	</body>
</html>
```

----------------------------------------

TITLE: Defining Neutral Theme Colors in OKLCH
DESCRIPTION: CSS variables defining the Neutral color theme using OKLCH color space. Provides color definitions for both light and dark modes with a more neutral color palette.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_5

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}
```

----------------------------------------

TITLE: Using Carousel API for Slide Counter
DESCRIPTION: Example showing how to access and use the Carousel API to implement a slide counter that updates as the carousel navigates.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_10

LANGUAGE: tsx
CODE:
```
import { type CarouselApi } from "@/components/ui/carousel"

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()
  const [current, setCurrent] = React.useState(0)
  const [count, setCount] = React.useState(0)

  React.useEffect(() => {
    if (!api) {
      return
    }

    setCount(api.scrollSnapList().length)
    setCurrent(api.selectedScrollSnap() + 1)

    api.on("select", () => {
      setCurrent(api.selectedScrollSnap() + 1)
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}
```

----------------------------------------

TITLE: Create cn Helper (utils.ts)
DESCRIPTION: Creates a utility function `cn` using `clsx` and `tailwind-merge` to simplify class name handling in React components. It accepts multiple class name inputs and merges them.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

----------------------------------------

TITLE: Implementing a Complete Sidebar with Navigation Menu
DESCRIPTION: A comprehensive implementation of a sidebar with a navigation menu using SidebarMenu and related components. The example includes icon integration and a responsive design that supports collapsing.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import { Calendar, Home, Inbox, Search, Settings } from "lucide-react"

import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar"

// Menu items.
const items = [
  {
    title: "Home",
    url: "#",
    icon: Home,
  },
  {
    title: "Inbox",
    url: "#",
    icon: Inbox,
  },
  {
    title: "Calendar",
    url: "#",
    icon: Calendar,
  },
  {
    title: "Search",
    url: "#",
    icon: Search,
  },
  {
    title: "Settings",
    url: "#",
    icon: Settings,
  },
]

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Application</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {items.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <a href={item.url}>
                      <item.icon />
                      <span>{item.title}</span>
                    </a>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Using Button Component with Outline Variant
DESCRIPTION: Example of using the Button component with the outline variant in a TypeScript React file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Button variant="outline">Button</Button>
```

----------------------------------------

TITLE: Basic Dropdown Menu Implementation
DESCRIPTION: Example of implementing a basic dropdown menu with label, separator, and menu items
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<DropdownMenu>
  <DropdownMenuTrigger>Open</DropdownMenuTrigger>
  <DropdownMenuContent>
    <DropdownMenuLabel>My Account</DropdownMenuLabel>
    <DropdownMenuSeparator />
    <DropdownMenuItem>Profile</DropdownMenuItem>
    <DropdownMenuItem>Billing</DropdownMenuItem>
    <DropdownMenuItem>Team</DropdownMenuItem>
    <DropdownMenuItem>Subscription</DropdownMenuItem>
  </DropdownMenuContent>
</DropdownMenu>
```

----------------------------------------

TITLE: Importing Command Components - TypeScript React
DESCRIPTION: Import statement for all command-related components from the UI library
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/command.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from "@/components/ui/command"
```

----------------------------------------

TITLE: Creating Collapsible SidebarMenu
DESCRIPTION: Shows how to implement a collapsible sidebar menu with sub-items and content.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_25

LANGUAGE: tsx
CODE:
```
<SidebarMenu>
  <Collapsible defaultOpen className="group/collapsible">
    <SidebarMenuItem>
      <CollapsibleTrigger asChild>
        <SidebarMenuButton />
      </CollapsibleTrigger>
      <CollapsibleContent>
        <SidebarMenuSub>
          <SidebarMenuSubItem />
        </SidebarMenuSub>
      </CollapsibleContent>
    </SidebarMenuItem>
  </Collapsible>
</SidebarMenu>
```

----------------------------------------

TITLE: Basic Dialog Implementation
DESCRIPTION: Basic example of implementing a Dialog component with title and description.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Dialog>
  <DialogTrigger>Open</DialogTrigger>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Are you absolutely sure?</DialogTitle>
      <DialogDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </DialogDescription>
    </DialogHeader>
  </DialogContent>
</Dialog>
```

----------------------------------------

TITLE: Rendering DataTable in a Next.js Page Component
DESCRIPTION: Demonstrates how to fetch data and render the DataTable component in a Next.js page.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { Payment, columns } from "./columns"
import { DataTable } from "./data-table"

async function getData(): Promise<Payment[]> {
  // Fetch data from your API here.
  return [
    {
      id: "728ed52f",
      amount: 100,
      status: "pending",
      email: "m@example.com",
    },
    // ...
  ]
}

export default async function DemoPage() {
  const data = await getData()

  return (
    <div className="container mx-auto py-10">
      <DataTable columns={columns} data={data} />
    </div>
  )
}
```

----------------------------------------

TITLE: Using Slider Component in React
DESCRIPTION: Example of how to use the Slider component in a React component, setting default value, maximum value, and step.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Slider defaultValue={[33]} max={100} step={1} />
```

----------------------------------------

TITLE: Implementing Basic Date Picker Component in React
DESCRIPTION: A React component that implements a date picker using Popover and Calendar components. The component uses date-fns for date formatting and includes a button trigger with calendar icon. It maintains selected date state and renders a calendar in a popover interface.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/date-picker.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import { format } from "date-fns"
import { Calendar as CalendarIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"

export function DatePickerDemo() {
  const [date, setDate] = React.useState<Date>()

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant={"outline"}
          className={cn(
            "w-[280px] justify-start text-left font-normal",
            !date && "text-muted-foreground"
          )}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {date ? format(date, "PPP") : <span>Pick a date</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0">
        <Calendar
          mode="single"
          selected={date}
          onSelect={setDate}
          initialFocus
        />
      </PopoverContent>
    </Popover>
  )
```

----------------------------------------

TITLE: Implementing a Combobox Dropdown with React and shadcn/ui Components
DESCRIPTION: This snippet demonstrates how to create a framework selection combobox by combining Popover and Command components. It maintains an open state and selected value in React state, displays the selected framework label in the trigger button, and renders a filterable list of framework options in the dropdown.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/combobox.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import { Check, ChevronsUpDown } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"

const frameworks = [
  {
    value: "next.js",
    label: "Next.js",
  },
  {
    value: "sveltekit",
    label: "SvelteKit",
  },
  {
    value: "nuxt.js",
    label: "Nuxt.js",
  },
  {
    value: "remix",
    label: "Remix",
  },
  {
    value: "astro",
    label: "Astro",
  },
]

export function ComboboxDemo() {
  const [open, setOpen] = React.useState(false)
  const [value, setValue] = React.useState("")

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-[200px] justify-between"
        >
          {value
            ? frameworks.find((framework) => framework.value === value)?.label
            : "Select framework..."}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[200px] p-0">
        <Command>
          <CommandInput placeholder="Search framework..." />
          <CommandList>
            <CommandEmpty>No framework found.</CommandEmpty>
            <CommandGroup>
              {frameworks.map((framework) => (
                <CommandItem
                  key={framework.value}
                  value={framework.value}
                  onSelect={(currentValue) => {
                    setValue(currentValue === value ? "" : currentValue)
                    setOpen(false)
                  }}
                >
                  <Check
                    className={cn(
                      "mr-2 h-4 w-4",
                      value === framework.value ? "opacity-100" : "opacity-0"
                    )}
                  />
                  {framework.label}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  )
}
```

----------------------------------------

TITLE: Dialog with Context Menu Integration
DESCRIPTION: Example showing how to integrate Dialog with Context Menu components, including proper nesting and deletion confirmation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
<Dialog>
  <ContextMenu>
    <ContextMenuTrigger>Right click</ContextMenuTrigger>
    <ContextMenuContent>
      <ContextMenuItem>Open</ContextMenuItem>
      <ContextMenuItem>Download</ContextMenuItem>
      <DialogTrigger asChild>
        <ContextMenuItem>
          <span>Delete</span>
        </ContextMenuItem>
      </DialogTrigger>
    </ContextMenuContent>
  </ContextMenu>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Are you absolutely sure?</DialogTitle>
      <DialogDescription>
        This action cannot be undone. Are you sure you want to permanently
        delete this file from our servers?
      </DialogDescription>
    </DialogHeader>
    <DialogFooter>
      <Button type="submit">Confirm</Button>
    </DialogFooter>
  </DialogContent>
</Dialog>
```

----------------------------------------

TITLE: Rendering Button Components with JSX for Navigation
DESCRIPTION: This snippet demonstrates the use of Button components from shadcn/ui for navigation, including styling with Tailwind classes and external links.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
<div className="flex gap-2 items-center mt-6">
  <Button asChild size="sm" className="rounded-lg">
    <a href="#try-it-out">Get Started</a>
  </Button>
  <Button asChild size="sm" variant="outline" className="rounded-lg">
    <a href="https://v4.shadcn.com" target="_blank" rel="noopener noreferrer">
      See Demo
    </a>
  </Button>
</div>
```

----------------------------------------

TITLE: Using ScrollArea Component
DESCRIPTION: Example implementation of the ScrollArea component with custom styling and content.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/scroll-area.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<ScrollArea className="h-[200px] w-[350px] rounded-md border p-4">
  Jokester began sneaking into the castle in the middle of the night and leaving
  jokes all over the place: under the king's pillow, in his soup, even in the
  royal toilet. The king was furious, but he couldn't seem to stop Jokester. And
  then, one day, the people of the kingdom discovered that the jokes left by
  Jokester were so funny that they couldn't help but laugh. And once they
  started laughing, they couldn't stop.
</ScrollArea>
```

----------------------------------------

TITLE: Adding Row Actions to DataTable with Dropdown Menu
DESCRIPTION: Enhances the table by adding a new column for row actions using a dropdown menu component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
"use client"

import { ColumnDef } from "@tanstack/react-table"
import { MoreHorizontal } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export const columns: ColumnDef<Payment>[] = [
  // ...
  {
    id: "actions",
    cell: ({ row }) => {
      const payment = row.original

      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <span className="sr-only">Open menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem
              onClick={() => navigator.clipboard.writeText(payment.id)}
            >
              Copy payment ID
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem>View customer</DropdownMenuItem>
            <DropdownMenuItem>View payment details</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      )
    },
  },
  // ...
]
```

----------------------------------------

TITLE: Defining CSS Variables for Chart Colors
DESCRIPTION: This snippet demonstrates how to define CSS variables for chart colors in both light and dark modes. It sets up custom colors for different chart elements.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_5

LANGUAGE: css
CODE:
```
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    // ...
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
  }

  .dark: {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 100%;
    // ...
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
  }
}
```

----------------------------------------

TITLE: Basic Layout with Sidebar Provider Setup
DESCRIPTION: Setting up the main application layout with SidebarProvider and SidebarTrigger. This creates the foundation for the sidebar implementation in the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar"
import { AppSidebar } from "@/components/app-sidebar"

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <SidebarProvider>
      <AppSidebar />
      <main>
        <SidebarTrigger />
        {children}
      </main>
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Configuring Chart Colors with CSS Variables
DESCRIPTION: This code shows how to use CSS variables in the chartConfig object to set colors for different chart elements. It demonstrates the usage of hsl() function with CSS variables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
const chartConfig = {
  desktop: {
    label: "Desktop",
    color: "hsl(var(--chart-1))",
  },
  mobile: {
    label: "Mobile",
    color: "hsl(var(--chart-2))",
  },
} satisfies ChartConfig
```

----------------------------------------

TITLE: Configuring TypeScript Base Config
DESCRIPTION: TypeScript configuration for base tsconfig.json file with path aliases
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
```

----------------------------------------

TITLE: CLI Installation Command
DESCRIPTION: Command to install the form component using the shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add form
```

----------------------------------------

TITLE: Implementing Theme Toggle Component
DESCRIPTION: Creates a dropdown menu component for toggling between light and dark themes with animated icons.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import { Moon, Sun } from "lucide-react"
import { Theme, useTheme } from "remix-themes"

import { Button } from "./ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "./ui/dropdown-menu"

export function ModeToggle() {
  const [, setTheme] = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme(Theme.LIGHT)}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme(Theme.DARK)}>
          Dark
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

----------------------------------------

TITLE: Implementing SidebarMenuAction with DropdownMenu
DESCRIPTION: Demonstrates how to create a sidebar menu action with a dropdown menu for additional options.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_24

LANGUAGE: tsx
CODE:
```
<SidebarMenuItem>
  <SidebarMenuButton asChild>
    <a href="#">
      <Home />
      <span>Home</span>
    </a>
  </SidebarMenuButton>
  <DropdownMenu>
    <DropdownMenuTrigger asChild>
      <SidebarMenuAction>
        <MoreHorizontal />
      </SidebarMenuAction>
    </DropdownMenuTrigger>
    <DropdownMenuContent side="right" align="start">
      <DropdownMenuItem>
        <span>Edit Project</span>
      </DropdownMenuItem>
      <DropdownMenuItem>
        <span>Delete Project</span>
      </DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>
</SidebarMenuItem>
```

----------------------------------------

TITLE: Importing and using a shadcn/ui component in React
DESCRIPTION: This code snippet demonstrates how to import and use the Switch component from shadcn/ui in a React component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/laravel.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Switch } from "@/components/ui/switch"

const MyPage = () => {
  return (
    <div>
      <Switch />
    </div>
  )
}

export default MyPage
```

----------------------------------------

TITLE: Creating Sidebar Footer with User Dropdown in TypeScript React
DESCRIPTION: Shows how to implement a Sidebar footer with a user dropdown menu using SidebarFooter, SidebarMenu, and DropdownMenu components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_18

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  return (
    <SidebarProvider>
      <Sidebar>
        <SidebarHeader />
        <SidebarContent />
        <SidebarFooter>
          <SidebarMenu>
            <SidebarMenuItem>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuButton>
                    <User2 /> Username
                    <ChevronUp className="ml-auto" />
                  </SidebarMenuButton>
                </DropdownMenuTrigger>
                <DropdownMenuContent
                  side="top"
                  className="w-[--radix-popper-anchor-width]"
                >
                  <DropdownMenuItem>
                    <span>Account</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Billing</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Sign out</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarFooter>
      </Sidebar>
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Configuring Sidebar Width with CSS Variables in TypeScript React
DESCRIPTION: Demonstrates how to set custom sidebar widths using CSS variables within the SidebarProvider component. This allows for flexible width settings for both desktop and mobile views.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_7

LANGUAGE: tsx
CODE:
```
<SidebarProvider
  style={{
    "--sidebar-width": "20rem",
    "--sidebar-width-mobile": "20rem",
  }}
>
  <Sidebar />
</SidebarProvider>
```

----------------------------------------

TITLE: Customizing Sheet Size with CSS Classes
DESCRIPTION: Example showing how to customize the width of the Sheet component using CSS classes, with responsive behavior for different screen sizes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
<Sheet>
  <SheetTrigger>Open</SheetTrigger>
  <SheetContent className="w-[400px] sm:w-[540px]">
    <SheetHeader>
      <SheetTitle>Are you absolutely sure?</SheetTitle>
      <SheetDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </SheetDescription>
    </SheetHeader>
  </SheetContent>
</Sheet>
```

----------------------------------------

TITLE: Basic Pagination Implementation
DESCRIPTION: Example showing basic pagination implementation with previous button, page number, ellipsis, and next button.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Pagination>
  <PaginationContent>
    <PaginationItem>
      <PaginationPrevious href="#" />
    </PaginationItem>
    <PaginationItem>
      <PaginationLink href="#">1</PaginationLink>
    </PaginationItem>
    <PaginationItem>
      <PaginationEllipsis />
    </PaginationItem>
    <PaginationItem>
      <PaginationNext href="#" />
    </PaginationItem>
  </PaginationContent>
</Pagination>
```

----------------------------------------

TITLE: Initializing Project Dependencies with shadcn CLI
DESCRIPTION: This command initializes dependencies for a new project using shadcn. It installs required packages, adds the 'cn' util, configures tailwind.config.js, and sets up CSS variables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn init
```

----------------------------------------

TITLE: Updating Tailwind Size Utility Migration
DESCRIPTION: Shows how to migrate from separate width/height utilities to the new consolidated size utility in Tailwind v3.4
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_5

LANGUAGE: diff
CODE:
```
- w-4 h-4
+ size-4
```

----------------------------------------

TITLE: Using Tooltip Component in React JSX
DESCRIPTION: Example of how to use the tooltip component in a React application, showing the structure and nested components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tooltip.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<TooltipProvider>
  <Tooltip>
    <TooltipTrigger>Hover</TooltipTrigger>
    <TooltipContent>
      <p>Add to library</p>
    </TooltipContent>
  </Tooltip>
</TooltipProvider>
```

----------------------------------------

TITLE: Defining Registry Item Files in JSON
DESCRIPTION: Shows how to specify the files property for a registry item, including path, type, and optional target for each file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
{
  "files": [
    {
      "path": "registry/new-york/hello-world/page.tsx",
      "type": "registry:page",
      "target": "app/hello/page.tsx"
    },
    {
      "path": "registry/new-york/hello-world/hello-world.tsx",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/hello-world/use-hello-world.ts",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/hello-world/.env",
      "type": "registry:file",
      "target": "~/.env"
    }
  ]
}
```

----------------------------------------

TITLE: Implementing Column Header with Sorting in DataTable
DESCRIPTION: Example of implementing a sortable and hideable column header in a DataTable by using a DataTableColumnHeader component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_14

LANGUAGE: tsx
CODE:
```
export const columns = [
  {
    accessorKey: "email",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title="Email" />
    ),
  },
]
```

----------------------------------------

TITLE: Controlled Sidebar Implementation
DESCRIPTION: Example of implementing a controlled sidebar using React state management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_31

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  const [open, setOpen] = React.useState(false)

  return (
    <SidebarProvider open={open} onOpenChange={setOpen}>
      <Sidebar />
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Using Table Component in React
DESCRIPTION: Example of how to use the Table component to create a simple table with header, body, and caption.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/table.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Table>
  <TableCaption>A list of your recent invoices.</TableCaption>
  <TableHeader>
    <TableRow>
      <TableHead className="w-[100px]">Invoice</TableHead>
      <TableHead>Status</TableHead>
      <TableHead>Method</TableHead>
      <TableHead className="text-right">Amount</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    <TableRow>
      <TableCell className="font-medium">INV001</TableCell>
      <TableCell>Paid</TableCell>
      <TableCell>Credit Card</TableCell>
      <TableCell className="text-right">$250.00</TableCell>
    </TableRow>
  </TableBody>
</Table>
```

----------------------------------------

TITLE: CLI Initialization Command
DESCRIPTION: Command to initialize shadcn-ui components in a project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Basic Horizontal Panel Implementation
DESCRIPTION: Demonstrates the basic setup of a horizontal resizable panel group with two panels and a handle.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<ResizablePanelGroup direction="horizontal">
  <ResizablePanel>One</ResizablePanel>
  <ResizableHandle />
  <ResizablePanel>Two</ResizablePanel>
</ResizablePanelGroup>
```

----------------------------------------

TITLE: Utility Classes Example in TSX
DESCRIPTION: Demonstration of using utility classes for dark mode theming
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<div className="bg-zinc-950 dark:bg-white" />
```

----------------------------------------

TITLE: Using Avatar Component in React JSX
DESCRIPTION: This example demonstrates how to use the Avatar component in a React application, including the image source and fallback text.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/avatar.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Avatar>
  <AvatarImage src="https://github.com/shadcn.png" />
  <AvatarFallback>CN</AvatarFallback>
</Avatar>
```

----------------------------------------

TITLE: Integrating Carousel Plugins
DESCRIPTION: Example showing how to add plugins to the carousel component, specifically using the Autoplay plugin to auto-advance slides.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_12

LANGUAGE: ts
CODE:
```
import Autoplay from "embla-carousel-autoplay"

export function Example() {
  return (
    <Carousel
      plugins={[
        Autoplay({
          delay: 2000,
        }),
      ]}
    >
      // ...
    </Carousel>
  )
}
```

----------------------------------------

TITLE: Using Hover Card Components in React
DESCRIPTION: Example usage of the Hover Card component in a React application, demonstrating the trigger and content structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/hover-card.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<HoverCard>
  <HoverCardTrigger>Hover</HoverCardTrigger>
  <HoverCardContent>
    The React Framework â€“ created and maintained by @vercel.
  </HoverCardContent>
</HoverCard>
```

----------------------------------------

TITLE: Custom Link Component in Breadcrumb
DESCRIPTION: Using a custom Link component from a routing library (Next.js) with the breadcrumb by leveraging the asChild prop on BreadcrumbLink. The highlighted lines show the import and implementation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_6

LANGUAGE: tsx
CODE:
```
import { Link } from "next/link"

...

<Breadcrumb>
  <BreadcrumbList>
    <BreadcrumbItem>
      <BreadcrumbLink asChild>
        <Link href="/">Home</Link>
      </BreadcrumbLink>
    </BreadcrumbItem>
    {/* ... */}
  </BreadcrumbList>
</Breadcrumb>
```

----------------------------------------

TITLE: Adding Chart Colors to CSS for Light and Dark Themes
DESCRIPTION: This CSS snippet defines color variables for charts in both light and dark themes. It uses HSL color values for flexibility and theming.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_1

LANGUAGE: css
CODE:
```
@layer base {
  :root {
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}
```

----------------------------------------

TITLE: Updating Dependencies Command
DESCRIPTION: Command to update Radix UI, cmdk, lucide-react, recharts, tailwind-merge, and clsx packages to their latest versions
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
pnpm up "@radix-ui/*" cmdk lucide-react recharts tailwind-merge clsx --latest
```

----------------------------------------

TITLE: Importing Card Components
DESCRIPTION: Import statement for all card-related components including Card, CardContent, CardDescription, CardFooter, CardHeader, and CardTitle
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
```

----------------------------------------

TITLE: Implementing Basic Context Menu
DESCRIPTION: Example implementation of a basic context menu with multiple menu items including Profile, Billing, Team, and Subscription options.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/context-menu.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<ContextMenu>
  <ContextMenuTrigger>Right click</ContextMenuTrigger>
  <ContextMenuContent>
    <ContextMenuItem>Profile</ContextMenuItem>
    <ContextMenuItem>Billing</ContextMenuItem>
    <ContextMenuItem>Team</ContextMenuItem>
    <ContextMenuItem>Subscription</ContextMenuItem>
  </ContextMenuContent>
</ContextMenu>
```

----------------------------------------

TITLE: Using shadcn/ui Button Component in Next.js
DESCRIPTION: Example of importing and using the Button component in a Next.js page component. Shows the basic implementation of the Button component within a div element.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Accessible Card Title and Description Implementation
DESCRIPTION: Updated implementation of CardTitle and CardDescription components using div elements for better accessibility
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"
```

----------------------------------------

TITLE: Configuring Collapsible Sidebar in TypeScript React
DESCRIPTION: Demonstrates how to use the 'collapsible' prop to make the Sidebar collapsible. Options include 'offcanvas', 'icon', and 'none'.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_15

LANGUAGE: tsx
CODE:
```
import { Sidebar } from "@/components/ui/sidebar"

export function AppSidebar() {
  return <Sidebar collapsible="offcanvas | icon | none" />
}
```

----------------------------------------

TITLE: Configuring Tailwind Animations
DESCRIPTION: Configuration for adding accordion animation keyframes and utility classes to Tailwind CSS config file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
/** @type {import('tailwindcss').Config} */
module.exports = {
  theme: {
    extend: {
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
}
```

----------------------------------------

TITLE: Basic Badge Usage
DESCRIPTION: Example of using the Badge component with outline variant.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/badge.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Badge variant="outline">Badge</Badge>
```

----------------------------------------

TITLE: Dark Mode Framework Selection Component
DESCRIPTION: A React component that displays a grid of linked cards for different framework options, each with an SVG icon and framework name. The component uses flexbox grid layout with responsive columns.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/index.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
<div className="grid sm:grid-cols-2 gap-4 sm:gap-6">
  <LinkedCard href="/docs/dark-mode/next">
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      className="w-10 h-10"
      fill="currentColor"
    >
      <title>Next.js</title>
      <path d="M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z" />
    </svg>
    <p className="font-medium mt-2">Next.js</p>
  </LinkedCard>
  <!-- Similar cards for Vite, Astro, and Remix -->
</div>
```

----------------------------------------

TITLE: Command Item Styling Update - TypeScript React
DESCRIPTION: Updated styling configuration for CommandItem component to handle icons
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/command.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "... gap-2 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))
```

----------------------------------------

TITLE: Custom Separator Implementation in Breadcrumb
DESCRIPTION: Example of using a custom separator (Slash icon) in a breadcrumb component. The highlighted lines show the import and implementation of the custom separator.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
import { Slash } from "lucide-react"

...

<Breadcrumb>
  <BreadcrumbList>
    <BreadcrumbItem>
      <BreadcrumbLink href="/">Home</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbSeparator>
      <Slash />
    </BreadcrumbSeparator>
    <BreadcrumbItem>
      <BreadcrumbLink href="/components">Components</BreadcrumbLink>
    </BreadcrumbItem>
  </BreadcrumbList>
</Breadcrumb>
```

----------------------------------------

TITLE: Implementing Sheet Component with Radix UI in TypeScript React
DESCRIPTION: A comprehensive Sheet component implementation using Radix UI Dialog primitives. Includes customizable positioning, animations, and styling with class-variance-authority. Provides subcomponents for header, footer, content, and description with proper TypeScript typing.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_11

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = ({
  className,
  ...props
}: SheetPrimitive.DialogPortalProps) => (
  <SheetPrimitive.Portal className={cn(className)} {...props} />
)
SheetPortal.displayName = SheetPrimitive.Portal.displayName

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
```

----------------------------------------

TITLE: Import Aliases Configuration - JSON
DESCRIPTION: Configuration for various import aliases including utils, components, UI, lib, and hooks.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
{
  "aliases": {
    "utils": "@/lib/utils",
    "components": "@/components",
    "ui": "@/app/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
```

----------------------------------------

TITLE: Initializing a Basic Chart Component with TypeScript and React
DESCRIPTION: This snippet demonstrates how to create a basic chart component using Recharts and custom components. It shows the structure and key elements needed for a functional chart.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { Bar, BarChart } from "recharts"

import { ChartContainer, ChartTooltipContent } from "@/components/ui/charts"

export function MyChart() {
  return (
    <ChartContainer>
      <BarChart data={data}>
        <Bar dataKey="value" />
        <ChartTooltip content={<ChartTooltipContent />} />
      </BarChart>
    </ChartContainer>
  )
}
```

----------------------------------------

TITLE: Component Addition Command
DESCRIPTION: Command to add new shadcn-ui components to the project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
npx shadcn@latest add
```

----------------------------------------

TITLE: Basic Carousel Implementation
DESCRIPTION: Basic structure of the carousel component with content, items, and navigation buttons.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
<Carousel>
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
  <CarouselPrevious />
  <CarouselNext />
</Carousel>
```

----------------------------------------

TITLE: CSS Variables Configuration in components.json
DESCRIPTION: Configuration for enabling CSS variables-based theming with neutral as base color
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "style": "default",
  "rsc": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/registry/new-york-v4/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```

----------------------------------------

TITLE: Setting Sidebar Width Constants in TypeScript React
DESCRIPTION: Defines constants for sidebar width in desktop and mobile views. These variables can be used to set the width of the sidebar component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
```

----------------------------------------

TITLE: Custom Handle Implementation
DESCRIPTION: Shows how to implement a resizable panel group with a visible handle using the withHandle prop.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable"

export default function Example() {
  return (
    <ResizablePanelGroup direction="horizontal">
      <ResizablePanel>One</ResizablePanel>
      <ResizableHandle withHandle />
      <ResizablePanel>Two</ResizablePanel>
    </ResizablePanelGroup>
  )
}
```

----------------------------------------

TITLE: Formatting Amount Cell in DataTable Columns
DESCRIPTION: Updates the column definition to format the amount cell as a currency value and align it to the right.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
export const columns: ColumnDef<Payment>[] = [
  {
    accessorKey: "amount",
    header: () => <div className="text-right">Amount</div>,
    cell: ({ row }) => {
      const amount = parseFloat(row.getValue("amount"))
      const formatted = new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
      }).format(amount)

      return <div className="text-right font-medium">{formatted}</div>
    },
  },
]
```

----------------------------------------

TITLE: Adding Components with shadcn CLI
DESCRIPTION: Use the 'add' command to add components and dependencies to your project. This command allows you to specify which components to add.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add [component]
```

----------------------------------------

TITLE: Using Button Variants with Link Component
DESCRIPTION: Example of using the buttonVariants helper with a Link component to create a button-like link.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
<Link className={buttonVariants({ variant: "outline" })}>Click here</Link>
```

----------------------------------------

TITLE: Creating Hello World Component in TypeScript
DESCRIPTION: Example of a simple React component using the Button component from shadcn-ui.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"

export function HelloWorld() {
  return <Button>Hello World</Button>
}
```

----------------------------------------

TITLE: Installing Button Component Dependencies via CLI
DESCRIPTION: Command to install the Button component using the shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Defining Chart Data and Configuration in TypeScript
DESCRIPTION: This snippet shows how to define chart data and configuration objects in TypeScript. It includes sample data for a bar chart and a configuration object with labels and colors.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
const chartData = [
  { month: "January", desktop: 186, mobile: 80 },
  { month: "February", desktop: 305, mobile: 200 },
  { month: "March", desktop: 237, mobile: 120 },
  { month: "April", desktop: 73, mobile: 190 },
  { month: "May", desktop: 209, mobile: 130 },
  { month: "June", desktop: 214, mobile: 140 },
]

import { type ChartConfig } from "@/components/ui/chart"

const chartConfig = {
  desktop: {
    label: "Desktop",
    color: "#2563eb",
  },
  mobile: {
    label: "Mobile",
    color: "#60a5fa",
  },
} satisfies ChartConfig
```

----------------------------------------

TITLE: Basic Textarea Implementation
DESCRIPTION: Demonstrates the basic usage of the Textarea component with minimal configuration
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/textarea.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Textarea />
```

----------------------------------------

TITLE: Setting Sidebar Keyboard Shortcut in TypeScript React
DESCRIPTION: Defines a constant for the keyboard shortcut used to toggle the sidebar. This can be customized to change the default shortcut (cmd+b on Mac, ctrl+b on Windows).
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
const SIDEBAR_KEYBOARD_SHORTCUT = "b"
```

----------------------------------------

TITLE: Customizing Chart Legend with Data Keys
DESCRIPTION: This snippet demonstrates how to customize the chart legend by specifying a custom key for names in the legend content.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_12

LANGUAGE: tsx
CODE:
```
<ChartLegend content={<ChartLegendContent nameKey="browser" />} />
```

----------------------------------------

TITLE: Displaying Selected Rows Count in DataTable
DESCRIPTION: A React component that displays the count of selected rows in a DataTable using the table.getFilteredSelectedRowModel() API.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_13

LANGUAGE: tsx
CODE:
```
<div className="flex-1 text-sm text-muted-foreground">
  {table.getFilteredSelectedRowModel().rows.length} of{" "}
  {table.getFilteredRowModel().rows.length} row(s) selected.
</div>
```

----------------------------------------

TITLE: Creating Badge-Styled Link
DESCRIPTION: Example of creating a link that uses badge styling using the badgeVariants helper.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/badge.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
<Link className={badgeVariants({ variant: "outline" })}>Badge</Link>
```

----------------------------------------

TITLE: Input OTP with Separator
DESCRIPTION: Example showing how to implement Input OTP with a custom separator between input groups.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSeparator,
  InputOTPSlot,
} from "@/components/ui/input-otp"

...

<InputOTP maxLength={4}>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    <InputOTPSlot index={1} />
  </InputOTPGroup>
  <InputOTPSeparator />
  <InputOTPGroup>
    <InputOTPSlot index={2} />
    <InputOTPSlot index={3} />
  </InputOTPGroup>
</InputOTP>
```

----------------------------------------

TITLE: Importing Tailwind CSS in Root
DESCRIPTION: Adding Tailwind CSS imports to the Remix root file
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_6

LANGUAGE: js
CODE:
```
import styles from "./tailwind.css?url"

export const links: LinksFunction = () => [
  { rel: "stylesheet", href: styles },
  ...(cssBundleHref ? [{ rel: "stylesheet", href: cssBundleHref }] : []),
]
```

----------------------------------------

TITLE: Importing Slider Component in React
DESCRIPTION: Example of how to import the Slider component in a React file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Slider } from "@/components/ui/slider"
```

----------------------------------------

TITLE: Using Aspect Ratio Component with Next.js Image
DESCRIPTION: Example of how to use the Aspect Ratio component to wrap a Next.js Image component with a 16:9 aspect ratio.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<div className="w-[450px]">
  <AspectRatio ratio={16 / 9}>
    <Image src="..." alt="Image" className="rounded-md object-cover" />
  </AspectRatio>
</div>
```

----------------------------------------

TITLE: Configuring Root Layout with ThemeProvider
DESCRIPTION: Implements the root layout component with ThemeProvider integration, including theme loading and flash prevention.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
import clsx from "clsx"
import { PreventFlashOnWrongTheme, ThemeProvider, useTheme } from "remix-themes"

import { themeSessionResolver } from "./sessions.server"

// Return the theme from the session storage using the loader
export async function loader({ request }: LoaderFunctionArgs) {
  const { getTheme } = await themeSessionResolver(request)
  return {
    theme: getTheme(),
  }
}
// Wrap your app with ThemeProvider.
// `specifiedTheme` is the stored theme in the session storage.
// `themeAction` is the action name that's used to change the theme in the session storage.
export default function AppWithProviders() {
  const data = useLoaderData<typeof loader>()
  return (
    <ThemeProvider specifiedTheme={data.theme} themeAction="/action/set-theme">
      <App />
    </ThemeProvider>
  )
}

export function App() {
  const data = useLoaderData<typeof loader>()
  const [theme] = useTheme()
  return (
    <html lang="en" className={clsx(theme)}>
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <PreventFlashOnWrongTheme ssrTheme={Boolean(data.theme)} />
        <Links />
      </head>
      <body>
        <Outlet />
        <ScrollRestoration />
        <Scripts />
        <LiveReload />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Configuring Sidebar Side in TypeScript React
DESCRIPTION: Shows how to use the 'side' prop to set the position of the Sidebar component. The side can be either 'left' or 'right'.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_12

LANGUAGE: tsx
CODE:
```
import { Sidebar } from "@/components/ui/sidebar"

export function AppSidebar() {
  return <Sidebar side="left | right" />
}
```

----------------------------------------

TITLE: Implementing Custom Chart Legend
DESCRIPTION: This code shows how to import and use custom ChartLegend and ChartLegendContent components for creating legends in charts.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_11

LANGUAGE: tsx
CODE:
```
import { ChartLegend, ChartLegendContent } from "@/components/ui/chart"
```

LANGUAGE: tsx
CODE:
```
<ChartLegend content={<ChartLegendContent />} />
```

----------------------------------------

TITLE: Rendering Image Components for v0 Interface in JSX
DESCRIPTION: This code snippet demonstrates how to render image components for the v0 interface, including separate images for light and dark modes, wrapped in a link to the Vercel signup page.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/v0.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
<a href="https://vercel.com/signup?utm_source=shad&utm_medium=web&utm_campaign=docs_cta_signup">
  <Image
    src="/images/open-in-v0.png"
    width="716"
    height="420"
    alt="Open in v0"
    className="border dark:hidden shadow-sm rounded-lg overflow-hidden mt-6 w-full"
  />
  <Image
    src="/images/open-in-v0-dark.png"
    width="716"
    height="420"
    alt="Open in v0"
    className="border hidden dark:block shadow-sm rounded-lg overflow-hidden mt-6 w-full"
  />
  <span class="sr-only">Open in v0</span>
</a>
```

----------------------------------------

TITLE: Structuring Sidebar Content in TypeScript React
DESCRIPTION: Demonstrates how to use the SidebarContent component to wrap the main content of the Sidebar, including multiple SidebarGroup components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_19

LANGUAGE: tsx
CODE:
```
import { Sidebar, SidebarContent } from "@/components/ui/sidebar"

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup />
        <SidebarGroup />
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Using Collapsible Component
DESCRIPTION: Example showing how to implement the Collapsible component with a trigger and content. The trigger acts as a button that toggles the visibility of the content.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/collapsible.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Collapsible>
  <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>
  <CollapsibleContent>
    Yes. Free to use for personal and commercial projects. No attribution
    required.
  </CollapsibleContent>
</Collapsible>
```

----------------------------------------

TITLE: Creating Theme Session Storage
DESCRIPTION: Sets up session storage and theme session resolver for managing theme state using cookies with configurable production settings.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { createThemeSessionResolver } from "remix-themes"

// You can default to 'development' if process.env.NODE_ENV is not set
const isProduction = process.env.NODE_ENV === "production"

const sessionStorage = createCookieSessionStorage({
  cookie: {
    name: "theme",
    path: "/",
    httpOnly: true,
    sameSite: "lax",
    secrets: ["s3cr3t"],
    // Set domain and secure only if in production
    ...(isProduction
      ? { domain: "your-production-domain.com", secure: true }
      : {}),
  },
})

export const themeSessionResolver = createThemeSessionResolver(sessionStorage)
```

----------------------------------------

TITLE: Updating Button Component Styles
DESCRIPTION: Example of adding new classes to the Button component's cva call for automatic icon styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_7

LANGUAGE: tsx
CODE:
```
const buttonVariants = cva(
  "inline-flex ... gap-2 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0"
)
```

----------------------------------------

TITLE: Basic Radio Group Implementation
DESCRIPTION: Example of implementing a basic radio group with two options using the RadioGroup and RadioGroupItem components
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/radio-group.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<RadioGroup defaultValue="option-one">
  <div className="flex items-center space-x-2">
    <RadioGroupItem value="option-one" id="option-one" />
    <Label htmlFor="option-one">Option One</Label>
  </div>
  <div className="flex items-center space-x-2">
    <RadioGroupItem value="option-two" id="option-two" />
    <Label htmlFor="option-two">Option Two</Label>
  </div>
</RadioGroup>
```

----------------------------------------

TITLE: Rendering Framework Options with SVG Icons in HTML
DESCRIPTION: This code snippet displays a grid of framework options for shadcn-ui installation. Each option is represented by an SVG icon and a label, wrapped in a linked card component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-21_snippet_0

LANGUAGE: HTML
CODE:
```
<div className="grid sm:grid-cols-2 gap-4 mt-8 sm:gap-6">
  <LinkedCard href="/docs/installation/next">
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      className="w-10 h-10"
      fill="currentColor"
    >
      <title>Next.js</title>
      <path d="M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z" />
    </svg>
    <p className="font-medium mt-2">Next.js</p>
  </LinkedCard>
  <!-- Similar LinkedCard components for other frameworks -->
</div>
```

----------------------------------------

TITLE: Recharts React 19 Compatibility Override
DESCRIPTION: JSON configuration to add to package.json for making Recharts work with React 19 by overriding the react-is dependency.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#2025-04-22_snippet_4

LANGUAGE: json
CODE:
```
"overrides": {
  "react-is": "^19.0.0-rc-69d4b800-20241021"
}
```

----------------------------------------

TITLE: Creating Custom Style From Scratch
DESCRIPTION: Registry configuration for creating a new style without extending shadcn/ui. Defines custom components, CSS variables, and dependencies from scratch.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "extends": "none",
  "name": "new-style",
  "type": "registry:style",
  "dependencies": ["tailwind-merge", "clsx"],
  "registryDependencies": [
    "utils",
    "https://example.com/r/button.json",
    "https://example.com/r/input.json",
    "https://example.com/r/label.json",
    "https://example.com/r/select.json"
  ],
  "cssVars": {
    "theme": {
      "font-sans": "Inter, sans-serif"
    },
    "light": {
      "main": "#88aaee",
      "bg": "#dfe5f2",
      "border": "#000",
      "text": "#000",
      "ring": "#000"
    },
    "dark": {
      "main": "#88aaee",
      "bg": "#272933",
      "border": "#000",
      "text": "#e6e6e6",
      "ring": "#fff"
    }
  }
}
```

----------------------------------------

TITLE: Adding Specific Component Example with shadcn CLI
DESCRIPTION: An example of adding a specific component (alert-dialog) to the project using the shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn add alert-dialog
```

----------------------------------------

TITLE: Creating Collapsible SidebarGroup
DESCRIPTION: Demonstrates how to create a collapsible sidebar group using the Collapsible component with transition effects.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_21

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  return (
    <Collapsible defaultOpen className="group/collapsible">
      <SidebarGroup>
        <SidebarGroupLabel asChild>
          <CollapsibleTrigger>
            Help
            <ChevronDown className="ml-auto transition-transform group-data-[state=open]/collapsible:rotate-180" />
          </CollapsibleTrigger>
        </SidebarGroupLabel>
        <CollapsibleContent>
          <SidebarGroupContent />
        </CollapsibleContent>
      </SidebarGroup>
    </Collapsible>
  )
}
```

----------------------------------------

TITLE: Configuring Custom Style Extension for Shadcn UI
DESCRIPTION: Registry configuration that extends shadcn/ui with custom dependencies, components, and CSS variables. Includes installation of external packages and component definitions.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-style",
  "type": "registry:style",
  "dependencies": ["@tabler/icons-react"],
  "registryDependencies": [
    "login-01",
    "calendar",
    "https://example.com/r/editor.json"
  ],
  "cssVars": {
    "theme": {
      "font-sans": "Inter, sans-serif"
    },
    "light": {
      "brand": "20 14.3% 4.1%"
    },
    "dark": {
      "brand": "20 14.3% 4.1%"
    }
  }
}
```

----------------------------------------

TITLE: Adding React 19 to Peer Dependencies Example in Diff Format
DESCRIPTION: A diff showing how package maintainers need to update their peer dependencies to include React 19 support in their packages.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#2025-04-22_snippet_0

LANGUAGE: diff
CODE:
```
"peerDependencies": {
-  "react": "^16.8 || ^17.0 || ^18.0",
+  "react": "^16.8 || ^17.0 || ^18.0 || ^19.0",
-  "react-dom": "^16.8 || ^17.0 || ^18.0"
+  "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0"
},
```

----------------------------------------

TITLE: Using Calendar Component in React
DESCRIPTION: Example of how to use the Calendar component in a React application, including state management for the selected date.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
const [date, setDate] = React.useState<Date | undefined>(new Date())

return (
  <Calendar
    mode="single"
    selected={date}
    onSelect={setDate}
    className="rounded-md border"
  />
)
```

----------------------------------------

TITLE: Creating gatsby-node.ts for path resolution in Gatsby
DESCRIPTION: This code creates a gatsby-node.ts file to configure Webpack for resolving paths in a Gatsby project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import * as path from "path"

export const onCreateWebpackConfig = ({ actions }) => {
  actions.setWebpackConfig({
    resolve: {
      alias: {
        "@/components": path.resolve(__dirname, "src/components"),
        "@/lib/utils": path.resolve(__dirname, "src/lib/utils"),
      },
    },
  })
}
```

----------------------------------------

TITLE: Basic Toggle Group Implementation
DESCRIPTION: Example of implementing a basic Toggle Group with three items in single selection mode.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle-group.mdx#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
<ToggleGroup type="single">
  <ToggleGroupItem value="a">A</ToggleGroupItem>
  <ToggleGroupItem value="b">B</ToggleGroupItem>
  <ToggleGroupItem value="c">C</ToggleGroupItem>
</ToggleGroup>
```

----------------------------------------

TITLE: Downgrading to React 18 for Compatibility
DESCRIPTION: Command to downgrade React and React DOM to version 18 to avoid peer dependency issues until packages are updated for React 19.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
npm i react@18 react-dom@18
```

----------------------------------------

TITLE: Customizing Sidebar Cookie Name in TypeScript React
DESCRIPTION: Defines a constant for the cookie name used to store the sidebar state. This can be modified to use a custom cookie name for persisting the sidebar state.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_10

LANGUAGE: tsx
CODE:
```
const SIDEBAR_COOKIE_NAME = "sidebar_state"
```

----------------------------------------

TITLE: Adding Shadcn/UI Components to Web App
DESCRIPTION: Command to add Shadcn/UI components to the web application within the monorepo structure, specifying the destination directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
pnpm dlx shadcn@latest add button -c apps/web
```

----------------------------------------

TITLE: Configuring Tailwind CSS Dark Mode Root Class
DESCRIPTION: Adds dark mode support to Tailwind CSS by configuring the root class selector for dark theme styles.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#2025-04-21_snippet_0

LANGUAGE: css
CODE:
```
.dark,
:root[class~="dark"] {
  ...;
}
```

----------------------------------------

TITLE: Basic Accordion Usage Example
DESCRIPTION: Example showing how to implement a basic single-item accordion with collapsible content.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
<Accordion type="single" collapsible>
  <AccordionItem value="item-1">
    <AccordionTrigger>Is it accessible?</AccordionTrigger>
    <AccordionContent>
      Yes. It adheres to the WAI-ARIA design pattern.
    </AccordionContent>
  </AccordionItem>
</Accordion>
```

----------------------------------------

TITLE: Adding shadcn/ui Components
DESCRIPTION: Command to add specific components from shadcn/ui to the project
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Using Input Component in React JSX
DESCRIPTION: Basic usage of the Input component in React JSX.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Input />
```

----------------------------------------

TITLE: Implementing Custom Chart Tooltip
DESCRIPTION: This code shows how to import and use custom ChartTooltip and ChartTooltipContent components for creating tooltips in charts.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
import { ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
```

LANGUAGE: tsx
CODE:
```
<ChartTooltip content={<ChartTooltipContent />} />
```

----------------------------------------

TITLE: Implementing Responsive Carousel Item Sizes
DESCRIPTION: Example showing how to set responsive item sizes that change based on screen width using utility classes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_5

LANGUAGE: tsx
CODE:
```
// 50% on small screens and 33% on larger screens.
<Carousel>
  <CarouselContent>
    <CarouselItem className="md:basis-1/2 lg:basis-1/3">...</CarouselItem>
    <CarouselItem className="md:basis-1/2 lg:basis-1/3">...</CarouselItem>
    <CarouselItem className="md:basis-1/2 lg:basis-1/3">...</CarouselItem>
  </CarouselContent>
</Carousel>
```

----------------------------------------

TITLE: Listing Available Components with shadcn CLI
DESCRIPTION: This command, when run without arguments, displays a list of all available components that can be added using the shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npx shadcn add
```

----------------------------------------

TITLE: Basic Skeleton Component Usage
DESCRIPTION: Example of using the Skeleton component with custom styling. This creates a rounded placeholder with specific width and height dimensions.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/skeleton.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Skeleton className="w-[100px] h-[20px] rounded-full" />
```

----------------------------------------

TITLE: Using Popover Component
DESCRIPTION: Example implementation of the Popover component showing basic usage with trigger and content elements.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Popover>
  <PopoverTrigger>Open</PopoverTrigger>
  <PopoverContent>Place content for the popover here.</PopoverContent>
</Popover>
```

----------------------------------------

TITLE: Basic Sidebar Component Structure
DESCRIPTION: The minimal structure for a sidebar component using the Sidebar and SidebarContent components. This serves as a starting point for building more complex sidebars.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarHeader,
} from "@/components/ui/sidebar"

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarHeader />
      <SidebarContent>
        <SidebarGroup />
        <SidebarGroup />
      </SidebarContent>
      <SidebarFooter />
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Basic Checkbox Usage
DESCRIPTION: Simple example showing how to use the Checkbox component in a React component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Checkbox />
```

----------------------------------------

TITLE: Configuring Tailwind Animations
DESCRIPTION: Configuration for adding caret blink animation to tailwind.config.js file. Defines keyframes and animation settings for the OTP input cursor.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
/** @type {import('tailwindcss').Config} */
module.exports = {
  theme: {
    extend: {
      keyframes: {
        "caret-blink": {
          "0%,70%,100%": { opacity: "1" },
          "20%,50%": { opacity: "0" },
        },
      },
      animation: {
        "caret-blink": "caret-blink 1.25s ease-out infinite",
      },
    },
  },
}
```

----------------------------------------

TITLE: Importing Input OTP Components
DESCRIPTION: Import statement for the main Input OTP components including InputOTP, InputOTPGroup, InputOTPSeparator, and InputOTPSlot.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSeparator,
  InputOTPSlot,
} from "@/components/ui/input-otp"
```

----------------------------------------

TITLE: Implementing Responsive Carousel Spacing
DESCRIPTION: Example showing how to set responsive spacing between carousel items that changes based on screen width.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_7

LANGUAGE: tsx
CODE:
```
<Carousel>
  <CarouselContent className="-ml-2 md:-ml-4">
    <CarouselItem className="pl-2 md:pl-4">...</CarouselItem>
    <CarouselItem className="pl-2 md:pl-4">...</CarouselItem>
    <CarouselItem className="pl-2 md:pl-4">...</CarouselItem>
  </CarouselContent>
</Carousel>
```

----------------------------------------

TITLE: Defining Registry Item Schema in JSON
DESCRIPTION: Demonstrates the structure of a registry-item.json file, including properties like name, type, title, description, files, and CSS variables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hello-world",
  "type": "registry:block",
  "title": "Hello World",
  "description": "A simple hello world component.",
  "files": [
    {
      "path": "registry/new-york/hello-world/hello-world.tsx",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/hello-world/use-hello-world.ts",
      "type": "registry:hook"
    }
  ],
  "cssVars": {
    "theme": {
      "font-heading": "Poppins, sans-serif"
    },
    "light": {
      "brand": "20 14.3% 4.1%"
    },
    "dark": {
      "brand": "20 14.3% 4.1%"
    }
  }
}
```

----------------------------------------

TITLE: Initializing Shadcn/UI Monorepo with PNPM
DESCRIPTION: Command to initialize a new Shadcn/UI monorepo project using PNPM package manager.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
pnpm dlx shadcn@latest init
```

----------------------------------------

TITLE: Basic Switch Usage
DESCRIPTION: Simple example showing how to use the Switch component in JSX.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Switch />
```

----------------------------------------

TITLE: Basic Input OTP Usage
DESCRIPTION: Basic implementation of the Input OTP component with 6 slots split into two groups with a separator.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<InputOTP maxLength={6}>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    <InputOTPSlot index={1} />
    <InputOTPSlot index={2} />
  </InputOTPGroup>
  <InputOTPSeparator />
  <InputOTPGroup>
    <InputOTPSlot index={3} />
    <InputOTPSlot index={4} />
    <InputOTPSlot index={5} />
  </InputOTPGroup>
</InputOTP>
```

----------------------------------------

TITLE: Tailwind CSS Variables Toggle - JSON
DESCRIPTION: Configuration to choose between CSS variables or utility classes for theming.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
{
  "tailwind": {
    "cssVariables": "true" | "false"
  }
}
```

----------------------------------------

TITLE: Importing the Toast Function
DESCRIPTION: Code example showing how to import the toast function from Sonner, which is used to trigger toast notifications.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sonner.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
import { toast } from "sonner"
```

----------------------------------------

TITLE: Configuring components.json for UI Package in Monorepo (Tailwind CSS v4)
DESCRIPTION: JSON configuration for the components.json file in the UI package directory of a monorepo using Tailwind CSS v4. It defines aliases and Tailwind CSS settings for the shared UI components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@workspace/ui/components",
    "utils": "@workspace/ui/lib/utils",
    "hooks": "@workspace/ui/hooks",
    "lib": "@workspace/ui/lib",
    "ui": "@workspace/ui/components"
  }
}
```

----------------------------------------

TITLE: Importing Components in shadcn/ui Monorepo
DESCRIPTION: Examples of how to import components, hooks, and utilities from the @workspace/ui package in a monorepo setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Button } from "@workspace/ui/components/button"
```

LANGUAGE: tsx
CODE:
```
import { useTheme } from "@workspace/ui/hooks/use-theme"
import { cn } from "@workspace/ui/lib/utils"
```

----------------------------------------

TITLE: Installing Aspect Ratio Component via CLI
DESCRIPTION: Command to install the Aspect Ratio component using the project's CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add aspect-ratio
```

----------------------------------------

TITLE: Basic Alert Component Implementation
DESCRIPTION: Creates an alert with an icon, title and description. The alert informs users about CLI capabilities to add components and dependencies.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Alert>
  <Terminal className="h-4 w-4" />
  <AlertTitle>Heads up!</AlertTitle>
  <AlertDescription>
    You can add components and dependencies to your app using the cli.
  </AlertDescription>
</Alert>
```

----------------------------------------

TITLE: Implementing SidebarMenu with Projects List
DESCRIPTION: Shows how to create a sidebar menu with a list of projects, including icons and links.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_23

LANGUAGE: tsx
CODE:
```
<Sidebar>
  <SidebarContent>
    <SidebarGroup>
      <SidebarGroupLabel>Projects</SidebarGroupLabel>
      <SidebarGroupContent>
        <SidebarMenu>
          {projects.map((project) => (
            <SidebarMenuItem key={project.name}>
              <SidebarMenuButton asChild>
                <a href={project.url}>
                  <project.icon />
                  <span>{project.name}</span>
                </a>
              </SidebarMenuButton>
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>
  </SidebarContent>
</Sidebar>
```

----------------------------------------

TITLE: Importing Collapsible Component
DESCRIPTION: How to import the Collapsible component and its related subcomponents from your components directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/collapsible.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible"
```

----------------------------------------

TITLE: Importing Button Component in TypeScript
DESCRIPTION: Example of importing the Button component in a TypeScript React file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"
```

----------------------------------------

TITLE: Using Button Component with Nested Link
DESCRIPTION: Example of using the Button component with the asChild prop to nest a Link component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
<Button asChild>
  <Link href="/login">Login</Link>
</Button>
```

----------------------------------------

TITLE: Installing Tabs Component via CLI
DESCRIPTION: This command installs the Tabs component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tabs.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add tabs
```

----------------------------------------

TITLE: Configuring Vite
DESCRIPTION: Vite configuration with path aliases and plugins setup
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import path from "path"
import tailwindcss from "@tailwindcss/vite"
import react from "@vitejs/plugin-react"
import { defineConfig } from "vite"

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})
```

----------------------------------------

TITLE: Using shadcn/ui Button component in TanStack Start
DESCRIPTION: This TypeScript React snippet shows how to import and use the Button component from shadcn/ui in a TanStack Start application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_7

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"

function Home() {
  const router = useRouter()
  const state = Route.useLoaderData()

  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Installing Hover Card Component via CLI
DESCRIPTION: Command to install the Hover Card component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/hover-card.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add hover-card
```

----------------------------------------

TITLE: Importing Badge Variants Helper
DESCRIPTION: How to import the badgeVariants helper function for creating badge-styled links.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/badge.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
import { badgeVariants } from "@/components/ui/badge"
```

----------------------------------------

TITLE: Configuring Carousel Options
DESCRIPTION: Example showing how to pass additional configuration options to the Embla Carousel through the opts prop.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_9

LANGUAGE: tsx
CODE:
```
<Carousel
  opts={{
    align: "start",
    loop: true,
  }}
>
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
</Carousel>
```

----------------------------------------

TITLE: Importing Dialog Components
DESCRIPTION: Import statement for Dialog-related components from the UI library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
```

----------------------------------------

TITLE: Using shadcn/ui Components
DESCRIPTION: Example of importing and using a shadcn/ui Button component in a React component
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"

function App() {
  return (
    <div className="flex flex-col items-center justify-center min-h-svh">
      <Button>Click me</Button>
    </div>
  )
}

export default App
```

----------------------------------------

TITLE: Implementing Button Component in React Router
DESCRIPTION: Example of implementing a shadcn/ui Button component in a React Router route file, including meta information and component rendering
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
import { Button } from "~/components/ui/button"

import type { Route } from "./+types/home"

export function meta({}: Route.MetaArgs) {
  return [
    { title: "New React Router App" },
    { name: "description", content: "Welcome to React Router!" },
  ]
}

export default function Home() {
  return (
    <div className="flex flex-col items-center justify-center min-h-svh">
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Initializing shadcn/ui Monorepo Project with CLI
DESCRIPTION: Command to create a new monorepo project using the shadcn/ui CLI. It prompts the user to select the project type, specifically for a Next.js monorepo setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@canary init
```

----------------------------------------

TITLE: Installing Accordion Dependencies via NPM
DESCRIPTION: Command to install the required Radix UI accordion dependency using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-accordion
```

----------------------------------------

TITLE: Basic Sidebar Component Usage in TypeScript React
DESCRIPTION: Demonstrates the basic usage of the Sidebar component within a custom AppSidebar component. This is a simple implementation without any additional props.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_11

LANGUAGE: tsx
CODE:
```
import { Sidebar } from "@/components/ui/sidebar"

export function AppSidebar() {
  return <Sidebar />
}
```

----------------------------------------

TITLE: Defining Gray Theme Colors in OKLCH
DESCRIPTION: CSS variables defining the Gray color theme using OKLCH color space. Implements a gray-based color scheme with light and dark mode variations for UI components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_6

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.13 0.028 261.692);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.13 0.028 261.692);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.13 0.028 261.692);
  --primary: oklch(0.21 0.034 264.665);
  --primary-foreground: oklch(0.985 0.002 247.839);
  --secondary: oklch(0.967 0.003 264.542);
  --secondary-foreground: oklch(0.21 0.034 264.665);
  --muted: oklch(0.967 0.003 264.542);
  --muted-foreground: oklch(0.551 0.027 264.364);
  --accent: oklch(0.967 0.003 264.542);
  --accent-foreground: oklch(0.21 0.034 264.665);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.928 0.006 264.531);
  --input: oklch(0.928 0.006 264.531);
  --ring: oklch(0.707 0.022 261.325);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0.002 247.839);
  --sidebar-foreground: oklch(0.13 0.028 261.692);
  --sidebar-primary: oklch(0.21 0.034 264.665);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.967 0.003 264.542);
  --sidebar-accent-foreground: oklch(0.21 0.034 264.665);
  --sidebar-border: oklch(0.928 0.006 264.531);
  --sidebar-ring: oklch(0.707 0.022 261.325);
}

.dark {
  --background: oklch(0.13 0.028 261.692);
  --foreground: oklch(0.985 0.002 247.839);
  --card: oklch(0.21 0.034 264.665);
  --card-foreground: oklch(0.985 0.002 247.839);
  --popover: oklch(0.21 0.034 264.665);
  --popover-foreground: oklch(0.985 0.002 247.839);
  --primary: oklch(0.928 0.006 264.531);
  --primary-foreground: oklch(0.21 0.034 264.665);
  --secondary: oklch(0.278 0.033 256.848);
  --secondary-foreground: oklch(0.985 0.002 247.839);
  --muted: oklch(0.278 0.033 256.848);
  --muted-foreground: oklch(0.707 0.022 261.325);
  --accent: oklch(0.278 0.033 256.848);
  --accent-foreground: oklch(0.985 0.002 247.839);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.551 0.027 264.364);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.034 264.665);
  --sidebar-foreground: oklch(0.985 0.002 247.839);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.278 0.033 256.848);
  --sidebar-accent-foreground: oklch(0.985 0.002 247.839);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.551 0.027 264.364);
}
```

----------------------------------------

TITLE: Displaying a Simple Toast Notification
DESCRIPTION: Basic example of using the toast function to display a simple notification message.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sonner.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
toast("Event has been created.")
```

----------------------------------------

TITLE: Importing Navigation Menu Components in React
DESCRIPTION: Import statement for various Navigation Menu components from the UI library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuIndicator,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  NavigationMenuViewport,
} from "@/components/ui/navigation-menu"
```

----------------------------------------

TITLE: Using shadcn/ui Button Component in Astro Page
DESCRIPTION: Example of how to import and use the shadcn/ui Button component in an Astro page file. This includes the full structure of an Astro page with the Button component integrated.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#2025-04-21_snippet_4

LANGUAGE: astro
CODE:
```
---
import { Button } from "@/components/ui/button"
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro + TailwindCSS</title>
	</head>

	<body>
		<div class="grid place-items-center h-screen content-center">
			<Button>Button</Button>
		</div>
	</body>
</html>
```

----------------------------------------

TITLE: Tailwind Base Color - JSON
DESCRIPTION: Configuration for setting the default color palette for components. This cannot be changed after initialization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
  "tailwind": {
    "baseColor": "gray" | "neutral" | "slate" | "stone" | "zinc"
  }
}
```

----------------------------------------

TITLE: Importing Toggle Group Components
DESCRIPTION: Example of importing the Toggle Group and ToggleGroupItem components from the UI library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle-group.mdx#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group"
```

----------------------------------------

TITLE: Importing Shadcn/UI Components in TSX
DESCRIPTION: Example of how to import and use Shadcn/UI components from the UI package in a TSX file within the monorepo structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/README.md#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Button } from "@workspace/ui/components/button"
```

----------------------------------------

TITLE: Installing Dialog Component via CLI
DESCRIPTION: Command to add the Dialog component using shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add dialog
```

----------------------------------------

TITLE: Importing Accordion Components
DESCRIPTION: Example of importing the necessary Accordion components from the UI library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"
```

----------------------------------------

TITLE: Install Dependencies (npm)
DESCRIPTION: Installs the necessary dependencies for Shadcn UI using npm. These include class-variance-authority, clsx, tailwind-merge, lucide-react, and tw-animate-css.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install class-variance-authority clsx tailwind-merge lucide-react tw-animate-css
```

----------------------------------------

TITLE: Importing Hover Card Components in React
DESCRIPTION: Code snippet showing how to import the Hover Card components from the UI components directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/hover-card.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@/components/ui/hover-card"
```

----------------------------------------

TITLE: Importing Popover Components
DESCRIPTION: Code showing how to import the Popover, PopoverContent, and PopoverTrigger components from the UI components directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
```

----------------------------------------

TITLE: Installing Radio Group via CLI
DESCRIPTION: Command to add radio group component using shadcn CLI
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/radio-group.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add radio-group
```

----------------------------------------

TITLE: Creating Theme Action Route
DESCRIPTION: Implements the theme action route for handling theme changes in the session storage.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { createThemeAction } from "remix-themes"

import { themeSessionResolver } from "./sessions.server"

export const action = createThemeAction(themeSessionResolver)
```

----------------------------------------

TITLE: Installing Switch Dependencies Manually
DESCRIPTION: Command to manually install the required Radix UI switch primitive package.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-switch
```

----------------------------------------

TITLE: Importing Table Components in React
DESCRIPTION: Importing the necessary Table components from the UI library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/table.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
```

----------------------------------------

TITLE: Enabling Accessibility Layer for Charts
DESCRIPTION: This code snippet shows how to enable the accessibility layer for charts, which adds keyboard access and screen reader support.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_13

LANGUAGE: tsx
CODE:
```
<LineChart accessibilityLayer />
```

----------------------------------------

TITLE: Importing Checkbox Component
DESCRIPTION: Example of importing the Checkbox component from the components directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Checkbox } from "@/components/ui/checkbox"
```

----------------------------------------

TITLE: Importing Radio Group Components
DESCRIPTION: Import statements for the Radio Group and Label components
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/radio-group.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
```

----------------------------------------

TITLE: Using Navigation Menu with Next.js Link Component
DESCRIPTION: Example of how to integrate the Navigation Menu with Next.js Link component, applying the correct trigger styles.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
<NavigationMenuItem>
  <Link href="/docs" legacyBehavior passHref>
    <NavigationMenuLink className={navigationMenuTriggerStyle()}>
      Documentation
    </NavigationMenuLink>
  </Link>
</NavigationMenuItem>
```

----------------------------------------

TITLE: Importing Textarea Component
DESCRIPTION: Shows how to import the Textarea component from the components directory
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/textarea.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { Textarea } from "@/components/ui/textarea"
```

----------------------------------------

TITLE: Importing Calendar Component in React
DESCRIPTION: Example of how to import the Calendar component in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Calendar } from "@/components/ui/calendar"
```

----------------------------------------

TITLE: Importing Context Menu Components
DESCRIPTION: TypeScript code showing how to import the necessary context menu components from the UI library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/context-menu.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  ContextMenu,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuTrigger,
} from "@/components/ui/context-menu"
```

----------------------------------------

TITLE: Installing Radix UI Collapsible Dependency
DESCRIPTION: Command to install the required Radix UI collapsible dependency package using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/collapsible.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-collapsible
```

----------------------------------------

TITLE: Importing Avatar Component in React
DESCRIPTION: This code snippet shows how to import the Avatar component and its subcomponents in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/avatar.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
```

----------------------------------------

TITLE: Importing Drawer Components in React
DESCRIPTION: Example of importing various Drawer-related components in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/ui/drawer"
```

----------------------------------------

TITLE: Importing Skeleton Component
DESCRIPTION: Code snippet showing how to import the Skeleton component from the UI components directory. The import path may need to be adjusted based on your project structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/skeleton.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { Skeleton } from "@/components/ui/skeleton"
```

----------------------------------------

TITLE: Component Configuration Options
DESCRIPTION: Configuration prompts for setting up components.json including style, base color, and CSS variables preferences
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_2

LANGUAGE: txt
CODE:
```
Which style would you like to use? â€º New York
Which color would you like to use as base color? â€º Zinc
Do you want to use CSS variables for colors? â€º no / yes
```

----------------------------------------

TITLE: Installing Command Component Dependencies - Bash
DESCRIPTION: Command to install the required cmdk package via npm
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/command.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install cmdk
```

----------------------------------------

TITLE: Defining Registry Items in JSON
DESCRIPTION: This snippet demonstrates how to define items in the registry, following the registry-item schema specification. It includes an example of a 'Hello World' component definition.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-json.mdx#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "items": [
    {
      "name": "hello-world",
      "type": "registry:block",
      "title": "Hello World",
      "description": "A simple hello world component.",
      "files": [
        {
          "path": "registry/new-york/hello-world/hello-world.tsx",
          "type": "registry:component"
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Installing Remix Indie Stack using npx
DESCRIPTION: Command to create a new Remix project using the Indie Stack template.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
npx create-remix@latest --template remix-run/indie-stack
```

----------------------------------------

TITLE: Applying Theme Colors in Chart Components
DESCRIPTION: These code snippets demonstrate how to apply theme colors in various chart components and data structures using CSS variable references.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
<Bar dataKey="desktop" fill="var(--color-desktop)" />
```

LANGUAGE: tsx
CODE:
```
const chartData = [
  { browser: "chrome", visitors: 275, fill: "var(--color-chrome)" },
  { browser: "safari", visitors: 200, fill: "var(--color-safari)" },
]
```

LANGUAGE: tsx
CODE:
```
<LabelList className="fill-[--color-desktop]" />
```

----------------------------------------

TITLE: Configuring Basic Registry JSON Structure
DESCRIPTION: Initial configuration for registry.json file that defines the component registry metadata and items list.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "name": "acme",
  "homepage": "https://acme.com",
  "items": [
    // ...
  ]
}
```

----------------------------------------

TITLE: Creating Astro Project with Tailwind CSS and React
DESCRIPTION: Command to create a new Astro project with Tailwind CSS and React integration using the create-astro CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-astro@latest astro-app  --template with-tailwindcss --install --add react --git
```

----------------------------------------

TITLE: Implementing Button Component in TanStack Router
DESCRIPTION: Example of how to import and use the Button component in a TanStack Router route file. Shows the basic setup of a route with the Button component integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack-router.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { createFileRoute } from "@tanstack/react-router"

import { Button } from "@/components/ui/button"

export const Route = createFileRoute("/")({ 
  component: App,
})

function App() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Configuring Components JSON for JavaScript
DESCRIPTION: Base configuration file for JavaScript projects using shadcn-ui components, including style settings, paths, and TypeScript options.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "style": "default",
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "rsc": false,
  "tsx": false,
  "aliases": {
    "utils": "~/lib/utils",
    "components": "~/components"
  }
}
```

----------------------------------------

TITLE: Installing Tabs Component Dependencies Manually
DESCRIPTION: This command installs the necessary dependency for the Tabs component when setting up manually.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tabs.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-tabs
```

----------------------------------------

TITLE: Zod Schema Definition
DESCRIPTION: Example of creating a form validation schema using Zod.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
"use client"

import { z } from "zod"

const formSchema = z.object({
  username: z.string().min(2).max(50),
})
```

----------------------------------------

TITLE: React Server Components Configuration - JSON
DESCRIPTION: Configuration to enable/disable React Server Components support.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
{
  "rsc": "true" | "false"
}
```

----------------------------------------

TITLE: Adding Custom CSS Rules for Registry Item in JSON
DESCRIPTION: Shows how to add custom CSS rules to the project's CSS file using the css property, including @layer, @utility, and @keyframes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
{
  "css": {
    "@layer base": {
      "body": {
        "font-size": "var(--text-base)",
        "line-height": "1.5"
      }
    },
    "@layer components": {
      "button": {
        "background-color": "var(--color-primary)",
        "color": "var(--color-white)"
      }
    },
    "@utility text-magic": {
      "font-size": "var(--text-base)",
      "line-height": "1.5"
    },
    "@keyframes wiggle": {
      "0%, 100%": {
        "transform": "rotate(-3deg)"
      },
      "50%": {
        "transform": "rotate(3deg)"
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Basic SidebarGroup Component
DESCRIPTION: Shows how to create a basic sidebar group with label, action, and content components. Demonstrates the fundamental structure of a sidebar group.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_20

LANGUAGE: tsx
CODE:
```
import { Sidebar, SidebarContent, SidebarGroup } from "@/components/ui/sidebar"

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Application</SidebarGroupLabel>
          <SidebarGroupAction>
            <Plus /> <span className="sr-only">Add Project</span>
          </SidebarGroupAction>
          <SidebarGroupContent></SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Configuring TypeScript for path resolution in TanStack Start
DESCRIPTION: This TypeScript configuration snippet sets up path aliases for easier imports in a TanStack Start project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
{
  "compilerOptions": {
    "jsx": "react-jsx",
    "moduleResolution": "Bundler",
    "module": "ESNext",
    "target": "ES2022",
    "skipLibCheck": true,
    "strictNullChecks": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./app/*"]
    }
  }
}
```

----------------------------------------

TITLE: Importing Alert Dialog Components in React
DESCRIPTION: TypeScript code snippet showing how to import the various Alert Dialog components for use in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
```

----------------------------------------

TITLE: Importing Menubar Components in React
DESCRIPTION: Example of importing various Menubar-related components from the project's UI components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Menubar,
  MenubarContent,
  MenubarItem,
  MenubarMenu,
  MenubarSeparator,
  MenubarShortcut,
  MenubarTrigger,
} from "@/components/ui/menubar"
```

----------------------------------------

TITLE: Installing Required Dependencies Manually
DESCRIPTION: Command to install the Radix UI Dialog dependency required for the Sheet component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-dialog
```

----------------------------------------

TITLE: Setting up Git remote for the project
DESCRIPTION: Command to add a GitHub repository as the remote for the project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
git remote add origin <ORIGIN_URL>
```

----------------------------------------

TITLE: Configuring Carousel Item Sizes
DESCRIPTION: Example showing how to set fixed item sizes using the basis utility class for a carousel with 3 equally sized items.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_4

LANGUAGE: tsx
CODE:
```
// 33% of the carousel width.
<Carousel>
  <CarouselContent>
    <CarouselItem className="basis-1/3">...</CarouselItem>
    <CarouselItem className="basis-1/3">...</CarouselItem>
    <CarouselItem className="basis-1/3">...</CarouselItem>
  </CarouselContent>
</Carousel>
```

----------------------------------------

TITLE: Sidebar Theming Variables
DESCRIPTION: CSS variables used for theming the sidebar component with both light and dark mode support.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_30

LANGUAGE: css
CODE:
```
@layer base {
  :root {
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 0 0% 98%;
    --sidebar-primary-foreground: 240 5.9% 10%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}
```

----------------------------------------

TITLE: Basic Component Import
DESCRIPTION: Shows how to import the necessary resizable panel components from the UI components directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable"
```

----------------------------------------

TITLE: Using useSidebar Hook in TypeScript React
DESCRIPTION: Shows how to use the useSidebar hook to control the Sidebar state and behavior. This hook provides various properties and methods for sidebar management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_16

LANGUAGE: tsx
CODE:
```
import { useSidebar } from "@/components/ui/sidebar"

export function AppSidebar() {
  const {
    state,
    open,
    setOpen,
    openMobile,
    setOpenMobile,
    isMobile,
    toggleSidebar,
  } = useSidebar()
}
```

----------------------------------------

TITLE: Basic Sheet Component Usage
DESCRIPTION: Basic example of using the Sheet component with trigger, content, header, title, and description elements.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Sheet>
  <SheetTrigger>Open</SheetTrigger>
  <SheetContent>
    <SheetHeader>
      <SheetTitle>Are you absolutely sure?</SheetTitle>
      <SheetDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </SheetDescription>
    </SheetHeader>
  </SheetContent>
</Sheet>
```

----------------------------------------

TITLE: Handling Carousel Events
DESCRIPTION: Example showing how to listen to carousel events using the API instance obtained from setApi prop.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_11

LANGUAGE: tsx
CODE:
```
import { type CarouselApi } from "@/components/ui/carousel"

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()

  React.useEffect(() => {
    if (!api) {
      return
    }

    api.on("select", () => {
      // Do something on select.
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}
```

----------------------------------------

TITLE: Defining Custom Theme Variables
DESCRIPTION: Registry configuration for creating a custom theme with specific color values in light and dark modes using OKLCH color space.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "custom-theme",
  "type": "registry:theme",
  "cssVars": {
    "light": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.141 0.005 285.823)",
      "primary": "oklch(0.546 0.245 262.881)",
      "primary-foreground": "oklch(0.97 0.014 254.604)",
      "ring": "oklch(0.746 0.16 232.661)",
      "sidebar-primary": "oklch(0.546 0.245 262.881)",
      "sidebar-primary-foreground": "oklch(0.97 0.014 254.604)",
      "sidebar-ring": "oklch(0.746 0.16 232.661)"
    },
    "dark": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.141 0.005 285.823)",
      "primary": "oklch(0.707 0.165 254.624)",
      "primary-foreground": "oklch(0.97 0.014 254.604)",
      "ring": "oklch(0.707 0.165 254.624)",
      "sidebar-primary": "oklch(0.707 0.165 254.624)",
      "sidebar-primary-foreground": "oklch(0.97 0.014 254.604)",
      "sidebar-ring": "oklch(0.707 0.165 254.624)"
    }
  }
}
```

----------------------------------------

TITLE: TanStack Logo SVG Component
DESCRIPTION: SVG path definition for TanStack logo with viewBox and className props. The path contains detailed bezier curves and lines to render the TanStack logo.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-21_snippet_1

LANGUAGE: JSX
CODE:
```
<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 24 24"
  className="w-10 h-10"
  fill="currentColor"
>
  <path d="M6.93 13.688a.343.343 0 0 1 .468.132l.063.106c.48.851.98 1.66 1.5 2.426a35.65 35.65 0 0 0 2.074 2.742a.345.345 0 0 1-.039.484l-.074.066c-2.543 2.223-4.191 2.665-4.953 1.333-.746-1.305-.477-3.672.808-7.11a.344.344 0 0 1 .153-.18Z" />
</svg>
```

----------------------------------------

TITLE: Defining Registry Homepage in JSON
DESCRIPTION: This snippet illustrates how to set the homepage property for the registry, used for data attributes and other metadata.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-json.mdx#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "homepage": "https://acme.com"
}
```

----------------------------------------

TITLE: Creating Vite Project
DESCRIPTION: Command to create a new Vite project with React and TypeScript template
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm create vite@latest
```

----------------------------------------

TITLE: Configuring Import Aliases in jsconfig.json
DESCRIPTION: JavaScript configuration file that sets up import path aliases for the project using the @/* pattern.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*/"]
    }
  }
}
```

----------------------------------------

TITLE: Tailwind CSS Path - JSON
DESCRIPTION: Configuration specifying the path to the CSS file that imports Tailwind CSS.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "tailwind": {
    "css": "styles/global.css"
  }
}
```

----------------------------------------

TITLE: Importing Toggle Component
DESCRIPTION: Example of how to import the Toggle component in a React component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Toggle } from "@/components/ui/toggle"
```

----------------------------------------

TITLE: Installing Toggle Group Component via CLI
DESCRIPTION: Command to install the Toggle Group component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle-group.mdx#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add toggle-group
```

----------------------------------------

TITLE: Configuring root route and importing CSS in TanStack Start
DESCRIPTION: This TypeScript React snippet sets up the root route for a TanStack Start application and imports the main CSS file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
import type { ReactNode } from "react"
import { Outlet, createRootRoute } from "@tanstack/react-router"
import { Meta, Scripts } from "@tanstack/start"

import appCss from "@/styles/app.css?url"

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charSet: "utf-8",
      },
      {
        name: "viewport",
        content: "width=device-width, initial-scale=1",
      },
      {
        title: "TanStack Start Starter",
      },
    ],
    links: [
      {
        rel: "stylesheet",
        href: appCss,
      },
    ],
  }),
  component: RootComponent,
})
```

----------------------------------------

TITLE: Creating persistent volumes for SQLite database
DESCRIPTION: Commands to create persistent volumes for the SQLite database in staging and production environments on Fly.io.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
fly volumes create data --size 1 --app indie-stack-template
fly volumes create data --size 1 --app indie-stack-template-staging
```

----------------------------------------

TITLE: Importing Aspect Ratio Component in React
DESCRIPTION: Example of how to import the Aspect Ratio component and Next.js Image component in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import Image from "next/image"

import { AspectRatio } from "@/components/ui/aspect-ratio"
```

----------------------------------------

TITLE: Vertical Panel Implementation
DESCRIPTION: Example showing how to create a vertical panel layout using the direction prop.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable"

export default function Example() {
  return (
    <ResizablePanelGroup direction="vertical">
      <ResizablePanel>One</ResizablePanel>
      <ResizableHandle />
      <ResizablePanel>Two</ResizablePanel>
    </ResizablePanelGroup>
  )
}
```

----------------------------------------

TITLE: Configuring CSS Variables for Registry Item in JSON
DESCRIPTION: Demonstrates how to define CSS variables for a registry item using the cssVars property, including theme, light, and dark mode variables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
{
  "cssVars": {
    "theme": {
      "font-heading": "Poppins, sans-serif"
    },
    "light": {
      "brand": "20 14.3% 4.1%",
      "radius": "0.5rem"
    },
    "dark": {
      "brand": "20 14.3% 4.1%"
    }
  }
}
```

----------------------------------------

TITLE: Adding a shadcn/ui component to TanStack Start project
DESCRIPTION: This command demonstrates how to add a specific component (Button) from shadcn/ui to the project using the CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
npx shadcn@canary add button
```

----------------------------------------

TITLE: Adding or Overriding Tailwind Theme Variables (v4)
DESCRIPTION: This snippet shows how to add or override Tailwind theme variables by defining them in the cssVars.theme section of the JSON configuration for Tailwind CSS v4.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hello-world",
  "title": "Hello World",
  "type": "registry:block",
  "description": "A complex hello world component",
  "files": [
    // ...
  ],
  "cssVars": {
    "theme": {
      "text-base": "3rem",
      "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)",
      "font-heading": "Poppins, sans-serif"
    }
  }
}
```

----------------------------------------

TITLE: Using shadcn Components
DESCRIPTION: Example of importing and using a shadcn component in a Remix component
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
import { Button } from "~/components/ui/button"

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Importing Button Variants Helper
DESCRIPTION: Example of importing the buttonVariants helper function for creating link-like buttons.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { buttonVariants } from "@/components/ui/button"
```

----------------------------------------

TITLE: React Component Forward Ref Migration - Before
DESCRIPTION: Example of a React component using forwardRef before migration, showing the old pattern with ref forwarding and displayName
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_7

LANGUAGE: tsx
CODE:
```
const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b last:border-b-0", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"
```

----------------------------------------

TITLE: React Component Forward Ref Migration - After
DESCRIPTION: Example of the same React component after removing forwardRef, using ComponentProps and data-slot attribute
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  )
}
```

----------------------------------------

TITLE: Collapsed Breadcrumb with Ellipsis
DESCRIPTION: Implementing a collapsed state for breadcrumbs using the BreadcrumbEllipsis component when the breadcrumb is too long. The highlighted lines show the import and implementation of the ellipsis.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_5

LANGUAGE: tsx
CODE:
```
import { BreadcrumbEllipsis } from "@/components/ui/breadcrumb"

...

<Breadcrumb>
  <BreadcrumbList>
    {/* ... */}
    <BreadcrumbItem>
      <BreadcrumbEllipsis />
    </BreadcrumbItem>
    {/* ... */}
  </BreadcrumbList>
</Breadcrumb>
```

----------------------------------------

TITLE: Setting Carousel Orientation
DESCRIPTION: Example showing how to set the orientation of the carousel to vertical or horizontal using the orientation prop.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_8

LANGUAGE: tsx
CODE:
```
<Carousel orientation="vertical | horizontal">
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
</Carousel>
```

----------------------------------------

TITLE: Pattern-based Input OTP
DESCRIPTION: Implementation of Input OTP with alphanumeric pattern validation using REGEXP_ONLY_DIGITS_AND_CHARS.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { REGEXP_ONLY_DIGITS_AND_CHARS } from "input-otp"

...

<InputOTP
  maxLength={6}
  pattern={REGEXP_ONLY_DIGITS_AND_CHARS}
>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    {/* ... */}
  </InputOTPGroup>
</InputOTP>
```

----------------------------------------

TITLE: Installing Select Component Dependencies
DESCRIPTION: Command to install the required Radix UI Select component dependency using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-select
```

----------------------------------------

TITLE: Defining Zinc Theme Colors in OKLCH
DESCRIPTION: CSS variables defining the Zinc color theme using OKLCH color space. Includes both light and dark mode color definitions for various UI components and states.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_4

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.141 0.005 285.823);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.141 0.005 285.823);
  --primary: oklch(0.21 0.006 285.885);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.967 0.001 286.375);
  --secondary-foreground: oklch(0.21 0.006 285.885);
  --muted: oklch(0.967 0.001 286.375);
  --muted-foreground: oklch(0.552 0.016 285.938);
  --accent: oklch(0.967 0.001 286.375);
  --accent-foreground: oklch(0.21 0.006 285.885);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.92 0.004 286.32);
  --input: oklch(0.92 0.004 286.32);
  --ring: oklch(0.705 0.015 286.067);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.141 0.005 285.823);
  --sidebar-primary: oklch(0.21 0.006 285.885);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.967 0.001 286.375);
  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);
  --sidebar-border: oklch(0.92 0.004 286.32);
  --sidebar-ring: oklch(0.705 0.015 286.067);
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.21 0.006 285.885);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.21 0.006 285.885);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.92 0.004 286.32);
  --primary-foreground: oklch(0.21 0.006 285.885);
  --secondary: oklch(0.274 0.006 286.033);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.274 0.006 286.033);
  --muted-foreground: oklch(0.705 0.015 286.067);
  --accent: oklch(0.274 0.006 286.033);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.552 0.016 285.938);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.006 285.885);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.274 0.006 286.033);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.552 0.016 285.938);
}
```

----------------------------------------

TITLE: Creating New React Router Project
DESCRIPTION: Command to create a new React Router project using the create-react-router CLI
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-react-router@latest my-app
```

----------------------------------------

TITLE: Updating Calendar Component Styling
DESCRIPTION: Recent changelog entry showing an update to the styling of the 'day_outside' class in the Calendar component for improved contrast.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
"day_outside:
        \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\","
```

----------------------------------------

TITLE: GitHub Pull Request Reference
DESCRIPTION: Reference to a GitHub pull request with commit hash for tracking changes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
[#4397](https://github.com/shadcn-ui/ui/pull/4397) [`a1bed46`](https://github.com/shadcn-ui/ui/commit/a1bed464f329e9025a7fa1ae7dee094d4c9c6f44)
```

----------------------------------------

TITLE: Adding SidebarGroupAction Component
DESCRIPTION: Shows how to add an action button to a SidebarGroup with accessibility features.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_22

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  return (
    <SidebarGroup>
      <SidebarGroupLabel asChild>Projects</SidebarGroupLabel>
      <SidebarGroupAction title="Add Project">
        <Plus /> <span className="sr-only">Add Project</span>
      </SidebarGroupAction>
      <SidebarGroupContent />
    </SidebarGroup>
  )
}
```

----------------------------------------

TITLE: Basic Toggle Usage
DESCRIPTION: Simple example showing how to use the Toggle component with basic text content.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Toggle>Toggle</Toggle>
```

----------------------------------------

TITLE: Adding a shadcn/ui component using npm
DESCRIPTION: This command adds the Switch component from shadcn/ui to the project using npx.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/laravel.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add switch
```

----------------------------------------

TITLE: Initializing shadcn/ui in TanStack Start project
DESCRIPTION: This command runs the shadcn CLI to initialize and set up the project for using shadcn/ui components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
npx shadcn@canary init
```

----------------------------------------

TITLE: Configuring tsconfig.json for path resolution in Gatsby
DESCRIPTION: This snippet shows how to add path resolution configuration to the tsconfig.json file in a Gatsby project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
{
  "compilerOptions": {
    // ...
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
    // ...
  }
}
```

----------------------------------------

TITLE: Dropdown Menu in Breadcrumb Item
DESCRIPTION: Implementing a dropdown menu within a breadcrumb item by composing the BreadcrumbItem with DropdownMenu components. The highlighted lines show the imports and dropdown implementation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_4

LANGUAGE: tsx
CODE:
```
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

...

<BreadcrumbItem>
  <DropdownMenu>
    <DropdownMenuTrigger className="flex items-center gap-1">
      Components
      <ChevronDownIcon />
    </DropdownMenuTrigger>
    <DropdownMenuContent align="start">
      <DropdownMenuItem>Documentation</DropdownMenuItem>
      <DropdownMenuItem>Themes</DropdownMenuItem>
      <DropdownMenuItem>GitHub</DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>
</BreadcrumbItem>
```

----------------------------------------

TITLE: Configuring components.json for Web App in Monorepo (Tailwind CSS v4)
DESCRIPTION: JSON configuration for the components.json file in the web app directory of a monorepo using Tailwind CSS v4. It defines aliases and Tailwind CSS settings.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "../../packages/ui/src/styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@/components",
    "hooks": "@/hooks",
    "lib": "@/lib",
    "utils": "@workspace/ui/lib/utils",
    "ui": "@workspace/ui/components"
  }
}
```

----------------------------------------

TITLE: Options for shadcn init Command
DESCRIPTION: Detailed options for the 'init' command, including arguments for components and various flags for customization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
Usage: shadcn init [options] [components...]

initialize your project and install dependencies

Arguments:
  components         the components to add or a url to the component.

Options:
  -y, --yes           skip confirmation prompt. (default: true)
  -d, --defaults,     use default configuration. (default: false)
  -f, --force         force overwrite of existing configuration. (default: false)
  -c, --cwd <cwd>     the working directory. defaults to the current directory. (default: "/Users/shadcn/Desktop")
  -s, --silent        mute output. (default: false)
  --src-dir           use the src directory when creating a new project. (default: false)
  --no-src-dir        do not use the src directory when creating a new project.
  --css-variables     use css variables for theming. (default: true)
  --no-css-variables  do not use css variables for theming.
  -h, --help          display help for command
```

----------------------------------------

TITLE: Defining Shared ESLint Configuration Package in Markdown
DESCRIPTION: This snippet defines the name of the shared ESLint configuration package for the workspace. It uses a code block to highlight the package name.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/packages/eslint-config/README.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# `@workspace/eslint-config`
```

----------------------------------------

TITLE: Installing Skeleton Component using CLI
DESCRIPTION: Command to install the Skeleton component using the shadcn CLI tool. This provides a quick and automated way to add the component to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/skeleton.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add skeleton
```

----------------------------------------

TITLE: Importing Tailwind CSS in TanStack Start app styles
DESCRIPTION: This CSS snippet imports Tailwind CSS into the main application stylesheet for a TanStack Start project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_2

LANGUAGE: css
CODE:
```
@import "tailwindcss" source("../");
```

----------------------------------------

TITLE: Installing Table Component via CLI
DESCRIPTION: Command to install the Table component using the Shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/table.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add table
```

----------------------------------------

TITLE: Initializing shadcn/ui
DESCRIPTION: Command to initialize shadcn setup in the project
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Setting Registry Name in JSON
DESCRIPTION: This snippet shows how to set the name property for the registry, which is used for data attributes and other metadata.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-json.mdx#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "name": "acme"
}
```

----------------------------------------

TITLE: Tailwind Prefix Configuration - JSON
DESCRIPTION: Configuration for setting a prefix for Tailwind CSS utility classes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_7

LANGUAGE: json
CODE:
```
{
  "tailwind": {
    "prefix": "tw-"
  }
}
```

----------------------------------------

TITLE: Sidebar Trigger Implementation
DESCRIPTION: Shows how to implement a sidebar toggle button using SidebarTrigger component within SidebarProvider context.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_27

LANGUAGE: tsx
CODE:
```
<SidebarProvider>
  <Sidebar />
  <main>
    <SidebarTrigger />
  </main>
</SidebarProvider>
```

----------------------------------------

TITLE: Building Registry JSON Files with shadcn CLI
DESCRIPTION: Use the 'build' command to generate the registry JSON files. This command reads the 'registry.json' file and generates the registry JSON files in the 'public/r' directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
npx shadcn@latest build
```

----------------------------------------

TITLE: Installing Tooltip Component via CLI
DESCRIPTION: Command to install the tooltip component using the shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tooltip.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add tooltip
```

----------------------------------------

TITLE: Create components.json
DESCRIPTION: Creates a `components.json` file, which is used by Shadcn UI to configure the component library.  It defines the style, RSC setting, TSX usage, Tailwind CSS configuration, path aliases, and icon library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```

----------------------------------------

TITLE: Setting Carousel Item Spacing
DESCRIPTION: Example showing how to set spacing between carousel items using padding and negative margin utilities.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_6

LANGUAGE: tsx
CODE:
```
<Carousel>
  <CarouselContent className="-ml-4">
    <CarouselItem className="pl-4">...</CarouselItem>
    <CarouselItem className="pl-4">...</CarouselItem>
    <CarouselItem className="pl-4">...</CarouselItem>
  </CarouselContent>
</Carousel>
```

----------------------------------------

TITLE: Overriding Tailwind Theme Variables (v3)
DESCRIPTION: This snippet demonstrates how to override Tailwind theme variables by adding them to the tailwind.config.theme.extend section of the JSON configuration for Tailwind CSS v3.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hello-world",
  "title": "Hello World",
  "type": "registry:block",
  "description": "A complex hello world component",
  "files": [
    // ...
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "text": {
            "base": "3rem"
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: CSS Animation Plugin Migration
DESCRIPTION: Shows the migration from tailwindcss-animate plugin to tw-animate-css in globals.css
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_9

LANGUAGE: diff
CODE:
```
- @plugin 'tailwindcss-animate';
+ @import "tw-animate-css";
```

----------------------------------------

TITLE: Installing Collapsible Component via CLI
DESCRIPTION: Command to install the collapsible component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/collapsible.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add collapsible
```

----------------------------------------

TITLE: Using Progress Component
DESCRIPTION: Example showing basic usage of the Progress component with a value prop set to 33 percent.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/progress.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Progress value={33} />
```

----------------------------------------

TITLE: Installing Carousel Component via CLI
DESCRIPTION: Command to install the Carousel component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add carousel
```

----------------------------------------

TITLE: Using Menubar Component in React
DESCRIPTION: Example of how to use the Menubar component in a React application, demonstrating the structure and nested components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Menubar>
  <MenubarMenu>
    <MenubarTrigger>File</MenubarTrigger>
    <MenubarContent>
      <MenubarItem>
        New Tab <MenubarShortcut>âŒ˜T</MenubarShortcut>
      </MenubarItem>
      <MenubarItem>New Window</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Share</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Print</MenubarItem>
    </MenubarContent>
  </MenubarMenu>
</Menubar>
```

----------------------------------------

TITLE: Configuring Path Resolution in tsconfig.json for Astro
DESCRIPTION: Modification to the tsconfig.json file to add path resolution for the @/ alias, which is used for importing components from the src directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
{
  "compilerOptions": {
    // ...
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
    // ...
  }
}
```

----------------------------------------

TITLE: Adding New Tailwind Color in JSON Configuration (v3)
DESCRIPTION: This snippet demonstrates how to add a new Tailwind color by defining it in both cssVars and tailwind.config sections of the JSON configuration for Tailwind CSS v3.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hello-world",
  "title": "Hello World",
  "type": "registry:block",
  "description": "A complex hello world component",
  "files": [
    // ...
  ],
  "cssVars": {
    "light": {
      "brand-background": "20 14.3% 4.1%",
      "brand-accent": "20 14.3% 4.1%"
    },
    "dark": {
      "brand-background": "20 14.3% 4.1%",
      "brand-accent": "20 14.3% 4.1%"
    }
  },
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "colors": {
            "brand": {
              "DEFAULT": "hsl(var(--brand-background))",
              "accent": "hsl(var(--brand-accent))"
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Installing Progress Component via CLI
DESCRIPTION: Command to install the Progress component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/progress.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add progress
```

----------------------------------------

TITLE: Installing next-themes package
DESCRIPTION: Command to install the next-themes package using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/next.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install next-themes
```

----------------------------------------

TITLE: Sidebar with Rail Component
DESCRIPTION: Demonstrates the structure of a sidebar with a rail component that can be used for toggling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_29

LANGUAGE: tsx
CODE:
```
<Sidebar>
  <SidebarHeader />
  <SidebarContent>
    <SidebarGroup />
  </SidebarContent>
  <SidebarFooter />
  <SidebarRail />
</Sidebar>
```

----------------------------------------

TITLE: Implementing Alert Dialog Component in React
DESCRIPTION: TypeScript code snippet demonstrating how to use the Alert Dialog component in a React application, including the structure and content of the dialog.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<AlertDialog>
  <AlertDialogTrigger>Open</AlertDialogTrigger>
  <AlertDialogContent>
    <AlertDialogHeader>
      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
      <AlertDialogDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </AlertDialogDescription>
    </AlertDialogHeader>
    <AlertDialogFooter>
      <AlertDialogCancel>Cancel</AlertDialogCancel>
      <AlertDialogAction>Continue</AlertDialogAction>
    </AlertDialogFooter>
  </AlertDialogContent>
</AlertDialog>
```

----------------------------------------

TITLE: Adding Toaster Component to Root Layout with Manual Method
DESCRIPTION: How to integrate the Toaster component into the root layout when using the manual installation method.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-22_snippet_3

LANGUAGE: tsx
CODE:
```
import { Toaster } from "@/components/ui/toaster"

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Adding shadcn/ui Components to Next.js Project
DESCRIPTION: Command to add specific components from shadcn/ui to your project. This example demonstrates adding the Button component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/next.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Tailwind Config Path - JSON
DESCRIPTION: Configuration specifying the path to Tailwind configuration file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "tailwind": {
    "config": "tailwind.config.js" | "tailwind.config.ts"
  }
}
```

----------------------------------------

TITLE: Chart Configuration Update
DESCRIPTION: Shows the diff for updating chart color configuration to work with the new CSS variable format.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#2025-04-21_snippet_4

LANGUAGE: diff
CODE:
```
const chartConfig = {
  desktop: {
    label: "Desktop",
-    color: "hsl(var(--chart-1))",
+    color: "var(--chart-1)",
  },
  mobile: {
    label: "Mobile",
-   color: "hsl(var(--chart-2))",
+   color: "var(--chart-2)",
  },
} satisfies ChartConfig
```

----------------------------------------

TITLE: Installing Breadcrumb Component with CLI
DESCRIPTION: Command to install the breadcrumb component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add breadcrumb
```

----------------------------------------

TITLE: Installing Popover Component via NPM
DESCRIPTION: Command to install the required Radix UI Popover dependency using npm package manager.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-popover
```

----------------------------------------

TITLE: Specifying Schema for Registry Item JSON
DESCRIPTION: Shows how to specify the schema for the registry-item.json file using the $schema property.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json"
}
```

----------------------------------------

TITLE: Adding shadcn/ui Button Component to Astro Project
DESCRIPTION: Command to add the Button component from shadcn/ui to the Astro project using the shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Adding a shadcn-ui component to Gatsby project
DESCRIPTION: This command adds the Button component from shadcn-ui to a Gatsby project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Adding shadcn Components
DESCRIPTION: Command to add individual shadcn components to the project
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Installing Radio Group Dependencies
DESCRIPTION: Command to install the required Radix UI radio group dependency using npm
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/radio-group.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-radio-group
```

----------------------------------------

TITLE: Installing Avatar Component Dependencies via CLI
DESCRIPTION: This command installs the Avatar component and its dependencies using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/avatar.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add avatar
```

----------------------------------------

TITLE: Using shadcn-ui Button component in Gatsby
DESCRIPTION: This code snippet demonstrates how to import and use the Button component from shadcn-ui in a Gatsby project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_7

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Installing Separator Component Dependencies
DESCRIPTION: Command to install the required dependency for the Separator component manually.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/separator.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-separator
```

----------------------------------------

TITLE: Using Label Component
DESCRIPTION: Example of using the Label component with the htmlFor prop to associate it with a form control.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/label.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Label htmlFor="email">Your email address</Label>
```

----------------------------------------

TITLE: Installing Popover Component via CLI
DESCRIPTION: Command to add the Popover component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add popover
```

----------------------------------------

TITLE: Installing remix-themes Package
DESCRIPTION: Command to install the remix-themes package for theme management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install remix-themes
```

----------------------------------------

TITLE: Options for shadcn add Command
DESCRIPTION: Detailed options for the 'add' command, including arguments for components and various flags for customization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_3

LANGUAGE: txt
CODE:
```
Usage: shadcn add [options] [components...]

add a component to your project

Arguments:
  components         the components to add or a url to the component.

Options:
  -y, --yes           skip confirmation prompt. (default: false)
  -o, --overwrite     overwrite existing files. (default: false)
  -c, --cwd <cwd>     the working directory. defaults to the current directory. (default: "/Users/shadcn/Desktop")
  -a, --all           add all available components (default: false)
  -p, --path <path>   the path to add the component to.
  -s, --silent        mute output. (default: false)
  --src-dir           use the src directory when creating a new project. (default: false)
  --no-src-dir        do not use the src directory when creating a new project.
  --css-variables     use css variables for theming. (default: true)
  --no-css-variables  do not use css variables for theming.
  -h, --help          display help for command
```

----------------------------------------

TITLE: Configuring Registry Item Definition
DESCRIPTION: Extended registry.json configuration that includes component definition with metadata and file paths.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "name": "acme",
  "homepage": "https://acme.com",
  "items": [
    {
      "name": "hello-world",
      "type": "registry:block",
      "title": "Hello World",
      "description": "A simple hello world component.",
      "files": [
        {
          "path": "registry/new-york/hello-world/hello-world.tsx",
          "type": "registry:component"
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Installing Alert Dialog Component via CLI
DESCRIPTION: Command to install the Alert Dialog component using the shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add alert-dialog
```

----------------------------------------

TITLE: Setting up and running the development server
DESCRIPTION: Commands for initial setup and starting the development server for the Remix project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
npm run setup
npm run dev
```

----------------------------------------

TITLE: Installing Slider Component via CLI
DESCRIPTION: Command to install the Slider component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add slider
```

----------------------------------------

TITLE: Installing Toast Component via CLI
DESCRIPTION: Command to add the Toast component to your project using the Shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add toast
```

----------------------------------------

TITLE: Installing Alert Component via CLI
DESCRIPTION: Installs the Alert component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add alert
```

----------------------------------------

TITLE: Configuring Remix for Tailwind
DESCRIPTION: Adding Tailwind and PostCSS configuration to remix.config.js
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_5

LANGUAGE: js
CODE:
```
/** @type {import('@remix-run/dev').AppConfig} */
export default {
  ...
  tailwind: true,
  postcss: true,
  ...
};
```

----------------------------------------

TITLE: Installing Drawer Component via CLI
DESCRIPTION: Command to install the Drawer component using the shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add drawer
```

----------------------------------------

TITLE: Basic Breadcrumb Implementation
DESCRIPTION: Example of a basic breadcrumb component implementation with multiple levels (Home > Components > Breadcrumb).
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
<Breadcrumb>
  <BreadcrumbList>
    <BreadcrumbItem>
      <BreadcrumbLink href="/">Home</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbSeparator />
    <BreadcrumbItem>
      <BreadcrumbLink href="/components">Components</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbSeparator />
    <BreadcrumbItem>
      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
    </BreadcrumbItem>
  </BreadcrumbList>
</Breadcrumb>
```

----------------------------------------

TITLE: Installing Tailwind CSS
DESCRIPTION: Command to install Tailwind CSS and its Vite plugin
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install tailwindcss @tailwindcss/vite
```

----------------------------------------

TITLE: Installing Checkbox Component via CLI
DESCRIPTION: Command to install the checkbox component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add checkbox
```

----------------------------------------

TITLE: Utility Class Theming Example
DESCRIPTION: Example of using Tailwind utility classes for component theming.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
<div className="bg-zinc-950 dark:bg-white" />
```

----------------------------------------

TITLE: Installing Packages with npm Force Flags for React 19 Compatibility
DESCRIPTION: Commands demonstrating how to force-install packages with npm when facing peer dependency conflicts with React 19.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npm i <package> --force

npm i <package> --legacy-peer-deps
```

----------------------------------------

TITLE: Block Files Structure
DESCRIPTION: Example file structure for a dashboard block including components, hooks, and utilities
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_5

LANGUAGE: txt
CODE:
```
dashboard-01
â””â”€â”€ page.tsx
â””â”€â”€ components
    â””â”€â”€ hello-world.tsx
    â””â”€â”€ example-card.tsx
â””â”€â”€ hooks
    â””â”€â”€ use-hello-world.ts
â””â”€â”€ lib
    â””â”€â”€ format-date.ts
```

----------------------------------------

TITLE: Configuring PostCSS
DESCRIPTION: PostCSS configuration setup for Tailwind CSS and autoprefixer
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

----------------------------------------

TITLE: Using Cypress login utility in tests
DESCRIPTION: Example of using the custom Cypress login utility to authenticate a new user in tests.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_7

LANGUAGE: ts
CODE:
```
cy.login();
// you are now logged in as a new user
```

----------------------------------------

TITLE: Installing Navigation Menu via CLI
DESCRIPTION: Command to install the Navigation Menu component using the Shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add navigation-menu
```

----------------------------------------

TITLE: TypeScript Configuration - JSON
DESCRIPTION: Configuration to choose between TypeScript or JavaScript components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_9

LANGUAGE: json
CODE:
```
{
  "tsx": "true" | "false"
}
```

----------------------------------------

TITLE: Installing ScrollArea Component via CLI
DESCRIPTION: Command to add the scroll-area component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/scroll-area.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add scroll-area
```

----------------------------------------

TITLE: Block Registry Definition
DESCRIPTION: Example of registering a new block in the registry-blocks.tsx file with metadata and file definitions
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
export const blocks = [
  // ...
  {
    name: "dashboard-01",
    author: "shadcn (https://ui.shadcn.com)",
    title: "Dashboard",
    description: "A simple dashboard with a hello world component.",
    type: "registry:block",
    registryDependencies: ["input", "button", "card"],
    dependencies: ["zod"],
    files: [
      {
        path: "blocks/dashboard-01/page.tsx",
        type: "registry:page",
        target: "app/dashboard/page.tsx",
      },
      {
        path: "blocks/dashboard-01/components/hello-world.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/dashboard-01/components/example-card.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/dashboard-01/hooks/use-hello-world.ts",
        type: "registry:hook",
      },
      {
        path: "blocks/dashboard-01/lib/format-date.ts",
        type: "registry:lib",
      },
    ],
    categories: ["dashboard"],
  },
]
```

----------------------------------------

TITLE: Configuring PostCSS for Tailwind CSS in TanStack Start
DESCRIPTION: This snippet creates a PostCSS configuration file to enable Tailwind CSS processing in a TanStack Start project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export default {
  plugins: {
    "@tailwindcss/postcss": {},
  },
}
```

----------------------------------------

TITLE: Using Background and Foreground Classes in TSX
DESCRIPTION: Example of using background and foreground CSS classes for basic theming in a component
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
<div className="bg-background text-foreground" />
```

----------------------------------------

TITLE: Cleaning up test user after Cypress tests
DESCRIPTION: Example of using the Cypress cleanup utility to delete the test user after each test.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_8

LANGUAGE: ts
CODE:
```
afterEach(() => {
  cy.cleanupUser();
});
```

----------------------------------------

TITLE: Configuring Sidebar in Tailwind CSS
DESCRIPTION: Configuration for the sidebar component in tailwind.config.js. This adds sidebar-related utility classes that can be used throughout the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// ...
sidebar: {
  DEFAULT: 'hsl(var(--sidebar-background))',
  foreground: 'hsl(var(--sidebar-foreground))',
  primary: 'hsl(var(--sidebar-primary))',
  'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  accent: 'hsl(var(--sidebar-accent))',
  'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  border: 'hsl(var(--sidebar-border))',
  ring: 'hsl(var(--sidebar-ring))',
},
// ...
```

----------------------------------------

TITLE: Installing Sonner Dependencies Manually
DESCRIPTION: Command to manually install the required dependencies for Sonner including the next-themes package.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sonner.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npm install sonner next-themes
```

----------------------------------------

TITLE: Installing Project Dependencies with PNPM
DESCRIPTION: Command to install all dependencies in the monorepo using PNPM package manager.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Initializing shadcn/ui
DESCRIPTION: Command to initialize shadcn/ui in the project
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Adding Icon Styling Classes
DESCRIPTION: Code diff showing the addition of icon-related CSS classes to the DropdownMenuItem component
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_3

LANGUAGE: diff
CODE:
```
const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative ... gap-2 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
```

----------------------------------------

TITLE: Installing Tooltip Component Dependencies Manually
DESCRIPTION: Command to install the required Radix UI tooltip dependency for manual setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tooltip.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-tooltip
```

----------------------------------------

TITLE: Rendering Images in JSX for Registry Documentation
DESCRIPTION: This snippet demonstrates how to render images in JSX for documenting a custom registry. It includes both light and dark mode versions of the image, with a caption.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/index.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
<figure className="flex flex-col gap-4">
  <Image
    src="/images/registry-light.png"
    width="1432"
    height="960"
    alt="Registry"
    className="border dark:hidden shadow-sm rounded-lg overflow-hidden mt-6 w-full"
  />
  <Image
    src="/images/registry-dark.png"
    width="1432"
    height="960"
    alt="Registry"
    className="border hidden dark:block shadow-sm rounded-lg overflow-hidden mt-6 w-full"
  />
  <figcaption className="text-center text-sm text-gray-500">
    Distribute code to any React project.
  </figcaption>
</figure>
```

----------------------------------------

TITLE: Installing Avatar Component Dependencies Manually
DESCRIPTION: This command installs the required Radix UI Avatar component dependency using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/avatar.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-avatar
```

----------------------------------------

TITLE: Creating a New Git Branch
DESCRIPTION: Command to create and checkout a new Git branch for development work.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
git checkout -b my-new-branch
```

----------------------------------------

TITLE: Installing Pagination Component via CLI
DESCRIPTION: Command to install the pagination component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add pagination
```

----------------------------------------

TITLE: Defining Registry Item Name in JSON
DESCRIPTION: Demonstrates how to set the name property for a registry item, which should be unique within the registry.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "name": "hello-world"
}
```

----------------------------------------

TITLE: SubTrigger Icon Styling
DESCRIPTION: Implementation of icon styling classes for the DropdownMenuSubTrigger component
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
<DropdownMenuPrimitive.SubTrigger
  ref={ref}
  className={cn(
    "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
    inset && "pl-8",
    className
  )}
  {...props}
>
  {/* ... */}
</DropdownMenuPrimitive.SubTrigger>
```

----------------------------------------

TITLE: Installing Tailwind CSS and dependencies for TanStack Start
DESCRIPTION: This command installs Tailwind CSS and its required dependencies for a TanStack Start project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install tailwindcss @tailwindcss/postcss postcss
```

----------------------------------------

TITLE: Options for shadcn build Command
DESCRIPTION: Detailed options for the 'build' command, including arguments for registry path and output directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_5

LANGUAGE: txt
CODE:
```
Usage: shadcn build [options] [registry]

build components for a shadcn registry

Arguments:
  registry             path to registry.json file (default: "./registry.json")

Options:
  -o, --output <path>  destination directory for json files (default: "./public/r")
  -c, --cwd <cwd>      the working directory. defaults to the current directory. (default:
                       "/Users/shadcn/Code/shadcn/ui/packages/shadcn")
  -h, --help           display help for command
```

----------------------------------------

TITLE: Installing Drawer Component Dependencies Manually
DESCRIPTION: Command to install the required dependency (vaul) for the Drawer component manually.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install vaul
```

----------------------------------------

TITLE: Installing Toast Dependencies Manually
DESCRIPTION: Command to install the required Radix UI toast dependency for manual setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-toast
```

----------------------------------------

TITLE: Implementing Sidebar Header with Dropdown in TypeScript React
DESCRIPTION: Demonstrates how to create a Sidebar header with a dropdown menu using SidebarHeader, SidebarMenu, and DropdownMenu components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_17

LANGUAGE: tsx
CODE:
```
<Sidebar>
  <SidebarHeader>
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton>
              Select Workspace
              <ChevronDown className="ml-auto" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent className="w-[--radix-popper-anchor-width]">
            <DropdownMenuItem>
              <span>Acme Inc</span>
            </DropdownMenuItem>
            <DropdownMenuItem>
              <span>Acme Corp.</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  </SidebarHeader>
</Sidebar>
```

----------------------------------------

TITLE: JavaScript Path Configuration
DESCRIPTION: JSConfig configuration for setting up import aliases in JavaScript projects.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "paths": {
      "@/*": [".//*"]
    }
  }
}
```

----------------------------------------

TITLE: Adding New Tailwind Color in JSON Configuration (v4)
DESCRIPTION: This snippet shows how to add a new Tailwind color by defining it in the cssVars section of the JSON configuration for Tailwind CSS v4.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hello-world",
  "title": "Hello World",
  "type": "registry:block",
  "description": "A complex hello world component",
  "files": [
    // ...
  ],
  "cssVars": {
    "light": {
      "brand-background": "20 14.3% 4.1%",
      "brand-accent": "20 14.3% 4.1%"
    },
    "dark": {
      "brand-background": "20 14.3% 4.1%",
      "brand-accent": "20 14.3% 4.1%"
    }
  }
}
```

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter block defining the page title and description metadata for the About page documentation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/about.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: About
description: Powered by amazing open source projects.
---
```

----------------------------------------

TITLE: Adding Sidebar CSS Variables
DESCRIPTION: CSS variables for theming the sidebar component in both light and dark modes. These variables control the appearance of the sidebar including background, foreground, borders and accent colors.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_1

LANGUAGE: css
CODE:
```
@layer base {
  :root {
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}
```

----------------------------------------

TITLE: Cloning the Repository with Git
DESCRIPTION: Command to clone the forked repository to your local machine using Git.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
git clone https://github.com/your-username/ui.git
```

----------------------------------------

TITLE: Installing Dropdown Menu Dependencies
DESCRIPTION: Command to install the required Radix UI dropdown menu package using npm
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-dropdown-menu
```

----------------------------------------

TITLE: Capturing Block Screenshots
DESCRIPTION: Command to capture screenshots of the block for documentation
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
pnpm registry:capture
```

----------------------------------------

TITLE: Adding Components to shadcn/ui Monorepo Project
DESCRIPTION: Commands to navigate to the web app directory and add components using the shadcn/ui CLI. The CLI automatically handles component installation and import path management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cd apps/web
```

LANGUAGE: bash
CODE:
```
npx shadcn@canary add [COMPONENT]
```

----------------------------------------

TITLE: Adding shadcn/ui Components
DESCRIPTION: Command to add specific components from shadcn/ui
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Using New CLI Command for shadcn-ui
DESCRIPTION: Example of using the new CLI to initialize components using the npx command
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn init sidebar-01 login-01
```

----------------------------------------

TITLE: Installing Tailwind Dependencies
DESCRIPTION: Command to install Tailwind CSS and autoprefixer as development dependencies
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install -D tailwindcss@latest autoprefixer@latest
```

----------------------------------------

TITLE: Creating Development Branch
DESCRIPTION: Command to create a new branch for block development
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
git checkout -b username/my-new-block
```

----------------------------------------

TITLE: Defining Custom Component Registry Structure in JSON
DESCRIPTION: This snippet shows the overall structure of a registry.json file, including the schema reference, registry name, homepage, and an example item definition.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-json.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "name": "shadcn",
  "homepage": "https://ui.shadcn.com",
  "items": [
    {
      "name": "hello-world",
      "type": "registry:block",
      "title": "Hello World",
      "description": "A simple hello world component.",
      "files": [
        {
          "path": "registry/new-york/hello-world/hello-world.tsx",
          "type": "registry:component"
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: React Logo SVG Component
DESCRIPTION: Basic SVG structure for React logo with role, viewBox and className props. Shows just the opening tag as the path definition was truncated.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-21_snippet_3

LANGUAGE: JSX
CODE:
```
<svg
  role="img"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  className="w-10 h-10"
  fill="currentColor"
>
  <title>React</title>
```

----------------------------------------

TITLE: Specifying Registry Item Type in JSON
DESCRIPTION: Demonstrates how to set the type property for a registry item, which determines its type and target path when resolved for a project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
  "type": "registry:block"
}
```

----------------------------------------

TITLE: Installing Node Types
DESCRIPTION: Command to install Node.js type definitions as a dev dependency
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
npm install -D @types/node
```

----------------------------------------

TITLE: Warning Notice for Auto-generated Files
DESCRIPTION: Markdown text warning developers not to manually edit files in this directory as they are auto-generated by the build-registry.ts script.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/__registry__/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
Files inside this directory is autogenerated by `./scripts/build-registry.ts`. **Do not edit them manually.**
```

----------------------------------------

TITLE: Installing Switch Dependencies via CLI
DESCRIPTION: Command to install the switch component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add switch
```

----------------------------------------

TITLE: Building the Component Registry
DESCRIPTION: Command to update the component registry after making changes to components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10

LANGUAGE: bash
CODE:
```
pnpm build:registry
```

----------------------------------------

TITLE: Registry Categories Definition
DESCRIPTION: Example of adding a new category to the registry categories configuration
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
export const registryCategories = [
  // ...
  {
    name: "Input",
    slug: "input",
    hidden: false,
  },
]
```

----------------------------------------

TITLE: Importing Tabs Components in React
DESCRIPTION: This code snippet shows how to import the Tabs components in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tabs.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
```

----------------------------------------

TITLE: Installing Input Component via CLI
DESCRIPTION: Command to install the Input component using the shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add input
```

----------------------------------------

TITLE: Configuring components.json for shadcn-ui in Gatsby
DESCRIPTION: This shows the configuration prompts and responses for setting up components.json for shadcn-ui in a Gatsby project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_5

LANGUAGE: txt
CODE:
```
Would you like to use TypeScript (recommended)? no / yes
Which style would you like to use? â€º Default
Which color would you like to use as base color? â€º Slate
Where is your global CSS file? â€º â€º ./src/styles/globals.css
Do you want to use CSS variables for colors? â€º no / yes
Where is your tailwind.config.js located? â€º tailwind.config.js
Configure the import alias for components: â€º @/components
Configure the import alias for utils: â€º @/lib/utils
Are you using React Server Components? â€º no
```

----------------------------------------

TITLE: Running Project Tests with PNPM
DESCRIPTION: Command to execute all tests in the repository using Vitest through PNPM.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
pnpm test
```

----------------------------------------

TITLE: Adding Registry Build Script
DESCRIPTION: Package.json configuration for adding the registry build command.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "registry:build": "shadcn build"
  }
}
```

----------------------------------------

TITLE: Installing Accordion via shadcn CLI
DESCRIPTION: Command to add the accordion component using shadcn's CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add accordion
```

----------------------------------------

TITLE: Installing Input OTP via NPM
DESCRIPTION: Command to install the input-otp dependency using npm package manager.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install input-otp
```

----------------------------------------

TITLE: Using Separator Component in React JSX
DESCRIPTION: Example of how to use the Separator component in React JSX.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/separator.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Separator />
```

----------------------------------------

TITLE: Installing Badge Component via CLI
DESCRIPTION: Command to install the badge component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/badge.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add badge
```

----------------------------------------

TITLE: Example of Prefixed Tailwind Classes
DESCRIPTION: Example showing how Tailwind classes can be prefixed with 'tw-' when using custom prefix configuration
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<AlertDialog className="tw-grid tw-gap-4 tw-border tw-bg-background tw-shadow-lg" />
```

----------------------------------------

TITLE: Component Diff Command
DESCRIPTION: Experimental command to check for component updates.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
npx shadcn diff
```

----------------------------------------

TITLE: Building Registry Components
DESCRIPTION: Command to build the registry components
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
pnpm registry:build
```

----------------------------------------

TITLE: Initializing shadcn/ui in Astro Project
DESCRIPTION: Command to run the shadcn CLI for initializing the project setup for using shadcn/ui components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Importing Input Component in React
DESCRIPTION: How to import the Input component in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { Input } from "@/components/ui/input"
```

----------------------------------------

TITLE: Creating New Remix Project
DESCRIPTION: Command to create a new Remix project using create-remix CLI
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-remix@latest my-app
```

----------------------------------------

TITLE: Installing Textarea Component via CLI
DESCRIPTION: Command to install the textarea component using the shadcn CLI tool
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/textarea.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add textarea
```

----------------------------------------

TITLE: Rendering Accordion Component in React
DESCRIPTION: Example of using shadcn/ui's Accordion component with collapsible functionality and custom styling. Shows the composable nature of the components using AccordionItem, AccordionTrigger, and AccordionContent.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/index.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
<Accordion collapsible>
  <AccordionItem value="faq-1" className="border-none">
    <AccordionTrigger>
      How do I pull upstream updates in an Open Code approach?
    </AccordionTrigger>
    <AccordionContent>
      <p>
        shadcn/ui follows a headless component architecture. This means the core
        of your app can receive fixes by updating your dependencies, for
        instance, radix-ui or input-otp.
      </p>
      <p className="mt-4">
        The topmost layer, i.e., the one closest to your design system, is not
        coupled with the implementation of the library. It stays open for
        modification.
      </p>
    </AccordionContent>
  </AccordionItem>
</Accordion>
```

----------------------------------------

TITLE: Installing Separator Component via CLI
DESCRIPTION: Command to install the Separator component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/separator.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add separator
```

----------------------------------------

TITLE: Displaying Repository Structure in Bash
DESCRIPTION: A structured representation of the repository's directory organization, showing the apps and packages directories with their nested components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
apps
â””â”€â”€ www
    â”œâ”€â”€ app
    â”œâ”€â”€ components
    â”œâ”€â”€ content
    â””â”€â”€ registry
        â”œâ”€â”€ default
        â”‚   â”œâ”€â”€ example
        â”‚   â””â”€â”€ ui
        â””â”€â”€ new-york
            â”œâ”€â”€ example
            â””â”€â”€ ui
packages
â””â”€â”€ cli
```

----------------------------------------

TITLE: Installing Menubar Component Dependencies Manually
DESCRIPTION: Command to install the required dependencies for the Menubar component using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-menubar
```

----------------------------------------

TITLE: Configuring TypeScript App Config
DESCRIPTION: TypeScript configuration for tsconfig.app.json file to resolve paths in IDE
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
{
  "compilerOptions": {
    // ...
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
    // ...
  }
}
```

----------------------------------------

TITLE: Installing Context Menu via shadcn CLI
DESCRIPTION: Command to add the context menu component using shadcn's CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/context-menu.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add context-menu
```

----------------------------------------

TITLE: Installing Button Component Dependencies Manually
DESCRIPTION: Command to install the required dependencies for the Button component manually using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-slot
```

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start the development server
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
pnpm www:dev
```

----------------------------------------

TITLE: Installing Toggle Group Component Dependencies
DESCRIPTION: Command to install the required Radix UI Toggle Group dependency using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle-group.mdx#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-toggle-group
```

----------------------------------------

TITLE: Installing Required Dependencies for Hover Card
DESCRIPTION: Command to install the Radix UI Hover Card dependency using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/hover-card.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-hover-card
```

----------------------------------------

TITLE: Installing Select Component via CLI
DESCRIPTION: Command to add the Select component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add select
```

----------------------------------------

TITLE: Installing Slider Component Dependencies
DESCRIPTION: Command to install the required dependency for the Slider component using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-slider
```

----------------------------------------

TITLE: Installing Dependencies with NPM
DESCRIPTION: Command to install the required react-resizable-panels package using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install react-resizable-panels
```

----------------------------------------

TITLE: Installing ScrollArea Dependencies via NPM
DESCRIPTION: Command to install the required Radix UI scroll area dependency using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/scroll-area.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-scroll-area
```

----------------------------------------

TITLE: Configuring Gatsby project with TypeScript and Tailwind CSS
DESCRIPTION: This shows the configuration prompts and responses for setting up a Gatsby project with TypeScript and Tailwind CSS.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
âœ” What would you like to call your site?
Â· your-app-name
âœ” What would you like to name the folder where your site will be created?
Â· your-app-name
âœ” Will you be using JavaScript or TypeScript?
Â· TypeScript
âœ” Will you be using a CMS?
Â· Choose whatever you want
âœ” Would you like to install a styling system?
Â· Tailwind CSS
âœ” Would you like to install additional features with other plugins?
Â· Choose whatever you want
âœ” Shall we do this? (Y/n) Â· Yes
```

----------------------------------------

TITLE: Installing Toggle Component via CLI
DESCRIPTION: Command to add the toggle component using shadcn's CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add toggle
```

----------------------------------------

TITLE: Configuring TypeScript Options in components.json
DESCRIPTION: Configuration file for shadcn-ui components showing how to opt-out of TypeScript using the tsx flag. Includes settings for style, tailwind configuration, and import aliases.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "style": "default",
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "rsc": false,
  "tsx": false,
  "aliases": {
    "utils": "~/lib/utils",
    "components": "~/components"
  }
}
```

----------------------------------------

TITLE: Manual Dependencies Installation
DESCRIPTION: Command to manually install required dependencies for the form component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-label @radix-ui/react-slot react-hook-form @hookform/resolvers zod
```

----------------------------------------

TITLE: Adding Components with shadcn CLI
DESCRIPTION: This command adds a specified component to the project and installs all required dependencies. It can be used with a component name as an argument.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn add [component]
```

----------------------------------------

TITLE: Disabled State Configuration
DESCRIPTION: Implementation of disabled state styling for the Input OTP component using Tailwind CSS classes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"
```

----------------------------------------

TITLE: Installing Sheet Component via CLI
DESCRIPTION: Command to install the Sheet component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add sheet
```

----------------------------------------

TITLE: Typography Component Examples
DESCRIPTION: Series of component preview declarations for different typography elements including headings, paragraphs, blockquotes, tables, lists, and text styles.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/typography.mdx#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
<ComponentPreview name="typography-h1" />
<ComponentPreview name="typography-h2" />
<ComponentPreview name="typography-h3" />
<ComponentPreview name="typography-h4" />
<ComponentPreview name="typography-p" />
<ComponentPreview name="typography-blockquote" />
<ComponentPreview name="typography-table" />
<ComponentPreview name="typography-list" />
<ComponentPreview name="typography-inline-code" />
<ComponentPreview name="typography-lead" />
<ComponentPreview name="typography-large" />
<ComponentPreview name="typography-small" />
<ComponentPreview name="typography-muted" />
```

----------------------------------------

TITLE: Installing Checkbox Dependencies
DESCRIPTION: Command to install the required Radix UI checkbox dependency using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-checkbox
```

----------------------------------------

TITLE: Installing Dialog Dependencies via NPM
DESCRIPTION: Command to install the required Radix UI Dialog dependency using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-dialog
```

----------------------------------------

TITLE: Button Variant Configuration
DESCRIPTION: Configuration for button component variants including size options.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_10

LANGUAGE: tsx
CODE:
```
const buttonVariants = cva({
  variants: {
    size: {
      default: "h-10 px-4 py-2",
      sm: "h-9 rounded-md px-3",
      lg: "h-11 rounded-md px-8",
      icon: "h-10 w-10",
    },
  },
})
```

----------------------------------------

TITLE: Installing Menubar Component via CLI
DESCRIPTION: Command to install the Menubar component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add menubar
```

----------------------------------------

TITLE: Setting Registry Item Title in JSON
DESCRIPTION: Shows how to set a human-readable title for a registry item using the title property.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "title": "Hello World"
}
```

----------------------------------------

TITLE: Using the Toast Component in a React Component
DESCRIPTION: Example of implementing a toast notification in a React component using the useToast hook. The toast displays a title and description when a button is clicked.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-22_snippet_5

LANGUAGE: tsx
CODE:
```
export const ToastDemo = () => {
  const { toast } = useToast()

  return (
    <Button
      onClick={() => {
        toast({
          title: "Scheduled: Catch up",
          description: "Friday, February 10, 2023 at 5:57 PM",
        })
      }}
    >
      Show Toast
    </Button>
  )
}
```

----------------------------------------

TITLE: Importing Select Component
DESCRIPTION: TypeScript/React code showing how to import the Select component and its subcomponents.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
```

----------------------------------------

TITLE: Importing Tooltip Components in React
DESCRIPTION: TypeScript code snippet showing how to import the tooltip components for use in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tooltip.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
```

----------------------------------------

TITLE: Installing Dependencies for Calendar Component
DESCRIPTION: Command to install required dependencies for the Calendar component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install react-day-picker@8.10.1 date-fns
```

----------------------------------------

TITLE: Setting Sidebar Variant in TypeScript React
DESCRIPTION: Demonstrates how to use the 'variant' prop to change the visual style of the Sidebar. Available options are 'sidebar', 'floating', and 'inset'.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_13

LANGUAGE: tsx
CODE:
```
import { Sidebar } from "@/components/ui/sidebar"

export function AppSidebar() {
  return <Sidebar variant="sidebar | floating | inset" />
}
```

----------------------------------------

TITLE: Adding Registry Item Description in JSON
DESCRIPTION: Illustrates how to provide a detailed description for a registry item using the description property.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "description": "A simple hello world component."
}
```

----------------------------------------

TITLE: Adding Toaster Component to Root Layout with CLI Method
DESCRIPTION: How to integrate the Toaster component into the root layout when using the CLI installation method.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
import { Toaster } from "@/components/ui/toaster"

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Next.js Link Integration
DESCRIPTION: Code diff showing how to modify the pagination component to use Next.js Link component instead of standard anchor tags.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#2025-04-21_snippet_3

LANGUAGE: diff
CODE:
```
+ import Link from "next/link"

- type PaginationLinkProps = ... & React.ComponentProps<"a">
+ type PaginationLinkProps = ... & React.ComponentProps<typeof Link>

const PaginationLink = ({...props }: ) => (
  <PaginationItem>
-   <a>
+   <Link>
      // ...
-   </a>
+   </Link>
  </PaginationItem>
)
```

----------------------------------------

TITLE: Importing Dropdown Menu Components
DESCRIPTION: TypeScript code showing how to import the necessary dropdown menu components from the UI library
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
```

----------------------------------------

TITLE: Typography Component Preview Declarations
DESCRIPTION: Front matter and component preview declarations for typography documentation. Includes various typography elements like headings, paragraphs, lists, and text styles.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/typography.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
---
title: Typography
description: Styles for headings, paragraphs, lists...etc
component: true
---

<ComponentPreview
  name="typography-demo"
  className="[&>div.min-h-[350px]]:p-6"
  description="A collection of typographic elements."
/>
```

----------------------------------------

TITLE: Importing Breadcrumb Components
DESCRIPTION: Import statement for all breadcrumb-related components from the UI library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-22_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb"
```

----------------------------------------

TITLE: Importing Carousel Components
DESCRIPTION: How to import the basic carousel components from the UI library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel"
```

----------------------------------------

TITLE: npm Peer Dependency Error Message with React 19
DESCRIPTION: The error message displayed when installing a package that doesn't list React 19 as a peer dependency using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm error code ERESOLVE
npm error ERESOLVE unable to resolve dependency tree
npm error
npm error While resolving: my-app@0.1.0
npm error Found: react@19.0.0-rc-69d4b800-20241021
npm error node_modules/react
npm error   react@"19.0.0-rc-69d4b800-20241021" from the root project
```

----------------------------------------

TITLE: Block Directory Structure
DESCRIPTION: Example directory structure for a new block in the registry
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_4

LANGUAGE: txt
CODE:
```
apps
â””â”€â”€ www
    â””â”€â”€ registry
        â””â”€â”€ new-york
            â””â”€â”€ blocks
                â””â”€â”€ dashboard-01
```

----------------------------------------

TITLE: Customizing Chart Tooltip with Data Keys
DESCRIPTION: This snippet demonstrates how to customize the chart tooltip by specifying custom keys for label and name in the tooltip content.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_10

LANGUAGE: tsx
CODE:
```
<ChartTooltip
  content={<ChartTooltipContent labelKey="visitors" nameKey="browser" />}
/>
```

----------------------------------------

TITLE: Importing Badge Component
DESCRIPTION: How to import the Badge component into your React/TypeScript project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/badge.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { Badge } from "@/components/ui/badge"
```

----------------------------------------

TITLE: Importing Progress Component
DESCRIPTION: Example showing how to import the Progress component from the components directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/progress.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Progress } from "@/components/ui/progress"
```

----------------------------------------

TITLE: Importing Alert Component
DESCRIPTION: Imports the Alert component and its related subcomponents from the components directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
```

----------------------------------------

TITLE: Installing Sonner via CLI
DESCRIPTION: Command to install the Sonner component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sonner.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add sonner
```

----------------------------------------

TITLE: Importing ScrollArea Component
DESCRIPTION: Example of importing the ScrollArea component from the components directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/scroll-area.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { ScrollArea } from "@/components/ui/scroll-area"
```

----------------------------------------

TITLE: Installing Alert Dialog Component Dependencies Manually
DESCRIPTION: Command to install the required dependencies for the Alert Dialog component manually using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-alert-dialog
```

----------------------------------------

TITLE: Configuring Tailwind CSS
DESCRIPTION: Basic Tailwind CSS import configuration for the main CSS file
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#2025-04-21_snippet_2

LANGUAGE: css
CODE:
```
@import "tailwindcss";
```

----------------------------------------

TITLE: Updating Sheet Component Position Prop
DESCRIPTION: A diff showing the replacement of the 'position' prop with 'side' prop in the Sheet component usage.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_12

LANGUAGE: diff
CODE:
```
- <Sheet position="right" />
+ <Sheet side="right" />
```

----------------------------------------

TITLE: Specifying Schema for registry.json in JSON
DESCRIPTION: This snippet demonstrates how to specify the schema for the registry.json file using the $schema property.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-json.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry.json"
}
```

----------------------------------------

TITLE: Configuring ESLint Parser Options for React TypeScript Project
DESCRIPTION: This snippet shows how to configure the top-level parserOptions in ESLint for a React TypeScript project. It sets the ECMAScript version, source type, and specifies the TypeScript configuration files.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/vite-with-tailwind/README.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
export default {
  // other rules...
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
    project: ['./tsconfig.json', './tsconfig.node.json'],
    tsconfigRootDir: __dirname,
  },
}
```

----------------------------------------

TITLE: Installing Table Component and TanStack Table Dependency
DESCRIPTION: Commands to add the Table component from shadcn/ui and install the TanStack Table dependency.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add table
```

LANGUAGE: bash
CODE:
```
npm install @tanstack/react-table
```

----------------------------------------

TITLE: Importing Label Component
DESCRIPTION: Example of importing the Label component from the components directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/label.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Label } from "@/components/ui/label"
```

----------------------------------------

TITLE: Importing Separator Component in React
DESCRIPTION: Example of how to import the Separator component in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/separator.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Separator } from "@/components/ui/separator"
```

----------------------------------------

TITLE: Installing Label Component Dependencies
DESCRIPTION: Command to install the required Radix UI label dependency using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/label.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-label
```

----------------------------------------

TITLE: Initializing ShadcnUI Configuration - Bash Command
DESCRIPTION: Command to create a new components.json configuration file in your project using the ShadcnUI CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Installing Navigation Menu Dependencies Manually
DESCRIPTION: Command to install the required Radix UI dependency for the Navigation Menu component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-navigation-menu
```

----------------------------------------

TITLE: Creating TanStack Router Project with shadcn/ui
DESCRIPTION: Command to create a new TanStack Router project with tailwind and shadcn add-ons using create-tsrouter-app.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack-router.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-tsrouter-app@latest my-app --template file-router --tailwind --add-ons shadcn
```

----------------------------------------

TITLE: Custom Sidebar Trigger
DESCRIPTION: Example of creating a custom sidebar trigger using the useSidebar hook.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_28

LANGUAGE: tsx
CODE:
```
import { useSidebar } from "@/components/ui/sidebar"

export function CustomTrigger() {
  const { toggleSidebar } = useSidebar()

  return <button onClick={toggleSidebar}>Toggle Sidebar</button>
}
```

----------------------------------------

TITLE: Importing Pagination Components
DESCRIPTION: Import statement for pagination-related components including content, ellipsis, items, links, and navigation buttons.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination"
```

----------------------------------------

TITLE: Creating a new Gatsby project using create-gatsby
DESCRIPTION: This command initializes a new Gatsby project using the create-gatsby tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm init gatsby
```

----------------------------------------

TITLE: Importing Navigation Menu Trigger Style in React
DESCRIPTION: Import statement for the navigation menu trigger style function.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { navigationMenuTriggerStyle } from "@/components/ui/navigation-menu"
```

----------------------------------------

TITLE: Installing Toggle Dependencies via NPM
DESCRIPTION: Command to install the required Radix UI toggle dependency using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-toggle
```

----------------------------------------

TITLE: Running shadcn-ui initialization in Gatsby project
DESCRIPTION: This command runs the shadcn-ui initialization process in a Gatsby project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Customizing Output Directory for shadcn build Command
DESCRIPTION: Example of using the '--output' option to customize the output directory for the 'build' command.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
npx shadcn@latest build --output ./public/registry
```

----------------------------------------

TITLE: Initializing shadcn/ui
DESCRIPTION: Command to initialize shadcn/ui in the project using the CLI
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Basic Sidebar Structure with Separator
DESCRIPTION: Example showing basic sidebar structure using SidebarSeparator component to create visual breaks between sections.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_26

LANGUAGE: tsx
CODE:
```
<Sidebar>
  <SidebarHeader />
  <SidebarSeparator />
  <SidebarContent>
    <SidebarGroup />
    <SidebarSeparator />
    <SidebarGroup />
  </SidebarContent>
</Sidebar>
```

----------------------------------------

TITLE: Installing Card Component via CLI
DESCRIPTION: Command to install the card component using the shadcn CLI tool
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add card
```

----------------------------------------

TITLE: Installing Context Menu Dependencies via NPM
DESCRIPTION: Command to install the required Radix UI context menu dependency using npm package manager.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/context-menu.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-context-menu
```

----------------------------------------

TITLE: Importing Switch Component
DESCRIPTION: Example of importing the Switch component from the components directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { Switch } from "@/components/ui/switch"
```

----------------------------------------

TITLE: Displaying Mode Toggle in Astro Page
DESCRIPTION: This snippet demonstrates how to import and display the ModeToggle component in an Astro page. It includes the necessary import statement and places the component within the body of the HTML structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/astro.mdx#2025-04-21_snippet_2

LANGUAGE: astro
CODE:
```
---
import '../styles/globals.css'
import { ModeToggle } from '@/components/ModeToggle';
---

<!-- Inline script -->

<html lang="en">
	<body>
      <h1>Astro</h1>
      <ModeToggle client:load />
	</body>
</html>
```

----------------------------------------

TITLE: Cloning Repository for Block Development
DESCRIPTION: Initial setup command to clone the shadcn-ui repository
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/shadcn-ui/ui.git
```

----------------------------------------

TITLE: Creating a new Laravel project with React
DESCRIPTION: This command uses the Laravel installer to create a new project with React and Inertia.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/laravel.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
laravel new my-app --react
```

----------------------------------------

TITLE: CSS Variables Theming Example
DESCRIPTION: Example of using CSS variables for component theming.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/changelog.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
<div className="bg-background text-foreground" />
```

----------------------------------------

TITLE: Running CLI Package in Development Mode
DESCRIPTION: Command to start the development server for the shadcn-ui CLI package using PNPM's filter feature.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
pnpm --filter=shadcn-ui dev
```

----------------------------------------

TITLE: Implementing Open in v0 Button Component in React
DESCRIPTION: This code snippet defines a React component for an 'Open in v0' button. It creates a styled button that links to the v0 API endpoint for opening a specified URL. The component includes the v0 logo and is designed to work with the shadcn UI library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/open-in-v0.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import { Button } from "@/components/ui/button"

export function OpenInV0Button({ url }: { url: string }) {
  return (
    <Button
      aria-label="Open in v0"
      className="h-8 gap-1 rounded-[6px] bg-black px-3 text-xs text-white hover:bg-black hover:text-white dark:bg-white dark:text-black"
      asChild
    >
      <a
        href={`https://v0.dev/chat/api/open?url=${url}`}
        target="_blank"
        rel="noreferrer"
      >
        Open in{" "}
        <svg
          viewBox="0 0 40 20"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          className="h-5 w-5 text-current"
        >
          <path
            d="M23.3919 0H32.9188C36.7819 0 39.9136 3.13165 39.9136 6.99475V16.0805H36.0006V6.99475C36.0006 6.90167 35.9969 6.80925 35.9898 6.71766L26.4628 16.079C26.4949 16.08 26.5272 16.0805 26.5595 16.0805H36.0006V19.7762H26.5595C22.6964 19.7762 19.4788 16.6139 19.4788 12.7508V3.68923H23.3919V12.7508C23.3919 12.9253 23.4054 13.0977 23.4316 13.2668L33.1682 3.6995C33.0861 3.6927 33.003 3.68923 32.9188 3.68923H23.3919V0Z"
            fill="currentColor"
          ></path>
          <path
            d="M13.7688 19.0956L0 3.68759H5.53933L13.6231 12.7337V3.68759H17.7535V17.5746C17.7535 19.6584 15.1654 20.6584 13.7688 19.0956Z"
            fill="currentColor"
          ></path>
        </svg>
      </a>
    </Button>
  )
}
```

----------------------------------------

TITLE: Project Installation Command
DESCRIPTION: Example of a shadcn-ui CLI installation path, showing where modifications are made.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/cli/CHANGELOG.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
shadcn-ui
```

----------------------------------------

TITLE: Importing Sheet Component
DESCRIPTION: Example of importing the Sheet component and its related subcomponents for use in React applications.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet"
```

----------------------------------------

TITLE: Running Website Workspace in Development Mode
DESCRIPTION: Command to start the development server for the www workspace using PNPM's filter feature.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
pnpm --filter=www dev
```

----------------------------------------

TITLE: Using Direct Color Values in Chart Configuration
DESCRIPTION: This snippet illustrates how to use direct color values (like hex codes) in the chart configuration instead of CSS variables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#2025-04-21_snippet_7

LANGUAGE: tsx
CODE:
```
const chartConfig = {
  desktop: {
    label: "Desktop",
    color: "#2563eb",
  },
} satisfies ChartConfig
```

----------------------------------------

TITLE: Adding shadcn/ui Components
DESCRIPTION: Command to add specific shadcn/ui components (in this case, the Button component) to the project using the shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack-router.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@canary add button
```

----------------------------------------

TITLE: Defining Complex Component Structure in JSON
DESCRIPTION: This snippet demonstrates the structure of a complex component in a registry, including multiple files of different types and their target locations.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hello-world",
  "title": "Hello World",
  "type": "registry:block",
  "description": "A complex hello world component",
  "files": [
    {
      "path": "registry/new-york/hello-world/page.tsx",
      "type": "registry:page",
      "target": "app/hello/page.tsx"
    },
    {
      "path": "registry/new-york/hello-world/components/hello-world.tsx",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/hello-world/components/formatted-message.tsx",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/hello-world/hooks/use-hello.ts",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/hello-world/lib/format-date.ts",
      "type": "registry:utils"
    },
    {
      "path": "registry/new-york/hello-world/hello.config.ts",
      "type": "registry:file",
      "target": "~/hello.config.ts"
    }
  ]
}
```

----------------------------------------

TITLE: Installing Sidebar Component via CLI in shadcn/ui
DESCRIPTION: Command to install the sidebar component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add sidebar
```

----------------------------------------

TITLE: Schema Configuration - JSON
DESCRIPTION: Basic configuration showing the schema reference for components.json file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "$schema": "https://ui.shadcn.com/schema.json"
}
```

----------------------------------------

TITLE: Installing Aspect Ratio Component Dependencies Manually
DESCRIPTION: Command to install the required dependency for the Aspect Ratio component using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-aspect-ratio
```

----------------------------------------

TITLE: Implementing Inset Sidebar Variant in TypeScript React
DESCRIPTION: Shows how to use the 'inset' variant of the Sidebar, which requires wrapping the main content in a SidebarInset component for proper layout.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#2025-04-21_snippet_14

LANGUAGE: tsx
CODE:
```
<SidebarProvider>
  <Sidebar variant="inset" />
  <SidebarInset>
    <main>{children}</main>
  </SidebarInset>
</SidebarProvider>
```

----------------------------------------

TITLE: Gatsby Logo SVG Component
DESCRIPTION: SVG icon component for Gatsby logo with title element and viewBox props. Includes a path definition for the Gatsby 'G' logo mark.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#2025-04-21_snippet_2

LANGUAGE: JSX
CODE:
```
<svg
  role="img"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  className="w-10 h-10"
  fill="currentColor"
>
  <title>Gatsby</title>
  <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm0 2.571c3.171 0 5.915 1.543 7.629 3.858l-1.286 1.115C16.886 5.572 14.571 4.286 12 4.286c-3.343 0-6.171 2.143-7.286 5.143l9.857 9.857c2.486-.857 4.373-3 4.973-5.572h-4.115V12h6c0 4.457-3.172 8.228-7.372 9.17L2.83 9.944C3.772 5.743 7.543 2.57 12 2.57zm-9.429 9.6l9.344 9.258c-2.4-.086-4.801-.943-6.601-2.743-1.8-1.8-2.743-4.201-2.743-6.515z" />
</svg>
```

----------------------------------------

TITLE: Installing Calendar Component via CLI
DESCRIPTION: Command to install the Calendar component using the shadcn CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add calendar
```

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change directory to the cloned project root folder.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cd ui
```

----------------------------------------

TITLE: Initializing Remix project and committing changes
DESCRIPTION: Series of commands to initialize the Remix project, create a git repository, and make the initial commit.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
npx remix init
git init # if you haven't already
git add .
git commit -m "Initialize project"
```

----------------------------------------

TITLE: Installing Progress Component Dependencies
DESCRIPTION: Command to install the required Radix UI Progress primitive package using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/progress.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-progress
```

----------------------------------------

TITLE: Running the CLI Development Workflow
DESCRIPTION: A set of commands for testing the CLI during local development, including starting the registry site and running the CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
pnpm www:dev
```

LANGUAGE: bash
CODE:
```
pnpm shadcn:dev
```

LANGUAGE: bash
CODE:
```
pnpm shadcn
```

LANGUAGE: bash
CODE:
```
pnpm shadcn <init | add | ...> -c ~/Desktop/my-app
```

LANGUAGE: bash
CODE:
```
pnpm --filter=shadcn test
```

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install project dependencies using pnpm
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Installing Embla Carousel Dependency
DESCRIPTION: Command to install the required Embla Carousel React dependency for the carousel component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npm install embla-carousel-react
```

----------------------------------------

TITLE: Running Documentation in Development Mode
DESCRIPTION: Command to start the development server for the documentation website.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
pnpm --filter=www dev
```

----------------------------------------

TITLE: Package Name Declaration in Markdown
DESCRIPTION: Package name declaration for a shared TypeScript configuration workspace using code block formatting.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/packages/typescript-config/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
`@workspace/typescript-config`
```

----------------------------------------

TITLE: Setting session secrets for Fly apps
DESCRIPTION: Commands to generate and set session secrets for staging and production Fly apps.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
fly secrets set SESSION_SECRET=$(openssl rand -hex 32) --app indie-stack-template
fly secrets set SESSION_SECRET=$(openssl rand -hex 32) --app indie-stack-template-staging
```

----------------------------------------

TITLE: Using Open in v0 Button Component in React
DESCRIPTION: This code snippet demonstrates how to use the OpenInV0Button component in a React application. It shows how to pass a URL to the component, which will be used to open the specified registry item in v0.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/open-in-v0.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
<OpenInV0Button url="https://example.com/r/hello-world.json" />
```

----------------------------------------

TITLE: Installing Fly CLI and creating Fly apps
DESCRIPTION: Commands to install Fly CLI, authenticate, and create staging and production apps on Fly.io.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
fly auth signup
fly apps create indie-stack-template
fly apps create indie-stack-template-staging
```

----------------------------------------

TITLE: Installing Label Component via CLI
DESCRIPTION: Command to add the label component using the shadcn CLI tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/label.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add label
```