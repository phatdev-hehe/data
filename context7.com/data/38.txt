TITLE: Correct Method Call in Rust
DESCRIPTION: This code snippet shows the correct way to call a method in Rust by adding parentheses after the method name.  The `method` function is called using `f.method()`, which is the correct syntax for invoking methods.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0615.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
# struct Foo { x: u32 }
# impl Foo { fn method(&self) {} }
# let f = Foo { x: 0 };
f.method();
```
```

----------------------------------------

TITLE: Correcting Borrowing Errors in Rust
DESCRIPTION: This code snippet fixes the borrowing error by ensuring that the mutable reference is used before creating an immutable reference. Thus, adhering to Rust's borrowing rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0502.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
```
fn bar(x: &mut i32) {}
fn foo(a: &mut i32) {
    bar(a);
    let y = &a; // ok!
    println!("{}", y);
}
```
```

----------------------------------------

TITLE: Using `Rc` and `RefCell` for Shared Mutable Access
DESCRIPTION: This code snippet demonstrates how to use `Rc` and `RefCell` to allow multiple closures to access and modify the same data. `Rc` provides shared ownership, while `RefCell` enables interior mutability, allowing modification of the wrapped value even when there are immutable references to the `RefCell`.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0524.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
use std::rc::Rc;
use std::cell::RefCell;

fn set(x: &mut isize) {
    *x += 4;
}

fn dragoooon(x: &mut isize) {
    let x = Rc::new(RefCell::new(x));
    let y = Rc::clone(&x);
    let mut c1 = || { let mut x2 = x.borrow_mut(); set(&mut x2); };
    let mut c2 = || { let mut x2 = y.borrow_mut(); set(&mut x2); }; // ok!

    c2();
    c1();
}
```
```

----------------------------------------

TITLE: Correct Generic Type Declaration in Rust
DESCRIPTION: Example showing correct syntax using angle brackets for generic type Vec.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0214.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let v: Vec<&str> = vec!["foo"];
```

----------------------------------------

TITLE: Demonstrating Type Inference Failure in Rust
DESCRIPTION: This code snippet shows an example that triggers the E0283 error due to ambiguous type inference when using the collect() method on an iterator.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0283.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let x = "hello".chars().rev().collect();
```

----------------------------------------

TITLE: Defining Main Function Rust
DESCRIPTION: This snippet defines a basic main function in Rust necessary for a binary crate. It serves as the entry point of the program and uses println! macro to output 'Hello world!' to the console. This snippet assumes the user is familiar with basic Rust syntax. External dependencies include Rust standard library for standard input/output operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0601.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
fn main() {
    // Your program will start here.
    println!("Hello world!");
}
```

----------------------------------------

TITLE: Demonstrating Valid Assignment Operations in Rust
DESCRIPTION: This code snippet illustrates correct usage of the assignment operator in Rust, showing proper assignment to struct fields and dereferenced mutable references.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0070.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct SomeStruct {
    x: i32,
    y: i32,
}
let mut s = SomeStruct { x: 0, y: 0 };

s.x = 3; // that's good !

// ...

fn some_func(x: &mut i32) {
    *x = 12; // that's good !
}
```

----------------------------------------

TITLE: Installing rust-analyzer using rustup
DESCRIPTION: This snippet shows how to install rust-analyzer as a rustup component. This method is available for users who manage their Rust installation through rustup.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/rust_analyzer_binary.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ rustup component add rust-analyzer
```

----------------------------------------

TITLE: Installing Clippy Component via Rustup
DESCRIPTION: Command to install Clippy using Rustup package manager. Optionally allows specifying a particular toolchain using the --toolchain flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/installation.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ rustup component add clippy [--toolchain=<name>]
```

----------------------------------------

TITLE: Correct Trait Implementation in Rust with Multiple Methods
DESCRIPTION: This example demonstrates the correct way to implement a trait with multiple methods. Both methods 'a' and 'b' are defined in the trait 'Foo' and implemented for the struct 'Bar'.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0407.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {
    fn a();
    fn b();
}

struct Bar;

impl Foo for Bar {
    fn a() {}
    fn b() {} // ok!
}
```

----------------------------------------

TITLE: Correct Usage of Break Within Loop in Rust
DESCRIPTION: This example shows the proper usage of the 'break' keyword within a loop context. The 'break' statement is used within a 'for' loop, which is a valid context for loop control keywords.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0268.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn some_func() {
    for _ in 0..10 {
        break; // ok!
    }
}
```

----------------------------------------

TITLE: Adding `wasm32-unknown-unknown` target via rustup
DESCRIPTION: This command adds the `wasm32-unknown-unknown` target to the Rust toolchain using rustup. This allows compiling Rust code for this specific WebAssembly target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-unknown.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
$ rustup target add wasm32-unknown-unknown
```

----------------------------------------

TITLE: Demonstrating Mutability Error in Rust
DESCRIPTION: This snippet shows an attempt to mutate data through a mutable reference stored in an immutable Box, which results in a compiler error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0386.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let mut x: i64 = 1;
let y: Box<_> = Box::new(&mut x);
**y = 2; // error, cannot assign to data in an immutable container
```

----------------------------------------

TITLE: Compiling and Running Rust Program
DESCRIPTION: Commands to compile a Rust source file and run the resulting executable on different platforms
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/what-is-rustc.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ rustc hello.rs
$ ./hello # on a *NIX
$ .\hello.exe # on Windows
```

----------------------------------------

TITLE: Installing Rust to Default Location
DESCRIPTION: Command to install Rust to the default /usr/local directory using the included install script with sudo privileges.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/etc/installer/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
sudo ./install.sh
```

----------------------------------------

TITLE: Demonstrating Borrowing Mutation Error in Rust
DESCRIPTION: Shows an example of attempting to modify a struct while a reference is active, which causes a compile-time error due to Rust's borrowing rules
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0506.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct FancyNum {
    num: u8,
}

let mut fancy_num = FancyNum { num: 5 };
let fancy_ref = &fancy_num;
fancy_num = FancyNum { num: 6 };
// error: cannot assign to `fancy_num` because it is borrowed

println!("Num: {}, Ref: {}", fancy_num.num, fancy_ref.num);
```

----------------------------------------

TITLE: Conditional Framework Linking in Rust for macOS
DESCRIPTION: This code snippet shows how to use conditional compilation to link a framework only when targeting macOS. It uses the cfg_attr attribute to apply the link attribute conditionally based on the target platform.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0455.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[cfg_attr(target="macos", link(name = "FooCoreServices", kind = "framework"))]
extern "C" {}
```

----------------------------------------

TITLE: Valid Mutable and Immutable Borrows in Rust
DESCRIPTION: This example shows valid borrowing scenarios in Rust.  First, it demonstrates a single mutable borrow. Second, it shows multiple immutable borrows being allowed.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0499.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let mut i = 0;
let mut x = &mut i; // ok!

// or:
let mut i = 0;
let a = &i; // ok!
let b = &i; // still ok!
let c = &i; // still ok!
b;
a;
```

----------------------------------------

TITLE: Demonstrating Move Semantics in Rust
DESCRIPTION: This code snippet illustrates a common error in Rust where a variable is used after its contents have been moved. It shows how assigning a non-Copy type to another variable moves ownership, making the original variable unusable.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0382.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct MyStruct { s: u32 }

fn main() {
    let mut x = MyStruct{ s: 5u32 };
    let y = x;
    x.s = 6;
    println!("{}", x.s);
}
```

----------------------------------------

TITLE: Correct Main Function Declaration in Rust
DESCRIPTION: This snippet shows the correct way to declare the `main` function in Rust. It accepts no arguments. The program's entry point is the `main` function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0580.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
fn main() {
    // your code
}
```
```

----------------------------------------

TITLE: Fixing Non-Mutable Struct Assignment in Rust
DESCRIPTION: This snippet demonstrates an error caused by attempting to assign a new value to a non-mutable field of a struct in Rust. The original code defines a struct 'SolarSystem' with a field 'earth' and attempts to modify it without declaring the instance 'ss' as mutable, resulting in a compile-time error. The corrected snippet showcases how to declare 'ss' as mutable to allow reassignment of the 'earth' field.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0594.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
```compile_fail,E0594
struct SolarSystem {
    earth: i32,
}

let ss = SolarSystem { earth: 3 };
ss.earth = 2; // error!
```
```

LANGUAGE: Rust
CODE:
```
```
struct SolarSystem {
    earth: i32,
}

let mut ss = SolarSystem { earth: 3 }; // declaring `ss` as mutable
ss.earth = 2; // ok!
```
```

----------------------------------------

TITLE: Resolution Example 3: Implement Copy Trait in Rust
DESCRIPTION: This Rust code snippet resolves the error by implementing the `Copy` trait for `Value`, allowing `x` to be copied rather than moved when `eat` is called. This ensures that borrowing and moving operations can occur seamlessly.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0505.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#[derive(Clone, Copy)] // implement Copy trait
struct Value {}

fn borrow(val: &Value) {}

fn eat(val: Value) {}

fn main() {
    let x = Value{};
    let ref_to_val: &Value = &x;
    eat(x); // it will be copied here.
    borrow(ref_to_val);
}
```

----------------------------------------

TITLE: Using References to Borrow Values in Rust
DESCRIPTION: This example demonstrates how to use references in Rust to borrow values without changing ownership. It shows a function that calculates the length of a string by taking a reference as an argument.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0382.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}.", s1, len);
}

fn calculate_length(s: &String) -> usize {
    s.len()
}
```

----------------------------------------

TITLE: Resolving Name Conflicts Using Aliases in Rust
DESCRIPTION: Demonstrates how to fix name conflicts by using the 'as' keyword to create an alias for the imported function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0255.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use bar::foo as bar_foo; // ok!

fn foo() {}

mod bar {
     pub fn foo() {}
}

fn main() {}
```

----------------------------------------

TITLE: Resolving Import Naming Conflict Using Aliases in Rust
DESCRIPTION: Shows how to fix naming conflicts by using the 'as' keyword to create an alias for one of the imported items.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0252.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use foo::baz as foo_baz;
use bar::baz; // ok!

fn main() {}

mod foo {
    pub struct baz;
}

mod bar {
    pub mod baz {}
}
```

----------------------------------------

TITLE: Defining Static String Constant in Rust
DESCRIPTION: This snippet defines a static string constant with the value 'Hello World!'. It is intended for use as a constant reference within Rust programs. The constant is declared with a static lifetime, ensuring it is available for the duration of the program's runtime. No external dependencies are required.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/import-macro-verbatim/include/include.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
static TEST: &str = "Hello World!";
```

----------------------------------------

TITLE: Rust Compiler Error: Unterminated Character Literal
DESCRIPTION: This Rust compiler error indicates that a character literal is missing its closing single quote.  The error message includes the specific character literal causing the issue (e.g., '\x7f). Ensure that all character literals are properly enclosed within single quotes to resolve this error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_char_with_ascii_escape.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"'\\x7f" error: Missing trailing `'` symbol to terminate the character literal"
```

----------------------------------------

TITLE: Correct Trait Implementation Example in Rust
DESCRIPTION: Fixed version of the previous example showing how to properly implement the Foo trait for i32 type, allowing it to be used in the generic function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0277.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {
    fn bar(&self);
}

// we implement the trait on the i32 type
impl Foo for i32 {
    fn bar(&self) {}
}

fn some_func<T: Foo>(foo: T) {
    foo.bar(); // we can now use this method since i32 implements the
               // Foo trait
}

fn main() {
    some_func(5i32); // ok!
}
```

----------------------------------------

TITLE: Using If-Let Statement Inside Rust Loop
DESCRIPTION: Another corrected version that uses an if-let statement inside the loop body. This approach allows executing code only when the pattern matches, silently skipping non-matching items (None values in this case).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0297.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
let xs : Vec<Option<i32>> = vec![Some(1), None];

for item in xs {
    if let Some(x) = item {
        // ...
    }
}
```

----------------------------------------

TITLE: Structuring Type Declarations in Rust
DESCRIPTION: Shows the preferred top-down manner of organizing type declarations, with structs and enums first, followed by their implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_22

LANGUAGE: rust
CODE:
```
// GOOD
struct Parent {
    children: Vec<Child>
}

struct Child;

impl Parent {
}

impl Child {
}

// BAD
struct Child;

impl Child {
}

struct Parent {
    children: Vec<Child>
}

impl Parent {
}
```

----------------------------------------

TITLE: Demonstrating Import Naming Conflict in Rust
DESCRIPTION: This code snippet illustrates a naming conflict that occurs when importing two items with the same name 'baz' from different modules. The error is triggered by the wildcard import from 'bar', which conflicts with the explicit import of 'baz' from 'foo'.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0251.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use foo::baz;
use bar::*; // error, do `use foo::baz as quux` instead on the previous line

fn main() {}

mod foo {
    pub struct baz;
}

mod bar {
    pub mod baz {}
}
```

----------------------------------------

TITLE: Fixing E0310 Error by Adding Proper Lifetime Constraint in Rust
DESCRIPTION: This example shows the correct implementation that will compile successfully. The struct Foo has a type parameter T with a 'static lifetime constraint, which matches the lifetime of the reference.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0310.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo<T: 'static> {
    foo: &'static T
}
```

----------------------------------------

TITLE: Demonstrating Borrowing Error with Mutable and Immutable References in Rust
DESCRIPTION: This snippet showcases an error scenario where a variable is borrowed as immutable and then attempted to be borrowed mutably. The goal is to illustrate the ownership and borrowing rules in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0502.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
```compile_fail,E0502
fn bar(x: &mut i32) {}
fn foo(a: &mut i32) {
    let y = &a; // a is borrowed as immutable.
    bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed
            //        as immutable
    println!("{}", y);
}
```
```

----------------------------------------

TITLE: Failing Struct Declaration with Duplicate Fields in Rust
DESCRIPTION: An erroneous example demonstrating the E0124 compiler error that occurs when two fields in a struct have the same name. The compiler will reject this code because 'field1' is declared twice.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0124.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo {
    field1: i32,
    field1: i32, // error: field is already declared
}
```

----------------------------------------

TITLE: Erroneous Mutable Borrowing of Non-Mutable Variable in Rust
DESCRIPTION: Demonstrates a compilation error when trying to create a mutable reference to a non-mutable variable. This code fails because the original variable `x` is not declared as mutable.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0596.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let x = 1;
let y = &mut x; // error: cannot borrow mutably
```

----------------------------------------

TITLE: Corrected Example: Matching Fn Argument Count in Rust
DESCRIPTION: This code snippet provides a corrected version of the previous example, resolving the E0593 error. The closure passed to `foo` now takes no arguments (`|| {}`), matching the `Fn()` trait bound expected by the function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0593.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
fn foo<F: Fn()>(x: F) { }

fn main() {
    foo(|| { }); // ok!
}
```
```

----------------------------------------

TITLE: Correcting Pattern Matching in Rust Enums
DESCRIPTION: This snippet provides a corrected version of the pattern match for the 'State' enum in Rust. It demonstrates how to correctly match a tuple variant using ref bindings to extract and use the data within the tuple.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0532.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
enum State {
    Succeeded,
    Failed(String),
}

fn print_on_failure(state: &State) {
    match *state {
        State::Failed(ref msg) => println!("Failed with {}", msg),
        _ => ()
    }
}
```

----------------------------------------

TITLE: Handling Compile Failures due to Dangling References in Rust
DESCRIPTION: This snippet shows an erroneous function trying to return a reference to a local variable. The reference becomes invalid since the variable is dropped when the function exits. Rust ownership rules prevent this by not allowing functions to return references to local variables.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0515.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn get_dangling_reference() -> &'static i32 {
    let x = 0;
    &x
}
```

----------------------------------------

TITLE: Using Closure to Capture Variables
DESCRIPTION: Correct implementation using a closure instead of an inner function to capture variables from the containing scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0434.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo() {
    let y = 5;
    let bar = || {
        y
    };
}
```

----------------------------------------

TITLE: Handling Mismatched Pattern Elements in Rust
DESCRIPTION: This snippet demonstrates an error when the number of elements in a pattern does not match the elements in the array. It highlights the importance of using patterns that align with the array's size to avoid compile errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0527.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
let r = &[1, 2, 3, 4];
match r {
    &[a, b] => { // error: pattern requires 2 elements but array
                 //        has 4
        println!("a={}, b={}", a, b);
    }
}
```

----------------------------------------

TITLE: Correct Usage of await Within async Context in Rust
DESCRIPTION: This code snippet shows the correct usage of the `await` keyword within an `async` function and an `async` block, demonstrating how to properly use `await` in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0728.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
async fn foo() {
    wake_and_yield_once().await // `await` is used within `async` function
}

fn bar(x: u8) -> impl Future<Output = u8> {
    async move {
        wake_and_yield_once().await; // `await` is used within `async` block
        x
    }
}
```

----------------------------------------

TITLE: Incorrect Private Item Re-export in Rust
DESCRIPTION: Example showing erroneous code that attempts to publicly re-export a private function, which results in error E0364.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0364.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
mod a {
    fn foo() {}

    mod a {
        pub use super::foo; // error!
    }
}
```

----------------------------------------

TITLE: Correct Trait Object Declaration with Associated Type
DESCRIPTION: Example showing the correct way to specify an associated type for a trait object by providing a concrete type using the syntax Trait<Bar=Type>.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0191.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Trait {
    type Bar;
}

type Foo = dyn Trait<Bar=i32>; // ok!
```

----------------------------------------

TITLE: Fixing Rust E0161 Using References
DESCRIPTION: This Rust code demonstrates a common workaround for the E0161 error. By modifying the trait method `f` to accept `self` by reference (`&self`) instead of by value (`self`), it avoids the need to move the underlying `dyn Bar` value. Since references (`&T`) have a fixed, known size at compile time, they can be moved or copied as needed, resolving the compile error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0161.md#_snippet_1

LANGUAGE: Rust
CODE:
```
trait Bar {
    fn f(&self);
}

impl Bar for i32 {
    fn f(&self) {}
}

fn main() {
    let b: Box<dyn Bar> = Box::new(0i32);
    b.f();
    // ok!
}
```

----------------------------------------

TITLE: Sequential Closure Execution to Avoid Borrow Conflicts
DESCRIPTION: This code snippet demonstrates how to avoid mutable borrow conflicts by executing closures sequentially within distinct scopes. By dropping the first closure's reference before creating the second, we ensure that there are no overlapping mutable borrows.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0524.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
```
fn set(x: &mut isize) {
    *x += 4;
}

fn dragoooon(x: &mut isize) {
    { // This block isn't necessary since non-lexical lifetimes, it's just to
      // make it more clear.
        let mut c1 = || set(&mut *x);
        c1();
    } // `c1` has been dropped here so we're free to use `x` again!
    let mut c2 = || set(&mut *x);
    c2();
}
```
```

----------------------------------------

TITLE: Fixing Temporary Value Dropping by Using Local Variable in Rust
DESCRIPTION: This code snippet demonstrates how to fix the temporary value dropping issue by introducing a local variable to store the value. This ensures the value lives long enough to be borrowed safely.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0716.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn foo() -> i32 { 22 }
fn bar(x: &i32) -> &i32 { x }
let value = foo(); // dropped at the end of the enclosing block
let p = bar(&value);
let q = *p;
```

----------------------------------------

TITLE: Incorrect Implementation Block with Lifetime Parameters
DESCRIPTION: Example showing incorrect implementation of a struct with lifetime parameters where the impl block fails to declare the lifetime parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0261.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Foo<'a> {
    x: &'a str,
}

// error,  use of undeclared lifetime name `'a`
impl Foo<'a> {
    fn foo<'a>(x: &'a str) {}
}
```

----------------------------------------

TITLE: Preferred Method Chain Formatting in Rust
DESCRIPTION: Examples demonstrating the preferred style for method chains in Rust, favoring consistent multi-line formatting over mixing single and multi-line elements.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
// Better
self.pre_comment
    .as_ref()
    .map_or(false, |comment| comment.starts_with("//"))

// Worse
self.pre_comment.as_ref().map_or(
    false,
    |comment| comment.starts_with("//"),
)
```

----------------------------------------

TITLE: Using Rc and RefCell for Shared Ownership in Rust
DESCRIPTION: This snippet demonstrates how to use Rc (reference counting) and RefCell for shared mutable ownership in Rust. It shows how multiple variables can share ownership of data with runtime borrow checking.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0382.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
use std::cell::RefCell;
use std::rc::Rc;

struct MyStruct { s: u32 }

fn main() {
    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));
    let y = x.clone();
    x.borrow_mut().s = 6;
    println!("{}", x.borrow().s);
}
```

----------------------------------------

TITLE: Compile Fail Example: Moving Out of Borrowed Content in Rust
DESCRIPTION: This code snippet demonstrates a common scenario that triggers the E0507 error in Rust: attempting to move a value out of borrowed content. Specifically, it tries to call a method that takes ownership of `self` on a value obtained via `RefCell::borrow()`, which only provides a borrow. This fails because the method attempts to move `self`, which is not allowed with a borrowed value.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0507.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0507
use std::cell::RefCell;

struct TheDarkKnight;

impl TheDarkKnight {
    fn nothing_is_true(self) {}
}

fn main() {
    let x = RefCell::new(TheDarkKnight);

    x.borrow().nothing_is_true(); // error: cannot move out of borrowed content
}
```
```

----------------------------------------

TITLE: Demonstrating Ambiguous Item Usage in Rust
DESCRIPTION: This code snippet shows an example of ambiguous item usage in Rust. It defines two modules with functions of the same name, imports them into a third module, and attempts to use the ambiguous function, resulting in a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0659.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub mod moon {
    pub fn foo() {}
}

pub mod earth {
    pub fn foo() {}
}

mod collider {
    pub use crate::moon::*;
    pub use crate::earth::*;
}

fn main() {
    crate::collider::foo(); // ERROR: `foo` is ambiguous
}
```

----------------------------------------

TITLE: Fixing Unconstrained Type Parameter by Moving to Method
DESCRIPTION: This code shows a solution to the E0207 error by moving the type parameter from the impl block to the method level, which properly constrains it.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0207.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo;

// Move the type parameter from the impl to the method
impl Foo {
    fn get<T: Default>(&self) -> T {
        <T as Default>::default()
    }
}
```

----------------------------------------

TITLE: Incorrect usage of unsafe function without an unsafe block in Rust
DESCRIPTION: This example demonstrates erroneous code that calls an unsafe function without wrapping it in an unsafe block, which violates Rust's safety checks and results in error E0133.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0133.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
unsafe fn f() { return; } // This is the unsafe code

fn main() {
    f(); // error: call to unsafe function requires unsafe function or block
}
```

----------------------------------------

TITLE: Correct Boolean Comparison in Rust
DESCRIPTION: Shows the proper way to convert a numeric value to a boolean by using comparison operators instead of type casting.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0054.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let x = 5;

// Ok
let x_is_nonzero = x != 0;
```

----------------------------------------

TITLE: Defining a Nested Module with a Function in Rust
DESCRIPTION: This Rust snippet defines a nested module named 'foo' which contains a function named 'bar'. This representation illustrates how to organize code within modules and demonstrates basic function declaration within a Rust module.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/hir.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
mod foo {
    fn bar() { }
}
```

----------------------------------------

TITLE: Installing rust-analyzer on Linux using curl and gunzip
DESCRIPTION: This snippet shows how to download, decompress, and install the rust-analyzer binary into ~/.local/bin on a Linux system. It uses curl to download the gzipped binary, gunzip to decompress it, and chmod to make it executable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/rust_analyzer_binary.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ mkdir -p ~/.local/bin
$ curl -L https://github.com/rust-lang/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz | gunzip -c - > ~/.local/bin/rust-analyzer
$ chmod +x ~/.local/bin/rust-analyzer
```

----------------------------------------

TITLE: Demonstrating Invalid Double Move in Rust Match Pattern
DESCRIPTION: This code snippet illustrates an erroneous attempt to move an Option<String> into two different bindings simultaneously in a match arm. It violates Rust's ownership rules and would have previously triggered a compiler error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0007.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(bindings_after_at)]

let x = Some("s".to_string());

match x {
    op_string @ Some(s) => {}, // error: use of moved value
    None => {},
}
```

----------------------------------------

TITLE: Handling Closure Mutability in Rust
DESCRIPTION: This code snippet demonstrates an error where a closure attempts to mutate an immutable variable, which is not allowed in Rust. The corrected version modifies the variable binding to be mutable, allowing the closure to function correctly. No specific dependencies are required, but understanding of Rust's mutability rules is essential. The expected outcome is a successfully compiled program without mutability errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0595.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
let x = 3; // error: closure cannot assign to immutable local variable `x`
let mut c = || { x += 1 };
```

LANGUAGE: Rust
CODE:
```
let mut x = 3; // ok!
let mut c = || { x += 1 };
```

----------------------------------------

TITLE: Failing Trait Implementation Example in Rust
DESCRIPTION: Example showing a compile error when trying to use a type (i32) that doesn't implement a required trait (Foo). This demonstrates the E0277 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0277.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// here we declare the Foo trait with a bar method
trait Foo {
    fn bar(&self);
}

// we now declare a function which takes an object implementing the Foo trait
fn some_func<T: Foo>(foo: T) {
    foo.bar();
}

fn main() {
    // we now call the method with the i32 type, which doesn't implement
    // the Foo trait
    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied
}
```

----------------------------------------

TITLE: Implementing Copy and Clone Traits in Rust
DESCRIPTION: This example demonstrates how to implement Copy and Clone traits for a custom type in Rust. It shows a Point struct that can be implicitly copied because it only contains Copy types (integers).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0382.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#[derive(Copy, Clone)]
struct Point { x: i32, y: i32 }

fn main() {
    let mut p1 = Point{ x: -1, y: 2 };
    let p2 = p1;
    p1.x = 1;
    println!("p1: {}, {}", p1.x, p1.y);
    println!("p2: {}, {}", p2.x, p2.y);
}
```

----------------------------------------

TITLE: Demonstrating Correct Macro Export and Import in Rust
DESCRIPTION: This code snippet illustrates the proper way to export macros from one crate and import them in another. It shows how to use the #[macro_export] attribute to make macros available for external use, and how to use #[macro_use] to import specific macros or all exported macros.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0466.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// In some_crate:
#[macro_export]
macro_rules! get_tacos {
    ...
}

#[macro_export]
macro_rules! get_pimientos {
    ...
}

// In your crate:
#[macro_use(get_tacos, get_pimientos)] // It imports `get_tacos` and
extern crate some_crate;               // `get_pimientos` macros from some_crate
```

----------------------------------------

TITLE: Correct Module and Struct Instantiation in Rust
DESCRIPTION: Demonstrates the correct way to create a struct within a module and instantiate it using the module's namespace. Shows how to properly expose and use types defined within modules.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0574.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
mod mordor {
    pub struct TheRing {
        pub x: usize,
    }
}

let sauron = mordor::TheRing { x: 1 }; // ok!
```

----------------------------------------

TITLE: Implementing a Missing Method in Rust
DESCRIPTION: This code snippet demonstrates how to resolve the Rust compiler error E0599 by implementing the missing `chocolate` method for the `Mouth` struct.  By implementing the method within an `impl` block for `Mouth`, the method becomes available for instances of the `Mouth` struct. The corrected code allows the `chocolate` method to be called without error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0599.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
struct Mouth;

impl Mouth {
    fn chocolate(&self) { // We implement the `chocolate` method here.
        println!("Hmmm! I love chocolate!");
    }
}

let x = Mouth;
x.chocolate(); // ok!
```
```

----------------------------------------

TITLE: Initializing Struct with Missing Field in Rust
DESCRIPTION: This code snippet demonstrates an erroneous attempt to initialize a struct with a missing field, which results in a compilation error. The 'y' field is not provided, leading to an E0063 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0063.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo {
    x: i32,
    y: i32,
}

fn main() {
    let x = Foo { x: 0 }; // error: missing field: `y`
}
```

----------------------------------------

TITLE: Resolution Example 1: Avoid Moving in Rust
DESCRIPTION: This Rust code snippet resolves the ownership issue by passing `x` by reference to `eat`, avoiding the move. This ensures that `_ref_to_val` can continue to borrow `x` without issue, maintaining the correct order of borrow and reference operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0505.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Value {}

fn borrow(val: &Value) {}

fn eat(val: &Value) {}

fn main() {
    let x = Value{};

    let ref_to_val: &Value = &x;
    eat(&x); // pass by reference, if it's possible
    borrow(ref_to_val);
}
```

----------------------------------------

TITLE: Demonstrating Method Not Found Error in Rust
DESCRIPTION: This code snippet demonstrates the Rust compiler error E0599.  The `Mouth` struct does not initially implement the `chocolate` method, causing a compile error when the method is called on an instance of the `Mouth` struct.  This highlights the importance of implementing methods for structs before they can be called.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0599.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0599
struct Mouth;

let x = Mouth;
x.chocolate(); // error: no method named `chocolate` found for type `Mouth`
               //        in the current scope
```
```

----------------------------------------

TITLE: Module Import Example in Rust
DESCRIPTION: Demonstrates how to properly import and use items from other modules using the 'use' statement.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0425.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
# mod foo { pub fn bar() {} }
# fn main() {
use foo::bar;
bar();
# }
```

----------------------------------------

TITLE: Corrected Mutable Borrowing in Rust
DESCRIPTION: Shows the correct way to create a mutable reference by declaring the original variable as mutable using the `mut` keyword. This allows subsequent mutable borrowing.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0596.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let mut x = 1;
let y = &mut x; // ok!
```

----------------------------------------

TITLE: Handling Compile Failures due to Dangling Iterators in Rust
DESCRIPTION: This snippet demonstrates the error of returning an iterator over a vector that is local to the function. Once the function scope ends, the vector is dropped, leaving the iterator pointing to invalid memory. The Rust compiler prevents this unsafe behavior.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0515.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use std::slice::Iter;
fn get_dangling_iterator<'a>() -> Iter<'a, i32> {
    let v = vec![1, 2, 3];
    v.iter()
}
```

----------------------------------------

TITLE: Erroneous Binary Assignment on Unsupported Type in Rust
DESCRIPTION: This code snippet demonstrates an error where the left shift assignment operator is applied to a float type, which doesn't support this operation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0368.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let mut x = 12f32; // error: binary operation `<<` cannot be applied to
                   //        type `f32`

x <<= 2;
```

----------------------------------------

TITLE: General Form of Trait Implementation in Rust
DESCRIPTION: This code snippet shows the general form of a trait implementation, used to explain the rules for valid implementations according to Rust's orphan rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0210.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
impl<P1, ..., Pm> ForeignTrait<T1, ..., Tn> for T0 { ... }
```

----------------------------------------

TITLE: Correct Implementation Block with Lifetime Parameters
DESCRIPTION: Proper implementation showing how to correctly declare lifetime parameters in an impl block for a struct that has lifetime parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0261.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
struct Foo<'a> {
    x: &'a str,
}

// correct
impl<'a> Foo<'a> {
    fn foo(x: &'a str) {}
}
```

----------------------------------------

TITLE: Correct Public Item Re-export in Rust
DESCRIPTION: Example showing the correct way to re-export items by making the source item public using the pub keyword.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0364.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
mod a {
    pub fn foo() {} // ok!

    mod a {
        pub use super::foo;
    }
}
```

----------------------------------------

TITLE: Correct Implementation Moving Reference Inside Method in Rust
DESCRIPTION: This code snippet shows the correct way to implement a method that uses references by moving the reference inside the method signature, rather than implementing on the reference type directly.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0390.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
struct Foo;

impl Foo {
    fn bar(&self, other: &Self) {}
}
```

----------------------------------------

TITLE: Using Static for Thread-Safe Mutability in Rust
DESCRIPTION: This example shows the correct approach to avoid borrow errors by using statics instead of constants. It ensures that memory locations are immutable when shared but can be altered via known controlled methods when necessary.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0492.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use std::sync::atomic::AtomicUsize;

static A: AtomicUsize = AtomicUsize::new(0);
static B: &'static AtomicUsize = &A; // ok!
```

----------------------------------------

TITLE: Fixing Unconstrained Lifetime Parameter by Implementing on Borrowed Type
DESCRIPTION: This code shows a solution for the E0207 error with lifetime parameters by implementing the trait on a borrowed type, which properly constrains the lifetime.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0207.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
struct Foo(i32);

trait Contents {
    type Item;

    fn get(&self) -> Self::Item;
}

// Note the lifetime `'a` is used both for the self type...
impl<'a> Contents for &'a Foo {
    // ...and the associated type.
    type Item = &'a i32;

    fn get(&self) -> Self::Item {
        &self.0
    }
}
```

----------------------------------------

TITLE: Fixing Struct Constructor Error by Making All Fields Public in Rust
DESCRIPTION: This solution demonstrates how to fix the struct constructor error by making all fields of the struct public.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0451.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
mod bar {
    pub struct Foo {
        pub a: isize,
        pub b: isize, // we set `b` field public
    }
}

let f = bar::Foo{ a: 0, b: 0 }; // ok!
```

----------------------------------------

TITLE: Invalid Pattern Matching in Rust - Error E0164
DESCRIPTION: This example demonstrates incorrect usage of a method as a pattern in a match expression, which results in compilation error E0164. The code attempts to match against A::new() which is a method, not a tuple struct or variant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0164.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum A {
    B,
    C,
}

impl A {
    fn new() {}
}

fn bar(foo: A) {
    match foo {
        A::new() => (), // error!
        _ => {}
    }
}
```

----------------------------------------

TITLE: Erroneous Mutable Borrow Usage in Rust
DESCRIPTION: Demonstrates a compile-time error where a value is used after being mutably borrowed, violating Rust's ownership and borrowing rules
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0503.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let mut value = 3;
    // Create a mutable borrow of `value`.
    let borrow = &mut value;
    let _sum = value + 1; // error: cannot use `value` because
                          //        it was mutably borrowed
    println!("{}", borrow);
}
```

----------------------------------------

TITLE: Handling Borrowed Data in Closure with Lifetime Error
DESCRIPTION: This snippet demonstrates a closure that attempts to borrow data that escapes its scope, which leads to a compilation error in Rust. It highlights the importance of managing lifetimes correctly in closures.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0521.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
let mut list: Vec<&str> = Vec::new();

let _add = |el: &str| {
    list.push(el); // error: `el` escapes the closure body here
};
```

----------------------------------------

TITLE: Correct Access of Associated Constant in Rust Trait
DESCRIPTION: This code snippet shows the correct way to access an associated constant in a Rust trait. It demonstrates accessing the constant through a concrete type, which is the supported approach.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0329.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {
    const BAR: f64;
}

struct MyStruct;

impl Foo for MyStruct {
    const BAR: f64 = 0f64;
}

fn get_bar_good() -> f64 {
    <MyStruct as Foo>::BAR
}
```

----------------------------------------

TITLE: Fixing Type Inference by Annotating the Variable in Rust
DESCRIPTION: This solution resolves the type inference error by adding a type annotation to the variable declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0282.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let x: Vec<i32> = Vec::new();
```

----------------------------------------

TITLE: Defining Generic Struct with ADT
DESCRIPTION: Demonstrates a generic struct definition that can be used with different type parameters. Shows how a struct like MyStruct can be parameterized with a generic type T.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/generic_arguments.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct MyStruct<T> { x: u8, y: T }
```

----------------------------------------

TITLE: Using Default for Struct Initialization
DESCRIPTION: This snippet recommends using the `Default` trait for struct initialization over a zero-argument `new` function, enhancing uniformity and reducing boilerplate code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
// GOOD
#[derive(Default)]
struct Foo {
    bar: Option<Bar>
}

// BAD
struct Foo {
    bar: Option<Bar>
}

impl Foo {
    fn new() -> Foo {
        Foo { bar: None }
    }
}
```

----------------------------------------

TITLE: Fix: Implementing the Copy Trait in Rust
DESCRIPTION: This code demonstrates a third fix for E0507: implementing the `Copy` trait for the type. When a type is `Copy`, it is copied instead of moved, which avoids the error. This approach is suitable for small, simple types that can be easily copied.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0507.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
```
use std::cell::RefCell;

#[derive(Clone, Copy)] // we implement the Copy trait
struct TheDarkKnight;

impl TheDarkKnight {
    fn nothing_is_true(self) {}
}

fn main() {
    let x = RefCell::new(TheDarkKnight);

    x.borrow().nothing_is_true(); // ok!
}
```
```

----------------------------------------

TITLE: Correct Pattern Matching in Rust
DESCRIPTION: Demonstrates proper handling of Option types using match and if let expressions, which safely handle both Some and None cases.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0005.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let x = Some(1);

match x {
    Some(y) => {
        // do something
    },
    None => {}
}

// or:

if let Some(y) = x {
    // do something
}
```

----------------------------------------

TITLE: Declaring Opaque Type Alias in Rust
DESCRIPTION: This snippet demonstrates how to declare an opaque type alias in Rust using the `impl Trait` syntax. It creates a type `Foo` that only exposes the `Bar` trait as its interface.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/opaque-types-type-alias-impl-trait.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
type Foo = impl Bar;
```

----------------------------------------

TITLE: Dereferencing a Reference Type in Rust
DESCRIPTION: This code snippet demonstrates the correct way to dereference a value in Rust using a reference (`&`). A `u32` variable `y` is created, and then a reference `x` to `y` is created using `&y`. The reference `x` (of type `&u32`) can be dereferenced using the `*` operator to access the underlying `u32` value.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0614.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
let y = 0u32;
let x = &y;
// So here, `x` is a `&u32`, so we can dereference it:
*x; // ok!
```
```

----------------------------------------

TITLE: Failed Import Due to Name Conflict
DESCRIPTION: Shows an error case where attempting to import a trait named 'core' conflicts with an existing extern crate import of the same name, resulting in error E0254.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0254.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
extern crate core;

mod foo {
    pub trait core {
        fn do_something();
    }
}

use foo::core;  // error: an extern crate named `core` has already
                //        been imported in this module

fn main() {}
```

----------------------------------------

TITLE: Resolving Mutable Borrow by Ending Borrow Scope
DESCRIPTION: Shows how to fix the mutable borrow error by ensuring the borrow ends before using the original value again
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0503.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    let mut value = 3;
    let borrow = &mut value;
    println!("{}", borrow);
    // The block has ended and with it the borrow.
    // You can now use `value` again.
    let _sum = value + 1;
}
```

----------------------------------------

TITLE: Alternative Solution Using Shadowing in Rust
DESCRIPTION: This code snippet shows an alternative approach to variable reassignment using shadowing, where a new variable with the same name is declared, effectively creating a new binding.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0384.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn main() {
    let x = 3;
    let x = 5;
}
```

----------------------------------------

TITLE: Installing Clippy via Rustup
DESCRIPTION: Command to install Clippy linting tool using rustup component manager. Requires Rust version 1.29 or later. May need to run rustup self update if Clippy binary is missing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/clippy_dummy/crates-readme.md#2025-04-21_snippet_0

LANGUAGE: terminal
CODE:
```
rustup component add clippy
```

----------------------------------------

TITLE: Compiling and running a Rust program
DESCRIPTION: Basic example of compiling and running a 'Hello, World!' program in Rust. This demonstrates the simplicity of getting started with Rust development.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ra-salsa/ra-salsa-macros/README.md#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
rustc hello.rs
./hello
```

----------------------------------------

TITLE: Correct Default Trait Derivation for Rust Enum Using #[default] Attribute
DESCRIPTION: This code snippet shows the correct way to derive the Default trait for a Rust enum when the desired default variant has no payload. The #[default] attribute is used to specify the default variant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0665.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[derive(Default)]
enum Food {
    #[default]
    Sweet,
    Salty,
}
```

----------------------------------------

TITLE: Defining Cargo Features for Conditional Compilation in TOML
DESCRIPTION: Example of defining features in Cargo.toml that automatically declare corresponding cfgs. This shows how to express conditional compilation and optional dependencies that Cargo will handle automatically.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/check-cfg/cargo-specifics.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[features]
serde = ["dep:serde"]
my_feature = []
```

----------------------------------------

TITLE: Correctly Returning Owned Data Instead of References in Rust
DESCRIPTION: This code snippet demonstrates returning owned values instead of references from a function to ensure memory safety. By taking ownership of the data, the function can return the value directly, avoiding errors related to dangling references.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0515.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use std::vec::IntoIter;

fn get_integer() -> i32 {
    let x = 0;
    x
}

fn get_owned_iterator() -> IntoIter<i32> {
    let v = vec![1, 2, 3];
    v.into_iter()
}
```

----------------------------------------

TITLE: Correct Usage of repr Attribute in Rust
DESCRIPTION: This snippet shows the correct usage of a supported repr attribute 'C'. The repr attribute 'C' specifies that the struct should have the same memory layout as C language structs, which ensures compatibility with C code. Using this recognized representation layout is crucial for defining how data is structured in memory.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0552.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[repr(C)] // ok!
struct MyStruct {
    my_field: usize
}
```

----------------------------------------

TITLE: Corrected Borrowing Scope to Fix Lifetime Error in Rust
DESCRIPTION: This snippet resolves the lifetime error by altering the scope of the borrowed value. By keeping the scope of `y` outside of any inner blocks, the referenced value remains valid until it is no longer needed, thus preventing the borrowing error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0597.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
struct Foo<'a> {
    x: Option<&'a u32>,
}

let mut x = Foo { x: None };

let y = 0;
x.x = Some(&y);

println!("{:?}", x.x);
```

----------------------------------------

TITLE: Formatting Let-Chain Control Lines in Rust
DESCRIPTION: Guidelines for formatting let-chain expressions in Rust. Single-line formatting is allowed for simple cases with specific constraints; otherwise, multi-line formatting with proper indentation is required.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_13

LANGUAGE: rust
CODE:
```
if a && let Some(b) = foo() {
    // ...
}

if true && let Some(b) = foo() {
    // ...
}

let operator = if !from_hir_call && let Some(p) = parent {
    // ...
};

if let Some(b) = foo()
    && a
{
    // ..
}

if foo()
    && let Some(b) = bar
{
    // ...
}

if gen_pos != GenericArgPosition::Type
    && let Some(b) = gen_args.bindings.first()
{
    // ..
}
```

----------------------------------------

TITLE: Using Conditional Expressions in Rust
DESCRIPTION: This snippet demonstrates the preferred usage of Rust's expression-oriented nature by employing a conditional expression to assign a value to a variable, which enhances code readability and conciseness. The alternative method using a mutable variable assignment after an if-else statement is also shown for contrast.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/advice.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// use
let x = if y { 1 } else { 0 };
```

LANGUAGE: rust
CODE:
```
// not
let x;
if y {
    x = 1;
} else {
    x = 0;
}
```

----------------------------------------

TITLE: Automatic Lifetime Inference in Rust Methods
DESCRIPTION: This example demonstrates how the Rust compiler can automatically infer lifetimes in many cases. It shows two equivalent method implementations: one with explicitly annotated lifetimes and one where the lifetimes are inferred by the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0088.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Foo {
    value: String
}

impl Foo {
    // it can be written like this
    fn get_value<'a>(&'a self) -> &'a str { &self.value }
    // but the compiler works fine with this too:
    fn without_lifetime(&self) -> &str { &self.value }
}

fn main() {
    let f = Foo { value: "hello".to_owned() };

    println!("{}", f.get_value());
    println!("{}", f.without_lifetime());
}
```

----------------------------------------

TITLE: Fix: Borrow Method Instead of Taking Ownership in Rust
DESCRIPTION: This code demonstrates one fix for the E0507 error: changing the method signature to accept a borrow (`&self`) instead of taking ownership of `self`. By accepting a borrow, the method no longer attempts to move the value, resolving the error. This is suitable when the method does not need to consume the `self` value.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0507.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
use std::cell::RefCell;

struct TheDarkKnight;

impl TheDarkKnight {
    fn nothing_is_true(&self) {} // First case, we don't take ownership
}

fn main() {
    let x = RefCell::new(TheDarkKnight);

    x.borrow().nothing_is_true(); // ok!
}
```
```

----------------------------------------

TITLE: Basic PGO Workflow with rustc
DESCRIPTION: Complete 4-step workflow for profile-guided optimization using rustc directly. Includes compiling with instrumentation, running the instrumented binary, merging profile data, and final optimized compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/profile-guided-optimization.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
# STEP 1: Compile the binary with instrumentation
rustc -Cprofile-generate=/tmp/pgo-data -O ./main.rs

# STEP 2: Run the binary a few times, maybe with common sets of args.
#         Each run will create or update `.profraw` files in /tmp/pgo-data
./main mydata1.csv
./main mydata2.csv
./main mydata3.csv

# STEP 3: Merge and post-process all the `.profraw` files in /tmp/pgo-data
llvm-profdata merge -o ./merged.profdata /tmp/pgo-data

# STEP 4: Use the merged `.profdata` file during optimization. All `rustc`
#         flags have to be the same.
rustc -Cprofile-use=./merged.profdata -O ./main.rs
```

----------------------------------------

TITLE: Basic Let Statement Formatting in Rust
DESCRIPTION: Demonstrates standard formatting for let statements with type annotations and initializers, emphasizing spacing and line placement
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/statements.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let pattern: Type = expr;
```

----------------------------------------

TITLE: Implementing Foreign Trait for Foreign Type (Rust)
DESCRIPTION: This code snippet demonstrates an erroneous attempt to implement the Drop trait for u32, which violates Rust's orphan rules. This will result in a compilation error E0117.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0117.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
impl Drop for u32 {}
```

----------------------------------------

TITLE: Compile-Fail Example: Multiple Mutable Borrows in Rust
DESCRIPTION: This code snippet demonstrates the E0499 error, which occurs when attempting to create multiple mutable references to the same variable ('i') at the same time. The Rust compiler prevents this to avoid data races and ensure memory safety.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0499.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let mut i = 0;
let mut x = &mut i;
let mut a = &mut i;
x;
// error: cannot borrow `i` as mutable more than once at a time
```

----------------------------------------

TITLE: Invalid Trait Object Declaration Without dyn Keyword
DESCRIPTION: Example showing incorrect trait object declaration without the required 'dyn' keyword, which results in compilation error E0782.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0782.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {}
fn test(arg: Box<Foo>) {} // error!
```

----------------------------------------

TITLE: Correct Pattern Matching Implementation in Rust
DESCRIPTION: This example demonstrates two correct ways to implement pattern matching: explicitly covering all enum variants, or using the wildcard pattern (_) to catch any remaining cases.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0004.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
enum Terminator {
    HastaLaVistaBaby,
    TalkToMyHand,
}

let x = Terminator::HastaLaVistaBaby;

match x {
    Terminator::TalkToMyHand => {}
    Terminator::HastaLaVistaBaby => {}
}

// or:

match x {
    Terminator::TalkToMyHand => {}
    _ => {}
}
```

----------------------------------------

TITLE: Generating Documentation Using rustdoc
DESCRIPTION: This snippet illustrates how to run rustdoc on a Rust source file to generate documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs
```

----------------------------------------

TITLE: Resolving Rust Compiler Error E0284 with Explicit Type Annotation
DESCRIPTION: This code snippet demonstrates how to resolve the E0284 error by explicitly specifying the intermediate type. It converts the u32 value to u64 before addition, eliminating ambiguity.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0284.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    let n: u32 = 1;
    let mut d: u64 = 2;
    let m: u64 = n.into();
    d = d + m;
}
```

----------------------------------------

TITLE: Correct Usage of #[derive] Attribute in Rust
DESCRIPTION: This code snippet demonstrates the correct way to use the #[derive] attribute in Rust. It shows how to properly derive the Clone trait for a struct.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0777.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[derive(Clone)] // ok!
struct Foo;
```

----------------------------------------

TITLE: Running Clippy on Workspace Package
DESCRIPTION: Commands to run Clippy on specific workspace packages with dependency options
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/README.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
cargo clippy -p example
```

LANGUAGE: shell
CODE:
```
cargo clippy -p example -- --no-deps
```

----------------------------------------

TITLE: Function Definition Formatting in Rust
DESCRIPTION: Illustrates the preferred formatting for function definitions in Rust, including spacing, ordering of keywords, and handling of long signatures. This aims to improve readability and searchability of function definitions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"[pub] [unsafe] [extern [\"ABI\"]] fn foo(arg1: i32, arg2: i32) -> i32 {
    ...
}"
```

----------------------------------------

TITLE: Basic Rust Test Function Implementation
DESCRIPTION: Shows the basic structure of a test function using the #[test] attribute with a simple assertion.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/test-implementation.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[test]
fn my_test() {
    assert!(2+2 == 4);
}
```

----------------------------------------

TITLE: Correct Self Usage in Rust Method
DESCRIPTION: Corrected example showing proper implementation of a method with self receiver parameter, allowing the use of the 'self' keyword within the method body.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0424.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo;

impl Foo {
    fn bar(&self) {}

    fn foo(self) { // `foo` is now a method.
        self.bar(); // ok!
    }
}
```

----------------------------------------

TITLE: Running Tests with Cargo in Rust (bash)
DESCRIPTION: This snippet demonstrates how to execute the entire test suite for the rust-analyzer project using Cargo. It assumes Rust and Cargo are installed and available in the system PATH. The 'cargo test' command compiles and runs all tests in the current workspace, reporting results in the terminal. No additional parameters are required; all code and test discovery is handled automatically by Cargo.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ cargo test

```

----------------------------------------

TITLE: Resolving Borrowing with Function Parameter
DESCRIPTION: Demonstrates how passing a reference to a function can help manage borrowing constraints
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0506.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
struct FancyNum {
    num: u8,
}

fn print_fancy_ref(fancy_ref: &FancyNum){
    println!("Ref: {}", fancy_ref.num);
}

let mut fancy_num = FancyNum { num: 5 };

print_fancy_ref(&fancy_num);

// Works because function borrow has ended
fancy_num = FancyNum { num: 6 };
println!("Num: {}", fancy_num.num);
```

----------------------------------------

TITLE: Installing Rust using rustup
DESCRIPTION: Command to install Rust using the rustup toolchain manager on Unix-like systems. This is the recommended way to install Rust for most users.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ra-salsa/ra-salsa-macros/README.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

----------------------------------------

TITLE: Demonstrating Rust E0618 Error with Non-Callable Items
DESCRIPTION: This Rust snippet illustrates the E0618 compiler error. It shows two cases where this error occurs: attempting to call a simple enum variant (`X::Entry()`) and attempting to call a primitive integer variable (`x()`) using function call syntax `()`. The comments within the code explicitly state the expected error message for each case.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0618.md#_snippet_0

LANGUAGE: Rust
CODE:
```
enum X {
    Entry,
}

X::Entry(); // error: expected function, tuple struct or tuple variant,
            // found `X::Entry`

// Or even simpler:
let x = 0i32;
x(); // error: expected function, tuple struct or tuple variant, found `i32`
```

----------------------------------------

TITLE: Correct Declaration of Lifetime Parameters in Rust
DESCRIPTION: Proper implementation showing how to correctly declare lifetime parameters for both a struct and function definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0261.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo<'a> {
    x: &'a str,
}

fn foo<'a>(x: &'a str) {}
```

----------------------------------------

TITLE: Correcting Lifetime Usage in Rust
DESCRIPTION: This snippet provides the corrected version of the previous code, appropriately assigning explicit lifetime names as identifiers. The corrections involve changing the lifetime identifier to a named lifetime such as `'a` or using a higher-ranked lifetime with `for` to resolve the compile failures.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0637.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
```
fn underscore_lifetime<'a>(str1: &'a str, str2: &'a str) -> &'a str {
    if str1.len() > str2.len() {
        str1
    } else {
        str2
    }
}

fn without_explicit_lifetime<'a, T>()
where
    T: Iterator<Item = &'a u32>,
{
}

fn without_hrtb<T>()
where
    T: for<'foo> Into<&'foo u32>,
{
}
```
```

----------------------------------------

TITLE: Demonstrating Unresolved Name Errors in Rust
DESCRIPTION: Examples of code that will fail to compile due to unresolved names, including undefined module access, invalid Self usage, and unknown variable references.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0425.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
something_that_doesnt_exist::foo;
// error: unresolved name `something_that_doesnt_exist::foo`

// or:

trait Foo {
    fn bar() {
        Self; // error: unresolved name `Self`
    }
}

// or:

let x = unknown_variable;  // error: unresolved name `unknown_variable`
```

----------------------------------------

TITLE: Enabling Missing Documentation Warnings in Rust
DESCRIPTION: This Rust attribute, placed at the crate root (lib.rs or main.rs), enables the `missing_docs` lint. It instructs the Rust compiler (`rustc`) and `cargo doc` to issue warnings for any public items (functions, structs, enums, modules, traits, etc.) lacking documentation comments. This helps ensure documentation coverage during development.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/what-to-include.md#_snippet_0

LANGUAGE: Rust
CODE:
```
#![warn(missing_docs)]
```

----------------------------------------

TITLE: Defining a Basic Test Function (Rust)
DESCRIPTION: Demonstrates how to define a simple test function in Rust using the `#[test]` attribute. The test uses `assert_eq!` to check if an equality holds and passes if it completes without panicking.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/tests/index.md#_snippet_0

LANGUAGE: rust
CODE:
```
#[test]
fn it_works() {
    assert_eq!(2 + 2, 4);
}
```

----------------------------------------

TITLE: Correct Assignment to a Mutable Variable in Rust
DESCRIPTION: A correct implementation showing how to use the += operator by first declaring a mutable variable that can be assigned to.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0067.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let mut x: i8 = 12;
x += 1; // ok!
```

----------------------------------------

TITLE: Copying vs Borrowing in Rust Closures
DESCRIPTION: This snippet illustrates another approach to resolve borrowing issues in Rust by using a cloned copy of the variable. `jon_snow` is cloned into `jon_copy`, which allows the closure `starks` to mutate `jon_snow` without conflict. This approach requires that the type implements the `Clone` trait, and ensures safe borrowing practices.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0500.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
```
fn you_know_nothing(jon_snow: &mut i32) {
    let mut jon_copy = jon_snow.clone();
    let starks = || {
        *jon_snow = 3;
    };
    println!("{}", jon_copy);
}
```
```

----------------------------------------

TITLE: Running Stack Use After Scope Example with ASan (Shell)
DESCRIPTION: This command sequence compiles and runs the stack use after scope example with AddressSanitizer enabled. The ASan output correctly identifies the 'stack-use-after-scope' error, pointing to the attempt to write to the pointer `P` after the variable `x` is no longer valid.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_4

LANGUAGE: Shell
CODE:
```
$ export RUSTFLAGS=-Zsanitizer=address RUSTDOCFLAGS=-Zsanitizer=address
$ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu
```

LANGUAGE: Shell
CODE:
```
=================================================================
==39249==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffc7ed3e1a0 at pc 0x55c98b262a8e bp 0x7ffc7ed3e050 sp 0x7ffc7ed3e048
WRITE of size 8 at 0x7ffc7ed3e1a0 thread T0
    #0 0x55c98b262a8d in core::ptr::write_volatile::he21f1df5a82f329a /.../src/rust/src/libcore/ptr/mod.rs:1048:5
    #1 0x55c98b262cd2 in example::main::h628ffc6626ed85b2 /.../src/main.rs:9:9
    ...

Address 0x7ffc7ed3e1a0 is located in stack of thread T0 at offset 32 in frame
    #0 0x55c98b262bdf in example::main::h628ffc6626ed85b2 /.../src/main.rs:3

  This frame has 1 object(s):
    [32, 40) 'x' (line 6) <== Memory access at offset 32 is inside this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-use-after-scope /.../src/rust/src/libcore/ptr/mod.rs:1048:5 in core::ptr::write_volatile::he21f1df5a82f329a
Shadow bytes around the buggy address:
  0x10000fd9fbe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000fd9fbf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000fd9fc00: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1
  0x10000fd9fc10: f8 f8 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000fd9fc20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x10000fd9fc30: f1 f1 f1 f1[f8]f3 f3 f3 00 00 00 00 00 00 00 00
  0x10000fd9fc40: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1
  0x10000fd9fc50: 00 00 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000fd9fc60: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3
  0x10000fd9fc70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x10000fd9fc80: 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==39249==ABORTING
```

----------------------------------------

TITLE: Fix: Replacing Member Before Moving in Rust
DESCRIPTION: This example fixes the previous E0507 error by using `mem::replace` to replace the field before moving its original value. This ensures that the borrowed struct always contains a valid value, satisfying Rust's ownership rules. The `mem::replace` function takes a mutable reference and replaces the value at that location with a new value, returning the original value.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0507.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
```
# struct TheDarkKnight;
# impl TheDarkKnight { fn nothing_is_true(self) {} }
# struct Batcave { knight: TheDarkKnight }
use std::mem;

let mut cave = Batcave {
    knight: TheDarkKnight
};
let borrowed = &mut cave;

mem::replace(&mut borrowed.knight, TheDarkKnight).nothing_is_true(); // ok!
```
```

----------------------------------------

TITLE: Demonstrating Type Inference Error in Rust
DESCRIPTION: This code demonstrates the E0282 error that occurs when creating a Vec without specifying its type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0282.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let x = Vec::new();
```

----------------------------------------

TITLE: Correct Explicit Lifetime Binders Usage in Rust
DESCRIPTION: This code snippet shows the correct usage of explicit lifetime binders in Rust. It demonstrates proper syntax for function declarations with multiple lifetimes, struct implementations, and impl blocks, avoiding the deprecated in-band lifetimes feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0688.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<'a, 'b>(x: &'a u32, y: &'b u32) {}   // ok!

struct Foo<'a> { x: &'a u32 }

impl<'a> Foo<'a> {
    fn bar<'b,'c>(x: &'a u32, y: &'b u32, z: &'c u32) {}    // ok!
}

impl<'a> Foo<'a> {  // ok!
    fn baz() {}
}
```

----------------------------------------

TITLE: Removing dbg! Macros in Rust
DESCRIPTION: Removes debugging macro invocations and preserves the inner expressions. This refactoring helps clean up code by removing debugging instrumentation that was added during development but is no longer needed for production.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_97

LANGUAGE: rust
CODE:
```
fn main() {
    let x = dbg!(42 * dbg!(4 + 2));
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let x = 42 * (4 + 2);
}
```

----------------------------------------

TITLE: Fixing E0071 Using Type Annotation in Rust
DESCRIPTION: This solution fixes the E0071 error by using proper type annotation syntax for the primitive type alias, instead of incorrectly using structure-literal syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0071.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
type U32 = u32;
let t: U32 = 4;
```

----------------------------------------

TITLE: Checking Lifetime Bound Violation in Rust
DESCRIPTION: This code snippet demonstrates an example of Rust code that triggers a compile-time error due to a lifetime bound not being satisfied. It defines a trait and a struct where the lifetimes are incorrectly specified, leading to an error message indicating that the explicit lifetime must outlive all superbounds from the trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0478.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
// Check that the explicit lifetime bound (`'SnowWhite`, in this example) must
// outlive all the superbounds from the trait (`'kiss`, in this example).

trait Wedding<'t>: 't { }

struct Prince<'kiss, 'SnowWhite> {
    child: Box<Wedding<'kiss> + 'SnowWhite>,
    // error: lifetime bound not satisfied
}
```

----------------------------------------

TITLE: Unwrapping Result Return Type in Rust Functions
DESCRIPTION: Removes the Result wrapper from a function's return type and automatically unwraps the returned value. Useful for simplifying function signatures when error handling is no longer needed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_116

LANGUAGE: rust
CODE:
```
fn foo() -> Result<i32> { Ok(42i32) }
```

LANGUAGE: rust
CODE:
```
fn foo() -> i32 { 42i32 }
```

----------------------------------------

TITLE: Resolution Example 2: Release Borrow Before Move in Rust
DESCRIPTION: This Rust code snippet provides a solution by rearranging operations so that `ref_to_val` is no longer used before calling `eat`. This allows `eat` to take ownership of `x` as the borrow is no longer active.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0505.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Value {}

fn borrow(val: &Value) {}

fn eat(val: Value) {}

fn main() {
    let x = Value{};

    let ref_to_val: &Value = &x;
    borrow(ref_to_val);
    // ref_to_val is no longer used.
    eat(x);
}
```

----------------------------------------

TITLE: Destructuring Array to Move Values in Rust
DESCRIPTION: This snippet demonstrates how to move values out of an array by using destructuring. By pattern matching on the array with `let [_value] = array;`, developers effectively move the value out while adhering to Rust's ownership rules. This method is useful for when it is acceptable to move values directly.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0508.md#2025-04-21_snippet_3

LANGUAGE: Rust
CODE:
```
struct NonCopy;

fn main() {
    let array = [NonCopy; 1];
    // Destructuring the array
    let [_value] = array;
}
```

----------------------------------------

TITLE: Fixing Closure Borrowing by Sequencing in Rust
DESCRIPTION: This snippet shows how to fix the closure borrowing issue by restructuring the order of operations. After using the borrowed reference for printing, the closure `starks` is defined, thus preventing simultaneous borrows. This demonstrates how to manage variable lifetimes effectively in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0500.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
```
fn you_know_nothing(jon_snow: &mut i32) {
    let nights_watch = &jon_snow;
    println!("{}", nights_watch);
    let starks = || {
        *jon_snow = 3;
    };
}
```
```

----------------------------------------

TITLE: Erroneous Trait Return Types Without Static Lifetime
DESCRIPTION: Examples showing incorrect implementations of functions returning trait objects and impl Trait without proper lifetime bounds.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0759.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use std::fmt::Debug;

fn foo(x: &i32) -> impl Debug { // error!
    x
}

fn bar(x: &i32) -> Box<dyn Debug> { // error!
    Box::new(x)
}
```

----------------------------------------

TITLE: Handling Mutable Borrow Error in Closure - Rust
DESCRIPTION: This snippet illustrates an erroneous situation where a mutable variable `a` is borrowed by a closure, preventing further mutable access in the outer function. The error emphasizes Rust's borrowing rules and unique access requirements for mutable references.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0501.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
```compile_fail,E0501
fn inside_closure(x: &mut i32) {
    // Actions which require unique access
}

fn outside_closure(x: &mut i32) {
    // Actions which require unique access
}

fn foo(a: &mut i32) {
    let mut bar = || {
        inside_closure(a)
    };
    outside_closure(a); // error: cannot borrow `*a` as mutable because previous
                        //        closure requires unique access.
    bar();
}
```
```

----------------------------------------

TITLE: Using Partial Type Annotation in Rust
DESCRIPTION: This example shows how to use a partial type annotation, allowing the compiler to infer the rest of the type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0283.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
let x: Vec<_> = "hello".chars().rev().collect();
```

----------------------------------------

TITLE: Demonstrating Name Conflict Error in Rust Module Imports
DESCRIPTION: Shows an erroneous code example where importing a function with the same name as an existing function causes a compilation error E0255.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0255.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use bar::foo; // error: an item named `foo` is already in scope

fn foo() {}

mod bar {
     pub fn foo() {}
}

fn main() {}
```

----------------------------------------

TITLE: Basic Rust Hello World Program
DESCRIPTION: Simple Rust program that prints 'Hello, world!' to demonstrate basic compilation example
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/what-is-rustc.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    println!("Hello, world!");
}
```

----------------------------------------

TITLE: Demonstrating E0373 Error in Rust Function Return
DESCRIPTION: This code snippet shows an erroneous example where a closure captures a local variable, causing an E0373 error when trying to return the closure from a function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0373.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo() -> Box<dyn Fn(u32) -> u32> {
    let x = 0u32;
    Box::new(|y| x + y)
}
```

----------------------------------------

TITLE: Solution 2: Aliasing External Crate in Rust
DESCRIPTION: Shows how to resolve the naming conflict by importing the external crate with an alias using the 'as' keyword.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0260.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
extern crate core as xyz;

struct abc;
```

----------------------------------------

TITLE: Correct usage of unsafe function with an unsafe block in Rust
DESCRIPTION: This example shows the proper way to call an unsafe function by wrapping the call in an unsafe block, which acknowledges and allows the potentially dangerous operation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0133.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
unsafe fn f() { return; }

fn main() {
    unsafe { f(); } // ok!
}
```

----------------------------------------

TITLE: Cloning Values in Rust
DESCRIPTION: This snippet shows how to create a duplicate of a value in Rust using the clone() method. It demonstrates cloning a string and how modifications to the clone do not affect the original value.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0382.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn main() {
    let mut s1 = String::from("many");
    let s2 = s1.clone();
    s1.remove(0);
    println!("{} {}", s1, s2);
}
```

----------------------------------------

TITLE: Documentation Style Guidelines in Rust
DESCRIPTION: Shows proper documentation formatting with complete sentences, starting with capital letters and ending with periods. This approach encourages more detailed context in comments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_34

LANGUAGE: rust
CODE:
```
// Only simple single segment paths are allowed.
MergeBehavior::Last => {
    tree.use_tree_list().is_none() && tree.path().map(path_len) <= Some(1)
}
```

----------------------------------------

TITLE: Basic Type and Value Identification in Rust
DESCRIPTION: Demonstrates name resolution between types and values in separate namespaces, using a Rust program where 'x' is defined as both a type (u32) and a variable. It explains how name resolution differentiates between the two within a single scope. No external dependencies are required, and it involves no parameters. The inputs are simple type definitions and variable declarations, with typical Rust scoping rules applied.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/name-resolution.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
type x = u32;
let x: x = 1;
let y: x = 2;
```

----------------------------------------

TITLE: Incorrect Generic Arguments Usage in Rust
DESCRIPTION: Examples of incorrect generic argument usage that will fail to compile. Shows common mistakes like providing too few or too many type arguments for structs and functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0107.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo<T> { x: T }

struct Bar { x: Foo }             // error: wrong number of type arguments:
                                  //        expected 1, found 0
struct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:
                                  //        expected 1, found 2

fn foo<T, U>(x: T, y: U) {}
fn f() {}

fn main() {
    let x: bool = true;
    foo::<bool>(x);                 // error: wrong number of type arguments:
                                    //        expected 2, found 1
    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:
                                    //        expected 2, found 3
    f::<'static>();                 // error: wrong number of lifetime arguments
                                    //        expected 0, found 1
}
```

----------------------------------------

TITLE: Type Inference Error Demonstration in Rust
DESCRIPTION: This snippet shows an example of an erroneous Rust code where the type inference mechanism fails, causing a compilation error. It demonstrates the situation where the type checker cannot resolve a method call due to the unknown type of a variable. The erroneous behavior is highlighted to emphasize the need for type annotations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0619.md#2025-04-21_snippet_0

LANGUAGE: compile_fail
CODE:
```
let mut x = vec![];
match x.pop() {
    Some(v) => {
        // Here, the type of `v` is not (yet) known, so we
        // cannot resolve this method call:
        v.to_uppercase(); // error: the type of this value must be known in
                          //        this context
    }
    None => {}
}
```

----------------------------------------

TITLE: Resolving Import Name Conflict Using 'as' Keyword
DESCRIPTION: Demonstrates the correct way to resolve the naming conflict by using the 'as' keyword to rename the extern crate import, allowing both the extern crate and trait to coexist.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0254.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
extern crate core as libcore; // ok!

mod foo {
    pub trait core {
        fn do_something();
    }
}

use foo::core;

fn main() {}
```

----------------------------------------

TITLE: Struct Definition Formatting in Rust
DESCRIPTION: Shows the standard formatting for struct definitions in Rust, including placing the opening brace on the same line, indenting fields, adding a trailing comma to each field, and placing the closing brace on its own line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
struct Foo {
    a: A,
    b: B,
}
```

----------------------------------------

TITLE: Fixing E0621: Modifying Function Body to Match Lifetime
DESCRIPTION: This code snippet demonstrates an alternative fix for the E0621 error by modifying the function body to ensure that only data borrowed with the specified lifetime is returned.  In this example, the function is modified to always return `x`, thus satisfying the lifetime constraint in the function signature.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0621.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
```
fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {
    x
}
```
```

----------------------------------------

TITLE: Alternative Fix Using Reference Assignment in Rust
DESCRIPTION: This snippet shows an alternative way to fix the issue by directly assigning the reference to a variable. In this case, the compiler extends the lifetime of the temporary until the end of the enclosing block.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0716.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
fn foo() -> i32 { 22 }
fn bar(x: &i32) -> &i32 { x }
let value = &foo();
let p = bar(value);
let q = *p;
```

----------------------------------------

TITLE: Correct Trait Implementation in Rust
DESCRIPTION: This code snippet demonstrates the correct implementation of the Foo trait for the Bar struct, properly defining the constant N and the method M.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0324.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Bar;

trait Foo {
    const N : u32;

    fn M();
}

impl Foo for Bar {
    const N : u32 = 0;

    fn M() {} // ok!
}
```

----------------------------------------

TITLE: Formatting Match Expressions in Rust
DESCRIPTION: Basic structure for match expressions in Rust, showing proper indentation and brace placement. Arms should be block-indented once, with breaks after opening and before closing braces.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_16

LANGUAGE: rust
CODE:
```
match foo {
    // arms
}

let x = match foo.bar.baz() {
    // arms
};
```

----------------------------------------

TITLE: Correct Enum Variant Pattern Matching in Rust
DESCRIPTION: Shows the proper way to match against a specific enum variant, demonstrating the correct syntax for pattern matching on enum variants in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0574.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
enum Jak {
    Daxter { i: isize },
}

let eco = Jak::Daxter { i: 1 };
match eco {
    Jak::Daxter { i } => {} // ok!
}
```

----------------------------------------

TITLE: Demonstrating Invalid Mutable Borrow in Pattern Guard - Rust
DESCRIPTION: Example showing why mutable borrows are not allowed in pattern guards. The code attempts to use option.take() in a guard clause, which would modify the matched value and break the match exhaustiveness guarantee.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0301.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
match Some(()) {
    None => { },
    option if option.take().is_none() => {
        /* impossible, option is `Some` */
    },
    Some(_) => { } // When the previous match failed, the option became `None`.
}
```

----------------------------------------

TITLE: Fixing E0573: Using pattern matching with enums
DESCRIPTION: This code snippet demonstrates how to correctly use enum variants within a trait function. Instead of specifying a particular variant as the parameter type, it uses the entire enum type and then uses pattern matching (`match`) to handle different variants.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0573.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
```
enum Wizard {
    Gandalf,
    Saruman,
}

trait Isengard {
    fn wizard(w: Wizard) { // ok!
        match w {
            Wizard::Saruman => {
                // do something
            }
            _ => {} // ignore everything else
        }
    }
}
```
```

----------------------------------------

TITLE: Defining Main Function with Generic Parameters in Rust (Error Example)
DESCRIPTION: This code snippet demonstrates an erroneous attempt to define the main function with generic parameters in Rust. This is not allowed and will result in a compilation error (E0131).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0131.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main<T>() { // error: main function is not allowed to have generic parameters
}
```

----------------------------------------

TITLE: Corrected Rust Module Visibility Definition
DESCRIPTION: Shows the correct way to define module and struct visibility in Rust, ensuring proper module scoping and macro resolution
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0578.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub mod Sea {
    pub (in crate::Sea) struct Shark;
}

fn main() {}
```

----------------------------------------

TITLE: Correcting E0412 Error with Proper Imports in Rust Modules
DESCRIPTION: This snippet demonstrates how to correct the E0412 error from the previous example by either importing the File type from the parent scope or re-importing it directly in the child module.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0412.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
use std::fs::File;

mod foo {
    // either
    use super::File;
    // or
    // use std::fs::File;
    fn foo(f: File) {}
}
# fn main() {} // don't insert it for us; that'll break imports
```

----------------------------------------

TITLE: Declaring Array with Non-Constant Value in Rust
DESCRIPTION: This snippet demonstrates an incorrect attempt to declare a Rust array using a non-constant value, which results in a compile-time error. It highlights the need for compile-time values when defining array sizes.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0435.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
let foo = 42;
let a: [u8; foo]; // error: attempt to use a non-constant value in a constant
```

----------------------------------------

TITLE: Corrected Example: Accessing Existing Struct Field in Rust
DESCRIPTION: This code snippet demonstrates the correct way to access a field in a struct in Rust. The code defines a struct StructWithFields with a single field x and then correctly accesses this field using s.x. This example contrasts with the previous one by showing how to properly access existing fields, avoiding the E0609 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0609.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
struct StructWithFields {
    x: u32,
}

let s = StructWithFields { x: 0 };
println!("{}", s.x); // ok!
```
```

----------------------------------------

TITLE: Demonstrating Invalid Type Parameter Usage in Rust
DESCRIPTION: Example showing incorrect usage of type parameters where a struct Foo with no type parameters is incorrectly used with type parameters S and T in another struct Bar. This code will fail to compile.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0244.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo { x: bool }

struct Bar<S, T> { x: Foo<S, T> }
```

----------------------------------------

TITLE: Cross-compiling with cargo
DESCRIPTION: This command uses cargo and the specified stage1 toolchain to build the current crate for the wasm32-wasip1 target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
cargo +stage1 build --target wasm32-wasip1
```

----------------------------------------

TITLE: Standard Interactive Git Rebase (Console)
DESCRIPTION: Initiates an interactive rebase session from the specified base (`master`), providing control over individual commits in the rebased range. Use this to clean up commit history, squash commits, or reorder them.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_15

LANGUAGE: console
CODE:
```
git rebase --interactive master
```

----------------------------------------

TITLE: Demonstrating Incompatible Trait Implementation Bounds in Rust
DESCRIPTION: This example shows how adding a bound (T: Copy) in a trait implementation that wasn't present in the original trait definition causes a compilation error. The trait requires foo<T> to accept any type T, but the implementation restricts it to Copy types only.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0276.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo<T>(x: T);
}

impl Foo for bool {
    fn foo<T>(x: T) where T: Copy {}
}
```

----------------------------------------

TITLE: Fixed Mutable Reference by Making Outer Reference Mutable
DESCRIPTION: Demonstrates an alternative fix by making both the inner and outer references mutable, allowing modification of the underlying data
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0389.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct FancyNum {
    num: u8
}

fn main() {
    let mut fancy = FancyNum{ num: 5 };

    let fancy_ref = &mut (&mut fancy);
    // `fancy_ref` is now &mut(&mut FancyNum), rather than &(&mut FancyNum)

    fancy_ref.num = 6; // No error!

    println!("{}", fancy_ref.num);
}
```

----------------------------------------

TITLE: Incorrect Pattern Matching of Tuple Variant (Error E0769)
DESCRIPTION: Demonstrates incorrect usage of struct pattern syntax when matching a tuple variant, resulting in compilation error E0769.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0769.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum E {
    A(i32),
}

let e = E::A(42);

match e {
    E::A { number } => { // error!
        println!("{}", number);
    }
}
```

----------------------------------------

TITLE: Valid Implementation of Foreign Trait with Reordered Type Parameters in Rust
DESCRIPTION: This example demonstrates a valid implementation of a foreign trait with multiple type parameters by reordering them to ensure the local type appears before any use of type parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0210.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
impl<T> ForeignTrait2<MyType<T>, T> for MyType2 { } // Ok
```

----------------------------------------

TITLE: Invalid Type Usage in Trait Position
DESCRIPTION: Demonstrates incorrect usage of a struct type Foo in positions where a trait is required, resulting in compilation error E0404.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0404.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo;
struct Bar;

impl Foo for Bar {} // error: `Foo` is not a trait
fn baz<T: Foo>(t: T) {} // error: `Foo` is not a trait
```

----------------------------------------

TITLE: Correct Unique Lifetime Declaration in Rust Function
DESCRIPTION: Corrected example showing proper usage where each lifetime parameter has a unique name in the function signature.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0263.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<'a, 'b, 'c>(x: &'a str, y: &'b str, z: &'c str) { // ok!
}
```

----------------------------------------

TITLE: Merging Match Arms with Identical Bodies in Rust
DESCRIPTION: Shows combining multiple match arms that have identical execution bodies using the OR pattern syntax. This refactoring reduces duplication in pattern matching code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_81

LANGUAGE: rust
CODE:
```
enum Action { Move { distance: u32 }, Stop }

fn handle(action: Action) {
    match action {
        ┃Action::Move(..) => foo(),
        Action::Stop => foo(),
    }
}
```

LANGUAGE: rust
CODE:
```
enum Action { Move { distance: u32 }, Stop }

fn handle(action: Action) {
    match action {
        Action::Move(..) | Action::Stop => foo(),
    }
}
```

----------------------------------------

TITLE: Formatting Associated Types in Rust
DESCRIPTION: Shows the proper formatting for associated types in Rust, specifying to include a space after the colon but not before when adding bounds.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_26

LANGUAGE: rust
CODE:
```
pub type Foo: Bar;
```

----------------------------------------

TITLE: Handling Pattern Matching Error in Rust Enums
DESCRIPTION: This snippet demonstrates an erroneous pattern match in Rust where the kind of match arm did not correspond with the matched expression, causing a compile error. The example shows a mismatch due to using a structure pattern for a tuple variant in an enum.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0532.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
enum State {
    Succeeded,
    Failed(String),
}

fn print_on_failure(state: &State) {
    match *state {
        // error: expected unit struct, unit variant or constant, found tuple
        //        variant `State::Failed`
        State::Failed => println!("Failed"),
        _ => ()
    }
}
```

----------------------------------------

TITLE: Defining Lifetimes in Structs and Traits in Rust
DESCRIPTION: This code snippet defines a struct and a trait in Rust that use lifetime parameters. It illustrates an erroneous implementation where the lifetime relationship is not enforced, leading to a compilation error. The goal is to show the necessity of lifetime specifications in Rust for safe references.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0491.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
struct Foo<'a> {
    x: fn(&'a i32),
}

trait Trait<'a, 'b> {
    type Out;
}

impl<'a, 'b> Trait<'a, 'b> for usize {
    type Out = &'a Foo<'b>; // error!
}
```

LANGUAGE: Rust
CODE:
```
struct Foo<'a> {
    x: fn(&'a i32),
}

trait Trait<'a, 'b> {
    type Out;
}

impl<'a, 'b: 'a> Trait<'a, 'b> for usize { // we added the lifetime enforcement
    type Out = &'a Foo<'b>; // it now works!
}
```

----------------------------------------

TITLE: Limiting Reference Lifetime with Scoped Block
DESCRIPTION: Shows how to manage references by limiting their scope, allowing mutation after the reference is no longer active
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0506.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct FancyNum {
    num: u8,
}

let mut fancy_num = FancyNum { num: 5 };

{
    let fancy_ref = &fancy_num;
    println!("Ref: {}", fancy_ref.num);
}

// Works because `fancy_ref` is no longer in scope
fancy_num = FancyNum { num: 6 };
println!("Num: {}", fancy_num.num);
```

----------------------------------------

TITLE: Using Boxed Trait Objects for Multiple Types
DESCRIPTION: This example shows how to use boxed trait objects (Box<dyn T>) as a return type when multiple types are involved. It allows for dynamic dispatch and polymorphism at the cost of some runtime overhead.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0746.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct O(&'static str);
impl T for O {
    fn bar(&self) {}
}

// This now returns a "trait object" and callers are only be able to access
// associated items from `T`.
fn foo(x: bool) -> Box<dyn T> { // ok!
    if x {
        Box::new(S(42))
    } else {
        Box::new(O("val"))
    }
}
```

----------------------------------------

TITLE: Correct Function Trait Specification in Rust
DESCRIPTION: This code shows the proper way to specify a function trait using angle-bracket notation by wrapping the argument type in a tuple. The comma in (i32,) is necessary to create a 1-tuple, allowing the function to be called with the expected syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0059.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(unboxed_closures)]

fn foo<F: Fn<(i32,)>>(f: F) -> F::Output { f(3) }
```

----------------------------------------

TITLE: Specifying Generic Type Parameter in Rust's collect() Method
DESCRIPTION: This snippet illustrates how to resolve type inference issues by specifying the generic type parameter directly in the collect() method call.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0283.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
let x = "hello".chars().rev().collect::<Vec<char>>();
```

----------------------------------------

TITLE: Correct Binary Assignment on Supported Type in Rust
DESCRIPTION: This code snippet shows the correct usage of the left shift assignment operator with an unsigned 32-bit integer type, which supports this operation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0368.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let mut x = 12u32; // the `u32` type does implement the `ShlAssign` trait

x <<= 2; // ok!
```

----------------------------------------

TITLE: Initialization and Move Tracking Example in Rust
DESCRIPTION: This Rust code snippet demonstrates how the borrow checker tracks the initialization and moves of a variable `a`. The variable `a` is initially uninitialized, then initialized via assignment, and finally uninitialized again after being moved into the `drop` function. The code attempts to access `a` after it has been moved, resulting in a compiler error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/moves_and_initialization.md#2025-04-21_snippet_0

LANGUAGE: rust,ignore
CODE:
```
fn foo() {
    let a: Vec<u32>;
    
    // a is not initialized yet
    
    a = vec![22];
    
    // a is initialized here
    
    std::mem::drop(a); // a is moved here
    
    // a is no longer initialized here

    let l = a.len(); //~ ERROR
}
```

----------------------------------------

TITLE: Resolving Mutable Borrow by Cloning
DESCRIPTION: Demonstrates an alternative method of resolving mutable borrow conflicts by creating a clone of the original value
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0503.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn main() {
    let mut value = 3;
    // We clone `value`, creating a copy.
    let value_cloned = value.clone();
    // The mutable borrow is a reference to `value` and
    // not to `value_cloned`...
    let borrow = &mut value;
    // ... which means we can still use `value_cloned`,
    let _sum = value_cloned + 1;
    // even though the borrow only ends here.
    println!("{}", borrow);
}
```

----------------------------------------

TITLE: Resolving E0283 Error by Specifying Trait's Type Parameter in Rust
DESCRIPTION: This snippet demonstrates how to resolve the E0283 error in the context of trait implementation by explicitly specifying the trait's type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0283.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
struct Foo;

impl Into<u32> for Foo {
    fn into(self) -> u32 { 1 }
}

let foo = Foo;
let bar: u32 = Into::<u32>::into(foo) * 1u32;
```

----------------------------------------

TITLE: Implementing Getters with Borrowing
DESCRIPTION: This code snippet demonstrates the correct implementation of getters for the `Person` struct using borrowed references, ensuring that field invariants are respected while avoiding unnecessary cloning.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
struct Person {
    // Invariant: never empty
    first_name: String,
    middle_name: Option<String>
}

// GOOD
impl Person {
    fn first_name(&self) -> &str { self.first_name.as_str() }
    fn middle_name(&self) -> Option<&str> { self.middle_name.as_ref() }
}

// BAD
impl Person {
    fn first_name(&self) -> String { self.first_name.clone() }
    fn middle_name(&self) -> &Option<String> { &self.middle_name }
}
```

----------------------------------------

TITLE: Using Match Expression Inside Rust Loop
DESCRIPTION: A corrected version that uses a match expression inside the loop body to handle all possible patterns. This approach properly handles both Some and None variants of the Option type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0297.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let xs : Vec<Option<i32>> = vec![Some(1), None];

for item in xs {
    match item {
        Some(x) => {},
        None => {},
    }
}
```

----------------------------------------

TITLE: Example Test Runner Output (Text)
DESCRIPTION: Provides an example of the standard output generated by the Rust test harness or `cargo test` after running a set of tests. It shows the status of individual tests and a summary of the overall test run results.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/tests/index.md#_snippet_1

LANGUAGE: text
CODE:
```
running 4 tests
test it_works ... ok
test check_valid_args ... ok
test invalid_characters ... ok
test walks_the_dog ... ok

test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s
```

----------------------------------------

TITLE: Correct Pattern Matching in Rust
DESCRIPTION: This example shows the correct way to perform pattern matching in Rust by using enum variants instead of methods. The code properly matches against the A::B variant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0164.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
enum A {
    B,
    C,
}

impl A {
    fn new() {}
}

fn bar(foo: A) {
    match foo {
        A::B => (), // ok!
        _ => {}
    }
}
```

----------------------------------------

TITLE: Invalid Implementation of Foreign Trait in Rust
DESCRIPTION: This code snippet demonstrates an invalid implementation of a foreign trait for a generic type parameter, violating Rust's orphan rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0210.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
extern crate foo;
use foo::ForeignTrait;

impl<T> ForeignTrait for T { } // error
fn main() {}
```

----------------------------------------

TITLE: Macro Invocation Syntax Error
DESCRIPTION: Shows the common mistake of forgetting the exclamation mark when calling a macro in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0423.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
println("");
// error: expected function, tuple struct or tuple variant,
// found macro `println`
// did you mean `println!(...)`? (notice the trailing `!`)
```

----------------------------------------

TITLE: Nested Module Visibility with Ancestor Reference
DESCRIPTION: Demonstrates visibility restriction using an ancestor module path in a nested module structure.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0742.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
pub mod earth {
    pub mod sea {
        pub (in crate::earth) struct Shark; // ok!
    }
}

fn main() {}
```

----------------------------------------

TITLE: Specifying Minimum Supported Rust Version in Cargo.toml
DESCRIPTION: Demonstrates how to set the minimum rust version in a project's configuration file using the rust-version key
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/README.md#2025-04-21_snippet_9

LANGUAGE: toml
CODE:
```
rust-version = "1.30"
```

----------------------------------------

TITLE: Splitting Bool or Option Parameters into Separate Functions
DESCRIPTION: This code demonstrates the strategy of splitting functions that have boolean or optional parameters into separate functions to simplify control flow and improve clarity.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
// GOOD
fn caller_a() {
    foo()
}

fn caller_b() {
    foo_with_bar(Bar::new())
}

fn foo() { ... }
fn foo_with_bar(bar: Bar) { ... }

// BAD
fn caller_a() {
    foo(None)
}

fn caller_b() {
    foo(Some(Bar::new()))
}

fn foo(bar: Option<Bar>) { ... }
```

----------------------------------------

TITLE: Rust Main Program (main.rs)
DESCRIPTION: Main program that depends on both crate 'b' and the second version of crate 'a', causing a version conflict.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0460.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
extern crate a; // linked with `a2.rs`
extern crate b; // error: found possibly newer version of crate `a` which `b`
                //        depends on

fn main() {}
```

----------------------------------------

TITLE: Valid Self Parameter Examples in Rust Methods
DESCRIPTION: Examples of valid self parameter usage in Rust methods, including both the standard form and a more advanced form using a concrete smart pointer type that would be allowed with the Arbitrary Self Types feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0801.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Foo;

impl Foo {
    fn foo(self) {}
    fn foo2(self: std::rc::Rc<Self>) {} // or some other similar
        // smart pointer if you enable arbitrary self types and
        // the pointer implements Deref<Target=Self>
}
```

----------------------------------------

TITLE: Formatting Control Flow Expressions in Rust
DESCRIPTION: Guidelines for formatting if/else statements and blocks in Rust, showing proper placement of braces, keywords, and whitespace for various control flow scenarios.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
if ... {
    ...
} else {
    ...
}

if let ... {
    ...
} else if ... {
    ...
} else {
    ...
}
```

----------------------------------------

TITLE: Correct Rust Struct Initialization
DESCRIPTION: This code snippet demonstrates the correct way to initialize a struct in Rust, specifying each field exactly once.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0062.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo {
    x: i32,
}

fn main() {
    let x = Foo { x: 0 }; // ok!
}
```

----------------------------------------

TITLE: Formatting Multi-line Elements in Method Chains in Rust
DESCRIPTION: When any element in a method chain spans multiple lines, each element from that point forward should be on its own line with proper block indentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
a.b.c()?
    .foo(
        an_expr,
        another_expr,
    )
    .bar
    .baz
```

----------------------------------------

TITLE: Correcting E0049 Error by Adding Missing Type Parameter in Rust
DESCRIPTION: A corrected implementation of the Foo trait for Bar struct, where the method signature properly includes the required type parameter T with its Default constraint, matching the trait declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0049.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo<T: Default>(x: T) -> Self;
}

struct Bar;

impl Foo for Bar {
    fn foo<T: Default>(x: T) -> Self { // ok!
        Bar
    }
}
```

----------------------------------------

TITLE: Limiting Borrow Lifetime in Rust with Scoped Blocks
DESCRIPTION: This example demonstrates how to limit the lifetime of a borrow using a scoped block. By releasing the borrow before the closure, the value can be moved without conflicts with borrowed references.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0504.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
struct FancyNum {
    num: u8,
}

fn main() {
    let fancy_num = FancyNum { num: 5 };

    {
        let fancy_ref = &fancy_num;
        println!("main function: {}", fancy_ref.num);
        // `fancy_ref` goes out of scope here
    }

    let x = move || {
        // `fancy_num` can be moved now (no more references exist)
        println!("child function: {}", fancy_num.num);
    };

    x();
}
```

----------------------------------------

TITLE: Trait Return Types with Explicit Named Lifetimes
DESCRIPTION: Implementation using explicitly named lifetime parameters to specify lifetime bounds.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0759.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
# use std::fmt::Debug;
fn foo<'a>(x: &'a i32) -> impl Debug + 'a {
    x
}
fn bar<'a>(x: &'a i32) -> Box<dyn Debug + 'a> {
    Box::new(x)
}
```

----------------------------------------

TITLE: Valid Single Self Import Example
DESCRIPTION: Correct example showing proper usage of a single 'self' import in an import list.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0430.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# mod something {}\n# fn main() {\nuse something::{self}; // ok!\n# }
```

----------------------------------------

TITLE: Basic impl Trait Example in Rust
DESCRIPTION: Demonstrates a basic function signature using impl Trait with lifetime parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/member_constraints.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn make(a: &'a u32, b: &'b u32) -> impl Trait<'a, 'b> { .. }
```

----------------------------------------

TITLE: Correct Generic Debug Trait Example in Rust
DESCRIPTION: Fixed version showing how to properly constrain a generic type T to types that implement the Debug trait, allowing for debug printing.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0277.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
use std::fmt;

// Restrict the input type to types that implement Debug.
fn some_func<T: fmt::Debug>(foo: T) {
    println!("{:?}", foo);
}

fn main() {
    // Calling the method is still fine, as i32 implements Debug.
    some_func(5i32);

    // This would fail to compile now:
    // struct WithoutDebug;
    // some_func(WithoutDebug);
}
```

----------------------------------------

TITLE: Introducing a Named Lifetime in Rust
DESCRIPTION: Demonstrates converting an anonymous lifetime to a named lifetime parameter. This makes the lifetime explicit and enables referencing it within the implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_74

LANGUAGE: rust
CODE:
```
impl Cursor<'_┃> {
    fn node(self) -> &SyntaxNode {
        match self {
            Cursor::Replace(node) | Cursor::Before(node) => node,
        }
    }
}
```

LANGUAGE: rust
CODE:
```
impl<'a> Cursor<'a> {
    fn node(self) -> &SyntaxNode {
        match self {
            Cursor::Replace(node) | Cursor::Before(node) => node,
        }
    }
}
```

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Rust Clippy Checks
DESCRIPTION: A GitHub Actions workflow configuration that runs Clippy linting on a Rust project. It sets RUSTFLAGS to fail on warnings, runs on the ubuntu-latest environment, and executes Clippy against all targets and features when code is pushed to the repository.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/continuous_integration/github_actions.md#2025-04-21_snippet_0

LANGUAGE: yml
CODE:
```
on: push
name: Clippy check

# Make sure CI fails on all warnings, including Clippy lints
env:
  RUSTFLAGS: "-Dwarnings"

jobs:
  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features
```

----------------------------------------

TITLE: Correct Trait Implementation in Rust
DESCRIPTION: This example shows the correct implementation of the Foo trait for Bar. Since the trait defines foo() as a static function without parameters, the implementation must also define it as a static function without parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0185.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo();
}

struct Bar;

impl Foo for Bar {
    fn foo() {} // ok!
}
```

----------------------------------------

TITLE: Detecting Uninitialized Memory with MemorySanitizer in Rust
DESCRIPTION: This Rust snippet demonstrates how to detect the use of uninitialized memory by leveraging the MemorySanitizer tool. Using the `std::mem::MaybeUninit` API, an uninitialized array is created and then read unsafely, triggering sanitizer detection. The example requires instrumenting all program code and dependencies with `-Zsanitizer=memory` and `-Zbuild-std` for correct operation. Expected output includes a warning about uninitialized reads. This snippet is useful to detect potential undefined behavior caused by uninitialized memory usage.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_20

LANGUAGE: rust
CODE:
```
use std::mem::MaybeUninit;

fn main() {
    unsafe {
        let a = MaybeUninit::<[usize; 4]>::uninit();
        let a = a.assume_init();
        println!("{}", a[2]);
    }
}
```

----------------------------------------

TITLE: Opening Generated Documentation Automatically with Cargo
DESCRIPTION: This snippet illustrates how to use Cargo with a flag to automatically open the generated documentation in a web browser.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
$ cargo doc --open
```

----------------------------------------

TITLE: Moving Value to Resolve Borrowing Constraint
DESCRIPTION: Demonstrates how to resolve borrowing issues by moving the original value and creating a new instance
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0506.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct FancyNum {
    num: u8,
}

let mut fancy_num = FancyNum { num: 5 };
let moved_num = fancy_num;
fancy_num = FancyNum { num: 6 };

println!("Num: {}, Moved num: {}", fancy_num.num, moved_num.num);
```

----------------------------------------

TITLE: Control Flow Pattern Example
DESCRIPTION: Demonstrates the preferred approach to handling control flow by pushing it to the caller rather than hiding it in functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
// GOOD
if cond {
    f()
}

// BAD
fn f() {
    if !cond {
        return;
    }
    ...
}
```

----------------------------------------

TITLE: Compile-Fail Example: Multiple Closures Borrowing Mutably
DESCRIPTION: This code snippet demonstrates a compile-time error in Rust where two closures attempt to mutably borrow the same variable `x` simultaneously. This is not allowed due to Rust's ownership and borrowing rules, which enforce exclusive mutable access to prevent data races.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0524.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0524
fn set(x: &mut isize) {
    *x += 4;
}

fn dragoooon(x: &mut isize) {
    let mut c1 = || set(x);
    let mut c2 = || set(x); // error!

    c2();
    c1();
}
```
```

----------------------------------------

TITLE: Compile Fail Example: Multiple Main Functions in Rust
DESCRIPTION: This Rust code snippet demonstrates a compile-time error due to having multiple `main` functions defined within the same scope. Rust requires a single entry point for binary executables, identified by the `main` function. Defining multiple `main` functions will cause the compiler to issue an error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0136.md#_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    // ...
}

// ...

fn main() { // error!
    // ...
}
```

----------------------------------------

TITLE: Erroneous Usage of await Outside async Context in Rust
DESCRIPTION: This code snippet demonstrates the incorrect usage of the `await` keyword outside an `async` function, which results in a compilation error (E0728).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0728.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo() {
    wake_and_yield_once().await // `await` is used outside `async` context
}
```

----------------------------------------

TITLE: Function Parameter Layout - Tall
DESCRIPTION: Illustrates the 'Tall' layout for function parameters.  Each parameter is placed on the same line if possible, otherwise each parameter gets its own line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
trait Lorem {
    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);

    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {
        // body
    }

    fn lorem(
        ipsum: Ipsum,
        dolor: Dolor,
        sit: Sit,
        amet: Amet,
        consectetur: Consectetur,
        adipiscing: Adipiscing,
        elit: Elit,
    );

    fn lorem(
        ipsum: Ipsum,
        dolor: Dolor,
        sit: Sit,
        amet: Amet,
        consectetur: Consectetur,
        adipiscing: Adipiscing,
        elit: Elit,
    ) {
        // body
    }
}
```

----------------------------------------

TITLE: Erroneous Private Type in Public Trait Implementation
DESCRIPTION: Demonstrates incorrect usage of a private type Bar in a public trait's associated type signature, which triggers error E0446.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0446.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Bar;

pub trait PubTr {
    type Alias;
}

impl PubTr for u8 {
    type Alias = Bar; // error private type in public interface
}

fn main() {}
```

----------------------------------------

TITLE: Valid Single Lifetime Quantification in Rust Where Clause
DESCRIPTION: Corrected example showing proper usage of lifetime quantification by combining multiple lifetimes into a single for clause, which is supported by Rust's syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0316.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Tr<'a, 'b> {}

fn foo<T>(t: T)
where
    for<'a, 'b> &'a T: Tr<'a, 'b>, // ok
{
}
```

----------------------------------------

TITLE: Fixing Type Inference with Turbofish Syntax in Rust
DESCRIPTION: This solution uses the turbofish syntax to specify the type parameter in the path of the expression.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0282.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
let x = Vec::<i32>::new();
```

----------------------------------------

TITLE: Correcting Lifetime Mismatch in Rust Function
DESCRIPTION: This snippet demonstrates an error due to mismatched lifetimes in a Rust function. The erroneous function attempts to assign a lifetime that does not last long enough, which is resolved by either adjusting the lifetime parameters to enforce that one lives at least as long as the other or by unifying them to the same lifetime. This illustrates Rust's strict compile-time checks to ensure memory safety.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0495.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {
    match (&t,) { // error!
        ((u,),) => u,
    }
}

let y = Box::new((42,));
let x = transmute_lifetime(&y);
```

----------------------------------------

TITLE: Failed Copy Implementation for Enum with Vec
DESCRIPTION: Example showing why implementing Copy fails for an enum containing Vec<u32>, since Vec<T> does not implement Copy for any type T.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0205.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum Foo {
    Bar(Vec<u32>),
    Baz,
}

impl Copy for Foo { }
```

----------------------------------------

TITLE: Module Value Access Error
DESCRIPTION: Demonstrates incorrect module member access syntax that results in E0423 error when trying to access a constant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0423.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
pub mod a {
    pub const I: i32 = 1;
}

fn h1() -> i32 {
    a.I
    //~^ ERROR expected value, found module `a`
    // did you mean `a::I`?
}
```

----------------------------------------

TITLE: Rust Lifetime Resolution with Single Lifetime
DESCRIPTION: Simplifies the lifetime handling by using a single lifetime parameter for both input and output. This approach removes the complexity of multiple lifetime constraints.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0623.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Foo<'a, 'b, T>(std::marker::PhantomData<(&'a (), &'b (), T)>)
where
    T: Convert<'a, 'b>;

trait Convert<'a, 'b>: Sized {
    fn cast(&'a self) -> &'b Self;
}
impl<'long: 'short, 'short, T> Convert<'long, 'short> for T {
    fn cast(&'long self) -> &'short T {
        self
    }
}
fn badboi<'out, T>(x: Foo<'out, 'out, T>, sadness: &'out T) -> &'out T {
    sadness.cast()
}
```

----------------------------------------

TITLE: Correct Type Specification in Rust Signatures
DESCRIPTION: Examples showing the correct way to explicitly specify types in function return types and static variable declarations instead of using placeholders.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0121.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo() -> i32 { 5 } // ok!

static BAR: &str = "test"; // ok!
```

----------------------------------------

TITLE: Defining Tuple Structs and Variants in Rust
DESCRIPTION: This snippet defines a tuple struct and a tuple variant in Rust, and demonstrates their usage. It includes the necessary 'use' statement to import the variant directly and emphasizes the proper structure for using tuple structs and variants.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0531.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
struct Type(u32); // this is a tuple struct

enum Foo {
    Bar(u32), // this is a tuple variant
}

use Foo::*; // To use Foo's variant directly, we need to import them in
            // the scope.
```

----------------------------------------

TITLE: Correct Associated Type Implementation in Rust
DESCRIPTION: Demonstrates the correct way to specify and use an associated type by implementing the trait for a concrete type and using the proper syntax to reference the associated type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0223.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Trait { type X; }

struct Struct;
impl Trait for Struct {
    type X = u32;
}

fn main() {
    let foo: <Struct as Trait>::X;
}
```

----------------------------------------

TITLE: Demonstrating Trait Object Lifetime Error in Rust
DESCRIPTION: Example showing erroneous code where a trait object with specific lifetime is used in a context requiring 'static lifetime. The code fails to compile due to lifetime mismatch between person parameter and trait implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0772.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait BooleanLike {}
trait Person {}

impl BooleanLike for bool {}

impl dyn Person {
    fn is_cool(&self) -> bool {
        // hey you, you're pretty cool
        true
    }
}

fn get_is_cool<'p>(person: &'p dyn Person) -> impl BooleanLike {
    // error: `person` has an anonymous lifetime `'p` but calling
    //        `print_cool_fn` introduces an implicit `'static` lifetime
    //        requirement
    person.is_cool()
}
```

----------------------------------------

TITLE: Cloning Element from a Non-Copy Fixed-Size Array in Rust
DESCRIPTION: This snippet shows how to clone an element from a non-copy fixed-size array if the type implements the `Clone` trait. The `NonCopy` struct is derived from `Clone`, allowing developers to create a separate instance of the value while still adhering to ownership rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0508.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
#[derive(Clone)]
struct NonCopy;

fn main() {
    let array = [NonCopy; 1];
    // Now you can clone the array element.
    let _value = array[0].clone();
}
```

----------------------------------------

TITLE: Correct Macro Export and Import in Rust
DESCRIPTION: This code snippet demonstrates the correct way to export macros from one crate and import them in another. It shows how to use the #[macro_export] attribute and the #[macro_use] attribute properly.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0469.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// In some_crate crate:
#[macro_export]
macro_rules! eat {
    ...
}

#[macro_export]
macro_rules! drink {
    ...
}

// In your crate:
#[macro_use(eat, drink)]
extern crate some_crate; //ok!
```

----------------------------------------

TITLE: Configuring disallowed-macros
DESCRIPTION: Defines a list of macros that are disallowed in the code, specified as fully qualified paths. Defaults to an empty list (`[]`). Useful for enforcing coding standards and preventing the use of specific macros.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_9



----------------------------------------

TITLE: Providing Insufficient Lifetime Arguments in Rust Function Call
DESCRIPTION: This example demonstrates an error when providing too few lifetime arguments to a function that requires multiple lifetimes. The function expects two lifetime parameters, but only one is provided in the function call.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0090.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<'a: 'b, 'b: 'a>() {}

fn main() {
    foo::<'static>(); // error: wrong number of lifetime arguments:
                      //        expected 2, found 1
}
```

----------------------------------------

TITLE: Enabling and Configuring rust-analyzer Runnables in JSON
DESCRIPTION: Specifies how runnable commands such as tests and binaries are executed within rust-analyzer. It indicates the base command override, additional arguments appended to cargo invocations, and extra test binary arguments which are passed through Cargo to the launched test executables. This allows custom test harness support and fine control over how tests run within the development environment. Requires rust-analyzer version supporting these keys and a cargo-based Rust project. Inputs are arrays or strings controlling CLI commands, outputs influence in-editor run functionality and test command-line options.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  "rust-analyzer.runnables.command": null,
  "rust-analyzer.runnables.extraArgs": [],
  "rust-analyzer.runnables.extraTestBinaryArgs": [
    "--show-output"
  ]
}
```

----------------------------------------

TITLE: Error Demonstration: Moving Borrowed Value in Rust
DESCRIPTION: This Rust code snippet illustrates an error (E0505) where a value is moved out while it is still borrowed. The function `eat` takes ownership of `x`, but this move is invalid as `x` has an outstanding borrow `_ref_to_val`. The snippet demonstrates the incorrect order of operations leading to a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0505.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[compile_fail,E0505]
struct Value {}

fn borrow(val: &Value) {}

fn eat(val: Value) {}

fn main() {
    let x = Value{};
    let _ref_to_val: &Value = &x;
    eat(x);
    borrow(_ref_to_val);
}
```

----------------------------------------

TITLE: Basic Trait Object Example in Rust
DESCRIPTION: Demonstrates how trait objects enable passing a trait implementor to functions that accept either concrete or dynamic types. This shows the interoperability between static and dynamic polymorphism.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Trait {
}

fn static_foo<T:Trait + ?Sized>(b: &T) {
}

fn dynamic_bar(a: &dyn Trait) {
    static_foo(a)
}
```

----------------------------------------

TITLE: Block Style Alignment for Function Arguments in Rust
DESCRIPTION: Shows the default 'Block' alignment style for function arguments. In this style, arguments in multiline functions are aligned as a distinct block with consistent indentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_29

LANGUAGE: rust
CODE:
```
fn lorem() {}

fn lorem(ipsum: usize) {}

fn lorem(
    ipsum: usize,
    dolor: usize,
    sit: usize,
    amet: usize,
    consectetur: usize,
    adipiscing: usize,
    elit: usize,
) {
    // body
}
```

----------------------------------------

TITLE: Correct Module Import Example
DESCRIPTION: Shows the correct way to import from a local module using self:: prefix and proper module declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0432.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use self::something::Foo; // Ok.

mod something {
    pub struct Foo;
}
# fn main() {}
```

----------------------------------------

TITLE: Implicit Discriminant Conflict in Rust Enum
DESCRIPTION: This code snippet illustrates how implicit discriminant assignment can lead to conflicts. The first variant X is implicitly assigned 0, which conflicts with the explicit assignment of 0 to Y.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0081.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
enum Bad {
    X,
    Y = 0, // error!
}
```

----------------------------------------

TITLE: Defining a Function with Trait Bounds in Rust
DESCRIPTION: This snippet demonstrates the definition of a function 'foo' that has a default trait bound for its generic type T. It shows how trait bounds are checked for validity when using the function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/effects.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<T>() where T: Default {}
```

----------------------------------------

TITLE: Corrected Rust Function Type with Lifetime Constraints
DESCRIPTION: Shows two valid ways to handle lifetimes in function type declarations: using a lifetime in arguments or using the 'static lifetime
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0581.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    // Here, `'a` appears only in the return type:
    let x: for<'a> fn(&'a i32) -> &'a i32;
    let y: fn() -> &'static i32;
}
```

----------------------------------------

TITLE: Super Trait Implementation
DESCRIPTION: Shows how to create a new trait with inherited trait bounds using super traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0404.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
# trait Foo {}
# struct Bar;
# impl Foo for Bar {}
trait Qux: Foo {} // Anything that implements Qux also needs to implement Foo
fn baz<T: Qux>(t: T) {} // also ok!
```

----------------------------------------

TITLE: Correct Trait Implementation with Matching Lifetime Parameters
DESCRIPTION: Example showing the correct implementation where lifetime parameters and constraints match exactly between trait declaration and implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0195.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Trait {
    fn t<'a,'b:'a>(x: &'a str, y: &'b str);
}

struct Foo;

impl Trait for Foo {
    fn t<'a,'b:'a>(x: &'a str, y: &'b str) { // ok!
    }
}
```

----------------------------------------

TITLE: Using Arc for Reference Counting in Rust Threads
DESCRIPTION: This snippet utilizes Arc to safely share ownership of a variable across threads, giving it a 'static' lifetime and allowing concurrent access without ownership violations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0504.md#2025-04-21_snippet_3

LANGUAGE: Rust
CODE:
```
use std::sync::Arc;
use std::thread;

struct FancyNum {
    num: u8,
}

fn main() {
    let fancy_ref1 = Arc::new(FancyNum { num: 5 });
    let fancy_ref2 = fancy_ref1.clone();

    let x = thread::spawn(move || {
        // `fancy_ref1` can be moved and has a `'static` lifetime
        println!("child thread: {}", fancy_ref1.num);
    });

    x.join().expect("child thread should finish");
    println!("main thread: {}", fancy_ref2.num);
}
```

----------------------------------------

TITLE: Matching Arrays with Flexible Pattern Length in Rust
DESCRIPTION: This snippet shows a correct pattern matching approach using the `..` syntax, allowing the pattern to match more elements than explicitly defined by the pattern variables, thus preventing compile errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0527.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
let r = &[1, 2, 3, 4];
match r {
    &[a, b, ..] => { // ok!
        println!("a={}, b={}", a, b);
    }
}
```

----------------------------------------

TITLE: Multi-line Function Signature Formatting in Rust
DESCRIPTION: Demonstrates how to format function signatures that exceed a single line in Rust. It includes breaking after the opening parenthesis, placing each argument on a new line with block indentation, and including a trailing comma on the last argument.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo(
    arg1: i32,
    arg2: i32,
) -> i32 {
    ...
}
```

----------------------------------------

TITLE: Closure Formatting in Rust
DESCRIPTION: Styling guidelines for defining and formatting Rust closures, including spacing, braces, and different closure forms
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
|arg1, arg2| expr

move |arg1: i32, arg2: i32| -> i32 {
    expr1;
    expr2
}

|| Foo {
    field1,
    field2: 0,
}
```

----------------------------------------

TITLE: Resolving Ambiguous Lifetime Bounds in Rust Traits
DESCRIPTION: This code snippet demonstrates how to resolve the E0227 compiler error by providing an explicit lifetime bound in the struct definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0227.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo<'foo>: 'foo {}
trait Bar<'bar>: 'bar {}

trait FooBar<'foo, 'bar>: Foo<'foo> + Bar<'bar> {}

struct Baz<'foo, 'bar, 'baz>
where
    'baz: 'foo + 'bar,
{
    obj: dyn FooBar<'foo, 'bar> + 'baz,
}
```

----------------------------------------

TITLE: Borrowing Element from a Non-Copy Fixed-Size Array in Rust
DESCRIPTION: This snippet demonstrates how to properly borrow an element from a non-copy fixed-size array. By using a reference (`&array[0]`), developers can access the element without violating ownership rules, allowing for safe usage of non-copy types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0508.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
struct NonCopy;

fn main() {
    let array = [NonCopy; 1];
    let _value = &array[0]; // Borrowing is allowed, unlike moving.
}
```

----------------------------------------

TITLE: Defining a Debug-Enabled Enum in Rust
DESCRIPTION: This code snippet demonstrates how to define a Rust enum called 'Foo' with a single variant 'Bar'. The enum is derived with Debug, PartialEq, and Clone traits, and includes documentation comments.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_errors/src/markdown/tests/input.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
/// A rust enum
#[derive(Debug, PartialEq, Clone)]
enum Foo {
    /// Start of line
    Bar
}
```

----------------------------------------

TITLE: Library Crate Definition
DESCRIPTION: Defines a simple library crate with a single function foo()
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0461.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![crate_type = "lib"]

fn foo() {}
```

----------------------------------------

TITLE: Correct Pattern Binding in Rust
DESCRIPTION: Demonstrates the correct way to bind multiple values in a pattern using unique identifiers.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0416.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
match (1, 2) {
    (x, y) => {} // ok!
}
```

----------------------------------------

TITLE: Erroneous Lifetime Binding in Function
DESCRIPTION: Demonstrates a compilation error where a lifetime is used in a return type without being present in input types, causing type resolution issues
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0582.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn bar<F>(t: F)
    where F: for<'a> Fn(i32) -> Option<&'a i32>
{
}

fn main() { }
```

----------------------------------------

TITLE: Fixing Mutable Borrow Issue in Closure - Rust
DESCRIPTION: This snippet provides a solution to the mutable borrow error by ensuring that the closure is invoked before further mutable access is required for the captured variable. This demonstrates how to correctly manage variable scopes and borrowing in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0501.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
```
fn inside_closure(x: &mut i32) {}
fn outside_closure(x: &mut i32) {}

fn foo(a: &mut i32) {
    let mut bar = || {
        inside_closure(a)
    };
    bar();
    // borrow on `a` ends.
    outside_closure(a); // ok!
}
```
```

----------------------------------------

TITLE: Invalid Pattern Binding in Rust
DESCRIPTION: Example showing incorrect pattern binding that fails compilation because it uses a refutable pattern (Some) in a let binding, which requires irrefutable patterns.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0005.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let x = Some(1);
let Some(y) = x;
// error: refutable pattern in local binding: `None` not covered
```

----------------------------------------

TITLE: Defining Dependencies in TOML
DESCRIPTION: This snippet illustrates how to specify crate dependencies in a Cargo.toml file. It adheres to the convention of placing dependency tables on the same line if they fit, otherwise separating them into key-value pairs for clarity.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/cargo.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[dependencies]
crate1 = { path = "crate1", version = "1.2.3" }

[dependencies.extremely_long_crate_name_goes_here]
path = "extremely_long_path_name_goes_right_here"
version = "4.5.6"
```

----------------------------------------

TITLE: Correct Function Declaration and Usage
DESCRIPTION: Shows the correct way to declare and use a function named Foo.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0423.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn Foo() -> u32 { 0 }

let f = Foo(); // ok!
```

----------------------------------------

TITLE: Generic Function with Trait Bound in Rust
DESCRIPTION: This code snippet defines a generic function `convertAll` that takes a slice of type `T` and converts each element to type `A`, where `T` implements the `ConvertTo<A>` trait. The ellipsis indicates that the actual implementation is omitted.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/variance.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
"fn convertAll<A,T:ConvertTo<A>>(v: &[T]) { ... }"
```

----------------------------------------

TITLE: Correct Syntax for Public Enum in Rust
DESCRIPTION: This code snippet shows the correct way to define a public enum in Rust without unnecessary `pub` keywords on its variants.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0448.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
pub enum Foo {
    Bar, // ok!
}
```

----------------------------------------

TITLE: Implementing Foreign Trait for Local Type (Rust)
DESCRIPTION: This code snippet shows a correct way to implement a foreign trait (Drop) for a locally defined type (Foo). It also demonstrates implementing From trait with a local type as a type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0117.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub struct Foo; // you define your type in your crate

impl Drop for Foo { // and you can implement the trait on it!
    // code of trait implementation here
#   fn drop(&mut self) { }
}

impl From<Foo> for i32 { // or you use a type from your crate as
                         // a type parameter
    fn from(i: Foo) -> i32 {
        0
    }
}
```

----------------------------------------

TITLE: Customizing Semantic Token Styling in VS Code (JSON)
DESCRIPTION: This JSON snippet demonstrates how to customize the visual appearance of semantic tokens in the VS Code editor. It allows the user to modify the style of elements like mutable bindings and unsafe operations within Rust code.  It depends on the VS Code editor and the Rust extension for VS Code.  The output modifies the appearance of semantic elements like setting a specific color or font style. The configuration is done in settings.json.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/editor_features.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "editor.semanticTokenColorCustomizations": {
    "rules": {
      "*.mutable": {
        "fontStyle": "", // underline is the default
      },
    }
  },
}
```

----------------------------------------

TITLE: Correct Inline Attribute Usage in Rust
DESCRIPTION: Shows the proper way to use the `inline` attribute with its two supported arguments: 'always' and 'never'
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0535.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[inline(never)] // ok!
pub fn something() {}

fn main() {}
```

----------------------------------------

TITLE: Incorrect Pattern Matching in Rust Loop Variable
DESCRIPTION: This example demonstrates incorrect pattern matching in a for loop where the pattern is refutable (Some(x)), which would fail when encountering None values. This code produces error E0005.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0297.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let xs : Vec<Option<i32>> = vec![Some(1), None];

// This fails because `None` is not covered.
for Some(x) in xs {
    // ...
}
```

----------------------------------------

TITLE: Attempting to Access Private Field in Rust Struct
DESCRIPTION: This code snippet demonstrates an error in Rust when trying to access a private field of a struct. The field 'x' in struct 'Foo' is private and accessing it from outside the module results in a compile error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0616.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
mod some_module {
    pub struct Foo {
        x: u32, // So `x` is private in here.
    }

    impl Foo {
        pub fn new() -> Foo { Foo { x: 0 } }
    }
}

let f = some_module::Foo::new();
println!("{}", f.x); // error: field `x` of struct `some_module::Foo` is private
```

----------------------------------------

TITLE: Correct Enum Definition with Unique Discriminants in Rust
DESCRIPTION: This code snippet demonstrates a correct enum definition where each variant has a unique discriminant value, either explicitly assigned or implicitly derived.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0081.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
enum Enum {
    P,
    X = 3, // ok!
    Y = 5,
}
```

----------------------------------------

TITLE: Handling Borrowed Variables in Closures using Rust
DESCRIPTION: The snippet demonstrates a scenario where a borrowed variable cannot be moved into a closure due to Rust's ownership rules. It suggests using references instead of moving borrowed variables directly to avoid compilation errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0504.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
struct FancyNum {
    num: u8,
}

fn main() {
    let fancy_num = FancyNum { num: 5 };
    let fancy_ref = &fancy_num;

    let x = move || {
        println!("child function: {}", fancy_num.num);
        // error: cannot move `fancy_num` into closure because it is borrowed
    };

    x();
    println!("main function: {}", fancy_ref.num);
}
```

----------------------------------------

TITLE: Correct Usage of #[link] Attribute in Rust
DESCRIPTION: This code snippet shows the correct way to use the #[link] attribute by including both the 'kind' and 'name' parameters. This allows the Rust compiler to find the specified library.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0459.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[link(kind = "dylib", name = "some_lib")] extern "C" {} // ok!
```

----------------------------------------

TITLE: Standard Quoted String Literal in Rust
DESCRIPTION: A basic string literal with standard quotes, representing simple string text
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/strings.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"hello"
```

----------------------------------------

TITLE: Indexing with Vec: Implementing std::ops::Index in Rust
DESCRIPTION: This example showcases the correct way to index into a `Vec` type in Rust. The `Vec` type implements the `std::ops::Index` trait, allowing you to access elements using the indexing operator ([]).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0608.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
"let v: Vec<u8> = vec![0, 1, 2, 3];\n\n// The `Vec` type implements the `Index` trait so you can do:\nprintln!("{}", v[2]);"
```

----------------------------------------

TITLE: Demonstrating Properly Terminated Multi-line Comments in Rust
DESCRIPTION: This snippet shows the correct way to terminate both regular and documentation multi-line comments in Rust, avoiding compilation errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0758.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
/* I am terminated! */
/*! I am also terminated! */
```

----------------------------------------

TITLE: Correctly Defining Recursive Type in Rust Using Box
DESCRIPTION: This code snippet shows the correct way to define a recursive type in Rust by using Box<T> for indirection, allowing the compiler to determine the type's size.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0072.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct ListNode {
    head: u8,
    tail: Option<Box<ListNode>>,
}
```

----------------------------------------

TITLE: Expanding Glob Imports in Rust
DESCRIPTION: Expands glob imports (use foo::*) into explicit imports listing each used item. Helps improve code readability by making imports explicit.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_40

LANGUAGE: rust
CODE:
```
mod foo {
    pub struct Bar;
    pub struct Baz;
}

use foo::*;

fn qux(bar: Bar, baz: Baz) {}
```

----------------------------------------

TITLE: Formatting Basic Imports in Rust
DESCRIPTION: Demonstrates the basic formatting rules for import (use) statements in Rust, including single line usage and handling of multiple items from the same module.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_27

LANGUAGE: rust
CODE:
```
use a::b::c;
use a::b::d::*;
use a::b::{foo, bar, baz};
```

----------------------------------------

TITLE: Setting Rust Edition in TOML Configuration
DESCRIPTION: This snippet shows how to specify the Rust edition in a `Cargo.toml` file. Rustfmt uses this setting to parse the code correctly.  Setting the edition ensures the code is formatted according to the rules of that specific Rust edition.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_6

LANGUAGE: toml
CODE:
```
edition = "2018"
```

----------------------------------------

TITLE: Correcting Lifetime Error in Rust Closure
DESCRIPTION: This code snippet demonstrates the correct implementation that resolves the lifetime error. By giving the 's' parameter a static lifetime, the closure now satisfies the 'static lifetime constraint required by the i_want_static_closure function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0477.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use std::sync::Mutex;

struct MyString<'a> {
    data: &'a str,
}

fn i_want_static_closure<F>(a: F)
    where F: Fn() + 'static {}

fn print_string(s: Mutex<MyString<'static>>) {

    i_want_static_closure(move || {     // ok!
        println!("{}", s.lock().unwrap().data);
    });
}
```

----------------------------------------

TITLE: Correcting Type Inference with Annotations in Rust
DESCRIPTION: This code snippet provides a corrected example by specifying the type of elements in the vector. By declaring the type explicitly, the Rust compiler can infer the method calls correctly, allowing the program to compile and execute without errors. This highlights the importance of type annotations in resolving type inference issues.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0619.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
let mut x: Vec<String> = vec![]; // We precise the type of the vec elements.
match x.pop() {
    Some(v) => {
        v.to_uppercase(); // Since rustc now knows the type of the vec elements,
                          // we can use `v`'s methods.
    }
    None => {}
}
```

----------------------------------------

TITLE: Compile-Fail Example: Lifetime Mismatch in Function Signature (E0621)
DESCRIPTION: This code snippet demonstrates the E0621 error in Rust, where the explicit lifetime annotation `'a` suggests the function returns data borrowed only from `x`, but the function body potentially returns data from `y` as well. The compiler flags this as an error, requiring either the signature or the body to be adjusted to match the actual data flow.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0621.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0621
fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 { // error: explicit lifetime
                                             //        required in the type of
                                             //        `y`
    if x > y { x } else { y }
}
```
```

----------------------------------------

TITLE: Correcting E0719 Error in Rust
DESCRIPTION: This code snippet demonstrates the correct way to specify multiple trait bounds for an associated type by creating a new combined trait and using it in the generic parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0719.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait FooTrait {}
trait BarTrait {}
trait FooBarTrait: FooTrait + BarTrait {}

struct Foo<T: Iterator<Item: FooBarTrait>> { f: T } // ok!
```

----------------------------------------

TITLE: Fixing Self-Referential Struct Using Option in Rust
DESCRIPTION: Demonstrates the correct way to define a potentially self-referential struct using Option<Box<Foo>>, allowing for initialization with None
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0073.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo { x: Option<Box<Foo>> }
```

----------------------------------------

TITLE: Valid Trait Object Declaration With dyn Keyword
DESCRIPTION: Corrected example showing proper trait object declaration using the 'dyn' keyword, which is required in Rust 2021 edition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0782.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {}
fn test(arg: Box<dyn Foo>) {} // ok!
```

----------------------------------------

TITLE: Correct Implementation: Properly Defined Associated Types in Rust Traits
DESCRIPTION: Example showing the correct way to define and use associated types in Rust traits. Demonstrates proper type declaration and usage in both type aliases and trait methods.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0220.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait T1 {
    type Bar;
}

type Foo = T1<Bar=i32>; // ok!

// or:

trait T2 {
    type Bar;
    type Baz; // we declare `Baz` in our trait.

    // and now we can use it here:
    fn return_bool(&self, _: &Self::Bar, _: &Self::Baz) -> bool;
}
```

----------------------------------------

TITLE: Correct Lifetime Usage in Rust Function
DESCRIPTION: Fixed version of the function that correctly matches the input and output lifetimes by using the same lifetime parameter 'a instead of 'static.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0312.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub fn opt_str<'a>(maybestr: &'a Option<String>) -> &'a str {
    if maybestr.is_none() {
        "(none)"
    } else {
        let s: &'a str = maybestr.as_ref().unwrap();
        s  // Ok!
    }
}
```

----------------------------------------

TITLE: Current Range Pattern Syntax in Rust
DESCRIPTION: Correct implementation using the ..= syntax for inclusive range patterns in a match expression.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0783.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
match 2u8 {
    0..=9 => println!("Got a number less than 10"), // ok!
    _ => println!("Got a number 10 or more"),
}
```

----------------------------------------

TITLE: Invalid Thread-local Variable Borrow in Rust
DESCRIPTION: Demonstrates an erroneous attempt to borrow a thread-local variable and move it into a new thread. The code fails because the borrow of the thread-local variable FOO outlives the function where it was created, which is not allowed due to thread-local variable lifetime constraints.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0712.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(thread_local)]

#[thread_local]
static FOO: u8 = 3;

fn main() {
    let a = &FOO; // error: thread-local variable borrowed past end of function

    std::thread::spawn(move || {
        println!("{}", a);
    });
}
```

----------------------------------------

TITLE: Configuring check-private-items
DESCRIPTION: Determines whether the lints should also be applied to private items within the codebase. Defaults to `false`.  Enabling this extends linting to private entities.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_7



----------------------------------------

TITLE: Documenting Rust Crate Abstraction
DESCRIPTION: This snippet provides an example of how to start the front-page documentation of a Rust crate using module-level documentation comments. It showcases a simple fast and easy queue abstraction with the use of inline module and function level comments. It mentions high-level documentation benefits and references. No specific dependencies other than Rust itself. The inputs and outputs are not specified as this is a structural guideline example.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/how-to-write-documentation.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
//! Fast and easy queue abstraction.
//!
//! Provides an abstraction over a queue.  When the abstraction is used
//! there are these advantages:
//! - Fast
//! - [`Easy`]
//!
//! [`Easy`]: http://thatwaseasy.example.com

/// This module makes it easy.
pub mod easy {

    /// Use the abstraction function to do this specific thing.
    pub fn abstraction() {}

}
```

----------------------------------------

TITLE: Adding Emscripten Target to Rust
DESCRIPTION: This shell command utilizes 'rustup' to add the 'wasm32-unknown-emscripten' target, allowing Rust to compile programs to this WebAssembly target. The 'rustup' tool must be installed prior to execution. It outputs a confirmation of the successful addition of the target, allowing further compilation to WebAssembly using this target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-emscripten.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
rustup target add wasm32-unknown-emscripten
```

----------------------------------------

TITLE: Defining a Simple Trait in Rust
DESCRIPTION: This snippet defines a basic trait `Foo` in Rust with a single method `foo` that takes a generic type `X` as input. The purpose is to illustrate a simple trait that can be used in higher-ranked trait bounds examples.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/hrtb.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo<X> {
    fn foo(&self, x: X) { }
}
```

----------------------------------------

TITLE: Basic Rust Doc Example with Error Propagation (`?`)
DESCRIPTION: This snippet shows a Rust documentation comment containing a code example. The example demonstrates parsing a string to a `u32` using `parse` and the `?` operator for concise error propagation. Note that this specific example, when run by `rustdoc`'s testing harness, might require wrapping in a function returning a `Result` to compile correctly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/what-to-include.md#_snippet_2

LANGUAGE: Text
CODE:
```
/// Example
/// ```rust
/// let fourtytwo = "42".parse::<u32>()?;
/// println!("{} + 10 = {}", fourtytwo, fourtytwo+10);
/// ```
```

----------------------------------------

TITLE: Demonstrating Lifetime Elision Errors in Rust Functions
DESCRIPTION: This code snippet illustrates examples of lifetime elision errors in Rust function signatures. It shows cases where the lifetime elision rules are not satisfied, leading to compilation errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0106.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// error, no input lifetimes
fn foo() -> &str { }

// error, `x` and `y` have distinct lifetimes inferred
fn bar(x: &str, y: &str) -> &str { }

// error, `y`'s lifetime is inferred to be distinct from `x`'s
fn baz<'a>(x: &'a str, y: &str) -> &str { }
```

----------------------------------------

TITLE: Correct Array Pattern Matching in Rust
DESCRIPTION: Shows the proper way to perform pattern matching on an array, ensuring type consistency between the pattern and the matched expression
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0529.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let r = [1.0, 2.0];
match r {
    [a, b] => { // ok!
        println!("a={}, b={}", a, b);
    }
}
```

----------------------------------------

TITLE: Correct Usage of Explicit Lifetime Declarations in Rust Function Types
DESCRIPTION: This code snippet demonstrates the correct way to declare lifetimes explicitly using `<...>` binders in `fn` and `Fn` syntax. These examples show valid Rust code for using lifetimes in function types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0687.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<'a>(x: fn(&'a u32)) {} // ok!

fn bar<'a>(x: &Fn(&'a u32)) {} // ok!

fn baz<'a>(x: fn(&'a u32), y: &'a u32) {} // ok!

struct Foo<'a> { x: &'a u32 }

impl<'a> Foo<'a> {
    fn bar(&self, x: fn(&'a u32)) {} // ok!
}
```

----------------------------------------

TITLE: Valid Trait Implementation with Self Reference in Rust
DESCRIPTION: This example demonstrates the correct way to implement a trait method with a reference to Self as the receiver type. It shows how &self is syntactic sugar for self: &Self.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0307.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# struct Foo;
trait Trait {
    fn foo(&self);
//         ^^^^^ `self` here is a reference to the receiver object
}

impl Trait for Foo {
    fn foo(&self) {}
//         ^^^^^ the receiver type is `&Foo`
}
```

----------------------------------------

TITLE: Desugaring Async Functions to Impl Future (Rust)
DESCRIPTION: This snippet demonstrates how async functions are desugared to return impl Future. It shows the equivalence between an async function and its desugared form.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0706.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
async fn foo() -> User {
    unimplemented!()
}
// The async fn above gets desugared as follows:
fn foo(&self) -> impl Future<Output = User> + '_ {
    unimplemented!()
}
```

----------------------------------------

TITLE: Compile Fail: Moving Member Out of Mutably Borrowed Struct in Rust
DESCRIPTION: This example shows E0507 occurring when attempting to move a field out of a struct accessed through a mutable borrow. The `nothing_is_true` method takes ownership of `self`, and the code attempts to call it on `borrowed.knight`, which is accessed via a mutable borrow, hence the error because it tries to move out of the borrowed content.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0507.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
```compile_fail,E0507
struct TheDarkKnight;

impl TheDarkKnight {
    fn nothing_is_true(self) {}
}

struct Batcave {
    knight: TheDarkKnight
}

fn main() {
    let mut cave = Batcave {
        knight: TheDarkKnight
    };
    let borrowed = &mut cave;

    borrowed.knight.nothing_is_true(); // E0507
}
```
```

----------------------------------------

TITLE: Configuring Clippy in rust-analyzer
DESCRIPTION: Sets the rust-analyzer configuration to use Clippy instead of the default cargo check for diagnostics.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/diagnostics.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
"rust-analyzer.check.command": "clippy"
```

----------------------------------------

TITLE: Empty Item Single Line - False Example
DESCRIPTION: Example showing how rustfmt handles empty functions and impls when `empty_item_single_line` is set to `false`. With this option disabled, empty functions and impls are formatted with braces on separate lines.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
fn lorem() {
}

impl Lorem {
}
```

----------------------------------------

TITLE: Correct Pattern Matching Using Tuple Syntax
DESCRIPTION: Shows the correct way to pattern match a tuple variant using tuple pattern syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0769.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# enum E {
#     A(i32),
# }
# let e = E::A(42);
match e {
    E::A(number) => { // ok!
        println!("{}", number);
    }
}
```

----------------------------------------

TITLE: Correct Combined Self and Member Import in Rust
DESCRIPTION: Demonstrates proper usage of 'self' keyword within a brace-enclosed list to import both namespace and specific members.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0429.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use std::fmt::{self, Debug};
```

----------------------------------------

TITLE: Fixing E0621: Matching Lifetimes in Function Signature
DESCRIPTION: This code snippet demonstrates one way to resolve the E0621 error by modifying the function signature to correctly reflect the lifetime of borrowed data being returned. Here, the lifetime of `y` is changed to `'a`, indicating that the function might return data borrowed from either `x` or `y` with the same lifetime.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0621.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {
    if x > y { x } else { y }
}
```
```

----------------------------------------

TITLE: Implementing Opaque Type with Concrete Type in Rust
DESCRIPTION: This example shows how to implement an opaque type `Foo` with a concrete type `Struct`. It defines the `Struct`, implements the `Bar` trait for it, and creates a function `foo()` that returns the opaque type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/opaque-types-type-alias-impl-trait.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Struct;
impl Bar for Struct { /* stuff */ }
fn foo() -> Foo {
    Struct
}
```

----------------------------------------

TITLE: Demonstrating Parameter Mismatch in Rust Trait Implementations (E0053)
DESCRIPTION: This example demonstrates two common errors in trait implementation: using incorrect parameter types and differing mutability of self references. The code fails to compile with error E0053 because trait method parameters must exactly match between trait definition and implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0053.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo(x: u16);
    fn bar(&self);
}

struct Bar;

impl Foo for Bar {
    // error, expected u16, found i16
    fn foo(x: i16) { }

    // error, types differ in mutability
    fn bar(&mut self) { }
}
```

----------------------------------------

TITLE: Allowing and Denying Clippy Lints in Code
DESCRIPTION: This snippet provides examples of how to use attributes in Rust code to control Clippy lints. It includes options for allowing, warning, or denying lints at different scopes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/configuration.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![allow(clippy::all)]
```

LANGUAGE: rust
CODE:
```
#![warn(clippy::all, clippy::pedantic)]
```

LANGUAGE: rust
CODE:
```
#![deny(clippy::single_match, clippy::box_vec)]
```

LANGUAGE: rust
CODE:
```
#[allow(...)]
```

----------------------------------------

TITLE: Correct Placement of Doc Comments in Rust Trait Definition
DESCRIPTION: This code example demonstrates the proper way to place doc comments in Rust, showing comments properly attached to both a trait definition and a method declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0584.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
/// I'm THE island!
trait Island {
    /// I'm lost!
    fn lost();
}
```

----------------------------------------

TITLE: Unnecessary Let Binding in Rust
DESCRIPTION: This snippet demonstrates an unnecessary let binding in Rust code. Clippy suggests returning the expression directly instead of binding it to a variable and then returning the variable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/rust-analyzer/src/diagnostics/test_data/snap_multi_line_fix.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
let x = (0..10).collect();
x
```

----------------------------------------

TITLE: Using Early Returns in Rust Functions
DESCRIPTION: Illustrates the recommended use of early returns in Rust functions to reduce cognitive stack usage and improve readability.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_24

LANGUAGE: rust
CODE:
```
// GOOD
fn foo() -> Option<Bar> {
    if !condition() {
        return None;
    }

    Some(...)
}

// BAD
fn foo() -> Option<Bar> {
    if condition() {
        Some(...)
    } else {
        None
    }
}
```

----------------------------------------

TITLE: Impl Definition Formatting in Rust
DESCRIPTION: Shows the formatting for Rust impl definitions, including the use of block-indent for impl items and single-line formatting for impls without items.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_13

LANGUAGE: rust
CODE:
```
impl Foo {}

impl Bar for Foo {
    ...
}
```

----------------------------------------

TITLE: Suggesting Variable Name Change in Rust
DESCRIPTION: This snippet shows a compiler hint suggesting to change the unused variable 'foo' to '_foo'. It includes a code action to automatically make this change.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable.txt#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
_foo
```

----------------------------------------

TITLE: Configuring Travis CI with Clippy for Rust
DESCRIPTION: Example Travis CI configuration that sets up Clippy linting for Rust projects. Shows how to install Clippy component and run different linting commands, including options for treating warnings as errors and checking all targets and features.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/continuous_integration/travis.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
language: rust
rust:
  - stable
  - beta
before_script:
  - rustup component add clippy
script:
  - cargo clippy
  # if you want the build job to fail when encountering warnings, use
  - cargo clippy -- -D warnings
  # in order to also check tests and non-default crate features, use
  - cargo clippy --all-targets --all-features -- -D warnings
  - cargo test
  # etc.
```

----------------------------------------

TITLE: Using Type Placeholders with Generic Functions in Rust
DESCRIPTION: This snippet demonstrates how to use type placeholders (the _ symbol) to allow the compiler to infer some type arguments while explicitly specifying others. Without placeholders, providing too few type arguments results in an E0107 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0089.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<T, U>(x: T) {}

fn main() {
    let x: bool = true;
    foo::<f64>(x);    // error: wrong number of type arguments:
                      //        expected 2, found 1
    foo::<_, f64>(x); // same as `foo::<bool, f64>(x)`
}
```

----------------------------------------

TITLE: Passing Variable to Closure Parameter - Rust
DESCRIPTION: This snippet addresses the mutable borrowing issue by passing the mutable variable as a parameter to the closure. This demonstrates an effective approach to avoid borrowing conflicts while maintaining mutable access.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0501.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
```
fn inside_closure(x: &mut i32) {}
fn outside_closure(x: &mut i32) {}

fn foo(a: &mut i32) {
    let mut bar = |s: &mut i32| {
        inside_closure(s)
    };
    outside_closure(a);
    bar(a);
}
```
```

----------------------------------------

TITLE: Correct Constant Initialization in Rust
DESCRIPTION: These code snippets show the correct way to initialize constants in Rust. The first example uses a nested constant declaration, while the second example demonstrates a simpler, direct initialization.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0014.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
const FOO: i32 = { const X : i32 = 0; X };
// or even:
const FOO2: i32 = { 0 }; // but brackets are useless here
```

----------------------------------------

TITLE: Correct Where Clause Usage with Generic Type in Rust
DESCRIPTION: This example shows the correct way to use where clauses with generic type parameters. The implementation of Foo for Wrapper<T> is conditional on T implementing Clone, which is a valid use case for where clauses.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0193.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {
    fn bar(&self);
}

#[derive(Copy,Clone)]
struct Wrapper<T> {
    Wrapped: T
}
impl <T> Foo for Wrapper<T> where Wrapper<T>: Clone {
    fn bar(&self) { }
}
```

----------------------------------------

TITLE: Solution 2: Unifying Lifetimes in Rust
DESCRIPTION: This snippet shows an alternative solution by removing the separate lifetime 'b and using a single lifetime 'a for both input and output values. It simplifies the function signature, ensuring the values have a consistent lifetime, thus preventing the previous mismatches.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0495.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
fn transmute_lifetime<'a, T>(t: &'a (T,)) -> &'a T {
    match (&t,) { // ok!
        ((u,),) => u,
    }
}
```

----------------------------------------

TITLE: Defining Byte Literals in Rust
DESCRIPTION: This snippet shows how to define byte literals in Rust using the `b''` syntax. It includes examples with empty byte literals, byte literals with a character, and byte literals with escape sequences.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/byte_strings.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"BYTE \"b''\""

```

LANGUAGE: Rust
CODE:
```
"BYTE \"b'x'\""

```

LANGUAGE: Rust
CODE:
```
"BYTE \"b'\\n'\""

```

LANGUAGE: Rust
CODE:
```
"BYTE \"b'\\\\'\""

```

LANGUAGE: Rust
CODE:
```
"BYTE \"b'\\'\''\""

```

----------------------------------------

TITLE: Deriving Copy on a struct with mutable reference
DESCRIPTION: An example showing an E0204 error when trying to derive the Copy trait on a struct that contains a mutable reference field, as mutable references don't implement Copy.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0204.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[derive(Copy)] // error!
struct Foo<'a> {
    ty: &'a mut bool,
}
```

----------------------------------------

TITLE: Multi-Line Where Clause Formatting in Rust
DESCRIPTION: Demonstrates how to format multi-line `where` clauses in Rust, including breaking before each `+` sign and block-indenting the continuation lines.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_22

LANGUAGE: rust
CODE:
```
impl<T: ?Sized, Idx> IndexRanges<Idx> for T
where
    T: Index<Range<Idx>, Output = Self::Output>
        + Index<RangeTo<Idx>, Output = Self::Output>
        + Index<RangeFrom<Idx>, Output = Self::Output>
        + Index<RangeInclusive<Idx>, Output = Self::Output>
        + Index<RangeToInclusive<Idx>, Output = Self::Output>
        + Index<RangeFull>,
```

----------------------------------------

TITLE: Demonstrating Enhanced Reference Pattern Matching in Rust Edition 2024
DESCRIPTION: Example showing new pattern matching capabilities with the ref_pat_eat_one_layer_2024 feature. Demonstrates matching & patterns against ref binding modes and &mut references with type checking.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/ref-pat-eat-one-layer-2024.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(ref_pat_eat_one_layer_2024)]
#![allow(incomplete_features)]
#
# // Tests type equality in a way that avoids coercing `&&T` or `&mut T` to `&T`.
# trait Eq<T> {}
# impl<T> Eq<T> for T {}
# fn has_type<T>(_: impl Eq<T>) {}

// `&` can match against a `ref` binding mode instead of a reference type:
let (x, &y) = &(0, 1);
has_type::<&u8>(x);
has_type::<u8>(y);

// `&` can match against `&mut` references:
let &z = &mut 2;
has_type::<u8>(z);
```

----------------------------------------

TITLE: Solution 1: Consistent Pattern Binding in Rust
DESCRIPTION: Demonstrates the preferred solution of binding all pattern values consistently, either all by-ref or all by-move.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0009.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct X { x: (), }

let x = Some((X { x: () }, X { x: () }));
match x {
    Some((ref y, ref z)) => {},
    // or Some((y, z)) => {}
    None => panic!()
}
```

----------------------------------------

TITLE: Failing Example: Re-exporting Private Module in Rust
DESCRIPTION: This example demonstrates the incorrect attempt to publicly re-export a private module, which results in error E0365.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0365.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
mod foo {
    pub const X: u32 = 1;
}

pub use foo as foo2;

fn main() {}
```

----------------------------------------

TITLE: Binary Operation Formatting in Rust
DESCRIPTION: Styling rules for binary operations, including spacing, line-breaking, and precedence handling
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
foo_bar
    + bar
    + baz
    + qux
    + whatever
```

----------------------------------------

TITLE: Rust Pattern Matching Fix - Consistent Reference Binding
DESCRIPTION: Solution showing how to fix the binding inconsistency by using 'ref' consistently across all patterns where the variable appears.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0409.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let x = (0, 2);
match x {
    (0, ref y) | (ref y, 0) => { /* use y */}
    _ => ()
}
```

----------------------------------------

TITLE: Configuring rust-analyzer CodeLens Features in JSON
DESCRIPTION: Controls the display and types of CodeLens in Rust files managed by rust-analyzer. Includes toggling CodeLens globally, enabling debug lenses, implementation lenses, run lenses, update test lenses, and references lenses for different Rust constructs like ADT, enum variants, methods, and traits. These lenses provide inline actionable annotations in supported editors, improving code navigation and usability. Dependencies include an editor with CodeLens support and rust-analyzer enabled. Inputs are boolean values controlling lens visibility, outputs affect in-editor code annotations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_4

LANGUAGE: json
CODE:
```
{
  "rust-analyzer.lens.enable": true,
  "rust-analyzer.lens.debug.enable": true,
  "rust-analyzer.lens.implementations.enable": true,
  "rust-analyzer.lens.location": "above_name",
  "rust-analyzer.lens.references.adt.enable": false,
  "rust-analyzer.lens.references.enumVariant.enable": false,
  "rust-analyzer.lens.references.method.enable": false,
  "rust-analyzer.lens.references.trait.enable": false,
  "rust-analyzer.lens.run.enable": true,
  "rust-analyzer.lens.updateTest.enable": true
}
```

----------------------------------------

TITLE: Correct Usage of impl Trait as Function Return Type in Rust
DESCRIPTION: This example shows the proper use of `impl Trait` syntax as a function return type. The function `count_to_n` returns an iterator over a range from 0 to n, and the main function consumes this iterator in a for loop.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0562.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn count_to_n(n: usize) -> impl Iterator<Item=usize> {
    0..n
}

fn main() {
    for i in count_to_n(10) {  // ok!
        println!("{}", i);
    }
}
```

----------------------------------------

TITLE: Making a Struct Field Public in Rust
DESCRIPTION: This code snippet illustrates how to access a struct's field by setting it public in Rust. By declaring 'x' as 'pub', it allows access from outside the module, resolving the previous access error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0616.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
mod some_module {
    pub struct Foo {
        pub x: u32, // `x` is now public.
    }

    impl Foo {
        pub fn new() -> Foo { Foo { x: 0 } }
    }
}

let f = some_module::Foo::new();
println!("{}", f.x); // ok!
```

----------------------------------------

TITLE: Valid Visibility Scope using Modules in Rust
DESCRIPTION: This code snippet demonstrates the correct way to define a visibility scope using a module in Rust. The struct `Shark` is declared within the module `sea`, and its visibility is restricted to the path `crate::sea`. This is valid because `sea` is a module.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0577.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```edition2018
pub mod sea {
    pub (in crate::sea) struct Shark; // ok!
}

fn main() {}
```
```

----------------------------------------

TITLE: Scoping Solution for Rust Private Item Use
DESCRIPTION: This snippet provides a solution by limiting the scope of a private method to its module and creating a public function to call the method. This method ensures that private methods are called only within their defined scope, leveraging a public function as an intermediary.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0624.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
mod inner {
    pub struct Foo;

    impl Foo {
        fn method(&self) {}
    }

    pub fn call_method(foo: &Foo) { // We create a public function.
        foo.method(); // Which calls the item.
    }
}

let foo = inner::Foo;
inner::call_method(&foo); // And since the function is public, we can call the
                          // method through it.
```

----------------------------------------

TITLE: Fixed Implementation with Generic Lifetime in Rust
DESCRIPTION: Shows the correct way to implement the trait object with a generic lifetime parameter instead of static lifetime.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0772.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
impl<'d> dyn Person + 'd {/* ... */}

// This works too, and is more elegant:
//impl dyn Person + '_ {/* ... */}
```

----------------------------------------

TITLE: Correct Implementation of Associated Type Constraint in Rust
DESCRIPTION: This code snippet shows the correct way to encode the constraint on the associated type Color using a where clause and new type parameters. It introduces a CAR type parameter and uses trait bounds to restrict the associated types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0222.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub trait Vehicle {
    type Color;
}

pub trait Box {
    type Color;
}

pub trait BoxCar : Box + Vehicle {}

// Introduce a new `CAR` type parameter
fn foo<CAR, COLOR>(
    c: CAR,
) where
    // Bind the type parameter `CAR` to the trait `BoxCar`
    CAR: BoxCar,
    // Further restrict `<BoxCar as Vehicle>::Color` to be the same as the
    // type parameter `COLOR`
    CAR: Vehicle<Color = COLOR>,
    // We can also simultaneously restrict the other trait's associated type
    CAR: Box<Color = COLOR>
{}
```

----------------------------------------

TITLE: Correct Generic Arguments Usage in Rust
DESCRIPTION: Examples of correct generic argument usage in Rust. Shows proper implementation with the exact number of required type arguments for structs and functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0107.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo<T> { x: T }

struct Bar<T> { x: Foo<T> }               // ok!
struct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!

fn foo<T, U>(x: T, y: U) {}
fn f() {}

fn main() {
    let x: bool = true;
    foo::<bool, u32>(x, 12);              // ok!
    f();                                  // ok!
}
```

----------------------------------------

TITLE: Using References in Rust Closures
DESCRIPTION: This snippet shows how to use a reference in a closure instead of moving a borrowed variable. This approach avoids conflicts with Rust's borrow rules, allowing the closure to execute without moving the variable.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0504.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
struct FancyNum {
    num: u8,
}

fn main() {
    let fancy_num = FancyNum { num: 5 };
    let fancy_ref = &fancy_num;

    let x = move || {
        // fancy_ref is usable here because it doesn't move `fancy_num`
        println!("child function: {}", fancy_ref.num);
    };

    x();

    println!("main function: {}", fancy_num.num);
}
```

----------------------------------------

TITLE: Returning Iterator with Lifetime Annotations in Rust
DESCRIPTION: This code snippet demonstrates the incorrect usage of lifetimes in a function that returns an iterator. The type implementing the Iterator passed to the function lives only as long as the provided lifetime, which may not be sufficient. The solution shows how to explicitly annotate the lifetime of the returned iterator to avoid errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0482.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
```compile_fail,E0700
fn prefix<'a>(
    words: impl Iterator<Item = &'a str>
) -> impl Iterator<Item = String> { // error!
    words.map(|v| format!("foo-{}", v))
}
```
```

LANGUAGE: Rust
CODE:
```
```
fn prefix<'a>(
    words: impl Iterator<Item = &'a str> + 'a
) -> impl Iterator<Item = String> + 'a { // ok!
    words.map(|v| format!("foo-{}", v))
}
```
```

----------------------------------------

TITLE: C Library Example for FFI
DESCRIPTION: This C code snippet defines a function `do_twice` that takes a function pointer and an integer as input. It then calls the provided function twice with the given integer argument and returns the sum of the results. This serves as an example for the FFI (Foreign Function Interface) in the following Rust code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_14

LANGUAGE: C
CODE:
```
int
do_twice(int (*fn)(int), int arg)
{
    return fn(arg) + fn(arg);
}
```

----------------------------------------

TITLE: Correct Trait Implementation with Associated Type Override
DESCRIPTION: Example showing the correct way to implement a trait where both the associated type is overridden and the default method is reimplemented.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0399.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(associated_type_defaults)]

pub trait Foo {
    type Assoc = u8;
    fn bar(&self) {}
}

impl Foo for i32 {
    type Assoc = i32;
    fn bar(&self) {} // ok!
}
```

----------------------------------------

TITLE: Working Example: Re-exporting Public Module in Rust
DESCRIPTION: This example shows the correct way to re-export a module by making it public with the pub keyword.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0365.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub mod foo {
    pub const X: u32 = 1;
}

pub use foo as foo2;

fn main() {}
```

----------------------------------------

TITLE: Error Example for Feature Attributes in Rust Nightly
DESCRIPTION: Demonstrates an erroneous use of feature attributes in Rust that is only allowed on the nightly release channel. The example shows how an attempt to use a feature in a stable channel results in a compile-time error, emphasizing the need for a nightly compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0554.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel"
```

----------------------------------------

TITLE: Missing Else Block Error Example in Rust
DESCRIPTION: Example of incorrect Rust code that triggers the E0317 error by omitting an else block in an if expression where a value is expected.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0317.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let x = 5;
let a = if x == 5 {
    1
};
```

----------------------------------------

TITLE: Split Match Arms Solution - Rust
DESCRIPTION: This example shows the correct approach by splitting the patterns into separate match arms. Each arm handles its case independently, avoiding inconsistent variable binding issues.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0408.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let x = Some(1);
match x {
    Some(y) => { /* use y */ }
    None => { /* ... */ }
}
```

----------------------------------------

TITLE: Correct Usage with Regular let Binding in Rust
DESCRIPTION: This example shows the correct approach to handling irrefutable patterns in Rust. Since the pattern will always match, a regular `let` binding is used instead of an `if let` statement.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0162.md#_snippet_1

LANGUAGE: rust
CODE:
```
struct Irrefutable(i32);
let irr = Irrefutable(0);

let Irrefutable(x) = irr;
println!("{}", x);
```

----------------------------------------

TITLE: Demonstrating Correct Trait Implementation in Rust
DESCRIPTION: This code snippet shows the correct way to implement the trait method. The implementation matches the trait's method signature by including the `&self` parameter, resolving the compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0186.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo(&self);
}

struct Bar;

impl Foo for Bar {
    fn foo(&self) {} // ok!
}
```

----------------------------------------

TITLE: Multi-file Rust Program - Main Module
DESCRIPTION: Example of a Rust program's main file that imports and uses a module from another file
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/what-is-rustc.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
mod foo;

fn main() {
    foo::hello();
}
```

----------------------------------------

TITLE: Qualifying Unresolved Paths in Rust
DESCRIPTION: Adds appropriate namespace qualifiers to unresolved identifiers, helping to resolve name resolution errors. This refactoring can automatically import types from standard libraries or other available modules when they're referenced without their full path.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_95

LANGUAGE: rust
CODE:
```
fn main() {
    let map = HashMap::new();
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let map = std::collections::HashMap::new();
}
```

----------------------------------------

TITLE: Using a Newtype Wrapper in Rust
DESCRIPTION: This code demonstrates another way to resolve the E0118 error by wrapping the generic type `T` in a newtype struct `TypeWrapper`. This allows defining an inherent implementation for the `TypeWrapper` struct, which is a valid nominal type. The `get_state` function is then defined for the `TypeWrapper` struct.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0118.md#_snippet_2

LANGUAGE: rust
CODE:
```
struct TypeWrapper<T>(T);

impl<T> TypeWrapper<T> {
    fn get_state(&self) -> String {
        "Fascinating!".to_owned()
    }
}
```

----------------------------------------

TITLE: Setting Minimum Supported Rust Version
DESCRIPTION: This snippet demonstrates how to specify the minimum supported Rust version (MSRV) for a project in the Clippy configuration file and as an attribute in the code. It explains how to omit the patch version.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/configuration.md#2025-04-21_snippet_3

LANGUAGE: toml
CODE:
```
msrv = "1.30.0"
```

----------------------------------------

TITLE: Creating a New Rust Project
DESCRIPTION: This shell snippet illustrates creating a new Rust project called 'hello_fuchsia' using cargo, the Rust package manager. It initializes a new directory with Cargo.toml and a basic src/main.rs file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
cargo new hello_fuchsia
cd hello_fuchsia
```

----------------------------------------

TITLE: Avoiding Unnecessary Allocations
DESCRIPTION: This code provides examples of how to avoid unnecessary allocations by using iterators instead of vectors, leading to more efficient resource management.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_13

LANGUAGE: rust
CODE:
```
// GOOD
use itertools::Itertools;

let (first_word, second_word) = match text.split_ascii_whitespace().collect_tuple() {
    Some(it) => it,
    None => return,
}

// BAD
let words = text.split_ascii_whitespace().collect::<Vec<_>>();
if words.len() != 2 {
    return
}
```

----------------------------------------

TITLE: Error Example: Using Undeclared HashMap Type
DESCRIPTION: Demonstrates the error that occurs when trying to use HashMap without importing it from the standard library.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0433.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let map = HashMap::new();
// error: failed to resolve: use of undeclared type `HashMap`
```

----------------------------------------

TITLE: Defining a Public Function in Rust
DESCRIPTION: Example showing how to define a simple public function in a Rust library file. This function serves as a documented item that Rustdoc will look for usage examples of in other source files.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/librustdoc/html/static/scrape-examples-help.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// src/lib.rs
pub fn a_func() {}
```

----------------------------------------

TITLE: Fixing Mutability Error by Making Container Mutable in Rust
DESCRIPTION: This snippet demonstrates how to fix the mutability error by making the Box container mutable, allowing mutation of the contained data.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0386.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let mut x: i64 = 1;
let mut y: Box<_> = Box::new(&mut x);
**y = 2;
```

----------------------------------------

TITLE: Fixing Unterminated Double Quote String in Rust
DESCRIPTION: This code snippet demonstrates the correct way to terminate a double quote string in Rust. By adding the missing closing double quote, the code compiles successfully.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0765.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
let s = ""; // ok!
```

----------------------------------------

TITLE: Clippy Configuration File
DESCRIPTION: Example TOML configuration file for customizing Clippy behavior
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/README.md#2025-04-21_snippet_7

LANGUAGE: toml
CODE:
```
avoid-breaking-exported-api = false
disallowed-names = ["toto", "tata", "titi"]
```

----------------------------------------

TITLE: Configuring Clippy Lint Levels via Command Line
DESCRIPTION: Example of configuring different lint levels using command line flags. Shows how to allow style lints, warn on box_default, and deny performance lints.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/usage.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cargo clippy -- -Aclippy::style -Wclippy::box_default -Dclippy::perf
```

----------------------------------------

TITLE: Specifying Output Directory with rustdoc (Bash)
DESCRIPTION: Explains how to use the `-o` or `--out-dir` flag to direct rustdoc to place the generated documentation files into a specific directory instead of the default `doc` folder.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_3

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs -o target/doc
```

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --out-dir target/doc
```

----------------------------------------

TITLE: Ordering Items in Rust Modules
DESCRIPTION: Illustrates the recommended order of items in a Rust module, placing public items first and organizing structs, enums, functions, and impls in a logical manner.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_21

LANGUAGE: rust
CODE:
```
// GOOD
pub(crate) fn frobnicate() {
    Helper::act()
}

#[derive(Default)]
struct Helper { stuff: i32 }

impl Helper {
    fn act(&self) {

    }
}

// BAD
#[derive(Default)]
struct Helper { stuff: i32 }

pub(crate) fn frobnicate() {
    Helper::act()
}

impl Helper {
    fn act(&self) {

    }
}
```

----------------------------------------

TITLE: Demonstrating Valid and Invalid Range Patterns in Rust
DESCRIPTION: Example of valid and invalid range patterns in Rust match expressions. The first range (1 ..= 1) is valid but pointless as it only matches a single value. The second range (1000 ..= 5) is invalid because it's empty (start > end), which will cause the compiler to throw error E0030.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0030.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
match 5u32 {
    // This range is ok, albeit pointless.
    1 ..= 1 => {},
    // This range is empty, and the compiler can tell.
    1000 ..= 5 => {}
}
```

----------------------------------------

TITLE: Compiling Multi-file Rust Program
DESCRIPTION: Command showing how to compile a multi-file Rust program by only specifying the crate root
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/what-is-rustc.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
$ rustc main.rs
```

----------------------------------------

TITLE: Using impl Trait as a Solution for Single Type Returns
DESCRIPTION: This snippet demonstrates how to use `impl Trait` as a return type when there's a single concrete type involved. This allows the function to return a type that implements the trait without boxing.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0746.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo() -> impl T { // ok!
    S(42)
}
```

----------------------------------------

TITLE: Error Handling in Rust Functions
DESCRIPTION: Shows the preferred way of handling errors in Rust functions, using 'return Err(err)' for early returns to allow the compiler to flag dead code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_25

LANGUAGE: rust
CODE:
```
// GOOD
fn f() -> Result<(), ()> {
    if condition {
        return Err(());
    }
    Ok(())
}

// BAD
fn f() -> Result<(), ()> {
    if condition {
        Err(())?;
    }
    Ok(())
}
```

----------------------------------------

TITLE: Initializing Vector with Type Inference in Rust
DESCRIPTION: Demonstrates automatic type inference for a vector where the type is inferred based on the first pushed element
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/type-inference.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let mut things = vec![];
    things.push("thing");
}
```

----------------------------------------

TITLE: Matching a Non-Exhaustive Enum Non-Exhaustively in Rust
DESCRIPTION: This snippet provides an example of matching a non-exhaustive enum with a wildcard pattern `_`.  It simulates how downstream crates must handle the `Error` enum defined above to avoid errors. This pattern ensures that any new variants added in the future do not break existing code in downstream crates. Requires a dependency on the crate where the enum is defined (`mycrate`).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0638.md#_snippet_1

LANGUAGE: Rust
CODE:
```
```rust,ignore (pseudo-Rust)
use mycrate::Error;

// This will not error as the non_exhaustive Error enum has been matched with a
// wildcard.
match error {
    Message(s) => ...,
    Other => ...,
    _ => ...,
}
```
```

----------------------------------------

TITLE: Handling Non-exhaustive Structs in Rust
DESCRIPTION: This snippet shows an example of a non-exhaustive struct in Rust, meaning it cannot be instantiated outside its defining crate. The struct and its fields are public, but it is meant to be extended in the future, potentially introducing changes that could break existing code. As a workaround, developers should search for a constructor function, often named 'new', within the crate's documentation. This pattern enforces encapsulation and allows for safe evolution of the struct's structure.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0639.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#[non_exhaustive]
pub struct NormalStruct {
    pub first_field: u16,
    pub second_field: u16,
}

let ns = NormalStruct { first_field: 640, second_field: 480 }; // error!
```

----------------------------------------

TITLE: Rust Lifetime Resolution with Subtyping
DESCRIPTION: Resolves the lifetime mismatch by ensuring the input lifetime ('in_) is at least as long as the output lifetime ('out). This approach allows the function to compile by establishing a lifetime relationship.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0623.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo<'a, 'b, T>(std::marker::PhantomData<(&'a (), &'b (), T)>)
where
    T: Convert<'a, 'b>;

trait Convert<'a, 'b>: Sized {
    fn cast(&'a self) -> &'b Self;
}
impl<'long: 'short, 'short, T> Convert<'long, 'short> for T {
    fn cast(&'long self) -> &'short T {
        self
    }
}
fn badboi<'in_: 'out, 'out, T>(
    x: Foo<'in_, 'out, T>,
    sadness: &'in_ T
) -> &'out T {
    sadness.cast()
}
```

----------------------------------------

TITLE: Installing Clippy Component
DESCRIPTION: Terminal command to add Clippy as a rustup component
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
rustup component add clippy
```

----------------------------------------

TITLE: Correct Main Function Signature in Rust
DESCRIPTION: The proper signature for the main function in Rust, which takes no parameters and returns nothing.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0211.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn main();
```

----------------------------------------

TITLE: Example of Unresolved Intra-Doc Link in Rust
DESCRIPTION: The function `foo` in this snippet contains a documentation comment attempting to link to a non-existent item `Nonexistent`. It demonstrates how the `broken_intra_doc_links` lint identifies unresolved links, emitting a warning message pointing to the exact location of the unresolved reference. This snippet is intended to illustrate the necessity of correcting broken links in documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/lints.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
/// I want to link to [`Nonexistent`] but it doesn't exist!
pub fn foo() {}

```

----------------------------------------

TITLE: Invalid Trait Implementation with Extra Associated Constant (E0438)
DESCRIPTION: Demonstrates incorrect implementation of a trait by adding an associated constant 'BAR' that is not defined in the trait 'Foo'. This code will fail to compile with error E0438.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0438.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {}

impl Foo for i32 {
    const BAR: bool = true;
}
```

----------------------------------------

TITLE: Combinable Expressions - Rust
DESCRIPTION: Shows formatting rules for combinable expressions including function calls with multi-line arguments and closures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_27

LANGUAGE: rust
CODE:
```
foo(bar(
    an_expr,
    another_expr,
))

let x = foo(Bar {
    field: whatever,
});

foo(|param| {
    action();
    foo(param)
})

let x = combinable([
    an_expr,
    another_expr,
]);

let arr = [combinable(
    an_expr,
    another_expr,
)];
```

----------------------------------------

TITLE: Exported Function in Rust Module
DESCRIPTION: Defines an exported function in Rust, indicating it is publicly accessible outside the module or crate. This function likely performs a specific operation, though the implementation details are not provided here.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-link-ordinal/output.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
exported_function
```

----------------------------------------

TITLE: Erroneous Rust Lifetime Handling
DESCRIPTION: Demonstrates a Rust code example with an incompatible lifetime constraint that fails compilation. The code shows a struct and trait with multiple lifetime parameters that cannot be directly used.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0623.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo<'a, 'b, T>(std::marker::PhantomData<(&'a (), &'b (), T)>)
where
    T: Convert<'a, 'b>;

trait Convert<'a, 'b>: Sized {
    fn cast(&'a self) -> &'b Self;
}
impl<'long: 'short, 'short, T> Convert<'long, 'short> for T {
    fn cast(&'long self) -> &'short T {
        self
    }
}
// error
fn badboi<'in_, 'out, T>(
    x: Foo<'in_, 'out, T>,
    sadness: &'in_ T
) -> &'out T {
    sadness.cast()
}
```

----------------------------------------

TITLE: Block Expression Formatting in Rust
DESCRIPTION: Guidelines for formatting block expressions, including rules for statement and expression positions, keywords, and single-line vs multi-line blocks
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn block_as_stmt() {
    a_call();

    {
        a_call_inside_a_block();

        // a comment in a block
        the_value
    }
}
```

LANGUAGE: rust
CODE:
```
fn block_as_expr() {
    let foo = {
        a_call_inside_a_block();

        // a comment in a block
        the_value
    };
}
```

----------------------------------------

TITLE: Using std::env::args() Function in Rust
DESCRIPTION: This snippet illustrates the use of the std::env::args() function to retrieve command-line arguments in Rust. It explains the purpose of the function and provides an example of iterating over the arguments. It highlights that the first element, typically the executable path, may vary, and potential panics are noted if arguments are not valid Unicode. Recommended to use args_os() if Unicode issues are a concern.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/how-to-write-documentation.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use std::env;

// Prints each argument on a separate line
for argument in env::args() {
    println!("{argument}");
}
```

----------------------------------------

TITLE: Correct Usage of Derive Attribute on Struct in Rust
DESCRIPTION: This code snippet shows the correct application of the `derive` attribute on a struct in Rust. The `Clone` trait is derived for the `Bar` struct, which is a valid use of the `derive` attribute.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0774.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[derive(Clone)] // ok!
struct Bar {
    field: u32,
}
```

----------------------------------------

TITLE: Stashing Local Git Changes (Console)
DESCRIPTION: Saves your current working directory and staging area state temporarily, without committing. This is useful when you need to quickly switch branches or perform an operation like rebase but have uncommitted work.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_5

LANGUAGE: console
CODE:
```
git stash
```

----------------------------------------

TITLE: Defining Traits Foo and Bar with Impl in Rust
DESCRIPTION: This snippet defines two traits, `Foo` and `Bar`, and provides a blanket implementation of `Foo` for any type `F` that implements `Bar`. This demonstrates how trait bounds can be used in generic implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/hrtb.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
trait Foo<X> {
    fn foo(&self, x: X) { }
}

trait Bar<X> {
    fn bar(&self, x: X) { }
}

impl<X,F> Foo<X> for F
    where F : Bar<X>
{
}
```

----------------------------------------

TITLE: Demonstrating E0384 Error in Rust
DESCRIPTION: This code snippet shows an erroneous attempt to reassign a value to an immutable variable, resulting in a compilation error (E0384).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0384.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let x = 3;
    x = 5; // error, reassignment of immutable variable
}
```

----------------------------------------

TITLE: Demonstrating Ownership Error with Non-Copy Type in Rust
DESCRIPTION: This snippet illustrates the error encountered when attempting to move a value from a non-copy fixed-size array. The type `NonCopy` does not implement the `Copy` trait, resulting in a compilation error when trying to move the element out of the array. It is important for developers to understand this limitation to avoid ownership issues.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0508.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
struct NonCopy;

fn main() {
    let array = [NonCopy; 1];
    let _value = array[0]; // error: cannot move out of type `[NonCopy; 1]`,
                           //        a non-copy fixed-size array
}
```

----------------------------------------

TITLE: Defining a Private Constant in Rust
DESCRIPTION: This snippet demonstrates defining a private constant within a Rust module. The constant cannot be accessed outside of its module scope, showcasing the concept of visibility in Rust modules.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0603.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
mod foo {
    const PRIVATE: u32 = 0x_a_bad_1dea_u32; // This const is private, so we
                                            // can't use it outside of the
                                            // `foo` module.
}

println!("const value: {}", foo::PRIVATE); // error: constant `PRIVATE`
                                                  //        is private
```

----------------------------------------

TITLE: Correct Usage of not Predicate in cfg Attribute
DESCRIPTION: This code snippet shows a valid usage of the cfg attribute with the not predicate, allowing conditional function definition based on the target operating system in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0537.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
#[cfg(not(target_os = "linux"))] // ok!
pub fn something() {}

pub fn main() {}
```

----------------------------------------

TITLE: Resolving Trait Scope Error in Rust
DESCRIPTION: This code snippet demonstrates two solutions to resolve the trait scope error: importing the trait or defining it in the current scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0405.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# #[cfg(for_demonstration_only)]
// solution 1:
use some_file::SomeTrait;

// solution 2:
trait SomeTrait {
    // some functions
}

struct Foo;

impl SomeTrait for Foo { // ok!
    // implements functions
}
```

----------------------------------------

TITLE: Command Line Flags for Clippy
DESCRIPTION: This snippet shows how to enable or disable Clippy lints through command line flags when running Clippy. It provides commands for allowing and warning on specific lints.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/configuration.md#2025-04-21_snippet_2

LANGUAGE: terminal
CODE:
```
cargo clippy -- -A clippy::lint_name
```

LANGUAGE: terminal
CODE:
```
cargo clippy -- -W clippy::lint_name
```

LANGUAGE: terminal
CODE:
```
cargo clippy -- -W clippy::pedantic
```

LANGUAGE: terminal
CODE:
```
cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...
```

----------------------------------------

TITLE: Import Layout and Indentation Configurations
DESCRIPTION: Demonstrates different import layout and indentation strategies in Rust
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_25

LANGUAGE: rust
CODE:
```
use foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};
```

----------------------------------------

TITLE: Valid Type Placeholder Usage in Rust Expressions
DESCRIPTION: Example demonstrating valid usage of type placeholder (_) in method chaining and type inference contexts, specifically with Vec collection.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0121.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
let x = "a4a".split('4')
    .collect::<Vec<_>>(); // No need to precise the Vec's generic type.
```

----------------------------------------

TITLE: Generating Project Documentation with Cargo
DESCRIPTION: This snippet shows how to use Cargo to generate documentation for the entire project, which internally calls rustdoc.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
$ cargo doc
```

----------------------------------------

TITLE: Defining Trait Methods Without Patterns in Rust
DESCRIPTION: This snippet shows the correct way to define a trait method in Rust by using a single name for parameters instead of patterns. By naming the argument with a single identifier, the method adheres to Rust's trait syntax requirements, preventing compile errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0642.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
trait Foo {
    fn foo(x_and_y: (i32, i32)); // ok!
}
```

----------------------------------------

TITLE: Rustfmt Ignore Configuration
DESCRIPTION: Shows how to configure file and directory ignore patterns in rustfmt.toml
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_24

LANGUAGE: toml
CODE:
```
ignore = [
    "src/types.rs",
    "src/foo/bar.rs",
]
```

----------------------------------------

TITLE: Demonstrating Import Naming Conflict Error in Rust
DESCRIPTION: Shows an erroneous code example where two items with the same name 'baz' are imported, resulting in a compilation error E0252.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0252.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use foo::baz;
use bar::baz; // error, do `use bar::baz as quux` instead

fn main() {}

mod foo {
    pub struct baz;
}

mod bar {
    pub mod baz {}
}
```

----------------------------------------

TITLE: Implementing a Trait on a Generic Type in Rust
DESCRIPTION: This code demonstrates one way to resolve the E0118 error by implementing a trait for the generic type `T`.  This allows defining methods for `T` without requiring it to be a struct, enum, or union. The `LiveLongAndProsper` trait is defined and then implemented for the generic type `T`.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0118.md#_snippet_1

LANGUAGE: rust
CODE:
```
// we create a trait here
trait LiveLongAndProsper {
    fn get_state(&self) -> String;
}

// and now you can implement it on T
impl<T> LiveLongAndProsper for T {
    fn get_state(&self) -> String {
        "He's dead, Jim!".to_owned()
    }
}
```

----------------------------------------

TITLE: Invalid Assignment in Pattern Guard Example - Rust
DESCRIPTION: Demonstrates an invalid Rust code example where an assignment is attempted within a pattern guard. This operation is not allowed because it could cause side effects that interfere with match exhaustiveness and pattern matching reliability.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0302.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
match Some(()) {
    None => { },
    option if { option = None; false } => { },
    Some(_) => { } // When the previous match failed, the option became `None`.
}
```

----------------------------------------

TITLE: Correct Trait Implementation
DESCRIPTION: Demonstrates the proper way to define and implement a trait for a struct type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0404.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait Foo {
    // some functions
}
struct Bar;

impl Foo for Bar { // ok!
    // functions implementation
}

fn baz<T: Foo>(t: T) {} // ok!
```

----------------------------------------

TITLE: Handling Documentation Text in Rust
DESCRIPTION: This snippet shows the basic usage of the #[doc] attribute alongside the /// syntactic sugar to create documentation comments. It demonstrates how both forms can be effectively used to annotate code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"""rust,no_run\n/// This is a doc comment.\n#[doc = r\" This is a doc comment.\"]\n# fn f() {}\n"
```

----------------------------------------

TITLE: Valid Type Parameter Naming - Unique Parameters
DESCRIPTION: Correct example showing how to properly name type parameters with unique identifiers T and Y.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0403.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn f<T, Y>(s: T, u: Y) {}
```

----------------------------------------

TITLE: Correct Struct Declaration with Unique Fields in Rust
DESCRIPTION: A valid example showing how to properly declare a struct with uniquely named fields. Each field name must be unique within the struct definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0124.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo {
    field1: i32,
    field2: i32, // ok!
}
```

----------------------------------------

TITLE: Configuring Clippy Lints in TOML
DESCRIPTION: This snippet demonstrates how to configure lints in Clippy using a TOML configuration file. It illustrates the basic variable assignment mapping and how to extend default values for list-type configurations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/configuration.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
avoid-breaking-exported-api = false
disallowed-names = ["toto", "tata", "titi"]
```

LANGUAGE: toml
CODE:
```
# default of disallowed-names is ["foo", "baz", "quux"]
disallowed-names = ["bar", ".."] # -> ["bar", "foo", "baz", "quux"]
```

----------------------------------------

TITLE: Trailing Commas in Rust Lists
DESCRIPTION: Shows the recommended use of trailing commas in function calls and array declarations when items are followed by a newline, which simplifies code modification and reduces diff complexity.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/README.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
function_call(
    argument,
    another_argument,
);

let array = [
    element,
    another_element,
    yet_another_element,
];
```

----------------------------------------

TITLE: Replace if let with match Expression in Rust
DESCRIPTION: Converts an if let expression to an equivalent match expression, providing more explicit pattern matching syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_110

LANGUAGE: rust
CODE:
```
enum Action { Move { distance: u32 }, Stop }

fn handle(action: Action) {
    if let Action::Move { distance } = action {
        foo(distance)
    } else {
        bar()
    }
}
```

LANGUAGE: rust
CODE:
```
enum Action { Move { distance: u32 }, Stop }

fn handle(action: Action) {
    match action {
        Action::Move { distance } => foo(distance),
        _ => bar(),
    }
}
```

----------------------------------------

TITLE: Uninstalling Rust
DESCRIPTION: Command to uninstall Rust using the uninstall script located in the rustlib directory.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/etc/installer/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
sudo /usr/local/lib/rustlib/uninstall.sh
```

----------------------------------------

TITLE: Tuple Struct Declaration and Instantiation in Rust
DESCRIPTION: Shows single-line formatting for tuple struct declarations and instantiations.  Highlights how to write the type list and instantiate the tuple structs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Bar(Type1, Type2);

let x = Bar(11, 22);
let y = (11, 22, 33);
```

----------------------------------------

TITLE: Fetching and Checking Out a Pull Request (Git Console)
DESCRIPTION: Fetches the changes from a specific pull request (`NNNNN`) from the `upstream` remote and checks out the fetched commits into a detached HEAD state. This allows local inspection and testing of the PR's contents.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_23

LANGUAGE: console
CODE:
```
git fetch upstream pull/NNNNN/head && git checkout FETCH_HEAD
```

----------------------------------------

TITLE: Using the stable attribute in Rust
DESCRIPTION: The #[stable] attribute explicitly marks an item as stabilized in the Rust standard library. It specifies the feature name and the version since which it has been stabilized.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/stability.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[stable(feature = "foo", since = "1.420.69")]
```

----------------------------------------

TITLE: Demonstrating Duplicate Discriminant Error in Rust Enum
DESCRIPTION: This code snippet shows an erroneous enum definition where two variants (P and X) are assigned the same discriminant value (3), which is not allowed in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0081.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum Enum {
    P = 3,
    X = 3, // error!
    Y = 5,
}
```

----------------------------------------

TITLE: Demonstrating Missing Semicolon Error in Rust
DESCRIPTION: This code sample shows a simple Rust program with a syntax error. The statement assigning value 234 to variable 'x' is missing a required semicolon at the end, which would cause a compilation error in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/rustdoc-ui/doctest/doctest-output-include-fail.md#_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let x = 234 // no semicolon here! oh no!
}
```

----------------------------------------

TITLE: Using Interior Mutability with Cell in Rust
DESCRIPTION: This snippet shows an alternative solution using interior mutability with the Cell type, allowing mutation of data within an immutable container.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0386.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use std::cell::Cell;

let x: i64 = 1;
let y: Box<Cell<_>> = Box::new(Cell::new(x));
y.set(2);
```

----------------------------------------

TITLE: Implementing Borrow Trait in Rust
DESCRIPTION: These impls define how types can be borrowed. The first impl defines the reflexive `Borrow` implementation for all types, stating that a type can borrow itself. The second defines that a `Vec<T>` can be borrowed as `[T]` when `T` is sized.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/canonical-queries.md#2025-04-21_snippet_0

LANGUAGE: rust,ignore
CODE:
```
"impl<T> Borrow<T> for T where T: ?Sized\nimpl<T> Borrow<[T]> for Vec<T> where T: Sized"
```

----------------------------------------

TITLE: Building Documentation with rustdoc - Bash
DESCRIPTION: This snippet demonstrates how to build Rust documentation using the rustdoc tool from the beta toolchain. It covers the command for building standard documentation, as well as for CI building to ensure consistency.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/compiler-documenting.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./x doc
```

LANGUAGE: bash
CODE:
```
./x doc --stage 1
```

----------------------------------------

TITLE: Using Complete Inclusive Range in Rust
DESCRIPTION: This solution shows how to properly use an inclusive range by specifying both start and end values. The inclusive range operator (..=) includes both the start and end indices in the resulting slice.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0586.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn main() {
    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];
    let x = &tmp[1..=3]; // ok!
}
```

----------------------------------------

TITLE: Generic Function with Trait Bound
DESCRIPTION: Demonstrates a generic function with a trait bound requiring Clone implementation for type T, showing how trait resolution works with generic parameters
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/resolution.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn clone_slice<T:Clone>(x: &[T]) -> Vec<T> { 
    let mut v = Vec::new();
    for e in &x {
        v.push((*e).clone()); // (*)
    }
}
```

----------------------------------------

TITLE: Generating From Implementation for Enum in Rust
DESCRIPTION: This snippet demonstrates how to add a From implementation for an enum variant with one tuple field. It creates an impl block that converts the field type into the enum variant.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_54

LANGUAGE: rust
CODE:
```
enum A { One(u32) }
```

LANGUAGE: rust
CODE:
```
enum A { One(u32) }

impl From<u32> for A {
    fn from(v: u32) -> Self {
        Self::One(v)
    }
}
```

----------------------------------------

TITLE: Should Panic Test Example
DESCRIPTION: Shows how to write a test that expects a panic using the #[should_panic] attribute.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/test-implementation.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#[test]
#[should_panic]
fn foo() {
    panic!("intentional");
}
```

----------------------------------------

TITLE: Correct Visibility Restriction in Rust
DESCRIPTION: This code snippet shows the correct way to specify visibility for a struct within a module using the 'in' keyword. It makes the struct 'Bar' only visible within the 'foo' module.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0704.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
mod foo {
    pub(in crate::foo) struct Bar {
        x: i32
    }
}
# fn main() {}
```

----------------------------------------

TITLE: Public Enum Variant Export
DESCRIPTION: Example demonstrating how to make enum variants publicly available for external use with pub use.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0170.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
pub use Method::*;
pub enum Method { GET, POST }
# fn main() {}
```

----------------------------------------

TITLE: Fixing Private Trait Error in Rust
DESCRIPTION: Corrected version showing proper usage by making the trait public. Demonstrates how to properly use traits in public interfaces by marking the base trait as public while maintaining the same functionality.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0445.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub trait Foo { // we set the Foo trait public
    fn dummy(&self) { }
}

pub trait Bar : Foo {} // ok!
pub struct Bar2<T: Foo>(pub T); // ok!
pub fn foo<T: Foo> (t: T) {} // ok!

fn main() {}
```

----------------------------------------

TITLE: Demonstrating Opaque Type Inference in Rust
DESCRIPTION: Example showing how opaque types are defined and used across module boundaries, including trait bounds and type inference.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/opaque-types-impl-trait-inference.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
mod m {
    pub type Seq<T> = impl IntoIterator<Item = T>;

    pub fn produce_singleton<T>(t: T) -> Seq<T> {
        vec![t]
    }

    pub fn produce_doubleton<T>(t: T, u: T) -> Seq<T> {
        vec![t, u]
    }
}

fn is_send<T: Send>(_: &T) {}

pub fn main() {
    let elems = m::produce_singleton(22);

    is_send(&elems);

    for elem in elems {
        println!("elem = {:?}", elem);
    }
}
```

----------------------------------------

TITLE: Returning Closures with Lifetime Annotations in Rust
DESCRIPTION: This snippet illustrates a common lifetime issue encountered when returning closures in Rust. It shows how the absence of explicit lifetime annotations can lead to compilation errors, and provides a corrected version that properly annotates the lifetimes, ensuring that the closure maintains ownership semantics.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0482.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
```compile_fail,E0700
fn foo(
    x: &mut Vec<i32>
) -> impl FnMut(&mut Vec<i32>) -> &[i32] { // error!
    |y| {
        y.append(x);
        y
    }
}
```
```

LANGUAGE: Rust
CODE:
```
```
fn foo<'a>(
    x: &'a mut Vec<i32>
) -> impl FnMut(&mut Vec<i32>) -> &[i32] + 'a { // ok!
    move |y| {
        y.append(x);
        y
    }
}
```
```

----------------------------------------

TITLE: Failed Copy Derive for Enum with Mutable Reference
DESCRIPTION: Example demonstrating why deriving Copy fails for an enum containing a mutable reference &mut bool, since mutable references are not Copy even when the referenced type is Copy.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0205.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[derive(Copy)]
enum Foo<'a> {
    Bar(&'a mut bool),
    Baz,
}
```

----------------------------------------

TITLE: Defining a Library Crate - Rust
DESCRIPTION: This snippet defines a Rust library crate using the `#[crate_type = "lib"]` attribute. The code snippet demonstrates how to declare a library crate which will be used as a dependency in other crates. It does not take any parameters or produce any output by itself. It's a fundamental part of the Rust build process, specifying the crate type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0514.md#_snippet_0

LANGUAGE: Rust
CODE:
```
// compiled with stable `rustc`

#[crate_type = "lib"]
```

----------------------------------------

TITLE: Using Type Inference Instead of Annotation in Closure
DESCRIPTION: This snippet provides an alternative code example where the closure parameter's type is inferred by the Rust compiler. It avoids the lifetime issue present in the previous example by omitting type annotations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0521.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
let mut list: Vec<&str> = Vec::new();

let _add = |el| {
    list.push(el);
};
```

----------------------------------------

TITLE: Correct Struct Pattern Matching in Rust
DESCRIPTION: Example showing correct pattern matching approaches: either specifying all struct fields or using the spread operator (..) to ignore unwanted fields.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0027.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Dog {
    name: String,
    age: u32,
}

let d = Dog { name: "Rusty".to_string(), age: 8 };

match d {
    Dog { name: ref n, age: x } => {}
}

// This is also correct (ignore unused fields).
match d {
    Dog { age: x, .. } => {}
}
```

----------------------------------------

TITLE: Continuing Git Rebase After Conflicts (Console)
DESCRIPTION: Instructs Git to continue the rebase process after you have manually resolved conflicts in the listed files and staged them using `git add`. This command resumes applying the remaining commits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_10

LANGUAGE: console
CODE:
```
git rebase --continue
```

----------------------------------------

TITLE: Resolving Ambiguous Item Usage in Rust
DESCRIPTION: This code snippet demonstrates the solution to the ambiguous item usage problem. It modifies the import statements and function calls to use fully qualified paths, resolving the ambiguity and allowing the code to compile successfully.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0659.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub mod moon {
    pub fn foo() {}
}

pub mod earth {
    pub fn foo() {}
}

mod collider {
    pub use crate::moon;
    pub use crate::earth;
}

fn main() {
    crate::collider::moon::foo(); // ok!
    crate::collider::earth::foo(); // ok!
}
```

----------------------------------------

TITLE: Method Chain Formatting Examples in Rust
DESCRIPTION: Examples of properly formatted method chains in Rust, showing various scenarios including try operators, indentation rules, and how to handle multi-line expressions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
x.baz?
    .qux()

x.y.z
    .qux()

let foo = x
    .baz?
    .qux();

foo(
    expr1,
    expr2,
).baz?
    .qux();
```

----------------------------------------

TITLE: Defining Raw String Literals in Rust with Proper Delimiters
DESCRIPTION: Demonstrates how to correctly use raw string literals in Rust, which require matching pairs of `#` symbols to delineate the string boundaries. The snippet emphasizes the importance of including a trailing `"#` sequence to terminate the literal properly, avoiding syntax errors. No additional dependencies are needed other than the Rust compiler. The key input is a raw string delimited by `r##"` and a closing `"##` sequence, with the error occurring when the closing delimiter is missing or incomplete.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_raw_string_with_slash.txt#_snippet_0

LANGUAGE: rust
CODE:
```
r##"\
```

----------------------------------------

TITLE: Fixing E0573: Returning an enum type
DESCRIPTION: This code snippet demonstrates the correct way to return an enum variant. Instead of specifying the variant as the return type, the function should return the entire enum type itself.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0573.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
enum Dragon {
    Born,
}

fn oblivion() -> Dragon { // ok!
    Dragon::Born
}
```
```

----------------------------------------

TITLE: Demonstrating Missing Trait Implementation Error in Rust
DESCRIPTION: This example shows erroneous code that generates the E0046 compiler error. It defines a trait 'Foo' with a required method 'foo()', then attempts to implement it for a struct 'Bar' without implementing the required method.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0046.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo();
}

struct Bar;

impl Foo for Bar {}
// error: not all trait items implemented, missing: `foo`
```

----------------------------------------

TITLE: Type Inference Error with Generic Struct Methods in Rust
DESCRIPTION: This code demonstrates an E0282 error occurring when calling a static method on a generic struct without specifying the type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0282.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
struct Foo<T> {
    num: T,
}

impl<T> Foo<T> {
    fn bar() -> i32 {
        0
    }

    fn baz() {
        let number = Foo::bar();
    }
}
```

----------------------------------------

TITLE: Implementing a Constructor Method for Struct with Private Fields in Rust
DESCRIPTION: This solution shows how to create a constructor method to instantiate a struct with private fields, maintaining encapsulation while allowing creation of instances.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0451.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
mod bar {
    pub struct Foo {
        pub a: isize,
        b: isize, // still private
    }

    impl Foo {
        pub fn new() -> Foo { // we create a method to instantiate `Foo`
            Foo { a: 0, b: 0 }
        }
    }
}

let f = bar::Foo::new(); // ok!
```

----------------------------------------

TITLE: Fixing E0713 Error by Taking S as a Mutable Reference
DESCRIPTION: This code snippet demonstrates how to fix the E0713 error by modifying the demo function to take S as a mutable reference. This approach prevents the destructor from running while the string data is borrowed, resolving the conflict with the Drop trait implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0713.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub struct S<'a> { data: &'a mut String }

impl<'a> Drop for S<'a> {
    fn drop(&mut self) { self.data.push_str("being dropped"); }
}

fn demo<'a>(s: &'a mut S<'a>) -> &'a mut String { let p = &mut *(*s).data; p }
```

----------------------------------------

TITLE: Demonstrating E0109 Error in Rust
DESCRIPTION: This snippet shows incorrect usage of generic arguments with non-generic types, triggering the E0109 error. It demonstrates providing a type parameter `i32` to `u32` and a lifetime parameter `'static` to `bool`, neither of which are generic.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0109.md#_snippet_0

LANGUAGE: Rust
CODE:
```
type X = u32<i32>; // error: type arguments are not allowed for this type
type Y = bool<'static>; // error: lifetime parameters are not allowed on
                        //        this type
```

----------------------------------------

TITLE: Function Parameter Layout - Vertical
DESCRIPTION: Illustrates the 'Vertical' layout for function parameters.  Each parameter is placed on a separate line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_13

LANGUAGE: rust
CODE:
```
trait Lorem {
    fn lorem(
        ipsum: Ipsum,
        dolor: Dolor,
        sit: Sit,
        amet: Amet,
    );

    fn lorem(
        ipsum: Ipsum,
        dolor: Dolor,
        sit: Sit,
        amet: Amet,
    ) {
        // body
    }

    fn lorem(
        ipsum: Ipsum,
        dolor: Dolor,
        sit: Sit,
        amet: Amet,
        consectetur: Consectetur,
        adipiscing: Adipiscing,
        elit: Elit,
    );

    fn lorem(
        ipsum: Ipsum,
        dolor: Dolor,
        sit: Sit,
        amet: Amet,
        consectetur: Consectetur,
        adipiscing: Adipiscing,
        elit: Elit,
    ) {
        // body
    }
}
```

----------------------------------------

TITLE: Compile-Fail Example: Dereferencing u32 in Rust
DESCRIPTION: This code snippet demonstrates an example of a compile-time error E0614 in Rust, where a `u32` variable is directly dereferenced using the `*` operator.  Since `u32` does not implement the `Deref` trait, this operation is invalid. The code will fail to compile.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0614.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0614
let y = 0u32;
*y; // error: type `u32` cannot be dereferenced
```
```

----------------------------------------

TITLE: Failing Generic Debug Trait Example in Rust
DESCRIPTION: Example showing a compile error when using an unbounded generic type T that doesn't specify the Debug trait requirement.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0277.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn some_func<T>(foo: T) {
    println!("{:?}", foo); // error: the trait `core::fmt::Debug` is not
                           //        implemented for the type `T`
}

fn main() {
    // We now call the method with the i32 type,
    // which *does* implement the Debug trait.
    some_func(5i32);
}
```

----------------------------------------

TITLE: Using the deprecated attribute in Rust
DESCRIPTION: The #[deprecated] attribute marks items as deprecated in the standard library. It must be used with either stable or unstable attributes and can include since version, explanation note, and optional suggestion for replacement.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/stability.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#[deprecated(
    since = "1.38.0",
    note = "explanation for deprecation",
    suggestion = "other_function"
)]
```

----------------------------------------

TITLE: Failing Iteration Example (E0626)
DESCRIPTION: This code demonstrates another case where E0626 occurs during iteration. The borrow of `v` in the `for` loop persists across the `yield` point.  Iterating by reference is the problem here.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0626.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
# #![feature(coroutines, coroutine_trait, stmt_expr_attributes)]
# use std::ops::Coroutine;
# use std::pin::Pin;
let mut b = #[coroutine] || {
  let v = vec![1,2,3];
  for &x in &v { // <-- borrow of `v` is still in scope...
    yield x; // ...when this yield occurs.
  }
};
Pin::new(&mut b).resume(());
```

----------------------------------------

TITLE: Demonstrating Non-Exhaustive Pattern Matching Error in Rust
DESCRIPTION: This example shows code that will fail to compile due to non-exhaustive pattern matching. The match expression doesn't cover all possible variants of the Terminator enum.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0004.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum Terminator {
    HastaLaVistaBaby,
    TalkToMyHand,
}

let x = Terminator::HastaLaVistaBaby;

match x { // error: non-exhaustive patterns: `HastaLaVistaBaby` not covered
    Terminator::TalkToMyHand => {}
}
```

----------------------------------------

TITLE: Desugaring Closure with Move Semantics in Rust
DESCRIPTION: This Rust code shows a closure that takes ownership of a variable through move semantics, as illustrated using the `FnOnce` trait. The closure captures and drops a vector `x`, making it unusable afterwards. This example demonstrates how closure affects ownership and usability of variables in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/closure.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn closure(f: impl FnOnce()) {
    f();
}

fn main() {
    let x = vec![21];
    closure(|| {
        drop(x);  // Makes x unusable after the fact.
    });
    // println!("Value of x after return {:?}", x);
}
```

----------------------------------------

TITLE: Correct Pattern Matching with Sufficient Elements in Rust
DESCRIPTION: This code snippet demonstrates correct pattern matching in Rust where the array 'r' has a sufficient number of elements to match the pattern. By ensuring the array contains at least the number of elements required by the pattern, the code compiles successfully. The snippet uses '..' to match an arbitrary number of remaining elements, which is a crucial aspect of pattern matching in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0528.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let r = &[1, 2, 3, 4, 5];
match r {
    &[a, b, c, rest @ ..] => { // ok!
        // prints `a=1, b=2, c=3 rest=[4, 5]`
        println!("a={}, b={}, c={} rest={:?}", a, b, c, rest);
    }
}
```

----------------------------------------

TITLE: Incorrect Struct Pattern Field Access in Rust
DESCRIPTION: This example demonstrates a compile error (E0026) that occurs when attempting to extract a nonexistent field 'z' from the 'Thing' struct during pattern matching. The struct only has 'x' and 'y' fields, causing the compiler to raise an error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0026.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Thing {
    x: u32,
    y: u32,
}

let thing = Thing { x: 0, y: 0 };

match thing {
    Thing { x, z } => {} // error: `Thing::z` field doesn't exist
}
```

----------------------------------------

TITLE: Solution 1: Enforcing Lifetime Constraints in Rust
DESCRIPTION: This solution involves amending the function by specifying that the lifetime 'a must live at least as long as 'b, thereby aligning with Rust's borrow checker requirements. It ensures the safe usage of references throughout the function's execution.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0495.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
fn transmute_lifetime<'a: 'b, 'b, T>(t: &'a (T,)) -> &'b T {
    match (&t,) { // ok!
        ((u,),) => u,
    }
}
```

----------------------------------------

TITLE: Invalid Trait Object Usage with Generic Methods in Rust
DESCRIPTION: Shows why generic method parameters are problematic for trait objects by demonstrating multiple different types being passed to the same generic method, which would require multiple vtable entries.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
fn call_foo(thing: Box<dyn Trait>) {
    thing.foo(true); // this could be any one of the 8 types above
    thing.foo(1);
    thing.foo("hello");
}
```

----------------------------------------

TITLE: Handling Unused Variable 'foo' in Rust REPL Subcommand
DESCRIPTION: This code snippet represents a diagnostic for an unused variable 'foo' in a Rust REPL subcommand. The compiler suggests prefixing the variable with an underscore to indicate it's intentionally unused.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_hint.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
let foo = /* some value */;
```

----------------------------------------

TITLE: Desugaring Async to Impl Future in Rust
DESCRIPTION: Converts an async function to its equivalent return type using impl Future, maintaining its output structure.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_38

LANGUAGE: rust
CODE:
```
pub fn foo() -> impl core::future::Future<Output = usize> {
    0
}
```

----------------------------------------

TITLE: Erroneous Async Main Function Example in Rust
DESCRIPTION: This example demonstrates incorrect code that will trigger error E0752. The main function is marked as async, which is not allowed as an entry point in Rust programs.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0752.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
async fn main() -> Result<(), ()> { // error!
    Ok(())
}
```

----------------------------------------

TITLE: Converting a Regular String to a Raw String in Rust
DESCRIPTION: Demonstrates converting a regular string literal to a raw string format by adding r# delimiters. This is useful when dealing with strings containing special characters that would otherwise need escaping.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_78

LANGUAGE: rust
CODE:
```
fn main() {
    "Hello,┃ World!";
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    r#"Hello, World!"#;
}
```

----------------------------------------

TITLE: Breaking Types with `+` Operator in Rust
DESCRIPTION: This snippet demonstrates how to properly break types that use the `+` operator (e.g., trait bounds). It advises breaking before each `+` and block-indenting the subsequent lines for enhanced readability.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/types.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
"impl Clone
    + Copy
    + Debug"
```

----------------------------------------

TITLE: Rust Example: Defining and Accessing Struct Fields
DESCRIPTION: This code shows how to define a struct with fields and access those fields in Rust.  It declares a struct called `Foo` with two fields, `x` and `y`, and then creates an instance of the struct and accesses its fields using the dot operator.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0610.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
// We declare struct called `Foo` containing two fields:
struct Foo {
    x: u32,
    y: i64,
}

// We create an instance of this struct:
let variable = Foo { x: 0, y: -12 };
// And we can now access its fields:
println!("x: {}, y: {}", variable.x, variable.y);
```
```

----------------------------------------

TITLE: Incorrect Manual Destructor Call in Rust
DESCRIPTION: Example showing an erroneous attempt to manually call a destructor method on a struct. This code fails to compile because explicit destructor calls are not allowed in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0040.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo {
    x: i32,
}

impl Drop for Foo {
    fn drop(&mut self) {
        println!("kaboom");
    }
}

fn main() {
    let mut x = Foo { x: -7 };
    x.drop(); // error: explicit use of destructor method
}
```

----------------------------------------

TITLE: Fixing Closure Mutability with FnMut in Rust
DESCRIPTION: This code snippet demonstrates how to fix the closure mutability error by changing the 'foo' function to accept an FnMut closure instead of an Fn closure. This allows the closure to capture its environment mutably.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0387.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<F: FnMut()>(f: F) { }
```

----------------------------------------

TITLE: Raw String Literal in Rust
DESCRIPTION: A raw string literal that disables escape sequence processing, allowing verbatim text representation
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/strings.txt#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
r"world"
```

----------------------------------------

TITLE: Fixed-Length Array Pattern Matching in Rust
DESCRIPTION: Correct implementation using a fixed-length array of size 3, allowing proper pattern matching with rest patterns.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0730.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn is_123(x: [u32; 3]) -> bool { // We use an array with a fixed size
    match x {
        [1, 2, ..] => true, // ok!
        _ => false
    }
}
```

----------------------------------------

TITLE: Demonstrating Panic Usage in Rust
DESCRIPTION: This example shows various ways to use the panic macro in Rust. It demonstrates basic usage, formatted string panics, and the panic_any function. These examples would normally terminate program execution and are marked with should_panic.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/core/src/macros/panic.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
# #![allow(unreachable_code)]
panic!();
panic!("this is a terrible mistake!");
panic!("this is a {} {message}", "fancy", message = "message");
std::panic::panic_any(4); // panic with the value of 4 to be collected elsewhere
```

----------------------------------------

TITLE: Creating Async Receiver Struct Using Rust Futures
DESCRIPTION: The snippet defines an AsyncReceiver struct that utilizes Rust's mpsc Receiver. It demonstrates how to create an asynchronous receiver which returns a future when the recv method is called. This structure is crucial for asynchronous programming in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/linking-to-items-by-name.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use std::sync::mpsc::Receiver;

/// This is a version of [`Receiver<T>`] with support for [`std::future`].
///
/// You can obtain a [`std::future::Future`] by calling [`Self::recv()`].
pub struct AsyncReceiver<T> {
    sender: Receiver<T>
}

impl<T> AsyncReceiver<T> {
    pub async fn recv() -> T {
        unimplemented!()
    }
}
```

----------------------------------------

TITLE: Struct Literal Formatting in Rust
DESCRIPTION: Rules for formatting struct literals, including single-line and multi-line variations, spacing, and trailing commas
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
Foo { field1, field2: 0 }
let f = Foo {
    field1,
    field2: an_expr,
};
```

----------------------------------------

TITLE: Understanding Lifetime Parameters with Higher Ranked Function Pointers in Rust
DESCRIPTION: This snippet illustrates how early and late bound parameters function with higher ranked trait bounds. It contrasts `foo`'s early bound lifetime with `bar`'s late bound lifetime.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
// The `'a: 'a` bound forces this lifetime to be early bound.
fn foo<'a: 'a>(b: &'a String) -> &'a String { b }
fnt bar<'a>(b: &'a String) -> &'a String { b }

// Early bound generic parameters are instantiated here when naming
// the function `foo`. As `'a` is early bound an argument is provided.
let f = foo::<'_>;

// Both function arguments are required to have the same lifetime as
// the lifetime parameter being early bound means that `f` is only
// callable for one specific lifetime.

// As we call this with borrows of different lifetimes, the borrow checker
// will error here.
f(&String::new());
f(&String::new());
```

----------------------------------------

TITLE: Demonstrating compile_fail E0573
DESCRIPTION: This code snippet shows examples that cause the `E0573` compile error in Rust. The error happens when a specific enum variant or a constant is used where a type is required, such as in a function return type or an `impl` block.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0573.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0573
enum Dragon {
    Born,
}

fn oblivion() -> Dragon::Born { // error!
    Dragon::Born
}

const HOBBIT: u32 = 2;
impl HOBBIT {} // error!

enum Wizard {
    Gandalf,
    Saruman,
}

trait Isengard {
    fn wizard(_: Wizard::Saruman); // error!
}
```
```

----------------------------------------

TITLE: Multi-Line Let-Else Statement
DESCRIPTION: Shows formatting for more complex let-else statements with multi-line initializers and else blocks
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/statements.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
let Some(x) = some_really_really_long_name
else {
    return;
};
```

----------------------------------------

TITLE: Trait Hierarchy and Where Clause Resolution
DESCRIPTION: Demonstrates trait inheritance and where clause resolution, showing how subtrait obligations can be resolved through parameter environment constraints
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/resolution.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait A1 {
    fn do_a1(&self);
}
trait A2 : A1 { ... }

trait B {
    fn do_b(&self);
}

fn foo<X:A2+B>(x: X) {
    x.do_a1(); // (*)
    x.do_b();  // (#)
}
```

----------------------------------------

TITLE: Incorrect Variable Binding in Or Pattern - Rust
DESCRIPTION: This example shows erroneous code where a variable 'y' is not consistently bound across all patterns in an OR pattern match expression. The code fails to compile because 'y' is only bound in the Some variant but not in None.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0408.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
match x {
    Some(y) | None => { /* use y */ } // error: variable `y` from pattern #1 is
                                      //        not bound in pattern #2
    _ => ()
}
```

----------------------------------------

TITLE: Example Private/Public Items in Rust (Rust)
DESCRIPTION: Provides a Rust code snippet illustrating the difference between `pub` items that are publicly reachable and private or unreachable items that are typically excluded from documentation unless `--document-private-items` is used.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_6

LANGUAGE: rust
CODE:
```
pub fn public() {} // this item is public and will be documented
mod private { // this item is private and will not be documented
    pub fn unreachable() {} // this item is public, but unreachable, so it will not be documented
}
```

----------------------------------------

TITLE: Resolving E0373 Error with Move Closure in Rust
DESCRIPTION: This snippet shows the solution to the E0373 error by using a move closure, which takes ownership of the captured variables.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0373.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn foo() -> Box<dyn Fn(u32) -> u32> {
    let x = 0u32;
    Box::new(move |y| x + y)
}
```

----------------------------------------

TITLE: Correct Associated Item Constraint in Where-Clause
DESCRIPTION: This snippet demonstrates another correct way to use associated item constraints by placing them in the where-clause. This is an alternative solution to resolve the E0229 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0229.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
# struct Bar;
# trait Foo { type A; }
fn baz<I>(x: &<I as Foo>::A) where I: Foo<A=Bar> {}
```

----------------------------------------

TITLE: Using Tracing Macros in Rust
DESCRIPTION: This Rust code snippet shows how to use tracing macros and the instrument attribute for structured logging in the bootstrap process. These are gated by the 'tracing' feature and used to provide detailed logging for specific functions. It requires the tracing crate with optional features enabled and involves macros like trace! and the #[instrument] attribute for method tracing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/bootstrapping/debugging-bootstrap.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#[cfg(feature = "tracing")]
use tracing::instrument;

struct Foo;

impl Step for Foo {
    type Output = ();

    #[cfg_attr(feature = "tracing", instrument(level = "trace", name = "Foo::should_run", skip_all))]
    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {
        trace!(?run, "entered Foo::should_run");

        todo!()
    }

    #[cfg_attr(
        feature = "tracing",
        instrument(
            level = "trace",
            name = "Foo::run",
            skip_all,
            fields(compiler = ?builder.compiler),
        ),
    )]
    fn run(self, builder: &Builder<'_>) -> Self::Output {
        trace!(?run, "entered Foo::run");

        todo!()
    }    
}
```

----------------------------------------

TITLE: Valid Rust Lint Attribute Examples
DESCRIPTION: Examples showing correct syntax for lint attributes, demonstrating both single and multiple lint suppressions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0452.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![allow(foo)] // ok!
// or:
#![allow(foo, foo2)] // ok!
```

----------------------------------------

TITLE: Incorrect Lifetime Usage in Rust Function
DESCRIPTION: Example showing incorrect usage of static lifetime annotation that causes a compilation error. The function attempts to return a static reference from a parameter with a shorter lifetime.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0312.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub fn opt_str<'a>(maybestr: &'a Option<String>) -> &'static str {
    if maybestr.is_none() {
        "(none)"
    } else {
        let s: &'a str = maybestr.as_ref().unwrap();
        s  // Invalid lifetime!
    }
}
```

----------------------------------------

TITLE: Correct Implementation of Trait with Associated Type in Rust
DESCRIPTION: This code example shows the correct way to implement a trait that defines an associated type. The trait and implementation both use 'type N' syntax consistently.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0325.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Bar;

trait Foo {
    type N;
}

impl Foo for Bar {
    type N = u32; // ok!
}
```

----------------------------------------

TITLE: Generic Trait Implementation
DESCRIPTION: Shows the basic structure of implementing a trait generically for all types T.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0119.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait MyTrait {
    fn get(&self) -> usize;
}

impl<T> MyTrait for T {
    fn get(&self) -> usize { 0 }
}
```

----------------------------------------

TITLE: Analyzing Rust Raw String Literal Error
DESCRIPTION: This snippet demonstrates a Rust lexer error where a raw string literal starts with `r##` but does not have the matching closing quote and `#` symbols. The error message "error: Missing `\"` symbol after `#` symbols to begin the raw string literal" indicates that the compiler expects a closing delimiter with the same number of `#` characters as the opening delimiter.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unstarted_raw_string_with_ascii.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"STRING \"r## \" error: Missing `\"` symbol after `#` symbols to begin the raw string literal"

```

----------------------------------------

TITLE: Erroneous Usage of Break Outside Loop in Rust
DESCRIPTION: This example demonstrates the incorrect usage of the 'break' keyword outside of a loop context, which results in the E0268 compilation error. Loop keywords can only be used within loops.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0268.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn some_func() {
    break; // error: `break` outside of a loop
}
```

----------------------------------------

TITLE: Correct Usage of 'continue' in Rust Functions
DESCRIPTION: This code snippet demonstrates the correct usage of the 'continue' keyword in Rust functions. The 'continue' statement is used properly within labeled loops, which will compile successfully.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0696.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn continue_simple() {
    'b: loop {
        continue ; // ok!
    }
}
fn continue_labeled() {
    'b: loop {
        continue 'b; // ok!
    }
}
fn continue_crossing() {
    loop {
        'b: loop {
            continue; // ok!
        }
    }
}
```

----------------------------------------

TITLE: Correct Implementation of Trait with Constant in Rust
DESCRIPTION: This code example shows the correct way to implement a trait that defines a constant. The implementation provides a constant value that matches the trait's expected constant declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0325.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Bar;

trait Foo {
    const N : u32;
}

impl Foo for Bar {
    const N : u32 = 0; // ok!
}
```

----------------------------------------

TITLE: Visual Style Alignment for Generics in Rust
DESCRIPTION: Demonstrates the 'Visual' alignment style for generic parameters. Generic parameters after the first line are aligned with the first parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_34

LANGUAGE: rust
CODE:
```
fn lorem<Ipsum: Eq = usize,
         Dolor: Eq = usize,
         Sit: Eq = usize,
         Amet: Eq = usize,
         Adipiscing: Eq = usize,
         Consectetur: Eq = usize,
         Elit: Eq = usize>(
    ipsum: Ipsum,
    dolor: Dolor,
    sit: Sit,
    amet: Amet,
    adipiscing: Adipiscing,
    consectetur: Consectetur,
    elit: Elit)
    -> T {
    // body
}
```

----------------------------------------

TITLE: Main Program Using External Crate
DESCRIPTION: Example of a main program attempting to use the library crate defined in a.rs
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0461.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
extern crate a;

fn main() {
    a::foo();
}
```

----------------------------------------

TITLE: Handling Missing Module Error in Rust
DESCRIPTION: This snippet demonstrates a Rust compile-time error indicating that a module file could not be found. It serves as an example for Rust developers to learn how to handle module imports correctly, specifically pointing out the need for accompanying file structure when declaring modules. The key parameters involve the module declaration and the main function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0583.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"""compile_fail,E0583\nmod file_that_doesnt_exist; // error: file not found for module\n\nfn main() {}\n"""
```

----------------------------------------

TITLE: Incorrect Main Function Declaration in Rust
DESCRIPTION: This snippet demonstrates an incorrect declaration of the `main` function in Rust.  The `main` function should not accept any arguments. The compiler will issue an error if arguments are provided.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0580.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0580
fn main(x: i32) { // error: main function has wrong type
    println!("{}", x);
}
```
```

----------------------------------------

TITLE: Handling Context Parameters in Rust Functions
DESCRIPTION: Demonstrates the preferred way of passing context parameters in Rust functions, placing them first and considering packing them into a struct for multiple context parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_23

LANGUAGE: rust
CODE:
```
// GOOD
fn dfs(graph: &Graph, v: Vertex) -> usize {
    let mut visited = FxHashSet::default();
    return go(graph, &mut visited, v);

    fn go(graph: &Graph, visited: &mut FxHashSet<Vertex>, v: usize) -> usize {
        ...
    }
}

// BAD
fn dfs(v: Vertex, graph: &Graph) -> usize {
    fn go(v: usize, graph: &Graph, visited: &mut FxHashSet<Vertex>) -> usize {
        ...
    }

    let mut visited = FxHashSet::default();
    go(v, graph, &mut visited)
}
```

----------------------------------------

TITLE: Instrumenting a function for debugging with tracing in Rust
DESCRIPTION: This code snippet demonstrates how to use the `#[instrument]` attribute from the `tracing` crate to automatically generate log messages for function calls, including arguments and return values.  The `level` specifies the logging level, and `skip` allows excluding specific arguments from being logged.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tracing.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```

#[instrument(level = "debug", skip(self))]
fn foo(&self, bar: Type) {}

```

----------------------------------------

TITLE: Workaround: Drop Implementation Using Generic Wrapper Struct (Rust)
DESCRIPTION: This code demonstrates a valid workaround for implementing Drop behavior for trait types by creating a generic wrapper struct with a trait bound and implementing Drop on that wrapper.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0120.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait MyTrait {}
struct MyWrapper<T: MyTrait> { foo: T }

impl <T: MyTrait> Drop for MyWrapper<T> {
    fn drop(&mut self) {}
}

```

----------------------------------------

TITLE: Demonstrating E0407 Error in Rust Trait Implementation
DESCRIPTION: This code snippet shows an erroneous trait implementation where a method 'b' is defined in the implementation but not in the trait 'Foo', resulting in a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0407.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    fn a();
}

struct Bar;

impl Foo for Bar {
    fn a() {}
    fn b() {} // error: method `b` is not a member of trait `Foo`
}
```

----------------------------------------

TITLE: Failing Rust Example: Accessing Field on Primitive Type
DESCRIPTION: This code demonstrates the error that occurs when trying to access a field on a primitive type (u32). The compiler will report an error because primitive types do not have fields.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0610.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0610
let x: u32 = 0;
println!("{}", x.foo); // error: `{integer}` is a primitive type, therefore
                       //        doesn't have fields
```
```

----------------------------------------

TITLE: Configuring Conditional Compilation with --cfg
DESCRIPTION: Examples of using the --cfg flag to enable conditional compilation features in Rust. The flag accepts either a single identifier or two identifiers separated by =.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
--cfg 'verbose'
--cfg 'feature="serde"'
```

----------------------------------------

TITLE: Defining a Non-Exhaustive Enum in Rust
DESCRIPTION: This code snippet demonstrates the definition of a non-exhaustive enum named `Error`. The `#[non_exhaustive]` attribute marks the enum as non-exhaustive, requiring downstream crates to handle potential future variants. The `Display` trait implementation shows exhaustively matching within the defining crate, while the example below demonstrates non-exhaustive matching in downstream crates. Dependencies include `std::fmt` and the `String` type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0638.md#_snippet_0

LANGUAGE: Rust
CODE:
```
```rust,ignore (pseudo-Rust)
#[non_exhaustive]
pub enum Error {
    Message(String),
    Other,
}

impl Display for Error {
    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        // This will not error, despite being marked as non_exhaustive, as this
        // enum is defined within the current crate, it can be matched
        // exhaustively.
        let display = match self {
            Message(s) => s,
            Other => "other or unknown error",
        };
        formatter.write_str(display)
    }
}
```
```

----------------------------------------

TITLE: External Module Declarations in lib.rs
DESCRIPTION: The three external module declarations found in the lib.rs file. These declarations reference modules a, b, and c which are expected to be resolved through Rust's module resolution system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/tests/mod-resolver/issue-5198/lib/explanation.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
mod a;
mod b;
mod c;
```

----------------------------------------

TITLE: Defining Associated Opaque Types in Rust Traits
DESCRIPTION: This snippet illustrates how to define associated opaque types within a trait implementation. It shows a trait `Baz` with an associated type `Foo`, and an implementation for `Quux` where `Foo` is defined as an opaque type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/opaque-types-type-alias-impl-trait.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait Baz {
    type Foo;
    fn foo() -> Self::Foo;
}

struct Quux;

impl Baz for Quux {
    type Foo = impl Bar;
    fn foo() -> Self::Foo { ... }
}
```

----------------------------------------

TITLE: Configuring rust-analyzer Rustfmt and Semantic Highlighting in JSON
DESCRIPTION: Settings related to automatic formatting and styling in rust-analyzer integration. This covers additional rustfmt arguments, overriding the rustfmt command, enabling unstable rustfmt range formatting, and semantic token highlighting configurations (for doc comments, non-standard tokens, operator semantic tokens). These influence code formatting behavior and text coloring/tokenization in IDEs. Dependencies include having rustfmt installed and IDE support for semantic tokens. Inputs are booleans, arrays or nullable strings, affecting formatting rules and syntax highlighting output.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_6

LANGUAGE: json
CODE:
```
{
  "rust-analyzer.rustfmt.extraArgs": [],
  "rust-analyzer.rustfmt.overrideCommand": null,
  "rust-analyzer.rustfmt.rangeFormatting.enable": false,
  "rust-analyzer.semanticHighlighting.doc.comment.inject.enable": true,
  "rust-analyzer.semanticHighlighting.nonStandardTokens": true,
  "rust-analyzer.semanticHighlighting.operator.enable": true
}
```

----------------------------------------

TITLE: Let-Else Statement Short Form
DESCRIPTION: Demonstrates a compact let-else statement for simple pattern matching and early return scenarios
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/statements.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
let Some(1) = opt else { return };
```

----------------------------------------

TITLE: Valid Char Casting and Conversion Methods
DESCRIPTION: Shows correct ways to convert integers to char using direct casting for u8 and char::from_u32() for checking Unicode Scalar Value compatibility.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0604.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
assert_eq!(86u8 as char, 'V'); // ok!
assert_eq!(char::from_u32(0x3B1), Some('α')); // ok!
assert_eq!(char::from_u32(0xD800), None); // not a USV.
```

----------------------------------------

TITLE: Demonstrating Multiple #[main] Attribute Error in Rust
DESCRIPTION: This code snippet illustrates the error that occurs when multiple functions are declared with the #[main] attribute. This is not allowed because there must be a unique entry point into a Rust program.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0137.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(main)]

#[main]
fn foo() {}

#[main]
fn f() {} // error: multiple functions with a `#[main]` attribute
```

----------------------------------------

TITLE: Invalid Left-Hand Side Assignment in Rust
DESCRIPTION: An example of invalid code that triggers E0067 because a literal value (12) cannot be the target of an assignment operation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0067.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
12 += 1; // error!
```

----------------------------------------

TITLE: Using Appropriate String Types for OS Interfacing
DESCRIPTION: This guideline emphasizes the importance of using `OsString` when interfacing with OS APIs to preserve data integrity and to clarify data boundaries.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_12

LANGUAGE: rust
CODE:
```
// Rationale: cleanly delineates the boundary when the data goes into the OS-land.
```

----------------------------------------

TITLE: Demonstrating Lifetime Error in Rust Closure
DESCRIPTION: This code snippet shows an erroneous implementation where a closure does not satisfy the 'static lifetime constraint. The closure captures a reference with a non-static lifetime, causing a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0477.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use std::sync::Mutex;

struct MyString<'a> {
    data: &'a str,
}

fn i_want_static_closure<F>(a: F)
    where F: Fn() + 'static {}

fn print_string<'a>(s: Mutex<MyString<'a>>) {

    i_want_static_closure(move || {     // error: this closure has lifetime 'a
                                        //        rather than 'static
        println!("{}", s.lock().unwrap().data);
    });
}
```

----------------------------------------

TITLE: Auto-importing Unresolved Names in Rust
DESCRIPTION: This assist provides all possible imports for an unresolved name. It adds the necessary use statement to import the symbol.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_13

LANGUAGE: rust
CODE:
```
fn main() {
    let map = HashMap::new();
}
```

LANGUAGE: rust
CODE:
```
use std::collections::HashMap;

fn main() {
    let map = HashMap::new();
}
```

----------------------------------------

TITLE: Correct Usage of Struct Update Syntax in Rust
DESCRIPTION: This example shows the proper way to use struct update syntax by providing a base expression (f1) that will be used to fill the remaining fields not explicitly specified.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0797.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo {
    fizz: u8,
    buzz: u8
}

let f1 = Foo { fizz: 10, buzz: 1};
let f2 = Foo { fizz: 10, ..f1 };
```

----------------------------------------

TITLE: Failing Inherent Implementation on Generic Type
DESCRIPTION: This code snippet demonstrates the E0118 error. It attempts to define an inherent implementation for a generic type `T`, which is not allowed in Rust because `T` could represent any type, not necessarily a struct, enum, or union. The compiler expects an inherent implementation to be associated with a concrete nominal type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0118.md#_snippet_0

LANGUAGE: rust
CODE:
```
impl<T> T { // error: no nominal type found for inherent implementation
    fn get_state(&self) -> String {
        // ...
    }
}
```

----------------------------------------

TITLE: Invalid Type Alias Implementation Example in Rust
DESCRIPTION: Shows that using a type alias does not circumvent the restriction on implementing methods for types from external crates.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0116.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
type Bytes = Vec<u8>;

impl Bytes { } // error, same as above
```

----------------------------------------

TITLE: Correct Generic Argument Order in Rust
DESCRIPTION: This code snippet shows the correct way to declare generic arguments, matching the order of the parameters in the struct definition. The lifetime argument is provided before the type argument.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0747.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct S<'a, T>(&'a T);

type X = S<'static, ()>; // ok
```

----------------------------------------

TITLE: Demonstrating Method Call Ambiguity in Rust
DESCRIPTION: This code snippet shows an erroneous example where two traits define the same method name, causing a compiler error when trying to call the method.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0034.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Test;

trait Trait1 {
    fn foo();
}

trait Trait2 {
    fn foo();
}

impl Trait1 for Test { fn foo() {} }
impl Trait2 for Test { fn foo() {} }

fn main() {
    Test::foo() // error, which foo() to call?
}
```

----------------------------------------

TITLE: Demonstrating Incorrect Trait Implementation in Rust
DESCRIPTION: This code snippet shows an erroneous implementation of a trait method. The trait defines a method with a `&self` parameter, but the implementation incorrectly omits it, causing a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0186.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo(&self);
}

struct Bar;

impl Foo for Bar {
    // error, method `foo` has a `&self` declaration in the trait, but not in
    // the impl
    fn foo() {}
}
```

----------------------------------------

TITLE: Adding Missing Default Impl Members in Rust
DESCRIPTION: This assist adds scaffold for overriding default impl members. It inserts the default implementation of trait methods that have a default implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
trait Trait {
    type X;
    fn foo(&self);
    fn bar(&self) {}
}

impl Trait for () {
    type X = ();
    fn foo(&self) {}
}
```

LANGUAGE: rust
CODE:
```
trait Trait {
    type X;
    fn foo(&self);
    fn bar(&self) {}
}

impl Trait for () {
    type X = ();
    fn foo(&self) {}

    fn bar(&self) {}
}
```

----------------------------------------

TITLE: Resolving Associated Type Mismatch by Changing Function Constraint
DESCRIPTION: This solution resolves the E0271 error by modifying the associated type constraint in the function declaration to match the implementation. The function now expects &'static str as the associated type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0271.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Trait { type AssociatedType; }

fn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {
    println!("in foo");
}

impl Trait for i8 { type AssociatedType = &'static str; }

foo(3_i8);
```

----------------------------------------

TITLE: Rust Byte String Error: Missing Trailing Quote
DESCRIPTION: This error occurs when defining a byte string literal in Rust using the `b"` prefix but failing to include a closing `"` character. The compiler expects a matching quote to terminate the string. Correcting this error involves adding the missing closing quote to properly delimit the byte string.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_string_with_ferris.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"BYTE_STRING \"b\"🦀\" error: Missing trailing `\"` symbol to terminate the byte string literal"
```

----------------------------------------

TITLE: Fix: Iterate by Value
DESCRIPTION: This code fixes the iteration example by iterating by value (using `into_iter()`). This avoids borrowing `v` and moves the values into the loop. Now there are no borrows persisting across the yield.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0626.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
# #![feature(coroutines, coroutine_trait, stmt_expr_attributes)]
# use std::ops::Coroutine;
# use std::pin::Pin;
let mut b = #[coroutine] || {
  let v = vec![1,2,3];
  for x in v { // <-- Take ownership of the values instead!
    yield x; // <-- Now yield is OK.
  }
};
Pin::new(&mut b).resume(());
```

----------------------------------------

TITLE: Including External File as Documentation
DESCRIPTION: This snippet demonstrates including an external file (README.md) as documentation using the #[doc] attribute, allowing for easy integration of additional documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
"""rust,no_run\n#[doc = include_str!(\"../../README.md\")]\n# fn f() {}\n"
```

----------------------------------------

TITLE: Demonstrating E0107 Error with Too Few Type Arguments in Rust
DESCRIPTION: This example shows a function that requires two type parameters (T and U), but only one type argument (f64) is provided when called, resulting in the E0107 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0089.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<T, U>() {}

fn main() {
    foo::<f64>(); // error: wrong number of type arguments: expected 2, found 1
}
```

----------------------------------------

TITLE: Multiple Configuration Names Example in Rust
DESCRIPTION: Shows how multiple configuration names and values are checked in conditional compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/check-cfg.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#[cfg(is_embedded)]         
fn do_embedded() {}

#[cfg(has_feathers)]        
fn do_features() {}

#[cfg(has_mumble_frotz)]    
fn do_mumble_frotz() {}

#[cfg(feature = "lasers")]  
fn shoot_lasers() {}

#[cfg(feature = "monkeys")] 
fn write_shakespeare() {}
```

----------------------------------------

TITLE: Correct Enum Pattern Matching in Rust
DESCRIPTION: Example of proper pattern matching for an enum variant with multiple fields. The match pattern correctly specifies variables for both fields of the Apple variant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0023.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
enum Fruit {
    Apple(String, String),
    Pear(u32),
}

let x = Fruit::Apple(String::new(), String::new());

// Correct.
match x {
    Fruit::Apple(a, b) => {},
    _ => {}
}
```

----------------------------------------

TITLE: Observing Integer Overflow Behavior in Release Mode
DESCRIPTION: Example showing how the Rust compiler handles integer overflow in release mode (with debug assertions disabled). The overflow wraps around to 0 without a panic.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
$ cargo run --release
   Compiling hello-rust-integer v0.1.0 (/home/rcvalle/hello-rust-integer)
    Finished release [optimized] target(s) in 0.23s
     Running `target/release/hello-rust-integer`
u: 0
```

----------------------------------------

TITLE: Correctly Renaming Struct Fields in Pattern Matching
DESCRIPTION: This example shows the correct way to rename a struct field during pattern matching in Rust. To refer to the struct field by a different name, you must explicitly rename it using the 'field: new_name' syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0026.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Thing {
    x: u32,
    y: u32,
}

let thing = Thing { x: 0, y: 0 };

match thing {
    Thing { x, y: z } => {} // we renamed `y` to `z`
}
```

----------------------------------------

TITLE: Matching Nested Smart Pointers Without deref_patterns - Rust
DESCRIPTION: Illustrates the previous approach to pattern matching on nested smart pointers or references before the `deref_patterns` feature. It requires explicit dereferencing operators (`*`, `**`) and introduces intermediate variables (`b`) to match on the inner values.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/deref-patterns.md#_snippet_1

LANGUAGE: Rust
CODE:
```
let mut v = vec![Box::new(Some(0))];
if let [b] = &mut *v {
    if let Some(x) = &mut **b {
        *x += 1;
    }
}
if let [b] = &mut *v {
    if let opt_x @ Some(1) = &mut **b {
        opt_x.as_mut().map(|x| *x += 1);
    }
}
assert_eq!(v, [Box::new(Some(2))]);
```

----------------------------------------

TITLE: Using Outer Documentation Syntax in Rust
DESCRIPTION: This snippet shows how to use the outer documentation syntax in Rust for documenting functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
/// This is my first rust crate

```

----------------------------------------

TITLE: Printing Rust Compiler Sysroot
DESCRIPTION: Shows how to obtain the absolute path to the Rust compiler's sysroot directory using rustc's --print flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments/print-options.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ rustc --print sysroot a.rs
/home/[REDACTED]/.rustup/toolchains/stable-x86_64-unknown-linux-gnu
```

----------------------------------------

TITLE: Using Fully Qualified Syntax to Resolve Method Call Ambiguity
DESCRIPTION: This code snippet shows how to use fully qualified syntax to specify which trait's method to call when multiple traits define methods with the same name.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0034.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Test;

trait Trait1 {
    fn foo();
}

trait Trait2 {
    fn foo();
}

impl Trait1 for Test { fn foo() {} }
impl Trait2 for Test { fn foo() {} }

fn main() {
    <Test as Trait1>::foo()
}
```

----------------------------------------

TITLE: Run Tests in CI Pipeline with Cargo Miri (Shell)
DESCRIPTION: Command to execute the project's test suite using the Miri interpreter within a CI pipeline, typically following the installation and setup steps. This ensures automated detection of undefined behavior on every code change.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_13

LANGUAGE: Shell
CODE:
```
cargo miri test
```

----------------------------------------

TITLE: Adding Lifetime to Type in Rust
DESCRIPTION: This assist adds a new lifetime to a struct, enum or union. It introduces a lifetime parameter and applies it to references within the type definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
struct Point {
    x: &u32,
    y: u32,
}
```

LANGUAGE: rust
CODE:
```
struct Point<'a> {
    x: &'a u32,
    y: u32,
}
```

----------------------------------------

TITLE: Observing Integer Overflow Checks with Debug Assertions Enabled
DESCRIPTION: Example showing how the Rust compiler handles integer overflow when debug assertions are enabled. The program panics with an 'attempt to add with overflow' error when overflow is detected.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
$ cargo run
   Compiling hello-rust-integer v0.1.0 (/home/rcvalle/hello-rust-integer)
    Finished dev [unoptimized + debuginfo] target(s) in 0.23s
     Running `target/debug/hello-rust-integer`
thread 'main' panicked at 'attempt to add with overflow', src/main.rs:3:23
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

----------------------------------------

TITLE: Invalid Type Parameter Default Using Forward Declaration in Rust
DESCRIPTION: This code snippet demonstrates an error (E0128) caused by a generic parameter with a default value using a forward-declared identifier. The parameter T has a default value U, but U is declared after T.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0128.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo<T = U, U = ()> {
    field1: T,
    field2: U,
}
// error: generic parameters with a default cannot use forward declared
//        identifiers
```

----------------------------------------

TITLE: Multiline String Literal in Rust
DESCRIPTION: A string literal containing a newline character, demonstrating multiline string support
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/strings.txt#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
"multi
line"
```

----------------------------------------

TITLE: Generating Rustdoc Example in Rust
DESCRIPTION: This snippet demonstrates how to generate a rustdoc example when editing an item's documentation. It adds a complete example template including the use statement and an assert_eq! macro call.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_46

LANGUAGE: rust
CODE:
```
/// Adds two numbers.
pub fn add(a: i32, b: i32) -> i32 { a + b }
```

LANGUAGE: rust
CODE:
```
/// Adds two numbers.
///
/// # Examples
///
/// ```
/// use ra_test_fixture::add;
///
/// assert_eq!(add(a, b), );
/// ```
pub fn add(a: i32, b: i32) -> i32 { a + b }
```

----------------------------------------

TITLE: Re-exporting Structs in Rust
DESCRIPTION: This code snippet demonstrates how to re-export structs from private modules in Rust. The `sub_module1` and `sub_module2` are defined as private, and their respective structs (`Foo` and `AnotherFoo`) are re-exported to the crate root using `pub use`. This makes the structs available directly without exposing the module structure.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/re-exports.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```rust
// `sub_module1` and `sub_module2` are not visible outside.
mod sub_module1 {
    pub struct Foo;
}
mod sub_module2 {
    pub struct AnotherFoo;
}
// We re-export both types:
pub use crate::sub_module1::Foo;
pub use crate::sub_module2::AnotherFoo;
```
```

----------------------------------------

TITLE: Invalid Heap Allocation in Rust Constant
DESCRIPTION: Demonstrates an erroneous attempt to initialize a constant with a Vec, which is not allowed because Vec requires heap allocation at runtime. This code will fail to compile with error E0010.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0010.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
const CON : Vec<i32> = vec![1, 2, 3];
```

----------------------------------------

TITLE: Where Clause Default Format Example in Rust
DESCRIPTION: Demonstrates the default multi-line formatting of where clauses when where_single_line is false.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_81

LANGUAGE: rust
CODE:
```
impl<T> Lorem for T
where
    Option<T>: Ipsum,
{
    // body
}
```

----------------------------------------

TITLE: Erroneous Trait Implementation with Method vs Static Function Mismatch in Rust
DESCRIPTION: This example demonstrates an E0185 error where a trait defines a static function 'foo()' but the implementation incorrectly uses a method signature 'foo(&self)'. The error occurs because the signatures don't match - one is a static function and one is a method.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0185.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo();
}

struct Bar;

impl Foo for Bar {
    // error, method `foo` has a `&self` declaration in the impl, but not in
    // the trait
    fn foo(&self) {}
}
```

----------------------------------------

TITLE: Illustrating E0373 Error in Rust Thread Spawning
DESCRIPTION: This example demonstrates the E0373 error occurring when attempting to use captured variables in a closure passed to a new thread.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0373.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo() {
    let x = 0u32;
    let y = 1u32;

    let thr = std::thread::spawn(|| {
        x + y
    });
}
```

----------------------------------------

TITLE: Displaying Install Script Options
DESCRIPTION: Command to show available installation options and customization parameters for the Rust install script.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/etc/installer/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
sudo ./install.sh --help
```

----------------------------------------

TITLE: Demonstrating Lifetime Errors in Rust Structs, Enums, and Type Aliases
DESCRIPTION: This code snippet showcases various examples of incorrect and correct usage of lifetimes in Rust structs, enums, and type aliases. It highlights common mistakes that lead to the E0106 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0106.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo1 { x: &bool }
              // ^ expected lifetime parameter
struct Foo2<'a> { x: &'a bool } // correct

struct Bar1 { x: Foo2 }
              // ^^^^ expected lifetime parameter
struct Bar2<'a> { x: Foo2<'a> } // correct

enum Baz1 { A(u8), B(&bool), }
                  // ^ expected lifetime parameter
enum Baz2<'a> { A(u8), B(&'a bool), } // correct

type MyStr1 = &str;
           // ^ expected lifetime parameter
type MyStr2<'a> = &'a str; // correct
```

----------------------------------------

TITLE: Using a Getter Function in Rust
DESCRIPTION: This snippet demonstrates the use of a getter function to access a private field in Rust. A method 'get_x' is implemented to return a reference to 'x', thus allowing controlled access to the field without changing its visibility.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0616.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
mod some_module {
    pub struct Foo {
        x: u32, // So `x` is still private in here.
    }

    impl Foo {
        pub fn new() -> Foo { Foo { x: 0 } }

        // We create the getter function here:
        pub fn get_x(&self) -> &u32 { &self.x }
    }
}

let f = some_module::Foo::new();
println!("{}", f.get_x()); // ok!
```

----------------------------------------

TITLE: Incorrect Constant Initialization in Rust
DESCRIPTION: This code snippet demonstrates an erroneous way of initializing a constant in Rust. It attempts to use a non-constant value (a local variable) in the initialization, which is not allowed.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0014.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
const FOO: i32 = { let x = 0; x }; // 'x' isn't a constant nor a function!
```

----------------------------------------

TITLE: Correcting ABI Usage with Predefined ABI in Rust
DESCRIPTION: This code snippet demonstrates the correct usage of a predefined ABI ('Rust') in an external function declaration, which compiles successfully.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0703.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
extern "Rust" fn foo() {} // ok!
# fn main() { }
```

----------------------------------------

TITLE: Defining Macro with Kleene Operator in Rust
DESCRIPTION: This code snippet demonstrates the definition of a macro in Rust using the `?` Kleene operator. The macro `foo` takes one required identifier argument and one optional identifier argument. It prints the value of both arguments using `println!` if they are provided.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/walkthrough.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
macro_rules! foo {
    ($arg:ident $(, $optional_arg:ident)?) => {
        println!("{}", $arg);

        $(
            println!("{}", $optional_arg);
        )?
    }
}

fn main() {
    let x = 0;
    foo!(x); // ok! prints "0"
    foo!(x, x); // ok! prints "0 0"
}
```

----------------------------------------

TITLE: Configuring Unit Tests Module in Rust
DESCRIPTION: Shows how to set up separate test modules in Rust crates to optimize compilation times. Tests are placed in a separate file to prevent recompiling the entire crate when tests change.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/intro.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[cfg(test)]
mod tests;
```

----------------------------------------

TITLE: Resolving Trait Method Ambiguity with Concrete Types in Rust
DESCRIPTION: This solution demonstrates how to correctly call trait methods when multiple implementations exist. It shows two approaches: directly using the implementing type's namespace, and using the fully qualified syntax with the 'as' keyword for disambiguation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0790.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Coroutine {
    fn create() -> u32;
}

struct AnotherImpl;

impl Coroutine for AnotherImpl {
    fn create() -> u32 { 2 }
}

let gen1 = AnotherImpl::create();

// if there are multiple methods with same name (different traits)
let gen2 = <AnotherImpl as Coroutine>::create();
```

----------------------------------------

TITLE: Correct Value Dropping in Rust
DESCRIPTION: Proper implementation showing how to manually drop a value using std::mem::drop function when necessary. This is the correct way to explicitly drop values in Rust when required.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0040.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo {
    x: i32,
}
impl Drop for Foo {
    fn drop(&mut self) {
        println!("kaboom");
    }
}
fn main() {
    let mut x = Foo { x: -7 };
    drop(x); // ok!
}
```

----------------------------------------

TITLE: Using Partial Type Annotation with Complex Types in Rust
DESCRIPTION: This example shows how to use a partial type annotation with a placeholder (_) when dealing with more complex types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0282.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
let x: Vec<_> = "hello".chars().rev().collect();
```

----------------------------------------

TITLE: Demonstrating impl Trait in Return Position
DESCRIPTION: This snippet shows how `impl Trait` can be used in a return position to hide the concrete type while specifying trait bounds. It returns a value implementing the `Debug` trait without revealing its actual type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/type-alias-impl-trait.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use std::fmt::Debug;

fn new() -> impl Debug {
    42
}

fn main() {
    let thing = new();
    // What actually is a `thing`?
    // No idea but we know it implements `Debug`, so we can debug print it
    println!("{thing:?}");
}
```

----------------------------------------

TITLE: Erroneous Borrowing Leading to Lifetime Error in Rust
DESCRIPTION: This snippet demonstrates a common lifetime error in Rust, where a value is borrowed longer than it lives. A struct `Foo` contains an optional reference that fails when the referenced value is prematurely dropped. This example leads to a compile-time error because the reference outlives the value it points to.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0597.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
struct Foo<'a> {
    x: Option<&'a u32>,
}

let mut x = Foo { x: None };
{
    let y = 0;
    x.x = Some(&y); // error: `y` does not live long enough
}
println!("{:?}", x.x);
```

----------------------------------------

TITLE: Configuring LanguageClient-neovim for Rust
DESCRIPTION: This snippet configures LanguageClient-neovim to use rust-analyzer as the language server for Rust files.  It sets the `g:LanguageClient_serverCommands` variable to associate the `rust` filetype with the `rust-analyzer` command.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/other_editors.md#_snippet_3

LANGUAGE: Vim Script
CODE:
```
let g:LanguageClient_serverCommands = {
\ 'rust': ['rust-analyzer'],
\ }
```

----------------------------------------

TITLE: Fixing Unconstrained Type Parameter by Using Input Type Parameter
DESCRIPTION: This code shows another solution for the E0207 error by replacing the associated type with a type parameter in the trait definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0207.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
// Use a type parameter instead of an associated type here
trait Maker<Item> {
    fn make(&mut self) -> Item;
}

struct Foo<T> {
    foo: T
}

struct FooMaker;

impl<T: Default> Maker<Foo<T>> for FooMaker {
    fn make(&mut self) -> Foo<T> {
        Foo { foo: <T as Default>::default() }
    }
}
```

----------------------------------------

TITLE: String Literal Processing Pattern
DESCRIPTION: Demonstrates the preferred way to handle string literal processing by combining precondition checks with their usage.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
// GOOD
fn main() {
    let s: &str = ...;
    if let Some(contents) = string_literal_contents(s) {

    }
}

fn string_literal_contents(s: &str) -> Option<&str> {
    if s.starts_with('"') && s.ends_with('"') {
        Some(&s[1..s.len() - 1])
    } else {
        None
    }
}

// BAD
fn main() {
    let s: &str = ...;
    if is_string_literal(s) {
        let contents = &s[1..s.len() - 1];
    }
}

fn is_string_literal(s: &str) -> bool {
    s.starts_with('"') && s.ends_with('"')
}
```

----------------------------------------

TITLE: Fixed Rust Code With Explicit Lifetime Bound
DESCRIPTION: The corrected version adds a where clause to the struct definition specifying that T must outlive 'a, which satisfies the requirements of the SomeTrait implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0309.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo<'a, T>
where
    T: 'a,
{
    foo: <T as SomeTrait<'a>>::Output
}

trait SomeTrait<'a> {
    type Output;
}

impl<'a, T> SomeTrait<'a> for T
where
    T: 'a,
{
    type Output = u32;
}
```

----------------------------------------

TITLE: Boolean Precondition Check Pattern
DESCRIPTION: Shows the preferred way to check boolean preconditions by expressing the invariant directly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
// GOOD
if !(idx < len) {
    return None;
}

// BAD
if idx >= len {
    return None;
}
```

----------------------------------------

TITLE: Setting up basic benchmarking in Rust
DESCRIPTION: Demonstrates how to set up a basic benchmark test in Rust using the 'test' crate. The example shows a simple function to benchmark and the test module structure with both a regular test and a benchmark test.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/test.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(test)]

extern crate test;

pub fn add_two(a: i32) -> i32 {
    a + 2
}

#[cfg(test)]
mod tests {
    use super::*;
    use test::Bencher;

    #[test]
    fn it_works() {
        assert_eq!(4, add_two(2));
    }

    #[bench]
    fn bench_add_two(b: &mut Bencher) {
        b.iter(|| add_two(2));
    }
}
```

----------------------------------------

TITLE: String Literal Error
DESCRIPTION: This code snippet presents a Rust compiler error message indicating a missing closing quote (") in a string literal. The error message suggests that the string literal is not properly terminated, leading to a compilation failure. The literal in the error message is "🦀.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_string_with_ferris.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"\"🦀" error: Missing trailing `\"` symbol to terminate the string literal"
```

----------------------------------------

TITLE: Printing "Hello, world!" in Rust
DESCRIPTION: This snippet demonstrates a basic Rust program that prints "Hello, world!" to the console. It defines the `main` function, which is the entry point of the program, and uses the `println!` macro to print the message.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/include-bytes-deps/input.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"# Hello, world!"
```

----------------------------------------

TITLE: Visual Style Alignment for Function Arguments in Rust
DESCRIPTION: Demonstrates the 'Visual' alignment style for function arguments. In this style, arguments after the first line are aligned with the start of the first argument.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_30

LANGUAGE: rust
CODE:
```
fn lorem() {}

fn lorem(ipsum: usize) {}

fn lorem(ipsum: usize,
         dolor: usize,
         sit: usize,
         amet: usize,
         consectetur: usize,
         adipiscing: usize,
         elit: usize) {
    // body
}
```

----------------------------------------

TITLE: Incorrect Generic Type Declaration in Rust
DESCRIPTION: Example showing incorrect syntax using parentheses for generic type Vec. This code will fail to compile with error E0214.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0214.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let v: Vec(&str) = vec!["foo"];
```

----------------------------------------

TITLE: Incorrect Generic Argument Order in Rust
DESCRIPTION: This code snippet demonstrates an erroneous declaration of generic arguments where the type argument is provided before the lifetime argument, which does not match the order in the struct definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0747.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct S<'a, T>(&'a T);

type X = S<(), 'static>; // error: the type argument is provided before the
                         // lifetime argument
```

----------------------------------------

TITLE: Demonstrating E0049 Error with Incorrect Trait Implementation in Rust
DESCRIPTION: An example showing an erroneous trait implementation where a method is implemented with the wrong number of type parameters. The trait defines the method with one type parameter, but the implementation omits it, causing compilation error E0049.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0049.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo<T: Default>(x: T) -> Self;
}

struct Bar;

// error: method `foo` has 0 type parameters but its trait declaration has 1
// type parameter
impl Foo for Bar {
    fn foo(x: bool) -> Self { Bar }
}
```

----------------------------------------

TITLE: Invalid Inherent Implementation Example in Rust
DESCRIPTION: Demonstrates the incorrect attempt to create an inherent implementation for Vec<u8>, which fails because Vec is defined in the standard library.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0116.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
impl Vec<u8> { } // error
```

----------------------------------------

TITLE: Defining a Trait with Lifetime Parameter in Rust
DESCRIPTION: This snippet defines a trait called Trait that has a lifetime parameter 'a. It establishes the structure for implementing traits that require lifetimes for their types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_13

LANGUAGE: rust
CODE:
```
trait Trait<'a> {}
```

----------------------------------------

TITLE: Pattern Matching with Guards in Rust
DESCRIPTION: Shows how to use pattern guards to check for equality between values while avoiding multiple bindings of the same identifier.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0416.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
# let (A, B, C) = (1, 2, 3);
match (A, B, C) {
    (x, x2, see) if x == x2 => { /* A and B are equal, do one thing */ }
    (y, z, see) => { /* A and B not equal; do another thing */ }
}
```

----------------------------------------

TITLE: Example of an Unterminated Rust Raw String Literal
DESCRIPTION: This snippet demonstrates an invalid Rust raw string literal (`r##"..."##`). The `STRING` prefix likely indicates its context within a test or parser definition. The literal `r##"🦀` is unterminated because it lacks the closing `"##` sequence, leading to a compile-time error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_raw_string_with_ferris.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
r##"🦀
```

----------------------------------------

TITLE: Type Inference Example in Rust
DESCRIPTION: This code demonstrates how to achieve a similar result using type inference in Rust. Instead of explicitly specifying the type with `typeof`, the compiler infers the type based on the value assigned to the variable `x`. In this case, `x` will be inferred as `i32`.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0516.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
fn main() {
    let x = 92;
}
```
```

----------------------------------------

TITLE: Solution 1: Renaming Local Item in Rust
DESCRIPTION: Demonstrates how to resolve the naming conflict by renaming the local struct declaration to a different name.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0260.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
extern crate core;

struct xyz;
```

----------------------------------------

TITLE: Complete PGO Workflow with Cargo
DESCRIPTION: Full 4-step workflow for profile-guided optimization in a Cargo project. Shows how to use RUSTFLAGS to enable PGO for all crates in the project, with considerations for build scripts and path handling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/profile-guided-optimization.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
# STEP 0: Make sure there is no left-over profiling data from previous runs
rm -rf /tmp/pgo-data

# STEP 1: Build the instrumented binaries
RUSTFLAGS="-Cprofile-generate=/tmp/pgo-data" \
    cargo build --release --target=x86_64-unknown-linux-gnu

# STEP 2: Run the instrumented binaries with some typical data
./target/x86_64-unknown-linux-gnu/release/myprogram mydata1.csv
./target/x86_64-unknown-linux-gnu/release/myprogram mydata2.csv
./target/x86_64-unknown-linux-gnu/release/myprogram mydata3.csv

# STEP 3: Merge the `.profraw` files into a `.profdata` file
llvm-profdata merge -o /tmp/pgo-data/merged.profdata /tmp/pgo-data

# STEP 4: Use the `.profdata` file for guiding optimizations
RUSTFLAGS="-Cprofile-use=/tmp/pgo-data/merged.profdata" \
    cargo build --release --target=x86_64-unknown-linux-gnu
```

----------------------------------------

TITLE: Corrected Lifetime Binding in Function
DESCRIPTION: Resolves the lifetime parameter issue by either introducing the lifetime in input types or using `'static` lifetime
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0582.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn bar<F, G>(t: F, u: G)
    where F: for<'a> Fn(&'a i32) -> Option<&'a i32>,
          G: Fn(i32) -> Option<&'static i32>,
{
}

fn main() { }
```

----------------------------------------

TITLE: Using Partial Type Specification with Turbofish in Rust
DESCRIPTION: This example shows how to use a partial type specification with the turbofish syntax and a placeholder.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0282.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
let x = "hello".chars().rev().collect::<Vec<_>>();
```

----------------------------------------

TITLE: Rust Error Handling with Formatter
DESCRIPTION: Documents the error handling behavior for string formatting operations. Specifies that Err should only be returned when the provided Formatter returns Err, as string formatting itself is infallible. Errors typically occur only due to underlying stream writing failures.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/core/src/fmt/fmt_trait_method_doc.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Errors\n\nThis function should return [`Err`] if, and only if, the provided [`Formatter`] returns [`Err`].\nString formatting is considered an infallible operation; this function only\nreturns a [`Result`] because writing to the underlying stream might fail and it must\nprovide a way to propagate the fact that an error has occurred back up the stack.
```

----------------------------------------

TITLE: Valid Trait Object Declaration in Rust
DESCRIPTION: Shows the correct way to declare a trait object by specifying at least one trait. In this example, the Copy trait is used to create a valid trait object declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0224.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
type Foo = dyn 'static + Copy;
```

----------------------------------------

TITLE: Demonstrating Correct Full Reinitialization in Rust
DESCRIPTION: Shows the correct way to reinitialize a structure after it has been dropped by creating a new instance of the structure with all fields initialized.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0383.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo {
    a: u32,
}
impl Drop for Foo {
    fn drop(&mut self) { /* ... */ }
}

let mut x = Foo { a: 1 };
drop(x);
x = Foo { a: 2 };
```

----------------------------------------

TITLE: Running benchmark tests with cargo bench
DESCRIPTION: Shows the command and output for running benchmark tests in Rust using cargo bench. The output displays both regular tests (which are ignored during benchmarking) and the benchmark results with timing information.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/test.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ cargo bench
   Compiling adder v0.0.1 (file:///home/steve/tmp/adder)
     Running target/release/adder-91b3e234d4ed382a

running 2 tests
test tests::it_works ... ignored
test tests::bench_add_two ... bench:         1 ns/iter (+/- 0)

test result: ok. 0 passed; 0 failed; 1 ignored; 1 measured
```

----------------------------------------

TITLE: Union with Destructor - Compile Fail (E0740)
DESCRIPTION: This Rust code snippet demonstrates a compile-time error E0740.  It defines a union `Test` containing a field `a` of type `A`. The struct `A` implements the `Drop` trait, thus having a destructor. Unions are not allowed to contain fields with destructors because Rust cannot reliably determine when to call them, leading to undefined behavior and memory unsafety. This results in a compile-time error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0740.md#_snippet_0

LANGUAGE: rust
CODE:
```
union Test {
    a: A, // error!
}

#[derive(Debug)]
struct A(i32);

impl Drop for A {
    fn drop(&mut self) { println!("A"); }
}
```

----------------------------------------

TITLE: Converting For Loop to Iterator::for_each in Rust
DESCRIPTION: This assist converts a for loop into a for_each loop on the Iterator. It replaces the traditional for loop syntax with a method call on the iterable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_20

LANGUAGE: rust
CODE:
```
fn main() {
    let x = vec![1, 2, 3];
    for v in x {
        let y = v * 2;
    }
}
```

----------------------------------------

TITLE: Running Individual Tests
DESCRIPTION: Commands to run individual tests, either by specifying a file path or using test arguments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
./x test compiler/rustc_data_structures/src/thin_vec/tests.rs
```

LANGUAGE: text
CODE:
```
./x test tests/ui --test-args issue-1234
```

----------------------------------------

TITLE: Fixing Unused Type Parameter by Removing It in Rust Enum
DESCRIPTION: This code snippet demonstrates how to fix the E0392 error by removing the unused type parameter from the enum declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0392.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
enum Foo {
    Bar,
}
```

----------------------------------------

TITLE: Range Expression Line Breaking - Rust
DESCRIPTION: Shows proper formatting for range expressions that require line breaks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_29

LANGUAGE: rust
CODE:
```
a_long_expression
    ..another_long_expression
```

----------------------------------------

TITLE: Valid Primitive Type Casting
DESCRIPTION: Shows correct type casting between numeric primitives and pointer types, demonstrating Rust's allowed casting operations for primitive types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0605.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
let x = 0u8;
x as u32; // ok!

let v = core::ptr::null::<u8>();
v as *const i8; // ok!
```

----------------------------------------

TITLE: Trait Implementation with Associated Type Definition in Rust
DESCRIPTION: This code implements the `Identity` trait for all types `T`, defining the associated type `Out` as `T` itself.  The ellipsis signifies the omitted implementation details. This shows a generic implementation of a trait where the associated type is the implementing type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/variance.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
"impl<T> Identity for T { type Out = T; ... }"
```

----------------------------------------

TITLE: Pattern Matching with Insufficient Elements in Rust
DESCRIPTION: This code snippet demonstrates a pattern matching error in Rust, where the pattern requires more elements than are present in the matched array. It highlights the importance of ensuring that an array has enough elements to satisfy the pattern's requirements. The error occurs because the array 'r' has only 2 elements, while the pattern demands at least 3.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0528.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
compile_fail,E0528
let r = &[1, 2];
match r {
    &[a, b, c, rest @ ..] => { // error: pattern requires at least 3
                               //        elements but array has 2
        println!("a={}, b={}, c={} rest={:?}", a, b, c, rest);
    }
}
```

----------------------------------------

TITLE: Ordering of Imports
DESCRIPTION: This code example illustrates the proper organization of module declarations and imports in Rust to enhance code readability and maintainability for contributors.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_18

LANGUAGE: rust
CODE:
```
mod x;
mod y;

// First std.
use std::{ ... }

// Second, external crates...
use crate_foo::{ ... }
use crate_bar::{ ... }

// Then current crate.
use crate::{}

// Finally, parent and child modules...
use super::{}

// Re-exports are treated as item definitions...
```

----------------------------------------

TITLE: Item-Level Import Granularity in Rust
DESCRIPTION: Demonstrates the imports_granularity setting set to Item, which flattens all imports so that each item has its own use statement.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_53

LANGUAGE: rust
CODE:
```
use foo::a;
use foo::b;
use foo::b::f;
use foo::b::g;
use foo::c;
use foo::d::e;
use qux::h;
use qux::i;
```

----------------------------------------

TITLE: Erroneous Closure Trait Implementation in Rust
DESCRIPTION: Demonstrates a closure that fails compilation due to not implementing the expected Fn trait, causing a type mismatch with the function's trait bound
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0525.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct X;

fn foo<T>(_: T) {}
fn bar<T: Fn(u32)>(_: T) {}

fn main() {
    let x = X;
    let closure = |_| foo(x); // error: expected a closure that implements
                              //        the `Fn` trait, but this closure only
                              //        implements `FnOnce`
    bar(closure);
}
```

----------------------------------------

TITLE: Method Referencing Self Type in Return Example in Rust
DESCRIPTION: Shows a trait implementation that violates dyn-compatibility by returning Self. This pattern is problematic for trait objects because the concrete return type cannot be determined at compile time.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Trait {
    fn foo(&self) -> Self;
}

impl Trait for String {
    fn foo(&self) -> Self {
        "hi".to_owned()
    }
}

impl Trait for u8 {
    fn foo(&self) -> Self {
        1
    }
}
```

----------------------------------------

TITLE: Invalid Empty Match Expression with Non-Empty Type in Rust
DESCRIPTION: This code example shows an invalid empty match expression. Since Option<String> is a non-empty type (it can be Some or None), an empty match is not allowed as it fails to handle possible values.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0002.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo(x: Option<String>) {
    match x {
        // empty
    }
}
```

----------------------------------------

TITLE: Slice Pattern Matching in Rust
DESCRIPTION: Alternative solution using a slice reference instead of an array, which allows for flexible pattern matching with rest patterns.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0730.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn is_123(x: &[u32]) -> bool { // We use a slice
    match x {
        [1, 2, ..] => true, // ok!
        _ => false
    }
}
```

----------------------------------------

TITLE: Configuring Environment Variables for Rust Analyzer in VS Code
DESCRIPTION: This JSON configuration sets the RUSTUP_TOOLCHAIN environment variable to 'stable' for rust-analyzer in VS Code or coc-rust-analyzer. It ensures that rust-analyzer uses the stable toolchain regardless of project-specific overrides.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/installation.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{ "rust-analyzer.server.extraEnv": { "RUSTUP_TOOLCHAIN": "stable" } }
```

----------------------------------------

TITLE: Generating Mutable Getter Method in Rust
DESCRIPTION: This snippet shows how to generate a mutable getter method for a struct field. It creates an impl block with a method that returns a mutable reference to the field value.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_57

LANGUAGE: rust
CODE:
```
struct Person {
    name: String,
}
```

LANGUAGE: rust
CODE:
```
struct Person {
    name: String,
}

impl Person {
    fn name_mut(&mut self) -> &mut String {
        &mut self.name
    }
}
```

----------------------------------------

TITLE: Demonstrating E0310 Error with Missing Lifetime Constraint in Rust
DESCRIPTION: This example shows incorrect code that will fail to compile with E0310 error. The struct Foo has a type parameter T without a lifetime constraint, but tries to store a static reference to T.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0310.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// This won't compile because T is not constrained to the static lifetime
// the reference needs
struct Foo<T> {
    foo: &'static T
}
```

----------------------------------------

TITLE: Profiling Cargo Check Performance
DESCRIPTION: Command to profile the performance of cargo check on a specific crate by touching a source file to force recompilation and using perf to record execution data. This focuses on just the target crate's compilation time.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
touch src/lib.rs
CARGO_INCREMENTAL=0 perf record -F99 --call-graph dwarf cargo rustc --profile check --lib
```

----------------------------------------

TITLE: Demonstrating E0584 Error with Misplaced Doc Comments in Rust
DESCRIPTION: This code example shows the incorrect placement of a doc comment inside a trait definition rather than before the item it documents, resulting in compile error E0584.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0584.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Island {
    fn lost();

    /// I'm lost!
}
```

----------------------------------------

TITLE: Storing Temporaries in Aggregate Structures in Rust
DESCRIPTION: This example demonstrates how temporaries stored in aggregate structures like tuples are not dropped until the end of the enclosing block, providing another way to extend temporary lifetimes.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0716.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
// Here, two temporaries are created, but
// as they are stored directly into `value`,
// they are not dropped until the end of the
// enclosing block.
fn foo() -> i32 { 22 }
let value = (&foo(), &foo());
```

----------------------------------------

TITLE: Incorrect Self Import in Rust
DESCRIPTION: Shows incorrect usage of 'self' keyword in a use declaration that results in compilation error E0429.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0429.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use std::fmt::self; // error: `self` imports are only allowed within a { } list
```

----------------------------------------

TITLE: Correcting Visibility Qualifier Usage in Rust
DESCRIPTION: This code snippet demonstrates the correct way to structure the same code without using visibility qualifiers where they are not allowed. It shows proper implementation for enum variants, impl blocks, and trait implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0449.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Bar;

trait Foo {
    fn foo();
}

enum Baz {
    // Enum variants share the visibility of the enum they are in, so
    // `pub` is not allowed here
    Qux,
}

// Directly implemented methods share the visibility of the type itself,
// so `pub` is not allowed here
impl Bar {}

// Trait methods share the visibility of the trait, so `pub` is not
// allowed in either case
impl Foo for Bar {
    fn foo() {}
}
```

----------------------------------------

TITLE: Erroneous Implementation on Primitive Type in Rust
DESCRIPTION: This code snippet demonstrates an incorrect attempt to implement methods directly on a primitive type (*mut Foo), which is not allowed in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0390.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo {
    x: i32
}

impl *mut Foo {}
// error: cannot define inherent `impl` for primitive types
```

----------------------------------------

TITLE: Importing Enum Variants
DESCRIPTION: Example showing how to import enum variants into scope using the use statement for unqualified access.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0170.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
use Method::*;
enum Method { GET, POST }
# fn main() {}
```

----------------------------------------

TITLE: Implementing Copy on a struct with non-Copy field
DESCRIPTION: An example showing an E0204 error when trying to implement the Copy trait on a struct that contains a Vec<u32> field, which doesn't implement Copy.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0204.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo {
    foo: Vec<u32>,
}

impl Copy for Foo { } // error!
```

----------------------------------------

TITLE: Avoiding Intermediate Collections in Recursion
DESCRIPTION: This code illustrates an accumulator approach in recursively obtaining nodes, promoting efficiency by avoiding the creation of unnecessary intermediate collections.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_16

LANGUAGE: rust
CODE:
```
// GOOD
pub fn reachable_nodes(node: Node) -> FxHashSet<Node> {
    let mut res = FxHashSet::default();
    go(&mut res, node);
    res
}
fn go(acc: &mut FxHashSet<Node>, node: Node) {
    acc.insert(node);
    for n in node.neighbors() {
        go(acc, n);
    }
}

// BAD
pub fn reachable_nodes(node: Node) -> FxHashSet<Node> {
    let mut res = FxHashSet::default();
    res.insert(node);
    for n in node.neighbors() {
        res.extend(reachable_nodes(n));
    }
    res
}
```

----------------------------------------

TITLE: Setting Runnable Environment Variables in VS Code (JSON)
DESCRIPTION: This snippet demonstrates how to configure environment variables for runnable commands within the VS Code editor. It allows users to define environment variables that are passed to rust-analyzer during the execution of runnables. Requires VS Code and the Rust extension. The output provides environment variables to run the program, either for all runnables or for specific runnables with masks. These configurations are added within the settings.json file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/editor_features.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
    "rust-analyzer.runnables.extraEnv": {
        "RUN_SLOW_TESTS": "1"
    }
}
```

----------------------------------------

TITLE: Adding Turbo Fish to Generic Function Call in Rust
DESCRIPTION: This assist adds `::<_>` to a call of a generic method or function. It inserts the turbo fish syntax with a placeholder for the type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
fn make<T>() -> T { todo!() }
fn main() {
    let x = make();
}
```

LANGUAGE: rust
CODE:
```
fn make<T>() -> T { todo!() }
fn main() {
    let x = make::<${0:_}>();
}
```

----------------------------------------

TITLE: Correct Implementation of Safe Trait in Rust
DESCRIPTION: Shows the correct way to implement a safe trait without the unsafe marker. This is the proper implementation that will compile successfully.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0199.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo;

trait Bar { }

impl Bar for Foo { } // ok!
```

----------------------------------------

TITLE: Corrected Example: Resolving Lifetime Shadowing in Rust
DESCRIPTION: This code demonstrates how to resolve the lifetime shadowing error.  By renaming the lifetime parameter in the `f` function to `'b`, we avoid shadowing the lifetime `'a` defined at the `impl` level, allowing the code to compile successfully. The lifetime `'b` is independent and distinct from `'a`.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0496.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
struct Foo<'a> {
    a: &'a i32,
}

impl<'a> Foo<'a> {
    fn f<'b>(x: &'b i32) { // ok!
    }
}

fn main() {
}
```
```

----------------------------------------

TITLE: Demonstrating E0412 Error in Rust
DESCRIPTION: This snippet shows three examples of code that will fail to compile due to type names not being in scope. It includes attempts to implement an undefined struct, use an undeclared type in a trait, and use an undefined type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0412.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
impl Something {} // error: type name `Something` is not in scope

// or:

trait Foo {
    fn bar(N); // error: type name `N` is not in scope
}

// or:

fn foo(x: T) {} // type name `T` is not in scope
```

----------------------------------------

TITLE: Dereferencing Raw Pointers in Rust
DESCRIPTION: This snippet demonstrates how to safely dereference raw pointers in Rust using unsafe blocks. It shows the process for both mutable and immutable pointers.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let mut num = 5;

let r1 = &num as *const i32;
let r2 = &mut num as *mut i32;

unsafe {
    println!("{}, {}", *r1, *r2);
}
```

----------------------------------------

TITLE: Correctly Initializing Struct with All Fields in Rust
DESCRIPTION: This code snippet shows the correct way to initialize a struct by providing all required fields. Both 'x' and 'y' fields are specified, resulting in a valid initialization.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0063.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo {
    x: i32,
    y: i32,
}

fn main() {
    let x = Foo { x: 0, y: 0 }; // ok!
}
```

----------------------------------------

TITLE: Demonstrating Unreachable Match Arms in Rust
DESCRIPTION: This code snippet illustrates a match expression with unreachable arms. The last arm (_ => {...}) will never be executed because all possible cases are handled by the preceding patterns.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0001.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
match Some(0) {
    Some(bar) => {/* ... */}
    x => {/* ... */} // This handles the `None` case
    _ => {/* ... */} // All possible cases have already been handled
}
```

----------------------------------------

TITLE: Correct Raw String Termination in Rust
DESCRIPTION: Example of correctly terminated raw string where the number of hash symbols matches at both the beginning and end of the string literal.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0748.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let dolphins = r#"Dolphins!"#; // One `#` at the beginning, one at the end so
                               // all good!
```

----------------------------------------

TITLE: Trait with Generic Method Parameters in Rust
DESCRIPTION: Demonstrates a trait with generic method parameters, which can cause dyn-compatibility issues due to the need to create vtable entries for potentially infinite type combinations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
trait Trait {
    fn foo<T>(&self, on: T);
    // more methods
}

impl Trait for String {
    fn foo<T>(&self, on: T) {
        // implementation 1
    }
}

impl Trait for u8 {
    fn foo<T>(&self, on: T) {
        // implementation 2
    }
}

// 8 more implementations
```

----------------------------------------

TITLE: Creating Search Index Aliases for Documentation
DESCRIPTION: This snippet shows how the #[doc(alias = ...)] attribute can be applied to a struct to create alternative names in the search index, improving user accessibility.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_12

LANGUAGE: rust
CODE:
```
"""rust,no_run\n#[doc(alias = \"TheAlias\")]\npub struct SomeType;\n"
```

----------------------------------------

TITLE: Defining a Generic Function in Rust
DESCRIPTION: This snippet demonstrates the definition of a generic function `foo` with a type parameter `T`. It shows how the function item type is constructed with a generic type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<T: Sized>(a: T) -> T { 
    # a
    /* snip */
}
```

----------------------------------------

TITLE: Correct Trait Implementation in Rust
DESCRIPTION: This example demonstrates the correct way to implement a trait by providing implementations for all required methods. It shows how to properly implement the 'foo()' method for the 'Foo' trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0046.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo();
}

struct Bar;

impl Foo for Bar {
    fn foo() {} // ok!
}
```

----------------------------------------

TITLE: Incorrect Trait Object Declaration without Associated Type
DESCRIPTION: Example showing erroneous code where an associated type is not specified for a trait object, resulting in compilation error E0191.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0191.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Trait {
    type Bar;
}

type Foo = dyn Trait; // error: the value of the associated type `Bar` (from
                      //        the trait `Trait`) must be specified
```

----------------------------------------

TITLE: Demonstrating E0764 Error: Using Mutable Reference in Rust Constant
DESCRIPTION: This code snippet shows an erroneous attempt to use a mutable reference in a constant, which triggers the E0764 error in Rust. This is not allowed to prevent the creation of constants with mutable values.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0764.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    const OH_NO: &'static mut usize = &mut 1; // error!
}
```

----------------------------------------

TITLE: Correcting Lifetime Bounds in Rust
DESCRIPTION: This code snippet provides a corrected version of the previous example, where the lifetime of `'SnowWhite` is explicitly stated to outlive the lifetime of `'kiss`. This adjustment ensures compliance with Rust’s strict lifetime rules, allowing the code to compile successfully without errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0478.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
trait Wedding<'t>: 't { }

struct Prince<'kiss, 'SnowWhite: 'kiss> { // You say here that 'SnowWhite
                                          // must live longer than 'kiss.
    child: Box<Wedding<'kiss> + 'SnowWhite>, // And now it's all good!
}
```

----------------------------------------

TITLE: Correct Implementation of Unsafe Trait in Rust
DESCRIPTION: This code snippet shows the correct way to implement an unsafe trait by marking the implementation as unsafe. This resolves the E0200 error and allows the code to compile successfully.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0200.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo;

unsafe trait Bar { }

unsafe impl Bar for Foo { } // ok!
```

----------------------------------------

TITLE: Identifying Incorrect Lifetime Usage in Rust
DESCRIPTION: This snippet showcases incorrect usage of lifetimes in Rust where a reserved lifetime name `'_` and `&T` without an explicit lifetime name are used. The erroneous usage is annotated, illustrating the compile error caused by these practices.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0637.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
```compile_fail,E0106,E0637
fn underscore_lifetime<'_>(str1: &'_ str, str2: &'_ str) -> &'_ str {
                     //^^ `'_` is a reserved lifetime name
    if str1.len() > str2.len() {
        str1
    } else {
        str2
    }
}

fn without_explicit_lifetime<T>()
where
    T: Iterator<Item = &u32>,
                     //^ `&` without an explicit lifetime name
{
}

fn without_hrtb<T>()
where
    T: Into<&u32>,
          //^ `&` without an explicit lifetime name
{
}
```
```

----------------------------------------

TITLE: Resolving Associated Type Mismatch by Changing Trait Implementation
DESCRIPTION: This solution resolves the E0271 error by modifying the trait implementation for i8 to match the function's constraint. The associated type in the implementation is changed to u32.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0271.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait Trait { type AssociatedType; }

fn foo<T>(t: T) where T: Trait<AssociatedType = u32> {
    println!("in foo");
}

impl Trait for i8 { type AssociatedType = u32; }

foo(3_i8);
```

----------------------------------------

TITLE: Installing rust-analyzer VSIX via Command Line (Shell)
DESCRIPTION: Installs the rust-analyzer VS Code extension from a downloaded .vsix file using the `code` command-line tool. This method is an alternative to installing from the marketplace. Requires the VS Code command-line tool (`code`) to be in the system PATH and the correct path to the downloaded `.vsix` file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/vs_code.md#_snippet_0

LANGUAGE: shell
CODE:
```
$ code --install-extension /path/to/rust-analyzer.vsix
```

----------------------------------------

TITLE: Running Clippy with Cargo
DESCRIPTION: Basic command to run Clippy using cargo subcommand.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/usage.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cargo clippy
```

----------------------------------------

TITLE: String Literal Missing Quote in Rust
DESCRIPTION: This error message indicates that a string literal is missing its closing quotation mark.  When the Rust compiler encounters an unclosed string, it throws this error to prevent undefined behavior.  Fixing the error involves adding the missing `"` symbol to properly terminate the string.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_string_with_ascii_escape.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"\"\\x7f" error: Missing trailing `\"` symbol to terminate the string literal"
```

----------------------------------------

TITLE: Demonstrating Rust Compiler Error E0284 with Type Inference
DESCRIPTION: This code snippet shows an example that triggers the E0284 error. It attempts to add a u32 value converted to an unknown type to a u64 value, causing ambiguity in type inference.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0284.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let n: u32 = 1;
    let mut d: u64 = 2;
    d = d + n.into();
}
```

----------------------------------------

TITLE: Prefer Using General Types
DESCRIPTION: The code illustrates the preference for more general types on the left, highlighting the benefit of maintaining generality and consistency in type declarations across the code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
// GOOD      BAD
&[T]         &Vec<T>
&str         &String
Option<&T>   &Option<T>
&Path        &PathBuf
```

----------------------------------------

TITLE: Incorrect Enum Pattern Binding Example
DESCRIPTION: An erroneous code example showing incorrect pattern matching where enum variants are not properly qualified, leading to compilation error E0170.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0170.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
# #![deny(warnings)]
enum Method {
    GET,
    POST,
}

fn is_empty(s: Method) -> bool {
    match s {
        GET => true,
        _ => false
    }
}

fn main() {}
```

----------------------------------------

TITLE: Correct Break Statement with Loop Label
DESCRIPTION: Proper implementation showing how to break from a labeled loop by specifying the loop's label in the break statement.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0695.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
'l: loop {
    'a: {
        break 'l;
    }
}
```

----------------------------------------

TITLE: Erroneous Multi-binding of Struct Fields in Rust (E0025)
DESCRIPTION: This code demonstrates the error that occurs when attempting to bind the same struct field multiple times in a pattern. The compiler raises E0025 when the field 'a' is bound to both 'x' and 'y' variables.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0025.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo {
    a: u8,
    b: u8,
}

fn main(){
    let x = Foo { a:1, b:2 };

    let Foo { a: x, a: y } = x;
    // error: field `a` bound multiple times in the pattern
}
```

----------------------------------------

TITLE: Invalid Copy Trait Implementation Example in Rust
DESCRIPTION: Shows an erroneous attempt to implement the Copy trait on a static mutable reference type &'static mut Bar, which is not allowed. The Copy trait can only be implemented for structs, enums, or unions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0206.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[derive(Copy, Clone)]
struct Bar;

impl Copy for &'static mut Bar { } // error!
```

----------------------------------------

TITLE: Correcting Cast: Dereferencing &u8 in Rust
DESCRIPTION: Shows the proper way to cast a `&u8` to `u32` by first dereferencing the reference to access the underlying value. This example highlights a common pattern of dereferencing before casting to ensure type compatibility.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0606.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
"let x = &0u8;\nlet y: u32 = *x as u32; // We dereference it first and then cast it.\n"
```

----------------------------------------

TITLE: Valid Binary Number Declaration in Rust
DESCRIPTION: Corrected example showing proper syntax for declaring a binary number literal with the 0b prefix followed by valid binary digits.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0768.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let s: i32 = 0b1; // ok!
```

----------------------------------------

TITLE: Accessing Struct Fields with Generics
DESCRIPTION: This code snippet demonstrates how to use generic types in structs and access their fields. It shows how to instantiate generic parameters for struct Foo with types u32 and f32, particularly emphasizing how to access the field 'x' which is a vector of type A within Foo. It requires the Rust standard library for managing vectors. The output will be the value of type Vec<u32> that is accessible through 'foo.x'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/early_binder.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Foo<A, B> {
    x: Vec<A>,
    ..
}

fn bar(foo: Foo<u32, f32>) { 
    // the type of `foo`'s `x` field before instantiating it would be:
    // `EarlyBinder(Vec<A/#0>)`
    // we then instantiate the binder with `[u32, f32]` as those are the
    // generic arguments to the `Foo` struct. This results in a type of:
    // `Vec<u32>`
    let y = foo.x;
}
```

----------------------------------------

TITLE: Rebasing Feature Branch on Upstream Master (Console)
DESCRIPTION: Pulls changes from the specified remote and branch (`https://github.com/rust-lang/rust.git master`) and reapplies your local commits on top of the new tip of the pulled branch. This is the standard way to keep your feature branch up-to-date with the main repository and avoid merge commits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_3

LANGUAGE: console
CODE:
```
git pull --rebase https://github.com/rust-lang/rust.git master
```

----------------------------------------

TITLE: Inlining Rules Example in Rust
DESCRIPTION: This code shows how inlining works based on module visibility.  `Public` struct inside `private_module` is re-exported in the public module `public_mod` and then re-exported from the crate root. The first re-export of `Public` will be inlined, the second one will not be inlined because `public_mod` is public.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/re-exports.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
```rust
mod private_module {
    pub struct Public;
}
pub mod public_mod {
    // `Public` will inlined here since `private_module` is private.
    pub use super::private_module::Public;
}
// `Public` will not be inlined here since `public_mod` is public.
pub use self::public_mod::Public;
```
```

----------------------------------------

TITLE: Demonstrating Try Blocks in Rust
DESCRIPTION: This code snippet shows how to use try blocks in Rust. It demonstrates successful and unsuccessful parsing of integers within try blocks, using the ? operator for error propagation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/try-blocks.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(try_blocks)]

use std::num::ParseIntError;

let result: Result<i32, ParseIntError> = try {
    "1".parse::<i32>()?
        + "2".parse::<i32>()?
        + "3".parse::<i32>()?
};
assert_eq!(result, Ok(6));

let result: Result<i32, ParseIntError> = try {
    "1".parse::<i32>()?
        + "foo".parse::<i32>()?
        + "3".parse::<i32>()?
};
assert!(result.is_err());
```

----------------------------------------

TITLE: Demonstrating Unterminated Byte String Error in Rust
DESCRIPTION: This code snippet shows an erroneous example of an unterminated byte string in Rust, which will result in a compilation error (E0766).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0766.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let s = b"; // error!
```

----------------------------------------

TITLE: Incorrect Usage of Derive Attribute on Trait in Rust
DESCRIPTION: This code snippet demonstrates an erroneous application of the `derive` attribute on a trait's associated type, which is not allowed in Rust. The `derive` attribute can only be used on structs, unions, or enums.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0774.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    #[derive(Clone)] // error!
    type Bar;
}
```

----------------------------------------

TITLE: Install Miri Component using Rustup (Shell)
DESCRIPTION: Adds the `miri` component to the specified or active Rust nightly toolchain using the `rustup` toolchain manager. This command is the primary way to make Miri available on your system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
rustup +nightly component add miri
```

----------------------------------------

TITLE: Two-Phase Borrows Example in Rust
DESCRIPTION: This example demonstrates the use of two-phase borrows in Rust. It showcases scenarios where these borrows are automatically generated, such as in method calls with mutable reference receivers, mutable reborrows in function arguments, and overloaded compound assignment operators.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/two_phase_borrows.md#2025-04-21_snippet_0

LANGUAGE: rust2018
CODE:
```
// In the source code

// Case 1:
let mut v = Vec::new();
v.push(v.len());
let r = &mut Vec::new();
r.push(r.len());

// Case 2:
std::mem::replace(r, vec![1, r.len()]);

// Case 3:
let mut x = std::num::Wrapping(2);
x += x;
```

----------------------------------------

TITLE: Obtaining Address Using `&v as *const _ as usize` in Rust
DESCRIPTION: This snippet demonstrates casting a reference to a value `v` to a raw pointer `*const _`, then converting it to a `usize`. It shows how this method derives a variable's address representation for comparison. The approach is straightforward but can obscure pointer provenance and lead to compiler confusion when comparing addresses from different allocations. Dependencies include the core Rust language and standard library.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/codegen/equal-pointers-unequal/README.md#_snippet_0

LANGUAGE: Rust
CODE:
```
&v as *const _ as usize
```

----------------------------------------

TITLE: Avoiding Monomorphization
DESCRIPTION: This snippet emphasizes the need to minimize extensive use of type parameters at crate boundaries to reduce compile times and prevent inefficient compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_17

LANGUAGE: rust
CODE:
```
// GOOD
fn frobnicate(f: impl FnMut()) {
    frobnicate_impl(&mut f)
}
fn frobnicate_impl(f: &mut dyn FnMut()) {
    // lots of code
}

// BAD
fn frobnicate(f: impl FnMut()) {
    // lots of code
}
```

----------------------------------------

TITLE: Explicit Temporary Variable in Rust to Illustrate Dropping
DESCRIPTION: This snippet rewrites the previous example to use an explicit temporary variable, showing more clearly when the temporary is created and dropped. It demonstrates why the borrow fails due to the temporary being freed too soon.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0716.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# fn foo() -> i32 { 22 }
# fn bar(x: &i32) -> &i32 { x }
let p = {
  let tmp = foo(); // the temporary
  bar(&tmp) // error: `tmp` does not live long enough
}; // <-- tmp is freed as we exit this block
let q = p;
```

----------------------------------------

TITLE: Example of Trait with Lifetime Parameter in Rust
DESCRIPTION: Demonstrates how trait objects can hold internal data with lifetimes through a simple example using MyTrait and MyStruct.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0772.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait MyTrait {}

struct MyStruct<'a>(&'a i32);

impl<'a> MyTrait for MyStruct<'a> {}
```

----------------------------------------

TITLE: Defining Byte String Literals in Rust
DESCRIPTION: This snippet illustrates how to define byte string literals in Rust, using both standard `b""` and raw `br""` string syntax. It demonstrates creating empty byte strings and byte strings with content.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/byte_strings.txt#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
"BYTE_STRING \"b\\\"foo\\\"\""

```

LANGUAGE: Rust
CODE:
```
"BYTE_STRING \"br\\\"\\\"\""

```

LANGUAGE: Rust
CODE:
```
"BYTE_STRING \"b\\\"\\\"ix\""

```

LANGUAGE: Rust
CODE:
```
"BYTE_STRING \"br\\\"\\\"br\""

```

----------------------------------------

TITLE: Invalid Copy and Drop Trait Implementation Example in Rust
DESCRIPTION: Example demonstrating an invalid attempt to implement both Copy and Drop traits on the same struct. This code fails to compile because simultaneous implementation of these traits is currently disallowed due to potential memory safety issues.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0184.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[derive(Copy)]
struct Foo; // error!

impl Drop for Foo {
    fn drop(&mut self) {
    }
}
```

----------------------------------------

TITLE: Resolving Closure Trait Implementation in Rust
DESCRIPTION: Shows how implementing Clone and Copy traits on the struct allows the closure to meet the Fn trait requirement, resolving the previous compilation error
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0525.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[derive(Clone, Copy)] // We implement `Clone` and `Copy` traits.
struct X;

fn foo<T>(_: T) {}
fn bar<T: Fn(u32)>(_: T) {}

fn main() {
    let x = X;
    let closure = |_| foo(x);
    bar(closure); // ok!
}
```

----------------------------------------

TITLE: Warning for Missing Function Documentation in Rust
DESCRIPTION: This snippet illustrates the use of the `missing_docs` lint, which flags items lacking documentation. By toggling this lint with `#![warn(missing_docs)]`, the function `undocumented` will cause a warning mentioning the absence of a docstring. The `missing_docs` lint is crucial for encouraging comprehensive documentation and is available directly in `rustc` as well as `rustdoc`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/lints.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#![warn(missing_docs)]

pub fn undocumented() {}
# fn main() {}

```

----------------------------------------

TITLE: Declaring Array with Constant Value in Rust
DESCRIPTION: This snippet provides two correct examples of how to declare an array in Rust using constant values, avoiding the error demonstrated in the previous snippet. The first example uses a literal constant, and the second defines a constant variable to be used as the size of the array.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0435.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
let a: [u8; 42]; // ok!
```

LANGUAGE: Rust
CODE:
```
const FOO: usize = 42;
let a: [u8; FOO]; // ok!
```

----------------------------------------

TITLE: Incorrect Struct Pattern Matching in Rust
DESCRIPTION: Example showing incorrect pattern matching where not all struct fields are specified, resulting in compilation error E0027.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0027.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Dog {
    name: String,
    age: u32,
}

let d = Dog { name: "Rusty".to_string(), age: 8 };

// This is incorrect.
match d {
    Dog { age: x } => {}
}
```

----------------------------------------

TITLE: Conditionally Compiling for wasm32v1-none in Rust
DESCRIPTION: Uses Rust's conditional compilation attributes to specify compiling conditions for the wasm32v1-none target, ensuring code is compiled only for WebAssembly targets without operating system support. This method relies on the target family and target OS being set to 'wasm' and 'none,' respectively.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32v1-none.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
#[cfg(all(target_family = "wasm", target_os = "none"))]
```

----------------------------------------

TITLE: Using Helper Variables for Complex Conditions in Rust
DESCRIPTION: Shows how to use helper variables to improve code readability, especially for multiline conditions. This approach makes debugging easier and improves code clarity.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_32

LANGUAGE: rust
CODE:
```
let rustfmt_not_installed =
    captured_stderr.contains("not installed") || captured_stderr.contains("not available");

match output.status.code() {
    Some(1) if !rustfmt_not_installed => Ok(None),
    _ => Err(format_err!("rustfmt failed:\n{}", captured_stderr)),
};
```

----------------------------------------

TITLE: Correct Approach for Foreign Items Using Specialized Type Declarations in Rust
DESCRIPTION: This code snippet shows the proper way to handle different types with extern "C" functions by creating separate specialized function declarations for each required type instead of using generics.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0044.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
extern "C" { fn some_func_i32(x: i32); }
extern "C" { fn some_func_i64(x: i64); }
```

----------------------------------------

TITLE: Fixing E0573: Implementing on a struct
DESCRIPTION: This code snippet shows how to define a struct with a constant value. It shows that `impl` blocks can only be used with types such as structs, enums, or traits, not on constants. Creating a new type such as a struct and implementing on the struct fixes the error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0573.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
```
struct Hobbit(u32); // we create a new type

const HOBBIT: Hobbit = Hobbit(2);
impl Hobbit {} // ok!
```
```

----------------------------------------

TITLE: Generating a Trait Implementation Template for a Struct in Rust
DESCRIPTION: Shows the generation of a new trait implementation skeleton for a struct with generic type parameters. The assist creates an empty implementation block with proper generic constraints.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_65

LANGUAGE: rust
CODE:
```
struct ┃Ctx<T: Clone> {
    data: T,
}
```

LANGUAGE: rust
CODE:
```
struct Ctx<T: Clone> {
    data: T,
}

impl<T: Clone> ${1:_} for Ctx<T> {┃}
```

----------------------------------------

TITLE: Merge Conflict Markers in File (Git)
DESCRIPTION: These markers are inserted by Git into files where a merge or rebase conflict occurred. The content between `<<<<<<< HEAD` and `=======` is the version from the current branch (or target of rebase), and the content between `=======` and `>>>>>>>` is from the branch being merged/rebased.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_8

LANGUAGE: git
CODE:
```
<<<<<<< HEAD
Original code
=======
Your code
>>>>>>> 8fbf656... Commit fixes 12345
```

----------------------------------------

TITLE: Adding Documentation Aliases in Rust
DESCRIPTION: Shows how to add aliases to documentation items in Rust using the `#[doc(alias)]` attribute. This allows improved searchability within the generated documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/advanced-features.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
"#[doc(alias = \"x\")]\n#[doc(alias = \"big\")]\npub struct BigX;"
```

LANGUAGE: rust
CODE:
```
"#[doc(alias(\"x\", \"big\"))]\npub struct BigX;"
```

----------------------------------------

TITLE: Run Binary Project with Cargo Miri (Shell)
DESCRIPTION: Runs the main binary target of the current Cargo project through the Miri interpreter. This is used to check for undefined behavior in applications rather than libraries.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
cargo miri run
```

----------------------------------------

TITLE: Direct Namespace Import in Rust
DESCRIPTION: Shows how to import a namespace directly without using the 'self' keyword when only the namespace is needed.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0429.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use std::fmt;
```

----------------------------------------

TITLE: Valid Const Generic Parameter Type Implementation
DESCRIPTION: Corrected example showing proper implementation of a type for use as a const generic parameter by deriving PartialEq, Eq, and ConstParamTy traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0741.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(adt_const_params)]

use std::marker::ConstParamTy;

#[derive(PartialEq, Eq, ConstParamTy)] // We derive both traits here.
struct A;

struct B<const X: A>; // ok!
```

----------------------------------------

TITLE: Simple Function Addition in Rust
DESCRIPTION: Demonstrates a basic Rust function that adds one to a given integer with documentation and example
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_20

LANGUAGE: rust
CODE:
```
fn add_one(x: i32) -> i32 {
    x + 1
}
```

----------------------------------------

TITLE: Valid Implementation with Principal and Auto Traits
DESCRIPTION: Shows the correct way to implement traits for a dyn object by including a principal trait (non-auto trait) along with auto traits. This pattern works because it follows the rule of having one principal trait with additional auto traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0785.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(auto_traits)]

trait PrincipalTrait {}

auto trait AutoTrait {}

impl dyn PrincipalTrait + AutoTrait + Send {}
```

----------------------------------------

TITLE: Compile-Fail Example: Accessing Method Like Field in Rust
DESCRIPTION: This code snippet demonstrates the E0615 error, which occurs when trying to access a method like a field without using parentheses. The struct `Foo` has a field `x` and a method `method`. The error occurs when trying to access `f.method` without calling it as `f.method()`.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0615.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0615
struct Foo {
    x: u32,
}

impl Foo {
    fn method(&self) {}
}

let f = Foo { x: 0 };
f.method; // error: attempted to take value of method `method` on type `Foo`
```
```

----------------------------------------

TITLE: Conditional compilation for target features (recommended)
DESCRIPTION: This Rust code snippet demonstrates conditionally compiling code based on target features, which is the recommended approach. The `#[cfg(target_feature = "...")]` attribute ensures that the `foo` function is only compiled if the "simd128" feature is enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-unknown.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
#[cfg(target_feature = "simd128")]
fn foo() {
    // ...
}
```

----------------------------------------

TITLE: Demonstrating Closure Mutability Errors in Rust
DESCRIPTION: This code snippet shows examples of errors that occur when trying to mutate or mutably reference data captured immutably by a closure. It includes a function 'foo' that accepts an Fn closure, and two erroneous functions 'mutable' and 'mut_addr' that attempt to modify captured variables.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0387.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// Accepts a function or a closure that captures its environment immutably.
// Closures passed to foo will not be able to mutate their closed-over state.
fn foo<F: Fn()>(f: F) { }

// Attempts to mutate closed-over data. Error message reads:
// `cannot assign to data in a captured outer variable...`
fn mutable() {
    let mut x = 0u32;
    foo(|| x = 2);
}

// Attempts to take a mutable reference to closed-over data. Error message
// reads: `cannot borrow data mutably in a captured outer variable...`
fn mut_addr() {
    let mut x = 0u32;
    foo(|| { let y = &mut x; });
}
```

----------------------------------------

TITLE: Recursive Async Function with Boxed Body
DESCRIPTION: Alternative implementation that boxes the entire function body, returning a Pin<Box<dyn Future>> for size stability and proper memory management.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0733.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use std::future::Future;
use std::pin::Pin;
fn foo(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {
    Box::pin(async move {
        if n > 0 {
            foo(n - 1).await;
        }
    })
}
```

----------------------------------------

TITLE: Demonstrating Unused Variable Lint in Rust
DESCRIPTION: Example showing how the Rust compiler warns about unused variables using the unused_variables lint. The code declares an unused variable 'x' and shows the resulting compiler warning.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/lints/index.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ cat main.rs
fn main() {
    let x = 5;
}
$ rustc main.rs
warning: unused variable: `x`
 --> main.rs:2:9
  |
2 |     let x = 5;
  |         ^
  |
  = note: `#[warn(unused_variables)]` on by default
  = note: to avoid this warning, consider using `_x` instead
```

----------------------------------------

TITLE: Main Function with Config Attributes in Rust
DESCRIPTION: Defines the main function with a cfg attribute specifying configuration options 'a' and 'b', prefixed with line numbers '10 5 2'
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/tests/writemode/target/modified.txt#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[cfg(a, b)]
fn main() {}
```

----------------------------------------

TITLE: Enabling AddressSanitizer for Cargo Build (Shell)
DESCRIPTION: This command demonstrates how to enable AddressSanitizer when building a Rust project using Cargo. It sets the `RUSTFLAGS` environment variable with the `-Zsanitizer=address` flag and uses `-Zbuild-std` and `--target` to build with a standard library instrumented for the specified target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ RUSTFLAGS=-Zsanitizer=address cargo build -Zbuild-std --target x86_64-unknown-linux-gnu
```

----------------------------------------

TITLE: Trait Definition Formatting in Rust
DESCRIPTION: Shows the formatting for Rust trait definitions, including the use of block-indent for trait items and single-line formatting for traits without items.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
trait Foo {}

pub trait Bar {
    ...
}
```

----------------------------------------

TITLE: Enabling LSP Mode for Rust Mode in Emacs
DESCRIPTION: This snippet adds a hook to `rust-mode-hook` in Emacs, ensuring that LSP mode is loaded automatically whenever a Rust file is opened.  This automatically starts the LSP client for rust-analyzer.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/other_editors.md#_snippet_2

LANGUAGE: Emacs Lisp
CODE:
```
(add-hook 'rust-mode-hook 'lsp-deferred)
```

----------------------------------------

TITLE: Enabling Inlay Hints in Neovim with rust-analyzer
DESCRIPTION: This Lua snippet enables inlay hints in Neovim using rust-analyzer via the `vim.lsp.inlay_hint.enable` function.  It shows the hints in the specified buffer.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/other_editors.md#_snippet_5

LANGUAGE: Lua
CODE:
```
lspconfig.rust_analyzer.setup({
    on_attach = function(client, bufnr)
        vim.lsp.inlay_hint.enable(true, { bufnr = bufnr })
    end
})
```

----------------------------------------

TITLE: Demonstrating Crate Not Found Error in Rust
DESCRIPTION: Example showing how attempting to use an undeclared crate results in compilation error E0463. This occurs when trying to use extern crate without properly linking the crate through Cargo or rustc configuration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0463.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
extern crate foo; // error: can't find crate
```

----------------------------------------

TITLE: Invoke Cargo with Explicit Nightly Toolchain (Shell)
DESCRIPTION: Demonstrates how to force a specific `cargo` command to use the nightly toolchain by adding the `+nightly` flag immediately after `cargo`. This is an alternative to setting a directory override.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
cargo +nightly
```

----------------------------------------

TITLE: Enabling Incremental Compilation in Rust
DESCRIPTION: Enables incremental compilation, storing information to be reused when recompiling. Takes a path to a directory where incremental files will be stored.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_13



----------------------------------------

TITLE: Unwrapping Option Return Type in Rust Functions
DESCRIPTION: Removes the Option wrapper from a function's return type and automatically unwraps the returned value. Useful for simplifying function signatures when Option is no longer needed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_115

LANGUAGE: rust
CODE:
```
fn foo() -> Option<i32> { Some(42i32) }
```

LANGUAGE: rust
CODE:
```
fn foo() -> i32 { 42i32 }
```

----------------------------------------

TITLE: Error Example: Using Undeclared External Crate
DESCRIPTION: Shows the error when trying to use a module from an external crate that hasn't been properly added as a dependency.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0433.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use ferris_wheel::BigO;
// error: failed to resolve: use of undeclared module or unlinked crate
```

----------------------------------------

TITLE: Using Undefined Struct Example in Rust
DESCRIPTION: Example showing a compilation error when trying to use an undefined struct 'Foo'. The code attempts to create a struct instance with fields x and y, but fails because 'Foo' is not defined.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0422.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main () {
    let x = Foo { x: 1, y: 2 };
}
```

----------------------------------------

TITLE: Getting Backtrace from Rust Compiler on Panic
DESCRIPTION: In this example, the environment variable `RUST_BACKTRACE` is set to 1 to enable stack traces on panic events in the Rust compiler, facilitating debugging.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/compiler-debugging.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
RUST_BACKTRACE=1 rustc +stage1 error.rs -Z treat-err-as-bug
```

----------------------------------------

TITLE: Valid Concrete Const Parameter - Rust
DESCRIPTION: Shows the correct way to define a const parameter by using a concrete type (usize) instead of referencing another generic type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0770.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<T, const N: usize>() {}
```

----------------------------------------

TITLE: Convert Derive Macro to Manual Implementation in Rust
DESCRIPTION: Transforms a derive macro into its equivalent manual trait implementation. Particularly useful for customizing derived implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_109

LANGUAGE: rust
CODE:
```
#[derive(Debug, Display)]
struct S;
```

LANGUAGE: rust
CODE:
```
#[derive(Display)]
struct S;

impl Debug for S {
    fn fmt(&self, f: &mut Formatter) -> Result<()> {
        f.debug_struct("S").finish()
    }
}
```

----------------------------------------

TITLE: Defining a Generic Function and Instantiating Types
DESCRIPTION: This snippet demonstrates how to define a generic function 'foo' that takes two parameters of generic types T and U. It shows how to instantiate the generic parameters when calling the function from 'main'. Required dependencies include the Rust standard library for basic function definitions. The expected input is two values of types i32 and u128, and the output is the value of type T, which is i32 in this case.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/early_binder.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<T, U>(a: T, _b: U) -> T { a }

fn main() {
    let c = foo::<i32, u128>(1, 2);
}
```

----------------------------------------

TITLE: Demonstrating E0412 Error with Module Imports in Rust
DESCRIPTION: This snippet shows an example of E0412 error occurring when a type is imported into a parent module but not visible in a child module. The File type from std::fs is not accessible in the foo module.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0412.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use std::fs::File;

mod foo {
    fn some_function(f: File) {}
}
```

----------------------------------------

TITLE: Converting Tuple Return Type to Struct in Rust
DESCRIPTION: Replaces a function's tuple return type with a custom struct to enhance clarity and maintainability.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_32

LANGUAGE: rust
CODE:
```
fn bar() {
    let FooResult(a, b, c) = foo();
}

struct FooResult(u32, u32, u32);

fn foo() -> FooResult {
    FooResult(1, 2, 3)
}
```

----------------------------------------

TITLE: Checking PATH Variable inside Flatpak VS Code (Shell)
DESCRIPTION: Displays the current `PATH` environment variable as seen from within the terminal of a Flatpak version of VS Code. This is useful for debugging and configuring the environment, particularly when needing to add `~/.cargo/bin` to the path for `rustup` installations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/vs_code.md#_snippet_5

LANGUAGE: shell
CODE:
```
echo $PATH
```

----------------------------------------

TITLE: Correctly Calling a Function in Rust
DESCRIPTION: This Rust snippet provides a simple, correct example of how to call a function. It declares a basic function `i_am_a_function` that takes no arguments and returns nothing, and then demonstrates the correct syntax `()` for invoking this function. This contrasts with the erroneous examples provided earlier.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0618.md#_snippet_1

LANGUAGE: Rust
CODE:
```
// We declare a function:
fn i_am_a_function() {}

// And we call it:
i_am_a_function();
```

----------------------------------------

TITLE: Fix: Move Value into Coroutine
DESCRIPTION: This code fixes the E0626 error by removing the borrow and storing the type by value. This prevents any borrows from persisting across the yield point. The coroutine remains movable.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0626.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
# #![feature(coroutines, coroutine_trait, stmt_expr_attributes)]
# use std::ops::Coroutine;
# use std::pin::Pin;
let mut b = #[coroutine] || {
    let a = String::from("hello, world");
    yield ();
    println!("{}", a);
};
Pin::new(&mut b).resume(());
```

----------------------------------------

TITLE: Fixing Unconstrained Type Parameter with PhantomData
DESCRIPTION: This code demonstrates how to fix the E0207 error by adding a phantom type parameter to the implementing type, which constrains the type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0207.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
use std::marker::PhantomData;

trait Maker {
    type Item;
    fn make(&mut self) -> Self::Item;
}

struct Foo<T> {
    foo: T
}

// Add a type parameter to `FooMaker`
struct FooMaker<T> {
    phantom: PhantomData<T>,
}

impl<T: Default> Maker for FooMaker<T> {
    type Item = Foo<T>;

    fn make(&mut self) -> Foo<T> {
        Foo {
            foo: <T as Default>::default(),
        }
    }
}
```

----------------------------------------

TITLE: Correct Type Alias Declarations in Rust
DESCRIPTION: Examples of properly declared type aliases in Rust, showing how to declare a type alias either without any type parameters or with all type parameters being used.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0091.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
type Foo = u32; // ok!
type Foo2<A> = Box<A>; // ok!
```

----------------------------------------

TITLE: Installing rust-analyzer on macOS using Homebrew
DESCRIPTION: This snippet shows how to install rust-analyzer on macOS using the Homebrew package manager. It assumes Homebrew is already installed on the system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/rust_analyzer_binary.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
$ brew install rust-analyzer
```

----------------------------------------

TITLE: Fixing Rust Lifetime Elision Error
DESCRIPTION: Corrected version of the code that explicitly names the elided lifetime and adds the necessary outlives bound for the generic parameter T. This version properly establishes the relationship between the lifetime and type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0311.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn no_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {
    with_restriction::<T>(x)
}

fn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {
    x
}
```

----------------------------------------

TITLE: Correct Enum Pattern Matching
DESCRIPTION: Proper enum pattern matching example using qualified variant names with the enum type prefix.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0170.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
enum Method {
    GET,
    POST,
}

let m = Method::GET;

match m {
    Method::GET => {},
    Method::POST => {},
}
```

----------------------------------------

TITLE: Declaring External Variables in Rust
DESCRIPTION: This snippet declares external variables with different values, indicating their existence outside the Rust environment, likely in external C code. These declarations are useful for accessing global variables defined elsewhere.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-c/output.txt#_snippet_1

LANGUAGE: Rust
CODE:
```
extern variable value: 42
```

LANGUAGE: Rust
CODE:
```
extern variable value: -42
```

----------------------------------------

TITLE: Using Match Instead of If-Let in Rust
DESCRIPTION: Demonstrates the preference for using 'match' instead of 'if let ... { } else { }' construct in Rust for improved compactness and precision.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_26

LANGUAGE: rust
CODE:
```
// GOOD
match ctx.expected_type.as_ref() {
    Some(expected_type) => completion_ty == expected_type && !expected_type.is_unit(),
    None => false,
}

// BAD
if let Some(expected_type) = ctx.expected_type.as_ref() {
    completion_ty == expected_type && !expected_type.is_unit()
} else {
    false
}
```

----------------------------------------

TITLE: Correct Late-Bound Lifetime Parameter Usage
DESCRIPTION: Shows the correct way to use a function with late-bound lifetime parameters by omitting explicit lifetime specifications.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0794.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<'a>(x: &'a str) -> &'a str { x }
let _ = foo;
```

----------------------------------------

TITLE: Correctly Providing Multiple Lifetime Arguments in Rust Function Call
DESCRIPTION: This example shows the correct approach to providing multiple lifetime arguments to a function. The function requires two lifetime parameters, and two are correctly provided in the function call.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0090.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<'a: 'b, 'b: 'a>() {}

fn main() {
    foo::<'static, 'static>();
}
```

----------------------------------------

TITLE: Evolving best practices for unsafe code within unsafe functions in Rust
DESCRIPTION: This example illustrates the changing conventions for unsafe code within unsafe functions, showing both the currently accepted approach and the recommended approach using explicit unsafe blocks.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0133.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
unsafe fn f() { return; }

unsafe fn g() {
    f(); // Is accepted, but no longer recommended
    unsafe { f(); } // Recommended way to write this
}
```

----------------------------------------

TITLE: Running Clippy on Specific Workspace Package
DESCRIPTION: Command to run Clippy on a specific package in a workspace.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/usage.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
cargo clippy -p example
```

----------------------------------------

TITLE: Fixing Move Errors with References in Rust
DESCRIPTION: This code snippet presents a solution to the move-out-of-drop error by using references. By creating a reference to the field of the struct instead of moving it, the error is resolved, allowing the struct's Drop implementation to execute correctly when it goes out of scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0509.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
```
struct FancyNum {
    num: usize
}

struct DropStruct {
    fancy: FancyNum
}

impl Drop for DropStruct {
    fn drop(&mut self) {
        // Destruct DropStruct, possibly using FancyNum
    }
}

fn main() {
    let drop_struct = DropStruct{fancy: FancyNum{num: 5}};
    let ref fancy_field = drop_struct.fancy; // No more errors!
    println!("Fancy: {}", fancy_field.num);
    // implicit call to `drop_struct.drop()` as drop_struct goes out of scope
}
```
```

----------------------------------------

TITLE: Replacing Arithmetic with Checked Operations in Rust
DESCRIPTION: Replaces basic arithmetic operations on integers with their checked equivalents that return None on overflow. This refactoring improves safety by converting potentially overflowing operations to methods that handle overflow gracefully.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_105

LANGUAGE: rust
CODE:
```
fn main() {
  let x = 1 + 2;
}
```

LANGUAGE: rust
CODE:
```
fn main() {
  let x = 1.checked_add(2);
}
```

----------------------------------------

TITLE: Updating Rust Compiler to Nightly Version - Bash
DESCRIPTION: This bash command updates the Rust compiler to the latest nightly version, which is necessary for enabling certain experimental features like portable SIMD. Users should ensure they have rustup installed before executing this command.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/portable-simd/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
rustup update -- nightly
```

----------------------------------------

TITLE: Comprehensive Match Expression Formatting in Rust
DESCRIPTION: Detailed examples of match expression formatting in Rust, showing various arm types including single expressions, blocks with comments, statements, and empty blocks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_19

LANGUAGE: rust
CODE:
```
match foo {
    foo => bar,
    a_very_long_pattern | another_pattern if an_expression() => {
        no_room_for_this_expression()
    }
    foo => {
        // A comment.
        an_expression()
    }
    foo => {
        let a = statement();
        an_expression()
    }
    bar => {}
    // Trailing comma on last item.
    foo => bar,
    baz => qux!(),
    lorem => {
        ipsum!()
    }
}
```

----------------------------------------

TITLE: Running Clippy
DESCRIPTION: Basic command to run Clippy on a project
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
cargo clippy
```

----------------------------------------

TITLE: Breaking Control Flow Expressions in Rust
DESCRIPTION: Rules for breaking long control flow expressions in Rust, showing proper indentation and brace placement for while, for, and if statements with complex conditions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_12

LANGUAGE: rust
CODE:
```
while let Some(foo)
    = a_long_expression
{
    ...
}

for foo
    in a_long_expression
{
    ...
}

if a_long_expression
    && another_long_expression
    || a_third_long_expression
{
    ...
}

if let Some(a) = b
    && another_long_expression
    && a_third_long_expression
{
    // ...
}

if let Some(relatively_long_thing)
    = a_long_expression
    && another_long_expression
    && a_third_long_expression
{
    // ...
}

if some_expr
    && another_long_expression
    && let Some(relatively_long_thing) =
        a_long_long_long_long_long_long_really_reallllllllllyyyyyyy_long_expression
    && a_third_long_expression
{
    // ...
}
```

----------------------------------------

TITLE: Configuring Rust Compiler Flags for Arm Target
DESCRIPTION: Example configuration for Cargo to set target CPU, target features, and linker settings for an Arm bare-metal target
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/arm-none-eabi.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
rustflags = [
  "-Clink-arg=-Tlink.x",
  "-Clink-arg=--nmagic",
  "-Ctarget-cpu=cortex-m55",
  "-Ctarget-feature=-mve.fp"
]

[build]
target = "thumbv8m.main-none-eabihf"
```

----------------------------------------

TITLE: Incorrect Implementation of Trait with Constant as Associated Type in Rust
DESCRIPTION: This code example demonstrates an erroneous implementation where a trait defines a constant (N) but the implementation incorrectly provides an associated type instead. This causes compiler error E0325.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0325.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Bar;

trait Foo {
    const N : u32;
}

impl Foo for Bar {
    type N = u32;
    // error: item `N` is an associated type, which doesn't match its
    //        trait `<Bar as Foo>`
}
```

----------------------------------------

TITLE: Explicit Self Type in Rust Trait Implementation
DESCRIPTION: This example shows how to explicitly specify the implementing type (Foo) as the receiver type when implementing a trait method. This is equivalent to using &self when Self refers to Foo.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0307.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
# struct Foo;
# trait Trait {
#     fn foo(&self);
# }
impl Trait for Foo {
    fn foo(self: &Foo) {}
}
```

----------------------------------------

TITLE: Match Arm Body Formatting in Rust
DESCRIPTION: Guidelines for formatting match arm bodies in Rust. Single, simple expressions can start on the same line, while complex expressions or those with comments must be in blocks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_20

LANGUAGE: rust
CODE:
```
match foo {
    // A combinable expression.
    foo => a_function_call(another_call(
        argument1,
        argument2,
    )),
    // A non-combinable expression
    bar => {
        a_function_call(
            another_call(
                argument1,
                argument2,
            ),
            another_argument,
        )
    }
}
```

----------------------------------------

TITLE: Including Rust Doc Tests in Coverage Analysis
DESCRIPTION: This bash snippet demonstrates how to include Rust documentation tests when generating coverage data. It modifies `RUSTFLAGS` and `RUSTDOCFLAGS` to ensure that both test and doc binaries are covered, using `llvm-profdata` to merge and `llvm-cov` to report.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_14

LANGUAGE: bash
CODE:
```
$ RUSTFLAGS="-C instrument-coverage" \
  RUSTDOCFLAGS="-C instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins" \
    cargo test
$ llvm-profdata merge -sparse default_*.profraw -o json5format.profdata
```

----------------------------------------

TITLE: Running Lint Check with Cargo - Bash
DESCRIPTION: Runs Clippy on a predefined set of crates using the cargo lintcheck command. It is used to check and save lint warnings to logs. The examples include using both a direct cargo lintcheck command and a cargo run command with specific target and manifest paths.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/lintcheck/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cargo lintcheck
```

LANGUAGE: bash
CODE:
```
cargo run --target-dir lintcheck/target --manifest-path lintcheck/Cargo.toml
```

----------------------------------------

TITLE: Correct Async Function Return Type Implementation
DESCRIPTION: Fixed version of the code that explicitly specifies the type S<'a> instead of using Self as the return type, which is the currently supported approach.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0760.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct S<'a>(&'a i32);

impl<'a> S<'a> {
    async fn new(i: &'a i32) -> S<'a> {
        S(&22)
    }
}
```

----------------------------------------

TITLE: Setting Platform-Specific Runnable Environment Variables (JSON)
DESCRIPTION: This example sets different environment variables based on the operating system platform. It allows users to specify platform-specific environment variables.  Requires VS Code and the Rust extension. The output defines the environment variables dependent on the platform specified.  The configuration is performed in settings.json.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/editor_features.md#_snippet_7

LANGUAGE: JSON
CODE:
```
"rust-analyzer.runnables.extraEnv": [
    {
        "platform": "win32", // windows only
        "env": {
                "APP_DATA": "windows specific data"
        }
    },
    {
        "platform": ["linux"],
        "env": {
                "APP_DATA": "linux data",
        }
    },
    { // for all platforms
        "env": {
                "APP_COMMON_DATA": "xxx",
        }
    }
]
```

----------------------------------------

TITLE: Adding Enum Variant in Rust
DESCRIPTION: This snippet shows how to add a new variant to an existing enum. It demonstrates the process of updating the enum definition to include the missing variant that is being used in the code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_51

LANGUAGE: rust
CODE:
```
enum Countries {
    Ghana,
}

fn main() {
    let country = Countries::Lesotho;
}
```

LANGUAGE: rust
CODE:
```
enum Countries {
    Ghana,
    Lesotho,
}

fn main() {
    let country = Countries::Lesotho;
}
```

----------------------------------------

TITLE: Incorrect Enum Pattern Matching in Rust
DESCRIPTION: Example of code that triggers E0023 error by attempting to extract only one field from an enum variant that has two fields. The pattern in the match statement doesn't account for all fields in the Apple variant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0023.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum Fruit {
    Apple(String, String),
    Pear(u32),
}

let x = Fruit::Apple(String::new(), String::new());

match x {
    Fruit::Apple(a) => {}, // error!
    _ => {}
}
```

----------------------------------------

TITLE: Private Module Test Implementation
DESCRIPTION: Demonstrates how tests can be written for private functions within private modules.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/test-implementation.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
mod my_priv_mod {
    fn my_priv_func() -> bool {}

    #[test]
    fn test_priv_func() {
        assert!(my_priv_func());
    }
}
```

----------------------------------------

TITLE: Calling stdcall_fn_1 - Rust
DESCRIPTION: This snippet calls the `stdcall_fn_1` function in Rust, passing an integer argument (14). It demonstrates how to call a function with a single integer argument using the `stdcall` calling convention. There are no explicit dependencies mentioned here, assuming the function itself has been defined elsewhere in the code.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
stdcall_fn_1(14)
```

----------------------------------------

TITLE: Fix: Reclaiming Ownership from RefCell in Rust
DESCRIPTION: This code demonstrates another fix for E0507: reclaiming ownership from the `RefCell` using `into_inner()`. This allows moving the value out of the `RefCell` because we now have ownership of it. This approach is suitable when you need to take ownership of the contained value and no longer need the `RefCell`.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0507.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
```
use std::cell::RefCell;

struct TheDarkKnight;

impl TheDarkKnight {
    fn nothing_is_true(self) {}
}

fn main() {
    let x = RefCell::new(TheDarkKnight);
    let x = x.into_inner(); // we get back ownership

    x.nothing_is_true(); // ok!
}
```
```

----------------------------------------

TITLE: Using Standalone Markdown Files with rustdoc
DESCRIPTION: This snippet shows how to create a Markdown file and generate HTML documentation from it using rustdoc.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
$ rustdoc README.md
```

----------------------------------------

TITLE: Setting Debug Assertions in Rust
DESCRIPTION: Enables or disables `cfg(debug_assertions)` conditional compilation.  Accepts `y`, `yes`, `on`, `true` to enable, or `n`, `no`, `off`, `false` to disable. If not specified, debug assertions are enabled only if the opt-level is 0.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_4



----------------------------------------

TITLE: Casting Pointers with Inferred Types - Rust
DESCRIPTION: The following snippet shows correct ways to cast integers to pointer types in Rust, utilizing explicit type annotations to avoid errors. Annotations help Rust understand the expected pointer type during casting. It demonstrates creation of pointers from references and integer values with explicit type information.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0641.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let a = &(String::from("Hello world!")) as *const _; // ok!
```

LANGUAGE: rust
CODE:
```
let b = 0 as *const i32; // ok!
```

LANGUAGE: rust
CODE:
```
let c: *const i32 = 0 as *const _; // ok!
```

----------------------------------------

TITLE: Inlining a Type Alias in Rust
DESCRIPTION: Shows how a type alias can be replaced with its concrete type. This example demonstrates replacing a generic type alias with its default type instantiation at a usage site.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_71

LANGUAGE: rust
CODE:
```
type A<T = u32> = Vec<T>;

fn main() {
    let a: ┃A;
}
```

LANGUAGE: rust
CODE:
```
type A<T = u32> = Vec<T>;

fn main() {
    let a: Vec<u32>;
}
```

----------------------------------------

TITLE: Demonstrating Invalid Pattern Binding in Rust
DESCRIPTION: Shows an erroneous code example where the identifier 'x' is bound twice in the same pattern, causing compile error E0416.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0416.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
match (1, 2) {
    (x, x) => {} // error: identifier `x` is bound more than once in the
                 //        same pattern
}
```

----------------------------------------

TITLE: Fixing Stability Attribute for Deprecated Function in Rust
DESCRIPTION: This code snippet demonstrates an erroneous usage of the stability attribute where the 'note' field is missing in a deprecated function declaration. It includes the original code that results in an error along with the corrected version that complies with Rust's requirements by providing a 'note' explaining the deprecation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0543.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#![feature(staged_api)]
#![allow(internal_features)]
#![stable(since = "1.0.0", feature = "test")]

#[stable(since = "0.1.0", feature = "_deprecated_fn")]
#[deprecated(
    since = "1.0.0"
)] // invalid
fn _deprecated_fn() {}
```

LANGUAGE: Rust
CODE:
```
#![feature(staged_api)]
#![allow(internal_features)]
#![stable(since = "1.0.0", feature = "test")]

#[stable(since = "0.1.0", feature = "_deprecated_fn")]
#[deprecated(
    since = "1.0.0",
    note = "explanation for deprecation"
)] // ok!
fn _deprecated_fn() {}
```

----------------------------------------

TITLE: Correct Usage of Not cfg-Predicate in Rust
DESCRIPTION: This snippet shows the correct usage of the 'not' cfg-predicate, demonstrating how to specify a valid cfg-pattern. This allows for conditional compilation based on the target operating system, hence ensuring the function is compiled on any OS that is not Linux.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0536.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
#[cfg(not(target_os = "linux"))] // ok!
pub fn something() {}

pub fn main() {}
```

----------------------------------------

TITLE: Correct Usage of Tuple Structs and Variants in Rust
DESCRIPTION: This snippet shows how to correctly use tuple structs and variants in Rust, avoiding import and typographical issues. It uses the 'use' statement correctly to ensure that the code compiles without errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0531.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
struct Type(u32);

enum Foo {
    Bar(u32),
}
use Foo::*;

let Type(x) = Type(12); // ok!
match Type(12) {
    Type(x) => {} // ok!
    _ => {}
}
```

----------------------------------------

TITLE: Demonstrating Private Trait Error in Rust
DESCRIPTION: Example showing incorrect usage of private traits in public interfaces, causing compiler errors. Includes attempts to use a private trait Foo in a public trait bound, struct definition, and function signature.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0445.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    fn dummy(&self) { }
}

pub trait Bar : Foo {} // error: private trait in public interface
pub struct Bar2<T: Foo>(pub T); // same error
pub fn foo<T: Foo> (t: T) {} // same error

fn main() {}
```

----------------------------------------

TITLE: Demonstrating External Crate Naming Conflict in Rust
DESCRIPTION: This code snippet shows an erroneous example where the 'std' crate is imported with an alias that conflicts with the 'core' crate. This will result in a compilation error (E0259).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0259.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
extern crate core;
extern crate std as core;

fn main() {}
```

----------------------------------------

TITLE: Optimizing Argument Passing in Rust Function
DESCRIPTION: This diagnostic suggests optimizing a function argument by passing it by value instead of by reference. The change could improve performance for trivially copyable types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/rust-analyzer/src/diagnostics/test_data/clippy_pass_by_ref.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
fn some_function(&self) {
    // Function implementation
}
```

----------------------------------------

TITLE: Correct Pattern Binding of Struct Fields in Rust
DESCRIPTION: This example shows the correct way to bind struct fields in a pattern, where each field is bound exactly once. The 'a' field is bound to variable 'x' and the 'b' field is bound to variable 'y'.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0025.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo {
    a: u8,
    b: u8,
}

fn main(){
    let x = Foo { a:1, b:2 };

    let Foo { a: x, b: y } = x; // ok!
}
```

----------------------------------------

TITLE: Generating Inherent Impl for Struct in Rust
DESCRIPTION: This snippet demonstrates how to add a new inherent impl block for a struct. It creates an empty impl block with the correct generic parameters and bounds.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_58

LANGUAGE: rust
CODE:
```
struct Ctx<T: Clone> {
    data: T,
}
```

LANGUAGE: rust
CODE:
```
struct Ctx<T: Clone> {
    data: T,
}

impl<T: Clone> Ctx<T> {}
```

----------------------------------------

TITLE: Demonstrating E0283 Error with Trait Implementation in Rust
DESCRIPTION: This code snippet shows another scenario that triggers the E0283 error, this time involving trait implementation and method calls.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0283.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
struct Foo;

impl Into<u32> for Foo {
    fn into(self) -> u32 { 1 }
}

let foo = Foo;
let bar: u32 = foo.into() * 1u32;
```

----------------------------------------

TITLE: Correct Usage of #[main] Attribute in Rust
DESCRIPTION: This code snippet demonstrates the correct usage of the #[main] attribute, where only one function is marked as the main entry point of the program.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0137.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(main)]

#[main]
fn f() {} // ok!
```

----------------------------------------

TITLE: Inferred Implementation with Static Lifetime in Rust
DESCRIPTION: Shows how the compiler infers the is_cool implementation with a static lifetime bound on the trait object.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0772.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn is_cool<'a>(self: &'a (dyn Person + 'static)) -> bool {unimplemented!()}
```

----------------------------------------

TITLE: Invalid Variable Capture in Inner Function
DESCRIPTION: Example showing erroneous code where an inner function attempts to capture a variable from its containing scope, which is not allowed in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0434.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo() {
    let y = 5;
    fn bar() -> u32 {
        y // error: can't capture dynamic environment in a fn item; use the
          //        || { ... } closure form instead.
    }
}
```

----------------------------------------

TITLE: Demonstrating Invalid Partial Reinitialization in Rust
DESCRIPTION: Shows an invalid attempt to partially reinitialize a structure after it has been dropped. The code fails because it tries to modify a field of an uninitialized structure.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0383.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo {
    a: u32,
}
impl Drop for Foo {
    fn drop(&mut self) { /* ... */ }
}

let mut x = Foo { a: 1 };
drop(x); // `x` is now uninitialized
x.a = 2; // error, partial reinitialization of uninitialized structure `t`
```

----------------------------------------

TITLE: Breaking from Labeled Block
DESCRIPTION: Example demonstrating how to break from a labeled block directly, using the block's label in the break statement.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0695.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
loop {
    'a: {
        break 'a;
    }
    break;
}
```

----------------------------------------

TITLE: Invalid Trait Object Declaration in Rust
DESCRIPTION: Demonstrates an erroneous trait object declaration that causes compiler error E0224. The code attempts to declare a trait object without specifying any traits after the '+' operator.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0224.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
type Foo = dyn 'static +;
```

----------------------------------------

TITLE: Proper Handling of Drop Trait in Rust Structs
DESCRIPTION: This Rust code provides the correct way to initialize a static variable for structs with fields that implement the Drop trait. It ensures that the initialization is done manually to avoid const-eval restrictions. The static instance FOO is initialized correctly by avoiding arbitrary, non-const-checked code within its context.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0493.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
enum DropType {
    A,
}

impl Drop for DropType {
    fn drop(&mut self) {}
}

struct Foo {
    field1: DropType,
}

static FOO: Foo = Foo { field1: DropType::A }; // We initialize all fields
                                               // by hand.
```

----------------------------------------

TITLE: Formatting Large List Imports in Rust
DESCRIPTION: Guidelines for formatting large imports that require multiple lines, showing preferred style with multiple import statements and alternative block-indented format when necessary.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_28

LANGUAGE: rust
CODE:
```
// Prefer
foo::{long, list, of, imports};
foo::{more, imports};

// If necessary
foo::{
    long, list, of, imports, more,
    imports,  // Note trailing comma
};
```

----------------------------------------

TITLE: Using Type Parameter in Rust Enum to Resolve E0392 Error
DESCRIPTION: This code snippet shows how to fix the E0392 error by actually using the declared type parameter in the enum variant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0392.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
enum Foo<T> {
    Bar(T),
}
```

----------------------------------------

TITLE: Correct Usage: Proper Function Call Without Lifetime Arguments in Rust
DESCRIPTION: This example shows the correct way to call a function that doesn't expect any lifetime arguments. The function f() is called without any explicit lifetime parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0088.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn f() {}

fn main() {
    f() // ok!
}
```

----------------------------------------

TITLE: Module Definition Formatting in Rust
DESCRIPTION: Shows the formatting for module definitions in Rust, including spacing around keywords and the opening brace.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_16

LANGUAGE: rust
CODE:
```
mod foo {
}
```

LANGUAGE: rust
CODE:
```
mod foo;
```

----------------------------------------

TITLE: Using Partial Generic Type Parameter in Rust's collect() Method
DESCRIPTION: This example shows how to use a partial generic type parameter, allowing the compiler to infer the rest of the type in the collect() method.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0283.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
let x = "hello".chars().rev().collect::<Vec<_>>();
```

----------------------------------------

TITLE: Elevating Clippy Warnings to Errors
DESCRIPTION: Command to treat all warnings as errors, useful for CI environments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/usage.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cargo clippy -- -Dwarnings
```

----------------------------------------

TITLE: Correct Trait Implementation Without Extra Constants
DESCRIPTION: Shows the correct way to implement the trait 'Foo' for i32 by removing the unauthorized associated constant. This implementation will compile successfully.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0438.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {}

impl Foo for i32 {}
```

----------------------------------------

TITLE: Invalid #[repr(packed)] on enum in Rust
DESCRIPTION: This code snippet shows an invalid usage of the `#[repr(packed)]` attribute on an enum. The `#[repr(packed)]` attribute is designed to remove padding in structs and is not applicable to enums. Attempting to use it on an enum will lead to a compile-time error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0517.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```

#[repr(packed)]
enum Foo {Bar, Baz}

```

----------------------------------------

TITLE: Multiline Blocks - False
DESCRIPTION: Demonstrates how closures and match arm bodies are formatted when `force_multiline_blocks` is set to `false`. They are not forced to be wrapped in blocks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_18

LANGUAGE: rust
CODE:
```
fn main() {
    result.and_then(|maybe_value| match maybe_value {
        None => foo(),
        Some(value) => bar(),
    });

    match lorem {
        None => |ipsum| {
            println!("Hello World");
        },
        Some(dolor) => foo(),
    }
}
```

----------------------------------------

TITLE: Generating Getter Method in Rust
DESCRIPTION: This snippet demonstrates how to generate a getter method for a struct field. It creates an impl block with a method that returns a reference to the field value.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_56

LANGUAGE: rust
CODE:
```
struct Person {
    name: String,
}
```

LANGUAGE: rust
CODE:
```
struct Person {
    name: String,
}

impl Person {
    fn name(&self) -> &str {
        &self.name
    }
}
```

----------------------------------------

TITLE: Function Precondition Pattern Example
DESCRIPTION: Shows the preferred way to handle function preconditions using types rather than runtime checks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
// GOOD
fn frobnicate(walrus: Walrus) {
    ...
}

// BAD
fn frobnicate(walrus: Option<Walrus>) {
    let walrus = match walrus {
        Some(it) => it,
        None => return,
    };
    ...
}
```

----------------------------------------

TITLE: Explicit ABI - False
DESCRIPTION: Demonstrates the behavior of extern items when `force_explicit_abi` is set to `false`. The "C" ABI is removed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_17

LANGUAGE: rust
CODE:
```
extern {
    pub static lorem: c_int;
}
```

----------------------------------------

TITLE: Demonstrating E0415 Error in Rust Function Parameters
DESCRIPTION: This code snippet shows an erroneous function declaration where two parameters have the same name 'f', resulting in a compile-time error E0415.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0415.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo(f: i32, f: i32) {} // error: identifier `f` is bound more than
                          //        once in this parameter list
```

----------------------------------------

TITLE: Calling Methods Through Trait Interfaces to Resolve Ambiguity
DESCRIPTION: This code snippet demonstrates how to call methods through trait interfaces when a struct implements multiple traits with the same method name.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0034.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
trait F {
    fn m(&self);
}

trait G {
    fn m(&self);
}

struct X;

impl F for X { fn m(&self) { println!("I am F"); } }
impl G for X { fn m(&self) { println!("I am G"); } }

fn main() {
    let f = X;

    F::m(&f); // it displays "I am F"
    G::m(&f); // it displays "I am G"
}
```

----------------------------------------

TITLE: Correct Implementation with Associated Const in Rust
DESCRIPTION: This example shows a trait that properly defines an associated const 'N' and its implementation. When the trait defines 'const N', the implementation must match with 'const N' (rather than a type or method).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0323.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Bar;

trait Foo {
    const N : u32;
}

impl Foo for Bar {
    const N : u32 = 0; // ok!
}
```

----------------------------------------

TITLE: Configuring Rust Analyzer with Proc Macro Support via JSON
DESCRIPTION: An example JSON configuration for Rust Analyzer that enables proc-macro support and build scripts. This configuration would be passed in the initializationOptions field of the LSP InitializeParams message.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "cargo": {
    "buildScripts": {
      "enable": true,
    },
  },
  "procMacro": {
    "enable": true,
  }
}
```

----------------------------------------

TITLE: Incorrect Unsafe Negative Implementation Example - Rust
DESCRIPTION: Demonstrates an erroneous attempt to create an unsafe negative implementation of the Clone trait. This code fails to compile because negative implementations are inherently safe and should not be marked as unsafe.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0198.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo;

unsafe impl !Clone for Foo { } // error!
```

----------------------------------------

TITLE: Valid Auto Trait Bounds Example in Rust
DESCRIPTION: Shows a valid case where one non-builtin trait (Read) is combined with auto traits (Send and Sync) as bounds for a trait object. This is allowed and compiles successfully.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0225.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    let _: Box<dyn std::io::Read + Send + Sync>;
}
```

----------------------------------------

TITLE: Correcting E0412 Errors in Rust
DESCRIPTION: This snippet demonstrates how to fix the E0412 errors from the previous example. It shows proper struct declaration, correct use of associated types in traits, and proper generic type parameter declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0412.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Something;

impl Something {} // ok!

// or:

trait Foo {
    type N;

    fn bar(_: Self::N); // ok!
}

// or:

fn foo<T>(x: T) {} // ok!
```

----------------------------------------

TITLE: Using Config Struct for Multiple Parameters
DESCRIPTION: This snippet illustrates how to utilize a configuration struct to manage multiple parameters for a function, thus reducing function complexity and improving readability.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
// GOOD
pub struct AnnotationConfig {
    pub binary_target: bool,
    pub annotate_runnables: bool,
    pub annotate_impls: bool,
}

pub fn annotations(
    db: &RootDatabase,
    file_id: FileId,
    config: AnnotationConfig
) -> Vec<Annotation> {
    ...
}

// BAD
pub fn annotations(
    db: &RootDatabase,
    file_id: FileId,
    binary_target: bool,
    annotate_runnables: bool,
    annotate_impls: bool,
) -> Vec<Annotation> {
    ...
}
```

----------------------------------------

TITLE: Block Style Alignment for Function Calls in Rust
DESCRIPTION: Shows the default 'Block' alignment style for function calls. Each argument in a multiline call is aligned as a block with consistent indentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_31

LANGUAGE: rust
CODE:
```
fn main() {
    lorem(
        "lorem",
        "ipsum",
        "dolor",
        "sit",
        "amet",
        "consectetur",
        "adipiscing",
        "elit",
    );
}
```

----------------------------------------

TITLE: Macro Rules Definition Formatting in Rust
DESCRIPTION: Demonstrates the use of `{}` for the full definition of macros in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_17

LANGUAGE: rust
CODE:
```
macro_rules! foo {
}
```

----------------------------------------

TITLE: Trait Bounds Formatting in Rust
DESCRIPTION: Illustrates the formatting of trait bounds in Rust, including spacing around the colon and plus signs. It also covers line breaking within the bounds.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
trait Foo: Debug + Bar {}
```

----------------------------------------

TITLE: Correct If-Else Expression Implementation in Rust
DESCRIPTION: Example of correct Rust code that properly implements an if-else expression by including both blocks and returning consistent types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0317.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let x = 5;
let a = if x == 5 {
    1
} else {
    2
};
```

----------------------------------------

TITLE: Correct Generic Trait Implementation with Explicit Type Parameters in Rust
DESCRIPTION: This code snippet shows the correct way to implement generic traits with impl Trait by explicitly defining named generic parameters. It demonstrates how to properly use impl Trait with nested generic arguments.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0666.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait MyGenericTrait<T> {}
trait MyInnerTrait {}

fn foo<T: MyInnerTrait>(
    bar: impl MyGenericTrait<T>, // ok!
) {}
```

----------------------------------------

TITLE: Customizing Semantic Token Styling for Unsafe Operations (JSON)
DESCRIPTION: This snippet provides a specific example of customizing the appearance of unsafe operations in the VS Code editor.  It allows you to apply a specific color to `operator.unsafe`, `function.unsafe`, and `method.unsafe`.  Requires VS Code and the Rust extension. The output visually highlights unsafe operations in the editor. Configuration takes place in settings.json.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/editor_features.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
   "editor.semanticTokenColorCustomizations": {
         "rules": {
             "operator.unsafe": "#ff6600",
             "function.unsafe": "#ff6600",
             "method.unsafe": "#ff6600"
         }
    },
}
```

----------------------------------------

TITLE: Correct Usage of Deprecated Attribute in Rust
DESCRIPTION: This snippet provides a correct example of using the `deprecated` attribute with a single note on a Rust function. It illustrates the appropriate way to deprecate a function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0550.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
#[deprecated(note = \"because why not, right?\")]
fn the_banished() {} // ok!
```

----------------------------------------

TITLE: Correct Inherent Implementation in Rust
DESCRIPTION: This code snippet shows the correct way to create an inherent implementation without the unsafe keyword. Inherent implementations are always safe by definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0197.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo;

impl Foo { } // ok!
```

----------------------------------------

TITLE: Import Merging Examples in Rust
DESCRIPTION: Shows the difference between merged and unmerged imports, noting that tools should not automatically merge or unmerge imports by default.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_32

LANGUAGE: rust
CODE:
```
// Un-merged
use a::b;
use a::c::d;

// Merged
use a::{b, c::d};
```

----------------------------------------

TITLE: Correct Implementation Using Trait in Rust
DESCRIPTION: This code snippet shows the correct way to implement a method for a primitive type (*mut Foo) using a trait in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0390.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo {
    x: i32
}

trait Bar {
    fn bar();
}

impl Bar for *mut Foo {
    fn bar() {} // ok!
}
```

----------------------------------------

TITLE: Configuring check-incompatible-msrv-in-tests
DESCRIPTION: Determines whether to check for Minimum Supported Rust Version (MSRV) compatibility within `#[test]` and `#[cfg(test)]` code blocks.  Defaults to `false`. Enabling this helps ensure tests are compatible with the specified MSRV.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_5



----------------------------------------

TITLE: Compile-Fail Example: Invalid Match Pattern
DESCRIPTION: This code demonstrates the E0533 error. It attempts to use the `Tortoise::turtle` method directly as a match pattern, which is invalid because it's not a unit struct, variant, or constant. The code will fail to compile.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0533.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0533
struct Tortoise;

impl Tortoise {
    fn turtle(&self) -> u32 { 0 }
}

match 0u32 {
    Tortoise::turtle => {} // Error!
    _ => {}
}
if let Tortoise::turtle = 0u32 {} // Same error!
```
```

----------------------------------------

TITLE: Demonstrating E0062 Error in Rust Struct Initialization
DESCRIPTION: This code snippet shows an erroneous struct initialization where the field 'x' is specified twice, resulting in a compilation error E0062.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0062.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo {
    x: i32,
}

fn main() {
    let x = Foo {
                x: 0,
                x: 0, // error: field `x` specified more than once
            };
}
```

----------------------------------------

TITLE: Illustrating Correct Inner Doc Comment Usage in Rust
DESCRIPTION: This example demonstrates the proper use of inner doc comments in Rust. Inner doc comments can be applied to modules or used inside function blocks.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0753.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
//! A working comment applied to the module!
fn foo() {
    //! Another working comment!
}
fn main() {}
```

----------------------------------------

TITLE: Fix: Static Coroutine
DESCRIPTION: This code fixes the E0626 error by marking the coroutine as `static`. This makes the coroutine not movable, allowing borrows to persist across yield points.  Note the `static` keyword.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0626.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# #![feature(coroutines, coroutine_trait, stmt_expr_attributes)]
# use std::ops::Coroutine;
# use std::pin::Pin;
let mut b = #[coroutine] static || { // <-- note the static keyword
    let a = &String::from("hello, world");
    yield ();
    println!("{}", a);
};
let mut b = std::pin::pin!(b);
b.as_mut().resume(());
```

----------------------------------------

TITLE: Consistent Variable Binding in Or Pattern - Rust
DESCRIPTION: This example demonstrates proper variable binding in an OR pattern by ensuring the variable 'y' is bound to a field of the same type in all sub-patterns. The variable is consistently bound regardless of which pattern matches.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0408.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
let x = (0, 2);
match x {
    (0, y) | (y, 0) => { /* use y */}
    _ => {}
}
```

----------------------------------------

TITLE: Converting Nested Function to Closure in Rust
DESCRIPTION: Converts a nested function within another function into a closure, demonstrating inline definition and usage.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_30

LANGUAGE: rust
CODE:
```
fn main() {
    let foo = |label: &str, number: u64| {
        println!("{}: {}", label, number);
    };

    foo("Bar", 100);
}
```

----------------------------------------

TITLE: Making Rust Doc Examples with `?` Testable
DESCRIPTION: This snippet demonstrates how to make a Rust documentation example using the `?` operator runnable by `rustdoc`'s testing framework. It wraps the core example code within a hidden `main` function (`# fn main() ...`) that returns a `Result`, and includes a hidden `Ok(())` (`#     Ok(())`). These lines starting with `#` are executed during tests but hidden in the generated documentation, keeping the user-facing example clean.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/what-to-include.md#_snippet_3

LANGUAGE: Text
CODE:
```
/// Example
/// ```rust
/// # fn main() -> Result<(), std::num::ParseIntError> {
/// let fortytwo = "42".parse::<u32>()?;
/// println!("{} + 10 = {}", fortytwo, fortytwo+10);
/// #     Ok(())
/// # }
/// ```
```

----------------------------------------

TITLE: Copying Generic Parameters for Inner Function
DESCRIPTION: Solution showing how to properly define generic parameters for inner function by copying them.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0401.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
fn foo<T>(x: T) {
    fn bar<T>(y: T) {
        // ..
    }
    bar(x);
}
```

----------------------------------------

TITLE: Changing Visibility of Items in Rust
DESCRIPTION: This assist adds or changes existing visibility specifiers. It allows cycling through different visibility levels for modules, functions, and other items.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_15

LANGUAGE: rust
CODE:
```
fn frobnicate() {}
```

LANGUAGE: rust
CODE:
```
pub(crate) fn frobnicate() {}
```

----------------------------------------

TITLE: Avoiding Single-Use Helper Functions in Rust
DESCRIPTION: Shows the recommendation to avoid creating single-use helper functions in Rust, instead using blocks to delineate logic while maintaining access to context.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_30

LANGUAGE: rust
CODE:
```
// GOOD
let buf = {
    let mut buf = get_empty_buf(&mut arena);
    buf.add_item(item);
    buf
};

// BAD
let buf = prepare_buf(&mut arena, item);

...

fn prepare_buf(arena: &mut Arena, item: Item) -> ItemBuf {
    let mut res = get_empty_buf(&mut arena);
    res.add_item(item);
    res
}
```

----------------------------------------

TITLE: Recommended Alternative Using Newtype Wrapper and Receiver Trait
DESCRIPTION: Shows the recommended approach to handle raw pointer receivers using a newtype wrapper that implements the core::ops::Receiver trait. This approach requires only the arbitrary_self_types feature rather than arbitrary_self_types_pointers.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/arbitrary-self-types-pointers.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(arbitrary_self_types)]
#![allow(dead_code)]

struct A;

impl A {
    fn m(self: Wrapper<Self>) {} // can extract the pointer and do
        // what it needs
}

struct Wrapper<T>(*const T);

impl<T> core::ops::Receiver for Wrapper<T> {
    type Target = T;
}

fn main() {
    let a = A;
    let a_ptr: *const A = &a as *const A;
    let a_wrapper = Wrapper(a_ptr);
    a_wrapper.m();
}
```

----------------------------------------

TITLE: Demonstrating E0373 Error in Rust Async Blocks
DESCRIPTION: This code illustrates the E0373 error occurring in the context of async blocks, where captured variables may not live long enough.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0373.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
use std::future::Future;

async fn f() {
    let v = vec![1, 2, 3i32];
    spawn(async { //~ ERROR E0373
        println!("{:?}", v)
    });
}

fn spawn<F: Future + Send + 'static>(future: F) {
    unimplemented!()
}
```

----------------------------------------

TITLE: Correct Drop Implementation Using Wrapper Type in Rust
DESCRIPTION: This example demonstrates the correct way to implement Drop for generic types by using a wrapper struct that enforces the trait bound. The wrapper approach allows for proper specialization of Drop.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0367.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo{}

struct MyStruct<T> {
    t: T
}

struct MyStructWrapper<T: Foo> {
    t: MyStruct<T>
}

impl <T: Foo> Drop for MyStructWrapper<T> {
    fn drop(&mut self) {}
}
```

----------------------------------------

TITLE: Small no_std application example for QNX
DESCRIPTION: A minimal `no_std` Rust application targeting QNX. This example demonstrates how to create a basic program that links against `libc.so` and uses the `printf` function to print a message to the console. It also includes panic handling and the `eh_personality` function which are required for `no_std` applications.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/nto-qnx.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
```rust,ignore (platform-specific)
#![no_std]
#![no_main]
#![feature(lang_items)]

// We must always link against libc, even if no external functions are used
// "extern C" - Block can be empty but must be present
#[link(name = "c")]
extern "C" {
    pub fn printf(format: *const core::ffi::c_char, ...) -> core::ffi::c_int;
}

#[no_mangle]
pub extern "C" fn main(_argc: core::ffi::c_int, _argv: *const *const u8) -> core::ffi::c_int {
    const HELLO: &'static str = "Hello World, the answer is %d\n\0";
    unsafe {
        printf(HELLO.as_ptr() as *const _, 42);
    }
    0
}

use core::panic::PanicInfo;

#[panic_handler]
fn panic(_panic: &PanicInfo<'_>) -> ! {
    loop {}
}

#[lang = "eh_personality"]
#[no_mangle]
pub extern "C" fn rust_eh_personality() {}
```
```

----------------------------------------

TITLE: Running Clippy with Auto-fix
DESCRIPTION: Command to run Clippy with automatic fix suggestions applied
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/README.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
cargo clippy --fix
```

----------------------------------------

TITLE: Correct Break with Value in Loop Statement (Rust)
DESCRIPTION: This code example shows the correct way to use a break statement with a value in Rust by using a loop statement instead of while, for, or while let loops.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0571.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# let mut i = 1;
# fn satisfied(n: usize) -> bool { n % 23 == 0 }
let result = loop { // This is now a "loop" loop.
    if satisfied(i) {
        break 2 * i; // ok!
    }
    i += 1;
};
```

----------------------------------------

TITLE: Correcting Trait Implementation with Matching Parameters in Rust
DESCRIPTION: This code snippet demonstrates the correct implementation of the 'Foo' trait for 'Bar' struct. The 'foo' method in the implementation now has the same number of parameters as specified in the trait, resolving the compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0050.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo(&self, x: u8) -> bool;
}

struct Bar;

impl Foo for Bar {
    fn foo(&self, x: u8) -> bool { // ok!
        true
    }
}
```

----------------------------------------

TITLE: Erroneous Associated Type Constraint in Rust Traits
DESCRIPTION: This code snippet demonstrates an invalid attempt to constrain an associated type Color in a BoxCar trait that inherits from both Vehicle and Box traits. The constraint in the function signature is not allowed and results in an E0222 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0222.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub trait Vehicle {
    type Color;
}

pub trait Box {
    type Color;
}

pub trait BoxCar : Box + Vehicle {}

fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {} // Invalid constraint
```

----------------------------------------

TITLE: Moving Match Guard to Arm Body in Rust
DESCRIPTION: Transforms a match guard condition into a conditional statement within the match arm body. This refactoring can improve readability in certain cases by separating pattern matching from conditional logic.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_88

LANGUAGE: rust
CODE:
```
enum Action { Move { distance: u32 }, Stop }

fn handle(action: Action) {
    match action {
        Action::Move { distance } if distance > 10 => foo(),
        _ => (),
    }
}
```

LANGUAGE: rust
CODE:
```
enum Action { Move { distance: u32 }, Stop }

fn handle(action: Action) {
    match action {
        Action::Move { distance } => if distance > 10 {
            foo()
        },
        _ => (),
    }
}
```

----------------------------------------

TITLE: Testing Emscripten Compilation
DESCRIPTION: This shell command example demonstrates how to test Rust programs targeting 'wasm32-unknown-emscripten' using specific Emscripten CFLAGS. Prerequisites include 'emcc', 'node', and ensuring 'x.py' script is accessible. The command outputs test results, skipping the linkchecker tool for efficiency.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-emscripten.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
EMCC_CFLAGS="-s MAXIMUM_MEMORY=2GB" ./x.py test --target wasm32-unknown-emscripten --skip src/tools/linkchecker
```

----------------------------------------

TITLE: Correct Usage of repr(transparent) in Rust
DESCRIPTION: This snippet demonstrates the correct way to use the `repr(transparent)` attribute. It should be used alone without other representation hints.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0692.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[repr(transparent)]
struct Grams(f32);
```

----------------------------------------

TITLE: Example bash commands for setting RUSTC_LOG and RUSTDOC_LOG
DESCRIPTION: This collection of bash commands demonstrates various uses of `RUSTC_LOG` and `RUSTDOC_LOG` for enabling tracing in the Rust compiler and rustdoc. It shows how to filter by module, logging level, and how to redirect output to a file. It also includes examples for enabling tracing in `rustc_codegen_ssa` and `rustc_resolve`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tracing.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
# This puts the output of all debug calls in `rustc_middle/src/traits` into
# standard error, which might fill your console backscroll.
$ RUSTC_LOG=rustc_middle::traits=debug rustc +stage1 my-file.rs

# This puts the output of all debug calls in `rustc_middle/src/traits` in
# `traits-log`, so you can then see it with a text editor.
$ RUSTC_LOG=rustc_middle::traits=debug rustc +stage1 my-file.rs 2>traits-log

# Not recommended! This will show the output of all `debug!` calls
# in the Rust compiler, and there are a *lot* of them, so it will be
# hard to find anything.
$ RUSTC_LOG=debug rustc +stage1 my-file.rs 2>all-log

# This will show the output of all `info!` calls in `rustc_codegen_ssa`.
#
# There's an `info!` statement in `codegen_instance` that outputs
# every function that is codegen'd. This is useful to find out
# which function triggers an LLVM assertion, and this is an `info!`
# log rather than a `debug!` log so it will work on the official
# compilers.
$ RUSTC_LOG=rustc_codegen_ssa=info rustc +stage1 my-file.rs

# This will show all logs in `rustc_codegen_ssa` and `rustc_resolve`.
$ RUSTC_LOG=rustc_codegen_ssa,rustc_resolve rustc +stage1 my-file.rs

# This will show the output of all `info!` calls made by rustdoc
# or any rustc library it calls.
$ RUSTDOC_LOG=info rustdoc +stage1 my-file.rs

# This will only show `debug!` calls made by rustdoc directly,
# not any `rustc*` crate.
$ RUSTDOC_LOG=rustdoc=debug rustdoc +stage1 my-file.rs
```

----------------------------------------

TITLE: Erroneous Async Function with Elided Lifetime in Rust
DESCRIPTION: This code snippet demonstrates an erroneous example where an argument lifetime is elided in an async function, causing a compilation error. The struct 'Content' has a lifetime parameter, but the async function 'create' doesn't specify it.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0726.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use futures::executor::block_on;
struct Content<'a> {
    title: &'a str,
    body: &'a str,
}
async fn create(content: Content) { // error: implicit elided
                                    // lifetime not allowed here
    println!("title: {}", content.title);
    println!("body: {}", content.body);
}
let content = Content { title: "Rust", body: "is great!" };
let future = create(content);
block_on(future);
```

----------------------------------------

TITLE: Defining Opaque Type with Type Parameters in Rust
DESCRIPTION: This snippet demonstrates how to correctly and incorrectly define an opaque type with type parameters in Rust. The first function showcases a valid definition with a type parameter, while the second function shows an invalid definition using a non-type parameter, leading to ambiguity in interpreting the hidden type. Dependencies include understanding of Rust generics and type inference rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/opaque-types-region-inference-restrictions.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
type Opaque<X> = impl Sized;

// `T` is a type parameter.
// Opaque<T> := ();
fn good<T>() -> Opaque<T> {}

// `()` is not a type parameter.
// Opaque<()> := ();
fn bad() -> Opaque<()> {} //~ ERROR

```

----------------------------------------

TITLE: Block Indentation Example in Rust
DESCRIPTION: Demonstrates preferred block indentation technique for function calls with multiple arguments, emphasizing readability and minimizing diff changes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/README.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// Block indent
a_function_call(
    foo,
    bar,
);
```

----------------------------------------

TITLE: Demonstrating Invalid Rust Lint Usage - Shell
DESCRIPTION: This snippet shows an erroneous command to the Rust compiler where an invalid lint is specified. The lint name may be misspelled or deprecated, causing a compilation error. Users should ensure the lint names are valid to avoid such errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0602.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
rustc -D bogus rust_file.rs
```

----------------------------------------

TITLE: Correct Trait Implementation without Mismatched Associated Type
DESCRIPTION: This code provides the correct implementation of the `Foo` trait.  The `impl` block does not define any associated types, avoiding the E0437 error because it doesn't attempt to define a type not present on the trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0437.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
trait Foo {}

impl Foo for i32 {}
```
```

----------------------------------------

TITLE: Correct Pattern Matching Types in Rust
DESCRIPTION: Example of correct type matching in a range pattern, ensuring consistent types throughout the match expression.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0211.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
let x = 1u8;

match x {
    0u8..=3u8 => (), // ok!
    _ => ()
}
```

----------------------------------------

TITLE: Erroneous Default Trait Derivation for Rust Enum
DESCRIPTION: This code snippet demonstrates an incorrect attempt to derive the Default trait for a Rust enum without specifying a default variant. This will result in a compilation error (E0665).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0665.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[derive(Default)]
enum Food {
    Sweet,
    Salty,
}
```

----------------------------------------

TITLE: Demonstrating Incorrect Usage of Visibility Qualifiers in Rust
DESCRIPTION: This code snippet shows erroneous examples of using visibility qualifiers where they are not permitted in Rust. It includes incorrect usage in enum variants, impl blocks, and trait implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0449.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Bar;

trait Foo {
    fn foo();
}

enum Baz {
    pub Qux, // error: visibility qualifiers are not permitted here
}

pub impl Bar {} // error: visibility qualifiers are not permitted here

pub impl Foo for Bar { // error: visibility qualifiers are not permitted here
    pub fn foo() {} // error: visibility qualifiers are not permitted here
}
```

----------------------------------------

TITLE: Handling Empty Match Arms in Rust
DESCRIPTION: Shows the preferred way of handling intentionally empty match arms in Rust using '=> (),' for consistency.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_27

LANGUAGE: rust
CODE:
```
// GOOD
match result {
    Ok(_) => (),
    Err(err) => error!("{}", err),
}

// BAD
match result {
    Ok(_) => {},
    Err(err) => error!("{}", err),
}
```

----------------------------------------

TITLE: Generating Setter Method in Rust
DESCRIPTION: This snippet demonstrates how to generate a setter method for a struct field. It creates an impl block with a method that takes a new value for the field and updates it.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_62

LANGUAGE: rust
CODE:
```
struct Person {
    name: String,
}
```

LANGUAGE: rust
CODE:
```
struct Person {
    name: String,
}

impl Person {
    fn set_name(&mut self, name: String) {
        self.name = name;
    }
}
```

----------------------------------------

TITLE: Demonstrating Unnecessary Public Visibility in Rust Enum
DESCRIPTION: This code snippet shows an erroneous example where the `pub` keyword is unnecessarily used inside a public enum, which previously triggered a compiler error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0448.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub enum Foo {
    pub Bar, // error: unnecessary `pub` visibility
}
```

----------------------------------------

TITLE: Formatting Nested Imports in Rust
DESCRIPTION: Guidelines for formatting imports with nested components, showing how to structure multi-line imports with proper indentation and line breaks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_31

LANGUAGE: rust
CODE:
```
use a::b::{
    x, y, z,
    u::{...},
    w::{...},
};
```

----------------------------------------

TITLE: Initializing Rust Enum with Incorrect Field Name
DESCRIPTION: Demonstrates a compilation error when attempting to use an undefined field in an enum variant. This example shows how Rust's type system prevents incorrect field access at compile-time.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0559.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum Field {
    Fool { x: u32 },
}

let s = Field::Fool { joke: 0 };
// error: struct variant `Field::Fool` has no field named `joke`
```

----------------------------------------

TITLE: Displaying target features for wasm32
DESCRIPTION: This command displays available target features for the `wasm32-unknown-unknown` target using `rustc`. The output can be used to enable or disable specific WebAssembly features during compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-unknown.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
$ rustc -Ctarget-feature=help --target wasm32-unknown-unknown
```

----------------------------------------

TITLE: Incorrect Break Statement Without Label
DESCRIPTION: Example showing erroneous code where a break statement appears inside a labeled block without specifying the label. This causes compilation error E0695.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0695.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
loop {
    'a: {
        break;
    }
}
```

----------------------------------------

TITLE: Using Qualified Paths in Pattern Matching - Rust
DESCRIPTION: Demonstrates how to use qualified paths in pattern matching with the more_qualified_paths feature. Shows destructuring through a qualified path using trait associated types and struct patterns.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/more-qualified-paths.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(more_qualified_paths)]

fn main() {
    // destructure through a qualified path
    let <Foo as A>::Assoc { br } = StructStruct { br: 2 };
}

struct StructStruct {
    br: i8,
}

struct Foo;

trait A {
    type Assoc;
}

impl A for Foo {
    type Assoc = StructStruct;
}
```

----------------------------------------

TITLE: Defining a Function with Required Arguments in Rust
DESCRIPTION: This example shows a function definition with two required parameters. This function must always be called with exactly two arguments matching the specified types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0061.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn f(a: u16, b: &str) {}
```

----------------------------------------

TITLE: Correct Module Visibility Inside Target Module
DESCRIPTION: Shows the correct way to restrict visibility by placing the struct inside the target module.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0742.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub mod sea {
    pub (in crate::sea) struct Shark; // ok!
}

fn main() {}
```

----------------------------------------

TITLE: Converting Into to From Implementation in Rust
DESCRIPTION: Converts an Into implementation to a From implementation. No additional dependencies are required.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_25

LANGUAGE: rust
CODE:
```
impl From<usize> for Thing {
    fn from(val: usize) -> Self {
        Thing {
            b: val.to_string(),
            a: val
        }
    }
}
```

----------------------------------------

TITLE: Correct Usage of Self Keyword in Rust Traits
DESCRIPTION: A demonstration of the correct usage of 'Self' within a trait definition, accessing associated items of a type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0411.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {
    type Bar;
}

trait Baz : Foo {
    fn bar() -> Self::Bar; // like this
}
```

----------------------------------------

TITLE: Promoting Local Variables to Constants in Rust
DESCRIPTION: Converts a local variable to a const item, changing its name to SCREAMING_SNAKE_CASE convention. This refactoring is applicable when the variable is initialized with a constant expression and improves code clarity by making immutability explicit.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_92

LANGUAGE: rust
CODE:
```
fn main() {
    let foo = true;

    if foo {
        println!("It's true");
    } else {
        println!("It's false");
    }
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    const FOO: bool = true;

    if FOO {
        println!("It's true");
    } else {
        println!("It's false");
    }
}
```

----------------------------------------

TITLE: Resolving Name Conflicts Using Parent Reference in Rust
DESCRIPTION: Shows how to resolve name conflicts by using the parent module path to explicitly reference the desired function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0255.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn foo() {}

mod bar {
     pub fn foo() {}
}

fn main() {
    bar::foo(); // we get the item by referring to its parent
}
```

----------------------------------------

TITLE: Enabling Pedantic Lints in Rust
DESCRIPTION: Example of how to enable pedantic lint checks for a Rust crate at the root level.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lints.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![warn(clippy::pedantic)]
```

----------------------------------------

TITLE: Demonstrating Invalid Assignment Operations in Rust
DESCRIPTION: This code snippet showcases various incorrect uses of the assignment operator in Rust, including attempts to assign values to constants, literals, functions, and structure names.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0070.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct SomeStruct {
    x: i32,
    y: i32,
}

const SOME_CONST: i32 = 12;

fn some_other_func() {}

fn some_function() {
    SOME_CONST = 14; // error: a constant value cannot be changed!
    1 = 3; // error: 1 isn't a valid place!
    some_other_func() = 4; // error: we cannot assign value to a function!
    SomeStruct::x = 12; // error: SomeStruct a structure name but it is used
                        //        like a variable!
}
```

----------------------------------------

TITLE: Parsing Rust Character Literal with Incomplete Syntax
DESCRIPTION: Demonstrates a syntax error when defining a character literal without a proper closing quote. Rust requires character literals to be enclosed in single quotes with a complete character representation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_char_with_slash_single_quote.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
'\''
```

----------------------------------------

TITLE: Demonstrating Mutable Borrowing in Async Closures (Rust)
DESCRIPTION: This example illustrates how mutable borrowing in a coroutine affects the lifetime of the borrow. It shows that when mutably borrowing from a parent capture, the borrow cannot live longer than either the parent or the original upvar borrow.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/coroutine-closures.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
let mut x = 1i32;
let c = async || {
    x = 1;
    // The parent borrows `x` for some `&'1 mut i32`.
    // However, when we call `c()`, we implicitly autoref for the signature of
    // `AsyncFnMut::async_call_mut`. Let's call that lifetime `'call`. Since
    // the maximum that `&'call mut &'1 mut i32` can be reborrowed is `&'call mut i32`,
    // the inner coroutine should capture w/ the lifetime of the coroutine-closure.
};
```

----------------------------------------

TITLE: Invalid Self-Referential Struct Definition in Rust
DESCRIPTION: Shows an invalid struct definition where Foo contains a Box<Foo>, creating an impossible initialization scenario
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0073.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo { x: Box<Foo> } // error
```

----------------------------------------

TITLE: Converting let-else to Match Expression in Rust
DESCRIPTION: Replaces let-else statement with a let statement and a match expression. Requires understanding of Rust's pattern matching.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_27

LANGUAGE: rust
CODE:
```
fn main() {
    let mut x = match f() {
        Ok(x) => x,
        _ => return,
    };
}
```

----------------------------------------

TITLE: Moving Type Bounds to Where Clause in Rust
DESCRIPTION: Relocates inline type bounds to a where clause. This refactoring improves readability by separating type parameter declarations from their constraints, especially useful for complex generic signatures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_85

LANGUAGE: rust
CODE:
```
fn apply<T, U, F: FnOnce(T) -> U>(f: F, x: T) -> U {
    f(x)
}
```

LANGUAGE: rust
CODE:
```
fn apply<T, U, F>(f: F, x: T) -> U where F: FnOnce(T) -> U {
    f(x)
}
```

----------------------------------------

TITLE: Trait with Associated Constants Not Being dyn-compatible in Rust
DESCRIPTION: Demonstrates that traits with associated constants cannot be used as trait objects because constants aren't stored in the method table.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
trait Foo {
    const X: i32;
}

impl dyn Foo {}
```

----------------------------------------

TITLE: Invalid Drop Implementation on Reference (Rust)
DESCRIPTION: This code shows an invalid attempt to implement the Drop trait on a reference to a concrete type. Drop can only be implemented on the actual type, not on references to it.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0120.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Concrete {}

impl Drop for &'_ mut Concrete  {
    fn drop(&mut self) {}
}
```

----------------------------------------

TITLE: Making Methods Public in Rust
DESCRIPTION: This approach resolves the private method error by altering the method's visibility to public. It allows the method to be accessed without any restrictions, enabling its use outside its original scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0624.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
mod inner {
    pub struct Foo;

    impl Foo {
        pub fn method(&self) {} // It's now public.
    }
}

let foo = inner::Foo;
foo.method(); // Ok!
```

----------------------------------------

TITLE: Running Documentation Tests with rustdoc (Bash)
DESCRIPTION: Demonstrates the usage of the `--test` flag to execute code examples found within the documentation as tests, ensuring they are valid and functional.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_12

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --test
```

----------------------------------------

TITLE: Invalid Struct Field Usage in Rust
DESCRIPTION: This example demonstrates the E0560 error that occurs when attempting to use a field that doesn't exist in a struct definition. The error is triggered when 'father' is used in the struct initialization despite not being defined in the Simba struct.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0560.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Simba {
    mother: u32,
}

let s = Simba { mother: 1, father: 0 };
// error: structure `Simba` has no field named `father`
```

----------------------------------------

TITLE: Declaring Type Alias in Rust
DESCRIPTION: This snippet declares a type alias named 'Alias' with a specific location and definition details. Dependencies are based on Rust's module and type declaration requirements. The expected inputs relate to type aliasing within Rust's module system, and outputs include the recognized type alias for compilation and reference.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
FileSymbol {
    name: "Alias",
    def: TypeAlias(
        TypeAlias {
            id: TypeAliasId(
                0,
            ),
        },
    ),
    loc: DeclarationLocation {
        hir_file_id: EditionedFileId(
            FileId(
                0,
            ),
            Edition2021,
        ),
        ptr: SyntaxNodePtr {
            kind: TYPE_ALIAS,
            range: 470..490,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 475..480,
            },
        ),
    },
    container_name: None,
    is_alias: false,
    is_assoc: false,
}
```

----------------------------------------

TITLE: Incorrect Static-Const Reference Pattern in Rust
DESCRIPTION: Demonstrates an erroneous pattern where a const variable attempts to reference a static variable, which is not allowed in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0013.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
static X: i32 = 42;
const Y: i32 = X;
```

----------------------------------------

TITLE: Staging Resolved Conflicts in Git (Console)
DESCRIPTION: Marks a file with resolved merge conflicts as ready to be committed (or in this case, to continue the rebase). After manually editing a conflicted file to fix the conflict, you must run `git add` on it.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_9

LANGUAGE: console
CODE:
```
git add
```

----------------------------------------

TITLE: Common Linking Error Message
DESCRIPTION: Example of the linking error that occurs when LLVM tools are not properly installed or configured.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustc-driver/remarks-on-perma-unstable-features.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
error: linking with `cc` failed: exit status: 1
  |
  = note: rust-lld: error: unable to find library -lLLVM-{version}
```

----------------------------------------

TITLE: Configuring Build Optimization in Cargo.toml
DESCRIPTION: TOML configuration to disable optimizations for specific crates to improve rebuild times during development.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/suggested.md#2025-04-21_snippet_6

LANGUAGE: toml
CODE:
```
[profile.release.package.rustc_mir_build]
opt-level = 0
[profile.release.package.rustc_driver]
opt-level = 0
```

----------------------------------------

TITLE: Correct Rust Code with Single Relaxed Default Bound
DESCRIPTION: This code shows the proper way to use a relaxed bound, with only one trait (?Sized) being relaxed. This is the correct approach when you need to opt out of a default trait bound in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0203.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Good<T: ?Sized>{
    inner: T
}
```

----------------------------------------

TITLE: Demonstrating Struct Constructor Error in Rust
DESCRIPTION: This code snippet shows an erroneous attempt to construct a struct with a private field, resulting in a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0451.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
mod bar {
    pub struct Foo {
        pub a: isize,
        b: isize,
    }
}

let f = bar::Foo{ a: 0, b: 0 }; // error: field `b` of struct `bar::Foo`
                                //        is private
```

----------------------------------------

TITLE: Generating 'as_' Method for Enum Variant in Rust
DESCRIPTION: This snippet demonstrates how to generate an 'as_' method for an enum variant. It creates an impl block with a method that returns an Option containing a reference to the variant's inner value if it matches.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_48

LANGUAGE: rust
CODE:
```
enum Value {
 Number(i32),
 Text(String),
}
```

LANGUAGE: rust
CODE:
```
enum Value {
 Number(i32),
 Text(String),
}

impl Value {
    fn as_text(&self) -> Option<&String> {
        if let Self::Text(v) = self {
            Some(v)
        } else {
            None
        }
    }
}
```

----------------------------------------

TITLE: Demonstrating Integer Overflow in Rust
DESCRIPTION: Example program that demonstrates integer overflow in Rust. This program attempts to add 1 to the maximum value of a u8 (255), which would cause an overflow.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    let u: u8 = 255;
    println!("u: {}", u + 1);
}
```

----------------------------------------

TITLE: Invalid Trait Object Creation with Self-returning Method in Rust
DESCRIPTION: Demonstrates code that fails to compile because it tries to use a trait with Self-returning methods as a trait object. The compiler cannot determine the concrete return type at the call site.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait Trait {
    fn foo(&self) -> Self;
}

fn call_foo(x: Box<dyn Trait>) {
    let y = x.foo(); // What type is y?
    // ...
}
```

----------------------------------------

TITLE: Invalid Recursive impl Trait Example in Rust
DESCRIPTION: Shows an invalid attempt to create a recursive type using impl Trait where the function returns a type that contains itself. This is not allowed as impl Trait must be expandable to a concrete type without impl Trait types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0720.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn make_recursive_type() -> impl Sized {
    [make_recursive_type(), make_recursive_type()]
}
```

----------------------------------------

TITLE: Range Patterns with Parentheses in Rust Slices
DESCRIPTION: Shows how range patterns can be used in slice patterns when wrapped in parentheses, which doesn't require the half_open_range_patterns_in_slices feature flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/half-open-range-patterns-in-slices.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    let xs = [13, 1];
    let [(a @ 3..), c] = xs else { return; };
}
```

----------------------------------------

TITLE: Future-incompatible Lint Example in Rust
DESCRIPTION: Demonstrates a future-incompatible lint warning about unsafe packed field borrowing. Shows how the compiler warns about code that will become invalid in future Rust versions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/lints/index.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
warning: borrow of packed field is unsafe and requires unsafe function or block (error E0133)
  --> lint_example.rs:11:13
   |
11 |     let y = &x.data.0;
   |             ^^^^^^^^^
   |
   = note: `#[warn(safe_packed_borrows)]` on by default
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>
   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior
```

----------------------------------------

TITLE: Running Cargo Build with Verbose Output
DESCRIPTION: Command to show how Cargo invokes rustc compiler with detailed output of compilation process
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/what-is-rustc.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ cargo build --verbose
```

----------------------------------------

TITLE: Using Non-Inclusive Range in Rust
DESCRIPTION: This solution demonstrates how to fix the error by using a non-inclusive range operator (..) which doesn't require an end value. This syntax creates a range from the start index to the end of the collection.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0586.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];
    let x = &tmp[1..]; // ok!
}
```

----------------------------------------

TITLE: Using PhantomData to Fix Unused Lifetime Parameter in Rust Struct
DESCRIPTION: This code snippet demonstrates how to use PhantomData to express lifetime constraints and resolve the E0392 error when working with raw pointers and lifetimes.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0392.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
use std::marker::PhantomData;

struct Foo<'a, T: 'a> {
    x: *const T,
    phantom: PhantomData<&'a T>
}
```

----------------------------------------

TITLE: Fixing E0071 by Defining a Proper Struct in Rust
DESCRIPTION: This alternative solution fixes the E0071 error by creating a proper struct definition that can be correctly initialized with structure-literal syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0071.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct U32 { value: u32 }
let t = U32 { value: 4 };
```

----------------------------------------

TITLE: Failing Trait Implementation with Mismatched Associated Type
DESCRIPTION: This code demonstrates the E0437 error. The `impl` block defines an associated type `Bar` that is not present in the `Foo` trait definition, leading to a compilation failure.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0437.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0437
trait Foo {}

impl Foo for i32 {
    type Bar = bool;
}
```
```

----------------------------------------

TITLE: Correction Example: Using Properly Defined Associated Type in Rust Trait
DESCRIPTION: This corrected code fixes the E0576 error by using the properly defined associated type 'Who' instead of the non-existent 'You'. This compiles successfully because the associated type is defined within the trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0576.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Hello {
    type Who;

    fn hello() -> <Self as Hello>::Who; // ok!
}
```

----------------------------------------

TITLE: Example of Early-Bound Lifetimes in Functions
DESCRIPTION: This code demonstrates the use of early-bound lifetimes with two functions, foo and bar, which illustrate how Rust handles lifetime parameters in type contexts.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_15

LANGUAGE: rust
CODE:
```
fn foo<'a: 'a>(_: &'a String) {}
```

LANGUAGE: rust
CODE:
```
fn bar<'a, T: 'a>(_: &'a T) {}
```

----------------------------------------

TITLE: Demonstrating Invalid Pattern Binding in Rust
DESCRIPTION: Shows erroneous code that attempts to mix by-move and by-ref bindings in the same pattern, which was previously disallowed by the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0009.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(move_ref_pattern)]

struct X { x: (), }

let x = Some((X { x: () }, X { x: () }));
match x {
    Some((y, ref z)) => {}, // error: cannot bind by-move and by-ref in the
                            //        same pattern
    None => panic!()
}
```

----------------------------------------

TITLE: Defining Erroneous Thread-Local Static Variable in Rust
DESCRIPTION: This code snippet demonstrates an erroneous attempt to define a const variable that refers to a thread-local static variable in Rust. A const variable cannot reference a thread-local static variable during compilation. The provided code triggers a compile-time error E0625 due to this limitation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0625.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#![feature(thread_local)]

#[thread_local]
static X: usize = 12;

const Y: usize = 2 * X;
```

----------------------------------------

TITLE: Illustrating Trait Implementation Issues with Async Functions (Rust)
DESCRIPTION: This code snippet shows how async functions in traits would require support for Generic Associated Types, which is not yet implemented in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0706.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
impl MyDatabase {
    async fn get_user(&self) -> User {
        unimplemented!()
    }
}

impl MyDatabase {
    fn get_user(&self) -> impl Future<Output = User> + '_ {
        unimplemented!()
    }
}
```

----------------------------------------

TITLE: Inserting Links in HTML Warning Blocks
DESCRIPTION: This example demonstrates adding a link inside an HTML warning block within a Markdown file. An empty line should separate HTML tags from Markdown content to allow proper rendering of Markdown syntax inside HTML. Ensure that your Markdown parser supports this feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/how-to-write-documentation.md#2025-04-21_snippet_3

LANGUAGE: Markdown
CODE:
```
/// documentation
///
/// <div class="warning">
///
/// Go to [this link](https://rust-lang.org)!
///
/// </div>
///
/// more documentation
```

----------------------------------------

TITLE: Resolving Import Naming Conflict Using Full Paths in Rust
DESCRIPTION: Demonstrates resolving naming conflicts by using fully qualified paths to reference items instead of importing them directly.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0252.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use bar::baz;

fn main() {
    let x = foo::baz; // ok!
}

mod foo {
    pub struct baz;
}

mod bar {
    pub mod baz {}
}
```

----------------------------------------

TITLE: Solution: Declaring a Const Function in Rust
DESCRIPTION: The correct approach to fix the E0015 error by declaring 'create_some' as a const function using the 'const' keyword before 'fn'. This allows the function to be used in constant expressions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0015.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// declared as a `const` function:
const fn create_some() -> Option<u8> {
    Some(1)
}

const FOO: Option<u8> = create_some(); // no error!
```

----------------------------------------

TITLE: Invalid Rust Lint Attribute Example
DESCRIPTION: An example showing incorrect usage of a lint attribute where a string value is incorrectly assigned to the lint name.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0452.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![allow(foo = "")] // error: malformed lint attribute
```

----------------------------------------

TITLE: Incorrect Recursive Async Function Implementation
DESCRIPTION: An erroneous example showing a recursive async function that fails to compile due to infinite size requirements.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0733.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
async fn foo(n: usize) {
    if n > 0 {
        foo(n - 1).await;
    }
}
```

----------------------------------------

TITLE: Demonstrating Range Pattern Error with Strings in Rust
DESCRIPTION: This code example shows the E0029 error that occurs when trying to use string literals with range patterns in match expressions. The compiler cannot evaluate string ordering at compile time, so a guard condition must be used instead.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0029.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let string = "salutations !";

// The ordering relation for strings cannot be evaluated at compile time,
// so this doesn't work:
match string {
    "hello" ..= "world" => {}
    _ => {}
}

// This is a more general version, using a guard:
match string {
    s if s >= "hello" && s <= "world" => {}
    _ => {}
}
```

----------------------------------------

TITLE: Correct Use of Break in Closures with Loops
DESCRIPTION: This code demonstrates the correct usage of a 'break' statement inside a closure. Loop keywords are valid in closures as long as they are contained within a loop structure. The example shows a closure with a for loop where the break statement is properly scoped.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0267.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let w = || {
    for _ in 0..10 {
        break;
    }
};

w();
```

----------------------------------------

TITLE: Invalid Type Parameter Naming - Duplicate Parameters
DESCRIPTION: Example showing incorrect usage where the same type parameter name T is used twice in a function signature, resulting in error E0403.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0403.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn f<T, T>(s: T, u: T) {}
```

----------------------------------------

TITLE: Struct Definition and Drop Implementation - Rust
DESCRIPTION: This snippet defines different structs with and without Drop implementations, illustrating the concept of drop obligations based on struct field characteristics. It showcases how a custom Drop trait can dictate drop behavior in complex types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/drop-elaboration.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct NoDrop(u8); // No `Drop` impl. No fields with `Drop` impls.

struct NeedsDrop(Vec<u8>); // No `Drop` impl but has fields with `Drop` impls.

struct ThinVec(*const u8); // Custom `Drop` impl. Individual fields cannot be moved from.

impl Drop for ThinVec {
    fn drop(&mut self) { /* ... */ }
}

enum MaybeDrop {
    Yes(NeedsDrop),
    No(NoDrop),
}
```

----------------------------------------

TITLE: Correct Variable Declaration and Usage in Rust
DESCRIPTION: Shows proper variable declaration before usage.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0425.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
let unknown_variable = 12u32;
let x = unknown_variable; // ok!
```

----------------------------------------

TITLE: Configuring rust-analyzer Inlay Hints Options in JSON
DESCRIPTION: Defines various flags and parameters controlling the display of inlay hints within rust-analyzer. This includes enabling or disabling hints for closing braces, closure captures and return types, generic parameters, implicit drops, lifetime elisions, parameter names, and type hints. The settings control when and how hints are shown (e.g., minimum lines before hints are displayed, whether to hide certain hints), and additional rendering options such as colon rendering and the maximum hint length. Dependencies include having rust-analyzer integrated in a Rust-supporting IDE. Inputs are configuration keys with boolean or string values, affecting the editor's hint rendering output.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "rust-analyzer.inlayHints.closingBraceHints.minLines": 25,
  "rust-analyzer.inlayHints.closureCaptureHints.enable": false,
  "rust-analyzer.inlayHints.closureReturnTypeHints.enable": "never",
  "rust-analyzer.inlayHints.closureStyle": "impl_fn",
  "rust-analyzer.inlayHints.discriminantHints.enable": "never",
  "rust-analyzer.inlayHints.expressionAdjustmentHints.enable": "never",
  "rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe": false,
  "rust-analyzer.inlayHints.expressionAdjustmentHints.mode": "prefix",
  "rust-analyzer.inlayHints.genericParameterHints.const.enable": true,
  "rust-analyzer.inlayHints.genericParameterHints.lifetime.enable": false,
  "rust-analyzer.inlayHints.genericParameterHints.type.enable": false,
  "rust-analyzer.inlayHints.implicitDrops.enable": false,
  "rust-analyzer.inlayHints.implicitSizedBoundHints.enable": false,
  "rust-analyzer.inlayHints.lifetimeElisionHints.enable": "never",
  "rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames": false,
  "rust-analyzer.inlayHints.maxLength": 25,
  "rust-analyzer.inlayHints.parameterHints.enable": true,
  "rust-analyzer.inlayHints.rangeExclusiveHints.enable": false,
  "rust-analyzer.inlayHints.reborrowHints.enable": "never",
  "rust-analyzer.inlayHints.renderColons": true,
  "rust-analyzer.inlayHints.typeHints.enable": true,
  "rust-analyzer.inlayHints.typeHints.hideClosureInitialization": false,
  "rust-analyzer.inlayHints.typeHints.hideClosureParameter": false,
  "rust-analyzer.inlayHints.typeHints.hideNamedConstructor": false
}
```

----------------------------------------

TITLE: Using Static Lifetime in Const Generic Parameter (Correct Example)
DESCRIPTION: This code demonstrates the correct approach to using string references in const generic parameters by explicitly using the 'static lifetime. This resolves the E0770 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0771.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(adt_const_params, unsized_const_params)]

fn function_with_str<const STRING: &'static str>() {} // ok!
```

----------------------------------------

TITLE: Function Call Formatting in Rust
DESCRIPTION: Comprehensive guidelines for formatting function calls, covering single-line and multi-line call styles, spacing, and argument handling
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
foo(x, y, z)

a_function_call(
    arg1,
    a_nested_call(a, b),
)
```

----------------------------------------

TITLE: Getting Help with rustdoc (Bash)
DESCRIPTION: Demonstrates how to use the `-h` or `--help` flag to display rustdoc's built-in help information, including a list of available command-line flags.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_0

LANGUAGE: bash
CODE:
```
$ rustdoc -h
```

LANGUAGE: bash
CODE:
```
$ rustdoc --help
```

----------------------------------------

TITLE: Configuring cognitive-complexity-threshold
DESCRIPTION: Sets the maximum allowed cognitive complexity for a function.  Functions exceeding this threshold will trigger a lint warning.  Defaults to 25. This helps to keep function complexity manageable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_8



----------------------------------------

TITLE: Demonstrating E0033 Error When Dereferencing Trait Objects in Rust
DESCRIPTION: This code example demonstrates the E0033 error that occurs when attempting to implicitly dereference a trait object. The error occurs because trait objects have no fixed size at compile time, so they must be accessed through pointers.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0033.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
# trait SomeTrait { fn method_one(&self){} fn method_two(&self){} }
# impl<T> SomeTrait for T {}
let trait_obj: &SomeTrait = &"some_value";

// This tries to implicitly dereference to create an unsized local variable.
let &invalid = trait_obj;

// You can call methods without binding to the value being pointed at.
trait_obj.method_one();
trait_obj.method_two();
```

----------------------------------------

TITLE: Resolving E0689 Error by Specifying Numeric Types in Rust
DESCRIPTION: This code snippet demonstrates correct ways to resolve the E0689 error by explicitly specifying the numeric type. It shows three different methods: using a type suffix, type annotation, and type casting.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0689.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use std::ops::Neg;

let _ = 2.0_f32.neg(); // ok!
let x: f32 = 2.0;
let _ = x.neg(); // ok!
let _ = (2.0 as f32).neg(); // ok!
```

----------------------------------------

TITLE: Demonstrating Closure Arguments in Rust
DESCRIPTION: This example shows both valid and invalid ways to call a closure in Rust. The error E0057 occurs when a closure is called with an incorrect number of arguments compared to its definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0057.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let f = |x| x * 3;
let a = f();        // invalid, too few parameters
let b = f(4);       // this works!
let c = f(2, 3);    // invalid, too many parameters
```

----------------------------------------

TITLE: Erroneous Trait Implementation in Rust
DESCRIPTION: This code snippet shows an incorrect implementation of a trait where a constant is mistakenly implemented as a method, resulting in a compilation error E0324.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0324.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Bar;

trait Foo {
    const N : u32;

    fn M();
}

impl Foo for Bar {
    fn N() {}
    // error: item `N` is an associated method, which doesn't match its
    //        trait `<Bar as Foo>`
}
```

----------------------------------------

TITLE: Correcting Type Inference in Async Rust Functions
DESCRIPTION: This code snippet demonstrates the correct way to use generic async functions by explicitly specifying the type for the generic parameter. By binding T to a concrete type (String in this case), the compiler can construct the coroutine.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0698.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
async fn bar<T>() -> () {}

async fn foo() {
    bar::<String>().await;
    //   ^^^^^^^^ specify type explicitly
}
```

----------------------------------------

TITLE: Resolving Associated Type Ambiguity in Rust
DESCRIPTION: This example demonstrates the correct way to resolve the ambiguous associated type reference by using explicit path specification with the syntax '<Self as Bar>::A'.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0221.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait T1 {}
trait T2 {}

trait Foo {
    type A: T1;
}

trait Bar : Foo {
    type A: T2;
    fn do_something() {
        let _: <Self as Bar>::A;
    }
}
```

----------------------------------------

TITLE: Correct Single Lifetime Bound Example in Rust
DESCRIPTION: Shows the correct way to specify a single lifetime bound on a trait object, which is the valid approach in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0226.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {}

type T<'a> = dyn Foo + 'a;
```

----------------------------------------

TITLE: Invalid Drop Implementation for Generic Type Specialization
DESCRIPTION: Demonstrates an illegal attempt to implement the Drop trait specifically for Foo<u32>. This fails because Rust does not allow implementing Drop for specific type parameters of generic types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0366.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo<T> {
    t: T
}

impl Drop for Foo<u32> {
    fn drop(&mut self) {}
}
```

----------------------------------------

TITLE: Rust Comment Formatting
DESCRIPTION: Shows examples of comment styles, including line comments, inline comments, and guidelines for writing clear, complete sentence comments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/README.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
// A comment on an item.
struct Foo { ... }

fn foo() {} // A comment after an item.

pub fn foo(/* a comment before an argument */ x: T) {...}
```

----------------------------------------

TITLE: Moving Inline Module to Separate File in Rust
DESCRIPTION: Extracts an inline module's contents to a separate file. This refactoring improves code organization by converting module definitions from inline blocks to file-based modules, following Rust's module system conventions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_89

LANGUAGE: rust
CODE:
```
mod foo {
    fn t() {}
}
```

LANGUAGE: rust
CODE:
```
mod foo;
```

----------------------------------------

TITLE: Applying Multiple Representation Attributes in Rust Structs
DESCRIPTION: This example shows how to use different representation attributes by applying them to separate structs. The `repr(C)` is applied to the inner struct, while `repr(transparent)` is used on the wrapper struct.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0692.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#[repr(C)]
struct Foo {
    x: i32,
    // ...
}

#[repr(transparent)]
struct FooWrapper(Foo);
```

----------------------------------------

TITLE: Configuring avoid-breaking-exported-api
DESCRIPTION: This setting prevents Clippy from suggesting changes that could break the public API of a crate.  It's a boolean value, defaulting to `true`. When enabled, Clippy will be more conservative in its suggestions to maintain backward compatibility.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_2



----------------------------------------

TITLE: Demonstrating Associated Type Mismatch in Rust Trait Implementation
DESCRIPTION: This code snippet shows an example that triggers the E0271 error in Rust. It defines a trait with an associated type, a function with a trait bound specifying the associated type, and an implementation that doesn't match the specified type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0271.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Trait { type AssociatedType; }

fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {
    println!("in foo");
}

impl Trait for i8 { type AssociatedType = &'static str; }

foo(3_i8);
```

----------------------------------------

TITLE: Emitting Output with Custom Paths Example
DESCRIPTION: Examples of using --emit flag to specify custom output paths for different emit types. Shows how to output to specific files and stdout.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
--emit=link,dep-info=/path/to/dep-info.d
--emit=llvm-ir=-,mir
```

----------------------------------------

TITLE: Demonstrating E0322 Error: Explicit Implementation of Sized Trait in Rust
DESCRIPTION: This code snippet demonstrates the E0322 error that occurs when attempting to explicitly implement the Sized trait for a struct. The Sized trait is automatically implemented by the compiler and cannot be manually implemented.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0322.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo;

impl Sized for Foo {} // error!
```

----------------------------------------

TITLE: Invalid Generic Const Parameter Reference - Rust
DESCRIPTION: Demonstrates incorrect usage of const parameters referencing other generic type parameters, which results in compiler error E0770.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0770.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<T, const N: T>() {}
```

----------------------------------------

TITLE: Invalid Module Visibility Example in Rust
DESCRIPTION: Demonstrates incorrect usage of pub(in path) visibility modifier where the target module is not an ancestor of the current item.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0742.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub mod sea {}

pub (in crate::sea) struct Shark; // error!

fn main() {}
```

----------------------------------------

TITLE: Early Bound Lifetime Parameter Example
DESCRIPTION: Shows how making a lifetime parameter early bound allows it to be specified via turbofish syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
fn foo<'a: 'a>(b: &'a u32) -> &'a u32 { b }

let f /* : FooFnItem<'static> */ = foo::<'static>;
```

----------------------------------------

TITLE: Unconstrained Type Parameter in Trait Implementation Error Example
DESCRIPTION: This code shows another E0207 error example where a type parameter T is used in a trait implementation but isn't constrained by the implementing type or trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0207.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait Maker {
    type Item;
    fn make(&mut self) -> Self::Item;
}

struct Foo<T> {
    foo: T
}

struct FooMaker;

impl<T: Default> Maker for FooMaker {
// error: the type parameter `T` is not constrained by the impl trait, self
// type, or predicates [E0207]
    type Item = Foo<T>;

    fn make(&mut self) -> Foo<T> {
        Foo { foo: <T as Default>::default() }
    }
}
```

----------------------------------------

TITLE: Correct Raw Pointer Assignment in Rust
DESCRIPTION: Demonstrates the correct way to create a raw pointer by first binding the value to a named local variable, ensuring the value exists for the pointer's lifetime.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0745.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn temp_address() {
    let val = 2;
    let ptr = &raw const val; // ok!
}
```

----------------------------------------

TITLE: Including Custom CSS for Markdown with rustdoc (Bash)
DESCRIPTION: Explains how the `--markdown-css` flag includes external CSS files specifically when rendering Markdown documentation, allowing custom styling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_18

LANGUAGE: bash
CODE:
```
$ rustdoc README.md --markdown-css foo.css
```

----------------------------------------

TITLE: Using bool::then for Conditional Logic in Rust
DESCRIPTION: Transforms an if-else expression into the bool::then method, streamlining the logic to return Some or None based on the condition.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_23

LANGUAGE: rust
CODE:
```
fn main() {
    cond.then(|| val)
}
```

----------------------------------------

TITLE: Building Rust Code for iOS Target
DESCRIPTION: Example command showing how to compile Rust code for a specific iOS target using rustc with the --target flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-ios.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
$ rustc --target aarch64-apple-ios your-code.rs
```

----------------------------------------

TITLE: Formatting Control Flow with Multi-line Initial Clauses in Rust
DESCRIPTION: When a control flow expression's initial clause spans multiple lines and ends with closing brackets, place the opening brace of the block on the same line with proper spacing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_14

LANGUAGE: rust
CODE:
```
if !self.config.file_lines().intersects(
    &self.codemap.lookup_line_range(
        stmt.span,
    ),
) {  // Opening brace on same line as initial clause.
    ...
}
```

----------------------------------------

TITLE: Inline Never Attribute Usage
DESCRIPTION: Demonstrates using the inline attribute with the 'never' parameter, which prevents the compiler from inlining the function
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0534.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#[inline(never)]
fn something() {}
```

----------------------------------------

TITLE: Linking Rust staticlib and C code with LLD linker
DESCRIPTION: This snippet demonstrates how to link a Rust static library and compiled C code using the LLD linker, which is required for linker plugin LTO. It uses `clang` with the `-flto=thin` flag, specifies the LLD linker with `-fuse-ld=lld`, and links the Rust library using `-l"name-of-your-rust-lib"`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/linker-plugin-lto.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
"clang -flto=thin -fuse-ld=lld -L . -l\"name-of-your-rust-lib\" -o main -O2 ./cmain.o"
```

----------------------------------------

TITLE: Compiling a Cargo project with coverage instrumentation
DESCRIPTION: Shell commands to compile a Cargo project with coverage instrumentation enabled using the RUSTFLAGS environment variable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
$ cd your-project
$ cargo clean
$ RUSTFLAGS="-C instrument-coverage" cargo build
```

----------------------------------------

TITLE: Demonstrating Small vs Normal Struct Formatting in Rust
DESCRIPTION: Shows two ways to format struct literals in Rust based on their size/complexity. The normal formatting uses multiple lines with fields on separate lines, while the 'small' format combines fields on a single line for more compact representation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/README.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
// Normal formatting
Foo {
    f1: an_expression,
    f2: another_expression(),
}

// "small" formatting
Foo { f1, f2 }
```

----------------------------------------

TITLE: Implementing Code Action and Position Data Structures in Rust
DESCRIPTION: Defines a complex nested data structure for handling code positions, ranges, and text edits. Contains definitions for code actions with fix suggestions including position tracking and text replacement functionality.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/rust-analyzer/src/diagnostics/test_data/snap_multi_line_fix.txt#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
                                end: Position {
                                    line: 3,
                                    character: 5,
                                },
                            },
                        },
                        message: "original diagnostic",
                    },
                ],
            ),
            tags: None,
            data: None,
        },
        fix: Some(
            Fix {
                ranges: [
                    Range {
                        start: Position {
                            line: 2,
                            character: 4,
                        },
                        end: Position {
                            line: 2,
                            character: 30,
                        },
                    },
                    Range {
                        start: Position {
                            line: 3,
                            character: 4,
                        },
                        end: Position {
                            line: 3,
                            character: 5,
                        },
                    },
                ],
                action: CodeAction {
                    title: "return the expression directly: `(0..10).collect()`",
                    group: None,
                    kind: Some(
                        CodeActionKind(
                            "quickfix",
                        ),
                    ),
                    command: None,
                    edit: Some(
                        SnippetWorkspaceEdit {
                            changes: Some(
                                {
                                    Url {
                                        scheme: "file",
                                        cannot_be_a_base: false,
                                        username: "",
                                        password: None,
                                        host: None,
                                        port: None,
                                        path: "/test/src/main.rs",
                                        query: None,
                                        fragment: None,
                                    }: [
                                        TextEdit {
                                            range: Range {
                                                start: Position {
                                                    line: 2,
                                                    character: 4,
                                                },
                                                end: Position {
                                                    line: 2,
                                                    character: 30,
                                                },
                                            },
                                            new_text: "",
                                        },
                                        TextEdit {
                                            range: Range {
                                                start: Position {
                                                    line: 3,
                                                    character: 4,
                                                },
                                                end: Position {
                                                    line: 3,
                                                    character: 5,
                                                },
                                            },
                                            new_text: "(0..10).collect()",
                                        },
                                    ],
                                },
                            ),
                            document_changes: None,
                            change_annotations: None,
                        },
                    ),
                    is_preferred: Some(
                        true,
                    ),
                    data: None,
                },
            },
        ),
    },
]
```

----------------------------------------

TITLE: Handling Interior Mutability Errors with Cell Types in Rust
DESCRIPTION: This snippet addresses errors when using Cell types in constants due to non-thread-safe operations. It reinforces using statics or adapting the design to avoid such borrow errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0492.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use std::cell::Cell;

const A: Cell<usize> = Cell::new(1);
const B: &Cell<usize> = &A;
// error: cannot borrow a constant which may contain interior mutability,
//        create a static instead

// or:
struct C { a: Cell<usize> }

const D: C = C { a: Cell::new(1) };
const E: &Cell<usize> = &D.a; // error

// or:
const F: &C = &D; // error
```

----------------------------------------

TITLE: Configuring External Crate Link URLs in Documentation
DESCRIPTION: This code defines a URL for linking to external crate documentation through #[doc(html_root_url = ...)], aiding in documentation integrity and navigation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
"""rust,no_run\n#![doc(html_root_url = \"https://docs.rs/serde/1.0\")]\n"
```

----------------------------------------

TITLE: Basic Late Bound Lifetime Parameter Example
DESCRIPTION: Demonstrates the difference between early and late bound lifetime parameters in function definitions and how turbofish syntax interacts with them.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
fn foo<'a>(b: &'a u32) -> &'a u32 { b }

let f /* : FooFnItem<????> */ = foo::<'static>;
```

----------------------------------------

TITLE: Moving Rust File to mod.rs
DESCRIPTION: Moves code from a standalone .rs file to a mod.rs file within a directory of the same name. This refactoring converts a file-based module to a directory-based module structure, which can be useful for modules that need to contain submodules.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_90

LANGUAGE: rust
CODE:
```
//- /main.rs
mod a;
//- /a.rs
fn t() {}
```

LANGUAGE: rust
CODE:
```
fn t() {}
```

----------------------------------------

TITLE: Caller Location Usage Example in Rust
DESCRIPTION: Shows implementation of a function that prints its caller's location using the #[track_caller] attribute.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/implicit-caller-location.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(track_caller)]
use std::panic::Location;

#[track_caller]
fn print_caller() {
    println!("called from {}", Location::caller());
}

fn main() {
    print_caller();
}
```

----------------------------------------

TITLE: Erroneous Usage of ffi_const and ffi_pure Attributes in Rust
DESCRIPTION: This code snippet demonstrates the incorrect usage of both ffi_const and ffi_pure attributes on a single function declaration. This combination is not allowed as ffi_const provides stronger guarantees than ffi_pure.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0757.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(ffi_const, ffi_pure)]

extern "C" {
    #[unsafe(ffi_const)]
    #[unsafe(ffi_pure)]
    //~^ ERROR `#[ffi_const]` function cannot be `#[ffi_pure]`
    pub fn square(num: i32) -> i32;
}
```

----------------------------------------

TITLE: Correct Handling of Packed Struct Field Access in Rust
DESCRIPTION: This example shows the proper way to handle packed struct field access using raw pointers with explicit unaligned reads and creating copies to avoid direct references. It demonstrates both safe patterns for accessing and formatting packed field values.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0793.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[repr(packed)]
pub struct Foo {
    field1: u64,
    field2: u8,
}

unsafe {
    let foo = Foo { field1: 0, field2: 0 };

    // Instead of a reference, we can create a raw pointer...
    let ptr = std::ptr::addr_of!(foo.field1);
    // ... and then (crucially!) access it in an explicitly unaligned way.
    let val = unsafe { ptr.read_unaligned() };
    // This would *NOT* be correct:
    // let val = unsafe { *ptr }; // Undefined Behavior due to unaligned load!

    // For formatting, we can create a copy to avoid the direct reference.
    let copy = foo.field1;
    println!("{}", copy);
    // Creating a copy can be written in a single line with curly braces.
    // (This is equivalent to the two lines above.)
    println!("{}", { foo.field1 });
}
```

----------------------------------------

TITLE: Erroneous In-Band Lifetimes Usage in Rust
DESCRIPTION: This code snippet demonstrates incorrect usage of in-band lifetimes mixed with explicit lifetime binders, which is no longer supported in Rust. It shows examples of errors in function declarations, struct implementations, and impl blocks.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0688.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(in_band_lifetimes)]

fn foo<'a>(x: &'a u32, y: &'b u32) {}   // error!

struct Foo<'a> { x: &'a u32 }

impl Foo<'a> {
    fn bar<'b>(x: &'a u32, y: &'b u32, z: &'c u32) {}   // error!
}

impl<'b> Foo<'a> {  // error!
    fn baz() {}
}
```

----------------------------------------

TITLE: Incorrect Trait Implementation with Associated Type Override
DESCRIPTION: Example showing incorrect implementation of a trait where an associated type is overridden without reimplementing the default method, resulting in a compiler error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0399.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(associated_type_defaults)]

pub trait Foo {
    type Assoc = u8;
    fn bar(&self) {}
}

impl Foo for i32 {
    // error - the following trait items need to be reimplemented as
    //         `Assoc` was overridden: `bar`
    type Assoc = i32;
}
```

----------------------------------------

TITLE: Demonstrating Rust Error E0800 - Using Undeclared Type Parameter
DESCRIPTION: This code fails to compile because it attempts to use a type parameter 'T' that has not been declared in the function's generic parameter list. The 'use<T>' expression references an undefined type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0800.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn missing() -> impl Sized + use<T> {}
```

----------------------------------------

TITLE: Incorrect Usage of Self Keyword in Rust
DESCRIPTION: An example of erroneous code where the 'Self' keyword is used outside of an impl, trait, or type definition, which is not allowed in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0411.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
compile_fail,E0411
<Self>::foo; // error: use of `Self` outside of an impl, trait, or type
             // definition
```

----------------------------------------

TITLE: Incorrect Self Usage in Associated Function
DESCRIPTION: Example showing erroneous usage of 'self' keyword in an associated function without a self receiver parameter, which causes compilation error E0424.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0424.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo;

impl Foo {
    // `bar` is a method, because it has a receiver parameter.
    fn bar(&self) {}

    // `foo` is not a method, because it has no receiver parameter.
    fn foo() {
        self.bar(); // error: `self` value is a keyword only available in
                    //        methods with a `self` parameter
    }
}
```

----------------------------------------

TITLE: Handling Invalid Cast: &u8 to u32 in Rust
DESCRIPTION: Demonstrates the error encountered when attempting to cast a reference of type `&u8` directly to `u32`. This example illustrates the type-safety of casting in Rust, which prevents incompatible types from being cast without dereferencing.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0606.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"let x = &0u8; // Here, `x` is a `&u8`.\nlet y: u32 = x as u32; // error: casting `&u8` as `u32` is invalid\n"
```

----------------------------------------

TITLE: Travis CI Configuration for Rustfmt
DESCRIPTION: Example Travis CI configuration to enforce code formatting in continuous integration. Requires Rust 1.31.0 or greater.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/README.md#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
language: rust
before_script:
- rustup component add rustfmt
script:
- cargo build
- cargo test
- cargo fmt --all -- --check
```

----------------------------------------

TITLE: Correct Struct Field Definition and Usage in Rust
DESCRIPTION: This example shows the correct way to define and initialize a struct with multiple fields. Both 'mother' and 'father' fields are properly defined in the Simba struct before being used in the initialization.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0560.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Simba {
    mother: u32,
    father: u32,
}

let s = Simba { mother: 1, father: 0 }; // ok!
```

----------------------------------------

TITLE: Erroneous Trait Implementation with Missing Lifetime Links
DESCRIPTION: This code demonstrates an error when implementing a trait that returns a reference without explicitly linking the lifetime to 'self'. The compiler cannot verify if the returned reference satisfies lifetime constraints, resulting in E0803.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0803.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait DataAccess<T> {
    fn get_ref(&self) -> T;
}

struct Container<'a> {
    value: &'a f64,
}

// Attempting to implement reference return
impl<'a> DataAccess<&f64> for Container<'a> {
    fn get_ref(&self) -> &f64 { // Error: Lifetime mismatch
        self.value
    }
}
```

----------------------------------------

TITLE: Correct Module Usage in Rust
DESCRIPTION: Demonstrates proper module definition and access with static variable.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0425.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
mod something_that_does_exist {
    pub static foo : i32 = 0i32;
}

something_that_does_exist::foo; // ok!
```

----------------------------------------

TITLE: Splitting Import Statements in Rust
DESCRIPTION: Demonstrates how to refactor a single combined import statement into separate import statements. This can improve readability and organization of import declarations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_111

LANGUAGE: rust
CODE:
```
use std::fmt::{Debug, Display};
```

LANGUAGE: rust
CODE:
```
use std::fmt::{Debug};
use std::fmt::Display;
```

----------------------------------------

TITLE: Adding WASM Target with Rustup
DESCRIPTION: Installs the wasm32-wasip1 target using Rustup, which is equipped with necessary tooling for building Rust programs that target the WASI standard through WebAssembly. This is essential for developers looking to compile their Rust code to WebAssembly for use in environments supporting the WASI syscalls.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wasip1.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
rustup target add wasm32-wasip1
```

----------------------------------------

TITLE: Corrected Rust Foreign Function Declaration Using Struct Argument
DESCRIPTION: This snippet shows the correct approach to passing multiple values in FFI by defining a struct and passing it as a parameter. This method avoids pattern destructuring in the argument list, aligning with Rust's FFI constraints.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0130.md#_snippet_1

LANGUAGE: Rust
CODE:
```
struct SomeStruct {
    a: u32,
    b: u32,
}

extern "C" {
    fn foo(s: SomeStruct); // ok!
}
```

----------------------------------------

TITLE: Qualifying Method Calls in Rust
DESCRIPTION: Converts an object method call to a fully qualified function call notation. This refactoring makes the implementation being called more explicit, which can be helpful for clarity or disambiguating between trait implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_94

LANGUAGE: rust
CODE:
```
struct Foo;
impl Foo {
    fn foo(&self) {}
}
fn main() {
    let foo = Foo;
    foo.foo();
}
```

LANGUAGE: rust
CODE:
```
struct Foo;
impl Foo {
    fn foo(&self) {}
}
fn main() {
    let foo = Foo;
    Foo::foo(&foo);
}
```

----------------------------------------

TITLE: Demonstrating Stack Use After Scope (Rust)
DESCRIPTION: This Rust program demonstrates the 'use after scope' bug. It captures a mutable pointer to a stack variable within a temporary scope and then attempts to write to that pointer after the scope (and the variable's lifetime) has ended, resulting in undefined behavior.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_3

LANGUAGE: Rust
CODE:
```
static mut P: *mut usize = std::ptr::null_mut();

fn main() {
    unsafe {
        {
            let mut x = 0;
            P = &mut x;
        }
        std::ptr::write_volatile(P, 123);
    }
}
```

----------------------------------------

TITLE: Compiling Rust to wasm32-wasip1-threads
DESCRIPTION: This command shows how to compile Rust code targeting the `wasm32-wasip1-threads` architecture using the `rustc` command, suitable for producing WebAssembly binaries with Rust's native features.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wasip1-threads.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
rustc --target wasm32-wasip1-threads your-code.rs

```

----------------------------------------

TITLE: Resolving External Crate Naming Conflict in Rust
DESCRIPTION: This code snippet demonstrates the correct way to import external crates without naming conflicts. It uses a different alias for the 'std' crate to avoid collision with the 'core' crate.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0259.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
extern crate core;
extern crate std as other_name;

fn main() {}
```

----------------------------------------

TITLE: Correcting Function Parameters with Unique Names in Rust
DESCRIPTION: This code snippet demonstrates the correct way to declare function parameters with unique names, avoiding the E0415 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0415.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo(f: i32, g: i32) {} // ok!
```

----------------------------------------

TITLE: Conditional compilation for wasm32 target in Rust
DESCRIPTION: This code snippet demonstrates how to conditionally compile code specifically for the `wasm32-unknown-unknown` target in Rust. This is done using the `#[cfg]` attribute, which checks for the target family being "wasm" and the target OS being "unknown".
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-unknown.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
#[cfg(all(target_family = "wasm", target_os = "unknown"))]
```

----------------------------------------

TITLE: Demonstrating Missing Type Parameter Error in Rust
DESCRIPTION: This code snippet illustrates an error where a generic struct is used without specifying its type parameter. The struct 'Foo' is defined with a type parameter 'T', but when used in the 'Bar' struct, the type parameter is omitted, which would have previously triggered the error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0243.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo<T> { x: T }

struct Bar { x: Foo }
```

----------------------------------------

TITLE: Hiding Items with #[doc(hidden)] in Rust
DESCRIPTION: This example demonstrates how to hide items from documentation using the `#[doc(hidden)]` attribute. Both the `Hidden` struct and its re-export `InlinedHidden` are hidden from the generated documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/re-exports.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
```rust
// This struct won't be visible.
#[doc(hidden)]
pub struct Hidden;

// This re-export won't be visible.
pub use self::Hidden as InlinedHidden;
```
```

----------------------------------------

TITLE: Invalid Type Parameter Shadowing in Traits
DESCRIPTION: Example demonstrating incorrect shadowing of trait type parameters in associated functions, which results in error E0403.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0403.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait Foo<T> {
    fn do_something(&self) -> T;
    fn do_something_else<T: Clone>(&self, bar: T);
}
```

----------------------------------------

TITLE: String Comparison using Match Guards in Rust
DESCRIPTION: This code demonstrates an alternative approach to matching a `String` value against a literal string using match guards, instead of the `string_deref_patterns` feature. The `is_it_the_answer` function checks if the `Value` is equal to "42", achieving the comparison by checking if the extracted string `s` is equal to "42".
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/string-deref-patterns.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# pub enum Value {
#    String(String),
#    Number(u32),
# }
#
pub fn is_it_the_answer(value: Value) -> bool {
    match value {
        Value::String(s) if s == "42" => true,
        Value::Number(42) => true,
        _ => false,
    }
}
```

----------------------------------------

TITLE: Comparing Rust Compilation Commands for WebAssembly Targets
DESCRIPTION: Demonstrates the difference between compiling for wasm32-unknown-unknown and wasm32v1-none targets. The wasm32v1-none target requires fewer configurations and works with stable Rust toolchains, whereas wasm32-unknown-unknown needs nightly builds and custom RUSTFLAGS to disable post-MVP proposals.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32v1-none.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ rustc --target wasm32-unknown-unknown -Ctarget-cpu=mvp -Ctarget-feature=+mutable-globals
```

LANGUAGE: bash
CODE:
```
$ rustc --target wasm32v1-none
```

LANGUAGE: bash
CODE:
```
$ export RUSTFLAGS="-Ctarget-cpu=mvp -Ctarget-feature=+mutable-globals"
$ cargo +nightly build -Zbuild-std=panic_abort,std --target wasm32-unknown-unknown
```

----------------------------------------

TITLE: Correct Usage of Associated Type with Explicit Lifetime in Rust
DESCRIPTION: This code snippet shows the correct way to use an associated type with a trait that has generic parameters. It demonstrates two valid approaches: one using a concrete lifetime and another using a generic lifetime parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0212.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub trait Foo<T> {
    type A;

    fn get(&self, t: T) -> Self::A;
}

fn foo3<I : for<'x> Foo<&'x isize>>(
    x: <I as Foo<&isize>>::A) {} // ok!


fn foo4<'a, I : for<'x> Foo<&'x isize>>(
    x: <I as Foo<&'a isize>>::A) {} // ok!
```

----------------------------------------

TITLE: Demonstrating Unused Lifetime Parameter Error in Rust Struct
DESCRIPTION: This code snippet illustrates an erroneous example where a lifetime parameter 'a is declared in a struct but not used, resulting in the E0392 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0392.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
struct Foo<'a, T> {
    x: *const T,
}
```

----------------------------------------

TITLE: Defining Erroneous Recursive Type in Rust
DESCRIPTION: This code snippet demonstrates an incorrect way to define a recursive type in Rust, resulting in an E0072 error due to infinite size.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0072.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct ListNode {
    head: u8,
    tail: Option<ListNode>, // error: no indirection here so impossible to
                            //        compute the type's size
}
```

----------------------------------------

TITLE: Correct Transparent Struct Definition with PhantomData in Rust
DESCRIPTION: This code snippet shows the correct way to implement a transparent struct with generic types using `PhantomData` to avoid the E0690 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0690.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use std::marker::PhantomData;

#[repr(transparent)]
struct LengthWithUnit<U> {
    value: f32,
    unit: PhantomData<U>,
}
```

----------------------------------------

TITLE: Ambiguous Associated Type Error in Rust Traits
DESCRIPTION: An example showing how using 'Self' with traits that have common associated types can lead to ambiguity errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0411.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
compile_fail
trait Foo {
    type Bar;
}

trait Foo2 {
    type Bar;
}

trait Baz : Foo + Foo2 {
    fn bar() -> Self::Bar;
    // error: ambiguous associated type `Bar` in bounds of `Self`
}
```

----------------------------------------

TITLE: Running Stack Buffer Overflow Example with ASan (Shell)
DESCRIPTION: This command sequence compiles and runs the stack buffer overflow example with AddressSanitizer enabled via `RUSTFLAGS`. The output shows the ASan error report identifying the stack-buffer-overflow, including the location and details about the memory access.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ export RUSTFLAGS=-Zsanitizer=address RUSTDOCFLAGS=-Zsanitizer=address
$ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu
```

LANGUAGE: Shell
CODE:
```
==37882==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe400e6250 at pc 0x5609a841fb20 bp 0x7ffe400e6210 sp 0x7ffe400e6208
READ of size 4 at 0x7ffe400e6250 thread T0
    #0 0x5609a841fb1f in example::main::h628ffc6626ed85b2 /.../src/main.rs:3:23
    ...

Address 0x7ffe400e6250 is located in stack of thread T0 at offset 48 in frame
    #0 0x5609a841f8af in example::main::h628ffc6626ed85b2 /.../src/main.rs:1

  This frame has 1 object(s):
    [32, 48) 'xs' (line 2) <== Memory access at offset 48 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /.../src/main.rs:3:23 in example::main::h628ffc6626ed85b2
Shadow bytes around the buggy address:
  0x100048014bf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100048014c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100048014c10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100048014c20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100048014c30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x100048014c40: 00 00 00 00 f1 f1 f1 f1 00 00[f3]f3 00 00 00 00
  0x100048014c50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100048014c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100048014c70: f1 f1 f1 f1 00 00 f3 f3 00 00 00 00 00 00 00 00
  0x100048014c80: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1
  0x100048014c90: 00 00 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==37882==ABORTING
```

----------------------------------------

TITLE: Pushing Allocations to the Call Site
DESCRIPTION: This snippet shows how to avoid hidden allocations by allowing callers to handle resource allocation when it's necessary, thus revealing costs and improving efficiency.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_14

LANGUAGE: rust
CODE:
```
// GOOD
fn frobnicate(s: String) {
    ...
}

// BAD
fn frobnicate(s: &str) {
    let s = s.to_string();
    ...
}
```

----------------------------------------

TITLE: Testing AVR Firmware with SimAVR
DESCRIPTION: Command for emulating AVR firmware using SimAVR emulator, specifically for ATmega328p microcontroller
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/avr-none.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
$ simavr -m atmega328p ./target/avr-none/release/your-project.elf
```

----------------------------------------

TITLE: Correct Async Function with Anonymous Lifetime in Rust
DESCRIPTION: This code snippet shows the correct way to handle lifetimes in an async function by using an anonymous lifetime. The 'Content' struct is given an anonymous lifetime '_', which tells the Rust compiler that 'content' is only needed until the 'create' function finishes execution.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0726.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
async fn create(content: Content<'_>) { // ok!
    println!("title: {}", content.title);
    println!("body: {}", content.body);
}
```

----------------------------------------

TITLE: Recursive Async Function with Boxed Call
DESCRIPTION: A correct implementation that boxes the recursive function call using Box::pin() to ensure known size and memory stability.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0733.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
async fn foo(n: usize) {
    if n > 0 {
        Box::pin(foo(n - 1)).await;
    }
}
```

----------------------------------------

TITLE: Replacing Arithmetic with Wrapping Operations in Rust
DESCRIPTION: Transforms standard arithmetic operations into their wrapping counterparts that explicitly specify two's complement wrapping behavior. This refactoring makes overflow behavior explicit when wrap-around semantics are desired.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_107

LANGUAGE: rust
CODE:
```
fn main() {
  let x = 1 + 2;
}
```

LANGUAGE: rust
CODE:
```
fn main() {
  let x = 1.wrapping_add(2);
}
```

----------------------------------------

TITLE: Implementing SIMD Hello World - Rust
DESCRIPTION: This Rust code snippet demonstrates a basic example of SIMD operations using the Portable SIMD API. It initializes two SIMD vectors and performs an addition operation. The feature 'portable_simd' is required, so users must compile with the nightly version of Rust. The program outputs the result of adding the vectors when executed.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/portable-simd/README.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(portable_simd)]
use std::simd::f32x4;
fn main() {
    let a = f32x4::splat(10.0);
    let b = f32x4::from_array([1.0, 2.0, 3.0, 4.0]);
    println!("{:?}", a + b);
}
```

----------------------------------------

TITLE: Invalid Generic Receiver Type Example 2 (Using impl Trait)
DESCRIPTION: Another example of invalid code that generates error E0801 by attempting to use 'impl Trait' as the receiver type for a method, which is also not allowed in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0801.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo;

impl Foo {
    fn foo(self: impl std::ops::Deref<Target=Self>) {}
}
```

----------------------------------------

TITLE: Demonstrating E0228 Error with Trait Objects and Multiple Lifetimes in Rust
DESCRIPTION: This code snippet illustrates the E0228 error that occurs when a trait object is used as a type argument in a generic struct with multiple lifetime bounds. The compiler cannot infer the lifetime for the trait object in this context.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0228.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Trait { }

struct TwoBounds<'a, 'b, T: Sized + 'a + 'b> {
    x: &'a i32,
    y: &'b i32,
    z: T,
}

type Foo<'a, 'b> = TwoBounds<'a, 'b, dyn Trait>;
```

----------------------------------------

TITLE: Error Demonstration for Unary Operator on Non-Trait Type in Rust
DESCRIPTION: This snippet demonstrates an error scenario where a unary operator is incorrectly applied to an enum that does not implement the Not trait. It serves as an example of what happens when an operation is attempted on a type lacking the necessary implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0600.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
enum Question {
    Yes,
    No,
}

!Question::Yes; // error: cannot apply unary operator `!` to type `Question`
```

----------------------------------------

TITLE: Enabling Build Standard Library for Bare-Metal Targets
DESCRIPTION: Cargo configuration to use the nightly build-std feature for compiling core library on Tier 3 Arm targets
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/arm-none-eabi.md#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[unstable]
build-std = ["core"]
```

----------------------------------------

TITLE: Demonstrating Invalid Predicate in cfg Attribute
DESCRIPTION: This snippet demonstrates an incorrect use of the cfg attribute with an unknown predicate in Rust, leading to a compilation error. It highlights the need for valid predicates.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0537.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#[cfg(unknown())] // error: invalid predicate `unknown`
pub fn something() {}

pub fn main() {}
```

----------------------------------------

TITLE: Building and Running Example (CFI Disabled)
DESCRIPTION: This shell script compiles the C library and the Rust code, then executes the compiled Rust binary. It first creates the necessary directories, compiles the C code to an object file, and archives it into a static library. Then, it compiles the Rust code and links it with the created C library. Finally, it runs the executable, demonstrating that the transmuted function runs in this configuration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_16

LANGUAGE: Shell
CODE:
```
$ make
mkdir -p target/release
clang -I. -Isrc -Wall -c src/foo.c -o target/release/libfoo.o
llvm-ar rcs target/release/libfoo.a target/release/libfoo.o
RUSTFLAGS="-L./target/release -Clinker=clang -Clink-arg=-fuse-ld=lld" cargo build --release
   Compiling rust-cfi-4 v0.1.0 (/home/rcvalle/rust-cfi-4)
    Finished release [optimized] target(s) in 0.49s
$ ./target/release/rust-cfi-4
The answer is: 12
With CFI enabled, you should not see the next answer
The next answer is: 14
$
```

----------------------------------------

TITLE: Corrected Rust Foreign Function Declaration Using Tuple Argument
DESCRIPTION: This example demonstrates passing a tuple directly as an argument to a foreign function, which is valid in Rust FFI. It provides an alternative to pattern destructuring, ensuring compatibility with external linkage.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0130.md#_snippet_2

LANGUAGE: Rust
CODE:
```
extern "C" {
    fn foo(a: (u32, u32)); // ok!
}
```

----------------------------------------

TITLE: Demonstrating Trait Requirement Overflow in Rust
DESCRIPTION: Example showing how recursive trait requirements can lead to an overflow error. The code attempts to implement Foo for type T where Bar<T> must implement Foo, creating an infinite recursion in trait resolution.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0275.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {}

struct Bar<T>(T);

impl<T> Foo for T where Bar<T>: Foo {}
```

----------------------------------------

TITLE: Demonstrating Reborrowing in Async Closures (Rust)
DESCRIPTION: This snippet shows a case where the inner coroutine can reborrow data from a by-move capture in the parent closure. It illustrates how deref projections allow reborrowing of references captured by-move.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/coroutine-closures.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
let x = &1i32; // Let's call this lifetime `'1`.
let c = async move || {
    println!("{:?}", *x);
    // Even though the inner coroutine borrows by ref, we're only capturing `*x`,
    // not `x`, so the inner closure is allowed to reborrow the data for `'1`.
};
```

----------------------------------------

TITLE: Calling stdcall_fn_2 - Rust
DESCRIPTION: This snippet calls the `stdcall_fn_2` function in Rust, passing two arguments: an integer (16) and a floating-point number (3.5). It showcases the `stdcall` calling convention with mixed data types, essential for functions interacting with other components. There are no explicit dependencies, assuming the function is declared properly.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_1

LANGUAGE: Rust
CODE:
```
stdcall_fn_2(16, 3.5)
```

----------------------------------------

TITLE: Erroneous Manual Implementation of FnOnce Trait in Rust
DESCRIPTION: This code snippet demonstrates an incorrect attempt to manually implement the FnOnce trait for a custom struct. It fails because manual implementation of Fn* traits requires unstable features.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0183.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct MyClosure {
    foo: i32
}

impl FnOnce<()> for MyClosure {  // error
    type Output = ();
    extern "rust-call" fn call_once(self, args: ()) -> Self::Output {
        println!("{}", self.foo);
    }
}
```

----------------------------------------

TITLE: Changing Integer Literal Base in Rust
DESCRIPTION: Converts an integer literal from decimal to binary format. This example requires knowledge of Rust's constant definitions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_24

LANGUAGE: rust
CODE:
```
const _: i32 = 0b1010;
```

----------------------------------------

TITLE: Compiling for minimal WebAssembly MVP
DESCRIPTION: These commands compile Rust code for the minimal WebAssembly MVP (Minimum Viable Product) by disabling all supported features by default.  `RUSTFLAGS` is set to specify the target CPU as `mvp`. Cargo's `-Zbuild-std` feature is used to recompile the standard library.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-unknown.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
$ export RUSTFLAGS=-Ctarget-cpu=mvp
$ cargo +nightly build -Zbuild-std=panic_abort,std --target wasm32-unknown-unknown
```

----------------------------------------

TITLE: Defining Function Declarations in Rust
DESCRIPTION: This snippet demonstrates various declarations of a function `foo` and highlights that the type of `foo` is not `fn(S)` but a unique zero-sized marker type `typeof(foo)`, which can be coerced to a function pointer.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0591.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct S;

// For the purposes of this explanation, all of these
// different kinds of `fn` declarations are equivalent:

fn foo(x: S) { /* ... */ }
# #[cfg(for_demonstration_only)]
extern "C" {
    fn foo(x: S);
}
# #[cfg(for_demonstration_only)]
impl S {
    fn foo(self) { /* ... */ }
}
```

----------------------------------------

TITLE: If Chain Macro Pattern Matching
DESCRIPTION: Using if_chain macro to improve readability of nested pattern matching
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
if_chain! {
    if let ast::ExprKind::If(check, then, None) = &expr.node;
    if then.stmts.len() == 1;
    if let ast::StmtKind::Expr(inner) | ast::StmtKind::Semi(inner) = &then.stmts[0].node;
    if let ast::ExprKind::If(check_inner, content, None) = &inner.node;
    then {
        ...
    }
}
```

----------------------------------------

TITLE: Formatting Single-Line If-Else Expressions in Rust
DESCRIPTION: Guidelines for using single-line formatting for if-else expressions in Rust. This is only appropriate for small expressions in expression context with a single else clause.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_15

LANGUAGE: rust
CODE:
```
let y = if x { 0 } else { 1 };

// Examples that must be multi-line.
let y = if something_very_long {
    not_small
} else {
    also_not_small
};

if x {
    0
} else {
    1
}
```

----------------------------------------

TITLE: Constant Generic Parameter Example
DESCRIPTION: Example Rust function using a constant generic parameter. This demonstrates how constant values are used in generic type arguments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_15

LANGUAGE: rust
CODE:
```
fn main() {
    example::<0x12345678>();
}

pub fn example<const N: u64>() {}
```

----------------------------------------

TITLE: Working Generic Trait Implementation Usage
DESCRIPTION: Demonstrates successful usage of a generically implemented trait on a specific type, showing how the generic implementation applies to all types in scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0119.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait MyTrait {
    fn get(&self) -> usize;
}

impl<T> MyTrait for T {
    fn get(&self) -> usize { 0 }
}

struct Foo;

fn main() {
    let f = Foo;

    f.get(); // the trait is implemented so we can use it
}
```

----------------------------------------

TITLE: Correcting Binary Operation Usage with Supported Type in Rust
DESCRIPTION: This code snippet demonstrates the correct usage of the left shift operation by using a type (u32) that implements the required trait (Shl). It shows how to fix the previous error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0369.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let x = 12u32; // the `u32` type does implement it:
               // https://doc.rust-lang.org/stable/std/ops/trait.Shl.html

x << 2; // ok!
```

----------------------------------------

TITLE: Invalid #[repr(C)] on type alias (typedef) in Rust
DESCRIPTION: This code snippet demonstrates an incorrect usage of the `#[repr(C)]` attribute on a type alias (`type Foo = u8;`).  The `#[repr(C)]` attribute is only applicable to structs and enums. Applying it to a type alias will result in a compile-time error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0517.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```

#[repr(C)]
type Foo = u8;

```

----------------------------------------

TITLE: Aligning Struct Fields in Rust
DESCRIPTION: Demonstrates the 'struct_field_align_threshold' option. When set to 0 (default), no alignment is applied. When set to a non-zero value (e.g., 20), fields are aligned if their width difference is within the threshold.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_68

LANGUAGE: rust
CODE:
```
struct Foo {
    x: u32,
    yy: u32,
    zzz: u32,
}
```

LANGUAGE: rust
CODE:
```
struct Foo {
    x:   u32,
    yy:  u32,
    zzz: u32,
}
```

----------------------------------------

TITLE: Merging Nested If Statements in Rust
DESCRIPTION: Demonstrates combining nested if statements into a single if statement with a logical AND condition. This simplifies code structure and makes the condition more readable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_82

LANGUAGE: rust
CODE:
```
fn main() {
   i┃f x == 3 { if y == 4 { 1 } }
}
```

LANGUAGE: rust
CODE:
```
fn main() {
   if x == 3 && y == 4 { 1 }
}
```

----------------------------------------

TITLE: Demonstrating Binary Operation Error on Unsupported Type in Rust
DESCRIPTION: This code snippet shows an example of attempting a binary operation (left shift) on a floating-point type (f32) which doesn't support it, resulting in a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0369.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let x = 12f32; // error: binary operation `<<` cannot be applied to
               //        type `f32`

x << 2;
```

----------------------------------------

TITLE: Detecting Data Races with ThreadSanitizer in Rust
DESCRIPTION: This Rust snippet demonstrates a simple data race scenario by modifying a static mutable variable from multiple threads without synchronization. It exposes how ThreadSanitizer catches violations of safe concurrent access. The example requires enabling ThreadSanitizer instrumentation by passing `-Zsanitizer=thread` in compiler flags and rebuilding the standard library with `-Zbuild-std`. The snippet takes no input and will output a warning about a data race at runtime, helping developers identify unsafe sharing of mutable state across threads.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_22

LANGUAGE: rust
CODE:
```
static mut A: usize = 0;

fn main() {
    let t = std::thread::spawn(|| {
        unsafe { A += 1 };
    });
    unsafe { A += 1 };

    t.join().unwrap();
}
```

----------------------------------------

TITLE: Incorrect Associated Type Usage in Rust
DESCRIPTION: Example showing erroneous code that attempts to use an associated type directly from a trait without specifying the implementing type. This code fails to compile with error E0223.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0223.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Trait { type X; }

fn main() {
    let foo: Trait::X;
}
```

----------------------------------------

TITLE: Imports Granularity Configuration Example
DESCRIPTION: Example configuration for the new imports_granularity option that replaces merge_imports. This option allows merging imports at different levels and flattening imports to have single use statements per item.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_17

LANGUAGE: toml
CODE:
```
imports_granularity = "Crate" # Or "Module" or "Item"
```

----------------------------------------

TITLE: Setting linking arguments via RUSTFLAGS for cargo
DESCRIPTION: This snippet demonstrates how to set linking arguments via the `RUSTFLAGS` environment variable when using `cargo`. It includes `-Clinker-plugin-lto`, `-Clinker=clang`, and `-Clink-arg=-fuse-ld=lld` flags.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/linker-plugin-lto.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
"RUSTFLAGS=\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld\" cargo build --release"
```

----------------------------------------

TITLE: Correct Implementation Using CoerceUnsized for Custom Smart Pointers in Rust
DESCRIPTION: This code snippet shows the proper way to enable conversion from sized to unsized types for custom smart pointers using the CoerceUnsized trait. It defines a generic struct MyType with an unsized field and implements CoerceUnsized to allow DST coercion.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0328.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(coerce_unsized)]

use std::ops::CoerceUnsized;

pub struct MyType<T: ?Sized> {
    field_with_unsized_type: T,
}

impl<T, U> CoerceUnsized<MyType<U>> for MyType<T>
    where T: CoerceUnsized<U> {}
```

----------------------------------------

TITLE: Erroneous Nested impl Trait Usage in Rust
DESCRIPTION: This code snippet demonstrates an incorrect use of impl Trait where it's nested within the generic arguments of another impl Trait. This pattern is not allowed in Rust and will result in a compilation error (E0666).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0666.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait MyGenericTrait<T> {}
trait MyInnerTrait {}

fn foo(
    bar: impl MyGenericTrait<impl MyInnerTrait>, // error!
) {}
```

----------------------------------------

TITLE: Using Rc as a Receiver Type with arbitrary_self_types in Rust
DESCRIPTION: Shows how standard smart pointers like Rc can be used as receiver types. This works because Rc implements Deref, which has a blanket implementation of the Receiver trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/arbitrary-self-types.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(arbitrary_self_types)]

use std::rc::Rc;

struct A;

impl A {
    fn f(self: Rc<Self>) -> i32 { 1 } // Rc implements Deref
}

fn main() {
    let smart_ptr = Rc::new(A);
    assert_eq!(smart_ptr.f(), 1);
}
```

----------------------------------------

TITLE: Demonstrating E0572 Error: Return Outside Function in Rust
DESCRIPTION: This snippet demonstrates the E0572 error in Rust, which occurs when a `return` statement is placed outside the context of a function. The `const FOO` declaration attempts to assign the result of a `return` statement, leading to the compile-time error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0572.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0572
const FOO: u32 = return 0; // error: return statement outside of function body

fn main() {}
```
```

----------------------------------------

TITLE: Function Pointer Dependency on Early-Bound Lifetimes
DESCRIPTION: This snippet showcases how early-bound lifetimes are required during type checking to prevent errors related to uninstantiated lifetimes in function pointers.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_16

LANGUAGE: rust
CODE:
```
let f = foo::<String>;
let f = f as for<'a> fn(&'a String);
f(&String::new());
```

----------------------------------------

TITLE: Rust Lint Expectation Example
DESCRIPTION: Demonstrates the use of expect lint level for unused variables, showing both fulfilled and unfulfilled expectations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/lints/levels.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    #[expect(unused_variables)]
    let unused = "Everyone ignores me";

    #[expect(unused_variables)] // `unused_variables` lint is not emitted
    let used = "I'm useful";    // the expectation is therefore unfulfilled
    println!("The `used` value is equal to: {:?}", used);
}
```

----------------------------------------

TITLE: Demonstrating E0713 Error in Rust
DESCRIPTION: This code snippet shows an erroneous example that triggers the E0713 error. It defines a struct S with a mutable reference and implements the Drop trait. The demo function attempts to borrow and return the mutable reference, which conflicts with the Drop implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0713.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub struct S<'a> { data: &'a mut String }

impl<'a> Drop for S<'a> {
    fn drop(&mut self) { self.data.push_str("being dropped"); }
}

fn demo<'a>(s: S<'a>) -> &'a mut String { let p = &mut *s.data; p }
```

----------------------------------------

TITLE: Removing Mutable References in Rust Methods
DESCRIPTION: Removes the `mut` keyword from method references when mutability is not required. This refactoring helps express the intent of the code more accurately by removing unnecessary mutability annotations from method signatures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_99

LANGUAGE: rust
CODE:
```
impl Walrus {
    fn feed(&mut self, amount: u32) {}
}
```

LANGUAGE: rust
CODE:
```
impl Walrus {
    fn feed(&self, amount: u32) {}
}
```

----------------------------------------

TITLE: External Link Handler JavaScript
DESCRIPTION: JavaScript functionality to detect and mark external links in the documentation, adding visual indicators for external references. Includes SVG icon injection and event handling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/index.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
function isExternalLink(url) {
  const tmp = document.createElement('a');
  tmp.href = url;
  return tmp.host !== window.location.host;
}

function updateExternalAnchors() {
  const svgText = `<svg
     class='external-link'
     xmlns='http://www.w3.org/2000/svg'
     viewBox='0 -256 1850 1850'
     width='100%'
     height='100%'>
       <g transform='matrix(1,0,0,-1,30,1427)'>
         <path d='M 1408,608 V 288 Q 1408,169 1323.5,84.5 1239,0 1120,0 H 288 Q 169,0 84.5,84.5 0,169 0,288 v 832 Q 0,1239 84.5,1323.5 169,1408 288,1408 h 704 q 14,0 23,-9 9,-9 9,-23 v -64 q 0,-14 -9,-23 -9,-9 -23,-9 H 288 q -66,0 -113,-47 -47,-47 -47,-113 V 288 q 0,-66 47,-113 47,-47 113,-47 h 832 q 66,0 113,47 47,47 47,113 v 320 q 0,14 9,23 9,9 23,9 h 64 q 14,0 23,-9 9,-9 9,-23 z m 384,864 V 960 q 0,-26 -19,-45 -19,-19 -45,-19 -26,0 -45,19 L 1507,1091 855,439 q -10,-10 -23,-10 -13,0 -23,10 L 695,553 q -10,10 -10,23 0,13 10,23 l 652,652 -176,176 q -19,19 -19,45 0,26 19,45 19,19 45,19 h 512 q 26,0 45,-19 19,-19 19,-45 z' style='fill:currentColor' />
         </g>
     </svg>`;
  let allAnchors = document.getElementsByTagName("a");

  for (var i = 0; i < allAnchors.length; ++i) {
    let anchor = allAnchors[i];
    if (isExternalLink(anchor.href)) {
      anchor.classList.add("external");
      anchor.innerHTML += svgText;
    }
  }
}

document.addEventListener("DOMContentLoaded", updateExternalAnchors);
```

----------------------------------------

TITLE: Cross-Compilation and Simulation Setup for SPARC
DESCRIPTION: This `.cargo/config.toml` file sets up cross-compilation for the SPARC architecture using the Gaisler BCC2 toolchain and the TSIM Leon3 simulator. The configuration also specifies `libcore` options for adaptability to SPARC V8 instructions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/sparc-unknown-none-elf.md#2025-04-21_snippet_3

LANGUAGE: TOML
CODE:
```
[target.sparc-unknown-none-elf]
linker = "sparc-gaisler-elf-gcc"
runner = "tsim-leon3"

[build]
target = ["sparc-unknown-none-elf"]
rustflags = "-Ctarget-cpu=leon3"

[unstable]
build-std = ["core"]
```

----------------------------------------

TITLE: Setup Environment for Fuchsia Compilation
DESCRIPTION: This shell script sets up environment variables for cross-compiling Rust on Fuchsia. Replace placeholders with actual paths and ensure necessary tools and libraries are accessible from these paths.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
# Configure this environment variable to be the path to the downloaded SDK
export SDK_PATH="<SDK path goes here>"

export CFLAGS_aarch64_unknown_fuchsia="--target=aarch64-unknown-fuchsia --sysroot=${SDK_PATH}/arch/arm64/sysroot -I${SDK_PATH}/pkg/fdio/include"
export CXXFLAGS_aarch64_unknown_fuchsia="--target=aarch64-unknown-fuchsia --sysroot=${SDK_PATH}/arch/arm64/sysroot -I${SDK_PATH}/pkg/fdio/include"
export LDFLAGS_aarch64_unknown_fuchsia="--target=aarch64-unknown-fuchsia --sysroot=${SDK_PATH}/arch/arm64/sysroot -L${SDK_PATH}/arch/arm64/lib"
export CARGO_TARGET_AARCH64_UNKNOWN_FUCHSIA_RUSTFLAGS="-C link-arg=--sysroot=${SDK_PATH}/arch/arm64/sysroot -Lnative=${SDK_PATH}/arch/arm64/sysroot/lib -Lnative=${SDK_PATH}/arch/arm64/lib"
export CFLAGS_x86_64_unknown_fuchsia="--target=x86_64-unknown-fuchsia --sysroot=${SDK_PATH}/arch/x64/sysroot -I${SDK_PATH}/pkg/fdio/include"
export CXXFLAGS_x86_64_unknown_fuchsia="--target=x86_64-unknown-fuchsia --sysroot=${SDK_PATH}/arch/x64/sysroot -I${SDK_PATH}/pkg/fdio/include"
export LDFLAGS_x86_64_unknown_fuchsia="--target=x86_64-unknown-fuchsia --sysroot=${SDK_PATH}/arch/x64/sysroot -L${SDK_PATH}/arch/x64/lib"
export CARGO_TARGET_X86_64_UNKNOWN_FUCHSIA_RUSTFLAGS="-C link-arg=--sysroot=${SDK_PATH}/arch/x64/sysroot -Lnative=${SDK_PATH}/arch/x64/sysroot/lib -Lnative=${SDK_PATH}/arch/x64/lib"
```

----------------------------------------

TITLE: Demonstrating Trait Scope Error in Rust
DESCRIPTION: This code snippet shows an example of the E0405 error in Rust, which occurs when trying to implement a trait that is not in scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0405.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo;

impl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope
```

----------------------------------------

TITLE: Demonstrating Rust Lifetime Elision Error
DESCRIPTION: Example showing code that fails to compile due to unsatisfied outlives bounds between an elided lifetime and generic type parameter T. The compiler cannot establish that T outlives the elided lifetime in no_restriction().
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0311.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn no_restriction<T>(x: &()) -> &() {
    with_restriction::<T>(x)
}

fn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {
    x
}
```

----------------------------------------

TITLE: Converting From to TryFrom in Rust
DESCRIPTION: Turns a From implementation into a TryFrom implementation while wrapping returns in Ok. It modifies the error type to use TypeError.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_22

LANGUAGE: rust
CODE:
```
impl TryFrom<usize> for Thing {
    type Error = ${0:()};

    fn try_from(val: usize) -> Result<Self, Self::Error> {
        Ok(Thing {
            b: val.to_string(),
            a: val
        })
    }
}
```

----------------------------------------

TITLE: Incorrect Usage of if let with Irrefutable Pattern in Rust
DESCRIPTION: This example demonstrates the incorrect use of `if let` with an irrefutable pattern. The pattern `Irrefutable(x)` will always match the value `irr`, making the condition redundant, which is why the compiler would flag this as an error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0162.md#_snippet_0

LANGUAGE: rust
CODE:
```
struct Irrefutable(i32);
let irr = Irrefutable(0);

// This fails to compile because the match is irrefutable.
if let Irrefutable(x) = irr {
    // This body will always be executed.
    // ...
}
```

----------------------------------------

TITLE: Converting impl Trait to a Named Type Parameter in Rust
DESCRIPTION: Shows replacing an 'impl Trait' function parameter with a named generic type parameter. This transformation makes the generic type explicitly available throughout the function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_75

LANGUAGE: rust
CODE:
```
fn foo(bar: ┃impl Bar) {}
```

LANGUAGE: rust
CODE:
```
fn foo<┃B: Bar>(bar: B) {}
```

----------------------------------------

TITLE: Calling stdcall_fn_10 - Rust
DESCRIPTION: This snippet calls the `stdcall_fn_10` function, passing an integer argument (19). This demonstrates calling a function with the `stdcall` calling convention using a single integer parameter. The output is dependent on the function.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_9

LANGUAGE: Rust
CODE:
```
stdcall_fn_10(19)
```

----------------------------------------

TITLE: Inlining Hidden Items with #[doc(inline)] in Rust
DESCRIPTION: This snippet showcases how to make a re-export visible in the documentation even when the underlying item is hidden. The `Hidden` struct is marked with `#[doc(hidden)]`, but the re-export `InlinedHidden` is marked with `#[doc(inline)]`, which causes the re-export to be visible, though without a link to the `Hidden` item.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/re-exports.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
```rust
// This struct won't be visible.
#[doc(hidden)]
pub struct Hidden;

#[doc(inline)]
pub use self::Hidden as InlinedHidden;
```
```

----------------------------------------

TITLE: Using Rust's Hash Collections
DESCRIPTION: This snippet advises using `rustc_hash::FxHashMap` and `rustc_hash::FxHashSet` for better performance instead of the standard collections.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_15

LANGUAGE: rust
CODE:
```
// Rationale: they use a hasher that's significantly faster and using them consistently will reduce code size by some small amount.
```

----------------------------------------

TITLE: Using Non-Struct Variable as Struct in Rust
DESCRIPTION: Example showing a compilation error when trying to use a regular variable as if it were a struct. The code defines 'foo' as a number but incorrectly attempts to use it as a struct with fields.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0422.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main () {
    let foo = 1;
    let x = foo { x: 1, y: 2 };
}
```

----------------------------------------

TITLE: Including File Bytes Using include_bytes! in Rust
DESCRIPTION: This snippet uses the include_bytes! macro to include the contents of a file located at 'relative-dir-empty-file' into a byte array at compile time. It allows the program to access the raw byte data of the file as a static reference during execution.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/rustdoc-ui/doctest/auxiliary/relative-dir.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let x = include_bytes!("relative-dir-empty-file");
```

----------------------------------------

TITLE: Invalid Multiple Trait Bounds Example in Rust
DESCRIPTION: Demonstrates an erroneous case where multiple non-auto traits (Read and Write) are used as bounds for a trait object. This code fails to compile with error E0225.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0225.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let _: Box<dyn std::io::Read + std::io::Write>;
}
```

----------------------------------------

TITLE: Correct Alignment Syntax Example in Rust
DESCRIPTION: Demonstrates the correct syntax for specifying alignment using the repr attribute. Shows proper parenthetical notation for alignment value specification.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0693.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[repr(align(8))] // ok!
struct Align8(i8);
```

----------------------------------------

TITLE: Impl Line Breaking Before `for` in Rust
DESCRIPTION: Demonstrates how to break a non-inherent impl signature when a line break is required. Break immediately before `for`, block indent the concrete type, and put the opening brace on its own line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_14

LANGUAGE: rust
CODE:
```
impl Bar
    for Foo
{
    ...
}
```

----------------------------------------

TITLE: Configuring Cargo for AVR Target
DESCRIPTION: Cargo configuration file setup for cross-compiling to AVR microcontrollers, specifying target and build parameters
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/avr-none.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[build]
target = "avr-none"
rustflags = ["-C", "target-cpu=atmega328p"]

[unstable]
build-std = ["core"]
```

----------------------------------------

TITLE: Demonstrating Ambiguous Lifetime Bounds in Rust Traits
DESCRIPTION: This code snippet shows an example that triggers the E0227 compiler error due to ambiguous lifetime bounds in trait definitions and struct implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0227.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo<'foo>: 'foo {}
trait Bar<'bar>: 'bar {}

trait FooBar<'foo, 'bar>: Foo<'foo> + Bar<'bar> {}

struct Baz<'foo, 'bar> {
    baz: dyn FooBar<'foo, 'bar>,
}
```

----------------------------------------

TITLE: Correct Yield Usage Outside Async Block (Rust)
DESCRIPTION: This code snippet shows the correct way to use `yield` by moving it outside of the `async` block, resolving the compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0727.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(coroutines, stmt_expr_attributes)]

fn main() {
    let coroutine = #[coroutine] || {
        yield;
    };
}
```

----------------------------------------

TITLE: Error Example: Too Many Lifetime Arguments in Rust Function Call
DESCRIPTION: This example demonstrates the E0107 error, which occurs when providing lifetime arguments to a function that doesn't expect any. The function f() takes no lifetime parameters, but is incorrectly called with 'static as a lifetime argument.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0088.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn f() {}

fn main() {
    f::<'static>() // error: wrong number of lifetime arguments:
                   //        expected 0, found 1
}
```

----------------------------------------

TITLE: Invalid Drop Implementation on Trait Object (Rust)
DESCRIPTION: This code demonstrates an invalid attempt to implement the Drop trait directly on a trait object. In Rust, only structs, enums, and unions can implement Drop.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0120.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait MyTrait {}

impl Drop for MyTrait {
    fn drop(&mut self) {}
}
```

----------------------------------------

TITLE: Demonstrating E0746 Error with Unboxed Trait Object Return
DESCRIPTION: This code snippet illustrates the E0746 error by attempting to return an unboxed trait object. It defines a trait T and a struct S that implements T, then tries to return a dyn T from a function, which is not allowed.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0746.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait T {
    fn bar(&self);
}
struct S(usize);
impl T for S {
    fn bar(&self) {}
}

// Having the trait `T` as return type is invalid because
// unboxed trait objects do not have a statically known size:
fn foo() -> dyn T { // error!
    S(42)
}
```

----------------------------------------

TITLE: Handling Implied Bounds with Late-Bound Lifetimes
DESCRIPTION: This code illustrates using implied bounds with a function that accepts a reference containing a lifetime parameter, demonstrating Rust's behavior regarding late-bound lifetimes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_17

LANGUAGE: rust
CODE:
```
fn foo<'a, T>(_: &'a T) {}

let f = foo;
f(&String::new());
f(&String::new());
```

----------------------------------------

TITLE: Accessing Type Information Using rustc_driver in Rust
DESCRIPTION: Example showing how to use rustc_driver's after_analysis callback to obtain a TyCtxt instance for type checking. This demonstrates interaction with Rust's compilation process to analyze expression types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustc-driver/interacting-with-the-ast.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
{{#include ../../examples/rustc-driver-interacting-with-the-ast.rs}}
```

----------------------------------------

TITLE: Erroneous Implementation on Reference Type in Rust
DESCRIPTION: This code snippet demonstrates an incorrect attempt to implement methods directly on a reference type (&Foo), which is not allowed in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0390.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Foo;

impl &Foo { // error: no nominal type found for inherent implementation
    fn bar(self, other: Self) {}
}
```

----------------------------------------

TITLE: Wrapping Attributes in cfg_attr in Rust
DESCRIPTION: Wraps an attribute into a conditional cfg_attr attribute, allowing for conditional compilation of attributes. This is useful for platform-specific or feature-dependent attributes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_120

LANGUAGE: rust
CODE:
```
#[derive(Debug)]
struct S {
   field: i32
}
```

LANGUAGE: rust
CODE:
```
#[cfg_attr(, derive(Debug))]
struct S {
   field: i32
}
```

----------------------------------------

TITLE: Erroneous Representation Hints in Rust Structs
DESCRIPTION: This code demonstrates the incorrect usage of combining both `packed` and `align` representation hints on a single struct, which results in a compilation error (E0587).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0587.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(packed, align(8))] // error!
struct Umbrella(i32);
```

----------------------------------------

TITLE: Higher Ranked Function Trait Bound Acceptance in Rust
DESCRIPTION: This code snippet demonstrates the acceptance of higher ranked function pointers and ensures that late bound parameters can be called with different borrow lifetimes in Rust functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
fn accepts_hr_fn(_: impl for<'a> Fn(&'a String) -> &'a String) {}

fn higher_ranked_trait_bound() {
    let bar_fn_item = bar;
    accepts_hr_fn(bar_fn_item);

    let foo_fn_item = foo::<'_>;
    // errors
    accepts_hr_fn(foo_fn_item);
}

fn higher_ranked_fn_ptr() {
    let bar_fn_item = bar;
    let fn_ptr: for<'a> fn(&'a String) -> &'a String = bar_fn_item;
    
    let foo_fn_item = foo::<'_>;
    // errors
    let fn_ptr: for<'a> fn(&'a String) -> &'a String = foo_fn_item;
}
```

----------------------------------------

TITLE: Unresolved Import Error Example
DESCRIPTION: Demonstrates an erroneous import that will fail to compile due to an unresolved path.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0432.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use something::Foo; // error: unresolved import `something::Foo`.
```

----------------------------------------

TITLE: Automatic Send Implementation for List Structure
DESCRIPTION: Shows the compiler-generated implementation of the Send auto trait for a generic List structure.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/auto-traits.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
struct List<T> {
  data: T,
  next: Option<Box<List<T>>>,
}

unsafe impl<T> Send for List<T>
where
  T: Send, // from the field `data`
  Option<Box<List<T>>>: Send, // from the field `next`
{ }
```

----------------------------------------

TITLE: Demonstrating Unused Type Parameter Error in Rust Enum
DESCRIPTION: This code snippet shows an erroneous example where a type parameter T is declared in an enum but not used, resulting in the E0392 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0392.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum Foo<T> {
    Bar,
}
```

----------------------------------------

TITLE: Demonstrating Static Reference Requirements in Rust
DESCRIPTION: Example showing a type mismatch between a function requiring static reference and one accepting any reference lifetime.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/placeholders_and_universes.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo(x: &'static u32) { }

fn bar(f: for<'a> fn(&'a u32)) {
    let x = 22;
    f(&x);
}

fn main() {
    bar(foo);
}
```

----------------------------------------

TITLE: Handling Doctest Injections in Rust
DESCRIPTION: The #[doc(test(no_crate_inject))] attribute is demonstrated here to prevent the automatic injection of the crate in doctests, providing more control over the test environment.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
"""rust,no_run\n#![doc(test(no_crate_inject))]\n"
```

----------------------------------------

TITLE: Installing LLVM Tools for PGO in Rust
DESCRIPTION: Command to install the llvm-tools-preview component using rustup, which provides the llvm-profdata tool required for processing profile data.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/profile-guided-optimization.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
rustup component add llvm-tools-preview
```

----------------------------------------

TITLE: Compiling C code for Rust binary dependency
DESCRIPTION: This snippet shows how to compile C code with ThinLTO enabled for use as a dependency in a Rust binary. It uses `clang` to compile the C code with the `-flto=thin` flag, creates an object file, and specifies optimization level 2 (`-O2`).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/linker-plugin-lto.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
"clang ./clib.c -flto=thin -c -o ./clib.o -O2"
```

----------------------------------------

TITLE: Erroneous Associated Type with Lifetime Parameter
DESCRIPTION: Illustrates a compilation error when using an associated type with a lifetime parameter where the lifetime usage is not guaranteed
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0582.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait Foo {
    type Assoc<'a>;
}

struct Bar<X, F>
where
    X: Foo,
    F: for<'a> Fn(X::Assoc<'a>) -> &'a i32
{
    x: X,
    f: F
}
```

----------------------------------------

TITLE: Resolving Ambiguous Associated Types in Rust Traits
DESCRIPTION: A solution to the ambiguous associated type problem by explicitly specifying which trait's associated type to use.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0411.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
trait Foo {
    type Bar;
}

trait Foo2 {
    type Bar;
}

trait Baz : Foo + Foo2 {
    fn bar() -> <Self as Foo>::Bar; // ok!
}
```

----------------------------------------

TITLE: Loading Shell Completions for Bash, Zsh, and Fish
DESCRIPTION: This snippet provides instructions to load shell completions for Bash, Zsh, or Fish using the `source` command. It is essential for users seeking to enhance their command-line experience with autocompletion features for the Rust project's `x.py`. The primary prerequisite is having the shell completion script available in the specified path.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/suggested.md#2025-04-21_snippet_10

LANGUAGE: shell
CODE:
```
source ./src/etc/completions/x.py.<extension>
```

----------------------------------------

TITLE: Multiple Incorrect Pattern Matching Examples in Rust
DESCRIPTION: Additional examples of incorrect pattern matching with both too few and too many fields. This demonstrates different ways the E0023 error can be triggered when patterns don't match the declared number of fields.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0023.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
enum Fruit {
    Apple(String, String),
    Pear(u32),
}

let x = Fruit::Apple(String::new(), String::new());

// Incorrect.
match x {
    Fruit::Apple(a) => {},
    Fruit::Apple(a, b, c) => {},
}
```

----------------------------------------

TITLE: Incorrect Mutable Reference Assignment in Rust
DESCRIPTION: Demonstrates an erroneous attempt to modify data through a non-mutable reference to a mutable reference, which violates Rust's borrowing rules
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0389.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct FancyNum {
    num: u8,
}

fn main() {
    let mut fancy = FancyNum{ num: 5 };
    let fancy_ref = &(&mut fancy);
    fancy_ref.num = 6; // error: cannot assign to data in a `&` reference
    println!("{}", fancy_ref.num);
}
```

----------------------------------------

TITLE: Compiling Rust Code for WASI Target
DESCRIPTION: Compiles a given Rust source file for the wasm32-wasip1 target. This command employs the Rust compiler with a specific target option, which must be installed beforehand using Rustup. This facilitates building Rust applications to run in WASI-compliant WebAssembly environments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wasip1.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
rustc --target wasm32-wasip1 your-code.rs
```

----------------------------------------

TITLE: Invalid Lifetime Parameter Name Example in Rust
DESCRIPTION: Demonstrates an error case where 'static is incorrectly used as a lifetime parameter name. This is invalid because 'static is a special built-in lifetime name that denotes the lifetime of the entire program and cannot be used as a generic lifetime parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0262.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// error, invalid lifetime parameter name `'static`
fn foo<'static>(x: &'static str) { }
```

----------------------------------------

TITLE: Building and Installing rust-analyzer from Source (Shell)
DESCRIPTION: Clones the rust-analyzer repository and uses `cargo xtask install` to build and install both the language server and the VS Code extension. Requires Git, Cargo, Node.js (matching a supported VS Code version), and npm. Note that this method might not work directly for VS Code Remote environments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/vs_code.md#_snippet_2

LANGUAGE: shell
CODE:
```
$ git clone https://github.com/rust-lang/rust-analyzer.git && cd rust-analyzer
$ cargo xtask install
```

----------------------------------------

TITLE: Example Usage of RPITIT with `Deref`
DESCRIPTION: This Rust code demonstrates a simple use case of RPITIT with the `Deref` trait.  It defines a trait `Foo` with a method `bar` that returns `impl Deref<Target = impl Sized>`. The example showcases nested RPITITs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/return-position-impl-trait-in-trait.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
```rust
#![feature(return_position_impl_trait_in_trait)]

use std::ops::Deref;

trait Foo {
    fn bar() -> impl Deref<Target = impl Sized>;
             // ^- RPITIT ?0        ^- RPITIT ?1
}

impl Foo for () {
    fn bar() -> Box<String> { Box::new(String::new()) }
}
```
```

----------------------------------------

TITLE: Handling Generic Functions with impl Trait in Rust
DESCRIPTION: The snippet showcases an erroneous function call where an explicit generic argument is provided to a function that uses `impl Trait` in an argument position, which is not necessary. The corrected examples demonstrate how to either infer all generic arguments at the call site or redefine the function to use explicit generic type parameters. Dependencies include the Rust programming language, and key parameters involve generic types and the `impl Trait` syntax. These functions take inputs that are constrained by trait bounds—Copy and Clone—and produce no direct outputs but emphasize correct function signature usage.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0632.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
fn foo<T: Copy>(a: T, b: impl Clone) {}

foo::<i32>(0i32, \"abc\".to_string());
```

LANGUAGE: Rust
CODE:
```
fn foo<T: Copy>(a: T, b: impl Clone) {}
fn bar<T: Copy, U: Clone>(a: T, b: U) {}

foo(0i32, \"abc\".to_string());

bar::<i32, String>(0i32, \"abc\".to_string());
bar::<_, _>(0i32, \"abc\".to_string());
bar(0i32, \"abc\".to_string());
```

----------------------------------------

TITLE: Implementing Basic UEFI Hello World in Rust (no_std)
DESCRIPTION: A minimal UEFI application that prints 'Hello World!' using raw UTF-16 encoding without std library support. Implements panic handler and UEFI entry point with direct system table manipulation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/unknown-uefi.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#![no_main]
#![no_std]

use r_efi::efi;

#[panic_handler]
fn panic_handler(_info: &core::panic::PanicInfo) -> ! {
    loop {}
}

#[export_name = "efi_main"]
pub extern "C" fn main(_h: efi::Handle, st: *mut efi::SystemTable) -> efi::Status {
    let s = [
        0x0048u16, 0x0065u16, 0x006cu16, 0x006cu16, 0x006fu16,
        0x0020u16,
        0x0057u16, 0x006fu16, 0x0072u16, 0x006cu16, 0x0064u16,
        0x0021u16,
        0x000au16,
        0x0000u16,
    ];

    let r =
        unsafe { ((*(*st).con_out).output_string)((*st).con_out, s.as_ptr() as *mut efi::Char16) };
    if r.is_error() {
        return r;
    }

    let r = unsafe {
        let mut x: usize = 0;
        ((*(*st).boot_services).wait_for_event)(1, &mut (*(*st).con_in).wait_for_key, &mut x)
    };
    if r.is_error() {
        return r;
    }

    efi::Status::SUCCESS
}
```

----------------------------------------

TITLE: Correct Type Definition in Rust
DESCRIPTION: Shows the correct way to define multiple distinct types by using different names, avoiding the E0428 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0428.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Bar;
struct Bar2; // ok!
```

----------------------------------------

TITLE: Reordered Import Example in Rust
DESCRIPTION: Shows the expected output after applying version-sorting to imports within each group, while maintaining the separation between groups.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_30

LANGUAGE: rust
CODE:
```
use c;
use d;

use a;
use b;
```

----------------------------------------

TITLE: Pattern with Inline If Clause - Rust
DESCRIPTION: Shows formatting for a multi-line pattern where the if clause remains on the same line as the last pattern element.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_24

LANGUAGE: rust
CODE:
```
    Token::Dimension {
         value,
         ref unit,
         ...
    } if num_context.is_ok(context.parsing_mode, value) => {
        ...
    }
```

----------------------------------------

TITLE: Workspace Symbols Filtering in TypeScript
DESCRIPTION: Extends workspace symbol search with optional scope and kind filtering capabilities
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
interface WorkspaceSymbolParams {
    searchScope?: WorkspaceSymbolSearchScope;
    searchKind?: WorkspaceSymbolSearchKind;
}

const enum WorkspaceSymbolSearchScope {
    Workspace = "workspace",
    WorkspaceAndDependencies = "workspaceAndDependencies"
}

const enum WorkspaceSymbolSearchKind {
    OnlyTypes = "onlyTypes",
    AllSymbols = "allSymbols"
}
```

----------------------------------------

TITLE: Iterating with for_each in Rust
DESCRIPTION: Demonstrates the use of the for_each method on an iterator in Rust to print each value multiplied by two. No external dependencies are required.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_21

LANGUAGE: rust
CODE:
```
fn main() {
    let x = vec![1, 2, 3];
    x.into_iter().for_each(|v| {
        let y = v * 2;
    });
}
```

----------------------------------------

TITLE: Erroneous Rust Code Missing Lifetime Bound
DESCRIPTION: This example fails to compile because the struct Foo doesn't have a where clause requiring T to outlive 'a, which is needed by the associated type used in the struct field.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0309.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// This won't compile because the applicable impl of
// `SomeTrait` (below) requires that `T: 'a`, but the struct does
// not have a matching where-clause.
struct Foo<'a, T> {
    foo: <T as SomeTrait<'a>>::Output,
}

trait SomeTrait<'a> {
    type Output;
}

impl<'a, T> SomeTrait<'a> for T
where
    T: 'a,
{
    type Output = u32;
}
```

----------------------------------------

TITLE: Adding Braces to Lambda and Match Arm Expressions in Rust
DESCRIPTION: This assist adds braces to lambda and match arm expressions. It wraps single-line expressions in curly braces, improving readability and allowing for multi-line expressions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo(n: i32) -> i32 {
    match n {
        1 => n + 1,
        _ => 0
    }
}
```

LANGUAGE: rust
CODE:
```
fn foo(n: i32) -> i32 {
    match n {
        1 => {
            n + 1
        },
        _ => 0
    }
}
```

----------------------------------------

TITLE: Invalid Trait Implementation with Mismatched Lifetime Parameters
DESCRIPTION: Example showing incorrect implementation where the lifetime constraint 'b:'a is missing in the implementation of the bar() method, causing compilation error E0195.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0195.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Trait {
    fn bar<'a,'b:'a>(x: &'a str, y: &'b str);
}

struct Foo;

impl Trait for Foo {
    fn bar<'a,'b>(x: &'a str, y: &'b str) {
    // error: lifetime parameters or bounds on method `bar`
    // do not match the trait declaration
    }
}
```

----------------------------------------

TITLE: Grouping Imports in Rust
DESCRIPTION: Demonstrates different strategies for grouping consecutive imports using the group_imports option.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_62

LANGUAGE: rust
CODE:
```
use super::update::convert_publish_payload;
use chrono::Utc;

use alloc::alloc::Layout;
use juniper::{FieldError, FieldResult};
use uuid::Uuid;

use std::sync::Arc;

use broker::database::PooledConnection;

use super::schema::{Context, Payload};
use crate::models::Event;
use core::f32;
```

LANGUAGE: rust
CODE:
```
use alloc::alloc::Layout;
use core::f32;
use std::sync::Arc;

use broker::database::PooledConnection;
use chrono::Utc;
use juniper::{FieldError, FieldResult};
use uuid::Uuid;

use super::schema::{Context, Payload};
use super::update::convert_publish_payload;
use crate::models::Event;
```

LANGUAGE: rust
CODE:
```
use super::schema::{Context, Payload};
use super::update::convert_publish_payload;
use crate::models::Event;
use alloc::alloc::Layout;
use broker::database::PooledConnection;
use chrono::Utc;
use core::f32;
use juniper::{FieldError, FieldResult};
use std::sync::Arc;
use uuid::Uuid;
```

----------------------------------------

TITLE: Correct Label Usage in Rust Loop
DESCRIPTION: Demonstrates proper usage of a labeled break in Rust where the label is directly accessible within the same scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0767.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
'a: loop {
    break 'a; // ok!
}
```

----------------------------------------

TITLE: Deinitializing All Git Submodules (Git Console)
DESCRIPTION: Removes the Git submodule configuration from the main repository's `.git/config` and `.gitmodules` files, and also removes the submodule directories. The `-f` flag forces removal even if the submodule has local changes. Useful for clearing up submodule configuration problems.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_27

LANGUAGE: console
CODE:
```
git submodule deinit -f --all
```

----------------------------------------

TITLE: Setting Markdown Playground URL with rustdoc (Bash)
DESCRIPTION: Explains how the `--markdown-playground-url` flag sets the base URL for the Rust Playground when rendering Markdown files, enabling 'Run' buttons for code examples.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_22

LANGUAGE: bash
CODE:
```
$ rustdoc README.md --markdown-playground-url https://play.rust-lang.org/
```

----------------------------------------

TITLE: Invalid Function Pointer Type Patterns in Rust
DESCRIPTION: Demonstrates erroneous function pointer type definitions with patterns that are not allowed, such as using mutable parameters or reference patterns
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0561.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
type A1 = fn(mut param: u8); // error!
type A2 = fn(&param: u32); // error!
```

----------------------------------------

TITLE: Simple Inline Attribute Hint
DESCRIPTION: Shows the minimal inline attribute usage, which provides a hint to the compiler about potential inlining without specifying a specific behavior
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0534.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#[inline]
fn something() {}
```

----------------------------------------

TITLE: Struct Field Type Line Breaking in Rust
DESCRIPTION: Demonstrates how to handle struct field types that do not fit on a single line. This involves pulling the type down to its own line and indenting it further.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
struct Foo {
    a: A,
    long_name:
        LongType,
}
```

----------------------------------------

TITLE: Identifying Duplicate Deprecated Attributes in Rust
DESCRIPTION: This snippet shows an erroneous use of multiple `deprecated` attributes on a single function, which results in a compiler error. The purpose is to demonstrate how not to use deprecated attributes in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0550.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#[deprecated(note = \"because why not?\")]
#[deprecated(note = \"right?\")] // error!
fn the_banished() {}
```

----------------------------------------

TITLE: Demonstrating Incorrect Trait Implementation in Rust
DESCRIPTION: This code snippet shows an erroneous implementation of the 'Foo' trait for 'Bar' struct. The 'foo' method in the implementation has fewer parameters than specified in the trait, causing a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0050.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo(&self, x: u8) -> bool;
}

struct Bar;

// error: method `foo` has 1 parameter but the declaration in trait `Foo::foo`
// has 2
impl Foo for Bar {
    fn foo(&self) -> bool { true }
}
```

----------------------------------------

TITLE: Printing Rust Configuration Values
DESCRIPTION: Shows how to list all cfg values for conditional compilation using rustc's --print flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments/print-options.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
$ rustc --print cfg a.rs
debug_assertions
panic="unwind"
target_abi=""
target_arch="x86_64"
target_endian="little"
target_env="gnu"
target_family="unix"
target_feature="fxsr"
target_feature="sse"
target_feature="sse2"
target_has_atomic="16"
target_has_atomic="32"
target_has_atomic="64"
target_has_atomic="8"
target_has_atomic="ptr"
target_os="linux"
target_pointer_width="64"
target_vendor="unknown"
unix
```

----------------------------------------

TITLE: Defining cdecl Functions in Rust
DESCRIPTION: This snippet defines several functions using the cdecl calling convention, which is used for calling functions in C. It includes multiple function signatures with varying prefixes and decorations. No special dependencies are required aside from the Rust environment itself.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-import-name-type/output.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
LooksLikeAPrivateGlobal(13)
cdecl_fn_undecorated(1)
cdecl_fn_undecorated2(10)
cdecl_fn_noprefix(2)
cdecl_fn_decorated(3)
```

----------------------------------------

TITLE: Setting Debug Info Level in Rust
DESCRIPTION: Controls the generation of debug information. Values include `0` or `none` (no debug info), `line-directives-only`, `line-tables-only`, `1` or `limited`, and `2` or `full`. The `-g` flag is an alias for `-C debuginfo=2`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_5



----------------------------------------

TITLE: Resolving Type Inference with Full Type Annotation in Rust
DESCRIPTION: This snippet demonstrates how to resolve the E0283 error by providing a full type annotation for the variable.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0283.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let x: Vec<char> = "hello".chars().rev().collect();
```

----------------------------------------

TITLE: Fixing E0572: Moving Return Inside Function in Rust
DESCRIPTION: This snippet demonstrates how to fix the E0572 error by either removing the `return` keyword when assigning a constant value or by moving the `return` statement inside a function. The first part shows a correct constant assignment, and the second part shows a function returning the constant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0572.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
const FOO: u32 = 0;

fn some_fn() -> u32 {
    return FOO;
}

fn main() {
    some_fn();
}
```
```

----------------------------------------

TITLE: Generating JSON Diagnostic Output with rustc
DESCRIPTION: Demonstrates how to use the '--error-format json' flag with Rust compiler to output diagnostics as JSON objects. This format is used by tools like 'cargo fix' to parse compiler errors programmatically.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
$ rustc json_error_demo.rs --error-format json
{"message":"cannot add `&str` to `{integer}`","code":{"code":"E0277","explanation":"\nYou tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"json_error_demo.rs","byte_start":50,"byte_end":51,"line_start":4,"line_end":4,"column_start":7,"column_end":8,"is_primary":true,"text":[{"text":"    a + b","highlight_start":7,"highlight_end":8}],"label":"no implementation for `{integer} + &str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::ops::Add<&str>` is not implemented for `{integer}`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"error[E0277]: cannot add `&str` to `{integer}`\n --> json_error_demo.rs:4:7\n  |\n4 |     a + b\n  |       ^ no implementation for `{integer} + &str`\n  |\n  = help: the trait `std::ops::Add<&str>` is not implemented for `{integer}`\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to previous error\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"","spans":[],"children":[],"rendered":"For more information about this error, try `rustc --explain E0277`.\n"}
```

----------------------------------------

TITLE: Where Clause Formatting in Rust
DESCRIPTION: Illustrates the rules for formatting `where` clauses in Rust, including placement of the `where` keyword, indentation of components, and use of trailing commas.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_21

LANGUAGE: rust
CODE:
```
fn function<T, U>(args)
where
    T: Bound,
    U: AnotherBound,
{
    body
}

fn foo<T>(
    args
) -> ReturnType
where
    T: Bound,
{
    body
}

fn foo<T, U>(
    args,
) where
    T: Bound,
    U: AnotherBound,
{
    body
}

fn foo<T, U>(
    args
) -> ReturnType
where
    T: Bound,
    U: AnotherBound;  // Note, no trailing comma.

// Note that where clauses on `type` aliases are not enforced and should not
// be used.
type Foo<T>
where
    T: Bound
= Bar<T>;
```

----------------------------------------

TITLE: Example Macro Rules Definition
DESCRIPTION: Shows a macro_rules definition and usage example demonstrating context differences in expanded code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/macro_expansions.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
macro_rules! m {
    ($a:expr, $b:expr) => {
        if $a.is_some() {
            $b;
        }
    }
}

let x: Option<u32> = Some(42);
m!(x, x.unwrap());
```

----------------------------------------

TITLE: Fixed Associated Type with Dummy Lifetime Parameter
DESCRIPTION: Resolves the associated type lifetime issue by introducing a dummy parameter to ensure lifetime usage
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0582.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
# trait Foo {
#     type Assoc<'a>;
# }
struct Bar<X, F>
where
    X: Foo,
    F: for<'a> Fn(X::Assoc<'a>, /* dummy */ &'a ()) -> &'a i32
{
    x: X,
    f: F
}
```

----------------------------------------

TITLE: Using Control Flow Constructs in Rust
DESCRIPTION: Illustrates the preference for using control flow constructs like 'if' instead of functional combinators like 'Option::filter' when it improves readability.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_28

LANGUAGE: rust
CODE:
```
// GOOD
if !x.cond() {
    return None;
}
Some(x)

// BAD
Some(x).filter(|it| it.cond())
```

----------------------------------------

TITLE: Implementing Add Trait Without AddAssign in Rust
DESCRIPTION: This code demonstrates implementing the Add trait for a custom type Foo, but failing to use the += operator because AddAssign is not automatically implemented.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0368.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use std::ops::Add;

struct Foo(u32);

impl Add for Foo {
    type Output = Foo;

    fn add(self, rhs: Foo) -> Foo {
        Foo(self.0 + rhs.0)
    }
}

fn main() {
    let mut x: Foo = Foo(5);
    x += Foo(7); // error, `+=` cannot be applied to the type `Foo`
}
```

----------------------------------------

TITLE: Comparing type_alias_impl_trait with Argument-Position impl Trait
DESCRIPTION: This snippet illustrates the difference between using a type alias with `impl Trait` and using argument-position `impl Trait`. It shows that the type alias refers to a unique type, while argument-position `impl Trait` allows the caller to choose the concrete type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/type-alias-impl-trait.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
# #![feature(type_alias_impl_trait)]
# #![allow(unused_variables)]
# pub mod x {
# pub trait Trait {}
#
# struct MyType;
#
# impl Trait for MyType {}
#
# pub type Alias = impl Trait;
#
# #[define_opaque(Alias)]
# pub fn new() -> Alias {
#     MyType
# }
# }
# use x::*;
// this...
pub fn take_alias(x: Alias) {
    // ...
}

// ...is *not* the same as
pub fn take_impl(x: impl Trait) {
    // ...
}
# fn main(){}
```

----------------------------------------

TITLE: Moving from mod.rs to Parent Rust File
DESCRIPTION: Moves code from a module's mod.rs file to a corresponding parent .rs file. This refactoring helps flatten the module hierarchy by converting from the older nested mod.rs pattern to a file-based module system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_87

LANGUAGE: rust
CODE:
```
//- /main.rs
mod a;
//- /a/mod.rs
fn t() {}
```

LANGUAGE: rust
CODE:
```
fn t() {}
```

----------------------------------------

TITLE: Fix: Iterate using Indices
DESCRIPTION: This code fixes the iteration example by iterating using indices. This avoids borrowing the entire vector, resolving E0626. The code uses temporaries that are currently required (see issue 43122).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0626.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
# #![feature(coroutines, coroutine_trait, stmt_expr_attributes)]
# use std::ops::Coroutine;
# use std::pin::Pin;
let mut b = #[coroutine] || {
  let v = vec![1,2,3];
  let len = v.len(); // (*)
  for i in 0..len {
    let x = v[i]; // (*)
    yield x; // <-- Now yield is OK.
  }
};
Pin::new(&mut b).resume(());

// (*) -- Unfortunately, these temporaries are currently required.
// See <https://github.com/rust-lang/rust/issues/43122>.
```

----------------------------------------

TITLE: Match Arm Pattern Formatting in Rust
DESCRIPTION: Guidelines for formatting match arm patterns in Rust. Never start patterns with vertical bars; instead, use them between alternatives, and use trailing commas for non-block arms.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_17

LANGUAGE: rust
CODE:
```
match foo {
    // Don't do this.
    | foo => bar,
    // Or this.
    | a_very_long_pattern
    | another_pattern
    | yet_another_pattern
    | a_fourth_pattern => {
        ...
    }
}
```

----------------------------------------

TITLE: Opting out of unstable features in Rust with a crate-level attribute
DESCRIPTION: Using the #![forbid(unstable_features)] attribute at the crate root to prevent usage of unstable features, providing a way for crates to opt out of unstable features even if RUSTC_BOOTSTRAP is set.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/rustc-bootstrap.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![forbid(unstable_features)]
```

----------------------------------------

TITLE: Example of Well-Commented Rust Test Structure
DESCRIPTION: A template for how to structure a test with good documentation, including proper comment formatting for test purpose, relevant links, test case descriptions, and platform-specific directives. Demonstrates best practices for making tests maintainable and understandable for future contributors.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/best-practices.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
//! Brief summary of what the test is exercising.
//! Example: Regression test for #123456: make sure coverage attribute don't ICE
//!     when applied to non-items.
//!
//! Optional: Remarks on related tests/issues, external APIs/tools, crash
//!     mechanism, how it's fixed, FIXMEs, limitations, etc.
//! Example: This test is like `tests/attrs/linkage.rs`, but this test is
//!     specifically checking `#[coverage]` which exercises a different code
//!     path. The ICE was triggered during attribute validation when we tried
//!     to construct a `def_path_str` but only emitted the diagnostic when the
//!     platform is windows, causing an ICE on unix.
//!
//! Links to relevant issues and discussions. Examples below:
//! Regression test for <https://github.com/rust-lang/rust/issues/123456>.
//! See also <https://github.com/rust-lang/rust/issues/101345>.
//! See discussion at <https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/123456-example-topic>.
//! See [`clone(2)`].
//!
//! [`clone(2)`]: https://man7.org/linux/man-pages/man2/clone.2.html

//@ ignore-windows
// Reason: (why is this test ignored for windows? why not specifically
// windows-gnu or windows-msvc?)

// Optional: Summary of test cases: What positive cases are checked?
// What negative cases are checked? Any specific quirks?

fn main() {
    #[coverage]
    //~^ ERROR coverage attribute can only be applied to function items.
    let _ = {
        // Comment highlighting something that deserves reader attention.
        fn foo() {}
    };
}
```

----------------------------------------

TITLE: Converting Closure to Function in Rust
DESCRIPTION: This assist converts a closure to a freestanding function, changing all captures to parameters. It extracts the closure body into a separate function and adjusts the call site.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_19

LANGUAGE: rust
CODE:
```
fn main() {
    let mut s = String::new();
    let closure = |a| s.push_str(a);
    closure("abc");
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let mut s = String::new();
    fn closure(a: &str, s: &mut String) {
        s.push_str(a)
    }
    closure("abc", &mut s);
}
```

----------------------------------------

TITLE: Correcting Thread-Local Static Variable Assignment in Rust
DESCRIPTION: This code snippet shows the corrected approach to using thread-local static variables in Rust by utilizing a separate const variable. It extracts the value into a const variable 'C', which can then be safely used to initialize the thread-local static variable 'X'. The const variable 'Y' correctly references 'C' without compile-time errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0625.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
#![feature(thread_local)]

const C: usize = 12;

#[thread_local]
static X: usize = C;

const Y: usize = 2 * C;
```

----------------------------------------

TITLE: Specifying Nightly Toolchain in Cargo.toml
DESCRIPTION: This snippet demonstrates how to specify the nightly toolchain required for `clippy-utils`.  It indicates that the crate is guaranteed to build with a specific nightly version. The version is determined with rustc and can be added to the `Cargo.toml` file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/clippy_utils/README.md#_snippet_0

LANGUAGE: toml
CODE:
```
clippy_utils = "0.1.XY"
```

----------------------------------------

TITLE: Configuring GitLab CI with Clippy for Rust
DESCRIPTION: This snippet configures a GitLab CI job to run Clippy on a Rust project. It uses the `rust:latest` Docker image and sets the `RUSTFLAGS` environment variable to treat warnings as errors. The job installs Clippy and then runs it on all targets and features of the project.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/continuous_integration/gitlab.md#2025-04-21_snippet_0

LANGUAGE: yml
CODE:
```
"# Make sure CI fails on all warnings, including Clippy lints
variables:
  RUSTFLAGS: \"-Dwarnings\" # Treat warnings as errors

clippy_check:
  image: rust:latest
  script:
    - rustup component add clippy # Install clippy
    - cargo clippy --all-targets --all-features # Run clippy on all targets and features"
```

----------------------------------------

TITLE: Correct Self Parameter Type in Rust
DESCRIPTION: Proper implementation of a method with an explicit self parameter using Box<Self>, which is one of the allowed self types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0211.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
struct Foo;

impl Foo {
    fn x(self: Box<Foo>) {} // ok!
}
```

----------------------------------------

TITLE: Feature Flag Error Example in Rust
DESCRIPTION: Demonstrates an erroneous use of #![feature] attributes where a feature flag is used for functionality that is already stable in Rust 2018 edition. This example shows how attempting to enable an already-stable feature through a feature flag would trigger a compiler error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0705.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(rust_2018_preview)]
#![feature(test_2018_feature)] // error: the feature
                               // `test_2018_feature` is
                               // included in the Rust 2018 edition
```

----------------------------------------

TITLE: Import Ordering Example in Rust
DESCRIPTION: Demonstrates the rules for import ordering in Rust, where imports within a group must be version-sorted while preserving group separation with blank lines.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_29

LANGUAGE: rust
CODE:
```
use d;
use c;

use b;
use a;
```

----------------------------------------

TITLE: Adding RISC-V Target for Cross-Compilation
DESCRIPTION: Command to add the RISC-V target using rustup for cross-compilation purposes
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv64gc-unknown-linux-gnu.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
rustup target add riscv64gc-unknown-linux-gnu
```

----------------------------------------

TITLE: Invalid Visibility Scope in Rust
DESCRIPTION: This code snippet demonstrates an erroneous visibility declaration in Rust. It attempts to restrict the visibility of a struct `Shark` to a path `crate::Sea`, where `Sea` is an enum, which is not allowed. The compiler will raise an error because visibility scopes can only apply to modules.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0577.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0577,edition2018
pub enum Sea {}

pub (in crate::Sea) struct Shark; // error!

fn main() {}
```
```

----------------------------------------

TITLE: Demonstrating Compile Error with Trait Parameter Mismatch in Rust
DESCRIPTION: This Rust code snippet demonstrates a compile error that occurs when a trait function signature uses 'impl Trait' but the implementing function uses a named generic type. The trait 'Foo' has a function 'foo' which expects an 'impl Iterator', while its implementation has a method 'foo' that takes a generic type 'U' constrained by 'Iterator'. This mismatch leads to a compile error 'E0643'.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0643.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
```compile_fail,E0643
trait Foo {
    fn foo(&self, _: &impl Iterator);
}
impl Foo for () {
    fn foo<U: Iterator>(&self, _: &U) { } // error method `foo` has incompatible
                                          // signature for trait
}
```
```

----------------------------------------

TITLE: Illustrating Error E0592 in Rust Definitions
DESCRIPTION: This Rust snippet shows an example of error E0592, which occurs when two methods are defined with the same name within separate impl blocks for the same struct. The purpose is to demonstrate the issue of duplicated method names, leading to compilation failure.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0592.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
```compile_fail,E0592
struct Foo;

impl Foo {
    fn bar() {} // previous definition here
}

impl Foo {
    fn bar() {} // duplicate definition here
}
```
```

----------------------------------------

TITLE: Corrected Auto Trait Definition in Rust
DESCRIPTION: This code snippet shows the correct way to define an auto trait in Rust without using generics. Removing the generic type parameter resolves the compilation error, as the compiler doesn't need to infer any types for the trait. The auto trait `Generic` is now valid.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0567.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
#![feature(auto_traits)]

auto trait Generic {} // ok!
# fn main() {}
```
```

----------------------------------------

TITLE: Specifying Library Paths with rustdoc (Bash)
DESCRIPTION: Explains how the `-L` or `--library-path` flag is used to provide rustdoc with directories to search for crate dependencies when generating documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_7

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs -L target/debug/deps
```

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --library-path target/debug/deps
```

----------------------------------------

TITLE: Basic Coroutine Usage Example in Rust
DESCRIPTION: Demonstrates basic coroutine functionality with yield and resume operations. Shows how to create a coroutine that yields a value and returns a final result.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/coroutines.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]

use std::ops::{Coroutine, CoroutineState};
use std::pin::Pin;

fn main() {
    let mut coroutine = #[coroutine] || {
        yield 1;
        return "foo"
    };

    match Pin::new(&mut coroutine).resume(()) {
        CoroutineState::Yielded(1) => {}
        _ => panic!("unexpected value from resume"),
    }
    match Pin::new(&mut coroutine).resume(()) {
        CoroutineState::Complete("foo") => {}
        _ => panic!("unexpected value from resume"),
    }
}
```

----------------------------------------

TITLE: Self as Type Parameter in Supertrait Making Trait Non-dyn-compatible in Rust
DESCRIPTION: Demonstrates a trait that uses Self as a type parameter in its supertrait listing, making it non-dyn-compatible due to the inability to determine the concrete type in trait object contexts.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
trait Super<A: ?Sized> {}

trait Trait: Super<Self> {
}

struct Foo;

impl Super<Foo> for Foo{}

impl Trait for Foo {}

fn main() {
    let x: Box<dyn Trait>;
}
```

----------------------------------------

TITLE: Console Output Example for Simple Error
DESCRIPTION: Example console output showing how a simple error with suggestion is formatted in the terminal.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
$ rustc mycode.rs
error[E0999]: oh no! this is an error!
 --> mycode.rs:3:5
  |
3 |     sad()
  |     ^ help: try using a qux here: `qux sad()`

error: aborting due to previous error

For more information about this error, try `rustc --explain E0999`.
```

----------------------------------------

TITLE: Desugaring Closure with Mutable Reference in Rust
DESCRIPTION: This Rust snippet illustrates a closure that modifies the value of a captured variable. The compiler adjusts the borrow type to mutable (`FnMut`). The MIR output confirms that `x` is borrowed mutably. Understanding of Rust borrowing semantics is required to comprehend how closures affect variable mutability.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/closure.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn closure(mut f: impl FnMut()) {
    f();
}

fn main() {
    let mut x: i32 = 10;
    closure(|| {
        x += 10;  // The closure mutates the value of x
        println!("Hi {}", x)
    });
    println!("Value of x after return {}", x);
}
```

----------------------------------------

TITLE: Run All Project Tests with Cargo Miri (Shell)
DESCRIPTION: Executes the entire test suite of the current Cargo project through the Miri interpreter. Miri will check for undefined behavior during the execution of each test case.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
cargo miri test
```

----------------------------------------

TITLE: Declaring External Functions in Rust
DESCRIPTION: This snippet declares four external functions in Rust, indicating that they are defined outside Rust code, typically in C or another language. These functions may be used for foreign function interface (FFI) purposes.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-c/output.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
extern fn extern_fn_1
```

LANGUAGE: Rust
CODE:
```
extern fn extern_fn_2; // didn't get the rename
```

LANGUAGE: Rust
CODE:
```
extern fn extern_fn_3
```

LANGUAGE: Rust
CODE:
```
extern fn extern_fn_4
```

----------------------------------------

TITLE: Multi-Line Let Statement Formatting
DESCRIPTION: Shows how to handle let statements that require multiple lines, with block indentation and line-breaking strategies
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/statements.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let pattern: Type =
    expr;
```

----------------------------------------

TITLE: Making a Constant Public in Rust
DESCRIPTION: This snippet shows how to modify the visibility of a constant in Rust by using the `pub` keyword, allowing the constant to be accessed outside of its defining module.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0603.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
mod foo {
    pub const PRIVATE: u32 = 0x_a_bad_1dea_u32; // We set it public by using the
                                                // `pub` keyword.
}

println!("const value: {}", foo::PRIVATE); // ok!
```

----------------------------------------

TITLE: Adding a Single Linker Argument in Rust
DESCRIPTION: Appends a single extra argument to the linker invocation. This flag can be passed multiple times to add multiple arguments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_15



----------------------------------------

TITLE: Compiling Rust code for `wasm32-unknown-unknown`
DESCRIPTION: This command compiles a Rust source file (`foo.rs`) to WebAssembly using the `wasm32-unknown-unknown` target. It then uses `file` to verify the output is a WebAssembly binary.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-unknown.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
$ rustc foo.rs --target wasm32-unknown-unknown
$ file foo.wasm
```

----------------------------------------

TITLE: Invalid Type Alias Usage as Trait
DESCRIPTION: Shows incorrect usage of a type alias in a trait bound position, which results in a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0404.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
type Foo = Iterator<Item=String>;

fn bar<T: Foo>(t: T) {} // error: `Foo` is a type alias
```

----------------------------------------

TITLE: Correct Usage of Non-Generic Types in Rust
DESCRIPTION: This snippet shows the correct way to declare type aliases for `u32` and `bool` by not providing any generic arguments, as these types are not generic.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0109.md#_snippet_1

LANGUAGE: Rust
CODE:
```
type X = u32; // ok!
type Y = bool; // ok!
```

----------------------------------------

TITLE: Expanding Tuple Struct Rest Pattern in Rust
DESCRIPTION: Expands rest pattern (..) in tuple struct patterns into explicit field bindings using numbered fields (_0, _1, etc).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_43

LANGUAGE: rust
CODE:
```
struct Bar(Y, Z);

fn foo(bar: Bar) {
    let Bar(..) = bar;
}
```

----------------------------------------

TITLE: Triggering Rust E0161 with Unsized Move
DESCRIPTION: This Rust code demonstrates the E0161 error. It defines a trait and attempts to call a method `f` on a `Box<dyn Bar>`. The method `f` takes `self` by value, which requires moving the underlying `dyn Bar`. Since `dyn Bar` is a dynamically sized type (unsized), its size is not known at compile time, making it impossible to move, resulting in the E0161 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0161.md#_snippet_0

LANGUAGE: Rust
CODE:
```
trait Bar {
    fn f(self);
}

impl Bar for i32 {
    fn f(self) {}
}

fn main() {
    let b: Box<dyn Bar> = Box::new(0i32);
    b.f();
    // error: cannot move a value of type dyn Bar: the size of dyn Bar cannot
    //        be statically determined
}
```

----------------------------------------

TITLE: Invalid Implementation of Foreign Trait with Multiple Type Parameters in Rust
DESCRIPTION: This code snippet illustrates an invalid implementation of a foreign trait with multiple type parameters, where the first appearance of the type parameter is uncovered.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0210.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct MyType2;
impl<T> ForeignTrait2<T, MyType<T>> for MyType2 { } // error
```

----------------------------------------

TITLE: Incorrect Macro Import in Non-Root Module (Rust)
DESCRIPTION: Example showing incorrect placement of macro imports within a non-root module, which will result in compilation error E0468.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0468.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
mod foo {
    #[macro_use(debug_assert)]  // error: must be at crate root to import
    extern crate core;          //        macros from another crate
    fn run_macro() { debug_assert!(true); }
}
```

----------------------------------------

TITLE: Incorrect Module and Type Instantiation in Rust
DESCRIPTION: Demonstrates an erroneous attempt to instantiate a module directly, which is not possible in Rust. Shows how modules cannot be used as types for creating instances.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0574.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
mod mordor {}

let sauron = mordor { x: () }; // error!

enum Jak {
    Daxter { i: isize },
}

let eco = Jak::Daxter { i: 1 };
match eco {
    Jak { i } => {} // error!
}
```

----------------------------------------

TITLE: Configuring LLVM for WebAssembly Target
DESCRIPTION: This TOML configuration specifies options in bootstrap.toml to ensure LLVM can support the WebAssembly target and build the wasm32-unknown-emscripten target. It sets the 'targets' field to enable building for WebAssembly and configures the build stage. Inputs are the configuration keys and values, and the expected output is a correctly set-up environment for compiling WebAssembly target within Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-emscripten.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[llvm]
targets = "WebAssembly"

[build]
build-stage = 1
target = ["wasm32-unknown-emscripten"]
```

----------------------------------------

TITLE: Viewing Diff Ignoring Specific Files (Git Console)
DESCRIPTION: Displays the diff of the commit history (`git log -p`) while explicitly ignoring changes made to a specified file (e.g., `Cargo.lock`) or pattern. This is useful for reviewing changes when certain files are auto-generated or irrelevant to the core changes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_25

LANGUAGE: console
CODE:
```
git log -p ':!Cargo.lock'
```

----------------------------------------

TITLE: Viewing Diff with Colored Moved Lines (Git Console)
DESCRIPTION: Shows a patch (diff) of changes in the commit history (`git log -p`), applying specific color options to highlight moved lines with a 'dimmed-zebra' pattern and allowing for indentation changes in moved whitespace. This improves readability for large code movements within files.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_24

LANGUAGE: console
CODE:
```
git log -p --color-moved=dimmed-zebra --color-moved-ws=allow-indentation-change
```

----------------------------------------

TITLE: Valid Use of Same Method Names in Non-Overlapping Implementations
DESCRIPTION: This code demonstrates the valid usage of methods with the same name in different non-overlapping implementations. Here, the 'bar' method is defined for two different generic instantiations of the Foo struct.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0201.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo<T>(T);

impl Foo<u8> {
    fn bar(&self) -> bool { self.0 > 5 }
}

impl Foo<bool> {
    fn bar(&self) -> bool { self.0 }
}
```

----------------------------------------

TITLE: Correctly Terminating a Byte String in Rust
DESCRIPTION: This code snippet demonstrates the correct way to declare a byte string in Rust by properly terminating it with a double quote.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0766.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let s = b""; // ok!
```

----------------------------------------

TITLE: Embedding Bitcode in Rust
DESCRIPTION: Controls whether LLVM bitcode is embedded in object files (rlibs). Accepts `y`, `yes`, `on`, `true` (default) or `n`, `no`, `off`, `false`. Bitcode is required for LTO.  Using `-C embed-bitcode=no` can improve compile times if LTO isn't being used. If combined with `-C lto`, the compiler will abort at start-up.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_9



----------------------------------------

TITLE: Unconstrained Type Parameter in Impl Block Error Example
DESCRIPTION: This code demonstrates an E0207 error where a type parameter T is declared in an impl block but is not constrained by the implementing type, implemented trait, or associated type binding.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0207.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo;

impl<T: Default> Foo {
    // error: the type parameter `T` is not constrained by the impl trait, self
    // type, or predicates [E0207]
    fn get(&self) -> T {
        <T as Default>::default()
    }
}
```

----------------------------------------

TITLE: Valid Rust Linkage Examples
DESCRIPTION: Shows valid implementations of the #[linkage] attribute using Option<function pointer>, Option<reference>, and raw pointer types that correctly match C's nullable pointer semantics.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0791.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(linkage)]

extern "C" {
    #[linkage = "extern_weak"]
    static foo: Option<unsafe extern "C" fn()>;

    #[linkage = "extern_weak"]
    static bar: Option<&'static i8>;

    #[linkage = "extern_weak"]
    static baz: *mut i8;
}
```

----------------------------------------

TITLE: Unconstrained Lifetime Parameter Error Example
DESCRIPTION: This code demonstrates an E0207 error with a lifetime parameter that is used in an associated type but is not constrained elsewhere in the implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0207.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
struct Foo;
struct Bar<'a>;

trait Contains {
    type B;

    fn get(&self) -> i32;
}

impl<'a> Contains for Foo {
    type B = Bar<'a>;

    // error: the lifetime parameter `'a` is not constrained by the impl trait,
    // self type, or predicates [E0207]
    fn get(&self) -> i32 {
        i32::default()
    }
}
```

----------------------------------------

TITLE: Fixing Code to Comply with Lint Check in Rust
DESCRIPTION: Shows how to modify the code to pass the lint check by following the snake_case naming convention, eliminating the need for lint check attributes.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0453.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![forbid(non_snake_case)]

fn main() {
    let my_number = 2;
}
```

----------------------------------------

TITLE: Erroneous Associated Item Constraint Usage in Rust
DESCRIPTION: This code snippet demonstrates an incorrect usage of associated item constraints, leading to a compiler error E0229. The constraint is placed in an unexpected context.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0229.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub trait Foo {
    type A;
    fn boo(&self) -> <Self as Foo>::A;
}

struct Bar;

impl Foo for isize {
    type A = usize;
    fn boo(&self) -> usize { 42 }
}

fn baz<I>(x: &<I as Foo<A = Bar>>::A) {}
// error: associated item constraint are not allowed here
```

----------------------------------------

TITLE: Generating Test Functions with Concatenated Names in Rust
DESCRIPTION: This example demonstrates using the concat metavariable expression to create test function names that incorporate the tested type and operation. The macro creates multiple test functions for different integer types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/macro-metavar-expr-concat.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#![feature(macro_metavar_expr_concat)]

macro_rules! test_math {
    ($integer:ident) => {
        #[test]
        fn ${ concat(test_, $integer, _, addition) } () {
            let a: $integer = 73;
            let b: $integer = 42;
            assert_eq!(a + b, 115)
        }

        #[test]
        fn ${ concat(test_, $integer, _, subtraction) } () {
            let a: $integer = 73;
            let b: $integer = 42;
            assert_eq!(a - b, 31)
        }
    }
}

test_math!(i32);
test_math!(u64);
test_math!(u128);
```

----------------------------------------

TITLE: Generics Clause Formatting in Rust
DESCRIPTION: Illustrates the preferred formatting for generics clauses in Rust, including spacing, commas, and line breaking.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_18

LANGUAGE: rust
CODE:
```
fn foo<T: Display, U: Debug>(x: Vec<T>, y: Vec<U>) ...

impl<T: Display, U: Debug> SomeType<T, U> { ...
```

----------------------------------------

TITLE: Extracting Variable Assignment Outside Conditional in Rust
DESCRIPTION: Pulls variable assignments from inside conditional branches to the outside, converting the conditional statement into an expression. This refactoring reduces repetition and clarifies that the primary purpose of the conditional is to compute a value.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_93

LANGUAGE: rust
CODE:
```
fn main() {
    let mut foo = 6;

    if true {
        foo = 5;
    } else {
        foo = 4;
    }
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let mut foo = 6;

    foo = if true {
        5
    } else {
        4
    };
}
```

----------------------------------------

TITLE: Manage Representation Hints in Rust Enum Using cfg_attr
DESCRIPTION: This snippet resolves conflicting representation hints in a Rust enum by employing conditional compilation with cfg_attr. It ensures the enum uses the appropriate representation based on the target architecture. There are no dependencies outside of standard Rust. The input is platform architecture, and output is an enum definition with a specific representation, either u32 or u64.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0566.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#[cfg_attr(linux, repr(u32))]
#[cfg_attr(not(linux), repr(u64))]
enum Repr { A }
```

----------------------------------------

TITLE: Fixing Generic Method Parameters with Self: Sized in Rust
DESCRIPTION: Shows how to make a trait with generic methods dyn-compatible by restricting the generic methods to only be available on concrete types using the `where Self: Sized` bound.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
trait Trait {
    fn foo<T>(&self, on: T) where Self: Sized;
    // more methods
}
```

----------------------------------------

TITLE: Displaying Version Information in Runtime Code
DESCRIPTION: Demonstrates how to retrieve and display the generated version information in the main application code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/rustc_tools_util/README.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
fn show_version() {
    let version_info = rustc_tools_util::get_version_info!();
    println!("{}", version_info);
}
```

----------------------------------------

TITLE: Using autodiff for Differentiable Programming in Rust
DESCRIPTION: This code snippet uses the std::autodiff feature in Rust to perform automatic differentiation. The primary function 'foo' calculates x squared, while 'bar', derived via the #[autodiff] attribute, also computes the derivative of 'foo', returning a tuple of the original function result and its derivative. The main function tests this by asserting correct values for specific inputs. Dependencies: Rust nightly channel with autodiff feature enabled. Inputs: a float 'x'. Outputs: a tuple containing the output of the function and its derivative.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/internals.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(autodiff)]\nuse std::autodiff::autodiff;\n\n// f(x) = x * x, f'(x) = 2.0 * x\n// bar therefore returns (x * x, 2.0 * x)\n#[autodiff(bar, Reverse, Active, Active)]\nfn foo(x: f32) -> f32 { x * x }\n\nfn main() {\n    assert_eq!(bar(3.0, 1.0), (9.0, 6.0));\n    assert_eq!(bar(4.0, 1.0), (16.0, 8.0));\n}
```

----------------------------------------

TITLE: Invoking rustc with linker plugin LTO and linker arguments
DESCRIPTION: This snippet demonstrates how to invoke `rustc` directly with linker plugin LTO enabled and additional linker arguments. It includes the `-Clinker-plugin-lto`, `-L.`, `-Copt-level=2`, `-Clinker=clang`, and `-Clink-arg=-fuse-ld=lld` flags.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/linker-plugin-lto.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
"rustc -Clinker-plugin-lto -L. -Copt-level=2 -Clinker=clang -Clink-arg=-fuse-ld=lld ./main.rs"
```

----------------------------------------

TITLE: Demonstrating Type Constraint Error in Rust Trait Implementation
DESCRIPTION: This code snippet demonstrates E0326 error in Rust where a trait implementation uses the wrong type for an associated constant. The trait defines BAR as bool but the implementation uses u32, causing a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0326.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    const BAR: bool;
}

struct Bar;

impl Foo for Bar {
    const BAR: u32 = 5; // error, expected bool, found u32
}
```

----------------------------------------

TITLE: Rust Pattern Matching Error - Inconsistent Variable Binding
DESCRIPTION: Example showing erroneous code where variable 'y' is bound inconsistently across patterns - by-value in one pattern and by-reference in another, causing compile error E0409.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0409.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let x = (0, 2);
match x {
    (0, ref y) | (y, 0) => { /* use y */} // error: variable `y` is bound with
                                          //        different mode in pattern #2
                                          //        than in pattern #1
    _ => ()
}
```

----------------------------------------

TITLE: Rust Attribute Formatting
DESCRIPTION: Demonstrates proper formatting of attributes, including multi-line attributes, inner attributes, and attributes with argument lists.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/README.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#[repr(C)]
#[foo(foo, bar)]
#[long_multi_line_attribute(
    split,
    across,
    lines,
)]
struct CRepr {
    #![repr(C)]
    x: f32,
    y: f32,
}
```

----------------------------------------

TITLE: Invalid Multiple Lifetime Bounds Example in Rust
DESCRIPTION: Demonstrates incorrect code that triggers E0226 error by specifying two lifetime bounds ('a and 'b) on a trait object. This is not allowed in Rust's type system.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0226.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {}

type T<'a, 'b> = dyn Foo + 'a + 'b; // error: Trait object `arg` has two
                                    //        lifetime bound, 'a and 'b.
```

----------------------------------------

TITLE: Converting Associated Constants to Methods for dyn-compatibility in Rust
DESCRIPTION: Shows how to work around the associated constant restriction by using a method instead, which makes the trait dyn-compatible.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
trait Foo {
    fn x(&self) -> i32;
}
```

----------------------------------------

TITLE: Trait-Based Solution for Type-Safe Transmutation in Rust
DESCRIPTION: A safer approach to transmuting generic types using a trait with specific implementations for each concrete type. This pattern enables type-checking at compile time for each implementation, ensuring size compatibility for each concrete type used.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0139.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use std::mem::transmute;

struct Foo<T>(Vec<T>);

trait MyTransmutableType: Sized {
    fn transmute(_: Vec<Self>) -> Foo<Self>;
}

impl MyTransmutableType for u8 {
    fn transmute(x: Vec<u8>) -> Foo<u8> {
        unsafe { transmute(x) }
    }
}

impl MyTransmutableType for String {
    fn transmute(x: Vec<String>) -> Foo<String> {
        unsafe { transmute(x) }
    }
}

// ... more impls for the types you intend to transmute

fn foo<T: MyTransmutableType>(x: Vec<T>) {
    let y: Foo<T> = <T as MyTransmutableType>::transmute(x);
    // do something with y
}
```

----------------------------------------

TITLE: Formatting Type Aliases with Where Clauses in Rust
DESCRIPTION: Demonstrates formatting for type aliases with preceding where clauses and both preceding and trailing where clauses, showing proper indentation and line break rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_25

LANGUAGE: rust
CODE:
```
// With only a preceding where clause.
type WithPrecedingWC<T, U>
where
    T: U::AnAssociatedType,
    U: SomeBound,
= AnEvenLongerType<T, U, Foo<T>>;

// Or with both a preceding and trailing where clause.
type WithPrecedingWC<T, U>
where
    T: U::AnAssociatedType,
    U: SomeBound,
= AnEvenLongerType<T, U, Foo<T>>
where
    T: U::AnAssociatedType2,
    U: SomeBound2;
```

----------------------------------------

TITLE: Demonstrating Incorrect Static Closure Usage in Rust
DESCRIPTION: This code snippet shows an erroneous attempt to use a closure as a static element. Closures cannot be static because they capture their environment, which would be limited to only static variables if allowed.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0697.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    static || {}; // used as `static`
}
```

----------------------------------------

TITLE: Preventing Inlining with #[doc(no_inline)] in Rust
DESCRIPTION: This example shows how to prevent an item from being inlined using the `#[doc(no_inline)]` attribute. The `Public` struct from `private_mod` will not be inlined at the crate root, and a re-export link will be displayed instead.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/re-exports.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
```rust
mod private_mod {
    pub struct Public;
}
#[doc(no_inline)]
pub use self::private_mod::Public;
```
```

----------------------------------------

TITLE: Overflow Delimited Expressions in Rust
DESCRIPTION: Demonstrates the effect of the overflow_delimited_expr option on formatting structs, slices, and arrays in function calls.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_58

LANGUAGE: rust
CODE:
```
fn example() {
    foo(ctx, |param| {
        action();
        foo(param)
    });

    foo(
        ctx,
        Bar {
            x: value,
            y: value2,
        },
    );

    foo(
        ctx,
        &[
            MAROON_TOMATOES,
            PURPLE_POTATOES,
            ORGANE_ORANGES,
            GREEN_PEARS,
            RED_APPLES,
        ],
    );

    foo(
        ctx,
        vec![
            MAROON_TOMATOES,
            PURPLE_POTATOES,
            ORGANE_ORANGES,
            GREEN_PEARS,
            RED_APPLES,
        ],
    );
}
```

LANGUAGE: rust
CODE:
```
fn example() {
    foo(ctx, |param| {
        action();
        foo(param)
    });

    foo(ctx, Bar {
        x: value,
        y: value2,
    });

    foo(ctx, &[
        MAROON_TOMATOES,
        PURPLE_POTATOES,
        ORGANE_ORANGES,
        GREEN_PEARS,
        RED_APPLES,
    ]);

    foo(ctx, vec![
        MAROON_TOMATOES,
        PURPLE_POTATOES,
        ORGANE_ORANGES,
        GREEN_PEARS,
        RED_APPLES,
    ]);
}
```

----------------------------------------

TITLE: Rewriting Pattern Without Sub-binding in Rust
DESCRIPTION: This code snippet demonstrates how to rewrite the previous pattern without using sub-bindings, ensuring memory safety. It separates the ref binding into a separate let statement inside the match arm.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0303.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
match Some("hi".to_string()) {
    Some(ref s) => {
        let op_string_ref = &Some(s);
        // ...
    },
    None => {},
}
```

----------------------------------------

TITLE: Single-Line Struct Variant Formatting in Rust
DESCRIPTION: Demonstrates how to format small struct variants within enums on a single line. It specifies the use of spaces around braces and the absence of a trailing comma.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
enum FooBar {
    Error { err: Box<Error>, line: u32 },
}
```

----------------------------------------

TITLE: Manual Implementation of Default Trait for Rust Enum with Payload
DESCRIPTION: This code snippet demonstrates how to manually implement the Default trait for a Rust enum when the default variant has a payload. It provides a custom implementation of the default() function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0665.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
enum Food {
    Sweet(i32),
    Salty,
}

impl Default for Food {
    fn default() -> Food {
        Food::Sweet(1)
    }
}
```

----------------------------------------

TITLE: Adding Multiple Linker Arguments in Rust
DESCRIPTION: Appends multiple extra arguments to the linker invocation. The options should be separated by spaces.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_16



----------------------------------------

TITLE: Single Lifetime Argument Future Compatibility Warnings
DESCRIPTION: Shows cases where specifying a single lifetime argument results in future compatibility warnings rather than errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
Foo.trait_method::<'static>(&(), &());
Foo::trait_method::<'static>(Foo, &(), &());
Foo::trait_function::<'static>(&(), &());
Foo.inherent_method::<'static>(&(), &());
Foo::inherent_function::<'static>(&(), &());
free_function::<'static>(&(), &());
```

----------------------------------------

TITLE: Enabling Code Coverage in Rust
DESCRIPTION: Enables instrumentation-based code coverage support. Note that the profile data format may change and might not work with coverage tools other than those built and shipped with the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_14



----------------------------------------

TITLE: Box Error Implementation Overlap Example
DESCRIPTION: Illustrates implementation overlap with Box<dyn Error> and different trait bounds
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/coherence.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
impl From<MyLocalType> for Box<dyn Error> {}  // in your own crate
impl<E> From<E> for Box<dyn Error> where E: Error {} // in std
```

----------------------------------------

TITLE: Testing WebAssembly Target Build Locally
DESCRIPTION: Runs a subset of tests locally for the wasm32-wasip1 target. This shell command utilizes Rust's build system to execute UI tests, libcore tests, and more to ensure compatibility and functionality before deploying the code. It's particularly useful for verifying changes in development environments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wasip1.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
./x.py test --target wasm32-wasip1 tests/ui
```

----------------------------------------

TITLE: Demonstrating Unsupported Async Functions in Traits (Rust)
DESCRIPTION: This code snippet shows examples of async functions in traits, which are currently not supported in Rust. It illustrates both static and instance methods.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0706.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait T {
    // Neither case is currently supported.
    async fn foo() {}
    async fn bar(&self) {}
}
```

----------------------------------------

TITLE: Installing Cross-Compile Toolchain - Shell
DESCRIPTION: This shell command installs the cross-compile toolchain for the x86_64-unknown-uefi target using rustup, allowing for the compilation of Rust code for UEFI environments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/unknown-uefi.md#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
# install cross-compile toolchain
rustup target add x86_64-unknown-uefi
# target flag may be used with any cargo or rustc command
cargo build --target x86_64-unknown-uefi
```

----------------------------------------

TITLE: Small Pattern Clauses - Rust
DESCRIPTION: Demonstrates formatting for multiple small pattern clauses that don't fit on a single line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_25

LANGUAGE: rust
CODE:
```
    foo | bar | baz
    | qux => {
        ...
    }
```

----------------------------------------

TITLE: Trait Implementation with Track Caller in Rust
DESCRIPTION: Comprehensive example showing various ways to use #[track_caller] with traits, including blanket implementations and overrides.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/implicit-caller-location.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#![feature(track_caller)]

macro_rules! assert_tracked {
    () => {{
        let location = std::panic::Location::caller();
        assert_eq!(location.file(), file!());
        assert_ne!(location.line(), line!(), "line should be outside this fn");
        println!("called at {}", location);
    }};
}

trait TrackedFourWays {
    /// All implementations inherit `#[track_caller]`.
    #[track_caller]
    fn blanket_tracked();

    /// Implementors can annotate themselves.
    fn local_tracked();

    /// This implementation is tracked (overrides are too).
    #[track_caller]
    fn default_tracked() {
        assert_tracked!();
    }

    /// Overrides of this implementation are tracked (it is too).
    #[track_caller]
    fn default_tracked_to_override() {
        assert_tracked!();
    }
}

/// This impl uses the default impl for `default_tracked` and provides its own for
/// `default_tracked_to_override`.
impl TrackedFourWays for () {
    fn blanket_tracked() {
        assert_tracked!();
    }

    #[track_caller]
    fn local_tracked() {
        assert_tracked!();
    }

    fn default_tracked_to_override() {
        assert_tracked!();
    }
}

fn main() {
    <() as TrackedFourWays>::blanket_tracked();
    <() as TrackedFourWays>::default_tracked();
    <() as TrackedFourWays>::default_tracked_to_override();
    <() as TrackedFourWays>::local_tracked();
}
```

----------------------------------------

TITLE: Erroneous Enum with Discriminants in Rust
DESCRIPTION: This code snippet demonstrates an incorrect implementation of an enum with discriminants. It fails to compile because it lacks the required #[repr(inttype)] attribute for enums with non-unit variants or mixed unit and non-unit variants with discriminants.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0732.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum Enum { // error!
    Unit = 1,
    Tuple() = 2,
    Struct{} = 3,
}
# fn main() {}
```

----------------------------------------

TITLE: Emitting Artifact Notifications in JavaScript
DESCRIPTION: This snippet defines the JSON structure emitted when the `--json=artifacts` flag is used, indicating that a file artifact has been generated during the Rust compilation process. The structure includes the type of message, the generated filename, and the kind of artifact produced. Dependencies include the Rust build tools that emit this JSON information.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/json.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
{
    /* Type of this message */
    "$message_type": "artifact",
    /* The filename that was generated. */
    "artifact": "libfoo.rlib",
    /* The kind of artifact that was generated. Possible values:
       - "link": The generated crate as specified by the crate-type.
       - "dep-info": The `.d` file with dependency information in a Makefile-like syntax.
       - "metadata": The Rust `.rmeta` file containing metadata about the crate.
       - "asm": The `.s` file with generated assembly
       - "llvm-ir": The `.ll` file with generated textual LLVM IR
       - "llvm-bc": The `.bc` file with generated LLVM bitcode
       - "mir": The `.mir` file with rustc's mid-level intermediate representation.
       - "obj": The `.o` file with generated native object code
    */
    "emit": "link"
}
```

----------------------------------------

TITLE: Printing Host Triple in Rust
DESCRIPTION: Shows how to print the target-tuple string of the host compiler using rustc's --print flag, with examples for both default and specific targets.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments/print-options.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
$ rustc --print host-tuple a.rs
x86_64-unknown-linux-gnu

$ rustc --print host-tuple --target "armv7-unknown-linux-gnueabihf" a.rs
x86_64-unknown-linux-gnu
```

----------------------------------------

TITLE: Running a Subset of Tests
DESCRIPTION: You can run a specific test suite or a subset of tests suitable for your changes, such as the ui test suite or a specific debuginfo test suite.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
./x test tests/ui
```

LANGUAGE: text
CODE:
```
./x test tests/debuginfo
```

LANGUAGE: text
CODE:
```
./x test tests/ui/const-generics
```

LANGUAGE: text
CODE:
```
./x test tests/ui/const-generics/const-test.rs
```

LANGUAGE: text
CODE:
```
./x test src/tools/miri --test-args tests/fail/uninit/padding-enum.rs
```

----------------------------------------

TITLE: Type Ascription over Turbofish in Rust
DESCRIPTION: Demonstrates the preference for using type ascription over the turbofish syntax in Rust, avoiding the use of '_' in type ascriptions for better readability.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_29

LANGUAGE: rust
CODE:
```
// GOOD
let mutable: Vec<T> = old.into_iter().map(|it| builder.make_mut(it)).collect();

// BAD
let mutable: Vec<_> = old.into_iter().map(|it| builder.make_mut(it)).collect();

// BAD
let mutable = old.into_iter().map(|it| builder.make_mut(it)).collect::<Vec<_>>();
```

----------------------------------------

TITLE: Correct FFI Const Usage in External Function Declaration
DESCRIPTION: Example showing correct usage of the ffi_const attribute on a foreign function declaration (strlen) in an extern block.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0756.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(ffi_const)]

extern "C" {
    #[unsafe(ffi_const)] // ok!
    pub fn strlen(s: *const i8) -> i32;
}
# fn main() {}
```

----------------------------------------

TITLE: Demonstrating SIGPIPE error handling in Rust
DESCRIPTION: Example program showing how -Zon-broken-pipe=error affects program behavior when writing to a closed pipe. The program will receive an ErrorKind::BrokenPipe error instead of being terminated.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/on-broken-pipe.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    loop {
        println!("hello world");
    }
}
```

LANGUAGE: console
CODE:
```
$ rustc -Zon-broken-pipe=error main.rs
$ ./main | head -n1
hello world
thread 'main' panicked at library/std/src/io/stdio.rs:1118:9:
failed printing to stdout: Broken pipe (os error 32)
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
```

----------------------------------------

TITLE: Incorrect Array Pattern Matching in Rust
DESCRIPTION: Example showing erroneous pattern matching on an array without a fixed length, which triggers compiler error E0730.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0730.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn is_123<const N: usize>(x: [u32; N]) -> bool {
    match x {
        [1, 2, ..] => true, // error: cannot pattern-match on an
                            //        array without a fixed length
        _ => false
    }
}
```

----------------------------------------

TITLE: Invalid Non-exhaustive Attribute Usage on Trait in Rust
DESCRIPTION: Example showing incorrect placement of #[non_exhaustive] attribute on a trait declaration, which results in compilation error E0701. The #[non_exhaustive] attribute can only be used with structs and enums.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0701.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[non_exhaustive]
trait Foo { }
```

----------------------------------------

TITLE: Installing Miri for Cargo
DESCRIPTION: This command installs Miri in a way that makes it accessible as part of the cargo toolchain, facilitating testing when a crate is involved.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_8

LANGUAGE: Shell
CODE:
```
./miri install
```

----------------------------------------

TITLE: Fixed Trait Return Types with Static Lifetime
DESCRIPTION: Corrected implementations using 'static lifetime bounds for trait object and impl Trait return types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0759.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# use std::fmt::Debug;
fn foo(x: &'static i32) -> impl Debug + 'static { // ok!
    x
}

fn bar(x: &'static i32) -> Box<dyn Debug + 'static> { // ok!
    Box::new(x)
}
```

----------------------------------------

TITLE: Defining a Const Function with Trait Bounds in Rust
DESCRIPTION: Here, the function 'foo' is defined as a const function in Rust with a trait bound using the 'maybe' const qualifier. The snippet illustrates how const conditions are checked in conjunction with traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/effects.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
const fn foo<T>() where T: ~const Default {}
```

----------------------------------------

TITLE: Manual Transmutation Using Pointers in Rust
DESCRIPTION: An alternative approach to transmutation using raw pointers with `ptr::read`. This method allows transmutation without moving the original value, but may require additional memory management like calling `mem::forget()` to prevent destructors from running.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0139.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
# use std::ptr;
# let v = Some("value");
# type SomeType = &'static [u8];
unsafe {
    ptr::read(&v as *const _ as *const SomeType) // `v` transmuted to `SomeType`
}
# ;
```

----------------------------------------

TITLE: Correct Generic Type Alias Impl Trait in Rust
DESCRIPTION: Proper implementation of type_alias_impl_trait using a generic function. This ensures the hidden type (u32) is consistently used regardless of the generic parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0792.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(type_alias_impl_trait)]

type Foo<T> = impl std::fmt::Debug;

#[define_opaque(Foo)]
fn foo<U>() -> Foo<U> {
    5u32
}

fn main() {}
```

----------------------------------------

TITLE: Declaring External Variables in Rust
DESCRIPTION: This snippet declares external variables with specified values, which can be referenced from other parts of the program or from FFI (Foreign Function Interface) calls. Required dependencies are the Rust standard library and a suitable environment for executing Rust code.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-import-name-type/output.txt#2025-04-21_snippet_4

LANGUAGE: Rust
CODE:
```
extern_variable_undecorated value: 42
extern_variable_noprefix value: 43
extern_variable_decorated value: 44
```

----------------------------------------

TITLE: Incorrect Usage of Undeclared Lifetimes in Rust
DESCRIPTION: Example showing incorrect code that fails to declare lifetime parameters in both a function and struct definition. This code will fail to compile with error E0261.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0261.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// error, use of undeclared lifetime name `'a`
fn foo(x: &'a str) { }

struct Foo {
    // error, use of undeclared lifetime name `'a`
    x: &'a str,
}
```

----------------------------------------

TITLE: Converting an Into Method Call to a From Call in Rust
DESCRIPTION: Shows how to transform a method-style .into() call into a fully qualified From::from() call. This preserves the same type conversion behavior while changing the calling style.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_73

LANGUAGE: rust
CODE:
```
//- minicore: from
struct B;
impl From<i32> for B {
    fn from(a: i32) -> Self {
       B
    }
}

fn main() -> () {
    let a = 3;
    let b: B = a.in┃to();
}
```

LANGUAGE: rust
CODE:
```
struct B;
impl From<i32> for B {
    fn from(a: i32) -> Self {
       B
    }
}

fn main() -> () {
    let a = 3;
    let b: B = B::from(a);
}
```

----------------------------------------

TITLE: Configuring Rust for ESP-IDF Project
DESCRIPTION: This TOML configuration file sets up a Rust project targeting the ESP-IDF framework. It specifies the target architecture using a variable `$ARCH` and employs `ldproxy` as the linker. The configuration leverages the `build-std` feature to build the Rust standard library and handles panic behavior using `panic_abort`. Dependencies include having `ldproxy` installed from crates.io and utilizing the `esp-idf-sys` crate for compiling ESP-IDF and managing toolchains. It supports cross-compilation and propagates necessary build outputs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/esp-idf.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["$ARCH-esp-espidf"]

[target.$ARCH-esp-espidf]
linker = "ldproxy"

[unstable]
build-std = ["std", "panic_abort"]
```

----------------------------------------

TITLE: Failed Generic Parameter Inheritance in Type Definition
DESCRIPTION: Example showing incorrect attempt to use outer function's generic parameter in inner type definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0401.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<T>(x: T) {
    type MaybeT = Option<T>;
    // ...
}
```

----------------------------------------

TITLE: Solution 2: Making the Type Public
DESCRIPTION: Demonstrates fixing the privacy error by making the private type public, allowing it to be used in the public trait implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0446.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
pub struct Bar; // we set the Bar trait public

pub trait PubTr {
    type Alias;
}

impl PubTr for u8 {
    type Alias = Bar;
}

fn main() {}
```

----------------------------------------

TITLE: Solution 1: Restricting Trait Visibility
DESCRIPTION: Shows how to fix the privacy error by limiting the trait's visibility to the crate level, where the private type is accessible.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0446.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Bar;

pub(crate) trait PubTr { // only public to crate root
    type Alias;
}

impl PubTr for u8 {
    type Alias = Bar;
}

fn main() {}
```

----------------------------------------

TITLE: Configuring Max Struct Bool Fields in Rust
DESCRIPTION: This option configures the maximum number of boolean fields a struct can have before the `struct_excessive_bools` lint is triggered.  The default is `3`. This controls how many boolean fields are allowed before triggering the lint.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_28



----------------------------------------

TITLE: Breaking Boxed Types with `+` Operator in Rust
DESCRIPTION: This snippet demonstrates breaking types that are boxed (`Box<...>`) and use the `+` operator (e.g., trait bounds). It advises breaking before each `+` and block-indenting the subsequent lines.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/types.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
"Box<
    Clone
    + Copy
    + Debug
>"
```

----------------------------------------

TITLE: Incorrect `#[inline]` Attribute Placement in Rust
DESCRIPTION: This code snippet demonstrates the incorrect usage of the `#[inline]` attribute on a struct and an impl block in Rust. The `#[inline]` attribute can only be applied to functions or methods, not to structs or entire impl blocks. Applying it to these elements results in a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0518.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0518
#[inline(always)]
struct Foo;

#[inline(never)]
impl Foo {
    // ...
}
```
```

----------------------------------------

TITLE: Multiple Argument Function with Closure - Rust
DESCRIPTION: Demonstrates formatting for functions with multiple arguments where the last argument is a multi-line closure.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_28

LANGUAGE: rust
CODE:
```
foo(first_arg, x, |param| {
    action();
    foo(param)
})
```

----------------------------------------

TITLE: Installing and Using LoongArch64 Target with Rustup
DESCRIPTION: This shell command installs the cross-compilation toolchain for LoongArch64 using `rustup` and demonstrates building Rust programs with the specified target. It requires Rust 1.74 or later and the presence of `cargo`, `rustc`, and `rustup` on the system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/loongarch-none.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
# install cross-compile toolchain
rustup target add loongarch64-unknown-none
# target flag may be used with any cargo or rustc command
cargo build --target loongarch64-unknown-none
```

----------------------------------------

TITLE: Configuring Inlay Hint Appearance in VS Code (JSON)
DESCRIPTION: This snippet configures the appearance of inlay hints within the VS Code editor. It allows customization of the font family, font size, foreground color, and background color.  Dependencies include VS Code and the Rust extension for VS Code. The output modifies the editor's display, showing hints with the specified styling.  This configuration is applied via settings.json.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/editor_features.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "editor.inlayHints.fontFamily": "Courier New",
  "editor.inlayHints.fontSize": 11,

  "workbench.colorCustomizations": {
    // Name of the theme you are currently using
    "[Default Dark+]": {
      "editorInlayHint.foreground": "#868686f0",
      "editorInlayHint.background": "#3d3d3d48",

      // Overrides for specific kinds of inlay hints
      "editorInlayHint.typeForeground": "#fdb6fdf0",
      "editorInlayHint.parameterForeground": "#fdb6fdf0"
    }
  }
}
```

----------------------------------------

TITLE: Correct Implementation with Associated Type in Rust
DESCRIPTION: This example shows the correct way to implement a trait that requires an associated type. The implementation properly defines 'type N = u32' to match the trait's definition of 'type N'.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0323.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Bar;

trait Foo {
    type N;
}

impl Foo for Bar {
    type N = u32; // ok!
}
```

----------------------------------------

TITLE: Merging Import Statements in Rust
DESCRIPTION: Demonstrates combining multiple import statements that share a common prefix into a single nested import. This reduces code duplication and makes imports more concise.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_80

LANGUAGE: rust
CODE:
```
use std::┃fmt::Formatter;
use std::io;
```

LANGUAGE: rust
CODE:
```
use std::{fmt::Formatter, io};
```

----------------------------------------

TITLE: Configuring rust-analyzer Procedural Macro Expansion in JSON
DESCRIPTION: Controls the procedural macro system integration of rust-analyzer, including enabling macro support, attribute macro expansion, ignoring specific macros, and specifying an internal proc-macro server path. These options affect how macros are resolved and expanded in the Rust language server, influencing IDE features like syntax highlighting, code navigation, and code completion. Required prerequisites include a compatible rust-analyzer and Rust project with proc macro dependencies.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  "rust-analyzer.procMacro.enable": true,
  "rust-analyzer.procMacro.attributes.enable": true,
  "rust-analyzer.procMacro.ignored": {},
  "rust-analyzer.procMacro.server": null
}
```

----------------------------------------

TITLE: Expanding Glob Re-exports in Rust
DESCRIPTION: Expands non-private glob re-exports (pub use foo::*) into explicit item re-exports. Makes the public API more explicit.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_41

LANGUAGE: rust
CODE:
```
mod foo {
    pub struct Bar;
    pub struct Baz;
}

pub use foo::*;
```

----------------------------------------

TITLE: Casting Between Integers and Pointers in Rust
DESCRIPTION: This code shows how to cast between integers and pointers in Rust. It demonstrates creating a raw pointer from an integer address and casting a pointer back to an integer.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let address = 0x012345usize;
let r = address as *const i32;

unsafe {
    println!("{:?}", r);
}

let address = r as usize;
println!("{:?}", address);
```

----------------------------------------

TITLE: Fixed Trait Object Implementation with Explicit Type Parameter in Rust
DESCRIPTION: Corrected example showing proper usage of trait objects by explicitly specifying the type parameter instead of relying on Self default. This resolves the E0393 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0393.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait A<T = Self> {}

fn together_we_will_rule_the_galaxy(son: &dyn A<i32>) {} // Ok!
```

----------------------------------------

TITLE: Using Half-Open Range Patterns in Rust Slices
DESCRIPTION: Demonstrates the usage of half-open range patterns directly in slice patterns with the half_open_range_patterns_in_slices feature flag. Shows multiple range pattern types including inclusive ranges, exclusive ranges, and binding to variables.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/half-open-range-patterns-in-slices.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(half_open_range_patterns_in_slices)]

fn main() {
    let xs = [13, 1, 5, 2, 3, 1, 21, 8];
    let [a @ 3.., b @ ..3, c @ 4..6, ..] = xs else { return; };
}
```

----------------------------------------

TITLE: Demonstrating Module Name Ambiguity Error in Rust
DESCRIPTION: Shows an example of a module naming conflict where both ambiguous_module.rs and ambiguous_module/mod.rs exist in the same project. This causes a compilation error as Rust cannot determine which file to use for the module definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0761.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// file: ambiguous_module/mod.rs

fn foo() {}

// file: ambiguous_module.rs

fn foo() {}

// file: lib.rs

mod ambiguous_module; // error: file for module `ambiguous_module`
                      // found at both ambiguous_module.rs and
                      // ambiguous_module/mod.rs
```

----------------------------------------

TITLE: Running Clippy on Package Without Dependencies
DESCRIPTION: Command to run Clippy on a specific package without checking its dependencies.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/usage.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
cargo clippy -p example -- --no-deps
```

----------------------------------------

TITLE: Automating Coverage Generation for Rust Tests with Bash
DESCRIPTION: This bash script snippet automates generating the `llvm-cov` report command by listing test binaries using `cargo test` and `jq`. The script constructs the necessary command to analyze all compiled test binaries using their coverage data.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_13

LANGUAGE: bash
CODE:
```
$ llvm-cov report \
    $( \
      for file in \
        $( \
          RUSTFLAGS="-C instrument-coverage" \
            cargo test --tests --no-run --message-format=json \
              | jq -r "select(.profile.test == true) | .filenames[]" \
              | grep -v dSYM - \
        ); \
      do \
        printf "%s %s " -object $file; \
      done \
    ) \
  --instr-profile=json5format.profdata --summary-only # and/or other options
```

----------------------------------------

TITLE: Compiling Rust Programs for Emscripten Target
DESCRIPTION: This shell example shows how to compile a Rust program using the 'rustc' compiler specifically for the 'wasm32-unknown-emscripten' target. Dependencies include rustc and the target previously added via rustup. It outputs a WebAssembly binary file, which can be checked using a 'file' command.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-emscripten.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
rustc foo.rs --target wasm32-unknown-emscripten
file foo.wasm
```

----------------------------------------

TITLE: Demonstrating Heap Corruption in Rust
DESCRIPTION: This Rust code example demonstrates a potential heap corruption scenario by writing beyond the bounds of an allocated array using unsafe code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
fn main() {
    let mut x = Box::new([0; 1024]);

    for i in 0..1026 {
        unsafe {
            let elem = x.get_unchecked_mut(i);
            *elem = 0x4141414141414141u64;
        }
    }
}
```

----------------------------------------

TITLE: Recursive Drop-Check Rules Example in Rust
DESCRIPTION: Demonstrates an invalid recursive enum definition that causes the E0320 compiler error. The example shows how recursive type definitions can create impossible drop-check scenarios where dropping a value would lead to infinite recursion.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0320.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum A<T> {
    B,
    C(T, Box<A<(T, T)>>)
}

fn foo<T>() {
    A::<T>::B; // error: overflow while adding drop-check rules for A<T>
}
```

----------------------------------------

TITLE: Incorrect Label Usage in Rust Closure
DESCRIPTION: Example showing invalid usage of a label break within a closure, resulting in E0767 error. The label 'a is not accessible from within the closure scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0767.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
'a: loop {
    || {
        loop { break 'a } // error: use of unreachable label `'a`
    };
}
```

----------------------------------------

TITLE: Enabling missing_doc_code_examples Lint in Rustdoc
DESCRIPTION: Describes how to enable the `missing_doc_code_examples` lint using a crate attribute (`#![deny(...)]`) on a nightly build. This lint warns if an item's documentation lacks a code example, excluding certain item types like fields, variants, modules, and associated items.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_1

LANGUAGE: Rust
CODE:
```
#![deny(rustdoc::missing_doc_code_examples)]
```

----------------------------------------

TITLE: Rust example for dataflow analysis
DESCRIPTION: Presents a Rust function `foo` with an uninitialized variable `x` that might lead to a compilation error. The example is used to illustrate how dataflow analysis can be used to determine if `x` is initialized before being used.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/appendix/background.md#2025-04-21_snippet_3

LANGUAGE: rust,ignore
CODE:
```
fn foo() {
    let mut x;

    if some_cond {
        x = 1;
    }

    dbg!(x);
}
```

----------------------------------------

TITLE: Opaque Types and Variances
DESCRIPTION: This Rust code showcases how regular opaque types handle variances. Even though the lifetimes are unrelated, the opaque type bivariance allow the comparison without errors
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/return-position-impl-trait-in-trait.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
```rust
#![feature(return_position_impl_trait_in_trait)]

fn bar<'lt: 'lt>() -> impl Eq {
    ()
}

fn test<'a, 'b>() -> bool {
    bar::<'a>() == bar::<'b>()
}
```
```

----------------------------------------

TITLE: Correcting Invalid Attributes in Rust Code
DESCRIPTION: These code snippets show erroneous and corrected examples of using meta-items in Rust attributes. The purpose is to highlight correct key-value syntax in attributes like "deprecated", "unstable", and "stable". Dependencies include enabling features using #![feature(...)] and respecting Rust attribute requirements. Common attributes include "stable", "unstable", and "deprecated" with mandated key-value pairs for functioning properly. Corrected code adheres to attribute syntax such as providing values for keys like "issue" and "since".
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0539.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#![feature(staged_api)]
#![allow(internal_features)]
#![stable(since = "1.0.0", feature = "test")]

#[deprecated(note)] // error!
#[unstable(feature = "deprecated_fn", issue = "123")]
fn deprecated() {}

#[unstable(feature = "unstable_struct", issue)] // error!
struct Unstable;

#[rustc_const_unstable(feature)] // error!
const fn unstable_fn() {}

#[stable(feature = "stable_struct", since)] // error!
struct Stable;

#[rustc_const_stable(feature)] // error!
const fn stable_fn() {}
```

LANGUAGE: Rust
CODE:
```
#![feature(staged_api)]
#![allow(internal_features)]
#![stable(since = "1.0.0", feature = "test")]

#[deprecated(since = "1.39.0", note = "reason")] // ok!
#[unstable(feature = "deprecated_fn", issue = "123")]
fn deprecated() {}

#[unstable(feature = "unstable_struct", issue = "123")] // ok!
struct Unstable;

#[rustc_const_unstable(feature = "unstable_fn", issue = "124")] // ok!
const fn unstable_fn() {}

#[stable(feature = "stable_struct", since = "1.39.0")] // ok!
struct Stable;

#[stable(feature = "stable_fn", since = "1.39.0")]
#[rustc_const_stable(feature = "stable_fn", since = "1.39.0")] // ok!
const fn stable_fn() {}
```

----------------------------------------

TITLE: Using cargo::rustc-check-cfg in Rust Build Scripts
DESCRIPTION: Example of using the cargo::rustc-check-cfg instruction in a build.rs file to declare expected custom configurations. This works alongside cargo::rustc-cfg for dynamically setting configuration flags.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/check-cfg/cargo-specifics.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn main() {
    println!("cargo::rustc-check-cfg=cfg(has_foo)");
    //        ^^^^^^^^^^^^^^^^^^^^^^ new with Cargo 1.80
    if has_foo() {
        println!("cargo::rustc-cfg=has_foo");
    }
}
```

----------------------------------------

TITLE: Generating IndexMut Implementation from Index in Rust
DESCRIPTION: This snippet demonstrates how to generate an IndexMut implementation based on an existing Index trait implementation. It creates a new impl block with the index_mut method.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_60

LANGUAGE: rust
CODE:
```
pub enum Axis { X = 0, Y = 1, Z = 2 }

impl<T> core::ops::Index<Axis> for [T; 3] {
    type Output = T;

    fn index(&self, index: Axis) -> &Self::Output {
        &self[index as usize]
    }
}
```

LANGUAGE: rust
CODE:
```
pub enum Axis { X = 0, Y = 1, Z = 2 }

impl<T> core::ops::IndexMut<Axis> for [T; 3] {
    fn index_mut(&mut self, index: Axis) -> &mut Self::Output {
        &self[index as usize]
    }
}

impl<T> core::ops::Index<Axis> for [T; 3] {
    type Output = T;

    fn index(&self, index: Axis) -> &Self::Output {
        &self[index as usize]
    }
}
```

----------------------------------------

TITLE: Crate-Level Import Granularity in Rust
DESCRIPTION: Demonstrates the imports_granularity setting set to Crate, which merges imports from the same crate while keeping imports from different crates separate.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_51

LANGUAGE: rust
CODE:
```
use foo::{
    a, b,
    b::{f, g},
    c,
    d::e,
};
use qux::{h, i};
```

----------------------------------------

TITLE: Where Clause Single Line Example in Rust
DESCRIPTION: Shows where clause formatting when where_single_line is set to true.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_82

LANGUAGE: rust
CODE:
```
impl<T> Lorem for T
where Option<T>: Ipsum
{
    // body
}
```

----------------------------------------

TITLE: Moving a Condition from a Match Arm Body to a Guard in Rust
DESCRIPTION: Demonstrates refactoring a match arm by moving an if condition from the arm body into a match guard. This creates more concise and idiomatic match expressions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_83



----------------------------------------

TITLE: Partial Drop Example with PrintOnDrop
DESCRIPTION: Demonstrates how types without explicit Drop implementations can be partially moved before dropping the remaining parts.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/drop_check.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn main() {
    let mut x = (PrintOnDrop("third"), PrintOnDrop("first"));
    drop(x.1);
    println!("second")
}
```

----------------------------------------

TITLE: Interactive Git Rebase on Last N Commits (Console)
DESCRIPTION: Starts an interactive rebase session targeting the last 2 commits (`HEAD~2`) on the current branch. Useful for fixing up recent commits, rewording messages, or squashing a few commits together.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_17

LANGUAGE: console
CODE:
```
git rebase --interactive HEAD~2
```

----------------------------------------

TITLE: Comparing Closure and Async Block Behavior with Opaque Types
DESCRIPTION: These examples highlight the difference in behavior between closures and async blocks when dealing with opaque types and lifetimes. The closure case is rejected due to the hidden type definition occurring inside the closure, while the async block case is accepted as the definition happens in the parent function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/opaque-types-region-inference-restrictions.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
type Opaque<'x> = impl Sized + 'x;
fn test<'a>() -> impl FnOnce() -> Opaque<'a> {
    // Output type of the closure is Opaque<'a>
    // -> hidden type definition happens *inside* the closure
    // -> rejected.
    move || {}
    //~^ ERROR expected generic lifetime parameter, found `'_`
}
```

LANGUAGE: rust
CODE:
```
use std::future::Future;
type Opaque<'x> = impl Sized + 'x;
fn test<'a>() -> impl Future<Output = Opaque<'a>> {
    // Output type of the async block is unit `()`
    // -> hidden type definition happens in the parent fn
    // -> accepted.
    async move {}
}
```

----------------------------------------

TITLE: Correct Usage of ffi_const Attribute in Rust
DESCRIPTION: This code snippet shows the correct usage of the ffi_const attribute for a foreign function declaration. The ffi_pure attribute is removed as ffi_const provides stronger guarantees.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0757.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(ffi_const)]

extern "C" {
    #[unsafe(ffi_const)]
    pub fn square(num: i32) -> i32;
}
```

----------------------------------------

TITLE: Cross-Interpret Binary for Linux x86_64 (Shell)
DESCRIPTION: Runs the project's binary using the Miri interpreter while emulating the execution environment of an `x86_64-unknown-linux-gnu` target. This is helpful for testing cross-platform compatibility or benefiting from better Linux target support on non-Linux hosts.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_8

LANGUAGE: Shell
CODE:
```
cargo miri run --target x86_64-unknown-linux-gnu
```

----------------------------------------

TITLE: Handling Move Errors with Drop Trait in Rust
DESCRIPTION: This snippet illustrates an error that occurs when trying to move a field out of a struct that implements the Drop trait. It shows that the struct cannot be dropped if fields are moved out, leading to an error. The solution involves using references instead of moving the field directly.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0509.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
```compile_fail,E0509
struct FancyNum {
    num: usize
}

struct DropStruct {
    fancy: FancyNum
}

impl Drop for DropStruct {
    fn drop(&mut self) {
        // Destruct DropStruct, possibly using FancyNum
    }
}

fn main() {
    let drop_struct = DropStruct{fancy: FancyNum{num: 5}};
    let fancy_field = drop_struct.fancy; // Error E0509
    println!("Fancy: {}", fancy_field.num);
    // implicit call to `drop_struct.drop()` as drop_struct goes out of scope
}
```
```

----------------------------------------

TITLE: Building the Rust Standard Library
DESCRIPTION: This command builds the Rust standard library along with the Rust compiler, utilizing the initial stage compiler created during the process. It is essential for setting up a working environment for compiling other Rust programs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
./x build library
```

----------------------------------------

TITLE: Checking Unsafe Operations in Rust
DESCRIPTION: This code snippet demonstrates the detection of unsafe operations in Rust. It utilizes an unsafe block and checks for unused unsafe blocks through the lint mechanism. If an unsafe block contains no unsafe operations, it is reported by the lint.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/unsafety-checking.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"#![deny(unused_unsafe)]\nlet y = 0;\nlet x: *const u8 = core::ptr::addr_of!(y);\nsafe { // lint reported for this block\n    unsafe {\n        let z = *x;\n    }\n    let safe_expr = 123;\n}\nsafe {\n    unsafe { // lint reported for this block\n        let z = *x;\n    }\n    let unsafe_expr = *x;\n}"
```

----------------------------------------

TITLE: Defining Custom Snippets in VS Code for Rust
DESCRIPTION: JSON configuration example for defining a custom snippet in rust-analyzer. This example creates a 'thread spawn' snippet that can be triggered with 'spawn' or 'tspawn' and requires the std::thread module to be in scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/features_generated.md#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
{
  "rust-analyzer.completion.snippets.custom": {
    "thread spawn": {
      "prefix": ["spawn", "tspawn"],
      "body": [
        "thread::spawn(move || {",
        "\t$0",
        "});",
      ],
      "description": "Insert a thread::spawn call",
      "requires": "std::thread",
      "scope": "expr",
    }
  }
}
```

----------------------------------------

TITLE: Using type_alias_impl_trait with #[define_opaque]
DESCRIPTION: This example demonstrates how to use `type_alias_impl_trait` with the `#[define_opaque]` attribute to create a type alias for an `impl Trait` type. It shows how the same concrete type is used across multiple functions while keeping it hidden.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/type-alias-impl-trait.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(type_alias_impl_trait)]
# #![allow(unused_variables, dead_code)]
trait Trait {}

struct MyType;

impl Trait for MyType {}

type Alias = impl Trait;

#[define_opaque(Alias)] // To constrain the type alias to `MyType`
fn new() -> Alias {
    MyType
}

#[define_opaque(Alias)] // So we can name the concrete type inside this item
fn main() {
    let thing: MyType = new();
}

// It can be a part of a struct too
struct HaveAlias {
    stuff: String,
    thing: Alias,
}
```

----------------------------------------

TITLE: Error Example: Undefined Associated Types in Rust Traits
DESCRIPTION: Example showing compilation errors when trying to use undefined associated types in traits. This demonstrates two common mistakes: referencing a non-existent associated type in a type alias and using an undeclared associated type in a trait method.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0220.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait T1 {
    type Bar;
}

type Foo = T1<F=i32>; // error: associated type `F` not found for `T1`

// or:

trait T2 {
    type Bar;

    // error: Baz is used but not declared
    fn return_bool(&self, _: &Self::Bar, _: &Self::Baz) -> bool;
}
```

----------------------------------------

TITLE: Demonstrating Invalid Const Parameter Dependency on Type Parameter in Rust
DESCRIPTION: This code snippet shows an example of invalid Rust code where a const parameter 'N' depends on a type parameter 'T'. This would have previously resulted in compiler error E0770, but this error is no longer emitted by the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0671.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn const_id<T, const N: T>() -> T { // error
    N
}
```

----------------------------------------

TITLE: Creating Coverage Reports for Test Binaries Using llvm-cov
DESCRIPTION: This shell script block runs `llvm-cov report` and `llvm-cov show` to generate coverage reports for test binaries, using the previously merged `.profdata` file. It highlights the use of filters and options for color display and specific directory exclusion.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_12

LANGUAGE: shell
CODE:
```
$ llvm-cov report \
    --use-color --ignore-filename-regex='/.cargo/registry' \
    --instr-profile=json5format.profdata \
    --object target/debug/deps/lib-30768f9c53506dc5 \
    --object target/debug/deps/json5format-fececd4653271682
$ llvm-cov show \
    --use-color --ignore-filename-regex='/.cargo/registry' \
    --instr-profile=json5format.profdata \
    --object target/debug/deps/lib-30768f9c53506dc5 \
    --object target/debug/deps/json5format-fececd4653271682 \
    --show-instantiations --show-line-counts-or-regions \
    --Xdemangler=rustfilt | less -R
```

----------------------------------------

TITLE: Adding Return Type to Function or Closure in Rust
DESCRIPTION: This assist adds the return type to a function or closure inferred from its tail expression. It works on functions or closures without an explicit return type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
fn foo() { 42i32 }
```

LANGUAGE: rust
CODE:
```
fn foo() -> i32 { 42i32 }
```

----------------------------------------

TITLE: Using rustc to disable individual lints
DESCRIPTION: This command shows how to disable individual lints separately, achieving the same effect as disabling the `nonstandard-style` lint group. It disables `non-camel-case-types`, `non-snake-case`, and `non-upper-case-globals`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/lints/groups.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
"$ rustc -D non-camel-case-types -D non-snake-case -D non-upper-case-globals"
```

----------------------------------------

TITLE: Complex Escaped String Literal in Rust
DESCRIPTION: A string literal with multiple escape sequences including newline, quote, and backslash characters
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/strings.txt#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
"\n\"\\no escape"
```

----------------------------------------

TITLE: Setting QEMU as Runner for s390x in Cargo
DESCRIPTION: This snippet shows how to configure Cargo to use QEMU as the runner for executing cross-compiled s390x binaries. By setting the `runner` option in `.cargo/config.toml`, Cargo will automatically execute the compiled binary using QEMU, with the specified root filesystem. This setup is useful for testing cross-compiled binaries on a development machine.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/s390x-unknown-linux-gnu.md#2025-04-21_snippet_7

LANGUAGE: TOML
CODE:
```

```toml
[target.s390x-unknown-linux-gnu]
runner = "qemu-s390x-static -L /usr/s390x-linux-gnu"
```

```

----------------------------------------

TITLE: Demonstrating External Crate Name Conflict Error in Rust
DESCRIPTION: Shows the erroneous case where a struct declaration conflicts with an external crate name, generating error E0260.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0260.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
extern crate core;

struct core;

fn main() {}
```

----------------------------------------

TITLE: Invalid Receiver Type Example in Rust Trait Implementation
DESCRIPTION: This example shows code that fails to compile with error E0307 because it uses an invalid receiver type (&Bar) when implementing a trait for Foo.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0307.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo;
struct Bar;

trait Trait {
    fn foo(&self);
}

impl Trait for Foo {
    fn foo(self: &Bar) {}
}
```

----------------------------------------

TITLE: Failed Generic Parameter Inheritance in Nested Function
DESCRIPTION: Example showing incorrect attempt to use outer function's generic parameter in inner function, which results in compilation error E0401.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0401.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<T>(x: T) {
    fn bar(y: T) { // T is defined in the "outer" function
        // ..
    }
    bar(x);
}
```

----------------------------------------

TITLE: JavaScript Search Test Definition
DESCRIPTION: This JavaScript code defines the `EXPECTED` variable, which specifies the search queries and expected results for the test. The test checks if the `constructor` function can be found with different queries and in different search tabs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustdoc-internals/search.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
// tests/rustdoc-js/constructor_search.js
// exact-check
// Since this test runs against its own crate,
// new items should not appear in the search results.
const EXPECTED = [
  // This first test targets name-based search.
  {
    query: "constructor",
    others: [
      { path: "constructor_search", name: "constructor" },
    ],
    in_args: [],
    returned: [],
  },
  // This test targets the second tab.
  {
    query: "str",
    others: [],
    in_args: [
      { path: "constructor_search", name: "constructor" },
    ],
    returned: [],
  },
  // This test targets the third tab.
  {
    query: "i32",
    others: [],
    in_args: [],
    returned: [
      { path: "constructor_search", name: "constructor" },
    ],
  },
  // This test targets advanced type-driven search.
  {
    query: "str -> i32",
    others: [
      { path: "constructor_search", name: "constructor" },
    ],
    in_args: [],
    returned: [],
  }
]
```

----------------------------------------

TITLE: Inlining a Constant as a Literal in Rust
DESCRIPTION: Shows how a constant string reference can be inlined by replacing the constant identifier with its actual string value. This eliminates the indirection while preserving the original constant definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_67

LANGUAGE: rust
CODE:
```
const STRING: &str = "Hello, World!";

fn something() -> &'static str {
    STRING┃
}
```

LANGUAGE: rust
CODE:
```
const STRING: &str = "Hello, World!";

fn something() -> &'static str {
    "Hello, World!"
}
```

----------------------------------------

TITLE: Inline Always Attribute Usage
DESCRIPTION: Shows the correct way to use the inline attribute with the 'always' parameter, instructing the compiler to inline the function whenever possible
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0534.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[inline(always)]
fn something() {}
```

----------------------------------------

TITLE: Correct Export Name Attribute Usage in Rust
DESCRIPTION: This code snippet shows the correct way to use the `export_name` attribute without null characters, resolving the E0648 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0648.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[export_name="foo"] // ok!
pub fn bar() {}
```

----------------------------------------

TITLE: Merging Raw Profiles with llvm-profdata
DESCRIPTION: This shell command uses `llvm-profdata` to merge raw profile data files with the sparse option. The indexed `.profdata` output is used in conjunction with coverage maps to generate reports. The command requires a valid `.profraw` file as input, and generates a merged `.profdata` file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_8

LANGUAGE: shell
CODE:
```
$ llvm-profdata merge -sparse formatjson5.profraw -o formatjson5.profdata
```

----------------------------------------

TITLE: Debugging Evaluation Errors in Miri
DESCRIPTION: This command provides a backtrace for debugging evaluation errors that occur during the running of Miri.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_6

LANGUAGE: Shell
CODE:
```
MIRI_BACKTRACE=1
```

----------------------------------------

TITLE: Incorrect Unsafe Implementation of Safe Trait in Rust
DESCRIPTION: Shows erroneous code where a safe trait implementation is incorrectly marked as unsafe, resulting in compiler error E0199. This is not allowed in Rust as safe traits should not have unsafe implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0199.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo;

trait Bar { }

unsafe impl Bar for Foo { } // error!
```

----------------------------------------

TITLE: Declaring Static in Rust
DESCRIPTION: This snippet defines a static item named 'STATIC', providing key details about its ID and location. It plays a crucial role in ensuring efficiency and memory management within the Rust program.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_6

LANGUAGE: Rust
CODE:
```
FileSymbol {
    name: "STATIC",
    def: Static(
        Static {
            id: StaticId(
                0,
            ),
        },
    ),
    loc: DeclarationLocation {
        hir_file_id: EditionedFileId(
            FileId(
                0,
            ),
            Edition2021,
        ),
        ptr: SyntaxNodePtr {
            kind: STATIC,
            range: 435..469,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 442..448,
            },
        ),
    },
    container_name: None,
    is_alias: false,
    is_assoc: false,
}
```

----------------------------------------

TITLE: Character Literal Syntax Error in Rust
DESCRIPTION: This error occurs when a character literal is not properly closed with a trailing single quote. In Rust, character literals must be enclosed by single quotes and contain exactly one character.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_char_at_eof.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
CHAR "'"
```

----------------------------------------

TITLE: Correct Raw Pointer Type Specification in Rust
DESCRIPTION: Corrected version of the code that properly specifies the pointer type as *const i32.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0699.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let foo = &1;
let bar = foo as *const i32;
if bar.is_null() {
    // ...
}
```

----------------------------------------

TITLE: Incorrect Duplicate Lifetime Declaration in Rust Function
DESCRIPTION: Example showing incorrect usage where the lifetime parameter 'a' is declared twice in the function signature, which was previously a compiler error E0403.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0263.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str, z: &'a str) { // error!
}
```

----------------------------------------

TITLE: Inlining a Local Variable in Rust
DESCRIPTION: Shows how a local variable can be inlined by replacing references to it with its definition. This example replaces a variable holding a simple expression with the expression itself at its usage site.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_69

LANGUAGE: rust
CODE:
```
fn main() {
    let x┃ = 1 + 2;
    x * 4;
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    (1 + 2) * 4;
}
```

----------------------------------------

TITLE: Elaborating Supertraits in Rust
DESCRIPTION: Demonstrates how to construct a `ParamEnv` in Rust by explicitly adding where clauses for supertraits within a function. This aids in proving trait bounds like `T: Clone` and `T: SuperSuperTrait`. Key dependencies include the `Copy`, `Clone`, and `SuperSuperTrait` traits. Inputs are trait bounds in the function signature; outputs are an enriched parameter environment.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/typing_parameter_envs.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
trait Trait: SuperTrait {}
trait SuperTrait: SuperSuperTrait {}

// `bar`'s unelaborated `ParamEnv` would be:
// `[T: Sized, T: Copy, T: Trait]`
fn bar<T: Copy + Trait>(a: T) {
    requires_impl(a);
}

fn requires_impl<T: Clone + SuperSuperTrait>(a: T) {}
```

----------------------------------------

TITLE: Defining HirFileId Enum for Macro Handling in Rust
DESCRIPTION: This snippet defines the HirFileId enum, which allows for managing file references for both traditional source files and macro-generated files. It uses a combination of FileId and MacroCallId to differentiate between the two types of references. The implementation ensures compact representation using a single u32, with the most significant bit used to determine the type of file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
enum HirFileId {
    FileId(FileId),
    Macro(MacroCallId),
}
```

----------------------------------------

TITLE: Calling vectorcall functions in Rust
DESCRIPTION: This section demonstrates calling various `vectorcall` functions with different argument types, including integers, floats, structs (`S`, `S2`, `S3`) and combinations thereof. The snippet shows how to pass different data structures and primitive types to `vectorcall` functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.msvc.txt#_snippet_1

LANGUAGE: Rust
CODE:
```
vectorcall_fn_1(14)
vectorcall_fn_2(16, 3.5)
vectorcall_fn_3(3.5)
vectorcall_fn_4(1, 2, 3.0)
vectorcall_fn_5(S { x: 1, y: 2 }, 16)
vectorcall_fn_6(S { x: 10, y: 12 })
vectorcall_fn_7(S2 { x: 15, y: 16 }, 3)
vectorcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] })
vectorcall_fn_9(1, 3.0)
vectorcall_fn_10(19)
```

----------------------------------------

TITLE: Configure rust-analyzer Server Path in VS Code (json)
DESCRIPTION: This JSON snippet should be added to VS Code's settings.json to specify the path to the rust-analyzer language server. It ensures the VS Code extension correctly locates the local rust-analyzer binary. The 'rust-analyzer.server.path' property accepts a string path, with 'rust-analyzer' defaulting to the binary in PATH. Required for running or debugging the extension with a custom or locally-built language server; no further configuration is needed if using the default system install.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
    "rust-analyzer.server.path": "rust-analyzer"
}

```

----------------------------------------

TITLE: Conditionally Compiling Code for wasm32-wasip2
DESCRIPTION: This Rust code snippet explains how to conditionally compile Rust code to target the wasm32-wasip2 environment. This is useful for ensuring compatibility within the right execution context.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wasip2.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#[cfg(all(target_os = "wasi", target_env = "p2"))]
```

----------------------------------------

TITLE: Correct Import Order in Rust Function
DESCRIPTION: Example showing the correct placement of a 'use' import statement at the beginning of a function body, before any non-item statements.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0154.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn f() {
    use std::io::Read;
    let x = 0;
    // ...
}
```

----------------------------------------

TITLE: Calling fastcall_fn_3 - Rust
DESCRIPTION: This snippet calls the `fastcall_fn_3` function, passing a floating-point number (3.5) as an argument in Rust. It illustrates a function call with a single floating-point parameter with the `fastcall` calling convention.  The outcome depends on the inner workings of the function.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_12

LANGUAGE: Rust
CODE:
```
fastcall_fn_3(3.5)
```

----------------------------------------

TITLE: Using References in Match Expressions for Drop Trait in Rust
DESCRIPTION: This snippet showcases how to correctly use references in match expressions when dealing with types that implement the Drop trait. It ensures that fields are not moved out of the enum while still allowing safe access to their values.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0509.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
```
struct FancyNum {
    num: usize
}

enum DropEnum {
    Fancy(FancyNum)
}

impl Drop for DropEnum {
    fn drop(&mut self) {
        // Destruct DropEnum, possibly using FancyNum
    }
}

fn main() {
    // Creates and enum of type `DropEnum`, which implements `Drop`
    let drop_enum = DropEnum::Fancy(FancyNum{num: 10});
    match drop_enum {
        // Creates a reference to the inside of `DropEnum::Fancy`
        DropEnum::Fancy(ref fancy_field) => // No error!
            println!("It was fancy-- {}!", fancy_field.num),
    }
    // implicit call to `drop_enum.drop()` as drop_enum goes out of scope
}
```
```

----------------------------------------

TITLE: Printing Rust Target Library Directory
DESCRIPTION: Demonstrates how to get the path to the target library directory using rustc's --print flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments/print-options.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ rustc --print target-libdir a.rs
/home/[REDACTED]/.rustup/toolchains/beta-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib
```

----------------------------------------

TITLE: Correct Associated Item Constraint in Type Parameter Declaration
DESCRIPTION: This snippet shows the correct way to use associated item constraints by moving them to the type parameter declaration. This resolves the E0229 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0229.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# struct Bar;
# trait Foo { type A; }
fn baz<I: Foo<A=Bar>>(x: &<I as Foo>::A) {} // ok!
```

----------------------------------------

TITLE: Demonstrating E0107 Error in Rust
DESCRIPTION: This code snippet illustrates the E0107 error by calling a function with more type arguments than it expects. The function 'foo' is defined with one type parameter, but is called with two type arguments, resulting in a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0087.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<T>() {}

fn main() {
    foo::<f64, bool>(); // error: wrong number of type arguments:
                        //        expected 1, found 2
}
```

----------------------------------------

TITLE: Fixing Static Methods with Self: Sized in Rust
DESCRIPTION: Shows how to make a trait with static methods dyn-compatible by making the static methods only available on concrete types using the `where Self: Sized` bound.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo() -> u8 where Self: Sized;
}
```

----------------------------------------

TITLE: Incomplete Byte Literal Syntax Error in Rust
DESCRIPTION: Demonstrates a compilation error caused by an unclosed byte literal. The error occurs when a byte literal starts with 'b'' but is not properly terminated with a matching closing single quote.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_at_eof.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
BYTE "b'"
```

----------------------------------------

TITLE: Correct Lifetime Capture in impl Trait Return Type (Rust)
DESCRIPTION: This code snippet shows the correct implementation where the `impl Trait` return type properly captures both lifetimes `'x` and `'y`. The return type is changed to `impl Trait<'y> + 'x` to explicitly capture the `'x` lifetime.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0700.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use std::cell::Cell;

trait Trait<'a> { }

impl<'a,'b> Trait<'b> for Cell<&'a u32> { }

fn foo<'x, 'y>(x: Cell<&'x u32>) -> impl Trait<'y> + 'x
where 'x: 'y
{
    x
}
```

----------------------------------------

TITLE: Incorrect Type Assignments in Rust
DESCRIPTION: This snippet demonstrates common mistakes when declaring a variable with a type, where an enum variant and a trait method are incorrectly used as types. This incorrect usage causes compilation errors in Rust. It requires the Rust compiler to check for errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0575.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
enum Rick { Morty }

let _: <u8 as Rick>::Morty; // error!

trait Age {
    type Empire;
    fn Mythology() {}
}

impl Age for u8 {
    type Empire = u16;
}

let _: <u8 as Age>::Mythology; // error!
```

----------------------------------------

TITLE: Invalid Loop Break Syntax in Rust
DESCRIPTION: Demonstrates an incorrect usage of break keyword without a label in a while loop condition, which triggers a compile-time error E0590
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0590.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
while break {}
```

----------------------------------------

TITLE: Fixing Deprecated Attribute in Rust Code
DESCRIPTION: This snippet demonstrates the improper use of deprecated attributes without pairing them with stable or unstable attributes in Rust. The error arises when staged API features are enabled. The snippet shows both erroneous and corrected code examples. Dependencies include enabling `#![feature(staged_api)]`.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0549.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#![feature(staged_api)]\n#![allow(internal_features)]\n#![stable(since = \"1.0.0\", feature = \"test\")]\n\n#[deprecated(\n    since = \"1.0.1\",\n    note = \"explanation for deprecation\"\n)] // invalid\nfn _deprecated_fn() {}
```

LANGUAGE: Rust
CODE:
```
#![feature(staged_api)]\n#![allow(internal_features)]\n#![stable(since = \"1.0.0\", feature = \"test\")]\n\n#[stable(since = \"1.0.0\", feature = \"test\")]\n#[deprecated(\n    since = \"1.0.1\",\n    note = \"explanation for deprecation\"\n)] // ok!\nfn _deprecated_fn() {}
```

----------------------------------------

TITLE: Example Rust Function Formatting in rustfmt
DESCRIPTION: An example showing how rustfmt formats a simple Rust function declaration with parameters, used to illustrate the code formatting workflow of rustfmt where the formatter calculates indentation and width budgets as it traverses the AST.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Design.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo(a: A, b: B) {
    ...
}
```

----------------------------------------

TITLE: Compile-Fail Example: Lifetime Shadowing in Rust
DESCRIPTION: This code demonstrates a lifetime shadowing error in Rust. The lifetime `'a` is defined at the `impl` level for `Foo`, and then redefined within the `f` function, causing the compiler to issue an error because the inner `'a` shadows the outer `'a`. The error E0496 is expected during compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0496.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0496
struct Foo<'a> {
    a: &'a i32,
}

impl<'a> Foo<'a> {
    fn f<'a>(x: &'a i32) { // error: lifetime name `'a` shadows a lifetime
                           //        name that is already in scope
    }
}
```
```

----------------------------------------

TITLE: MyStruct Type Alias with Generic Argument
DESCRIPTION: Shows a simple example of creating a type alias with a concrete type parameter, demonstrating how generic structs are instantiated with specific types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/generic_arguments.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
struct MyStruct<T>(T);
type Foo = MyStruct<u32>
```

----------------------------------------

TITLE: Removing Unnecessary Async in Rust Functions
DESCRIPTION: Removes the async keyword from functions that don't contain any await operations. Also updates call sites to remove .await when calling the function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_112

LANGUAGE: rust
CODE:
```
pub async fn foo() {}
pub async fn bar() { foo().await }
```

LANGUAGE: rust
CODE:
```
pub fn foo() {}
pub async fn bar() { foo() }
```

----------------------------------------

TITLE: Setting Hidden Visibility in Rust Compilation
DESCRIPTION: Uses the `-Zdefault-visibility=hidden` flag to set symbol visibility to hidden, preventing symbol export from shared objects. This is similar to Clang's `-fvisibility=hidden` flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/default-visibility.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
-Zdefault-visibility=hidden
```

----------------------------------------

TITLE: Defining Transparent Unions in Rust
DESCRIPTION: Demonstrates how to create transparent unions with single and multiple fields. The unions have the same representation as their non-zero-sized field.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/transparent-unions.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(transparent_unions)]

// This union has the same representation as `f32`.
#[repr(transparent)]
union SingleFieldUnion {
    field: f32,
}

// This union has the same representation as `usize`.
#[repr(transparent)]
union MultiFieldUnion {
    field: usize,
    nothing: (),
}
```

----------------------------------------

TITLE: Running CI Jobs with Cargo Tool
DESCRIPTION: Uses the Rust cargo tool to execute CI jobs locally in Docker containers, providing a way to run tests that closely matches the CI environment.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/docker.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cargo run --manifest-path src/ci/citool/Cargo.toml run-local <job-name>
# For example:
cargo run --manifest-path src/ci/citool/Cargo.toml run-local dist-x86_64-linux-alt
```

----------------------------------------

TITLE: Using black_box to prevent optimization in benchmarks
DESCRIPTION: Demonstrates how to use the test::black_box function to prevent the compiler from optimizing away calculations in benchmarks. This function acts as an opaque black box to the optimizer, forcing it to consider the value as used.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/test.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#![feature(test)]

extern crate test;

# fn main() {
# struct X;
# impl X { fn iter<T, F>(&self, _: F) where F: FnMut() -> T {} } let b = X;
b.iter(|| {
    let n = test::black_box(1000);

    (0..n).fold(0, |a, b| a ^ b)
})
# }
```

----------------------------------------

TITLE: Defining a Valid Auto Trait in Rust
DESCRIPTION: This snippet shows the corrected definition of an auto trait 'Bound' without any super traits. By removing the super trait 'Copy', it becomes valid and can be implemented by existing types, demonstrating the correct usage of auto traits in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0568.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
#![feature(auto_traits)]

auto trait Bound {} // ok!

fn main() {}
```

----------------------------------------

TITLE: Specifying a custom output path for coverage data
DESCRIPTION: Example showing how to use the LLVM_PROFILE_FILE environment variable to specify a custom name for the generated coverage data file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_7

LANGUAGE: shell
CODE:
```
$ echo "{some: 'thing'}" \
    | LLVM_PROFILE_FILE="formatjson5.profraw" target/debug/examples/formatjson5 -
...
$ ls formatjson5.profraw
formatjson5.profraw
```

----------------------------------------

TITLE: Test with Multiple Random Miri Seeds (Range) (Shell)
DESCRIPTION: Executes the project's test suite with Miri multiple times, using a specified range of seeds. This example uses seeds from 0 to 15 (inclusive), allowing control over the number of execution variations explored.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_11

LANGUAGE: Shell
CODE:
```
MIRIFLAGS="-Zmiri-many-seeds=0..16" cargo miri test
```

----------------------------------------

TITLE: Demonstrating Unstable Feature Error in Rust
DESCRIPTION: This code snippet shows an example of using an unstable feature 'repr128' without enabling it, which results in a compile-time error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0658.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(u128)] // error: use of unstable library feature 'repr128'
enum Foo {
    Bar(u64),
}
```

----------------------------------------

TITLE: Glob Re-exports and Attribute Inheritance in Rust
DESCRIPTION: This snippet demonstrates how attributes are inherited with glob re-exports. The `InPrivate` struct will have the `cfg(a)` attribute from its definition within `private_mod`. Due to the glob re-export, the attributes applied to the re-export itself are also considered, resulting in the re-exported item inheriting `cfg(a)` and `cfg(c)`. However, only `cfg(a)` will be displayed in documentation of `InPrivate`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/re-exports.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
```rust
mod private_mod {
    /// First
    #[cfg(a)]
    pub struct InPrivate;
}

#[cfg(c)]
pub use self::private_mod::*;
```
```

----------------------------------------

TITLE: Enum Discriminant Alignment - Threshold Set
DESCRIPTION: Demonstrates enum discriminant alignment when `enum_discrim_align_threshold` is set to 20.  Variants with names shorter than the threshold are aligned.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
enum Foo {
    A   = 0,
    Bb  = 1,
    RandomLongVariantGoesHere = 10,
    Ccc = 2,
}

enum Bar {
    VeryLongVariantNameHereA = 0,
    VeryLongVariantNameHereBb = 1,
    VeryLongVariantNameHereCcc = 2,
}
```

----------------------------------------

TITLE: Rust Code Using C Library via FFI
DESCRIPTION: This Rust code defines a `do_twice` function and two other functions, `add_one` and `add_two`, which are called by `do_twice`. It showcases how to call C code from Rust using the FFI. Specifically, `do_twice` is imported from a C library, and function pointers are passed to and from the C function.  It attempts to demonstrate Control Flow Integrity (CFI) by transmuting `add_two` to the same signature as `add_one` and then passing it to the `do_twice` function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_15

LANGUAGE: Rust
CODE:
```
use std::mem;

#[link(name = "foo")]
extern "C" {
    fn do_twice(f: unsafe extern "C" fn(i32) -> i32, arg: i32) -> i32;
}

unsafe extern "C" fn add_one(x: i32) -> i32 {
    x + 1
}

unsafe extern "C" fn add_two(x: i64) -> i64 {
    x + 2
}

fn main() {
    let answer = unsafe { do_twice(add_one, 5) };

    println!("The answer is: {}", answer);

    println!("With CFI enabled, you should not see the next answer");
    let f: unsafe extern "C" fn(i32) -> i32 = unsafe {
        mem::transmute::<*const u8, unsafe extern "C" fn(i32) -> i32>(add_two as *const u8)
    };
    let next_answer = unsafe { do_twice(f, 5) };

    println!("The next answer is: {}", next_answer);
}
```

----------------------------------------

TITLE: Creating a Custom Enum for Type-Preserving Returns
DESCRIPTION: This snippet demonstrates creating a custom enum with variants for each possible return type. This approach allows preserving the original types while still providing a single return type for the function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0746.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
enum E {
    S(S),
    O(O),
}

// The caller can access the original types directly, but it needs to match on
// the returned `enum E`.
fn foo(x: bool) -> E {
    if x {
        E::S(S(42))
    } else {
        E::O(O("val"))
    }
}
```

----------------------------------------

TITLE: Erroneous Usage of Associated Type with Uninferred Generic Parameters in Rust
DESCRIPTION: This code snippet demonstrates an incorrect usage of an associated type with a trait that has uninferred generic parameters. The error occurs because the lifetime 'x cannot be inferred in the function signature.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0212.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub trait Foo<T> {
    type A;

    fn get(&self, t: T) -> Self::A;
}

fn foo2<I : for<'x> Foo<&'x isize>>(
    field: I::A) {} // error!
```

----------------------------------------

TITLE: Demonstrating Invalid Higher-Ranked Lifetime Capture in impl Trait (Rust)
DESCRIPTION: This code snippet shows an erroneous attempt to use `impl Trait` with a higher-ranked lifetime. It defines a `BorrowInto` trait and its implementation, then tries to create a function `opaque()` that returns an `impl Trait` type with a higher-ranked lifetime, which is not supported in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0657.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait BorrowInto<'a> {
    type Target;

    fn borrow_into(&'a self) -> Self::Target;
}

impl<'a> BorrowInto<'a> for () {
    type Target = &'a ();

    fn borrow_into(&'a self) -> Self::Target {
        self
    }
}

fn opaque() -> impl for<'a> BorrowInto<'a, Target = impl Sized + 'a> {
    ()
}
```

----------------------------------------

TITLE: Configuring array-size-threshold
DESCRIPTION: Sets the maximum allowed size for arrays on the stack. This setting helps to control potential stack overflows by limiting the size of arrays.  The default value is 16384.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_1



----------------------------------------

TITLE: Erroneous Structure-literal Syntax with Type Alias in Rust
DESCRIPTION: This code demonstrates the E0071 error in Rust, which occurs when using structure-literal syntax with a type alias that points to a primitive type rather than a struct or enum variant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0071.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
type U32 = u32;
let t = U32 { value: 4 }; // error: expected struct, variant or union type,
                          // found builtin type `u32`
```

----------------------------------------

TITLE: Using Private Helper Function in Implementation
DESCRIPTION: Solution using a private helper function in an impl block to handle generic parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0401.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
# struct Foo<T>(T);
impl<T> Foo<T> {
    pub fn foo(&self, x: T) {
        self.bar(x);
    }

    fn bar(&self, y: T) {
        // ..
    }
}
```

----------------------------------------

TITLE: Defining Function with Explicit Lifetime Bounds in Rust
DESCRIPTION: This snippet demonstrates how to modify a function signature to use explicit lifetime bounds on a boxed trait object, addressing potential issues from the Rust 1.3 changes.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0398.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# trait SomeTrait {}
fn foo<'a>(arg: &'a Box<SomeTrait+'a>) { /* ... */ }
```

----------------------------------------

TITLE: Demonstrating 'async fn' Error in Rust 2015
DESCRIPTION: This code snippet shows an example of using 'async fn' in Rust 2015, which is not permitted and results in a compilation error (E0670). The function 'foo' is declared as async, which is incompatible with Rust 2015 edition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0670.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
async fn foo() {}
```

----------------------------------------

TITLE: Erroneous Inline Attribute Usage in Rust
DESCRIPTION: Demonstrates an incorrect usage of the `inline` attribute with an unsupported argument, which triggers a compile-time error E0535
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0535.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[inline(unknown)] // error: invalid argument
pub fn something() {}

fn main() {}
```

----------------------------------------

TITLE: Generating 'is_' Method for Enum Variant in Rust
DESCRIPTION: This snippet shows how to generate an 'is_' method for an enum variant. It creates an impl block with a method that returns a boolean indicating whether the enum instance matches the specified variant.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_49

LANGUAGE: rust
CODE:
```
enum Version {
 Undefined,
 Minor,
 Major,
}
```

LANGUAGE: rust
CODE:
```
enum Version {
 Undefined,
 Minor,
 Major,
}

impl Version {
    /// Returns `true` if the version is [`Minor`].
    ///
    /// [`Minor`]: Version::Minor
    #[must_use]
    fn is_minor(&self) -> bool {
        matches!(self, Self::Minor)
    }
}
```

----------------------------------------

TITLE: Specifying Custom Playground URL in Documentation
DESCRIPTION: Here, the #[doc] attribute is used to set a custom URL that documentation 'run' buttons will make requests to, enhancing user interaction with the code examples.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
"""rust,no_run\n#![doc(html_playground_url = \"https://playground.example.com/\")]\n"
```

----------------------------------------

TITLE: Configuring ALE for Rust Analyzer
DESCRIPTION: This Vim script configures the ALE plugin to use the rust-analyzer.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/other_editors.md#_snippet_8

LANGUAGE: Vim Script
CODE:
```
let g:ale_linters = {'rust': ['analyzer']}
```

----------------------------------------

TITLE: Invalid Raw Pointer Method Call in Rust
DESCRIPTION: Example of incorrect code that triggers the error by calling is_null() on a raw pointer with an unspecified type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0699.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
# #![deny(warnings)]
# fn main() {
let foo = &1;
let bar = foo as *const _;
if bar.is_null() {
    // ...
}
# }
```

----------------------------------------

TITLE: Creating a Free-Standing Rust Crate with no_std Attribute
DESCRIPTION: This snippet shows how to build a free-standing crate by adding the #![no_std] attribute, which is necessary when implementing lang items outside the standard library, such as for kernel development.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0152.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![no_std]
```

----------------------------------------

TITLE: Documenting Struct with Positional Parameters Link
DESCRIPTION: This snippet shows how to link to a specific section within the standard library documentation using intra-doc links. It uses a defined link for positional parameters to provide context in the documentation for MySpecialFormatter struct.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/linking-to-items-by-name.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
/// This is a special implementation of [positional parameters].
///
/// [positional parameters]: std::fmt#formatting-parameters
struct MySpecialFormatter;
```

----------------------------------------

TITLE: Test with Multiple Random Miri Seeds (Default) (Shell)
DESCRIPTION: Executes the project's test suite multiple times (defaulting to 64 iterations) with Miri, using different random seeds for each run. This helps detect bugs that depend on non-deterministic factors like memory layout or thread interleavings.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_10

LANGUAGE: Shell
CODE:
```
MIRIFLAGS="-Zmiri-many-seeds" cargo miri test
```

----------------------------------------

TITLE: Generating Documentation Template for Rust Function
DESCRIPTION: This snippet shows how to add a documentation template above a function definition or declaration. It includes sections for description, errors, and safety considerations, tailored to the function's signature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_47

LANGUAGE: rust
CODE:
```
pub struct S;
impl S {
    pub unsafe fn set_len(&mut self, len: usize) -> Result<(), std::io::Error> {
        /* ... */
    }
}
```

LANGUAGE: rust
CODE:
```
pub struct S;
impl S {
    /// Sets the length of this [`S`].
    ///
    /// # Errors
    ///
    /// This function will return an error if .
    ///
    /// # Safety
    ///
    /// .
    pub unsafe fn set_len(&mut self, len: usize) -> Result<(), std::io::Error> {
        /* ... */
    }
}
```

----------------------------------------

TITLE: Configuring await-holding-invalid-types
DESCRIPTION: Specifies a list of types that are disallowed from being held across an `await` point. This setting aids in preventing potential issues related to borrowing and lifetimes in asynchronous code. The default value is an empty list (`[]`).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_3



----------------------------------------

TITLE: Inverting an If Statement in Rust
DESCRIPTION: Demonstrates inverting a negated if condition and swapping its branches. This transformation simplifies the logic by removing the negation and making the code more readable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_76

LANGUAGE: rust
CODE:
```
fn main() {
    if┃ !y { A } else { B }
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    if y { B } else { A }
}
```

----------------------------------------

TITLE: Implementing a Recursive List Type in Rust
DESCRIPTION: Definition of a recursive list structure where each node contains a value and an optional reference to the next node. This type requires coinduction for proving traits like Send.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/coinduction.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct List<T> {
    value: T,
    next: Option<Box<List<T>>>,
}
```

----------------------------------------

TITLE: Rust Missing Hexadecimal Digits Error
DESCRIPTION: This snippet shows an error situation where a hexadecimal integer literal (0x) is defined without any digits following the prefix. This should result in a compiler error indicating missing digits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0x\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Error When Implementing Drop Trait in Const Context in Rust
DESCRIPTION: This Rust snippet demonstrates an error where a structure with a type implementing the Drop trait cannot initialize a static variable due to const-eval restrictions. The enum DropType, with a custom Drop implementation, is used within a struct Foo, and an error is shown when trying to initialize a static variable with a dropped value in a const context.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0493.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum DropType {
    A,
}

impl Drop for DropType {
    fn drop(&mut self) {}
}

struct Foo {
    field1: DropType,
}

static FOO: Foo = Foo { field1: (DropType::A, DropType::A).1 }; // error!
```

----------------------------------------

TITLE: Defining Erroneous Feature Attributes in Rust
DESCRIPTION: This snippet exemplifies incorrect usages of the feature attribute, illustrating common errors that could arise when defining feature flags. It serves as a warning to developers regarding malformed feature definitions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0556.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"#![feature(foo_bar_baz, foo(bar), foo = \"baz\", foo)] // error!\n#![feature] // error!\n#![feature = \"foo\"] // error!"
```

----------------------------------------

TITLE: Using Crate A in Another Library Crate
DESCRIPTION: This snippet demonstrates how to use the crate named 'a' in another library crate. It highlights the conflict that arises when the crate names are the same, leading to ambiguity in symbol resolution.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0519.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![crate_name = "a"]
#![crate_type = "lib"]

// error: the current crate is indistinguishable from one of its dependencies:
//        it has the same crate-name `a` and was compiled with the same
//        `-C metadata` arguments. This will result in symbol conflicts between
//        the two.
extern crate a;

pub fn foo() {}

fn bar() {
    a::foo(); // is this calling the local crate or the dependency?
}
```

----------------------------------------

TITLE: Implementing a Trait for a Specific Lifetime in Rust
DESCRIPTION: This snippet defines a struct `AnyInt` and implements the `Foo` trait for it, specifically for references to `isize` with any lifetime `'a`. This demonstrates how a type can implement a trait generically over lifetimes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/hrtb.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct AnyInt;
impl<'a> Foo<&'a isize> for AnyInt { }
```

----------------------------------------

TITLE: Defining a Simple Function in Rust
DESCRIPTION: This snippet defines a simple function `foo` that takes a `String` as an argument and returns a `u8`. It serves as an introductory example without generics.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo(a: String) -> u8 {
    # 1
    /* snip */
}
```

----------------------------------------

TITLE: Valid Drop Implementation Using Wrapper Type
DESCRIPTION: Shows a valid workaround for implementing Drop on a specific generic type by creating a wrapper struct. The Bar struct wraps Foo<u32> and implements Drop, avoiding the specialization restriction.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0366.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo<T> {
    t: T
}

struct Bar {
    t: Foo<u32>
}

impl Drop for Bar {
    fn drop(&mut self) {}
}
```

----------------------------------------

TITLE: Error Handling in Variadic Function Call - Rust
DESCRIPTION: This snippet demonstrates an erroneous call to a C variadic function, using an invalid Rust type. It illustrates the requirement to convert Rust types into corresponding C types to comply with the ABI rules before passing them to the function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0617.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
# use std::os::raw::{c_char, c_int};
extern "C" {
    fn printf(format: *const c_char, ...) -> c_int;
}

unsafe {
    printf("%f\n\0".as_ptr() as _, 0f32);
    // error: cannot pass an `f32` to variadic function, cast to `c_double`
}
```

----------------------------------------

TITLE: Declaring Constant in Rust
DESCRIPTION: This snippet illustrates the declaration of a constant named 'CONST' within a Rust module. It includes the necessary definition and location details. It is essential for ensuring constants are properly recognized by the Rust compiler. Inputs consist of the constant name and value, while outputs are the constant's reference during execution.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
FileSymbol {
    name: "CONST",
    def: Const(
        Const {
            id: ConstId(
                0,
            ),
        },
    ),
    loc: DeclarationLocation {
        hir_file_id: EditionedFileId(
            FileId(
                0,
            ),
            Edition2021,
        ),
        ptr: SyntaxNodePtr {
            kind: CONST,
            range: 413..434,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 419..424,
            },
        ),
    },
    container_name: None,
    is_alias: false,
    is_assoc: false,
}
```

----------------------------------------

TITLE: Using Valid Deprecated Meta Items in Rust
DESCRIPTION: This snippet shows the corrected version of the 'deprecated' attribute by replacing the erroneous meta item with a valid one. It clarifies the appropriate usage of valid meta items for attributes.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0541.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
#[deprecated(
    since="1.0.0",
    note="This is a valid meta item for the deprecated attribute."
)]
fn deprecated_function() {}

```

----------------------------------------

TITLE: Creating a New Cargo Project for Documentation Generation
DESCRIPTION: This snippet demonstrates how to create a new library project using Cargo and navigate into it.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ cargo new docs --lib
$ cd docs
```

----------------------------------------

TITLE: Demonstrating Enum Discriminant Overflow Error in Rust
DESCRIPTION: Example showing how enum discriminant overflow occurs when a variant exceeds the maximum value for the specified representation type (i64).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0370.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(i64)]
enum Foo {
    X = 0x7fffffffffffffff,
    Y, // error: enum discriminant overflowed on value after
       //        9223372036854775807: i64; set explicitly via
       //        Y = -9223372036854775808 if that is desired outcome
}
```

----------------------------------------

TITLE: Invalid Link Attribute Kind Example in Rust
DESCRIPTION: Demonstrates incorrect usage of the link attribute's kind parameter by specifying an invalid value 'wonderful_unicorn'. This code will fail to compile with error E0458.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0458.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[link(kind = "wonderful_unicorn")] extern "C" {}
// error: unknown kind: `wonderful_unicorn`
```

----------------------------------------

TITLE: Creating a New Rust Crate for SIMD - Bash
DESCRIPTION: This bash command initializes a new Rust crate named 'hellosimd', which will be used as the project for SIMD code development. This setup is crucial for organizing Rust code dedicated to SIMD operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/portable-simd/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cargo new hellosimd
```

----------------------------------------

TITLE: Erroneous Rust Foreign Function Declaration with Pattern in Argument (E0130)
DESCRIPTION: This code snippet demonstrates an incorrect way of declaring a foreign function in Rust where a pattern is used directly in the function parameter list, which is invalid and causes error E0130. It highlights the syntax mistake of attempting to destructure a tuple pattern directly in an external function declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0130.md#_snippet_0

LANGUAGE: Rust
CODE:
```
extern "C" {
    fn foo((a, b): (u32, u32)); // error: patterns aren't allowed in foreign
                                //        function declarations
}
```

----------------------------------------

TITLE: Setting RUSTC_BOOTSTRAP environment variable for enabling unstable features
DESCRIPTION: Examples of different ways to set the RUSTC_BOOTSTRAP environment variable to control unstable feature availability. Options include enabling for all crates, specific crates, or forcing stable behavior on nightly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/rustc-bootstrap.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
RUSTC_BOOTSTRAP=1             # Enable for all crates
RUSTC_BOOTSTRAP=crate_name    # Enable only for crates named 'crate_name'
RUSTC_BOOTSTRAP=-1            # Force stable behavior even on nightly
```

----------------------------------------

TITLE: Implementing Traits from std::fmt in Rust
DESCRIPTION: Demonstrates the preferred way to implement traits from std::fmt, importing the module rather than using fully qualified paths.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_20

LANGUAGE: rust
CODE:
```
// GOOD
use std::fmt;

impl fmt::Display for RenameError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result { .. }
}

// BAD
impl std::fmt::Display for RenameError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { .. }
}

// BAD
use std::ops::Deref;

impl Deref for Widget {
    type Target = str;
    fn deref(&self) -> &str { .. }
}
```

----------------------------------------

TITLE: Declaring Another Constant in Rust
DESCRIPTION: In this snippet, a second constant named 'CONST_WITH_INNER' is introduced. Similar to the previous constants, it is defined with specific properties and location. It can be utilized as a part of the Rust module's constant definitions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
FileSymbol {
    name: "CONST_WITH_INNER",
    def: Const(
        Const {
            id: ConstId(
                2,
            ),
        },
    ),
    loc: DeclarationLocation {
        hir_file_id: EditionedFileId(
            FileId(
                0,
            ),
            Edition2021,
        ),
        ptr: SyntaxNodePtr {
            kind: CONST,
            range: 593..665,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 599..615,
            },
        ),
    },
    container_name: None,
    is_alias: false,
    is_assoc: false,
}
```

----------------------------------------

TITLE: Correcting Function Item to Pointer Casts
DESCRIPTION: The snippet illustrates two methods to correctly convert a function item to a function pointer without triggering type safety issues while using transmute in Rust. It emphasizes matching the expected signatures properly.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0591.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
/// This pattern should be rewritten. There are a few possible ways to do this:
// - change the original fn declaration to match the expected signature,
//   and do the cast in the fn body (the preferred option)
// - cast the fn item of a fn pointer before calling transmute, as shown here:

# extern "C" fn foo(_: Box<i32>) {}
# use std::mem::transmute;
# unsafe {
let f: extern "C" fn(*mut i32) = transmute(foo as extern "C" fn(_));
let f: extern "C" fn(*mut i32) = transmute(foo as usize); // works too
# }
```

----------------------------------------

TITLE: Defining an Auto Trait with Super Trait in Rust
DESCRIPTION: This snippet defines an auto trait 'Bound' that incorrectly attempts to include a super trait 'Copy'. This leads to a compilation error since very few existing types could implement 'Bound' if it requires 'Copy'. The code demonstrates the failure mode and highlights the limitation in Rust's trait system when super traits are used with auto traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0568.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#![feature(auto_traits)]

auto trait Bound : Copy {} // error!

fn main() {}
```

----------------------------------------

TITLE: Extending `rustdoc` Styling with Custom CSS (Bash)
DESCRIPTION: This bash command runs `rustdoc` directly on a Rust source file (`src/lib.rs`), applying additional CSS rules from a specified file (`custom.css`) using the `--extend-css` flag. This allows customization of the generated HTML documentation's appearance beyond the default styles.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/what-to-include.md#_snippet_4

LANGUAGE: Bash
CODE:
```
rustdoc --extend-css custom.css src/lib.rs
```

----------------------------------------

TITLE: Erroneous Rust Function Type with Unconstrained Lifetime
DESCRIPTION: Demonstrates an invalid function type declaration where a lifetime appears only in the return type without being constrained by arguments
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0581.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    // Here, `'a` appears only in the return type:
    let x: for<'a> fn() -> &'a i32;
}
```

----------------------------------------

TITLE: Configuring Cargo Package Metadata for libc Crate in Rust
DESCRIPTION: This snippet defines various Cargo package metadata fields for the libc crate, including license, version, and repository information. It's typically used in Cargo.toml or generated during the build process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "CARGO_PKG_LICENSE": "MIT OR Apache-2.0",
    "CARGO_PKG_LICENSE_FILE": "",
    "CARGO_PKG_NAME": "libc",
    "CARGO_PKG_README": "README.md",
    "CARGO_PKG_REPOSITORY": "https://github.com/rust-lang/libc",
    "CARGO_PKG_RUST_VERSION": "",
    "CARGO_PKG_VERSION": "0.2.98",
    "CARGO_PKG_VERSION_MAJOR": "0",
    "CARGO_PKG_VERSION_MINOR": "2",
    "CARGO_PKG_VERSION_PATCH": "98",
    "CARGO_PKG_VERSION_PRE": ""
}
```

----------------------------------------

TITLE: Failing Trait Object with Self Default Parameter in Rust
DESCRIPTION: Example showing incorrect usage of Self as default type parameter in a trait object, which triggers compiler error E0393. The type parameter T must be explicitly specified when used with trait objects.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0393.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait A<T = Self> {}

fn together_we_will_rule_the_galaxy(son: &dyn A) {}
// error: the type parameter `T` must be explicitly specified
```

----------------------------------------

TITLE: Macro Rules Formatting with Different Options
DESCRIPTION: Illustrates macro rules formatting variations using rustfmt configuration settings
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_21

LANGUAGE: rust
CODE:
```
macro_rules! foo {
    ($a: ident : $b: ty) => {
        $a(42): $b;
    };
    ($a: ident $b: ident $c: ident) => {
        $a = $b + $c;
    };
}
```

----------------------------------------

TITLE: Demonstrating Shadowing with Enum in Rust
DESCRIPTION: This snippet illustrates a compilation error caused by shadowing an enum variant in Rust when omitting its fields in a match pattern. It shows an enum defined with fields and a match expression that mistakenly tries to reference it with a pattern that doesn't include its fields.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0530.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"enum Enum {\n    WithField(i32)\n}\n\nuse Enum::*;\nmatch WithField(1) {\n    WithField => {} // error: missing (_)\n}"
```

----------------------------------------

TITLE: Configuring doc-valid-idents
DESCRIPTION: This setting defines a list of words that the `doc_markdown` lint should not consider as identifiers that need to be enclosed in backticks.  The special value `..` appends values to the default list. The default is a long list of common terms.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_13



----------------------------------------

TITLE: Formatting Small Struct Literals in Rust
DESCRIPTION: Shows the effect of the 'struct_lit_single_line' option. When true (default), small struct literals are put on a single line. When false, they are always formatted over multiple lines.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_69

LANGUAGE: rust
CODE:
```
fn main() {
    let lorem = Lorem { foo: bar, baz: ofo };
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let lorem = Lorem {
        foo: bar,
        baz: ofo,
    };
}
```

----------------------------------------

TITLE: Rustfmt Skip Directives Example
DESCRIPTION: Example showing how to use rustfmt skip directives to prevent formatting of specific macros and attributes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/README.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#![rustfmt::skip::attributes(custom_attribute)]

#[custom_attribute(formatting , here , should , be , Skipped)]
#[rustfmt::skip::macros(html)]
fn main() {
    let macro_result1 = html! { <div>
Hello</div>
    }.to_string();
```

----------------------------------------

TITLE: Incorrect Reference Access to Packed Struct Fields in Rust
DESCRIPTION: This example demonstrates incorrect ways to access packed struct fields that cause E0793 errors due to unaligned memory access. It shows both direct reference creation and implicit references in format strings that are not allowed.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0793.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(packed)]
pub struct Foo {
    field1: u64,
    field2: u8,
}

unsafe {
    let foo = Foo { field1: 0, field2: 0 };
    // Accessing the field directly is fine.
    let val = foo.field1;
    // A reference to a packed field causes a error.
    let val = &foo.field1; // ERROR
    // An implicit `&` is added in format strings, causing the same error.
    println!("{}", foo.field1); // ERROR
}
```

----------------------------------------

TITLE: Macro Statement Formatting
DESCRIPTION: Illustrates the recommended formatting for macro invocations in statement position
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/statements.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
a_macro!(...);
```

----------------------------------------

TITLE: Demonstrating Import Name Collision in Rust
DESCRIPTION: Example showing a name collision error where an attempt is made to import 'Bar' while a type alias and module with the same name already exist in the current scope. This demonstrates why such imports were previously disallowed by the Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0256.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use foo::Bar; // error

type Bar = u32;

mod foo {
    pub mod Bar { }
}

fn main() {}
```

----------------------------------------

TITLE: Simplified Code After Feature Stabilization
DESCRIPTION: Examples of how code is simplified after a feature is stabilized. The feature flag checks are removed, assuming the feature is always enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/stabilization_guide.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
/* XXX */
```

LANGUAGE: rust
CODE:
```
if something { /* XXX */ }
```

----------------------------------------

TITLE: Setting up rust-analyzer with nvim-lsp using Lua
DESCRIPTION: This Lua snippet configures rust-analyzer with nvim-lsp, the built-in LSP client for Neovim.  It sets up the rust-analyzer server with custom settings for imports, cargo build scripts, and proc macro support.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/other_editors.md#_snippet_4

LANGUAGE: Lua
CODE:
```
lua << EOF
local lspconfig = require'lspconfig'

local on_attach = function(client)
    require'completion'.on_attach(client)
end

lspconfig.rust_analyzer.setup({
    on_attach = on_attach,
    settings = {
        ["rust-analyzer"] = {
            imports = {
                granularity = {
                    group = "module",
                },
                prefix = "self",
            },
            cargo = {
                buildScripts = {
                    enable = true,
                },
            },
            procMacro = {
                enable = true
            },
        }
    }
})
EOF
```

----------------------------------------

TITLE: Adding Warning Blocks in Markdown Documentation
DESCRIPTION: This snippet demonstrates how to add a warning block in documentation using HTML within a Markdown file. Ensure to include an empty line between HTML tags and Markdown content for Markdown to render correctly inside HTML tags. No additional dependencies are required other than support for Markdown and basic HTML.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/how-to-write-documentation.md#2025-04-21_snippet_2

LANGUAGE: Markdown
CODE:
```
/// documentation
///
/// <div class="warning">A big warning!</div>
///
/// more documentation
```

----------------------------------------

TITLE: Alternative Solution: Using PhantomData in Rust
DESCRIPTION: This code snippet shows an alternative solution using PhantomData<T>, which has an alignment of 1 for all T, allowing the field to be kept without causing alignment issues.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0691.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(repr_align)]

use std::marker::PhantomData;

#[repr(align(32))]
struct ForceAlign32;

#[repr(transparent)]
struct Wrapper(f32, PhantomData<ForceAlign32>);
```

----------------------------------------

TITLE: Example of an Unterminated Rust Byte String Literal
DESCRIPTION: This Rust code snippet shows an invalid byte string literal (`b\" `) because it lacks the necessary closing double quote (`"`). Attempting to compile this code results in the error: 'Missing trailing `"` symbol to terminate the byte string literal'. This highlights a common syntax error when defining byte strings.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_string_with_space.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
b\" 
```

----------------------------------------

TITLE: Erroneous Implementation with Mismatched Associated Const in Rust
DESCRIPTION: This example shows the error E0323 that occurs when implementing a trait with an associated const (N) when the trait actually defines it as an associated type. The compiler will raise an error because the item types don't match.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0323.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    type N;
}

struct Bar;

impl Foo for Bar {
    const N : u32 = 0;
    // error: item `N` is an associated const, which doesn't match its
    //        trait `<Bar as Foo>`
}
```

----------------------------------------

TITLE: Correct Usage of + Type Operator in Rust
DESCRIPTION: Example showing the correct usage of the + type operator with proper parentheses to resolve ambiguity in type declarations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0178.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {}

struct Bar<'a> {
    x: &'a (Foo + 'a),     // ok!
    y: &'a mut (Foo + 'a), // ok!
    z: fn() -> (Foo + 'a), // ok!
}
```

----------------------------------------

TITLE: Incorrect Usage of #[derive] Attribute in Rust
DESCRIPTION: This code snippet shows an erroneous use of the #[derive] attribute where a string literal is passed instead of a trait path. This will result in a compile-time error E0777.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0777.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[derive("Clone")] // error!
struct Foo;
```

----------------------------------------

TITLE: Trait definition in Rust
DESCRIPTION: This snippet defines a trait `ConvertTo` with a type parameter `A` and a method `convertTo` that returns a value of type `A`. This example is used to illustrate variance and object types, showing how the subtyping relationship between object types like `&Trait<A>` and `&Trait<B>` is determined by the relationship of `A` and `B`. The example assumes the existence of `Object` and `String` types for demonstration purposes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/variance.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
```rust
trait ConvertTo<A> {
    fn convertTo(&self) -> A;
}
```
```

----------------------------------------

TITLE: Trait Alias Feature Usage
DESCRIPTION: Demonstrates the use of trait aliases (nightly feature) as an alternative to type aliases when working with traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0404.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#![feature(trait_alias)]
trait Foo = Iterator<Item=String>;

fn bar<T: Foo>(t: T) {} // ok!
```

----------------------------------------

TITLE: Triggering Multiple Candidates Error in Rust
DESCRIPTION: This Rust snippet demonstrates a scenario where the compiler encounters multiple library files with the same crate name, leading to an error. It requires multiple auxiliary build files defining the same `crateresolve` crate. The code highlights the importance of specifying crate paths or cleaning the build directory to avoid such conflicts.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0523.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// aux-build:crateresolve-1.rs\n// aux-build:crateresolve-2.rs\n// aux-build:crateresolve-3.rs\n\nextern crate crateresolve;\n//~^ ERROR multiple candidates for `rlib` dependency `crateresolve` found\n\nfn main() {}
```

----------------------------------------

TITLE: Correct Character Literal Definition
DESCRIPTION: Demonstrates the proper syntax for defining a character literal with correct quote placement.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0762.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
static C: char = '●'; // ok!
```

----------------------------------------

TITLE: Using Mutable References in Rust Constant Functions
DESCRIPTION: This code snippet demonstrates the correct usage of mutable references within a constant function in Rust. It shows how to modify a value using a mutable reference inside a const fn, which is then used to initialize a constant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0764.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
const fn foo(x: usize) -> usize {
    let mut y = 1;
    let z = &mut y;
    *z += x;
    y
}

fn main() {
    const FOO: usize = foo(10); // ok!
}
```

----------------------------------------

TITLE: Correct Labeled Loop Break Syntax in Rust
DESCRIPTION: Shows the correct method of using break with a label in a while loop condition, resolving the compile-time error
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0590.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
'foo: while break 'foo {}
```

----------------------------------------

TITLE: Setting Up and Running ARM Program with QEMU
DESCRIPTION: This shell command sets environment variables to configure the cargo build and run command for executing the Rust program using QEMU for ARM emulation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabihf.md#2025-04-21_snippet_2

LANGUAGE: Shell
CODE:
```
CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABIHF_RUNNER="qemu-arm -L ${TOOLCHAIN}/arm-buildroot-linux-uclibcgnueabihf/sysroot/" \
CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABIHF_LINKER=${TOOLCHAIN}/bin/arm-buildroot-linux-uclibcgnueabihf-gcc \
cargo +stage2 run --target armv7-unknown-linux-uclibceabihf
```

----------------------------------------

TITLE: Compiling for Specific Instruction Set
DESCRIPTION: This Bash command customizes the compilation flags to target specific CPU instruction sets, using the `target_cpu` option. Set in `RUSTFLAGS`, the example targets `x86-64-v3` architecture, allowing optimization for specific processors.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/optimized-build.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
RUSTFLAGS="-C target_cpu=x86-64-v3" ./x build ...
```

----------------------------------------

TITLE: Using Imported Trait Associated Function in Rust
DESCRIPTION: Shows how to import the add function from std::ops::Add trait and use it directly in a reduce operation. The feature allows for cleaner syntax compared to the traditional approach of using Add::add.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/import-trait-associated-functions.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(import_trait_associated_functions)]

use std::ops::Add::add;

fn main() {
    let numbers = vec![1, 2, 3, 4, 5, 6];
    let sum = numbers.into_iter().reduce(add); // instead of `.reduce(Add:add)`

    assert_eq!(sum, Some(21));
}
```

----------------------------------------

TITLE: Built-in Attribute Example
DESCRIPTION: Shows examples of built-in attributes that are defined in the compiler itself and are always in scope. These attributes cannot be renamed and are processed directly by the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/attributes.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[allow]
#[macro_use]
```

----------------------------------------

TITLE: Correct Enum with Discriminants and Repr Attribute in Rust
DESCRIPTION: This code snippet shows the correct implementation of an enum with discriminants, using the #[repr(u8)] attribute. It includes a function to extract the discriminant from a value, demonstrating how the attribute ensures a well-defined way to access the discriminant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0732.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[repr(u8)]
enum Enum {
    Unit = 3,
    Tuple(u16) = 2,
    Struct {
        a: u8,
        b: u16,
    } = 1,
}

fn discriminant(v : &Enum) -> u8 {
    unsafe { *(v as *const Enum as *const u8) }
}

fn main() {
    assert_eq!(3, discriminant(&Enum::Unit));
    assert_eq!(2, discriminant(&Enum::Tuple(5)));
    assert_eq!(1, discriminant(&Enum::Struct{a: 7, b: 11}));
}
```

----------------------------------------

TITLE: Generating 'try_into_' Method for Enum Variant in Rust
DESCRIPTION: This snippet demonstrates how to generate a 'try_into_' method for an enum variant. It creates an impl block with a method that attempts to convert the enum into the specified variant's inner type, returning a Result.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_50

LANGUAGE: rust
CODE:
```
enum Value {
 Number(i32),
 Text(String),
}
```

LANGUAGE: rust
CODE:
```
enum Value {
 Number(i32),
 Text(String),
}

impl Value {
    fn try_into_text(self) -> Result<String, Self> {
        if let Self::Text(v) = self {
            Ok(v)
        } else {
            Err(self)
        }
    }
}
```

----------------------------------------

TITLE: Enum Discriminant Alignment - Default
DESCRIPTION: Demonstrates the default behavior of enum discriminant alignment when `enum_discrim_align_threshold` is set to 0. No alignment is performed because the threshold is set to 0.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
enum Foo {
    A = 0,
    Bb = 1,
    RandomLongVariantGoesHere = 10,
    Ccc = 71,
}

enum Bar {
    VeryLongVariantNameHereA = 0,
    VeryLongVariantNameHereBb = 1,
    VeryLongVariantNameHereCcc = 2,
}
```

----------------------------------------

TITLE: Installing rustfilt demangler for Rust symbol names
DESCRIPTION: Command to install rustfilt, a tool that demangles Rust's mangled symbol names in coverage reports to make them more readable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
cargo install rustfilt
```

----------------------------------------

TITLE: Defining extern "C" Functions and Structures in Rust
DESCRIPTION: This Rust code snippet showcases how to define a struct and an extern "C" function to demonstrate the ABI issue in the wasm32-unknown-unknown target. The code defines a struct `MyPair` and uses it in a function `take_my_pair`, which illustrates the discrepancy between the Rust and C ABI for WebAssembly targets.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-unknown.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
#[repr(C)]
struct MyPair {
    a: u32,
    b: u32,
}

extern "C" {
    fn take_my_pair(pair: MyPair) -> u32;
}

#[no_mangle]
pub unsafe extern "C" fn call_c() -> u32 {
    take_my_pair(MyPair { a: 1, b: 2 })
}
```

----------------------------------------

TITLE: Disabling Clippy Evaluation for Certain Code
DESCRIPTION: This snippet shows how to prevent Clippy from evaluating a specific section of code using conditional compilation. It includes an example where a stub is provided to ensure code compiles.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/configuration.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#[cfg(not(clippy))]
include!(concat!(env!("OUT_DIR"), "/my_big_function-generated.rs"));

#[cfg(clippy)]
fn my_big_function(_input: &str) -> Option<MyStruct> {
    None
}
```

----------------------------------------

TITLE: Casting to Unsized Type in Rust
DESCRIPTION: This snippet illustrates an error when attempting to cast to an unsized type in Rust. An error occurs because Rust requires that such types be handled through references. The erroneous example attempts to cast an array directly, which results in a compile-time error due to the unknown size of the target type. The correct approach involves casting to a reference instead.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0620.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let x = &[1_usize, 2] as [usize]; // error: cast to unsized type: `&[usize; 2]`
                                  //        as `[usize]`
```

----------------------------------------

TITLE: Defining Debug Flags for Enzyme Autodiff in Text
DESCRIPTION: This snippet outlines the various debug flags that can be used with the `autodiff` feature in Enzyme to print information on type analysis, activity analysis, performance warnings, and LLVM-IR modules at different stages. These flags help understand the behavior and optimization of differentiated functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/flags.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
PrintTA // Print TypeAnalysis information
PrintAA // Print ActivityAnalysis information
Print // Print differentiated functions while they are being generated and optimized
PrintPerf // Print AD related Performance warnings
PrintModBefore // Print the whole LLVM-IR module directly before running AD
PrintModAfter // Print the whole LLVM-IR module after running AD, before optimizations
PrintModFinal // Print the whole LLVM-IR module after running optimizations and AD
LooseTypes // Risk incorrect derivatives instead of aborting when missing Type Info
```

----------------------------------------

TITLE: Handling Closure Borrowing with Mutability in Rust
DESCRIPTION: This snippet demonstrates an erroneous closure that attempts to borrow a variable that is already borrowed. The code identifies the issue where the closure `starks` tries to modify `jon_snow`, but `nights_watch` already holds a reference to it, resulting in a compilation error. The provided comments clarify the nature of the borrowing conflict and suggest a resolution.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0500.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
```compile_fail,E0500
fn you_know_nothing(jon_snow: &mut i32) {
    let nights_watch = &jon_snow;
    let starks = || {
        *jon_snow = 3; // error: closure requires unique access to `jon_snow`
                       //        but it is already borrowed
    };
    println!("{}", nights_watch);
}
```
```

----------------------------------------

TITLE: Erroneous Transparent Struct Definition in Rust
DESCRIPTION: This code snippet demonstrates an incorrect implementation of a transparent struct with multiple non-zero-sized fields, resulting in error E0690.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0690.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(transparent)]
struct LengthWithUnit<U> { // error: transparent struct needs at most one
    value: f32,            //        non-zero-sized field, but has 2
    unit: U,
}
```

----------------------------------------

TITLE: Referencing C Unsigned Char Type in Rust
DESCRIPTION: Documentation reference showing the relationship between Rust's u8 type and C's unsigned char type. This type is guaranteed to be u8 sized and is included for C compatibility and type mapping completeness.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/core/src/ffi/c_uchar.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
c_char
```

----------------------------------------

TITLE: Output of Filtered Error Messages for Different Types
DESCRIPTION: Shows how the filtered error messages appear when applied to different types, demonstrating how the 'on' condition causes different notes to be displayed for &str versus other types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_20

LANGUAGE: text
CODE:
```
error[E0277]: `Foo` is not an iterator
 --> src/main.rs:4:16
  |
4 |     for foo in Foo {}
  |                ^^^ `Foo` is not an iterator
  |
  = note: maybe try calling `.iter()` or a similar method
  = help: the trait `std::iter::Iterator` is not implemented for `Foo`
  = note: required by `std::iter::IntoIterator::into_iter`

error[E0277]: `&str` is not an iterator
 --> src/main.rs:5:16
  |
5 |     for foo in "" {}
  |                ^^ `&str` is not an iterator
  |
  = note: call `.chars()` or `.bytes() on `&str`
  = help: the trait `std::iter::Iterator` is not implemented for `&str`
  = note: required by `std::iter::IntoIterator::into_iter`
```

----------------------------------------

TITLE: Defining Crate Metadata for Unwind - Rust
DESCRIPTION: Defines the `CrateData` structure for the `unwind` crate (index 9). It includes the Rust edition (`Edition2021`) and standard compiler configuration flags (`debug_assertions`, `miri`, `true`), with no dependencies listed. This crate provides stack unwinding capabilities.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_cfg_groups.txt#_snippet_9

LANGUAGE: Rust
CODE:
```
9: CrateData {
    root_file_id: FileId(
        10,
    ),
    edition: Edition2021,
    version: None,
    display_name: Some(
        CrateDisplayName {
            crate_name: CrateName(
                "unwind",
            ),
            canonical_name: "unwind",
        },
    ),
    cfg_options: CfgOptions(
        [
            "debug_assertions",
            "miri",
            "true",
        ],
    ),
    potential_cfg_options: None,
    env: Env {
        entries: {},
    },
    dependencies: [],
    origin: Lang(
        Other,
    ),
    is_proc_macro: false,
    proc_macro_cwd: None,
}
```

----------------------------------------

TITLE: Error Example: Using packed representation on a struct with aligned field
DESCRIPTION: This code demonstrates an erroneous case where a packed struct contains a field with an align representation hint, which is not allowed in Rust and will trigger error E0588.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0588.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(align(16))]
struct Aligned(i32);

#[repr(packed)] // error!
struct Packed(Aligned);
```

----------------------------------------

TITLE: Correct Usage of instruction_set Attribute in Rust
DESCRIPTION: This code snippet demonstrates the proper use of the `instruction_set` attribute with a supported argument 'arm::a32', conditionally applied using `cfg_attr` for ARM architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0779.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(isa_attribute)]

#[cfg_attr(target_arch="arm", instruction_set(arm::a32))] // ok!
pub fn something() {}
fn main() {}
```

----------------------------------------

TITLE: Workaround: Drop Implementation Using Trait Object Wrapper Struct (Rust)
DESCRIPTION: This code shows an alternative valid workaround for implementing Drop where the wrapper struct contains a trait object reference. This approach works with dynamic trait objects.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0120.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
trait MyTrait {}

// or Box<dyn MyTrait>, if you wanted an owned trait object
struct MyWrapper<'a> { foo: &'a dyn MyTrait }

impl <'a> Drop for MyWrapper<'a> {
    fn drop(&mut self) {}
}
```

----------------------------------------

TITLE: Example of Ambiguous Intra-Doc Link in Rust
DESCRIPTION: This snippet defines a function and an enum both named `Foo`, demonstrating the `broken_intra_doc_links` lint's warning about ambiguities in link resolution. It provides suggestions on how to disambiguate the reference by explicitly mentioning the type of item being linked. The lint helps clarify links in documentation comments when there are multiple items with the same name.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/lints.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
/// [`Foo`]
pub fn function() {}

pub enum Foo {}

pub fn Foo(){}

```

----------------------------------------

TITLE: Valid Negative Implementation Example - Rust
DESCRIPTION: Shows the correct way to implement a negative trait for an auto trait. This example demonstrates a valid negative implementation without the unsafe keyword.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0198.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(auto_traits)]

struct Foo;

auto trait Enterprise {}

impl !Enterprise for Foo { }
```

----------------------------------------

TITLE: Solution 2: Implementing Copy Trait in Rust
DESCRIPTION: Shows an alternative solution by implementing the Copy trait for the structure, which allows mixing by-move and by-ref bindings.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0009.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#[derive(Clone, Copy)]
struct X { x: (), }

let x = Some((X { x: () }, X { x: () }));
match x {
    Some((y, ref z)) => {},
    None => panic!()
}
```

----------------------------------------

TITLE: Multi-Line Generics Clause Formatting in Rust
DESCRIPTION: Demonstrates how to format multi-line generics clauses in Rust. It includes putting each parameter on its own block-indented line and using a trailing comma.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_19

LANGUAGE: rust
CODE:
```
fn foo<
    T: Display,
    U: Debug,
>(x: Vec<T>, y: Vec<U>) ...
```

----------------------------------------

TITLE: Alternative Formatting for Generic Types with Line Breaks in Rust
DESCRIPTION: This snippet illustrates an alternative way to break lines in generic types, which is less preferred due to reduced readability. It shows the `Baz` type being split across multiple lines within the `Foo` type definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/types.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
"Foo<Bar, Baz<
    Type1,
    Type2,
>>"
```

----------------------------------------

TITLE: Incorrect Function Trait Specification in Rust
DESCRIPTION: This code demonstrates the incorrect way to specify a function trait using angle-bracket notation without wrapping the argument type in a tuple. This will result in an E0059 compilation error because it doesn't follow the required tuple format for function traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0059.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(unboxed_closures)]

fn foo<F: Fn<i32>>(f: F) -> F::Output { f(3) }
```

----------------------------------------

TITLE: Configuring RISC-V Target for Rust Build - TOML
DESCRIPTION: This snippet sets the target for Rust build to the RISC-V architecture using the musl libc. The target is specified in the build configuration for rustc. It requires a compatible RISC-V compiler to be available in the system's PATH.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv64gc-unknown-linux-musl.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["riscv64gc-unknown-linux-musl"]
```

----------------------------------------

TITLE: Defining Crate Metadata for Test - Rust
DESCRIPTION: Defines the `CrateData` structure for the `test` crate (index 8). It includes the Rust edition (`Edition2021`) and standard compiler configuration flags (`debug_assertions`, `miri`, `true`), with no dependencies listed. This crate provides the testing framework.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_cfg_groups.txt#_snippet_8

LANGUAGE: Rust
CODE:
```
8: CrateData {
    root_file_id: FileId(
        9,
    ),
    edition: Edition2021,
    version: None,
    display_name: Some(
        CrateDisplayName {
            crate_name: CrateName(
                "test",
            ),
            canonical_name: "test",
        },
    ),
    cfg_options: CfgOptions(
        [
            "debug_assertions",
            "miri",
            "true",
        ],
    ),
    potential_cfg_options: None,
    env: Env {
        entries: {},
    },
    dependencies: [],
    origin: Lang(
        Test,
    ),
    is_proc_macro: false,
    proc_macro_cwd: None,
}
```

----------------------------------------

TITLE: Documenting Platform/Feature Requirements with #[doc(cfg)] in Rust
DESCRIPTION: Shows how to use the `#[doc(cfg(...))]` attribute, requiring the `doc_cfg` feature gate, to indicate which platforms or features an item is available on. This affects doctest execution and documentation rendering, and is typically used with `#[cfg(any(..., doc))]`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_2

LANGUAGE: Rust
CODE:
```
#![feature(doc_cfg)]

/// Token struct that can only be used on Windows.
#[cfg(any(windows, doc))]
#[doc(cfg(windows))]
pub struct WindowsToken;

/// Token struct that can only be used on Unix.
#[cfg(any(unix, doc))]
#[doc(cfg(unix))]
pub struct UnixToken;

/// Token struct that is only available with the `serde` feature
#[cfg(feature = "serde")]
#[doc(cfg(feature = "serde"))]
#[derive(serde::Deserialize)]
pub struct SerdeToken;
```

----------------------------------------

TITLE: Configuring Instrument Coverage in Rust
DESCRIPTION: Demonstrates the usage of the '-C instrument-coverage' flag with the 'all' option. This option is currently an alias for 'yes', but may change in the future if more fine-grained coverage options are added.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_16

LANGUAGE: rust
CODE:
```
-C instrument-coverage=all
```

----------------------------------------

TITLE: Building and Running HWAddressSanitizer Example
DESCRIPTION: This shell script compiles the Rust code, including `-Zsanitizer=hwaddress` which activates the HWAddressSanitizer, and also specifies additional linker and target features.  This ensures that the code is compiled with the HWAddressSanitizer enabled and then executes the compiled program. The expected output includes an error message from the HWAddressSanitizer, indicating the memory error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_19

LANGUAGE: Shell
CODE:
```
$ rustc main.rs -Zsanitizer=hwaddress -C target-feature=+tagged-globals -C
linker=aarch64-linux-gnu-gcc -C link-arg=-fuse-ld=lld --target
aarch64-unknown-linux-gnu
```

LANGUAGE: Shell
CODE:
```
$ ./main
==241==ERROR: HWAddressSanitizer: tag-mismatch on address 0xefdeffff0050 at pc 0xaaaae0ae4a98
READ of size 4 at 0xefdeffff0050 tags: 2c/00 (ptr/mem) in thread T0
    #0 0xaaaae0ae4a94  (/.../main+0x54a94)
    ...

[0xefdeffff0040,0xefdeffff0060) is a small allocated heap chunk; size: 32 offset: 16
0xefdeffff0050 is located 0 bytes to the right of 16-byte region [0xefdeffff0040,0xefdeffff0050)
allocated here:
    #0 0xaaaae0acb80c  (/.../main+0x3b80c)
    ...

Thread: T0 0xeffe00002000 stack: [0xffffc28ad000,0xffffc30ad000) sz: 8388608 tls: [0xffffaa10a020,0xffffaa10a7d0)
Memory tags around the buggy address (one tag corresponds to 16 bytes):
  0xfefcefffef80: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefcefffef90: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefcefffefa0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefcefffefb0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefcefffefc0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefcefffefd0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefcefffefe0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefcefffeff0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
=>0xfefceffff000: d7  d7  05  00  2c [00] 00  00  00  00  00  00  00  00  00  00
  0xfefceffff010: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefceffff020: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefceffff030: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefceffff040: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefceffff050: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefceffff060: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefceffff070: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
  0xfefceffff080: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00
Tags for short granules around the buggy address (one tag corresponds to 16 bytes):
  0xfefcefffeff0: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..
=>0xfefceffff000: ..  ..  8c  ..  .. [..] ..  ..  ..  ..  ..  ..  ..  ..  ..  ..
  0xfefceffff010: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..
See https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html#short-granules for a description of short granule tags
Registers where the failure occurred (pc 0xaaaae0ae4a98):
    x0  2c00efdeffff0050  x1  0000000000000004  x2  0000000000000004  x3  0000000000000000
    x4  0000fffefc30ac37  x5  000000000000005d  x6  00000ffffc30ac37  x7  0000efff00000000
    x8  2c00efdeffff0050  x9  0200efff00000000  x10 0000000000000000  x11 0200efff00000000
    x12 0200effe00000310  x13 0200effe00000310  x14 0000000000000008  x15 5d00ffffc30ac360
    x16 0000aaaae0ad062c  x17 0000000000000003  x18 0000000000000001  x19 0000ffffc30ac658
    x20 4e00ffffc30ac6e0  x21 0000aaaae0ac5e10  x22 0000000000000000  x23 0000000000000000
    x24 0000000000000000  x25 0000000000000000  x26 0000000000000000  x27 0000000000000000
    x28 0000000000000000  x29 0000ffffc30ac5a0  x30 0000aaaae0ae4a98
SUMMARY: HWAddressSanitizer: tag-mismatch (/.../main+0x54a94)
```

----------------------------------------

TITLE: Compile-Fail Example: Nonexistent Struct Field Access in Rust
DESCRIPTION: This code snippet demonstrates the E0609 error in Rust, which occurs when attempting to access a field that does not exist within a struct. The code defines a struct StructWithFields with a single field x and then tries to access a non-existent field foo, causing a compile-time error. This highlights the importance of verifying field names when accessing struct members.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0609.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0609
struct StructWithFields {
    x: u32,
}

let s = StructWithFields { x: 0 };
println!("{}", s.foo); // error: no field `foo` on type `StructWithFields`
```
```

----------------------------------------

TITLE: Using Cranelift Codegen Backend via Environment Variable
DESCRIPTION: Command to enable the Cranelift codegen backend using an environment variable with cargo on the nightly toolchain.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/Readme.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ CARGO_PROFILE_DEV_CODEGEN_BACKEND=cranelift cargo +nightly build -Zcodegen-backend
```

----------------------------------------

TITLE: Rust Compiler Passes
DESCRIPTION: This code snippet demonstrates how the `mir_borrowck` query is executed on all functions of a crate. The codegen backend invokes `collect_and_partition_mono_items`, which recursively requests the `optimized_mir` for all reachable functions, which in turn runs `mir_borrowck` for that function and then creates codegen units. This ensures that unreachable functions still have their errors emitted.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/overview.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```

[passes]: https://github.com/rust-lang/rust/blob/e69c7306e2be08939d95f14229e3f96566fb206c/compiler/rustc_interface/src/passes.rs#L791

```

----------------------------------------

TITLE: Implementing Tree Traversal Optimization - Rust
DESCRIPTION: This snippet discusses optimizations for traversing syntax trees by replacing `Arc` with `Rc` for non-thread-safe operations, thereby reducing atomic operations during traversal. It describes alternative methods to maintain thread safety and memory efficiency while dealing with `SyntaxNode` instances.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/syntax.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
// To get rid of atomics, `rowan` uses non thread-safe `Rc`.
// This is OK because trees traversals mostly run on a single thread.
// Sending a `SyntaxNode` to another thread requires sending a pair of **root**`GreenNode` and a `Range<usize>`.
// Another thread can restore the `SyntaxNode` by traversing from the root.
```

----------------------------------------

TITLE: Installing Josh-Proxy Tool (Shell)
DESCRIPTION: Installs the `josh-proxy` command-line tool using Cargo directly from a specific tag (`r24.10.04`) of the `josh-project/josh` Git repository. This tool is a necessary component for the scripts that synchronize the `rustc-dev-guide` content with the main `rust-lang/rust` repository. Using this exact tagged version is important for ensuring lossless commit round trips.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
cargo install josh-proxy --git https://github.com/josh-project/josh --tag r24.10.04
```

----------------------------------------

TITLE: Invalid Binary Number Declaration in Rust
DESCRIPTION: Example showing invalid syntax where a binary number literal has a prefix (0b) but no digits, resulting in compilation error E0768.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0768.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let s: i32 = 0b; // error!
```

----------------------------------------

TITLE: Correct Use of Link Annotations in Rust
DESCRIPTION: This snippet illustrates the correct usage of the link attribute in Rust by providing a valid library name, allowing the Rust compiler to link it properly.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0454.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
#[link(name = "some_lib")] extern "C" {} // ok!
```

----------------------------------------

TITLE: Correcting Deprecated Attribute Usage in Rust
DESCRIPTION: The code snippet illustrates an erroneous usage of the #[deprecated] attribute in Rust where the 'note' key is specified twice, which is not allowed. The solution involves removing one of the duplicate meta items to ensure each key is used only once within the attribute. This demonstrates proper usage of attribute meta items, a common task when marking functions as deprecated.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0538.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#[deprecated(
    since="1.0.0",
    note="First deprecation note."
)]
fn deprecated_function() {}
```

----------------------------------------

TITLE: Correctly Defining a Feature Attribute in Rust
DESCRIPTION: This snippet shows the correct way to define a feature attribute in Rust, emphasizing that it should only be used on the nightly version of Rust. It highlights the requirement for proper syntax and context.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0556.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
"#![feature(flag)]"
```

----------------------------------------

TITLE: Rustdoc Command Invocation with Cargo
DESCRIPTION: This snippet shows the underlying rustdoc command invoked by Cargo with detailed parameters for documentation generation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
$ rustdoc --crate-name docs src/lib.rs -o <path>/docs/target/doc -L dependency=<path>/docs/target/debug/deps
```

----------------------------------------

TITLE: Compile Fail Example: Incorrect Fn Argument Count in Rust
DESCRIPTION: This code snippet demonstrates the E0593 error, which occurs when the number of arguments in a closure doesn't match the expected number defined in the `Fn` trait bound. The `foo` function expects an `Fn()` (no arguments) but is called with a closure that takes one argument (`|y| {}`).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0593.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0593
fn foo<F: Fn()>(x: F) { }

fn main() {
    // [E0593] closure takes 1 argument but 0 arguments are required
    foo(|y| { });
}
```
```

----------------------------------------

TITLE: Configuring Panic Abort for Tests
DESCRIPTION: Additional compiler flags to enable panic=abort mode for test binaries
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_25

LANGUAGE: sh
CODE:
```
    --test-args --target-rustcflags                                           \
    --test-args -Cpanic=abort                                                 \
    --test-args --target-rustcflags                                           \
    --test-args -Zpanic_abort_tests                                           \
```

----------------------------------------

TITLE: Including Custom HTML in Header with rustdoc (Bash)
DESCRIPTION: Shows how the `--html-in-header` flag includes content from specified files into the `<head>` section of the generated HTML documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_19

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --html-in-header header.html
```

LANGUAGE: bash
CODE:
```
$ rustdoc README.md --html-in-header header.html
```

----------------------------------------

TITLE: Installing Emscripten Compiler Toolchain
DESCRIPTION: This shell script installs the Emscripten compiler toolchain, necessary for compiling the wasm32-unknown-emscripten target. Dependencies include git and adequate permissions to source environment scripts. The input is a git clone command that downloads the Emscripten SDK, followed by installation and activation commands. The script outputs the configured environment settings required for the Emscripten compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-emscripten.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
git clone https://github.com/emscripten-core/emsdk.git --depth 1
./emsdk/emsdk install 3.1.68
./emsdk/emsdk activate 3.1.68
source ./emsdk/emsdk_env.sh
```

----------------------------------------

TITLE: Copying Generic Parameters with Bounds for Struct
DESCRIPTION: Example showing how to copy generic parameters and bounds for inner struct definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0401.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
fn foo<T: Copy>(x: T) {
    struct Foo<T: Copy> {
        x: T,
    }
}
```

----------------------------------------

TITLE: Default Merge Derives Behavior in Rust
DESCRIPTION: Shows the default merge_derives setting (true), which combines multiple derive attributes into a single attribute.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_48

LANGUAGE: rust
CODE:
```
#[derive(Eq, PartialEq, Debug, Copy, Clone)]
pub enum Foo {}
```

----------------------------------------

TITLE: Try Shorthand Default Example in Rust
DESCRIPTION: Shows the default formatting behavior for try! macro usage when use_try_shorthand is set to false.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_78

LANGUAGE: rust
CODE:
```
fn main() {
    let lorem = ipsum.map(|dolor| dolor.sit())?;

    let lorem = try!(ipsum.map(|dolor| dolor.sit()));
}
```

----------------------------------------

TITLE: Default Inline Attribute Width in Rust
DESCRIPTION: Shows how attributes are displayed with the default inline_attribute_width of 0, which keeps attributes on separate lines from their items.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_39

LANGUAGE: rust
CODE:
```
#[cfg(feature = "alloc")]
use core::slice;
```

----------------------------------------

TITLE: Adding Explicit Enum Discriminants in Rust
DESCRIPTION: This assist adds explicit discriminant values to all enum variants. It automatically assigns incremental values, respecting any existing explicit discriminants.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
enum TheEnum {
    Foo,
    Bar,
    Baz = 42,
    Quux,
}
```

LANGUAGE: rust
CODE:
```
enum TheEnum {
    Foo = 0,
    Bar = 1,
    Baz = 42,
    Quux = 43,
}
```

----------------------------------------

TITLE: Converting Comments to Documentation in Rust
DESCRIPTION: This assist converts regular comments to documentation comments. It changes the comment style to create module or item documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_16

LANGUAGE: rust
CODE:
```
// Wow what a nice module
// I sure hope this shows up when I hover over it
```

LANGUAGE: rust
CODE:
```
//! Wow what a nice module
//! I sure hope this shows up when I hover over it
```

----------------------------------------

TITLE: Error Example: Referencing Non-existent Associated Type in Rust Trait
DESCRIPTION: This code demonstrates the E0576 error by attempting to reference a non-existent associated type 'You' in the 'Hello' trait. The compiler will fail because this associated type has not been defined.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0576.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Hello {
    type Who;

    fn hello() -> <Self as Hello>::You; // error!
}
```

----------------------------------------

TITLE: Implementing Local Trait for Foreign Type (Rust)
DESCRIPTION: This code snippet demonstrates an alternative approach to avoid the orphan rule violation by defining a local trait (Bar) and implementing it for a foreign type (u32).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0117.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait Bar {
    fn get(&self) -> usize;
}

impl Bar for u32 {
    fn get(&self) -> usize { 0 }
}
```

----------------------------------------

TITLE: Calling stdcall_fn_3 - Rust
DESCRIPTION: This snippet calls the `stdcall_fn_3` function, passing a floating-point number (3.5) as an argument using the `stdcall` calling convention in Rust. It specifically demonstrates function calls with floating-point parameters. The output of the call depends on what `stdcall_fn_3` is defined to do.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_2

LANGUAGE: Rust
CODE:
```
stdcall_fn_3(3.5)
```

----------------------------------------

TITLE: Configuring Trailing Semicolons in Rust
DESCRIPTION: Demonstrates the 'trailing_semicolon' option. When true (default), semicolons are added after break, continue, and return statements. When false, these semicolons are omitted.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_72

LANGUAGE: rust
CODE:
```
fn foo() -> usize {
    return 0;
}
```

LANGUAGE: rust
CODE:
```
fn foo() -> usize {
    return 0
}
```

----------------------------------------

TITLE: Correct Packed Attribute Usage
DESCRIPTION: This code snippet shows the correct way to use the `packed` attribute in Rust. It demonstrates a struct with a single `packed` attribute.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0634.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
```
#[repr(packed)] // ok!
struct Company(i32);
```
```

----------------------------------------

TITLE: Installing rust-analyzer on Arch Linux using pacman
DESCRIPTION: This snippet demonstrates how to install rust-analyzer on Arch Linux using the pacman package manager. It installs the package from the official repositories.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/rust_analyzer_binary.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
$ pacman -S rust-analyzer
```

----------------------------------------

TITLE: Resolving Lint Check Conflict Using deny Instead of forbid in Rust
DESCRIPTION: Demonstrates how to fix the lint check conflict by using deny instead of forbid, which allows the inner lint check attribute to override the outer directive.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0453.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![deny(non_snake_case)]

#[allow(non_snake_case)]
fn main() {
    let MyNumber = 2; // ok!
}
```

----------------------------------------

TITLE: Generating Unnamed Function Type Alias in Rust
DESCRIPTION: This snippet shows how to generate a type alias for a function with unnamed parameters. It creates a new type alias that matches the function's signature, including safety qualifiers and return type, but omits parameter names.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_53

LANGUAGE: rust
CODE:
```
unsafe fn foo(n: i32) -> i32 { 42i32 }
```

LANGUAGE: rust
CODE:
```
type ${0:FooFn} = unsafe fn(i32) -> i32;

unsafe fn foo(n: i32) -> i32 { 42i32 }
```

----------------------------------------

TITLE: Run Binary with Specific Miri Flags (Shell)
DESCRIPTION: Launches the project's binary via Miri while passing specific configuration flags to the interpreter using the `MIRIFLAGS` environment variable. This example disables the Stacked Borrows analysis.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
MIRIFLAGS="-Zmiri-disable-stacked-borrows" cargo miri run
```

----------------------------------------

TITLE: Demonstrating E0790 Error with Ambiguous Trait Method Call in Rust
DESCRIPTION: This code snippet shows an error case where the compiler cannot determine which implementation of the Coroutine trait to use when calling the create() method. Multiple implementations exist for different types, causing ambiguity.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0790.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Coroutine {
    fn create() -> u32;
}

struct Impl;

impl Coroutine for Impl {
    fn create() -> u32 { 1 }
}

struct AnotherImpl;

impl Coroutine for AnotherImpl {
    fn create() -> u32 { 2 }
}

let cont: u32 = Coroutine::create();
// error, impossible to choose one of Coroutine trait implementation
// Should it be Impl or AnotherImpl, maybe something else?
```

----------------------------------------

TITLE: Recursive List Type Definition Example
DESCRIPTION: Example of a recursive type definition showing a singly-linked list structure that demonstrates the need for handling recursive types in debug info generation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/debuginfo/doc.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct List {
    value: i32,
    tail: Option<Box<List>>,
}
```

----------------------------------------

TITLE: Using as-needed Link Modifier in Rust
DESCRIPTION: Demonstrates the usage of as-needed modifier for library linking. Compatible only with dynamic and framework linking kinds. Translates to --as-needed for ld-like linkers and -dead_strip_dylibs/-needed_library/-needed_framework for ld64.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/native-link-modifiers-as-needed.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(native_link_modifiers_as_needed)]
```

----------------------------------------

TITLE: Printing Rust Native Static Libraries
DESCRIPTION: Shows how to get linker flags for static libraries using rustc's --print flag with native-static-libs option.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments/print-options.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
$ rustc --print native-static-libs --crate-type staticlib a.rs
note: Link against the following native artifacts when linking against this static library. The order and any duplication can be significant on some platforms.

note: native-static-libs: -lgcc_s -lutil [REDACTED] -lpthread -lm -ldl -lc
```

----------------------------------------

TITLE: Removing Nested Parentheses in Rust
DESCRIPTION: Shows the effect of the remove_nested_parens option on nested parentheses in function calls.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_59

LANGUAGE: rust
CODE:
```
fn main() {
    (foo());
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    (foo());

    ((((foo()))));
}
```

----------------------------------------

TITLE: Invalid Char Casting from u32
DESCRIPTION: Demonstrates an incorrect attempt to cast a u32 to char, which is not allowed in Rust. Only u8 can be directly cast to char.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0604.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
0u32 as char; // error: only `u8` can be cast as `char`, not `u32`
```

----------------------------------------

TITLE: Generating Git Patch
DESCRIPTION: Creates a patch file for the most recent commit using git format-patch
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/sending-gcc-patch.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
git format-patch -1 `git rev-parse --short HEAD`
```

----------------------------------------

TITLE: Configuring enum-variant-name-threshold
DESCRIPTION: Sets the minimum number of enum variants for the variant name lints to trigger. Defaults to `3`.  This helps in controlling the sensitivity of variant name linting.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_17



----------------------------------------

TITLE: Single-Line Tuple Struct Definition in Rust
DESCRIPTION: Illustrates the formatting of single-line tuple struct definitions in Rust.  Shows how to separate types using a comma and space.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
pub struct Foo(String, u8);
```

----------------------------------------

TITLE: Defining Double Precision Float in Rust
DESCRIPTION: Rust primarily uses f64 as the equivalent of C's double type, which is guaranteed to be an IEEE 754 double-precision floating point number. The standard allows for potential variations in implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/core/src/ffi/c_double.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let x: f64 = 3.14159;
```

----------------------------------------

TITLE: Using rustc with -Zwasm-c-abi flag for Correct ABI
DESCRIPTION: This shell command demonstrates compiling a Rust source file using the nightly compiler and the `-Zwasm-c-abi` flag to conform to the correct C ABI for WebAssembly targets.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-unknown.md#2025-04-21_snippet_11

LANGUAGE: shell
CODE:
```
$ rustc +nightly -Zwasm-c-abi=spec foo.rs --target wasm32-unknown-unknown --crate-type lib --emit obj -O
$ wasm-tools print foo.o
(module
  (import "env" "take_my_pair" (func $take_my_pair (param i32) (result i32)))
  (func $call_c (result i32)
    ;; ...
  )
  ;; ...
)
```

----------------------------------------

TITLE: Ensuring Unique Type Parameters in Opaque Types in Rust
DESCRIPTION: Illustrates the need for unique type parameters in the definition of opaque types in Rust. A valid case with unique type parameters is presented, followed by an invalid case where a type parameter is repeated, resulting in ambiguity. This enforces the requirement for unique type arguments to ensure clear type inference.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/opaque-types-region-inference-restrictions.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
type Opaque<X, Y> = impl Sized;

// `T` and `U` are unique in the generic args.
// Opaque<T, U> := T;
fn good<T, U>(t: T, _u: U) -> Opaque<T, U> { t }

// `T` appears twice in the generic args.
// Opaque<T, T> := T;
fn bad<T>(t: T) -> Opaque<T, T> { t } //~ ERROR

```

----------------------------------------

TITLE: Building and Running Heap Corruption Example (Debug)
DESCRIPTION: This command demonstrates building and running the heap corruption example with debug assertions enabled, showing how the allocator detects and reports the issue.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_10

LANGUAGE: text
CODE:
```
$ cargo run
   Compiling hello-rust-heap v0.1.0 (/home/rcvalle/hello-rust-heap)
    Finished dev [unoptimized + debuginfo] target(s) in 0.25s
     Running `target/debug/hello-rust-heap`
free(): invalid next size (normal)
Aborted
```

----------------------------------------

TITLE: Cross Compilation Command for Rust using Tomatoware
DESCRIPTION: This text snippet provides the complete shell command to cross-compile Rust programs for armv7-unknown-linux-uclibceabi. It sets environment variables for the C compiler and linker and uses Cargo for the build process. Ensure the Tomatoware toolchain is correctly installed and available in the PATH.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabi.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
CC_armv7_unknown_linux_uclibceabi=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \
CXX_armv7_unknown_linux_uclibceabi=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-g++ \
AR_armv7_unknown_linux_uclibceabi=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-ar \
CFLAGS_armv7_unknown_linux_uclibceabi=\"-march=armv7-a -mtune=cortex-a9\" \
CXXFLAGS_armv7_unknown_linux_uclibceabi=\"-march=armv7-a -mtune=cortex-a9\" \
CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABI_LINKER=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \
CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABI_RUSTFLAGS='-Clink-arg=-s -Clink-arg=-Wl,--dynamic-linker=/mmc/lib/ld-uClibc.so.1 -Clink-arg=-Wl,-rpath,/mmc/lib' \
cargo +stage2 \
build \
--target armv7-unknown-linux-uclibceabi \
--release
```

----------------------------------------

TITLE: Demonstrating Enhanced Reference Pattern Matching in Rust Edition 2024
DESCRIPTION: This example illustrates the experimental `ref_pat_eat_one_layer_2024_structural` feature that allows using `&` patterns in more contexts, including matching against `ref` binding mode and `&mut` references.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/ref-pat-eat-one-layer-2024-structural.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(ref_pat_eat_one_layer_2024_structural)]
#![allow(incomplete_features)]
#
# // Tests type equality in a way that avoids coercing `&&T` or `&mut T` to `&T`.
# trait Eq<T> {}
# impl<T> Eq<T> for T {}
# fn has_type<T>(_: impl Eq<T>) {}

// `&` can match against a `ref` binding mode instead of a reference type:
let (x, &y) = &(0, 1);
has_type::<&u8>(x);
has_type::<u8>(y);

// `&` can match against `&mut` references:
let &z = &mut 2;
has_type::<u8>(z);
```

----------------------------------------

TITLE: Demonstrating Coroutines Usage in Rust
DESCRIPTION: This code snippet illustrates how to use coroutines, an unstable feature in Rust. It shows the declaration of a coroutine, yielding a value, and resuming execution. The example also demonstrates how to handle different coroutine states.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/the-unstable-book.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]

use std::ops::{Coroutine, CoroutineState};
use std::pin::Pin;

fn main() {
    let mut coroutine = #[coroutine] || {
        yield 1;
        return "foo"
    };

    match Pin::new(&mut coroutine).resume(()) {
        CoroutineState::Yielded(1) => {}
        _ => panic!("unexpected value from resume"),
    }
    match Pin::new(&mut coroutine).resume(()) {
        CoroutineState::Complete("foo") => {}
        _ => panic!("unexpected value from resume"),
    }
}
```

----------------------------------------

TITLE: Invalid Generic Receiver Type Example 1 (Using Generic Type Parameter)
DESCRIPTION: Example of invalid code that generates error E0801 by attempting to use a generic type parameter R as the receiver type for a method, which is not allowed in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0801.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo;

impl Foo {
    fn foo<R: std::ops::Deref<Target=Self>>(self: R) {}
}
```

----------------------------------------

TITLE: Correct Enum Field Update Pattern
DESCRIPTION: Fixed version of the code that properly updates enum variant fields by explicitly specifying the fields to keep and update. This approach uses pattern matching to extract and reuse the desired fields.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0436.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
enum PublicationFrequency {
    Weekly,
    SemiMonthly { days: (u8, u8), annual_special: bool },
}

fn one_up_competitor(competitor_frequency: PublicationFrequency)
                     -> PublicationFrequency {
    match competitor_frequency {
        PublicationFrequency::Weekly => PublicationFrequency::SemiMonthly {
            days: (1, 15), annual_special: false
        },
        PublicationFrequency::SemiMonthly{ days, .. } =>
            PublicationFrequency::SemiMonthly {
                days, annual_special: true // ok!
        }
    }
}
```

----------------------------------------

TITLE: Erroneous Closure Self-Reference in Rust
DESCRIPTION: Demonstrates an invalid attempt to pass a closure that references its own type as an argument. Rust prevents closures from directly referencing their own type to maintain tractable closure inference.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0644.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn fix<F>(f: &F)
  where F: Fn(&F)
{
    f(&f);
}

fn main() {
    fix(&|y| {
        // Here, when `x` is called, the parameter `y` is equal to `x`.
    });
}
```

----------------------------------------

TITLE: Inlining a Function Call in Rust
DESCRIPTION: Demonstrates inlining a function call by replacing it with its implementation. This example shows how Option::unwrap() gets expanded into its actual match expression implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_66

LANGUAGE: rust
CODE:
```
fn foo(name: Option<&str>) {
    let name = name.unwrap┃();
}
```

LANGUAGE: rust
CODE:
```
fn foo(name: Option<&str>) {
    let name = match name {
            Some(val) => val,
            None => panic!("called `Option::unwrap()` on a `None` value"),
        };
}
```

----------------------------------------

TITLE: Configuring disallowed-methods
DESCRIPTION: Defines a list of disallowed methods, specified as fully qualified paths. Defaults to an empty list (`[]`). Allows enforcing rules against the use of specific methods.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_10



----------------------------------------

TITLE: Tracing Macro Expansion in Rust
DESCRIPTION: This code snippet demonstrates how to use the `trace_macros` feature in Rust. It enables macro tracing, prints a simple message using the `println!` macro, and then disables tracing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/trace-macros.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(trace_macros)]

fn main() {
    trace_macros!(true);
    println!("Hello, Rust!");
    trace_macros!(false);
}
```

----------------------------------------

TITLE: Macro By Example Definition (Rust)
DESCRIPTION: This example shows a simple `macro_rules!` definition, illustrating how metavariables are used to bind to token trees at compile time.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/macro-expansion.md#_snippet_5

LANGUAGE: rust
CODE:
```
macro_rules! printer {
    (print $mvar:ident) => {
        println!("{}", $mvar);
    };
    (print twice $mvar:ident) => {
        println!("{}", $mvar);
        println!("{}", $mvar);
    };
}
```

----------------------------------------

TITLE: Configuring Missing Docs in Crate Items in Rust
DESCRIPTION: This option controls whether to check for missing documentation **only** in items visible within the current crate (e.g., `pub(crate)` items). It affects the `missing_docs_in_private_items` lint. The default value is `false`, meaning all documentation will be checked by default. The input is a boolean.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_32



----------------------------------------

TITLE: Cargo Configuration for OpenHarmony Targets
DESCRIPTION: This TOML configuration file configures Cargo to use the specified archiver (ar) and linker for the aarch64, armv7, and x86_64 OpenHarmony targets.  This ensures the correct tools from the OpenHarmony SDK are used during compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/openharmony.md#2025-04-21_snippet_7

LANGUAGE: toml
CODE:
```
[target.aarch64-unknown-linux-ohos]
ar = "/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ar"
linker = "/path/to/aarch64-unknown-linux-ohos-clang.sh"

[target.armv7-unknown-linux-ohos]
ar = "/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ar"
linker = "/path/to/armv7-unknown-linux-ohos-clang.sh"

[target.x86_64-unknown-linux-ohos]
ar = "/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ar"
linker = "/path/to/x86_64-unknown-linux-ohos-clang.sh"
```

----------------------------------------

TITLE: Complete Auto Trait Implementation Example in Rust
DESCRIPTION: Shows a complete example of defining and using an auto trait with positive and negative implementations, demonstrating compile-time validation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/auto-traits.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(negative_impls)]
#![feature(auto_traits)]

auto trait Valid {}

struct True;
struct False;

impl !Valid for False {}

struct MaybeValid<T>(T);

fn must_be_valid<T: Valid>(_t: T) { }

fn main() {
    // works
    must_be_valid( MaybeValid(True) );

    // compiler error - trait bound not satisfied
    // must_be_valid( MaybeValid(False) );
}
```

----------------------------------------

TITLE: Correcting Specialization in Rust (Rust)
DESCRIPTION: This Rust code snippet provides a corrected version of trait specialization implementation. It correctly marks all necessary trait methods as default in earlier implementations, allowing subsequent specializations to safely override them. This resolves the issue of specialization conflicts by ensuring that overridden methods are appropriately defined as defaults in parent implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0520.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(specialization)]

trait SpaceLlama {
    fn fly(&self);
}

// applies to all T
impl<T> SpaceLlama for T {
    default fn fly(&self) {} // This is a parent implementation.
}

// applies to all `Clone` T; overrides the previous impl
impl<T: Clone> SpaceLlama for T {
    default fn fly(&self) {} // This is a parent implementation but was
                             // previously not a default one, causing the error
}

// applies to i32, overrides the previous two impls
impl SpaceLlama for i32 {
    fn fly(&self) {} // And now that's ok!
}

```

----------------------------------------

TITLE: Auto Trait Implementation Syntax in Rust
DESCRIPTION: Shows the syntax for explicit positive and negative implementations of auto traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/auto-traits.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
impl<...> AutoTrait for StructName<..> { }
impl<...> !AutoTrait for StructName<..> { }
```

----------------------------------------

TITLE: Demonstrating Const Trait Method Declaration Error in Rust
DESCRIPTION: This code snippet illustrates the error that occurs when attempting to declare a trait method as const. It shows both the incorrect trait declaration and implementation, which will result in compilation errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0379.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    const fn bar() -> u32; // error!
}

impl Foo for () {
    const fn bar() -> u32 { 0 } // error!
}
```

----------------------------------------

TITLE: Invalid SIMD Tuple Struct Implementation
DESCRIPTION: Example showing incorrect usage of #[repr(simd)] attribute with non-machine type (String). This code fails compilation with error E0077 because SIMD operations require machine types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0077.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(repr_simd)]

#[repr(simd)]
struct Bad([String; 2]); // error!
```

----------------------------------------

TITLE: Complex Let Statement with Type and Expression Line Breaking
DESCRIPTION: Illustrates advanced formatting for let statements with complex types and multi-line expressions
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/statements.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
let Foo {
    f: abcd,
    g: qwer,
}: Foo<Bar> =
    Foo { f, g };
```

----------------------------------------

TITLE: Configuring rust-analyzer for Helix with Bash
DESCRIPTION: This snippet contains the command for copying the rust-analyzer configuration for Helix and describes the requirement for managing the custom toolchain.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_12

LANGUAGE: sh
CODE:
```
Copy [`etc/rust_analyzer_helix.toml`] to `.helix/languages.toml` in the project root directory.
```

LANGUAGE: sh
CODE:
```
run `./miri toolchain -c rust-analyzer`
```

----------------------------------------

TITLE: Valid Empty Match Expression with Empty Type in Rust
DESCRIPTION: This code demonstrates a valid use case for an empty match expression. Since the matched value 'x' is of an empty type (enum Empty), having no match arms is acceptable because there are no possible values to match against.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0002.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum Empty {}

fn foo(x: Empty) {
    match x {
        // empty
    }
}
```

----------------------------------------

TITLE: Demonstrating FnOnce Quirk in Async Closures (Rust)
DESCRIPTION: This snippet illustrates a situation where the closure upvar analysis infers upvars that are too relaxed for the coroutine-closure's child coroutine, resulting in borrow-checker errors. It shows how forcing a closure to AsyncFnOnce requires by-move capture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/coroutine-closures.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn force_fnonce<T: async FnOnce()>(t: T) -> T { t }

let x = String::new();
let c = force_fnonce(async move || {
    println!("{x}");
});
```

----------------------------------------

TITLE: Fixing Enum Overflow by Reordering Variants
DESCRIPTION: Alternative solution showing how to fix the overflow by reordering enum variants to place the maximum value at the end.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0370.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#[repr(i64)]
enum Foo {
    Y = 0, // ok!
    X = 0x7fffffffffffffff,
}
```

----------------------------------------

TITLE: Preferred Match Pattern Formatting in Rust
DESCRIPTION: The recommended way to format match patterns in Rust, showing proper vertical bar placement between pattern alternatives and correct indentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_18

LANGUAGE: rust
CODE:
```
match foo {
    foo => bar,
    a_very_long_pattern
    | another_pattern
    | yet_another_pattern
    | a_fourth_pattern => {
        ...
    }
}
```

----------------------------------------

TITLE: Merging Test Profile Data with llvm-profdata
DESCRIPTION: This command merges multiple `.profraw` files generated by test runs into a single `.profdata` file using `llvm-profdata`. This indexed file is crucial for generating comprehensive coverage reports. The command assumes a pattern like `default_*.profraw` for input files.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_11

LANGUAGE: shell
CODE:
```
$ llvm-profdata merge -sparse default_*.profraw -o json5format.profdata
```

----------------------------------------

TITLE: Cross-compiling with Cargo for s390x
DESCRIPTION: This snippet shows how to cross-compile a Rust crate for the `s390x-unknown-linux-gnu` target using Cargo. By specifying the `--target` flag, Cargo will build the crate using the appropriate toolchain for the target architecture. This allows you to create executables that can run on s390x Linux systems.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/s390x-unknown-linux-gnu.md#2025-04-21_snippet_2

LANGUAGE: Bash
CODE:
```

```bash
cargo build --target s390x-unknown-linux-gnu
```

```

----------------------------------------

TITLE: Trait Definition with Associated Type in Rust
DESCRIPTION: This code defines a trait named `Identity` with an associated type `Out` and a method `foo`.  The associated type allows the trait to define a type that is related to the implementing type. The ellipsis represents the missing implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/variance.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
"trait Identity { type Out; fn foo(&self); }"
```

----------------------------------------

TITLE: Handling Closures as Method Receivers in Rust
DESCRIPTION: This code showcases the fix for adding parentheses around closures when they are used as method receivers, lack a block body, and end with a dot. This ensures code like `|| (10.).method()` and similar examples are correctly formatted by rustfmt. This enhancement improves the readability and correctness of formatted code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_12

LANGUAGE: rust
CODE:
```
fn main() {
    || (10.).method();
    (|| ..).method();
    (|| 1..).method();
}
```

----------------------------------------

TITLE: Resolving E0228 Error by Explicitly Specifying Trait Object Lifetime in Rust
DESCRIPTION: This code snippet shows how to resolve the E0228 error by explicitly specifying the lifetime for the trait object in the type alias. It demonstrates the correct way to use trait objects with multiple lifetime bounds in generic structs.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0228.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Trait { }

struct TwoBounds<'a, 'b, T: Sized + 'a + 'b> {
    x: &'a i32,
    y: &'b i32,
    z: T,
}

type Foo<'a, 'b> = TwoBounds<'a, 'b, dyn Trait + 'b>;
```

----------------------------------------

TITLE: Rustfmt Emit Options Example
DESCRIPTION: Example command showing how to change Rustfmt's output format using the --emit flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/README.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
cargo fmt -- --emit files
```

----------------------------------------

TITLE: Applying Conditional Compilation for Documentation in Rust
DESCRIPTION: Demonstrates how to use the `#[cfg(doc)]` attribute in Rust to ensure items are included in documentation regardless of target platform. It displays examples of platform-specific structs that are documented across different OS contexts.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/advanced-features.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"/// Token struct that can only be used on Windows.\n#[cfg(any(windows, doc))]\npub struct WindowsToken;\n/// Token struct that can only be used on Unix.\n#[cfg(any(unix, doc))]\npub struct UnixToken;"
```

----------------------------------------

TITLE: Incorrect Drop Implementation for Generic Type in Rust
DESCRIPTION: This example shows an erroneous attempt to implement the Drop trait for a specialized generic type. The code fails because Drop cannot be specialized for only a subset of type implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0367.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {}

struct MyStruct<T> {
    t: T
}

impl<T: Foo> Drop for MyStruct<T> {
    fn drop(&mut self) {}
}
```

----------------------------------------

TITLE: Configuring rust-analyzer Performance and Project Settings in JSON
DESCRIPTION: Includes settings controlling performance-related limits and project discovery for rust-analyzer. Covers linked projects to override auto-discovery, number of worker threads for the main loop, LRU cache capacities for stored syntax trees and queries, and notification settings for certain warnings like missing Cargo.toml files. Such tuning helps optimize resource usage and control project scopes in editor environments committing Rust source. Inputs are null, integer, boolean, or array values, altering internal rust-analyzer behavior and memory consumption.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  "rust-analyzer.linkedProjects": [],
  "rust-analyzer.lru.capacity": null,
  "rust-analyzer.lru.query.capacities": {},
  "rust-analyzer.notifications.cargoTomlNotFound": true,
  "rust-analyzer.numThreads": null
}
```

----------------------------------------

TITLE: Demonstrating Invalid Sub-binding in Rust Pattern Matching
DESCRIPTION: This code snippet shows an example of a previously disallowed sub-binding pattern in Rust. It attempts to use a ref binding with a nested pattern, which could potentially violate memory safety.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0303.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
match Some("hi".to_string()) {
    ref op_string_ref @ Some(s) => {},
    None => {},
}
```

----------------------------------------

TITLE: Calling stdcall_fn_9 - Rust
DESCRIPTION: This snippet calls the `stdcall_fn_9` function with an integer (1) and a floating-point number (3.0) as arguments in Rust.  It demonstrates calling with the `stdcall` convention. The output will depend on the functions implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_8

LANGUAGE: Rust
CODE:
```
stdcall_fn_9(1, 3.0)
```

----------------------------------------

TITLE: Higher Ranked Function Pointer Example
DESCRIPTION: Demonstrates the complexities of handling bound variables in function pointers with different lifetimes
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/instantiating_binders.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<'a>(a: &'a u32) -> &'a u32 {
    a
}
fn bar<T>(a: fn(&u32) -> T) -> T {
    a(&10)
}

fn main() {
    let higher_ranked_fn_ptr = foo as for<'a> fn(&'a u32) -> &'a u32;
    let references_bound_vars = bar(higher_ranked_fn_ptr);
}
```

----------------------------------------

TITLE: Alternative Pattern Matching Using Struct Field Index
DESCRIPTION: Demonstrates an alternative approach to pattern match a tuple variant using struct pattern syntax with numeric field indices.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0769.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
# enum E {
#     A(i32),
# }
# let e = E::A(42);
match e {
    E::A { 0: number } => { // ok!
        println!("{}", number);
    }
}
```

----------------------------------------

TITLE: Demonstrate Unique Lifetime Parameters in Opaque Types in Rust
DESCRIPTION: This snippet exemplifies the uniqueness restriction for lifetime parameters in opaque types, showcasing valid and invalid usages. Lifetimes must be unique and not 'static to avoid ambiguities in type inference. Key dependencies include the understanding of lifetime parameters and their role in generic type definitions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/opaque-types-region-inference-restrictions.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
type Opaque<'x> = impl Sized + 'x;
type Inv<'a> = Option<*mut &'a ()>;

fn good<'a>() -> Opaque<'a> { Inv::<'static>::None }

fn bad() -> Opaque<'static> { Inv::<'static>::None }
//~^ ERROR

```

LANGUAGE: rust
CODE:
```
type Opaque<'x, 'y> = impl Trait<'x, 'y>;

fn good<'a, 'b>() -> Opaque<'a, 'b> {}

fn bad<'a>() -> Opaque<'a, 'a> {}
//~^ ERROR

```

----------------------------------------

TITLE: Illustrating Rust E0201 Error with Duplicate Associated Items
DESCRIPTION: This example demonstrates the E0201 error that occurs when defining duplicate associated functions, methods, or types within the same implementation. The code shows errors when defining a duplicate function 'bar', duplicate method 'baz', and duplicate associated type 'Quux'.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0201.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo(u8);

impl Foo {
    fn bar(&self) -> bool { self.0 > 5 }
    fn bar() {} // error: duplicate associated function
}

trait Baz {
    type Quux;
    fn baz(&self) -> bool;
}

impl Baz for Foo {
    type Quux = u32;

    fn baz(&self) -> bool { true }

    // error: duplicate method
    fn baz(&self) -> bool { self.0 > 5 }

    // error: duplicate associated type
    type Quux = u32;
}
```

----------------------------------------

TITLE: Corrected Example: Matching Method Return Value
DESCRIPTION: This code shows the correct way to match against the return value of a method. It first binds the matched value to a variable (e.g., `x`) and then uses a guard to compare the bound value with the result of calling the method. This allows for a valid match expression.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0533.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```
struct Tortoise;

impl Tortoise {
    fn turtle(&self) -> u32 { 0 }
}

match 0u32 {
    x if x == Tortoise.turtle() => {} // Bound into `x` then we compare it!
    _ => {}
}
```
```

----------------------------------------

TITLE: Implementing the Not Trait for an Enum in Rust
DESCRIPTION: This snippet showcases the implementation of the Not trait for the Question enum, allowing the use of the unary 'not' operator. The implementation maps Yes to false and No to true, satisfying the required trait contract. The code also includes assertions to test the implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0600.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
use std::ops::Not;

enum Question {
    Yes,
    No,
}

// We implement the `Not` trait on the enum.
impl Not for Question {
    type Output = bool;

    fn not(self) -> bool {
        match self {
            Question::Yes => false, // If the `Answer` is `Yes`, then it
                                    // returns false.
            Question::No => true, // And here we do the opposite.
        }
    }
}

assert_eq!(!Question::Yes, false);
assert_eq!(!Question::No, true);
```

----------------------------------------

TITLE: Implementing One-step Normalization with NormalizesTo Goals in Rust
DESCRIPTION: This code snippet shows how NormalizesTo goals are evaluated in the new solver. It demonstrates the special handling of these goals, where they are tracked separately from other goals and their ambiguous nested goals are returned to the caller.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/normalization.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// Source: try-eval-norm
if let Some(goal) = self.pending_norms.pop() {
    let NormalizesTo { alias, ty } = goal.goal;
    match self.evaluate_norm(alias, ty) {
        Ok(()) => (),
        Err(NoSolution) => return Ok(StepResult::NoSolution),
        Err(Ambiguous(mut goals)) => {
            self.ambiguous_goals.append(&mut goals);
            return Ok(StepResult::Continues);
        }
    }
}
```

----------------------------------------

TITLE: Coroutine State Machine Implementation Example in Rust
DESCRIPTION: Shows how coroutines are compiled into state machines with an example implementation including state transitions and storage.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/coroutines.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#![feature(arbitrary_self_types, coroutine_trait)]

use std::ops::{Coroutine, CoroutineState};
use std::pin::Pin;

fn main() {
    let ret = "foo";
    let mut coroutine = {
        enum __Coroutine {
            Start(&'static str),
            Yield1(&'static str),
            Done,
        }

        impl Coroutine for __Coroutine {
            type Yield = i32;
            type Return = &'static str;

            fn resume(mut self: Pin<&mut Self>, resume: ()) -> CoroutineState<i32, &'static str> {
                use std::mem;
                match mem::replace(&mut *self, __Coroutine::Done) {
                    __Coroutine::Start(s) => {
                        *self = __Coroutine::Yield1(s);
                        CoroutineState::Yielded(1)
                    }

                    __Coroutine::Yield1(s) => {
                        *self = __Coroutine::Done;
                        CoroutineState::Complete(s)
                    }

                    __Coroutine::Done => {
                        panic!("coroutine resumed after completion")
                    }
                }
            }
        }

        __Coroutine::Start(ret)
    };

    Pin::new(&mut coroutine).resume(());
    Pin::new(&mut coroutine).resume(());
}
```

----------------------------------------

TITLE: Addressing Type Mismatch in Closure Arguments - Rust
DESCRIPTION: This snippet illustrates an error caused by a type mismatch in closure arguments, where a function expects a closure with an `i32` argument, but receives one with a `&str` argument instead. The corrected version demonstrates the closure being aligned with the expected `i32` type. Ensure that the types align with the function's requirements or are inferable.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0631.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<F: Fn(i32)>(f: F) {
}

fn main() {
    foo(|x: &str| {});
}
```

LANGUAGE: rust
CODE:
```
fn foo<F: Fn(i32)>(f: F) {
}

fn main() {
    foo(|x: i32| {});
}
```

----------------------------------------

TITLE: GitHub Actions Job Configuration for Miri (YAML)
DESCRIPTION: Example YAML configuration for a GitHub Actions workflow job that sets up the necessary environment and runs Miri tests. It includes steps for checking out code, installing Miri components, performing Miri's initial setup, and executing the test suite.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_14

LANGUAGE: YAML
CODE:
```
miri:
  name: "Miri"
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v4
    - name: Install Miri
      run: |
        rustup toolchain install nightly --component miri
        rustup override set nightly
        cargo miri setup
    - name: Test with Miri
      run: cargo miri test
```

----------------------------------------

TITLE: Correct Type Parameter Default in Rust
DESCRIPTION: This code snippet shows the corrected version of the Foo struct where type parameters are properly ordered. U is declared before T, allowing T to use U as its default value.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0128.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo<U = (), T = U> {
    field1: T,
    field2: U,
}
```

----------------------------------------

TITLE: Adding Label to Loop in Rust
DESCRIPTION: This assist adds a label to a loop. It inserts a label before the loop and updates break and continue statements to use the label.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
fn main() {
    loop {
        break;
        continue;
    }
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    'l: loop {
        break 'l;
        continue 'l;
    }
}
```

----------------------------------------

TITLE: Unconstrained Const Parameter Error Example
DESCRIPTION: This code demonstrates an E0207 error with a const parameter that is not constrained by the implementing type, implemented trait, or associated type binding.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0207.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
struct Foo;

impl<const T: i32> Foo {
    // error: the const parameter `T` is not constrained by the impl trait, self
    // type, or predicates [E0207]
    fn get(&self) -> i32 {
        i32::default()
    }
}
```

----------------------------------------

TITLE: Demonstrating Link Arg Attribute Usage in Rust
DESCRIPTION: This code snippet shows how to use the `link_arg_attribute` feature to pass arguments to the linker. It demonstrates preserving the order of link attributes within a single extern block, including both link-arg and static link kinds.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/link-arg-attribute.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(link_arg_attribute)]

#[link(kind = "link-arg", name = "--start-group")]
#[link(kind = "static", name = "c")]
#[link(kind = "static", name = "gcc")]
#[link(kind = "link-arg", name = "--end-group")]
extern "C" {}
```

----------------------------------------

TITLE: Example Test File for foo_functions Lint in Rust
DESCRIPTION: A UI test file for the 'foo_functions' lint that checks function names. It includes test cases for implementations, trait methods, and plain functions with annotations to mark expected lint triggers.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_0

LANGUAGE: rust
CODE:
```
#![allow(unused)]
#![warn(clippy::foo_functions)]

// Impl methods
struct A;
impl A {
    pub fn fo(&self) {}
    pub fn foo(&self) {}
    //~^ foo_functions
    pub fn food(&self) {}
}

// Default trait methods
trait B {
    fn fo(&self) {}
    fn foo(&self) {}
    //~^ foo_functions
    fn food(&self) {}
}

// Plain functions
fn fo() {}
fn foo() {}
//~^ foo_functions
fn food() {}

fn main() {
    // We also don't want to lint method calls
    foo();
    let a = A;
    a.foo();
}
```

----------------------------------------

TITLE: Building and running the parameter count mismatch example with CFI
DESCRIPTION: Shell commands demonstrating how to build and run the parameter count mismatch example with CFI protection. With CFI, the invalid function call is detected and the program terminates.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_10

LANGUAGE: shell
CODE:
```
$ RUSTFLAGS="-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi" cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu
   ...
   Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)
    Finished release [optimized] target(s) in 1m 08s
     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-2`
The answer is: 12
With CFI enabled, you should not see the next answer
Illegal instruction
$
```

----------------------------------------

TITLE: Formatting Type Aliases in Rust
DESCRIPTION: Guidelines for formatting type aliases in Rust. Includes examples of single-line format and rules for breaking lines with proper indentation when necessary.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_23

LANGUAGE: rust
CODE:
```
pub type Foo = Bar<T>;

// If multi-line is required
type VeryLongType<T, U: SomeBound>
    = AnEvenLongerType<T, U, Foo<T>>;
```

----------------------------------------

TITLE: Setting Default Theme with rustdoc (Bash)
DESCRIPTION: Shows how to use the `--default-theme` flag to set the initial theme for the generated documentation, allowing customization of the default visual style.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_17

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --default-theme=ayu
```

----------------------------------------

TITLE: Demonstrating Unintended Side Effects of Representation Attributes in Rust
DESCRIPTION: This code snippet illustrates potential unintended consequences when introducing additional structs to accommodate multiple representation attributes. The resulting representations may not be equivalent, which can affect the ABI.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0692.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#[repr(transparent)]
struct Grams(f32);

#[repr(C)]
struct Float(f32);

#[repr(transparent)]
struct Grams2(Float); // this is not equivalent to `Grams` above
```

----------------------------------------

TITLE: Configuring unexpected_cfgs Lint with check-cfg in TOML
DESCRIPTION: Example of using the check-cfg configuration under the lints.rust.unexpected_cfgs section in Cargo.toml. This is useful for statically known custom configurations that aren't dependent on build scripts.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/check-cfg/cargo-specifics.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(has_foo)'] }
```

----------------------------------------

TITLE: Comment Wrapping Enabled Example in Rust
DESCRIPTION: Demonstrates comment formatting when wrap_comments is enabled, showing automatic line breaks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_84

LANGUAGE: rust
CODE:
```
// Lorem ipsum dolor sit amet, consectetur adipiscing elit,
// sed do eiusmod tempor incididunt ut labore et dolore
// magna aliqua. Ut enim ad minim veniam, quis nostrud
// exercitation ullamco laboris nisi ut aliquip ex ea
// commodo consequat.

// Lorem ipsum dolor sit amet, consectetur adipiscing elit,
// sed do eiusmod tempor incididunt ut labore et dolore
// magna aliqua. Ut enim ad minim veniam, quis nostrud
// exercitation ullamco laboris nisi ut aliquip ex ea
// commodo consequat.

// Information on the lorem ipsum can be found at the following url: https://en.wikipedia.org/wiki/Lorem_ipsum. Its text is: lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

/// # This doc comment is a very long header (it starts with a '#'). Had it not been a header it would have been wrapped. But because it is a header, it will not be. That is because wrapping a markdown header breaks it.
struct Foo {}
```

----------------------------------------

TITLE: Erroneous Type Aliases with Unused Type Parameters in Rust
DESCRIPTION: Examples of Rust code that will trigger the E0091 compiler error due to having unused type parameters in type alias declarations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0091.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
type Foo<T> = u32; // error: type parameter `T` is never used
// or:
type Foo<A, B> = Box<A>; // error: type parameter `B` is never used
```

----------------------------------------

TITLE: Controlling Documentation Visibility with #[doc(hidden)]
DESCRIPTION: This code snippet illustrates the use of #[doc(hidden)] to exclude items from documentation, facilitating a cleaner interface for end-users.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
"""rust,no_run\n#[doc(hidden)]\n"
```

----------------------------------------

TITLE: Correct Transmute Between Same-Sized Types
DESCRIPTION: Shows two valid ways to use transmute or directly pass values when type sizes are compatible in Rust
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0512.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn takes_u8(_: u8) {}

fn main() {
    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!
    // or:
    unsafe { takes_u8(0u8); } // ok!
}
```

----------------------------------------

TITLE: Setting Codegen Units in Rust
DESCRIPTION: This flag controls the maximum number of code generation units the crate is split into. Increasing this number can speed up compile times by enabling more parallelism, but may result in slower code. A value of 1 may improve code performance but might slow down compilation. The default value is 16 for non-incremental builds and 256 for incremental builds.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_1



----------------------------------------

TITLE: Defining Test State Change Structure in TypeScript
DESCRIPTION: Defines ChangeTestStateParams, which tracks state changes within individual tests using a tag-driven approach. It allows integration environments to monitor and adjust test states facilitating diagnostics and ensuring consistent synchronization with server-side testing mechanisms.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
type TestState = { tag: "passed" }
    | {
        tag: "failed";
        message: string;
    }
    | { tag: "started" }
    | { tag: "enqueued" }
    | { tag: "skipped" };

interface ChangeTestStateParams {
    testId: string;
    state: TestState;
}
```

----------------------------------------

TITLE: Implementing a Trait with Generic Parameters
DESCRIPTION: This snippet exemplifies how to implement a trait for a generic type Vec<T>. It emphasizes obtaining the type of 'Self' within the trait implementation and the use of the 'instantiate_identity' method on EarlyBinder. The Rust standard library is required for the trait and vector functionalities. The outcome is the type of 'b' which aligns with the type of the Vec<T> implementation without modification.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/early_binder.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
impl<T> Trait for Vec<T> {
    fn foo(&self, b: Self) {}
}
```

----------------------------------------

TITLE: Using Guards as Alternative to Generic Parameters in Pattern Matching
DESCRIPTION: This code snippet demonstrates the recommended alternative approach using guards in match statements when working with constants that depend on generic parameters or statics. Guards allow conditionally matching values without the compiler needing to prove exhaustiveness.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0158.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Trait {
    const X: char;
}

static FOO: char = 'j';

fn test<A: Trait, const Y: char>(arg: char) {
    match arg {
        c if c == A::X => println!("A::X"),
        c if c == Y => println!("Y"),
        c if c == FOO => println!("FOO"),
        _ => ()
    }
}
```

----------------------------------------

TITLE: Building and running the type mismatch example with CFI
DESCRIPTION: Shell commands demonstrating how to build and run the type mismatch example with CFI protection. With CFI, the invalid function call with mismatched types is detected and the program terminates.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_13

LANGUAGE: shell
CODE:
```
$ RUSTFLAGS="-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi" cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu
   ...
   Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)
    Finished release [optimized] target(s) in 1m 07s
     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-3`
The answer is: 12
With CFI enabled, you should not see the next answer
Illegal instruction
$
```

----------------------------------------

TITLE: Setting up Docker Environment for Rust Build (Bash)
DESCRIPTION: Starts an Ubuntu 22.04 Docker container interactively. Sets the `CC` and `CXX` environment variables to `clang++`. Updates the package list and installs essential build dependencies including `git`, `cmake`, `clang`, `build-essential`, etc., required to build Rust within the container.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/installation.md#_snippet_4

LANGUAGE: bash
CODE:
```
docker run -it ubuntu:22.04
export CC=clang CXX=clang++
apt update
apt install wget vim python3 git curl libssl-dev pkg-config lld ninja-build cmake clang build-essential
```

----------------------------------------

TITLE: Collapsible-If Pattern with Functional Composition
DESCRIPTION: Example of how the collapsible-if pattern could be simplified using proposed functional composition for patterns. This approach allows defining reusable subpatterns that can be shared between different lints.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_17

LANGUAGE: rust
CODE:
```
pattern!{
    fn expr_or_semi(expr: Expr) -> Stmt {
        Expr(expr) | Semi(expr)
    }
    fn if_or_if_let(then: Block, else: Opt<Expr>) -> Expr {
        If(_, then, else) | IfLet(then, else)
    }
    pat_if_else: Expr =
        if_or_if_let(
            _,
            Block_(
                Block(
                    expr_or_semi( if_or_if_let(_, _?)#else_ )
                )#block_inner
            )#block
        )
}
```

----------------------------------------

TITLE: Correct Casting to Unsized Type Reference in Rust
DESCRIPTION: This snippet demonstrates the correct way to cast to an unsized type in Rust by using a reference. Unlike the error example, this approach uses a reference to ensure that the size of the type can be managed properly at runtime. This allows the Rust compiler to handle the size-related constraints correctly, demonstrating a seamless transition from an array to a slice reference.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0620.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let x = &[1_usize, 2] as &[usize]; // ok!
```

----------------------------------------

TITLE: Demonstrating Type Mismatch Errors in Rust
DESCRIPTION: This code snippet illustrates various scenarios where type mismatches can occur in Rust, triggering the E0308 error. It shows examples of mismatched types in function arguments, conditional statements, and variable assignments.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0308.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn plus_one(x: i32) -> i32 {
    x + 1
}

plus_one("Not a number");
//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`

if "Not a bool" {
// ^^^^^^^^^^^^ expected `bool`, found `&str`
}

let x: f32 = "Not a float";
//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`
//     |
//     expected due to this
```

----------------------------------------

TITLE: Defining Structs with Intra-Doc Links in Rust
DESCRIPTION: This snippet demonstrates how to define structs in Rust with intra-doc links pointing to the documentation of other items. It highlights different linking syntaxes supported by rustdoc, such as standard markdown links and square brackets for referencing items directly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/linking-to-items-by-name.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
/// This struct is not [Bar]
pub struct Foo1;

/// This struct is also not [bar](Bar)
pub struct Foo2;

/// This struct is also not [bar][b]
///
/// [b]: Bar
pub struct Foo3;

/// This struct is also not [`Bar`]
pub struct Foo4;

/// This struct *is* [`Bar`]!
pub struct Bar;
```

----------------------------------------

TITLE: Matching Exclusive Ranges in Rust
DESCRIPTION: This snippet demonstrates an erroneous use of an exclusive range pattern in Rust, which results in a compile-time error due to an invalid range definition. The snippet illustrates how the Rust compiler checks that the range is non-empty, enforcing that the start of the range must be less than the end.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0579.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"""compile_fail,E0579\n\nfn main() {\n    match 5u32 {\n        // This range is ok, albeit pointless.\n        1..2 => {}\n        // This range is empty, and the compiler can tell.\n        5..5 => {} // error!\n    }\n}\n"
```

----------------------------------------

TITLE: Removing Newlines Between Where Clause Bounds in Rust
DESCRIPTION: This snippet showcases the rustfmt configuration `version = Two` behavior of removing newlines between where clause bounds. The example function `foo` demonstrates multiple where clause bounds that will be formatted without newlines between them when the specified version is used. This configuration option affects the style of where clauses in Rust code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_14

LANGUAGE: rust
CODE:
```
fn foo<T>(_: T)
where
    T: std::fmt::Debug,
    T: std::fmt::Display,
{
}
```

----------------------------------------

TITLE: Declaring Raw String Literal in Rust
DESCRIPTION: This snippet demonstrates how to declare a raw string literal in Rust using `r#"..."#` syntax. It shows that raw strings can contain quotes and other characters without needing escapes. Dependencies are minimal, only requiring Rust's standard syntax. The key purpose is to create a raw string with embedded quotes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/raw_strings.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
STRING "r###\"this is a r##\"raw\"## string\"###"
```

----------------------------------------

TITLE: Setting RUSTC_LOG environment variable to filter function calls by arguments with regex
DESCRIPTION: This bash command sets the `RUSTC_LOG` environment variable to enable tracing for the `do_mir_borrowck` function, but only when the `id` argument matches the provided regular expression. This allows filtering function calls based on their arguments for more targeted debugging.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tracing.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
RUSTC_LOG=[do_mir_borrowck{id=\.\*from_utf8_unchecked\.\*}]
```

----------------------------------------

TITLE: Combining Multiple #[doc] Attributes
DESCRIPTION: This code illustrates how to concatenate multiple #[doc] attributes to form a single documentation comment using the collapse-docs pass in macros.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
"""rust,no_run\n#[doc = \"This is\"]\n#[doc = \" a \"]\n#[doc = \"doc comment\"]\n# fn f() {}\n"
```

----------------------------------------

TITLE: Demonstrating Invalid Trait Implementation in Rust
DESCRIPTION: Shows erroneous code examples where traits are implemented redundantly, either through direct implementation or through trait inheritance. Includes cases where a trait is implemented on itself and where supertraits are explicitly implemented despite being automatically available.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0371.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo { fn foo(&self) { } }
trait Bar: Foo { }
trait Baz: Bar { }

impl Bar for Baz { } // error, `Baz` implements `Bar` by definition
impl Foo for Baz { } // error, `Baz` implements `Bar` which implements `Foo`
impl Baz for Baz { } // error, `Baz` (trivially) implements `Baz`
impl Baz for Bar { } // Note: This is OK
```

----------------------------------------

TITLE: Moving Out of Box with Deref Patterns - Rust
DESCRIPTION: Shows how the `deref_patterns` feature allows moving out of the value contained within a smart pointer like `Box` directly during pattern matching. The inner value is bound to a variable and can then be used or dropped. Requires the `deref_patterns` feature gate.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/deref-patterns.md#_snippet_2

LANGUAGE: Rust
CODE:
```
# #![feature(deref_patterns)]
# #![allow(incomplete_features)]
struct NoCopy;
// Match exhaustiveness analysis is not yet implemented.
let deref!(x) = Box::new(NoCopy) else { unreachable!() };
drop::<NoCopy>(x);
```

----------------------------------------

TITLE: Visual Style Alignment for Function Calls in Rust
DESCRIPTION: Demonstrates the 'Visual' alignment style for function calls. Arguments after the first line are aligned with the start of the first argument.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_32

LANGUAGE: rust
CODE:
```
fn main() {
    lorem("lorem",
          "ipsum",
          "dolor",
          "sit",
          "amet",
          "consectetur",
          "adipiscing",
          "elit");
}
```

----------------------------------------

TITLE: Self-Referential Supertrait Method Example in Rust
DESCRIPTION: Shows a potential supertrait implementation that, while dyn-compatible on its own, becomes problematic when used with Self as a type parameter because the concrete return type cannot be determined.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_12

LANGUAGE: rust
CODE:
```
trait Super<A: ?Sized> {
    fn get_a(&self) -> &A; // note that this is dyn-compatible!
}
```

----------------------------------------

TITLE: Example Code Causing Runtime Error (Rust)
DESCRIPTION: Provides a Rust code example that is intended to trigger a runtime error ('index out of bounds'). This serves as the context for why the `error-pattern` directive might be needed for testing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_8

LANGUAGE: Rust
CODE:
```
fn main() {
    let a: *const [_] = &[1, 2, 3];
    unsafe {
        let _b = (*a)[3];
    }
}
```

----------------------------------------

TITLE: Blank Line Separation in Rust Functions
DESCRIPTION: Illustrates the guideline for using zero or one blank lines between items and statements within functions to maintain consistent vertical spacing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/README.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn foo() {
    let x = ...;

    let y = ...;
    let z = ...;
}

fn bar() {}
fn baz() {}
```

----------------------------------------

TITLE: Array Literal Formatting in Rust
DESCRIPTION: Guidelines for creating and formatting array literals, including single-line, multi-line, and repeating initializer scenarios
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
fn main() {
    let x = [1, 2, 3];
    let y = vec![a, b, c, d];
    let a = [42; 10];
}
```

----------------------------------------

TITLE: Failed Constant Evaluation Example in Rust Enums
DESCRIPTION: Example showing invalid enum discriminant values that cause compile-time evaluation errors. The first variant attempts an integer overflow with a large shift operation, while the second attempts division by zero.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0080.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum Enum {
    X = (1 << 500),
    Y = (1 / 0),
}
```

----------------------------------------

TITLE: Illustrating FromEnv with a Rust Struct
DESCRIPTION: This Rust code snippet shows the interaction between a `struct` with a `where` clause and the `FromEnv(Type)` domain goal inside of a function. The `loud_insert` function has a `HashSet<K>` as input which will assume `FromEnv(HashSet<K>)` inside the body of our function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/goals-and-clauses.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
"struct HashSet<K> where K: Hash { ... }

fn loud_insert<K>(set: &mut HashSet<K>, item: K) {
    println!(\"inserting!\");
    set.insert(item);
}"
```

----------------------------------------

TITLE: Implementing CoerceUnsized with Invalid Lifetime Bounds in Rust
DESCRIPTION: Example demonstrating an E0476 error when implementing CoerceUnsized trait where lifetime 'b of the source pointer does not outlive lifetime 'a of the target type. This code uses unstable features coerce_unsized and unsize.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0476.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(coerce_unsized)]
#![feature(unsize)]

use std::marker::Unsize;
use std::ops::CoerceUnsized;

// error: lifetime of the source pointer does not outlive lifetime bound of the
//        object type
impl<'a, 'b, T, S> CoerceUnsized<&'a T> for &'b S where S: Unsize<T> {}
```

----------------------------------------

TITLE: Using embed-metadata Flag with rustc
DESCRIPTION: Example of how to use the embed-metadata flag to control metadata inclusion in compiled libraries. When set to 'no', it reduces file size by including only stub metadata in rlib and dylib files.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/embed-metadata.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
## `embed-metadata`

This option instructs `rustc` to include the full metadata in `rlib` and `dylib` crate types. The default value is `yes` (enabled). If disabled (`no`), only stub metadata will be stored in these files, to reduce their size on disk. When using `-Zembed-metadata=no`, you will probably want to use `--emit=metadata` to produce the full metadata into a separate `.rmeta` file.
```

----------------------------------------

TITLE: Running Rust Bootstrap Format (Shell Command)
DESCRIPTION: Executes the Rust project's bootstrap script (`./x`) with the `fmt` command. This is often used in the Rust project to manage toolchains and apply code formatting, and in this context, it's suggested as a way to have bootstrap re-manage submodule checkouts after manual cleanup.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_31

LANGUAGE: console
CODE:
```
./x fmt
```

----------------------------------------

TITLE: Block Style Alignment for Where Predicates in Rust
DESCRIPTION: Shows the default 'Block' alignment style for where predicates. Each predicate is indented as a block with the 'where' keyword on its own line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_37

LANGUAGE: rust
CODE:
```
fn lorem<Ipsum, Dolor, Sit, Amet>() -> T
where
    Ipsum: Eq,
    Dolor: Eq,
    Sit: Eq,
    Amet: Eq,
{
    // body
}
```

----------------------------------------

TITLE: Correcting Type for Variadic Function Call - Rust
DESCRIPTION: This code snippet presents the corrected version of the previous erroneous example, showing the proper casting of a Rust type to a C-compatible type. It demonstrates how to safely call the C variadic function by ensuring that the types match as per the ABI requirements.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0617.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
# use std::os::raw::{c_char, c_int};
# extern "C" {
#     fn printf(format: *const c_char, ...) -> c_int;
# }

unsafe {
    printf("%f\n\0".as_ptr() as _, 0f64); // ok!
}
```

----------------------------------------

TITLE: Configuring Conditional Code Execution with cfg_sanitize in Rust
DESCRIPTION: Demonstrates how to use the cfg_sanitize feature to write code that executes differently based on whether thread or leak sanitizers are enabled. Shows both compile-time (#[cfg]) and runtime (cfg!) conditional examples.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/cfg-sanitize.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(cfg_sanitize)]

#[cfg(sanitize = "thread")]
fn a() {
    // ...
}

#[cfg(not(sanitize = "thread"))]
fn a() {
    // ...
}

fn b() {
    if cfg!(sanitize = "leak") {
        // ...
    } else {
        // ...
    }
}
```

----------------------------------------

TITLE: C Wrapper for Calling Rust Library on QuRT OS (C)
DESCRIPTION: A minimal C program providing an entry point (`main` function) for a QuRT OS application. It declares the `hello` function (expected to be defined in the linked Rust library) and calls it. This wrapper allows the Rust code, compiled as a library, to be executed within the QuRT environment.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/hexagon-unknown-none-elf.md#_snippet_4

LANGUAGE: c
CODE:
```
int hello();

int main() {
    hello();
}
```

----------------------------------------

TITLE: Setting Up C Compiler for RISC-V Target - TOML
DESCRIPTION: This snippet configures the C compiler settings for the RISC-V target in Rust. It includes definitions for the C compiler and related tools necessary for the build process. These settings must be included in the bootstrap.toml file for proper compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv64gc-unknown-linux-musl.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[target.riscv64gc-unknown-linux-musl]
cc = "riscv64-linux-gnu-gcc"
cxx = "riscv64-linux-gnu-g++"
ar = "riscv64-linux-gnu-ar"
linker = "riscv64-linux-gnu-gcc"
```

----------------------------------------

TITLE: Installing Rust Guide Build Tools (Shell)
DESCRIPTION: Installs the `mdbook` tool and required plugins (`mdbook-linkcheck2`, `mdbook-toc`, `mdbook-mermaid`) for building the `rustc-dev-guide` locally from its source files. This command uses Cargo to fetch and compile the tools from crates.io. A working Rust toolchain is required as a prerequisite.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
cargo install mdbook mdbook-linkcheck2 mdbook-toc mdbook-mermaid
```

----------------------------------------

TITLE: Illustrating FromEnv with a Rust function
DESCRIPTION: This Rust code snippet demonstrates the `FromEnv(TraitRef)` domain goal, showing how in-scope where clauses are available within a function's body. In this case, the function `loud_clone` has a trait bound `T: Clone`, so `FromEnv(T: Clone)` holds within the function body.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/goals-and-clauses.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
"fn loud_clone<T: Clone>(stuff: &T) -> T {
    println!(\"cloning!\");
    stuff.clone()
}"
```

----------------------------------------

TITLE: Correct Usage of Variadic C Function in Rust
DESCRIPTION: This example shows proper usage of C's printf function in Rust with various numbers of arguments. It demonstrates providing the minimum format string argument and additional arguments as needed.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0060.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# use std::os::raw::{c_char, c_int};
# #[cfg_attr(all(windows, target_env = "msvc"),
#            link(name = "legacy_stdio_definitions",
#                 kind = "static", modifiers = "-bundle"))]
# extern "C" { fn printf(_: *const c_char, ...) -> c_int; }
# fn main() {
unsafe {
    printf(c"test\n".as_ptr());

    printf(c"number = %d\n".as_ptr(), 3);

    printf(c"%d, %d\n".as_ptr(), 10, 5);
}
# }
```

----------------------------------------

TITLE: Usefulness Checking in Various Rust Pattern Matching Contexts
DESCRIPTION: This snippet demonstrates where usefulness checking occurs in Rust, including match expressions, if let, while let, destructuring let, and function arguments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/pat-exhaustive-checking.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// `match`
// Usefulness can detect unreachable branches and forbid non-exhaustive matches.
match foo() {
    Ok(x) => x,
    Err(_) => panic!(),
}

// `if let`
// Usefulness can detect unreachable branches.
if let Some(x) = foo() {
    // ...
}

// `while let`
// Usefulness can detect infinite loops and dead loops.
while let Some(x) = it.next() {
    // ...
}

// Destructuring `let`
// Usefulness can forbid non-exhaustive patterns.
let Foo::Bar(x, y) = foo();

// Destructuring function arguments
// Usefulness can forbid non-exhaustive patterns.
fn foo(Foo { x, y }: Foo) {
    // ...
}
```

----------------------------------------

TITLE: Restricting Mutations in Match Guards in Rust
DESCRIPTION: Demonstrates the error caused by attempting to mutate a matched variable within a match guard in Rust, leading to potential non-exhaustive matches. Highlights the importance of maintaining immutability within guards and provides a corrected implementation by repositioning value mutation outside of the guard.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0510.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
let mut x = Some(0);
match x {
    None => {}
    Some(_) if { x = None; false } => {} // error!
    Some(_) => {}
}
```

LANGUAGE: Rust
CODE:
```
let mut x = Some(0);
match x {
    None => {}
    Some(_) => {
        x = None; // ok!
    }
}
```

----------------------------------------

TITLE: Multi-Line Trait Bounds Formatting in Rust
DESCRIPTION: Demonstrates how to format multi-line trait bounds in Rust. It includes putting each bound on its own block-indented line and breaking before the `+` symbol.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_12

LANGUAGE: rust
CODE:
```
pub trait IndexRanges:
    Index<Range<usize>, Output=Self>
    + Index<RangeTo<usize>, Output=Self>
    + Index<RangeFrom<usize>, Output=Self>
    + Index<RangeFull, Output=Self>
{
    ...
}
```

----------------------------------------

TITLE: Attempting to Link Static Library in Rust
DESCRIPTION: Example of a Rust main file attempting to link with the static library, which will result in a linking error due to incompatible crate types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0462.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
extern crate a;

fn main() {
    a::foo();
}
```

----------------------------------------

TITLE: Checking for a Specific Type in Rustc Lints Using Diagnostic Items - Rust
DESCRIPTION: Shows three approaches to check if an expression's type corresponds to a particular Rust type by using diagnostic items, language items, or matching the type path. It uses Clippy utilities such as `is_type_diagnostic_item` and `is_type_lang_item`. The snippet emphasizes preferring diagnostic and lang items due to their robustness over matching the full definition path. It requires imports from `clippy_utils`, `rustc_span::symbol`, and `rustc_hir`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/common_tools_writing_lints.md#_snippet_2

LANGUAGE: rust
CODE:
```
use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};
use clippy_utils::{paths, match_def_path};
use rustc_span::symbol::sym;
use rustc_hir::LangItem;

impl LateLintPass<'_> for MyStructLint {
    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {
        // Getting the expression type
        let ty = cx.typeck_results().expr_ty(expr);

        // 1. Using diagnostic items
        // The last argument is the diagnostic item to check for
        if is_type_diagnostic_item(cx, ty, sym::Option) {
            // The type is an `Option`
        }

        // 2. Using lang items
        if is_type_lang_item(cx, ty, LangItem::RangeFull) {
            // The type is a full range like `.drain(..)`
        }

        // 3. Using the type path
        // This method should be avoided if possible
        if match_def_path(cx, def_id, &paths::RESULT) {
            // The type is a `core::result::Result`
        }
    }
}
```

----------------------------------------

TITLE: Showing Type Layout Information using Rustdoc Bash
DESCRIPTION: This command employs the `--show-type-layout` flag to add a 'Layout' section to the documentation page of each type in `src/lib.rs`, displaying memory layout information computed by `rustc`. Accessing this unstable feature requires `-Z unstable-options`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_13

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs -Z unstable-options --show-type-layout
```

----------------------------------------

TITLE: Trait Return Types with Anonymous Lifetime
DESCRIPTION: Implementation using anonymous lifetime bounds ('_) to derive lifetimes from function arguments.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0759.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
# use std::fmt::Debug;
fn foo(x: &i32) -> impl Debug + '_ {
    x
}
fn bar(x: &i32) -> Box<dyn Debug + '_> {
    Box::new(x)
}
```

----------------------------------------

TITLE: Benchmark affected by compiler optimizations
DESCRIPTION: Demonstrates a benchmark that can be affected by compiler optimizations. The example shows how the compiler might completely optimize away the calculation being measured, resulting in misleading benchmark results.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/test.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(test)]

extern crate test;
use test::Bencher;

#[bench]
fn bench_xor_1000_ints(b: &mut Bencher) {
    b.iter(|| {
        (0..1000).fold(0, |old, new| old ^ new);
    });
}
```

----------------------------------------

TITLE: Running ThreadSanitizer with Rust Flags in Shell
DESCRIPTION: This shell snippet sets environment variables to enable ThreadSanitizer instrumentation when running a Rust project. It sets `RUSTFLAGS` and `RUSTDOCFLAGS` to `-Zsanitizer=thread` and runs the project with `cargo run` while rebuilding the standard library via `-Zbuild-std`. The commands ensure that the Rust code is instrumented for detecting data races at runtime, and the outputs will include warnings about detected data races.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_23

LANGUAGE: shell
CODE:
```
$ export RUSTFLAGS=-Zsanitizer=thread RUSTDOCFLAGS=-Zsanitizer=thread
$ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu
```

----------------------------------------

TITLE: Demonstrating Undefined Behavior with Mutable Static References in Rust
DESCRIPTION: Example showing how creating a mutable reference to a static variable can lead to undefined behavior due to aliasing violations. The code demonstrates a dangerous pattern where a function potentially reads from the static while a mutable reference exists elsewhere.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0796.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
static mut X: i32 = 23;
fn work() {
  let _val = unsafe { X };
}
let x_ref = unsafe { &mut X };
work();
// The next line has Undefined Behavior!
// `x_ref` is a mutable reference and allows no aliases,
// but `work` has been reading the reference between
// the moment `x_ref` was created and when it was used.
// This violates the uniqueness of `x_ref`.
*x_ref = 42;
```

----------------------------------------

TITLE: Configuring rustup for nightly toolchain
DESCRIPTION: Commands to set up rustup to use the nightly toolchain in the rustc repository directory.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/suggested.md#2025-04-21_snippet_4

LANGUAGE: console
CODE:
```
cd <path to rustc repo>
rustup override set nightly
```

----------------------------------------

TITLE: Invalid Type Placeholder Usage in Rust Signatures
DESCRIPTION: Examples showing incorrect usage of type placeholder (_) in function return types and static variable declarations. These cases will result in compilation error E0121.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0121.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo() -> _ { 5 } // error

static BAR: _ = "test"; // error
```

----------------------------------------

TITLE: Formatting Float Literals in Rust
DESCRIPTION: This snippet shows how rustfmt now wraps float literals ending in a dot ('.') with parentheses when calling methods on them. This ensures that code like `0. .to_string()` is formatted as `(0.).to_string()`, preventing potential parsing issues. This change improves the clarity and correctness of formatted Rust code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_10



----------------------------------------

TITLE: Invalid CoercePointee without Transparent Representation
DESCRIPTION: Example showing error when deriving CoercePointee on a struct without repr(transparent).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0802.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(coerce_pointee)]
use std::marker::CoercePointee;
#[derive(CoercePointee)]
struct NotTransparent<'a, #[pointee] T: ?Sized> {
    ptr: &'a T,
}
```

----------------------------------------

TITLE: Implementing CoerceUnsized Incorrectly in Rust
DESCRIPTION: This code snippet demonstrates an erroneous implementation of CoerceUnsized trait for a struct Foo<T>. The error occurs because the trait is implemented for a generic type U, which is not guaranteed to be a struct.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0376.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(coerce_unsized)]
use std::ops::CoerceUnsized;

struct Foo<T: ?Sized> {
    a: T,
}

// error: The type `U` is not a struct
impl<T, U> CoerceUnsized<U> for Foo<T> {}
```

----------------------------------------

TITLE: Demonstrating Structural Search Replace in Rust
DESCRIPTION: An example of how the Structural Search Replace feature transforms code. It shows a before and after state when applying the command 'foo($a, $b) ==>> ($a).foo($b)' to convert a function call syntax to method call syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/features_generated.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
// Using structural search replace command [foo($a, $b) ==>> ($a).foo($b)]

// BEFORE
String::from(foo(y + 5, z))

// AFTER
String::from((y + 5).foo(z))
```

----------------------------------------

TITLE: Setting function alignment with the `repr(align)` attribute in Rust
DESCRIPTION: Example of using the `#[repr(align(<align>))]` attribute to specify alignment for a specific function. This can be used to set higher alignment than the minimum specified by the `-Zmin-function-alignment` flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/min-function-alignment.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(align(<align>))]
```

----------------------------------------

TITLE: Invalid Non-Generic Type Alias Impl Trait in Rust
DESCRIPTION: Example of invalid usage where type_alias_impl_trait is not used fully generically, causing compilation error E0792. This pattern is rejected because the hidden type is only defined for a specific type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0792.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(type_alias_impl_trait)]

type Foo<T> = impl std::fmt::Debug;

#[define_opaque(Foo)]
fn foo() -> Foo<u32> {
    5u32
}
```

----------------------------------------

TITLE: Replace Character with String Literal in Rust
DESCRIPTION: Converts a character literal to an equivalent string literal. Useful when needing to change type from char to String.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_108

LANGUAGE: rust
CODE:
```
fn main() {
    find('{');
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    find("{")
}
```

----------------------------------------

TITLE: Function Invocation with Early and Late Bound Parameters in Rust
DESCRIPTION: This snippet demonstrates the invocation of the `foo` function, distinguishing between early bound type parameters and late bound lifetimes. It shows how type arguments are supplied at different stages.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
fn foo<'a, T: Sized>(a: &'a T) -> &'a T {
    # a
    /* snip */
}

// Here we provide a type argument `String` to the
// type parameter `T` on the function item type
let my_func = foo::<String>;

// Here (implicitly) a lifetime argument is provided
// to the lifetime parameter `'a` on the builtin impl.
my_func(&String::new());
```

----------------------------------------

TITLE: Conditional Compilation for wasm32-wasip1-threads
DESCRIPTION: This code snippet is an example of how to use conditional compilation in Rust for the `wasm32-wasip1-threads` target. The code is compiled only when the target OS is 'wasi', the environment is 'p1', and atomics are enabled. This is useful for writing portable Rust code that adapts to different target environments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wasip1-threads.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
#[cfg(all(target_os = "wasi", target_env = "p1", target_feature = "atomics"))]

```

----------------------------------------

TITLE: Demonstrating E0689 Error with Numeric Binding in Rust
DESCRIPTION: This code snippet illustrates another case of the E0689 error, where the 'neg()' method is called on a numeric binding without a specified type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0689.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let x = 2.0;
x.neg();  // same error as above
```

----------------------------------------

TITLE: Testing with Coverage Instrumentation in Rust
DESCRIPTION: This shell command sets `RUSTFLAGS` to enable code coverage instrumentation during tests, using the `-C instrument-coverage` flag. The command builds and runs Rust test suites, generating `.profraw` files for further analysis. It is important to note the test binary paths for subsequent processing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_10

LANGUAGE: shell
CODE:
```
$ RUSTFLAGS="-C instrument-coverage" \
    cargo test --tests
```

----------------------------------------

TITLE: Creating Git Worktree for Multiple Branch Development
DESCRIPTION: Git commands to create linked working trees for parallel development on multiple branches.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/suggested.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
git worktree add ../rust2
git worktree add -b my-feature ../rust2 master
```

----------------------------------------

TITLE: Demonstrating Type Inference Error in Async Rust Functions
DESCRIPTION: This code snippet shows an erroneous example where the type variable T in an async function is not bound, causing a compiler error. The compiler cannot infer the type for T, making it impossible to construct the coroutine.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0698.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
async fn bar<T>() -> () {}

async fn foo() {
    bar().await; // error: cannot infer type for `T`
}
```

----------------------------------------

TITLE: Replacing Arithmetic with Saturating Operations in Rust
DESCRIPTION: Converts basic arithmetic operations to their saturating equivalents that clamp the result at numeric bounds. This refactoring is useful when you want to prevent overflow by having operations return the maximum or minimum value instead of wrapping.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_106

LANGUAGE: rust
CODE:
```
fn main() {
  let x = 1 + 2;
}
```

LANGUAGE: rust
CODE:
```
fn main() {
  let x = 1.saturating_add(2);
}
```

----------------------------------------

TITLE: Showcasing Outer Doc Comment Usage in Rust
DESCRIPTION: This snippet illustrates how to use outer doc comments in Rust as an alternative to inner doc comments. Outer doc comments can be applied directly to functions or items.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0753.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
/// I am an outer doc comment
#[doc = "I am also an outer doc comment!"]
fn foo() {
    // ...
}
```

----------------------------------------

TITLE: Unwrapping Tuple Assignment in Rust
DESCRIPTION: Converts a tuple destructuring assignment into individual variable assignments. This can make the code more explicit and easier to understand.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_117

LANGUAGE: rust
CODE:
```
fn main() {
    let (foo, bar) = ("Foo", "Bar");
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let foo = "Foo";
    let bar = "Bar";
}
```

----------------------------------------

TITLE: Highlighting Stability Attribute Error in Rust
DESCRIPTION: This code snippet illustrates a common error found when the 'feature' attribute is missing from stability annotations in Rust. It showcases an invalid application of Rust's stability attributes, where the 'feature' is omitted from both unstable and stable function declarations. This results in a compile error E0546.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0546.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#![feature(staged_api)]\n#![allow(internal_features)]\n#![stable(since = \"1.0.0\", feature = \"test\")]\n\n#[unstable(issue = \"none\")] // invalid\nfn unstable_fn() {}\n\n#[stable(since = \"1.0.0\")] // invalid\nfn stable_fn() {}
```

----------------------------------------

TITLE: Type Alias Impl Trait with Linked Generic Parameters in Rust
DESCRIPTION: Example showing how to link the generic parameter to the hidden type in type_alias_impl_trait. This implementation uses the generic parameter U in the returned vector, creating a relationship between the generic parameter and the hidden type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0792.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#![feature(type_alias_impl_trait)]

use std::fmt::Debug;

type Foo<T: Debug> = impl Debug;

#[define_opaque(Foo)]
fn foo<U: Debug>() -> Foo<U> {
    Vec::<U>::new()
}

fn main() {}
```

----------------------------------------

TITLE: Example Macro Expansion
DESCRIPTION: Shows an example of code that expands to '1 + 0' in both EarlyLintPass and LateLintPass stages.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/macro_expansions.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// The following code expands to `1 + 0` for both `EarlyLintPass` and `LateLintPass`
1 + mac!()
```

----------------------------------------

TITLE: Rust Main Function with Test
DESCRIPTION: This Rust snippet defines a main function that prints a greeting for Fuchsia, alongside a basic test function. It showcases the usage of tests within the main application file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn main() {
    println!("Hello Fuchsia!");
}

#[test]
fn it_works() {
    assert_eq!(2 + 2, 4);
}
```

----------------------------------------

TITLE: Demonstrating Ambiguous Associated Type Error in Rust
DESCRIPTION: This example shows code that produces the E0221 error due to ambiguous associated type definitions between two traits. The trait Bar inherits from Foo but redefines the same associated type name 'A' with a different bound.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0221.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait T1 {}
trait T2 {}

trait Foo {
    type A: T1;
}

trait Bar : Foo {
    type A: T2;
    fn do_something() {
        let _: Self::A;
    }
}
```

----------------------------------------

TITLE: Attribute Path Resolution Example
DESCRIPTION: Demonstrates how attribute renaming works (or doesn't work) for built-in attributes. Shows that while the allow keyword can be imported with an alias, using it as an attribute will fail.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/attributes.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use allow as foo
```

----------------------------------------

TITLE: Diagnostic JSON Structure Example in JavaScript
DESCRIPTION: Demonstrates the complete JSON structure of a rustc diagnostic message, including spans, children messages, and rendered output. The example shows an unused variable warning with suggestions for fixing the issue.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/json.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
    "$message_type": "diagnostic",
    "message": "unused variable: `x`",
    "code": {
        "code": "unused_variables",
        "explanation": null
    },
    "level": "warning",
    "spans": [
        {
            "file_name": "lib.rs",
            "byte_start": 21,
            "byte_end": 22,
            "line_start": 2,
            "line_end": 2,
            "column_start": 9,
            "column_end": 10,
            "is_primary": true,
            "text": [
                {
                    "text": "    let x = 123;",
                    "highlight_start": 9,
                    "highlight_end": 10
                }
            ],
            "label": null,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "expansion": {
                "span": {},
                "macro_decl_name": "some_macro!",
                "def_site_span": {}
            }
        }
    ],
    "children": [
        {
            "message": "`#[warn(unused_variables)]` on by default",
            "code": null,
            "level": "note",
            "spans": [],
            "children": [],
            "rendered": null
        },
        {
            "message": "if this is intentional, prefix it with an underscore",
            "code": null,
            "level": "help",
            "spans": [
                {
                    "file_name": "lib.rs",
                    "byte_start": 21,
                    "byte_end": 22,
                    "line_start": 2,
                    "line_end": 2,
                    "column_start": 9,
                    "column_end": 10,
                    "is_primary": true,
                    "text": [
                        {
                            "text": "    let x = 123;",
                            "highlight_start": 9,
                            "highlight_end": 10
                        }
                    ],
                    "label": null,
                    "suggested_replacement": "_x",
                    "suggestion_applicability": "MachineApplicable",
                    "expansion": null
                }
            ],
            "children": [],
            "rendered": null
        }
    ],
    "rendered": "warning: unused variable: `x`\n --> lib.rs:2:9\n  |\n2 |     let x = 123;\n  |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\n"
}
```

----------------------------------------

TITLE: Demonstrating Rustfix Test with Directives and Warning
DESCRIPTION: This snippet illustrates a Rustfix test case within the Rust compiler test harness. It uses the `//@ run-rustfix` directive to apply compiler suggestions and `//@ check-pass` to ensure the resulting code compiles. The code defines a struct that triggers a naming convention warning, and the `//~` directives assert the expected compiler output, including the `NotCamelCase` suggestion.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_11

LANGUAGE: Rust
CODE:
```
//@ run-rustfix
//@ check-pass
#![crate_type = "lib"]

pub struct not_camel_case {}
//~^ WARN `not_camel_case` should have an upper camel case name
//~| HELP convert the identifier to upper camel case
//~| SUGGESTION NotCamelCase
```

----------------------------------------

TITLE: Basic Enum Definition
DESCRIPTION: Simple definition of an enum type with GET and POST variants.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0170.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
enum Method {
    GET,
    POST,
}
```

----------------------------------------

TITLE: Marking Functions for Sanitizer Instrumentation in Rust
DESCRIPTION: This code snippet demonstrates how functions can be marked for exclusion from sanitizer instrumentation using the #[no_sanitize(...)] attribute in Rust. It allows fine-grained control over which functions are instrumented.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/sanitizers.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[no_sanitize(...)]
```

----------------------------------------

TITLE: Enabling Control Flow Guard for Rust Standard Library (CMD)
DESCRIPTION: This CMD script demonstrates how to enable Control Flow Guard for the Rust standard library using cargo's build-std functionality. It installs the nightly toolchain, adds the rust-src component, sets the RUSTFLAGS environment variable, and builds the project with CFG enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/control-flow-guard.md#2025-04-21_snippet_0

LANGUAGE: cmd
CODE:
```
rustup toolchain install --force nightly
rustup component add rust-src
SET RUSTFLAGS=-Z control-flow-guard
cargo +nightly build -Z build-std --target x86_64-pc-windows-msvc
```

----------------------------------------

TITLE: Formatting Spaces Around Ranges in Rust
DESCRIPTION: Shows the effect of the 'spaces_around_ranges' option. When false (default), no spaces are added around range operators. When true, spaces are added around range operators.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_67

LANGUAGE: rust
CODE:
```
fn main() {
    let lorem = 0..10;
    let ipsum = 0..=10;

    match lorem {
        1..5 => foo(),
        _ => bar,
    }

    match lorem {
        1..=5 => foo(),
        _ => bar,
    }

    match lorem {
        1...5 => foo(),
        _ => bar,
    }
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let lorem = 0 .. 10;
    let ipsum = 0 ..= 10;

    match lorem {
        1 .. 5 => foo(),
        _ => bar,
    }

    match lorem {
        1 ..= 5 => foo(),
        _ => bar,
    }

    match lorem {
        1 ... 5 => foo(),
        _ => bar,
    }
}
```

----------------------------------------

TITLE: Empty Item Single Line - True Example
DESCRIPTION: Example showing how rustfmt handles empty functions and impls when `empty_item_single_line` is set to `true`. With this option enabled, empty functions and impls are formatted on a single line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
fn lorem() {}

impl Lorem {}
```

----------------------------------------

TITLE: Example of a debug statement in Rust
DESCRIPTION: This Rust code snippet demonstrates using the `debug!` macro with field recording syntax. It logs the value of `random_operation(tcx)` and assigns it to the field `x` in the log output.  This allows structured logging of complex values.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tracing.md#2025-04-21_snippet_8

LANGUAGE: Rust
CODE:
```
debug!(x = ?random_operation(tcx));
```

----------------------------------------

TITLE: Enabling Verbose Output with rustdoc (Bash)
DESCRIPTION: Illustrates how to use the `-v` or `--verbose` flag to enable more detailed output during the documentation process, which can vary based on other flags used.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_2

LANGUAGE: bash
CODE:
```
$ rustdoc -v src/lib.rs
```

LANGUAGE: bash
CODE:
```
$ rustdoc --verbose src/lib.rs
```

----------------------------------------

TITLE: Formatting Format String Macros in Rust
DESCRIPTION: Guidelines for formatting macros that take a format string. If arguments are small, they should appear before and after the format string on a single line; otherwise, each argument should be on its own line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
println!(
    "Hello {} and {}",
    name1, name2,
);

assert_eq!(
    x, y,
    "x and y were not equal, see {}",
    reason,
);
```

----------------------------------------

TITLE: Valid Concrete SIMD Struct Implementation in Rust
DESCRIPTION: Example showing correct usage of #[repr(simd)] with a concrete u32 type array, which is allowed because the compiler can determine SIMD operations for specific numeric types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0074.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(repr_simd)]

#[repr(simd)]
struct Good([u32; 4]);
```

----------------------------------------

TITLE: Converting Iterator::for_each to For Loop in Rust
DESCRIPTION: Changes an iterator's for_each method to a for loop, eliminating inline closure execution.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_26

LANGUAGE: rust
CODE:
```
fn main() {
    let iter = iter::repeat((9, 2));
    for (x, y) in iter {
        println!("x: {}, y: {}", x, y);
    }
}
```

----------------------------------------

TITLE: Valid Example: Using align representation on a struct with packed field
DESCRIPTION: This code demonstrates a valid case where an aligned struct contains a field with a packed representation hint, which is allowed in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0588.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[repr(packed)]
struct Packed(i32);

#[repr(align(16))] // ok!
struct Aligned(Packed);
```

----------------------------------------

TITLE: Calling fastcall_fn_1 - Rust
DESCRIPTION: This snippet calls the `fastcall_fn_1` function in Rust, passing an integer argument (14). It demonstrates how to call a function using the `fastcall` calling convention with a single integer parameter. The outcome depends on the implementation of `fastcall_fn_1`.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_10

LANGUAGE: Rust
CODE:
```
fastcall_fn_1(14)
```

----------------------------------------

TITLE: Incorrect Label Usage in Rust Loop
DESCRIPTION: Example showing incorrect usage of an undeclared label that results in compile error E0426. The code attempts to break to a label 'a' that hasn't been declared.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0426.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
loop {
    break 'a; // error: use of undeclared label `'a`
}
```

----------------------------------------

TITLE: Adding Derive Attribute to Struct in Rust
DESCRIPTION: This snippet shows how to add a new #[derive()] clause to a struct or enum. It inserts the derive attribute just above the struct definition, ready for the user to specify which traits to derive.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_45

LANGUAGE: rust
CODE:
```
struct Point {
    x: u32,
    y: u32,
}
```

LANGUAGE: rust
CODE:
```
#[derive()]
struct Point {
    x: u32,
    y: u32,
}
```

----------------------------------------

TITLE: Creating Structural Search Replace Rules as Comments
DESCRIPTION: Example showing how to use the structural search and replace functionality as an assist by writing the rule in a comment. When placing the cursor on the comment line, an assist will be offered to apply the transformation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/features_generated.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
// Place the cursor on the line below to see the assist 💡.
// foo($a, $b) ==>> ($a).foo($b)
```

----------------------------------------

TITLE: Format String Completion Postfix Snippets
DESCRIPTION: Provides postfix completions for various formatting and logging macros in Rust
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/features_generated.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
"Result {result} is {2 + 2}"
```

----------------------------------------

TITLE: Demonstrating C signed short type equivalence in Rust
DESCRIPTION: Shows equivalent type definitions between C's signed short and Rust's typically i16 type. Notes that while usually equivalent to i16, the actual size may vary on some systems as C only requires it to be at least 16 bits.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/core/src/ffi/c_short.md#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
signed short
```

LANGUAGE: rust
CODE:
```
i16
```

----------------------------------------

TITLE: Correct Use of repr Attribute in Rust
DESCRIPTION: This snippet demonstrates the correct use of the repr attribute in Rust, where an identifier is used instead of a literal. This approach is supported and compiles successfully, showcasing the necessary technique for using built-in attributes correctly without causing errors. The main function is included to complete the program structure, though it has no operational code.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0565.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[repr(C)] // ok!
struct Repr {}

fn main() {}
```

----------------------------------------

TITLE: Defining IsMatch Trait in Rust
DESCRIPTION: This Rust code snippet defines a generic trait 'IsMatch' for matching pattern tree nodes against specific syntax tree nodes. Dependencies include Rust's trait system and type parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
pub trait IsMatch<O> {
    fn is_match(&self, other: &'o O) -> bool;
}
```

----------------------------------------

TITLE: Using the Windows vectorcall ABI in Rust
DESCRIPTION: This code demonstrates how to declare and use a function that uses the Windows vectorcall ABI. The example shows a foreign function interface declaration for a function that adds two f64 floating-point values, using the 'vectorcall' ABI specification.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/abi-vectorcall.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
extern "vectorcall" {
    fn add_f64s(x: f64, y: f64) -> f64;
}

fn main() {
    println!("{}", add_f64s(2.0, 4.0));
}
```

----------------------------------------

TITLE: Trait Implementation in Rust
DESCRIPTION: This snippet demonstrates a trait implementation of `ConvertTo<i32>` for the `Object` type. The ellipsis implies that the actual implementation details are not shown. This illustrates how a trait can be implemented for a specific type with a specific associated type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/variance.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
"impl ConvertTo<i32> for Object { ... }"
```

----------------------------------------

TITLE: Running the dot_product example with Cargo
DESCRIPTION: Command to execute the dot_product example from the stdsimd examples crate. This command runs the dot_product.rs file which demonstrates various SIMD implementations of the dot product operation.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/portable-simd/crates/core_simd/examples/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
cargo run --example dot_product
```

----------------------------------------

TITLE: Demonstrating Shared Inference Variables in `impl Debug` Return Type
DESCRIPTION: This code snippet demonstrates how all return sites in a function returning `impl Debug` share the same inference variable. Consequently, a return site might only compile if another return site uses a concrete type. This is a backwards compatibility hack in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/opaque-types-impl-trait-inference.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
fn foo() -> impl Debug {
    if false {
        return std::iter::empty().collect();
    }
    vec![42]
}
```

----------------------------------------

TITLE: Allowing and Denying Rustdoc Lints in Rust
DESCRIPTION: This snippet demonstrates how to enable, warn, or deny the `broken_intra_doc_links` lint using the `#![allow]`, `#![warn]`, and `#![deny]` attributes in a Rust file. It requires the `rustdoc` tool to process these lints, as they are not available through `rustc`. The toggles govern whether missing intra-doc links in the documentation will be reported as warnings or errors, or not reported at all. This helps maintain link validity in documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/lints.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![allow(rustdoc::broken_intra_doc_links)] // allows the lint, no diagnostics will be reported
#![warn(rustdoc::broken_intra_doc_links)] // warn if there are broken intra-doc links
#![deny(rustdoc::broken_intra_doc_links)] // error if there are broken intra-doc links

```

----------------------------------------

TITLE: Rust Compiler Error: Unterminated Byte String Literal
DESCRIPTION: This error indicates that a byte string literal is missing its closing double quote ("). The compiler expects byte string literals to be enclosed in double quotes, starting with `b"`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_string_with_ascii_escape.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"BYTE_STRING \"b\\"\\x7f" error: Missing trailing `\"` symbol to terminate the byte string literal"
```

----------------------------------------

TITLE: Reordering Impl Items in Rust
DESCRIPTION: Demonstrates how the reorder_impl_items option affects the ordering of type, const, macros, and methods within impl blocks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_60

LANGUAGE: rust
CODE:
```
struct Dummy;

impl Iterator for Dummy {
    fn next(&mut self) -> Option<Self::Item> {
        None
    }

    type Item = i32;
}

impl Iterator for Dummy {
    type Item = i32;

    fn next(&mut self) -> Option<Self::Item> {
        None
    }
}
```

LANGUAGE: rust
CODE:
```
struct Dummy;

impl Iterator for Dummy {
    type Item = i32;

    fn next(&mut self) -> Option<Self::Item> {
        None
    }
}
```

----------------------------------------

TITLE: Unused Variable Warning Example
DESCRIPTION: Shows code that triggers the unused_variables warning lint.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/lints/levels.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
pub fn foo() {
    let x = 5;
}
```

----------------------------------------

TITLE: Invalid Transmutation with Generic Types in Rust
DESCRIPTION: This code demonstrates an invalid use of `std::mem::transmute` with uninstantiated type parameters, which is not allowed by the compiler. The example attempts to transmute between Vec<T> and Foo<T> in a generic function context.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0139.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use std::mem::transmute;

struct Foo<T>(Vec<T>);

fn foo<T>(x: Vec<T>) {
    // we are transmuting between Vec<T> and Foo<F> here
    let y: Foo<T> = unsafe { transmute(x) };
    // do something with y
}
```

----------------------------------------

TITLE: Basic Usage of #[rustc_on_unimplemented] Attribute in Rust
DESCRIPTION: Demonstrates how to add a custom error message to a trait using the #[rustc_on_unimplemented] attribute. The example creates a custom iterator trait with a specialized error message that references the trait's generic type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_15

LANGUAGE: rust
CODE:
```
#![feature(rustc_attrs)]

#[rustc_on_unimplemented="an iterator over elements of type `{A}` \
    cannot be built from a collection of type `{Self}`"]
trait MyIterator<A> {
    fn next(&mut self) -> A;
}

fn iterate_chars<I: MyIterator<char>>(i: I) {
    // ...
}

fn main() {
    iterate_chars(&[1, 2, 3][..]);
}
```

----------------------------------------

TITLE: Handling 'failed to build archive' Error in Rust Compilation
DESCRIPTION: This error occurs when trying to compile with 'lto = "fat"' without compiling the sysroot with LTO. The solution may involve setting the FAT_LTO flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/errors.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
error: failed to build archive: failed to open object file: No such file or directory (os error 2)
```

----------------------------------------

TITLE: Running Rust Compiler with Check-CFG Print Option
DESCRIPTION: Example showing how to use the rustc compiler with --print=check-cfg flag to display configuration settings. This requires unstable options to be enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/print-check-cfg.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
rustc --print=check-cfg -Zunstable-options lib.rs
```

----------------------------------------

TITLE: Invalid Nested Lifetime Quantification in Rust Where Clause
DESCRIPTION: Example showing incorrect usage of nested lifetime quantification that results in error E0316. The code attempts to use both trait-bound and whole-clause quantification in the same where clause.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0316.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Tr<'a, 'b> {}

fn foo<T>(t: T)
where
    for<'a> &'a T: for<'b> Tr<'a, 'b>, // error: nested quantification
{
}
```

----------------------------------------

TITLE: Demonstrating Disallowed Feature Attribute Usage in Rust
DESCRIPTION: Shows an example of attempting to use a feature attribute that is not allowed by the compiler flags. The code generates an error because the 'never_type' feature is not in the list of allowed features.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0725.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(never_type)] // error: the feature `never_type` is not in
                        // the list of allowed features
```

----------------------------------------

TITLE: Configuring Min Identifier Chars Threshold in Rust
DESCRIPTION: This option sets the minimum number of characters an identifier can have before the `min_ident_chars` lint is triggered. Identifiers with fewer or equal characters will be linted. The default value is `1`. This uses an integer to specify the minimum acceptable identifier length.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_31



----------------------------------------

TITLE: Executing Cargo Commands in Rust Analyzer
DESCRIPTION: Shows cargo commands that may perform network operations: cargo metadata for registry/dependency management and cargo xtask release for generating release notes via GitHub API.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/privacy.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
cargo metadata
```

LANGUAGE: shell
CODE:
```
cargo xtask release
```

----------------------------------------

TITLE: Using expect as a Precondition in Rust
DESCRIPTION: Demonstrates the 'expect as precondition' style where expect's message describes what should have happened. This approach provides context about the expected state rather than just describing the error.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/core/src/error.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
let path = std::env::var("IMPORTANT_PATH")
    .expect("env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`");
```

----------------------------------------

TITLE: Specifying package with Rustfmt CLI option
DESCRIPTION: Example of using the -p CLI option to specify a package when formatting.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_24

LANGUAGE: Shell
CODE:
```
rustfmt -p my_package
```

----------------------------------------

TITLE: Installing addr2line for Better perf Report Reading
DESCRIPTION: Command to install addr2line with binary features to help resolve issues with reading perf data collected from cargo. This helps prevent 'could not read first record' errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cargo install addr2line --features="bin"
```

----------------------------------------

TITLE: Incorrect Implementation of CoerceUnsized Between Different Structs in Rust
DESCRIPTION: This code snippet demonstrates an erroneous attempt to implement CoerceUnsized between two different struct types, Foo and Bar. The compiler rejects this implementation because CoerceUnsized can only be used for coercion between structures with the same definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0377.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(coerce_unsized)]
use std::ops::CoerceUnsized;

pub struct Foo<T: ?Sized> {
    field_with_unsized_type: T,
}

pub struct Bar<T: ?Sized> {
    field_with_unsized_type: T,
}

// error: the trait `CoerceUnsized` may only be implemented for a coercion
//        between structures with the same definition
impl<T, U> CoerceUnsized<Bar<U>> for Foo<T> where T: CoerceUnsized<U> {}
```

----------------------------------------

TITLE: Struct Used as Function Error Example
DESCRIPTION: Demonstrates incorrect usage of a struct identifier as if it were a function name, which results in E0423 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0423.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo { a: bool };

let f = Foo();
// error: expected function, tuple struct or tuple variant, found `Foo`
// `Foo` is a struct name, but this expression uses it like a function name
```

----------------------------------------

TITLE: Using Implicit and Explicit Deref Patterns - Rust
DESCRIPTION: Demonstrates how to use the `deref_patterns` feature in Rust. It shows implicit dereferencing when matching nested patterns and explicit dereferencing using the placeholder `deref!(_)` syntax, including binding the dereferenced value. Requires the `deref_patterns` feature gate.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/deref-patterns.md#_snippet_0

LANGUAGE: Rust
CODE:
```
#![feature(deref_patterns)]
#![allow(incomplete_features)]

let mut v = vec![Box::new(Some(0))];

// Implicit dereferences are inserted when a pattern can match against the
// result of repeatedly dereferencing but can't match against a smart
// pointer itself. This works alongside match ergonomics for references.
if let [Some(x)] = &mut v {
    *x += 1;
}

// Explicit `deref!(_)` patterns may instead be used when finer control is
// needed, e.g. to dereference only a single smart pointer, or to bind the
// the result of dereferencing to a variable.
if let deref!([deref!(opt_x @ Some(1))]) = &mut v {
    opt_x.as_mut().map(|x| *x += 1);
}

assert_eq!(v, [Box::new(Some(2))]);
```

----------------------------------------

TITLE: Failed Generic Parameter Inheritance in Struct Definition
DESCRIPTION: Example showing incorrect attempt to use outer function's generic parameter in inner struct definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0401.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn foo<T>(x: T) {
    struct Foo {
        x: T,
    }
    // ...
}
```

----------------------------------------

TITLE: Compiling Rust staticlib with linker plugin LTO
DESCRIPTION: This snippet demonstrates how to compile a Rust static library with linker plugin LTO enabled, using `rustc` directly. It sets the `crate-type` to `staticlib`, enables linker plugin LTO (`-Clinker-plugin-lto`), and sets the optimization level to 2 (`-Copt-level=2`).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/linker-plugin-lto.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
"rustc --crate-type=staticlib -Clinker-plugin-lto -Copt-level=2 ./lib.rs"
```

----------------------------------------

TITLE: Configuring Read-Only Patterns for Rust Library Sources in settings.json (JSON)
DESCRIPTION: This snippet configures the settings.json file in an editor, specifying glob patterns that match Rust library source files to be marked as read-only. Dependencies: An editor that recognizes and implements the 'files.readonlyInclude' setting (such as Visual Studio Code with appropriate extensions). Key parameters include file path glob patterns for the Cargo registry, git checkouts, and official Rust library sources, each mapped to true to indicate read-only status. Inputs are the file path patterns, and the output is native editor enforcement making these files non-editable. Limitation: Only effective in editors that support and honor these settings.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/editors/code/walkthrough-setup-tips.md#_snippet_0

LANGUAGE: json
CODE:
```
"files.readonlyInclude": {
  "**/.cargo/registry/src/**/*.rs": true,
  "**/.cargo/git/checkouts/**/*.rs": true,
  "**/lib/rustlib/src/rust/library/**/*.rs": true,
}
```

----------------------------------------

TITLE: Demonstrating Coverage Attribute Usage in Rust
DESCRIPTION: Example showing how to use the coverage attribute to selectively disable coverage instrumentation for specific functions while maintaining default coverage for others. The example contrasts a normal function with default coverage against one with coverage explicitly disabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/coverage-attribute.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(coverage_attribute)]

// `foo()` will get coverage instrumentation (by default)
fn foo() {
  // ...
}

#[coverage(off)]
fn bar() {
  // ...
}
```

----------------------------------------

TITLE: Force Pushing Git Branch After Rebase (Console)
DESCRIPTION: Updates the remote branch on your fork to match the rebased local branch. `--force-with-lease` is safer than `--force` as it prevents overwriting work on the remote if it has been updated by someone else in the meantime.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_11

LANGUAGE: console
CODE:
```
git push --force-with-lease
```

----------------------------------------

TITLE: Raw Byte String Literal Error in Rust
DESCRIPTION: This snippet showcases an error in Rust related to raw byte string literals. Specifically, it highlights the case where a raw byte string literal is missing its closing delimiter, including the necessary number of '#' symbols.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_raw_byte_string_with_unicode_escape.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"br##\"\\u{20AA}" error: Missing trailing `\"` with `#` symbols to terminate the raw byte string literal"
```

----------------------------------------

TITLE: Erroneous Lifetime Capture in impl Trait Return Type (Rust)
DESCRIPTION: This code snippet demonstrates an incorrect implementation where the `impl Trait` return type fails to capture the lifetime `'x` which is referenced in the returned value. This results in a compilation error (E0700).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0700.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use std::cell::Cell;

trait Trait<'a> { }

impl<'a, 'b> Trait<'b> for Cell<&'a u32> { }

fn foo<'x, 'y>(x: Cell<&'x u32>) -> impl Trait<'y>
where 'x: 'y
{
    x
}
```

----------------------------------------

TITLE: Incorrect Transmute Between Different Sized Types
DESCRIPTION: Demonstrates an erroneous attempt to transmute between u16 and u8 with different memory sizes, which will cause a compile-time error in Rust
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0512.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn takes_u8(_: u8) {}

fn main() {
    unsafe { takes_u8(::std::mem::transmute(0u16)); }
    // error: cannot transmute between types of different sizes,
    //        or dependently-sized types
}
```

----------------------------------------

TITLE: Configuring Debug Info Type Line Numbers in Rust
DESCRIPTION: Markdown documentation explaining a compiler option that enables additional type and line number information in debug info. The option enhances debugger capabilities but may impact compilation performance.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/debug_info_type_line_numbers.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `debug-info-type-line-numbers`

---

This option causes additional type and line information to be emitted in debug
info to provide richer information to debuggers. This is currently off by
default as it causes some compilation scenarios to be noticeably slower.
```

----------------------------------------

TITLE: Demonstrating E0069 Error with Invalid Return Statement in Rust
DESCRIPTION: This code snippet demonstrates erroneous Rust code that causes compiler error E0069. The function `foo()` declares a return type of `u8` but uses an empty return statement (`return;`), which implicitly returns `()`, causing a type mismatch.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0069.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// error
fn foo() -> u8 {
    return;
}
```

----------------------------------------

TITLE: Invalid Marker Trait Implementation Override Example
DESCRIPTION: Demonstrates an erroneous attempt to override an associated constant in a marker trait implementation. This generates error E0715 because marker traits cannot have overridden items due to potential ambiguity with multiple implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0715.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(marker_trait_attr)]

#[marker]
trait Marker {
    const N: usize = 0;
    fn do_something() {}
}

struct OverrideConst;
impl Marker for OverrideConst { // error!
    const N: usize = 1;
}
# fn main() {}
```

----------------------------------------

TITLE: Single Line Functions - True
DESCRIPTION: Demonstrates the formatting of single-expression functions when `fn_single_line` is `true`. Single expression functions are placed on a single line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_15

LANGUAGE: rust
CODE:
```
fn lorem() -> usize { 42 }

fn lorem() -> usize {
    let ipsum = 42;
    ipsum
}
```

----------------------------------------

TITLE: Incorrect Import Order in Rust Function
DESCRIPTION: Example showing the incorrect placement of a 'use' import statement after a variable declaration, which previously triggered a compiler error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0154.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn f() {
    // Variable declaration before import
    let x = 0;
    use std::io::Read;
    // ...
}
```

----------------------------------------

TITLE: Copying Generic Parameters for Inner Type
DESCRIPTION: Solution showing how to properly define generic parameters for inner type definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0401.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
fn foo<T>(x: T) {
    type MaybeT<T> = Option<T>;
}
```

----------------------------------------

TITLE: Configuring check-inconsistent-struct-field-initializers
DESCRIPTION: This configures whether to suggest reordering constructor fields when initializers are present. Warnings produced by this configuration aren't necessarily fixed by just reordering the fields, as the order may change semantics if the initializer expressions have side effects. It is a boolean value and defaults to false.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_6



----------------------------------------

TITLE: Valid Single-Field Struct with SIMD Attribute
DESCRIPTION: Example showing correct usage of #[repr(simd)] on a struct with a single array field, which is the proper way to define SIMD vector types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0075.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(repr_simd)]

#[repr(simd)]
struct Good([u32; 2]); // ok!
```

----------------------------------------

TITLE: Implementing Cross-Crate Opt-Out Traits on Non-Struct Types in Rust
DESCRIPTION: This example demonstrates an invalid implementation of the Send trait for a reference type. In Rust, cross-crate traits with default implementations (like Send and Sync) can only be implemented for struct or enum types that are local to the current crate, not for reference types or other non-struct/enum types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0321.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(auto_traits)]

struct Foo;

impl !Sync for Foo {}

unsafe impl Send for &'static Foo {}
// error: cross-crate traits with a default impl, like `core::marker::Send`,
//        can only be implemented for a struct/enum type, not
//        `&'static Foo`
```

----------------------------------------

TITLE: Demonstrating Invalid ABI Usage in Rust
DESCRIPTION: This code snippet shows an example of using an invalid ABI 'invalid' in an external function declaration, which results in a compilation error (E0703).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0703.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
extern "invalid" fn foo() {} // error!
# fn main() {}
```

----------------------------------------

TITLE: Demonstrating Recursion Limit Error with Auto-Dereferencing in Rust
DESCRIPTION: This example shows a compilation error that occurs when the recursion limit is exceeded during auto-dereferencing. The code sets a recursion limit of 4, but tries to dereference a reference with 5 levels of indirection, resulting in error E0055.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0055.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![recursion_limit="4"]

struct Foo;

impl Foo {
    fn foo(&self) {}
}

fn main() {
    let foo = Foo;
    let ref_foo = &&&&&Foo;

    // error, reached the recursion limit while auto-dereferencing `&&&&&Foo`
    ref_foo.foo();
}
```

----------------------------------------

TITLE: Conditionally Compiling for Emscripten Target
DESCRIPTION: This code snippet demonstrates how to use Rust's conditional compilation attributes to target the Emscripten operating system or WebAssembly family not using Emscripten. The primary dependency is rustc's support for conditional attributes. It helps conditionally include code based on target operating system or family.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-emscripten.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
#[cfg(target_os = "emscripten")]
```

LANGUAGE: text
CODE:
```
#[cfg(all(target_family = "wasm", not(target_os = "emscripten)))]
```

----------------------------------------

TITLE: Emitting Diagnostic Error in Rust
DESCRIPTION: This Rust example demonstrates creating and emitting a diagnostic error using a defined diagnostic struct. It shows instantiating the diagnostic struct with relevant information, including field names and spans, and passing it to the context's error emission method. Dependencies encompass the diagnostic context and structs adhering to `Diagnostic`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/diagnostic-structs.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
tcx.dcx().emit_err(FieldAlreadyDeclared {\n    field_name: f.ident,\n    span: f.span,\n    prev_span,\n});
```

----------------------------------------

TITLE: Correct Trait Implementation with Explicit Lifetime Bindings
DESCRIPTION: This code shows the corrected implementation by explicitly binding lifetimes in the trait definition and implementation. The solution adds a lifetime parameter to the trait and ensures proper lifetime annotations throughout the implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0803.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// Modified trait with explicit lifetime binding
trait DataAccess<'a, T> {
    fn get_ref(&'a self) -> T;
}

struct Container<'a> {
    value: &'a f64,
}

// Correct implementation (bound lifetimes)
impl<'a> DataAccess<'a, &'a f64> for Container<'a> {
    fn get_ref(&'a self) -> &'a f64 {
        self.value
    }
}
```

----------------------------------------

TITLE: Implementing a Custom Code Generation Backend in Rust
DESCRIPTION: Example of how to implement a custom codegen backend for rustc. The implementation requires creating a struct that implements the CodegenBackend trait and exposing a function named __rustc_codegen_backend that returns the backend instance as a boxed trait object.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/codegen-backend.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use rustc_codegen_ssa::traits::CodegenBackend;

struct MyBackend;

impl CodegenBackend for MyBackend {
   // Implement codegen methods
}

#[no_mangle]
pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {
    Box::new(MyBackend)
}
```

----------------------------------------

TITLE: Demonstrating Invalid Use of Self in Type Parameter Default for Rust Struct
DESCRIPTION: This code snippet shows an erroneous attempt to use `Self` in a type parameter default for a struct named `Foo`. The compiler will reject this code with error E0735, as type parameters cannot use `Self` in their defaults for structs, enums, or unions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0735.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo<X = Box<Self>> {
    field1: Option<X>,
    field2: Option<X>,
}
// error: type parameters cannot use `Self` in their defaults.
```

----------------------------------------

TITLE: Using Cell for Interior Mutability in Rust Closures
DESCRIPTION: This code snippet shows an alternative solution to the closure mutability problem using the Cell type from the standard library. It allows for interior mutability through a shared reference, enabling the closure to modify the captured value without requiring a mutable borrow.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0387.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use std::cell::Cell;

fn foo<F: Fn()>(f: F) { }

fn mutable() {
    let x = Cell::new(0u32);
    foo(|| x.set(2));
}
```

----------------------------------------

TITLE: Default Small Heuristics Example in Rust
DESCRIPTION: Demonstrates the default formatting behavior when use_small_heuristics is set to 'Default', showing how different code constructs are formatted based on calculated width ratios.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_75

LANGUAGE: rust
CODE:
```
enum Lorem {
    Ipsum,
    Dolor(bool),
    Sit { amet: Consectetur, adipiscing: Elit },
}

fn main() {
    lorem(
        "lorem",
        "ipsum",
        "dolor",
        "sit",
        "amet",
        "consectetur",
        "adipiscing",
    );

    let lorem = Lorem {
        ipsum: dolor,
        sit: amet,
    };
    let lorem = Lorem { ipsum: dolor };

    let lorem = if ipsum { dolor } else { sit };
}
```

----------------------------------------

TITLE: Merging Imports with merge_imports Option in Rust
DESCRIPTION: Shows the difference in import formatting when merge_imports is set to false (default) vs true.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_55

LANGUAGE: rust
CODE:
```
use foo::{a, c, d};
use foo::{b, g};
use foo::{e, f};
```

LANGUAGE: rust
CODE:
```
use foo::{a, b, c, d, e, f, g};
```

----------------------------------------

TITLE: Defining Fuchsia Notification Group in Markdown
DESCRIPTION: This snippet defines the Fuchsia notification group, including the GitHub label, ping command, and a brief description of its purpose. It also includes a link to the Fuchsia ecosystem test job.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/fuchsia.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Fuchsia notification group

**Github Label:** [O-fuchsia] <br>
**Ping command:** `@rustbot ping fuchsia`

[O-fuchsia]: https://github.com/rust-lang/rust/labels/O-fuchsia

This list will be used to notify [Fuchsia][fuchsia] maintainers
when the compiler or the standard library changes in a way that would
break the Fuchsia integration.

[fuchsia]: ../tests/ecosystem-test-jobs/fuchsia.md
```

----------------------------------------

TITLE: Running Rust Build Script x.py (Shell)
DESCRIPTION: Shows the basic command structure for executing the `x.py` build script, which is the primary tool for managing the Rust build process. This command is run from the root of the cloned Rust repository on Unix-like systems, taking subcommands and optional flags.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_0

LANGUAGE: Shell
CODE:
```
./x.py <subcommand> [flags]
```

----------------------------------------

TITLE: Declare Unstable Features in Rust
DESCRIPTION: Declares an unstable feature in the Rust compiler by adding an entry in the `unstable.rs` file. This involves specifying a feature name, the current Rust version, and optionally, a tracking issue number. Features might be marked as `incomplete` to warn users about their instability.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/implementing_new_features.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
/// description of feature
(unstable, $feature_name, "CURRENT_RUSTC_VERSION", Some($tracking_issue_number))
```

LANGUAGE: rust
CODE:
```
/// Allows defining identifiers beyond ASCII.
(unstable, non_ascii_idents, "CURRENT_RUSTC_VERSION", Some(55467), None),
```

LANGUAGE: rust
CODE:
```
/// Allows unsized rvalues at arguments and parameters.
(incomplete, unsized_locals, "CURRENT_RUSTC_VERSION", Some(48055), None),
```

----------------------------------------

TITLE: Correct Use of Enums and Trait-associated Types in Rust
DESCRIPTION: This snippet provides correct examples of how to use an enum directly and a trait's associated type in Rust. The first example shows using the enum 'Rick' directly instead of a variant, and the second example demonstrates using a trait's associated type 'Empire' as a type. It requires knowledge of Rust enums and traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0575.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
enum Rick { Morty }

let _: Rick; // ok!
```

LANGUAGE: Rust
CODE:
```
trait Age {
    type Empire;
    fn Mythology() {}
}

impl Age for u8 {
    type Empire = u16;
}

let _: <u8 as Age>::Empire; // ok!
```

----------------------------------------

TITLE: Calling fastcall_fn_2 - Rust
DESCRIPTION: This snippet calls the `fastcall_fn_2` function in Rust, passing an integer (16) and a floating-point number (3.5) as arguments.  It demonstrates using mixed data types and the `fastcall` calling convention. The expected output is contingent on the code within the function.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_11

LANGUAGE: Rust
CODE:
```
fastcall_fn_2(16, 3.5)
```

----------------------------------------

TITLE: Invalid Async Usage in Const Context - Rust
DESCRIPTION: Demonstrates an erroneous attempt to use an async/await expression inside a const context. This pattern is not currently supported in Rust's const evaluation system and will result in a compiler error. The feature may be supported in the future as tracked by issue #69431.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0744.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
const _: i32 = {
    async { 0 }.await
};
```

----------------------------------------

TITLE: Configuring arm64e-apple-tvos Target in Bootstrap.toml
DESCRIPTION: This snippet shows how to configure the 'arm64e-apple-tvos' target in the `bootstrap.toml` file to build Rust with support for this target. It requires adding the specific target name to the `target` list under the `[build]` section, necessitating at least Xcode 12 on macOS.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/arm64e-apple-tvos.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["arm64e-apple-tvos"]
```

----------------------------------------

TITLE: Interactive Git Rebase Keeping Base (Console)
DESCRIPTION: Starts an interactive rebase session from the specified base (`master`), allowing you to reword, squash, edit, or drop commits. `--keep-base` preserves the original fork point, which can be helpful for reviewing changes across rebases.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_14

LANGUAGE: console
CODE:
```
git rebase --interactive --keep-base master
```

----------------------------------------

TITLE: LSP Message Handling in Main Loop (Rust)
DESCRIPTION: This code handles incoming messages from the language client, forming the entry point for LSP requests including completion. It processes client messages and dispatches them appropriately.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_16

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/rust-analyzer/src/main_loop.rs#L213
```

----------------------------------------

TITLE: Inlining All Uses of a Type Alias in Rust
DESCRIPTION: Demonstrates replacing all occurrences of a type alias with its concrete type throughout the codebase. This refactoring helps eliminate an unnecessary type alias while preserving program behavior.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_72

LANGUAGE: rust
CODE:
```
type ┃A = i32;
fn id(x: A) -> A {
    x
};
fn foo() {
    let _: A = 3;
}
```

LANGUAGE: rust
CODE:
```

fn id(x: i32) -> i32 {
    x
};
fn foo() {
    let _: i32 = 3;
}
```

----------------------------------------

TITLE: Enabling Export of Symbols with RUSTFLAGS
DESCRIPTION: Bash commands showing how to set the RUSTFLAGS environment variable to include the -Zexport-executable-symbols flag, which enables the export of symbols from executables when building with Cargo.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/export-executable-symbols.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
export RUSTFLAGS="-Zexport-executable-symbols"
cargo build
```

----------------------------------------

TITLE: Avoiding Doer Objects
DESCRIPTION: This code demonstrates avoiding the creation of 'doer' objects, advocating for functional programming styles that promote simplicity in API design by directly invoking functions instead.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
// GOOD
do_thing(arg1, arg2);

// BAD
ThingDoer::new(arg1, arg2).do();

pub fn do_thing(arg1: Arg1, arg2: Arg2) -> Res {
    let mut ctx = Ctx { arg1, arg2 };
    ctx.run()
}

struct Ctx {
    arg1: Arg1, arg2: Arg2
}

impl Ctx {
    fn run(self) -> Res {
        ...
    }
}
```

----------------------------------------

TITLE: Handling Trailing Commas in Rust Lists
DESCRIPTION: Shows different options for the 'trailing_comma' setting. 'Vertical' (default) adds commas only in vertical lists, 'Always' adds commas to all lists, and 'Never' removes all trailing commas.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_71

LANGUAGE: rust
CODE:
```
fn main() {
    let Lorem { ipsum, dolor, sit } = amet;
    let Lorem {
        ipsum,
        dolor,
        sit,
        amet,
        consectetur,
        adipiscing,
    } = elit;
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let Lorem { ipsum, dolor, sit, } = amet;
    let Lorem {
        ipsum,
        dolor,
        sit,
        amet,
        consectetur,
        adipiscing,
    } = elit;
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let Lorem { ipsum, dolor, sit } = amet;
    let Lorem {
        ipsum,
        dolor,
        sit,
        amet,
        consectetur,
        adipiscing
    } = elit;
}
```

----------------------------------------

TITLE: Correcting Stability Attribute Usage in Rust
DESCRIPTION: This code example provides the correct usage of Rust's stability attributes by including the necessary 'feature' field. The 'unstable' function is annotated with both 'feature' and 'issue', while the 'stable' function includes 'feature' and 'since'. These annotations ensure the code complies with Rust's requirements for staged API features.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0546.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
#![feature(staged_api)]\n#![allow(internal_features)]\n#![stable(since = \"1.0.0\", feature = \"test\")]\n\n#[unstable(feature = \"unstable_fn\", issue = \"none\")] // ok!\nfn unstable_fn() {}\n\n#[stable(feature = \"stable_fn\", since = \"1.0.0\")] // ok!\nfn stable_fn() {}
```

----------------------------------------

TITLE: Defining Modules and Structs in Rust
DESCRIPTION: This code defines two modules, `sub_module1` and `sub_module2`, each containing a public struct. These structs are intended to be re-exported at the crate root to simplify usage and potentially hide the underlying module structure from users.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/re-exports.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```rust
pub mod sub_module1 {
    pub struct Foo;
}
pub mod sub_module2 {
    pub struct AnotherFoo;
}
```
```

----------------------------------------

TITLE: Obtaining Aligned SIMD Data from Slices in Rust
DESCRIPTION: This snippet illustrates the use of as_simd and as_simd_mut methods from slice primitives to obtain data that is correctly aligned for SIMD processing. It highlights the importance of alignment for optimized performance in SIMD operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/portable-simd/beginners-guide.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let aligned_simd_data = slice.as_simd();
```

LANGUAGE: rust
CODE:
```
let aligned_simd_mut_data = slice.as_simd_mut();
```

----------------------------------------

TITLE: Corrected Function Pointer Type Definitions
DESCRIPTION: Shows the correct ways to define function pointer types by removing patterns, using wildcard patterns, or omitting parameter names
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0561.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
type A1 = fn(param: u8); // ok!
type A2 = fn(_: u32); // ok!
type A3 = fn(i16); // ok!
```

----------------------------------------

TITLE: Byte Literal Error: Missing Trailing Quote
DESCRIPTION: This error message indicates that the byte literal is missing a closing single quote ('). The compiler expects a single quote to terminate the byte literal, but it is not found. This typically happens when the programmer forgets to close the literal.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_with_space.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
"BYTE \"b' \" error: Missing trailing `'` symbol to terminate the byte literal"
```

----------------------------------------

TITLE: Configuring excessive-nesting-threshold
DESCRIPTION: Sets the maximum amount of nesting a block can have. Defaults to `0`. This helps in identifying and mitigating overly nested code structures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_19



----------------------------------------

TITLE: Running rustc with a Specific Toolchain
DESCRIPTION: This command demonstrates how to run the compiled `rustc` using a specific rustup toolchain (`stage1`). The `-vV` flag displays the compiler version and other details.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
$ rustc +stage1 -vV
rustc 1.48.0-dev
binary: rustc
commit-hash: unknown
commit-date: unknown
host: x86_64-unknown-linux-gnu
release: 1.48.0-dev
LLVM version: 11.0
```

----------------------------------------

TITLE: Handling Non-North Directions as a Group in Rust Pattern Matching
DESCRIPTION: This example demonstrates how non-North directions can be treated as a single group in pattern matching, simplifying the exhaustiveness check.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/pat-exhaustive-checking.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
enum Direction { North, South, East, West }
# let wind = (Direction::North, 0u8);
match wind {
    (Direction::North, 50..) => {}
    (_, _) => {}
}
```

----------------------------------------

TITLE: Avoiding Duplicate Method Names in Rust
DESCRIPTION: This Rust snippet resolves error E0592 by providing two impl blocks for struct Foo, where each block contains methods with distinct names. The example illustrates how to define methods properly to avoid naming conflicts, where 'bar' and 'baz' are unique method names within the same implementation scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0592.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
```
struct Foo;

impl Foo {
    fn bar() {}
}

impl Foo {
    fn baz() {} // define with different name
}
```
```

----------------------------------------

TITLE: Running MemorySanitizer with Rust Flags in Shell
DESCRIPTION: This shell snippet shows how to configure environment variables to enable MemorySanitizer instrumentation when running a Rust project. It sets `RUSTFLAGS` and `RUSTDOCFLAGS` to include `-Zsanitizer=memory` and `-Zsanitizer-memory-track-origins` to enable detailed origin tracking of uninitialized memory. It then cleans the cargo build directory and runs the project rebuilding the standard library with `-Zbuild-std` targeting `x86_64-unknown-linux-gnu`. The command is expected to generate detailed MemorySanitizer warnings about uninitialized memory usage.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_21

LANGUAGE: shell
CODE:
```
$ export \
  RUSTFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins' \
  RUSTDOCFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins'
$ cargo clean
$ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu
```

----------------------------------------

TITLE: Modifying Resource Filenames using Rustdoc Bash
DESCRIPTION: This command demonstrates the use of the `--resource-suffix` flag with `rustdoc`. It appends the specified suffix (`suf`) to the filenames of generated CSS and JavaScript resources in the documentation output for `src/lib.rs`. Requires `-Z unstable-options`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_14

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs -Z unstable-options --resource-suffix suf
```

----------------------------------------

TITLE: Moving Local Constants to Associated Constants in Rust
DESCRIPTION: Moves a local constant defined within a method to an impl's associated constant. This refactoring promotes better code organization and reuse by making the constant accessible from other methods, with all references qualified with Self::.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_86

LANGUAGE: rust
CODE:
```
struct S;
impl S {
    fn foo() -> usize {
        /// The answer.
        const C: usize = 42;

        C * C
    }
}
```

LANGUAGE: rust
CODE:
```
struct S;
impl S {
    /// The answer.
    const C: usize = 42;

    fn foo() -> usize {
        Self::C * Self::C
    }
}
```

----------------------------------------

TITLE: Inserting Markdown Before Content using Rustdoc Bash
DESCRIPTION: This command demonstrates how to use the `--markdown-before-content` flag with `rustdoc` to include rendered Markdown content from `extra.md` before the automatically generated documentation for `src/lib.rs`. The `-Z unstable-options` flag is required to enable this unstable feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_7

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs -Z unstable-options --markdown-before-content extra.md
```

----------------------------------------

TITLE: Invalid Type Representation in Binder
DESCRIPTION: This snippet shows an example of an incorrectly formed representation within a `Binder`, illustrating the issues that arise with escaping bound variables. It highlights how the Rust compiler can identify such erroneous structures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/binders.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
Binder(
    fn(&'^1_0 &'^1 T/#0),
    &[BoundVariableKind::Region(...)],
)
```

----------------------------------------

TITLE: Defining Closure After Mutable Access - Rust
DESCRIPTION: This snippet shows how to define the closure after the mutable variable has been accessed, thus avoiding borrow conflicts. The implementation demonstrates flexible closure positioning to ensure compliance with Rust's borrowing rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0501.md#2025-04-21_snippet_3

LANGUAGE: Rust
CODE:
```
```
fn inside_closure(x: &mut i32) {}
fn outside_closure(x: &mut i32) {}

fn foo(a: &mut i32) {
    outside_closure(a);
    let mut bar = || {
        inside_closure(a)
    };
    bar();
}
```
```

----------------------------------------

TITLE: Example of incorrect documentation comment usage in Rust
DESCRIPTION: This code snippet demonstrates the E0585 error, which occurs when a documentation comment doesn't document any item. Here, a doc comment is placed inside a function but isn't attached to any item, causing a compilation failure.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0585.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    // The following doc comment will fail:
    /// This is a useless doc comment!
}
```

----------------------------------------

TITLE: Compiling with rustc for Fuchsia
DESCRIPTION: This shell command compiles a Rust file for Fuchsia using rustc with specified target and library paths. Customize <SDK_PATH>, <ARCH>, and <TARGET_ARCH> according to the target architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_7

LANGUAGE: sh
CODE:
```
# Configure these for the Fuchsia target of your choice
TARGET_ARCH="<x86_64-unknown-fuchsia|aarch64-unknown-fuchsia>"
ARCH="<x64|aarch64>"

rustc \
    --target ${TARGET_ARCH} \
    -Lnative=${SDK_PATH}/arch/${ARCH}/lib \
    -Lnative=${SDK_PATH}/arch/${ARCH}/sysroot/lib \
    --out-dir bin src/hello_fuchsia.rs
```

----------------------------------------

TITLE: Defining a Feature Array in TOML
DESCRIPTION: This snippet shows how to define an array of features in a Cargo.toml file, adhering to the specified formatting rules. Each feature is listed on the same line if it fits; otherwise, it utilizes block indentation for better readability.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/cargo.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
some_feature = [
    "another_feature",
    "yet_another_feature",
    "some_dependency?/some_feature",
]
```

----------------------------------------

TITLE: Importing `ty` module in Rust
DESCRIPTION: This code snippet shows the typical import convention for the `ty` module in the Rust compiler.  It imports the module itself (`ty`), along with the `Ty` and `TyCtxt` types directly. Other types are often referenced with an explicit `ty::` prefix.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
"use ty::{self, Ty, TyCtxt};"
```

----------------------------------------

TITLE: Defining vectorcall Functions in Rust
DESCRIPTION: This snippet defines functions utilizing the vectorcall calling convention, which is designed for performance in scenarios with SIMD (Single Instruction, Multiple Data) operations. The snippet provides multiple function definitions. Requires Rust standard library.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-import-name-type/output.txt#2025-04-21_snippet_3

LANGUAGE: Rust
CODE:
```
vectorcall_fn_undecorated(10)
vectorcall_fn_undecorated2(20)
vectorcall_fn_noprefix(11)
vectorcall_fn_decorated(12)
```

----------------------------------------

TITLE: Fixing Erroneous Deprecated Meta Item in Rust
DESCRIPTION: This snippet demonstrates an erroneous Rust function attribute that uses an unknown meta item, leading to a compilation error. It explains how to correct the mistake by using valid meta item keys specified for the 'deprecated' attribute.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0541.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#[deprecated(
    since="1.0.0",
    // error: unknown meta item
    reason="Example invalid meta item. Should be 'note'"
)]
fn deprecated_function() {}

```

----------------------------------------

TITLE: Defining Inline Assembly Options Using Bitflags
DESCRIPTION: Bitflags enum for configuring inline assembly options, providing fine-grained control over assembly behavior such as purity, memory access, and syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/asm.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
bitflags::bitflags! {
    pub struct InlineAsmOptions: u16 {
        const PURE = 1 << 0;
        const NOMEM = 1 << 1;
        const READONLY = 1 << 2;
        const PRESERVES_FLAGS = 1 << 3;
        const NORETURN = 1 << 4;
        const NOSTACK = 1 << 5;
        const ATT_SYNTAX = 1 << 6;
        const RAW = 1 << 7;
        const MAY_UNWIND = 1 << 8;
    }
}
```

----------------------------------------

TITLE: Cloning the Rust Repository (Full Clone)
DESCRIPTION: This snippet demonstrates how to clone the Rust source code repository using git. This command retrieves the complete repository history and is essential for developers who want full access to the project's commit history.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/rust-lang/rust.git
cd rust
```

----------------------------------------

TITLE: Converting While to Loop in Rust
DESCRIPTION: Refactors a while loop into a loop with a break condition for improved flexibility and readability.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_35

LANGUAGE: rust
CODE:
```
fn main() {
    loop {
        if !cond {
            break;
        }
        foo();
    }
}
```

----------------------------------------

TITLE: Calling stdcall_fn_5 - Rust
DESCRIPTION: This snippet calls the `stdcall_fn_5` function in Rust, passing a struct `S` with integer members and an integer argument (16). It illustrates a function call with a user-defined struct and integer parameters.  The output of the call depends on the definition of the function and the structure.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_4

LANGUAGE: Rust
CODE:
```
stdcall_fn_5(S { x: 1, y: 2 }, 16)
```

----------------------------------------

TITLE: Canonicalized Query Result
DESCRIPTION: Converts a query result into its canonical form, mapping inference and canonical variables accordingly. This step finalizes the canonicalization process and prepares results for application in different contexts.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/canonicalization.md#2025-04-21_snippet_7

LANGUAGE: text
CODE:
```
Canonical(QR) = for<T, L> {
    certainty: Proven,
    var_values: [Vec<?0>, '?1, ?0]
    region_constraints: [?0: '?1],
    value: (),
}
```

----------------------------------------

TITLE: Compiling Rust staticlib with linker plugin LTO using cargo
DESCRIPTION: This snippet demonstrates how to compile a Rust static library with linker plugin LTO enabled, using `cargo`. It sets the `RUSTFLAGS` environment variable to include `-Clinker-plugin-lto` and then builds the project in release mode.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/linker-plugin-lto.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
"RUSTFLAGS=\"-Clinker-plugin-lto\" cargo build --release"
```

----------------------------------------

TITLE: Dot Completion for Fields and Methods (Rust)
DESCRIPTION: This function implements completion for fields and methods after dot operators (foo.bar|), extracting semantic receiver types and determining available members and special completions like .await.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_28

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/ide-completion/src/completions/dot.rs#L11-L41
```

----------------------------------------

TITLE: Configuring Matches for Let Else in Rust
DESCRIPTION: This option configures whether the matches should be considered by the lint, and whether there should be filtering for common types. The lint affected is `manual_let_else`. The default value is `"WellKnownTypes"`. The value should be a string, the meaning of which is not further described.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_25



----------------------------------------

TITLE: Demonstrating Temporary Value Dropping Error in Rust
DESCRIPTION: This code snippet demonstrates an error where a temporary value is dropped while still being borrowed. The function 'foo' returns a value that is immediately borrowed and passed to 'bar', creating a temporary that is dropped too soon.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0716.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo() -> i32 { 22 }
fn bar(x: &i32) -> &i32 { x }
let p = bar(&foo());
         // ------ creates a temporary
let q = *p;
```

----------------------------------------

TITLE: Identifying Private Item Error in Rust
DESCRIPTION: This snippet demonstrates a compilation error when a private method is called outside its scope. It highlights the 'private method' issue during compilation in Rust. No dependencies are involved, and the expected output is a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0624.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
mod inner {
    pub struct Foo;

    impl Foo {
        fn method(&self) {}
    }
}

let foo = inner::Foo;
foo.method(); // error: method `method` is private
```

----------------------------------------

TITLE: Incorrect Where Clause Usage with Concrete Type in Rust
DESCRIPTION: This example demonstrates incorrect usage of a where clause with a concrete type Wrapper<u32>. Since we know that Wrapper<u32> implements Clone (due to the derive attribute), specifying it in a where clause is redundant and incorrect.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0193.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    fn bar(&self);
}

#[derive(Copy,Clone)]
struct Wrapper<T> {
    Wrapped: T
}

impl Foo for Wrapper<u32> where Wrapper<u32>: Clone {
    fn bar(&self) { }
}
```

----------------------------------------

TITLE: Emit MIR After a Specific Optimization - Rust
DESCRIPTION: This code snippet emits the final MIR state after a particular optimization has been applied.  The output is saved to the specified `.after.mir` file. This is useful for verifying the final result of an optimization, rather than its intermediate steps.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/mir-opt/README.md#_snippet_3

LANGUAGE: Rust
CODE:
```
// EMIT_MIR $file_name_of_some_mir_dump.after.mir
```

----------------------------------------

TITLE: Passing Codegen Options to rustc via rustdoc (Bash)
DESCRIPTION: Shows how the `-C` or `--codegen` flag is used to pass code generation options directly to `rustc` when rustdoc compiles code for documentation or tests. Examples include simple documentation runs and test runs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_11

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs -C target_feature=+avx
```

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --codegen target_feature=+avx
```

LANGUAGE: bash
CODE:
```
$ rustdoc --test src/lib.rs -C target_feature=+avx
```

LANGUAGE: bash
CODE:
```
$ rustdoc --test src/lib.rs --codegen target_feature=+avx
```

LANGUAGE: bash
CODE:
```
$ rustdoc --test README.md -C target_feature=+avx
```

LANGUAGE: bash
CODE:
```
$ rustdoc --test README.md --codegen target_feature=+avx
```

----------------------------------------

TITLE: Updating Git Submodules (Console)
DESCRIPTION: Fetches and checks out the specific commits for each registered submodule as recorded in the main repository's index. Use this command to synchronize your local submodule directories after pulling changes that update submodule pointers.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_1

LANGUAGE: console
CODE:
```
git submodule update
```

----------------------------------------

TITLE: Handling Interior Mutability in Constants Using Rust
DESCRIPTION: This snippet demonstrates an error when attempting to borrow a Rust constant containing interior mutability. It highlights the importance of using statics instead of constants when dealing with types like AtomicUsize to avoid mutability errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0492.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use std::sync::atomic::AtomicUsize;

const A: AtomicUsize = AtomicUsize::new(0);
const B: &'static AtomicUsize = &A;
// error: cannot borrow a constant which may contain interior mutability,
//        create a static instead
```

----------------------------------------

TITLE: Invalid Receiver Type in Rust Trait Implementation
DESCRIPTION: This code fails to compile with error E0307. It shows an attempt to implement a trait for Foo using &Bar as the receiver type, which is invalid because the receiver must be related to the implementing type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0307.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
# struct Foo;
# struct Bar;
# trait Trait {
#     fn foo(&self);
# }
impl Trait for Foo {
    fn foo(self: &Bar) {}
}
```

----------------------------------------

TITLE: Incorrect Access of Associated Constant in Rust Trait
DESCRIPTION: This code snippet demonstrates an invalid attempt to access an associated constant through a generic type parameter in a Rust trait. This approach is not supported and would previously trigger a compiler error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0329.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    const BAR: f64;
}

struct MyStruct;

impl Foo for MyStruct {
    const BAR: f64 = 0f64;
}

fn get_bar_bad<F: Foo>(t: F) -> f64 {
    F::BAR
}
```

----------------------------------------

TITLE: Fluent Translation for Use Loop Suggestion
DESCRIPTION: A fluent translation snippet providing a suggestion message for the `WHILE_TRUE` lint, suggesting the use of `loop {}` for infinite loops. This snippet is meant for localization purposes and is utilized by the lint's suggestion system within Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_13

LANGUAGE: fluent
CODE:
```
example-use-loop = denote infinite loops with `loop {"{"} ... {"}"}`
  .suggestion = use `loop`

```

----------------------------------------

TITLE: Configuring Rust for SPARC Target in TOML
DESCRIPTION: This snippet demonstrates how to configure Rust to support the `sparc-unknown-none-elf` target by modifying `bootstrap.toml`. It sets up the build configuration to include the target, which is necessary for building Rust programs that run on SPARC hardware.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/sparc-unknown-none-elf.md#2025-04-21_snippet_0

LANGUAGE: TOML
CODE:
```
[build]
build-stage = 1
host = ["<target for your host>"]
target = ["<target for your host>", "sparc-unknown-none-elf"]
```

----------------------------------------

TITLE: Demonstrating Stack Buffer Overflow (Rust)
DESCRIPTION: This Rust code snippet shows a simple program designed to cause a stack buffer overflow. It declares a small array on the stack and then attempts to read beyond its bounds using unsafe pointer arithmetic.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_1

LANGUAGE: Rust
CODE:
```
fn main() {
    let xs = [0, 1, 2, 3];
    let _y = unsafe { *xs.as_ptr().offset(4) };
}
```

----------------------------------------

TITLE: Correct Variadic Parameter Usage in C FFI
DESCRIPTION: Demonstrates the proper way to use variadic parameters in Rust by declaring them within an extern "C" block for C ABI compatibility.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0045.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
extern "C" {
    fn foo (x: u8, ...);
}
```

----------------------------------------

TITLE: Correcting Meta-Item Usage in Rust Deprecated Attribute
DESCRIPTION: This code example demonstrates the correct way to use the deprecated attribute by properly formatting the 'note' meta-item as a key-value pair, which resolves the E0539 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0551.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[deprecated(note = "because")] // ok!
fn i_am_deprecated() {}
```

----------------------------------------

TITLE: Defining Stability Attributes in Rust
DESCRIPTION: The code snippets illustrate the definition and correction of stability attributes in Rust. The erroneous example highlights missing 'since' values in stability attributes, which is a required field. The corrected example shows proper usage by adding the 'since' value, which specifies the version since the feature or function is considered stable. This ensures compatibility and clarity in versioning for Rust developers.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0542.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#![feature(staged_api)]\n#![allow(internal_features)]\n#![stable(since = \"1.0.0\", feature = \"test\")]\n\n#[stable(feature = \"_stable_fn\")] // invalid\nfn _stable_fn() {}\n\n#[rustc_const_stable(feature = \"_stable_const_fn\")] // invalid\nconst fn _stable_const_fn() {}\n\n#[stable(feature = \"_deprecated_fn\", since = \"0.1.0\")]\n#[deprecated(\n    note = \"explanation for deprecation\"\n)] // invalid\nfn _deprecated_fn() {}
```

LANGUAGE: Rust
CODE:
```
#![feature(staged_api)]\n#![allow(internal_features)]\n#![stable(since = \"1.0.0\", feature = \"test\")]\n\n#[stable(feature = \"_stable_fn\", since = \"1.0.0\")] // ok!\nfn _stable_fn() {}\n\n#[stable(feature = \"_stable_const_fn\", since = \"1.0.0\")]\n#[rustc_const_stable(feature = \"_stable_const_fn\", since = \"1.0.0\")] // ok!\nconst fn _stable_const_fn() {}\n\n#[stable(feature = \"_deprecated_fn\", since = \"0.1.0\")]\n#[deprecated(\n    since = \"1.0.0\",\n    note = \"explanation for deprecation\"\n)] // ok!\nfn _deprecated_fn() {}
```

----------------------------------------

TITLE: Configuring enforced-import-renames
DESCRIPTION: Specifies a list of imports to always rename. It uses fully qualified paths followed by the rename. Defaults to an empty list (`[]`). Useful for establishing consistent naming conventions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_16



----------------------------------------

TITLE: Configuring enum-variant-size-threshold
DESCRIPTION: Sets the maximum size of an enum's variant to avoid box suggestions. Defaults to `200`. This helps in optimizing memory usage by suggesting boxing for large enum variants.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_18



----------------------------------------

TITLE: Using the rustc_const_unstable attribute in Rust
DESCRIPTION: The #[rustc_const_unstable] attribute marks a const fn as having unstable constness. It's used for functions that use unstable language features or intrinsics, or when a stable function is not yet intended to be const-stable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/stability.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#[rustc_const_unstable(feature = "foo", issue = "1234", reason = "lorem ipsum")]
```

----------------------------------------

TITLE: Making Methods Conditionally Available for Sized Types in Rust
DESCRIPTION: Shows how to use a `where Self: Sized` bound to make specific methods unavailable for trait objects while keeping them available for concrete types. This enables creating trait objects while restricting certain methods.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
trait Trait {
    fn foo(&self) -> Self where Self: Sized;
    // more functions
}
```

----------------------------------------

TITLE: Generating Documentation for Target Triple with rustdoc (Bash)
DESCRIPTION: Demonstrates how the `--target` flag is used to generate documentation specifically for a different target triple, enabling cross-documentation generation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_16

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --target x86_64-pc-windows-gnu
```

----------------------------------------

TITLE: Building and running CFI-enabled code in Rust
DESCRIPTION: Shell commands demonstrating how to build and run the example with CFI protection enabled. With CFI, the invalid control flow attempt is detected and the program terminates with an 'Illegal instruction' error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_7

LANGUAGE: shell
CODE:
```
$ RUSTFLAGS="-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi" cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu
   ...
   Compiling rust-cfi-1 v0.1.0 (/home/rcvalle/rust-cfi-1)
    Finished release [optimized] target(s) in 1m 08s
     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-1`
The answer is: 12
With CFI enabled, you should not see the next answer
Illegal instruction
$
```

----------------------------------------

TITLE: Byte Literals with Suffixes in Rust
DESCRIPTION: This snippet shows how to define byte literals with suffixes in Rust.  Suffixes are appended directly after the byte literal.  This might affect how the literal is interpreted by subsequent processing steps.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/byte_strings.txt#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
"BYTE \"b''suf\""

```

LANGUAGE: Rust
CODE:
```
"BYTE \"b'hello'\""

```

----------------------------------------

TITLE: Rust Link Native Libraries Configuration Options
DESCRIPTION: Configuration options for the link-native-libraries compiler flag that determines whether native libraries specified in #[link] attributes are passed to the linker. Can be set to 'yes' (default) to pass libraries to the linker or 'no' to ignore them.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/link-native-libraries.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[link]
```

----------------------------------------

TITLE: Rust Pattern Matching Alternative - Split Patterns
DESCRIPTION: Alternative solution that splits the 'or' pattern into separate match arms, allowing different binding modes for each case.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0409.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
let x = (0, 2);
match x {
    (y, 0) => { /* use y */ }
    (0, ref y) => { /* use y */}
    _ => ()
}
```

----------------------------------------

TITLE: Final Report Generation with Doc Tests Support
DESCRIPTION: This enhanced `llvm-cov` reporting includes documentation tests by processing doc test binaries located in a specific output directory. The bash snippet ensures only executable binaries are included in the report command.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_15

LANGUAGE: bash
CODE:
```
$ llvm-cov report \
    $( \
      for file in \
        $( \
          RUSTFLAGS="-C instrument-coverage" \
          RUSTDOCFLAGS="-C instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins" \
            cargo test --no-run --message-format=json \
              | jq -r "select(.profile.test == true) | .filenames[]" \
              | grep -v dSYM - \
        ) \
        target/debug/doctestbins/*/rust_out; \
      do \
        [[ -x $file ]] && printf "%s %s " -object $file; \
      done \
    ) \
  --instr-profile=json5format.profdata --summary-only # and/or other options
```

----------------------------------------

TITLE: Calling the public function in an example
DESCRIPTION: This snippet demonstrates how to call the `a_func` function from an example file. It resides in the `examples/` directory. The `main` function calls `a_crate::a_func()` illustrating how the function can be used.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/scraped-examples.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
"// a_crate/examples/ex.rs
fn main() {
  a_crate::a_func();
}"
```

----------------------------------------

TITLE: Markdown UB Checks Documentation
DESCRIPTION: Markdown documentation detailing the -Zub-checks compiler flag implementation, its relationship with debug-assertions, and handling of undefined behavior detection through non-unwinding panics.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/ub-checks.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `ub-checks`

The tracking issue for this feature is: [#123499](https://github.com/rust-lang/rust/issues/123499).

--------------------

The `-Zub-checks` compiler flag enables additional runtime checks that detect some causes of Undefined Behavior at runtime.
By default, `-Zub-checks` flag inherits the value of `-Cdebug-assertions`.

All checks are generated on a best-effort basis; even if we have a check implemented for some cause of Undefined Behavior, it may be possible for the check to not fire.
If a dependency is compiled with `-Zub-checks=no` but the final binary or library is compiled with `-Zub-checks=yes`, UB checks reached by the dependency are likely to be optimized out.

When `-Zub-checks` detects UB, a non-unwinding panic is produced.
That means that we will not unwind the stack and will not call any `Drop` impls, but we will execute the configured panic hook.
We expect that unsafe code has been written which relies on code not unwinding which may have UB checks inserted.
Ergo, an unwinding panic could easily turn works-as-intended UB into a much bigger problem.
Calling the panic hook theoretically has the same implications, but we expect that the standard library panic hook will be stateless enough to be always called, and that if a user has configured a panic hook that the hook may be very helpful to debugging the detected UB.
```

----------------------------------------

TITLE: Configuring Rust Build for wasm64-unknown-unknown Target
DESCRIPTION: This snippet configures the Rust build process to include the wasm64-unknown-unknown target and enables the use of the LLVM linker (lld). It specifies the target in the bootstrap.toml file under the build and rust sections.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm64-unknown-unknown.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
    target = ["wasm64-unknown-unknown"]

[rust]
    lld = true
```

----------------------------------------

TITLE: Using ffi_pure Attribute in Rust
DESCRIPTION: Example demonstrating the syntax for applying the #[ffi_pure] attribute to foreign function declarations in Rust. Pure functions must have no effects except for their return value, which must remain consistent across calls with the same parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/ffi-pure.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[ffi_pure]
```

----------------------------------------

TITLE: Demonstrating E0061 Error with Missing Function Arguments in Rust
DESCRIPTION: This example shows code that will fail to compile because the function 'f' requires one argument (u: i32) but is called with zero arguments, triggering the E0061 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0061.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn f(u: i32) {}

f(); // error!
```

----------------------------------------

TITLE: Match Arm Leading Pipes with Preserve Setting in Rust
DESCRIPTION: Shows the match_arm_leading_pipes setting set to Preserve, which maintains the original presence or absence of leading pipe characters on match arms.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_45

LANGUAGE: rust
CODE:
```
fn foo() {
    match foo {
        | "foo" | "bar" => {},
        | "baz"
        | "something relatively long"
        | "something really really really realllllllllllllly long" => println!("x"),
        | "qux" => println!("y"),
        _ => {}
    }

    match baz {
        "qux" => {},
        "foo" | "bar" => {},
        _ => {}
    }
}
```

----------------------------------------

TITLE: Configuring Rust for Armv7 Target
DESCRIPTION: This snippet illustrates the configuration needed in 'bootstrap.toml' to enable the cross-compilation target for Rust. It specifies the target architecture and the C compiler path.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabihf.md#2025-04-21_snippet_0

LANGUAGE: Toml
CODE:
```
[build]
target = ["armv7-unknown-linux-uclibceabihf"]
stage = 2

target.armv7-unknown-linux-uclibceabihf
# ADJUST THIS PATH TO POINT AT YOUR TOOLCHAIN
cc = "/TOOLCHAIN_PATH/bin/arm-buildroot-linux-uclibcgnueabihf-gcc"
```

----------------------------------------

TITLE: Invalid Nested C-Variadic Type Example in Rust
DESCRIPTION: Demonstrates incorrect usage of C-variadic type by nesting it inside a reference type. This code fails to compile because C-variadic types can only be used directly in foreign function declarations, not nested within other types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0743.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo2(x: u8, y: &...) {} // error!
```

----------------------------------------

TITLE: Type Inference Implementation (Rust)
DESCRIPTION: This function implements type inference that runs on a per-function basis, constructing a mapping from expression IDs to their inferred types using the position-independent representation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_12

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/hir-ty/src/infer.rs#L76-L131
```

----------------------------------------

TITLE: Setting the Dependency Graph Filter for Functions in Rust
DESCRIPTION: This snippet shows examples of how to set specific filters for dependency graphs in Rust. Different combinations are created to focus on specific nodes involved in the dependency relationships.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/incrcomp-debugging.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
RUST_DEP_GRAPH_FILTER='-> TypeckTables'
RUST_DEP_GRAPH_FILTER='-> TypeckTables & bar'
RUST_DEP_GRAPH_FILTER='Hir & foo -> TypeckTables & bar'
```

----------------------------------------

TITLE: Including Default Linker Libraries in Rust
DESCRIPTION: Controls whether the linker includes default libraries. Accepts `y`, `yes`, `on`, `true` (include) or `n`, `no`, `off`, `false` or no value (exclude, default). For gcc linkers, this translates to the `-nodefaultlibs` flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_6



----------------------------------------

TITLE: Formatting Let-Else Statements in Rust
DESCRIPTION: Demonstrates different formatting options for let-else statements based on the 'single_line_let_else_max_width' setting. Shows examples with default (50), minimum (0), and maximum (100) values.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_64

LANGUAGE: rust
CODE:
```
fn main() {
    let Some(w) = opt else { return Ok(()) };

    let Some(x) = opt else { return };

    let Some(y) = opt else {
        return;
    };

    let Some(z) = some_very_very_very_very_long_name else {
        return;
    };
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let Some(w) = opt else {
        return Ok(());
    };

    let Some(x) = opt else {
        return;
    };

    let Some(y) = opt else {
        return;
    };

    let Some(z) = some_very_very_very_very_long_name else {
        return;
    };
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let Some(w) = opt else { return Ok(()) };

    let Some(x) = opt else { return };

    let Some(y) = opt else {
        return;
    };

    let Some(z) = some_very_very_very_very_long_name else { return };
}
```

----------------------------------------

TITLE: Handling Name Conflicts with Rustdoc Links
DESCRIPTION: In this snippet, a potential name conflict between a struct and a function is demonstrated. It shows how to disambiguate between different Rust namespaces using intra-doc links with added context such as prefixes and parentheses.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/linking-to-items-by-name.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
/// See also: [`Foo`](struct@Foo)
struct Bar;

/// This is different from [`Foo`](fn@Foo)
struct Foo {}

fn Foo() {}
```

----------------------------------------

TITLE: Conflicting Trait Implementations Example
DESCRIPTION: Demonstrates an error case where a trait is implemented both generically for all types T and specifically for type Foo, causing a compilation error due to conflicting implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0119.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait MyTrait {
    fn get(&self) -> usize;
}

impl<T> MyTrait for T {
    fn get(&self) -> usize { 0 }
}

struct Foo {
    value: usize
}

impl MyTrait for Foo { // error: conflicting implementations of trait
                       //        `MyTrait` for type `Foo`
    fn get(&self) -> usize { self.value }
}
```

----------------------------------------

TITLE: Correct Usage of Generic Type Parameter in Rust
DESCRIPTION: This code snippet shows the correct way to achieve the same functionality as the erroneous example. It uses a generic type parameter `T` with an `Iterator` trait bound instead of `impl Trait` in the path parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0667.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn some_fn<T: Iterator>(mut x: T) -> T::Item { // ok!
    x.next().unwrap()
}
```

----------------------------------------

TITLE: Using return values to prevent optimization in benchmarks
DESCRIPTION: Shows how to prevent the compiler from optimizing away calculations in benchmarks by returning a value from the closure passed to the iter method, forcing the optimizer to consider the result used.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/test.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
b.iter(|| {
    // Note lack of `;` (could also use an explicit `return`).
    (0..1000).fold(0, |old, new| old ^ new)
});
```

----------------------------------------

TITLE: Configuring Rust Build Targets
DESCRIPTION: This TOML snippet specifies the target configuration for building Rust with the `aarch64-kmc-solid_asp3` target in the `rustc` build process. Ensure `aarch64-kmc-elf-gcc` is included in the system's PATH or specify an alternative toolchain.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/kmc-solid.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["aarch64-kmc-solid_asp3"]
```

----------------------------------------

TITLE: Demonstrating Lang Item Redefinition Error in Rust
DESCRIPTION: This example shows a case where the 'owned_box' lang item is redefined, causing a compilation error. Lang items are already implemented in the standard library and should not be redefined in normal code.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0152.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(lang_items)]

#[lang = "owned_box"]
struct Foo<T>(T); // error: duplicate lang item found: `owned_box`
```

----------------------------------------

TITLE: Implementing the Trait on the Custom Enum
DESCRIPTION: This code shows how to implement the original trait on the custom enum. This allows callers to use trait methods directly on the returned enum without needing to match on its variants.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0746.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
impl T for E {
    fn bar(&self) {
        match self {
            E::S(s) => s.bar(),
            E::O(o) => o.bar(),
        }
    }
}
```

----------------------------------------

TITLE: Adding LoongArch64 Targets to Rust Toolchain Configuration
DESCRIPTION: This snippet shows how to configure the Rust build system by adding LoongArch64 targets in the `bootstrap.toml` file. It specifies the targets for stages of the build process. No additional dependencies are specified for this configuration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/loongarch-none.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
target = [
  "loongarch64-unknown-none",
  "loongarch64-unknown-none-softfloat",
]
```

----------------------------------------

TITLE: Using Const to Prevent Shadowing in Rust
DESCRIPTION: This snippet shows a corrected match binding where a const variable is used instead of a static variable. This demonstrates that using a const allows for a match arm to reference it without causing shadowing issues.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0530.md#2025-04-21_snippet_3

LANGUAGE: Rust
CODE:
```
"const TEST: i32 = 0; // const, not static\n\nlet r = 123;\nmatch r {\n    TEST => {} // const is ok!\n    other_values => {}\n}"
```

----------------------------------------

TITLE: Setting Protected Visibility in Rust Compilation
DESCRIPTION: Uses the `-Zdefault-visibility=protected` flag to set rust-mangled symbols to protected visibility. This prevents symbol overriding and may improve performance, but can cause linker errors with older GNU ld versions on Linux.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/default-visibility.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
-Zdefault-visibility=protected
```

----------------------------------------

TITLE: Defining dylib-lto Option in Rust Compiler
DESCRIPTION: Specifies the `dylib-lto` configuration option which enables Link Time Optimization for dynamic libraries. This is primarily used when compiling the Rust compiler itself, specifically for the `librustc_driver` dylib.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/dylib-lto.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
## `dylib-lto`

This option enables using LTO for the `dylib` crate type. This is currently only used for compiling
`rustc` itself (more specifically, the `librustc_driver` dylib).
```

----------------------------------------

TITLE: Creating Minimal Bug Reproduction for Rust Analyzer
DESCRIPTION: Example shell commands for creating a minimal bug reproduction case for Rust Analyzer issues. Shows how to clone a specific repository commit, check the Rust Analyzer version, and run analysis statistics.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/troubleshooting.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
$ git clone https://github.com/username/repo.git && cd repo && git switch --detach commit-hash
$ rust-analyzer --version
rust-analyzer dd12184e4 2021-05-08 dev
$ rust-analyzer analysis-stats .
```

----------------------------------------

TITLE: Erroneous Inclusive Range with No End in Rust
DESCRIPTION: This example shows code that fails to compile because it uses an inclusive range operator (..=) without specifying an end value. The compiler raises error E0586.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0586.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];
    let x = &tmp[1..=]; // error: inclusive range was used with no end
}
```

----------------------------------------

TITLE: Implementing a Trait for a Static Lifetime in Rust
DESCRIPTION: This snippet defines a struct `StaticInt` and implements the `Foo` trait for it, specifically for references to `isize` with the `'static` lifetime. This is used to illustrate a failure case in higher-ranked trait bound matching.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/hrtb.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct StaticInt;
impl Foo<&'static isize> for StaticInt;
```

----------------------------------------

TITLE: Building for Cross-Compilation Targets
DESCRIPTION: This command builds the compiler with support for cross-compilation targets. The `--target` flag specifies the host and target platforms.  This enables the compiler to build code for other architectures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
./x build --target x86_64-unknown-linux-gnu,wasm32-wasip1
```

----------------------------------------

TITLE: Byte String Error: Missing Trailing Quote
DESCRIPTION: This snippet demonstrates the error message produced when a byte string literal is not properly terminated with a closing double quote. The error occurs during compilation and prevents the program from running.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_string_at_eof.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"BYTE_STRING \"b\"\" error: Missing trailing `\"` symbol to terminate the byte string literal"
```

----------------------------------------

TITLE: Defining a Fluent Diagnostic Message
DESCRIPTION: This snippet shows how to define a simple Fluent diagnostic message that indicates an error related to taking the address of a temporary value. The message identifier is crucial for localization into other languages.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/translation.md#2025-04-21_snippet_0

LANGUAGE: fluent
CODE:
```
typeck_address_of_temporary_taken = cannot take address of a temporary
```

----------------------------------------

TITLE: Clang Wrapper Script for aarch64-unknown-linux-ohos
DESCRIPTION: This shell script wraps the Clang compiler from the OpenHarmony SDK for the aarch64-unknown-linux-ohos target. It sets the target architecture, sysroot, and defines the __MUSL__ macro.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/openharmony.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
#!/bin/sh
exec /path/to/ohos-sdk/linux/native/llvm/bin/clang \
  -target aarch64-linux-ohos \
  --sysroot=/path/to/ohos-sdk/linux/native/sysroot \
  -D__MUSL__ \
  "$@"
```

----------------------------------------

TITLE: Using Backreferences in Rust Pattern Matching
DESCRIPTION: Example of a proposed backreference syntax for Rust pattern matching. This pattern detects assignments of the form 'a = a op b' where both occurrences of 'a' must be identical, allowing for conversion to compound assignment operators.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_15

LANGUAGE: rust
CODE:
```
pattern!{
    assign_op_pattern: Expr =
        Assign(_#target, Binary(_, =#target, _)
}
```

----------------------------------------

TITLE: Defining extern "C" Functions in C
DESCRIPTION: This C code snippet defines the equivalent `take_my_pair` function using a struct `my_pair`. It highlights the ABI discrepancy where the C function receives a single parameter compared to Rust's two.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-unknown.md#2025-04-21_snippet_9

LANGUAGE: c
CODE:
```
struct my_pair {
    unsigned a;
    unsigned b;
};

unsigned take_my_pair(struct my_pair pair) {
    return pair.a + pair.b;
}
```

----------------------------------------

TITLE: Formatting Method Chains in Rust
DESCRIPTION: Guidelines for formatting chains of field accesses and method calls in Rust. Each element should be on its own line with line breaks before the dot and after any try operator, with block indentation for subsequent lines.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
let foo = bar
    .baz?
    .qux();
```

----------------------------------------

TITLE: Rust Range Syntax Types
DESCRIPTION: Demonstrates the three primary range syntax patterns in Rust: open-ended range (a..), exclusive range (a..b), and inclusive range (a..=b). These syntax forms are being switched to resolve to new range types as part of issue #123741.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/new-range.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
a..   // Open-ended range
a..b  // Exclusive range
a..=b // Inclusive range
```

----------------------------------------

TITLE: Invalid Coverage Attribute Usage in Foreign Function Declaration
DESCRIPTION: Demonstrates an erroneous usage of #[coverage(off)] attribute on a foreign function declaration within an extern block, which is not allowed. Coverage attributes can only be applied to function declarations with bodies, closures, impl blocks, and modules.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0788.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
unsafe extern "C" {
    #[coverage(off)]
    fn foreign_fn();
}
```

----------------------------------------

TITLE: Invalid Break with Value in While Loop (Rust)
DESCRIPTION: This code example demonstrates the erroneous usage of a break statement with a value inside a while loop, which triggers compilation error E0571 in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0571.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
# let mut i = 1;
# fn satisfied(n: usize) -> bool { n % 23 == 0 }
let result = while true {
    if satisfied(i) {
        break 2 * i; // error: `break` with value from a `while` loop
    }
    i += 1;
};
```

----------------------------------------

TITLE: Demonstrating Invalid Where Clause on Main Function in Rust
DESCRIPTION: This code snippet shows an erroneous attempt to define the main function with a where clause, which is not allowed in Rust. The compiler will raise an E0646 error for this code.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0646.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() where i32: Copy { // error: main function is not allowed to have
                            // a where clause
}
```

----------------------------------------

TITLE: Demonstrating Re-Exporting Items with Additional Documentation
DESCRIPTION: This snippet explains how to re-export a function and add additional documentation, ensuring that links resolve correctly even when items are re-exported from different modules.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/linking-to-items-by-name.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
/// See also [foo()]
pub use std::process::Command;

pub fn foo() {}
```

----------------------------------------

TITLE: Configuring Build Target in TOML for ARM64e-Apple-iOS
DESCRIPTION: This snippet demonstrates how to configure the build target in the 'bootstrap.toml' file for the ARM64e architecture on iOS. Users need to specify the 'target' list under the [build] section to include 'arm64e-apple-ios'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/arm64e-apple-ios.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]\ntarget = ["arm64e-apple-ios"]
```

----------------------------------------

TITLE: Trait Implementation with Constrained Lifetimes
DESCRIPTION: This snippet defines a trait with an associated type and shows how lifetime parameters are handled in its implementation. It stresses the importance of avoiding unconstrained lifetimes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_18

LANGUAGE: rust
CODE:
```
trait Trait {
    type Assoc;
}

impl<'a> Trait for u8 {
    type Assoc = &'a String;
}
```

----------------------------------------

TITLE: Enabling Eglot for Rust Mode in Emacs
DESCRIPTION: This snippet adds a hook to `rust-mode-hook` in Emacs, ensuring that Eglot is loaded automatically whenever a Rust file is opened.  This automatically starts the LSP client for rust-analyzer.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/other_editors.md#_snippet_0

LANGUAGE: Emacs Lisp
CODE:
```
(add-hook 'rust-mode-hook 'eglot-ensure)
```

----------------------------------------

TITLE: Incorrect Usage of Public Visibility in Private Rust Enum
DESCRIPTION: This code snippet demonstrates another incorrect usage of the `pub` keyword inside a private enum, which is not allowed in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0448.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
enum Foo {
    pub Bar, // not ok!
}
```

----------------------------------------

TITLE: Accessing env-set Value with env! Macro
DESCRIPTION: Rust code showing how to access an environment variable that was set with the --env-set flag. The example demonstrates how the compile-time value takes precedence over the system environment variable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/env-set.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
assert_eq!(env!("PATH"), "env");
```

----------------------------------------

TITLE: Invalid Multiple Self Import Example
DESCRIPTION: Example showing incorrect usage where 'self' appears multiple times in an import list, triggering error E0430.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0430.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use something::{self, self}; // error: `self` import can only appear once in\n                             //        the list
```

----------------------------------------

TITLE: Primitive and Structural Unsize Implementations
DESCRIPTION: This part identifies the built-in primitive and structural implementations of the Unsize trait, detailing how types can be transformed into unsized types based on their structure.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/unsize.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
Built-in implementations are provided for:
* `T` -> `dyn Trait + 'a` when `T: Trait` (and `T: Sized + 'a`, and `Trait`
is dyn-compatible[^2]).
* `[T; N]` -> `[T]`
```

----------------------------------------

TITLE: Applying De Morgan's Law in Rust
DESCRIPTION: This assist applies De Morgan's law to boolean expressions. It transforms expressions of the form `!l || !r` into `!(l && r)`, and vice versa.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
fn main() {
    if x != 4 || y < 3.14 {}
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    if !(x == 4 && y >= 3.14) {}
}
```

----------------------------------------

TITLE: Demonstrating Macro Import Error in Rust
DESCRIPTION: This code snippet shows an erroneous attempt to import macros 'drink' and 'be_merry' from the 'alloc' crate, which will result in an E0469 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0469.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[macro_use(drink, be_merry)] // error: imported macro not found
extern crate alloc;

fn main() {
    // ...
}
```

----------------------------------------

TITLE: Configuring Module Item Ordering Groupings in Rust
DESCRIPTION: This option specifies the named groupings of different source item kinds within modules. This influences the `arbitrary_source_item_ordering` lint. The default value is a nested array of strings representing module groupings and their respective item types. This configuration allows to specify the module item order.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_33



----------------------------------------

TITLE: Checking Method Invocation in Rust Lints
DESCRIPTION: Demonstrates how to check if an expression calls a specific method using pattern matching on ExprKind. Includes verification of method name and trait implementation using the LateContext.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/method_checking.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use rustc_hir as hir;
use rustc_lint::{LateContext, LateLintPass};
use rustc_span::sym;
use clippy_utils::is_trait_method;

impl<'tcx> LateLintPass<'tcx> for OurFancyMethodLint {
    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {
        // Check our expr is calling a method with pattern matching
        if let hir::ExprKind::MethodCall(path, _, [self_arg, ..], _) = &expr.kind
            // Check if the name of this method is `our_fancy_method`
            && path.ident.name.as_str() == "our_fancy_method"
            // We can check the type of the self argument whenever necessary.
            // (It's necessary if we want to check that method is specifically belonging to a specific trait,
            // for example, a `map` method could belong to user-defined trait instead of to `Iterator`)
            // See the next section for more information.
            && is_trait_method(cx, self_arg, sym::OurFancyTrait)
        {
            println!("`expr` is a method call for `our_fancy_method`");
        }
    }
}
```

----------------------------------------

TITLE: Installing perf-focus for Analysis
DESCRIPTION: Command to install the perf-focus tool via cargo. This utility helps analyze perf profiles with targeted queries about time spent in specific functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
cargo install perf-focus
```

----------------------------------------

TITLE: Correct Anonymous Import in Rust Documentation
DESCRIPTION: Demonstrates the correct way to write an anonymous import without the doc(inline) attribute, which is the proper syntax for documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0780.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub use foo::Foo as _;
```

----------------------------------------

TITLE: Block Style Alignment for Struct Literals in Rust
DESCRIPTION: Shows the default 'Block' alignment style for struct literals. Fields are aligned as a block with consistent indentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_35

LANGUAGE: rust
CODE:
```
fn main() {
    let lorem = Lorem {
        ipsum: dolor,
        sit: amet,
    };
}
```

----------------------------------------

TITLE: Static Method in Trait Making it Non-dyn-compatible in Rust
DESCRIPTION: Demonstrates a trait with a static method (no self receiver) that makes the trait non-dyn-compatible because there's no way to call such methods through a trait object.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0038.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
trait Foo {
    fn foo() -> u8;
}
```

----------------------------------------

TITLE: Running Tests with Custom Compiler Arguments
DESCRIPTION: This command allows passing additional arguments to the compiler when running tests, useful in specific scenarios.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
./x test --compiletest-rustc-args <additional_args>
```

----------------------------------------

TITLE: Reformatting Number Literals in Rust
DESCRIPTION: Adds or removes separators from integer literals to improve readability. This refactoring makes large numbers easier to read by inserting underscore separators between digit groups according to conventional grouping rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_96

LANGUAGE: rust
CODE:
```
const _: i32 = 1012345;
```

LANGUAGE: rust
CODE:
```
const _: i32 = 1_012_345;
```

----------------------------------------

TITLE: Invalid Functional Record Update on Enum
DESCRIPTION: Example showing incorrect usage of functional record update syntax on an enum variant, which results in compilation error E0436. The code attempts to use the .. syntax to update an enum variant field.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0436.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum PublicationFrequency {
    Weekly,
    SemiMonthly { days: (u8, u8), annual_special: bool },
}

fn one_up_competitor(competitor_frequency: PublicationFrequency)
                     -> PublicationFrequency {
    match competitor_frequency {
        PublicationFrequency::Weekly => PublicationFrequency::SemiMonthly {
            days: (1, 15), annual_special: false
        },
        c @ PublicationFrequency::SemiMonthly{ .. } =>
            PublicationFrequency::SemiMonthly {
                annual_special: true, ..c // error: functional record update
                                          //        syntax requires a struct
        }
    }
}
```

----------------------------------------

TITLE: Block Style Alignment for Generics in Rust
DESCRIPTION: Shows the default 'Block' alignment style for generic parameters. Each generic parameter is indented as a block, maintaining consistent alignment.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_33

LANGUAGE: rust
CODE:
```
fn lorem<
    Ipsum: Eq = usize,
    Dolor: Eq = usize,
    Sit: Eq = usize,
    Amet: Eq = usize,
    Adipiscing: Eq = usize,
    Consectetur: Eq = usize,
    Elit: Eq = usize,
>(
    ipsum: Ipsum,
    dolor: Dolor,
    sit: Sit,
    amet: Amet,
    adipiscing: Adipiscing,
    consectetur: Consectetur,
    elit: Elit,
) -> T {
    // body
}
```

----------------------------------------

TITLE: Casting Pointer with Unknown Kind - Rust
DESCRIPTION: This snippet shows an erroneous attempt to cast zero to a pointer type without sufficient type information, which results in a compile-time error. The root cause is the lack of type information that could guide the conversion.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0641.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let b = 0 as *const _; // error
```

----------------------------------------

TITLE: Configuring Keybindings for Rust Projects (JSON)
DESCRIPTION: This snippet configures a keybinding that is active only within Rust projects. The example defines a keybinding (Ctrl+Alt+D) to trigger the `rust-analyzer.openDocs` command. Requires VS Code and the Rust extension. The output activates the defined command when the specified key combination is pressed within a Rust project. The configuration happens within the `keybindings.json` file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/editor_features.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
    "key": "ctrl+alt+d",
    "command": "rust-analyzer.openDocs",
    "when": "inRustProject"
}
```

----------------------------------------

TITLE: Configuring Max Trait Bounds in Rust
DESCRIPTION: This setting configures the maximum number of bounds a trait can have before the `type_repetition_in_bounds` lint is triggered.  The default is `3`.  This setting determines the threshold used by the lint.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_30



----------------------------------------

TITLE: Implementing Trait Aliases in Rust
DESCRIPTION: This code snippet demonstrates the usage of the `trait_alias` feature in Rust. It shows how to create trait aliases, use them as bounds on type parameters, and as trait objects. The example includes creating aliases for multiple traits, including auto-traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/trait-alias.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(trait_alias)]

trait Foo = std::fmt::Debug + Send;
trait Bar = Foo + Sync;

// Use trait alias as bound on type parameter.
fn foo<T: Foo>(v: &T) {
    println!("{:?}", v);
}

pub fn main() {
    foo(&1);

    // Use trait alias for trait objects.
    let a: &Bar = &123;
    println!("{:?}", a);
    let b = Box::new(456) as Box<dyn Foo>;
    println!("{:?}", b);
}
```

----------------------------------------

TITLE: Implementing Local Helper Functions in Rust
DESCRIPTION: Demonstrates the proper placement of nested helper functions at the end of enclosing functions with return statements. Helper functions should not be nested more than one level deep.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_31

LANGUAGE: rust
CODE:
```
fn dfs(graph: &Graph, v: Vertex) -> usize {
    let mut visited = FxHashSet::default();
    return go(graph, &mut visited, v);

    fn go(graph: &Graph, visited: &mut FxHashSet<Vertex>, v: usize) -> usize {
        ...
    }
}
```

----------------------------------------

TITLE: Generating Deref Implementation in Rust
DESCRIPTION: This snippet demonstrates how to generate a Deref implementation for a struct using a given field. It creates the necessary impl block with the correct Target type and deref method.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_44

LANGUAGE: rust
CODE:
```
struct A;
struct B {
   a: A
}
```

LANGUAGE: rust
CODE:
```
struct A;
struct B {
   a: A
}

impl core::ops::Deref for B {
    type Target = A;

    fn deref(&self) -> &Self::Target {
        &self.a
    }
}
```

----------------------------------------

TITLE: Removing Git Config Lock File (Shell Command)
DESCRIPTION: Deletes a potentially orphaned lock file for the Git configuration (`.gitconfig.lock`). This might be necessary if Git operations fail due to a persistent lock file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_30

LANGUAGE: console
CODE:
```
rm -rf .gitconfig.lock
```

----------------------------------------

TITLE: Using Field Initialization Shorthand in Rust
DESCRIPTION: Demonstrates the 'use_field_init_shorthand' option. When false (default), full field initialization is used. When true, shorthand initialization is used where possible.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_74

LANGUAGE: rust
CODE:
```
struct Foo {
    x: u32,
    y: u32,
    z: u32,
}

fn main() {
    let x = 1;
    let y = 2;
    let z = 3;
    let a = Foo { x, y, z };
    let b = Foo { x: x, y: y, z: z };
}
```

LANGUAGE: rust
CODE:
```
struct Foo {
    x: u32,
    y: u32,
    z: u32,
}

fn main() {
    let x = 1;
    let y = 2;
    let z = 3;
    let a = Foo { x, y, z };
}
```

----------------------------------------

TITLE: Generating Target Specification JSON for a Specific Platform in Rust
DESCRIPTION: This command demonstrates how to generate the JSON target specification for a specific target platform (WebAssembly in this example). It uses the nightly toolchain with the target flag to specify the desired platform.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/targets/custom.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
rustc +nightly -Z unstable-options --target=wasm32-unknown-unknown --print target-spec-json
```

----------------------------------------

TITLE: Demonstrating Explicit ABI Requirements in Rust Extern Functions
DESCRIPTION: Example showing how the explicit_extern_abis feature affects extern function declarations. It demonstrates both invalid (without explicit ABI) and valid (with explicit ABI) syntax. The feature requires explicit ABI specification like 'C' or 'aapcs' instead of allowing implicit defaults.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/explicit-extern-abis.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(explicit_extern_abis)]

extern fn function1() {}  // ERROR `extern` declarations without an explicit ABI
                          // are disallowed

extern "C" fn function2() {} // compiles

extern "aapcs" fn function3() {} // compiles
```

----------------------------------------

TITLE: Demonstrating Conflicting Stability Requirements in Rust
DESCRIPTION: This code snippet illustrates how declaring a feature with conflicting stability requirements leads to compiler error E0711. It shows stable declarations with different versions and an unstable declaration for the same feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0711.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// NOTE: this attribute is perma-unstable and should *never* be used outside of
//       stdlib and the compiler.
#![feature(staged_api)]

#![stable(feature = "...", since = "1.0.0")]

#[stable(feature = "foo", since = "1.0.0")]
fn foo_stable_1_0_0() {}

// error: feature `foo` is declared stable since 1.29.0
#[stable(feature = "foo", since = "1.29.0")]
fn foo_stable_1_29_0() {}

// error: feature `foo` is declared unstable
#[unstable(feature = "foo", issue = "none")]
fn foo_unstable() {}
```

----------------------------------------

TITLE: Building Rust Programs for watchOS Targets
DESCRIPTION: This console command compiles a Rust program for the specified watchOS target. The example demonstrates using the --target flag with rustc, assuming it has been built with support for the watchOS target architectures. The main input is the Rust source file, and outputs are the corresponding binaries for the watchOS target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-watchos.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ rustc --target aarch64-apple-watchos-sim your-code.rs
```

----------------------------------------

TITLE: Correct Static-Const Reference Pattern in Rust
DESCRIPTION: Shows the correct way to share values between static and const variables by first declaring the value as a const and then referencing it in both static and const declarations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0013.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
const A: i32 = 42;
static X: i32 = A;
const Y: i32 = A;
```

----------------------------------------

TITLE: Invalid Import of Type from Trait in Rust
DESCRIPTION: This example demonstrates the E0253 error which occurs when attempting to directly import a type (SomeType) from a trait (MyTrait). In Rust, it's not valid to directly import associated types that belong to traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0253.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
mod foo {
    pub trait MyTrait {
        type SomeType;
    }
}

use foo::MyTrait::SomeType;
// error: `SomeType` is not directly importable

fn main() {}
```

----------------------------------------

TITLE: Enabling Server-Side LSP Debug Logging (bash)
DESCRIPTION: This snippet sets the RA_LOG environment variable at runtime to increase log verbosity from the LSP server before launching VS Code. The example triggers debug-level logging for the lsp_server module in rust-analyzer. This approach requires the server binary to respond to RA_LOG and, optionally, for VS Code instance to be launched from the terminal for log output to be captured. Useful for diagnosing protocol-level or communication issues.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
env RA_LOG=lsp_server=debug code .

```

----------------------------------------

TITLE: Demonstrating #[rustc_on_unimplemented] Attribute Usage in Rust
DESCRIPTION: This code snippet demonstrates how to use the #[rustc_on_unimplemented] attribute to specify a custom error message. It shows the syntax for including type parameters and the {Self} placeholder. The code will fail to compile, producing the specified custom error message.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0230.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(rustc_attrs)]
#![allow(internal_features)]

#[rustc_on_unimplemented = "error on `{Self}` with params `<{A},{B}>`"] // error
trait BadAnnotation<A> {}
```

----------------------------------------

TITLE: Declaring an Edition-Specific Lint in Rust
DESCRIPTION: This code snippet shows how to declare a lint that changes its default level in a specific edition. The lint starts as 'Allow' and becomes 'Warn' in the 2024 edition.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/guides/editions.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
declare_lint! {
    pub SOME_LINT_NAME,
    Allow,
    "my lint description",
    @edition Edition2024 => Warn;
}
```

----------------------------------------

TITLE: Demonstrating E0719 Error in Rust
DESCRIPTION: This code snippet shows an erroneous example where the associated type 'Item' in trait 'Iterator' is specified twice for struct 'Foo', leading to a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0719.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait FooTrait {}
trait BarTrait {}

// error: associated type `Item` in trait `Iterator` is specified twice
struct Foo<T: Iterator<Item: FooTrait, Item: BarTrait>> { f: T }
```

----------------------------------------

TITLE: Default Field Values in Rust Enums
DESCRIPTION: Shows how default field values work with enum variants when using derive(Default). The default variant must be marked with #[default] and all its fields must have default values.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/default-field-values.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(default_field_values)]

#[derive(Default)]
enum A {
    #[default]
    B {
        x: i32 = 0,
        y: i32 = 0,
    },
    C,
}
```

----------------------------------------

TITLE: Configuring Self-Contained Linking in Rust
DESCRIPTION: This example demonstrates how to use fine-grained control for self-contained linking in Rust. It shows how to enable the 'linker' component while using the GNU LLD linker flavor.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/codegen-options.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
-Clinker-flavor=gnu-lld-cc -Clink-self-contained=+linker
```

----------------------------------------

TITLE: Generic Function with Fn Trait Constraint in Rust
DESCRIPTION: This example demonstrates a generic function that accepts any closure implementing the Fn() trait. The closure must be called with zero arguments to match its definition, as specified by the trait bound.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0057.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<F: Fn()>(f: F) {
    f(); // this is valid, but f(3) would not work
}
```

----------------------------------------

TITLE: Handling Empty Link Name Annotation in Rust
DESCRIPTION: This snippet shows an incorrect use of the link attribute in Rust, where the 'name' parameter is empty, leading to a compilation error. The Rust compiler requires a valid library name to link external libraries.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0454.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#[link(name = "")] extern "C" {}
// error: `#[link(name = "")]` given with empty name
```

----------------------------------------

TITLE: Setting Correct File Paths in GDB for libgccjit Debugging
DESCRIPTION: This GDB command sets up path substitution to ensure correct file paths are displayed during debugging. It replaces the default debug paths with the actual source paths from the GCC repository.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/debugging-libgccjit.md#2025-04-21_snippet_4

LANGUAGE: gdb
CODE:
```
set substitute-path /usr/src/debug/gcc /path/to/gcc-repo/gcc
```

----------------------------------------

TITLE: Cyclic Relationship with Try and FromResidual Traits
DESCRIPTION: Example showing trait relationships that form a cycle through implied bounds, which requires coinduction to handle correctly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/coinduction.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
trait FromResidual<R> {}
trait Try: FromResidual<<Self as Try>::Residual> {
    type Residual;
}

struct Ready<T>(T);
impl<T> Try for Ready<T> {
    type Residual = Ready<()>;
}
impl<T> FromResidual<<Ready<T> as Try>::Residual> for Ready<T> {}
```

----------------------------------------

TITLE: Correct documentation comment usage in Rust
DESCRIPTION: This code snippet shows the proper way to use documentation comments in Rust. Doc comments should be placed immediately before items like structs, functions, or modules to document them.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0585.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
/// I'm documenting the following struct:
struct Foo;

/// I'm documenting the following function:
fn foo() {}
```

----------------------------------------

TITLE: Block Style Alignment for Control Flow in Rust
DESCRIPTION: Shows the default 'Block' alignment style for control flow statements. In this style, each condition is indented to the same level, creating a block-like structure.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_27

LANGUAGE: rust
CODE:
```
fn main() {
    if lorem_ipsum
        && dolor_sit
        && amet_consectetur
        && lorem_sit
        && dolor_consectetur
        && amet_ipsum
        && lorem_consectetur
    {
        // ...
    }
}
```

----------------------------------------

TITLE: Checking Position-Independent Executable Status in Rust Using ELF Headers
DESCRIPTION: Example showing how to check if a Rust executable is compiled as a position-independent executable by examining its ELF header. A position-independent executable has object type ET_DYN rather than ET_EXEC.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
$ readelf -h target/release/hello-rust | grep Type:
  Type:                              DYN (Shared object file)
```

----------------------------------------

TITLE: Removing Unused Function Parameters in Rust
DESCRIPTION: Eliminates function parameters that are declared but never used in the function body. This refactoring simplifies function signatures by removing superfluous parameters, also adjusting all call sites accordingly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_102

LANGUAGE: rust
CODE:
```
fn frobnicate(x: i32) {}

fn main() {
    frobnicate(92);
}
```

LANGUAGE: rust
CODE:
```
fn frobnicate() {}

fn main() {
    frobnicate();
}
```

----------------------------------------

TITLE: Binary Operator Front Style
DESCRIPTION: Example showing binary operator placement at the front of continued lines when expressions span multiple lines.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo
        || barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;

    let sum = 123456789012345678901234567890
        + 123456789012345678901234567890
        + 123456789012345678901234567890;

    let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        ..bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;
}
```

----------------------------------------

TITLE: Evaluating Candidate Stack in Old Rust Trait System
DESCRIPTION: In the old trait system implementation, candidate selection discards constraints of each candidate, only applying them by reevaluating the candidate after selection. This is due to the lack of canonicalization.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/significant-changes.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// Source: evaluate_stack
let candidate = self.evaluate_stack(
    stack,
    param_env,
    obligation,
    selcx,
    evaluate_only,
);
```

----------------------------------------

TITLE: Error: Using Struct Update Syntax Without Base Expression in Rust
DESCRIPTION: This example demonstrates the E0797 error that occurs when struct update syntax (with '..') is used without providing a base expression to fill the remaining fields.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0797.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo {
    fizz: u8,
    buzz: u8
}

let f1 = Foo { fizz: 10, buzz: 1};
let f2 = Foo { fizz: 10, .. }; // error
```

----------------------------------------

TITLE: Trait Definition with Multiple Implementations
DESCRIPTION: Illustrates complex trait implementation scenario with overlapping impl blocks for Get trait, demonstrating trait resolution challenges and ambiguity handling
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/resolution.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Get {
    fn get(&self) -> Self;
}

impl<T: Copy> Get for T {
    fn get(&self) -> T {
        *self
    }
}

impl<T: Get> Get for Box<T> {
    fn get(&self) -> Box<T> {
        Box::new(<T>::get(self))
    }
}
```

----------------------------------------

TITLE: Erroneous Direct Implementation of Unsize Trait in Rust
DESCRIPTION: This code snippet demonstrates an incorrect attempt to directly implement the Unsize trait. The compiler will reject this implementation with error E0328, as Unsize implementations are provided automatically by the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0328.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(unsize)]

use std::marker::Unsize;

pub struct MyType;

impl<T> Unsize<T> for MyType {}
```

----------------------------------------

TITLE: Markdown Links Rendering in Rustdoc
DESCRIPTION: This snippet shows various ways to create links in markdown and how they are rendered in the documentation. It illustrates the discrepancies in rendering based on the type of link used.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/linking-to-items-by-name.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
1. [a]
2. [b][c]
3. [d](e)
4. [f]

[f]: g
```

----------------------------------------

TITLE: Custom CSS for Search Interface
DESCRIPTION: Styling rules for search input, button, and form layout with hover and focus effects
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/not_found.md#2025-04-21_snippet_3

LANGUAGE: css
CODE:
```
#search-input {
    width: calc(100% - 100px);
}
#search-but {
    cursor: pointer;
}
#search-but, #search-input {
    padding: 4px;
    border: 1px solid #ccc;
    border-radius: 3px;
    outline: none;
    font-size: 0.7em;
    background-color: #fff;
}
#search-but:hover, #search-input:focus {
    border-color: #55a9ff;
}
```

----------------------------------------

TITLE: Basic perf Command for Profiling
DESCRIPTION: The fundamental perf command for recording performance data with call graph information using DWARF debugging format. This samples at 99 Hz to avoid generating excessive data while maintaining accuracy.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
perf record -F99 --call-graph dwarf XXX
```

----------------------------------------

TITLE: Erroneous Framework Linking in Rust for Non-macOS Platforms
DESCRIPTION: This code snippet demonstrates an incorrect attempt to link a framework on a non-macOS platform, which will result in a compilation error. It's used to illustrate the platform-specific nature of framework linking.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0455.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[link(name = "FooCoreServices", kind = "framework")] extern "C" {}
```

----------------------------------------

TITLE: Passing Configuration Flags to rustdoc (Bash)
DESCRIPTION: Shows how the `--cfg` flag is used to pass configuration flags (like feature flags) to rustdoc, which can influence how the code or documentation is processed, similar to `rustc --cfg`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_8

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --cfg feature="foo"
```

----------------------------------------

TITLE: AST Structural Transformations
DESCRIPTION: Key structural changes during AST to HIR conversion, including removal of parentheses, loop transformations, and type representation modifications
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ast-lowering.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
* Parenthesis
    * Removed without replacement, the tree structure makes order explicit
* `for` loops and `while (let)` loops
    * Converted to `loop` + `match` and some `let` bindings
* `if let`
    * Converted to `match`
* Universal `impl Trait`
    * Converted to generic arguments
* Existential `impl Trait`
    * Converted to a virtual `existential type` declaration
```

----------------------------------------

TITLE: Match Arm Leading Pipes with Always Setting in Rust
DESCRIPTION: Demonstrates the match_arm_leading_pipes setting set to Always, which adds leading pipe characters to all match arms.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_44

LANGUAGE: rust
CODE:
```
fn foo() {
    match foo {
        | "foo" | "bar" => {},
        | "baz"
        | "something relatively long"
        | "something really really really realllllllllllllly long" => println!("x"),
        | "qux" => println!("y"),
        | _ => {}
    }
}
```

----------------------------------------

TITLE: Basic Git Workflow Commands for Contributing to std::simd
DESCRIPTION: A sequence of Git commands demonstrating the basic workflow for contributing to the std::simd module, including cloning, creating branches, committing changes, and pushing to a remote repository.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/portable-simd/CONTRIBUTING.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
git clone it
git checkout -b my-branch
cargo test
git commit add ./path/to/changes && git commit -m 'Fix some bug'
git push --set-upstream origin my-branch
```

----------------------------------------

TITLE: Formatting Precise Capturing Bound in Rust
DESCRIPTION: Demonstrates the formatting of a `use<'a, T>` precise capturing bound in Rust. The bound is formatted as a single path segment with non-turbofished angle-bracketed arguments, similar to a trait bound with the identifier 'use'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/nightly.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo() -> impl Sized + use<'a> {}
```

LANGUAGE: rust
CODE:
```
fn foo() -> impl Sized + Use<'a> {}
```

----------------------------------------

TITLE: Coercing a Function Item to a Function Pointer
DESCRIPTION: This code shows how a function item can be coerced to a function pointer. The coercion allows the use of the function as a pointer type, showcasing Rust's type system capabilities.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0591.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# struct S;
# fn foo(_: S) {}
let x: fn(S) = foo; // OK, coerces
```

----------------------------------------

TITLE: Generating new Method for Struct in Rust
DESCRIPTION: This snippet shows how to generate a new method for a struct. It creates an impl block with a new method that takes all fields as parameters and constructs a new instance of the struct.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_61

LANGUAGE: rust
CODE:
```
struct Ctx<T: Clone> {
     data: T,
}
```

LANGUAGE: rust
CODE:
```
struct Ctx<T: Clone> {
     data: T,
}

impl<T: Clone> Ctx<T> {
    fn new(data: T) -> Self {
        Self { data }
    }
}
```

----------------------------------------

TITLE: Using Valid External Lang Item in Rust
DESCRIPTION: This code demonstrates the correct usage of an external lang item, specifically 'panic_impl' which is recognized by the Rust compiler. Valid lang items can be found in the compiler's weak_lang_items.rs file.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0264.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(lang_items)]
#![allow(internal_features)]

extern "C" {
    #[lang = "panic_impl"] // ok!
    fn cake();
}
```

----------------------------------------

TITLE: Combining #[doc(hidden)] with Re-exports in Rust
DESCRIPTION: This example illustrates how `#[doc(hidden)]` interacts with multiple re-exports. `InPrivate` is re-exported as `Hidden` with `#[doc(hidden)]` and then as `Visible`. Only `Visible` appears in the documentation, with its documentation including the documentation from `InPrivate` and its own.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/re-exports.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
```rust
mod private_mod {
    /// First
    pub struct InPrivate;
}

/// Second
#[doc(hidden)]
pub use self::private_mod::InPrivate as Hidden;
/// Third
pub use self::Hidden as Visible;
```
```

----------------------------------------

TITLE: Demonstrating Invalid Parameter Usage in Rust Type Bounds
DESCRIPTION: Example showing incorrect usage of function names and arguments in use<...> bounds where only type and const parameters are allowed. The code demonstrates two cases that trigger E0799: using a function name and using a function parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0799.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn bad1() -> impl Sized + use<main> {}

fn bad2(x: ()) -> impl Sized + use<x> {}

fn main() {}
```

----------------------------------------

TITLE: Creating Debian m68k Chroot Environment
DESCRIPTION: Commands to install debootstrap and create a Debian m68k chroot for running and testing m68k binaries using QEMU user emulation
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-linux-gnu.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
# apt install debootstrap debian-ports-archive-keyring
# debootstrap --keyring=/usr/share/keyrings/debian-ports-archive-keyring.gpg --arch=m68k unstable debian-68k http://ftp.ports.debian.org/debian-ports
```

----------------------------------------

TITLE: Running Cargotest in Rust CI
DESCRIPTION: Command to execute the cargotest tool which runs cargo test on sample projects like servo, ripgrep, and tokei as part of Rust's CI process to check for regressions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ecosystem.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
./x test src/tools/cargotest
```

----------------------------------------

TITLE: Invalid Raw Pointer Assignment from Temporary Value in Rust
DESCRIPTION: Shows an erroneous example that triggers E0745 error by attempting to take a raw pointer to a temporary value. This is unsafe because the temporary value is destroyed immediately after assignment.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0745.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn temp_address() {
    let ptr = &raw const 2; // error!
}
```

----------------------------------------

TITLE: Using LLD Linker with Self-Contained Linking
DESCRIPTION: Example command showing how to enable the LLD linker with self-contained linking in Rust. This approach uses the `rust-lld` linker from the toolchain rather than a system-installed binary.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/linker-features.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
-Clinker-features=+lld -Clink-self-contained=+linker
```

----------------------------------------

TITLE: Raw Byte String Literal Error in Rust
DESCRIPTION: This snippet demonstrates a compiler error in Rust that occurs when a raw byte string literal is not properly terminated with the same number of `#` symbols used at the beginning. The error message "Missing trailing `"` with `#` symbols to terminate the raw byte string literal" indicates that the compiler expects a closing delimiter with the correct number of `#` symbols.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_raw_byte_string_with_slash_n.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"br##\"\\n" error: Missing trailing `\"` with `#` symbols to terminate the raw byte string literal"
```

----------------------------------------

TITLE: Invalid Pointer to Reference Cast
DESCRIPTION: Illustrates an incorrect casting attempt from a constant pointer (*const u8) to a reference (&u8), which is not permitted in Rust's type system.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0605.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let v = core::ptr::null::<u8>(); // So here, `v` is a `*const u8`.
v as &u8; // error: non-primitive cast: `*const u8` as `&u8`
```

----------------------------------------

TITLE: Demonstrating Unknown Feature Error in Rust
DESCRIPTION: This code snippet showcases the error E0635 in Rust, which arises when an attempt is made to enable a non-existent or unsupported feature using the `#![feature]` attribute. The compiler will flag this as an error, preventing compilation. The error highlights the importance of specifying valid and supported feature flags in Rust projects.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0635.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"#![feature(nonexistent_rust_feature)] // error: unknown feature"
```

----------------------------------------

TITLE: Function Parameter Layout - Compressed
DESCRIPTION: Illustrates the 'Compressed' layout for function parameters. Multiple parameters are kept on the same line even if it exceeds max width, and wrapping is done less aggressively than in `Tall` mode.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_12

LANGUAGE: rust
CODE:
```
trait Lorem {
    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet);

    fn lorem(ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet) {
        // body
    }

    fn lorem(
        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,
        adipiscing: Adipiscing, elit: Elit,
    );

    fn lorem(
        ipsum: Ipsum, dolor: Dolor, sit: Sit, amet: Amet, consectetur: Consectetur,
        adipiscing: Adipiscing, elit: Elit,
    ) {
        // body
    }
}
```

----------------------------------------

TITLE: Example of Unstable Feature Gate Declaration in Rust Compiler
DESCRIPTION: Example of how an unstable feature is declared in the compiler's feature gate system. This shows the 'pub_restricted' feature which implements RFC 1422 for restricted visibility.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/stabilization_guide.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// pub(restricted) visibilities (RFC 1422)
(unstable, pub_restricted, "CURRENT_RUSTC_VERSION", Some(32409)),
```

----------------------------------------

TITLE: Invalid Usage of doc(inline) with Anonymous Import in Rust
DESCRIPTION: Shows erroneous code where doc(inline) attribute is incorrectly used with an anonymous import. This combination is not allowed as anonymous imports are always rendered with doc(no_inline).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0780.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[doc(inline)] // error: invalid doc argument
pub use foo::Foo as _;
```

----------------------------------------

TITLE: Fixed Mutable Reference by Removing Outer Reference
DESCRIPTION: Shows how to correctly modify data by using a direct mutable reference without the additional immutable reference layer
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0389.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct FancyNum {
    num: u8,
}

fn main() {
    let mut fancy = FancyNum{ num: 5 };

    let fancy_ref = &mut fancy;
    // `fancy_ref` is now &mut FancyNum, rather than &(&mut FancyNum)

    fancy_ref.num = 6; // No error!

    println!("{}", fancy_ref.num);
}
```

----------------------------------------

TITLE: Mapping C Integer Type in Rust
DESCRIPTION: Represents the Rust equivalent of C's signed int type, typically mapped to i32 but potentially varying on different systems. Provides insight into type compatibility and system-specific integer representations.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/core/src/ffi/c_int.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
type c_int = i32
```

----------------------------------------

TITLE: Testing with Raw String Literals
DESCRIPTION: Demonstrates the preferred way to write tests using unindented raw string literals for multiline fixtures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
    #[test]
    fn inline_field_shorthand() {
        check_assist(
            inline_local_variable,
            r#"
struct S { foo: i32}
fn main() {
    let $0foo = 92;
    S { foo }
}
"#,
            r#"
struct S { foo: i32}
fn main() {
    S { foo: 92 }
}
"#,
        );
    }
```

----------------------------------------

TITLE: Demonstrating Lint Check Conflict with forbid Directive in Rust
DESCRIPTION: Shows an example of code that fails to compile due to an allow attribute conflicting with a forbid directive for non_snake_case lints.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0453.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![forbid(non_snake_case)]

#[allow(non_snake_case)]
fn main() {
    // error: allow(non_snake_case) incompatible with previous forbid
    let MyNumber = 2;
}
```

----------------------------------------

TITLE: Generating is_empty Method from len in Rust
DESCRIPTION: This snippet shows how to generate an is_empty implementation based on an existing len method. It creates a new method that checks if the length is zero.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_59

LANGUAGE: rust
CODE:
```
struct MyStruct { data: Vec<String> }

impl MyStruct {
    #[must_use]
    pub fn len(&self) -> usize {
        self.data.len()
    }
}
```

LANGUAGE: rust
CODE:
```
struct MyStruct { data: Vec<String> }

impl MyStruct {
    #[must_use]
    pub fn len(&self) -> usize {
        self.data.len()
    }

    #[must_use]
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
}
```

----------------------------------------

TITLE: Separate Trait Implementation and Method Definition in Rust
DESCRIPTION: This example shows how to correctly implement a trait method 'a' and define a separate method 'b' for the struct 'Bar' without including it in the trait implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0407.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait Foo {
    fn a();
}

struct Bar;

impl Foo for Bar {
    fn a() {}
}

impl Bar {
    fn b() {}
}
```

----------------------------------------

TITLE: Implementing MirPass Trait for CleanupPostBorrowck in Rust
DESCRIPTION: Example of implementing the MirPass trait for a pass called CleanupPostBorrowck. This pass walks the MIR and removes all statements that are not relevant to code generation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/passes.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub struct CleanupPostBorrowck;
```

LANGUAGE: rust
CODE:
```
impl<'tcx> MirPass<'tcx> for CleanupPostBorrowck {
    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
        ...
    }
}
```

----------------------------------------

TITLE: Normalizing Types in Rust Trait Solver
DESCRIPTION: The solver uses try_normalize_ty to normalize types as much as possible before matching on TyKind. This is necessary because the solver lazily normalizes types, and matching on unnormalized types can lead to incorrect results.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/the-solver.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
EvalCtxt::try_normalize_ty
```

----------------------------------------

TITLE: Configuring Core Dependency in Cargo.toml
DESCRIPTION: Shows how to properly configure a dependency on the rustc-std-workspace-core crate, renaming it to 'core' using the package key for compatibility with compiler directives.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/rustc-std-workspace-core/README.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
core = { version = "1.0.0", optional = true, package = 'rustc-std-workspace-core' }
```

----------------------------------------

TITLE: Local Dependency Configuration - TOML
DESCRIPTION: Specifies a local dependency in a TOML file, allowing the inclusion of local repositories that are not yet published. Requires the crate's name and local path.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/lintcheck/README.md#2025-04-21_snippet_4

LANGUAGE: toml
CODE:
```
clippy = {name = "clippy", path = "/home/user/clippy"}
```

----------------------------------------

TITLE: Uninitialized Variable Usage Error in Rust
DESCRIPTION: Demonstrates incorrect code that attempts to use an uninitialized variable, resulting in compilation error E0381. This shows why Rust requires variables to be initialized before use.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0381.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let x: i32;
    let y = x; // error, use of possibly-uninitialized variable
}
```

----------------------------------------

TITLE: Compiling Rust for WebAssembly Target
DESCRIPTION: Example command showing how to compile a Rust source file to WebAssembly using rustc's --target flag. This demonstrates cross-compilation to the wasm32-unknown-unknown target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/targets/index.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ rustc src/main.rs --target=wasm32-unknown-unknown
```

----------------------------------------

TITLE: Configuring Cranelift Codegen Backend in Cargo.toml
DESCRIPTION: Configuration for enabling the Cranelift codegen backend by adding settings directly to the project's Cargo.toml file. This explicitly enables the unstable codegen-backend cargo feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/Readme.md#2025-04-21_snippet_3

LANGUAGE: toml
CODE:
```
# This line needs to come before anything else in Cargo.toml
cargo-features = ["codegen-backend"]

[profile.dev]
codegen-backend = "cranelift"
```

----------------------------------------

TITLE: Using expect as an Error Message in Rust
DESCRIPTION: Shows the 'expect as error message' style where expect's message describes the error that occurred. This approach focuses on describing what went wrong in a user-friendly way.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/core/src/error.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let path = std::env::var("IMPORTANT_PATH")
    .expect("env variable `IMPORTANT_PATH` is not set");
```

----------------------------------------

TITLE: Configuring Build Script in Cargo.toml
DESCRIPTION: Specifies the build script configuration in Cargo.toml to enable version information generation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/rustc_tools_util/README.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
build = "build.rs"
```

----------------------------------------

TITLE: Installing Rust Analyzer Server using Cargo
DESCRIPTION: Command to install the rust-analyzer language server locally, targeting VS Code Insiders with debug info level 2 in release mode.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/setup.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
# Install only the language server  
cargo xtask install --server \
    --code-bin code-insiders \
    --dev-rel  # Build in release mode with debug info level 2  
```

----------------------------------------

TITLE: Configuring Cross-Compilation Tools in bootstrap.toml
DESCRIPTION: This TOML configuration specifies the custom linker and C compiler scripts for the x86_64-win7-windows-msvc target, enabling cross-compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/win7-windows-msvc.md#2025-04-21_snippet_3

LANGUAGE: toml
CODE:
```
[target.x86_64-win7-windows-msvc]
linker = "path/to/xwin-lld-link"
cc = "path/to/xwin-clang-cl"
```

----------------------------------------

TITLE: Using Rust-like Pattern Syntax for Lints
DESCRIPTION: This code snippet proposes a rust-like pattern syntax for matching if expressions with specific conditions, illustrating alternative ways to express patterns. The syntax remains a theoretical approach.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_12

LANGUAGE: rust
CODE:
```
if false {
    #[*]
}
```

----------------------------------------

TITLE: Crates-io Source Configuration - TOML
DESCRIPTION: Defines a Crates-io source in a TOML file for specifying the crates to lint. Requires the name of the crate and one or more versions to be checked.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/lintcheck/README.md#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
bitflags = {name = "bitflags", versions = ['1.2.1']}
```

----------------------------------------

TITLE: Installing QEMU for Hexagon Architecture
DESCRIPTION: This snippet shows how to install QEMU for running Hexagon architecture programs on a Debian-based system. QEMU allows emulation of Hexagon binaries to test applications.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/hexagon-unknown-linux-musl.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
# apt install qemu-user-static
# qemu-hexagon-static ./hello
```

----------------------------------------

TITLE: Correct usage of instruction_set with arm::t32 in Rust
DESCRIPTION: This example demonstrates another valid usage of the instruction_set attribute with arm::t32 parameter for ARM architecture. It conditionally applies the attribute only when compiling for ARM targets.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0778.md#_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(isa_attribute)]

#[cfg_attr(target_arch="arm", instruction_set(arm::t32))]
fn something() {}
```

----------------------------------------

TITLE: Updating Version in Cargo.toml for Release
DESCRIPTION: A diff showing how to update the version number in Cargo.toml when preparing a rustfmt release. The example demonstrates incrementing from version 1.0.0 to 1.0.1.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Processes.md#2025-04-21_snippet_0

LANGUAGE: diff
CODE:
```
-version = "1.0.0"
+version = "1.0.1"
```

----------------------------------------

TITLE: Invalid Primitive Type Cast to Non-Primitive Collection
DESCRIPTION: Demonstrates an erroneous type cast attempt from a primitive u8 to a Vec<u8>, which is not allowed in Rust. Non-primitive casts are prohibited.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0605.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let x = 0u8;
x as Vec<u8>; // error: non-primitive cast: `u8` as `std::vec::Vec<u8>`
```

----------------------------------------

TITLE: Computing Trait Goal in Rust Solver
DESCRIPTION: The compute_trait_goal function collects all possible ways to prove a trait goal, such as Vec<T>: Clone. It uses assemble_and_evaluate_candidates to gather candidates and merge_candidates to combine the results.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/the-solver.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
EvalCtxt::compute_trait_goal
```

----------------------------------------

TITLE: Advanced MIR Filtering with Multiple Conditions
DESCRIPTION: Demonstrates complex MIR filtering using `&` and `|` operators to select specific functions and compilation passes for detailed debugging and analysis.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/debugging.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
rustc -Z dump-mir='main & CleanEndRegions | main & NoLandingPads' foo.rs
```

----------------------------------------

TITLE: Checking Configuration Flags with rustdoc (Bash)
DESCRIPTION: Demonstrates the use of the `--check-cfg` flag to check configuration flags, accepting values similar to `rustc --check-cfg` for validating configuration inputs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_9

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --check-cfg='cfg(my_cfg, values("foo", "bar"))'
```

----------------------------------------

TITLE: Correct Negative Trait Implementation Example in Rust
DESCRIPTION: Shows the correct way to implement a negative trait by removing all items from the implementation block, simply declaring that the trait is not implemented for the type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0749.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
# #![feature(negative_impls)]
trait MyTrait {
    type Foo;
}

impl !MyTrait for u32 {}
```

----------------------------------------

TITLE: Corrected Rust Enum Field Definition and Access
DESCRIPTION: Shows the correct way to define an enum variant with a field and access it. This example demonstrates proper field naming and initialization in a Rust enum.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0559.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
enum Field {
    Fool { joke: u32 },
}

let s = Field::Fool { joke: 0 }; // ok!
```

----------------------------------------

TITLE: Running All Tests with x
DESCRIPTION: This command builds the stage 1 compiler and executes the entire test suite. It's not recommended for local development due to the time it takes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
./x test
```

----------------------------------------

TITLE: Including Custom HTML Before Content with rustdoc (Bash)
DESCRIPTION: Illustrates how the `--html-before-content` flag inserts HTML content from specified files into the `<body>` tag before the main documentation content.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_20

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --html-before-content extra.html
```

LANGUAGE: bash
CODE:
```
$ rustdoc README.md --html-before-content extra.html
```

----------------------------------------

TITLE: Converting Boolean to Enum in Rust
DESCRIPTION: This assist converts boolean variables, fields, constants, and statics into a new enum with two variants. It replaces all assignments and usages with the new enum variants.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_18

LANGUAGE: rust
CODE:
```
fn main() {
    let bool = true;

    if bool {
        println!("foo");
    }
}
```

LANGUAGE: rust
CODE:
```
#[derive(PartialEq, Eq)]
enum Bool { True, False }

fn main() {
    let bool = Bool::True;

    if bool == Bool::True {
        println!("foo");
    }
}
```

----------------------------------------

TITLE: Formatting Type Aliases with Trailing Where Clauses in Rust
DESCRIPTION: Shows how to format type aliases with a trailing where clause. The code breaks before the equals sign and indents, then breaks before the where keyword.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_24

LANGUAGE: rust
CODE:
```
// With only a trailing where clause
type VeryLongType<T, U>
    = AnEvenLongerType<T, U, Foo<T>>
where
    T: U::AnAssociatedType,
    U: SomeBound;
```

----------------------------------------

TITLE: Specifying External Dependency Location with rustdoc (Bash)
DESCRIPTION: Illustrates how the `--extern` flag allows explicitly specifying the path to a dependency crate, providing a direct location instead of searching library paths.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_10

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --extern lazy-static=/path/to/lazy-static
```

----------------------------------------

TITLE: Demonstrating Trait Circular Dependency Error in Rust
DESCRIPTION: Shows an erroneous code example where two traits create a circular dependency. FirstTrait depends on SecondTrait and SecondTrait depends on FirstTrait, which is not allowed in Rust's type system.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0391.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait FirstTrait : SecondTrait {

}

trait SecondTrait : FirstTrait {

}
```

----------------------------------------

TITLE: Coroutine Control Flow Example in Rust
DESCRIPTION: Shows control flow through a coroutine with multiple yield points, demonstrating how execution can be suspended and resumed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/coroutines.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]

use std::ops::Coroutine;
use std::pin::Pin;

fn main() {
    let mut coroutine = #[coroutine] || {
        println!("2");
        yield;
        println!("4");
    };

    println!("1");
    Pin::new(&mut coroutine).resume(());
    println!("3");
    Pin::new(&mut coroutine).resume(());
    println!("5");
}
```

----------------------------------------

TITLE: Implementing and Using doc_notable_trait in Rust
DESCRIPTION: This code snippet demonstrates how to use the doc_notable_trait feature to mark a trait as notable and create a function that returns a type implementing that trait. The #[doc(notable_trait)] attribute is applied to the trait, and rustdoc will display a dialog about the trait implementation for the returned type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/doc-notable-trait.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(doc_notable_trait)]

#[doc(notable_trait)]
pub trait MyTrait {}

pub struct MyStruct;
impl MyTrait for MyStruct {}

/// The docs for this function will have a button that displays a dialog about
/// `MyStruct` implementing `MyTrait`.
pub fn my_fn() -> MyStruct { MyStruct }
```

----------------------------------------

TITLE: Incorrect Usage of Variadic C Function in Rust
DESCRIPTION: This example demonstrates an incorrect usage of C's printf function in Rust, which fails because it doesn't provide the minimum required argument (format string).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0060.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use std::os::raw::{c_char, c_int};

extern "C" {
    fn printf(_: *const c_char, ...) -> c_int;
}

unsafe { printf(); } // error!
```

----------------------------------------

TITLE: Printing Crate Name in Rust
DESCRIPTION: Demonstrates how to print the name of a Rust crate using rustc's --print flag with crate-name option.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments/print-options.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ rustc --print crate-name --crate-name my_crate a.rs
my_crate
```

----------------------------------------

TITLE: Calling Generic Function with Explicit Type Parameters in Rust
DESCRIPTION: This code snippet shows how to call the `convertAll` function with explicit type parameters.  It creates a vector of string slices and attempts to call `convertAll` with `i32` as `A` and `String` as `T`. This is to illustrate how the trait bounds and variance rules apply when using generic functions with specific type parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/variance.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
"let mut vector = vec!["string", ...];
convertAll::<i32, String>(vector);"
```

----------------------------------------

TITLE: Undefined Behavior Example from Invalid Trait Object Casting in Rust
DESCRIPTION: This example demonstrates how manually adding an auto trait to a trait object that doesn't satisfy the trait can lead to undefined behavior. The code creates an unsound transmutation that results in a crash when a method is called.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0804.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use core::{mem::transmute, ptr::NonNull};

trait Trait {
    fn f(&self)
    where
        Self: Send;
}

impl Trait for NonNull<()> {
    fn f(&self) {
        unreachable!()
    }
}

fn main() {
    let unsend: &dyn Trait = &NonNull::dangling();
    let bad: &(dyn Trait + Send) = unsafe { transmute(unsend) };
    // This crashes, since the vtable for `NonNull as dyn Trait` does
    // not have an entry for `Trait::f`.
    bad.f();
}
```

----------------------------------------

TITLE: Configuring future-size-threshold
DESCRIPTION: Sets the maximum byte size a `Future` can have, before the `clippy::large_futures` lint is triggered. Defaults to `16384`. This helps to control the size of futures to avoid performance problems.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_20



----------------------------------------

TITLE: Validating Rust Lifetime Identifier Syntax
DESCRIPTION: Highlights compilation errors when defining lifetime identifiers that do not conform to Rust's naming conventions, specifically preventing identifiers from beginning with numeric characters
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/lifetime_starts_with_a_number.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
'1
```

LANGUAGE: rust
CODE:
```
'1lifetime
```

----------------------------------------

TITLE: Erroneous Async Function Return Type with Self Reference
DESCRIPTION: Example showing incorrect usage of Self as return type in an async function when dealing with lifetime parameters. This pattern is not currently supported by the Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0760.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct S<'a>(&'a i32);

impl<'a> S<'a> {
    async fn new(i: &'a i32) -> Self {
        S(&22)
    }
}
```

----------------------------------------

TITLE: Adding Hash to Raw String Literals in Rust
DESCRIPTION: This assist adds a hash to a raw string literal. It increases the number of hash symbols, allowing for more flexibility in the string content.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
fn main() {
    r#"Hello, World!"#;
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    r##"Hello, World!"##;
}
```

----------------------------------------

TITLE: Running Unit Tests for Rustfmt
DESCRIPTION: This snippet shows how to run the test suite for Rustfmt using the cargo test command. It covers unit tests, file comparison, idempotence tests, and project bootstrapping.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Contributing.md#_snippet_0

LANGUAGE: Rust
CODE:
```
cargo test
```

----------------------------------------

TITLE: Configuring Branch Protection for AArch64 in Rust
DESCRIPTION: Example of how to enable branch protection features for AArch64 architectures in Rust. This snippet demonstrates the syntax for enabling pointer authentication for all functions and branch target identification.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/branch-protection.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
-Z branch-protection=bti,pac-ret,leaf
```

----------------------------------------

TITLE: Correct SIMD Tuple Struct Implementation in Rust
DESCRIPTION: Demonstrates proper implementation of a SIMD tuple struct where the field is correctly declared as a single-element array to enable SIMD operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0076.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(repr_simd)]

#[repr(simd)]
struct Good([u16; 1]); // ok!
```

----------------------------------------

TITLE: Using Non-static Lifetime in Const Generic Parameter (Error Example)
DESCRIPTION: This code demonstrates an erroneous attempt to use a non-static lifetime ('a) in a const generic parameter. This pattern is not allowed in Rust and would trigger error E0770.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0771.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(adt_const_params, unsized_const_params)]

fn function_with_str<'a, const STRING: &'a str>() {} // error!
```

----------------------------------------

TITLE: Demonstrating Incorrect Usage of #[track_caller] with Extern C Function in Rust
DESCRIPTION: This code snippet shows an erroneous example of using the #[track_caller] attribute with an extern "C" function, which is not allowed. The #[track_caller] attribute requires functions to have the "Rust" ABI for implicitly receiving caller location.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0737.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#[track_caller]
extern "C" fn foo() {}
```

----------------------------------------

TITLE: Getting Version Info with rustdoc (Bash)
DESCRIPTION: Shows how to retrieve the rustdoc version using the `-V` or `--version` flag, which outputs the tool's version string.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ rustdoc -V
```

LANGUAGE: bash
CODE:
```
$ rustdoc --version
```

----------------------------------------

TITLE: Unsafe Handling of Cell Types in Rust
DESCRIPTION: This example introduces an unsafe approach to handle Cell types by wrapping them and implementing Sync manually. Though it allows static usage, care must be taken to synchronize access appropriately to prevent race conditions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0492.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
use std::cell::Cell;

struct NotThreadSafe<T> {
    value: Cell<T>,
}

unsafe impl<T> Sync for NotThreadSafe<T> {}

static A: NotThreadSafe<usize> = NotThreadSafe { value : Cell::new(1) };
static B: &'static NotThreadSafe<usize> = &A; // ok!
```

----------------------------------------

TITLE: Using cfg_version Feature for Version-Dependent Code in Rust
DESCRIPTION: Demonstrates how to use the cfg_version feature to write version-specific code implementations. The example shows both attribute-based configuration (#[cfg]) and runtime checking (cfg!) based on compiler version.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/cfg-version.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(cfg_version)]

#[cfg(version("1.42"))] // 1.42 and above
fn a() {
    // ...
}

#[cfg(not(version("1.42")))] // 1.41 and below
fn a() {
    // ...
}

fn b() {
    if cfg!(version("1.42")) {
        // ...
    } else {
        // ...
    }
}
```

----------------------------------------

TITLE: Using Static and Const Variables in Inner Functions
DESCRIPTION: Alternative solution using static and const variables which can be accessed from inner functions. Includes unsafe code for static mut manipulation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0434.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn foo() {
    static mut X: u32 = 4;
    const Y: u32 = 5;
    fn bar() -> u32 {
        unsafe {
            X = 3;
        }
        Y
    }
}
```

----------------------------------------

TITLE: Demonstrating Unterminated Multi-line Doc Comment in Rust
DESCRIPTION: This snippet illustrates an unterminated multi-line documentation comment in Rust, which also results in a compilation error (E0758).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0758.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
/*! I am not terminated!
```

----------------------------------------

TITLE: Checking for Macro Expansion with from_expansion
DESCRIPTION: Demonstrates how to check if code comes from a macro expansion using the Span.from_expansion() method to avoid linting macro-generated code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/macro_expansions.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
if expr.span.from_expansion() {
    // We most likely want to ignore it.
    return;
}
```

----------------------------------------

TITLE: Fixing Unconstrained Const Parameter by Moving to Method
DESCRIPTION: This code shows how to fix the E0207 error with const parameters by moving the const parameter from the impl block to the method level.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0207.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
struct Foo;

// Move the const parameter from the impl to the method
impl Foo {
    fn get<const T: i32>(&self) -> i32 {
        i32::default()
    }
}
```

----------------------------------------

TITLE: Correct Usage of Irrefutable Pattern with Loop and Let-Binding (Rust)
DESCRIPTION: This code snippet demonstrates the correct way to handle an irrefutable pattern using a regular let-binding inside a loop. It defines the same 'Irrefutable' struct but uses a loop construct instead of while-let, avoiding the deprecated error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0165.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Irrefutable(i32);
let irr = Irrefutable(0);

loop {
    let Irrefutable(x) = irr;
    // ...
}
```

----------------------------------------

TITLE: Variable Shadowing with Static in Rust
DESCRIPTION: This snippet illustrates a compilation error caused by a match binding attempting to shadow a static variable in Rust. It shows how the variable name conflicts with the name of a static variable, leading to a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0530.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
"static TEST: i32 = 0;\n\nlet r = 123;\nmatch r {\n    TEST => {} // error: name of a static\n}"
```

----------------------------------------

TITLE: Test Module Snippet Completion
DESCRIPTION: Generates a standard Rust test module with boilerplate configuration and a sample test function
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/features_generated.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_name() {}
}
```

----------------------------------------

TITLE: Incorrect Usage of 'continue' in Rust Functions
DESCRIPTION: This code snippet demonstrates incorrect usage of the 'continue' keyword in Rust functions. The 'continue' statement is used incorrectly within labeled blocks, which will result in compilation errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0696.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn continue_simple() {
    'b: {
        continue; // error!
    }
}
fn continue_labeled() {
    'b: {
        continue 'b; // error!
    }
}
fn continue_crossing() {
    loop {
        'b: {
            continue; // error!
        }
    }
}
```

----------------------------------------

TITLE: Specify Edition for rustdoc and Doctests (bash)
DESCRIPTION: Demonstrates using the `--edition` flag to make `rustdoc` process Rust code and compile doctests according to a specific Rust edition (e.g., 2018). The default edition is 2015 and requires a valid edition year.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_26

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --edition 2018
```

LANGUAGE: bash
CODE:
```
$ rustdoc --test src/lib.rs --edition 2018
```

----------------------------------------

TITLE: Customizing Semantic Token Styling for Specific Themes (JSON)
DESCRIPTION: This snippet demonstrates how to customize semantic token styling for specific VS Code themes. It overrides the default styling for the `operator.unsafe` token within the "Ayu Light" theme.  Requires VS Code and the Rust extension. The output applies the specified color to unsafe operators only within the selected theme. The configuration is applied in settings.json.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/editor_features.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
   "editor.semanticTokenColorCustomizations": {
         "rules": {
             "operator.unsafe": "#ff6600"
         },
         "[Ayu Light]": {
            "rules": {
               "operator.unsafe": "#572300"
            }
         }
    },
}
```

----------------------------------------

TITLE: Rust Missing Octal Digits Error
DESCRIPTION: This snippet demonstrates an error case where an octal integer literal (0o) is defined without any digits following the prefix. This will cause a compiler error indicating missing digits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0o\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Specifying MSRV with Custom Inner Attribute in Rust
DESCRIPTION: Shows how to specify Minimum Supported Rust Version using a custom inner attribute with the clippy::msrv feature, which requires enabling unstable features
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/README.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
#![feature(custom_inner_attributes)]
#![clippy::msrv = "1.30.0"]

fn main() {
  ...
}
```

----------------------------------------

TITLE: Using Clippy Driver Directly
DESCRIPTION: Example of using clippy-driver directly without cargo
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/README.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
clippy-driver --edition 2018 -Cpanic=abort foo.rs
```

----------------------------------------

TITLE: Incorrect Usage of #[link] Attribute in Rust
DESCRIPTION: This code snippet demonstrates an erroneous use of the #[link] attribute without specifying the 'name' parameter. This will result in a compilation error E0459.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0459.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[link(kind = "dylib")] extern "C" {}
// error: `#[link(...)]` specified without `name = "foo"`
```

----------------------------------------

TITLE: Method Lookup Transformation Example
DESCRIPTION: Demonstrates how method lookup transforms a method call from receiver.method(...) to a fully-qualified syntax with receiver type adjustments
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/method-lookup.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// Transformation example
// receiver.method(...) becomes:
// Trait::method(ADJ(receiver), ...) // for trait calls
// ReceiverType::method(ADJ(receiver), ...) // for inherent method calls
```

----------------------------------------

TITLE: Rust Missing Binary Digits with Underscore Error
DESCRIPTION: This snippet demonstrates an error case where a binary integer literal (0b_) is defined with only an underscore after the prefix, without digits. This should trigger a compiler error for missing digits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_3

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0b_\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Printing Rust TLS Models
DESCRIPTION: Demonstrates how to list available Thread Local Storage models using rustc's --print flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments/print-options.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
$ rustc --print tls-models a.rs
Available TLS models:
    global-dynamic
    local-dynamic
    initial-exec
    local-exec
    emulated
```

----------------------------------------

TITLE: Converting Generated Lint Pass to Manual Definition in Rust
DESCRIPTION: Example showing how to convert a lint pass from using the generated macro to a manual definition struct that can hold configuration values.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_18

LANGUAGE: rust
CODE:
```
// Generated struct definition
declare_lint_pass!(StructName => [
    LINT_NAME
]);

// New manual definition struct
pub struct StructName {}

impl_lint_pass!(StructName => [
    LINT_NAME
]);
```

----------------------------------------

TITLE: Including Config Extensions in TOML
DESCRIPTION: This snippet demonstrates including additional TOML configuration files into a primary file, showing how to manage layered configurations. Inclusions are processed in right-to-left order for overriding settings, and parent files override the included ones in conflicts.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/suggested.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
include = ["cross.toml"]
```

----------------------------------------

TITLE: Linking External Crate Docs using Rustdoc Bash
DESCRIPTION: This command illustrates the `--extern-html-root-url` flag, which tells `rustdoc` where to find the documentation for a specific external crate (`some-crate`) when generating links within the documentation for `src/lib.rs`. Requires `-Z unstable-options`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_15

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs -Z unstable-options --extern-html-root-url some-crate=https://example.com/some-crate/1.0.1
```

----------------------------------------

TITLE: String Deref Pattern Matching in Rust
DESCRIPTION: This code demonstrates pattern matching on a `String` value using the `string_deref_patterns` feature. The `Value` enum can hold either a `String` or a `Number`, and the `is_it_the_answer` function checks if the value is equal to "42", leveraging the `Deref` implementation to treat the `String` as a `&str` in the pattern.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/string-deref-patterns.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(string_deref_patterns)]

pub enum Value {
    String(String),
    Number(u32),
}

pub fn is_it_the_answer(value: Value) -> bool {
    match value {
        Value::String("42") => true,
        Value::Number(42) => true,
        _ => false,
    }
}
```

----------------------------------------

TITLE: Visual Style Alignment for Struct Literals in Rust
DESCRIPTION: Demonstrates the 'Visual' alignment style for struct literals. Fields after the first line are aligned with the first field.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_36

LANGUAGE: rust
CODE:
```
fn main() {
    let lorem = Lorem { ipsum: dolor,
                        sit: amet };
}
```

----------------------------------------

TITLE: Configuring Rustfmt with rustfmt::skip attribute in Rust
DESCRIPTION: Example of using the rustfmt::skip attribute to prevent Rustfmt from formatting a macro.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_20

LANGUAGE: Rust
CODE:
```
#[rustfmt::skip::macros(my_macro)]
```

----------------------------------------

TITLE: Enabling Jemalloc Allocator
DESCRIPTION: By adding the `rust.jemalloc` option with a value of `true` in `bootstrap.toml`, this snippet configures the Rust compiler to use the `jemalloc` memory allocator. This setup is applicable on Linux and macOS targets to improve performance over the default allocator.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/optimized-build.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[rust]
jemalloc = true
```

----------------------------------------

TITLE: Creating Structs with Concatenated Names Using macro_metavar_expr_concat in Rust
DESCRIPTION: This example demonstrates how to use the concat metavariable expression to create multiple structs with prefixed names based on a provided identifier. The macro generates FirstThing, SecondThing, and ThirdThing structs from a single macro invocation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/macro-metavar-expr-concat.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(macro_metavar_expr_concat)]

macro_rules! create_some_structs {
    ($name:ident) => {
        pub struct ${ concat(First, $name) };
        pub struct ${ concat(Second, $name) };
        pub struct ${ concat(Third, $name) };
    }
}

create_some_structs!(Thing);
```

----------------------------------------

TITLE: Configuring Git Blame Ignore File (Git Console)
DESCRIPTION: Configures the local Git repository's `blame` command to use the `.git-blame-ignore-revs` file as a list of commit hashes to ignore when determining authorship of lines. This helps in `git blame` output by skipping commits that only contain reformatting.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_32

LANGUAGE: console
CODE:
```
git config blame.ignorerevsfile .git-blame-ignore-revs
```

----------------------------------------

TITLE: External Module Declarations in d.rs
DESCRIPTION: Lists three external module declarations from the d.rs file that define the module structure
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/tests/mod-resolver/issue-5198/lib/c/d/explanation.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
mod e;
mod f;
mod g;
```

----------------------------------------

TITLE: Applying De Morgan's Law to Iterator Methods in Rust
DESCRIPTION: This assist applies De Morgan's law to `Iterator::all` and `Iterator::any` methods. It transforms `!iter.any(|x| predicate(x))` into `iter.all(|x| !predicate(x))` and vice versa.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_12

LANGUAGE: rust
CODE:
```
fn main() {
    let arr = [1, 2, 3];
    if !arr.into_iter().any(|num| num == 4) {
        println!("foo");
    }
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let arr = [1, 2, 3];
    if arr.into_iter().all(|num| num != 4) {
        println!("foo");
    }
}
```

----------------------------------------

TITLE: Converting Universal Function Call Syntax to Method Call in Rust
DESCRIPTION: Transforms a universal function call syntax (UFCS) into a method call syntax. This refactoring also adds the necessary import statement for the trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_113

LANGUAGE: rust
CODE:
```
fn main() {
    std::ops::Add::add(1, 2);
}
```

LANGUAGE: rust
CODE:
```
use std::ops::Add;

fn main() {
    1.add(2);
}
```

----------------------------------------

TITLE: Demonstrating Multiple Library Files Error in Rust
DESCRIPTION: This code snippet shows a compilation error that occurs when multiple library files with the same crate name are present. It uses auxiliary builds to create the conflict and attempts to use an external crate, resulting in an error due to multiple candidates for the dependency.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0464.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// aux-build:crateresolve-1.rs
// aux-build:crateresolve-2.rs
// aux-build:crateresolve-3.rs

extern crate crateresolve;
//~^ ERROR multiple candidates for `rlib` dependency `crateresolve` found

fn main() {}
```

----------------------------------------

TITLE: Sorting Modules by Appearance using Rustdoc Bash
DESCRIPTION: This command utilizes the `--sort-modules-by-appearance` flag to instruct `rustdoc` to list items on module pages in the order they appear in the source code (`src/lib.rs`), overriding the default alphabetical sorting. The `-Z unstable-options` flag is required.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_12

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs -Z unstable-options --sort-modules-by-appearance
```

----------------------------------------

TITLE: Formatting Example: Match Expression with Inner Attributes
DESCRIPTION: Shows correct indentation of inner attributes in match expressions when using version=Two.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
pub fn main() {
    match x {
        #![attr1]
        #![attr2]
        _ => (),
    }
}
```

----------------------------------------

TITLE: Defining stdcall Functions in Rust
DESCRIPTION: This snippet defines functions with the stdcall calling convention, which is commonly used in Windows API functions. It includes function definitions with and without prefixes and decorations. Requires the Rust standard library.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-import-name-type/output.txt#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
stdcall_fn_undecorated(4)
stdcall_fn_undecorated2(14)
stdcall_fn_noprefix(5)
stdcall_fn_decorated(6)
```

----------------------------------------

TITLE: Referencing an External Crate - Rust
DESCRIPTION: This snippet demonstrates how to declare an external dependency using `extern crate a;`. It showcases how one Rust crate can depend on another. The purpose is to utilize functionalities provided by the 'a' crate, though in this specific scenario, compilation will fail if crates are compiled using different `rustc` versions. This requires the referenced crate to be available during the compilation process.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0514.md#_snippet_1

LANGUAGE: Rust
CODE:
```
// compiled with nightly `rustc`

#[crate_type = "lib"]

extern crate a; // error: found crate `a` compiled by an incompatible version
                //        of rustc
```

----------------------------------------

TITLE: Using the unstable attribute in Rust
DESCRIPTION: The #[unstable] attribute marks an item as unstable, requiring a feature flag to use across crate boundaries. It includes a feature name, associated GitHub issue number, and reason for instability. The attribute infects all sub-items.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/stability.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[unstable(feature = "foo", issue = "1234", reason = "lorem ipsum")]
```

----------------------------------------

TITLE: Viewing Available Rust Targets in Markdown
DESCRIPTION: Shows how to use rustc to display all available built-in compilation targets supported by the Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/targets/built-in.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
rustc --print target-list
```

----------------------------------------

TITLE: Handling Raw String Literal Termination Error in Rust
DESCRIPTION: This snippet shows an incorrect raw string literal in Rust where the required trailing combination of quotation marks and hash symbols is missing, causing a compilation error. It demonstrates the importance of closing raw strings correctly when using multiple `#` symbols. The snippet includes the start of a raw string literal and highlights the missing terminating characters, which are necessary to avoid syntax errors when embedding special characters such as newlines.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_raw_string_with_slash_n.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
STRING "r##\"\\n" error: Missing trailing `\"` with `#` symbols to terminate the raw string literal
```

----------------------------------------

TITLE: Incorrect Usage of Generic Parameters with Foreign Items in Rust
DESCRIPTION: This code snippet demonstrates an erroneous attempt to use generic type parameters with an extern "C" function declaration, which is not allowed in Rust and will produce error E0044.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0044.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
extern "C" { fn some_func<T>(x: T); }
```

----------------------------------------

TITLE: Installing iOS Targets via Rustup
DESCRIPTION: Commands to install tier 2 iOS targets using rustup package manager. These commands add support for building to ARM64 iOS devices and both ARM64/x86_64 simulators.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-ios.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ rustup target add aarch64-apple-ios
$ rustup target add aarch64-apple-ios-sim
$ rustup target add x86_64-apple-ios
```

----------------------------------------

TITLE: Calling fastcall_fn_4 - Rust
DESCRIPTION: This snippet calls the `fastcall_fn_4` function in Rust, passing two integers (1 and 2) and a floating-point number (3.0) as arguments. This shows the `fastcall` calling convention with mixed datatypes.  The functions implementation determines the output.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_13

LANGUAGE: Rust
CODE:
```
fastcall_fn_4(1, 2, 3.0)
```

----------------------------------------

TITLE: Profiling Cargo with perf
DESCRIPTION: Example of profiling cargo using a specific toolchain with perf. This captures performance data for cargo rustc executions at 99 Hz sampling rate with call graph information.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
perf record -F99 --call-graph dwarf cargo +<toolchain> rustc
```

----------------------------------------

TITLE: Writing User-Focused Pull Request Descriptions
DESCRIPTION: Examples of good and bad pull request titles, demonstrating how to write them from a user's perspective rather than implementation details.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# GOOD
Make goto definition work inside macros

# BAD
Use original span for FileId
```

----------------------------------------

TITLE: Basic Default Field Values Usage in Rust Structs
DESCRIPTION: Demonstrates basic usage of default field values in a struct definition with derive(Default) implementation. Shows how fields can be omitted during initialization and how default values are used.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/default-field-values.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(default_field_values)]

#[derive(Default)]
struct Pet {
    name: Option<String>, // impl Default for Pet will use Default::default() for name
    age: i128 = 42, // impl Default for Pet will use the literal 42 for age
}

fn main() {
    let a = Pet { name: Some(String::new()), .. }; // Pet { name: Some(""), age: 42 }
    let b = Pet::default(); // Pet { name: None, age: 42 }
    assert_eq!(a.age, b.age);
    // The following would be a compilation error: `name` needs to be specified
    // let _ = Pet { .. };
}
```

----------------------------------------

TITLE: Preserve Import Granularity in Rust
DESCRIPTION: Shows the default imports_granularity setting (Preserve), which maintains the original grouping and structure of import statements.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_50

LANGUAGE: rust
CODE:
```
use foo::b;
use foo::b::{f, g};
use foo::{a, c, d::e};
use qux::{h, i};
```

----------------------------------------

TITLE: Configuring Max Include File Size in Rust
DESCRIPTION: This option sets the maximum size of a file included via `include_bytes!()` or `include_str!()`, in bytes, before the `large_include_file` lint is triggered. The default value is `1000000`. The input is an integer, representing the maximum allowed file size in bytes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_27



----------------------------------------

TITLE: Small Heuristics Max Example in Rust
DESCRIPTION: Demonstrates formatting when use_small_heuristics is set to 'Max', where all width settings equal max_width for maximum horizontal formatting.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_77

LANGUAGE: rust
CODE:
```
enum Lorem {
    Ipsum,
    Dolor(bool),
    Sit { amet: Consectetur, adipiscing: Elit },
}

fn main() {
    lorem("lorem", "ipsum", "dolor", "sit", "amet", "consectetur", "adipiscing");

    let lorem = Lorem { ipsum: dolor, sit: amet };

    let lorem = if ipsum { dolor } else { sit };
}
```

----------------------------------------

TITLE: Checking for generated profraw coverage data files
DESCRIPTION: Command to list the automatically generated profraw coverage data files after running an instrumented binary.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
$ echo "{some: 'thing'}" | target/debug/examples/formatjson5 -
...
$ ls default_*.profraw
default_11699812450447639123_0_20944.profraw
```

----------------------------------------

TITLE: Invalid Clippy Lint Tool Name
DESCRIPTION: Examples of incorrectly spelled clippy tool name in lint attributes that will trigger E0710 error
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0710.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[allow(clipp::filter_map)] // error!
fn main() {
    // business logic
}
```

LANGUAGE: rust
CODE:
```
#[warn(clipp::filter_map)] // error!
fn main() {
    // business logic
}
```

----------------------------------------

TITLE: Normalizing Import Statements in Rust
DESCRIPTION: Reorganizes and normalizes import statements by flattening nested import groups and sorting them alphabetically. This refactoring improves code readability and maintainability by enforcing a consistent import style.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_91

LANGUAGE: rust
CODE:
```
use std::{io, {fmt::Formatter}};
```

LANGUAGE: rust
CODE:
```
use std::{fmt::Formatter, io};
```

----------------------------------------

TITLE: Triggering Manual Performance Test Run
DESCRIPTION: Command to request a performance test run on a PR before merging. This triggers a try build followed by performance benchmarking.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/perf.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
@bors try @rust-timer queue
```

----------------------------------------

TITLE: Cross-compiling Rust - Bash
DESCRIPTION: This script demonstrates how to cross-compile the Rust compiler using a target specification JSON file to defined paths.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/new-target.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
DESTDIR=/path/to/install/in \
./x install -i --stage 1 --host aarch64-apple-darwin.json --target aarch64-apple-darwin \
compiler/rustc library/std
```

----------------------------------------

TITLE: Invalid CoercePointee with Unmarked Multiple Generics
DESCRIPTION: Example showing error when deriving CoercePointee on a struct with multiple generic parameters but no pointee designation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0802.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#![feature(coerce_pointee)]
use std::marker::CoercePointee;
#[derive(CoercePointee)]
#[repr(transparent)]
struct AmbiguousPointee<'a, T1: ?Sized, T2: ?Sized> {
    a: (&'a T1, &'a T2),
}
```

----------------------------------------

TITLE: Generating Compiler Diagnostics in Rust
DESCRIPTION: Demonstrates creating and emitting compiler errors with suggestions using the Rust diagnostic system. Shows how to generate error messages, add suggestions, and handle span-based error reporting.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
// Get a `Diag`. This does _not_ emit an error yet.
let mut err = sess.dcx.struct_span_err(sp, fluent::example::example_error);

// In some cases, you might need to check if `sp` is generated by a macro to
// avoid printing weird errors about macro-generated code.

if let Ok(snippet) = sess.source_map().span_to_snippet(sp) {
    // Use the snippet to generate a suggested fix
    err.span_suggestion(suggestion_sp, fluent::example::try_qux_suggestion, format!("qux {}", snippet));
} else {
    // If we weren't able to generate a snippet, then emit a "help" message
    // instead of a concrete "suggestion". In practice this is unlikely to be
    // reached.
    err.span_help(suggestion_sp, fluent::example::qux_suggestion);
}

// emit the error
err.emit();
```

----------------------------------------

TITLE: Rust First Version of Crate A (a1.rs)
DESCRIPTION: First version of crate 'a' with a generic function declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0460.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![crate_name = "a"]

pub fn foo<T>() {}
```

----------------------------------------

TITLE: Correct Union Initialization in Rust
DESCRIPTION: This example demonstrates the proper way to initialize a union by specifying exactly one field. In this case, we initialize only the 'pigeon' field of the Bird union.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0784.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
union Bird {
    pigeon: u8,
    turtledove: u16,
}

let bird = Bird { pigeon: 0 }; // OK
```

----------------------------------------

TITLE: Using rustc to disable a lint group
DESCRIPTION: This command demonstrates how to disable the `nonstandard-style` lint group in `rustc`. This will effectively disable all lints that are part of this group, such as `non-camel-case-types`, `non-snake-case`, and `non-upper-case-globals`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/lints/groups.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
"$ rustc -D nonstandard-style"
```

----------------------------------------

TITLE: Adding Error Annotations to Rust UI Tests
DESCRIPTION: Shows how to annotate expected compiler errors in UI tests using error annotation comments. This technique is essential for ensuring tests correctly validate error messages.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/adding.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn bar() {
    foo().await
    //~^ ERROR `await` is only allowed inside `async` functions and blocks
}
```

----------------------------------------

TITLE: Try Shorthand Enabled Example in Rust
DESCRIPTION: Demonstrates formatting when use_try_shorthand is enabled, converting try! macro usage to ? operator.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_79

LANGUAGE: rust
CODE:
```
fn main() {
    let lorem = ipsum.map(|dolor| dolor.sit())?;
}
```

----------------------------------------

TITLE: Valid Non-ASCII Identifier Usage in Rust
DESCRIPTION: Example of valid usage of non-ASCII identifiers in Rust, demonstrating correct inline module declaration with non-ASCII name.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0754.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
mod řųśť { // ok!
    const IS_GREAT: bool = true;
}

fn main() {}
```

----------------------------------------

TITLE: Suppress Markdown Table of Contents in rustdoc (bash)
DESCRIPTION: Demonstrates how to use the `--markdown-no-toc` flag with `rustdoc` to prevent the generation of a table of contents when documenting a Markdown file. By default, `rustdoc` includes a TOC for Markdown input.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_23

LANGUAGE: bash
CODE:
```
$ rustdoc README.md --markdown-no-toc
```

----------------------------------------

TITLE: Expanding Record Rest Pattern in Rust
DESCRIPTION: Replaces rest pattern (..) in record patterns with explicit field bindings. Makes pattern matching more explicit.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_42

LANGUAGE: rust
CODE:
```
struct Bar { y: Y, z: Z }

fn foo(bar: Bar) {
    let Bar { .. } = bar;
}
```

----------------------------------------

TITLE: Using arbitrary_self_types_pointers Feature in Rust
DESCRIPTION: Demonstrates how to use the arbitrary_self_types_pointers feature to allow methods to receive self as a raw pointer. This example shows a method taking self as a constant pointer to Self.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/arbitrary-self-types-pointers.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(arbitrary_self_types_pointers)]

struct A;

impl A {
    fn m(self: *const Self) {}
}

fn main() {
    let a = A;
    let a_ptr: *const A = &a as *const A;
    a_ptr.m();
}
```

----------------------------------------

TITLE: Using the print-config CLI option in Rustfmt
DESCRIPTION: Example of using the --print-config CLI option to print the current configuration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_23

LANGUAGE: Shell
CODE:
```
rustfmt --print-config current
```

----------------------------------------

TITLE: Implementing Platform-Specific Documentation with doc_cfg in Rust
DESCRIPTION: This snippet demonstrates how to use the doc_cfg feature to document a Windows-specific struct. It shows the usage of #[doc(cfg)] attribute and the #[cfg(doc)] conditional compilation flag for platform-specific documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/doc-cfg.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(doc_cfg)]

#[cfg(any(windows, doc))]
#[doc(cfg(windows))]
/// The application's icon in the notification area (a.k.a. system tray).
///
/// # Examples
///
/// ```no_run
/// extern crate my_awesome_ui_library;
/// use my_awesome_ui_library::current_app;
/// use my_awesome_ui_library::windows::notification;
///
/// let icon = current_app().get::<notification::Icon>();
/// icon.show();
/// icon.show_message("Hello");
/// ```
pub struct Icon {
    // ...
}
```

----------------------------------------

TITLE: Prohibited Pattern Usage in Rust Trait Methods
DESCRIPTION: This snippet demonstrates an incorrect way of defining a trait method in Rust where patterns are used in the parameter list. Patterns in trait methods are not allowed, leading to a compile error. The example shows a tuple pattern trying to be destructured in the method signature, which results in the error E0642.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0642.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
trait Foo {
    fn foo((x, y): (i32, i32)); // error: patterns aren\'t allowed
                                //        in trait methods
}
```

----------------------------------------

TITLE: Conditional Printing with Closing Brace on Next Line
DESCRIPTION: This code snippet demonstrates a simple conditional statement.  The formatting of the closing brace is determined by other rustfmt settings, but this example shows its placement on a new line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
fn main() {
    if lorem {
        println!("ipsum!");
    }
    else {
        println!("dolor!");
    }
}
```

----------------------------------------

TITLE: Unwrapping Control Flow Blocks in Rust
DESCRIPTION: Removes control flow statements (if/else, for, while, loop) and keeps only the body. This simplifies code when the control statement becomes unnecessary.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_114

LANGUAGE: rust
CODE:
```
fn foo() {
    if true {
        println!("foo");
    }
}
```

LANGUAGE: rust
CODE:
```
fn foo() {
    println!("foo");
}
```

----------------------------------------

TITLE: Converting Bool Match to matches! Macro in Rust
DESCRIPTION: Replaces a 2-arm boolean match with the matches! macro for concise conditional expressions in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_34

LANGUAGE: rust
CODE:
```
fn main() {
    matches!(scrutinee, Some(val) if val.cond())
}
```

----------------------------------------

TITLE: Correct Usage of Packed Representation with Size in Rust
DESCRIPTION: This code shows the proper way to specify packing to a given size by providing a size parameter to the `packed` representation hint instead of using both `packed` and `align`.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0587.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[repr(packed(8))] // ok!
struct Umbrella(i32);
```

----------------------------------------

TITLE: Configuring Rustfmt with inline_attribute_width option
DESCRIPTION: Example configuration option to write an item and its attribute on the same line if their combined width is below a threshold.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_22

LANGUAGE: TOML
CODE:
```
inline_attribute_width = 80
```

----------------------------------------

TITLE: Erroneous Auto Trait Casting Example in Rust
DESCRIPTION: This example demonstrates code that will not compile due to error E0804, where an attempt is made to add the Send auto trait to a dyn Any trait object via pointer cast. This operation is not allowed because it could create invalid vtables.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0804.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let ptr: *const dyn core::any::Any = &();
_ = ptr as *const (dyn core::any::Any + Send);
```

----------------------------------------

TITLE: Exported Variable with Value 42 in Rust
DESCRIPTION: Declares a public variable with the value 42. It is meant to be accessible outside the module or crate, serving as a constant or configuration value within the Rust project.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-link-ordinal/output.txt#_snippet_1

LANGUAGE: Rust
CODE:
```
exported_variable value: 42
```

----------------------------------------

TITLE: Untagged Union Declaration Formatting in Rust
DESCRIPTION: Shows how to format untagged union declarations in Rust, following the same guidelines as structs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
union Foo {
    a: A,
    b: B,
    long_name:
        LongType,
}
```

----------------------------------------

TITLE: Rust Code Example: Heap Buffer Overflow
DESCRIPTION: This Rust code snippet demonstrates a heap buffer overflow by accessing an element outside the bounds of a vector using pointer arithmetic. The `offset(4)` call attempts to read memory beyond the vector's allocated space.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_18

LANGUAGE: Rust
CODE:
```
fn main() {
    let xs = vec![0, 1, 2, 3];
    let _y = unsafe { *xs.as_ptr().offset(4) };
}
```

----------------------------------------

TITLE: Fixing Enum Overflow by Explicit Value Assignment
DESCRIPTION: Solution showing how to fix the overflow by explicitly setting the second enum variant value instead of relying on automatic increment.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0370.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[repr(i64)]
enum Foo {
    X = 0x7fffffffffffffff,
    Y = 0, // ok!
}
```

----------------------------------------

TITLE: Referencing C's unsigned long long Type in Rust
DESCRIPTION: Demonstrates the usage and platform-specific considerations of C's unsigned long long type in Rust context. While typically equivalent to u64, the actual size depends on the platform's long long implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/core/src/ffi/c_ulonglong.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
c_longlong
```

LANGUAGE: c
CODE:
```
unsigned long long
```

----------------------------------------

TITLE: Markdown for Invisible Date Annotation
DESCRIPTION: This snippet illustrates how to insert a date check annotation that does not appear in the rendered output. This allows maintaining context without displaying excessive information to the user.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/contributing.md#2025-04-21_snippet_6

LANGUAGE: markdown
CODE:
```
<!-- date-check: Apr 2025 -->
```

----------------------------------------

TITLE: Example of Rust Code Triggering a Compilation Error
DESCRIPTION: This Rust code snippet demonstrates a simple situation leading to a compilation error due to type mismatches, which can be traced for debugging purposes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/compiler-debugging.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
fn main() {
    1 + ();
}
```

----------------------------------------

TITLE: Custom Inline Attribute Width in Rust
DESCRIPTION: Demonstrates how setting inline_attribute_width to 50 allows attributes and their items to appear on the same line if their combined width fits within the limit.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_40

LANGUAGE: rust
CODE:
```
#[cfg(feature = "alloc")] use core::slice;
```

----------------------------------------

TITLE: Correct Main Function Declaration in Rust
DESCRIPTION: This example shows the correct way to declare a main function in Rust without the async keyword, allowing it to serve as the program entry point properly.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0752.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() -> Result<(), ()> { // ok!
    Ok(())
}
```

----------------------------------------

TITLE: JIT Mode Execution with Rustc-Clif
DESCRIPTION: Command to execute Rust code immediately using JIT mode through direct rustc invocation with specific compiler flags.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/docs/usage.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
$ $cg_clif_dir/dist/rustc-clif -Cllvm-args=jit-mode -Cprefer-dynamic my_crate.rs
```

----------------------------------------

TITLE: Valid Implementation of Foreign Trait with Local Type in Rust
DESCRIPTION: This example shows a valid implementation of a foreign trait by wrapping the generic type parameter in a local type, adhering to Rust's orphan rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0210.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct MyType<T>(T);
impl<T> ForeignTrait for MyType<T> { } // Ok
```

----------------------------------------

TITLE: Configuring Compiler Toolchain for powerpc64-unknown-linux-musl
DESCRIPTION: Specifies compiler, linker, and archiver tools for cross-compilation to powerpc64-unknown-linux-musl target in bootstrap configuration
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/powerpc64-unknown-linux-musl.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[target.powerpc64-unknown-linux-musl]
cc = "powerpc64-linux-musl-gcc"
cxx = "powerpc64-linux-musl-g++"
ar = "powerpc64-linux-musl-ar"
linker = "powerpc64-linux-musl-gcc"
```

----------------------------------------

TITLE: Setting HTML favicon in Rust Documentation
DESCRIPTION: This snippet shows how to set the favicon for generated documentation using the #[doc] attribute, specifying a URL for the favicon image.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
"""rust,no_run\n#![doc(html_favicon_url = \"https://example.com/favicon.ico\")]\n"
```

----------------------------------------

TITLE: Minimizing LLVM IR with LLVMExtract
DESCRIPTION: Command to extract and minimize LLVM IR to create a minimal working example
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/debugging.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
<path/to/llvm-extract> -s --func=<name> --recursive --rfunc="enzyme_autodiff*" --rfunc="enzyme_fwddiff*" --rfunc=<fnc_called_by_enzyme> out.ll -o mwe.ll
```

----------------------------------------

TITLE: Configuring rust-analyzer for Visual Studio Code
DESCRIPTION: This snippet provides the command to copy the rust-analyzer configuration for Visual Studio Code which sets IDE settings for Miri development.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_11

LANGUAGE: sh
CODE:
```
Copy [`etc/rust_analyzer_vscode.json`] to `.vscode/settings.json` in the project root directory.
```

----------------------------------------

TITLE: Incorrect Usage of ffi_pure Attribute on Regular Function
DESCRIPTION: Example showing erroneous usage of the ffi_pure attribute on a non-foreign function, which will result in compilation error E0755.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0755.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(ffi_pure)]

#[unsafe(ffi_pure)] // error!
pub fn foo() {}
# fn main() {}
```

----------------------------------------

TITLE: Installing Rust Standard Library Source with Rustup
DESCRIPTION: This command adds the Rust standard library source code component using rustup. It's a prerequisite for rust-analyzer to function properly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/installation.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
$ rustup component add rust-src
```

----------------------------------------

TITLE: Wrapping Return Type in Result in Rust Functions
DESCRIPTION: Wraps a function's return type in a Result and updates the returned value to be wrapped in Ok. Useful when adding error handling to a function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_119

LANGUAGE: rust
CODE:
```
fn foo() -> i32 { 42i32 }
```

LANGUAGE: rust
CODE:
```
fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }
```

----------------------------------------

TITLE: Signed Char Type Reference Demonstration
DESCRIPTION: Shows the type equivalence between Rust's signed char type and C's signed char. This type is always i8 in Rust but is included for C compatibility and completeness in FFI contexts.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/core/src/ffi/c_schar.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
i8
```

LANGUAGE: c
CODE:
```
signed char
```

----------------------------------------

TITLE: Generating Function Stub in Rust
DESCRIPTION: This snippet shows how to generate a stub function with a signature matching a function call. It creates a new function definition with appropriate parameters and a placeholder return type and body.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_55

LANGUAGE: rust
CODE:
```
struct Baz;
fn baz() -> Baz { Baz }
fn foo() {
    bar("", baz());
}

```

LANGUAGE: rust
CODE:
```
struct Baz;
fn baz() -> Baz { Baz }
fn foo() {
    bar("", baz());
}

fn bar(arg: &str, baz: Baz) ${0:-> _} {
    todo!()
}

```

----------------------------------------

TITLE: Default Match Block Trailing Comma Behavior in Rust
DESCRIPTION: Shows the default match_block_trailing_comma setting (false), which omits trailing commas after block-based match arms.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_46

LANGUAGE: rust
CODE:
```
fn main() {
    match lorem {
        Lorem::Ipsum => {
            println!("ipsum");
        }
        Lorem::Dolor => println!("dolor"),
    }
}
```

----------------------------------------

TITLE: Proper Variable Initialization in Rust
DESCRIPTION: Shows the correct way to initialize and use variables in Rust by assigning a value at declaration time. This prevents the E0381 compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0381.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    let x: i32 = 0;
    let y = x; // ok!
}
```

----------------------------------------

TITLE: Converting a Raw String to a Regular String in Rust
DESCRIPTION: Shows converting a raw string literal back to a regular string with appropriate escape sequences. This ensures proper escaping of special characters like quotes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_79

LANGUAGE: rust
CODE:
```
fn main() {
    r#"Hello,┃ "World!""#;
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    "Hello, \"World!\"";
}
```

----------------------------------------

TITLE: Defining C++ Source Files
DESCRIPTION: This CMake command sets the variable `CXX_SOURCES` to a list of C++ source files. These files will be compiled as part of the project.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/CMakeLists.txt#_snippet_3

LANGUAGE: CMake
CODE:
```
set(CXX_SOURCES
    src/foo_cxx.cpp
    )
```

----------------------------------------

TITLE: Explicit ABI - True
DESCRIPTION: Demonstrates the default behavior of printing the ABI for extern items when `force_explicit_abi` is set to `true`. The "C" ABI is explicitly printed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_16

LANGUAGE: rust
CODE:
```
extern "C" {
    pub static lorem: c_int;
}
```

----------------------------------------

TITLE: Correct Usage: Importing and Using HashMap
DESCRIPTION: Shows the proper way to import and use HashMap from the standard library collections module.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0433.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use std::collections::HashMap; // HashMap has been imported.
let map: HashMap<u32, u32> = HashMap::new(); // So it can be used!
```

----------------------------------------

TITLE: Configuring disallowed-types
DESCRIPTION: Specifies a list of disallowed types, written as fully qualified paths. Defaults to an empty list (`[]`).  Allows you to enforce type restrictions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_12



----------------------------------------

TITLE: Single Line Functions - False
DESCRIPTION: Demonstrates the default behavior for single-expression functions when `fn_single_line` is `false`.  Functions are formatted on multiple lines.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_14

LANGUAGE: rust
CODE:
```
fn lorem() -> usize {
    42
}

fn lorem() -> usize {
    let ipsum = 42;
    ipsum
}
```

----------------------------------------

TITLE: Trait Implementation with Lifetime Constraints
DESCRIPTION: Example showing how trait implementations can have complex lifetime and generic parameter constraints
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/instantiating_binders.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
impl<'a> Other<'a> for &'a u32 { }

impl<T> Trait for T
where
    for<'a> T: Other<'a>,
{ ... }

impl<T> Bar for T
where
    for<'a> &'a T: Trait
{ ... }
```

----------------------------------------

TITLE: Running Basic Speedtest for UI Tests
DESCRIPTION: Command to run speed tests for UI-based lints, specifically for tests named 'allow_attributes'. Executes the test 1000 times by default.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/speedtest.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ SPEEDTEST=ui TESTNAME="allow_attributes" cargo uitest
```

----------------------------------------

TITLE: Running an instrumented binary to generate coverage data
DESCRIPTION: Example of running a coverage-instrumented binary, which will generate raw profiling data in a file with an auto-generated name.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
$ echo "{some: 'thing'}" | target/debug/examples/formatjson5 -
```

----------------------------------------

TITLE: Path Handling with Lint Reasons
DESCRIPTION: Example showing lint attributes with reason parameter for platform-specific code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/lints/levels.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
use std::path::PathBuf;
pub fn get_path() -> PathBuf {
    #[allow(unused_mut, reason = "this is only modified on some platforms")]
    let mut file_name = PathBuf::from("git");
    #[cfg(target_os = "windows")]
    file_name.set_extension("exe");
    file_name
}
```

----------------------------------------

TITLE: Adding Explicit Type for Let Bindings in Rust
DESCRIPTION: This assist specifies the type for a let binding. It infers the type from the assigned value and adds it explicitly to the variable declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn main() {
    let x = 92;
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    let x: i32 = 92;
}
```

----------------------------------------

TITLE: Destructuring Struct Binding in Rust
DESCRIPTION: Rewrites a struct binding to directly destructure its fields, removing the need for separate accessors.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_36

LANGUAGE: rust
CODE:
```
struct Foo {
    bar: i32,
    baz: i32,
}
fn main() {
    let Foo { bar, baz } = Foo { bar: 1, baz: 2 };
    let bar2 = bar;
    let baz2 = &baz;
}
```

----------------------------------------

TITLE: Compiling C code with LTO for Rust staticlib dependency
DESCRIPTION: This snippet demonstrates how to compile C code with ThinLTO enabled, which is a prerequisite for linking with Rust static libraries compiled with linker plugin LTO. It uses `clang` to compile the C code with the `-flto=thin` flag and optimization level 2 (`-O2`).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/linker-plugin-lto.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
"clang -c -O2 -flto=thin -o cmain.o ./cmain.c"
```

----------------------------------------

TITLE: Setting HTML logo in Rust Documentation
DESCRIPTION: This code snippet specifies a logo image to be displayed in the upper left of Rust documentation pages using the #[doc] attribute.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
"""rust,no_run\n#![doc(html_logo_url = \"https://example.com/logo.jpg\")]\n"
```

----------------------------------------

TITLE: Rust Invalid Hexadecimal Underscore and Character Error
DESCRIPTION: This snippet demonstrates an error where a hexadecimal integer literal (0x_) contains an underscore followed by invalid character 'g'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_11

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0x_g\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Line Breaking in Match Arms - Rust
DESCRIPTION: Demonstrates proper line breaking techniques for match arms with long patterns. Shows preference for block form on right-hand side to avoid breaking patterns.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_21

LANGUAGE: rust
CODE:
```
    // Assuming the following line does not fit in the max width
    a_very_long_pattern | another_pattern => ALongStructName {
        ...
    },
    // Prefer this
    a_very_long_pattern | another_pattern => {
        ALongStructName {
            ...
        }
    }
    // To splitting the pattern.
```

----------------------------------------

TITLE: Invalid Const Generic Parameter Type Example
DESCRIPTION: Example showing incorrect usage of a non-structural-match type as a const generic parameter, which results in compilation error E0741.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0741.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(adt_const_params)]

struct A;

struct B<const X: A>; // error!
```

----------------------------------------

TITLE: Moving Match Guard to Pattern in Rust
DESCRIPTION: Demonstrates how to move a condition from a match guard to the pattern itself for cleaner, more concise code. This refactoring simplifies match expressions by incorporating conditionals directly into the pattern matching.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_84

LANGUAGE: rust
CODE:
```
enum Action { Move { distance: u32 }, Stop }

fn handle(action: Action) {
    match action {
        Action::Move { distance } => if distance > 10 { foo() },
        _ => (),
    }
}
```

LANGUAGE: rust
CODE:
```
enum Action { Move { distance: u32 }, Stop }

fn handle(action: Action) {
    match action {
        Action::Move { distance } if distance > 10 => foo(),
        _ => (),
    }
}
```

----------------------------------------

TITLE: Rust function with universal quantification
DESCRIPTION: Examples of Rust functions demonstrating universal quantification in type checking and trait solving. The code illustrates how generic types and lifetimes are universally quantified, meaning the function must be well-typed for all possible types or lifetimes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/appendix/background.md#2025-04-21_snippet_4

LANGUAGE: rust,ignore
CODE:
```
fn foo<T>()
```

LANGUAGE: rust,ignore
CODE:
```
fn foo<'a>(_: &'a usize)
```

LANGUAGE: rust,ignore
CODE:
```
fn foo<F>()
where for<'a> F: Fn(&'a u8)
```

----------------------------------------

TITLE: Generating HIR Representation for Cargo Projects in Rust
DESCRIPTION: This snippet demonstrates the command to generate a human-readable representation of the HIR using the `cargo` tool with the appropriate flag. It's crucial for developers needing to inspect the desugaring of their code during AST lowering.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/hir-debugging.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
cargo rustc -- -Z unpretty=hir
```

----------------------------------------

TITLE: Invalid Self Import Example in Rust
DESCRIPTION: Demonstrates an erroneous attempt to import self into the current module, which triggers compile error E0431. This is invalid because self imports can only appear in import lists with non-empty prefixes.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0431.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use {self}; // error: `self` import can only appear in an import list with a
            //        non-empty prefix
```

----------------------------------------

TITLE: Rust Raw String Literal Error
DESCRIPTION: This code snippet demonstrates a common error in Rust when working with raw string literals. The error "Missing trailing `"` with `#` symbols to terminate the raw string literal" arises when the number of `#` symbols preceding the closing quote of a raw string does not match the number of `#` symbols preceding the opening quote.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_raw_string_with_space.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"r##\" \" error: Missing trailing `\"` with `#` symbols to terminate the raw string literal"
```

----------------------------------------

TITLE: Converting Named Struct to Tuple Struct in Rust
DESCRIPTION: Changes a struct with named fields to a tuple struct, including modifications to associated methods.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_29

LANGUAGE: rust
CODE:
```
struct Point(f32, f32);

impl Point {
    pub fn new(x: f32, y: f32) -> Self {
        Point(x, y)
    }

    pub fn x(&self) -> f32 {
        self.0
    }

    pub fn y(&self) -> f32 {
        self.1
    }
}
```

----------------------------------------

TITLE: Configuring Rust Build for x86_64-unknown-linux-none Target
DESCRIPTION: TOML configuration for enabling the x86_64-unknown-linux-none target during Rust compiler build. This sets the build stage to 1 and specifies the target to build.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/x86_64-unknown-linux-none.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
target = ["x86_64-unknown-linux-none"]
```

----------------------------------------

TITLE: Incorrect Implementation of Unsafe Trait in Rust
DESCRIPTION: This code snippet demonstrates an erroneous implementation of an unsafe trait without marking the implementation as unsafe. This will result in a compilation error (E0200).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0200.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo;

unsafe trait Bar { }

impl Bar for Foo { } // error!
```

----------------------------------------

TITLE: PrintOnDrop Type Definition for Drop Check Examples
DESCRIPTION: Definition of a type that requires its region parameter to be live, used to demonstrate drop checking behavior.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/drop_check.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct PrintOnDrop<'a>(&'a str);
impl<'a> Drop for PrintOnDrop<'_> {
    fn drop(&mut self) {
        println!("{}", self.0);
    }
}
```

----------------------------------------

TITLE: Running Rustdoc GUI Tests in Debug Mode
DESCRIPTION: Command to execute rustdoc GUI tests with detailed debugging output, running at stage 1 of the build process
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/rustdoc-gui/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ ./x.py test tests/rustdoc-gui --stage 1 --test-args --debug
```

----------------------------------------

TITLE: Enabling XRay Instrumentation with Default Settings in Rust
DESCRIPTION: Use the -Z instrument-xray compiler flag to enable XRay instrumentation with default settings. This generates NOP sleds for function tracing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/instrument-xray.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
-Z instrument-xray
```

----------------------------------------

TITLE: Correct Macro Import at Crate Root (Rust)
DESCRIPTION: Example showing the correct way to import macros at the crate root level, allowing them to be used throughout the project.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0468.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[macro_use(debug_assert)] // ok!
extern crate core;

mod foo {
    fn run_macro() { debug_assert!(true); }
}
# fn main() {}
```

----------------------------------------

TITLE: Running CI Docker Containers for Testing
DESCRIPTION: These commands execute various Docker containers used in the Rust CI system to test the changes on different platforms and configurations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/updating-llvm.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
"./src/ci/docker/run.sh wasm32"
```

LANGUAGE: bash
CODE:
```
"./src/ci/docker/run.sh arm-android"
```

LANGUAGE: bash
CODE:
```
"./src/ci/docker/run.sh dist-various-1"
```

LANGUAGE: bash
CODE:
```
"./src/ci/docker/run.sh dist-various-2"
```

LANGUAGE: bash
CODE:
```
"./src/ci/docker/run.sh armhf-gnu"
```

----------------------------------------

TITLE: Unterminated Rust String Literal with Unicode Escape
DESCRIPTION: This snippet shows an invalid Rust string literal construct often found in test cases or examples (indicated by the `STRING` prefix). The literal `"\u{20AA}"` is missing its closing double quote after the Unicode escape sequence `\u{20AA}`. This results in a compile-time error from the Rust compiler indicating that the string literal was not properly terminated.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_string_with_unicode_escape.txt#_snippet_0

LANGUAGE: rust
CODE:
```
STRING "\"\\u{20AA}"
```

----------------------------------------

TITLE: Linking to Rust Team Repository in Markdown
DESCRIPTION: This snippet shows how to create a Markdown link to the rust-lang/team repository. It uses a reference-style link format.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/arm.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
[rust-lang/team]: https://github.com/rust-lang/team
```

----------------------------------------

TITLE: Accessing Version Info in Rust
DESCRIPTION: Shows the get_version_info macro usage which has been simplified to not require explicit imports of VersionInfo and std::env.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/rustc_tools_util/CHANGELOG.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
get_version_info!()
```

----------------------------------------

TITLE: Function Without Clone Trait Bound
DESCRIPTION: Example of a function that would fail compilation due to missing Clone trait constraint
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/typing_parameter_envs.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn foo2<T>(a: T) {
    requires_clone(a);
}
```

----------------------------------------

TITLE: Testing Cranelift Codegen Backend
DESCRIPTION: Commands to prepare the testing environment and run the test suite for the Cranelift codegen backend after building it from source.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/Readme.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
$ ./y.sh prepare # only needs to be run the first time
$ ./test.sh
```

----------------------------------------

TITLE: Configuring Custom GCC Path in TOML
DESCRIPTION: Configuration snippet for config.toml to specify a custom GCC installation path and disable automatic downloading of GCC.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_4

LANGUAGE: toml
CODE:
```
gcc-path = "[MY PATH]"
# download-gccjit = true
```

----------------------------------------

TITLE: Incorrect Visibility Restriction in Rust
DESCRIPTION: This code snippet demonstrates an incorrect way to specify visibility for a struct within a module. It results in a compile-time error E0704.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0704.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
mod foo {
    pub(foo) struct Bar {
        x: i32
    }
}
```

----------------------------------------

TITLE: Serving Fuchsia Package
DESCRIPTION: Commands to start a package repository server and register it with the Fuchsia emulator.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_18

LANGUAGE: sh
CODE:
```
${SDK_PATH}/tools/${ARCH}/ffx repository server start \
    --background --repository hello-fuchsia --repo-path pkg-repo

${SDK_PATH}/tools/${ARCH}/ffx target repository register \
    --repository hello-fuchsia
```

----------------------------------------

TITLE: Using cargo-pgo for Simplified PGO Workflow
DESCRIPTION: Commands for using the community-maintained cargo-pgo tool, which provides a simplified interface for profile-guided optimization in Rust projects.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/profile-guided-optimization.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
# Install if you haven't already
cargo install cargo-pgo

cargo pgo build
cargo pgo optimize
```

----------------------------------------

TITLE: Move Item Request in TypeScript
DESCRIPTION: Defines an experimental request for moving code items up or down within a document
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_21

LANGUAGE: typescript
CODE:
```
export interface MoveItemParams {
    textDocument: TextDocumentIdentifier,
    range: Range,
    direction: Direction
}

export const enum Direction {
    Up = "Up",
    Down = "Down"
}
```

----------------------------------------

TITLE: Valid Async Move Closure Implementation
DESCRIPTION: Shows the correct way to implement an async closure using move semantics, which is currently supported in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0708.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    let add_one = async move |num: u8| { // ok!
        num + 1
    };
}
```

----------------------------------------

TITLE: Demonstrating Duplicate Type Definition Error in Rust
DESCRIPTION: Shows an erroneous code example where a struct type 'Bar' is defined twice, triggering compiler error E0428.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0428.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Bar;
struct Bar; // error: duplicate definition of value `Bar`
```

----------------------------------------

TITLE: Correcting E0384 Error Using Mutable Variable in Rust
DESCRIPTION: This code snippet demonstrates the correct way to allow variable reassignment by declaring the variable as mutable using the 'mut' keyword.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0384.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    let mut x = 3;
    x = 5;
}
```

----------------------------------------

TITLE: Basic Check-Cfg Command Syntax in Bash
DESCRIPTION: Shows the basic command syntax for specifying expected configuration names and values using --check-cfg flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/check-cfg.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
rustc --check-cfg 'cfg(name, values("value1", "value2", ... "valueN"))'
```

----------------------------------------

TITLE: Measure From-Scratch Analysis Time
DESCRIPTION: This snippet shows how to measure the time it takes for a from-scratch analysis using `cargo run` with the `analysis-stats` subcommand.  It runs the rust-analyzer on the chalk project.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/README.md#_snippet_7

LANGUAGE: Shell
CODE:
```
$ cargo run --release -p rust-analyzer -- analysis-stats ../chalk/
```

----------------------------------------

TITLE: Using String and Byte String Literals in Deref Patterns - Rust
DESCRIPTION: Explains how string (`&str`) and byte string (`&[u8]`, `&[u8; _]`) literal patterns can be used in conjunction with `deref!(_)` patterns or directly on slices/references. This enables matching `String` and `Vec<u8>` content through dereferencing. Requires the `deref_patterns` feature gate.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/deref-patterns.md#_snippet_3

LANGUAGE: Rust
CODE:
```
# #![feature(deref_patterns)]
# #![allow(incomplete_features)]
match ("test".to_string(), b"test".to_vec()) {
    (deref!("test"), deref!(b"test")) => {}
    _ => panic!(),
}

// Matching on slices and arrays using literals is possible elsewhere as well:
match *"test" {
    "test" => {}
    _ => panic!(),
}
```

----------------------------------------

TITLE: Error Example: Calling Non-Const Function in Const Context
DESCRIPTION: An example of code that fails to compile because it calls a non-const function 'create_some' in a const context. This generates error E0015.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0015.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn create_some() -> Option<u8> {
    Some(1)
}

// error: cannot call non-const function `create_some` in constants
const FOO: Option<u8> = create_some();
```

----------------------------------------

TITLE: Coroutine Trait Definition in Rust
DESCRIPTION: Defines the core Coroutine trait with associated types for yield and return values, and the resume method signature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/coroutines.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
pub trait Coroutine<R = ()> {
    type Yield;
    type Return;
    fn resume(self: Pin<&mut Self>, resume: R) -> CoroutineState<Self::Yield, Self::Return>;
}
```

----------------------------------------

TITLE: Multi-line Pattern Formatting - Rust
DESCRIPTION: Demonstrates formatting for multi-line patterns in match expressions, with and without if clauses.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_23

LANGUAGE: rust
CODE:
```
    a_very_long_pattern
    | another_pattern
    | yet_another_pattern
    | a_forth_pattern => {
        ...
    }
    a_very_long_pattern
    | another_pattern
    | yet_another_pattern
    | a_forth_pattern
        if expr =>
    {
        ...
    }
```

----------------------------------------

TITLE: Windows API Constants Definition List
DESCRIPTION: A filtered list of Windows API constants and error codes for generating Rust bindings. Includes process control flags, file operations, DNS error codes, console modes, and system error definitions.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/std/src/sys/pal/windows/c/bindings.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
--out windows_sys.rs
--flat
--sys
--no-deps
--link windows_targets
--filter
!INVALID_HANDLE_VALUE
ABOVE_NORMAL_PRIORITY_CLASS
accept
AcquireSRWLockExclusive
AcquireSRWLockShared
ADDRESS_FAMILY
ADDRINFOA
AddVectoredExceptionHandler
AF_INET
AF_INET6
AF_UNIX
AF_UNSPEC
ALL_PROCESSOR_GROUPS
ARM64_NT_NEON128
BELOW_NORMAL_PRIORITY_CLASS
bind
BY_HANDLE_FILE_INFORMATION
CALLBACK_CHUNK_FINISHED
CALLBACK_STREAM_SWITCH
CancelIo
CloseHandle
closesocket
COMPARESTRING_RESULT
CompareStringOrdinal
connect
CONSOLE_MODE
CONSOLE_READCONSOLE_CONTROL
CONTEXT
CopyFileExW
CP_UTF8
CREATE_ALWAYS
[...additional constants...]
```

----------------------------------------

TITLE: Rust Invalid Hexadecimal Literal
DESCRIPTION: This snippet shows that `0xnoDigit` gives a `Missing digits after the integer base prefix` error, because it requires digits, but gets a string that isn't a valid digit.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_8

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0xnoDigit\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Example Rust Trait Implementation
DESCRIPTION: Demonstrates a simple trait implementation that serves as an example for the canonicalization process where Trait<Vec<T>> is implemented for u32.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/canonicalization.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
impl<T> Trait<Vec<T>> for u32
```

----------------------------------------

TITLE: Formatting Generic Types with Line Breaks in Rust
DESCRIPTION: This snippet illustrates the preferred way to break lines in generic types for better readability. It suggests breaking at the outermost scope and provides an example of a `Foo` type with multiple generic parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/types.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"Foo<
    Bar,
    Baz<Type1, Type2>,
>"
```

----------------------------------------

TITLE: Demonstrating Constructor Grouping and Splitting in Rust Pattern Matching
DESCRIPTION: This snippet shows how constructors are grouped and split in pattern matching to optimize the exhaustiveness checking process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/pat-exhaustive-checking.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
match (0, false) {
    (0 ..=100, true) => {}
    (50..=150, false) => {}
    (0 ..=200, _) => {}
}
```

----------------------------------------

TITLE: Disabled Match Arm Blocks in Rust
DESCRIPTION: Demonstrates setting match_arm_blocks to false, which allows match arm bodies to continue on the next line without block wrapping when they don't fit on the same line as the match operator.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_42

LANGUAGE: rust
CODE:
```
fn main() {
    match lorem {
        lorem =>
            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),
        ipsum => println!("{}", sit),
        sit => foo(
            "foooooooooooooooooooooooo",
            "baaaaaaaaaaaaaaaaaaaaaaaarr",
            "baaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz",
            "qqqqqqqqquuuuuuuuuuuuuuuuuuuuuuuuuuxxx",
        ),
    }
}
```

----------------------------------------

TITLE: Generating Profiling Data with rustc
DESCRIPTION: Demonstrates running the rustc compiler with the `-Zself-profile` flag to enable internal profiler and generate profiling data files.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/self-profile.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ rustc --crate-name foo -Zself-profile
```

----------------------------------------

TITLE: Bare-Metal Target Configuration for Cortex-M23
DESCRIPTION: Specifies target details for Arm Cortex-M23 processors, including CPU type, ABI, and architectural constraints
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/thumbv8m.base-none-eabi.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| CPU         | FPU | Target CPU   | Target Features       |
| ----------- | --- | ------------ | --------------------- |
| Cortex-M23  | No  | `cortex-m23` | None                  |
```

----------------------------------------

TITLE: Building Rust Programs for LoongArch
DESCRIPTION: This Shell command demonstrates how to build Rust programs targeting `loongarch64-unknown-linux-gnu` using `rustup`. It requires a LoongArch C/C++ toolchain for linking, especially for Rust crates depending on C code. Make sure to add the target before building.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/loongarch-linux.md#2025-04-21_snippet_2

LANGUAGE: Shell
CODE:
```
rustup target add loongarch64-unknown-linux-gnu
cargo build --target loongarch64-unknown-linux-gnu
```

----------------------------------------

TITLE: Demangling Rust Symbol with rustfilt
DESCRIPTION: This snippet demonstrates how to use the `rustfilt` command-line tool to demangle a Rust symbol. It shows an example of demangling a mangled symbol `_RNvCskwGfYPst2Cb_3foo16example_function` to its human-readable form `foo::example_function`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/index.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
"$ rustfilt _RNvCskwGfYPst2Cb_3foo16example_function
foo::example_function"
```

----------------------------------------

TITLE: Force Frame Pointers in Rust
DESCRIPTION: Forces the use of frame pointers. Takes `y`, `yes`, `on`, `true` (force-enable) or `n`, `no`, `off`, `false` (do not force). The default behaviour, if frame pointers are not force-enabled, depends on the target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_11



----------------------------------------

TITLE: Building and Installing Only the rust-analyzer Server from Source (Shell)
DESCRIPTION: Compiles and installs only the rust-analyzer Language Server Protocol (LSP) server binary from the source code using `cargo xtask install --server`. This is useful for integration with editors other than VS Code or when managing the server binary separately. Requires Git and Cargo, and assumes the repository has been cloned.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/vs_code.md#_snippet_3

LANGUAGE: shell
CODE:
```
$ cargo xtask install --server
```

----------------------------------------

TITLE: Compiled WebAssembly module from Rust
DESCRIPTION: This WebAssembly module, compiled from the Rust code, demonstrates the ABI mismatch where Rust expects two i32 parameters for the `take_my_pair` function while the C version only expects one.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-unknown.md#2025-04-21_snippet_8

LANGUAGE: wasm
CODE:
```
(module
  (import "env" "take_my_pair" (func $take_my_pair (param i32 i32) (result i32)))
  (func $call_c
    i32.const 1
    i32.const 2
    call $take_my_pair
  )
)
```

----------------------------------------

TITLE: Reordering Struct Fields in Rust
DESCRIPTION: Rearranges fields in struct literals and patterns to match the order of the struct definition. This refactoring improves code consistency by ensuring field initialization order follows the same pattern as the type declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_103

LANGUAGE: rust
CODE:
```
struct Foo {foo: i32, bar: i32};
const test: Foo = Foo {bar: 0, foo: 1}
```

LANGUAGE: rust
CODE:
```
struct Foo {foo: i32, bar: i32};
const test: Foo = Foo {foo: 1, bar: 0}
```

----------------------------------------

TITLE: Incorrect Usage of + Type Operator in Rust
DESCRIPTION: Example showing erroneous usage of the + type operator without proper parentheses, leading to ambiguous context errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0178.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {}

struct Bar<'a> {
    x: &'a Foo + 'a,     // error!
    y: &'a mut Foo + 'a, // error!
    z: fn() -> Foo + 'a, // error!
}
```

----------------------------------------

TITLE: Converting bool::then to If Expression in Rust
DESCRIPTION: This assist converts a `bool::then` method call to an equivalent if expression. It replaces the method call with a more explicit conditional structure.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_17

LANGUAGE: rust
CODE:
```
fn main() {
    (0 == 0).then(|| val)
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    if 0 == 0 {
        Some(val)
    } else {
        None
    }
}
```

----------------------------------------

TITLE: Early vs Late Bound Lifetime Comparison
DESCRIPTION: Shows the theoretical difference between early and late bound lifetimes for type outlives bounds.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_12

LANGUAGE: rust
CODE:
```
fn early_bound<'a: 'a>(_: &'a String) {}
fn late_bound<'a>(_: &'a String) {}

fn requires_static<T: 'static>(_: T) {}

fn bar<'b>() {
    let e = early_bound::<'b>;
    // this *should* error but does not
    requires_static(e);

    let l = late_bound;
    // this correctly does not error
    requires_static(l);
}
```

----------------------------------------

TITLE: Extend rustdoc CSS Output (bash)
DESCRIPTION: Shows how to use the `-e` or `--extend-css` flag to include the contents of external CSS files at the end of the generated `theme.css`. This allows customization of the documentation's appearance and requires a path to a CSS file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_24

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs -e extra.css
```

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --extend-css extra.css
```

----------------------------------------

TITLE: Invalid Usage of offset_of! Macro with Enum Variants in Rust
DESCRIPTION: This example demonstrates an incorrect usage of the offset_of! macro that results in error E0795. The error occurs because the second argument is an enum variant (Some) rather than a field within a variant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0795.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(offset_of_enum)]

let x = std::mem::offset_of!(Option<u8>, Some);
```

----------------------------------------

TITLE: Using Shell-Style Argfiles in Rust Compiler
DESCRIPTION: The -Zshell-argfiles flag enables POSIX shell-style argument parsing for argfiles. Arguments must be specified using @shell:<path> syntax, and the flag must precede the argument file specification. The compiler uses shlex for parsing the arguments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/shell-argfiles.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
-Zshell-argfiles @shell:<path>
```

----------------------------------------

TITLE: Listing Compiler Runtime Dependencies (Shell)
DESCRIPTION: This shell command uses `rustc --print sysroot` to find the compiler's installation directory and then lists the contents of the `lib` subdirectory within that sysroot. This directory contains compiler runtime dependencies such as `libstd`, `libLLVM.so`, and internal compiler crates loaded when using `rustc_private`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/bootstrapping/what-bootstrapping-does.md#_snippet_0

LANGUAGE: Shell
CODE:
```
ls $(rustc --print sysroot)/lib
```

----------------------------------------

TITLE: Generating Coverage Reports with llvm-cov show
DESCRIPTION: This shell command uses `llvm-cov show` to display detailed line and region coverage of a Rust binary, overlaid on the source code. Key options include demangling Rust symbols, specifying the instrumented binary, and filtering coverage display by function name.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_9

LANGUAGE: shell
CODE:
```
$ llvm-cov show -Xdemangler=rustfilt target/debug/examples/formatjson5 \
    -instr-profile=formatjson5.profdata \
    -show-line-counts-or-regions \
    -show-instantiations \
    -name=add_quoted_string
```

----------------------------------------

TITLE: Configuring Clippy Lints in Source Code
DESCRIPTION: Example of configuring lint levels directly in Rust source code using attributes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/usage.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#![allow(clippy::style)]

#[warn(clippy::box_default)]
fn main() {
    let _ = Box::<String>::new(Default::default());
    // ^ warning: `Box::new(_)` of default value
}
```

----------------------------------------

TITLE: Duplicate Rust Feature Enablement
DESCRIPTION: This code snippet demonstrates a compilation error (E0636) in Rust, triggered by enabling the same feature (`rust1`) multiple times using the `#![feature]` attribute.  The `#![allow(stable_features)]` attribute is used to allow the use of unstable features. The error message indicates that the feature has already been enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0636.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"#![allow(stable_features)]\n#![feature(rust1)]\n#![feature(rust1)] // error: the feature `rust1` has already been enabled"
```

----------------------------------------

TITLE: Unterminated character literal in Rust
DESCRIPTION: This code snippet demonstrates a syntax error in Rust where a character literal starting with a single quote is not terminated with a matching single quote. The specific example uses the crab emoji ('🦀) but is missing the closing quote.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_char_with_ferris.txt#_snippet_0

LANGUAGE: rust
CODE:
```
'🦀
```

----------------------------------------

TITLE: Add Custom Theme to rustdoc Output (bash)
DESCRIPTION: Shows how to use the `--theme` flag to include an additional custom CSS file as a theme option in the generated documentation. The theme name is derived from the CSS filename and requires a path to a custom CSS file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_27

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --theme /path/to/your/custom-theme.css
```

----------------------------------------

TITLE: Default Match Arm Blocks Behavior in Rust
DESCRIPTION: Shows the default match_arm_blocks setting (true), which wraps match arm bodies in blocks when they cannot fit on the same line as the match operator.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_41

LANGUAGE: rust
CODE:
```
fn main() {
    match lorem {
        ipsum => {
            foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)
        }
        dolor => println!("{}", sit),
        sit => foo(
            "foooooooooooooooooooooooo",
            "baaaaaaaaaaaaaaaaaaaaaaaarr",
            "baaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz",
            "qqqqqqqqquuuuuuuuuuuuuuuuuuuuuuuuuuxxx",
        ),
    }
}
```

----------------------------------------

TITLE: Using repr128 Feature with Rust Enum
DESCRIPTION: Demonstrates how to use the repr128 feature to specify u128 representation for an enum. The example shows a simple enum 'Foo' with a single variant containing a u64 value.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/repr128.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(repr128)]

#[repr(u128)]
enum Foo {
    Bar(u64),
}
```

----------------------------------------

TITLE: Demonstrating Type Changing Struct Update in Rust
DESCRIPTION: This code snippet demonstrates the usage of the 'type_changing_struct_update' feature in Rust. It defines a generic struct 'Foo' and creates instances with different type parameters using the struct update syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/type-changing-struct-update.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![allow(unused_variables, dead_code)]
#![feature(type_changing_struct_update)]

fn main () {
    struct Foo<T, U> {
        field1: T,
        field2: U,
    }

    let base: Foo<String, i32> = Foo {
        field1: String::from("hello"),
        field2: 1234,
    };
    let updated: Foo<f64, i32> = Foo {
        field1: 3.14,
        ..base
    };
}
```

----------------------------------------

TITLE: Function Example in Rust
DESCRIPTION: This snippet gives an example of a Rust function with generic parameters and an example invocation. It is used to demonstrate how types and functions are symbolically represented in Rust mangling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_19

LANGUAGE: rust
CODE:
```
fn main() {
    example::<[u16; 8]>();
}

pub fn example<T>() {}
```

----------------------------------------

TITLE: Rust Crate B Definition (b.rs)
DESCRIPTION: Crate 'b' that depends on the first version of crate 'a'.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0460.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![crate_name = "b"]

extern crate a; // linked with `a1.rs`

pub fn foo() {
    a::foo::<isize>();
}
```

----------------------------------------

TITLE: Converting Tuple Struct to Named Struct in Rust
DESCRIPTION: Transforms a tuple struct into a struct with named fields, updating constructor and accessor methods accordingly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_33

LANGUAGE: rust
CODE:
```
struct Point { field1: f32, field2: f32 }

impl Point {
    pub fn new(x: f32, y: f32) -> Self {
        Point { field1: x, field2: y }
    }

    pub fn x(&self) -> f32 {
        self.field1
    }

    pub fn y(&self) -> f32 {
        self.field2
    }
}
```

----------------------------------------

TITLE: Comparing Git Commit Ranges (Long Form) (Console)
DESCRIPTION: Shows the difference between two commit ranges by comparing the states of two different versions of a branch (`@{upstream}` vs `HEAD`) against a common base (`master`). This command helps visualize changes introduced by rebasing or amending history.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_18

LANGUAGE: console
CODE:
```
git range-diff master @{upstream} HEAD
```

----------------------------------------

TITLE: Invalid Implementation of Auto Trait for Dyn Object
DESCRIPTION: Demonstrates an erroneous implementation where an inherent impl is attempted on a dyn auto trait without a principal trait. This code fails because dyn objects require at most one non-auto (principal) trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0785.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(auto_traits)]

auto trait AutoTrait {}

impl dyn AutoTrait {}
```

----------------------------------------

TITLE: Command Line Options for Crate - TOML
DESCRIPTION: Allows the specification of command line options for a crate within a TOML configuration file. This enables the customization of how crates are built, allowing features to be enabled or disabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/lintcheck/README.md#2025-04-21_snippet_5

LANGUAGE: toml
CODE:
```
clap = {name = "clap", versions = ['4.5.8'], options = ['-Fderive']}
```

----------------------------------------

TITLE: Formatting Example: Inline Const Block with Inner Attributes
DESCRIPTION: Demonstrates preservation of inner attributes in inline const blocks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
fn main() {
    const {
        #![allow(clippy::assertions_on_constants)]

        assert!(1 < 2);
    }
}
```

----------------------------------------

TITLE: Attribute Inheritance with Inlining in Rust
DESCRIPTION: This code illustrates how attributes are inherited when an item is inlined.  The `Visible` re-export will inherit the documentation and `cfg` attributes from `InPrivate` and `Second`. The documentation will be concatenated, and the `cfg` attributes will be combined using `#[cfg(a, b, c)]`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/re-exports.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
```rust
mod private_mod {
    /// First
    #[cfg(a)]
    pub struct InPrivate;
    /// Second
    #[cfg(b)]
    pub use self::InPrivate as Second;
}

/// Third
#[doc(inline)]
#[cfg(c)]
pub use self::private_mod::Second as Visible;
```
```

----------------------------------------

TITLE: Correct Intrinsic Function Definition in Rust
DESCRIPTION: Proper implementation of the unreachable intrinsic function with the correct return type of never (!).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0211.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(intrinsics)]
#![allow(internal_features)]

#[rustc_intrinsic]
unsafe fn unreachable() -> !; // ok!
```

----------------------------------------

TITLE: Static Library Definition in Rust
DESCRIPTION: Example of a Rust source file (a.rs) that defines a static library using the staticlib crate type attribute.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0462.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![crate_type = "staticlib"]

fn foo() {}
```

----------------------------------------

TITLE: Using Turbofish Syntax with collect() in Rust
DESCRIPTION: This example demonstrates specifying the generic type parameter directly on the collect() method.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0282.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
let x = "hello".chars().rev().collect::<Vec<char>>();
```

----------------------------------------

TITLE: Making a Function Public for Documentation
DESCRIPTION: This snippet demonstrates how to make a function public so that its documentation can be generated by rustdoc.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
/// foo is a function
pub fn foo() {}
```

----------------------------------------

TITLE: Building with Cargo-Clif
DESCRIPTION: Command to build a Rust project using the Cranelift backend through Cargo integration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/docs/usage.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ $cg_clif_dir/dist/cargo-clif build
```

----------------------------------------

TITLE: Cloning Rust Repository in Shell
DESCRIPTION: Initial step to clone the Rust language repository from GitHub and navigate into the project directory
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/quickstart.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
git clone https://github.com/rust-lang/rust.git
cd rust
```

----------------------------------------

TITLE: Incorrect Inline Attribute Syntax
DESCRIPTION: Demonstrates an erroneous use of the inline attribute with empty parentheses, which causes a compilation error
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0534.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[inline()] // error: expected one argument
pub fn something() {}

fn main() {}
```

----------------------------------------

TITLE: Enabling and Using Unstable Feature in Rust
DESCRIPTION: This code snippet demonstrates how to properly enable and use the unstable 'repr128' feature in a nightly version of Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0658.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(repr128)]

#[repr(u128)] // ok!
enum Foo {
    Bar(u64),
}
```

----------------------------------------

TITLE: Copying Generic Parameters with Bounds
DESCRIPTION: Example showing how to copy generic parameters along with their trait bounds.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0401.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
fn foo<T: Copy>(x: T) {
    fn bar<T: Copy>(y: T) {
        // ..
    }
    bar(x);
}
```

----------------------------------------

TITLE: Completion with Auto Import Example
DESCRIPTION: Demonstrates automatic import completion for unresolved names and associated items
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/features_generated.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    pda$0
}
# pub mod std { pub mod marker { pub struct PhantomData { } } }
```

LANGUAGE: rust
CODE:
```
use std::marker::PhantomData;

fn main() {
    PhantomData
}
# pub mod std { pub mod marker { pub struct PhantomData { } } }
```

----------------------------------------

TITLE: Installing Rustfmt on Nightly Toolchain
DESCRIPTION: Commands to install and run Rustfmt using the nightly Rust toolchain for access to the latest features.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
rustup component add rustfmt --toolchain nightly
```

LANGUAGE: sh
CODE:
```
cargo +nightly fmt
```

----------------------------------------

TITLE: Cherry-picking Commit for Backport
DESCRIPTION: Command to cherry-pick a merged PR commit to the beta branch using the commit SHA1.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/backport.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
git cherry-pick -m 1 `<sha1>`
```

----------------------------------------

TITLE: Rust 2018 External Crate Import
DESCRIPTION: Shows the simplified import syntax in Rust 2018 which doesn't require extern crate declarations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0432.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
use core::any; // No extern crate required in Rust 2018.
# fn main() {}
```

----------------------------------------

TITLE: Demonstrating Import Style in Rust
DESCRIPTION: Shows the recommended way to import and use items from 'hir' and 'ast' modules, emphasizing qualification to avoid name clashes and improve clarity.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_19

LANGUAGE: rust
CODE:
```
// GOOD
use syntax::ast;

fn frobnicate(func: hir::Function, strukt: ast::Struct) {}

// BAD
use hir::Function;
use syntax::ast::Struct;

fn frobnicate(func: Function, strukt: Struct) {}
```

----------------------------------------

TITLE: Applying a Custom Theme to `rustdoc` Output (Bash)
DESCRIPTION: This bash command executes `rustdoc` on a source file (`src/lib.rs`), replacing the default theme with a custom one defined in `awesome.css` using the `--theme` flag. This allows for complete visual overhaul of the generated HTML documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/what-to-include.md#_snippet_5

LANGUAGE: Bash
CODE:
```
rustdoc --theme awesome.css src/lib.rs
```

----------------------------------------

TITLE: Configuring Cargo for AMD GPU target as cdylib
DESCRIPTION: The TOML snippet configures a Rust project to build the library as a cdylib, ensuring the binaries are suitable for use on AMD's GPU architecture. LTO is enabled to optimize the build for both development and release profiles, and the configuration is essential for GPU-specific optimizations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/amdgcn-amd-amdhsa.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[lib]\ncrate-type = ["cdylib"]\n\n[profile.dev]\nlto = true # LTO must be explicitly enabled for now\n[profile.release]\nlto = true
```

----------------------------------------

TITLE: Using #[track_caller] Attribute in Rust
DESCRIPTION: Demonstrates how to use the #[track_caller] attribute on closures and coroutines. This feature allows accessing caller location information through std::panic::Location::caller(), similar to using #[track_caller] on regular functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/closure-track-caller.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[track_caller]
```

----------------------------------------

TITLE: Reordering Imports in Rust
DESCRIPTION: Shows how the reorder_imports option affects the alphabetical ordering of import statements.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_61

LANGUAGE: rust
CODE:
```
use dolor;
use ipsum;
use lorem;
use sit;
```

LANGUAGE: rust
CODE:
```
use lorem;
use ipsum;
use dolor;
use sit;
```

----------------------------------------

TITLE: Compiling with coverage using a specific rustc path
DESCRIPTION: Example command for compiling a Cargo example with coverage instrumentation, specifying a custom path to the Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
$ RUSTC=$HOME/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc \
    RUSTFLAGS="-C instrument-coverage" \
    cargo build --example formatjson5
```

----------------------------------------

TITLE: Visual Style Alignment for Where Predicates in Rust
DESCRIPTION: Demonstrates the 'Visual' alignment style for where predicates. Predicates are aligned with the 'where' keyword, which is indented.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_38

LANGUAGE: rust
CODE:
```
fn lorem<Ipsum, Dolor, Sit, Amet>() -> T
    where Ipsum: Eq,
          Dolor: Eq,
          Sit: Eq,
          Amet: Eq
{
    // body
}
```

----------------------------------------

TITLE: Call-site Hierarchy Example (Rust)
DESCRIPTION: This example demonstrates the call-site hierarchy with nested macro invocations. It clarifies the difference between expansion-order and call-site hierarchies.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/macro-expansion.md#_snippet_4

LANGUAGE: rust
CODE:
```
macro bar($i: ident) { $i }
macro foo($i: ident) { $i }

foo!(bar!(baz));
```

----------------------------------------

TITLE: Allowing Specific Lints in Rust
DESCRIPTION: Example of using attribute syntax to allow specific lints for a code block or item.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lints.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[allow(lintname)]
```

----------------------------------------

TITLE: Basic Rustfmt TOML Configuration
DESCRIPTION: Example of a basic rustfmt.toml configuration file showing how to set indentation style and import reordering.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
indent_style = "Block"
reorder_imports = false
```

----------------------------------------

TITLE: Reordering Modules in Rust
DESCRIPTION: Illustrates how the reorder_modules option affects the alphabetical ordering of mod declarations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_63

LANGUAGE: rust
CODE:
```
mod a;
mod b;

mod dolor;
mod ipsum;
mod lorem;
mod sit;
```

LANGUAGE: rust
CODE:
```
mod b;
mod a;

mod lorem;
mod ipsum;
mod dolor;
mod sit;
```

----------------------------------------

TITLE: Rebuild and Reinstall Rust Analyzer Server
DESCRIPTION: Commands to check the project and reinstall the server after making changes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/setup.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
cargo check
cargo xtask install --server --code-bin code-insiders --dev-rel
```

----------------------------------------

TITLE: Internal Feature Marker for update_panic_count
DESCRIPTION: Markdown header indicating the internal compiler feature update_panic_count that is restricted from general use
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/update-panic-count.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `update_panic_count`
```

----------------------------------------

TITLE: Destructuring Tuple Binding in Rust
DESCRIPTION: Transforms a tuple binding into direct destructuring, enhancing direct variable assignment.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_37

LANGUAGE: rust
CODE:
```
fn main() {
    let (\_0, \_1) = (1,2);
    let v = \_0;
}
```

----------------------------------------

TITLE: Adding Internal Change Changelog Entry
DESCRIPTION: Example of how to add a changelog entry for an internal change that doesn't affect users.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/CONTRIBUTING.md#2025-04-21_snippet_4

LANGUAGE: markdown
CODE:
```
changelog: none
```

----------------------------------------

TITLE: Defining Fuchsia Package Metadata
DESCRIPTION: JSON file defining the package name and version.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_9

LANGUAGE: json
CODE:
```
{
  "name": "hello_fuchsia",
  "version": "0"
}
```

----------------------------------------

TITLE: Installing Rustfmt on Stable Toolchain
DESCRIPTION: Commands to install and run Rustfmt using the stable Rust toolchain.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
rustup component add rustfmt
```

LANGUAGE: sh
CODE:
```
cargo fmt
```

----------------------------------------

TITLE: Example Trait Implementation
DESCRIPTION: An example Rust trait implementation that may be used in the context of canonicalization and solving trait queries. The implementation specifies a constraint that X must outlive 'a.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/canonicalization.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
impl<'a, X> Foo<'a, X> for Vec<X>
where X: 'a
{ ... }
```

----------------------------------------

TITLE: Configuring Tab Spaces in Rust
DESCRIPTION: Demonstrates the 'tab_spaces' option, which sets the number of spaces per tab. The default is 4 spaces, but it can be changed to any positive integer (e.g., 2).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_70

LANGUAGE: rust
CODE:
```
fn lorem() {
    let ipsum = dolor();
    let sit = vec![
        "amet consectetur adipiscing elit amet",
        "consectetur adipiscing elit amet consectetur.",
    ];
}
```

LANGUAGE: rust
CODE:
```
fn lorem() {
  let ipsum = dolor();
  let sit = vec![
    "amet consectetur adipiscing elit amet",
    "consectetur adipiscing elit amet consectetur.",
  ];
}
```

----------------------------------------

TITLE: Rust Source for Search Test
DESCRIPTION: This rust code defines a function `constructor` which will be used by `rustdoc-js` to verify the search functionality. This function must be declared as `pub` to be discoverable during search.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustdoc-internals/search.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
// tests/rustdoc-js/constructor_search.rs
// The test case needs to find this result.
pub fn constructor(_input: &str) -> i32 { 1 }
```

----------------------------------------

TITLE: Error Message for Redundant Explicit Links in Rust
DESCRIPTION: This snippet displays the error message generated when the `redundant_explicit_links` lint is triggered. It shows the location of the redundant link, explains the issue, and provides a suggestion for fixing it.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/lints.md#2025-04-21_snippet_6

LANGUAGE: text
CODE:
```
error: redundant explicit rustdoc link
  --> src/lib.rs:3:27
   |
3  | /// add takes 2 [`usize`](usize) and performs addition
   |                           ^^^^^
   |
   = note: Explicit link does not affect the original link
note: the lint level is defined here
  --> src/lib.rs:1:9
   |
1  | #![deny(rustdoc::redundant_explicit_links)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: Remove explicit link instead
```

----------------------------------------

TITLE: Empty Values Check-Cfg Commands in Bash
DESCRIPTION: Demonstrates how to check for configurations with no values or empty value sets.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/check-cfg.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
rustc --check-cfg 'cfg(name)'
rustc --check-cfg 'cfg(name, values(none()))'
```

----------------------------------------

TITLE: Configuring Cargo Linker for Rust Programs on TEEOS
DESCRIPTION: This toml snippet configures Cargo to use a specific linker when building Rust programs for the aarch64-unknown-teeos target. The configuration is added to '~/.cargo/config', specifying the location of the custom shell script that wraps the Clang compiler. This ensures the built Rust programs are correctly cross-compiled for TEEOS.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/aarch64-unknown-teeos.md#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[target.aarch64-unknown-teeos]
linker = "/path/to/aarch64-unknown-teeos-clang.sh" # or aarch64-linux-gnu-ld
```

----------------------------------------

TITLE: Demonstrating Invalid Inner Doc Comment Usage in Rust
DESCRIPTION: This code snippet shows an erroneous use of an inner doc comment in Rust, which triggers the E0753 error. Inner doc comments cannot be used in this context.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0753.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo() {}
//! foo
// ^ error!
fn main() {}
```

----------------------------------------

TITLE: Documenting Private Items with rustdoc (Bash)
DESCRIPTION: Demonstrates the use of the `--document-private-items` flag to include private (non-publicly reachable) items in the generated documentation, excluding those marked `#[doc(hidden)]`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_5

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --document-private-items
```

----------------------------------------

TITLE: Enabled Match Block Trailing Comma in Rust
DESCRIPTION: Demonstrates the match_block_trailing_comma setting set to true, which adds trailing commas after block-based match arms.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_47

LANGUAGE: rust
CODE:
```
fn main() {
    match lorem {
        Lorem::Ipsum => {
            println!("ipsum");
        },
        Lorem::Dolor => println!("dolor"),
    }
}
```

----------------------------------------

TITLE: Exported Variable with Value -42 in Rust
DESCRIPTION: Declares a public variable with the value -42, accessible outside the module or crate. It may be used as a constant or default value within the codebase.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-link-ordinal/output.txt#_snippet_2

LANGUAGE: Rust
CODE:
```
exported_variable value: -42
```

----------------------------------------

TITLE: Invalid Raw String Termination in Rust
DESCRIPTION: Example of incorrectly terminated raw string where the number of trailing hash symbols doesn't match the leading hash symbols, resulting in compilation error E0748.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0748.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let dolphins = r##"Dolphins!"#; // error!
```

----------------------------------------

TITLE: Correct Enum Definition in Rust
DESCRIPTION: Shows how to properly define an enum to resolve name references.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0425.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
enum something_that_does_exist {
    Foo,
}
```

----------------------------------------

TITLE: Rust for Linux Notification Bot Command
DESCRIPTION: Command used to ping the Rust for Linux notification group using rustbot
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/rust-for-linux.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
@rustbot ping rfl
```

----------------------------------------

TITLE: Expression Statement Formatting
DESCRIPTION: Shows how to properly terminate expressions in statement position
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/statements.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
an_expression();
expr_as_value()
```

----------------------------------------

TITLE: Demonstrating Incorrect Union Initialization in Rust
DESCRIPTION: This example shows two erroneous ways to initialize a union: with no fields specified, and with multiple fields specified. Both cases trigger the E0784 error since unions must be initialized with exactly one field.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0784.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
union Bird {
    pigeon: u8,
    turtledove: u16,
}

let bird = Bird {}; // error
let bird = Bird { pigeon: 0, turtledove: 1 }; // error
```

----------------------------------------

TITLE: Error: Missing Trailing Quote in Raw Byte String Literal - Rust
DESCRIPTION: This snippet describes an error that occurs when a raw byte string literal is missing the trailing double quote, which is necessary for terminating the literal. The use of '#' symbols determines the level of escaping needed for the string literal. The error occurs when the closing quote is missing and the number of '#' symbols match the beginning of the literal. The expected input is a Rust source file. The output is a compiler error indicating the missing trailing quote.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_raw_byte_string_with_space.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
BYTE_STRING "br##\" " error: Missing trailing `"` with `#` symbols to terminate the raw byte string literal
```

----------------------------------------

TITLE: Valid SIMD Tuple Struct Implementation
DESCRIPTION: Correct implementation of a SIMD tuple struct using a machine type (u32). This example properly uses the #[repr(simd)] attribute with an array of unsigned 32-bit integers.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0077.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(repr_simd)]

#[repr(simd)]
struct Good([u32; 4]); // ok!
```

----------------------------------------

TITLE: Cargo Configuration for Building Rust Programs - TOML
DESCRIPTION: This snippet demonstrates the necessary .cargo/config settings for projects aimed at the armeb-unknown-linux-gnueabi target, defining the target architecture and the linker to be used for compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armeb-unknown-linux-gnueabi.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[build]
target = "armeb-unknown-linux-gnueabi"

target.armeb-unknown-linux-gnueabi]
linker = "armeb-unknown-linux-gnueabi-gcc"
```

----------------------------------------

TITLE: Multi-Line Tuple Struct Definition in Rust
DESCRIPTION: Demonstrates the formatting of multi-line tuple struct definitions in Rust, including block formatting with a field on each line and a trailing comma.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
pub struct Foo(
    String,
    u8,
);
```

----------------------------------------

TITLE: Merging Imports in Rust
DESCRIPTION: Demonstrates the effect of merging imports into a single use statement with the same visibility.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_54

LANGUAGE: rust
CODE:
```
pub use foo::{x, y};
use {
    bar:{
        a,
        b::{self, f, g},
        c,
        d::e,
    },
    qux::{h, i},
};
```

----------------------------------------

TITLE: Module-Level Import Granularity in Rust
DESCRIPTION: Shows the imports_granularity setting set to Module, which merges imports from the same module while keeping imports from different modules separate.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_52

LANGUAGE: rust
CODE:
```
use foo::b::{f, g};
use foo::d::e;
use foo::{a, b, c};
use qux::{h, i};
```

----------------------------------------

TITLE: Erroneous Yield Usage in Async Block (Rust)
DESCRIPTION: This code snippet demonstrates the incorrect use of `yield` within an `async` block, which is not supported and results in a compilation error (E0727).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0727.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(coroutines, stmt_expr_attributes)]

fn main() {
    let coroutine = #[coroutine] || {
        async {
            yield;
        }
    };
}
```

----------------------------------------

TITLE: Pulling Changes from rust-lang/rust (Shell)
DESCRIPTION: Executes the `rustc-pull` command within the `josh-sync` Rust project to synchronize the guide's content by pulling relevant changes from the `rust-lang/rust` repository. This command uses the installed `josh-proxy` tool and system git to update the guide repository's subtree based on the main rustc repository's history. It's recommended to run this on a new branch before creating a PR.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/README.md#_snippet_4

LANGUAGE: shell
CODE:
```
cargo run --manifest-path josh-sync/Cargo.toml rustc-pull
```

----------------------------------------

TITLE: Demonstrating Type Constraints with type_alias_impl_trait
DESCRIPTION: This code snippet shows how `type_alias_impl_trait` enforces type constraints. It demonstrates that a user-defined type implementing the trait cannot be used where the opaque type is expected, but can be used with argument-position `impl Trait`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/type-alias-impl-trait.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
# #![feature(type_alias_impl_trait)]
# #![allow(unused_variables)]
# pub mod x {
# pub trait Trait {}
#
# struct MyType;
#
# impl Trait for MyType {}
#
# pub type Alias = impl Trait;
#
# #[define_opaque(Alias)]
# pub fn new() -> Alias {
#     MyType
# }
# }
# use x::*;
# pub fn take_alias(x: Alias) {
#     // ...
# }
#
# pub fn take_impl(x: impl Trait) {
#    // ...
# }
#
// a user's crate using the trait and type alias
struct UserType;
impl Trait for UserType {}

# fn main(){
let x = UserType;
take_alias(x);
// ERROR expected opaque type, found `UserType`
// this function *actually* takes a `MyType` as is constrained in `new`

let x = UserType;
take_impl(x);
// OK

let x = new();
take_alias(x);
// OK

let x = new();
take_impl(x);
// OK
# }
```

----------------------------------------

TITLE: Defining SyntaxNode Structure - Rust
DESCRIPTION: This snippet defines the structure of `SyntaxNode` and its underlying data structure `SyntaxData`. It includes methods for creating root nodes, accessing parent nodes, and iterating over children. The focus is on maintaining parent pointers for relational access in syntax trees.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/syntax.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
type SyntaxNode = Arc<SyntaxData>;

struct SyntaxData {
    offset: usize,
    parent: Option<SyntaxNode>,
    green: Arc<GreenNode>,
}

impl SyntaxNode {
    fn new_root(root: Arc<GreenNode>) -> SyntaxNode {
        Arc::new(SyntaxData {
            offset: 0,
            parent: None,
            green: root,
        })
    }
    fn parent(&self) -> Option<SyntaxNode> {
        self.parent.clone()
    }
    fn children(&self) -> impl Iterator<Item = SyntaxNode> {
        let mut offset = self.offset;
        self.green.children().map(|green_child| {
            let child_offset = offset;
            offset += green_child.text_len;
            Arc::new(SyntaxData {
                offset: child_offset,
                parent: Some(Arc::clone(self)),
                green: Arc::clone(green_child),
            })
        })
    }
}

impl PartialEq for SyntaxNode {
    fn eq(&self, other: &SyntaxNode) -> bool {
        self.offset == other.offset
            && Arc::ptr_eq(&self.green, &other.green)
    }
}
```

----------------------------------------

TITLE: Setting RUSTC_LOG environment variable for query-level tracing
DESCRIPTION: This bash command sets the `RUSTC_LOG` environment variable to enable tracing for a specific query, `typeck`. This configuration logs all messages during the execution of the type checking query.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tracing.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
RUSTC_LOG=[typeck]
```

----------------------------------------

TITLE: Setting RUSTC_LOG environment variable for function-level tracing
DESCRIPTION: This bash command sets the `RUSTC_LOG` environment variable to enable tracing for a specific function, `foo`.  This configuration logs all function calls to `foo`, logs the arguments (except for those in the `skip` list), and logs everything else in the compiler until `foo` returns.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tracing.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
RUSTC_LOG=[foo]
```

----------------------------------------

TITLE: Defining Error Code Constants in Rust
DESCRIPTION: This snippet showcases a series of error code constants defined in Rust. These constants represent various error conditions that can occur during system operations, file handling, network interactions, and other low-level processes.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/std/src/sys/pal/windows/c/bindings.txt#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
ERROR_ERRORS_ENCOUNTERED
ERROR_EVALUATION_EXPIRATION
ERROR_EVENT_DONE
ERROR_EVENT_PENDING
ERROR_EVENTLOG_CANT_START
ERROR_EVENTLOG_FILE_CHANGED
ERROR_EVENTLOG_FILE_CORRUPT
ERROR_EXCEPTION_IN_SERVICE
ERROR_EXCL_SEM_ALREADY_OWNED
ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY
ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY
ERROR_EXE_MACHINE_TYPE_MISMATCH
ERROR_EXE_MARKED_INVALID
ERROR_EXTENDED_ERROR
ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN
ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED
ERROR_EXTRANEOUS_INFORMATION
ERROR_FAIL_FAST_EXCEPTION
ERROR_FAIL_I24
ERROR_FAIL_NOACTION_REBOOT
ERROR_FAIL_RESTART
ERROR_FAIL_SHUTDOWN
ERROR_FAILED_DRIVER_ENTRY
ERROR_FAILED_SERVICE_CONTROLLER_CONNECT
ERROR_FATAL_APP_EXIT
ERROR_FILE_CHECKED_OUT
ERROR_FILE_CORRUPT
ERROR_FILE_ENCRYPTED
ERROR_FILE_EXISTS
ERROR_FILE_HANDLE_REVOKED
ERROR_FILE_INVALID
ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED
ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS
ERROR_FILE_NOT_ENCRYPTED
ERROR_FILE_NOT_FOUND
ERROR_FILE_NOT_SUPPORTED
ERROR_FILE_OFFLINE
ERROR_FILE_PROTECTED_UNDER_DPL
ERROR_FILE_READ_ONLY
ERROR_FILE_SNAP_IN_PROGRESS
ERROR_FILE_SNAP_INVALID_PARAMETER
ERROR_FILE_SNAP_IO_NOT_COORDINATED
ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED
ERROR_FILE_SNAP_UNEXPECTED_ERROR
ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED
ERROR_FILE_SYSTEM_LIMITATION
ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY
ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION
ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT
ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN
ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE
ERROR_FILE_TOO_LARGE
ERROR_FILEMARK_DETECTED
ERROR_FILENAME_EXCED_RANGE
ERROR_FIRMWARE_UPDATED
ERROR_FLOAT_MULTIPLE_FAULTS
ERROR_FLOAT_MULTIPLE_TRAPS
ERROR_FLOPPY_BAD_REGISTERS
ERROR_FLOPPY_ID_MARK_NOT_FOUND
ERROR_FLOPPY_UNKNOWN_ERROR
ERROR_FLOPPY_VOLUME
ERROR_FLOPPY_WRONG_CYLINDER
ERROR_FORMS_AUTH_REQUIRED
ERROR_FOUND_OUT_OF_SCOPE
ERROR_FS_DRIVER_REQUIRED
ERROR_FS_METADATA_INCONSISTENT
ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY
ERROR_FT_DI_SCAN_REQUIRED
ERROR_FT_READ_FAILURE
ERROR_FT_READ_FROM_COPY_FAILURE
ERROR_FT_READ_RECOVERY_FROM_BACKUP
ERROR_FT_WRITE_FAILURE
ERROR_FT_WRITE_RECOVERY
ERROR_FULLSCREEN_MODE
ERROR_FUNCTION_FAILED
ERROR_FUNCTION_NOT_CALLED
ERROR_GDI_HANDLE_LEAK
ERROR_GEN_FAILURE
ERROR_GENERIC_NOT_MAPPED
ERROR_GLOBAL_ONLY_HOOK
ERROR_GRACEFUL_DISCONNECT
ERROR_GROUP_EXISTS
ERROR_GUID_SUBSTITUTION_MADE
ERROR_HANDLE_DISK_FULL
ERROR_HANDLE_EOF
ERROR_HANDLE_REVOKED
ERROR_HANDLES_CLOSED
ERROR_HAS_SYSTEM_CRITICAL_FILES
ERROR_HIBERNATED
ERROR_HIBERNATION_FAILURE
ERROR_HOOK_NEEDS_HMOD
ERROR_HOOK_NOT_INSTALLED
ERROR_HOOK_TYPE_NOT_ALLOWED
ERROR_HOST_DOWN
ERROR_HOST_UNREACHABLE
ERROR_HOTKEY_ALREADY_REGISTERED
ERROR_HOTKEY_NOT_REGISTERED
ERROR_HWNDS_HAVE_DIFF_PARENT
ERROR_ILL_FORMED_PASSWORD
ERROR_ILLEGAL_CHARACTER
ERROR_ILLEGAL_DLL_RELOCATION
ERROR_ILLEGAL_ELEMENT_ADDRESS
ERROR_ILLEGAL_FLOAT_CONTEXT
ERROR_IMAGE_AT_DIFFERENT_BASE
ERROR_IMAGE_MACHINE_TYPE_MISMATCH
ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE
ERROR_IMAGE_NOT_AT_BASE
ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT
ERROR_IMPLEMENTATION_LIMIT
ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE
ERROR_INCOMPATIBLE_SERVICE_SID_TYPE
ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING
ERROR_INCORRECT_ACCOUNT_TYPE
ERROR_INCORRECT_ADDRESS
ERROR_INCORRECT_SIZE
ERROR_INDEX_ABSENT
ERROR_INDEX_OUT_OF_BOUNDS
ERROR_INFLOOP_IN_RELOC_CHAIN
ERROR_INSTALL_ALREADY_RUNNING
ERROR_INSTALL_FAILURE
ERROR_INSTALL_LANGUAGE_UNSUPPORTED
ERROR_INSTALL_LOG_FAILURE
ERROR_INSTALL_NOTUSED
ERROR_INSTALL_PACKAGE_INVALID
ERROR_INSTALL_PACKAGE_OPEN_FAILED
ERROR_INSTALL_PACKAGE_REJECTED
ERROR_INSTALL_PACKAGE_VERSION
ERROR_INSTALL_PLATFORM_UNSUPPORTED
ERROR_INSTALL_REJECTED
ERROR_INSTALL_REMOTE_DISALLOWED
ERROR_INSTALL_REMOTE_PROHIBITED
ERROR_INSTALL_SERVICE_FAILURE
ERROR_INSTALL_SERVICE_SAFEBOOT
ERROR_INSTALL_SOURCE_ABSENT
ERROR_INSTALL_SUSPEND
ERROR_INSTALL_TEMP_UNWRITABLE
ERROR_INSTALL_TRANSFORM_FAILURE
ERROR_INSTALL_TRANSFORM_REJECTED
ERROR_INSTALL_UI_FAILURE
ERROR_INSTALL_USEREXIT
ERROR_INSTRUCTION_MISALIGNMENT
ERROR_INSUFFICIENT_BUFFER
ERROR_INSUFFICIENT_LOGON_INFO
ERROR_INSUFFICIENT_POWER
ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE
ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES
ERROR_INTERMIXED_KERNEL_EA_OPERATION
ERROR_INTERNAL_DB_CORRUPTION
ERROR_INTERNAL_DB_ERROR
ERROR_INTERNAL_ERROR
ERROR_INTERRUPT_STILL_CONNECTED
ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED
ERROR_INVALID_ACCEL_HANDLE
ERROR_INVALID_ACCESS
ERROR_INVALID_ACCOUNT_NAME
ERROR_INVALID_ACE_CONDITION
ERROR_INVALID_ACL
ERROR_INVALID_ADDRESS
ERROR_INVALID_AT_INTERRUPT_TIME
ERROR_INVALID_BLOCK
ERROR_INVALID_BLOCK_LENGTH
ERROR_INVALID_CAP
ERROR_INVALID_CATEGORY
ERROR_INVALID_COMBOBOX_MESSAGE
ERROR_INVALID_COMMAND_LINE
ERROR_INVALID_COMPUTERNAME
ERROR_INVALID_CRUNTIME_PARAMETER
ERROR_INVALID_CURSOR_HANDLE
ERROR_INVALID_DATA
ERROR_INVALID_DATATYPE
ERROR_INVALID_DEVICE_OBJECT_PARAMETER
ERROR_INVALID_DLL
ERROR_INVALID_DOMAIN_ROLE
ERROR_INVALID_DOMAIN_STATE
ERROR_INVALID_DOMAINNAME
ERROR_INVALID_DRIVE
ERROR_INVALID_DWP_HANDLE
ERROR_INVALID_EA_HANDLE
ERROR_INVALID_EA_NAME
ERROR_INVALID_EDIT_HEIGHT
ERROR_INVALID_ENVIRONMENT
ERROR_INVALID_EVENT_COUNT
ERROR_INVALID_EVENTNAME
ERROR_INVALID_EXCEPTION_HANDLER
ERROR_INVALID_EXE_SIGNATURE
ERROR_INVALID_FIELD
ERROR_INVALID_FIELD_IN_PARAMETER_LIST
ERROR_INVALID_FILTER_PROC
ERROR_INVALID_FLAG_NUMBER
ERROR_INVALID_FLAGS
ERROR_INVALID_FORM_NAME
ERROR_INVALID_FORM_SIZE
ERROR_INVALID_FUNCTION
ERROR_INVALID_GROUP_ATTRIBUTES
ERROR_INVALID_GROUPNAME
ERROR_INVALID_GW_COMMAND
ERROR_INVALID_HANDLE
ERROR_INVALID_HANDLE_STATE
ERROR_INVALID_HOOK_FILTER
ERROR_INVALID_HOOK_HANDLE
ERROR_INVALID_HW_PROFILE
ERROR_INVALID_ICON_HANDLE
ERROR_INVALID_ID_AUTHORITY
ERROR_INVALID_IMAGE_HASH
ERROR_INVALID_IMPORT_OF_NON_DLL
ERROR_INVALID_INDEX
ERROR_INVALID_KERNEL_INFO_VERSION
ERROR_INVALID_KEYBOARD_HANDLE
ERROR_INVALID_LABEL
ERROR_INVALID_LB_MESSAGE
ERROR_INVALID_LDT_DESCRIPTOR
ERROR_INVALID_LDT_OFFSET
ERROR_INVALID_LDT_SIZE
ERROR_INVALID_LEVEL
ERROR_INVALID_LIST_FORMAT
ERROR_INVALID_LOCK_RANGE
ERROR_INVALID_LOGON_HOURS
ERROR_INVALID_LOGON_TYPE
ERROR_INVALID_MEMBER
ERROR_INVALID_MENU_HANDLE
ERROR_INVALID_MESSAGE
ERROR_INVALID_MESSAGEDEST
ERROR_INVALID_MESSAGENAME
ERROR_INVALID_MINALLOCSIZE
ERROR_INVALID_MODULETYPE
ERROR_INVALID_MONITOR_HANDLE
ERROR_INVALID_MSGBOX_STYLE
ERROR_INVALID_NAME
ERROR_INVALID_NETNAME
ERROR_INVALID_OPLOCK_PROTOCOL
ERROR_INVALID_ORDINAL
ERROR_INVALID_OWNER
ERROR_INVALID_PACKAGE_SID_LENGTH
ERROR_INVALID_PARAMETER
ERROR_INVALID_PASSWORD
ERROR_INVALID_PASSWORDNAME
ERROR_INVALID_PATCH_XML
ERROR_INVALID_PEP_INFO_VERSION
ERROR_INVALID_PLUGPLAY_DEVICE_PATH
ERROR_INVALID_PORT_ATTRIBUTES
ERROR_INVALID_PRIMARY_GROUP
ERROR_INVALID_PRINTER_COMMAND
ERROR_INVALID_PRINTER_NAME
ERROR_INVALID_PRINTER_STATE
ERROR_INVALID_PRIORITY
ERROR_INVALID_QUOTA_LOWER
ERROR_INVALID_REPARSE_DATA
ERROR_INVALID_SCROLLBAR_RANGE
ERROR_INVALID_SECURITY_DESCR
ERROR_INVALID_SEGDPL
ERROR_INVALID_SEGMENT_NUMBER
ERROR_INVALID_SEPARATOR_FILE
ERROR_INVALID_SERVER_STATE
ERROR_INVALID_SERVICE_ACCOUNT
ERROR_INVALID_SERVICE_CONTROL
ERROR_INVALID_SERVICE_LOCK
ERROR_INVALID_SERVICENAME
ERROR_INVALID_SHARENAME
ERROR_INVALID_SHOWWIN_COMMAND
ERROR_INVALID_SID
ERROR_INVALID_SIGNAL_NUMBER
ERROR_INVALID_SPI_VALUE
ERROR_INVALID_STACKSEG
ERROR_INVALID_STARTING_CODESEG
ERROR_INVALID_SUB_AUTHORITY
ERROR_INVALID_TABLE
ERROR_INVALID_TARGET_HANDLE
ERROR_INVALID_TASK_INDEX
ERROR_INVALID_TASK_NAME
ERROR_INVALID_THREAD_ID
ERROR_INVALID_TIME
ERROR_INVALID_TOKEN
ERROR_INVALID_UNWIND_TARGET
ERROR_INVALID_USER_BUFFER
ERROR_INVALID_USER_PRINCIPAL_NAME
ERROR_INVALID_VARIANT
ERROR_INVALID_VERIFY_SWITCH
ERROR_INVALID_WINDOW_HANDLE
ERROR_INVALID_WORKSTATION
ERROR_IO_DEVICE
ERROR_IO_INCOMPLETE
ERROR_IO_PENDING
ERROR_IO_PRIVILEGE_FAILED
ERROR_IO_REISSUE_AS_CACHED
ERROR_IOPL_NOT_ENABLED
ERROR_IP_ADDRESS_CONFLICT1
ERROR_IP_ADDRESS_CONFLICT2
ERROR_IPSEC_IKE_TIMED_OUT
ERROR_IRQ_BUSY
ERROR_IS_JOIN_PATH
ERROR_IS_JOIN_TARGET
ERROR_IS_JOINED
ERROR_IS_SUBST_PATH
ERROR_IS_SUBST_TARGET
ERROR_IS_SUBSTED
ERROR_ITERATED_DATA_EXCEEDS_64k
ERROR_JOB_NO_CONTAINER
ERROR_JOIN_TO_JOIN
ERROR_JOIN_TO_SUBST
ERROR_JOURNAL_DELETE_IN_PROGRESS
ERROR_JOURNAL_ENTRY_DELETED
ERROR_JOURNAL_HOOK_SET
ERROR_JOURNAL_NOT_ACTIVE
ERROR_KERNEL_APC
ERROR_KEY_DELETED
ERROR_KEY_HAS_CHILDREN
ERROR_KM_DRIVER_BLOCKED
ERROR_LABEL_TOO_LONG
ERROR_LAST_ADMIN
ERROR_LB_WITHOUT_TABSTOPS
ERROR_LICENSE_QUOTA_EXCEEDED
ERROR_LINUX_SUBSYSTEM_NOT_PRESENT
ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED
ERROR_LISTBOX_ID_NOT_FOUND
ERROR_LM_CROSS_ENCRYPTION_REQUIRED
ERROR_LOCAL_POLICY_MODIFICATION_NOT_SUPPORTED
ERROR_LOCAL_USER_SESSION_KEY
ERROR_LOCK_FAILED
ERROR_LOCK_VIOLATION
ERROR_LOCKED
ERROR_LOG_FILE_FULL
ERROR_LOG_HARD_ERROR
ERROR_LOGIN_TIME_RESTRICTION
ERROR_LOGIN_WKSTA_RESTRICTION
ERROR_LOGON_FAILURE
ERROR_LOGON_NOT_GRANTED
ERROR_LOGON_SERVER_CONFLICT
ERROR_LOGON_SESSION_COLLISION
ERROR_LOGON_SESSION_EXISTS
ERROR_LOGON_TYPE_NOT_GRANTED
ERROR_LONGJUMP
ERROR_LOST_MODE_LOGON_RESTRICTION
ERROR_LOST_WRITEBEHIND_DATA
ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR
ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED
ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR
ERROR_LUIDS_EXHAUSTED
ERROR_MACHINE_LOCKED
ERROR_MAGAZINE_NOT_PRESENT
ERROR_MAPPED_ALIGNMENT
ERROR_MARKED_TO_DISALLOW_WRITES
ERROR_MARSHALL_OVERFLOW
ERROR_MAX_SESSIONS_REACHED
ERROR_MAX_THRDS_REACHED
ERROR_MCA_EXCEPTION
ERROR_MCA_OCCURED
ERROR_MEDIA_CHANGED
ERROR_MEDIA_CHECK
ERROR_MEMBER_IN_ALIAS
ERROR_MEMBER_IN_GROUP
ERROR_MEMBER_NOT_IN_ALIAS
ERROR_MEMBER_NOT_IN_GROUP
ERROR_MEMBERS_PRIMARY_GROUP
ERROR_MEMORY_HARDWARE
ERROR_MENU_ITEM_NOT_FOUND
ERROR_MESSAGE_SYNC_ONLY
ERROR_META_EXPANSION_TOO_LONG
ERROR_MISSING_SYSTEMFILE
ERROR_MOD_NOT_FOUND
ERROR_MORE_DATA
ERROR_MORE_WRITES
ERROR_MOUNT_POINT_NOT_RESOLVED
ERROR_MP_PROCESSOR_MISMATCH
ERROR_MR_MID_NOT_FOUND
ERROR_MULTIPLE_FAULT_VIOLATION
ERROR_MUTANT_LIMIT_EXCEEDED
ERROR_MUTUAL_AUTH_FAILED
ERROR_NEGATIVE_SEEK
ERROR_NESTING_NOT_ALLOWED
ERROR_NET_OPEN_FAILED
ERROR_NET_WRITE_FAULT
ERROR_NETLOGON_NOT_STARTED
ERROR_NETNAME_DELETED
ERROR_NETWORK_ACCESS_DENIED
```

----------------------------------------

TITLE: Using Closure for Generic Parameter Access
DESCRIPTION: Solution using a closure to access outer function's generic parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0401.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
fn foo<T>(x: T) {
    let bar = |y: T| { // explicit type annotation may not be necessary
        // ..
    };
    bar(x);
}
```

----------------------------------------

TITLE: Using mem::transmute for SIMD Type Casting in Rust
DESCRIPTION: This snippet explains how to use the mem::transmute function to cast SIMD types safely while highlighting that i32x4 can be treated as an array of four i32s. It emphasizes the pitfalls of alignment when dealing with SIMD types.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/portable-simd/beginners-guide.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
i32x4_value = unsafe { std::mem::transmute::<[i32; 4], i32x4>(array_value) };
```

----------------------------------------

TITLE: Binary Operator Back Style
DESCRIPTION: Example showing binary operator placement at the end of lines when expressions span multiple lines.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn main() {
    let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo ||
        barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;

    let sum = 123456789012345678901234567890 +
        123456789012345678901234567890 +
        123456789012345678901234567890;

    let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa..
        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;
}
```

----------------------------------------

TITLE: Demonstrating Irrefutable Pattern in While-Let Expression (Rust)
DESCRIPTION: This code snippet shows an example of an irrefutable pattern in a while-let expression, which would have triggered the deprecated compiler error. It defines a struct 'Irrefutable' and attempts to use it in a while-let loop, which fails to compile.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0165.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Irrefutable(i32);
let irr = Irrefutable(0);

// This fails to compile because the match is irrefutable.
while let Irrefutable(x) = irr {
    // ...
}
```

----------------------------------------

TITLE: Correct Clippy Lint Tool Name
DESCRIPTION: Examples of correctly spelled clippy tool name in lint attributes
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0710.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[allow(clippy::filter_map)] // ok!
fn main() {
    // business logic
}
```

LANGUAGE: rust
CODE:
```
#[warn(clippy::filter_map)] // ok!
fn main() {
    // business logic
}
```

----------------------------------------

TITLE: Invalid Async Non-Move Closure Example
DESCRIPTION: Demonstrates an erroneous implementation of an async closure without move semantics. This pattern is not supported in the current version of Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0708.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let add_one = async |num: u8| {
        num + 1
    };
}
```

----------------------------------------

TITLE: Solution 1: Adding Variants to an Enum with Integer Representation in Rust
DESCRIPTION: This solution addresses the E0084 error by adding variants to the enum, making the integer representation valid since there are now actual values to represent.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0084.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[repr(i32)]
enum NightsWatch {
    JonSnow,
    Commander,
}
```

----------------------------------------

TITLE: Accessing Struct Field in Rust
DESCRIPTION: This code snippet shows how to access a field of a struct in Rust. The field `x` of the struct `Foo` is accessed using `f.x`. The `println!` macro is used to print the value of the field.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0615.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
```
# struct Foo { x: u32 }
# impl Foo { fn method(&self) {} }
# let f = Foo { x: 0 };
println!("{}", f.x);
```
```

----------------------------------------

TITLE: Incorrect Usage of impl Trait in Variable Declaration in Rust
DESCRIPTION: This example demonstrates the improper use of `impl Trait` syntax in a variable declaration, which causes a compilation error E0562. The `impl Trait` syntax is only allowed in function and inherent method return types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0562.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let count_to_ten: impl Iterator<Item=usize> = 0..10;
    // error: `impl Trait` not allowed outside of function and inherent method
    //        return types
    for i in count_to_ten {
        println!("{}", i);
    }
}
```

----------------------------------------

TITLE: Compile-Fail Example: Invalid Indexing in Rust
DESCRIPTION: This code snippet demonstrates an example that fails to compile because it attempts to index into a `u8` type, which does not implement the `std::ops::Index` trait. This results in the E0608 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0608.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"0u8[2]; // error: cannot index into a value of type `u8`"
```

----------------------------------------

TITLE: Using Unsupported repr Attribute in Rust
DESCRIPTION: This code snippet demonstrates an erroneous usage of an unsupported repr attribute 'D'. The repr attribute is used to specify how structs and enums are laid out in memory. Using an unrecognized representation hint will result in a compile error. Supported representations must be used to ensure correct memory layout.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0552.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(D)] // error: unrecognized representation hint
struct MyStruct {
    my_field: usize
}
```

----------------------------------------

TITLE: Setting Code Model in Rust
DESCRIPTION: This option specifies the code model to use, which impacts address range constraints. Supported values include `tiny`, `small`, `kernel`, `medium`, and `large`.  The default model is typically `small`.  The specific address ranges depend on the target architecture.  It impacts the size and efficiency of generated machine code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_0



----------------------------------------

TITLE: Target feature attribute in Rust (incorrect)
DESCRIPTION: This Rust code snippet shows how target features are enabled on a per-function level with the `#[target_feature]` attribute (not recommended). Here, the "simd128" feature is enabled for the `foo` function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-unknown.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
#[target_feature(enable = "simd128")]
fn foo() {
    // ...
}
```

----------------------------------------

TITLE: Travis CI Configuration for Clippy
DESCRIPTION: YAML configuration for integrating Clippy into Travis CI pipeline
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/README.md#2025-04-21_snippet_6

LANGUAGE: yaml
CODE:
```
language: rust
rust:
  - stable
  - beta
before_script:
  - rustup component add clippy
script:
  - cargo clippy
  # if you want the build job to fail when encountering warnings, use
  - cargo clippy -- -D warnings
  # in order to also check tests and non-default crate features, use
  - cargo clippy --all-targets --all-features -- -D warnings
  - cargo test
  # etc.
```

----------------------------------------

TITLE: Compile-Fail Example with typeof in Rust
DESCRIPTION: This code demonstrates the use of the `typeof` keyword, which is currently unimplemented in Rust. Attempting to compile this code will result in a compilation error (E0516). The code attempts to declare a variable `x` with the type of the expression `92` using `typeof`.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0516.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0516
fn main() {
    let x: typeof(92) = 92;
}
```
```

----------------------------------------

TITLE: Demonstrating Allow-Features Flag Usage in Rust
DESCRIPTION: This snippet shows how to use the allow-features flag to enable specific features in Rust. It demonstrates the comma-separated syntax for specifying multiple features.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/allow-features.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
-Z allow-features=ffi_pure,f16
```

----------------------------------------

TITLE: Formatting Type Punctuation Density in Rust
DESCRIPTION: Shows the effect of the 'type_punctuation_density' option. 'Wide' (default) wraps '+' and '=' in spaces, while 'Compressed' removes these spaces.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_73

LANGUAGE: rust
CODE:
```
fn lorem<Ipsum: Dolor + Sit = Amet>() {
    // body
}
```

LANGUAGE: rust
CODE:
```
fn lorem<Ipsum: Dolor+Sit=Amet>() {
    // body
}
```

----------------------------------------

TITLE: Defining a public function in Rust
DESCRIPTION: This snippet shows a simple public function definition in a Rust library. The function, `a_func`, takes no arguments and returns nothing.  It is intended to be used as a target for examples that will be scraped and included in the documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/scraped-examples.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"// a_crate/src/lib.rs
pub fn a_func() {}"
```

----------------------------------------

TITLE: Incorrect Plugin Implementation in rlib Format
DESCRIPTION: Example of incorrect plugin implementation using rlib crate type. Shows a plugin registrar function that won't work because it's not in dylib format.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0457.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![crate_type = "rlib"]
#![feature(rustc_private)]

extern crate rustc_middle;
extern crate rustc_driver;

use rustc_driver::plugin::Registry;

#[no_mangle]
fn __rustc_plugin_registrar(_: &mut Registry) {}
```

----------------------------------------

TITLE: Handling Float Literal with Suffix and Missing Exponent in Rust Lexer
DESCRIPTION: Illustrates how the Rust lexer processes floating-point literals that include a type suffix (like `f32`), an exponent symbol (`e` or `E`), and an optional sign (`+` or `-`) but are missing the required digits after the exponent. The lexer produces a `FLOAT_NUMBER` token with an error message.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_exponent.txt#_snippet_4

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "42.2e+f32" error: Missing digits after the exponent symbol
```

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "42.2e-f32" error: Missing digits after the exponent symbol
```

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "42.2E+f32" error: Missing digits after the exponent symbol
```

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "42.2E-" error: Missing digits after the exponent symbol
```

----------------------------------------

TITLE: Using Clippy Driver Directly
DESCRIPTION: Example of using clippy-driver directly without cargo, showing how to pass compiler flags.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/usage.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
clippy-driver --edition 2018 -Cpanic=abort foo.rs
```

----------------------------------------

TITLE: Executing Rust Programs with Hexagon Toolchain
DESCRIPTION: This snippet provides the command to add the Hexagon toolchain to the PATH and execute Rust programs using Cargo run. It mentions the requirement to have the QEMU in the system's PATH.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/hexagon-unknown-linux-musl.md#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
export PATH=/path/to/my/inst/clang+llvm-18.1.0-cross-hexagon-unknown-linux-musl/x86_64-linux-gnu/bin/:$PATH
cargo run -Zbuild-std -Zbuild-std-features=llvm-libunwind
```

----------------------------------------

TITLE: Implementing Custom Test Runner in Rust
DESCRIPTION: Demonstrates how to implement a custom test runner using the custom_test_frameworks feature. The example shows a simple runner that checks if test case values equal zero, marking them as PASSED or FAILED accordingly. Uses const values as test cases instead of traditional test functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/custom-test-frameworks.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(custom_test_frameworks)]
#![test_runner(my_runner)]

fn my_runner(tests: &[&i32]) {
    for t in tests {
        if **t == 0 {
            println!("PASSED");
        } else {
            println!("FAILED");
        }
    }
}

#[test_case]
const WILL_PASS: i32 = 0;

#[test_case]
const WILL_FAIL: i32 = 4;
```

----------------------------------------

TITLE: Define No-Std Entry Point for Miri - Rust
DESCRIPTION: This code snippet provides the boilerplate `miri_start` function signature required for Rust `no-std` binaries when they are interpreted by Miri. It acts as the program's entry point for Miri execution and should call the actual start function implemented by the user's project, based on the target's conventions. The function is marked with `#[cfg(miri)]` to only be included when the `miri` configuration is enabled and `#[no_mangle]` to prevent name mangling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_16

LANGUAGE: Rust
CODE:
```
#[cfg(miri)]
#[unsafe(no_mangle)]
fn miri_start(argc: isize, argv: *const *const u8) -> isize {
    // Call the actual start function that your project implements, based on your target's conventions.
}
```

----------------------------------------

TITLE: Checking Read-only Relocations in ELF Binary
DESCRIPTION: This command uses readelf to check if read-only relocations (RELRO) are enabled in a compiled Rust binary by looking for the GNU_RELRO segment in the program header table.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_7

LANGUAGE: text
CODE:
```
$ readelf -l target/release/hello-rust | grep GNU_RELRO
  GNU_RELRO      0x000000000002ee00 0x000000000002fe00 0x000000000002fe00
```

----------------------------------------

TITLE: Compiling Rust Program for VisionOS Simulator
DESCRIPTION: Demonstrates how to compile a Rust program targeting the VisionOS simulator architecture using rustc with explicit target specification.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-visionos.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ rustc --target aarch64-apple-visionos-sim your-code.rs
```

----------------------------------------

TITLE: Configuring Custom rust-analyzer Server Path in VS Code (JSON)
DESCRIPTION: Specifies a custom path to the rust-analyzer server executable within VS Code's `settings.json`. This is necessary when installing `rust-analyzer-no-server.vsix` and providing a separately compiled or downloaded server binary, often used on unsupported platforms or for custom builds.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/vs_code.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "rust-analyzer.server.path": "~/.local/bin/rust-analyzer-linux"
}
```

----------------------------------------

TITLE: Custom Completion Snippets Configuration
DESCRIPTION: Defines custom completion snippets for rust-analyzer. These snippets allow wrapping expressions with common constructs like `Ok`, `Box::pin`, `Arc::new`, `Some`, `Err`, and `Rc::new`.  Each snippet includes a postfix, body, description, scope (typically `expr`), and optional requirements (e.g., a required crate import).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "Ok": {
    "postfix": "ok",
    "body": "Ok(${receiver})",
    "description": "Wrap the expression in a `Result::Ok`",
    "scope": "expr"
  },
  "Box::pin": {
    "postfix": "pinbox",
    "body": "Box::pin(${receiver})",
    "requires": "std::boxed::Box",
    "description": "Put the expression into a pinned `Box`",
    "scope": "expr"
  },
  "Arc::new": {
    "postfix": "arc",
    "body": "Arc::new(${receiver})",
    "requires": "std::sync::Arc",
    "description": "Put the expression into an `Arc`",
    "scope": "expr"
  },
  "Some": {
    "postfix": "some",
    "body": "Some(${receiver})",
    "description": "Wrap the expression in an `Option::Some`",
    "scope": "expr"
  },
  "Err": {
    "postfix": "err",
    "body": "Err(${receiver})",
    "description": "Wrap the expression in a `Result::Err`",
    "scope": "expr"
  },
  "Rc::new": {
    "postfix": "rc",
    "body": "Rc::new(${receiver})",
    "requires": "std::rc::Rc",
    "description": "Put the expression into an `Rc`",
    "scope": "expr"
  }
}
```

----------------------------------------

TITLE: Rust Compiler Error: Missing Trailing Quote
DESCRIPTION: This code snippet illustrates a Rust compiler error. The error "Missing trailing `'` symbol to terminate the byte literal" occurs when defining a byte literal (starting with `b'`) without a closing single quote. This often happens when escape sequences are used without proper termination.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_with_ascii_escape.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"BYTE \"b'\\x7f\" error: Missing trailing `'` symbol to terminate the byte literal"
```

----------------------------------------

TITLE: Demonstrating Invalid Macro Import Declarations in Rust
DESCRIPTION: This code snippet shows two examples of incorrect macro import declarations that will result in compilation errors. The first attempts to nest macros, while the second uses an invalid key-value syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0466.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[macro_use(a_macro(another_macro))] // error: invalid import declaration
extern crate core as some_crate;

#[macro_use(i_want = "some_macros")] // error: invalid import declaration
extern crate core as another_crate;
```

----------------------------------------

TITLE: Debugging GCC LTO Using Command Line Options
DESCRIPTION: A technique for debugging GCC LTO by running the command with verbose flags and saving temporary files. This allows extracting the lto1 process command for running under a debugger.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/debugging.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
-v -save-temps
```

----------------------------------------

TITLE: Defining a Coroutine with a Single Parameter - Rust
DESCRIPTION: This snippet provides a corrected implementation of a coroutine in Rust with a single parameter, adhering to the language's parameter restrictions. It illustrates the proper way to define a coroutine, allowing the code to compile successfully and yield the specified parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0628.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#!\[feature(coroutines, coroutine_trait, stmt_expr_attributes)\]\n\nfn main() {\n    let coroutine = \#\[coroutine\] |a: i32| {\n        yield a;\n    };\n}
```

----------------------------------------

TITLE: Small Heuristics Off Example in Rust
DESCRIPTION: Shows code formatting when use_small_heuristics is set to 'Off', where width settings are disabled and constructs are formatted vertically.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_76

LANGUAGE: rust
CODE:
```
enum Lorem {
    Ipsum,
    Dolor(bool),
    Sit {
        amet: Consectetur,
        adipiscing: Elit,
    },
}

fn main() {
    lorem("lorem", "ipsum", "dolor", "sit", "amet", "consectetur", "adipiscing");

    let lorem = Lorem {
        ipsum: dolor,
        sit: amet,
    };

    let lorem = if ipsum {
        dolor
    } else {
        sit
    };
}
```

----------------------------------------

TITLE: Hexadecimal Literal Case Control
DESCRIPTION: Demonstrates configuration for controlling hexadecimal literal case
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_23



----------------------------------------

TITLE: Setting Test Run Directory with rustdoc (Bash)
DESCRIPTION: Shows how the `--test-run-directory` flag specifies the working directory where documentation tests should be executed, useful for tests that rely on specific file paths.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_14

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --test --test-run-directory=/path/to/working/directory
```

----------------------------------------

TITLE: Checking Conditional Configurations with --check-cfg
DESCRIPTION: Examples of using the --check-cfg flag to validate conditional compilation configurations at compile-time.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
--check-cfg 'cfg(verbose)'
--check-cfg 'cfg(feature, values("serde"))'
```

----------------------------------------

TITLE: Creating Getter Methods with Concatenated Names in Rust
DESCRIPTION: This example shows how to use the concat metavariable expression to create a getter method with a name that is formed by concatenating 'get_' with a field name. The macro implements the method for a specified struct.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/macro-metavar-expr-concat.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(macro_metavar_expr_concat)]

macro_rules! make_getter {
    ($name:ident, $field: ident, $ret:ty) => {
        impl $name {
            pub fn ${ concat(get_, $field) }(&self) -> &$ret {
                &self.$field
            }
        }
    }
}

pub struct Thing {
    description: String,
}

make_getter!(Thing, description, String);
```

----------------------------------------

TITLE: Inferred Function Signature with Lifetime Parameter in Rust
DESCRIPTION: Demonstrates how the compiler infers the get_is_cool function signature with explicit lifetime parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0772.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
fn get_is_cool<'p, R: BooleanLike>(person: &'p (dyn Person + 'p)) -> R {
    unimplemented!()
}
```

----------------------------------------

TITLE: Using remap-cwd-prefix Flag with Rust Compiler (sh)
DESCRIPTION: This example demonstrates using the -Z remap-cwd-prefix flag to replace absolute paths to main.rs with a relative path in build outputs. This helps produce deterministic build outputs by removing machine-specific working directory references.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/remap-cwd-prefix.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
# This would produce an absolute path to main.rs in build outputs of
# "./main.rs".
rustc -Z remap-cwd-prefix=. main.rs
```

----------------------------------------

TITLE: Function with Higher-Ranked Lifetime Bounds
DESCRIPTION: Example showing nested universe creation with multiple for-bound lifetimes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/placeholders_and_universes.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
fn bar<'a, T>(t: &'a T) {
    let x: for<'b> fn(&'b u32) = ...;
    let y: for<'c> fn(&'c u32) = ...;
}
```

----------------------------------------

TITLE: Setting Granular Runnable Environment Variables (JSON)
DESCRIPTION: This JSON snippet provides a granular approach to setting environment variables for runnable commands, where specific conditions can apply. This example sets environment variables, optionally using masks to filter applicable runnables.  Requires VS Code and the Rust extension.  The output adds the environment variables during execution. Configurations are placed in settings.json.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/editor_features.md#_snippet_6

LANGUAGE: JSON
CODE:
```
"rust-analyzer.runnables.extraEnv": [
    {
        // "mask": null, // null mask means that this rule will be applied for all runnables
        "env": {
                "APP_ID": "1",
                "APP_DATA": "asdf"
        }
    },
    {
        "mask": "test_name",
        "env": {
                "APP_ID": "2", // overwrites only APP_ID
        }
    }
]
```

----------------------------------------

TITLE: Resolving Linker Errors with libgccijt in Rust
DESCRIPTION: When compiling an executable with libgccijt and setting *LIBRARY_PATH variables to the install directory, linker errors may occur. The solution is to set these variables to 'gcc-build/build/gcc'.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/errors.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
ld: cannot find crtbegin.o: No such file or directory
ld: cannot find -lgcc: No such file or directory
ld: cannot find -lgcc: No such file or directory
libgccjit.so: error: error invoking gcc driver
```

----------------------------------------

TITLE: Using Randomize Layout Flag in Rust Compiler
DESCRIPTION: The -Zrandomize-layout is a compiler flag that modifies how Rust lays out struct fields in memory. It can be combined with -Zlayout-seed=<u64> to provide additional entropy for the randomization process. This feature affects repr(Rust) types defined in the current crate and their downstream instantiations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/randomize-layout.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
-Zrandomize-layout
-Zlayout-seed=<u64>
```

----------------------------------------

TITLE: Converting an Implementation to a Trait Implementation in Rust
DESCRIPTION: Demonstrates transforming a regular struct implementation into a trait implementation with the same functionality. The example shows how to maintain constants, functions, and macro invocations while creating a new trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_64

LANGUAGE: rust
CODE:
```
struct Foo<const N: usize>([i32; N]);

macro_rules! const_maker {
    ($t:ty, $v:tt) => {
        const CONST: $t = $v;
    };
}

impl<const N: usize> Fo┃o<N> {
    // Used as an associated constant.
    const CONST_ASSOC: usize = N * 4;

    fn create() -> Option<()> {
        Some(())
    }

    const_maker! {i32, 7}
}
```

LANGUAGE: rust
CODE:
```
struct Foo<const N: usize>([i32; N]);

macro_rules! const_maker {
    ($t:ty, $v:tt) => {
        const CONST: $t = $v;
    };
}

trait ${0:NewTrait}<const N: usize> {
    // Used as an associated constant.
    const CONST_ASSOC: usize = N * 4;

    fn create() -> Option<()>;

    const_maker! {i32, 7}
}

impl<const N: usize> ${0:NewTrait}<N> for Foo<N> {
    // Used as an associated constant.
    const CONST_ASSOC: usize = N * 4;

    fn create() -> Option<()> {
        Some(())
    }

    const_maker! {i32, 7}
}
```

----------------------------------------

TITLE: Using unwrap for Error Handling in Rust
DESCRIPTION: Demonstrates using unwrap() to extract a value from a Result, which will panic if the Result is an Err. In this case, it's trying to read an environment variable and will panic if it's not set.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/core/src/error.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// Read environment variable, panic if it is not present
let path = std::env::var("IMPORTANT_PATH").unwrap();
```

----------------------------------------

TITLE: Adding a New Provider to the Providers Struct in Rust Compiler
DESCRIPTION: Demonstrates how to extend the provide() function to include a new query provider. This example adds a 'fubar' query provider to the existing providers.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/query.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
pub fn provide(providers: &mut Providers) {
    *providers = Providers {
        type_of,
        fubar,
        ..*providers
    };
}

fn fubar<'tcx>(tcx: TyCtxt<'tcx>, key: DefId) -> Fubar<'tcx> { ... }
```

----------------------------------------

TITLE: Using Iterator Combinators for Type Folding in Rust
DESCRIPTION: This snippet demonstrates the analogy between Rust's iterator combinators and the `TypeFolder` and `TypeFoldable` traits. `TypeFolder` acts like the `map` operation, while `TypeFoldable` is akin to the `iter` method. There are no dependencies, but it assumes familiarity with Rust iterators. No parameters are involved in this comparison, and it serves purely for illustrative purposes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty-fold.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
vec.iter().map(|e1| foo(e2)).collect()
```

----------------------------------------

TITLE: Calling fastcall_fn_8 - Rust
DESCRIPTION: This snippet calls the `fastcall_fn_8` function with two `S3` structs as arguments. Each `S3` contains an array of integers. It demonstrates passing structs with array members via the `fastcall` calling convention.  The definition of `fastcall_fn_8` determines the behavior.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_15

LANGUAGE: Rust
CODE:
```
fastcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] })
```

----------------------------------------

TITLE: Retrieving Expression Type in Rustc Lint Pass - Rust
DESCRIPTION: Demonstrates how to retrieve the type (`Ty`) of an expression (`Expr`) within a Rust lint pass by using the `expr_ty()` method from the `TypeckResults` struct accessed through the lint context (`LateContext`). It matches on the kind of the type to determine further properties like whether it corresponds to a struct. This snippet requires the Rustc compiler internals crates and focuses on compiling with type information available.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/common_tools_writing_lints.md#_snippet_0

LANGUAGE: rust
CODE:
```
impl LateLintPass<'_> for MyStructLint {
    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {
        // Get type of `expr`
        let ty = cx.typeck_results().expr_ty(expr);
        // Match its kind to enter its type
        match ty.kind() {
            ty::Adt(adt_def, _) if adt_def.is_struct() => println!("Our `expr` is a struct!"),
            _ => ()
        }
    }
}
```

----------------------------------------

TITLE: Using a Public Function in a Rust Example
DESCRIPTION: Example showing how to call a documented function from an example file. Rustdoc will scrape this usage and include it in the documentation for the called function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/librustdoc/html/static/scrape-examples-help.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// examples/ex.rs
fn main() {
  a_crate::a_func();
}
```

----------------------------------------

TITLE: Demonstrating Byte Constant Syntax Error in Rust
DESCRIPTION: This code snippet shows an incorrect way of declaring a byte constant in Rust, resulting in a compilation error (E0763). The byte constant is not properly terminated with a closing single quote.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0763.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let c = b'a; // error!
```

----------------------------------------

TITLE: Demonstrating Fn Trait Mismatch in Rust
DESCRIPTION: This code snippet demonstrates a type mismatch error where a closure with a String parameter is passed to a function expecting a closure with a usize parameter. This mismatch triggers the E0281 error, which is no longer emitted by the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0281.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<F: Fn(usize)>(x: F) { }

fn main() {
    // type mismatch: ... implements the trait `core::ops::Fn<(String,)>`,
    // but the trait `core::ops::Fn<(usize,)>` is required
    // [E0281]
    foo(|y: String| { });
}
```

----------------------------------------

TITLE: Correct Declaration of Atomic Operation Intrinsic in Rust
DESCRIPTION: Example of correctly declaring a valid atomic operation intrinsic function in Rust. This uses a recognized intrinsic name that exists in the Rust source code.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0092.md#_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(intrinsics)]
#![allow(internal_features)]

#[rustc_intrinsic]
unsafe fn atomic_fence_seqcst(); // ok!
```

----------------------------------------

TITLE: Configuring enforce-iter-loop-reborrow
DESCRIPTION: Configures whether to recommend using implicit `into_iter` for reborrowed values in loop. The example shows the change. The default is false.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_15



----------------------------------------

TITLE: Installing Flatpak SDK Extensions for Rust Development (Shell)
DESCRIPTION: Installs required Flatpak SDK extensions (LLVM and Rust stable for runtime version 23.08) needed for C compilation and Rust tooling within the Flatpak sandbox. This is a prerequisite for using rust-analyzer effectively in a Flatpak installation of VS Code or VSCodium.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/vs_code.md#_snippet_4

LANGUAGE: shell
CODE:
```
flatpak install org.freedesktop.Sdk.Extension.{llvm15,rust-stable}//23.08
```

----------------------------------------

TITLE: Demonstrating Incompatible Representation Hints in Rust
DESCRIPTION: This code snippet shows an erroneous use of multiple, incompatible representation hints. The `repr(transparent)` attribute cannot be combined with other representation hints like `repr(C)`.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0692.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(transparent, C)] // error: incompatible representation hints
struct Grams(f32);
```

----------------------------------------

TITLE: Run Filtered Tests with Cargo Miri (Shell)
DESCRIPTION: Executes only a subset of tests through the Miri interpreter. Similar to `cargo test filter`, this command runs tests whose names contain the specified `filter` string.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_5

LANGUAGE: Shell
CODE:
```
cargo miri test filter
```

----------------------------------------

TITLE: Configuring Space After Colon in Rust
DESCRIPTION: Shows the effect of the 'space_after_colon' option on formatting. When true (default), a space is added after colons. When false, no space is added.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_65

LANGUAGE: rust
CODE:
```
fn lorem<T: Eq>(t: T) {
    let lorem: Dolor = Lorem {
        ipsum: dolor,
        sit: amet,
    };
}
```

LANGUAGE: rust
CODE:
```
fn lorem<T:Eq>(t:T) {
    let lorem:Dolor = Lorem {
        ipsum:dolor,
        sit:amet,
    };
}
```

----------------------------------------

TITLE: Using Arbitrary Self Types Feature in Rust
DESCRIPTION: This example demonstrates the nightly feature 'arbitrary_self_types' which allows using any type that implements the Receiver trait as a method receiver. It shows how a type Bar that dereferences to Foo can be used as the receiver.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0307.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#![feature(arbitrary_self_types)]

struct Foo;
struct Bar;

// Because you can dereference `Bar` into `Foo`...
impl std::ops::Deref for Bar {
    type Target = Foo;

    fn deref(&self) -> &Foo {
        &Foo
    }
}

impl Foo {
    fn foo(self: Bar) {}
//         ^^^^^^^^^ ...it can be used as the receiver type
}
```

----------------------------------------

TITLE: Normalizing Doc Attributes in Rust
DESCRIPTION: Shows how the normalize_doc_attributes option converts #![doc] and #[doc] attributes to //! and /// doc comments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_57

LANGUAGE: rust
CODE:
```
#![doc = "Example documentation"]

#[doc = "Example item documentation"]
pub enum Bar {}

/// Example item documentation
pub enum Foo {}
```

LANGUAGE: rust
CODE:
```
//! Example documentation

/// Example item documentation
pub enum Foo {}
```

----------------------------------------

TITLE: Function with Lifetime References for Demangling
DESCRIPTION: Example Rust function showing how lifetimes are used in type parameters. This illustrates how lifetimes are encoded and later demangled in the symbol names.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_13

LANGUAGE: rust
CODE:
```
fn main() {
    example::<fn(&u8, &u16)>();
}

pub fn example<T>() {}
```

----------------------------------------

TITLE: Manual Default Implementation with Default Field Values
DESCRIPTION: Demonstrates the correct way to implement Default trait manually for a type with default field values using the functional update syntax to avoid the default_overrides_default_fields lint.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/default-field-values.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(default_field_values)]

struct Pet {
    name: String,
    age: i128 = 42, // impl Default for Pet will use the literal 42 for age
}

impl Default for Pet {
    fn default() -> Pet {
        Pet {
            name: "no-name".to_string(),
            ..
        }
    }
}
```

----------------------------------------

TITLE: Rust Raw String Literal Syntax Error
DESCRIPTION: Error occurs when attempting to create a raw string literal without proper quotation syntax. Raw string literals in Rust require matching `r` prefix and `#` symbols around the quotes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unstarted_raw_string_at_eof.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
r##"
```

----------------------------------------

TITLE: Configuring Build Targets for UWP in Rust (TOML)
DESCRIPTION: This snippet shows how to configure a Rust project to build for specific UWP targets using the build configuration file (`Cargo.toml`). It specifies the build stage and the desired targets for a `rustc` build.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/uwp-windows-msvc.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
target = ["x86_64-uwp-windows-msvc", "aarch64-uwp-windows-msvc"]
```

----------------------------------------

TITLE: Incorrect Naked Function Definition in Rust (E0787 Example)
DESCRIPTION: This Rust code snippet demonstrates an incorrect usage of the `#[unsafe(naked)]` attribute, leading to compile error E0787. Naked functions must contain exactly one `naked_asm!` block as their body and cannot contain standard Rust code like the `42` return value shown here. The execution must explicitly return or diverge within the assembly block.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0787.md#_snippet_0

LANGUAGE: Rust
CODE:
```
#[unsafe(naked)]
pub extern "C" fn f() -> u32 {
    42
}
```

----------------------------------------

TITLE: Ignoring Re-export Attributes in Rust
DESCRIPTION: This code shows that when re-exporting an item explicitly without `#[doc(inline)]` or glob re-exports, the attributes on the re-export itself are ignored. `InPrivate` will only display its own attributes, and not the attributes of its re-export. The result is that `cfg(c)` from the re-export will not be displayed in the documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/re-exports.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
```rust
mod private_mod {
    /// First
    #[cfg(a)]
    pub struct InPrivate;
}

#[cfg(c)]
pub use self::private_mod::InPrivate;
```
```

----------------------------------------

TITLE: Demonstrating Unsized Locals and Arguments in Rust
DESCRIPTION: This snippet shows how to use unsized local variables and function arguments with the unsized_locals and unsized_fn_params features. It demonstrates creating and using unsized Box<dyn Any> types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/unsized-locals.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![allow(incomplete_features)]
#![feature(unsized_locals, unsized_fn_params)]

use std::any::Any;

fn main() {
    let x: Box<dyn Any> = Box::new(42);
    let x: dyn Any = *x;
    //  ^ unsized local variable
    //               ^^ unsized temporary
    foo(x);
}

fn foo(_: dyn Any) {}
//     ^^^^^^ unsized argument
```

----------------------------------------

TITLE: Enum Definition Formatting in Rust
DESCRIPTION: Illustrates the preferred formatting for enum definitions in Rust, including placing each variant on its own line with block indentation. It also covers different enum variant types such as struct variants, tuple struct variants, and identifiers.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
enum FooBar {
    First(u32),
    Second,
    Error {
        err: Box<Error>,
        line: u32,
    },
}
```

----------------------------------------

TITLE: VSCode Keybinding for On Enter Feature
DESCRIPTION: Configure keyboard shortcut for rust-analyzer's enhanced Enter key behavior in VSCode, supporting both standard and Vim plugin modes
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/features_generated.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "key": "Enter",
  "command": "rust-analyzer.onEnter",
  "when": "editorTextFocus && !suggestWidgetVisible && editorLangId == rust"
}
```

LANGUAGE: json
CODE:
```
{
  "key": "Enter",
  "command": "rust-analyzer.onEnter",
  "when": "editorTextFocus && !suggestWidgetVisible && editorLangId == rust && vim.mode == 'Insert'"
}
```

----------------------------------------

TITLE: Example of Panic Output with Only Line Information in Rust
DESCRIPTION: This example demonstrates how panic output appears when using the `-Z location-detail=line` option, which only includes the line number but redacts the file path information. This helps reduce binary size while still providing some location context.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/location-detail.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
panicked at 'Process blink had a fault', <redacted>:323:0
```

----------------------------------------

TITLE: Correct Label Declaration in Rust Loop
DESCRIPTION: Example showing the correct way to declare and use a label in a Rust loop. The label 'a is properly declared before the loop statement.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0426.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
'a: loop {
    break 'a; // ok!
}
```

----------------------------------------

TITLE: Demonstrating Unsupported Inline Assembly on SPARC64
DESCRIPTION: Example showing how inline assembly fails on unsupported targets like SPARC64. The code demonstrates the use of the asm! macro which generates an error on unsupported platforms.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0472.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// compile-flags: --target sparc64-unknown-linux-gnu
#![no_std]

use core::arch::asm;

fn main() {
    unsafe {
        asm!(""); // error: inline assembly is not supported on this target
    }
}
```

----------------------------------------

TITLE: Calling stdcall_fn_8 - Rust
DESCRIPTION: This snippet calls the `stdcall_fn_8` function in Rust, passing two instances of the struct `S3`. Each struct `S3` contains an array of integers. This example shows how structs containing arrays can be passed. `stdcall` convention is used, and the expected output will depend on the definition of `stdcall_fn_8`.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_7

LANGUAGE: Rust
CODE:
```
stdcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] })
```

----------------------------------------

TITLE: Generic Struct with Placeholder Example
DESCRIPTION: Example Rust code showing a generic struct with type and const parameters, and a static variable that uses placeholder values for the generic parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_17

LANGUAGE: rust
CODE:
```
pub struct Example<T, const N: usize>([T; N]);

impl<T, const N: usize> Example<T, N> {
    pub fn foo() -> &'static () {
        static EXAMPLE_STATIC: () = ();
        &EXAMPLE_STATIC
    }
}
```

----------------------------------------

TITLE: Installing Mac Catalyst Targets via Rustup
DESCRIPTION: Commands to install Mac Catalyst target support through rustup package manager for both ARM64 and x86_64 architectures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-ios-macabi.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ rustup target add aarch64-apple-ios-macabi
$ rustup target add x86_64-apple-ios-macabi
```

----------------------------------------

TITLE: Redirecting control flow to a function with incorrect parameter count in Rust
DESCRIPTION: This example shows how CFI prevents calling a function that has a different number of parameters than expected at the call site. The code attempts to call a two-parameter function through a function pointer type that expects one parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_8

LANGUAGE: rust
CODE:
```
use std::mem;

fn add_one(x: i32) -> i32 {
    x + 1
}

fn add_two(x: i32, _y: i32) -> i32 {
    x + 2
}

fn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {
    f(arg) + f(arg)
}

fn main() {
    let answer = do_twice(add_one, 5);

    println!("The answer is: {}", answer);

    println!("With CFI enabled, you should not see the next answer");
    let f: fn(i32) -> i32 =
        unsafe { mem::transmute::<*const u8, fn(i32) -> i32>(add_two as *const u8) };
    let next_answer = do_twice(f, 5);

    println!("The next answer is: {}", next_answer);
}
```

----------------------------------------

TITLE: Detecting Missing Quote in Raw Byte String Literal in Rust
DESCRIPTION: This snippet identifies a syntax error in a Rust program.  The error occurs when a raw byte string literal, which is defined using `br##"..."`, is missing the closing double quote. The compiler will report this as an issue because the string is not properly terminated. The example provided, `BYTE_STRING "br##` represents the issue.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unstarted_raw_byte_string_at_eof.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
BYTE_STRING "br##" error: Missing `"` symbol after `#` symbols to begin the raw byte string literal
```

----------------------------------------

TITLE: Cargo Build Output for Macro Tracing
DESCRIPTION: This snippet shows the output of `cargo build` when using the `trace_macros` feature. It displays the expansion of the `println!` macro, including intermediate steps and the final expanded form.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/trace-macros.md#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
note: trace_macro
 --> src/main.rs:5:5
  |
5 |     println!("Hello, Rust!");
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expanding `println! { "Hello, Rust!" }`
  = note: to `print ! ( concat ! ( "Hello, Rust!" , "\n" ) )`
  = note: expanding `print! { concat ! ( "Hello, Rust!" , "\n" ) }`
  = note: to `$crate :: io :: _print ( format_args ! ( concat ! ( "Hello, Rust!" , "\n" ) )
          )`

    Finished dev [unoptimized + debuginfo] target(s) in 0.60 secs
```

----------------------------------------

TITLE: Identifying Missing Trailing Quote in Rust String Literal
DESCRIPTION: This code snippet implicitly demonstrates a Rust compiler error caused by a missing trailing double quote character ("). This error occurs when the string literal is not properly closed. The output indicates the error message, identifying the location in the source code where the error occurs. To resolve this, ensure the string literal is properly terminated with a closing double quote. There are no specific dependencies for this particular error as it's a syntax issue within the string definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_string_with_space.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
STRING \" \" error: Missing trailing `"` symbol to terminate the string literal
```

----------------------------------------

TITLE: Binding Unused Function Parameters in Rust
DESCRIPTION: This assist binds unused function parameters to an underscore. It adds a statement to explicitly ignore the unused parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_14

LANGUAGE: rust
CODE:
```
fn some_function(x: i32) {}
```

LANGUAGE: rust
CODE:
```
fn some_function(x: i32) {
    let _ = x;
}
```

----------------------------------------

TITLE: Inlining a Function into All Callers in Rust
DESCRIPTION: Demonstrates inlining a function's body into all places where it's called, preserving the function's logic. This example shows how a conditional print function gets inlined into its calling function, allowing the original function to be removed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_68

LANGUAGE: rust
CODE:
```
fn print(_: &str) {}
fn foo┃(word: &str) {
    if !word.is_empty() {
        print(word);
    }
}
fn bar() {
    foo("안녕하세요");
    foo("여러분");
}
```

LANGUAGE: rust
CODE:
```
fn print(_: &str) {}

fn bar() {
    {
        let word: &str = "안녕하세요";
        if !word.is_empty() {
            print(word);
        }
    };
    {
        let word: &str = "여러분";
        if !word.is_empty() {
            print(word);
        }
    };
}
```

----------------------------------------

TITLE: Invalid Usage of rustc_on_unimplemented Attribute in Rust
DESCRIPTION: Demonstrates incorrect usage of the rustc_on_unimplemented attribute with an empty message parameter. This example shows what not to do, as empty attributes will not provide helpful error messages.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0232.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(rustc_attrs)]
#![allow(internal_features)]

#[rustc_on_unimplemented(lorem="")] // error!
trait BadAnnotation {}
```

----------------------------------------

TITLE: Generating Target Specification JSON for Host Platform in Rust
DESCRIPTION: This command shows how to generate the JSON target specification for the host platform using rustc. It requires the nightly toolchain and uses the unstable-options flag to access the target-spec-json printing feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/targets/custom.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
rustc +nightly -Z unstable-options --print target-spec-json
```

----------------------------------------

TITLE: Excluding Source Code from Rust Documentation
DESCRIPTION: This example uses the #[doc(html_no_source)] attribute to prevent the source code from appearing in the generated documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
"""rust,no_run\n#![doc(html_no_source)]\n"
```

----------------------------------------

TITLE: DiscoverArgument Enum for Passing Arguments to Workspace Discovery Command in Rust
DESCRIPTION: Rust enum representing the argument types that can be passed to the rust-analyzer workspace discovery command. It supports specifying a Path to generate rust-project.json or a Buildfile to update an existing workspace. Serialization uses camelCase for variant names, facilitating JSON communication with the discovery process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_10

LANGUAGE: rust
CODE:
```
#[derive(PartialEq, Clone, Debug, Serialize)]
#[serde(rename_all = "camelCase")]
pub enum DiscoverArgument {
   Path(AbsPathBuf),
   Buildfile(AbsPathBuf),
}
```

----------------------------------------

TITLE: Implementing CoerceUnsized on Struct Without Unsized Fields
DESCRIPTION: Example showing incorrect implementation of CoerceUnsized trait on a struct that doesn't contain any unsized fields. This code fails to compile with error E0374 because the Foo struct has no fields that can be coerced to an unsized type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0374.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(coerce_unsized)]
use std::ops::CoerceUnsized;

struct Foo<T: ?Sized> {
    a: i32,
}

// error: Struct `Foo` has no unsized fields that need to be coerced.
impl<T, U> CoerceUnsized<Foo<U>> for Foo<T>
    where T: CoerceUnsized<U> {}
```

----------------------------------------

TITLE: Demonstrating Redundant Explicit Links in Rust Documentation
DESCRIPTION: This code snippet shows an example of redundant explicit links in Rust documentation. The `add` function is documented with an unnecessary explicit link to `usize`, which triggers the `redundant_explicit_links` lint.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/lints.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
#![warn(rustdoc::redundant_explicit_links)] // note: unnecessary - warns by default.

/// add takes 2 [`usize`](usize) and performs addition
/// on them, then returns result.
pub fn add(left: usize, right: usize) -> usize {
    left + right
}
```

----------------------------------------

TITLE: Example Linker Error for Missing LLVM Libraries
DESCRIPTION: An example of the linking error that may occur when the llvm-tools component is not installed or LLVM libraries are not properly configured in the library search paths.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/rustc-private.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
error: linking with `cc` failed: exit status: 1
  |
  = note: rust-lld: error: unable to find library -lLLVM-{version}
```

----------------------------------------

TITLE: Invalid Boolean Casting Example in Rust
DESCRIPTION: Demonstrates incorrect attempt to cast a numeric value directly to a boolean type, which will fail with error E0054.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0054.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let x = 5;

// Not allowed, won't compile
let x_is_nonzero = x as bool;
```

----------------------------------------

TITLE: Invalid Empty Struct with SIMD Attribute
DESCRIPTION: Example showing incorrect usage of #[repr(simd)] on an empty struct, which will result in compilation error E0075.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0075.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(repr_simd)]

#[repr(simd)]
struct Bad; // error!
```

----------------------------------------

TITLE: Match Pattern Breaking with If Clause - Rust
DESCRIPTION: Shows the proper formatting when breaking a match pattern with an if clause, using block indentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_22

LANGUAGE: rust
CODE:
```
    a_very_long_pattern | another_pattern
        if expr =>
    {
        ...
    }
```

----------------------------------------

TITLE: Setting the WASI SDK Path in Shell
DESCRIPTION: This snippet demonstrates how to set the `WASI_SDK_PATH` environment variable to a specific installation path of `wasi-sdk`. It is a prerequisite step for building the wasm32-wasip1 target as it allows Rust's build system to locate necessary binaries and programs. The example uses a shell command to configure the path to the SDK.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wasip1.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
export WASI_SDK_PATH=/path/to/wasi-sdk-22.0
```

----------------------------------------

TITLE: Invalid Type Usage Examples in Rust
DESCRIPTION: Examples of incorrect type usage showing common mistakes with intrinsics, main function, pattern matching, and self parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0211.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(intrinsics)]
#![allow(internal_features)]

#[rustc_intrinsic]
unsafe fn unreachable(); // error: intrinsic has wrong type

// or:

fn main() -> i32 { 0 }
// error: main function expects type: `fn() {main}`: expected (), found i32

// or:

let x = 1u8;
match x {
    0u8..=3i8 => (),
    // error: mismatched types in range: expected u8, found i8
    _ => ()
}

// or:

use std::rc::Rc;
struct Foo;

impl Foo {
    fn x(self: Rc<Foo>) {}
    // error: mismatched self type: expected `Foo`: expected struct
    //        `Foo`, found struct `alloc::rc::Rc`
}
```

----------------------------------------

TITLE: Removing Hash from Raw String Literals in Rust
DESCRIPTION: Removes a hash symbol from a raw string literal, simplifying its notation when the extra escaping is not needed. This refactoring converts an r#"..."# raw string to a simpler r"..." form when possible.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_98

LANGUAGE: rust
CODE:
```
fn main() {
    r#"Hello, World!"#;
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    r"Hello, World!";
}
```

----------------------------------------

TITLE: Encoding Function Example in Crate Root as Rust Symbol
DESCRIPTION: This snippet showcases the mangled symbol for the function `example` within a Rust crate named `mycrate`, detailing the crate-root and path encoding. It provides an example of how to produce a human-readable form of Rust symbols for functions declared at the crate level.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn example() {}
```

----------------------------------------

TITLE: Erroneous Rust Module Visibility Macro Call
DESCRIPTION: Demonstrates a compilation failure when a macro call prevents proper module resolution and struct visibility definition
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0578.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
foo!();

pub (in ::Sea) struct Shark; // error!

fn main() {}
```

----------------------------------------

TITLE: Demonstrating Unterminated Multi-line Comment in Rust
DESCRIPTION: This snippet shows an example of an unterminated multi-line comment in Rust, which results in a compilation error (E0758).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0758.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
/* I am not terminated!
```

----------------------------------------

TITLE: CoroutineState Enum Definition in Rust
DESCRIPTION: Defines the CoroutineState enum used to represent the yielded or completed state of a coroutine execution.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/coroutines.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
pub enum CoroutineState<Y, R> {
    Yielded(Y),
    Complete(R),
}
```

----------------------------------------

TITLE: Generating Named Function Type Alias in Rust
DESCRIPTION: This snippet demonstrates how to generate a type alias for a function with named parameters. It creates a new type alias that matches the function's signature, including safety qualifiers and return type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_52

LANGUAGE: rust
CODE:
```
unsafe fn foo(n: i32) -> i32 { 42i32 }
```

LANGUAGE: rust
CODE:
```
type ${0:FooFn} = unsafe fn(n: i32) -> i32;

unsafe fn foo(n: i32) -> i32 { 42i32 }
```

----------------------------------------

TITLE: Rust Invalid Hexadecimal Underscore and Character Error (uppercase)
DESCRIPTION: This snippet demonstrates an error where a hexadecimal integer literal (0x_) contains an underscore followed by invalid character 'G'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_12

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0x_G\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Linking Dead Code in Rust
DESCRIPTION: Tries to generate and link dead code that would otherwise not be generated or linked. Takes `y`, `yes`, `on`, `true` (try to keep) or `n`, `no`, `off`, `false` (remove, default). Its use is not recommended.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_17



----------------------------------------

TITLE: Demonstrating Yeet Expressions in Rust Functions
DESCRIPTION: This code snippet demonstrates the usage of 'do yeet' expressions in Rust functions. It shows how to use 'do yeet' to return early from functions with Result and Option return types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/yeet-expr.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(yeet_expr)]

fn foo() -> Result<String, i32> {
    do yeet 4;
}
assert_eq!(foo(), Err(4));

fn bar() -> Option<String> {
    do yeet;
}
assert_eq!(bar(), None);
```

----------------------------------------

TITLE: Invalid Marker Trait with Associated Constant in Rust
DESCRIPTION: Example showing incorrect usage of a marker trait containing an associated constant, which triggers error E0714. Marker traits cannot contain associated items since they cannot be overridden per-type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0714.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(marker_trait_attr)]
#![feature(associated_type_defaults)]

#[marker]
trait MarkerConst {
    const N: usize; // error!
}

fn main() {}
```

----------------------------------------

TITLE: Defining a Simple Function in Rust
DESCRIPTION: This snippet shows how to define a simple private function in Rust to be documented.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
/// foo is a function
fn foo() {}
```

----------------------------------------

TITLE: Converting Match to let-else in Rust
DESCRIPTION: Transforms a match statement into a let-else statement, simplifying conditional assignments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_28

LANGUAGE: rust
CODE:
```
fn foo(opt: Option<()>) {
    let Some(val) = opt else { return };
}
```

----------------------------------------

TITLE: Configuring QEMU Runner for RISC-V Testing
DESCRIPTION: Cargo configuration to use QEMU for running and testing cross-compiled RISC-V binaries
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv64gc-unknown-linux-gnu.md#2025-04-21_snippet_5

LANGUAGE: toml
CODE:
```
[target.riscv64gc-unknown-linux-gnu]
runner = "qemu-riscv64-static -L /usr/riscv64-linux-gnu -cpu rv64"
```

----------------------------------------

TITLE: Specifying Package Dependencies with Hashes - Python
DESCRIPTION: This snippet includes package declarations with specific versions and their respective SHA256 hashes, ensuring secured installations via pip. Dependencies include attrs, binaryornot, boolean-py, and others. Each package entry consists of version information and corresponding hashes for integrity verification.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/ci/docker/host-x86_64/mingw-check/reuse-requirements.txt#2025-04-21_snippet_0

LANGUAGE: Python
CODE:
```
# This file is autogenerated by pip-compile with Python 3.10
# by the following command:
# pip-compile --allow-unsafe --generate-hashes reuse-requirements.in
attrs==23.2.0 \
    --hash=sha256:935dc3b529c262f6cf76e50877d35a4bd3c1de194fd41f47a2b7ae8f19971f30 \
    --hash=sha256:99b87a485a5820b23b879f04c2305b44b951b502fd64be915879d77a7e8fc6f1
    # via reuse
binaryornot==0.4.4 \
    --hash=sha256:359501dfc9d40632edc9fac890e19542db1a287bbcfa58175b66658392018061 \
    --hash=sha256:b8b71173c917bddcd2c16070412e369c3ed7f0528926f70cac18a6c97fd563e4
    # via reuse
boolean-py==4.0 \
    --hash=sha256:17b9a181630e43dde1851d42bef546d616d5d9b4480357514597e78b203d06e4 \
    --hash=sha256:2876f2051d7d6394a531d82dc6eb407faa0b01a0a0b3083817ccd7323b8d96bd
    # via
    #   license-expression
    #   reuse
chardet==5.2.0 \
    --hash=sha256:1b3b6ff479a8c414bc3fa2c0852995695c4a026dcd6d0633b2dd092ca39c1cf7 \
    --hash=sha256:e1cf59446890a00105fe7b7912492ea04b6e6f06d4b742b2c788469e34c82970
    # via
    #   binaryornot
    #   python-debian
jinja2==3.1.4 \
    --hash=sha256:4a3aee7acbbe7303aede8e9648d13b8bf88a429282aa6122a993f0ac800cb369 \
    --hash=sha256:bc5dd2abb727a5319567b7a813e6a2e7318c39f4f487cfe6c89c6f9c7d25197d
    # via reuse
license-expression==30.3.0 \
    --hash=sha256:1295406f736b4f395ff069aec1cebfad53c0fcb3cf57df0f5ec58fc7b905aea5 \
    --hash=sha256:ae0ba9a829d6909c785dc2f0131f13d10d68318e4a5f28af5ef152d6b52f9b41
    # via reuse
markupsafe==2.1.5 \
    --hash=sha256:00e046b6dd71aa03a41079792f8473dc494d564611a8f89bbbd7cb93295ebdcf \
    --hash=sha256:075202fa5b72c86ad32dc7d0b56024ebdbcf2048c0ba09f1cde31bfdd57bcfff \
    --hash=sha256:0e397ac966fdf721b2c528cf028494e86172b4feba51d65f81ffd65c63798f3f \
    --hash=sha256:17b950fccb810b3293638215058e432159d2b71005c74371d784862b7e4683f \
    --hash=sha256:1f3fbcb7ef1f16e48246f704ab79d79da8a46891e2da03f8783a5b6fa41a9532 \
    --hash=sha256:2174c595a0d73a3080ca3257b40096db99799265e1c27cc5a610743acd86d62f \
    --hash=sha256:2b7c57a4dfc4f16f7142221afe5ba4e093e09e728ca65c51f5620c9aaeb9a617 \
    --hash=sha256:2d2d793e36e230fd32babe143b04cec8a8b3eb8a3122d2aceb4a371e6b09b8df \
    --hash=sha256:30b600cf0a7ac9234b2638fbc0fb6158ba5bdcdf46aeb631ead21248b9affbc4 \
    --hash=sha256:397081c1a0bfb5124355710fe79478cdbeb39626492b15d399526ae53422b906 \
    --hash=sha256:3a57fdd7ce31c7ff06cdfbf31dafa96cc533c21e443d57f5b1ecc6cdc668ec7f \
    --hash=sha256:3c6b973f22eb18a789b1460b4b91bf04ae3f0c4234a0a6aa6b0a92f6f7b951d4 \
    --hash=sha256:3e53af139f8579a6d5f7b76549125f0d94d7e630761a2111bc431fd820e163b8 \
    --hash=sha256:4096e9de5c6fdf43fb4f04c26fb114f61ef0bf2e5604b6ee3019d51b69e8c371 \
    --hash=sha256:4275d846e41ecefa46e2015117a9f491e57a71ddd59bbead77e904dc02b1bed2 \
    --hash=sha256:4c31f53cdae6ecfa91a77820e8b151dba54ab528ba65dfd235c80b086d68a465 \
    --hash=sha256:4f11aa001c540f62c6166c7726f71f7573b52c68c31f014c25cc7901deea0b52 \
    --hash=sha256:5049256f536511ee3f7e1b3f87d1d1209d327e818e6ae1365e8653d7e3abb6a6 \
    --hash=sha256:58c98fee265677f63a4385256a6d7683ab1832f3ddd1e66fe948d5880c21a169 \
    --hash=sha256:598e3276b64aff0e7b3451b72e94fa3c238d452e7ddcd893c3ab324717456bad \
    --hash=sha256:5b7b716f97b52c5a14bffdf688f971b2d5ef4029127f1ad7a513973cfd818df2 \
    --hash=sha256:5dedb4db619ba5a2787a94d877bc8ffc0566f92a01c0ef214865e54ecc9ee5e0 \
    --hash=sha256:619bc166c4f2de5caa5a633b8b7326fbe98e0ccbfacabd87268a2b15ff73a029 \
    --hash=sha256:629ddd2ca402ae6dbedfceeba9c46d5f7b2a61d9749597d4307f943ef198fc1f \
    --hash=sha256:656f7526c69fac7f600bd1f400991cc282b417d17539a1b228617081106feb4a \
    --hash=sha256:6ec585f69cec0aa07d945b20805be741395e28ac1627333b1c5b0105962ffced \
    --hash=sha256:72b6be590cc35924b02c78ef34b467da4ba07e4e0f0454a2c5907f473fc50ce5 \
    --hash=sha256:7502934a33b54030eaf1194c21c692a534196063db72176b0c4028e140f8f32c \
    --hash=sha256:7a68b554d356a91cce1236aa7682dc01df0edba8d043fd1ce607c49dd3c1edcf \
    --hash=sha256:7b2e5a267c855eea6b4283940daa6e88a285f5f2a67f2220203786dfa59b37e9 \
    --hash=sha256:823b65d8706e32ad2df51ed89496147a42a2a6e01c13cfb6ffb8b1e92bc910bb \
    --hash=sha256:8590b4ae07a35970728874632fed7bd57b26b0102df2d2b233b6d9d82f6c62ad \
    --hash=sha256:8dd717634f5a044f860435c1d8c16a270ddf0ef8588d4887037c5028b859b0c3 \
    --hash=sha256:8dec4936e9c3100156f8a2dc89c4b88d5c435175ff03413b443469c7c8c5f4d1 \
    --hash=sha256:97cafb1f3cbcd3fd2b6fbfb99ae11cdb14deea0736fc2b0952ee177f2b813a46 \
    --hash=sha256:a17a92de5231666cfbe003f0e4b9b3a7ae3afb1ec2845aadc2bacc93ff85febc \
    --hash=sha256:a549b9c31bec33820e885335b451286e2969a2d9e24879f83fe904a5ce59d70a \
    --hash=sha256:ac07bad82163452a6884fe8fa0963fb98c2346ba78d779ec06bd7a6262132aee \
    --hash=sha256:ae2ad8ae6ebee9d2d94b17fb62763125f3f374c25618198f40cbb8b525411900 \
    --hash=sha256:b91c037585eba9095565a3556f611e3cbfaa42ca1e865f7b8015fe5c7336d5a5 \
    --hash=sha256:bc1667f8b83f48511b94671e0e441401371dfd0f0a795c7daa4a3cd1dde55bea \
    --hash=sha256:bec0a414d016ac1a18862a519e54b2fd0fc8bbfd6890376898a6c0891dd82e9f \
    --hash=sha256:bf50cd79a75d181c9181df03572cdce0fbb75cc353bc350712073108cba98de5 \
    --hash=sha256:bff1b4290a66b490a2f4719358c0cdcd9bafb6b8f061e45c7a2460866bf50c2e \
    --hash=sha256:c061bb86a71b42465156a3ee7bd58c8c2ceacdbeb95d05a99893e08b8467359a \
    --hash=sha256:c8b29db45f8fe46ad280a7294f5c3ec36dbac9491f2d1c17345be8e69cc5928f \
    --hash=sha256:ce409136744f6521e39fd8e2a24c53fa18ad67aa5bc7c2cf83645cce5b5c4e50 \
    --hash=sha256:d050b3361367a06d752db6ead6e7edeb0009be66bc3bae0ee9d97fb326badc2a \
    --hash=sha256:d283d37a890ba4c1ae73ffadf8046435c76e7bc2247bbb63c00bd1a709c6544b \
    --hash=sha256:d9fad5155d72433c921b782e58892377c44bd6252b5af2f67f16b194987338a4 \
    --hash=sha256:daa4ee5a243f0f20d528d939d06670a298dd39b1ad5f8a72a4275124a7819eff \
    --hash=sha256:db0b55e0f3cc0be60c1f19efdde9a637c32740486004f20d1cff53c3c0ece4d2 \
    --hash=sha256:e61659ba32cf2cf1481e575d0462554625196a1f2fc06a1c777d3f48e8865d46 \
    --hash=sha256:ea3d8a3d18833cf4304cd2fc9cbb1efe188ca9b5efef2bdac7adc20594a0e46b \
    --hash=sha256:ec6a563cff360b50eed26f13adc43e61bc0c04d94b8be985e6fb24b81f6dcfdf \
    --hash=sha256:f5dfb42c4604dddc8e4305050aa6deb084540643ed5804d7455b5df8fe16f5e5 \
    --hash=sha256:fa173ec60341d6bb97a89f5ea19c85c5643c1e7dedebc22f5181eb73573142c5 \
    --hash=sha256:fa9db3f79de01457b03d4f01b34cf91bc0048eb2c3846ff26f66687c2f6d16ab \
    --hash=sha256:fce659a462a1be54d2ffcacea5e3ba2d74daa74f30f5f143fe0c58636e355fdd \
    --hash=sha256:ffee1f21e5ef0d712f9033568f8344d5da8cc2869dbd08d87c84656e6a2d2f68
    # via jinja2
python-debian==0.1.49 \
    --hash=sha256:880f3bc52e31599f2a9b432bd7691844286825087fccdcf2f6ffd5cd79a26f9f \
    --hash=sha256:8cf677a30dbcb4be7a99536c17e11308a827a4d22028dc59a67f6c6dd3f0f58c
    # via reuse
reuse==4.0.3 \
    --hash=sha256:4f2c3e1213ec644e5febc50d8322d18982e4e1102af8a51d9493bfc2164a0eac \
    --hash=sha256:b33e26ec1d105cfcfc2e904d103faec0d758994278feb95a4f4290a864562243
    # via -r reuse-requirements.in
tomlkit==0.13.0 \
    --hash=sha256:08ad192699734149f5b97b45f1f18dad7eb1b6d16bc72ad0c2335772650d7b72 \
    --hash=sha256:7075d3042d03b80f603482d69bf0c8f345c2b30e41699fd8883227f89972b264
    # via reuse
```

----------------------------------------

TITLE: Handling Compile Failures with repr Attribute in Rust
DESCRIPTION: This snippet demonstrates an incorrect use of a literal in a built-in attribute in Rust, resulting in a compilation error. It highlights the need to use identifiers instead of literals in certain attributes. The erroneous use of a quoted string in a repr attribute is specifically showcased, expecting to cause an error message. The main function acts as a simple entry point for the compilation process.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0565.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr("C")] // error: meta item in `repr` must be an identifier
struct Repr {}

fn main() {}
```

----------------------------------------

TITLE: Setting DWARF Version in Rust
DESCRIPTION: Controls the DWARF version emitted for debug information. Values include `2`, `3`, `4`, and `5`. DWARF version 1 is not supported.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_8



----------------------------------------

TITLE: Implementing FnOnce for Custom Struct in Rust
DESCRIPTION: This snippet demonstrates how to use the fn_traits and unboxed_closures features to implement the FnOnce trait for a custom Adder struct. It allows the struct to be called like a function, adding its internal value to the provided argument.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/fn-traits.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(unboxed_closures)]
#![feature(fn_traits)]

struct Adder {
    a: u32
}

impl FnOnce<(u32, )> for Adder {
    type Output = u32;
    extern "rust-call" fn call_once(self, b: (u32, )) -> Self::Output {
        self.a + b.0
    }
}

fn main() {
    let adder = Adder { a: 3 };
    assert_eq!(adder(2), 5);
}
```

----------------------------------------

TITLE: Passing Arguments to GCC Linker in Rust Build Process
DESCRIPTION: Shows how to pass specific arguments (-save-temps -v) to the GCC linker during the Rust compilation process using the CG_RUSTFLAGS environment variable.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/tips.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
CG_RUSTFLAGS="-Clink-args=-save-temps -v" ../y.sh cargo build
```

----------------------------------------

TITLE: Declaring Traits and Implementations - Rust
DESCRIPTION: This snippet demonstrates how to declare a trait and implementations for it in Rust, illustrating the mapping to logical inference rules. The `Clone` trait is declared for types `usize` and `Vec<T>`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/lowering-to-logic.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Clone { }
impl Clone for usize { }
impl<T> Clone for Vec<T> where T: Clone { }
```

----------------------------------------

TITLE: Instantiating Crate Example in Rust
DESCRIPTION: Demonstrates symbol name creation for a method with an instantiating crate identifier, showing how Rust encodes symbol names with crate context
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_21

LANGUAGE: rust
CODE:
```
std::path::Path::new("example");
```

----------------------------------------

TITLE: Correct usage of instruction_set with arm::a32 in Rust
DESCRIPTION: This example shows the proper way to apply the instruction_set attribute with arm::a32 parameter for ARM architecture. It uses cfg_attr to conditionally apply the attribute only on ARM targets.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0778.md#_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(isa_attribute)]

#[cfg_attr(target_arch="arm", instruction_set(arm::a32))]
fn something() {}
```

----------------------------------------

TITLE: Resolving Method Call Ambiguity by Removing Duplicate Methods
DESCRIPTION: This code snippet demonstrates how to resolve the method call ambiguity by keeping only one implementation of the method.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0034.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct Test;

trait Trait1 {
    fn foo();
}

impl Trait1 for Test { fn foo() {} }

fn main() {
    Test::foo() // and now that's good!
}
```

----------------------------------------

TITLE: Configuring disallowed-names
DESCRIPTION: Specifies a list of names (variables, functions, etc.) that are disallowed. Defaults to `["foo", "baz", "quux"]`. The special value ".." allows appending to the default list.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_11



----------------------------------------

TITLE: Incorrect Alignment Syntax Examples in Rust
DESCRIPTION: Examples of incorrect syntax for the align representation hint that will result in compilation error E0693. Shows two invalid ways of specifying alignment: using equals sign and using string literals.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0693.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(align=8)] // error!
struct Align8(i8);

#[repr(align="8")] // error!
struct Align8(i8);
```

----------------------------------------

TITLE: Demonstrating Malformed Not cfg-Predicate in Rust
DESCRIPTION: This code snippet demonstrates a malformed 'not' cfg-predicate. The predicate is incorrect as it doesn't specify a cfg-pattern, which leads to a compilation error. It indicates the expected format for using 'not' in Rust conditional compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0536.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#[cfg(not())] // error: expected 1 cfg-pattern
pub fn something() {}

pub fn main() {}
```

----------------------------------------

TITLE: Setting Environment Variable for wasi-sdk
DESCRIPTION: This snippet demonstrates how to set the WASI_SDK_PATH environment variable to point to the installed wasi-sdk. This is necessary for building the wasm32-wasip2 target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wasip2.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
export WASI_SDK_PATH=/path/to/wasi-sdk-22.0
```

----------------------------------------

TITLE: Rust Compiler Error: Missing Trailing Quote in Raw Byte String
DESCRIPTION: This error message indicates that a raw byte string literal is missing its closing delimiter. The literal begins with `br##"` but lacks a corresponding `"##` to terminate the string. The number of `#` symbols must match between the opening and closing delimiters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_raw_byte_string_at_eof.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"BYTE_STRING \"br##\\\"\" error: Missing trailing `\"` with `#` symbols to terminate the raw byte string literal"
```

----------------------------------------

TITLE: Using Guarded Return in Rust
DESCRIPTION: Refactors a complex if condition into a simple guard clause, improving readability and maintaining functionality.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_31

LANGUAGE: rust
CODE:
```
fn main() {
    if !cond {
        return;
    }
    foo();
    bar();
}
```

----------------------------------------

TITLE: Incorrect Usage of Unsafe with Inherent Implementation in Rust
DESCRIPTION: This code snippet demonstrates an error (E0197) where an inherent implementation is incorrectly marked as unsafe. Inherent implementations cannot be unsafe because they don't implement unsafe traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0197.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Foo;

unsafe impl Foo { } // error!
```

----------------------------------------

TITLE: Macro By Example Usage (Rust)
DESCRIPTION: This example demonstrates how to invoke the `printer` macro defined previously. It illustrates how the metavariable `$mvar` is replaced with the provided identifier.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/macro-expansion.md#_snippet_6

LANGUAGE: rust
CODE:
```
printer!(print foo); // `foo` is a variable
```

----------------------------------------

TITLE: Comparing Rust Compiler Benchmark Results
DESCRIPTION: Illustrates how to compare benchmark results of two compiler versions using their respective IDs with the 'compare' subcommand of 'x perf'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_rustc_perf.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
./x perf compare <baseline> <modified>
```

----------------------------------------

TITLE: Demonstrating Invalid Negative Default Implementation in Rust
DESCRIPTION: This code example shows an invalid attempt to combine a negative trait implementation with a default implementation. The code fails to compile because negative impls (which declare no other implementations exist) are incompatible with default impls (which provide default values for other implementations).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0750.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
# #![feature(negative_impls)]
# #![feature(specialization)]
trait MyTrait {
    type Foo;
}

default impl !MyTrait for u32 {} // error!
# fn main() {}
```

----------------------------------------

TITLE: Visual Alignment Style for Vector Declarations in Rust
DESCRIPTION: Demonstrates the 'Visual' alignment style for declaring and initializing a vector. In this style, elements after the first line are aligned with the first element rather than being indented to the next block level.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_26

LANGUAGE: rust
CODE:
```
fn main() {
    let lorem = vec!["ipsum",
                     "dolor",
                     "sit",
                     "amet",
                     "consectetur",
                     "adipiscing",
                     "elit"];
}
```

----------------------------------------

TITLE: Configuring arithmetic-side-effects-allowed-unary
DESCRIPTION: This setting allows the specification of types where unary arithmetic operations are permitted without triggering the `arithmetic_side_effects` lint. This allows to avoid false positives, e.g. in cases of operators overloading.  It requires a list of type names.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_0

LANGUAGE: toml
CODE:
```
arithmetic-side-effects-allowed-unary = ["SomeType", "AnotherType"]
```

----------------------------------------

TITLE: Building and running the type mismatch example without CFI
DESCRIPTION: Shell commands showing how to build and run the type mismatch example without CFI protection. Without CFI, the invalid function call with mismatched types is allowed and produces a result.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_12

LANGUAGE: shell
CODE:
```
$ cargo run --release
   Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)
    Finished release [optimized] target(s) in 0.44s
     Running `target/release/rust-cfi-3`
The answer is: 12
With CFI enabled, you should not see the next answer
The next answer is: 14
$
```

----------------------------------------

TITLE: Associated Type Formatting in Rust
DESCRIPTION: Shows the formatting for associated types that are bound in a generic type, including spacing around the `=` sign.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_20

LANGUAGE: rust
CODE:
```
<T: Example<Item = u32>>
```

----------------------------------------

TITLE: Rust Byte Literal Syntax Error Demonstration
DESCRIPTION: Demonstrates an incomplete byte literal syntax where the closing single quote is missing, causing a compilation error in Rust
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_with_slash_n.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
b'\n
```

----------------------------------------

TITLE: Rustup Target Addition
DESCRIPTION: These commands use rustup to add the OpenHarmony targets for aarch64, armv7, and x86_64 architectures, enabling cross-compilation to these platforms.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/openharmony.md#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
rustup target add aarch64-unknown-linux-ohos
rustup target add armv7-unknown-linux-ohos
rustup target add x86_64-unknown-linux-ohos
```

----------------------------------------

TITLE: Wrapping Return Type in Option in Rust Functions
DESCRIPTION: Wraps a function's return type in an Option and updates the returned value to be wrapped in Some. Useful when adding nullable return support to a function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_118

LANGUAGE: rust
CODE:
```
fn foo() -> i32 { 42i32 }
```

LANGUAGE: rust
CODE:
```
fn foo() -> Option<i32> { Some(42i32) }
```

----------------------------------------

TITLE: Unsound Example of Type Alias Impl Trait in Rust
DESCRIPTION: Demonstration of why non-generic type alias impl trait implementations are rejected, showing potential unsoundness. This example would allow creating incompatible types if it were accepted.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0792.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(type_alias_impl_trait)]

type Foo<T> = impl Default;

#[define_opaque(Foo)]
fn foo() -> Foo<u32> {
    5u32
}

fn main() {
    let x = Foo::<&'static mut String>::default();
}
```

----------------------------------------

TITLE: Building Rust Programs for zkVM using cargo-risczero
DESCRIPTION: To build programs for the RISC Zero zkVM, users are encouraged to utilize the 'cargo-risczero' utility which facilitates the setup of project templates, tool installations, and builds the binaries appropriately.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv32im-risc0-zkvm-elf.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cargo risczero install
```

LANGUAGE: bash
CODE:
```
cargo risczero new
```

----------------------------------------

TITLE: Configuring Bootstrap.toml for Hexagon Target
DESCRIPTION: This TOML snippet configures the `bootstrap.toml` file to build Rust with support for the Hexagon target. It defines the necessary compiler and linker tools to be used for cross-compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/hexagon-unknown-linux-musl.md#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[build]
target = ["hexagon-unknown-linux-musl"]

[target.hexagon-unknown-linux-musl]

cc = "hexagon-unknown-linux-musl-clang"
cxx = "hexagon-unknown-linux-musl-clang++"
linker = "hexagon-unknown-linux-musl-clang"
ar = "hexagon-unknown-linux-musl-ar"
ranlib = "hexagon-unknown-linux-musl-ranlib"
musl-root = "/opt/clang+llvm-18.1.0-cross-hexagon-unknown-linux-musl/x86_64-linux-gnu/target/hexagon-unknown-linux-musl/usr"
llvm-libunwind = 'in-tree'
qemu-rootfs = "/opt/clang+llvm-18.1.0-cross-hexagon-unknown-linux-musl/x86_64-linux-gnu/target/hexagon-unknown-linux-musl/usr"
```

----------------------------------------

TITLE: Defining Build Configuration for armv7-unknown-linux-uclibceabi in TOML
DESCRIPTION: This TOML snippet sets up the build configuration for compiling Rust programs targeting armv7-unknown-linux-uclibceabi. It specifies the compiler, linker, and other tools required for the build process. Dependencies include having a complete cross-compilation toolchain installed for Armv7-A.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabi.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]\nbuild-stage = 2\ntarget = [\"armv7-unknown-linux-uclibceabi\"]\n\n[target.armv7-unknown-linux-uclibceabi]\ncc = \"/path/to/arm-unknown-linux-uclibcgnueabi-gcc\"\ncxx = \"/path/to/arm-unknown-linux-uclibcgnueabi-g++\"\nar = \"path/to/arm-unknown-linux-uclibcgnueabi-ar\"\nranlib = \"/path/to/arm-unknown-linux-uclibcgnueabi-ranlib\"\nlinker = \"/path/to/arm-unknown-linux-uclibcgnueabi-gcc\"
```

----------------------------------------

TITLE: Invalid #[repr(u8)] on struct in Rust
DESCRIPTION: This code snippet presents an example of using the `#[repr(u8)]` attribute on a struct, which is incorrect. The `#[repr(u8)]` attribute is intended for specifying the discriminant size of enums, not for structs. Using it on a struct will generate a compile-time error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0517.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```

#[repr(u8)]
struct Foo {bar: bool, baz: bool}

```

----------------------------------------

TITLE: Correct Usage of ffi_pure Attribute on Foreign Function
DESCRIPTION: Demonstrates the proper usage of the ffi_pure attribute on a foreign function (strlen) declared in an extern block, which is the intended use case for this attribute.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0755.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(ffi_pure)]

extern "C" {
    #[unsafe(ffi_pure)] // ok!
    pub fn strlen(s: *const i8) -> isize;
}
# fn main() {}
```

----------------------------------------

TITLE: Handling Thin and Wide Pointer Casting Error in Rust
DESCRIPTION: This code snippet showcases an erroneous attempt to cast a thin pointer to a wide pointer. Thin pointers are simple references to memory addresses, while wide pointers relate to Dynamically Sized Types (DSTs) which require additional size information. The example demonstrates the compiler error E0607, indicating that such a cast is invalid.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0607.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"let v = core::ptr::null::<u8>();\nv as *const [u8];"
```

----------------------------------------

TITLE: Enabling Intra-Doc Pointers Feature in Rust
DESCRIPTION: Example showing how to enable the intra-doc-pointers feature flag and use it with documentation links. This feature is currently unstable and requires explicit opt-in via the feature flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/intra-doc-pointers.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(intra_doc_pointers)]
//! [pointer::add]
```

----------------------------------------

TITLE: Hiding Configurations in #[doc(cfg)] with doc_cfg_hide in Rust
DESCRIPTION: Explains how the `doc_cfg_hide` feature and the `#[doc(cfg_hide(...))]` attribute can be used to exclude specific configuration items, such as the `doc` flag introduced by `#[cfg(any(..., doc))]`, from being displayed in the automatically generated `#[doc(cfg)]` banners.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_4

LANGUAGE: Rust
CODE:
```
#![feature(doc_cfg_hide)]
#![doc(cfg_hide(doc))]
```

----------------------------------------

TITLE: Configuring Rust libc Package Metadata and Dependencies
DESCRIPTION: A JSON object containing the configuration for the Rust libc crate, including package metadata variables, version information, repository details, dependencies, and path settings.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
                "CARGO_PKG_LICENSE_FILE": "",
                "CARGO_PKG_NAME": "libc",
                "CARGO_PKG_README": "README.md",
                "CARGO_PKG_REPOSITORY": "https://github.com/rust-lang/libc",
                "CARGO_PKG_RUST_VERSION": "",
                "CARGO_PKG_VERSION": "0.2.98",
                "CARGO_PKG_VERSION_MAJOR": "0",
                "CARGO_PKG_VERSION_MINOR": "2",
                "CARGO_PKG_VERSION_PATCH": "98",
                "CARGO_PKG_VERSION_PRE": "",
            },
        },
        dependencies: [],
        origin: Library {
            repo: Some(
                "https://github.com/rust-lang/libc",
            ),
            name: "libc",
        },
        is_proc_macro: false,
        proc_macro_cwd: Some(
            AbsPathBuf(
                "$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98",
            ),
        ),
    },
}
```

----------------------------------------

TITLE: Running Rust Autodiff Test Suites (Bash)
DESCRIPTION: Executes the `./x.py` script to run tests for the autodiff implementation. It targets specific test paths within `tests/codegen`, `tests/pretty`, and `tests/ui`, including a feature gate test, using the `stage 1` build.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/installation.md#_snippet_3

LANGUAGE: bash
CODE:
```
./x.py test --stage 1 tests/codegen/autodiff
./x.py test --stage 1 tests/pretty/autodiff
./x.py test --stage 1 tests/ui/autodiff
./x.py test --stage 1 tests/ui/feature-gates/feature-gate-autodiff.rs
```

----------------------------------------

TITLE: Mangled Symbol for Inherent Impl Function in Rust
DESCRIPTION: This example explains the mangled symbol for the function `foo` in an inherent implementation in the `Example` struct, breaking down the components into path and disambiguator representations. It includes recommendations for demangling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
_RNvMs_Cs4Cv8Wi1oAIB_7mycrateNtB4_7Example3foo
```

----------------------------------------

TITLE: Compiler Error Output from Basic #[rustc_on_unimplemented] Example
DESCRIPTION: Shows the resulting compiler error message when the custom trait with #[rustc_on_unimplemented] is used incorrectly. This demonstrates how the custom error message is integrated into the compiler's output.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_16

LANGUAGE: text
CODE:
```
error[E0277]: the trait bound `&[{integer}]: MyIterator<char>` is not satisfied
  --> <anon>:14:5
   |
14 |     iterate_chars(&[1, 2, 3][..]);
   |     ^^^^^^^^^^^^^ an iterator over elements of type `char` cannot be built from a collection of type `&[{integer}]`
   |
   = help: the trait `MyIterator<char>` is not implemented for `&[{integer}]`
   = note: required by `iterate_chars`
```

----------------------------------------

TITLE: Cross-Compiling Rust Crate for RISC-V
DESCRIPTION: Cargo command to build a Rust project targeting RISC-V 64-bit Linux
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv64gc-unknown-linux-gnu.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cargo build --target riscv64gc-unknown-linux-gnu
```

----------------------------------------

TITLE: Configuring enable-raw-pointer-heuristic-for-send
DESCRIPTION: Controls whether to apply the raw pointer heuristic to determine if a type is `Send`. Defaults to `true`. This affects how Clippy checks for thread safety related to raw pointers.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_14



----------------------------------------

TITLE: Configuring Module Items Ordering Within Groupings in Rust
DESCRIPTION: This setting determines whether the items within module groups should be ordered alphabetically.  It affects the `arbitrary_source_item_ordering` lint. The default value is `"none"`, meaning items are not checked for alphabetical order.  The value can be "all", "none", or a list of specific grouping names.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_34



----------------------------------------

TITLE: Byte String Literal Error
DESCRIPTION: This error message indicates that a byte string literal in Rust is missing a closing double quote ("). The compiler expects all string literals to be properly terminated. Failing to do so results in a compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_string_with_slash_n.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
"BYTE_STRING \"b\\"\\n" error: Missing trailing `\"` symbol to terminate the byte string literal"
```

----------------------------------------

TITLE: Struct Field Missing Example in Rust
DESCRIPTION: Example showing a diagnostic trigger when a struct initialization is missing required fields. This demonstrates the missing-fields diagnostic.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/diagnostics_generated.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct A { a: u8, b: u8 }

let a = A { a: 10 };
```

----------------------------------------

TITLE: Integrating External Commands for Compiler Feedback (JSON)
DESCRIPTION: This snippet demonstrates how to integrate an external command, such as `cargo watch`, to provide compiler feedback within VS Code. It defines a VS Code task that runs the specified command in the background and utilizes the `$rustc-watch` problem matcher to parse and display the output as inline error markers.  Requires VS Code, the Rust extension, and cargo watch. The output of the command is parsed to display errors. Task configuration is defined in tasks.json and settings.json.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/editor_features.md#_snippet_8

LANGUAGE: JSON
CODE:
```
{
    "label": "Watch",
    "group": "build",
    "type": "shell",
    "command": "cargo watch",
    "problemMatcher": "$rustc-watch",
    "isBackground": true
}
```

----------------------------------------

TITLE: Configuring Eglot to Enable Clippy in Emacs
DESCRIPTION: This snippet configures Eglot to pass the `check.command` setting to rust-analyzer, effectively enabling Clippy for Rust code analysis within the Emacs environment. It modifies the `eglot-server-programs` list to include initialization options for the rust-analyzer server.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/other_editors.md#_snippet_1

LANGUAGE: Emacs Lisp
CODE:
```
(add-to-list 'eglot-server-programs
             '((rust-ts-mode rust-mode) .
               ("rust-analyzer" :initializationOptions (:check (:command "clippy")))))
```

----------------------------------------

TITLE: Dummy Trait Definition in Rust
DESCRIPTION: Defines a simple trait with lifetime parameters and its blanket implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/member_constraints.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait Trait<'a, 'b> { }
impl<T> Trait<'_, '_> for T { }
```

----------------------------------------

TITLE: Running Tests with Miri
DESCRIPTION: This command runs specific test files using the Miri executable, emphasizing the ability to specify target architectures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_2

LANGUAGE: Shell
CODE:
```
./miri run tests/pass/format.rs
```

LANGUAGE: Shell
CODE:
```
./miri run tests/pass/hello.rs --target i686-unknown-linux-gnu
```

----------------------------------------

TITLE: Using the rustc_const_stable attribute in Rust
DESCRIPTION: The #[rustc_const_stable] attribute explicitly marks a const fn as having its constness be stable, specifying the feature name and version since which it has been stabilized.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/stability.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#[rustc_const_stable(feature = "foo", since = "1.420.69")]
```

----------------------------------------

TITLE: Using Target Features Example in Rust
DESCRIPTION: Example showing problematic target features '+soft-float' and '-sse' on x86/x86-64 architectures, which can cause segfaults and ABI mismatches due to floating point register handling conflicts between software emulated floats and standard library expectations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/targets/known-issues.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| Target-Feature | Issue | Seen on | Description | Details |
| -------------- | ----- | ------- | ----------- | ------- |
| `+soft-float` <br> and <br> `-sse` | Segfaults and ABI mismatches | `x86` and `x86-64` | The `x86` and `x86_64` architecture uses SSE registers (aka `xmm`) for floating point operations. Using software emulated floats ("soft-floats") disables usage of `xmm` registers, but parts of Rust's core libraries (e.g. `std::f32` or `std::f64`) are compiled without soft-floats and expect parameters to be passed in `xmm` registers. This leads to ABI mismatches. <br><br>  Attempting to compile with disabled SSE causes the same error, too. | [#63466](https://github.com/rust-lang/rust/issues/63466) |
```

----------------------------------------

TITLE: Example of Suggestion-style Lint Output in Rust
DESCRIPTION: Example showing how suggestions appear in lint output, demonstrating fold-to-any conversion suggestion.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/emitting_lints.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
error: This `.fold` can be more succinctly expressed as `.any`
--> tests/ui/methods.rs:390:13
    |
390 |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`
    |
```

----------------------------------------

TITLE: Compiling Fuchsia Component Manifest
DESCRIPTION: Command to compile the CML file into a component manifest.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_12

LANGUAGE: sh
CODE:
```
${SDK_PATH}/tools/${ARCH}/cmc compile \
    pkg/hello_fuchsia.cml \
    --includepath ${SDK_PATH}/pkg \
    -o pkg/meta/hello_fuchsia.cm
```

----------------------------------------

TITLE: Demonstrating the Difference Between Lazy and Eager Macro Expansion in Rust
DESCRIPTION: This code snippet illustrates the concept of lazy vs eager macro expansion using two simple macros. In eager expansion, nested macros like bar! would be expanded before the outer foo! macro, while lazy expansion would do the opposite.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/macro-expansion.md#_snippet_0

LANGUAGE: rust
CODE:
```
macro bar($i: ident) { $i }
macro foo($i: ident) { $i }

foo!(bar!(baz));
```

----------------------------------------

TITLE: Example of Join Lines in Rust
DESCRIPTION: Demonstrates the Join Lines operation in Rust code, showing how the extension can transform code with nested blocks into a simpler, single-line form by intelligently handling braces and whitespace.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
fn main() {
    /*cursor here*/let x = {
        92
    };
}
```

----------------------------------------

TITLE: Generic Transparent Unions in Rust
DESCRIPTION: Illustrates how to create a generic transparent union that can handle zero-sized types. The union has the same representation as the generic type T.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/transparent-unions.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(transparent_unions)]

// This union has the same representation as `T`.
#[repr(transparent)]
pub union GenericUnion<T: Copy> { // Unions with non-`Copy` fields are unstable.
    pub field: T,
    pub nothing: (),
}

// This is okay even though `()` is a zero-sized type.
pub const THIS_IS_OKAY: GenericUnion<()> = GenericUnion { field: () };
```

----------------------------------------

TITLE: Mangled Symbol for Lifetime References
DESCRIPTION: Shows the mangled symbol for the 'example' function with lifetime references, demonstrating how lifetimes are encoded using De Bruijn indices in the symbol name.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_14

LANGUAGE: text
CODE:
```
_RINvCs7qp2U7fqm6G_7mycrate7exampleFG0_RL1_hRL0_tEuEB2_
                                    │└┬┘│└┬┘││└┬┘││
                                    │ │ │ │ ││ │ │└── end of input types
                                    │ │ │ │ ││ │ └─── type u16
                                    │ │ │ │ ││ └───── lifetime #1 'b
                                    │ │ │ │ │└─────── reference type
                                    │ │ │ │ └──────── type u8
                                    │ │ │ └────────── lifetime #2 'a
                                    │ │ └──────────── reference type
                                    │ └────────────── binder with 2 lifetimes
                                    └──────────────── function type
```

----------------------------------------

TITLE: Automating #[doc(cfg)] with doc_auto_cfg Feature in Rust
DESCRIPTION: Illustrates the use of the `doc_auto_cfg` feature gate, which automatically infers `#[doc(cfg)]` attributes from existing `#[cfg]` attributes. This reduces the need for explicit `#[doc(cfg)]`, though it may include the `doc` configuration in the documentation display unless hidden.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_3

LANGUAGE: Rust
CODE:
```
#![feature(doc_auto_cfg)]

/// Token struct that can only be used on Windows.
#[cfg(any(windows, doc))]
pub struct WindowsToken;

/// Token struct that can only be used on Unix.
#[cfg(any(unix, doc))]
pub struct UnixToken;

/// Token struct that is only available with the `serde` feature
#[cfg(feature = "serde")]
#[derive(serde::Deserialize)]
pub struct SerdeToken;
```

----------------------------------------

TITLE: Deinitializing Git Submodule (Console)
DESCRIPTION: Removes the specified submodule from the working directory, staging area, and configuration. The `-f` flag forces the deinitialization. Useful for removing submodules that are not needed, like `src/llvm-project` if using downloaded build artifacts.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_2

LANGUAGE: console
CODE:
```
git submodule deinit -f src/llvm-project
```

----------------------------------------

TITLE: Rust Invalid Binary Literal
DESCRIPTION: This snippet shows that `0bnoDigit` gives a `Missing digits after the integer base prefix` error, because it requires digits, but gets a string that isn't a valid digit.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_6

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0bnoDigit\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Benchmarking Rust Compiler with x perf
DESCRIPTION: Shows how to benchmark the Rust compiler and store the results under a specific ID using the 'benchmark' subcommand of 'x perf'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_rustc_perf.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
./x perf benchmark <id>
```

----------------------------------------

TITLE: Demonstrating Object-Safe Traits with Unsized Self in Rust
DESCRIPTION: This snippet shows how traits with by-value self can be object-safe when using the unsized_fn_params feature. It illustrates creating and using trait objects with unsized types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/unsized-locals.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#![feature(unsized_fn_params)]

trait Foo {
    fn foo(self) {}
}

impl<T: ?Sized> Foo for T {}

fn main () {
    let slice: Box<dyn Foo> = Box::new([1, 2, 3]);
    // doesn't compile yet
    <dyn Foo as Foo>::foo(*slice);
}
```

----------------------------------------

TITLE: Formatting Example: Style Edition 2015 vs 2024 - Import Sorting
DESCRIPTION: Shows how import statements are sorted differently between style_edition 2015 and 2024 using version sorting algorithm.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// with style_edition=2015
use std::num::{NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8};

// with style_edition=2024
use std::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64};
```

----------------------------------------

TITLE: Linking Issues in Rust Documentation
DESCRIPTION: This snippet shows how to provide a base URL for issue tracking in Rust documentation when features are unstable. The #[doc] attribute is utilized for this purpose.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
"""rust,no_run\n#![doc(issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n"
```

----------------------------------------

TITLE: Configuring rust-analyzer in Kate Text Editor (JSON)
DESCRIPTION: This JSON snippet configures rust-analyzer options within the Kate text editor through its LSP plugin. It disables cache priming, restricts checks to only the current target, and disables checks on save. The configuration is applied through Kate's User Server Settings and requires restarting the LSP server.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/other_editors.md#_snippet_9

LANGUAGE: json
CODE:
```
{
    "servers": {
        "rust": {
            "initializationOptions": {
                "cachePriming": {
                    "enable": false
                },
                "check": {
                    "allTargets": false
                },
                "checkOnSave": false
            }
        }
    }
}
```

----------------------------------------

TITLE: Forcing Inlining with #[doc(inline)] in Rust
DESCRIPTION: This code demonstrates how to force an item to be inlined using the `#[doc(inline)]` attribute. Even though `public_mod::Public` is already public, using `#[doc(inline)]` on its re-export causes it to be displayed both at the crate root and in the `public_mod` module in the documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/re-exports.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
```rust
pub mod public_mod {
    pub struct Public;
}
#[doc(inline)]
pub use self::public_mod::Public;
```
```

----------------------------------------

TITLE: Valid Optimize Attribute Usage in Rust
DESCRIPTION: Demonstrates correct usage of the #[optimize] attribute with size optimization flag to generate smaller code.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0722.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(optimize_attribute)]

#[optimize(size)]
pub fn something() {}
```

----------------------------------------

TITLE: Configuring Git Pull for Fast-Forward Only (Console)
DESCRIPTION: Sets the local repository's configuration so that `git pull` defaults to using the `--ff-only` strategy. This prevents Git from creating merge commits automatically when pulling updates, adhering to a no-merge policy.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_13

LANGUAGE: console
CODE:
```
git config pull.ff only
```

----------------------------------------

TITLE: Force Unwind Tables in Rust
DESCRIPTION: Forces the generation of unwind tables. Takes `y`, `yes`, `on`, `true` (force-enable) or `n`, `no`, `off`, `false` (do not force).  If unwind tables are required by the target, an error will be emitted if they're not generated.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_12



----------------------------------------

TITLE: Implementing By-Value Trait Objects in Rust
DESCRIPTION: This snippet demonstrates how to use by-value self arguments without Self: Sized bounds in trait implementations. It shows how this feature allows for more flexible trait object usage.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/unsized-locals.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(unsized_fn_params)]

trait Foo {
    fn foo(self) {}
}

impl<T: ?Sized> Foo for T {}

fn main() {
    let slice: Box<[i32]> = Box::new([1, 2, 3]);
    <[i32] as Foo>::foo(*slice);
}
```

----------------------------------------

TITLE: Comment Wrapping Default Example in Rust
DESCRIPTION: Shows default comment formatting behavior when wrap_comments is false.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_83

LANGUAGE: rust
CODE:
```
// Lorem ipsum dolor sit amet, consectetur adipiscing elit,
// sed do eiusmod tempor incididunt ut labore et dolore
// magna aliqua. Ut enim ad minim veniam, quis nostrud
// exercitation ullamco laboris nisi ut aliquip ex ea
// commodo consequat.

// Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

// Information on the lorem ipsum can be found at the following url: https://en.wikipedia.org/wiki/Lorem_ipsum. Its text is: lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

/// # This doc comment is a very long header (it starts with a '#'). Had it not been a header it would have been wrapped. But because it is a header, it will not be. That is because wrapping a markdown header breaks it.
struct Foo {}
```

----------------------------------------

TITLE: Example Output of git range-diff (Git)
DESCRIPTION: Illustrates the format of `git range-diff` output. It shows pairs of commit hashes and messages, indicating if a commit is new ('+'), removed ('-'), or modified ('!'). Diff hunks show changes within files for modified commits, comparing the old version's diff (`-`) to the new version's diff (`+`).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_20

LANGUAGE: git
CODE:
```
-:  ------- > 1:  0ddba11 Prepare for the inevitable!
1:  c0debee = 2:  cab005e Add a helpful message at the start
2:  f00dbal ! 3:  decafe1 Describe a bug
    @@ -1,3 +1,3 @@
     Author: A U Thor <author@example.com>

    -TODO: Describe a bug
    +Describe a bug
    @@ -324,5 +324,6 అభివ్యక్తి
      This is expected.

    -+What is unexpected is that it will also crash.
    ++Unexpectedly, it also crashes. This is a bug, and the jury is
    ++still out there how to fix it best. See ticket #314 for details.

      Contact
3:  bedead < -:  ------- TO-UNDO
```

----------------------------------------

TITLE: Reordering Impl Items to Match Trait Definition in Rust
DESCRIPTION: Reorganizes the items within an impl block to follow the same order as the trait definition. This refactoring improves code consistency and readability by aligning implementation order with the trait specification order.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_104

LANGUAGE: rust
CODE:
```
trait Foo {
    type A;
    const B: u8;
    fn c();
}

struct Bar;
impl Foo for Bar {
    const B: u8 = 17;
    fn c() {}
    type A = String;
}
```

LANGUAGE: rust
CODE:
```
trait Foo {
    type A;
    const B: u8;
    fn c();
}

struct Bar;
impl Foo for Bar {
    type A = String;
    const B: u8 = 17;
    fn c() {}
}
```

----------------------------------------

TITLE: VS Code Settings Configuration for Rust Analyzer
DESCRIPTION: JSON configuration for setting up the rust-analyzer server path in VS Code User Settings.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/setup.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "rust-analyzer.server.path": "<path-to-rust-analyzer-binary>"
}
```

----------------------------------------

TITLE: Fixing Coroutine Usage in Rust
DESCRIPTION: The erroneous code example demonstrates a misuse of the `yield` keyword, which results in a compilation error since `yield` can only be utilized within a coroutine literal. The corrected example fixes this by using the `#[coroutine]` attribute and a coroutine literal, ensuring proper execution. It requires the `coroutines`, `coroutine_trait`, and `stmt_expr_attributes` features to be enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0627.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]

fn fake_coroutine() -> &'static str {
    yield 1;
    return "foo"
}

fn main() {
    let mut coroutine = fake_coroutine;
}
```

LANGUAGE: Rust
CODE:
```
#![feature(coroutines, coroutine_trait, stmt_expr_attributes)]

fn main() {
    let mut coroutine = #[coroutine] || {
        yield 1;
        return "foo"
    };
}
```

----------------------------------------

TITLE: Referencing AsyncFn Trait Documentation in Rust
DESCRIPTION: This code snippet provides a link to the documentation for the `AsyncFn` trait in the Rust standard library. It demonstrates how to reference external documentation within Markdown files.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/async-fn-traits.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
[`AsyncFn*`]: ../../std/ops/trait.AsyncFn.html
```

----------------------------------------

TITLE: Using #[repr(transparent)] in Rust Documentation
DESCRIPTION: Details the usage of the `#[repr(transparent)]` attribute to document transparent representations in Rust. It outlines how visibility affects the documentation output and considerations for using `cfg_attr`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/advanced-features.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
"#[cfg_attr(not(doc), repr(transparent))]"
```

----------------------------------------

TITLE: Mixed Early and Late Bound Function Definitions
DESCRIPTION: Demonstrates different function types with both early and late bound lifetime parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
fn free_function<'a: 'a, 'b>(_: &'a (), _: &'b ()) {}

struct Foo;

trait Trait: Sized {
    fn trait_method<'a: 'a, 'b>(self, _: &'a (), _: &'b ());
    fn trait_function<'a: 'a, 'b>(_: &'a (), _: &'b ());
}

impl Trait for Foo {
    fn trait_method<'a: 'a, 'b>(self, _: &'a (), _: &'b ()) {}
    fn trait_function<'a: 'a, 'b>(_: &'a (), _: &'b ()) {}
}

impl Foo {
    fn inherent_method<'a: 'a, 'b>(self, _: &'a (), _: &'b ()) {}
    fn inherent_function<'a: 'a, 'b>(_: &'a (), _: &'b ()) {}
}
```

----------------------------------------

TITLE: Fixing Match Arm Braces in Rust
DESCRIPTION: This code snippet demonstrates a fix where rustfmt previously removed braces in match arms when the block had a labeled break statement. The fix ensures that the braces are preserved, maintaining the code's intended behavior. This correction addresses a specific formatting issue in Rust code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
fn main() {
    match true {
        true => 'a: {
            break 'a
        }
        _ => (),
    }
}
```

----------------------------------------

TITLE: Generating Trait from Impl in Rust
DESCRIPTION: This snippet shows how to generate a trait definition from an existing inherent impl and convert the impl to a trait impl. The specific code for this transformation is not provided in the given text.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_63



----------------------------------------

TITLE: Registering a Renamed Lint
DESCRIPTION: This Rust snippet demonstrates how to register a renamed lint using the `store.register_renamed` function. It shows the renaming of `single_use_lifetime` to `single_use_lifetimes`, notifying users of the change. This requires access to the `LintStore` and the `rustc_lint` package.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
store.register_renamed("single_use_lifetime", "single_use_lifetimes");

```

----------------------------------------

TITLE: Applying Custom Output Normalization Directives in Rust UI Tests
DESCRIPTION: Demonstrates how to use `normalize-*` directives within Rust source files to define custom regex-based replacements in the compiler's stdout or stderr output for UI tests. These directives help eliminate platform or environment-specific differences in test output, including target-specific variations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_0

LANGUAGE: Rust
CODE:
```
//@ normalize-stdout: "foo" -> "bar"
//@ normalize-stderr: "foo" -> "bar"
//@ normalize-stderr-32bit: "fn\(\)
 \(32 bits\)" -> "fn\(\)
 \($$PTR bits\)"
//@ normalize-stderr-64bit: "fn\(\)
 \(64 bits\)" -> "fn\(\)
 \($$PTR bits\)"
```

----------------------------------------

TITLE: Rust Type Definition Example
DESCRIPTION: Example showing how type information is stored in memory using DefId and Substs, demonstrating why simple serialization isn't sufficient for cross-session caching
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/incremental-compilation-in-detail.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
TyKind::FnDef(DefId, &'tcx Substs<'tcx>)
```

----------------------------------------

TITLE: Analyzing Profiling Data with measureme Summarize Tool
DESCRIPTION: Shows how to use the summarize tool from the measureme repository to get a summary of compiler time usage from profiling data.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/self-profile.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ ../measureme/target/release/summarize summarize foo-1234
```

----------------------------------------

TITLE: Illustrative Clause Example
DESCRIPTION: Illustrates how a trait is implemented given another implemented trait. This example demonstrates how the `Implemented(Foo: Bar)` goal depends on itself, leading to an infinite recursion if `Bar` isn't a co-inductive trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/goals-and-clauses.md#2025-04-21_snippet_7

LANGUAGE: text
CODE:
```
"Implemented(Foo: Bar) :-
    Implemented(Foo: Bar)."
```

----------------------------------------

TITLE: Handling Whitespace Characters in Rust
DESCRIPTION: This snippet depicts how to declare whitespace characters such as newline (`\n`) within Rust source code. It demonstrates whitespace string literals for purposes like parsing or formatting. Dependencies require standard Rust syntax. The input is a newline character, and the output or usage depends on further code context not provided.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/raw_strings.txt#_snippet_1

LANGUAGE: Rust
CODE:
```
WHITESPACE "\n"
```

----------------------------------------

TITLE: Building Rust with CET Protection
DESCRIPTION: This command demonstrates how to build Rust code with full control-flow protection enabled. It uses the nightly toolchain and rebuilds the standard library with CET enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/cf-protection.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ RUSTFLAGS="-Z cf-protection=full" cargo +nightly build -Z build-std --target x86_64-unknown-linux-gnu
```

----------------------------------------

TITLE: Invalid Track Caller Attribute Usage Example in Rust
DESCRIPTION: Demonstrates incorrect usage of the #[track_caller] attribute by attempting to apply it to a struct definition. The #[track_caller] attribute can only be applied to functions, resulting in compilation error E0739.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0739.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[track_caller]
struct Bar {
    a: u8,
}
```

----------------------------------------

TITLE: Correcting Byte Constant Syntax in Rust
DESCRIPTION: This code snippet demonstrates the correct way to declare a byte constant in Rust. The byte constant is properly terminated with a closing single quote, resolving the compilation error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0763.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let c = b'a'; // ok!
```

----------------------------------------

TITLE: Invalid #[repr(C)] on impl block in Rust
DESCRIPTION: This snippet illustrates an invalid attempt to apply the `#[repr(C)]` attribute to an `impl` block. The `#[repr(C)]` attribute is used to specify the data layout of structs and enums, and is not applicable to implementation blocks.  Trying to use it on an `impl` block will result in a compile-time error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0517.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```

#[repr(C)]
impl Foo {
    // ...
}

```

----------------------------------------

TITLE: Defining Rust Floating Point Type f32
DESCRIPTION: Describes the standard floating-point type in Rust, which is typically f32 and compliant with IEEE 754 single-precision float standard. The type guarantees a floating-point number but may have implementation variations.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/core/src/ffi/c_float.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let float_value: f32 = 3.14;
```

----------------------------------------

TITLE: Using the temps-dir compiler flag in Rust
DESCRIPTION: The -Ztemps-dir flag specifies a directory for Rust compiler intermediate files. This is useful when running multiple rustc instances to prevent file conflicts. Note that intermediate files are not kept unless -C save-temps=yes is also set.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/temps-dir.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
-Ztemps-dir
```

----------------------------------------

TITLE: Enum definitions with type parameters in Rust
DESCRIPTION: This code snippet defines three enums, `Option`, `OptionalFn`, and `OptionalMap`, each parameterized by a different type parameter (`A`, `B`, and `C` respectively). These enums are used to illustrate how variance constraints are generated during type checking in Rust, based on the positions of the type parameters within the enum definitions. The `ignore` attribute indicates that the code is for illustrative purposes and should not be compiled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/variance.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```rust,ignore
enum Option<A> { Some(A), None }
enum OptionalFn<B> { Some(|B|), None }
enum OptionalMap<C> { Some(|C| -> C), None }
```
```

----------------------------------------

TITLE: Valid Intrinsic Function Declaration in Rust
DESCRIPTION: Example of a correct intrinsic function declaration using a recognized intrinsic atomic_fence_seqcst. Demonstrates proper usage of the rustc_intrinsic attribute.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0093.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(intrinsics)]
#![allow(internal_features)]

#[rustc_intrinsic]
unsafe fn atomic_fence_seqcst(); // ok!

fn main() {
    unsafe {
        atomic_fence_seqcst();
    }
}
```

----------------------------------------

TITLE: Removing Unused Imports in Rust
DESCRIPTION: Removes import statements that aren't used anywhere in the code. This refactoring helps clean up the codebase by eliminating dead imports that might have been left over from previous development or code changes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_101

LANGUAGE: rust
CODE:
```
struct X();
mod foo {
    use super::X;
}
```

LANGUAGE: rust
CODE:
```
struct X();
mod foo {
}
```

----------------------------------------

TITLE: Handling Unterminated String Literal Error in Rust
DESCRIPTION: Demonstrates an example in Rust where a string literal is not properly terminated, resulting in a compile-time error. No external dependencies are required; standard Rust parsing raises the error. The snippet expects a closing double quote at the end of the string, and its omission produces a syntax error, which is typically caught by the Rust compiler and shown in the error output.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_string_with_slash.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
STRING "\
```

----------------------------------------

TITLE: Adding wasm32-wasip1-threads Target
DESCRIPTION: This command demonstrates how to add the `wasm32-wasip1-threads` target using Rust's toolchain with the rustup command. This operation requires the nightly toolchain and is used to prepare the environment for building Rust programs for the specified target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wasip1-threads.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
rustup target add wasm32-wasip1-threads --toolchain nightly

```

----------------------------------------

TITLE: Using rustc with env-set Flag for PATH Variable
DESCRIPTION: Example showing how to use the `--env-set` flag to override the PATH environment variable at compile time with rustc. The value specified will be available through the env! macro.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/env-set.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
rustc --env-set PATH=env
```

----------------------------------------

TITLE: Erroneous Rust Code with Multiple Relaxed Default Bounds
DESCRIPTION: This code demonstrates the incorrect use of multiple relaxed bounds (?Sized and ?Send) on a generic type parameter, which triggers compiler error E0203. Multiple relaxed default bounds on a single type parameter are not supported in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0203.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct Bad<T: ?Sized + ?Send>{
    inner: T
}
```

----------------------------------------

TITLE: Demonstrating Unterminated Double Quote String Error in Rust
DESCRIPTION: This code snippet shows an example of an unterminated double quote string in Rust, which results in a compilation error (E0765). The string is not properly closed, causing the error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0765.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
let s = "; // error!
```

----------------------------------------

TITLE: Demonstrating E0689 Error with Numeric Literal in Rust
DESCRIPTION: This code snippet shows an erroneous example that triggers the E0689 error by calling the 'neg()' method on an ambiguous floating-point literal.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0689.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
2.0.neg(); // error!
```

----------------------------------------

TITLE: Demonstrating E0158 Error with Generic Parameter in Pattern Matching
DESCRIPTION: This code snippet demonstrates the E0158 error by attempting to match against a constant that depends on a generic parameter. The compiler cannot prove exhaustiveness in this case because the generic implementation could be arbitrary.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0158.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
enum Foo {
    One,
    Two
}

trait Bar {
    const X: Foo;
}

fn test<A: Bar>(arg: Foo) {
    match arg {
        A::X => println!("A::X"), // error: E0158: constant pattern depends
                                  //        on a generic parameter
        Foo::Two => println!("Two")
    }
}
```

----------------------------------------

TITLE: Implementing UEFI Hello World with Rust std
DESCRIPTION: Advanced UEFI application example using Rust's standard library features including stdio and alloc. Demonstrates usage of OsString and Vec for string handling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/unknown-uefi.md#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
cargo +custom build --target x86_64-unknown-uefi
```

LANGUAGE: rust
CODE:
```
#![feature(uefi_std)]

use r_efi::{efi, protocols::simple_text_output};
use std::{
  ffi::OsString,
  os::uefi::{env, ffi::OsStrExt}
};

pub fn main() {
  println!("Starting Rust Application...");

  let st = env::system_table().as_ptr() as *mut efi::SystemTable;
  let mut s: Vec<u16> = OsString::from("Hello World!\n").encode_wide().collect();
  s.push(0);
  let r =
      unsafe {
        let con_out: *mut simple_text_output::Protocol = (*st).con_out;
        let output_string: extern "efiapi" fn(_: *mut simple_text_output::Protocol, *mut u16) -> efi::Status = (*con_out).output_string;
        output_string(con_out, s.as_ptr() as *mut efi::Char16)
      };
  assert!(!r.is_error())
}
```

----------------------------------------

TITLE: Identifying Tuple Struct and Variant Errors in Rust
DESCRIPTION: This Rust code snippet demonstrates incorrect usage of a tuple struct and a tuple variant, leading to compiler errors. It highlights a common issue related to forgotten imports or typographical errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0531.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
let Type(x) = Type(12); // error!
match Bar(12) {
    Bar(x) => {} // error!
    _ => {}
}
```

----------------------------------------

TITLE: Using Unstable Coverage Options in Rust
DESCRIPTION: Shows the syntax for the unstable '-Z coverage-options' flag. This option allows for more advanced configuration of code coverage features, but its exact behavior is not described here.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_17

LANGUAGE: rust
CODE:
```
-Z coverage-options=<options>
```

----------------------------------------

TITLE: Bitshift Error Example
DESCRIPTION: Demonstrates code that triggers the exceeding_bitshifts deny-level lint.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/lints/levels.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
fn main() {
    100u8 << 10;
}
```

----------------------------------------

TITLE: Invalid Generic SIMD Struct Implementation in Rust
DESCRIPTION: Example showing incorrect usage of #[repr(simd)] with generic type parameter T, which is not allowed because SIMD operations require concrete types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0074.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(repr_simd)]

#[repr(simd)]
struct Bad<T>([T; 4]);
```

----------------------------------------

TITLE: Trait Definition with RPITIT
DESCRIPTION: This Rust code defines a trait `Foo` with a method `iter` that returns an `impl Iterator` using RPITIT. It illustrates how the return type captures a lifetime and type parameter, which is important for well-formedness.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/return-position-impl-trait-in-trait.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
```rust
trait Foo {
    fn iter<'a, T>(x: &'a [T]) -> impl Iterator<Item = &'a T>;
}
```
```

----------------------------------------

TITLE: Implementing Traits with Const Bounds in Rust
DESCRIPTION: This snippet shows the implementation of const traits 'Bar' and 'Foo'. It emphasizes the necessity of proving const conditions for the trait implementation to be considered well-formed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/effects.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#[const_trait]
trait Bar {}
#[const_trait]
trait Foo: ~const Bar {}

impl const Bar for () {}
impl const Foo for () {}
```

----------------------------------------

TITLE: Erroneous Use of impl Trait in Path Parameters in Rust
DESCRIPTION: This code snippet demonstrates an incorrect usage of `impl Trait` in a path parameter, which is not allowed in Rust. The function attempts to use `impl Iterator` as a return type in a path parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0667.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn some_fn(mut x: impl Iterator) -> <impl Iterator>::Item { // error!
    x.next().unwrap()
}
```

----------------------------------------

TITLE: Extending Clippy with format_args Attribute in Rust
DESCRIPTION: The `#[clippy::format_args]` attribute is used to inform Clippy that a macro supports formatting syntax similar to `format!` or `println!`. This allows Clippy to apply relevant lints to the macro's arguments as if they were being passed to a formatting function.  This is particularly useful for custom macros that handle formatting internally.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/attribs.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
/// A macro that prints a message if a condition is true.
#[macro_export]
#[clippy::format_args]
macro_rules! print_if {
    ($condition:expr, $($args:tt)+) => {{
        if $condition {
            println!($($args)+)
        }
    }};
}
```

----------------------------------------

TITLE: Notifying Unused Dependencies in JavaScript
DESCRIPTION: This snippet details the JSON structure used when emitting warnings for unused crate dependencies via the `--json=unused-externs` and `--json=unused-externs-silent` flags. It includes the lint level for the warning and an array of unused crate names. This structure aids in notifying users about dependencies that can be removed from their `Cargo.toml` files. Dependencies involve integration with Rust's linting systems.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/json.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
{
    "lint_level": "deny", /* Level of the warning */
    "unused_names": [
        "foo"  /* Names of unused crates, as specified with --extern foo=libfoo.rlib */
    ],
}
```

----------------------------------------

TITLE: Calling stdcall_fn_6 - Rust
DESCRIPTION: This snippet calls the `stdcall_fn_6` function in Rust, passing a struct `S` with integer members as the argument. It demonstrates passing a struct as a function argument using the `stdcall` calling convention. The expected output depends on the implementation of `stdcall_fn_6`.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_5

LANGUAGE: Rust
CODE:
```
stdcall_fn_6(S { x: 10, y: 12 })
```

----------------------------------------

TITLE: Calling fastcall_fn_6 - Rust
DESCRIPTION: This snippet calls the `fastcall_fn_6` function in Rust, passing a struct `S` with integer members as an argument. It shows how to pass a struct when using the `fastcall` calling convention. The output will depend on the function's specific code.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_14

LANGUAGE: Rust
CODE:
```
fastcall_fn_6(S { x: 10, y: 12 })
```

----------------------------------------

TITLE: Defining a Coroutine with Multiple Parameters - Rust
DESCRIPTION: This snippet shows an erroneous implementation of a coroutine in Rust with two parameters. It demonstrates that Rust currently restricts coroutines to accept either zero or one parameter. The code yields the first parameter, causing a compile-time error due to the violation of the coroutine parameter rule.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0628.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#!\[feature(coroutines, coroutine_trait, stmt_expr_attributes)\]\n\nfn main() {\n    let coroutine = \#\[coroutine\] |a: i32, b: i32| {\n        // error: too many parameters for a coroutine\n        // Allowed only 0 or 1 parameter\n        yield a;\n    };\n}
```

----------------------------------------

TITLE: JSON Configuration Example
DESCRIPTION: This snippet demonstrates a simple JSON configuration used in the Rust Analyzer project, likely for settings or data serialization. It shows a key-value pair with "foo" as the key and "bar" as the value. This is a typical example of configuration data.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/xtask/test_data/expected.md#_snippet_0

LANGUAGE: json
CODE:
```
{"foo":"bar"}
```

----------------------------------------

TITLE: Illustrating Lifetime Inference Issues in Closures with Opaque Types
DESCRIPTION: This example demonstrates how external lifetimes in closures behave more like existential lifetimes, causing issues with the member constraints algorithm. It shows a case where the compiler cannot safely infer lifetime relationships.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/opaque-types-region-inference-restrictions.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
type Opaque<'x, 'y> = impl Sized;

// 
fn test<'a, 'b>(s: &'a str) -> impl FnOnce() -> Opaque<'a, 'b> {
    move || { s }
    //~^ ERROR hidden type for `Opaque<'_, '_>` captures lifetime that does not appear in bounds
}

// The above closure body is desugared into something like:
fn test::{closure#0}(_upvar: &'?8 str) -> Opaque<'?6, '?7> {
    return _upvar
}

// where `['?8, '?6, ?7]` are universal lifetimes *external* to the closure.
// There are no known relations between them *inside* the closure.
// But in the parent fn it is known that `'?6: '?8`.
//
// When encountering an opaque definition `Opaque<'?6, '?7> := &'8 str`,
// The member constraints algorithm does not know enough to safely make `?8 = '?6`.
// For this reason, it errors with a sensible message:
// "hidden type captures lifetime that does not appear in bounds".
```

----------------------------------------

TITLE: Example of On Enter Handling in Rust Comments
DESCRIPTION: Shows how the On Enter extension handles comment continuation, automatically adding the comment prefix to the new line while preserving the cursor position using snippets.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
fn main() {
    // Some /*cursor here*/ docs
    let x = 92;
}
```

----------------------------------------

TITLE: Valid DispatchFromDyn Implementation for Pointer Type
DESCRIPTION: Demonstrates correct implementation of DispatchFromDyn for a custom pointer type struct containing only a single pointer field.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0378.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(dispatch_from_dyn, unsize)]
use std::{
    marker::Unsize,
    ops::DispatchFromDyn,
};

struct Ptr<T: ?Sized>(*const T);

impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Ptr<U>> for Ptr<T>
where
    T: Unsize<U>,
{}
```

----------------------------------------

TITLE: Creating a Baremetal Rust Executable for Hexagon Standalone OS (Rust)
DESCRIPTION: Demonstrates a minimal `no_std`, `no_main` Rust program for the Hexagon target using `extern "C"` functions (`putchar`, `_exit`) likely provided by a C library or runtime for console output via semihosting and program termination. It defines a custom `main` function as the entry point and includes a basic panic handler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/hexagon-unknown-none-elf.md#_snippet_1

LANGUAGE: rust
CODE:
```
#![no_std]
#![no_main]

extern "C" {
    fn putchar(ch: i32);
    fn _exit(code: i32) -> !;
}

#[no_mangle]
extern "C" fn main() -> i32 {
    let message = "Hello, this is Rust!";
    for b in message.bytes() {
        unsafe {
            putchar(b as i32);
        }
    }
    0
}

#[panic_handler]
fn panic(_panic: &core::panic::PanicInfo) -> ! {
    unsafe {
        _exit(1);
    }
}

```

----------------------------------------

TITLE: Correct Intrinsic Function Declaration in Rust
DESCRIPTION: A corrected example showing how to properly declare an intrinsic function in Rust. The intrinsic is now defined as an unsafe function, which is the correct approach for compiler-handled special functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0622.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(intrinsics)]\n#![allow(internal_features)]\n\n#[rustc_intrinsic]\npub unsafe fn atomic_singlethreadfence_seqcst(); // ok!\n\nfn main() { unsafe { atomic_singlethreadfence_seqcst(); } }
```

----------------------------------------

TITLE: Demonstrating Deprecated Inline Assembly Error in Rust
DESCRIPTION: This code snippet demonstrates a previously emitted error when trying to pass an inappropriate value to an inline assembly operand. The error occurred when attempting to pass a value that represents a pair (like a slice) to an input operand expecting a single register value.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0669.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(llvm_asm)]

fn main() {
    unsafe {
        llvm_asm!("" :: "r"(""));
    }
}
```

----------------------------------------

TITLE: Installing MSYS2 Build Tools (Shell)
DESCRIPTION: Details the `pacman -S` command used within an MSYS2 MINGW shell to install the necessary build tools and libraries for compiling Rust. This includes core utilities like make, diffutils, and tar, as well as MinGW-specific packages for Python, CMake, GCC, and Ninja.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_9

LANGUAGE: Shell
CODE:
```
pacman -S make \
               diffutils \
               tar \
               mingw-w64-x86_64-python \
               mingw-w64-x86_64-cmake \
               mingw-w64-x86_64-gcc \
               mingw-w64-x86_64-ninja
```

----------------------------------------

TITLE: Incorrect SIMD Tuple Struct Implementation in Rust
DESCRIPTION: Shows incorrect implementation of a SIMD tuple struct where the field is not declared as an array, which results in compiler error E0076.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0076.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(repr_simd)]

#[repr(simd)]
struct Bad(u16); // error!
```

----------------------------------------

TITLE: Failing Coroutine Example (E0626)
DESCRIPTION: This code demonstrates the E0626 error.  A borrow `a` is created within the coroutine and is still in scope when the `yield` occurs, causing a compilation error. The coroutine is movable (unmarked or implicitly movable).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0626.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
# #![feature(coroutines, coroutine_trait, stmt_expr_attributes)]
# use std::ops::Coroutine;
# use std::pin::Pin;
let mut b = #[coroutine] || {
    let a = &String::new(); // <-- This borrow...
    yield (); // ...is still in scope here, when the yield occurs.
    println!("{}", a);
};
Pin::new(&mut b).resume(());
```

----------------------------------------

TITLE: Pattern Matching on Box<T> in Rust
DESCRIPTION: Demonstrates how to use box patterns to match and destructure Box<T> values in a match expression. The example shows matching on Some(Box<T>) variants and accessing the contained value using the box keyword pattern.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/box-patterns.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(box_patterns)]

fn main() {
    let b = Some(Box::new(5));
    match b {
        Some(box n) if n < 0 => {
            println!("Box contains negative number {n}");
        },
        Some(box n) if n >= 0 => {
            println!("Box contains non-negative number {n}");
        },
        None => {
            println!("No box");
        },
        _ => unreachable!()
    }
}
```

----------------------------------------

TITLE: Using c++filt with perf-focus
DESCRIPTION: Command to pipe perf script output through c++filt to decode C++ mangled names before analyzing with perf-focus. This improves readability of function names in the analysis.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_10

LANGUAGE: bash
CODE:
```
perf script | c++filt | perf focus --from-stdin ...
```

----------------------------------------

TITLE: Conflicting Packed Attributes - Compile Fail
DESCRIPTION: This code snippet demonstrates the E0634 error, which occurs when conflicting `packed` attributes are used on the same struct. The compiler will fail to compile this code.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0634.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
```compile_fail,E0634
#[repr(packed, packed(2))] // error!
struct Company(i32);

#[repr(packed(2))] // error!
#[repr(packed)]
struct Company(i32);
```
```

----------------------------------------

TITLE: Normalizing Comments in Rust
DESCRIPTION: Illustrates the effect of the normalize_comments option on converting block comments to line comments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_56

LANGUAGE: rust
CODE:
```
// Lorem ipsum:
fn dolor() -> usize {}

/* sit amet: */
fn adipiscing() -> usize {}
```

LANGUAGE: rust
CODE:
```
// Lorem ipsum:
fn dolor() -> usize {}

// sit amet:
fn adipiscing() -> usize {}
```

----------------------------------------

TITLE: Emitting a Lint with span_lint_and_help in EarlyLintPass - Rust
DESCRIPTION: Shows how to use span_lint_and_help inside check_fn to emit a lint diagnostic for every function definition encountered by the FooFunctions EarlyLintPass. The function emits a message for functions named 'foo', offering an extra help message but no direct suggestion. Required dependencies are Clippy's diagnostics utilities and the definition of FOO_FUNCTIONS. Inputs include the lint context, lint ID, span, main and help messages, and an optional suggestion (None). Use in unit/UI-tested lint passes; message style should follow rustc's conventions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_7

LANGUAGE: rust
CODE:
```
impl EarlyLintPass for FooFunctions {
    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, span: Span, _: NodeId) {
        span_lint_and_help(
            cx,
            FOO_FUNCTIONS,
            span,
            "function named `foo`",
            None,
            "consider using a more meaningful name"
        );
    }
}
```

----------------------------------------

TITLE: Adding Arm64EC Target in Bootstrap Configuration
DESCRIPTION: Configuration for enabling Arm64EC target support in Rust build process using bootstrap.toml configuration file. Requires adding the target to the build configuration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/arm64ec-pc-windows-msvc.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["arm64ec-pc-windows-msvc"]
```

----------------------------------------

TITLE: Defining Trait and Function for Type Search Example - Rust
DESCRIPTION: This snippet defines a Rust trait `MyTrait` with two associated types (`First`, `Second`) and a function `my_fn` that accepts an argument implementing `MyTrait` with specific associated type bindings (`First=u8`, `Second=u32`) and returns a boolean. It serves as a concrete example to demonstrate how Rustdoc's type-based search matches function signatures involving traits with specific associated type constraints, illustrating which search queries will match the function and which will not.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/read-documentation/search.md#_snippet_0

LANGUAGE: Rust
CODE:
```
pub trait MyTrait {
    type First;
    type Second;
}

/// This function can be found using the following search queries:
///
///     MyTrait<First=u8, Second=u32> -> bool
///     MyTrait<Second=u32> -> bool
///
/// The following queries, however, will *not* match it:
///
///     MyTrait<First=u32> -> bool
///     MyTrait<u32, u32> -> bool
///     MyTrait<u32, First=u8> -> bool
///     MyTrait<u32, u8> -> bool
pub fn my_fn(x: impl MyTrait<First=u8, Second=u32>) -> bool { true }
```

----------------------------------------

TITLE: Solution 2: Removing Integer Representation from Zero-Variant Enum in Rust
DESCRIPTION: This solution addresses the E0084 error by removing the integer representation attribute, allowing a zero-variant enum to be defined without specifying how its (non-existent) values should be represented.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0084.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
enum NightsWatch {}
```

----------------------------------------

TITLE: Converting Line Comments to Block Comments in Rust
DESCRIPTION: Shows how single-line comments can be converted to a multi-line block comment. This transformation is useful for maintaining consistent comment style in the codebase.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_77

LANGUAGE: rust
CODE:
```
   // Multi-line┃
   // comment
```

LANGUAGE: rust
CODE:
```
  /*
  Multi-line
  comment
  */
```

----------------------------------------

TITLE: Configuring Source Code Embedding in Rust Compiler Debug Information
DESCRIPTION: This snippet outlines the usage of the 'embed-source' flag in the Rust compiler. It controls whether the compiler embeds the program source code text into the object debug information section. The flag accepts various boolean-like values and is used in conjunction with DWARF debug information settings.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/embed-source.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `embed-source`

This flag controls whether the compiler embeds the program source code text into
the object debug information section. It takes one of the following values:

* `y`, `yes`, `on` or `true`: put source code in debug info.
* `n`, `no`, `off`, `false` or no value: omit source code from debug info (the default).

This flag is ignored in configurations that don't emit DWARF debug information
and is ignored on non-LLVM backends. `-Z embed-source` requires DWARFv5. Use
`-Z dwarf-version=5` to control the compiler's DWARF target version and `-g` to
enable debug info generation.
```

----------------------------------------

TITLE: Installing s390x Cross-Toolchain on Ubuntu
DESCRIPTION: This snippet demonstrates how to install a s390x cross-toolchain on Ubuntu using `apt`. This toolchain includes the GCC compiler, C++ compiler, and necessary development libraries for cross-compiling C and C++ code for the `s390x-unknown-linux-gnu` target. Installing these packages allows you to build C/C++ dependencies required by Rust crates targeting s390x.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/s390x-unknown-linux-gnu.md#2025-04-21_snippet_3

LANGUAGE: Bash
CODE:
```

```bash
apt install gcc-s390x-linux-gnu g++-s390x-linux-gnu libc6-dev-s390x-cross
```

```

----------------------------------------

TITLE: Calling stdcall_fn_4 - Rust
DESCRIPTION: This snippet calls the `stdcall_fn_4` function, passing three arguments: two integers (1 and 2) and a floating-point number (3.0). It demonstrates function calls with mixed data types and the `stdcall` calling convention. The behavior of `stdcall_fn_4` determines the output.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_3

LANGUAGE: Rust
CODE:
```
stdcall_fn_4(1, 2, 3.0)
```

----------------------------------------

TITLE: Library Linking with Static Archive Modifier
DESCRIPTION: Example of linking a static library using the whole-archive modifier, which includes all object files from the archive.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
-l static:+whole-archive=mylib
```

----------------------------------------

TITLE: Defining Enumeration for AST Variants - Rust
DESCRIPTION: This snippet illustrates the use of `enum` to model various types of associated items within the AST, such as function definitions, type aliases, and constants. This design allows for dynamic handling of different AST node types while implementing the `AstNode` trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/syntax.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum AssocItem {
    FnDef(FnDef),
    TypeAliasDef(TypeAliasDef),
    ConstDef(ConstDef),
}

impl AstNode for AssocItem {
    ...
}
```

----------------------------------------

TITLE: Disabling LLD Linker
DESCRIPTION: Example command showing how to explicitly disable LLD linker usage in Rust, which would opt out of using LLD even if the current target had self-contained linking enabled by default.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/linker-features.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
-Clinker-features=-lld
```

----------------------------------------

TITLE: Using the src-hash-algorithm Compiler Flag in Rust
DESCRIPTION: The `-Z src-hash-algorithm` flag allows specifying which algorithm (md5, sha1, or sha256) is used when the Rust compiler hashes source files for debug information. Support varies by debug info format, and the default is based on the target specification.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/src-hash-algorithm.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
-Z src-hash-algorithm
```

----------------------------------------

TITLE: Compile-Fail Example with Removed Feature
DESCRIPTION: This Rust code snippet uses the `compile_fail` attribute to demonstrate a compilation error. The error occurs because the code attempts to enable the `managed_boxes` feature, which has been removed from the Rust language. The expected output is a compilation error with code E0557.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0557.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"#![feature(managed_boxes)] // error: feature has been removed"
```

----------------------------------------

TITLE: Missing 'issue' Field in Stability Attributes (Error E0547)
DESCRIPTION: This code example demonstrates the E0547 error that occurs when the 'issue' field is missing in stability attributes like #[unstable] and #[rustc_const_unstable]. The error occurs in the context of Rust's staged API feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0547.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(staged_api)]
#![allow(internal_features)]
#![stable(since = "1.0.0", feature = "test")]

#[unstable(feature = "_unstable_fn")] // invalid
fn _unstable_fn() {}

#[rustc_const_unstable(feature = "_unstable_const_fn")] // invalid
const fn _unstable_const_fn() {}
```

----------------------------------------

TITLE: Visual Style Alignment for Control Flow in Rust
DESCRIPTION: Demonstrates the 'Visual' alignment style for control flow statements. In this style, conditions after the first line are aligned with the start of the first condition.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_28

LANGUAGE: rust
CODE:
```
fn main() {
    if lorem_ipsum
       && dolor_sit
       && amet_consectetur
       && lorem_sit
       && dolor_consectetur
       && amet_ipsum
       && lorem_consectetur
    {
        // ...
    }
}
```

----------------------------------------

TITLE: Unterminated Raw String Literal in Rust
DESCRIPTION: An example of a Rust compilation error caused by a raw string literal that doesn't have the correct termination sequence. The raw string starts with 'r##"' and includes an escape sequence '\x7f', but is missing the closing '"##' delimiter.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_raw_string_with_ascii_escape.txt#_snippet_0

LANGUAGE: rust
CODE:
```
r##"\x7f
```

----------------------------------------

TITLE: Declaring Negative Trait Implementation in Rust
DESCRIPTION: Example showing how to use the negative_impls feature gate to explicitly declare that a reference type does not implement the DerefMut trait. This demonstrates the basic syntax for negative implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/negative-impls.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(negative_impls)]
trait DerefMut { }
impl<T: ?Sized> !DerefMut for &T { }
```

----------------------------------------

TITLE: Multiple env-set Arguments Example 1
DESCRIPTION: Example showing how to set multiple environment variables using separate --env-set flags. This establishes baseline values that will be checked for changes in subsequent compilations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/env-set.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
--env-set A=B --env X=12
```

----------------------------------------

TITLE: Running cargo-fmt on a Project
DESCRIPTION: This command demonstrates how to run cargo-fmt, potentially using a locally built version of rustfmt, on a specified project by providing a path to its `Cargo.toml` file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Contributing.md#_snippet_2

LANGUAGE: Rust
CODE:
```
RUSTFMT="./target/debug/rustfmt" cargo run --bin cargo-fmt -- --manifest-path path/to/project/you/want2test/Cargo.toml
```

----------------------------------------

TITLE: String Literal Formatting Options
DESCRIPTION: Shows how string literal formatting can be controlled in Rust code
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_22

LANGUAGE: rust
CODE:
```
fn main() {
    let lorem = "ipsum dolor sit amet consectetur adipiscing elit lorem ipsum dolor sit amet consectetur adipiscing";
}
```

----------------------------------------

TITLE: Monomorphization Example
DESCRIPTION: This code demonstrates a simple example used to explain monomorphization collection.  The `banana` function calls the generic `peach` function with a concrete type `u64`. The monomorphization collector identifies `main`, `banana`, and `peach::<u64>` as functions that require machine code generation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/monomorph.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn banana() {
   peach::<u64>();
}

fn main() {
    banana();
}
```

----------------------------------------

TITLE: Implementing Custom Box Type with Lang Items in Rust
DESCRIPTION: This code snippet demonstrates how to implement a custom `Box` type in a freestanding Rust program using lang items. It includes implementations for memory allocation, deallocation, and necessary language items for a basic executable without the standard library.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/lang-items.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(lang_items, core_intrinsics, rustc_private, panic_unwind, rustc_attrs)]
#![allow(internal_features)]
#![no_std]
#![no_main]

extern crate libc;
extern crate unwind;

use core::ffi::{c_int, c_void};
use core::intrinsics;
use core::panic::PanicInfo;
use core::ptr::NonNull;

pub struct Global; // the global allocator
struct Unique<T>(NonNull<T>);

#[lang = "owned_box"]
pub struct Box<T, A = Global>(Unique<T>, A);

impl<T> Box<T> {
    pub fn new(x: T) -> Self {
        #[rustc_box]
        Box::new(x)
    }
}

impl<T, A> Drop for Box<T, A> {
    fn drop(&mut self) {
        unsafe {
            libc::free(self.0.0.as_ptr() as *mut c_void);
        }
    }
}

#[lang = "exchange_malloc"]
unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {
    let p = libc::malloc(size) as *mut u8;

    // Check if `malloc` failed:
    if p.is_null() {
        intrinsics::abort();
    }

    p
}

#[no_mangle]
extern "C" fn main(_argc: c_int, _argv: *const *const u8) -> c_int {
    let _x = Box::new(1);

    0
}

#[lang = "eh_personality"]
fn rust_eh_personality() {}

#[panic_handler]
fn panic_handler(_info: &PanicInfo) -> ! { intrinsics::abort() }
```

----------------------------------------

TITLE: Implementing a Function with "rust-call" ABI in Rust
DESCRIPTION: This snippet demonstrates how to use the `unboxed_closures` feature to create a function with the "rust-call" ABI. The function `add_args` takes a tuple of two u32 values as its single argument and returns their sum.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/unboxed-closures.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(unboxed_closures)]

extern "rust-call" fn add_args(args: (u32, u32)) -> u32 {
    args.0 + args.1
}

fn main() {}
```

----------------------------------------

TITLE: Styling Documentation Interface with CSS
DESCRIPTION: CSS styles for documentation navigation, search functionality, and external link indicators. Includes responsive design elements and hover states for interactive components.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/index.md#2025-04-21_snippet_0

LANGUAGE: css
CODE:
```
nav {
    display: none;
}
h3 {
    font-size: 1.35rem;
}
h4 {
    font-size: 1.1rem;
}

#search-input {
    width: calc(100% - 58px);
}
#search-but {
    cursor: pointer;
}
#search-but, #search-input {
    padding: 4px;
    border: 1px solid #ccc;
    border-radius: 3px;
    outline: none;
    font-size: 0.7em;
    background-color: #fff;
}
#search-but:hover, #search-input:focus {
    border-color: #55a9ff;
}

svg.external-link {
  display: inline-block;
  position: relative;
  vertical-align: super;
  width: 0.7rem;
  height: 0.7rem;
  padding-left: 2px;
  top: 3px;
}
```

----------------------------------------

TITLE: Filtered #[rustc_on_unimplemented] Error Messages for Iterator Trait
DESCRIPTION: Demonstrates how to create targeted error messages for the Iterator trait using the 'on' filter to provide different guidance based on the specific type that's missing the implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_19

LANGUAGE: rust
CODE:
```
#[rustc_on_unimplemented(
    on(
        _Self="&str",
        note="call `.chars()` or `.as_bytes()` on `{Self}`"
    ),
    message="`{Self}` is not an iterator",
    label="`{Self}` is not an iterator",
    note="maybe try calling `.iter()` or a similar method"
)]
pub trait Iterator {}
```

----------------------------------------

TITLE: Defining Types in Modules
DESCRIPTION: This snippet defines two modules with functions that demonstrate different type aliases in Rust. It highlights how `rustc_hir::Ty` views type definitions as aliases, while `ty::Ty` expands them to their actual underlying types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
mod a {
    type X = u32;
    pub fn foo(x: X) -> u32 { 22 }
}
mod b {
    type X = i32;
    pub fn foo(x: X) -> i32 { x }
}
```

----------------------------------------

TITLE: Set Crate Version in rustdoc Sidebar (bash)
DESCRIPTION: Illustrates using the `--crate-version` flag to specify a version string that `rustdoc` will display in the sidebar of the crate root documentation. This helps differentiate docs for different library versions and requires a version string.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_29

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --crate-version 1.3.37
```

----------------------------------------

TITLE: Specifying the linker plugin path with rustc
DESCRIPTION: This snippet shows how to explicitly specify the path to the LLVM linker plugin using the `-Clinker-plugin-lto` option with `rustc`. This is necessary when using a linker other than LLD.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/linker-plugin-lto.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
"rustc -Clinker-plugin-lto=\"/path/to/LLVMgold.so\" -L. -Copt-level=2 ./main.rs"
```

----------------------------------------

TITLE: Generic List Structure Definition in Rust
DESCRIPTION: Defines a generic recursive List structure used to demonstrate auto trait implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/auto-traits.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct List<T> {
  data: T,
  next: Option<Box<List<T>>>,
}
```

----------------------------------------

TITLE: Configuring proc-macro support in vim-lsp
DESCRIPTION: This Vim script snippet registers the `rust-analyzer` binary and configures the LSP client to enable proc-macro support.  It defines initialization options to enable cargo build scripts and proc macro processing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/other_editors.md#_snippet_7

LANGUAGE: Vim Script
CODE:
```
if executable('rust-analyzer')
  au User lsp_setup call lsp#register_server({
        \   'name': 'Rust Language Server',
        \   'cmd': {server_info->['rust-analyzer']},
        \   'whitelist': ['rust'],
        \   'initialization_options': {
        \     'cargo': {
        \       'buildScripts': {
        \         'enable': v:true,
        \       },
        \     },
        \     'procMacro': {
        \       'enable': v:true,
        \     },
        \   },
        \ })
endif
```

----------------------------------------

TITLE: Transforming Conditional Feature-Gated Code for Stabilization
DESCRIPTION: Examples showing how to modify code that conditionally executes based on feature flag status. When stabilizing, the feature check can be removed as the feature is now always enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/stabilization_guide.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
if self.tcx.sess.features.borrow().pub_restricted { /* XXX */ }
```

LANGUAGE: rust
CODE:
```
if self.tcx.sess.features.borrow().pub_restricted && something { /* XXX */ }
```

----------------------------------------

TITLE: Generating C-like Debug Output for libgccjit Context
DESCRIPTION: This function call generates a C-like file with debug information for the libgccjit context, including source locations in the IR. It's useful for identifying the exact location of errors in the generated code.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/debugging-libgccjit.md#2025-04-21_snippet_0

LANGUAGE: c
CODE:
```
gcc_jit_context_dump_to_file(ctxt, "/tmp/output.c", 1 /* update_locations */)
```

----------------------------------------

TITLE: Gating Formatting Changes with style_edition
DESCRIPTION: This code snippet shows how to conditionally apply formatting changes based on the `style_edition` configuration setting, ensuring backwards compatibility and adhering to the Style Edition process in Rustfmt.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Contributing.md#_snippet_3

LANGUAGE: Rust
CODE:
```
// if the current stable Style Edition is Edition 2024
if config.style_edition() <= StyleEdition::Edition2024 {
    // current formatting
} else {
    // new formatting
}
```

----------------------------------------

TITLE: Annotating Error on Same Line (Rust)
DESCRIPTION: Demonstrates using the `//~ ERROR` idiom to place a diagnostic annotation directly on the source code line that is expected to generate the error or warning. This is the most common and preferred method when a specific span is available.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_3

LANGUAGE: Rust
CODE:
```
fn main() {
    let x = (1, 2, 3);
    match x {
        (_a, _x @ ..) => {} //~ ERROR `_x @` is not allowed in a tuple
        _ => {}
    }
}
```

----------------------------------------

TITLE: Debugging with Source Code Display
DESCRIPTION: Enhanced debugger launch command that includes source code paths for both Rust and Fuchsia
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_27

LANGUAGE: sh
CODE:
```
${SDK_PATH}/tools/${ARCH}/ffx debug connect -- \
    --symbol-path target/x86_64-unknown-fuchsia/debug \
    --build-dir ${RUST_SRC_PATH}/rust \
    --build-dir ${FUCHSIA_SRC_PATH}/fuchsia/out/default
```

----------------------------------------

TITLE: Building a Rust Binary
DESCRIPTION: This shell command compiles the Rust project for the x86_64-unknown-fuchsia target, creating a binary in the target directory. Ensure all configurations and dependencies are set up prior to building.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
cargo build --target x86_64-unknown-fuchsia
```

----------------------------------------

TITLE: Configuring Debug Information in Cargo.toml
DESCRIPTION: TOML configuration to enable debug information for the LSP server build. This should be added to the Cargo.toml file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/debugging.md#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[profile.dev]
debug = 2
```

----------------------------------------

TITLE: Configuration Names Without Values Example in Rust
DESCRIPTION: Demonstrates checking configuration names without specific values using values(any()).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/check-cfg.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#[cfg(is_embedded)]      
fn do_embedded() {}

#[cfg(has_feathers)]     
fn do_features() {}

#[cfg(has_feathers = "zapping")] 
fn do_zapping() {}

#[cfg(has_mumble_frotz)] 
fn do_mumble_frotz() {}
```

----------------------------------------

TITLE: Feature Configuration Example in Rust
DESCRIPTION: Demonstrates usage of feature flags with conditional compilation and their validation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/check-cfg.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#[cfg(feature = "lion")]     
fn tame_lion(lion: Lion) {}

#[cfg(feature = "zebra")]    
fn ride_zebra(z: Zebra) {}

#[cfg(feature = "platypus")] 
fn poke_platypus() {}

#[cfg(feechure = "lion")]    
fn tame_lion() {}

#[cfg(windows = "unix")]     
fn tame_windows() {}
```

----------------------------------------

TITLE: Correct Unwind Attribute Usage in Rust
DESCRIPTION: Shows two valid ways to use the unwind attribute with different behaviors for non-Rust ABI functions. The 'aborts' option is recommended for safety
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0633.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[unwind(aborts)]    // Safer option: abort process on unwind\n#[unwind(allowed)]  // Potentially unsafe: allow unwinding
```

----------------------------------------

TITLE: Multi-file Rust Program - Foo Module
DESCRIPTION: Supporting module file containing a function that prints 'Hello, world!'
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/what-is-rustc.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
pub fn hello() {
    println!("Hello, world!");
}
```

----------------------------------------

TITLE: Calling stdcall_fn_7 - Rust
DESCRIPTION: This snippet calls the `stdcall_fn_7` function in Rust, passing a struct `S2` with integer members and an integer (3) as arguments.  It highlights the passing of a struct and an integer with the `stdcall` convention.  The behaviour of `stdcall_fn_7` will dictate the response.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_6

LANGUAGE: Rust
CODE:
```
stdcall_fn_7(S2 { x: 15, y: 16 }, 3)
```

----------------------------------------

TITLE: JIT Mode Execution with Cargo-Clif
DESCRIPTION: Command to execute Rust code immediately using JIT mode through Cargo integration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/docs/usage.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ $cg_clif_dir/dist/cargo-clif jit
```

----------------------------------------

TITLE: Conflicting Trait Implementation Example in Rust
DESCRIPTION: Demonstrates an error case (E0751) where both a positive and negative trait implementation are defined for the same type (i32). This is not allowed because negative implementations promise that the trait will never be implemented for the given types.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0751.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait MyTrait {}
impl MyTrait for i32 { }
impl !MyTrait for i32 { } // error!
```

----------------------------------------

TITLE: Updating MSYS2 Package Mirrors (Shell)
DESCRIPTION: Shows the command using `pacman`, the package manager within the MSYS2 environment, to synchronize the package database mirrors. This step is recommended to ensure that subsequent package installation commands pull from up-to-date sources.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_8

LANGUAGE: Shell
CODE:
```
pacman -Sy pacman-mirrors
```

----------------------------------------

TITLE: Building Specific Documentation - Bash
DESCRIPTION: This snippet shows how to build documentation for specific components or books within the Rust documentation. It allows customization by specifying target documentation paths.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/compiler-documenting.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
./x doc src/doc/book
```

LANGUAGE: bash
CODE:
```
./x doc src/doc/nomicon
```

LANGUAGE: bash
CODE:
```
./x doc compiler library
```

----------------------------------------

TITLE: Correct Usage of offset_of! Macro with Enum Variants in Rust
DESCRIPTION: This example shows the proper way to use offset_of! with enum variants by specifying a field within the variant. Here, 'Some.0' correctly accesses the contained u8 field inside the Some variant of Option<u8>.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0795.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(offset_of_enum)]

let x: usize = std::mem::offset_of!(Option<u8>, Some.0);
```

----------------------------------------

TITLE: Representing Async Closures in HIR
DESCRIPTION: This snippet shows how async closures are represented within the High-Level Intermediate Representation (HIR) in Rust. Async closures are depicted as `hir::Closure` with a specific `ClosureKind` wrapping an async block, capturing arguments with `CaptureBy::ByRef`. This representation is crucial for correctly handling closure arguments and indicates how the async block should behave with respect to argument moving and borrowing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/coroutine-closures.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
hir::Closure whose closure-kind is `ClosureKind::CoroutineClosure(_)`
```

----------------------------------------

TITLE: Computing SCC Values with Successors
DESCRIPTION: Illustrates the process of computing the value of an SCC based on the values of its successors in the DAG of SCCs. The code shows how the value of an SCC (`S1`) is determined by unioning the values of all its successors (`S2`). The successors are mapped to their corresponding `Values`, and the union of these `Values` is assigned to `Values(S1)`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/constraint_propagation.md#2025-04-21_snippet_4

LANGUAGE: Text
CODE:
```
Values(S1) =
  s1.successors()
    .map(|s2| Values(s2))
    .union()
```

----------------------------------------

TITLE: Checking Pointer Alignment in Rust
DESCRIPTION: This snippet demonstrates how to check the alignment of a pointer in Rust. It uses the align_of function to get the required alignment for a type and compares it with the pointer's address.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use std::mem;

let mut x = 5;
let ptr = &mut x as *mut i32;
let address = ptr as usize;

assert!(address % mem::align_of::<i32>() == 0);
```

----------------------------------------

TITLE: Associated Type Defaults vs RPITIT
DESCRIPTION: This Rust code demonstrates a scenario where using associated type defaults instead of RPITIT fails. The core issue is that associated type defaults can't be assumed inside the trait defining them, leading to type mismatches if the impl doesn't provide a specific implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/return-position-impl-trait-in-trait.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
```rust
#![feature(impl_trait_in_assoc_type)]
#![feature(associated_type_defaults)]

trait Foo {
    type RPITIT = impl Sized;

    fn bar() -> Self::RPITIT {
        01i32
    }
}
```
```

----------------------------------------

TITLE: Setting Up Rust Toolchain for Miri
DESCRIPTION: This snippet explains how to install the exact version of rustc that Miri requires using rustup. It sets up a toolchain called 'miri' as an override for the current directory.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
./miri toolchain
```

----------------------------------------

TITLE: Override rustdoc System Root (bash)
DESCRIPTION: Illustrates using the `--sysroot` flag to specify an alternative sysroot path for `rustdoc`. This overrides the default system root used when compiling code, similar to the `rustc --sysroot` flag, and requires a valid path to the sysroot directory.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_25

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --sysroot /path/to/sysroot
```

----------------------------------------

TITLE: Using rustc_interface::run_compiler in Rust
DESCRIPTION: The main entry point of rustc_interface, which takes a compiler configuration and a closure with an unresolved Compiler to manually drive the compilation process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustc-driver/intro.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
rustc_interface::run_compiler
```

----------------------------------------

TITLE: Publishing clippy_utils - Bash
DESCRIPTION: This command sequence publishes the `clippy_utils` crate to `crates.io`. It first switches to the `master` branch, pulls the latest changes from `upstream`, and then uses `cargo publish` to publish the crate.  It requires the Rustup PR bumping nightly and Clippy versions to be merged first.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/release.md#_snippet_7

LANGUAGE: bash
CODE:
```
git switch master && git pull upstream master
cargo publish --manifest-path clippy_utils/Cargo.toml
```

----------------------------------------

TITLE: Calling fastcall_fn_10 - Rust
DESCRIPTION: This snippet calls the `fastcall_fn_10` function in Rust, passing an integer argument (19). It demonstrates how to call functions with the `fastcall` calling convention using a single integer as a parameter. The output will depend on what `fastcall_fn_10` does.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_17

LANGUAGE: Rust
CODE:
```
fastcall_fn_10(19)
```

----------------------------------------

TITLE: Creating a Rust Library for Hexagon QuRT OS (Rust)
DESCRIPTION: Shows a `no_std`, `no_main` Rust library designed for the Hexagon QuRT OS environment. It enables specific nightly features (`lang_items`, `asm_experimental_arch`), uses `extern "C"` functions for semihosting (`putchar`, `_exit`), defines a function `hello` callable from C, demonstrates Hexagon-specific inline assembly using `asm!`, includes a panic handler, and provides the required `eh_personality` lang item.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/hexagon-unknown-none-elf.md#_snippet_3

LANGUAGE: rust
CODE:
```
#![no_std]
#![no_main]
#![feature(lang_items)]
#![feature(asm_experimental_arch)]

use core::arch::asm;

extern "C" {
    fn putchar(ch: i32);
    fn _exit(code: i32) -> !;
}

fn hexagon_specific() {
    let mut buffer = [0_u8; 128];

    unsafe {
        let mut x = &buffer;
        asm!(
                "{{\n\t",
                "  v0=vmem({addr}+#0)\n\t",
                "  {tmp} = and({tmp}, #1)\n\t",
                "}}\n\t",
                addr = in(reg) x,
                tmp = out(reg) _,
            );
    }
}

#[no_mangle]
extern "C" fn hello() -> i32 {
    let message = "Hello, this is Rust!\n";
    for b in message.bytes() {
        unsafe {
            putchar(b as i32);
        }
    }
    hexagon_specific();
    0
}

#[panic_handler]
fn panic(_panic: &core::panic::PanicInfo) -> ! {
    unsafe {
        _exit(1);
    }
}

#[lang = "eh_personality"]
fn rust_eh_personality() {}
```

----------------------------------------

TITLE: Defining Package Dependencies and Origin for libc Crate in Rust
DESCRIPTION: This snippet shows the dependency configuration and origin information for the libc crate. It includes the repository URL, crate name, and specifies that it's not a procedural macro.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
dependencies: [],
origin: Library {
    repo: Some(
        "https://github.com/rust-lang/libc",
    ),
    name: "libc",
},
is_proc_macro: false,
proc_macro_cwd: Some(
    AbsPathBuf(
        "$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98",
    ),
),
```

----------------------------------------

TITLE: Incomplete Character Literal - Error Example
DESCRIPTION: Shows incorrect syntax for a character literal where the closing quote is missing, resulting in error E0762.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0762.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
static C: char = '●; // error!
```

----------------------------------------

TITLE: Basic Unwrap Panic Example in Rust
DESCRIPTION: Demonstrates how unwrap() panic messages display caller location information differently between Rust versions 1.41 and 1.42.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/implicit-caller-location.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let foo: Option<()> = None;
    foo.unwrap(); // this should produce a useful panic message!
}
```

----------------------------------------

TITLE: Command Line Example for Retrieving Deployment Target
DESCRIPTION: Command to check the current default deployment target for rustc
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-darwin.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
rustc --print=deployment-target
```

----------------------------------------

TITLE: Compiling Rust Program for Apple tvOS Target
DESCRIPTION: Command-line example for compiling a Rust program specifically for the aarch64-apple-tvos target architecture using rustc compiler with explicit target specification.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-tvos.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ rustc --target aarch64-apple-tvos your-code.rs
```

----------------------------------------

TITLE: Annotating Types with significant_drop Attribute in Rust
DESCRIPTION: The `#[clippy::has_significant_drop]` attribute is used to mark types whose `Drop` implementations have important side effects, such as unlocking a mutex. This helps users understand the lifetimes of these types accurately, especially when dealing with temporary values in match scrutinees. The attribute signals to Clippy that the drop implementation has a notable impact and should be carefully considered.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/attribs.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[clippy::has_significant_drop]
struct CounterWrapper<'a> {
    counter: &'a Counter,
}

impl<'a> Drop for CounterWrapper<'a> {
    fn drop(&mut self) {
        self.counter.i.fetch_sub(1, Ordering::Relaxed);
    }
}
```

----------------------------------------

TITLE: Configuring Linting of Collapsible If Chains in Rust
DESCRIPTION: This setting determines if collapsible `if` chains are linted when they contain comments inside the parts that would be collapsed.  It affects the `collapsible_if` lint. The default value is `false`, meaning commented-out code within `if` chains won't be checked. This configuration uses a boolean value.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_23



----------------------------------------

TITLE: Method Shadowing Error Example with Pin in Rust
DESCRIPTION: Demonstrates a method shadowing error that occurs when a method exists both on a smart pointer and its referent type. This example shows a compile error due to multiple applicable items in scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/arbitrary-self-types.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use std::pin::Pin;
use std::pin::pin;

struct A;

impl A {
    fn get_ref(self: Pin<&A>) {}
}

fn main() {
    let pinned_a: Pin<&A> = pin!(A).as_ref();
    let pinned_a: Pin<&A> = pinned_a.as_ref();
    pinned_a.get_ref(); // error[E0034]: multiple applicable items in scope
}
```

----------------------------------------

TITLE: Checking if Expression Calls Specific Method in Rustc Lint - Rust
DESCRIPTION: Illustrates how to determine if a given expression in the linting context is a method call to a specific method, identified by name. It matches on the expression's kind to detect method calls and compares the method name string. Additional checks, such as examining the type of the self argument, can be added as needed. This snippet requires Rustc HIR (`hir::ExprKind`) and linting context (`LateContext`).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/common_tools_writing_lints.md#_snippet_1

LANGUAGE: rust
CODE:
```
impl<'tcx> LateLintPass<'tcx> for MyStructLint {
    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {
        // Check our expr is calling a method
        if let hir::ExprKind::MethodCall(path, _, _self_arg, ..) = &expr.kind
            // Check the name of this method is `some_method`
            && path.ident.name.as_str() == "some_method"
            // Optionally, check the type of the self argument.
            // - See "Checking for a specific type"
        {
                // ...
        }
    }
}
```

----------------------------------------

TITLE: Multiple env-set Arguments Example 2
DESCRIPTION: Example showing a subsequent compilation with fewer environment variables set. This would trigger recompilation since the X variable is no longer specified.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/env-set.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
--env-set A=B
```

----------------------------------------

TITLE: Conditionally Emitting Lint for Functions Named 'foo' - Rust
DESCRIPTION: Updates the EarlyLintPass implementation to only emit a lint if the function being checked is named 'foo'. The added is_foo_fn function encapsulates the name matching logic, improving code clarity and potential testability. Dependencies include the is_foo_fn utility and span_lint_and_help. Parameters are the same as the base check_fn, and an ident.name comparison is used for detection. Limitations: this approach ignores closures and other item kinds by design.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_8

LANGUAGE: rust
CODE:
```
impl EarlyLintPass for FooFunctions {
    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, span: Span, _: NodeId) {
        if is_foo_fn(fn_kind) {
            span_lint_and_help(
                cx,
                FOO_FUNCTIONS,
                span,
                "function named `foo`",
                None,
                "consider using a more meaningful name"
            );
        }
    }
}
```

----------------------------------------

TITLE: Error Output with Customized Components
DESCRIPTION: Shows the compiler error output when using a #[rustc_on_unimplemented] attribute with customized message, label, and note components.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_18

LANGUAGE: text
CODE:
```
error[E0277]: message
  --> <anon>:14:5
   |
14 |     iterate_chars(&[1, 2, 3][..]);
   |     ^^^^^^^^^^^^^ label
   |
   = note: note
   = help: the trait `MyIterator<char>` is not implemented for `&[{integer}]`
   = note: required by `iterate_chars`
```

----------------------------------------

TITLE: Modifying C Test File for GIMPLE Generation
DESCRIPTION: This snippet shows the modifications made to a C test file to prepare it for GIMPLE generation. It removes unnecessary content and test-specific code.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/gimple.md#2025-04-21_snippet_0

LANGUAGE: diff
CODE:
```
- /* { dg-do compile { target x86_64-*-* } } */
...
- /* We don't want set_options() in harness.h to set -O3 to see that the const
-    attribute affects the optimizations. */
- #define TEST_ESCHEWS_SET_OPTIONS
- static void set_options (gcc_jit_context *ctxt, const char *argv0)
- {
-   // Set "-O3".
-   gcc_jit_context_set_int_option(ctxt, GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL, 3);
- }
-
- #define TEST_COMPILING_TO_FILE
- #define OUTPUT_KIND      GCC_JIT_OUTPUT_KIND_ASSEMBLER
- #define OUTPUT_FILENAME  "output-of-test-const-attribute.c.s"
- #include "harness.h"
...
- /* { dg-final { jit-verify-output-file-was-created "" } } */
- /* Check that the loop was optimized away */
- /* { dg-final { jit-verify-assembler-output-not "jne" } } */
```

----------------------------------------

TITLE: Installing libgccjit-12-dev
DESCRIPTION: This command installs the `libgccjit-12-dev` package using `apt`. This package is required for `rustc_codegen_gcc`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_13

LANGUAGE: text
CODE:
```

apt install libgccjit-12-dev

```

----------------------------------------

TITLE: Viewing Basic perf Report
DESCRIPTION: Simple command to display the interactive TUI report of the collected perf data. This provides a basic analysis of where time was spent during execution.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
perf report
```

----------------------------------------

TITLE: Configuring docs.rs to use rustdoc-scrape-examples
DESCRIPTION: This snippet shows how to configure `docs.rs` to enable the `rustdoc-scrape-examples` feature.  The `cargo-args` array in the `package.metadata.docs.rs` section of `Cargo.toml` specifies the arguments to pass to `cargo doc` when generating documentation on `docs.rs`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/scraped-examples.md#2025-04-21_snippet_3

LANGUAGE: toml
CODE:
```
"[package.metadata.docs.rs]
cargo-args = [\"-Zunstable-options\", \"-Zrustdoc-scrape-examples\"]"
```

----------------------------------------

TITLE: Enabling Control Flow Guard in Rust
DESCRIPTION: This flag controls whether LLVM enables the Windows Control Flow Guard security feature.  It takes values such as `y`, `yes`, `on`, `true`, `checks`, `nochecks`, `n`, `no`, `off`, or `false`.  The `nochecks` option enables metadata without runtime enforcement checks.  This flag is currently ignored for non-Windows targets.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_3



----------------------------------------

TITLE: Implementing Diagnostic Trait in Rust
DESCRIPTION: This code snippet shows an implementation of the `Diagnostic` trait for a struct, used within the Rust compiler to handle diagnostics. The implementation focuses on creating a diagnostic context, setting spans, and labels for detailed error reporting. Dependencies include the `Diagnostic` trait, `EmissionGuarantee`, and associated context objects. Essential functions like `into_diag` create and populate diagnostic messages which can be emitted by the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/diagnostic-structs.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
impl<'a, G: EmissionGuarantee> Diagnostic<'a> for FieldAlreadyDeclared {\n    fn into_diag(self, dcx: &'a DiagCtxt, level: Level) -> Diag<'a, G> {\n        let mut diag = Diag::new(dcx, level, fluent::hir_analysis_field_already_declared);\n        diag.set_span(self.span);\n        diag.span_label(\n            self.span,\n            fluent::hir_analysis_label\n        );\n        diag.span_label(\n            self.prev_span,\n            fluent::hir_analysis_previous_decl_label\n        );\n        diag\n    }\n}
```

----------------------------------------

TITLE: Enabling ptrace for Debugging on Linux
DESCRIPTION: Command to enable ptrace for unrelated processes on Linux, which may be necessary when attaching a debugger to a running rust-analyzer server.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/debugging.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
```

----------------------------------------

TITLE: Valid and Invalid Zero-Sized Transparent Unions in Rust
DESCRIPTION: Shows examples of valid non-transparent unions and invalid transparent unions with only zero-sized fields. Transparent unions must have exactly one non-zero-sized field.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/transparent-unions.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(transparent_unions)]

// This (non-transparent) union is already valid in stable Rust:
pub union GoodUnion {
    pub nothing: (),
}

// Error: transparent union needs exactly one non-zero-sized field, but has 0
// #[repr(transparent)]
// pub union BadUnion {
//     pub nothing: (),
// }
```

----------------------------------------

TITLE: Configuring Rust Test Suite for Fuchsia
DESCRIPTION: Example of environment variables to set for running the Rust test suite on Fuchsia.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_22

LANGUAGE: sh
CODE:
```
# TEST_TOOLCHAIN_TMP_DIR can point anywhere, but it:
#  - must be less than 108 characters, otherwise qemu can't handle the path
#  - must be consistent across calls to this file (don't use `mktemp -d` here)
export TEST_TOOLCHAIN_TMP_DIR="/tmp/rust-tmp"
```

----------------------------------------

TITLE: Deprecated Range Pattern Syntax in Rust
DESCRIPTION: Example showing the now-invalid use of ... range pattern syntax in a match expression that will fail to compile with error E0783.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0783.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
match 2u8 {
    0...9 => println!("Got a number less than 10"), // error!
    _ => println!("Got a number 10 or more"),
}
```

----------------------------------------

TITLE: Rust 2015 External Crate Import
DESCRIPTION: Demonstrates how to import from external crates in Rust 2015 using extern crate declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0432.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
extern crate core; // Required to use the `core` crate in Rust 2015.

use core::any;
# fn main() {}
```

----------------------------------------

TITLE: Implementing Postfix Match Pattern in Rust
DESCRIPTION: Demonstrates the usage of postfix match feature in Rust using an enum example. Shows how to apply pattern matching directly after an expression using the postfix syntax, rather than the traditional match statement format.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/postfix-match.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(postfix_match)]

enum Foo {
    Bar,
    Baz
}

fn get_foo() -> Foo {
    Foo::Bar
}

get_foo().match {
    Foo::Bar => {},
    Foo::Baz => panic!(),
}
```

----------------------------------------

TITLE: Using a Salsa Database in a Rust Application
DESCRIPTION: Example showing how to use a Salsa database in a Rust application. This demonstrates creating the database, setting input values, and repeatedly calling queries that will automatically reuse previous results when possible.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/salsa.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
fn main() {
    let db = MyDatabase::default();
    db.set_manifest(...);
    db.set_source_text(...);
    loop {
        db.ast(...); //will reuse results
        db.set_source_text(...);
    }
}
```

----------------------------------------

TITLE: Demonstrating Deprecated LLVM Assembly Macro Error in Rust
DESCRIPTION: This code snippet shows an example of incorrectly using the llvm_asm macro, which would have previously triggered a compiler error. The macro is called with two separate string literals instead of a single, properly formatted string.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0660.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
llvm_asm!("nop" "nop");
```

----------------------------------------

TITLE: Setting RUSTC_BOOTSTRAP in UI Tests
DESCRIPTION: Example showing how to set RUSTC_BOOTSTRAP environment variable in UI tests using rustc-env comments to enable unstable features or force stable compiler behavior.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/misc.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// Force unstable features to be usable on stable rustc
//@ rustc-env:RUSTC_BOOTSTRAP=1

// Or force nightly rustc to pretend it is a stable rustc
//@ rustc-env:RUSTC_BOOTSTRAP=-1
```

----------------------------------------

TITLE: Environment Variable Configuration - Rust Test Timing
DESCRIPTION: Demonstrates the format for setting test execution time thresholds using environment variables.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/report-time.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
RUST_TEST_TIME_UNIT=100,200
```

----------------------------------------

TITLE: Redirecting control flow to a function with different parameter and return types in Rust
DESCRIPTION: This example demonstrates how CFI prevents calling a function with different parameter and return types than expected at the call site. The code attempts to call a function operating on i64 values through a function pointer type for i32 values.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_11

LANGUAGE: rust
CODE:
```
use std::mem;

fn add_one(x: i32) -> i32 {
    x + 1
}

fn add_two(x: i64) -> i64 {
    x + 2
}

fn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {
    f(arg) + f(arg)
}

fn main() {
    let answer = do_twice(add_one, 5);

    println!("The answer is: {}", answer);

    println!("With CFI enabled, you should not see the next answer");
    let f: fn(i32) -> i32 =
        unsafe { mem::transmute::<*const u8, fn(i32) -> i32>(add_two as *const u8) };
    let next_answer = do_twice(f, 5);

    println!("The next answer is: {}", next_answer);
}
```

----------------------------------------

TITLE: Advanced Cargo Configuration for s390x-unknown-linux-musl Cross-Compilation
DESCRIPTION: Comprehensive configuration for .cargo/config.toml specifying all toolchain components for cross-compiling to s390x-unknown-linux-musl when the toolchain is in a custom location.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/s390x-unknown-linux-musl.md#_snippet_2

LANGUAGE: toml
CODE:
```
[target.s390x-unknown-linux-musl]
# Adjust the paths to point at your toolchain
cc = "/TOOLCHAIN_PATH/bin/s390x-linux-musl-gcc"
cxx = "/TOOLCHAIN_PATH/bin/s390x-linux-musl-g++"
ar = "/TOOLCHAIN_PATH/bin/s390x-linux-musl-ar"
ranlib = "/TOOLCHAIN_PATH/bin/s390x-linux-musl-ranlib"
linker = "/TOOLCHAIN_PATH/bin/s390x-linux-musl-gcc"
```

----------------------------------------

TITLE: Failure Status Check Implementation in Rust Test Runner
DESCRIPTION: Implementation of checking test failure status with dynamic error code handling
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/directives.md#2025-04-21_snippet_4

LANGUAGE: diff
CODE:
```
fn check_correct_failure_status(&self, proc_res: &ProcRes) {
        let expected_status = Some(self.props.failure_status);
        let received_status = proc_res.status.code();

        if expected_status != received_status {
            self.fatal_proc_rec(
                &format!("Error: expected failure status ({:?}) but received status {:?}.",
                         expected_status,
                         received_status),
                proc_res,
            );
        }
    }
```

----------------------------------------

TITLE: Erroneous Use of Break in Closures (Rust Error E0267)
DESCRIPTION: This code demonstrates the incorrect usage of a 'break' statement inside a closure but outside of any loop, which causes compilation error E0267. Loop keywords like 'break' and 'continue' must be used within a loop even when inside closures.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0267.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let w = || { break; }; // error: `break` inside of a closure
```

----------------------------------------

TITLE: Removing a feature gate in Rust
DESCRIPTION: This code snippet demonstrates how to remove a feature gate by modifying the declaration in the `unstable.rs` and adding a corresponding entry in the `removed.rs` file. It includes the necessary declarations for both the removal process and the reason for the removal.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/feature-gates.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"/// description of feature\n(unstable, $feature_name, \"$version\", Some($tracking_issue_number))"
```

LANGUAGE: rust
CODE:
```
"/// description of feature\n(removed, $old_feature_name, \"$version\", Some($tracking_issue_number),\n Some(\"$why_it_was_removed\"))"
```

----------------------------------------

TITLE: Incorrect Array Pattern Matching with Incompatible Type
DESCRIPTION: Demonstrates a compile-time error when attempting to match an f32 value with an array pattern, which is not allowed in Rust
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0529.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let r: f32 = 1.0;
match r {
    [a, b] => { // error: expected an array or slice, found `f32`
        println!("a={}, b={}", a, b);
    }
}
```

----------------------------------------

TITLE: Using rustc to list supported crate types for a target
DESCRIPTION: Example command showing how to use the `--print=supported-crate-types` option with rustc. This command requires the `-Zunstable-options` flag since this is an unstable feature tracked by issue #138640.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/print-supported-crate-types.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
rustc --print=supported-crate-types -Zunstable-options --target=x86_64-unknown-linux-gnu
```

----------------------------------------

TITLE: Removing Redundant Parentheses in Rust
DESCRIPTION: Eliminates unnecessary parentheses in expressions where they don't affect operator precedence or evaluation order. This refactoring improves code readability by removing syntactic noise when parentheses are not needed for clarification.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_100

LANGUAGE: rust
CODE:
```
fn main() {
    _ = (2) + 2;
}
```

LANGUAGE: rust
CODE:
```
fn main() {
    _ = 2 + 2;
}
```

----------------------------------------

TITLE: Declaring PTX Global and Device Functions in Rust
DESCRIPTION: Demonstrates how to declare both global functions (callable from CUDA host code) and device functions (only callable from other device functions) using the abi_ptx feature. Global functions use the "ptx-kernel" ABI specifier.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/abi-ptx.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(abi_ptx)]
#![no_std]

pub unsafe extern "ptx-kernel" fn global_function() {
    device_function();
}

pub fn device_function() {
    // ..
}
```

----------------------------------------

TITLE: Configuring Path Remapping in Rust Compiler
DESCRIPTION: Example showing how to use --remap-path-prefix and --remap-path-scope flags to remap absolute paths in build outputs. The command remaps the current working directory to '/remapped' in object files.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/remap-path-scope.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
rustc --remap-path-prefix=$(PWD)=/remapped -Zremap-path-scope=object main.rs
```

----------------------------------------

TITLE: Cloning and updating Rust Clippy repository using Git - Bash
DESCRIPTION: Commands to clone the Clippy repository from a forked version and to update an existing clone with the latest changes from the upstream repository. It demonstrates setting up the upstream remote, fetching updates, rebasing onto upstream master, and pushing updates to the fork's master branch.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/basics.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone git@github.com:<your-username>/rust-clippy
```

LANGUAGE: bash
CODE:
```
# If the upstream remote has not been added yet
git remote add upstream https://github.com/rust-lang/rust-clippy
git fetch upstream
git checkout master
git rebase upstream/master
git push
```

----------------------------------------

TITLE: Implementing an Empty Lint Pass in Rust for Clippy
DESCRIPTION: Skeleton implementation of an EarlyLintPass for a new Clippy lint. This defines a new lint pass named 'FooFunctions' that will check for the FOO_FUNCTIONS lint.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_4

LANGUAGE: rust
CODE:
```
declare_lint_pass!(FooFunctions => [FOO_FUNCTIONS]);

impl EarlyLintPass for FooFunctions {}
```

----------------------------------------

TITLE: Compiling and Analyzing Rust with Stack Size Metadata
DESCRIPTION: This console snippet demonstrates compiling Rust code with stack size metadata and analyzing the resulting binary using various tools.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/emit-stack-sizes.md#2025-04-21_snippet_5

LANGUAGE: console
CODE:
```
$ RUSTFLAGS="-Z emit-stack-sizes" cargo build --release

$ size -A target/release/hello | grep stack_sizes || echo section was not found
section was not found

$ RUSTFLAGS="-Z emit-stack-sizes" cargo rustc --release -- \
    -C link-arg=-Wl,-Tkeep-stack-sizes.x \
    -C link-arg=-N

$ size -A target/release/hello | grep stack_sizes
.stack_sizes                               90   176272

$ # non-allocatable section (flags don't contain the "A" (alloc) flag)
$ readelf -S target/release/hello
Section Headers:
  [Nr]   Name              Type             Address           Offset
       Size              EntSize            Flags  Link  Info  Align
(..)
  [1031] .stack_sizes      PROGBITS         000000000002b090  0002b0f0
       000000000000005a  0000000000000000   L       5     0     1

$ objdump -s -j .stack_sizes target/release/hello

target/release/hello:     file format elf64-x86-64

Contents of section .stack_sizes:
 2b090 c0040000 00000000 08f00400 00000000  ................
 2b0a0 00080005 00000000 00000810 05000000  ................
 2b0b0 00000000 20050000 00000000 10400500  .... ........@..
 2b0c0 00000000 00087005 00000000 00000080  ......p.........
 2b0d0 05000000 00000000 90050000 00000000  ................
 2b0e0 00a00500 00000000 0000               ..........
```

----------------------------------------

TITLE: Declaring Struct in Rust
DESCRIPTION: The snippet illustrates the declaration of a struct named 'Struct', complete with ID and location metadata. This allows for the organization of related data characteristics into manageable entities in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_7

LANGUAGE: Rust
CODE:
```
FileSymbol {
    name: "Struct",
    def: Adt(
        Struct(
            Struct {
                id: StructId(
                    1,
                ),
            },
        ),
    ),
    loc: DeclarationLocation {
        hir_file_id: EditionedFileId(
            FileId(
                0,
            ),
            Edition2021,
        ),
        ptr: SyntaxNodePtr {
            kind: STRUCT,
            range: 170..184,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 177..183,
            },
        ),
    },
    container_name: None,
    is_alias: false,
    is_assoc: false,
}
```

----------------------------------------

TITLE: Calling fastcall_fn_9 - Rust
DESCRIPTION: This snippet calls the `fastcall_fn_9` function in Rust, passing an integer (1) and a floating-point number (3.0) as arguments. This showcases the `fastcall` convention being used. The outcome is determined by how the called function is implemented.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.txt#_snippet_16

LANGUAGE: Rust
CODE:
```
fastcall_fn_9(1, 3.0)
```

----------------------------------------

TITLE: Defining CrateData Structures in Rust
DESCRIPTION: The CrateData structure is used to store metadata and dependency information for Rust crates. Each entry contains details such as the root file ID, edition, version, display name, environment variables, and dependencies. These details are necessary for managing and analyzing crates in Rust projects. Primary dependencies include crates like libc, which are essential for system-level interactions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
CrateData {
    ...
    edition: Edition2018,
    version: Some(
        "0.1.0",
    ),
    display_name: Some(
        CrateDisplayName {
            crate_name: CrateName(
                "hello_world",
            ),
            canonical_name: "hello-world",
        },
    ),
    ...
    dependencies: [
        Dependency {
            crate_id: Idx::<CrateData>(4),
            name: CrateName(
                "libc",
            ),
            prelude: true,
            sysroot: false,
        },
    ],
    ...
}
```

----------------------------------------

TITLE: Using UI Testing in Miri
DESCRIPTION: This command generates stderr and stdout files for Miri's output, as part of the ui-testing process. It automates the blessing of test output.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_7

LANGUAGE: Shell
CODE:
```
./miri test --bless
```

----------------------------------------

TITLE: Annotating Simple Errors in Rust UI Tests
DESCRIPTION: Shows the basic syntax for annotating a compiler error on the same line in a Rust UI test using the `//~` syntax. The annotation includes the diagnostic level (e.g., `ERROR`) and a substring of the expected message, optionally followed by the error code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_1

LANGUAGE: Rust
CODE:
```
fn main() {
    boom  //~ ERROR cannot find value `boom` in this scope [E0425]
}
```

----------------------------------------

TITLE: Rust Compiler Unpretty Flag Usage
DESCRIPTION: Command to inspect the expanded module source after macro expansion using rustc's unpretty flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/test-implementation.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
$ rustc my_mod.rs -Z unpretty=hir
```

----------------------------------------

TITLE: Drop Check Error Example with Moved Value
DESCRIPTION: Shows how drop checking requires values to be live even after they've been completely moved, due to MIR building assumptions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/drop_check.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
fn main() {
    let mut x;
    {
        let temp = String::from("I am temporary");
        x = PrintOnDrop(&temp);
        drop(x);
    }
} //~ ERROR `temp` does not live long enough.
```

----------------------------------------

TITLE: Handling TODO Comments in Rust Code
DESCRIPTION: This snippet illustrates the usage of TODO comments in Rust code as reminders for incomplete implementations. It shows how the tidy script can enforce the absence of TODO comments before landing the PR, alongside an example of its usage.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/conventions.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn do_something() {
    if something_else {
        unimplemented!(); // TODO write this
    }
}
```

LANGUAGE: rust
CODE:
```
if foo {
    return true; // TODO wrong, but will be fixed in a later commit
}
```

----------------------------------------

TITLE: Debugging Type Layout with rustc_layout in Rust
DESCRIPTION: This code snippet demonstrates the use of the #[rustc_layout(...)] attribute to debug the ABI and size of an enum at compile time. It shows how to apply the attribute to a simple enum with two variants.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/rustc-attrs.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(rustc_attrs)]

#[rustc_layout(abi, size)]
pub enum X {
    Y(u8, u8, u8),
    Z(isize),
}
```

----------------------------------------

TITLE: Building Rust Compiler and Standard Library
DESCRIPTION: Compile the Rust compiler, standard library, and associated tools using the 'x' build command
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/quickstart.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
./x build
```

----------------------------------------

TITLE: Installing Rust from Source Using Bash
DESCRIPTION: This snippet provides the command to install Rust and its associated tools by building from source. The command `./x install` should be executed in a configured environment where the Rust source and build tools are available. Additionally, users can specify a custom installation path using the `DESTDIR` environment variable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/build-install-distribution-artifacts.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
./x install
```

----------------------------------------

TITLE: Struct and Function Example in Rust
DESCRIPTION: This snippet defines a Rust function and a struct, showcasing how generic functions can take multiple types and how these are represented in Rust symbols. The function `example` is invoked with two instances of the `Example` struct type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_20

LANGUAGE: rust
CODE:
```
fn main() {
    example::<Example, Example>();
}

struct Example;

pub fn example<T, U>() {}
```

----------------------------------------

TITLE: Path Prefix Remapping Example
DESCRIPTION: Example showing how to use the --remap-path-prefix flag to normalize build output paths by remapping source path prefixes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
--remap-path-prefix foo=bar
```

----------------------------------------

TITLE: Fuchsia Target Configuration for rustc
DESCRIPTION: This TOML snippet configures the Rust build process to target Fuchsia with a clang toolchain and sets the install directory. It includes configurations for both x86-64 and AArch64 architectures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_5

LANGUAGE: toml
CODE:
```
[build]
target = ["<host_platform>", "aarch64-unknown-fuchsia", "x86_64-unknown-fuchsia"]

[rust]
lld = true

[llvm]
download-ci-llvm = false

[target.x86_64-unknown-fuchsia]
cc = "clang"
cxx = "clang++"

[target.aarch64-unknown-fuchsia]
cc = "clang"
cxx = "clang++"

[target.<host_platform>]
cc = "clang"
cxx = "clang++"

[install]
prefix = "<RUST_SRC_PATH>/install"
```

----------------------------------------

TITLE: Exploring Semantic Lifetime Equality in Rust Opaque Types
DESCRIPTION: These examples cover semantic lifetime equality where two lifetimes may be syntactically different but semantically equal. The first and second functions highlight invalid lifetime setups due to semantic analysis, which causes errors in the uniqueness constraint enforcement of opaque type definitions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/opaque-types-region-inference-restrictions.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
// This is also invalid because `'a` is *semantically* equal to `'static`.
fn still_bad_1<'a: 'static>() -> Opaque<'a> {}
//~^ Should error!

// This is also invalid because `'a` and `'b` are *semantically* equal.
fn still_bad_2<'a: 'b, 'b: 'a>() -> Opaque<'a, 'b> {}
//~^ Should error!

```

----------------------------------------

TITLE: Defining wasi-root in bootstrap.toml
DESCRIPTION: This snippet shows how to specify the `wasi-root` path in `bootstrap.toml` for building the `wasm32-wasip1-threads` target. This setup is required to ensure that the toolchain can locate the WASI libc sysroot. Relevant for users building this target with the Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wasip1-threads.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[target.wasm32-wasip1-threads]
wasi-root = ".../wasi-libc/sysroot"

```

----------------------------------------

TITLE: Blank Lines Formatting Applied
DESCRIPTION: Example showing how blank lines are formatted with a minimum of 1 blank line between items.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
fn foo() {

    println!("a");
}

fn bar() {

    println!("b");

    println!("c");
}
```

----------------------------------------

TITLE: Invalid CoercePointee on Empty Struct
DESCRIPTION: Example showing error when deriving CoercePointee on a struct with no fields.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0802.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(coerce_pointee)]
use std::marker::CoercePointee;
#[derive(CoercePointee)]
#[repr(transparent)]
struct NoField<'a, #[pointee] T: ?Sized> {}
```

----------------------------------------

TITLE: Running Tests Manually
DESCRIPTION: Commands to manually run rust tests using the rustc compiler, which can be faster but may not handle all scenarios correctly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_7

LANGUAGE: text
CODE:
```
rustc +stage1 tests/ui/issue-1234.rs
```

----------------------------------------

TITLE: Invalid Multi-Field Struct with SIMD Attribute
DESCRIPTION: Example showing incorrect usage of #[repr(simd)] on a struct with multiple fields, which will result in compilation error E0075.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0075.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(repr_simd)]

#[repr(simd)]
struct Bad([u32; 1], [u32; 1]); // error!
```

----------------------------------------

TITLE: Declaring a New Clippy Lint with Documentation in Rust
DESCRIPTION: Example of declaring a new lint named 'FOO_FUNCTIONS' using the declare_clippy_lint macro. Includes documentation format, version information, and lint level setting.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_3

LANGUAGE: rust
CODE:
```
declare_clippy_lint! {
    /// ### What it does
    ///
    /// ### Why is this bad?
    ///
    /// ### Example
    /// ```rust
    /// // example code
    /// ```
    #[clippy::version = "1.29.0"]
    pub FOO_FUNCTIONS,
    pedantic,
    "function named `foo`, which is not a descriptive name"
}
```

----------------------------------------

TITLE: Configuring Toolchain Paths for s390x in Cargo
DESCRIPTION: This snippet demonstrates how to explicitly configure the paths to the s390x toolchain binaries (compiler, archiver, etc.) in Cargo's configuration file (`.cargo/config.toml`). This is required when the toolchain is not in the system's `PATH` or when a specific version needs to be used. It ensures that the correct tools are used for compiling and linking.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/s390x-unknown-linux-gnu.md#2025-04-21_snippet_5

LANGUAGE: TOML
CODE:
```

```toml
[target.s390x-unknown-linux-gnu]
# Adjust the paths to point at your toolchain
cc = "/TOOLCHAIN_PATH/bin/s390x-linux-gnu-gcc"
cxx = "/TOOLCHAIN_PATH/bin/s390x-linux-gnu-g++"
ar = "/TOOLCHAIN_PATH/bin/s390x-linux-gnu-ar"
ranlib = "/TOOLCHAIN_PATH/bin/s390x-linux-gnu-ranlib"
linker = "/TOOLCHAIN_PATH/bin/s390x-linux-gnu-gcc"
```

```

----------------------------------------

TITLE: Verbose Assembly Output
DESCRIPTION: Enhanced assembly output with LLVM's contextual comments enabled via -Zverbose-asm flag, providing additional information about basic blocks and instructions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/verbose-asm.md#2025-04-21_snippet_2

LANGUAGE: asm
CODE:
```
foo:                                    # @foo
# %bb.0:
        push    rax
        add     edi, esi
        mov     dword ptr [rsp + 4], edi        # 4-byte Spill
        seto    al
        jo      .LBB0_2
# %bb.1:
        mov     eax, dword ptr [rsp + 4]        # 4-byte Reload
        pop     rcx
        ret
.LBB0_2:
        lea     rdi, [rip + .L__unnamed_1]
        mov     rax, qword ptr [rip + core::panicking::panic_const::panic_const_add_overflow::h9c85248fe0d735b2@GOTPCREL]
        call    rax
                                        # -- End function
.L__unnamed_2:
        .ascii  "/app/example.rs"

.L__unnamed_1:
        .quad   .L__unnamed_2
        .asciz  "\017\000\000\000\000\000\000\000\004\000\000\000\005\000\000"

                                        # DW_AT_external
```

----------------------------------------

TITLE: Configuring Bevy Tool Lints in Rust
DESCRIPTION: Shows how to register and configure lint levels for the Bevy game engine tool using register_tool feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/register-tool.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(register_tool)]
#![register_tool(bevy)]
#![deny(bevy::duplicate_bevy_dependencies)]
```

----------------------------------------

TITLE: Configuring Max Suggested Slice Pattern Length in Rust
DESCRIPTION: This option controls the maximum number of elements allowed in a slice pattern suggested by the `index_refutable_slice` lint.  If the pattern has more elements, the lint is suppressed. The default value is `3`. The input is an integer representing the maximum length.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_29



----------------------------------------

TITLE: Defining Position and Diagnostic Data Structure in Rust
DESCRIPTION: This code snippet defines part of a diagnostic data structure that includes position coordinates (line and character), a message field, tags, and data fields. It likely represents compiler or linter output for code analysis.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/rust-analyzer/src/diagnostics/test_data/clippy_pass_by_ref.txt#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
                                start: Position {
                                    line: 41,
                                    character: 23,
                                },
                                end: Position {
                                    line: 41,
                                    character: 28,
                                },
                            },
                        },
                        message: "original diagnostic",
                    },
                ],
            ),
            tags: None,
            data: None,
        },
        fix: None,
    },
]
```

----------------------------------------

TITLE: Installing rust-analyzer from source using cargo
DESCRIPTION: This snippet demonstrates how to clone the rust-analyzer repository and install it from source using cargo. It requires the latest stable version of the Rust toolchain.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/rust_analyzer_binary.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ git clone https://github.com/rust-lang/rust-analyzer.git && cd rust-analyzer
$ cargo xtask install --server
```

----------------------------------------

TITLE: Calling the panic_impl Function from Core's Panic Macro Implementation
DESCRIPTION: This snippet shows how core's panic! macro eventually calls the panic_impl function, which is a lang item that will be resolved at link time. The function takes a PanicInfo struct and is marked as a function that never returns (!).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/panic-implementation.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call
extern "Rust" {
    #[lang = "panic_impl"]
    fn panic_impl(pi: &PanicInfo<'_>) -> !;
}

let pi = PanicInfo::internal_constructor(Some(&fmt), location);
unsafe { panic_impl(&pi) }
```

----------------------------------------

TITLE: Collapsible-If Pattern in Current Syntax
DESCRIPTION: Example of a complex pattern for detecting collapsible if-else statements in Rust. The pattern demonstrates the repetition required in the current pattern syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_16

LANGUAGE: rust
CODE:
```
pattern!{
    pat_if_else: Expr =
        If(
            _,
            _,
            Block_(
                Block(
                    Expr((If(_, _, _?) | IfLet(_, _?))#else_) |
                    Semi((If(_, _, _?) | IfLet(_, _?))#else_)
                )#block_inner
            )#block
        ) |
        IfLet(
            _,
            Block_(
                Block(
                    Expr((If(_, _, _?) | IfLet(_, _?))#else_) |
                    Semi((If(_, _, _?) | IfLet(_, _?))#else_)
                )#block_inner
            )#block
        )
}
```

----------------------------------------

TITLE: Compiling Rust Code for Nintendo Switch
DESCRIPTION: This command allows the user to compile Rust source code for the aarch64 Nintendo Switch target. It ensures that the generated binaries are compatible with the specified architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/aarch64-nintendo-switch-freestanding.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
rustc --target aarch64-nintendo-switch-freestanding your-code.rs
```

----------------------------------------

TITLE: Invalid Enum Alignment Representation in Rust
DESCRIPTION: Demonstrates a compilation error when specifying an invalid alignment value that is not a power of two for a Rust enum. The compiler enforces strict alignment requirements to ensure memory layout consistency.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0589.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(align(15))] // error: invalid `repr(align)` attribute: not a power of two
enum Foo {
    Bar(u64),
}
```

----------------------------------------

TITLE: Exception to Lifetime Uniqueness Rule for Opaque Types in Rust
DESCRIPTION: Discusses an exception to the uniqueness rule for lifetime parameters in opaque types when specific bounds require equality among lifetime parameters. This allows for scenarios where lifetimes are defined to be the same or the 'static lifetime, avoiding ambiguities in type inference.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/opaque-types-region-inference-restrictions.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
// The definition requires `'x` to be equal to `'static`.
type Opaque<'x: 'static> = impl Sized + 'x;

fn good() -> Opaque<'static> {}

```

LANGUAGE: rust
CODE:
```
struct Type<'a>(&'a ());
impl<'a> Type<'a> {
    // `'b == 'a`
    fn do_stuff<'b: 'a>(&'b self) -> impl Trait<'a, 'b> {}
}

```

----------------------------------------

TITLE: Adding Notes and Snippets to Rust Errors
DESCRIPTION: This Rust code demonstrates how to add notes and labels to error messages using methods like `.span_label()` and `.span_note()` before calling `.emit()`. It allows for providing more detailed context and guidance to the user regarding the error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/error-codes.md#2025-04-21_snippet_3

LANGUAGE: Rust
CODE:
```
struct_span_code_err!(...)
    .span_label(another_span, fluent::example::example_label)
    .span_note(another_span, fluent::example::separate_note)
    .emit()

```

----------------------------------------

TITLE: Installing AVR-GCC on Different Platforms
DESCRIPTION: Command-line instructions for installing AVR-GCC compiler dependencies on various operating systems
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/avr-none.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
# Ubuntu:
$ sudo apt-get install gcc-avr

# Mac:
$ brew tap osx-cross/avr && brew install avr-gcc

# NixOS (takes a couple of minutes, since it's not provided through Hydra):
$ nix shell nixpkgs#pkgsCross.avr.buildPackages.gcc11
```

----------------------------------------

TITLE: Example ELF Section Naming in Rust
DESCRIPTION: Demonstrates how a function named 'func' would generate different section names in object files depending on whether the no-unique-section-names flag is used.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/no-unique-section-names.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
`.text.func`
`.gcc_except_table.func`
```

----------------------------------------

TITLE: Export Table Output from objdump
DESCRIPTION: Example output from running 'objdump -x' on a binary built with -Zexport-executable-symbols, showing the export directory containing the exported functions my_function and main.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/export-executable-symbols.md#2025-04-21_snippet_2

LANGUAGE: plain
CODE:
```
The Export Tables (interpreted .edata section contents)

...

[Ordinal/Name Pointer] Table
    [   0] my_function
    [   1] main
```

----------------------------------------

TITLE: Listing Standard Library Internal Dependencies (Shell)
DESCRIPTION: This shell command finds the sysroot path using `rustc --print sysroot` and then lists the contents of the target-specific standard library dependencies directory (`lib/rustlib/.../lib`). It pipes the output to `head -n 5` to show only the first five entries. This directory contains libraries like `hashbrown` and `cfg_if` used by the standard library's implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/bootstrapping/what-bootstrapping-does.md#_snippet_1

LANGUAGE: Shell
CODE:
```
ls $(rustc --print sysroot)/lib/rustlib/x86_64-unknown-linux-gnu/lib | head -n 5
```

----------------------------------------

TITLE: Mangled Symbol with Placeholders
DESCRIPTION: Shows the mangled symbol for a static variable that uses placeholders for generic parameters. The placeholders indicate that the static is not monomorphized by the type or const parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_18

LANGUAGE: text
CODE:
```
_RNvNvMCsd9PVOYlP1UU_7mycrateINtB4_7ExamplepKpE3foo14EXAMPLE_STATIC
                              │             │││
                              │             ││└── const placeholder
                              │             │└─── const generic argument
                              │             └──── type placeholder
                              └────────────────── generic-args
```

----------------------------------------

TITLE: Configuring WebAssembly Exception Handling for Emscripten Target
DESCRIPTION: This snippet provides instructions for enabling WebAssembly exception handling when targeting wasm32-unknown-emscripten. It specifies the required linker flag for emcc and the compiler flag for C/C++ files.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/emscripten-wasm-eh.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# `emscripten-wasm-eh`

Use the WebAssembly exception handling ABI to unwind for the
`wasm32-unknown-emscripten`. If compiling with this setting, the `emcc` linker
should be invoked with `-fwasm-exceptions`. If linking with C/C++ files, the
C/C++ files should also be compiled with `-fwasm-exceptions`.
```

----------------------------------------

TITLE: Simple Pattern Macro Usage
DESCRIPTION: Example of using the proposed pattern macro to match boolean literals
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
pattern!{
    my_pattern: Expr =
        Lit(Bool(false))
}
```

----------------------------------------

TITLE: SDK Path Environment Variable Setting
DESCRIPTION: Example of using xcrun to show SDK path for macOS compilation
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-darwin.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
xcrun --sdk macosx --show-sdk-path
```

----------------------------------------

TITLE: Basic Usage Command - Rust Test Report Time
DESCRIPTION: Shows the basic command to enable test execution time reporting using the unstable options flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/report-time.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
./test_executable -Zunstable-options --report-time
```

----------------------------------------

TITLE: Rendering Rust Documentation Reference
DESCRIPTION: Use the 'rustdoc' command to render a Markdown file to HTML, facilitating the verification of small documentation fixes. Note that CSS may not render perfectly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/contributing.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
rustdoc src/doc/reference.md
```

----------------------------------------

TITLE: Correct Usage of #[ffi_returns_twice] Attribute in Rust Foreign Function Declaration
DESCRIPTION: This code snippet shows the correct usage of the #[ffi_returns_twice] attribute within an extern block, applied to a foreign function declaration. This is the proper way to use the attribute in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0724.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(ffi_returns_twice)]

extern "C" {
   #[ffi_returns_twice] // ok!
   pub fn foo();
}
```

----------------------------------------

TITLE: Declaring Stability Attributes - Corrected Example
DESCRIPTION: This snippet provides the corrected version of the previous example, demonstrating how to declare stability attributes correctly by ensuring that only one stability attribute is applied to the function. It shows the validation of the second stability attribute in the context of the specialty feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0544.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
#!['feature(staged_api)']
#!['allow(internal_features)']
#!['stable(since = "1.0.0", feature = "rust1")']

#[stable(feature = "test", since = "2.0.0")] // ok!
fn foo() {}
```

----------------------------------------

TITLE: Testing Clippy Lints Manually with Bash Commands
DESCRIPTION: Commands to manually test Clippy with local modifications. These commands help you test a single file, an existing project, or set up a custom rustup toolchain for testing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_1

LANGUAGE: bash
CODE:
```
cargo dev lint input.rs
```

LANGUAGE: bash
CODE:
```
cargo dev lint /path/to/project
```

LANGUAGE: bash
CODE:
```
cargo dev setup toolchain

# Then in `/path/to/project` you can run
cargo +clippy clippy
```

----------------------------------------

TITLE: Function with Early-Bound Lifetime Parameter in Rust
DESCRIPTION: The function foo defines a syntax for accepting a reference to a String and a type T that implements Trait with the same lifetime 'a. It illustrates the concept of early bounding in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_14

LANGUAGE: rust
CODE:
```
fn foo<'a, T: Trait<'a>>(_: &'a String, _: T) {}
```

----------------------------------------

TITLE: Registering Lints in Clippy's Main Module
DESCRIPTION: Example showing how lints are registered in Clippy's main module. This snippet demonstrates how the 'else_if_without_else' lint is imported and registered with the LintStore using the register_early_pass function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/CONTRIBUTING.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// ./clippy_lints/src/lib.rs

// ...
pub mod else_if_without_else;
// ...

pub fn register_lints(store: &mut rustc_lint::LintStore, conf: &'static Conf) {
    // ...
    store.register_early_pass(|| Box::new(else_if_without_else::ElseIfWithoutElse));
    // ...
}
```

----------------------------------------

TITLE: Creating rustup Toolchains
DESCRIPTION: These commands create rustup toolchains linked to the stage0, stage1 and stage2 compilers built in the build directory.  This allows for easily switching between different compiler stages using `rustup`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
rustup toolchain link stage0 build/host/stage0-sysroot # beta compiler + stage0 std
rustup toolchain link stage1 build/host/stage1
rustup toolchain link stage2 build/host/stage2
```

----------------------------------------

TITLE: Building Rustdoc with Custom Toolchain in Markdown
DESCRIPTION: Commands for setting up a custom toolchain in rustup to use a locally-compiled version of rustdoc. This allows developers to test their rustdoc changes on any project.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustdoc.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./x setup tools
./x check rustdoc
./x build library rustdoc
library/test
rustup toolchain link stage2 build/host/stage2
cargo +stage2 doc
```

----------------------------------------

TITLE: Implementing Callbacks trait in Rust
DESCRIPTION: A trait that allows for custom compiler configuration and running custom code after different phases of compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustc-driver/intro.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait Callbacks
```

----------------------------------------

TITLE: Erroneous Export Name Attribute Usage in Rust
DESCRIPTION: This code snippet demonstrates the incorrect use of the `export_name` attribute with a null character, resulting in a compilation error (E0648).
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0648.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[export_name="\0foo"] // error: `export_name` may not contain null characters
pub fn bar() {}
```

----------------------------------------

TITLE: Building and running the parameter count mismatch example without CFI
DESCRIPTION: Shell commands showing how to build and run the parameter count mismatch example without CFI protection. Without CFI, the invalid function call is allowed and produces a result.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_9

LANGUAGE: shell
CODE:
```
$ cargo run --release
   Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)
    Finished release [optimized] target(s) in 0.43s
     Running `target/release/rust-cfi-2`
The answer is: 12
With CFI enabled, you should not see the next answer
The next answer is: 14
$
```

----------------------------------------

TITLE: Specifying C Compiler for RISC-V Target
DESCRIPTION: In this snippet, the C compiler and archiver for the RISC-V target are specified in the `bootstrap.toml` configuration file. This is necessary for cross-compiling Rust programs to the RISC-V architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv32imac-unknown-xous-elf.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[target.riscv32imac-unknown-xous-elf]
cc = "riscv-none-elf-gcc"
ar = "riscv-none-elf-ar"
```

----------------------------------------

TITLE: Understanding Unsize Trait in Rust
DESCRIPTION: This section describes the Unsize trait, its purpose, and its relationship with the unsizing of types. It clarifies that Unsize is not intended for user implementation, but rather defines the types permitted to be unsized.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/unsize.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
To contrast, the `Unsize` trait is concerned the actual types that are allowed to be unsized.
```

----------------------------------------

TITLE: Setting RUSTC_LOG environment variable for crate/module and function-level tracing
DESCRIPTION: This bash command sets the `RUSTC_LOG` environment variable to enable tracing for a specific function `do_mir_borrowck` within the `rustc_borrowck` crate/module. This reduces the verbosity of the logs compared to tracing the entire function without the crate/module context.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tracing.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
RUSTC_LOG=rustc_borrowck[do_mir_borrowck]
```

----------------------------------------

TITLE: Formatting Empty Code Blocks in Doc Comments in Rust
DESCRIPTION: This snippet shows how rustfmt now handles empty code blocks within doc comments with `format_code_in_doc_comments = true` without panicking. The example demonstrates a doc comment with an empty code block that previously caused rustfmt to fail, but now formats correctly. This improves the tool's robustness when handling doc comments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_15

LANGUAGE: rust
CODE:
```
/// ```
///
/// ```
fn main() {}
```

----------------------------------------

TITLE: Configuring Crate Name via Command Line in rustdoc
DESCRIPTION: This snippet shows how to specify a custom crate name while running rustdoc, which affects the output HTML structure.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --crate-name docs
```

----------------------------------------

TITLE: Finding name resolution experts in Rust compiler
DESCRIPTION: This command helps identify recent contributors to the name resolution part of the Rust compiler. It uses `git shortlog` to list commit authors within the `compiler/rustc_resolve/` directory since the 1.68.2 release, excluding rollup merge commits and commits by `@bors`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/getting-started.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
"git shortlog -n 1.68.2.. compiler/rustc_resolve/"
```

----------------------------------------

TITLE: Declaring rustc_tools_util Dependencies
DESCRIPTION: Configures both regular and build dependencies for rustc_tools_util in Cargo.toml.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/rustc_tools_util/README.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[dependencies]
rustc_tools_util = "0.4.2"

[build-dependencies]
rustc_tools_util = "0.4.2"
```

----------------------------------------

TITLE: Demonstrating a Cyclic Query Provider in Rust Compiler
DESCRIPTION: Example of an invalid query provider that causes a cycle by invoking itself with the same key, which would result in infinite recursion. The compiler detects and reports such cycles as errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/query-evaluation-model-in-detail.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn cyclic_query_provider(tcx, key) -> u32 {
  // Invoke the same query with the same key again
  tcx.cyclic_query(key)
}
```

----------------------------------------

TITLE: Structuring Runnable Entity in TypeScript
DESCRIPTION: The Runnable interface defines the necessary components of a runnable item in a rust-analyzer. This includes its label, location, kind, and arguments required for execution. It's integral for tooling in TypeScript that handles Rust languages, aiding the execution or testing processes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
interface Runnable {
    label: string;
    location?: LocationLink;
    kind: string;
    args: any;
}
```

----------------------------------------

TITLE: Finding libgccjit Path for Configuration
DESCRIPTION: Command to find the path to the libgccjit shared library, which is needed for the config.toml file to correctly link the Rust codegen backend with the GCC installation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
$ dirname $(readlink -f `find . -name libgccjit.so`)
```

----------------------------------------

TITLE: Running the rust-analyzer CLI for Batch Analysis (bash)
DESCRIPTION: This command runs the rust-analyzer CLI with the analysis-stats command for batch analysis on a Rust crate. The snippet uses --release for optimal speed and -p rust-analyzer to specify the package. Replace 'path/to/some/rust/crate' with the actual path to the target crate. Useful for profiling, performance, or debugging and requires a built, up-to-date rust-analyzer in the workspace.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cargo run --release -p rust-analyzer -- analysis-stats path/to/some/rust/crate

```

----------------------------------------

TITLE: Configuring GNU Linker for Cross-Compilation
DESCRIPTION: Configuration to specify the GNU linker for a specific Arm target in Cargo's configuration file
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/arm-none-eabi.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[target.<your-target>]
linker = "arm-none-eabi-ld"
```

----------------------------------------

TITLE: Expanded Two-Phase Borrows in Rust
DESCRIPTION: This code snippet expands the previous example to explicitly show how two-phase borrows are represented internally. It demonstrates the creation of temporary variables and the use of the `two_phase` keyword (which is illustrative, not actual Rust syntax) to indicate the reservation point of the borrow.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/two_phase_borrows.md#2025-04-21_snippet_1

LANGUAGE: rust,ignore
CODE:
```
// Case 1:
let mut v = Vec::new();
let temp1 = &two_phase v;
let temp2 = v.len();
Vec::push(temp1, temp2);
let r = &mut Vec::new();
let temp3 = &two_phase *r;
let temp4 = r.len();
Vec::push(temp3, temp4);

// Case 2:
let temp5 = &two_phase *r;
let temp6 = vec![1, r.len()];
std::mem::replace(temp5, temp6);

// Case 3:
let mut x = std::num::Wrapping(2);
let temp7 = &two_phase x;
let temp8 = x;
std::ops::AddAssign::add_assign(temp7, temp8);
```

----------------------------------------

TITLE: Building Documentation with x.py Shell Command
DESCRIPTION: This shell command executes the Rust project's primary build script (`x.py`) with the `doc` argument to generate the project documentation. It should be run from the root directory of the Rust source code. The resulting documentation is stored in the `build` directory, specifically within the subdirectory corresponding to the build triple (ABI) used during the build process.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_13

LANGUAGE: sh
CODE:
```
./x.py doc
```

----------------------------------------

TITLE: Calling fastcall functions in Rust
DESCRIPTION: Demonstrates calling fastcall functions with different arguments including a struct `S` and an integer. This showcases how `fastcall_fn_5` and `fastcall_fn_7` are invoked with specific data.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-alt-calling-convention/output.msvc.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
fastcall_fn_5(S { x: 1, y: 2 }, 16)
fastcall_fn_7(S2 { x: 15, y: 16 }, 3)
```

----------------------------------------

TITLE: Fixed Example with Required 'issue' Field in Stability Attributes
DESCRIPTION: This code example shows the correct way to use stability attributes by including the required 'issue' field. Both #[unstable] and #[rustc_const_unstable] attributes properly include the 'issue' parameter, fixing the E0547 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0547.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(staged_api)]
#![allow(internal_features)]
#![stable(since = "1.0.0", feature = "test")]

#[unstable(feature = "_unstable_fn", issue = "none")] // ok!
fn _unstable_fn() {}

#[rustc_const_unstable(
    feature = "_unstable_const_fn",
    issue = "none"
)] // ok!
const fn _unstable_const_fn() {}
```

----------------------------------------

TITLE: Detecting Private Intra-Doc Links in Rust
DESCRIPTION: This snippet shows a public function `public` with a documentation comment linking to a private function `private`. The `private_intra_doc_links` lint issues a warning here, indicating that the link will be unresolved in the documentation model, unless private items are explicitly documented with the `--document-private-items` flag. It demonstrates the importance of ensuring intra-doc links are valid within the visible documentation scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/lints.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#![warn(rustdoc::private_intra_doc_links)] // note: unnecessary - warns by default.

/// [private]
pub fn public() {}
fn private() {}

```

----------------------------------------

TITLE: Configuring Decimal Literal Threshold in Rust
DESCRIPTION: This option sets the lower bound for linting decimal literals. The lint checks for large or complex literals. This impacts the `decimal_literal_representation` lint. The default value is `16384`. It expects an integer as input.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_24



----------------------------------------

TITLE: Controlling Crate Name with rustdoc (Bash)
DESCRIPTION: Shows how the `--crate-name` flag overrides rustdoc's default behavior of deriving the crate name from the input file name, allowing a custom name to be specified.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_4

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --crate-name mycrate
```

----------------------------------------

TITLE: Disabling RELRO in Cargo Configuration for QNX Targets
DESCRIPTION: This snippet demonstrates how to disable RELocation Read-Only (RELRO) for specific QNX targets by adding a `rustflags` entry to the `.cargo/config.toml` file. Disabling RELRO might be necessary in some QNX kernel setups where the default RELRO setting causes execution failures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/nto-qnx.md#2025-04-21_snippet_0

LANGUAGE: TOML
CODE:
```

```toml
[target.aarch64-unknown-nto-qnx700]
rustflags = ["-C", "relro_level=off"]
```

```

----------------------------------------

TITLE: Correct Issue Value in Stability Attributes (Rust)
DESCRIPTION: Fixed example showing the proper way to specify the 'issue' field in stability attributes using 'none' or a valid issue number.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0545.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(staged_api)]
#![allow(internal_features)]
#![stable(since = "1.0.0", feature = "test")]

#[unstable(feature = "_unstable_fn", issue = "none")] // ok!
fn _unstable_fn() {}

#[rustc_const_unstable(feature = "_unstable_const_fn", issue = "1")] // ok!
const fn _unstable_const_fn() {}
```

----------------------------------------

TITLE: Registering a Late Lint Pass
DESCRIPTION: This Rust code snippet demonstrates how to manually register a late lint pass within the `register_lints` function in `clippy_lints/src/lib.rs`. This is required if a lint is declared manually instead of generated by the dev tools. Without a call to `register_early_pass` or `register_late_pass`, the lint pass in question will not be run.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/defining_lints.md#_snippet_3

LANGUAGE: rust
CODE:
```
store.register_late_pass(|_| Box::new(foo_functions::FooFunctions));
```

----------------------------------------

TITLE: Registering Early Lint Pass with Clippy - Rust
DESCRIPTION: Demonstrates how to manually register an early lint pass in Clippy by calling the store.register_early_pass method within the register_lints function. This is necessary when introducing a new lint pass that is not auto-registered by Clippy tooling. The key parameter is the lint pass constructor (here, FooFunctions), and the registration ensures the pass is executed during linting. No external dependencies are required but must be placed correctly in clippy_lints/src/lib.rs. The registration order can affect diagnostics output.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_5

LANGUAGE: rust
CODE:
```
store.register_early_pass(|| Box::new(foo_functions::FooFunctions));
```

----------------------------------------

TITLE: Compiling Rust Program for m68k Linux
DESCRIPTION: Command to compile a Rust program targeting the m68k-unknown-linux-gnu platform using rustc
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-linux-gnu.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
rustc --target m68k-unknown-linux-gnu your-code.rs
```

----------------------------------------

TITLE: Using the dump-mono-stats Compiler Flag in Rust
DESCRIPTION: The `-Z dump-mono-stats` flag generates a file with monomorphized item statistics. It can accept an optional directory parameter for output location. This flag is useful for investigating compile times and understanding the size of codegen items.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/dump-mono-stats.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `dump-mono-stats`

--------------------

The `-Z dump-mono-stats` compiler flag generates a file with a list of the monomorphized items in the current crate.
It is useful for investigating compile times.

It accepts an optional directory where the file will be located. If no directory is specified, the file will be placed in the current directory.

See also `-Z dump-mono-stats-format` and `-Z print-mono-items`. Unlike `print-mono-items`,
`dump-mono-stats` aggregates monomorphized items by definition and includes a size estimate of how
large the item is when codegened.

See <https://rustc-dev-guide.rust-lang.org/backend/monomorph.html> for an overview of monomorphized items.
```

----------------------------------------

TITLE: Generic Argument Manipulation Example
DESCRIPTION: Demonstrates how to unpack and pack generic arguments using GenericArgKind, showing type, lifetime, and const argument handling in Rust's type system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/generic_arguments.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn deal_with_generic_arg<'tcx>(generic_arg: GenericArg<'tcx>) -> GenericArg<'tcx> {
    let new_generic_arg: GenericArgKind<'tcx> = match generic_arg.unpack() {
        GenericArgKind::Type(ty) => { /* ... */ }
        GenericArgKind::Lifetime(lt) => { /* ... */ }
        GenericArgKind::Const(ct) => { /* ... */ }
    };
    new_generic_arg.pack()
}
```

----------------------------------------

TITLE: Building and Running Example (CFI Enabled)
DESCRIPTION: This shell script compiles the C library and the Rust code, then executes the compiled Rust binary. The key difference from the previous script is the inclusion of `-fsanitize=cfi` and other CFI-related flags in the C compilation step and the `RUSTFLAGS`.  This enables Control Flow Integrity during compilation and linking. The expectation is that when CFI is enabled, the second call to `do_twice` with the transmuted function should lead to program termination due to a violation of CFI rules, which is confirmed by the "Illegal instruction" output.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_17

LANGUAGE: Shell
CODE:
```
$ make
mkdir -p target/release
clang -I. -Isrc -Wall -flto -fsanitize=cfi -fsanitize-cfi-icall-experimental-normalize-integers -fvisibility=hidden -c -emit-llvm src/foo.c -o target/release/libfoo.bc
llvm-ar rcs target/release/libfoo.a target/release/libfoo.bc
RUSTFLAGS="-L./target/release -Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers" cargo build -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu
   ...
   Compiling rust-cfi-4 v0.1.0 (/home/rcvalle/rust-cfi-4)
    Finished release [optimized] target(s) in 1m 06s
$ ./target/x86_64-unknown-linux-gnu/release/rust-cfi-4
The answer is: 12
With CFI enabled, you should not see the next answer
Illegal instruction
$
```

----------------------------------------

TITLE: Basic Rust Function Without Warnings
DESCRIPTION: Example of code that violates missing_docs lint but produces no warnings by default.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/lints/levels.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub fn foo() {}
```

----------------------------------------

TITLE: Defining fastcall Functions in Rust
DESCRIPTION: This snippet presents function definitions for the fastcall calling convention, which optimizes the calling of functions by using registers for the first few arguments. It includes several variations of function signatures. No external dependencies are needed beyond the Rust environment.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-import-name-type/output.txt#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
fastcall_fn_undecorated(7)
fastcall_fn_undecorated2(17)
fallback_fn_noprefix(8)
fallback_fn_decorated(9)
```

----------------------------------------

TITLE: Default Assembly Output
DESCRIPTION: The standard assembly output generated without the -Zverbose-asm flag, showing basic assembly instructions and labels.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/verbose-asm.md#2025-04-21_snippet_1

LANGUAGE: asm
CODE:
```
foo:
        push    rax
        add     edi, esi
        mov     dword ptr [rsp + 4], edi
        seto    al
        jo      .LBB0_2
        mov     eax, dword ptr [rsp + 4]
        pop     rcx
        ret
.LBB0_2:
        lea     rdi, [rip + .L__unnamed_1]
        mov     rax, qword ptr [rip + core::panicking::panic_const::panic_const_add_overflow::h9c85248fe0d735b2@GOTPCREL]
        call    rax

.L__unnamed_2:
        .ascii  "/app/example.rs"

.L__unnamed_1:
        .quad   .L__unnamed_2
        .asciz  "\017\000\000\000\000\000\000\000\004\000\000\000\005\000\000"
```

----------------------------------------

TITLE: Invalid CoercePointee on Enum Type
DESCRIPTION: Example showing error when attempting to derive CoercePointee on an enum instead of a struct.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0802.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(coerce_pointee)]
use std::marker::CoercePointee;
#[derive(CoercePointee)]
enum NotStruct<'a, T: ?Sized> {
    Variant(&'a T),
}
```

----------------------------------------

TITLE: Building Standard Library
DESCRIPTION: This command builds the standard library using the bootstrap compiler. The `--stage 0` flag specifies that the library should be built using the stage 0 compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
./x build --stage 0 library
```

----------------------------------------

TITLE: ExprUseVisitor Example in Rust Compiler
DESCRIPTION: This Rust example highlights how `ExprUseVisitor` in the Rust compiler iterates through a closure's code, identifying variable usage as either shared or mutable borrow. This helps in determining how each variable is captured in closures. Familiarity with Rust's borrowing model and compiler internals is needed to fully understand the implications of these usage patterns.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/closure.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
fn main() {
    let mut x = vec![21];
    let _cl = || {
        let y = x[0];  // 1.
        x[0] += 1;  // 2.
    };
}
```

----------------------------------------

TITLE: Demonstrating SIGPIPE kill behavior in Rust
DESCRIPTION: Example program showing how -Zon-broken-pipe=kill affects program behavior when writing to a closed pipe. The program will be terminated when the pipe is closed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/on-broken-pipe.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    loop {
        println!("hello world");
    }
}
```

LANGUAGE: console
CODE:
```
$ rustc -Zon-broken-pipe=kill main.rs
$ ./main | head -n1
hello world
```

----------------------------------------

TITLE: Configuring Custom Rust Documentation Search Engines
DESCRIPTION: Explains how to set up a custom search engine for Rust documentation that allows for quick access via browser navigation. It provides example URL templates for searching documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/advanced-features.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
"https://doc.rust-lang.org/stable/std/?search=%s"
```

LANGUAGE: text
CODE:
```
"https://doc.rust-lang.org/stable/std/?search=%s&go_to_first=true"
```

----------------------------------------

TITLE: Cloning Rust Source Repository (Shell)
DESCRIPTION: Provides the standard Git commands required to clone the official Rust source code repository from GitHub and then change the current directory into the newly created 'rust' directory. This is the essential first step before attempting to build from source.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_1

LANGUAGE: Shell
CODE:
```
git clone https://github.com/rust-lang/rust.git
cd rust
```

----------------------------------------

TITLE: Rust FFI Const Attribute Example
DESCRIPTION: Example showing the #[ffi_const] attribute syntax used in Rust FFI declarations. This attribute indicates that the function has no side effects and its return value depends only on its parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/ffi-const.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[ffi_const]
```

----------------------------------------

TITLE: Adding Missing Impl Members in Rust
DESCRIPTION: This assist adds scaffold for required impl members. It inserts placeholders for all trait items that need to be implemented.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
trait Trait<T> {
    type X;
    fn foo(&self) -> T;
    fn bar(&self) {}
}

impl Trait<u32> for () {

}
```

LANGUAGE: rust
CODE:
```
trait Trait<T> {
    type X;
    fn foo(&self) -> T;
    fn bar(&self) {}
}

impl Trait<u32> for () {
    type X;

    fn foo(&self) -> u32 {
        todo!()
    }
}
```

----------------------------------------

TITLE: Setting Max Error Size for Result Types in Rust
DESCRIPTION: This option sets the maximum size of the `Err`-variant in a `Result` returned from a function. This controls the `result_large_err` lint, which warns when error variants are too large. The default value is `128`.  This takes an integer representing the maximum size in bytes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_22



----------------------------------------

TITLE: Detailed Version Information Override in Rust Console
DESCRIPTION: Shows a more detailed example using rustc -vV command with RUSTC_OVERRIDE_VERSION_STRING, demonstrating how the release version is overridden while maintaining original system information like commit hash and date.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/rustc-override-version-string.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ RUSTC_OVERRIDE_VERSION_STRING="1.81.0-nightly (aaaaaaaaa 2025-03-22)" rustc -vV
rustc 1.81.0-nightly (aaaaaaaaa 2025-03-22)
binary: rustc
commit-hash: 43f0014ef0f242418674f49052ed39b70f73bc1c
commit-date: 2025-03-25
host: x86_64-unknown-linux-gnu
release: 1.81.0-nightly (aaaaaaaaa 2025-03-22)
LLVM version: 20.1.1
```

----------------------------------------

TITLE: Using offset_of_slice Feature with Struct Fields
DESCRIPTION: Demonstrates how to use the offset_of_slice feature to calculate the byte offset of a slice field within a struct. The example shows a struct with a u32 head field and a dynamically sized [u8] tail field, calculating the offset of the tail field.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/offset-of-slice.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(offset_of_slice)]

#[repr(C)]
pub struct Struct {
    head: u32,
    tail: [u8],
}

fn main() {
    assert_eq!(std::mem::offset_of!(Struct, tail), 4);
}
```

----------------------------------------

TITLE: Invalid CoerceUnsized Implementation with Multiple Unsized Fields
DESCRIPTION: Demonstrates an erroneous implementation of CoerceUnsized on a struct containing multiple unsized fields (T and U). This code fails because the compiler cannot determine how to handle multiple unsized fields during coercion.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0375.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(coerce_unsized)]
use std::ops::CoerceUnsized;

struct Foo<T: ?Sized, U: ?Sized> {
    a: i32,
    b: T,
    c: U,
}

// error: Struct `Foo` has more than one unsized field.
impl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {}
```

----------------------------------------

TITLE: Defining Projection
DESCRIPTION: This snippet defines the structure of a Projection, consisting of an associated item reference along with its inputs P0..Pm.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/goals-and-clauses.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
"Projection = <P0 as TraitName<P1..Pn>>::AssocItem<Pn+1..Pm>"
```

----------------------------------------

TITLE: Redirecting control flow to an invalid destination in Rust with CFI protection
DESCRIPTION: This example demonstrates how CFI prevents control flow hijacking by detecting an indirect call to an invalid destination within a function body. The code attempts to call into the middle of a function's nop padding rather than its entry point.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_5

LANGUAGE: rust
CODE:
```
use std::arch::naked_asm;
use std::mem;

fn add_one(x: i32) -> i32 {
    x + 1
}

#[unsafe(naked)]
pub extern "C" fn add_two(x: i32) {
    // x + 2 preceded by a landing pad/nop block
    naked_asm!(
        "
         nop
         nop
         nop
         nop
         nop
         nop
         nop
         nop
         nop
         lea eax, [rdi+2]
         ret
        "
    );
}

fn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {
    f(arg) + f(arg)
}

fn main() {
    let answer = do_twice(add_one, 5);

    println!("The answer is: {}", answer);

    println!("With CFI enabled, you should not see the next answer");
    let f: fn(i32) -> i32 = unsafe {
        // Offset 0 is a valid branch/call destination (i.e., the function entry
        // point), but offsets 1-8 within the landing pad/nop block are invalid
        // branch/call destinations (i.e., within the body of the function).
        mem::transmute::<*const u8, fn(i32) -> i32>((add_two as *const u8).offset(5))
    };
    let next_answer = do_twice(f, 5);

    println!("The next answer is: {}", next_answer);
}
```

----------------------------------------

TITLE: Demonstrating Invalid Auto Trait Declaration in Rust
DESCRIPTION: This code snippet shows an erroneous declaration of an auto trait with an associated item, which is not allowed in Rust. The example is designed to fail compilation with error E0380.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0380.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
unsafe auto trait Trait {
    type Output; // error!
}
```

----------------------------------------

TITLE: Configuring Custom XRay Instrumentation Settings in Rust
DESCRIPTION: Customize XRay instrumentation settings by specifying options after the -Z instrument-xray flag. Multiple settings can be separated by commas.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/instrument-xray.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
-Z instrument-xray=skip-exit
```

LANGUAGE: rust
CODE:
```
-Z instrument-xray=ignore-loops,instruction-threshold=300
```

----------------------------------------

TITLE: Setting DESTDIR Environment Variable (Bash)
DESCRIPTION: Shows the command to set the `DESTDIR` environment variable in a Bash shell. This variable is used by `./x.py install` to specify a root directory for the installation path, allowing for staging the installation in a custom location before potentially moving or packaging it.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_3

LANGUAGE: Bash
CODE:
```
export DESTDIR=<path>
```

----------------------------------------

TITLE: Invalid Non-ASCII Identifier Usage in Rust
DESCRIPTION: Examples of invalid usage of non-ASCII identifiers in Rust, showing errors when used in module declarations and no_mangle functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0754.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
mod řųśť; // error!

#[no_mangle]
fn řųśť() {} // error!

fn main() {}
```

----------------------------------------

TITLE: Running LLVM IR Generation with Optimization
DESCRIPTION: Commands to generate and optimize LLVM IR using rustc and LLVM's opt tool. Demonstrates how to emit LLVM IR with optimization flags and process it through LLVM's optimizer.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/debugging.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ rustc +local my-file.rs --emit=llvm-ir -O -C no-prepopulate-passes \
    -C codegen-units=1
$ OPT=./build/$TRIPLE/llvm/bin/opt
$ $OPT -S -O2 < my-file.ll > my
```

----------------------------------------

TITLE: Invalid Variadic Parameter Usage in Rust FFI
DESCRIPTION: Example showing incorrect usage of variadic parameters with non-C ABI function, which results in error E0045.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0045.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
extern "Rust" {
    fn foo(x: u8, ...); // error!
}
```

----------------------------------------

TITLE: Implementing Decodable for Arena-allocated Types
DESCRIPTION: Example showing how to implement the Decodable trait for types that contain arena-allocated values, using the TyDecoder trait which provides access to the TyCtxt context needed for arena allocation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/serialization.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for MyStruct<'tcx> {
    /* ... */
}
```

----------------------------------------

TITLE: Defining a Custom MIR Visitor Structure in Rust
DESCRIPTION: This snippet demonstrates how to define a structure for a custom MIR visitor in Rust. It showcases the necessary component 'tcx' that holds the type context required for processing the MIR, ensuring easy access to needed state during traversal.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/visitor.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
struct MyVisitor<...> {
    tcx: TyCtxt<'tcx>,
    ...
}
```

----------------------------------------

TITLE: Configuring Paths for Interior Mutability in Rust
DESCRIPTION: This configuration option specifies a list of paths to types that should be treated as if they do not contain interior mutability.  This affects lints related to mutable consts within types. The default value is `["bytes::Bytes"]`. The input is a list of strings representing paths.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_21



----------------------------------------

TITLE: Rust if statement compilation to MIR
DESCRIPTION: Demonstrates how a simple `if` statement in Rust is compiled down into multiple basic blocks in MIR.  Each block represents a segment of code that executes sequentially, with conditional jumps (goto) at the end of blocks to control the execution path.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/appendix/background.md#2025-04-21_snippet_1

LANGUAGE: rust,ignore
CODE:
```
a = 1;
if some_variable {
    b = 1;
} else {
    c = 1;
}
d = 1;
```

----------------------------------------

TITLE: Desugaring Doc Comment in Rust
DESCRIPTION: Converts traditional doc-comments to attribute form using the #[doc] attribute for clearer documentation representation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_39

LANGUAGE: rust
CODE:
```
#[doc = r"Multi-line
comment"]
```

----------------------------------------

TITLE: Installing and Building for x86_64-unknown-none Target
DESCRIPTION: Commands for installing the x86_64-unknown-none target via rustup and using it with cargo build.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/x86_64-unknown-none.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
# install cross-compile toolchain
rustup target add x86_64-unknown-none
# target flag may be used with any cargo or rustc command
cargo build --target x86_64-unknown-none
```

----------------------------------------

TITLE: Finding Next Available Rust Error Code
DESCRIPTION: This shell command runs the `tidy` script, which checks for coding conventions and identifies the highest used error code. The output helps determine the next available error code for allocation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/error-codes.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```

./x test tidy

```

----------------------------------------

TITLE: Enforcing Fast-Forward Merges (Git Console)
DESCRIPTION: Configures the local Git repository to only allow fast-forward merges, preventing the creation of explicit merge commits. This aligns with the repository's rebase workflow policy and helps maintain a linear history.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_21

LANGUAGE: console
CODE:
```
git config merge.ff only
```

----------------------------------------

TITLE: Incorrect Usage of CMSE Nonsecure Entry Attribute in Rust
DESCRIPTION: This code snippet demonstrates an erroneous use of the #[cmse_nonsecure_entry] attribute on a function without specifying a C ABI. The compiler no longer emits this error, but the example illustrates a previously problematic pattern.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0776.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(cmse_nonsecure_entry)]

#[no_mangle]
#[cmse_nonsecure_entry]
pub fn entry_function(input: Vec<u32>) {}
```

----------------------------------------

TITLE: Demonstrating Incompatible Naked Function Attributes in Rust
DESCRIPTION: Example showing an erroneous code snippet that demonstrates the incompatibility between #[inline] and #[naked] attributes. This code will fail to compile with error E0736.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0736.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[inline]
#[unsafe(naked)]
fn foo() {}
```

----------------------------------------

TITLE: Benchmarking a Clippy Pull Request using Git and Lintcheck (Bash)
DESCRIPTION: This Bash script outlines the workflow for benchmarking a specific Clippy pull request (PR) against the master branch. It fetches the PR branch, runs the Lintcheck benchmark using `cargo lintcheck --perf`, identifies the last common commit with master, checks out that commit, runs the benchmark again, and finally uses `perf diff` to compare the two performance data files (`perf.data` and `perf.data.0`) generated in the `target/lintcheck/sources/CRATE/` directory. Requires Git, `cargo lintcheck`, and the Linux `perf` tool.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/benchmarking.md#_snippet_0

LANGUAGE: Bash
CODE:
```
git fetch upstream pull/<PR_NUMBER>/head:<BRANCH_NAME>
git switch BRANCHNAME

# Bench
cargo lintcheck --perf

# Get last common commit, checkout that
LAST_COMMIT=$(git log BRANCHNAME..master --oneline | tail -1 | cut -c 1-11)
git switch -c temporary $LAST_COMMIT

# We're now on master

# Bench
cargo lintcheck --perf
perf diff ./target/lintcheck/sources/CRATE/perf.data ./target/lintcheck/sources/CRATE/perf.data.0
```

----------------------------------------

TITLE: Building Rust Core for LynxOS-178
DESCRIPTION: This command builds the Rust core library for the LynxOS-178 target using Cargo. It uses the nightly version of Cargo and employs the build-std feature to enable building the standard library, albeit only core is supported currently.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/lynxos178.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cargo +nightly build -Z build-std=core --target x86_64-lynx-lynxos178
```

----------------------------------------

TITLE: Debugging Stdarch Tests with GDB
DESCRIPTION: Commands for debugging stdarch tests using GDB. First specifies the executable path to load symbols properly, then connects to the remote debugging port provided by SDE.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/debugging.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
gdb /home/user/projects/rustc_codegen_gcc/build/build_sysroot/sysroot_src/library/stdarch/target/debug/deps/core_arch-fd2d75f89baae5c6
```

LANGUAGE: bash
CODE:
```
target remote :51299
```

----------------------------------------

TITLE: Configuring Space Before Colon in Rust
DESCRIPTION: Demonstrates the 'space_before_colon' option. When false (default), no space is added before colons. When true, a space is added before colons.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_66

LANGUAGE: rust
CODE:
```
fn lorem<T: Eq>(t: T) {
    let lorem: Dolor = Lorem {
        ipsum: dolor,
        sit: amet,
    };
}
```

LANGUAGE: rust
CODE:
```
fn lorem<T : Eq>(t : T) {
    let lorem : Dolor = Lorem {
        ipsum : dolor,
        sit : amet,
    };
}
```

----------------------------------------

TITLE: Configuring Bootstrap for VxWorks Targets
DESCRIPTION: This configuration snippet demonstrates how to modify the `bootstrap.toml` file to include VxWorks targets for Rust compilation. The `target` list in `bootstrap.toml` must be updated to include the desired VxWorks target identifiers, alongside the necessary workbench and wr-cc configurations. This process is crucial for cross-compiling Rust for VxWorks platforms.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/vxworks.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]\nbuild-stage = 1\ntarget = [\n    "<HOST_TARGET>",\n    "x86_64-wrs-vxworks",\n    "aarch64-wrs-vxworks",\n    "i686-wrs-vxworks",\n    "armv7-wrs-vxworks-eabihf",\n    "powerpc-wrs-vxworks",\n    "powerpc64-wrs-vxworks",\n    "powerpc-wrs-vxworks-spe",\n]
```

----------------------------------------

TITLE: Switching to and Resetting Beta Branch
DESCRIPTION: Commands to switch to the beta branch, fetch upstream changes, and reset to the upstream beta branch.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/backport.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
git switch beta
git fetch upstream
git reset --hard upstream/beta
```

----------------------------------------

TITLE: Defining Keyword Patterns in a Rust Lexer
DESCRIPTION: The snippet defines a series of Rust language keywords and maps each to a corresponding token representation. This is likely used for lexical analysis in a Rust compiler or interpreter. The snippet handles common Rust keywords like 'async', 'fn', 'use', 'struct', and others, which are essential for language parsing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/keywords.txt#2025-04-21_snippet_0

LANGUAGE: Regex
CODE:
```
ASYNC_KW "async"
WHITESPACE " "
FN_KW "fn"
WHITESPACE " "
USE_KW "use"
WHITESPACE " "
STRUCT_KW "struct"
WHITESPACE " "
TRAIT_KW "trait"
WHITESPACE " "
ENUM_KW "enum"
WHITESPACE " "
IMPL_KW "impl"
WHITESPACE " "
TRUE_KW "true"
WHITESPACE " "
FALSE_KW "false"
WHITESPACE " "
AS_KW "as"
WHITESPACE " "
EXTERN_KW "extern"
WHITESPACE " "
CRATE_KW "crate"
WHITESPACE "\n"
MOD_KW "mod"
WHITESPACE " "
PUB_KW "pub"
WHITESPACE " "
SELF_KW "self"
WHITESPACE " "
SUPER_KW "super"
WHITESPACE " "
IN_KW "in"
WHITESPACE " "
WHERE_KW "where"
WHITESPACE " "
FOR_KW "for"
WHITESPACE " "
LOOP_KW "loop"
WHITESPACE " "
WHILE_KW "while"
WHITESPACE " "
IF_KW "if"
WHITESPACE " "
MATCH_KW "match"
WHITESPACE " "
CONST_KW "const"
WHITESPACE "\n"
STATIC_KW "static"
WHITESPACE " "
MUT_KW "mut"
WHITESPACE " "
TYPE_KW "type"
WHITESPACE " "
REF_KW "ref"
WHITESPACE " "
LET_KW "let"
WHITESPACE " "
ELSE_KW "else"
WHITESPACE " "
MOVE_KW "move"
WHITESPACE " "
RETURN_KW "return"
WHITESPACE "\n"
```

----------------------------------------

TITLE: Rust Function Signature with Early/Late Bound Lifetimes
DESCRIPTION: Presents a Rust function `foo` with an early-bound lifetime `'a`, a late-bound lifetime `'b`, and a type parameter `T`. The accompanying comment shows a simplified internal representation, illustrating how early-bound regions (`'a/#0`) use `RegionKind::EarlyParam` (implied by the debug format), late-bound regions (`ReLateParam(...)`) use `RegionKind::LateParam`, and type parameters (`T/#2`) use `TyKind::Param` with their assigned index.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/param_ty_const_regions.md#_snippet_3

LANGUAGE: rust
CODE:
```
// This function would have its signature represented as:
//
// ```
// fn(
//     T/#2,
//     Ref('a/#0, Ref(ReLateParam(...), u32))
// ) -> Ref(ReLateParam(...), u32)
// ```
fn foo<'a, 'b, T: 'a>(one: T, two: &'a &'b u32) -> &'b u32 {
    ...
}
```

----------------------------------------

TITLE: Illustrating Generic Parameter Indexing in Rust
DESCRIPTION: Demonstrates how indices are assigned to generic parameters in Rust, considering parameters defined in outer scopes. Within the `method`'s scope, `X` (from the `impl`) has index 0, `Y` (from the `impl`) has index 1, and `Z` (from the `method`) has index 2, reflecting the cumulative order of parameter declarations starting from the relevant `impl` block.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/param_ty_const_regions.md#_snippet_2

LANGUAGE: rust
CODE:
```
struct Foo<A, B> {
  // A would have index 0
  // B would have index 1

  .. // some fields
}
impl<X, Y> Foo<X, Y> {
  fn method<Z>() {
    // inside here, X, Y and Z are all in scope
    // X has index 0
    // Y has index 1
    // Z has index 2
  }
}
```

----------------------------------------

TITLE: Configuring Rust Library Features in TOML
DESCRIPTION: This snippet defines various Rust library features using TOML syntax. It includes features for the standard library, runtime capabilities, and compiler options. Each feature is described with its purpose and configuration details.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
# These are features which are enabled by default. If you wish to disable one of these
# features, you must also set `default = false` in addition to setting the feature
# itself to `false`. This form is necessary because otherwise Cargo will assume
# `default = true`, which will enable any feature which has not been explicitly
# disabled.
[features]
default = []

# Allow the standard library to be compiled with some restrictions
restricted-std = []

# Allow the standard library to be built without jemalloc
#
# By default jemalloc is used as the global allocator. Disabling this feature
# removes the dependency on jemalloc, which can be useful in constrained
# environments.
default-alloc = []

# Allow the standard library to be built without any special panic handling
#
# By default the standard library contains special panic handling, but disabling
# this feature removes it. This can be useful in constrained environments or
# when you want to provide your own panic handling.
default-panic = []

# Allow the standard library to be built with backtrace support
#
# This feature is enabled by default on most platforms, but can be disabled
# to remove the dependency on the `backtrace` crate.
backtrace = []

# Allow the standard library to be built with small string optimizations
#
# This feature is enabled by default, but can be disabled to remove the
# dependency on the `smallvec` crate.
small-string = []

# Allow the standard library to be built with support for 128-bit integers
#
# This feature is enabled by default on most platforms, but can be disabled
# to remove support for 128-bit integers.
i128 = []

# Allow the standard library to be built with support for atomic operations
#
# This feature is enabled by default on most platforms, but can be disabled
# to remove support for atomic operations.
atomic = []

# Allow the standard library to be built with support for thread-local storage
#
# This feature is enabled by default on most platforms, but can be disabled
# to remove support for thread-local storage.
tls = []

# Allow the standard library to be built with support for SIMD operations
#
# This feature is enabled by default on most platforms, but can be disabled
# to remove support for SIMD operations.
simd = []

# Allow the standard library to be built with support for compiler-rt builtins
#
# This feature is enabled by default on most platforms, but can be disabled
# to remove support for compiler-rt builtins.
compiler-builtins = []

# Allow the standard library to be built with support for unwinding
#
# This feature is enabled by default on most platforms, but can be disabled
# to remove support for unwinding.
unwind = []

# Allow the standard library to be built with support for profiling
#
# This feature is disabled by default, but can be enabled to add support
# for profiling.
profile = []

# Allow the standard library to be built with support for llvm-tools-preview
#
# This feature is disabled by default, but can be enabled to add support
# for llvm-tools-preview.
llvm-tools = []

# Allow the standard library to be built with support for sanitizers
#
# This feature is disabled by default, but can be enabled to add support
# for sanitizers.
sanitizer = []

# Allow the standard library to be built with support for LTO
#
# This feature is disabled by default, but can be enabled to add support
# for LTO.
lto = []

# Allow the standard library to be built with support for PGO
#
# This feature is disabled by default, but can be enabled to add support
# for PGO.
pgo = []

# Allow the standard library to be built with support for coverage
#
# This feature is disabled by default, but can be enabled to add support
# for coverage.
coverage = []

# Allow the standard library to be built with support for fuzzing
#
# This feature is disabled by default, but can be enabled to add support
# for fuzzing.
fuzzing = []

# Allow the standard library to be built with support for miri
#
# This feature is disabled by default, but can be enabled to add support
# for miri.
miri = []

# Allow the standard library to be built with support for rustfmt
#
# This feature is disabled by default, but can be enabled to add support
# for rustfmt.
rustfmt = []

# Allow the standard library to be built with support for clippy
#
# This feature is disabled by default, but can be enabled to add support
# for clippy.
clippy = []

# Allow the standard library to be built with support for rls
#
# This feature is disabled by default, but can be enabled to add support
# for rls.
rls = []

# Allow the standard library to be built with support for rust-analyzer
#
# This feature is disabled by default, but can be enabled to add support
# for rust-analyzer.
rust-analyzer = []
```

----------------------------------------

TITLE: Using dump-mono-stats-format Compiler Flag in Rust
DESCRIPTION: The -Z dump-mono-stats-format flag controls the output format when using -Z dump-mono-stats. It accepts format parameters with markdown being the default. JSON format is also supported and is useful for programmatic analysis of compilation performance metrics.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/dump-mono-stats-format.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `dump-mono-stats-format`
```

----------------------------------------

TITLE: Larger Stack Allocation in Rust
DESCRIPTION: This Rust code example allocates a larger array on the stack to demonstrate how the stack probe mechanism changes for larger allocations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
fn main() {
    let v: [u8; 65536] = [1; 65536];
    let first = &v[0];
    println!("The first element is: {first}");
}
```

----------------------------------------

TITLE: Simple Rust Function Example
DESCRIPTION: A basic Rust function that adds two 32-bit integers, marked with no_mangle for direct assembly output viewing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/verbose-asm.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[no_mangle]
pub fn foo(a: i32, b: i32) -> i32 {
    a + b
}
```

----------------------------------------

TITLE: Building with Cargo for Experimental Target
DESCRIPTION: This text snippet demonstrates how to use the `cargo build` command with the `-Z build-std` flag to build for the `aarch64-kmc-solid_asp3` target on Rust Nightly. It allows building without the target artifacts being available.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/kmc-solid.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
cargo build -Z build-std --target aarch64-kmc-solid_asp3
```

----------------------------------------

TITLE: Desugaring a Generic Function with Lifetimes in Rust
DESCRIPTION: This snippet illustrates how a function `foo` that takes a reference to a type `T` with an associated lifetime parameter `a` is desugared to a function item type. It explains the absence of the lifetime in the item type and its implications.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn foo<'a, T: Sized>(a: &'a T) -> &'a T {
    # a
    /* snip */
}
```

----------------------------------------

TITLE: Parsing Byte String Literal with Unicode Escape
DESCRIPTION: Demonstrates an incomplete byte string literal with a Unicode escape sequence that is missing a terminating quote symbol. The `b"\u{20AA}"` requires a closing quote to be valid Rust syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_string_with_unicode_escape.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
b"\u{20AA}"
```

----------------------------------------

TITLE: Bumping Clippy Version - Bash
DESCRIPTION: This command uses `cargo dev release bump_version` to update the version numbers in all relevant `Cargo.toml` files within the Clippy project. This is a crucial step before creating a new release to ensure version consistency.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/release.md#_snippet_1

LANGUAGE: bash
CODE:
```
cargo dev release bump_version
```

----------------------------------------

TITLE: Auto Import Rust Feature
DESCRIPTION: Automatic import management for Rust code with configurable grouping and prefix strategies
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/features_generated.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use std::fs::File;

use itertools::Itertools;
use syntax::ast;

use crate::utils::insert_use;

use self::auto_import;

use super::AssistContext;
```

----------------------------------------

TITLE: Defining Internal Rust Compiler Feature in Markdown
DESCRIPTION: This snippet defines the 'profiler_runtime_lib' feature as an internal component of the Rust compiler, emphasizing that it is not intended for general use.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/profiler-runtime-lib.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# `profiler_runtime_lib`

This feature is internal to the Rust compiler and is not intended for general use.
```

----------------------------------------

TITLE: Usage of transmute for FFI in Rust
DESCRIPTION: This snippet demonstrates the unsafe use of transmute to convert a function item into a function pointer type within Foreign Function Interface (FFI) contexts. It warns against incorrect use due to the type differences between function items and function pointers.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0591.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
extern "C" fn foo(userdata: Box<i32>) {
    /* ... */ 
}

# fn callback(_: extern "C" fn(*mut i32)) {}
# use std::mem::transmute;
unsafe {
    let f: extern "C" fn(*mut i32) = transmute(foo);
    callback(f);
}
```

----------------------------------------

TITLE: Demonstrating Invalid Unsized Expressions in Rust
DESCRIPTION: This snippet illustrates various invalid uses of unsized types, including unsized statics, struct initialization, return types, and reassignment of unsized variables. It helps clarify the limitations of the unsized_locals feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/unsized-locals.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(unsized_locals)]

use std::any::Any;

struct MyStruct<T: ?Sized> {
    content: T,
}

struct MyTupleStruct<T: ?Sized>(T);

fn answer() -> Box<dyn Any> {
    Box::new(42)
}

fn main() {
    // You CANNOT have unsized statics.
    static X: dyn Any = *answer();  // ERROR
    const Y: dyn Any = *answer();  // ERROR

    // You CANNOT have struct initialized unsized.
    MyStruct { content: *answer() };  // ERROR
    MyTupleStruct(*answer());  // ERROR
    (42, *answer());  // ERROR

    // You CANNOT have unsized return types.
    fn my_function() -> dyn Any { *answer() }  // ERROR

    // You CAN have unsized local variables...
    let mut x: dyn Any = *answer();  // OK
    // ...but you CANNOT reassign to them.
    x = *answer();  // ERROR

    // You CANNOT even initialize them separately.
    let y: dyn Any;  // OK
    y = *answer();  // ERROR

    // Not mentioned in the RFC, but by-move captured variables are also Sized.
    let x: dyn Any = *answer();
    (move || {  // ERROR
        let y = x;
    })();

    // You CAN create a closure with unsized arguments,
    // but you CANNOT call it.
    // This is an implementation detail and may be changed in the future.
    let f = |x: dyn Any| {};
    f(*answer());  // ERROR
}
```

----------------------------------------

TITLE: Calculating Enum Field Offsets in Rust
DESCRIPTION: Demonstrates how to use the offset_of! macro with the offset_of_enum feature to calculate memory offsets of fields within enum variants. Shows examples with both tuple-style and struct-style enum variants, as well as Option types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/offset-of-enum.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(offset_of_enum)]
use std::mem;

#[repr(u8)]
enum Enum {
    A(u8, u16),
    B { one: u8, two: u16 },
}

assert_eq!(mem::offset_of!(Enum, A.0), 1);
assert_eq!(mem::offset_of!(Enum, B.two), 2);

assert_eq!(mem::offset_of!(Option<&u8>, Some.0), 0);
```

----------------------------------------

TITLE: Failing Auto Trait with Generics in Rust
DESCRIPTION: This code snippet demonstrates an attempt to define an auto trait with a generic type parameter in Rust.  This is not allowed because the compiler cannot infer the generic type for an auto trait, as it is automatically implemented for all existing types. This code will result in a compile error E0567.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0567.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```compile_fail,E0567
#![feature(auto_traits)]

auto trait Generic<T> {} // error!
# fn main() {}
```
```

----------------------------------------

TITLE: Whitespace Characters in Rust
DESCRIPTION: This snippet shows how whitespace characters are defined in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/byte_strings.txt#2025-04-21_snippet_3

LANGUAGE: Rust
CODE:
```
"WHITESPACE \" \""

```

LANGUAGE: Rust
CODE:
```
"WHITESPACE \"\n\""

```

----------------------------------------

TITLE: Implementing Custom Trait Error Messages in Rust
DESCRIPTION: Example demonstrating incorrect usage of the #[rustc_on_unimplemented] attribute where the error occurs due to missing identifier in curly braces. The attribute allows custom error messages with type parameter placeholders using {Self} and other type parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0231.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(rustc_attrs)]
#![allow(internal_features)]

#[rustc_on_unimplemented = "error on `{Self}` with params `<{A},{}>`"] // error!
trait BadAnnotation<A> {}
```

----------------------------------------

TITLE: Checking rustc and clang versions
DESCRIPTION: This snippet shows how to check the versions of `rustc` and `clang-cl` to ensure compatibility for cross-language LTO on Windows.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/linker-plugin-lto.md#2025-04-21_snippet_9

LANGUAGE: bat
CODE:
```
"rustc -V --verbose\nclang-cl --version"
```

----------------------------------------

TITLE: Using doc_masked Attribute in Rust
DESCRIPTION: Demonstrates how to use the `#[doc(masked)]` attribute on an `extern crate` statement to mark a crate as masked, preventing its types from appearing in documentation lists.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/doc-masked.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[doc(masked)]\nextern crate some_crate;
```

----------------------------------------

TITLE: Simple Rust Hello World Example with MIR Debugging
DESCRIPTION: Shows a minimal Rust program and how to generate MIR dump files for the `main` function, illustrating the use of `-Z dump-mir` flag and directory contents of generated MIR files.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/debugging.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn main() {
    println!("Hello, world!");
}
```

LANGUAGE: bash
CODE:
```
cat > foo.rs
fn main() {
    println!("Hello, world!");
}
^D
rustc -Z dump-mir=main foo.rs
ls mir_dump/* | wc -l
```

----------------------------------------

TITLE: Workflow for Keeping Git Branches Up-to-Date (Console)
DESCRIPTION: A sequence of commands to update your local master branch from upstream and then rebase your feature branch on top of the updated master, followed by pushing the rebased feature branch to your fork.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_12

LANGUAGE: console
CODE:
```
git checkout master
git pull upstream master --ff-only # to make certain there are no merge commits
git rebase master feature_branch
git push --force-with-lease # (set origin to be the same as local)
```

----------------------------------------

TITLE: Using Cranelift Codegen Backend with Cargo
DESCRIPTION: Command to build a project using the Cranelift codegen backend instead of the default LLVM backend, using the cargo-clif wrapper script.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/Readme.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
$ $cg_clif_dir/dist/cargo-clif build
```

----------------------------------------

TITLE: Demonstrating Pattern Usefulness in Rust Match Expression
DESCRIPTION: This snippet shows a match expression on a tuple of (bool, Option<Foo>), illustrating how pattern usefulness is checked for redundancy and exhaustiveness.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/pat-exhaustive-checking.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// x: (bool, Option<Foo>)
match x {
    (true, _) => {} // 1
    (false, Some(Foo::Bar)) => {} // 2
    (false, Some(_)) => {} // 3
    (true, None) => {} // 4
}
```

----------------------------------------

TITLE: Invalid Late-Bound Lifetime Parameter Specification
DESCRIPTION: Demonstrates an erroneous attempt to specify a lifetime argument for a late-bound lifetime parameter, which is not allowed in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0794.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<'a>(x: &'a str) -> &'a str { x }
let _ = foo::<'static>;
```

----------------------------------------

TITLE: Defining an Exported Function in Rust
DESCRIPTION: Example Rust code showing how to define a function that will be exported when using the -Zexport-executable-symbols flag. The #[no_mangle] attribute is essential to prevent name mangling and ensure the symbol is exported with its original name.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/export-executable-symbols.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[no_mangle]
fn my_function() -> usize {
    return 42;
}

fn main() {
    println!("Hello, world!");
}
```

----------------------------------------

TITLE: Demonstrating FnOnce Constraint in Async Closures (Rust)
DESCRIPTION: This example shows how capturing and dropping a variable forces the coroutine-closure to be AsyncFnOnce, requiring all captures to be by-move. It demonstrates the need to analyze the body of the coroutine-closure to determine if upvars are used in a 'consuming' way.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/coroutine-closures.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
let x = String::new();
let y = String::new();
let c = async move || {
    drop(y);
    println!("{x}");
};
```

----------------------------------------

TITLE: Defining a Rust Library Crate with Name A
DESCRIPTION: This snippet defines a Rust library crate named 'a'. It serves as a base for demonstration of crate name conflicts when multiple crates share the same name.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0519.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![crate_name = "a"]
#![crate_type = "lib"]

pub fn foo() {}
```

----------------------------------------

TITLE: Pattern Matching with Procedural Macros
DESCRIPTION: This Rust snippet shows procedural macro pattern syntax for matching if expressions without else blocks, used in Clippy lints. Inputs include AST nodes with special conditions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
pattern!{
    pat_if_without_else: Expr =
        If(
            _,
            Block(
                Expr( If(_, _, ())#inner )
                | Semi( If(_, _, ())#inner )
            )#then,
            ()
        )
}
```

----------------------------------------

TITLE: Preserving `for<T>` in Rust with `non_lifetime_binders`
DESCRIPTION: This snippet showcases a fix for rustfmt removing `for<T>` when using the `non_lifetime_binders` feature. The example demonstrates a trait definition where `for<T>` is used in a where clause bound, ensuring it is correctly preserved after formatting. This resolves an issue when using advanced features in Rust code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_13

LANGUAGE: rust
CODE:
```
#![feature(non_lifetime_binders)]
#![allow(incomplete_features)]

trait Other<U: ?Sized> {}

trait Trait<U>
where
    for<T> U: Other<T> {}
```

----------------------------------------

TITLE: Using asm_goto_with_outputs for inline assembly with both label and output operands in Rust
DESCRIPTION: This example demonstrates how to use the `asm_goto_with_outputs` feature to combine label operands with output operands in inline assembly. The assembly code assigns a value to an output variable and then jumps to a labeled block. The output operands are assigned before the label blocks are executed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/asm-goto-with-outputs.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
unsafe {
    let a: usize;
    asm!(
        "mov {}, 1"
        "jmp {}",
        out(reg) a,
        label {
            println!("Jumped from asm {}!", a);
        }
    );
}
```

----------------------------------------

TITLE: Defining Simple Rust Functions for Stack Size Analysis
DESCRIPTION: This snippet defines two Rust functions: 'foo' which doesn't use the stack, and 'bar' which allocates an array on the stack.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/emit-stack-sizes.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![crate_type = "lib"]

use std::ptr;

pub fn foo() {
    // this function doesn't use the stack
}

pub fn bar() {
    let xs = [0u32; 2];

    // force LLVM to allocate `xs` on the stack
    unsafe { ptr::read_volatile(&xs.as_ptr()); }
}
```

----------------------------------------

TITLE: Generating LateLintPass Boilerplate in Clippy
DESCRIPTION: Command to generate boilerplate code for a new lint that uses LateLintPass. This is used when the lint needs access to type information and symbol relationships.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/lint_passes.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
$ cargo dev new_lint --name=<your_new_lint> --pass=late --category=<your_category_choice>
```

----------------------------------------

TITLE: Demonstrating Compile Flags Directive in Rust Test
DESCRIPTION: Example showing how to use the compile-flags directive to disable overflow checks in a Rust test. The directive is specified using //@ syntax and affects how rustc compiles the test.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/directives.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// Test the behavior of `0 - 1` when overflow checks are disabled.

//@ compile-flags: -C overflow-checks=off

fn main() {
    let x = 0 - 1;
    ...
}
```

----------------------------------------

TITLE: Using crate-attr Flag for Crate Name Injection in Rust
DESCRIPTION: Example showing how to use the `-Z crate-attr` flag to inject a crate_name attribute into the crate root, equivalent to adding `#![crate_name="test"]` at the beginning of the source file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/crate-attr.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![crate_name="test"]
```

----------------------------------------

TITLE: Error Example: Attempting Integer Representation on Zero-Variant Enum in Rust
DESCRIPTION: This code demonstrates the E0084 error that occurs when trying to define an integer representation for a zero-variant enum. Since there are no variants, there are no values to represent with the integer type.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0084.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(i32)]
enum NightsWatch {} // error: unsupported representation for zero-variant enum
```

----------------------------------------

TITLE: Serving the Clippy Book Locally with mdBook
DESCRIPTION: Command to run the mdBook serve feature which creates a local web server that automatically updates as changes are made to the book content. The --open flag automatically opens the book in your default web browser.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/book.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
mdbook serve book --open
```

----------------------------------------

TITLE: Fully Instantiated Query Example
DESCRIPTION: This snippet shows the instantiation of a canonicalized query using the substitution S, replacing bound canonical variables with inference variables in preparation for solving the trait query.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/canonicalization.md#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
?A: Foo<'?B, ?C>
```

----------------------------------------

TITLE: Checking Documentation only using Rustdoc Bash
DESCRIPTION: This command uses the `--check` flag in conjunction with `-Z unstable-options` to perform type checking and linting on the code within the documentation for `src/lib.rs` without actually generating any HTML documentation or running doctests.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_17

LANGUAGE: bash
CODE:
```
rustdoc -Z unstable-options --check src/lib.rs
```

----------------------------------------

TITLE: Plugin Usage Example Causing Error
DESCRIPTION: Shows how attempting to use a plugin compiled as rlib results in a compiler error. The plugin must be available in dylib format to work correctly.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0457.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(plugin)]
#![plugin(rlib_plugin)] // error: plugin `rlib_plugin` only found in rlib
                        //        format, but must be available in dylib

fn main() {}
```

----------------------------------------

TITLE: Enforcing Type Equality in Rust's Type Inference
DESCRIPTION: Demonstrates the recommended method for enforcing type equality using the inference context's 'at' and 'eq' methods
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/type-inference.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
infcx.at(...).eq(t, u);
```

----------------------------------------

TITLE: Passing Arguments to Test Runner with rustdoc (Bash)
DESCRIPTION: Explains how the `--test-args` flag is used in conjunction with `--test` to pass custom options directly to the test runner executable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_13

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --test --test-args ignored
```

----------------------------------------

TITLE: Configuring Bootstrap Build Targets for tvOS
DESCRIPTION: Configuration for enabling Apple tvOS targets in Rust bootstrap build process using bootstrap.toml file. Specifies build stage and target architectures for tvOS compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-tvos.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
target = ["aarch64-apple-tvos", "aarch64-apple-tvos-sim"]
```

----------------------------------------

TITLE: Setting Up Incremental Compilation in bootstrap.toml
DESCRIPTION: TOML configuration to enable incremental compilation for faster subsequent builds.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/suggested.md#2025-04-21_snippet_7

LANGUAGE: toml
CODE:
```
[rust]
incremental = true
```

----------------------------------------

TITLE: Checking Method Implementation in Rust Impl Blocks
DESCRIPTION: Shows how to verify if an impl block defines a specific method by examining ImplItem structures. Includes checks for method name, self parameter, and return type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/method_checking.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use clippy_utils::ty::is_type_diagnostic_item;
use clippy_utils::return_ty;
use rustc_hir::{ImplItem, ImplItemKind};
use rustc_lint::{LateContext, LateLintPass};
use rustc_span::symbol::sym;

impl<'tcx> LateLintPass<'tcx> for MyTypeImpl {
    fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {
        // Check if item is a method/function
        if let ImplItemKind::Fn(ref signature, _) = impl_item.kind
            // Check the method is named `our_fancy_method`
            && impl_item.ident.name.as_str() == "our_fancy_method"
            // We can also check it has a parameter `self`
            && signature.decl.implicit_self.has_implicit_self()
            // We can go even further and even check if its return type is `String`
            && is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym::String)
        {
            println!("`our_fancy_method` is implemented!");
        }
    }
}
```

----------------------------------------

TITLE: Clang Wrapper Script for x86_64-unknown-linux-ohos
DESCRIPTION: This shell script wraps the Clang compiler from the OpenHarmony SDK for the x86_64-unknown-linux-ohos target. It sets the target architecture, sysroot, and defines the __MUSL__ macro.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/openharmony.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
#!/bin/sh
exec /path/to/ohos-sdk/linux/native/llvm/bin/clang \
  -target x86_64-linux-ohos \
  --sysroot=/path/to/ohos-sdk/linux/native/sysroot \
  -D__MUSL__ \
  "$@"
```

----------------------------------------

TITLE: Demonstrating Invalid Use of repr(transparent) on Enum in Rust
DESCRIPTION: This code snippet illustrates an erroneous use of the repr(transparent) attribute on an enum with multiple variants, which triggers the E0731 error. The enum 'Status' has two variants, violating the requirement for transparent enums to have exactly one variant.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0731.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[repr(transparent)]
enum Status { // error: transparent enum needs exactly one variant, but has 2
    Errno(u32),
    Ok,
}
```

----------------------------------------

TITLE: Running Rust UI Tests with Compare Mode and Blessing Output
DESCRIPTION: This command demonstrates how to execute a specific set of Rust UI tests (`tests/ui`) using the `x test` helper script. It activates the `polonius` compare mode, which might result in different compiler output. The `--bless` flag automatically updates the expected output files (e.g., `.polonius.stderr`) if the actual output changes, facilitating test maintenance.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_12

LANGUAGE: Shell
CODE:
```
./x test tests/ui --compare-mode=polonius --bless
```

----------------------------------------

TITLE: Building the target with riscv32imc-unknown-nuttx-elf
DESCRIPTION: This snippet configures the Rust build process to target `riscv32imc-unknown-nuttx-elf`. It specifies the target architecture and sets the linker to `riscv-none-elf-gcc` which is required for linking with C or C++ code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/nuttx.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```

[build]
target = "riscv32imc-unknown-nuttx-elf"

[target.'riscv32imc-unknown-nuttx-elf']
linker = "riscv-none-elf-gcc"

```

----------------------------------------

TITLE: Match Arm Leading Pipes with Never Setting in Rust
DESCRIPTION: Shows the default match_arm_leading_pipes setting (Never), which removes leading pipe characters from match arms.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_43

LANGUAGE: rust
CODE:
```
fn foo() {
    match foo {
        "foo" | "bar" => {},
        "baz"
        | "something relatively long"
        | "something really really really realllllllllllllly long" => println!("x"),
        "qux" => println!("y"),
        _ => {}
    }
}
```

----------------------------------------

TITLE: Configuring Coverage Instrumentation Levels in Rust
DESCRIPTION: This snippet outlines the different coverage instrumentation levels available in Rust. It includes block, branch, condition, and MC/DC coverage options, each building upon the previous level for more comprehensive code coverage analysis.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/coverage-options.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
- `block`, `branch`, `condition`, `mcdc`:
  Sets the level of coverage instrumentation.
  Setting the level will override any previously-specified level.
  - `block` (default):
    Blocks in the control-flow graph will be instrumented for coverage.
  - `branch`:
    In addition to block coverage, also enables branch coverage instrumentation.
  - `condition`:
    In addition to branch coverage, also instruments some boolean expressions
    as branches, even if they are not directly used as branch conditions.
  - `mcdc`:
    In addition to condition coverage, also enables MC/DC instrumentation.
    (Branch coverage instrumentation may differ in some cases.)
```

----------------------------------------

TITLE: Example of Using Binder in Where Clauses
DESCRIPTION: This snippet demonstrates a mixture of higher ranked lifetimes in a where clause and how it is represented as a `Binder`. The example shows the association of lifetimes with correct Debruijn indices and bound variables.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/binders.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
Binder(
    Foo<Binder(
        fn(&'^1_0 &'^0 T/#0),
        [BoundVariableKind::Region(...)]
    )>: Trait,
    [BoundVariableKind::Region(...)]
)
```

----------------------------------------

TITLE: Tokenizing source code
DESCRIPTION: Lexing transforms source code strings into a stream of tokens. This involves identifying keywords, operators, identifiers, and other syntactic elements. The `rustc_lexer` crate is responsible for the tokenization process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/the-parser.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"foo.bar + buz"
```

----------------------------------------

TITLE: Universal Lifetimes Restriction in Opaque Types in Rust
DESCRIPTION: This snippet covers the restriction on using only universally quantified lifetimes, such as lifetime parameters and placeholders, in opaque type arguments. It explains how the constraint ensures consistency and overcomes technical limitations in the member constraints algorithm.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/opaque-types-region-inference-restrictions.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
type Opaque<'x> = impl Sized + 'x;

fn test<'a>() -> Opaque<'a> {
    // `Opaque<'empty> := ()`
    let _: Opaque<'_> = ();
    //~^ ERROR
}

```

----------------------------------------

TITLE: Handling Namespace Conflicts with Ribs in Rust
DESCRIPTION: Illustrates the concept of 'Ribs' for scope management in the Rust compiler, exploring how different namespaces are managed and resolved. The code shows how variable 'val' and 'helper' function are scoped, introducing new 'Ribs' as needed during compilation. This snippet requires understanding of Rust's scoping and namespace principles, but no additional dependencies. It highlights the manipulation of scoping stacks ('Ribs') to resolve potential name conflicts, limiting access to variables based on scope boundaries.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/name-resolution.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn do_something<T: Default>(val: T) { // <- New rib in both types and values (1)
    // `val` is accessible, as is the helper function
    // `T` is accessible
   let helper = || { // New rib on the block (2)
        // `val` is accessible here
    }; // End of (2), new rib on `helper` (3)
    // `val` is accessible, `helper` variable shadows `helper` function
    fn helper() { // <- New rib in both types and values (4)
        // `val` is not accessible here, (4) is not transparent for locals
        // `T` is not accessible here
    } // End of (4)
    let val = T::default(); // New rib (5)
    // `val` is the variable, not the parameter here
} // End of (5), (3) and (1)
```

----------------------------------------

TITLE: Rust Missing Binary Digits Error
DESCRIPTION: This snippet demonstrates an error case where a binary integer literal (0b) is defined without any digits following the prefix. This results in a compiler error indicating missing digits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0b\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Tracing Bootstrap with Environment Variables
DESCRIPTION: This snippet shows how to use the BOOTSTRAP_TRACING environment variable to enable structured tracing in the Rust bootstrap. By setting this variable, you can control the level of tracing and target specific log outputs during the bootstrap process. It requires the tracing crate as a dependency. Outputs include structured logs for different stages of the bootstrap process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/bootstrapping/debugging-bootstrap.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ BOOTSTRAP_TRACING=bootstrap=TRACE ./x build library --stage 1
```

----------------------------------------

TITLE: Generating Manifest Locally
DESCRIPTION: Cargo command to generate Rust distribution manifest using build-manifest package. Creates manifest files in build/manifest directory with specified parameters including date and distribution channel.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/build-manifest/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
mkdir -p build/manifest
cargo +nightly run --release -p build-manifest build/dist build/manifest 1970-01-01 http://example.com nightly
```

----------------------------------------

TITLE: Syncing updates from Clippy to rust-lang/rust via git subtree
DESCRIPTION: This snippet shows the commands to update the rust-lang/rust repository with the latest Clippy code. It involves creating a new branch, pulling in Clippy’s master branch into the rust repository’s subtree, and then making a pull request to incorporate the changes into rust. This process maintains seamless integration and up-to-date tooling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/sync.md#_snippet_3

LANGUAGE: bash
CODE:
```
git switch -c clippy-subtree-update
git subtree pull -P src/tools/clippy clippy-upstream master
```

----------------------------------------

TITLE: Cleaning the Build Directory
DESCRIPTION: This command cleans the build directory, removing all built artifacts.  This is useful for starting a fresh build, but should be avoided unless necessary, as it can be time-consuming.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_12

LANGUAGE: bash
CODE:
```
./x clean
```

----------------------------------------

TITLE: Formatting Example: Style Edition 2015 vs 2024 - Function Calls
DESCRIPTION: Demonstrates the difference in formatting function calls between style_edition 2015 and 2024, specifically around overflow_delimited_expr behavior.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// with style_edition=2015
do_thing(
    x,
    Bar {
        x: value,
        y: value2,
    },
);

// with style_edition=2024
do_thing(x, Bar {
    x: value,
    y: value2,
});
```

----------------------------------------

TITLE: Setting Up for Benchmark Profiling
DESCRIPTION: Commands to prepare a specific benchmark (clap-rs) for profiling by cleaning previous builds and checking dependencies. This ensures a clean environment for accurate profiling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
cargo +<toolchain> clean
CARGO_INCREMENTAL=0 cargo +<toolchain> check
```

----------------------------------------

TITLE: Allocating New Types with Ty
DESCRIPTION: This example illustrates how to allocate a new type using the `new_*` methods on `Ty` in the Rust compiler. It shows the creation of an array type with a constant length and explains the interning and canonicalization process of types in the Rust type system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let array_ty = Ty::new_array_with_const_len(tcx, ty, count);
```

----------------------------------------

TITLE: Demonstrating Potential Stack Usage Issues with Unsized Locals in Rust
DESCRIPTION: These snippets illustrate potential pitfalls in stack usage when using unsized locals. They show how unnecessary stack frame extensions can occur with nested blocks or loops, which developers should be aware of when using this feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/unsized-locals.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
#![feature(unsized_locals)]

fn main() {
    let x: Box<[i32]> = Box::new([1, 2, 3, 4, 5]);
    let _x = {{{{{{{{{{*x}}}}}}}}}};
}
```

LANGUAGE: rust
CODE:
```
#![feature(unsized_locals)]

fn main() {
    for _ in 0..10 {
        let x: Box<[i32]> = Box::new([1, 2, 3, 4, 5]);
        let _x = *x;
    }
}
```

----------------------------------------

TITLE: Demonstrating Invalid Negative Trait Implementation in Rust
DESCRIPTION: This example shows erroneous code that attempts to use a negative implementation (impl !) for a non-auto trait. Negative implementations are only allowed for auto traits as specified in RFC 19.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0192.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Trait {
    type Bar;
}

struct Foo;

impl !Trait for Foo { } //~ ERROR

fn main() {}
```

----------------------------------------

TITLE: Disabling CI LLVM Download in bootstrap.toml
DESCRIPTION: This configuration snippet in `bootstrap.toml` prevents the build system from downloading a pre-built LLVM from CI, forcing it to build from source. This is required to test local LLVM changes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/updating-llvm.md#2025-04-21_snippet_5

LANGUAGE: toml
CODE:
```
"[llvm]\ndownload-ci-llvm = false"
```

----------------------------------------

TITLE: Adding Fuchsia Targets with rustup
DESCRIPTION: This shell snippet demonstrates how to add Fuchsia targets using rustup, which simplifies Rust binary compilation for Fuchsia by managing toolchain installations automatically. Ensure rustup is installed and configured correctly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
rustup target add x86_64-unknown-fuchsia
rustup target add aarch64-unknown-fuchsia
```

----------------------------------------

TITLE: Valid DispatchFromDyn Implementation with PhantomData
DESCRIPTION: Shows proper implementation of DispatchFromDyn for a wrapper struct that contains a single field plus PhantomData, which is allowed.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0378.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(dispatch_from_dyn)]
use std::{
    ops::DispatchFromDyn,
    marker::PhantomData,
};

struct Wrapper<T> {
    ptr: T,
    _phantom: PhantomData<()>,
}

impl<T, U> DispatchFromDyn<Wrapper<U>> for Wrapper<T>
where
    T: DispatchFromDyn<U>,
{}
```

----------------------------------------

TITLE: Forcing Unstable if Unmarked using Rustdoc Bash
DESCRIPTION: This command shows the use of the internal `-Z force-unstable-if-unmarked` flag. This flag applies an `#[unstable]` attribute to any dependent crate that lacks a stability attribute, primarily used for documenting the standard library and compiler crates.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_16

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs -Z force-unstable-if-unmarked
```

----------------------------------------

TITLE: LintPass Struct with MSRV Field and Constructor - Rust
DESCRIPTION: Defines a custom LintPass struct (ManualStrip) holding a msrv field for MSRV validation and a constructor taking a Conf reference. This structure is essential when a lint depends on features stabilized in a minimum Rust version. The msrv value is passed from configuration. Dependencies: Msrv and Conf types from Clippy, field injection in clippy_lints/lib.rs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_11

LANGUAGE: rust
CODE:
```
pub struct ManualStrip {
    msrv: Msrv,
}

impl ManualStrip {
    pub fn new(conf: &'static Conf) -> Self {
        Self { msrv: conf.msrv }
    }
}
```

----------------------------------------

TITLE: Defining Rustdoc Search Index JSON Structure
DESCRIPTION: This JSON snippet illustrates the structure of the Rustdoc search index. It includes various fields like names, types, parent modules, function signatures, and other metadata for documenting Rust crates and their contents.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustdoc-internals/search.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
[
    [ "crate_name", {
        "n": ["function_name", "Data"],
        "t": "HF",
        "q": [[0, "crate_name"]],
        "i": [2, 0],
        "p": [[1, "i32"], [1, "str"], [5, "Data", 0]],
        "f": "{{gb}{d}}`",
        "b": [],
        "c": "OjAAAAAAAAA=",
        "e": "OjAAAAAAAAA=",
        "a": [["get_name", 0]],
        "D": "g",
        "r": []
    }]
]
```

----------------------------------------

TITLE: Building Semantic Model for Completion (Rust)
DESCRIPTION: This code builds a semantic model for the function containing the completion site, providing access to type information and other semantic details needed for intelligent code completion.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_25

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/ide-completion/src/context/analysis.rs#L466
```

----------------------------------------

TITLE: Using no_sanitize Attribute in Rust
DESCRIPTION: Demonstrates how to use the no_sanitize attribute to disable address sanitizer instrumentation for a function. The example shows the basic syntax for applying the attribute to a function declaration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/no-sanitize.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(no_sanitize)]

#[no_sanitize(address)]
fn foo() {
  // ...
}
```

----------------------------------------

TITLE: Building remote-test-server for RISC-V
DESCRIPTION: This command builds the `remote-test-server` tool for the RISC-V architecture. The resulting binary will be located in the `./build/host/stage2-tools/$TARGET_ARCH/release/` directory.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_8

LANGUAGE: text
CODE:
```

./x build src/tools/remote-test-server --target riscv64gc-unknown-linux-gnu

```

----------------------------------------

TITLE: Defining and Using Named Subpatterns in Rust
DESCRIPTION: This code defines named subpatterns using the `pattern!` macro to match specific elements in a syntax tree. It allows users to retrieve matched nodes based on the pattern outlined. Key elements involve the use of the macro `pattern!` for defining patterns that include named parts, which can be accessed during syntax checking. Dependencies include Rust's syntax parsing libraries.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
pattern!{
    // matches character literals
    my_pattern: Expr =
        Lit(Char(_#val_inner)#val)#val_outer
}
```

LANGUAGE: rust
CODE:
```
...
fn check_expr(expr: &syntax::ast::Expr) {
    if let Some(result) = my_pattern(expr) {
        result.val_inner  // type: &char
        result.val        // type: &syntax::ast::Lit
        result.val_outer  // type: &syntax::ast::Expr
    }
}
```

LANGUAGE: rust
CODE:
```
pattern!{
    // matches arrays of character literals
    my_pattern_seq: Expr =
        Array( Lit(_)*#foo )
}
```

LANGUAGE: rust
CODE:
```
...
if let Some(result) = my_pattern_seq(expr) {
    result.foo        // type: Vec<&syntax::ast::Expr>
}
```

LANGUAGE: rust
CODE:
```
pattern!{
    // matches if expression is a boolean or integer literal
    my_pattern_alt: Expr =
        Lit( Bool(_#bar) | Int(_) )
}
```

LANGUAGE: rust
CODE:
```
...
if let Some(result) = my_pattern_alt(expr) {
    result.bar        // type: Option<&bool>
}
```

LANGUAGE: rust
CODE:
```
...
if let Some(result) = my_pattern_mult(expr) {
    result.baz        // type: &syntax::ast::Lit
}
```

----------------------------------------

TITLE: Running Fuchsia Component
DESCRIPTION: Command to run the Fuchsia component on the emulator.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_19

LANGUAGE: sh
CODE:
```
${SDK_PATH}/tools/${ARCH}/ffx component run \
    /core/ffx-laboratory:hello_fuchsia \
    fuchsia-pkg://hello-fuchsia/hello_fuchsia_manifest#meta/hello_fuchsia.cm
```

----------------------------------------

TITLE: Running rustc_codegen_gcc tests with LIBRARY_PATH
DESCRIPTION: This command runs the `rustc_codegen_gcc` tests, explicitly setting the `LIBRARY_PATH` environment variable to the location of the libgccjit `.so` library.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_15

LANGUAGE: text
CODE:
```

LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/12/ ./x test compiler/rustc_codegen_gcc/

```

----------------------------------------

TITLE: Fetching PRs Between Commit Ranges
DESCRIPTION: A command that uses a utility script to fetch all PRs between two specified commit hashes and save them to a file for review.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/changelog_update.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
util/fetch_prs_between.sh commit1 commit2 > changes.txt
```

----------------------------------------

TITLE: Example of a Freestanding UEFI Application - Rust
DESCRIPTION: This Rust code snippet provides a simple example of a valid UEFI application that does nothing upon execution except return an exit code of 0. It includes a panic handler to manage panic situations safely.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/unknown-uefi.md#2025-04-21_snippet_3

LANGUAGE: Rust
CODE:
```
#![no_main]
#![no_std]

#[panic_handler]
fn panic_handler(_info: &core::panic::PanicInfo) -> ! {
    loop {}
}

#[export_name = "efi_main"]
pub extern "C" fn main(_h: *mut core::ffi::c_void, _st: *mut core::ffi::c_void) -> usize {
    0
}
```

----------------------------------------

TITLE: Recursive Implementation for Clone on a List Type
DESCRIPTION: Implementation of the Clone trait for a recursive List type, which relies on coinduction as cloning a list requires cloning the tail, which is itself a List.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/coinduction.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
enum List<T> {
    Nil,
    Succ(T, Box<List<T>>),
}

impl<T: Clone> Clone for List<T> {
    fn clone(&self) -> Self {
        match self {
            List::Nil => List::Nil,
            List::Succ(head, tail) => List::Succ(head.clone(), tail.clone()),
        }
    }
}
```

----------------------------------------

TITLE: Printing Rust Relocation Models
DESCRIPTION: Demonstrates how to list available relocation models using rustc's --print flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments/print-options.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
$ rustc --print relocation-models a.rs
Available relocation models:
    static
    pic
    pie
    dynamic-no-pic
    ropi
    rwpi
    ropi-rwpi
    default
```

----------------------------------------

TITLE: Profiling with Non-Lexical Lifetimes (NLL)
DESCRIPTION: Command to profile rustc with the MIR-based borrowck enabled, which implements Non-Lexical Lifetimes. This passes the -Z flag to rustc through cargo rustc.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
touch src/lib.rs
CARGO_INCREMENTAL=0 perf record -F99 --call-graph dwarf cargo rustc --profile check --lib -- -Z borrowck=mir
```

----------------------------------------

TITLE: Self-Profile Events with Arguments
DESCRIPTION: Example of enabling the profiler with default events and their arguments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/self-profile-events.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
$ rustc -Zself-profile -Zself-profile-events=default,args
```

----------------------------------------

TITLE: Testing Macro Expansions
DESCRIPTION: Example of testing lint behavior with macro expansions using auxiliary crates.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/macro_expansions.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
//@aux-build:proc_macros.rs

extern crate proc_macros;

fn main() {
    proc_macros::external!{ code_that_should_trigger_your_lint }
    proc_macros::with_span!{ span code_that_should_trigger_your_lint }
}
```

----------------------------------------

TITLE: Using Custom Receiver Types with arbitrary_self_types Feature in Rust
DESCRIPTION: Demonstrates using a custom SmartPtr type as a receiver in a method. The SmartPtr implements core::ops::Receiver, allowing it to be used as the self parameter type in methods of type A.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/arbitrary-self-types.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(arbitrary_self_types)]

struct A;

impl A {
    fn f(self: SmartPtr<Self>) -> i32 { 1 }  // note self type
}

struct SmartPtr<T>(T);

impl<T> core::ops::Receiver for SmartPtr<T> {
    type Target = T;
}

fn main() {
    let smart_ptr = SmartPtr(A);
    assert_eq!(smart_ptr.f(), 1);
}
```

----------------------------------------

TITLE: Handling Const Expression in Where Clause Bounds in Rust
DESCRIPTION: This snippet demonstrates the fix for rustfmt incorrectly duplicating where clause bounds when using a const expression. The example shows a struct `S` with a const generic parameter and a where clause bound that uses a const expression. This ensures that the where clause is formatted correctly without duplication.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_16

LANGUAGE: rust
CODE:
```
struct S<const C: usize>
where
    [(); { num_slots!(C) }]:, {
    // code ...
}
```

----------------------------------------

TITLE: Running Completion Routines (Rust)
DESCRIPTION: This code runs a series of independent completion routines that generate completion suggestions based on different aspects of the context, combining their results into the final completion list.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_27

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/ide-completion/src/lib.rs#L157-L226
```

----------------------------------------

TITLE: Direct Rustc Compilation with GCC Backend
DESCRIPTION: Commands to compile Rust code directly using the rustc compiler with the GCC codegen backend.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_10

LANGUAGE: bash
CODE:
```
$ ./y.sh rustc my_crate.rs
```

----------------------------------------

TITLE: Utility Function is_foo_fn to Check Function Name - Rust
DESCRIPTION: Defines the is_foo_fn utility, which checks whether the analyzed item in FnKind is a function named 'foo'. It pattern-matches FnKind::Fn to extract the Ident and compares its name to 'foo'; closures are ignored by returning false. Assumes the use of Ident's name.as_str API. This pure function aids separation of concerns and can be tested independently from the lint pass.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_9

LANGUAGE: rust
CODE:
```
// use statements, impl EarlyLintPass, check_fn, ..

fn is_foo_fn(fn_kind: FnKind<'_>) -> bool {
    match fn_kind {
        FnKind::Fn(_, ident, ..) => {
            // check if `fn` name is `foo`
            ident.name.as_str() == "foo"
        }
        // ignore closures
        FnKind::Closure(..) => false
    }
}
```

----------------------------------------

TITLE: Using EarlyBinder with a Vector of Tuples
DESCRIPTION: This snippet illustrates how to define a generic function 'foo' returning a vector of tuples containing a u32 and a generic type T. It demonstrates the instantiation of the EarlyBinder type with a specific type, u64, resulting in a vector of tuples of type u32 and u64. The dependency required is the Rust standard library for vector operations. The expected output is a vector of type Vec<(u32, u64)>.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/early_binder.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<T>() -> Vec<(u32, T)> { Vec::new() }
fn bar() {
    // the return type of `foo` before instantiating it would be:
    // `EarlyBinder(Adt(Vec, &[Tup(&[u32, T/#=0])]))`
    // we then instantiate the binder with `[u64]` resulting in the type:
    // `Adt(Vec, &[Tup(&[u32, u64])])`
    let a = foo::<u64>();
}
```

----------------------------------------

TITLE: Correct intrinsic function declaration with proper number of type parameters
DESCRIPTION: This snippet shows the correct way to declare the 'size_of' intrinsic function in Rust, using only a single type parameter as expected. It shares the same feature flags and attribute as the incorrect example but ensures proper parameter count, resolving error E0094. This serves as a reference for proper intrinsic function declarations in Rust with the required number of generic parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0094.md#_snippet_1

LANGUAGE: Rust
CODE:
```
#![feature(intrinsics)]
#![allow(internal_features)]

#[rustc_intrinsic]
fn size_of<T>() -> usize; // ok!
```

----------------------------------------

TITLE: Refreshing Coverage Test Results
DESCRIPTION: Shell commands to regenerate expected results for coverage-related test suites in the Rust compiler
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/llvm-coverage-instrumentation.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
./x test coverage --bless
./x test coverage-run-rustdoc --bless
./x test tests/mir-opt --bless
```

----------------------------------------

TITLE: Implementing Structural Normalization in Rust's Trait Solver
DESCRIPTION: This code snippet demonstrates the implementation of structural normalization in the new solver. It repeatedly applies one-step normalization until reaching a rigid alias, ambiguity, or overflow.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/normalization.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// Source: structural_norm
fn structural_norm(
    &mut self,
    mut ty: Ty<I>,
) -> Result<Ty<I>, Ambiguous> {
    let mut overflow = false;
    loop {
        match self.evaluator.eval_alias_goal(NormalizesTo {
            alias: ty.clone(),
            ty: self.evaluator.tcx().mk_ty_var(self.evaluator.next_ty_var()),
        }) {
            Ok(ty2) => ty = ty2,
            Err(NoSolution) => return Ok(ty),
            Err(Ambiguous(goals)) if overflow => return Err(Ambiguous(goals)),
            Err(Ambiguous(_)) => {
                overflow = true;
                continue;
            }
        }
    }
}
```

----------------------------------------

TITLE: Declarative Lint Registration in Rust
DESCRIPTION: This code snippet demonstrates how to declare a lint using the `declare_lint!` macro, which results in a static identifier of type `&rustc_lint_defs::Lint`. This is integral for creating metadata for lints, including its default level. The snippet showcases the typical usage pattern of declaring a lint in the Rust compiler's linting infrastructure.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/lintstore.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
// Example lint declaration
declare_lint!(MY_LINT);
```

----------------------------------------

TITLE: Checking Method Predicate Entailment in Rust
DESCRIPTION: The snippet presents a trait 'Foo' with a method 'hi' and its implementation for 'Vec'. It illustrates how the method's trait bounds are compared to ensure compatibility with the original trait method.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/effects.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#[const_trait]
trait Foo {
    fn hi<T: ~const Default>();
}

impl<T: ~const Clone> Foo for Vec<T> {
    fn hi<T: ~const PartialEq>();
}
```

----------------------------------------

TITLE: Basic AST Pattern Matching in Rust
DESCRIPTION: Example showing current complex pattern matching approach for checking boolean literals in AST nodes
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
if let ast::ExprKind::Lit(lit) = &expr.node {
    if let ast::LitKind::Bool(_) = &lit.node {
        ...
    }
}
```

----------------------------------------

TITLE: Clippy MSRV Configuration
DESCRIPTION: TOML configuration for specifying minimum supported Rust version
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/README.md#2025-04-21_snippet_8

LANGUAGE: toml
CODE:
```
msrv = "1.30.0"
```

----------------------------------------

TITLE: Implementing C-Variadic Function in Rust
DESCRIPTION: Demonstrates how to create a C-style variadic function that sums up a variable number of usize arguments. The function takes a count parameter followed by the variadic arguments, accessed using the args.arg() method.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/c-variadic.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(c_variadic)]

pub unsafe extern "C" fn add(n: usize, mut args: ...) -> usize {
    let mut sum = 0;
    for _ in 0..n {
        sum += args.arg::<usize>();
    }
    sum
}
```

----------------------------------------

TITLE: Combining Autodiff Flags in Bash for Rust Compilation
DESCRIPTION: This bash command demonstrates how to combine multiple `autodiff` flags in a single `RUSTFLAGS` environment variable to control Enzyme's debugging and profiling behavior during a Rust build. The example combines `Enable`, `LooseTypes`, and `PrintPerf` flags for a custom build process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/flags.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
RUSTFLAGS=\"-Z autodiff=Enable,LooseTypes,PrintPerf\" cargo +enzyme build
```

----------------------------------------

TITLE: Configuring Cross-Compilation Targets in bootstrap.toml
DESCRIPTION: This snippet shows how to configure cross-compilation targets in the `bootstrap.toml` file.  The `target` key in the `[build]` section specifies a list of target platforms to always build for.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_10

LANGUAGE: toml
CODE:
```
[build]
target = ["x86_64-unknown-linux-gnu", "wasm32-wasip1"]
```

----------------------------------------

TITLE: Formatting Example: Unsafe Extern Blocks
DESCRIPTION: Shows preservation of safe and unsafe keywords in static items within extern blocks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
#![feature(unsafe_extern_blocks)]

unsafe extern "C" {
    safe static TEST1: i32;
    unsafe static TEST2: i32;
}
```

----------------------------------------

TITLE: Running Tests with Compare Modes
DESCRIPTION: This command allows running UI tests in specific compiler modes, which can affect the expected output.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_6

LANGUAGE: text
CODE:
```
./x test tests/ui --compare-mode=polonius
```

----------------------------------------

TITLE: Implementing Marker Trait for Overlapping Types in Rust
DESCRIPTION: Demonstrates how to use the marker_trait_attr feature to create a CheapToClone trait that allows overlapping implementations. The trait inherits from Clone and is implemented for Copy types, tuples, and ranges, showing how marker traits can have multiple potentially overlapping implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/marker-trait-attr.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(marker_trait_attr)]

#[marker] trait CheapToClone: Clone {}

impl<T: Copy> CheapToClone for T {}

// These could potentially overlap with the blanket implementation above,
// so are only allowed because CheapToClone is a marker trait.
impl<T: CheapToClone, U: CheapToClone> CheapToClone for (T, U) {}
impl<T: CheapToClone> CheapToClone for std::ops::Range<T> {}

fn cheap_clone<T: CheapToClone>(t: T) -> T {
    t.clone()
}
```

----------------------------------------

TITLE: Mangled Symbol for Unicode Identifier Example
DESCRIPTION: Shows how the Unicode identifiers from the previous Rust function example would be mangled in the compiled output. The example illustrates the use of Punycode encoding for the 'gödel' module name.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_12

LANGUAGE: text
CODE:
```
_RNvNtNtCsgOH4LzxkuMq_7mycrateu8gdel_5qa6escher4bach
                              ││└───┬──┘
                              ││    │
                              ││    └── gdel_5qa translates to gödel
                              │└─────── 8 is the length
                              └──────── `u` indicates it is a Unicode identifier
```

----------------------------------------

TITLE: Default Trait Body with RPITIT
DESCRIPTION: This Rust code showcases a trait with a default method implementation using RPITIT.  It defines a trait `Foo` with a default implementation for `bar` that returns `impl Sized`.  The text mentions a hack involving installing a projection predicate into the param-env of `Foo::bar`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/return-position-impl-trait-in-trait.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
```rust
trait Foo {
    fn bar() -> impl Sized {
        1i32
    }
}
```
```

----------------------------------------

TITLE: Interpreting Placeholders Syntax in Rust Compiler
DESCRIPTION: Describes the syntax for placeholders in the Rust compiler. The format is !{id} or !{id}_{universe}, representing a unique type in the specified universe. The universe is often omitted when it is 0.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
!x
```

LANGUAGE: rust
CODE:
```
!0
```

LANGUAGE: rust
CODE:
```
!x_2
```

LANGUAGE: rust
CODE:
```
!0_2
```

----------------------------------------

TITLE: Checking if a Type is a Diagnostic Item in Rust
DESCRIPTION: This snippet shows a function that checks if a given type (`ty`) is of type `HashMap` by leveraging the `TyCtxt::is_diagnostic_item()` method within Rust's compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/diagnostic-items.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use rustc_span::symbol::sym;

/// This example checks if the given type (`ty`) has the type `HashMap` using
/// `TyCtxt::is_diagnostic_item()`
fn example_1(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {
    match ty.kind() {
        ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(sym::HashMap, adt.did()),
        _ => false,
    }
}
```

----------------------------------------

TITLE: Creating a Git Release Tag for Rustfmt
DESCRIPTION: A shell command for creating a signed Git tag for a rustfmt release. This command creates a tag with the version number prefixed with 'v' and includes a release message.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Processes.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
git tag -s v1.2.3 -m "Release 1.2.3"
```

----------------------------------------

TITLE: Compiling Rust Code with Stack Size Metadata
DESCRIPTION: This console snippet demonstrates compiling Rust code with and without the -Z emit-stack-sizes flag, showing the difference in output object file sections.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/emit-stack-sizes.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ rustc -C opt-level=3 --emit=obj foo.rs

$ size -A foo.o
foo.o  :
section                                 size   addr
.text                                      0      0
.text._ZN3foo3foo17he211d7b4a3a0c16eE      1      0
.text._ZN3foo3bar17h1acb594305f70c2eE     22      0
.note.GNU-stack                            0      0
.eh_frame                                 72      0
Total                                     95

$ rustc -C opt-level=3 --emit=obj -Z emit-stack-sizes foo.rs

$ size -A foo.o
foo.o  :
section                                 size   addr
.text                                      0      0
.text._ZN3foo3foo17he211d7b4a3a0c16eE      1      0
.stack_sizes                               9      0
.text._ZN3foo3bar17h1acb594305f70c2eE     22      0
.stack_sizes                               9      0
.note.GNU-stack                            0      0
.eh_frame                                 72      0
Total                                    113
```

----------------------------------------

TITLE: Macro Definition Example 0 (Rust)
DESCRIPTION: This example demonstrates a simple macro `m` that expands to an identifier `ident`. It shows how the context of `ident` changes after macro expansion, starting from `SyntaxContext::root` and becoming `ROOT -> id(m)`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/macro-expansion.md#_snippet_1

LANGUAGE: rust
CODE:
```
macro m() { ident }

m!();
```

----------------------------------------

TITLE: Configuring Fuchsia Component for Testing
DESCRIPTION: Example of a modified CML file to pass arguments for testing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_21

LANGUAGE: txt
CODE:
```
{
    include: [ "syslog/client.shard.cml" ],
    program: {
        runner: "elf",
        binary: "bin/hello_fuchsia",
        args: ["it_works"],
    },
}
```

----------------------------------------

TITLE: Implementing Version Info Generation in build.rs
DESCRIPTION: Sets up version information generation in the build script using the setup_version_info macro.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/rustc_tools_util/README.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn main() {
    rustc_tools_util::setup_version_info!();
}
```

----------------------------------------

TITLE: Negative Implementation Syntax for Auto Traits in Rust
DESCRIPTION: Demonstrates the syntax for creating a negative implementation of an auto trait for a specific type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/auto-traits.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
impl !Trait for Type {}
```

----------------------------------------

TITLE: Building AVR Project
DESCRIPTION: Console command for building a Rust project targeting AVR microcontrollers with release configuration
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/avr-none.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
$ cargo build --release
```

----------------------------------------

TITLE: Showing rustc Commands for UI Tests
DESCRIPTION: This command shows how to run Rust UI tests with the verbose flag to display the rustc commands being executed. Adding the --verbose flag to the test arguments increases the output verbosity.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/tests.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
./x.py test --test-args "--verbose"
```

----------------------------------------

TITLE: Configuring Temporary Directory for Remote Test Server
DESCRIPTION: Setting TMPDIR environment variable when running remote test server to specify temporary storage location
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/nto-qnx.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
TMPDIR=/data/tmp/rust remote-test-server --bind 0.0.0.0:12345
```

----------------------------------------

TITLE: Internal Representation of a Generic Reference Type
DESCRIPTION: Illustrates the Rust compiler's internal pseudo-code representation for the type `&'a Vec<T>` within a generic function `fn foo<'a, T>`. It demonstrates the use of `RegionKind::LateParam` for the late-bound lifetime parameter `'a` and `TyKind::Param` for the type parameter `T`, which is assigned index 0.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/param_ty_const_regions.md#_snippet_0

LANGUAGE: Pseudo-code
CODE:
```
TyKind::Ref(
  RegionKind::LateParam(DefId(foo), DefId(foo::'a), "'a"),
  TyKind::Adt(Vec, &[TyKind::Param("T", 0)])
)
```

----------------------------------------

TITLE: Adding Configuration Fields to Clippy Lint Struct in Rust
DESCRIPTION: Example showing how to add configuration values to a lint implementation struct and provide a constructor method that accepts the Clippy configuration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_19

LANGUAGE: rust
CODE:
```
pub struct StructName {
    configuration_ident: Type,
}

// ...

impl StructName {
    pub fn new(conf: &'static Conf) -> Self {
        Self {
            configuration_ident: conf.configuration_ident,
        }
    }
}
```

----------------------------------------

TITLE: Defining Trait Reference
DESCRIPTION: This snippet defines the structure of a TraitRef which consists of the name of a trait along with a suitable set of inputs P0..Pn.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/goals-and-clauses.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
"TraitRef = P0: TraitName<P1..Pn>"
```

----------------------------------------

TITLE: Example of Method Calls on Unconstrained Opaque Types
DESCRIPTION: Demonstrates a case where methods are called on an unconstrained opaque type within its defining scope. This example shows recursive async function that returns an opaque Future type, where the concrete type isn't yet known when methods are called on it.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/opaque-types.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use std::future::Future;
use futures::FutureExt;

fn go(i: usize) -> impl Future<Output = ()> + Send + 'static {
    async move {
        if i != 0 {
            // This returns `impl Future<Output = ()>` in its defining scope,
            // we don't know the concrete type of that opaque at this point.
            // Currently treats the opaque as a known type and succeeds, but
            // from the perspective of "easiest to soundly implement", it would
            // be good for this to be ambiguous.
            go(i - 1).boxed().await;
        }
    }
}
```

----------------------------------------

TITLE: Demonstrating Normalization of Alias Types in Rust
DESCRIPTION: This code snippet illustrates the importance of unique normalization results for alias types and constants. It shows a generic function that relies on the normalization of associated types to maintain type safety.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/invariants.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<T: Trait>(
    x: <T as Trait>::Assoc
) -> <T as Trait>::Assoc {
    x
}
```

----------------------------------------

TITLE: Defining the Step Trait in Rust
DESCRIPTION: This snippet defines the Step trait in Rust, which encapsulates the logic for building artifacts in a modular manner. The trait requires implementers to define a run method to execute actions and a should_run method to decide when a step is necessary. It also provides a make_run method which is invoked for command line interactions. Dependencies include the Debug, Clone, PartialEq, Eq, and Hash traits, which enable necessary Rust functionalities.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/bootstrapping/how-bootstrap-does-it.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {
    type Output: Clone;

    const DEFAULT: bool = false;
    const ONLY_HOSTS: bool = false;

    // Required methods
    fn run(self, builder: &Builder<'_>) -> Self::Output;
    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_>;

    // Provided method
    fn make_run(_run: RunConfig<'_>) { ... }
}
```

----------------------------------------

TITLE: Inserting Markdown After Content using Rustdoc Bash
DESCRIPTION: This command shows how to use the `--markdown-after-content` flag with `rustdoc`. It inserts the rendered Markdown content from `extra.md` after the primary documentation content for `src/lib.rs`, just before the closing `</body>` tag. The `-Z unstable-options` flag is necessary.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_9

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs -Z unstable-options --markdown-after-content extra.md
```

----------------------------------------

TITLE: Inserting Markdown Before Content in Standalone File using Rustdoc Bash
DESCRIPTION: This command provides another example of `--markdown-before-content`, showing how to apply it when generating documentation from a standalone Markdown file like `README.md`. The content of `extra.md` is rendered as Markdown and inserted before the documentation of `README.md`. Requires the `-Z unstable-options` flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_8

LANGUAGE: bash
CODE:
```
$ rustdoc README.md -Z unstable-options --markdown-before-content extra.md
```

----------------------------------------

TITLE: Using Clippy's custom cargo dev tools - Bash
DESCRIPTION: Various cargo dev commands to facilitate development on Clippy, such as formatting code, managing lints, creating new lints, deprecating lints, setting up git hooks and IDE integration, and running dogfood tests. Each command helps with specific development and maintenance tasks related to Clippy.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/basics.md#_snippet_2

LANGUAGE: bash
CODE:
```
cargo dev fmt
```

LANGUAGE: bash
CODE:
```
cargo dev update_lints
```

LANGUAGE: bash
CODE:
```
cargo dev new_lint
```

LANGUAGE: bash
CODE:
```
cargo dev deprecate
```

LANGUAGE: bash
CODE:
```
cargo dev setup git-hook
```

LANGUAGE: bash
CODE:
```
cargo dev setup intellij
```

LANGUAGE: bash
CODE:
```
cargo dev dogfood
```

----------------------------------------

TITLE: Emitting Future Incompatibility Reports in JavaScript
DESCRIPTION: This snippet outlines the JSON structure emitted when the `--json=future-incompat` flag is used, providing diagnostic information for warnings that may become hard errors in future Rust versions. The structure includes the message type and an array of diagnostics with potential issues. Required dependencies include Rust's compilation diagnostics documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/json.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
{
    /* Type of this message */
    "$message_type": "future_incompat",
    /* An array of objects describing a warning that will become a hard error
       in the future.
    */
    "future_incompat_report":
    [
        {
            /* A diagnostic structure as defined in
               https://doc.rust-lang.org/rustc/json.html#diagnostics
            */
            "diagnostic": {...},
        }
    ]
}
```

----------------------------------------

TITLE: Incorrect Unwind Attribute Usage in Rust
DESCRIPTION: Demonstrates an erroneous implementation of the unwind attribute with no arguments, which would trigger a compiler error
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0633.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(unwind_attributes)]\n\n#[unwind()] // error: expected one argument\npub extern \"C\" fn something() {}\n\nfn main() {}
```

----------------------------------------

TITLE: Installing Cranelift Codegen Backend via Rustup
DESCRIPTION: Command to install the Cranelift codegen backend component using Rustup on the nightly toolchain. This is available for Linux and x86_64 macOS platforms.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/Readme.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ rustup component add rustc-codegen-cranelift-preview --toolchain nightly
```

----------------------------------------

TITLE: Configuring Rust Build Target in bootstrap.toml
DESCRIPTION: Configuration snippet for building Rust with x86_64-unknown-none target support by adding it to the target list in bootstrap.toml.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/x86_64-unknown-none.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
target = ["x86_64-unknown-none"]
```

----------------------------------------

TITLE: Token Naming Conventions in Rust
DESCRIPTION: Demonstrates the preferred use of T![foo] syntax instead of SyntaxKind::FOO_KW for better readability and familiar Rust syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/style.md#2025-04-21_snippet_33

LANGUAGE: rust
CODE:
```
match p.current() {
    T![true] | T![false] => true,
    _ => false,
}
```

----------------------------------------

TITLE: Demonstrating Coroutine Projection with AsyncFn
DESCRIPTION: This Rust code snippet illustrates the delay in projecting the call of an AsyncFn trait to a coroutine, highlighting an issue where the returned async closure type remains unconstrained without proper inference. The alias used in Rust helps delay the computation of tupled upvars while still allowing rigid type return and confirms built-in traits such as Future.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/coroutine-closures.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let c = async || -> String { .. };
let s = c().await;
// ^^^ If we can't project `<{c} as AsyncFn>::call()` to a coroutine, then the `IntoFuture::into_future` call inside of the `.await` stalls, and the type of `s` is left unconstrained as an infer var.
s.as_bytes();
// ^^^ That means we can't call any methods on the awaited return of a coroutine-closure, like... at all!
```

----------------------------------------

TITLE: Git Source Configuration - TOML
DESCRIPTION: Defines a Git source in a TOML file, requiring the project's name, repository URL, and a specific commit hash, branch, or tag. This ensures that a fixed state of the repo is used for linting.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/lintcheck/README.md#2025-04-21_snippet_3

LANGUAGE: toml
CODE:
```
puffin = {name = "puffin", git_url = "https://github.com/EmbarkStudios/puffin", git_hash = "02dd4a3"}
```

----------------------------------------

TITLE: Character Type Checking Implementation
DESCRIPTION: Example of implementing a lint pass to check if an expression is of character type
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/type_checking.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
impl LateLintPass<'_> for MyStructLint {
    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {
        // Get type of `expr`
        let ty = cx.typeck_results().expr_ty(expr);

        // Check if the `Ty` of this expression is of character type
        if ty.is_char() {
            println!("Our expression is a char!");
        }
    }
}
```

----------------------------------------

TITLE: Enabling Precise Capture based on Edition and Feature Gate in Rust
DESCRIPTION: This code snippet demonstrates how to conditionally enable a feature (precise capture) based on both a feature gate and the Rust edition. It checks if the `capture_disjoint_fields` feature is enabled or if the code is being compiled in Rust 2021 or later.  This allows for gradual adoption of features across edition boundaries.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/guides/editions.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// An example from Edition 2021 disjoint closure captures.

fn enable_precise_capture(tcx: TyCtxt<'_>, span: Span) -> bool {
    tcx.features().capture_disjoint_fields || span.rust_2021()
}
```

----------------------------------------

TITLE: Bootstrap Configuration for Building Rust from Source
DESCRIPTION: This TOML configuration file is used to build a Rust toolchain from source for the OpenHarmony targets. It specifies the compiler profile, build options, and paths to the C compiler, C++ compiler, archiver, ranlib, and linker for each target architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/openharmony.md#2025-04-21_snippet_8

LANGUAGE: toml
CODE:
```
profile = "compiler"
change-id = 115898

[build]
sanitizers = true
profiler = true

[target.aarch64-unknown-linux-ohos]
cc = "/path/to/aarch64-unknown-linux-ohos-clang.sh"
cxx = "/path/to/aarch64-unknown-linux-ohos-clang++.sh"
ar = "/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ar"
ranlib = "/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ranlib"
linker  = "/path/to/aarch64-unknown-linux-ohos-clang.sh"

[target.armv7-unknown-linux-ohos]
cc = "/path/to/armv7-unknown-linux-ohos-clang.sh"
cxx = "/path/to/armv7-unknown-linux-ohos-clang++.sh"
ar = "/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ar"
ranlib = "/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ranlib"
linker  = "/path/to/armv7-unknown-linux-ohos-clang.sh"

[target.x86_64-unknown-linux-ohos]
cc = "/path/to/x86_64-unknown-linux-ohos-clang.sh"
cxx = "/path/to/x86_64-unknown-linux-ohos-clang++.sh"
ar = "/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ar"
ranlib = "/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ranlib"
linker  = "/path/to/x86_64-unknown-linux-ohos-clang.sh"
```

----------------------------------------

TITLE: Configuring Compiler Toolchain for powerpc64le Target
DESCRIPTION: Specifies compiler, archiver, and linker paths for powerpc64le-unknown-linux-musl target in bootstrap configuration
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/powerpc64le-unknown-linux-musl.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[target.powerpc64le-unknown-linux-musl]
cc = "powerpc64le-linux-musl-gcc"
cxx = "powerpc64le-linux-musl-g++"
ar = "powerpc64le-linux-musl-ar"
linker = "powerpc64le-linux-musl-gcc"
```

----------------------------------------

TITLE: Rust Second Version of Crate A (a2.rs)
DESCRIPTION: Second version of crate 'a' with an implementation that includes a print statement.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0460.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![crate_name = "a"]

pub fn foo<T>() {
    println!("foo<T>()");
}
```

----------------------------------------

TITLE: Analyzing Stack Size Metadata in Object Files
DESCRIPTION: This console snippet shows how to use objdump to analyze the stack size metadata in the compiled object file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/emit-stack-sizes.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
$ objdump -d foo.o

foo.o:     file format elf64-x86-64

Disassembly of section .text._ZN3foo3foo17he211d7b4a3a0c16eE:

0000000000000000 <_ZN3foo3foo17he211d7b4a3a0c16eE>:
   0:   c3                      retq

Disassembly of section .text._ZN3foo3bar17h1acb594305f70c2eE:

0000000000000000 <_ZN3foo3bar17h1acb594305f70c2eE>:
   0:   48 83 ec 10             sub    $0x10,%rsp
   4:   48 8d 44 24 08          lea    0x8(%rsp),%rax
   9:   48 89 04 24             mov    %rax,(%rsp)
   d:   48 8b 04 24             mov    (%rsp),%rax
  11:   48 83 c4 10             add    $0x10,%rsp
  15:   c3                      retq

$ objdump -s -j .stack_sizes foo.o

foo.o:     file format elf64-x86-64

Contents of section .stack_sizes:
 0000 00000000 00000000 00                 .........
Contents of section .stack_sizes:
 0000 00000000 00000000 10                 .........
```

----------------------------------------

TITLE: Linking Custom Rustc to Toolchain
DESCRIPTION: Command to link the newly built rustc to a custom toolchain named 'stage2' using rustup. This allows for easy switching between the custom and standard Rust compilers.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/docs/rustc_testing.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
rustup toolchain link stage2 ./build/host/stage2/
```

----------------------------------------

TITLE: Formatting Example: Range Expression with Binary Operation
DESCRIPTION: Shows proper spacing in range expressions when the right-hand side contains a binary expression with trailing period.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
let range = 3. / 2. ..4.;
```

----------------------------------------

TITLE: Suppressing the Internal Compiler Error File with Environment Variable
DESCRIPTION: This command prevents the Rust compiler from creating an ICE file in the working directory upon encountering an Internal Compiler Error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/compiler-debugging.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
RUSTC_ICE=0
```

----------------------------------------

TITLE: Conflict Detection with arbitrary_self_types in Rust
DESCRIPTION: Shows how arbitrary_self_types detects method conflicts when using reference to smart pointers as receiver types. This example prevents potential confusion between methods of the referent and the smart pointer.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/arbitrary-self-types.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#![feature(arbitrary_self_types)]

use std::pin::Pin;
use std::pin::pin;

struct A;

impl A {
    fn get_ref(self: &Pin<&A>) {}  // note &Pin
}

fn main() {
    let pinned_a: Pin<&mut A> = pin!(A);
    let pinned_a: Pin<&A> = pinned_a.as_ref();
    pinned_a.get_ref();
}
```

----------------------------------------

TITLE: Example of Note-style Lint Output in Rust
DESCRIPTION: Example showing how notes appear in lint output, demonstrating reference-related lint messages.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/emitting_lints.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.
  --> tests/ui/drop_forget_ref.rs:10:5
   |
10 |     forget(&SomeStruct);
   |     ^^^^^^^^^^^^^^^^^^^
   |
   = note: `-D clippy::forget-ref` implied by `-D warnings`
note: argument has type &SomeStruct
  --> tests/ui/drop_forget_ref.rs:10:12
   |
10 |     forget(&SomeStruct);
   |            ^^^^^^^^^^^
```

----------------------------------------

TITLE: Partial Clone of the Rust Repository
DESCRIPTION: This code snippet illustrates how to perform a partial clone of the Rust repository, which saves bandwidth and disk space by only fetching current file contents and deferring the retrieval of other contents. This is useful for users with slower internet connections.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
git clone --filter='blob:none' https://github.com/rust-lang/rust.git
cd rust
```

----------------------------------------

TITLE: Complex Filtering with Logical Operators in #[rustc_on_unimplemented]
DESCRIPTION: Shows how to use logical operators (all, any, not) to create more complex filtering conditions for custom error messages, specifically for the From trait when coercing between String and &str.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_21

LANGUAGE: rust
CODE:
```
#[rustc_on_unimplemented(
    on(
        all(_Self="&str", T="std::string::String"),
        note="you can coerce a `{T}` into a `{Self}` by writing `&*variable`"
    )
)]
pub trait From<T>: Sized { /* ... */ }
```

----------------------------------------

TITLE: Implementing Lifetime Cleaning Function in Rust
DESCRIPTION: Function that converts HIR lifetime representations into Rustdoc's clean structure. It handles various types of lifetime bounds including early bound, late bound, and free lifetimes, with special processing for named bound variables.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustdoc-internals.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn clean_lifetime<'tcx>(lifetime: &hir::Lifetime, cx: &mut DocContext<'tcx>) -> Lifetime {
    if let Some(
        rbv::ResolvedArg::EarlyBound(did)
        | rbv::ResolvedArg::LateBound(_, _, did)
        | rbv::ResolvedArg::Free(_, did),
    ) = cx.tcx.named_bound_var(lifetime.hir_id)
        && let Some(lt) = cx.args.get(&did).and_then(|arg| arg.as_lt())
    {
        return lt.clone();
    }
    Lifetime(lifetime.ident.name)
}
```

----------------------------------------

TITLE: Mixed Late-Bound and Early-Bound Lifetime Parameters
DESCRIPTION: Illustrates the usage of both late-bound and early-bound lifetime parameters in a complex example with traits and function pointers.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0794.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
trait BarTrait<'a> {}

struct Bar<'a> {
    s: &'a str
}

impl<'a> BarTrait<'a> for Bar<'a> {}

fn bar<'a, 'b, T>(x: &'a str, _t: T) -> &'a str
where T: BarTrait<'b>
{
    x
}

let bar_fn: for<'a> fn(&'a str, Bar<'static>) -> &'a str = bar; // OK
let bar_fn2 = bar::<'static, Bar>; // Not allowed
let bar_fn3 = bar::<Bar>; // OK
```

----------------------------------------

TITLE: Projections and Variances with RPITIT
DESCRIPTION: This Rust code illustrates a limitation of RPITITs related to projections and variances.  It shows how RPITITs, unlike regular opaque types, don't inherently have variances, leading to errors when comparing RPITITs with different lifetimes, even if those lifetimes aren't captured.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/return-position-impl-trait-in-trait.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
```rust
#![feature(return_position_impl_trait_in_trait)]

trait Foo {
    // Note that the RPITIT below does *not* capture `'lt`.
    fn bar<'lt: 'lt>() -> impl Eq;
}

fn test<'a, 'b, T: Foo>() -> bool {
    <T as Foo>::bar::<'a>() == <T as Foo>::bar::<'b>()
    //~^ ERROR
    // (requires that `'a == 'b`)
}
```
```

----------------------------------------

TITLE: Invalid Lang Attribute Definition in Rust
DESCRIPTION: Demonstrates an incorrect usage of the lang attribute by defining an unauthorized custom lang item. The lang attribute is reserved for core Rust compiler-specific items and cannot be arbitrarily defined by developers.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0522.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(lang_items)]\n\n#[lang = "cookie"]\nfn cookie() -> ! { // error: definition of an unknown lang item: `cookie`\n    loop {}\n}
```

----------------------------------------

TITLE: Using Profile Sample Flag in Rust Compiler
DESCRIPTION: Example showing the usage of -Zprofile-sample-use compiler flag to specify a profile file for AFDO optimization.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/profile_sample_use.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
-Zprofile-sample-use=code.prof
```

----------------------------------------

TITLE: Viewing LLVM IR for Sysroot Crate in Rust
DESCRIPTION: Two-step process to view the LLVM IR for a sysroot crate: first run cargo build with specific flags to get the command, then add --emit=llvm-ir to that command.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/tips.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cargo build -v --target x86_64-unknown-linux-gnu -Zbuild-std
# Take the command from the output and add --emit=llvm-ir
```

----------------------------------------

TITLE: Implementing Drop for Generic Type with May Dangle
DESCRIPTION: Shows an erroneous implementation of Drop trait for a generic type that requires marking as unsafe when using #[may_dangle] attribute. The attribute indicates that the destructor will not access the generic type's data, which must be manually verified by the programmer.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0569.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(dropck_eyepatch)]

struct Foo<X>(X);
impl<#[may_dangle] X> Drop for Foo<X> {
    fn drop(&mut self) { }
}
```

----------------------------------------

TITLE: Running Dependent Tests
DESCRIPTION: This shows how to run tests that have dependencies, using Miri to specify the dependent filename.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_3

LANGUAGE: Shell
CODE:
```
./miri run --dep tests/pass-dep/shims/libc-fs.rs
```

----------------------------------------

TITLE: Configuring Rust Build for hexagon-unknown-none-elf Target (TOML)
DESCRIPTION: Specifies build settings in `bootstrap.toml` to include the `hexagon-unknown-none-elf` target when building the Rust toolchain. It defines host and target architectures, and configures the specific C/C++ compiler, linker, and archiver to use for the Hexagon target, along with enabling in-tree LLVM libunwind. Requires replacing `<target for your host>` with the appropriate host triple.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/hexagon-unknown-none-elf.md#_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
host = ["<target for your host>"]
target = ["<target for your host>", "hexagon-unknown-none-elf"]

[target.hexagon-unknown-none-elf]

cc = "hexagon-unknown-none-elf-clang"
cxx = "hexagon-unknown-none-elf-clang++"
linker = "hexagon-unknown-none-elf-clang"
ranlib = "hexagon-unknown-none-elf-ranlib"
ar = "hexagon-unknown-none-elf-ar"
llvm-libunwind = 'in-tree'
```

----------------------------------------

TITLE: Using a Modified Standard Library
DESCRIPTION: This snippet sets the MIRI_LIB_SRC environment variable so that Miri can use a custom standard library for testing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_9

LANGUAGE: Shell
CODE:
```
export MIRI_LIB_SRC=<path_to_library>
```

----------------------------------------

TITLE: Handling Specialization Errors in Rust (Rust)
DESCRIPTION: This Rust code snippet demonstrates an erroneous attempt to specialize trait implementations without marking all necessary parent implementations as default, leading to compilation errors. It shows a baseline trait definition and two implementations where conflicting specializations occur, particularly with the Clone trait and primitive types like i32.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0520.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(specialization)]

trait SpaceLlama {
    fn fly(&self);
}

// applies to all T
impl<T> SpaceLlama for T {
    default fn fly(&self) {}
}

// non-default impl
// applies to all `Clone` T and overrides the previous impl
impl<T: Clone> SpaceLlama for T {
    fn fly(&self) {}
}

// since `i32` is clone, this conflicts with the previous implementation
impl SpaceLlama for i32 {
    default fn fly(&self) {}
    // error: item `fly` is provided by an `impl` that specializes
    //        another, but the item in the parent `impl` is not marked
    //        `default` and so it cannot be specialized.
}

```

----------------------------------------

TITLE: Mangled Symbol for Constant Generic Parameter
DESCRIPTION: Shows the mangled symbol for the 'example' function with a constant generic parameter, demonstrating how constant values are encoded in the symbol name.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_16

LANGUAGE: text
CODE:
```
_RINvCs7qp2U7fqm6G_7mycrate7exampleKy12345678_EB2_
                                    ││└───┬───┘
                                    ││    │
                                    ││    └── const-data 0x12345678
                                    │└─────── const type u64
                                    └──────── const generic arg
```

----------------------------------------

TITLE: Example `x build --dry-run` Standard Output (text)
DESCRIPTION: This snippet shows example standard output from running the `x build --dry-run` command for the Rust project build system, illustrating the sequence of build stages and artifact operations like building, copying, and assembling for stages 0 and 1. It highlights the steps involved in preparing libraries, compilers, and tools.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/bootstrapping/what-bootstrapping-does.md#_snippet_2

LANGUAGE: text
CODE:
```
Building stage0 library artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
Copying stage0 library from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)
Building stage0 compiler artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
Copying stage0 rustc from stage0 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)
Assembling stage1 compiler (x86_64-unknown-linux-gnu)
Building stage1 library artifacts (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)
Copying stage1 library from stage1 (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)
Building stage1 tool rust-analyzer-proc-macro-srv (x86_64-unknown-linux-gnu)
Building rustdoc for stage1 (x86_64-unknown-linux-gnu)
```

----------------------------------------

TITLE: Rust Invalid Octal Literal
DESCRIPTION: This snippet shows that `0onoDigit` gives a `Missing digits after the integer base prefix` error, because it requires digits, but gets a string that isn't a valid digit.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_7

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0onoDigit\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Extracting Function-Specific LLVM IR
DESCRIPTION: Command to extract LLVM IR for a specific function using llvm-extract tool. Useful for isolating and debugging issues with specific functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/debugging.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ ./build/$TRIPLE/llvm/bin/llvm-extract \
    -func='_ZN11collections3str21_$LT$impl$u20$str$GT$7replace17hbe10ea2e7c809b0bE' \
    -S \
    < unextracted.ll \
    > extracted.ll
```

----------------------------------------

TITLE: Updating Beta Branch - Bash
DESCRIPTION: This command sequence updates the `beta` branch in the Clippy repository to match the specified commit hash (`SHA`). It checks out the `beta` branch, resets it to the desired commit, and then pushes the updated branch to the `upstream` remote.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/release.md#_snippet_4

LANGUAGE: bash
CODE:
```
git checkout beta
git reset --hard $SHA
git push upstream beta
```

----------------------------------------

TITLE: Defining JoinLinesParams Interface for Join Lines Operation
DESCRIPTION: Defines the parameters for the joinLines request, which handles combining multiple lines of code. It includes the text document identifier and an array of ranges to support multiple cursors.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface JoinLinesParams {
    textDocument: TextDocumentIdentifier,
    /// Currently active selections/cursor offsets.
    /// This is an array to support multiple cursors.
    ranges: Range[],
}
```

----------------------------------------

TITLE: Installing Required Rust Components
DESCRIPTION: Command to install the necessary rustc-dev and llvm-tools components using rustup for rustc_private feature usage.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustc-driver/remarks-on-perma-unstable-features.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
rustup component add rustc-dev llvm-tools
```

----------------------------------------

TITLE: Building Rust Distribution Tarball in Docker (Bash)
DESCRIPTION: Clones the Rust repository, changes directory, runs the same configuration script as before, but then executes `./x dist`. This command builds a complete Rust toolchain distribution package suitable for installation elsewhere, like a Compiler Explorer instance.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/installation.md#_snippet_5

LANGUAGE: bash
CODE:
```
git clone --depth=1 https://github.com/rust-lang/rust.git
cd rust
./configure --enable-llvm-link-shared --enable-llvm-plugins --enable-llvm-enzyme --release-channel=nightly --enable-llvm-assertions --enable-clang --enable-lld --enable-option-checking --enable-ninja --disable-docs
./x dist
```

----------------------------------------

TITLE: Testing Dependency Graph for Non-Changed Action in Rust
DESCRIPTION: This snippet illustrates using the `#[rustc_then_this_would_need]` annotation to ensure that if `foo` is changed, then `baz` does not require any changes. The macro should produce an error stating 'no path' if executed correctly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/incrcomp-debugging.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path
fn baz() { }
```

----------------------------------------

TITLE: Shallow Clone of the Rust Repository
DESCRIPTION: This snippet shows how to perform a shallow clone of the Rust repository to limit the history fetched from the server. This method is suitable for users looking to browse the source code without needing the full history.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
git clone --depth 1 https://github.com/rust-lang/rust.git
cd rust
```

----------------------------------------

TITLE: Configuring Rust Build for win7-windows-msvc Target in TOML
DESCRIPTION: This snippet shows how to add the x86_64-win7-windows-msvc target to the build configuration in bootstrap.toml. It sets the build stage and specifies the target to be built.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/win7-windows-msvc.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
target = ["x86_64-win7-windows-msvc"]
```

----------------------------------------

TITLE: Implementing Encodable and Decodable for a Custom Struct
DESCRIPTION: Example implementation of the Encodable and Decodable traits for a custom struct, showing how manual implementations handle serialization of fields. This pattern is typically automated using derive macros in the actual compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/serialization.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(rustc_private)]
extern crate rustc_serialize;
use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};

struct MyStruct {
    int: u32,
    float: f32,
}

impl<E: Encoder> Encodable<E> for MyStruct {
    fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        s.emit_struct("MyStruct", 2, |s| {
            s.emit_struct_field("int", 0, |s| self.int.encode(s))?;
            s.emit_struct_field("float", 1, |s| self.float.encode(s))
        })
    }
}

impl<D: Decoder> Decodable<D> for MyStruct {
    fn decode(s: &mut D) -> Result<MyStruct, D::Error> {
        s.read_struct("MyStruct", 2, |d| {
            let int = d.read_struct_field("int", 0, Decodable::decode)?;
            let float = d.read_struct_field("float", 1, Decodable::decode)?;

            Ok(MyStruct { int, float })
        })
    }
}
```

----------------------------------------

TITLE: Building Rust Core and Alloc Libraries for mipsel-sony-psx
DESCRIPTION: Shell command for building Rust programs targeting mipsel-sony-psx. It uses the nightly cargo feature 'build-std' to compile the core and alloc libraries for this target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/mipsel-sony-psx.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
cargo build -Zbuild-std=core,alloc --target mipsel-sony-psx
```

----------------------------------------

TITLE: Creating a Basic Async UI Test in Rust
DESCRIPTION: Example of a UI test that tests the compiler's error message when using await outside of an async function. The test demonstrates proper test structure including explanatory comments and edition directives.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/adding.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// Provide diagnostics when the user writes `await` in a non-`async` function.
//@ edition:2018

async fn foo() {}

fn bar() {
    foo().await
}

fn main() {}
```

----------------------------------------

TITLE: Eager Nested Goal Evaluation in Old Rust Trait System
DESCRIPTION: In the old trait system, nested goals are eagerly handled during evaluation, while in fulfillment they are returned for later processing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/significant-changes.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
// Source: eval-nested
let (predicate, candidate) = self.infcx.probe(|_| {
    match candidate.kind {
        BuiltinCandidate(predicate) => (predicate, candidate),
        ProjectionCandidate => {
            let result = self.evaluate_projection_candidate(
                stack,
                candidate,
                param_env,
                obligation,
            );
            (result.predicate, result.candidate)
        }
        // ... (other cases)
    }
});
```

----------------------------------------

TITLE: Correct SIMD Intrinsic Monomorphization in Rust
DESCRIPTION: Shows the proper way to use the simd_add intrinsic function with a custom SIMD type that has the #[repr(simd)] attribute
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0511.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(repr_simd)]
#![feature(intrinsics)]

#[repr(simd)]
#[derive(Copy, Clone)]
struct i32x2([i32; 2]);

#[rustc_intrinsic]
unsafe fn simd_add<T>(a: T, b: T) -> T;

unsafe { simd_add(i32x2([0, 0]), i32x2([1, 2])); } // ok!
```

----------------------------------------

TITLE: Rust Main Function for Stack Size Analysis
DESCRIPTION: This Rust snippet defines a main function that allocates an array on the stack, used to demonstrate stack size analysis.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/emit-stack-sizes.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
// file: src/main.rs
use std::ptr;

#[inline(never)]
fn main() {
    let xs = [0u32; 2];

    // force LLVM to allocate `xs` on the stack
    unsafe { ptr::read_volatile(&xs.as_ptr()); }
}
```

----------------------------------------

TITLE: Example GIMPLE Output
DESCRIPTION: This snippet shows an example of the GIMPLE output generated by the program. It represents the intermediate representation of a function named 'xxx'.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/gimple.md#2025-04-21_snippet_4

LANGUAGE: c
CODE:
```
__attribute__((const))
int xxx ()
{
  int D.3394;
  int sum;
  int x;

  <D.3377>:
  x = 45;
  sum = 0;
  goto loop_cond;
  loop_cond:
  x = x >> 1;
  if (x != 0) goto after_loop; else goto loop_body;
  loop_body:
  _1 = foo (x);
  _2 = _1 * 2;
  x = x + _2;
  goto loop_cond;
  after_loop:
  D.3394 = sum;
  return D.3394;
}
```

----------------------------------------

TITLE: Configuring Custom Preprocessor in book.toml for mdBook
DESCRIPTION: This TOML snippet shows how to configure a custom preprocessor in the book.toml file. It sets up the preprocessor command and specifies extra directories to watch during the build process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustbook/README.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[preprocessor.spec]
command = "cargo run --manifest-path my-cool-extension/Cargo.toml"

[build]
extra-watch-dirs = ["my-cool-extension/src"]
```

----------------------------------------

TITLE: Rust Types and Data Structures Reference
DESCRIPTION: Common type definitions and data structures mentioned in the glossary include BodyId, DefId, HirId, and InferCtxt. These are fundamental building blocks used throughout the Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/appendix/glossary.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
DefId         // An index identifying a definition
BodyId        // An identifier for a specific body (function/constant)
HirId         // Identifies a HIR node by combining def-id with offset
InferCtxt     // Type inference context
GenericArgs   // Used for substituting early-bound lifetimes
```

----------------------------------------

TITLE: Invalid Rust Linkage Example
DESCRIPTION: Demonstrates an invalid usage of the #[linkage] attribute with a non-pointer i8 type, which will result in error E0791.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0791.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(linkage)]

extern "C" {
    #[linkage = "extern_weak"]
    static foo: i8;
}
```

----------------------------------------

TITLE: Default Self-Profile Events Configuration
DESCRIPTION: Shows two equivalent ways to enable the profiler with default event settings.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/self-profile-events.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ rustc -Zself-profile
$ rustc -Zself-profile -Zself-profile-events=default
```

----------------------------------------

TITLE: AstIdMap Query Implementation (Rust)
DESCRIPTION: This function implements the ast_id_map query that produces the mapping from position-independent AstIds to position-dependent syntax nodes during the lowering process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_11

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/hir-def/src/item_tree/lower.rs#L32
```

----------------------------------------

TITLE: Demonstrating Associated Type Equality Constraints with `impl Trait`
DESCRIPTION: This code illustrates how associated type equality constraints for `impl Trait` can be used, as long as the hidden type satisfies the trait bounds on the associated type. The opaque `impl Trait` signature itself does not need to satisfy them, which is a backwards compatibility hack. This is particularly relevant to lazy TAIT implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/opaque-types-impl-trait-inference.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
trait Duh {}

impl Duh for i32 {}

trait Trait {
    type Assoc: Duh;
}

// the fact that `R` is the `::Output` projection on `F` causes
// an intermediate inference var to be generated which is then later
// compared against the actually found `Assoc` type.
impl<R: Duh, F: FnMut() -> R> Trait for F {
    type Assoc = R;
}

// The `impl Send` here is then later compared against the inference var
// created, causing the inference var to be set to `impl Send` instead of
// the hidden type. We already have obligations registered on the inference
// var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque
// type does not implement `Duh`, even if its hidden type does.
// Lazy TAIT would error out, but we inserted a hack to make it work again,
// keeping backwards compatibility.
fn foo() -> impl Trait<Assoc = impl Send> {
    || 42
}
```

----------------------------------------

TITLE: Incremental Compilation Test Example in Rust
DESCRIPTION: Demonstrates how to write an incremental compilation test using revisions. The test simulates source code changes across multiple compiler runs using cfg attributes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/compiletest.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
//@ revisions: rpass1 rpass2

#[cfg(rpass1)]
fn foo() {
    println!("one");
}

#[cfg(rpass2)]
fn foo() {
    println!("two");
}

fn main() { foo(); }
```

----------------------------------------

TITLE: Defining Diagnostic Interface with Colored Output in TypeScript
DESCRIPTION: TypeScript interface definition for LSP Diagnostic objects that includes support for rendered compiler output with optional ANSI color codes. This is used when the client has the 'colorDiagnosticOutput' capability enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
// https://microsoft.github.io/language-server-protocol/specifications/specification-current#diagnostic
export interface Diagnostic {
    ...
    data?: {
        /**
         * The human-readable compiler output as it would be printed to a terminal.
         * Includes ANSI color and style codes if the client has set the experimental
         * `colorDiagnosticOutput` capability.
         */
        rendered?: string;
    };
}
```

----------------------------------------

TITLE: Defining a Generic Struct in Rust
DESCRIPTION: Defines a simple Rust struct `Foo` with a single generic type parameter `T`, used within a `Vec<T>`. This example serves to illustrate how the type parameter `T` is represented internally as `TyKind::Param` with name "T" and index 0.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/param_ty_const_regions.md#_snippet_1

LANGUAGE: rust
CODE:
```
struct Foo<T>(Vec<T>);
```

----------------------------------------

TITLE: Running Tests
DESCRIPTION: Command to run the test suite for the rustc_codegen_gcc project in release mode.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
$ ./y.sh test --release
```

----------------------------------------

TITLE: Generated Subdiagnostic Implementation in Rust
DESCRIPTION: Example of the implementation generated by the #[derive(Subdiagnostic)] macro for the ExpectedReturnTypeLabel enum. It shows how the enum variants are converted into diagnostic labels.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/diagnostic-structs.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
impl<'tcx> Subdiagnostic for ExpectedReturnTypeLabel<'tcx> {
    fn add_to_diag(self, diag: &mut rustc_errors::Diagnostic) {
        use rustc_errors::{Applicability, IntoDiagArg};
        match self {
            ExpectedReturnTypeLabel::Unit { span } => {
                diag.span_label(span, rustc_errors::fluent::hir_analysis_expected_default_return_type)
            }
            ExpectedReturnTypeLabel::Other { span, expected } => {
                diag.set_arg("expected", expected);
                diag.span_label(span, rustc_errors::fluent::hir_analysis_expected_return_type)
            }
        }
    }
}
```

----------------------------------------

TITLE: THIR Example: Simple Addition Expression
DESCRIPTION: Demonstrates the THIR representation of a basic arithmetic operation, showing how a simple expression is transformed into a detailed intermediate representation with type and scope information
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/thir.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let x = 1 + 2;
}
```

LANGUAGE: rust
CODE:
```
Thir {
    arms: [],
    exprs: [
        // Detailed THIR representation of the expression
        Expr {
            ty: i32,
            temp_lifetime: Some(Node(1)),
            span: oneplustwo.rs:2:13: 2:14 (#0),
            kind: Literal {
                lit: Spanned {
                    node: Int(1, Unsuffixed),
                    span: oneplustwo.rs:2:13: 2:14 (#0)
                },
                neg: false
            }
        },
        // ... additional expressions ...
    ],
    stmts: [
        // Statement details
        Stmt {
            kind: Let {
                pattern: Pat {
                    ty: i32,
                    kind: Binding {
                        name: "x",
                        var: LocalVarId(...)
                    }
                },
                initializer: Some(e5)
            }
        }
    ]
}
```

----------------------------------------

TITLE: Representing Higher Ranked Types with Binder in Rust
DESCRIPTION: This snippet illustrates how a higher ranked function type, using a generic lifetime, is represented in the Rust compiler as a `Binder` instance. It captures the function type along with the associated lifetimes and kind of bound variables used.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/binders.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
Binder(
    fn(&RegionKind::Bound(DebruijnIndex(0), BoundVar(0)) u32) -> (),
    &[BoundVariableKind::Region(...)],
)
```

----------------------------------------

TITLE: Clang++ Wrapper Script for aarch64-unknown-linux-ohos
DESCRIPTION: This shell script wraps the Clang++ compiler from the OpenHarmony SDK for the aarch64-unknown-linux-ohos target.  It configures the compiler to target OpenHarmony by specifying the sysroot, target architecture and defines the __MUSL__ macro.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/openharmony.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
#!/bin/sh
exec /path/to/ohos-sdk/linux/native/llvm/bin/clang++ \
  -target aarch64-linux-ohos \
  --sysroot=/path/to/ohos-sdk/linux/native/sysroot \
  -D__MUSL__ \
  "$@"
```

----------------------------------------

TITLE: Checking Immediate Binding in ELF Binary
DESCRIPTION: This command uses readelf to check if immediate binding is enabled in a compiled Rust binary by looking for the BIND_NOW flag in the dynamic section.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_8

LANGUAGE: text
CODE:
```
$ readelf -d target/release/hello-rust | grep BIND_NOW
 0x000000000000001e (FLAGS)              BIND_NOW
```

----------------------------------------

TITLE: Rust: Inspecting Dataflow Results with ResultsCursor
DESCRIPTION: This code snippet demonstrates how to inspect the fixpoint state of a dataflow analysis using a `ResultsCursor`. It iterates to fixpoint, creates a `ResultsCursor`, and then seeks to the location immediately before each `Drop` terminator to retrieve and print the corresponding dataflow state.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/dataflow.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
```rust,ignore
let mut results = MyAnalysis::new()
    .into_engine(tcx, body, def_id)
    .iterate_to_fixpoint()
    .into_results_cursor(body);

// Inspect the fixpoint state immediately before each `Drop` terminator.
for (bb, block) in body.basic_blocks().iter_enumerated() {
    if let TerminatorKind::Drop { .. } = block.terminator().kind {
        results.seek_before_primary_effect(body.terminator_loc(bb));
        let state = results.get();
        println!("state before drop: {:#?}", state);
    }
}
```
```

----------------------------------------

TITLE: Declaring a Clippy Lint
DESCRIPTION: This Rust macro, `declare_clippy_lint!`, is used to declare a new Clippy lint. It provides the structure for defining the lint including its description, why it's bad, an example of the issue, and an example of how to fix it. It also includes the Clippy version and lint group.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/defining_lints.md#_snippet_2

LANGUAGE: rust
CODE:
```
declare_clippy_lint! {
    /// ### What it does
    ///
    /// // Describe here what does the lint do.
    ///
    /// Triggers when detects...
    ///
    /// ### Why is this bad?
    ///
    /// // Describe why this pattern would be bad
    ///
    /// It can lead to...
    ///
    /// ### Example
    /// ```rust
    /// // example code where Clippy issues a warning
    /// ```
    /// Use instead:
    /// ```rust
    /// // example code which does not raise Clippy warning
    /// ```
    #[clippy::version = "1.70.0"] // <- In which version was this implemented, keep it up to date!
    pub LINT_NAME, // <- The lint name IN_ALL_CAPS
    pedantic, // <- The lint group
    "default lint description" // <- A lint description, e.g. "A function has an unit return type."
}
```

----------------------------------------

TITLE: CMake 3.28 Jobserver Configuration
DESCRIPTION: Demonstrates CMake 3.28's JOB_SERVER_AWARE option for proper rustc jobserver integration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/jobserver.md#2025-04-21_snippet_3

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.28)
project(x)
add_custom_target(x
    JOB_SERVER_AWARE TRUE
    COMMAND echo 'fn main() {}' | rustc -
)
```

----------------------------------------

TITLE: Creating a Salsa Input Query Group in Rust
DESCRIPTION: Example of defining a Salsa input query group using a trait with the #[salsa::query_group] attribute. This demonstrates how to create base input queries that don't rely on derived input, allowing values to be set externally.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/salsa.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
/// This attribute will process this tree, produce this tree as output, and produce
/// a bunch of intermediate stuff that Salsa also uses. One of these things is a
/// "StorageStruct", whose name we have specified in the attribute.
///
/// This query group is a bunch of **input** queries, that do not rely on any
/// derived input.
#[salsa::query_group(InputsStorage)]
pub trait Inputs {
    /// This attribute (`#[salsa::input]`) indicates that this query is a base
    /// input, therefore `set_manifest` is going to be auto-generated
    #[salsa::input]
    fn manifest(&self) -> Manifest;

    #[salsa::input]
    fn source_text(&self, name: String) -> String;
}
```

----------------------------------------

TITLE: Marking Pull Request Ready for Review in Rust
DESCRIPTION: This command is used when a pull request in the Rust repository is ready for review after addressing comments or changes requested during the initial review phase.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/contributing.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
@rustbot ready
```

----------------------------------------

TITLE: Running Miri Tests in Rust Toolchain with Bash
DESCRIPTION: This snippet showcases the command to run Miri tests within the context of the Rust repository, highlighting the use of the Rust toolchain.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_13

LANGUAGE: sh
CODE:
```
./x.py test miri
```

LANGUAGE: sh
CODE:
```
./x.py run miri --stage 1 --args src/tools/miri/tests/pass/hello.rs
```

----------------------------------------

TITLE: Implementing Basic Lint Emission in Rust
DESCRIPTION: Example implementation of a LateLintPass that checks expressions and emits a lint with a helpful message using span_lint_and_help.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/emitting_lints.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
impl<'tcx> LateLintPass<'tcx> for LintName {
    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>)  {
        // Imagine that `some_lint_expr_logic` checks for requirements for emitting the lint
        if some_lint_expr_logic(expr) {
            span_lint_and_help(
                cx, // < The context
                LINT_NAME, // < The name of the lint in ALL CAPS
                expr.span, // < The span to lint
                "message on why the lint is emitted",
                None, // < An optional help span (to highlight something in the lint)
                "message that provides a helpful suggestion",
            );
        }
    }
}
```

----------------------------------------

TITLE: Creating a New Type-Specific Lint
DESCRIPTION: This command is used to create a new lint that is associated with a specific lint type (e.g., functions, loops). It uses the Clippy dev tools, and registers the lint under a specific type. The `--type` flag is used instead of `--pass` as with standalone definitions. The output files are listed in the comments following the shell script.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/defining_lints.md#_snippet_1

LANGUAGE: sh
CODE:
```
$ cargo dev new_lint --name=foo_functions --type=functions --category=pedantic
```

----------------------------------------

TITLE: Configuring Rust Build for MIPS R6 in bootstrap.toml
DESCRIPTION: Disables debug info generation and warnings to work around LLVM bugs and compilation issues for MIPS R6 targets.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/mips-release-6.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[rust]
debug = false
debug-info-level = 0

[rust]
deny-warnings = false
```

----------------------------------------

TITLE: Building Miri
DESCRIPTION: This snippet shows the command to compile Miri after preparing the build environment. It details how to invoke the Miri build process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
./miri build
```

----------------------------------------

TITLE: Incorrect FFI Const Usage in Rust Function
DESCRIPTION: Example showing incorrect usage of the ffi_const attribute on a regular Rust function, which results in error E0756.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0756.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(ffi_const)]

#[unsafe(ffi_const)] // error!
pub fn foo() {}
# fn main() {}
```

----------------------------------------

TITLE: Testing with Hello World
DESCRIPTION: Command to verify that the rustc_codegen_gcc setup is working correctly by building a simple Hello World test program.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
$ ./y.sh cargo build --manifest-path tests/hello-world/Cargo.toml
```

----------------------------------------

TITLE: Demonstrating Invalid 'pub' Usage in Rust Function
DESCRIPTION: This code snippet shows an erroneous use of the 'pub' keyword inside a function. The compiler would previously emit an error for this case, as visibility modifiers have no effect on items defined within functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0447.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo() {
    pub struct Bar; // error: visibility has no effect inside functions
}
```

----------------------------------------

TITLE: Including Custom HTML After Content with rustdoc (Bash)
DESCRIPTION: Demonstrates how the `--html-after-content` flag inserts HTML content from specified files before the `</body>` tag, after the main documentation content.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_21

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --html-after-content extra.html
```

LANGUAGE: bash
CODE:
```
$ rustdoc README.md --html-after-content extra.html
```

----------------------------------------

TITLE: Running M68K Programs with QEMU
DESCRIPTION: Command to run simple M68K programs using QEMU user emulation. This is suitable for basic programs without complex dependencies.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-none-elf.md#_snippet_6

LANGUAGE: sh
CODE:
```
qemu-m68k-static your-code
```

----------------------------------------

TITLE: Renaming a feature gate in Rust
DESCRIPTION: This snippet outlines the procedure for renaming a feature gate. It involves removing the existing feature gate declaration, adding it to the removed gates with a note on renaming, and finally declaring the feature with its new name in `unstable.rs`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/feature-gates.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
"/// description of feature\n(unstable, $old_feature_name, \"$version\", Some($tracking_issue_number))"
```

LANGUAGE: rust
CODE:
```
"/// description of feature\n/// Renamed to \"$new_feature_name\"\n(removed, $old_feature_name, \"$version\", Some($tracking_issue_number),\n Some(\"renamed to \"$new_feature_name\"\"))"
```

LANGUAGE: rust
CODE:
```
"/// description of feature\n(unstable, $new_feature_name, \"$version\", Some($tracking_issue_number))"
```

----------------------------------------

TITLE: Adding Lint to Documentation in Clippy Config - Rust
DESCRIPTION: Shows how to update lint documentation by defining the lint in the lint configuration macro (define_Conf!) within clippy_config/src/conf.rs. Include the new lint name in the #[lints(...)] attribute, and ensure the msrv option is present with its default value. All lints requiring MSRV gating must be documented this way. Dependencies: macro usage and correct lint naming.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_14

LANGUAGE: rust
CODE:
```
define_Conf! {
    #[lints(
        allow_attributes,
        allow_attributes_without_reason,
        ..
        <the newly added lint name>,
        ..
        unused_trait_names,
        use_self,
    )]
    msrv: Msrv = Msrv::default(),
    ...
}
```

----------------------------------------

TITLE: Generating MIR with New Basic Blocks
DESCRIPTION: This snippet illustrates how to create MIR in Rust, where expressions may require new basic blocks. It showcases the use of the `BlockAnd` type for handling control flow graphs. The function takes a starting block and may yield a different block after code execution, useful in branching scenarios. Dependencies include Rust MIR libraries and types `BasicBlock` and `BlockAnd`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/construction.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn generate_more_mir(&mut self, block: BasicBlock) -> BlockAnd<ResultType> {
    ...
}
```

----------------------------------------

TITLE: Building Rust Code for Mac Catalyst
DESCRIPTION: Example command showing how to compile Rust code targeting the Mac Catalyst platform using rustc with the appropriate target specification.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-ios-macabi.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
$ rustc --target aarch64-apple-ios-macabi your-code.rs
```

----------------------------------------

TITLE: Configuring Tier 3 iOS Targets in Bootstrap Configuration
DESCRIPTION: Configuration example for bootstrap.toml to enable building tier 3 iOS targets (armv7s and i386) in a rustc build.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-ios.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[build]
target = ["armv7s-apple-ios", "i386-apple-ios"]
```

----------------------------------------

TITLE: Creating Types Programmatically for Trait Checking
DESCRIPTION: Shows how to create types programmatically to check trait implementations for generic traits. Demonstrates creating a slice type and converting it to a GenericArg for trait implementation checking.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/trait_checking.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
use rustc_middle::ty::Ty;
use clippy_utils::ty::implements_trait;
use rustc_span::symbol::sym;

let ty = todo!("Get the `Foo` type to check for a trait implementation");
let borrow_id = cx.tcx.get_diagnostic_item(sym::Borrow).unwrap(); // avoid unwrap in real code
let slice_of_bytes_t = Ty::new_slice(cx.tcx, cx.tcx.types.u8);
let generic_param = slice_of_bytes_t.into();
if implements_trait(cx, ty, borrow_id, &[generic_param]) {
    todo!("Rest of lint implementation")
}
```

----------------------------------------

TITLE: Specifying Dlltool Path in Rust
DESCRIPTION: On windows-gnu targets, this flag specifies the path to the dlltool executable used for generating import libraries for raw-dylib link kinds. It takes a path to the dlltool executable. If this flag is not specified, a dlltool executable will be inferred.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_7



----------------------------------------

TITLE: Configuring WALI Target in Rust (TOML)
DESCRIPTION: This snippet shows how to configure the Rust target with support for WALI by providing a sample `config.toml` file. It includes setting up toolchain artifacts and specifying toolchain paths like musl-root, llvm-config, and compiler binaries in the WALI source directory. The configuration includes necessary paths for building Rust with WALI support.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wali-linux.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["wasm32-wali-linux-musl"]

[target.wasm32-wali-linux-musl]
musl-root = "<WALI>/wali-musl/sysroot"
llvm-config = "<WALI>/llvm-project/build/bin/llvm-config"
cc = "<WALI>/llvm-project/build/bin/clang-18"
cxx = "<WALI>/llvm-project/build/bin/clang-18"
ar = "<WALI>/llvm-project/build/bin/llvm-ar"
ranlib = "<WALI>/llvm-project/build/bin/llvm-ranlib"
llvm-libunwind = "system"
crt-static = true
```

----------------------------------------

TITLE: Incorrect Declaration of Atomic Operation Intrinsic in Rust
DESCRIPTION: Example of erroneous code that triggers E0092 error by declaring an undefined atomic operation function. This demonstrates what not to do when working with Rust intrinsics.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0092.md#_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(intrinsics)]
#![allow(internal_features)]

#[rustc_intrinsic]
unsafe fn atomic_foo(); // error: unrecognized atomic operation
                        //        function
```

----------------------------------------

TITLE: Configuring Rust Build Target for RISC-V
DESCRIPTION: This snippet shows how to specify the RISC-V target in the Rust build configuration. It sets up the target in the `Cargo.toml` file to enable building for RISC-V.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv32imac-unknown-xous-elf.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["riscv32imac-unknown-xous-elf"]
```

----------------------------------------

TITLE: Big-Endian Linker Configuration
DESCRIPTION: GNU linker configuration for BE-32 processors requiring big-endian instruction and data handling
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7r-none-eabi.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
-mbe32
```

----------------------------------------

TITLE: Basic Cargo Configuration for s390x-unknown-linux-musl Cross-Compilation
DESCRIPTION: Configuration for .cargo/config.toml to specify the linker for cross-compiling to s390x-unknown-linux-musl target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/s390x-unknown-linux-musl.md#_snippet_1

LANGUAGE: toml
CODE:
```
[target.s390x-unknown-linux-musl]
linker = "s390x-linux-musl-gcc"
```

----------------------------------------

TITLE: Rust Invalid Hexadecimal Character Error
DESCRIPTION: This snippet demonstrates an error where a hexadecimal integer literal (0x) contains an invalid character 'G'. Valid hexadecimal characters are 0-9 and A-F (or a-f).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_9

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0xG\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Rust Invalid Hexadecimal Character Error (lowercase)
DESCRIPTION: This snippet demonstrates an error where a hexadecimal integer literal (0x) contains an invalid character 'g'. Valid hexadecimal characters are 0-9 and A-F (or a-f).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_10

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0xg\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Demonstrating Move Paths in Rust
DESCRIPTION: This Rust code snippet demonstrates the concept of move paths by illustrating the movement and initialization state of tuple elements. It showcases how moving individual elements affects their initialization state. Requires the understanding of Rust's ownership and borrow rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/moves_and_initialization/move_paths.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo() {
    let a: (Vec<u32>, Vec<u32>) = (vec![22], vec![44]);

    // a.0 and a.1 are both initialized

    let b = a.0; // moves a.0

    // a.0 is not initialized, but a.1 still is

    let c = a.0; // ERROR
    let d = a.1; // OK
}
```

----------------------------------------

TITLE: Suppressing warnings in bootstrap - Toml
DESCRIPTION: This configuration in 'bootstrap.toml' disables warnings for local path dependencies during bootstrap, allowing for smoother local development.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/new-target.md#2025-04-21_snippet_6

LANGUAGE: toml
CODE:
```
[rust]
deny-warnings = false
```

----------------------------------------

TITLE: Implementing Non-Secure Function Call in Rust for TrustZone-M
DESCRIPTION: Demonstrates how to create a function that safely calls into non-secure code using the C-cmse-nonsecure-call ABI. The code uses unsafe transmutation to convert a memory address into a function pointer with the appropriate calling convention.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/abi-c-cmse-nonsecure-call.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![no_std]
#![feature(abi_c_cmse_nonsecure_call)]

#[no_mangle]
pub fn call_nonsecure_function(addr: usize) -> u32 {
    let non_secure_function =
        unsafe { core::mem::transmute::<usize, extern "C-cmse-nonsecure-call" fn() -> u32>(addr) };
    non_secure_function()
}
```

----------------------------------------

TITLE: Syntax Tree and View Requests in TypeScript
DESCRIPTION: Defines TypeScript interfaces for requesting syntax tree representations and views for debugging Rust Analyzer
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_19

LANGUAGE: typescript
CODE:
```
interface SyntaxTreeParams {
    textDocument: TextDocumentIdentifier,
    range?: Range,
}

interface ViewSyntaxTreeParams {
    textDocument: TextDocumentIdentifier,
}
```

----------------------------------------

TITLE: Implementing CoerceUnsized in Rust
DESCRIPTION: This snippet outlines the types that implement the CoerceUnsized trait in Rust. The trait is intended for smart pointers to allow the pointed data to be unsized.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/unsize.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
Some implementors of `CoerceUnsized` include:
* `&T`
* `Arc<T>`
* `Box<T>`
```

----------------------------------------

TITLE: Running CI Jobs Locally with Python Script
DESCRIPTION: Uses a Python helper script to replicate CI behavior locally for running specific Rust test jobs in Docker containers. The script attempts to match CI conditions as closely as possible.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/docker.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
python3 src/ci/github-actions/ci.py run-local <job-name>
# For example:
python3 src/ci/github-actions/ci.py run-local dist-x86_64-linux-alt
```

----------------------------------------

TITLE: Registering Revision Names in FileCheck Directives
DESCRIPTION: This snippet shows how to register the current revision name as an additional prefix for FileCheck directives by using `//@[revision-name]`. It exemplifies how to structure tests for coverage and normal scenarios.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/compiletest.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
"//@ revisions: NORMAL COVERAGE\n//@[COVERAGE] compile-flags: -Cinstrument-coverage\n//@[COVERAGE] needs-profiler-runtime\n\n// COVERAGE:   @__llvm_coverage_mapping\n// NORMAL-NOT: @__llvm_coverage_mapping\n\n// CHECK: main\nfn main() {}\n"
```

----------------------------------------

TITLE: Adding Configuration Entry to Clippy Lint in Rust
DESCRIPTION: Example of adding a new configuration entry to the Clippy configuration system, including the proper documentation format that will be automatically included in the lint documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_17

LANGUAGE: rust
CODE:
```
/// Lint: LINT_NAME.
///
/// <The configuration field doc comment>
(configuration_ident: Type = DefaultValue),
```

----------------------------------------

TITLE: Enabling powerpc64le Target in Rust Build Configuration
DESCRIPTION: Configures rustc build to include powerpc64le-unknown-linux-musl target by specifying target in build configuration
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/powerpc64le-unknown-linux-musl.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["powerpc64le-unknown-linux-musl"]
```

----------------------------------------

TITLE: Annotating Error Above Line (Rust)
DESCRIPTION: Demonstrates the `//~v` idiom placed above the error line. The number of `v` characters indicates how many lines below the annotation the expected diagnostic appears. Often used for errors like unclosed delimiters or literals near the end of a file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_6

LANGUAGE: Rust
CODE:
```
// ignore-tidy-trailing-newlines
//~v ERROR this file contains an unclosed delimiter
fn main((ؼ
```

----------------------------------------

TITLE: Demonstrating Unknown External Lang Item Error in Rust
DESCRIPTION: This code example shows the error that occurs when using an undefined external lang item 'cake'. External lang items must be from the approved list in the Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0264.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(lang_items)]
#![allow(internal_features)]

extern "C" {
    #[lang = "cake"] // error: unknown external lang item: `cake`
    fn cake();
}
```

----------------------------------------

TITLE: Setting Codegen Units for Rust Compiler
DESCRIPTION: This TOML configuration sets the number of codegen units for both `rustc` and `libstd` to one. Modifying the codegen units can lead to faster compiler builds, as it affects how the work of code generation is divided and parallelized.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/optimized-build.md#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[rust]
codegen-units = 1
codegen-units-std = 1
```

----------------------------------------

TITLE: Configuring Rust Bootstrap for x86_64-fortanix-unknown-sgx Target
DESCRIPTION: This TOML configuration snippet sets up the Rust bootstrap to build the x86_64-fortanix-unknown-sgx target. It specifies the build stage and the target to be built.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/x86_64-fortanix-unknown-sgx.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
target = ["x86_64-fortanix-unknown-sgx"]
```

----------------------------------------

TITLE: Configuring DFSan for Rust-specific Functions
DESCRIPTION: This snippet marks various Rust-specific functions as uninstrumented for DFSan. It includes memory allocation, deallocation, and core Rust functions that should not be instrumented.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/sanitizer/dataflow-abilist.txt#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
fun:__rdl_alloc=uninstrumented
fun:__rdl_alloc_zeroed=uninstrumented
fun:__rdl_dealloc=uninstrumented
fun:__rdl_realloc=uninstrumented
fun:__rg_oom=uninstrumented
fun:__rust_alloc=uninstrumented
fun:__rust_alloc_error_handler=uninstrumented
fun:__rust_alloc_zeroed=uninstrumented
fun:__rust_dealloc=uninstrumented
fun:__rust_realloc=uninstrumented
fun:_ZN4core*=uninstrumented
fun:_ZN3std*=uninstrumented
fun:rust_eh_personality=uninstrumented
```

----------------------------------------

TITLE: Decoding Inference Variables Syntax in Rust Compiler
DESCRIPTION: Describes the syntax for inference variables used in the Rust compiler. The format is ?{id}, where id identifies the specific inference variable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
?x
```

LANGUAGE: rust
CODE:
```
?0
```

----------------------------------------

TITLE: Example Rust Function Parse Tree
DESCRIPTION: Shows how a simple Rust function 'fn f() { 90 + 2 }' is parsed into a syntax tree structure, demonstrating the hierarchical representation with nodes, tokens, and whitespace.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/syntax.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
FN@0..17
  FN_KW@0..2 "fn"
  WHITESPACE@2..3 " "
  NAME@3..4
    IDENT@3..4 "f"
  PARAM_LIST@4..6
    L_PAREN@4..5 "("
    R_PAREN@5..6 ")"
  WHITESPACE@6..7 " "
  BLOCK_EXPR@7..17
    L_CURLY@7..8 "{"
    WHITESPACE@8..9 " "
    BIN_EXPR@9..15
      LITERAL@9..11
        INT_NUMBER@9..11 "90"
      WHITESPACE@11..12 " "
      PLUS@12..13 "+"
      WHITESPACE@13..14 " "
      LITERAL@14..15
        INT_NUMBER@14..15 "2"
    WHITESPACE@15..16 " "
    R_CURLY@16..17 "}"
```

----------------------------------------

TITLE: Rust Missing Octal Digits with Underscore Error
DESCRIPTION: This snippet shows an error case where an octal integer literal (0o_) is defined with only an underscore after the prefix, but no digits. This results in a 'missing digits' compiler error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_4

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0o_\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Installing rustc-dev and llvm-tools Components with rustup
DESCRIPTION: Command to install the necessary components for using rustc_private with official Rust toolchains distributed via rustup. These components provide compiler libraries and LLVM libraries needed for linking.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/rustc-private.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
rustup component add rustc-dev llvm-tools
```

----------------------------------------

TITLE: Configuring MIPS R6 Target in bootstrap.toml
DESCRIPTION: Specifies the MIPS R6 target for Rust build and optionally sets paths for the cross-compilation toolchain.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/mips-release-6.md#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[build]
target = ["mipsisa64r6el-unknown-linux-gnuabi64"]

[target.mipsisa64r6el-unknown-linux-gnuabi64]
cc = "/toolchain_prefix/bin/mipsisa64r6el-unknown-linux-gnuabi64-gcc"
cxx = "/toolchain_prefix/bin/mipsisa64r6el-unknown-linux-gnuabi64-g++"
ar = "/toolchain_prefix/bin/mipsisa64r6el-unknown-linux-gnuabi64-gcc-ar"
ranlib = "/toolchain_prefix/bin/mipsisa64r6el-unknown-linux-gnuabi64-ranlib"
linker = "/toolchain_prefix/bin/mipsisa64r6el-unknown-linux-gnuabi64-gcc"
```

----------------------------------------

TITLE: Flycheck Control Notifications in TypeScript
DESCRIPTION: Defines LSP notifications for controlling flycheck processes in Rust Analyzer, including running, clearing, and canceling flycheck diagnostics
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
interface RunFlycheckParams {
    textDocument: lc.TextDocumentIdentifier | null;
}

interface ClearFlycheckParams {}

interface CancelFlycheckParams {}
```

----------------------------------------

TITLE: Implementing a Provider Function in Rust Compiler
DESCRIPTION: Shows how to implement a provide() function that registers query providers with the compiler. This function modifies a Providers struct by assigning specific provider implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/query.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
pub fn provide(providers: &mut Providers) {
    *providers = Providers {
        type_of,
        ..*providers
    };
}
```

----------------------------------------

TITLE: Annotating Error Without Line Info (Rust)
DESCRIPTION: Explains the `//~?` idiom for annotating diagnostic messages that lack specific source code span information. This method is precise and preferred over `error-pattern` for compile-time diagnostics without spans.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_7

LANGUAGE: Rust
CODE:
```
//@ compile-flags: --print yyyy

//~? ERROR unknown print request: `yyyy`
```

----------------------------------------

TITLE: Creating a target specification - Rust
DESCRIPTION: This command outputs the JSON specification for an existing target, which can be modified and saved for new target creation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/new-target.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
rustc -Z unstable-options --target=wasm32-unknown-unknown --print target-spec-json
```

----------------------------------------

TITLE: Demonstrating VFE Limitation with Trait Implementation in Rust
DESCRIPTION: Code example showing a limitation of Virtual Function Elimination where private trait functions might be incorrectly optimized out when they could be called from outside the crate through public interfaces.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/virtual-function-elimination.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo { fn foo(&self) { println!("foo") } }

impl Foo for usize {}

pub struct FooBox(Box<dyn Foo>);

pub fn make_foo() -> FooBox { FooBox(Box::new(0)) }

#[inline]
pub fn f(a: FooBox) { a.0.foo() }
```

----------------------------------------

TITLE: Debugging Stdarch Tests with SDE Debug Flag
DESCRIPTION: Command to run the stdarch test binary directly with SDE's debug flag enabled. This provides more detailed debugging information when tests crash with signals like SIGSEGV.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/debugging.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
sde -debug -future -rtm_mode full -- /home/user/projects/rustc_codegen_gcc/build/build_sysroot/sysroot_src/library/stdarch/target/debug/deps/core_arch-fd2d75f89baae5c6
```

----------------------------------------

TITLE: Defining Future Compatibility Lint in Rust
DESCRIPTION: This snippet defines a future compatibility lint entry in the Rust compiler. It references the lint ID and associated issue. This context is necessary for maintaining and updating the list of future compatibility concerns within the Rust source code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/bug-fix-procedure.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
FutureIncompatibleInfo {
    id: LintId::of(OVERLAPPING_INHERENT_IMPLS),
    reference: "issue #36889 <https://github.com/rust-lang/rust/issues/36889>",
},
```

----------------------------------------

TITLE: Building LLVM Projects with CMake/Ninja (Bash)
DESCRIPTION: Clones the LLVM project repository, creates a build directory, and runs `cmake` to configure the build using Ninja. It specifies targets (`host`), enables assertions, includes clang and lld projects, enables openmp runtime, enables plugins, sets release build type, and sets the install prefix. Finally, it runs `ninja` to build and install the configured components.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/installation.md#_snippet_7

LANGUAGE: bash
CODE:
```
git clone --depth=1 git@github.com:llvm/llvm-project.git
cd llvm-project
mkdir build
cd build
cmake -G Ninja ../llvm -DLLVM_TARGETS_TO_BUILD="host" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_PROJECTS="clang;lld" -DLLVM_ENABLE_RUNTIMES="openmp" -DLLVM_ENABLE_PLUGINS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=.
ninja
ninja install
```

----------------------------------------

TITLE: Building Cranelift Codegen Backend from Source
DESCRIPTION: Commands to clone the Cranelift codegen backend repository from GitHub and build it from source using the provided build script.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/Readme.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
$ git clone https://github.com/rust-lang/rustc_codegen_cranelift
$ cd rustc_codegen_cranelift
$ ./y.sh build
```

----------------------------------------

TITLE: Pin Nightly Toolchain using Rustup (Shell)
DESCRIPTION: Sets the nightly toolchain as the default for the current directory using `rustup override set`. This allows subsequent `cargo` commands run from this directory to automatically use the nightly toolchain without needing the `+nightly` prefix.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
rustup override set nightly
```

----------------------------------------

TITLE: Updating Rustup Installation
DESCRIPTION: Terminal command to update Rustup and ensure latest compiler version
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
rustup update
```

----------------------------------------

TITLE: Demonstrating Invalid Usage of instruction_set Attribute in Rust
DESCRIPTION: This code snippet shows an erroneous use of the `instruction_set` attribute with an unsupported argument 'intel::x64', which triggers the E0779 error.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0779.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(isa_attribute)]

#[instruction_set(intel::x64)] // error: invalid argument
pub fn something() {}
fn main() {}
```

----------------------------------------

TITLE: Demonstrating Invalid Use of Stability Attributes in Rust
DESCRIPTION: This code snippet shows an example of incorrectly using #[stable] and #[unstable] attributes on a function outside the standard library. These attributes are reserved for use within the Rust standard library and will cause compilation errors when used in user crates.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0734.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[stable(feature = "a", since = "b")] // invalid
#[unstable(feature = "b", issue = "none")] // invalid
fn foo(){}
```

----------------------------------------

TITLE: Setting Playground URL using Rustdoc Bash
DESCRIPTION: This command uses the `--playground-url` flag to specify the base URL for the Rust Playground used by `rustdoc` to generate 'Run' buttons in code examples within the documentation for `src/lib.rs`. This unstable feature is enabled via `-Z unstable-options`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_11

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs -Z unstable-options --playground-url https://play.rust-lang.org/
```

----------------------------------------

TITLE: Checking MSRV Before Running Lint Logic - Rust
DESCRIPTION: Demonstrates the runtime check to ensure the lint only executes when the configured MSRV meets the feature's required version. If the MSRV is below STR_STRIP_PREFIX, the lint logic is skipped with a return. Inputs are the static msrv, the lint context (cx), and the constant, typically from msrv_aliases. Use when writing lints reliant on Rust versioned features. Requires the Msrv::meets method and configured msrv field.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_12

LANGUAGE: rust
CODE:
```
if !self.msrv.meets(cx, msrvs::STR_STRIP_PREFIX) {
    return;
}
```

----------------------------------------

TITLE: Resolving Imports in a Loop (Rust)
DESCRIPTION: This code implements name resolution by looping through and resolving all imports until reaching a fixed point. It handles the process of resolving module references incrementally.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_5

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/hir-def/src/nameres/collector.rs#L404-L437
```

----------------------------------------

TITLE: Fluent Message Definition
DESCRIPTION: This Fluent code snippet defines the localized message for a diagnostic. The slug `hir_analysis_field_already_declared` is followed by error messages and labels which can be used for localization purposes. It requires the associated diagnostic defined in Rust and informs the compiler on how to display errors in different locales with associated variables like `field_name`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/diagnostic-structs.md#2025-04-21_snippet_1

LANGUAGE: fluent
CODE:
```
hir_analysis_field_already_declared =\n    field `{$field_name}` is already declared\n    .label = field already declared\n    .previous_decl_label = `{$field_name}` first declared here
```

----------------------------------------

TITLE: Adding Test Props Struct Declaration in Rust
DESCRIPTION: Implementation of adding a new property to the TestProps struct for tracking test directives in the Rust compiler test suite
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/directives.md#2025-04-21_snippet_2

LANGUAGE: diff
CODE:
```
@@ -232,6 +232,7 @@ pub struct TestProps {
     // customized normalization rules
     pub normalize_stdout: Vec<(String, String)>,
     pub normalize_stderr: Vec<(String, String)>,
+    pub failure_status: i32,
 }
```

----------------------------------------

TITLE: Enabling RISC-V Target in Bootstrap Configuration
DESCRIPTION: Configuration to include the RISC-V target when building Rust from source
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv64gc-unknown-linux-gnu.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["riscv64gc-unknown-linux-gnu"]
```

----------------------------------------

TITLE: Defining Crate Metadata for Profiler Builtins - Rust
DESCRIPTION: Defines the `CrateData` structure for the `profiler_builtins` crate (index 5). It includes the Rust edition (`Edition2021`) and standard compiler configuration flags (`debug_assertions`, `miri`, `true`), with no dependencies listed. This crate contains built-in profiling tools.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_cfg_groups.txt#_snippet_5

LANGUAGE: Rust
CODE:
```
5: CrateData {
    root_file_id: FileId(
        6,
    ),
    edition: Edition2021,
    version: None,
    display_name: Some(
        CrateDisplayName {
            crate_name: CrateName(
                "profiler_builtins",
            ),
            canonical_name: "profiler_builtins",
        },
    ),
    cfg_options: CfgOptions(
        [
            "debug_assertions",
            "miri",
            "true",
        ],
    ),
    potential_cfg_options: None,
    env: Env {
        entries: {},
    },
    dependencies: [],
    origin: Lang(
        Other,
    ),
    is_proc_macro: false,
    proc_macro_cwd: None,
}
```

----------------------------------------

TITLE: Running Customized Speedtest with Specific Iterations
DESCRIPTION: Command to run speed tests with a custom number of iterations (100) for TOML-based tests, specifically for tests named 'semicolon_block'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/speedtest.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
$ SPEEDTEST=toml SPEEDTEST_ITERATIONS=100 TESTNAME="semicolon_block" cargo uitest
```

----------------------------------------

TITLE: Defining Generic CodegenCx and Builder Structures
DESCRIPTION: Core structures for code generation that are parameterized by lifetime parameters. CodegenCx handles compilation of codegen-units while Builder compiles individual basic blocks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/backend-agnostic.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct CodegenCx<'ll, 'tcx> {
  /* ... */
}

struct Builder<'a, 'll, 'tcx> {
  cx: &'a CodegenCx<'ll, 'tcx>,
  /* ... */
}
```

----------------------------------------

TITLE: Desugaring Closure with Immutable Reference in Rust
DESCRIPTION: The purpose of this Rust code is to demonstrate how variables captured by a non-mutating closure are treated as immutable references by the Rust compiler. The closure captures a local variable `x` through immutable borrowing (`Fn`). It is highlighted with the MIR dump that shows how `x` is handled in the compiled form. Prerequisites include a compiler setup with the ability to process command-line flags and generate MIR dumps.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/closure.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn closure(f: impl Fn()) {
    f();
}

fn main() {
    let x: i32 = 10;
    closure(|| println!("Hi {}", x));  // The closure just reads x.
    println!("Value of x after return {}", x);
}
```

----------------------------------------

TITLE: Parsing Token Trees with Macro Parser in Rust
DESCRIPTION: This function defines the interface for the macro parser. It takes a mutable reference to a `Parser` (representing the state of the Rust parser), and a slice of `MatcherLoc` (representing the pattern to match against). It returns a `ParseResult` indicating success, failure, or error during parsing. The token stream from the `parser` is matched against the `matcher` to produce bindings of metavariables.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/macro-expansion.md#_snippet_7

LANGUAGE: rust
CODE:
```
fn parse_tt(
    &mut self,
    parser: &mut Cow<'_, Parser<'_>>,
    matcher: &[MatcherLoc]
) -> ParseResult
```

----------------------------------------

TITLE: Constant Evaluation Functions in Rust Compiler
DESCRIPTION: Key functions for evaluating constants at compile time, providing different evaluation strategies for type system and runtime optimizations
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/const-eval.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
const_eval_global_id_for_typeck
```

LANGUAGE: rust
CODE:
```
const_eval_global_id
```

LANGUAGE: rust
CODE:
```
eval_static_initializer
```

----------------------------------------

TITLE: Cross-Interpret Tests for Big-Endian s390x (Shell)
DESCRIPTION: Runs the project's test suite using Miri while emulating the execution environment of an `s390x-unknown-linux-gnu` target. This specific target is big-endian, making the command useful for verifying code behavior on systems with different endianness.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_9

LANGUAGE: Shell
CODE:
```
cargo miri test --target s390x-unknown-linux-gnu
```

----------------------------------------

TITLE: Correlating NodeId and DefId with Source Code in Rust
DESCRIPTION: This snippet details the flag used to correlate `NodeId`s and `DefId`s with source code, assisting developers in identifying specific nodes and definitions in their code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/hir-debugging.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
-Z unpretty=expanded,identified
```

----------------------------------------

TITLE: Demonstrating Unreachability with Binding on Empty Types in Unsafe Rust
DESCRIPTION: This example illustrates how a binding pattern becomes unreachable when matching on a place of an empty type, even in unsafe code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/pat-exhaustive-checking.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
# #[derive(Copy, Clone)]
# enum Void {}
# let x: u8 = 0;
# let ptr: *const Void = &x as *const u8 as *const Void;
# unsafe {
match *ptr {
    _a => println!("Unreachable!"),
}
# }
```

----------------------------------------

TITLE: Running tests with remote runner
DESCRIPTION: This command sets the `TEST_DEVICE_ADDR` environment variable and runs the specified tests using the remote runner. It targets the RISC-V architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_11

LANGUAGE: text
CODE:
```

export TEST_DEVICE_ADDR="1.2.3.4:12345"
./x test tests/ui --target riscv64gc-unknown-linux-gnu

```

----------------------------------------

TITLE: Installing IDE-Rust Package in Atom
DESCRIPTION: Command to install the ide-rust package in Atom which provides rust-analyzer integration for Rust code formatting
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/atom.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
apm install ide-rust
```

----------------------------------------

TITLE: Install Miri for CI Pipeline (Shell)
DESCRIPTION: Command sequence suitable for a Continuous Integration (CI) environment to install the Rust nightly toolchain and add the Miri component, preparing the build agent for running Miri checks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_12

LANGUAGE: Shell
CODE:
```
rustup toolchain install nightly --component miri
rustup override set nightly
```

----------------------------------------

TITLE: Example Rust Analyzer Installation Output
DESCRIPTION: Sample output showing the installation path of the rust-analyzer binary.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/setup.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
Installing <path-to-rust-analyzer-binary>
Installed package `rust-analyzer v0.0.0 (<path-to-rust-analyzer-binary>)` (executable `rust-analyzer.exe`)
```

----------------------------------------

TITLE: Example Pattern for Repeated Literals
DESCRIPTION: Example of a pattern that matches repeated boolean literals in an array, and how a potential lint could suggest using a more concise repetition syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_18

LANGUAGE: rust
CODE:
```
pattern!{
    my_pattern: Expr =
        Array( Lit(Bool(false)) Lit(Bool(false)) )
}
```

----------------------------------------

TITLE: Inlining a Macro Call in Rust
DESCRIPTION: Demonstrates how a macro invocation can be partially expanded inline, showing one step of the macro's expansion. This example shows expanding a complex nested macro that works with token trees.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_70

LANGUAGE: rust
CODE:
```
macro_rules! num {
    (+$($t:tt)+) => (1 + num!($($t )+));
    (-$($t:tt)+) => (-1 + num!($($t )+));
    (+) => (1);
    (-) => (-1);
}

fn main() {
    let number = num┃!(+ + + - + +);
    println!("{number}");
}
```

LANGUAGE: rust
CODE:
```
macro_rules! num {
    (+$($t:tt)+) => (1 + num!($($t )+));
    (-$($t:tt)+) => (-1 + num!($($t )+));
    (+) => (1);
    (-) => (-1);
}

fn main() {
    let number = 1+num!(+ + - + +);
    println!("{number}");
}
```

----------------------------------------

TITLE: Defining Function with Implicit Lifetime Bounds in Rust
DESCRIPTION: This snippet shows a function definition with implicit lifetime bounds on a boxed trait object. This style may trigger warnings after the Rust 1.3 changes.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0398.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
# trait SomeTrait {}
fn foo(arg: &Box<SomeTrait>) { /* ... */ }
```

----------------------------------------

TITLE: Fixed Example for Variable Shadowing with Static in Rust
DESCRIPTION: This snippet provides a corrected version of the previous error involving a match binding and a static variable in Rust. It replaces the conflicting match arm with an arbitrary variable name demonstrating valid usage.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0530.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
"static TEST: i32 = 0;\n\nlet r = 123;\nmatch r {\n    some_value => {} // ok!\n}"
```

----------------------------------------

TITLE: Using multiple options with --extern flag in Rust
DESCRIPTION: This example shows how to use multiple options (noprelude, priv, and nounused) with the --extern flag for a dependency. Options are separated by commas.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/extern-options.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
rustc main.rs -Z unstable-options --extern noprelude,priv,nounused:mydep=mydep.rlib
```

----------------------------------------

TITLE: Generating and Using AFDO Profile for Rust Compilation
DESCRIPTION: This code snippet demonstrates the process of generating an AFDO profile and using it to optimize a Rust binary. It involves compiling with debug info, profiling with perf, converting the profile, and finally recompiling with the profile data.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/debug_info_for_profiling.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
rustc -O -Zdebug-info-for-profiling main.rs -o main
perf record -b ./main
create_llvm_prof --binary=main --out=code.prof
rustc -O -Zprofile-sample-use=code.prof main.rs -o main2
```

----------------------------------------

TITLE: Initiating FCP (Final Comment Period) for Feature Stabilization
DESCRIPTION: Command to trigger the RFC bot to start a Final Comment Period for feature stabilization. Team members will review the proposal and decide whether to proceed with stabilization.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/stabilization_guide.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
@rfcbot fcp merge
```

----------------------------------------

TITLE: Documenting Keywords with #[doc(keyword)] in Rustdoc
DESCRIPTION: Shows how to document a Rust keyword using the `#[doc(keyword = "...")]` attribute on an arbitrary module (often an empty one). This requires the `rustdoc_internals` feature gate and is primarily for compiler internal use to document built-in keywords.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_5

LANGUAGE: Rust
CODE:
```
#![feature(rustdoc_internals)]
#![allow(internal_features)]

/// Some documentation about the keyword.
#[doc(keyword = "break")]
mod empty_mod {}
```

----------------------------------------

TITLE: Cherry-Picking LLVM Commits with Git
DESCRIPTION: Applies a specific commit from the upstream LLVM repository to the current branch, incorporating the fix into the Rust fork, along with information about where the commit originated.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/updating-llvm.md#2025-04-21_snippet_1

LANGUAGE: git
CODE:
```
"git cherry-pick -x"
```

----------------------------------------

TITLE: Loading Shell Completions for PowerShell
DESCRIPTION: This snippet details how to load shell completions for PowerShell specifically for the Rust project's `x.py`. Users need to invoke the script with the provided command to set up the autocompletion functionality. The instruction assumes familiarity with PowerShell commands and assumes the completion script's correct path.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/suggested.md#2025-04-21_snippet_11

LANGUAGE: shell
CODE:
```
& .\src\etc\completions\x.py.ps1
```

----------------------------------------

TITLE: Configuring Sysroot Cleaning Behavior in Rust Build System
DESCRIPTION: Option to disable cleaning of the sysroot directory, which allows reusing old compiled artifacts when the sysroot source hasn't changed. This is useful when the codegen backend remains unmodified.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/config.txt#2025-04-21_snippet_0

LANGUAGE: ini
CODE:
```
#keep_sysroot
```

----------------------------------------

TITLE: Correct Manual Implementation of FnOnce Trait in Rust with Feature Flags
DESCRIPTION: This code snippet shows the correct way to manually implement the FnOnce trait for a custom struct. It uses the unstable features 'fn_traits' and 'unboxed_closures', which are enabled via feature flags.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0183.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(fn_traits, unboxed_closures)]

struct MyClosure {
    foo: i32
}

impl FnOnce<()> for MyClosure {  // ok!
    type Output = ();
    extern "rust-call" fn call_once(self, args: ()) -> Self::Output {
        println!("{}", self.foo);
    }
}
```

----------------------------------------

TITLE: Implementing a Derived Query Function in Salsa
DESCRIPTION: Implementation of the 'ast' derived query defined in the Parser trait. This shows how to write the actual function that Salsa will call when the query needs to be computed, accepting a database parameter that implements the query group trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/salsa.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
/// This is going to be the definition of the `ast` query in the `Parser` trait.
/// So, when the query `ast` is invoked, and it needs to be recomputed, Salsa is
/// going to call this function and it's going to give it the database as `impl
/// Parser`. The function doesn't need to be aware of all the queries of all the
/// query groups
fn ast(db: &impl Parser, name: String) -> String {
    //! Note, `impl Parser` is used here but `dyn Parser` works just as well
    /* code */
    ///By passing an `impl Parser`, this is allowed
    let source_text = db.input_file(name);
    /* do the actual parsing */
    return ast;
}
```

----------------------------------------

TITLE: CompletionContext Structure Definition (Rust)
DESCRIPTION: This code defines the CompletionContext structure that describes cursor position in terms of Rust syntax and semantics, containing both syntactic and semantic information about the completion site.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_22

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/ide-completion/src/context.rs#L407-L441
```

----------------------------------------

TITLE: Neovim Configuration for Rust Development in Lua
DESCRIPTION: This Lua script configures Neovim's LSP client for Rust projects, specifically for working with rust-lang/rust. It customizes the root directory detection and initialization options based on workspace configurations. Users need to have rust-analyzer pre-configured.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/suggested.md#2025-04-21_snippet_3

LANGUAGE: lua
CODE:
```
local function expand_config_variables(option)
    local var_placeholders = {
        ['${workspaceFolder}'] = function(_)
            return vim.lsp.buf.list_workspace_folders()[1]
        end,
    }

    if type(option) == "table" then
        local mt = getmetatable(option)
        local result = {}
        for k, v in pairs(option) do
            result[expand_config_variables(k)] = expand_config_variables(v)
        end
        return setmetatable(result, mt)
    end
    if type(option) ~= "string" then
        return option
    end
    local ret = option
    for key, fn in pairs(var_placeholders) do
        ret = ret:gsub(key, fn)
    end
    return ret
end
lspconfig.rust_analyzer.setup {
    root_dir = function()
        local default = lspconfig.rust_analyzer.config_def.default_config.root_dir()
        -- the default root detection uses the cargo workspace root.
        -- but for rust-lang/rust, the standard library is in its own workspace.
        -- use the git root instead.
        local compiler_config = vim.fs.joinpath(default, "../src/bootstrap/defaults/config.compiler.toml")
        if vim.fs.basename(default) == "library" and vim.uv.fs_stat(compiler_config) then
            return vim.fs.dirname(default)
        end
        return default
    end,
    on_init = function(client)
        local path = client.workspace_folders[1].name
        local config = vim.fs.joinpath(path, "src/etc/rust_analyzer_zed.json")
        if vim.uv.fs_stat(config) then
            -- load rust-lang/rust settings
            local file = io.open(config)
            local json = vim.json.decode(file:read("*a"))
            client.config.settings["rust-analyzer"] = expand_config_variables(json.lsp["rust-analyzer"].initialization_options)
            client.notify("workspace/didChangeConfiguration", { settings = client.config.settings })
        end
        return true
    end
}
```

----------------------------------------

TITLE: Implementing Strict Provenance Lints in Rust
DESCRIPTION: Example showing how to enable the strict_provenance_lints feature and fuzzy_provenance_casts lint. The code demonstrates a case where casting from an integer to a pointer triggers a warning under the strict provenance model.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/strict-provenance-lints.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(strict_provenance_lints)]
#![warn(fuzzy_provenance_casts)]

fn main() {
    let _dangling = 16_usize as *const u8;
    //~^ WARNING: strict provenance disallows casting integer `usize` to pointer `*const u8`
}
```

----------------------------------------

TITLE: Direct Rustc-Clif Compilation
DESCRIPTION: Command to directly compile a Rust source file using the Cranelift backend through rustc.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/docs/usage.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ $cg_clif_dir/dist/rustc-clif my_crate.rs
```

----------------------------------------

TITLE: Cache Access Example for Debug Metadata
DESCRIPTION: Illustrates how to access cached debug metadata for files using the module's internal caching mechanism.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/debuginfo/doc.md#2025-04-21_snippet_0

LANGUAGE: ignore
CODE:
```
let file_metadata = file_metadata(cx, file);
```

----------------------------------------

TITLE: Updating PR for Rust Style Compliance
DESCRIPTION: Use this command to ensure that your pull request conforms to Rust's style guidelines before submission. It involves running the 'tidy' check, which is a part of the continuous integration process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/contributing.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
$ ./x test tidy --bless
```

----------------------------------------

TITLE: Creating a static library from C object files
DESCRIPTION: This snippet demonstrates how to create a static library from a compiled C object file using the `ar` command. The `crus` flags indicate create, replace, update, and symbol table generation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/linker-plugin-lto.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
"ar crus ./libxyz.a ./clib.o"
```

----------------------------------------

TITLE: Building a no-std library for AMD GPU with Rust
DESCRIPTION: The snippet demonstrates creating a no-std Rust library aimed at AMD GPUs using the 'gpu-kernel' ABI. Dependencies include the Rust compiler configured for specific AMD GPU targets via cross-compilation. The example provides a panic handler and a GPU kernel function as an entry point. Inputs include the target-cpu and necessary feature flags, and the output is a compiled binary suitable for AMD's GPU architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/amdgcn-amd-amdhsa.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(abi_gpu_kernel)]\n#![no_std]\n\n#[panic_handler]\nfn panic(_: &core::panic::PanicInfo) -> ! {\n    loop {}\n}\n\n#[no_mangle]\npub extern "gpu-kernel" fn kernel(/* Arguments */) {\n    // Code\n}
```

----------------------------------------

TITLE: Enabling Languages in CMake
DESCRIPTION: This CMake command enables support for C, C++, and Assembly languages within the project. It is a necessary step to compile and link source files written in these languages.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
enable_language(C CXX ASM)
```

----------------------------------------

TITLE: Defining Rust Crate Dependencies and Configuration
DESCRIPTION: Defines a CrateData structure containing configuration for a hello_world project, including its dependencies on core Rust crates like std, alloc, and proc_macro. Specifies edition 2018, display name, cfg options, and environment settings.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_hello_world_project_model.txt#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
proc_macro_cwd: None,
    },
    10: CrateData {
        root_file_id: FileId(
            11,
        ),
        edition: Edition2018,
        version: None,
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "hello_world",
                ),
                canonical_name: "hello_world",
            },
        ),
        cfg_options: CfgOptions(
            [
                "rust_analyzer",
                "test",
                "true",
            ],
        ),
        potential_cfg_options: None,
        env: Env {
            entries: {},
        },
        dependencies: [
            Dependency {
                crate_id: Idx::<CrateData>(1),
                name: CrateName(
                    "core",
                ),
                prelude: true,
                sysroot: true,
            },
            Dependency {
                crate_id: Idx::<CrateData>(0),
                name: CrateName(
                    "alloc",
                ),
                prelude: false,
                sysroot: true,
            },
            Dependency {
                crate_id: Idx::<CrateData>(6),
                name: CrateName(
                    "std",
                ),
                prelude: true,
                sysroot: true,
            },
            Dependency {
                crate_id: Idx::<CrateData>(8),
                name: CrateName(
                    "test",
                ),
                prelude: false,
                sysroot: true,
            },
            Dependency {
                crate_id: Idx::<CrateData>(4),
                name: CrateName(
                    "proc_macro",
                ),
                prelude: false,
                sysroot: true,
            },
        ],
        origin: Local {
            repo: None,
            name: Some(
                "hello_world",
            ),
        },
        is_proc_macro: false,
        proc_macro_cwd: None,
    },
}
```

----------------------------------------

TITLE: Capturing Rust Compiler Diagnostics using rustc_interface
DESCRIPTION: This code demonstrates how to configure rustc_interface to intercept diagnostics that would normally go to stderr. It sets up a compiler session with a custom diagnostic handler that outputs to a buffer, then runs the type checker on each item to generate diagnostics.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustc-driver/getting-diagnostics.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
{{#include ../../examples/rustc-interface-getting-diagnostics.rs}}
```

----------------------------------------

TITLE: Defining Rust Functions with Unicode Identifiers
DESCRIPTION: Example showing how a function with Unicode characters in its module path would be defined in Rust code. This illustrates the kind of identifiers that would require Punycode encoding in mangled symbols.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
mod gödel {
  mod escher {
    fn bach() {}
  }
}
```

----------------------------------------

TITLE: Configuring Compiler Settings for PowerPC64LE Target
DESCRIPTION: This snippet configures the C compiler and linker settings for the powerpc64le target in the `config.toml` file. It specifies the appropriate tools required for building Rust programs on this architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/powerpc64le-unknown-linux-gnu.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[target.powerpc64le-unknown-linux-gnu]
cc = "powerpc64le-linux-gnu-gcc"
cxx = "powerpc64le-linux-gnu-g++"
ar = "powerpc64le-linux-gnu-ar"
linker = "powerpc64le-linux-gnu-gcc"
```

----------------------------------------

TITLE: Declaring a Migration Lint in Rust
DESCRIPTION: This snippet demonstrates how to declare a migration lint for edition compatibility. It uses the `declare_lint!` macro to create a lint that detects edition keywords being used as identifiers, with future incompatibility information.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/guides/editions.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
declare_lint! {
    pub KEYWORD_IDENTS,
    Allow,
    "detects edition keywords being used as an identifier",
    @future_incompatible = FutureIncompatibleInfo {
        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2018),
        reference: "issue #49716 <https://github.com/rust-lang/rust/issues/49716>",
    };
}
```

----------------------------------------

TITLE: Building Fuchsia Package Manifest
DESCRIPTION: Command to build the package manifest using ffx.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_13

LANGUAGE: sh
CODE:
```
${SDK_PATH}/tools/${ARCH}/ffx package build \
    --api-level $(${SDK_PATH}/tools/${ARCH}/ffx --machine json version | jq .tool_version.api_level) \
    --out pkg/hello_fuchsia_manifest \
    pkg/hello_fuchsia.manifest
```

----------------------------------------

TITLE: Detecting Missing Trailing Quote in Raw Byte String Literal - Rust
DESCRIPTION: This snippet highlights an error condition in Rust where a raw byte string literal is not properly terminated. The compiler detects the missing trailing double quote (`"`) when using `#` symbols to create a raw byte string (e.g., `br##"🦀`). The error message 'Missing trailing `"` with `#` symbols to terminate the raw byte string literal' is generated when the closing quote is missing or misplaced. The primary dependency is the Rust compiler itself, and this functionality is intrinsic to the language's lexical analysis. The expected input is a raw byte string literal, and the output is a compile-time error message. There are no runtime behaviors as it is a compile time error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_raw_byte_string_with_ferris.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
BYTE_STRING "br##\"🦀" error: Missing trailing `"` with `#` symbols to terminate the raw byte string literal
```

----------------------------------------

TITLE: Setting Environment Variables for MIPS R6 Build
DESCRIPTION: Configures environment variables to use the libc backend for rustix and specify OpenSSL paths for the MIPS R6 target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/mips-release-6.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
export RUSTFLAGS="--cfg rustix_use_libc"

export MIPSISA64R6EL_UNKNOWN_LINUX_GNUABI64_OPENSSL_NO_VENDOR=y
export MIPSISA64R6EL_UNKNOWN_LINUX_GNUABI64_OPENSSL_DIR="/var/ab/cross-root/mips64r6el/usr"

# Alternative for Debian:
export MIPSISA64R6EL_UNKNOWN_LINUX_GNUABI64_OPENSSL_NO_VENDOR=y
export MIPSISA64R6EL_UNKNOWN_LINUX_GNUABI64_OPENSSL_LIB_DIR="/usr/lib/mipsisa64r6el-linux-gnuabi64/"
export MIPSISA64R6EL_UNKNOWN_LINUX_GNUABI64_OPENSSL_INCLUDE_DIR="/usr/include"
```

----------------------------------------

TITLE: Improved Pattern with Repetition Syntax
DESCRIPTION: Example of a more concise pattern using proposed repetition syntax to match multiple occurrences of the same element in an array.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_19

LANGUAGE: rust
CODE:
```
pattern!{
    my_pattern: Expr =
        Array( Lit(Bool(false)){2} )
}
```

----------------------------------------

TITLE: Adding s390x Target using `rustup`
DESCRIPTION: This snippet demonstrates how to add the `s390x-unknown-linux-gnu` target to your Rust toolchain using `rustup`. This allows you to cross-compile Rust code for the s390x architecture on a non-s390x host. The command ensures that the necessary libraries and dependencies for the target are available.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/s390x-unknown-linux-gnu.md#2025-04-21_snippet_1

LANGUAGE: Bash
CODE:
```

```bash
rustup target add s390x-unknown-linux-gnu
```

```

----------------------------------------

TITLE: Incorrect SIMD Intrinsic Monomorphization in Rust
DESCRIPTION: Demonstrates an invalid attempt to use the simd_add intrinsic function with non-SIMD types, which results in a compile-time error
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0511.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(intrinsics)]

#[rustc_intrinsic]
unsafe fn simd_add<T>(a: T, b: T) -> T;

fn main() {
    unsafe { simd_add(0, 1); }
    // error: invalid monomorphization of `simd_add` intrinsic
}
```

----------------------------------------

TITLE: Setting Cross-Compilation Toolchain Path
DESCRIPTION: Sets an environment variable to specify the path to the cross-compilation toolchain for MIPS R6.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/mips-release-6.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
export CROSS_COMPILE="/opt/abcross/mips64r6el/bin/mipsisa64r6el-aosc-linux-gnuabi64-"
```

----------------------------------------

TITLE: Starting Virtual Machine
DESCRIPTION: Command to launch the QEMU virtual machine for Rust testing
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/nto-qnx.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
mkqnximage --run=-h
```

----------------------------------------

TITLE: Using Custom Sysroot Source Path in Rust Build Process
DESCRIPTION: Command for building a custom sysroot by specifying the path to custom source during the preparation step using the --sysroot-source flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/tips.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
./y.sh prepare --sysroot-source /path/to/custom/source
```

----------------------------------------

TITLE: Entering M68K Chroot Environment
DESCRIPTION: Command to enter the previously created Debian/M68K chroot environment using the standard chroot command and QEMU user emulation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-none-elf.md#_snippet_3

LANGUAGE: text
CODE:
```
# chroot /path/to/debian-68k
```

----------------------------------------

TITLE: Running Compiled Code for GIMPLE Generation
DESCRIPTION: This console command demonstrates how to run the compiled code to generate GIMPLE output. It sets the necessary library paths.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/gimple.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
LD_LIBRARY_PATH=`pwd`/gcc-build/gcc LIBRARY_PATH=`pwd`/gcc-build/gcc ./out
```

----------------------------------------

TITLE: Installing x.py Tool with Cargo
DESCRIPTION: This snippet outlines the commands necessary to install the x.py tool from its path using Cargo. It allows users to invoke the script from any subdirectory within the Rust project structure.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/x/README.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
$ cd rust/src/tools/x/
$ cargo install --path .
```

----------------------------------------

TITLE: Enabling Local Link Validation (Shell)
DESCRIPTION: Sets the `ENABLE_LINKCHECK` environment variable to `1` for the execution of the `mdbook serve` command. This action activates the `mdbook-linkcheck2` preprocessor during local serving, allowing you to validate external and internal links within the documentation as you develop and preview it. Link checking is typically run in CI by default but requires this step locally.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
ENABLE_LINKCHECK=1 mdbook serve
```

----------------------------------------

TITLE: Setting Language Properties for Assembly Sources
DESCRIPTION: This CMake command sets the `LANGUAGE` property to `ASM` for the files listed in `ASM_SOURCES`. This ensures that the CMake build system treats them as Assembly source files.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/CMakeLists.txt#_snippet_6

LANGUAGE: CMake
CODE:
```
set_source_files_properties(${ASM_SOURCES}
                            PROPERTIES
                            LANGUAGE ASM)
```

----------------------------------------

TITLE: Defining Runnables Interface in TypeScript
DESCRIPTION: The RunnablesParams interface facilitates requesting runnable items from a language server by identifying the specific document and optionally the position in the document. It's used heavily within language server-client communications in TypeScript, specifically for tools interacting with Rust projects.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
interface RunnablesParams {
    textDocument: TextDocumentIdentifier;
    position?: Position;
}
```

----------------------------------------

TITLE: Printing Rust Code Models
DESCRIPTION: Shows how to list available code models using rustc's --print flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/command-line-arguments/print-options.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
$ rustc --print code-models a.rs
Available code models:
    tiny
    small
    kernel
    medium
    large
```

----------------------------------------

TITLE: Blank Lines Example Original
DESCRIPTION: Example showing code before blank lines formatting is applied.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#![rustfmt::skip]

fn foo() {
    println!("a");
}
fn bar() {
    println!("b");
    println!("c");
}
```

----------------------------------------

TITLE: Configuring Base-Sysroot Test Suite in Rust Build System
DESCRIPTION: Configuration section for test suite components that require a base sysroot. Lists various test targets including AOT compilation tests, JIT execution tests, and general sysroot tests.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/config.txt#2025-04-21_snippet_2

LANGUAGE: ini
CODE:
```
testsuite.base_sysroot
aot.arbitrary_self_types_pointers_and_wrappers
aot.issue_91827_extern_types
jit.std_example
aot.std_example
aot.dst_field_align
aot.subslice-patterns-const-eval
aot.track-caller-attribute
aot.float-minmax-pass
aot.issue-72793
aot.issue-59326
aot.neon
aot.gen_block_iterate
aot.raw-dylib
test.sysroot
```

----------------------------------------

TITLE: Launching zxdb Debugger
DESCRIPTION: Command to start the zxdb debugger with symbol paths for debugging Fuchsia components
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_26

LANGUAGE: sh
CODE:
```
${SDK_PATH}/tools/${ARCH}/ffx debug connect -- \
    --symbol-path target/x86_64-unknown-fuchsia/debug
```

----------------------------------------

TITLE: Checking LLVM SafeStack Status Using readelf
DESCRIPTION: Command line example showing how to verify if LLVM SafeStack is enabled for a binary by checking for the presence of __safestack_init symbol using readelf.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_13

LANGUAGE: text
CODE:
```
$ readelf -s target/release/hello-rust | grep __safestack_init
   678: 0000000000008c80   426 FUNC    GLOBAL DEFAULT   15 __safestack_init
```

----------------------------------------

TITLE: Basic Building Commands
DESCRIPTION: Commands to prepare the environment, build the sysroot, and run tests for the rustc_codegen_gcc project.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
$ ./y.sh prepare # download and patch sysroot src and install hyperfine for benchmarking
$ ./y.sh build --sysroot --release
```

----------------------------------------

TITLE: Invalid C-cmse-nonsecure-call Function with Too Many Arguments
DESCRIPTION: Example showing incorrect usage where function has too many u32 arguments (5) which exceeds the 4 available 32-bit registers limitation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0798.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(abi_c_cmse_nonsecure_call)]

#[no_mangle]
pub fn test(
    f: extern "C-cmse-nonsecure-call" fn(u32, u32, u32, u32, u32) -> u32,
) -> u32 {
    f(1, 2, 3, 4, 5)
}
```

----------------------------------------

TITLE: Copying Example Configuration
DESCRIPTION: Command to copy the example configuration file for the rustc_codegen_gcc project setup.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_12

LANGUAGE: bash
CODE:
```
$ cp config.example.toml config.toml
```

----------------------------------------

TITLE: Rust Complex If-Else Token Handling
DESCRIPTION: Shows complex if-else block handling with token parsing and comments. Demonstrates how comments within blocks are treated as block members rather than associated with else statements.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_19

LANGUAGE: rust
CODE:
```
if toks.eat_token(Token::Word("modify"))? && toks.eat_token(Token::Word("labels"))? {
    if toks.eat_token(Token::Colon)? {
        // ate the token
    } else if toks.eat_token(Token::Word("to"))? {
        // optionally eat the colon after to, e.g.:
        // @rustbot modify labels to: -S-waiting-on-author, +S-waiting-on-review
        toks.eat_token(Token::Colon)?;
    } else {
        // It's okay if there's no to or colon, we can just eat labels
        // afterwards.
    }
    1 + 2;
    // continue
} else if toks.eat_token(Token::Word("label"))? {
    // continue
} else {
    return Ok(None);
}
```

----------------------------------------

TITLE: Using ADTs as Const Parameters in Rust
DESCRIPTION: Demonstrates how to use structs and enums as const parameters in generic functions using the `adt_const_params` feature. The example defines a custom enum `Foo` and struct `Bar` that implement `ConstParamTy`, then uses them as const parameters in a function that pattern matches on their values.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/adt-const-params.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(adt_const_params)]
#![allow(incomplete_features)]

use std::marker::ConstParamTy;

#[derive(ConstParamTy, PartialEq, Eq)]
enum Foo {
    A,
    B,
    C,
}

#[derive(ConstParamTy, PartialEq, Eq)]
struct Bar {
    flag: bool,
}

fn is_foo_a_and_bar_true<const F: Foo, const B: Bar>() -> bool {
    match (F, B.flag) {
        (Foo::A, true) => true,
        _ => false,
    }
}
```

----------------------------------------

TITLE: Demonstrating Type Variance with #[rustc_variance] in Rust
DESCRIPTION: This example shows how to use the #[rustc_variance] attribute to display the variance of generic parameters in a type. The attribute is only available with the rustc_attrs feature flag and is intended for testing purposes only.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0208.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// NOTE: this feature is perma-unstable and should *only* be used for
//       testing purposes.
#![allow(internal_features)]
#![feature(rustc_attrs)]

#[rustc_variance]
struct Foo<'a, T> { // error: deliberate error to display type's variance
    t: &'a mut T,
}
```

----------------------------------------

TITLE: Capturing Rust Compiler stderr Output
DESCRIPTION: Demonstrates how to run the Rust compiler and capture its stderr output using the 'eprintln' subcommand of 'x perf'. This is useful for debugging when additional eprintln! calls have been added to the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_rustc_perf.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
./x perf eprintln
```

----------------------------------------

TITLE: Running Rustdoc GUI Tests in Non-Headless Mode
DESCRIPTION: Command to run rustdoc GUI tests with a visible browser window, which can be helpful for debugging user interface interactions
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/rustdoc-gui/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ ./x.py test tests/rustdoc-gui --stage 1 --test-args --no-headless
```

----------------------------------------

TITLE: Type Checking Expression Method Signature
DESCRIPTION: Method signature for expr_ty that retrieves the type of an expression
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/type_checking.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub fn expr_ty(&self, expr: &Expr<'_>) -> Ty<'tcx>
```

----------------------------------------

TITLE: Providers Struct Definition in Rust Compiler
DESCRIPTION: The structure of the Providers struct which contains function pointers to query provider implementations. This struct is used to register query providers with the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/query.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Providers {
    type_of: for<'tcx> fn(TyCtxt<'tcx>, DefId) -> Ty<'tcx>,
    ...
}
```

----------------------------------------

TITLE: Invalid Optimize Attribute Usage in Rust
DESCRIPTION: Example of incorrect usage of the #[optimize] attribute that results in error E0722 due to invalid argument.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0722.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(optimize_attribute)]

#[optimize(something)] // error: invalid argument
pub fn something() {}
```

----------------------------------------

TITLE: Configuring Rust Build with `./configure` (Shell)
DESCRIPTION: Presents a comprehensive example of using the `./configure` script to generate a `bootstrap.toml` file with specific build settings. This command allows for detailed customization of the target architecture, enabled features (profiler, sanitizers, docs), linker settings, LLVM options, and Rust compiler flags before the build.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_2

LANGUAGE: Shell
CODE:
```
./configure --build=aarch64-unknown-linux-gnu \
   --enable-full-tools \
   --enable-profiler \
   --enable-sanitizers \
   --enable-compiler-docs \
   --set target.aarch64-unknown-linux-gnu.linker=clang \
   --set target.aarch64-unknown-linux-gnu.ar=/rustroot/bin/llvm-ar \
   --set target.aarch64-unknown-linux-gnu.ranlib=/rustroot/bin/llvm-ranlib \
   --set llvm.link-shared=true \
   --set llvm.thin-lto=true \
   --set llvm.libzstd=true \
   --set llvm.ninja=false \
   --set rust.debug-assertions=false \
   --set rust.jemalloc \
   --set rust.use-lld=true \
   --set rust.lto=thin \
   --set rust.codegen-units=1
```

----------------------------------------

TITLE: Demonstrating Stability Attribute Error in Rust
DESCRIPTION: This code snippet demonstrates an erroneous use of the stability attribute outside of the standard library. It illustrates how the compiler will emit an error when attempting to compile such code, indicating that stability attributes are restricted to the standard library scope.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0497.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"#[stable] // error: stability attributes may not be used outside of the\n          //        standard library\nfn foo() {}"
```

----------------------------------------

TITLE: Malformed instruction_set attribute in Rust (E0778)
DESCRIPTION: This example demonstrates an incorrect usage of the instruction_set attribute that triggers error E0778. The attribute is provided with empty parentheses, but it requires a specific instruction set parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0778.md#_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(isa_attribute)]

#[instruction_set()] // error: expected one argument
pub fn something() {}
fn main() {}
```

----------------------------------------

TITLE: Declaring Multiple Stability Attributes - Erroneous Example
DESCRIPTION: This snippet demonstrates an incorrect declaration of multiple stability attributes on a single function item in Rust. It illustrates the compiler error E0544, which arises when more than one stability attribute is applied to the same item. The faulty line is marked for clarity.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0544.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#!['feature(staged_api)']
#!['allow(internal_features)']
#!['stable(since = "1.0.0", feature = "rust1")']

#[stable(feature = "rust1", since = "1.0.0")]
#[stable(feature = "test", since = "2.0.0")] // invalid
fn foo() {}
```

----------------------------------------

TITLE: Overlapping From Implementations Example
DESCRIPTION: Demonstrates trait implementation overlap with a custom error type and different trait implementations
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/coherence.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
struct MyCustomErrorType;

// both in your own crate
impl From<&str> for MyCustomErrorType {}
impl<E> From<E> for MyCustomErrorType where E: Error {}
```

----------------------------------------

TITLE: Parallel Iterators Usage in Rust Compiler - Rust
DESCRIPTION: This section details the usage of parallel iterators through the `rayon` crate in the Rust compiler. Several iterator functions are utilized to execute loops in parallel when the `parallel-compiler` feature is enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/parallel-rustc.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
| Function(Omit `Send` and `Sync`)                             | Introduction                                                 | Owning Module              |
| ------------------------------------------------------------ | ------------------------------------------------------------ | -------------------------- |
| **par_iter**<T: IntoParallelIterator>(t: T) -> T::Iter       | generate a parallel iterator                                 | rustc_data_structure::sync |
| **par_for_each_in**<T: IntoParallelIterator>(t: T, for_each: impl Fn(T::Item)) | generate a parallel iterator and run `for_each` on each element | rustc_data_structure::sync |
| **Map::par_body_owners**(self, f: impl Fn(LocalDefId))       | run `f` on all hir owners in the crate                       | rustc_middle::hir::map     |
| **Map::par_for_each_module**(self, f: impl Fn(LocalDefId))   | run `f` on all modules and submodules in the crate           | rustc_middle::hir::map     |
| **ModuleItems::par_items**(&self, f: impl Fn(ItemId))        | run `f` on all items in the module                           | rustc_middle::hir          |
| **ModuleItems::par_trait_items**(&self, f: impl Fn(TraitItemId)) | run `f` on all trait items in the module                     | rustc_middle::hir          |
| **ModuleItems::par_impl_items**(&self, f: impl Fn(ImplItemId)) | run `f` on all impl items in the module                      | rustc_middle::hir          |
| **ModuleItems::par_foreign_items**(&self, f: impl Fn(ForeignItemId)) | run `f` on all foreign items in the module                   | rustc_middle::hir          |
```

----------------------------------------

TITLE: Using cargo-llvm-lines to profile Rust compiler's LLVM IR generation
DESCRIPTION: Commands to install cargo-llvm-lines, build rustc with saved LLVM IR, convert the bitcode to human-readable format, and analyze line counts. This process helps identify functions generating excessive LLVM IR, which can be targeted for optimization to improve rustc's bootstrap times.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cargo install cargo-llvm-lines
# On a normal crate you could now run `cargo llvm-lines`, but `x` isn't normal :P

# Do a clean before every run, to not mix in the results from previous runs.
./x clean
env RUSTFLAGS=-Csave-temps ./x build --stage 0 compiler/rustc

# Single crate, e.g., rustc_middle. (Relies on the glob support of your shell.)
# Convert unoptimized LLVM bitcode into a human readable LLVM assembly accepted by cargo-llvm-lines.
for f in build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/deps/rustc_middle-*.no-opt.bc; do
  ./build/x86_64-unknown-linux-gnu/llvm/bin/llvm-dis "$f"
done
cargo llvm-lines --files ./build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/deps/rustc_middle-*.ll > llvm-lines-middle.txt

# Specify all crates of the compiler.
for f in build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/deps/*.no-opt.bc; do
  ./build/x86_64-unknown-linux-gnu/llvm/bin/llvm-dis "$f"
done
cargo llvm-lines --files ./build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/deps/*.ll > llvm-lines.txt
```

----------------------------------------

TITLE: Installing RISC-V Toolchain on Ubuntu
DESCRIPTION: Command to install RISC-V cross-compilation toolchain and development libraries
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv64gc-unknown-linux-gnu.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
apt install gcc-riscv64-linux-gnu g++-riscv64-linux-gnu libc6-dev-riscv64-cross
```

----------------------------------------

TITLE: Conditional Error Annotation by Revision (Rust)
DESCRIPTION: Shows how to use `//[revision]~ ERROR` annotations and `//@ revisions` directives to make diagnostic checks conditional on the current test revision. This allows a single test file to verify different compiler outputs under varying configurations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_10

LANGUAGE: Rust
CODE:
```
//@ edition:2018
//@ revisions: mir thir
//@[thir] compile-flags: -Z thir-unsafeck

async unsafe fn f() {}

async fn g() {
    f(); //~ ERROR call to unsafe function is unsafe
}

fn main() {
    f(); //[mir]~ ERROR call to unsafe function is unsafe
}
```

----------------------------------------

TITLE: Struct definition with where clauses in Rust
DESCRIPTION: This code defines a struct `Foo` with a type parameter `T` constrained by a `Bar` trait. This example is used to discuss the relationship between variance of `T` with respect to `Bar` and `T` with respect to `Foo`. The `ignore` attribute suggests the code isn't meant to be compiled directly and is for illustrative purposes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/variance.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```rust,ignore
struct Foo<T: Bar> { ... }
```
```

----------------------------------------

TITLE: Configuring Rust with Target Support - TOML
DESCRIPTION: This snippet shows how to configure the Rust build environment to support the armeb-unknown-linux-gnueabi target by modifying the bootstrap.toml file to specify the compiler and build settings, including setting the target architectures and paths for compilers.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armeb-unknown-linux-gnueabi.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[llvm]
download-ci-llvm = false
optimize = true
ninja = true
targets = "ARM;X86"
clang = false

[build]
target = ["x86_64-unknown-linux-gnu", "armeb-unknown-linux-gnueabi"]
docs = false
docs-minification = false
compiler-docs = false
[install]
prefix = "/home/user/x-tools/rust/"

[rust]
debug-logging=true
backtrace = true
incremental = true

[target.x86_64-unknown-linux-gnu]

[dist]

[target.armeb-unknown-linux-gnueabi]
cc = "/home/user/x-tools/armeb-unknown-linux-gnueabi/bin/armeb-unknown-linux-gnueabi-gcc"
cxx = "/home/user/x-tools/armeb-unknown-linux-gnueabi/bin/armeb-unknown-linux-gnueabi-g++"
ar = "/home/user/x-tools/armeb-unknown-linux-gnueabi/bin/armeb-unknown-linux-gnueabi-ar"
ranlib = "/home/user/x-tools/armeb-unknown-linux-gnueabi/bin/armeb-unknown-linux-gnueabi-ranlib"
linker = "/home/user/x-tools/armeb-unknown-linux-gnueabi/bin/armeb-unknown-linux-gnueabi-gcc"
llvm-config = "/home/user/x-tools/clang/bin/llvm-config"
llvm-filecheck = "/home/user/x-tools/clang/bin/FileCheck"
```

----------------------------------------

TITLE: RPITIT Basic Example in Rust Trait
DESCRIPTION: Example showing how a trait method with an impl Trait return type captures lifetimes
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/return-position-impl-trait-in-trait.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
trait Foo {
    fn method<'early: 'early, 'late, T>() -> impl Sized + Captures<'early, 'late>;
}
```

----------------------------------------

TITLE: MIR representation of if statement
DESCRIPTION: Shows the textual MIR representation of an `if` statement in Rust. The original Rust code is transformed into four basic blocks (BB0, BB1, BB2, BB3) with `goto` statements dictating control flow based on the condition.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/appendix/background.md#2025-04-21_snippet_2

LANGUAGE: mir
CODE:
```
BB0: {
    a = 1;
    if some_variable {
        goto BB1;
    } else {
        goto BB2;
    }
}

BB1: {
    b = 1;
    goto BB3;
}

BB2: {
    c = 1;
    goto BB3;
}

BB3: {
    d = 1;
    ...
}
```

----------------------------------------

TITLE: Testing Rust Binary with QEMU for Armv7
DESCRIPTION: This command provides a script to test cross-compiled Rust binaries using QEMU. It sets environment variables and specifies the runner for QEMU. Requires QEMU and the Tomatoware toolchain to be installed on the host system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabi.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
CC_armv7_unknown_linux_uclibceabi=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \
CXX_armv7_unknown_linux_uclibceabi=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-g++ \
AR_armv7_unknown_linux_uclibceabi=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-ar \
CFLAGS_armv7_unknown_linux_uclibceabi=\"-march=armv7-a -mtune=cortex-a9\" \
CXXFLAGS_armv7_unknown_linux_uclibceabi=\"-march=armv7-a -mtune=cortex-a9\" \
CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABI_LINKER=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \
CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABI_RUNNER=\"qemu-arm-static -L /opt/tomatoware/arm-soft-mmc/arm-tomatoware-linux-uclibcgnueabi/sysroot/\" \
cargo +stage2 \
run \
--target armv7-unknown-linux-uclibceabi \
--release
```

----------------------------------------

TITLE: Bash Script: Rustup Update
DESCRIPTION: This snippet shows a bash command used to update the nightly build of Rustup.  It's a common command for developers using nightly Rust features. The command ensures that the user is using the most recent nightly version.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/xtask/test_data/expected.md#_snippet_1

LANGUAGE: bash
CODE:
```
rustup update nightly
```

----------------------------------------

TITLE: Advanced MIR Cursor Management
DESCRIPTION: Demonstrates advanced cursor management when generating MIR in Rust. It introduces a pattern where a local cursor variable is updated after calling a function that generates MIR, executed through a manual match statement. The cursor represents the state of MIR generation and is updated to point at subsequent instructions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/construction.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
let mut block;
let v = match self.generate_more_mir(..) {
    BlockAnd { block: new_block, value: v } => {
        block = new_block;
        v
    }
};
```

----------------------------------------

TITLE: Configuring Direct Access to External Data in Rust Compiler
DESCRIPTION: This snippet demonstrates the usage of the `-Z direct-access-external-data` option in Rust. It controls whether GOT indirection is used to reference external data symbols. The option accepts 'yes' to disable GOT indirection and 'no' to enable it.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/direct-access-external-data.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `direct_access_external_data`

The tracking issue for this feature is: https://github.com/rust-lang/compiler-team/issues/707

------------------------

Option `-Z direct-access-external-data` controls how to access symbols of
external data.

Supported values for this option are:

- `yes` - Don't use GOT indirection to reference external data symbols.
- `no` - Use GOT indirection to reference external data symbols.

If the option is not explicitly specified, different targets have different
default values.
```

----------------------------------------

TITLE: Testing Debugging Output with LLDB - Rust
DESCRIPTION: This code snippet demonstrates a simple Rust program used to validate the debugging output when using the LLDB debugger. It sets a breakpoint, runs the program, and checks the expected output from the debugger, confirming the value of 'foo'. It requires specific compile flags to generate debug information.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/compiletest.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
//@ compile-flags: -g

//@ lldb-command: run
//@ lldb-command: print foo
//@ lldb-check: $0 = 123

fn main() {
    let foo = 123;
    b(); // #break
}

fn b() {}
```

----------------------------------------

TITLE: Patching crates - Diff
DESCRIPTION: This diff demonstrates how to patch a dependency in Cargo's 'Cargo.toml' to use a specific commit of the libc crate from a Git repository.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/new-target.md#2025-04-21_snippet_5

LANGUAGE: diff
CODE:
```
diff --git a/Cargo.toml b/Cargo.toml
index 1e83f05e0ca..4d0172071c1 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -113,6 +113,8 @@ cargo-util = { path = "src/tools/cargo/crates/cargo-util" }
 [patch.crates-io]
+libc = { git = "https://github.com/rust-lang/libc", rev = "0bf7ce340699dcbacabdf5f16a242d2219a49ee0" }

 # See comments in `src/tools/rustc-workspace-hack/README.md` for what's going on
 # here
 rustc-workspace-hack = { path = 'src/tools/rustc-workspace-hack' }
```

----------------------------------------

TITLE: Invalid Negative Trait Implementation Example in Rust
DESCRIPTION: Demonstrates incorrect usage of negative trait implementation by attempting to add an associated type to a negative impl, which results in error E0749.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0749.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
# #![feature(negative_impls)]
trait MyTrait {
    type Foo;
}

impl !MyTrait for u32 {
    type Foo = i32; // error!
}
```

----------------------------------------

TITLE: Recursive Mode Ignored Dependencies - TOML
DESCRIPTION: Example configuration in a TOML file for using the recursive mode in cargo lintcheck, specifying slow dependencies to be ignored during the lint check.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/lintcheck/README.md#2025-04-21_snippet_6

LANGUAGE: toml
CODE:
```
[crates]
cargo = {name = "cargo", versions = ['0.64.0']}

[recursive]
ignore = [
    "unicode-normalization",
]
```

----------------------------------------

TITLE: Expanded Result of create_some_structs Macro in Rust
DESCRIPTION: This shows the expanded output after the create_some_structs macro is processed. The concat metavariable expressions have been replaced with the concatenated identifiers to create three distinct struct names.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/macro-metavar-expr-concat.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub struct FirstThing;
pub struct SecondThing;
pub struct ThirdThing;
```

----------------------------------------

TITLE: Enabling Rustdoc Example Scraping with Cargo
DESCRIPTION: Command showing how to enable the example scraping feature in Rustdoc using Cargo. This uses unstable options that must be explicitly enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/librustdoc/html/static/scrape-examples-help.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cargo doc -Zunstable-options -Zrustdoc-scrape-examples
```

----------------------------------------

TITLE: Running rustc_codegen_gcc tests
DESCRIPTION: This command runs the `rustc_codegen_gcc` tests using the `./x test` command.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_14

LANGUAGE: text
CODE:
```

./x test compiler/rustc_codegen_gcc/

```

----------------------------------------

TITLE: Creating QEMU Image for Rust Test Environment
DESCRIPTION: Command to generate a QEMU image with sufficient disk space and inode resources for running Rust test suite
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/nto-qnx.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
mkqnximage --type=qemu --ssh-ident=$HOME/.ssh/id_ed25519.pub --data-size=5000 --data-inodes=40000
```

----------------------------------------

TITLE: Platform Check Helpers in Rust Run Make Support
DESCRIPTION: Utility functions for checking platform-specific details and performing cross-platform operations in test environments
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/run-make-support/CHANGELOG.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
// Platform check helper functions
fn is_windows() -> bool;
fn is_msvc() -> bool;
fn cygpath_windows(path: &str) -> String;
fn uname() -> String;
```

----------------------------------------

TITLE: Custom Linker Configuration for SPARC in TOML
DESCRIPTION: This code snippet configures a custom GCC linker for the `sparc-unknown-none-elf` target in a project's `.cargo/config.toml`. This customization is crucial for linking Rust programs correctly for SPARC systems.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/sparc-unknown-none-elf.md#2025-04-21_snippet_2

LANGUAGE: TOML
CODE:
```
[target.sparc-unknown-none-elf]
linker = "sparc-custom-elf-gcc"
```

----------------------------------------

TITLE: Invalid CoercePointee with Multiple Pointee Designations
DESCRIPTION: Example showing error when deriving CoercePointee on a struct with multiple pointee designations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0802.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
#![feature(coerce_pointee)]
use std::marker::CoercePointee;
#[derive(CoercePointee)]
#[repr(transparent)]
struct TooManyPointees<
    'a,
    #[pointee] A: ?Sized,
    #[pointee] B: ?Sized>
((&'a A, &'a B));
```

----------------------------------------

TITLE: Testing wasm32-wasip2 Target
DESCRIPTION: This code snippet shows how to run tests for the wasm32-wasip2 target using the wasmtime binary. It is necessary to have the wasmtime binary in the PATH for testing locally.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wasip2.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
./x.py test --target wasm32-wasip2 tests/ui
```

----------------------------------------

TITLE: Ignoring Line Length in Rust Code
DESCRIPTION: This snippet provides guidance on how to exempt certain lines from the tidy line length check in Rust code by using a specific comment. This is useful for cases where longer lines may be necessary, particularly in tests.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/conventions.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
// ignore-tidy-linelength
```

----------------------------------------

TITLE: Copying Cargo from Nightly Toolchain
DESCRIPTION: Command to copy the cargo binary from the nightly toolchain to the local build directory. This ensures compatibility with the custom-built Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/docs/rustc_testing.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
cp $(rustup +nightly which cargo) ./build/host/stage2/bin/cargo
```

----------------------------------------

TITLE: Compiling Static Libraries for KMC Solid Target
DESCRIPTION: This shell command compiles a Rust program as a static library for the `aarch64-kmc-solid_asp3` target using the `rustc` command. It requires the library artifacts to be available for compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/kmc-solid.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
$ rustc --target aarch64-kmc-solid_asp3 your-code.rs --crate-type staticlib
$ ls libyour_code.a
```

----------------------------------------

TITLE: Setting Interposable Visibility in Rust Compilation
DESCRIPTION: Uses the `-Zdefault-visibility=interposable` flag to set symbols to default visibility, allowing symbol interposition on supported platforms. This enables symbol overriding by the executable or earlier shared objects in the load order.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/default-visibility.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
-Zdefault-visibility=interposable
```

----------------------------------------

TITLE: Setting Up Nix Development Environment
DESCRIPTION: Commands to configure direnv for Nix development environment using either flake or nix-shell.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/suggested.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
ln -s ./src/tools/nix-dev-shell/envrc-flake ./.envrc # Use flake
```

----------------------------------------

TITLE: Setting RUSTC_LOG environment variable to filter query tracing by arguments with regex
DESCRIPTION: This bash command sets the `RUSTC_LOG` environment variable to enable tracing for the `typeck` query, but only when the `key` argument (a LocalDefId) matches the provided regular expression. This allows filtering query executions based on their arguments for more specific debugging.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tracing.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
RUSTC_LOG=[typeck{key=.*name_of_item.*}]
```

----------------------------------------

TITLE: Measure Incremental Analysis Time
DESCRIPTION: These snippets demonstrate how to measure the time it takes for incremental analysis using `cargo run` with the `analysis-bench` subcommand. It includes examples for highlighting and completion operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/README.md#_snippet_8

LANGUAGE: Shell
CODE:
```
$ cargo run --release -p rust-analyzer -- analysis-bench ../chalk/ --highlight ../chalk/chalk-engine/src/logic.rs
```

LANGUAGE: Shell
CODE:
```
$ cargo run --release -p rust-analyzer -- analysis-bench ../chalk/ --complete ../chalk/chalk-engine/src/logic.rs:94:0
```

----------------------------------------

TITLE: Implementing Clippy Lint Documentation in Rust
DESCRIPTION: A template for documenting a Clippy lint with a structured format that explains what the lint does, why the detected pattern is problematic, and provides examples of both code that triggers the lint and improved alternatives.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_15

LANGUAGE: rust
CODE:
```
declare_clippy_lint! {
    /// ### What it does
    /// Checks for ... (describe what the lint matches).
    ///
    /// ### Why is this bad?
    /// Supply the reason for linting the code.
    ///
    /// ### Example
    ///
    /// ```rust,ignore
    /// // A short example of code that triggers the lint
    /// ```
    ///
    /// Use instead:
    /// ```rust,ignore
    /// // A short example of improved code that doesn't trigger the lint
    /// ```
    #[clippy::version = "1.29.0"]
    pub FOO_FUNCTIONS,
    pedantic,
    "function named `foo`, which is not a descriptive name"
}
```

----------------------------------------

TITLE: Declaring Lint Groups
DESCRIPTION: This Rust code snippet illustrates the use of the `add_lint_group!` macro to define a lint group named `nonstandard_style`, which bundles multiple individual lints for unified management. Users can activate the group using attributes in their source code or command-line options. Requires knowledge of the lint macro system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_12

LANGUAGE: rust
CODE:
```
add_lint_group!(sess,
    "nonstandard_style",
    NON_CAMEL_CASE_TYPES,
    NON_SNAKE_CASE,
    NON_UPPER_CASE_GLOBALS);

```

----------------------------------------

TITLE: Usage of Crate Root Lint Levels Command
DESCRIPTION: Demonstrates how to use the rustc command with the crate-root-lint-levels print option alongside the unstable options flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/print-crate-root-lint-levels.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
rustc --print=crate-root-lint-levels -Zunstable-options lib.rs
```

----------------------------------------

TITLE: Testing remote-test-server connection
DESCRIPTION: This command uses `netcat` to test the connection to the `remote-test-server`. It sends the `ping\n` command and expects the response `pong`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_10

LANGUAGE: text
CODE:
```

$ nc $REMOTE_IP 12345
ping
pong

```

----------------------------------------

TITLE: Setting Library Path Environment Variable
DESCRIPTION: Command to configure the library search path for custom LLVM installations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustc-driver/remarks-on-perma-unstable-features.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
export LD_LIBRARY_PATH=/path/to/llvm/lib:$LD_LIBRARY_PATH
```

----------------------------------------

TITLE: No-std Rust Program for SPARC
DESCRIPTION: A `no_std` Rust application example targeting SPARC architecture, using C functions for output. This requires a compatible C environment to interact with the SPARC simulator for console output.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/sparc-unknown-none-elf.md#2025-04-21_snippet_4

LANGUAGE: Rust
CODE:
```
#![no_std]
#![no_main]

extern "C" {
    fn putchar(ch: i32);
    fn _exit(code: i32) -> !;
}

#[no_mangle]
extern "C" fn main() -> i32 {
    let message = "Hello, this is Rust!";
    for b in message.bytes() {
        unsafe {
            putchar(b as i32);
        }
    }
    0
}

#[panic_handler]
fn panic(_panic: &core::panic::PanicInfo) -> ! {
    unsafe {
        _exit(1);
    }
}
```

----------------------------------------

TITLE: Demonstrating Error E0789: Missing stable Attribute with rustc_allowed_through_unstable_modules
DESCRIPTION: This code example demonstrates the incorrect usage that triggers error E0789. The rustc_allowed_through_unstable_modules attribute is applied to a struct without the required stable attribute. This is an internal compiler feature used to allow stable items to "escape" unstable parent modules.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0789.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// NOTE: both of these attributes are perma-unstable and should *never* be
//       used outside of the compiler and standard library.
#![feature(rustc_attrs)]
#![feature(staged_api)]
#![allow(internal_features)]

#![unstable(feature = "foo_module", reason = "...", issue = "123")]

#[rustc_allowed_through_unstable_modules = "deprecation message"]
// #[stable(feature = "foo", since = "1.0")]
struct Foo;
// ^^^ error: `rustc_allowed_through_unstable_modules` attribute must be
//            paired with a `stable` attribute
```

----------------------------------------

TITLE: Specifying MIPS64 OpenWrt Linux MUSL Target in Rust
DESCRIPTION: This code snippet defines the target triple for MIPS64 OpenWrt Linux with MUSL libc. It's used to identify the specific target architecture and environment for cross-compilation in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/mips64-openwrt-linux-musl.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `mips64-openwrt-linux-musl`
```

----------------------------------------

TITLE: Target Specification Identifier
DESCRIPTION: Unique identifier for the RISC-V 32-bit embedded target with support for RV32E, RV32EM, and RV32EMC instruction set architectures
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv32e-unknown-none-elf.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
riscv32{e,em,emc}-unknown-none-elf
```

----------------------------------------

TITLE: Declaring Edition-Gated Lints
DESCRIPTION: This Rust code snippet demonstrates how to declare a lint that changes behavior based on the Rust edition. The `ANONYMOUS_PARAMETERS` lint is set to allow-by-default in the 2015 edition and warn-by-default in the 2018 edition using the `declare_lint!` macro. This technique requires knowledge of Rust editions and lint macros.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
declare_lint! {
    pub ANONYMOUS_PARAMETERS,
    Allow,
    "detects anonymous parameters",
    Edition::Edition2018 => Warn,
}

```

----------------------------------------

TITLE: Using the llvm_module_flag compiler option in Rust
DESCRIPTION: Shows the syntax for the `-Z llvm_module_flag` compiler flag that allows adding custom metadata to the LLVM module flags. It requires specifying a name, type, value, and behavior, with current support limited to u32 values.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/llvm-module-flag.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
-Z llvm_module_flag=<name>:<type>:<value>:<behavior>
```

----------------------------------------

TITLE: Troubleshooting CET-Enabled Builds
DESCRIPTION: This command demonstrates how to compile Rust code with CET protection and enable reporting of non-CET-enabled modules. It uses custom rustc flags and linker arguments to display warnings for modules missing IBT and SHSTK properties.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/cf-protection.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
$ RUSTC_LOG=rustc_codegen_ssa::back::link=info rustc-custom -v -Z cf-protection=full -C link-arg="-Wl,-z,cet-report=warning" -o example example.rs
...
/usr/bin/ld: /.../build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-d73f7266be14cb8b.rlib(std-d73f7266be14cb8b.std.f7443020-cgu.12.rcgu.o): warning: missing IBT and SHSTK properties
```

----------------------------------------

TITLE: Ignore Test Case Conditionally for Miri (Rust)
DESCRIPTION: Shows how to use the `cfg(miri)` conditional compilation flag to apply attributes specifically when running under Miri. The `#[cfg_attr(miri, ignore)]` attribute skips the test if compiled/interpreted by Miri, useful for tests relying on unsupported functionality.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_7

LANGUAGE: Rust
CODE:
```
#[test]
#[cfg_attr(miri, ignore)]
fn does_not_work_on_miri() {
    tokio::run(futures::future::ok::<_, ()>(()));
}
```

----------------------------------------

TITLE: Pushing Changes to rust-lang/rust (Shell)
DESCRIPTION: Runs the `rustc-push` command from the `josh-sync` Rust project to push changes from the guide repository back into the main `rust-lang/rust` repository. This command requires specifying a target `<branch-name>` and your GitHub username (`<gh-username>`) to create a branch in your rustc fork. The created branch can then be used to submit a pull request to `rust-lang/rust`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/README.md#_snippet_5

LANGUAGE: shell
CODE:
```
cargo run --manifest-path josh-sync/Cargo.toml rustc-push <branch-name> <gh-username>
```

----------------------------------------

TITLE: Files Directive Example
DESCRIPTION: Example demonstrating how to use the 'files' directive to verify directory contents matches expected entries.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustdoc-internals/rustdoc-test-suite.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
//@ files "foo/bar" '["index.html", "sidebar-items.js"]'
```

----------------------------------------

TITLE: Rust Diagnostic Structure for Iterator Method Type Mismatch
DESCRIPTION: A structured representation of a Rust compiler diagnostic showing error E0053. The error indicates a type mismatch in the 'next' method implementation for a trait, where the method is implemented with a different signature than what the trait expects.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/rust-analyzer/src/diagnostics/test_data/rustc_incompatible_type_for_trait.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
[
    MappedRustDiagnostic {
        url: Url {
            scheme: "file",
            cannot_be_a_base: false,
            username: "",
            password: None,
            host: None,
            port: None,
            path: "/test/compiler/ty/list_iter.rs",
            query: None,
            fragment: None,
        },
        diagnostic: Diagnostic {
            range: Range {
                start: Position {
                    line: 51,
                    character: 4,
                },
                end: Position {
                    line: 51,
                    character: 47,
                },
            },
            severity: Some(
                Error,
            ),
            code: Some(
                String(
                    "E0053",
                ),
            ),
            code_description: Some(
                CodeDescription {
                    href: Url {
                        scheme: "https",
                        cannot_be_a_base: false,
                        username: "",
                        password: None,
                        host: Some(
                            Domain(
                                "doc.rust-lang.org",
                            ),
                        ),
                        port: None,
                        path: "/error-index.html",
                        query: None,
                        fragment: Some(
                            "E0053",
                        ),
                    },
                },
            ),
            source: Some(
                "rustc",
            ),
            message: "method `next` has an incompatible type for trait\nexpected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\n   found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`",
            related_information: None,
            tags: None,
            data: None,
        },
        fix: None,
    },
]
```

----------------------------------------

TITLE: Rust: Inspecting Dataflow Results with ResultsVisitor
DESCRIPTION: This code snippet illustrates how to inspect the fixpoint state of a dataflow analysis using a `ResultsVisitor`.  It assumes that `MyVisitor` implements the `ResultsVisitor` trait, iterates to fixpoint using `MyAnalysis`, and then visits every location within every block to inspect the state.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/dataflow.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
```rust,ignore
// Assuming `MyVisitor` implements `ResultsVisitor<FlowState = MyAnalysis::Domain>`...
let mut my_visitor = MyVisitor::new();

// inspect the fixpoint state for every location within every block in RPO.
let results = MyAnalysis::new()
    .iterate_to_fixpoint(tcx, body, None);
results.visit_with(body, &mut my_visitor);`
```
```

----------------------------------------

TITLE: Configuring Rust Compiler for OpenBSD Targets in TOML
DESCRIPTION: This configuration snippet in TOML is used to enable OpenBSD targets for a Rust compiler build. It requires specifying the target architecture in the 'build' section and setting the appropriate C compiler for the target in the corresponding target section. The snippet is crucial for both native compilation and cross-compilation using Rust on OpenBSD platforms.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/openbsd.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["$ARCH-unknown-openbsd"]

[target.$ARCH-unknown-openbsd]
cc = "$ARCH-openbsd-cc"
```

----------------------------------------

TITLE: Generating LLVM IR with Autodiff Flag
DESCRIPTION: Command to generate LLVM IR with autodiff flag, capturing module details and enabling debugging
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/debugging.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
rustflags="-z autodiff=enable,printmodbefore" cargo +enzyme build --release &> out.ll
```

----------------------------------------

TITLE: Cross-compiling for LoongArch using QEMU
DESCRIPTION: This Shell script configures the environment for cross-compiling a Rust project targeting `loongarch64-unknown-linux-gnu` from a `x86_64-unknown-linux-gnu` host. It exports necessary environment variables for the LoongArch cross-toolchain and uses QEMU for emulation. Ensure your toolchain and QEMU are correctly installed and configured for this setup.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/loongarch-linux.md#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
# Suppose the cross toolchain is placed at $TOOLCHAIN_PATH, with a cross prefix
# of "loongarch64-unknown-linux-gnu-".
export CC_loongarch64_unknown_linux_gnu="$TOOLCHAIN_PATH"/bin/loongarch64-unknown-linux-gnu-gcc
export CXX_loongarch64_unknown_linux_gnu="$TOOLCHAIN_PATH"/bin/loongarch64-unknown-linux-gnu-g++
export AR_loongarch64_unknown_linux_gnu="$TOOLCHAIN_PATH"/bin/loongarch64-unknown-linux-gnu-gcc-ar
export CARGO_TARGET_LOONGARCH64_UNKNOWN_LINUX_GNU_LINKER="$TOOLCHAIN_PATH"/bin/loongarch64-unknown-linux-gnu-gcc

# Point qemu-loongarch64 to the LoongArch sysroot.
# Suppose the sysroot is located at "sysroot" below the toolchain root:
export CARGO_TARGET_LOONGARCH64_UNKNOWN_LINUX_GNU_RUNNER="qemu-loongarch64 -L $TOOLCHAIN_PATH/sysroot"
# Or alternatively, if binfmt_misc is set up for running LoongArch binaries
# transparently:
export QEMU_LD_PREFIX="$TOOLCHAIN_PATH"/sysroot

cargo run --target loongarch64-unknown-linux-gnu --release
```

----------------------------------------

TITLE: Downloading Popular Crates - Bash
DESCRIPTION: Retrieves the most downloaded crates from crates.io using the cargo lintcheck popular command. The example demonstrates fetching 200 popular crates and saving them to a custom TOML file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/lintcheck/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cargo lintcheck popular -n 200 custom.toml
```

----------------------------------------

TITLE: Using Test Runner Wrapper with rustdoc (Bash)
DESCRIPTION: Illustrates how `--test-runtool` specifies an external program to run doctest executables, optionally passing arguments to it using `--test-runtool-arg`. Examples include using a generic runner or Valgrind.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_15

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --test-runtool path/to/runner --test-runtool-arg --do-thing --test-runtool-arg --do-other-thing
```

LANGUAGE: bash
CODE:
```
$ rustdoc src/lib.rs --test-runtool valgrind
```

----------------------------------------

TITLE: Associated Type Normalization with Cycles
DESCRIPTION: Example of a case where naive coinduction would allow unsound normalization of associated types, requiring special handling for 'normalizes_to' goals.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/coinduction.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
trait Trait {
    type Assoc;
}

impl Trait for () {
    type Assoc = <() as Trait>::Assoc;
}
```

----------------------------------------

TITLE: Configuring Bootstrap for Coverage Instrumentation
DESCRIPTION: TOML configuration settings for enabling profiler runtime and debug assertions in Rust compiler builds
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/llvm-coverage-instrumentation.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
profile = "codegen"

[build]
profiler = true

[rust]
debug-assertions = true
```

----------------------------------------

TITLE: Triggering Performance Test for Existing Build
DESCRIPTION: Command to request a performance test run for an already built artifact using its commit SHA. Cannot be used to benchmark the same artifact multiple times.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/perf.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
@rust-timer build <commit-sha>
```

----------------------------------------

TITLE: Defining Main Void Vector in Rust
DESCRIPTION: This Rust function initializes a vector of unit type and sets it to an empty vector. Useful as a placeholder to track types or define empty structures with specific length expectations. Dependencies include the Rust standard library.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
fn main() {
    let x: Vec<()> = vec![];
}
```

----------------------------------------

TITLE: Inserting Markdown After Content in Standalone File using Rustdoc Bash
DESCRIPTION: Similar to `--markdown-before-content`, this command demonstrates `--markdown-after-content` when processing a standalone Markdown file (`README.md`). The rendered content from `extra.md` is placed after the content generated from `README.md`. Requires the `-Z unstable-options` flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_10

LANGUAGE: bash
CODE:
```
$ rustdoc README.md -Z unstable-options --markdown-after-content extra.md
```

----------------------------------------

TITLE: Compiling Windows Build System
DESCRIPTION: Command to compile the build system on Windows using the custom stage2 rustc. This step is necessary for running the build scripts on Windows platforms.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/docs/rustc_testing.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
rustc +stage2 -O build_system/main.rs -o y.exe
```

----------------------------------------

TITLE: Executing Fake Linker Command in Rust Build
DESCRIPTION: Shows the command executed by the Rust compiler (`rustc`) attempting to link an executable using './fake-linker'. It details the various object files (some omitted), static/dynamic libraries, linker flags (`-m64`, `-Wl,--as-needed`, `-pie`, `-lgcc_s`, etc.), library paths (`-L`), and the output file (`-o main`). The command resulted in an exit status of 1 and a specific error message 'baz'.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/linker-warning/short-error.txt#_snippet_0

LANGUAGE: Shell
CODE:
```
"./fake-linker" "-m64" "/symbols.o" "<2 object files omitted>" "-Wl,--as-needed" "-Wl,-Bstatic" "<sysroot>/lib/rustlib/x86_64-unknown-linux-gnu/lib/{libstd-*,libpanic_unwind-*,libobject-*,libmemchr-*,libaddr2line-*,libgimli-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libminiz_oxide-*,libadler2-*,libunwind-*,libcfg_if-*,liblibc-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib" "-Wl,-Bdynamic" "-lgcc_s" "-lutil" "-lrt" "-lpthread" "-lm" "-ldl" "-lc" "-L" "/raw-dylibs" "-Wl,--eh-frame-hdr" "-Wl,-z,noexecstack" "-L" "/build-root/test/run-make/linker-warning/rmake_out" "-L" "<sysroot>/lib/rustlib/x86_64-unknown-linux-gnu/lib" "-o" "main" "-Wl,--gc-sections" "-pie" "-Wl,-z,relro,-z,now" "-nodefaultlibs"
```

----------------------------------------

TITLE: Implementing the Panic Handler in Standard Library
DESCRIPTION: This snippet shows the implementation of the panic handler in std that receives panic information from core. The function is marked with the #[panic_handler] attribute which connects it to core's panic_impl lang item, allowing panics from core to use std's panic infrastructure.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/panic-implementation.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
/// Entry point of panic from the core crate.
#[cfg(not(test))]
#[panic_handler]
#[unwind(allowed)]
pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {
    ...
}
```

----------------------------------------

TITLE: Running Build Commands with Custom Toolchain
DESCRIPTION: Series of commands to run the build system using the custom stage2 toolchain. These commands prepare, build, and optionally test the Cranelift backend with local rustc changes.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/docs/rustc_testing.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
rustup run stage2 ./y.sh prepare
rustup run stage2 ./y.sh build
rustup run stage2 ./y.sh test
```

----------------------------------------

TITLE: Clang++ Wrapper Script for armv7-unknown-linux-ohos
DESCRIPTION: This shell script wraps the Clang++ compiler from the OpenHarmony SDK for the armv7-unknown-linux-ohos target. It sets the target architecture, sysroot, defines the __MUSL__ macro and specifies ARMv7 architecture options.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/openharmony.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
#!/bin/sh
exec /path/to/ohos-sdk/linux/native/llvm/bin/clang++ \
  -target arm-linux-ohos \
  --sysroot=/path/to/ohos-sdk/linux/native/sysroot \
  -D__MUSL__ \
  -march=armv7-a \
  -mfloat-abi=softfp \
  -mtune=generic-armv7-a \
  -mthumb \
  "$@"
```

----------------------------------------

TITLE: Setting Debug Assertions for Rust Compiler
DESCRIPTION: To enable debug assertions in the Rust compiler, modify the 'bootstrap.toml' configuration. This setting aids in identifying bugs but may slow down fuzzing due to additional processing required per execution.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/fuzzing.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[rust]
debug-assertions = true
```

----------------------------------------

TITLE: Installing Clippy from source with Rust toolchain override - Bash
DESCRIPTION: Command to build Clippy binaries (cargo-clippy and clippy-driver) in release mode and install them into the Rust sysroot bin directory via an unstable cargo option. This installs Clippy into the currently active Rust toolchain override. Subsequent commands show how to run Clippy using the installed toolchain or restore the default Clippy installation if needed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/basics.md#_snippet_3

LANGUAGE: bash
CODE:
```
cargo build --release --bin cargo-clippy --bin clippy-driver -Zunstable-options --out-dir "$(rustc --print=sysroot)/bin"
```

LANGUAGE: bash
CODE:
```
cd my-project
cargo +nightly-2021-07-01 clippy
```

LANGUAGE: bash
CODE:
```
clippy-driver +nightly-2021-07-01 <filename>
```

LANGUAGE: bash
CODE:
```
rustup component remove clippy
rustup component add clippy
```

----------------------------------------

TITLE: Installing QEMU RISC-V Emulator on Ubuntu
DESCRIPTION: Command to install QEMU system emulator for RISC-V 64-bit architecture
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv64gc-unknown-linux-gnu.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
apt install qemu-system-riscv64
```

----------------------------------------

TITLE: Generating MIR for a Simple Rust Program
DESCRIPTION: This snippet demonstrates a simple Rust program that creates a vector and pushes two integers into it. The MIR output for this program can be viewed in the Rust Playground.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/index.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let mut vec = Vec::new();
    vec.push(1);
    vec.push(2);
}
```

----------------------------------------

TITLE: Configuring CodeLLDB for Rust Compiler
DESCRIPTION: This JavaScript snippet represents a launch configuration for using the CodeLLDB extension in VSCode to debug the Rust compiler rustc. Important settings include the program path, the workspace directory, and specifying Rust as the source language. Additional configurations are present for Windows environments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/compiler-debugging.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
{
    "version": "0.2.0",
    "configurations": [
      {
        "type": "lldb",
        "request": "launch",
        "name": "Launch",
        "args": [],  // array of string command-line arguments to pass to compiler
        "program": "${workspaceFolder}/build/host/stage1/bin/rustc",
        "windows": {  // applicable if using windows
            "program": "${workspaceFolder}/build/host/stage1/bin/rustc.exe"
        },
        "cwd": "${workspaceFolder}",  // current working directory at program start
        "stopOnEntry": false,
        "sourceLanguages": ["rust"]
      }
    ]
  }
```

----------------------------------------

TITLE: Defining MSP430 Interrupt Handlers in Rust
DESCRIPTION: This snippet demonstrates how to define an interrupt handler for MSP430 architecture using the "msp430-interrupt" ABI. It shows how to place the handler at the appropriate memory address (using link_section) and how to implement the interrupt handler function with the correct calling convention.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/abi-msp430-interrupt.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(abi_msp430_interrupt)]
#![no_std]

// Place the interrupt handler at the appropriate memory address
// (Alternatively, you can use `#[used]` and remove `pub` and `#[no_mangle]`)
#[link_section = "__interrupt_vector_10"]
#[no_mangle]
pub static TIM0_VECTOR: extern "msp430-interrupt" fn() = tim0;

// The interrupt handler
extern "msp430-interrupt" fn tim0() {
    // ..
}
```

----------------------------------------

TITLE: Example of incorrect intrinsic function with wrong number of type parameters
DESCRIPTION: This snippet demonstrates an erroneous intrinsic function declaration in Rust where two generic parameters are specified for the 'size_of' function, which expects only one. It includes feature flags and intrinsic attributes. The code shows the improper usage that triggers error E0094, indicating a parameter mismatch. Dependencies include the unstable feature 'intrinsics' and internal features, with the main focus on function signature correctness.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0094.md#_snippet_0

LANGUAGE: Rust
CODE:
```
#![feature(intrinsics)]
#![allow(internal_features)]

#[rustc_intrinsic]
fn size_of<T, U>() -> usize; // error: intrinsic has wrong number
                             //        of type parameters
```

----------------------------------------

TITLE: Detecting CET-Enabled ELF Binaries
DESCRIPTION: This command uses the `readelf` utility to check for the presence of IBT and SHSTK tags in an ELF binary, which indicates that it is CET-enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/cf-protection.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
$ readelf -a target/x86_64-unknown-linux-gnu/debug/example | grep feature:
      Properties: x86 feature: IBT, SHSTK
```

----------------------------------------

TITLE: Running Fuchsia UI Tests
DESCRIPTION: Shell command for running the UI test suite on Fuchsia with necessary compiler and linker flags
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_24

LANGUAGE: sh
CODE:
```
( \
    source config-env.sh &&                                                   \
    ./x.py                                                                    \
    --config bootstrap.toml                                                      \
    --stage=2                                                                 \
    test tests/ui                                                             \
    --target x86_64-unknown-fuchsia                                           \
    --run=always                                                              \
    --test-args --target-rustcflags                                           \
    --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/sysroot/lib             \
    --test-args --target-rustcflags                                           \
    --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/lib                     \
    --test-args --target-rustcflags                                           \
    --test-args -Clink-arg=--undefined-version                                \
    --test-args --remote-test-client                                          \
    --test-args src/ci/docker/scripts/fuchsia-test-runner.py                  \
)
```

----------------------------------------

TITLE: Generating Dataflow Graph Visualizations in Rust Compiler
DESCRIPTION: This `#[rustc_mir]` attribute, applied to a function, instructs the compiler to generate Graphviz `.dot` files visualizing the MIR control-flow graph annotated with dataflow analysis results (entry state, gen/kill sets). The value provided is a path suffix, and the compiler prepends the analysis name (e.g., 'maybe_init') to this suffix to create output filenames like `/path/to/maybe_init_suffix.dot` for each active analysis.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/mir-dataflow/README.md#_snippet_3

LANGUAGE: Rust
CODE:
```
#[rustc_mir(borrowck_graphviz_postflow="/path/to/suffix.dot")]
```

----------------------------------------

TITLE: Building Rust Programs for MIPS R6
DESCRIPTION: Uses Cargo to build Rust programs targeting the MIPS R6 architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/mips-release-6.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
cargo build --target mipsisa64r6el-unknown-linux-gnuabi64
```

----------------------------------------

TITLE: Example Code Demonstrating AST vs Type Checking
DESCRIPTION: Example Rust code that illustrates the difference between AST-level checking (syntax only) and type-level checking. This code is syntactically correct but has undefined types and methods.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/lint_passes.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let x = OurUndefinedType;
x.non_existing_method();
```

----------------------------------------

TITLE: Using rustc_layout Attribute in Rust
DESCRIPTION: This Rust code example illustrates using the internal rustc_layout attribute to output the memory layout of a specified type. It requires enabling the rustc_attrs feature gate. The output provides detailed information on fields, ABI, alignment, and size of the specified type or reference.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/compiler-debugging.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
#![feature(rustc_attrs)]

#[rustc_layout(debug)]
type T<'a> = &'a u32;
```

----------------------------------------

TITLE: Invalid CoercePointee without ?Sized Bound
DESCRIPTION: Example showing error when deriving CoercePointee on a struct with a pointee type parameter that isn't marked as ?Sized.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0802.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
#![feature(coerce_pointee)]
use std::marker::CoercePointee;
#[derive(CoercePointee)]
#[repr(transparent)]
struct NoMaybeSized<'a, #[pointee] T> {
    ptr: &'a T,
}
```

----------------------------------------

TITLE: Installing QEMU User Emulation for m68k
DESCRIPTION: Command to install QEMU user emulation package, enabling execution of static m68k binaries on host systems
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-linux-gnu.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
# apt install qemu-user-static
```

----------------------------------------

TITLE: Removing Submodule Git Config (Shell Command)
DESCRIPTION: Deletes the configuration file for a specific submodule from the main repository's internal `.git/modules` directory. This is a manual step suggested for fixing corrupted submodule configurations. Replace `<submodule_path>` with the actual path.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_29

LANGUAGE: console
CODE:
```
rm -rf .git/modules/<submodule_path>/config
```

----------------------------------------

TITLE: Removing Submodule .git Directory (Shell Command)
DESCRIPTION: Deletes the `.git` directory specifically within a submodule's path. This is a manual step suggested for fixing corrupted submodule configurations. Replace `<submodule_path>` with the actual path.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_28

LANGUAGE: console
CODE:
```
rm -rf <submodule_path>/.git
```

----------------------------------------

TITLE: Demonstrating Incorrect Clobber Syntax in LLVM Assembly (Rust)
DESCRIPTION: This code snippet shows an example of incorrectly using braces around a clobber in the `llvm_asm` macro. This syntax is no longer valid and the associated error is no longer emitted by the Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0664.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
llvm_asm!("mov $$0x200, %eax"
          :
          :
          : "{eax}"
         );
```

----------------------------------------

TITLE: Enabling rustdoc-scrape-examples with cargo doc
DESCRIPTION: This command shows how to enable the unstable `rustdoc-scrape-examples` feature when running `cargo doc`. The `-Zunstable-options` flag enables unstable features, and `-Zrustdoc-scrape-examples` specifically enables the example scraping.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/scraped-examples.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
"cargo doc -Zunstable-options -Zrustdoc-scrape-examples"
```

----------------------------------------

TITLE: RPITIT Lifetime Constraints Example
DESCRIPTION: Demonstrates how lifetime constraints are enforced between original and duplicated lifetimes
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/return-position-impl-trait-in-trait.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
trait Foo<'a> {
    fn bar() -> impl Sized + 'a;
}

// Desugars into...

trait Foo<'a> {
    type Gat<'a_duplicated>: Sized + 'a
    where
        'a: 'a_duplicated,
        'a_duplicated: 'a;
    //~^ Specifically, we should be able to assume that the
    // duplicated `'a_duplicated` lifetime always stays in
    // sync with the `'a` lifetime.

    fn bar() -> Self::Gat<'a>;
}
```

----------------------------------------

TITLE: Configuring LoongArch Target in Bootstrap.toml
DESCRIPTION: This TOML snippet shows how to configure the `bootstrap.toml` file to enable building for the `loongarch64-unknown-linux-gnu` target. Ensure LoongArch toolchain binaries are reachable through `$PATH` or specified directly in the file. This configuration is necessary for custom Rust builds targeting LoongArch.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/loongarch-linux.md#2025-04-21_snippet_0

LANGUAGE: TOML
CODE:
```
[build]
target = ["loongarch64-unknown-linux-gnu"]
```

LANGUAGE: TOML
CODE:
```
[target.loongarch64-unknown-linux-gnu]
# Adjust the paths to point at your toolchain
# Suppose the toolchain is placed at /TOOLCHAIN_PATH, and the cross prefix is
# "loongarch64-unknown-linux-gnu-":
cc = "/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-gcc"
cxx = "/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-g++"
ar = "/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-ar"
ranlib = "/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-ranlib"
linker = "/TOOLCHAIN_PATH/bin/loongarch64-unknown-linux-gnu-gcc"
```

----------------------------------------

TITLE: Creating Fuchsia Package Manifest for Cargo
DESCRIPTION: Manifest file specifying package contents for a Cargo-built Rust project.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_10

LANGUAGE: txt
CODE:
```
bin/hello_fuchsia=target/x86_64-unknown-fuchsia/debug/hello_fuchsia
lib/ld.so.1=<SDK_PATH>/arch/x64/sysroot/dist/lib/ld.so.1
lib/libfdio.so=<SDK_PATH>/arch/x64/dist/libfdio.so
meta/package=pkg/meta/package
meta/hello_fuchsia.cm=pkg/meta/hello_fuchsia.cm
```

----------------------------------------

TITLE: Configuring Extended-Sysroot Test Suite in Rust Build System
DESCRIPTION: Configuration section for test suite components that require an extended sysroot. Includes tests for external libraries like rust-random/rand, regex, and portable-simd.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/config.txt#2025-04-21_snippet_3

LANGUAGE: ini
CODE:
```
testsuite.extended_sysroot
test.rust-random/rand
test.regex
test.portable-simd
```

----------------------------------------

TITLE: Configuring Rust Build for mipsel-sony-psx Target
DESCRIPTION: TOML configuration for enabling the mipsel-sony-psx target in a Rust build. This snippet specifies the build stage and target for cross-compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/mipsel-sony-psx.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
target = ["mipsel-sony-psx"]
```

----------------------------------------

TITLE: Using fixed-x18 flag with shadow-call-stack sanitizer in Rust on aarch64
DESCRIPTION: Example showing how to use the `-Zfixed-x18` flag alongside the shadow call stack sanitizer on aarch64 targets. This ensures the x18 register is reserved for the shadow stack pointer, which is essential for the sanitizer to work correctly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/fixed-x18.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
-Zsanitizer=shadow-call-stack -Zfixed-x18
```

----------------------------------------

TITLE: Declaring Feature-Gated Lints
DESCRIPTION: This Rust snippet shows how to declare a lint that is gated by a feature. The `SOME_LINT_NAME` lint is declared with the `declare_lint!` macro and includes a feature gate definition. Activation of the lint depends on whether the specified feature is enabled, requiring a feature flag configuration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
declare_lint! {
    pub SOME_LINT_NAME,
    Warn,
    "a new and useful, but feature gated lint",
    @feature_gate = sym::feature_name;
}

```

----------------------------------------

TITLE: Handling Float Literal with Missing Exponent Digits in Rust Lexer
DESCRIPTION: Demonstrates the Rust lexer's behavior when encountering a valid floating-point part (`42.2`) followed by an exponent symbol (`e` or `E`) and an optional sign (`+` or `-`) but lacking the necessary digits after the exponent. This results in a `FLOAT_NUMBER` token with an error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_exponent.txt#_snippet_3

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "42.2e+" error: Missing digits after the exponent symbol
```

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "42.2e-" error: Missing digits after the exponent symbol
```

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "42.2E+" error: Missing digits after the exponent symbol
```

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "42.2E-" error: Missing digits after the exponent symbol
```

----------------------------------------

TITLE: Finding Clippy Commit in Rust Repo - Bash
DESCRIPTION: This command sequence, executed within the Rust repository, retrieves the commit hash of the last Clippy sync for a given branch (`stable`, `beta`, or `master`).  It switches to the specified branch, then uses `git log`, `grep`, `head`, and `sed` to extract the commit hash from the merge commit message related to `src/tools/clippy/`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/release.md#_snippet_3

LANGUAGE: bash
CODE:
```
git switch <branch>
SHA=$(git log --oneline -- src/tools/clippy/ | grep -o "Merge commit '[a-f0-9]*' into .*" | head -1 | sed -e "s/Merge commit '\([a-f0-9]*\)' into .*/\1/g")
```

----------------------------------------

TITLE: Creating Config Extensions in TOML
DESCRIPTION: This TOML file defines a configuration extension for bootstrapping Rust projects. It specifies build, host, and target settings and sets LLVM options. The file is intended for inclusion in another TOML configuration to manage different build configurations. No external dependencies are needed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/suggested.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build = "x86_64-unknown-linux-gnu"
host = ["i686-unknown-linux-gnu"]
target = ["i686-unknown-linux-gnu"]


[llvm]
download-ci-llvm = false

[target.x86_64-unknown-linux-gnu]
llvm-config = "/path/to/llvm-19/bin/llvm-config"
```

----------------------------------------

TITLE: Running Cargo with GCC Codegen
DESCRIPTION: Command to run a Cargo project using the GCC codegen backend in release mode.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
$ CHANNEL="release" $CG_GCCJIT_DIR/y.sh cargo run
```

----------------------------------------

TITLE: Contributing Documentation Links in Markdown
DESCRIPTION: Reference links section in markdown format defining important URLs for Rust project documentation, communication channels, and bug reporting resources.
SOURCE: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/
[std-dev-guide]: https://std-dev-guide.rust-lang.org/
[contributing-bug-reports]: https://rustc-dev-guide.rust-lang.org/contributing.html#bug-reports
[issue template]: https://github.com/rust-lang/rust/issues/new/choose
[internals]: https://internals.rust-lang.org
[rust-discord]: http://discord.gg/rust-lang
[rust-zulip]: https://rust-lang.zulipchat.com
```

----------------------------------------

TITLE: Parsing Raw Identifier Token in Rust
DESCRIPTION: This snippet defines the token type 'IDENT' with the value 'r#raw_ident' to represent a raw identifier in Rust syntax parsing. It also includes a whitespace character, typically used in tokenization or lexing processes, to handle formatting in the source code. The snippet illustrates how raw identifiers are marked and distinguished during parsing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/raw_ident.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
IDENT "r#raw_ident"\nWHITESPACE "\n"
```

----------------------------------------

TITLE: Generated PTX Assembly for Rust Functions
DESCRIPTION: Shows the PTX assembly output generated by the Rust compiler for both global and device functions. Global functions use the .visible .entry directive, while device functions use the .visible .func directive.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/abi-ptx.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
//
// Generated by LLVM NVPTX Back-End
//

.version 3.2
.target sm_20
.address_size 64

        // .globl       _ZN6kernel15global_function17h46111ebe6516b382E

.visible .entry _ZN6kernel15global_function17h46111ebe6516b382E()
{


        ret;
}

        // .globl       _ZN6kernel15device_function17hd6a0e4993bbf3f78E
.visible .func _ZN6kernel15device_function17hd6a0e4993bbf3f78E()
{


        ret;
}
```

----------------------------------------

TITLE: Pattern Matching in Arrays with Rust Macros
DESCRIPTION: Demonstrates a conceptual approach for matching array patterns using Rust macros, discussing possible matches and handling multiple matches within array expressions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_13

LANGUAGE: rust
CODE:
```
pattern!{
    my_pattern: Expr =
        Array( _* Lit(_)+#literals)
}
```

----------------------------------------

TITLE: Running Local CI Job with citool
DESCRIPTION: Command to execute a specific CI job locally using the citool Rust crate
SOURCE: https://github.com/rust-lang/rust/blob/master/src/ci/docker/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cargo run --manifest-path src/ci/citool/Cargo.toml run-local <job-name>
```

----------------------------------------

TITLE: Building and Running opt-dist Tool
DESCRIPTION: The bash commands demonstrate how to build and run the `opt-dist` tool in a local environment for profile-guided optimization (PGO) and post-link binary optimization (BOLT) of the Rust compiler. It includes building the tool and executing it with specific parameters such as target, checkout, and LLVM directories.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/optimized-build.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
./x build tools/opt-dist
```

LANGUAGE: bash
CODE:
```
./build/host/stage0-tools-bin/opt-dist local \
  --target-triple <target> \ # select target, e.g. "x86_64-unknown-linux-gnu"
  --checkout-dir <path>    \ # path to rust checkout, e.g. "."
  --llvm-dir <path>        \ # path to built LLVM toolchain, e.g. "/foo/bar/llvm/install"
  -- python3 x.py dist
```

----------------------------------------

TITLE: Defining LateLintPass Trait in Rust
DESCRIPTION: Basic definition of the LateLintPass trait used for implementing lint passes in Clippy.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/emitting_lints.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub trait LateLintPass<'tcx>: LintPass {
    // Trait methods
}
```

----------------------------------------

TITLE: Tokenizing Integer, Dot, and Non-Numeric Exponent Parts in Rust Lexer
DESCRIPTION: Shows how the Rust lexer tokenizes sequences like `integer.e+` or `integer.E-` when they don't form a valid floating-point literal. Instead of a single number token, it produces separate tokens for the integer (`INT_NUMBER`), dot (`DOT`), identifier (`IDENT` for 'e'/'E'), and operator (`PLUS`/`MINUS`).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_exponent.txt#_snippet_2

LANGUAGE: Lexer Output Block
CODE:
```
INT_NUMBER "42"
DOT "."
IDENT "e"
PLUS "+"
```

LANGUAGE: Lexer Output Block
CODE:
```
INT_NUMBER "42"
DOT "."
IDENT "e"
MINUS "-"
```

LANGUAGE: Lexer Output Block
CODE:
```
INT_NUMBER "42"
DOT "."
IDENT "E"
PLUS "+"
```

LANGUAGE: Lexer Output Block
CODE:
```
INT_NUMBER "42"
DOT "."
IDENT "E"
MINUS "-"
```

----------------------------------------

TITLE: Registering rust-analyzer with vim-lsp
DESCRIPTION: This Vim script snippet registers the `rust-analyzer` binary with the vim-lsp plugin, allowing it to be used as the language server for Rust files.  It checks if the binary is executable and then registers the server with its name, command, and whitelist of file types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/other_editors.md#_snippet_6

LANGUAGE: Vim Script
CODE:
```
if executable('rust-analyzer')
  au User lsp_setup call lsp#register_server({
        \   'name': 'Rust Language Server',
        \   'cmd': {server_info->['rust-analyzer']},
        \   'whitelist': ['rust'],
        \ })
endif
```

----------------------------------------

TITLE: Rust: Transmute Dataflow Analysis Example
DESCRIPTION: This code demonstrates a simplified dataflow analysis to detect potential `mem::transmute` calls. It illustrates how to define the analysis domain (a boolean indicating if `transmute` has been called), the bottom and top values, and the join operator (boolean OR) to conservatively approximate the analysis result.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/dataflow.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
```rust
# unsafe fn example(some_cond: bool) {
let x = if some_cond {
    std::mem::transmute::<i32, u32>(0_i32) // transmute was called!
} else {
    1_u32 // transmute was not called
};

// Has transmute been called by this point? We conservatively approximate that
// as yes, and that is why we use the OR operator.
println!("x: {}", x);
# }
```
```

----------------------------------------

TITLE: Modifying CI Jobs Configuration in YAML
DESCRIPTION: Example showing how to modify the PR section of jobs.yml to include additional CI jobs, specifically adding x86_64-msvc Windows testing configuration. Demonstrates proper YAML structure and inheritance using anchors.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ci.md#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
pr:
  ...
  - image: x86_64-gnu-tools
    <<: *job-linux-16c
  # this item was copied from the `auto` section
  # vvvvvvvvvvvvvvvvvv
  - image: x86_64-msvc
    env:
      RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler
      SCRIPT: make ci-msvc
    <<: *job-windows-8c
```

----------------------------------------

TITLE: Enabling Sanitizers in Rust Build Configuration
DESCRIPTION: This TOML configuration enables building sanitizer runtime libraries as part of the Rust compiler build process. It is added to the bootstrap.toml file to include sanitizers in the build.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/sanitizers.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
sanitizers = true
```

----------------------------------------

TITLE: Defining Struct FileSymbols in Rust
DESCRIPTION: Represents file-level symbol definitions with complex metadata including struct IDs, declaration locations, and symbol attributes
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_doc_alias.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
FileSymbol {
    name: "Struct",
    def: Adt(Struct(Struct { id: StructId(0) })),
    loc: DeclarationLocation { ... },
    container_name: None,
    is_alias: false,
    is_assoc: false
}
```

----------------------------------------

TITLE: Annotating Error Below Line (Rust)
DESCRIPTION: Illustrates using the `//~^` idiom below the error line. The number of carets (`^`) indicates how many lines above the annotation the expected diagnostic appears. Useful when placing annotations away from cluttered code lines.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_4

LANGUAGE: Rust
CODE:
```
fn main() {
    let x = (1, 2, 3);
    match x {
        (_a, _x @ ..) => {}  // <- the error is on this line
        _ => {}
    }
}
//~^^^^ ERROR `_x @` is not allowed in a tuple
```

----------------------------------------

TITLE: Checking if a Type Defines a Specific Method in Rustc Lint Impl Item - Rust
DESCRIPTION: Illustrates checking that a type implementation defines a method with a specific name (`some_method`) during the `check_impl_item` lint pass. It checks the item kind is a function, method signature includes an implicit self parameter, and optionally verifies the method's return type (e.g., returns `String`). This uses Clippy utilities such as `is_type_lang_item` and `return_ty`. The snippet demonstrates detailed inspection of impl items within Rustc internals.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/common_tools_writing_lints.md#_snippet_4

LANGUAGE: rust
CODE:
```
use clippy_utils::ty::is_type_lang_item;
use clippy_utils::{sym, return_ty};

impl<'tcx> LateLintPass<'tcx> for MyTypeImpl {
    fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {
        // Check if item is a method/function
        if let ImplItemKind::Fn(ref signature, _) = impl_item.kind
            // Check the method is named `some_method`
            //
            // Add `some_method` to `clippy_utils::sym` if it's not already there
            && impl_item.ident.name == sym::some_method
            // We can also check it has a parameter `self`
            && signature.decl.implicit_self.has_implicit_self()
            // We can go further and even check if its return type is `String`
            && is_type_lang_item(cx, return_ty(cx, impl_item.hir_id), LangItem::String)
        {
            // ...
        }
    }
}
```

----------------------------------------

TITLE: Using rustc_driver::run_compiler in Rust
DESCRIPTION: The main entry point of rustc_driver, which accepts command-line args, Callbacks implementation, and other options to run the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustc-driver/intro.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
rustc_driver::run_compiler
```

----------------------------------------

TITLE: Defining Assembly Source Files
DESCRIPTION: This CMake command sets the variable `ASM_SOURCES` to a list of Assembly source files. These files will be assembled as part of the project.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/CMakeLists.txt#_snippet_5

LANGUAGE: CMake
CODE:
```
set(ASM_SOURCES
    src/foo_asm.s
    )
```

----------------------------------------

TITLE: Demonstrating Trait Implementation Symbol Mangling in Rust
DESCRIPTION: Shows how a trait implementation for a struct is mangled, including the trait-impl indicator, impl path, Self type, and trait path.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
struct Example;
trait Trait {
    fn foo();
}
impl Trait for Example {
    fn foo() {}
}
```

LANGUAGE: text
CODE:
```
_RNvXCs15kBYyAo9fc_7mycrateNtB2_7ExampleNtB2_5Trait3foo
    │└─────────┬──────────┘└─────┬─────┘└────┬────┘
    │          │                 │           │
    │          │                 │           └── path to the trait "Trait"
    │          │                 └────────────── Self type "Example"
    │          └──────────────────────────────── path to the impl's parent "mycrate"
    └─────────────────────────────────────────── trait-impl
```

----------------------------------------

TITLE: Documenting Internal Windows Handle Feature in Rust
DESCRIPTION: This markdown snippet documents the 'windows_handle' feature, indicating that it is an internal feature of the Rust compiler and not intended for general use. It serves as a warning or notice to developers who might encounter this feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/windows-handle.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `windows_handle`

This feature is internal to the Rust compiler and is not intended for general use.
```

----------------------------------------

TITLE: Publishing Fuchsia Package to Repository
DESCRIPTION: Command to publish the Fuchsia package to the created repository.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_15

LANGUAGE: sh
CODE:
```
${SDK_PATH}/tools/${ARCH}/ffx repository publish \
    --package pkg/hello_fuchsia_package_manifest \
    pkg/repo
```

----------------------------------------

TITLE: Implementing IsMatch for Lit
DESCRIPTION: Illustrates an implementation of the IsMatch trait for the Lit enum to match against ast::LitKind nodes, using Rust's match statement. Relies on the Rust AST framework.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
impl IsMatch<ast::LitKind> for Lit {
    fn is_match(&self, other: &ast::LitKind) -> bool {
        match (self, other) {
            (Lit::Char(i), ast::LitKind::Char(j)) => i.is_match(j),
            (Lit::Bool(i), ast::LitKind::Bool(j)) => i.is_match(j),
            (Lit::Int(i), ast::LitKind::Int(j, _)) => i.is_match(j),
            _ => false,
        }
    }
}
```

----------------------------------------

TITLE: Implementing TrustZone-M Secure Entry Function in Rust
DESCRIPTION: Example of creating a secure entry function using the C-cmse-nonsecure-entry ABI. The function takes a u32 parameter and returns a u32 value. This implementation demonstrates proper usage of the feature flag and required attributes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/cmse-nonsecure-entry.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![no_std]
#![feature(cmse_nonsecure_entry)]

#[no_mangle]
pub extern "C-cmse-nonsecure-entry" fn entry_function(input: u32) -> u32 {
    input + 6
}
```

----------------------------------------

TITLE: Adding Extra Filename Data in Rust
DESCRIPTION: Allows adding extra data to the output filename. It takes a string, to be added as a suffix. See the [`--emit` flag] for more information.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_10



----------------------------------------

TITLE: Using noprelude option with --extern flag in Rust
DESCRIPTION: This example demonstrates how to use the noprelude option with the --extern flag to use a custom build of the core crate. The -Z unstable-options flag is required as this is an unstable feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/extern-options.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
rustc main.rs -Z unstable-options --extern noprelude:core=libcore.rlib
```

----------------------------------------

TITLE: Invalid Issue Value in Stability Attributes (Rust)
DESCRIPTION: Example of code that will fail to compile due to invalid '0' values in the 'issue' field of stability attributes for both regular and const functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0545.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(staged_api)]
#![allow(internal_features)]
#![stable(since = "1.0.0", feature = "test")]

#[unstable(feature = "_unstable_fn", issue = "0")] // invalid
fn _unstable_fn() {}

#[rustc_const_unstable(feature = "_unstable_const_fn", issue = "0")] // invalid
const fn _unstable_const_fn() {}
```

----------------------------------------

TITLE: Linking for Arm64EC Target
DESCRIPTION: Linker command for creating Arm64EC compatible binaries using the link tool with ARM64EC machine specification
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/arm64ec-pc-windows-msvc.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
link /MACHINE:ARM64EC ...
```

----------------------------------------

TITLE: Type-Checking Non-Generic Function - Rust
DESCRIPTION: This snippet illustrates a simple function in Rust, `foo()`, which calls another function `bar()`, representing type-checking through a well-formed predicate.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/lowering-to-logic.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn foo() { bar::<usize>() }
fn bar<U: Eq<U>>() { }
```

----------------------------------------

TITLE: Creating xwin-clang-cl Script for Cross-Compilation
DESCRIPTION: This bash script configures clang-cl to use the Windows SDK include directories for cross-compilation. It sets the target to x86_64-pc-windows-msvc.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/win7-windows-msvc.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash
set -e
XWIN=/path/to/winsdk
clang-cl /imsvc "$XWIN/crt/include" /imsvc "$XWIN/sdk/include/ucrt" /imsvc "$XWIN/sdk/include/um" /imsvc "$XWIN/sdk/include/shared" --target="x86_64-pc-windows-msvc" "$@"
```

----------------------------------------

TITLE: Demonstrating Malformed Inline Assembly in Rust (Deprecated)
DESCRIPTION: This code snippet shows an example of malformed inline assembly that would have previously triggered an LLVM rejection. The error occurs due to a missing closing bracket in the register constraint.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0668.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(llvm_asm)]

fn main() {
    let rax: u64;
    unsafe {
        llvm_asm!("" :"={rax"(rax));
        println!("Accumulator is: {}", rax);
    }
}
```

----------------------------------------

TITLE: Invalid Intrinsic Function Declaration in Rust
DESCRIPTION: Example of an incorrect intrinsic function declaration that results in compilation error E0093. Shows what happens when declaring an unrecognized intrinsic function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0093.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(intrinsics)]
#![allow(internal_features)]

#[rustc_intrinsic]
unsafe fn foo(); // error: unrecognized intrinsic function: `foo`

fn main() {
    unsafe {
        foo();
    }
}
```

----------------------------------------

TITLE: WASI Group Command Reference
DESCRIPTION: Commands and references for interacting with the WASI notification group, including the ping command for rustbot and relevant GitHub label.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/wasi.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
@rustbot ping wasi
```

----------------------------------------

TITLE: Exporting Profiling Data to Chromium Format
DESCRIPTION: Shows how to convert rustc profiling data to Chromium-profiler compatible format using the crox tool from measureme.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/self-profile.md#2025-04-21_snippet_3

LANGUAGE: console
CODE:
```
$ ../measureme/target/release/crox foo-1234
```

----------------------------------------

TITLE: Defining Crate Metadata for Panic Unwind - Rust
DESCRIPTION: Defines the `CrateData` structure for the `panic_unwind` crate (index 3). It specifies the Rust edition (`Edition2021`) and standard compiler configuration flags (`debug_assertions`, `miri`, `true`), with no dependencies listed. This crate provides the `panic!` implementation that unwinds the stack.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_cfg_groups.txt#_snippet_3

LANGUAGE: Rust
CODE:
```
3: CrateData {
    root_file_id: FileId(
        4,
    ),
    edition: Edition2021,
    version: None,
    display_name: Some(
        CrateDisplayName {
            crate_name: CrateName(
                "panic_unwind",
            ),
            canonical_name: "panic_unwind",
        },
    ),
    cfg_options: CfgOptions(
        [
            "debug_assertions",
            "miri",
            "true",
        ],
    ),
    potential_cfg_options: None,
    env: Env {
        entries: {},
    },
    dependencies: [],
    origin: Lang(
        Other,
    ),
    is_proc_macro: false,
    proc_macro_cwd: None,
}
```

----------------------------------------

TITLE: Subtyping Relationships in Rust Functions
DESCRIPTION: This snippet exemplifies replacing bound regions with placeholders in a subtyping relationship within Rust's type system. This is done to analyze function types across different lifetimes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/placeholders_and_universes.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
for<'a> fn(&'a u32, &'a u32)
    <: for<'b, 'c> fn(&'b u32, &'c u32)
```

----------------------------------------

TITLE: Emit MIR Before a Specific Optimization - Rust
DESCRIPTION: This code snippet emits the MIR state before a specific optimization pass is executed. The output is saved to the specified `.before.mir` file. Although available, it is less frequently used compared to emitting the diff or the 'after' state.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/mir-opt/README.md#_snippet_4

LANGUAGE: Rust
CODE:
```
// EMIT_MIR $file_name_of_some_mir_dump.before.mir
```

----------------------------------------

TITLE: Example output of supported crate types for x86_64-unknown-linux-gnu
DESCRIPTION: Sample output showing the supported crate types for the x86_64-unknown-linux-gnu target. The output is a newline-delimited list of crate type strings that correspond to values accepted by the `--crate-type` flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/print-supported-crate-types.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
bin
cdylib
dylib
lib
proc-macro
rlib
staticlib
```

----------------------------------------

TITLE: Installing Windows Dependencies with winget (PowerShell)
DESCRIPTION: Provides PowerShell commands utilizing the `winget` package manager to install essential dependencies for building Rust on Windows. This snippet demonstrates installing Python 3, CMake, and Git using `winget install` with the `-e` flag for exact matching.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_7

LANGUAGE: PowerShell
CODE:
```
winget install -e Python.Python.3
winget install -e Kitware.CMake
winget install -e Git.Git
```

----------------------------------------

TITLE: Configuring Cargo for Hexagon Target
DESCRIPTION: This TOML snippet configures `.cargo/config` to build Rust programs for the Hexagon Linux target. It sets the linker and runner for executing compiled binaries using QEMU.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/hexagon-unknown-linux-musl.md#2025-04-21_snippet_3

LANGUAGE: toml
CODE:
```
[build]
target = "hexagon-unknown-linux-musl"

[target.hexagon-unknown-linux-musl]
linker = "hexagon-unknown-linux-musl-clang"
ar = "hexagon-unknown-linux-musl-ar"
runner = "qemu-hexagon -L /opt/clang+llvm-18.1.0-cross-hexagon-unknown-linux-musl/x86_64-linux-gnu/target/hexagon-unknown-linux-musl/usr"
```

----------------------------------------

TITLE: Watching Fuchsia Emulator Logs
DESCRIPTION: Command to watch logs from the Fuchsia emulator.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_17

LANGUAGE: sh
CODE:
```
${SDK_PATH}/tools/${ARCH}/ffx log \
    --since now
```

----------------------------------------

TITLE: Obtaining Address Using `addr_of!(v).addr()` in Rust
DESCRIPTION: This snippet utilizes the `addr_of!` macro combined with `.addr()` to retrieve the address of `v` as a `usize`. It preserves the honest provenance of the address within Rust's safety system yet can lead to situations where addresses are equal in value but originate from distinct allocations, causing logical ambiguities. Dependencies include the `addr_of!` macro available in Rust nightly or with unstable features.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/codegen/equal-pointers-unequal/README.md#_snippet_1

LANGUAGE: Rust
CODE:
```
addr_of!(v).addr()
```

----------------------------------------

TITLE: Rust Compiler Error: Missing Trailing Quote in Byte Literal
DESCRIPTION: This error indicates that a byte literal (denoted by `b'...'`) is missing its closing single quote. The Rust compiler requires that all byte literals be properly terminated to be parsed correctly. The user needs to add the missing quote to resolve the error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_with_slash.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"BYTE \"b'\\\" error: Missing trailing `'` symbol to terminate the byte literal"
```

----------------------------------------

TITLE: Invalid Crate Metadata Example in Rust
DESCRIPTION: Demonstrates a code example that would trigger an invalid metadata error when attempting to use an external crate with corrupted metadata files.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0786.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use ::foo; // error: found invalid metadata files for crate `foo`
```

----------------------------------------

TITLE: Registering Configurable Lint Pass in Clippy
DESCRIPTION: Code comparison showing how to modify the lint registration to pass the configuration values to the lint implementation struct constructor.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_20

LANGUAGE: rust
CODE:
```
// Default generated registration:
store.register_*_pass(|| box module::StructName);

// New registration with configuration value
store.register_*_pass(move || box module::StructName::new(conf));
```

----------------------------------------

TITLE: Linking Custom Rust Toolchain with Rustup (Shell)
DESCRIPTION: Links the built Rust toolchain located at `build/host/stage1` as `enzyme` using `rustup toolchain link`. It also installs the standard `nightly` toolchain to enable `-Z unstable-options` required for some experimental features.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/installation.md#_snippet_2

LANGUAGE: shell
CODE:
```
rustup toolchain link enzyme build/host/stage1
rustup toolchain install nightly # enables -Z unstable-options
```

----------------------------------------

TITLE: Fetching Clippy Upstream in Rust Repository
DESCRIPTION: Command to fetch the latest changes from the Clippy upstream master branch in the Rust repository.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/backport.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
git fetch clippy-upstream master
```

----------------------------------------

TITLE: Invalid C-cmse-nonsecure-call Function with Alignment Issues
DESCRIPTION: Example demonstrating alignment constraints where a u64 argument consumes two registers (r2 and r3), leaving no space for the final f32 argument.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0798.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(abi_c_cmse_nonsecure_call)]

#[no_mangle]
pub fn test(
    f: extern "C-cmse-nonsecure-call" fn(u32, u64, f32) -> u32,
) -> u32 {
    f(1, 2, 3.0)
}
```

----------------------------------------

TITLE: Rust function with existential quantification
DESCRIPTION: Demonstrates existential quantification in Rust, where the function is well-typed if there exists a type `T` that satisfies certain conditions. In this example, there must exist a type `T` that implements the `Debug` trait for the function to be well-typed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/appendix/background.md#2025-04-21_snippet_5

LANGUAGE: rust,ignore
CODE:
```
fn foo(_: dyn Debug)
```

----------------------------------------

TITLE: Adding target to bootstrap - Diff
DESCRIPTION: This diff snippet illustrates how to add the new target triple to the 'STAGE0_MISSING_TARGETS' list in the Rust bootstrap sanity check to recognize the new target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/new-target.md#2025-04-21_snippet_4

LANGUAGE: diff
CODE:
```
const STAGE0_MISSING_TARGETS: &[&str] = &[
+   "NEW_TARGET_TRIPLE"
];
```

----------------------------------------

TITLE: Disabled Merge Derives in Rust
DESCRIPTION: Demonstrates the merge_derives setting set to false, which keeps derive attributes separate based on how they were originally grouped.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_49

LANGUAGE: rust
CODE:
```
#[derive(Eq, PartialEq, Debug, Copy, Clone)]
pub enum Bar {}

#[derive(Eq, PartialEq)]
#[derive(Debug)]
#[derive(Copy, Clone)]
pub enum Foo {}
```

----------------------------------------

TITLE: Configuring and Installing Rust with Make (Shell)
DESCRIPTION: Shows the alternative build process using the traditional `configure` script followed by `make` and `sudo make install`. The `configure` step generates `bootstrap.toml`, and `make` internally invokes `x.py` to perform the build and installation.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_6

LANGUAGE: Shell
CODE:
```
./configure
make && sudo make install
```

----------------------------------------

TITLE: Expanded Result of make_getter Macro in Rust
DESCRIPTION: This shows the expanded output of the make_getter macro. The concat metavariable expression has been replaced with the concatenated identifier 'get_description' to create a getter method for the description field.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/macro-metavar-expr-concat.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
pub struct Thing {
    description: String,
}

impl Thing {
    pub fn get_description(&self) -> &String {
        &self.description
    }
}
```

----------------------------------------

TITLE: Comparing Git Commit Ranges (Short Form) (Console)
DESCRIPTION: A shorthand version of `git range-diff master @{upstream} HEAD`. Compares the changes between the state of your branch on the remote (`@{u}`) and the current local state (`HEAD`), relative to the common base (`master`).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_19

LANGUAGE: console
CODE:
```
git range-diff master @{u} HEAD
```

----------------------------------------

TITLE: Advanced #[rustc_on_unimplemented] with Multiple Error Components
DESCRIPTION: Shows how to customize different parts of the error message including the main message, label, and additional note using the #[rustc_on_unimplemented] attribute.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_17

LANGUAGE: rust
CODE:
```
#[rustc_on_unimplemented(
    message="message",
    label="label",
    note="note"
)]
trait MyIterator<A> {
    fn next(&mut self) -> A;
}
```

----------------------------------------

TITLE: Declaring Macro in Rust
DESCRIPTION: In this snippet, a macro named 'Macro' is defined with details about its declaration and location. As a macro, this allows for metaprogramming capabilities in Rust, influencing code generation patterns.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_5

LANGUAGE: Rust
CODE:
```
FileSymbol {
    name: "Macro",
    def: Macro(
        Macro {
            id: Macro2Id(
                Macro2Id(
                    0,
                ),
            ),
        },
    ),
    loc: DeclarationLocation {
        hir_file_id: EditionedFileId(
            FileId(
                0,
            ),
            Edition2021,
        ),
        ptr: SyntaxNodePtr {
            kind: MACRO_DEF,
            range: 153..168,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 159..164,
            },
        ),
    },
    container_name: None,
    is_alias: false,
    is_assoc: false,
}
```

----------------------------------------

TITLE: Building Rust Programs for SPARC
DESCRIPTION: This command builds a Rust project with the specified SPARC target using Cargo. It requires a cross-compilation toolchain compatible with SPARC.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/sparc-unknown-none-elf.md#2025-04-21_snippet_1

LANGUAGE: Console
CODE:
```
cargo build --target sparc-unknown-none-elf
```

----------------------------------------

TITLE: Configuring LLVM Instruction Set in Bootstrap
DESCRIPTION: Through the use of `cxxflags` and `cflags` options in `bootstrap.toml`, this snippet specifies an instruction set architecture (ISA) for compiling LLVM to `x86-64-v3`. This customization enhances performance on compatible hardware by utilizing specific instructions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/optimized-build.md#2025-04-21_snippet_4

LANGUAGE: toml
CODE:
```
[llvm]
cxxflags = "-march=x86-64-v3"
cflags = "-march=x86-64-v3"
```

----------------------------------------

TITLE: Installing QEMU for s390x Emulation on Ubuntu
DESCRIPTION: This snippet shows how to install QEMU, a generic and open source machine emulator and virtualizer, specifically for the s390x architecture on Ubuntu.  This allows you to test cross-compiled s390x binaries on a non-s390x host system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/s390x-unknown-linux-gnu.md#2025-04-21_snippet_6

LANGUAGE: Bash
CODE:
```

```bash
apt install qemu-system-s390x
```

```

----------------------------------------

TITLE: Generating NRO Format Binaries Using cargo-nx
DESCRIPTION: This command utilizes the cargo-nx tool to generate NRO format binaries from Rust code for easy execution on the Nintendo Switch. It specifies the target triple for the compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/aarch64-nintendo-switch-freestanding.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
cargo nx --triple=aarch64-nintendo-switch-freestanding
```

----------------------------------------

TITLE: Setting Install Paths with `./configure` (Shell)
DESCRIPTION: Illustrates how to use the `./configure` script's `--set` flag to specify custom installation prefix and sysconf directories directly in the `bootstrap.toml` configuration. This provides an alternative method to the `DESTDIR` environment variable for controlling where `./x.py install` places the built artifacts.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_4

LANGUAGE: Shell
CODE:
```
./configure --set install.prefix=<path> --set install.sysconfdir=<path>
```

----------------------------------------

TITLE: Defining Function with Parameter Environment
DESCRIPTION: Example of a function with a parameter environment containing trait bounds and constraints on associated types
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/typing_parameter_envs.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<T: Trait>() 
where
    <T as Trait>::Assoc: Clone,
{}
```

----------------------------------------

TITLE: Running Bootstrap with Detailed Logging
DESCRIPTION: This snippet demonstrates how to invoke the Rust bootstrap process with verbosity using the --dry-run flag. The command initiates bootstrap to run through all recursive dependency calculations, providing detailed logging without executing cargo or the compiler. Requires Rust to be installed with a built bootstrap. Expected output includes internal command run logs and details about different steps.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/bootstrapping/debugging-bootstrap.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ ./x dist rustc --dry-run -vv
learning about cargo
running: RUSTC_BOOTSTRAP=\"1\" \"/home/jyn/src/rust2/build/x86_64-unknown-linux-gnu/stage0/bin/cargo\" \"metadata\" \"--format-version\" \"1\" \"--no-deps\" \"--manifest-path\" \"/home/jyn/src/rust2/Cargo.toml\" (failure_mode=Exit) (created at src/bootstrap/src/core/metadata.rs:81:25, executed at src/bootstrap/src/core/metadata.rs:92:50)
running: RUSTC_BOOTSTRAP=\"1\" \"/home/jyn/src/rust2/build/x86_64-unknown-linux-gnu/stage0/bin/cargo\" \"metadata\" \"--format-version\" \"1\" \"--no-deps\" \"--manifest-path\" \"/home/jyn/src/rust2/library/Cargo.toml\" (failure_mode=Exit) (created at src/bootstrap/src/core/metadata.rs:81:25, executed at src/bootstrap/src/core/metadata.rs:92:50)
> Assemble { target_compiler: Compiler { stage: 1, host: x86_64-unknown-linux-gnu } }
  > Libdir { compiler: Compiler { stage: 1, host: x86_64-unknown-linux-gnu }, target: x86_64-unknown-linux-gnu }
    > Sysroot { compiler: Compiler { stage: 1, host: x86_64-unknown-linux-gnu }, force_recompile: false }
Removing sysroot /home/jyn/src/rust2/build/tmp-dry-run/x86_64-unknown-linux-gnu/stage1 to avoid caching bugs
    < Sysroot { compiler: Compiler { stage: 1, host: x86_64-unknown-linux-gnu }, force_recompile: false }
  < Libdir { compiler: Compiler { stage: 1, host: x86_64-unknown-linux-gnu }, target: x86_64-unknown-linux-gnu }
...
```

----------------------------------------

TITLE: Configuring Build for aarch64 Nintendo Switch
DESCRIPTION: This Toml configuration sets up the build stage and target for the aarch64 Nintendo Switch freestanding environment. It's necessary for specifying that the build process should use a custom target during compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/aarch64-nintendo-switch-freestanding.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]\nbuild-stage = 1\ntarget = ["aarch64-nintendo-switch-freestanding"]
```

----------------------------------------

TITLE: Declaring a Custom Lint in Rust
DESCRIPTION: This code declares a custom lint named `WHILE_TRUE` using the `declare_lint!` macro. The lint warns against the use of `while true {}` loops, suggesting `loop {}` instead. It registers the lint with a lint pass struct and implements the `EarlyLintPass` trait to provide custom behavior. The code utilizes dependencies such as `ast::Expr` and `EarlyContext`. This snippet requires familiarity with Rust's AST and lint trait implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
// Declare a lint called `WHILE_TRUE`
declare_lint! {
    WHILE_TRUE,

    // warn-by-default
    Warn,

    // This string is the lint description
    "suggest using `loop { }` instead of `while true { }`"
}

// This declares a struct and a lint pass, providing a list of associated lints. The
// compiler currently doesn\'t use the associated lints directly (e.g., to not
// run the pass or otherwise check that the pass emits the appropriate set of
// lints). However, it\'s good to be accurate here as it\'s possible that we\'re
// going to register the lints via the get_lints method on our lint pass (that
// this macro generates).
declare_lint_pass!(WhileTrue => [WHILE_TRUE]);

// Helper function for `WhileTrue` lint.
// Traverse through any amount of parenthesis and return the first non-parens expression.
fn pierce_parens(mut expr: &ast::Expr) -> &ast::Expr {
    while let ast::ExprKind::Paren(sub) = &expr.kind {
        expr = sub;
    }
    expr
}

// `EarlyLintPass` has lots of methods. We only override the definition of
// `check_expr` for this lint because that\'s all we need, but you could
// override other methods for your own lint. See the rustc docs for a full
// list of methods.
impl EarlyLintPass for WhileTrue {
    fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {
        if let ast::ExprKind::While(cond, ..) = &e.kind
            && let ast::ExprKind::Lit(ref lit) = pierce_parens(cond).kind
            && let ast::LitKind::Bool(true) = lit.kind
            && !lit.span.from_expansion()
        {
            let condition_span = cx.sess.source_map().guess_head_span(e.span);
            cx.struct_span_lint(WHILE_TRUE, condition_span, |lint| {
                lint.build(fluent::example::use_loop)
                    .span_suggestion_short(
                        condition_span,
                        fluent::example::suggestion,
                        "loop".to_owned(),
                        Applicability::MachineApplicable,
                    )
                    .emit();
            })
        }
    }
}

```

----------------------------------------

TITLE: Setting Up and Running Rust Analyzer Documentation Locally with mdbook
DESCRIPTION: Commands to install mdbook, navigate to the documentation directory, and start the local documentation server. As changes are made to files in the docs/book/src directory, mdbook will automatically rebuild the documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
cargo install mdbook
cd docs/book
mdbook serve
# make changes to documentation files in doc/book/src
# ...
```

----------------------------------------

TITLE: Building Rust Guide Locally (Shell)
DESCRIPTION: Executes the `mdbook build` command in the root directory of the guide repository to generate a static HTML version of the guide documentation. The `--open` flag automatically opens the newly built index page in your default web browser upon completion. The output files are placed in the `book/html` directory.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
mdbook build --open
```

----------------------------------------

TITLE: Detailed Toolchain Path Configuration
DESCRIPTION: Advanced configuration for specifying custom paths to RISC-V toolchain binaries
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv64gc-unknown-linux-gnu.md#2025-04-21_snippet_4

LANGUAGE: toml
CODE:
```
[target.riscv64gc-unknown-linux-gnu]
cc = "/TOOLCHAIN_PATH/bin/riscv64-linux-gnu-gcc"
cxx = "/TOOLCHAIN_PATH/bin/riscv64-linux-gnu-g++"
ar = "/TOOLCHAIN_PATH/bin/riscv64-linux-gnu-ar"
ranlib = "/TOOLCHAIN_PATH/bin/riscv64-linux-gnu-ranlib"
linker = "/TOOLCHAIN_PATH/bin/riscv64-linux-gnu-gcc"
```

----------------------------------------

TITLE: Obtaining Address Using `addr_of!(v).expose_provenance()` in Rust
DESCRIPTION: This snippet employs the `addr_of!` macro combined with `.expose_provenance()` to extract the address *along with* detailed provenance information, making the address's origin explicit. This method can distinguish addresses that appear identical in value but differ in their provenance, impacting equality comparisons. Dependencies include features from nightly Rust related to pointer provenance exposure.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/codegen/equal-pointers-unequal/README.md#_snippet_2

LANGUAGE: Rust
CODE:
```
addr_of!(v).expose_provenance()
```

----------------------------------------

TITLE: Configuring Max Function Bool Parameters in Rust
DESCRIPTION: This option defines the maximum number of boolean parameters a function can have before the `fn_params_excessive_bools` lint triggers.  The default value is `3`. This configures the threshold used by the lint.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_26



----------------------------------------

TITLE: File System Wrapper Helpers in Rust Run Make Support
DESCRIPTION: Panic-on-fail helpers for file system operations to reduce boilerplate and improve error handling in test scenarios
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/run-make-support/CHANGELOG.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
// File system wrapper module
mod fs_wrapper {
    // Panic-on-fail helpers for std::fs operations
    fn copy_dir_all(src: &Path, dst: &Path);
    fn path() -> Path; // Relative path creation helper
}
```

----------------------------------------

TITLE: Setting Shell Args Structure in TypeScript
DESCRIPTION: Outlines the essential shell argument configurations for executing shell commands. This TypeScript structure supports environment setups and command organization necessary for executing related Rust projects within a shell environment, maintaining consistency in operation flows.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
{
    environment?: Record<string, string>;
    cwd: string;
    kind: string;
    program: string;
    args: string[];
}
```

----------------------------------------

TITLE: Configuring Cranelift Codegen Backend in Cargo Config
DESCRIPTION: Configuration for enabling the Cranelift codegen backend by adding settings to the .cargo/config.toml file. This enables the unstable codegen-backend feature and sets Cranelift as the backend for the dev profile.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/Readme.md#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[unstable]
codegen-backend = true

[profile.dev]
codegen-backend = "cranelift"
```

----------------------------------------

TITLE: Implementing Basic Syntax Tree Structure in Rust
DESCRIPTION: Demonstrates the conceptual structure of syntax nodes using basic Rust structs. Shows how nodes and tokens are represented with SyntaxKind identifiers and child relationships.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/syntax.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[derive(PartialEq, Eq, Clone, Copy)]
struct SyntaxKind(u16);

#[derive(PartialEq, Eq, Clone)]
struct Node {
    kind: SyntaxKind,
    text_len: usize,
    children: Vec<Arc<Either<Node, Token>>>,
}

#[derive(PartialEq, Eq, Clone)]
struct Token {
    kind: SyntaxKind,
    text: String,
}
```

----------------------------------------

TITLE: Syncing Rust Compiler Changes
DESCRIPTION: Commands to push changes from the main Rust repository to the rustc_codegen_gcc repository using git-subtree. Includes steps for checkout, merging, and branch management.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/subtree.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
PATH="$HOME/bin:$PATH" ~/bin/git-subtree push -P compiler/rustc_codegen_gcc/ ../rustc_codegen_gcc/ sync_branch_name
cd ../rustc_codegen_gcc
git checkout master
git pull
git checkout sync_branch_name
git merge master
```

----------------------------------------

TITLE: Cargo Configuration for Fuchsia Targets
DESCRIPTION: This TOML configuration specifies native library paths in .cargo/config.toml needed for linking Fuchsia libraries during compilation. Update <SDK_PATH> with the actual path to the Fuchsia SDK.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_3

LANGUAGE: txt
CODE:
```
[target.x86_64-unknown-fuchsia]

rustflags = [
    "-Lnative=<SDK_PATH>/arch/x64/lib",
    "-Lnative=<SDK_PATH>/arch/x64/sysroot/lib"
]
```

----------------------------------------

TITLE: Linking Rust Toolchain with Rustup
DESCRIPTION: Create a local toolchain linked to the newly built compiler stage for testing and development
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/quickstart.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
rustup toolchain link stage1 build/host/stage1
```

----------------------------------------

TITLE: Adding a target specification - Diff
DESCRIPTION: This diff shows how to modify the Cargo.toml file to include a new target architecture in the Rust standard library configuration by adjusting the cfg settings.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/new-target.md#2025-04-21_snippet_3

LANGUAGE: diff
CODE:
```
  [lints.rust.unexpected_cfgs]
  level = "warn"
  check-cfg = [
      'cfg(bootstrap)',
-      'cfg(target_arch, values("xtensa"))',
+      # #[cfg(bootstrap)] NEW_TARGET_ARCH
+      'cfg(target_arch, values("xtensa", "NEW_TARGET_ARCH"))',
```

----------------------------------------

TITLE: Checking LLVM CFI in ELF Binary
DESCRIPTION: This command uses readelf to check if LLVM Control Flow Integrity (CFI) is enabled in a compiled Rust binary by looking for symbols suffixed with '.cfi'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_12

LANGUAGE: text
CODE:
```
$ readelf -s -W target/release/hello-rust | grep "\.cfi"
     5: 0000000000006480   657 FUNC    LOCAL  DEFAULT   15 _ZN10hello_rust4main17h4e359f1dcd627c83E.cfi
```

----------------------------------------

TITLE: Test Harness Generation
DESCRIPTION: Illustrates the test harness code generated by the compiler to run the tests.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/test-implementation.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#[main]
pub fn main() {
    extern crate test;
    test::test_main_static(&[&path::to::test1, /*...*/]);
}
```

----------------------------------------

TITLE: Creating a Salsa Derived Query Group in Rust
DESCRIPTION: Example of defining a Salsa derived query group that depends on the previously defined input query group. This shows how to specify dependencies between query groups using supertraits and how to declare derived queries.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/salsa.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
/// This query group is going to contain queries that depend on derived values.
/// A query group can access another query group's queries by specifying the
/// dependency as a supertrait. Query groups can be stacked as much as needed using
/// that pattern.
#[salsa::query_group(ParserStorage)]
pub trait Parser: Inputs {
    /// This query `ast` is not an input query, it's a derived query this means
    /// that a definition is necessary.
    fn ast(&self, name: String) -> String;
}
```

----------------------------------------

TITLE: Defining Subdiagnostic Enum in Rust
DESCRIPTION: Example of using #[derive(Subdiagnostic)] to define an enum representing different types of expected return type labels. It demonstrates the use of #[label] attributes and #[primary_span] for specifying diagnostic details.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/diagnostic-structs.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#[derive(Subdiagnostic)]
pub enum ExpectedReturnTypeLabel<'tcx> {
    #[label(hir_analysis_expected_default_return_type)]
    Unit {
        #[primary_span]
        span: Span,
    },
    #[label(hir_analysis_expected_return_type)]
    Other {
        #[primary_span]
        span: Span,
        expected: Ty<'tcx>,
    },
}
```

----------------------------------------

TITLE: Raw Byte String Literal Error
DESCRIPTION: This code snippet demonstrates a raw byte string literal that is missing its trailing delimiter. In Rust, raw string literals (including byte strings) require a matching number of `#` symbols at the beginning and end of the literal. The error message indicates that the trailing quote and `#` symbols are missing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_raw_byte_string_with_slash.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"br##\"\\\" error: Missing trailing \`\"\` with `#` symbols to terminate the raw byte string literal"
```

----------------------------------------

TITLE: Custom is_null Implementation Example in Rust
DESCRIPTION: Example showing how arbitrary_self_types feature allows custom is_null implementations that could cause ambiguity.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0699.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
impl Foo {
    fn is_null(self: *const Self) -> bool {
        // do something else
    }
}
```

----------------------------------------

TITLE: Configuring Rust for UEFI Targets - TOML
DESCRIPTION: This configuration allows building Rust for the x86_64-unknown-uefi target. It specifies the build stage and target architecture required for Rust compilation for UEFI.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/unknown-uefi.md#2025-04-21_snippet_0

LANGUAGE: TOML
CODE:
```
[build]
build-stage = 1
target = ["x86_64-unknown-uefi"]
```

----------------------------------------

TITLE: Declaring Struct from Macro in Rust
DESCRIPTION: This snippet shows a struct named 'StructFromMacro' which is defined in the context of a macro. It involves unique location data relevant for cases where structs are generated through macro invocation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_8

LANGUAGE: Rust
CODE:
```
FileSymbol {
    name: "StructFromMacro",
    def: Adt(
        Struct(
            Struct {
                id: StructId(
                    0,
                ),
            },
        ),
    ),
    loc: DeclarationLocation {
        hir_file_id: MacroFile(
            0,
        ),
        ptr: SyntaxNodePtr {
            kind: STRUCT,
            range: 0..22,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 6..21,
            },
        ),
    },
    container_name: None,
    is_alias: false,
    is_assoc: false,
}
```

----------------------------------------

TITLE: UEFI Rust std Build Configuration
DESCRIPTION: Configuration settings for building Rust standard library with UEFI support using bootstrap.toml and cargo commands.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/unknown-uefi.md#2025-04-21_snippet_5

LANGUAGE: toml
CODE:
```
[rust]
lld = true
```

LANGUAGE: sh
CODE:
```
./x.py build --target x86_64-unknown-uefi --stage 1
```

LANGUAGE: sh
CODE:
```
cargo build --target x86_64-unknown-uefi -Zbuild-std=std,panic_abort
```

----------------------------------------

TITLE: Generating HIR Tree Representation in Rust
DESCRIPTION: This bash command leverages the rustc compiler to generate a high-level intermediate representation tree for Rust code. It requires the cargo build system to be installed and set up properly. The output will provide a visual structure of the HIR representation as understood by rustc.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/hir.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cargo rustc -- -Z unpretty=hir-tree
```

----------------------------------------

TITLE: Setting environment variables for cc crate on Windows
DESCRIPTION: This snippet shows the environment variables that need to be set when using the `cc` crate with clang-cl and LLD on Windows, including setting the C and C++ compilers to clang-cl and specifying linker flags.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/linker-plugin-lto.md#2025-04-21_snippet_10

LANGUAGE: bat
CODE:
```
"set CC=clang-cl\nset CXX=clang-cl\nset CFLAGS=/clang:-flto=thin /clang:-fuse-ld=lld-link\nset CXXFLAGS=/clang:-flto=thin /clang:-fuse-ld=lld-link\nREM Needed because msvc's lib.exe crashes on LLVM LTO .obj files\nset AR=llvm-lib"
```

----------------------------------------

TITLE: Linker Script for Preserving Stack Size Metadata
DESCRIPTION: This text snippet provides a linker script to preserve the .stack_sizes section, which is normally discarded by default.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/emit-stack-sizes.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
/* file: keep-stack-sizes.x */
SECTIONS
{
  /* `INFO` makes the section not allocatable so it won't be loaded into memory */
  .stack_sizes (INFO) :
  {
    KEEP(*(.stack_sizes));
  }
}
```

----------------------------------------

TITLE: Lowering Source Code to Position-Independent Representation (Rust)
DESCRIPTION: This code lowers the source code of modules into a position-independent representation that remains stable across item body modifications. This approach enables efficient incremental analysis.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_6

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/hir-def/src/item_tree.rs#L110-L154
```

----------------------------------------

TITLE: Installing Cross-Compiler Dependencies for m68k Linux
DESCRIPTION: Command to install the g++ cross-compiler for m68k architecture on Debian-based systems, which automatically pulls in necessary cross-development dependencies
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-linux-gnu.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
# apt install g++-m68k-linux-gnu
```

----------------------------------------

TITLE: Building ELF Binaries with std using cargo build
DESCRIPTION: This command uses `cargo build` with the `build-std` feature flag to build ELF binaries for the `armv7-sony-vita-newlibeabihf` target, including the `std` library and using `panic_abort` for panic handling. It builds the release version of the crate.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7-sony-vita-newlibeabihf.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
"cargo build -Z build-std=std,panic_abort --target=armv7-sony-vita-newlibeabihf --release"
```

----------------------------------------

TITLE: Using Rust Move Size Limit Compiler Flag
DESCRIPTION: Demonstrates the syntax for the experimental compiler flag that warns when moving objects larger than N bytes. The flag enables the 'large_assignments' lint which only triggers for functions participating in code generation, making it ineffective for metadata-only compilation like 'cargo check'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/move-size-limit.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
-Zmove-size-limit=N
```

----------------------------------------

TITLE: Demonstrating Nested Path Symbol Mangling in Rust
DESCRIPTION: Illustrates how closures are mangled as nested paths, including namespace, parent path, and disambiguators for multiple closures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
fn main() {
    let x = || {};
    let y = || {};
    x();
    y();
}
```

LANGUAGE: text
CODE:
```
_RNCNvCsgStHSCytQ6I_7mycrate4main0B3_
  ││└─────────────┬─────────────┘│
  ││              │              │
  ││              │              └── identifier with length 0
  ││              └───────────────── path to "mycrate::main"
  │└──────────────────────────────── closure namespace
  └───────────────────────────────── nested-path
```

LANGUAGE: text
CODE:
```
_RNCNvCsgStHSCytQ6I_7mycrate4mains_0B3_
                                 ││
                                 │└── base-62-number 0
                                 └─── disambiguator 1 (base-62-number+1)
```

----------------------------------------

TITLE: Building Rust with GNULLVM Target in MSYS2
DESCRIPTION: Command for building and installing Rust with the x86_64-pc-windows-gnullvm target using MSYS2 MINGW64 shell. This command cross-compiles Rust using the x86_64-pc-windows-gnu build toolchain.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/windows-gnullvm.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
./x.py install --host x86_64-pc-windows-gnullvm --target x86_64-pc-windows-gnullvm
```

----------------------------------------

TITLE: Determining Expected Type at Cursor Position (Rust)
DESCRIPTION: This code determines the expected type at the cursor position during completion, enabling type-directed completion suggestions that match the expected type in the context.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_26

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/ide-completion/src/context/analysis.rs#L467
```

----------------------------------------

TITLE: Running Miri Tests with Backtrace and Disabled Isolation (Shell)
DESCRIPTION: This command executes the Rust test suite using Miri while disabling Miri's default environment isolation. This allows environment variables, specifically RUST_BACKTRACE=1, to be passed into the interpreted program, enabling backtraces for runtime errors which are otherwise suppressed due to isolation. This is a workaround to obtain detailed error information.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/README.md#_snippet_15

LANGUAGE: Shell
CODE:
```
RUST_BACKTRACE=1 MIRIFLAGS="-Zmiri-disable-isolation" cargo miri test
```

----------------------------------------

TITLE: Detecting Spans from External Macros in Rust
DESCRIPTION: This snippet demonstrates how to detect if a given span originates from a macro defined in an external crate using the `span.in_external_macro(cx.sess().source_map())` method.  This is useful to avoid linting code that the user can't change. This example depends on `a_crate_with_macros` and its macros. The input is a valid span, `match_span` in the example.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/common_tools_writing_lints.md#_snippet_7

LANGUAGE: Rust
CODE:
```
use a_crate_with_macros::foo;

// `foo` is defined in `a_crate_with_macros`
foo!("bar");

// if we lint the `match` of `foo` call and test its span
assert_eq!(match_span.in_external_macro(cx.sess().source_map()), true);
```

----------------------------------------

TITLE: Error Detection for Missing Byte String Terminator in Rust
DESCRIPTION: This snippet illustrates an error message generated by the Rust compiler when a byte string literal is not properly terminated. The error specifically points out the missing double quote character (`"`) at the end of the byte string literal. The input is a partially formed byte string literal, `b"\"`. The output is an error diagnostic indicating the problem.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_string_with_slash_double_quote.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
BYTE_STRING "b\"\"" error: Missing trailing `"` symbol to terminate the byte string literal
```

----------------------------------------

TITLE: Type Outlives Examples
DESCRIPTION: Demonstrates how type outlives bounds interact with function item types that have early bound parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
fn foo<T>(_: T) {}

fn requires_static<T: 'static>(_: T) {}

fn bar<T>() {
    let f /* : FooFnItem<T> */ = foo::<T>;
    requires_static(f);
}
```

----------------------------------------

TITLE: Formatting Example: Match Expression with Comments
DESCRIPTION: Demonstrates formatting of match arms containing comments with arrow symbols.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
match a {
    _ =>
    // comment with =>
    {
        println!("A")
    }
}
```

----------------------------------------

TITLE: Configuring GNU Linker for RISC-V Target
DESCRIPTION: Cargo configuration to specify the GNU GCC linker for RISC-V cross-compilation
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv64gc-unknown-linux-gnu.md#2025-04-21_snippet_3

LANGUAGE: toml
CODE:
```
[target.riscv64gc-unknown-linux-gnu]
linker = "riscv64-linux-gnu-gcc"
```

----------------------------------------

TITLE: Defining MSRV Aliases with msrv_aliases Macro - Rust
DESCRIPTION: Shows usage of the msrv_aliases! macro to register a minimum supported Rust version (MSRV) alias for a lint. Here, the Sintax 1,45,0 { STR_STRIP_PREFIX } establishes STR_STRIP_PREFIX as a constant referencing Rust 1.45.0, to be used for feature gating lint suggestions. Place this in clippy_utils::msrvs for project-wide access. Dependencies: macro provided by Clippy utilities.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_10

LANGUAGE: rust
CODE:
```
msrv_aliases! {
    ..
    1,45,0 { STR_STRIP_PREFIX }
}
```

----------------------------------------

TITLE: Demonstrating Invalid Usage of #[cmse_nonsecure_entry] Attribute in Rust
DESCRIPTION: This code snippet shows an erroneous example of using the #[cmse_nonsecure_entry] attribute. The attribute is applied to a function with the 'C-cmse-nonsecure-entry' calling convention, which is only valid for TrustZone-M targets.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0775.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(cmse_nonsecure_entry)]

pub extern "C-cmse-nonsecure-entry" fn entry_function() {}
```

----------------------------------------

TITLE: LLVM Attribute Check
DESCRIPTION: This snippet checks for the existence of an attribute list with a specific ID (captured in the previous snippet as `ATTR_3`). It then verifies that the `no-builtins` attribute is present in that attribute list.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/no-builtins-attribute/filecheck.main.txt#2025-04-21_snippet_1

LANGUAGE: llvm
CODE:
```
CHECK: attributes #[[ATTR_3]] 
CHECK-SAME: no-builtins
```

----------------------------------------

TITLE: Implementing an Early Lint Pass in Clippy
DESCRIPTION: Example of a lint implementation structure showing how the 'ElseIfWithoutElse' struct is defined and implements the EarlyLintPass trait. Early lint passes operate on AST information before type checking occurs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/CONTRIBUTING.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// ./clippy_lints/src/else_if_without_else.rs

use rustc_lint::{EarlyLintPass, EarlyContext};

// ...

pub struct ElseIfWithoutElse;

// ...

impl EarlyLintPass for ElseIfWithoutElse {
    // ... the functions needed, to make the lint work
}
```

----------------------------------------

TITLE: Defining Revisions in Rust Tests
DESCRIPTION: This snippet illustrates how to define multiple revisions for a single test file using the `//@ revisions:` directive. Each revision allows the test to be compiled with different configuration flags.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/compiletest.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
"//@ revisions: foo bar baz\n"
```

----------------------------------------

TITLE: Configuring GCC Linker for s390x in Cargo
DESCRIPTION: This snippet demonstrates how to configure Cargo to use the GNU GCC linker for the `s390x-unknown-linux-gnu` target. This configuration is necessary when the system's default linker is not compatible with the target architecture.  Adding this to `.cargo/config.toml` ensures that the correct linker is used during the build process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/s390x-unknown-linux-gnu.md#2025-04-21_snippet_4

LANGUAGE: TOML
CODE:
```

```toml
[target.s390x-unknown-linux-gnu]
linker = "s390x-linux-gnu-gcc"
```

```

----------------------------------------

TITLE: Creating xwin-lld-link Script for Cross-Compilation
DESCRIPTION: This bash script sets up the environment for using lld-link with the Windows SDK for cross-compilation. It specifies the paths to the necessary libraries.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/win7-windows-msvc.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash
set -e
XWIN=/path/to/winsdk
lld-link "$@" /libpath:$XWIN/crt/lib/x86_64 /libpath:$XWIN/sdk/lib/um/x86_64 /libpath:$XWIN/sdk/lib/ucrt/x86_64
```

----------------------------------------

TITLE: Clang++ Wrapper Script for x86_64-unknown-linux-ohos
DESCRIPTION: This shell script wraps the Clang++ compiler from the OpenHarmony SDK for the x86_64-unknown-linux-ohos target. It configures the compiler for the target, setting the sysroot and defining the __MUSL__ macro.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/openharmony.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
#!/bin/sh
exec /path/to/ohos-sdk/linux/native/llvm/bin/clang++ \
  -target x86_64-linux-ohos \
  --sysroot=/path/to/ohos-sdk/linux/native/sysroot \
  -D__MUSL__ \
  "$@"
```

----------------------------------------

TITLE: Rust HirId Conceptual Structure
DESCRIPTION: Explanation of HirId's logical structure as a stable identifier composed of DefPath and LocalId
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/incremental-compilation-in-detail.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
HirId = (DefPath, LocalId)
```

----------------------------------------

TITLE: Implementing TypeFoldable for Structs in Rust
DESCRIPTION: This example shows how to implement the `TypeFoldable` trait for a custom struct `MyFoldable`. It requires the `TypeFolder` trait and assumes knowledge of folding operations in Rust. The `super_fold_with` method iterates over fields of `MyFoldable` to invoke `fold_with` on each, enabling selective replacement within the struct during type folding. Inputs include an instance of `MyFoldable`, and the output is a new folded instance of the same type.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty-fold.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
impl TypeFoldable for MyFoldable {
  fn super_fold_with(&self, folder: &mut impl TypeFolder<'tcx>) -> MyFoldable {
    MyFoldable {
      def_id: self.def_id.fold_with(folder),
      ty: self.ty.fold_with(folder),
    }
  }

  fn super_visit_with(..) { }
}
```

----------------------------------------

TITLE: Setting Language Properties for C++ Sources
DESCRIPTION: This CMake command sets the `LANGUAGE` property to `CXX` for the files listed in `CXX_SOURCES`. This ensures that the CMake build system treats them as C++ source files.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/CMakeLists.txt#_snippet_4

LANGUAGE: CMake
CODE:
```
set_source_files_properties(${CXX_SOURCES}
                            PROPERTIES
                            LANGUAGE CXX)
```

----------------------------------------

TITLE: Compiler Error Output for #[rustc_variance] in Rust
DESCRIPTION: This shows the error output generated by the compiler when using the #[rustc_variance] attribute. The output displays the variance of the type's generic parameters, with [-, o] indicating contravariant lifetime and invariant type parameter.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0208.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
error: [-, o]
 --> <anon>:4:1
  |
4 | struct Foo<'a, T> {
  | ^^^^^^^^^^^^^^^^^
```

----------------------------------------

TITLE: Enabling the profiler feature in bootstrap.toml
DESCRIPTION: Configuration for enabling the Rust profiler runtime in bootstrap.toml, which is required for using instrument-coverage compiler option when building Rust from source.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
# Build the profiler runtime (required when compiling with options that depend
# on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).
profiler = true
```

----------------------------------------

TITLE: Linking to Example Pull Request in Markdown
DESCRIPTION: This snippet demonstrates how to create a Markdown link to an example pull request for joining the ARM group. It uses a reference-style link format.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/arm.md#2025-04-21_snippet_3

LANGUAGE: markdown
CODE:
```
[eg]: https://github.com/rust-lang/team/pull/358
```

----------------------------------------

TITLE: Pushing Changes to rustc Fork with Bash
DESCRIPTION: This snippet details how to push Miri changes back to the rustc fork, setting up a new branch for those changes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_16

LANGUAGE: sh
CODE:
```
./miri rustc-push YOUR_NAME miri
```

----------------------------------------

TITLE: Building and Running Heap Corruption Example (Release)
DESCRIPTION: This command demonstrates building and running the heap corruption example in release mode, showing that the allocator still detects and reports the issue even with optimizations enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_11

LANGUAGE: text
CODE:
```
$ cargo run --release
   Compiling hello-rust-heap v0.1.0 (/home/rcvalle/hello-rust-heap)
    Finished release [optimized] target(s) in 0.25s
     Running `target/release/hello-rust-heap`
free(): invalid next size (normal)
Aborted
```

----------------------------------------

TITLE: Generating EarlyLintPass Boilerplate in Clippy
DESCRIPTION: Command to generate boilerplate code for a new lint that uses EarlyLintPass. This is used when the lint doesn't need type information and only deals with syntax-related issues.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/lint_passes.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ cargo dev new_lint --name=<your_new_lint> --pass=early --category=<your_category_choice>
```

----------------------------------------

TITLE: Restoring Stashed Git Changes (Console)
DESCRIPTION: Applies the most recently stashed changes back to your working directory. This is typically done after completing an operation (like rebase) that required a clean working tree.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_6

LANGUAGE: console
CODE:
```
git stash pop
```

----------------------------------------

TITLE: Context Comparison with Assertions in Rust
DESCRIPTION: This snippet uses assertions to confirm that spans from different macro contexts are not equal.  It shows how `span.ctxt()` can identify spans within the same macro expansion context. This snippet works on a contrived macro m!.  The inputs are two spans: `x_is_some_span` and `x_unwrap_span`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/common_tools_writing_lints.md#_snippet_8

LANGUAGE: Rust
CODE:
```
macro_rules! m {
    ($a:expr, $b:expr) => {
        if $a.is_some() {
            $b;
        }
    }
}

let x: Option<u32> = Some(42);
m!(x, x.unwrap());

// These spans are not from the same context
// x.is_some() is from inside the macro
// x.unwrap() is from outside the macro
assert_eq!(x_is_some_span.ctxt(), x_unwrap_span.ctxt());
```

----------------------------------------

TITLE: Checking Span for Macro Expansion in Rust
DESCRIPTION: This snippet demonstrates how to use `span.from_expansion()` to detect if a given code span originates from a macro expansion.  It provides a basic conditional check to ignore code derived from macros, preventing false positives in lints.  The code requires a valid `expr.span` representing the code location.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/common_tools_writing_lints.md#_snippet_5

LANGUAGE: Rust
CODE:
```
if expr.span.from_expansion() {
    // just forget it
    return;
}
```

----------------------------------------

TITLE: Deriving Diagnostic Struct in Rust
DESCRIPTION: This Rust code snippet illustrates how to derive a `Diagnostic` for a struct using attributes such as `#[primary_span]` and `#[label]`. Dependencies include the `Diagnostic` trait and compatible attributes. Key parameters include the struct fields such as `field_name` and spans used for displaying error messages. The `Diagnostic` is intended to emit structured diagnostics, including primary error messages and subdiagnostics.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/diagnostic-structs.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[derive(Diagnostic)]\n#[diag(hir_analysis_field_already_declared, code = E0124)]\npub struct FieldAlreadyDeclared {\n    pub field_name: Ident,\n    #[primary_span]\n    #[label]\n    pub span: Span,\n    #[label(previous_decl_label)]\n    pub prev_span: Span,\n}
```

----------------------------------------

TITLE: Documenting Internal Rust Compiler Feature 'fd' in Markdown
DESCRIPTION: A markdown comment describing the 'fd' feature as internal to the Rust compiler and not intended for general use. This serves as a warning or notice to developers who might encounter this feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/fd.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `fd`

This feature is internal to the Rust compiler and is not intended for general use.
```

----------------------------------------

TITLE: C Compilation for Arm64EC with MSVC Toolchain
DESCRIPTION: Command-line compilation for C code targeting Arm64EC architecture using Microsoft Visual C++ compiler (cl) with Arm64EC specific flag
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/arm64ec-pc-windows-msvc.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cl /arm64EC /c ...
```

----------------------------------------

TITLE: Formatting C++ Code Using clang-format
DESCRIPTION: This snippet demonstrates how to format C++ code in the Rust repository using a pinned version of clang-format. It involves executing a specific command that utilizes the tidy script with extra checks for C++ formatting.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/conventions.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
./x test tidy --extra-checks cpp:fmt --bless
```

----------------------------------------

TITLE: Building and running CFI-disabled code in Rust
DESCRIPTION: Shell commands showing how to build and run the above example without CFI protection. Without CFI, the invalid control flow is allowed and the program executes without errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md#_snippet_6

LANGUAGE: shell
CODE:
```
$ cargo run --release
   Compiling rust-cfi-1 v0.1.0 (/home/rcvalle/rust-cfi-1)
    Finished release [optimized] target(s) in 0.42s
     Running `target/release/rust-cfi-1`
The answer is: 12
With CFI enabled, you should not see the next answer
The next answer is: 14
$
```

----------------------------------------

TITLE: Specifying Alternative C Compiler for Target
DESCRIPTION: This TOML configuration sets `arm-none-eabi-gcc` as the C compiler for the `aarch64-kmc-solid_asp3` target within `bootstrap.toml`. This is useful when using the GNU Arm Embedded Toolchain.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/kmc-solid.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[target.aarch64-kmc-solid_asp3]
cc = "arm-none-eabi-gcc"
```

----------------------------------------

TITLE: Creating Fuchsia Package Repository
DESCRIPTION: Command to create a Fuchsia package repository.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_14

LANGUAGE: sh
CODE:
```
${SDK_PATH}/tools/${ARCH}/ffx repository create pkg/repo
```

----------------------------------------

TITLE: Defining FetchDependencyList Parameters Interface in TypeScript
DESCRIPTION: TypeScript interface for the request parameters of the 'rust-analyzer/fetchDependencyList' method. This method takes no parameters, so the interface is empty.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_24

LANGUAGE: typescript
CODE:
```
export interface FetchDependencyListParams {}
```

----------------------------------------

TITLE: Building Rust Project for Armv7 Target
DESCRIPTION: This Bash snippet provides the command to build the Rust project using the provided toolchain configuration for the Armv7 target. It utilizes the x.py build system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabihf.md#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
# in rust dir
./x.py build --stage 2
```

----------------------------------------

TITLE: Annotating Error on Same Line as Previous (Rust)
DESCRIPTION: Shows the `//~|` idiom, used to associate a diagnostic annotation with the same source code line as the immediately preceding `//~` annotation. This allows multiple annotations for diagnostics originating from the same line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_5

LANGUAGE: Rust
CODE:
```
struct Binder(i32, i32, i32);

fn main() {
    let x = Binder(1, 2, 3);
    match x {
        Binder(_a, _x @ ..) => {}  // <- the error is on this line
        _ => {}
    }
}
//~^^^^ ERROR `_x @` is not allowed in a tuple struct
//~| ERROR this pattern has 1 field, but the corresponding tuple struct has 3 fields [E0023]
```

----------------------------------------

TITLE: Enabling s390x Target in `bootstrap.toml`
DESCRIPTION: This snippet shows how to enable the `s390x-unknown-linux-gnu` target when building Rust from source. It involves modifying the `bootstrap.toml` file to include the target in the `build.target` array. This configuration is required when building a custom Rust toolchain for the s390x architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/s390x-unknown-linux-gnu.md#2025-04-21_snippet_0

LANGUAGE: TOML
CODE:
```

```toml
[build]
target = ["s390x-unknown-linux-gnu"]
```

```

----------------------------------------

TITLE: Configuring Rust Build Targets for VisionOS
DESCRIPTION: Enables VisionOS targets in bootstrap configuration for Rust compiler build process. Demonstrates how to specify multiple targets for cross-compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-visionos.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["aarch64-apple-visionos", "aarch64-apple-visionos-sim"]
```

----------------------------------------

TITLE: Interpreting cargo-llvm-lines output for the Rust compiler
DESCRIPTION: Sample output from cargo-llvm-lines showing the functions that generate the most LLVM IR in the Rust compiler. The output displays lines count, copies count, and function names, highlighting that core::ptr::drop_in_place generates 4.7% of the total LLVM IR.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling.md#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
  Lines            Copies          Function name
  -----            ------          -------------
  45207720 (100%)  1583774 (100%)  (TOTAL)
   2102350 (4.7%)   146650 (9.3%)  core::ptr::drop_in_place
    615080 (1.4%)     8392 (0.5%)  std::thread::local::LocalKey<T>::try_with
    594296 (1.3%)     1780 (0.1%)  hashbrown::raw::RawTable<T>::rehash_in_place
    592071 (1.3%)     9691 (0.6%)  core::option::Option<T>::map
    528172 (1.2%)     5741 (0.4%)  core::alloc::layout::Layout::array
    466854 (1.0%)     8863 (0.6%)  core::ptr::swap_nonoverlapping_one
    412736 (0.9%)     1780 (0.1%)  hashbrown::raw::RawTable<T>::resize
    367776 (0.8%)     2554 (0.2%)  alloc::raw_vec::RawVec<T,A>::grow_amortized
    367507 (0.8%)      643 (0.0%)  rustc_query_system::dep_graph::graph::DepGraph<K>::with_task_impl
    355882 (0.8%)     6332 (0.4%)  alloc::alloc::box_free
    354556 (0.8%)    14213 (0.9%)  core::ptr::write
    354361 (0.8%)     3590 (0.2%)  core::iter::traits::iterator::Iterator::fold
    347761 (0.8%)     3873 (0.2%)  rustc_middle::ty::context::tls::set_tlv
    337534 (0.7%)     2377 (0.2%)  alloc::raw_vec::RawVec<T,A>::allocate_in
    331690 (0.7%)     3192 (0.2%)  hashbrown::raw::RawTable<T>::find
    328756 (0.7%)     3978 (0.3%)  rustc_middle::ty::context::tls::with_context_opt
    326903 (0.7%)      642 (0.0%)  rustc_query_system::query::plumbing::try_execute_query
```

----------------------------------------

TITLE: Emscripten Ping Command for Github
DESCRIPTION: Github command to notify the Emscripten support group for assistance with Emscripten-related issues in Rust
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/emscripten.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
@rustbot ping emscripten
```

----------------------------------------

TITLE: Pinging LLVM Icebreakers Group in Rust Project
DESCRIPTION: Command to ping the LLVM Icebreakers Notification group using rustbot in GitHub issues or pull requests.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/llvm.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
@rustbot ping icebreakers-llvm
```

----------------------------------------

TITLE: Installing TypeScript and Running Type Checking
DESCRIPTION: This snippet provides the commands necessary to install the TypeScript compiler globally and run a type check based on the project's configuration. It requires Node.js and npm to be installed. The expected input is a valid TypeScript project configuration file, and it outputs type checking status. Ensure "tsconfig.json" is correctly setup before execution.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/librustdoc/html/static/js/README.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
npm i -g typescript
tsc --project tsconfig.json
```

----------------------------------------

TITLE: Implementing AliasRelate for Structural Normalization in Rust
DESCRIPTION: This code snippet shows how AliasRelate is implemented to structurally normalize both the left-hand side and right-hand side, then relate the resulting rigid types or inference variables.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/normalization.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
// Source: structural-relate
let lhs = self.structural_norm(lhs)?;
let rhs = self.structural_norm(rhs)?;

let lhs_is_alias = lhs.is_alias();
let rhs_is_alias = rhs.is_alias();

if lhs_is_alias || rhs_is_alias {
    self.evaluator.equate(lhs, rhs);
    Ok(())
} else {
    self.evaluator.relate(Variance::Invariant, lhs, rhs)
}
```

----------------------------------------

TITLE: Cross-Compilation Configuration for Armv7R Target
DESCRIPTION: Cross-compilation configuration for ARM Cortex-R processors using arm-none-eabi toolchain with specific architectural requirements
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7r-none-eabi.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
arm-none-eabi -march=armv7-r
```

----------------------------------------

TITLE: Upcasting Mechanism in Rust's Unsize Trait
DESCRIPTION: The snippet outlines the complex upcasting functionality associated with the Unsize trait in Rust, detailing the procedures for unifying traits and managing auto traits and projections.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/unsize.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
Two things are called "upcasting" internally:
1. True upcasting `dyn SubTrait` -> `dyn SuperTrait` (this also allows
dropping auto traits and adjusting lifetimes, as below).
2. Dropping auto traits and adjusting the lifetimes of dyn trait
without changing the principal[^1]:
`dyn Trait + AutoTraits... + 'a` -> `dyn Trait + NewAutoTraits... + 'b`
when `AutoTraits` ⊇ `NewAutoTraits`, and `'a: 'b`.
```

----------------------------------------

TITLE: Managing Implied Bounds in Rust Language
DESCRIPTION: This section of the Rust source code outlines the handling of implied bounds, focusing on the mechanism by which the Rust compiler handles these bounds indirectly through specific functions. Functions like `fn inferred_outlives_of`, `fn insert_required_predicates_to_be_wf`, and `fn check_explicit_predicates` play key roles in managing explicit bounds using fixpoint algorithms and the addition of required predicates. Implicit bounds are dealt with through environments set up by functions such as `fn OutlivesEnvironment::from_normalized_bounds` and `fn UniversalRegionRelationsBuilder::add_implied_bounds`. These functions include references to MIR borrow checking and the use of outlives requirements.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/implied-bounds.md#2025-04-21_snippet_0



----------------------------------------

TITLE: Invalid DispatchFromDyn Implementation with Extra Fields
DESCRIPTION: This example shows an erroneous implementation of DispatchFromDyn on a struct with multiple fields, which is not allowed.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0378.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(dispatch_from_dyn)]
use std::ops::DispatchFromDyn;

struct WrapperExtraField<T> {
    ptr: T,
    extra_stuff: i32,
}

impl<T, U> DispatchFromDyn<WrapperExtraField<U>> for WrapperExtraField<T>
where
    T: DispatchFromDyn<U>,
{}
```

----------------------------------------

TITLE: Description of the run-make Test Suite Infrastructure
DESCRIPTION: This snippet provides an overview of the roles and structure of the run-make test suite in Rust, including how test recipes are organized and integrated within the testing framework. It highlights the use of `rmake.rs` files and the support library, explaining the three-stage setup process comprising library building, recipe compilation, and test execution.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/README.md#_snippet_0

LANGUAGE: Markdown
CODE:
```
# The `run-make` test suite

The `run-make` test suite contains tests which are the most flexible out of all the [rust-lang/rust](https://github.com/rust-lang/rust) test suites. `run-make` tests can basically contain arbitrary code, and are supported by the [`run_make_support`] library.

## Infrastructure

A `run-make` test is a test recipe source file `rmake.rs` accompanied by its parent directory (e.g. `tests/run-make/foo/rmake.rs` is the `foo` `run-make` test).

The implementation for collecting and building the `rmake.rs` recipes are in [`src/tools/compiletest/src/runtest.rs`](../../src/tools/compiletest/src/runtest.rs), in `run_rmake_test`.

The setup for the `rmake.rs` can be summarized as a 3-stage process:

1. First, we build the [`run_make_support`] library in bootstrap as a tool lib.
2. Then, we compile the `rmake.rs` "recipe" linking the support library and its dependencies in, and provide a bunch of env vars. We setup a directory structure within `build/<target>/test/run-make/`

   ```
   <test-name>/
       rmake.exe              # recipe binary
       rmake_out/             # sources from test sources copied over
   ```

   and copy non-`rmake.rs` input support files over to `rmake_out/`. The support library is made available as an [*extern prelude*][extern_prelude].
3. Finally, we run the recipe binary and set `rmake_out/` as the working directory.

[`run_make_support`]: ../../src/tools/run-make-support
[extern_prelude]: https://doc.rust-lang.org/reference/names/preludes.html#extern-prelude
```

----------------------------------------

TITLE: Extern Crate Declaration Formatting in Rust
DESCRIPTION: Illustrates the formatting for `extern crate` declarations in Rust, including spacing around keywords and the semicolon.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/items.md#2025-04-21_snippet_15

LANGUAGE: rust
CODE:
```
extern crate foo;
```

----------------------------------------

TITLE: Testing MIPS R6 Binaries with QEMU
DESCRIPTION: Sets up environment variables and uses QEMU to test cross-compiled MIPS R6 binaries on the build system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/mips-release-6.md#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
env \
    CARGO_TARGET_MIPSISA64R6EL_UNKNOWN_LINUX_GNUABI64_LINKER="/opt/abcross/mips64r6el/bin/mipsisa64r6el-aosc-linux-gnuabi64-gcc" \
    CARGO_TARGET_MIPSISA64R6EL_UNKNOWN_LINUX_GNUABI64_RUNNER="qemu-mips64el-static -L /var/ab/cross-root/mips64r6el" \
    cargo run --release \
        --target mipsisa64r6el-unknown-linux-gnuabi64
```

----------------------------------------

TITLE: Demonstrating NOP Padding with Patchable Function Entry
DESCRIPTION: Example showing how the -Z patchable-function-entry=3,2 flag structures function entry with NOP instructions. The example demonstrates placement of NOPs before and after the function label, creating space for potential hotpatching.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/patchable-function-entry.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
nop
nop
function_label:
nop
//Actual function code begins here
```

----------------------------------------

TITLE: Using -Zfunction-return option in Rust
DESCRIPTION: The -Zfunction-return compiler option controls how function returns are converted, with support for 'keep' (default behavior) and 'thunk-extern' (convert ret to jmp instructions). Only supported on x86 architectures with non-large code models.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/function-return.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
  - `keep`: do not convert function returns.
  - `thunk-extern`: convert function returns (`ret`) to jumps (`jmp`)
    to an external symbol called `__x86_return_thunk`.
```

----------------------------------------

TITLE: Creating Fuchsia Component Manifest
DESCRIPTION: CML file defining the component structure for the Fuchsia package.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_11

LANGUAGE: txt
CODE:
```
{
    include: [ "syslog/client.shard.cml" ],
    program: {
        runner: "elf",
        binary: "bin/hello_fuchsia",
    },
}
```

----------------------------------------

TITLE: Demonstrating Jobserver Warning in Rust Compiler
DESCRIPTION: Shows how rustc warns when a jobserver is specified but not accessible through MAKEFLAGS environment variable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/jobserver.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ echo 'fn main() {}' | MAKEFLAGS=--jobserver-auth=3,4 rustc -
warning: failed to connect to jobserver from environment variable `MAKEFLAGS="--jobserver-auth=3,4"`: cannot open file descriptor 3 from the jobserver environment variable value: Bad file descriptor (os error 9)
  |
  = note: the build environment is likely misconfigured
```

----------------------------------------

TITLE: Line Index Usage Example
DESCRIPTION: This code snippet demonstrates how to use the `LineIndex` struct to convert between text offsets and line/column coordinates. It creates a `LineIndex` from a string, and then uses `line_col` to get the line and column from an offset, and `offset` to get the offset from a line and column. The `into()` method is used to convert the numerical offset to the correct type for the `line_col` method.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/lib/line-index/README.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use line_index::LineIndex;

let line_index = LineIndex::new("This is a\nmulti-line\ntext.");
line_index.line_col(3.into()); // LineCol { line: 0, col: 3 }
line_index.line_col(13.into()); // LineCol { line: 1, col: 3 }
line_index.offset(LineCol { line: 2, col: 3 }); // Some (24)
```

----------------------------------------

TITLE: Rust Compiler Flag Documentation - no-parallel-llvm
DESCRIPTION: Documents the no-parallel-llvm flag which disables parallel codegen and linking while maintaining codegen units and LTO behavior. This flag is primarily intended for debugging LLVM backend issues by preventing output interleaving during parallel operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/no-parallel-llvm.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `no-parallel-llvm`

---------------------

This flag disables parallelization of codegen and linking, while otherwise preserving
behavior with regard to codegen units and LTO.

This flag is not useful for regular users, but it can be useful for debugging the backend. Codegen issues commonly only manifest under specific circumstances, e.g. if multiple codegen units are used and ThinLTO is enabled. Serialization of these threaded configurations makes the use of LLVM debugging facilities easier, by avoiding the interleaving of output.
```

----------------------------------------

TITLE: Error Message Text Style Example
DESCRIPTION: This snippet provides an example of how error messages should be written: in plain, simple English, starting with a lowercase letter, and without ending punctuation unless multiple sentences are necessary. Code and identifiers should be surrounded by backticks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
"error: the fobrulator needs to be krontrificated"
```

----------------------------------------

TITLE: Rust Raw String Literal Error
DESCRIPTION: This Rust compiler error occurs when a raw string literal is not properly terminated with a closing delimiter that includes the correct number of '#' symbols. The compiler expects the same number of '#' symbols at the end as there are at the beginning of the raw string literal before the quote.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_raw_string_at_eof.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"r##\"" error: Missing trailing `"` with `#` symbols to terminate the raw string literal
```

----------------------------------------

TITLE: Creating Fuchsia Package Directory Structure
DESCRIPTION: Commands to create the necessary directories for a Fuchsia package.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_8

LANGUAGE: sh
CODE:
```
mkdir pkg
mkdir pkg/meta
```

----------------------------------------

TITLE: Correct Declaration of simd_shuffle Function in Rust
DESCRIPTION: This code snippet shows the correct way to declare the `simd_shuffle` platform-intrinsic function. The length of the shuffle (8 in this case) is included in the function name as `simd_shuffle8`. Note that this example may no longer compile with current Rust versions.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0439.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(platform_intrinsics)]

extern "platform-intrinsic" {
    fn simd_shuffle8<A,B>(a: A, b: A, c: [u32; 8]) -> B;
}
```

----------------------------------------

TITLE: Demonstrating concat_idents Macro Usage in Rust
DESCRIPTION: This Rust snippet shows how to use the now-deprecated `concat_idents` macro. It requires enabling the feature using `#![feature(concat_idents)]`. The macro takes multiple identifier parts (e.g., `foo`, `bar`) and concatenates them into a single identifier (`foobar`), which is then used to reference a function or variable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/concat-idents.md#_snippet_0

LANGUAGE: Rust
CODE:
```
#![feature(concat_idents)]

fn main() {
    fn foobar() -> u32 { 23 }
    let f = concat_idents!(foo, bar);
    assert_eq!(f(), 23);
}
```

----------------------------------------

TITLE: Querying Analysis for Semantic Information in Rust
DESCRIPTION: This snippet explains how to retrieve analysis instances using the analysis method from the AnalysisHost. It is essential for extracting semantic information during the development process, enabling IDE features like autocompletion and definition lookup.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
// Getting an instance of Analysis from the host
let analysis_instance = analysis_host.analysis();
```

----------------------------------------

TITLE: Applying Changes to Analysis in Rust
DESCRIPTION: This code snippet illustrates the application of changes to the AnalysisHost component. It captures the mechanism through which changes to the analysis state are made, facilitating transitions from an initial state to one that reflects recent modifications provided through the apply_change method.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// Applying changes to the analyzer
analysis_host.apply_change(change);
```

----------------------------------------

TITLE: Version Configuration Example in TOML
DESCRIPTION: Shows how to configure the deprecated version option in TOML format.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_80

LANGUAGE: toml
CODE:
```
version = "Two"
```

----------------------------------------

TITLE: Sample JSON Representation of DiscoverProjectData::Finished for rust-analyzer
DESCRIPTION: Example JSON showing the serialized form of the DiscoverProjectData::Finished variant. It indicates successful workspace discovery with the buildfile path and a project JSON containing sysroot and crate list fields. This example illustrates the expected JSON structure returned by the custom workspace discovery command.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_9

LANGUAGE: json
CODE:
```
{
    "kind": "finished",
    "buildfile": "rust-analyzer/BUILD",
    "project": {
        "sysroot": "foo",
        "crates": []
    }
}
```

----------------------------------------

TITLE: Region Inference Variables Example
DESCRIPTION: Example showing how regions are replaced with inference variables during the analysis process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn foo<'a, 'b>(x: &'a /* '#1 */ usize) -> &'b /* '#3 */ usize {
    x // '#2, location L1
}
```

----------------------------------------

TITLE: Adding Test Attributes to All Doctests
DESCRIPTION: This snippet showcases the use of #[doc(test(attr(...)))] to apply specific attributes to all doctests, such as denying dead code to maintain code quality.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/the-doc-attribute.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
"""rust,no_run\n#![doc(test(attr(deny(dead_code))))]\n"
```

----------------------------------------

TITLE: Fluent Messages for Subdiagnostic Labels
DESCRIPTION: Corresponding Fluent messages for the 'expected return type' labels defined in the ExpectedReturnTypeLabel enum. These messages are used to generate the actual text for the diagnostic labels.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/diagnostic-structs.md#2025-04-21_snippet_5

LANGUAGE: fluent
CODE:
```
hir_analysis_expected_default_return_type = expected `()` because of default return type

hir_analysis_expected_return_type = expected `{$expected}` because of return type
```

----------------------------------------

TITLE: Configuring Kakoune with kak-lsp (Shell)
DESCRIPTION: This shell snippet configures Kakoune to use kak-lsp for Rust development, enabling LSP features, auto-formatting on save, and inlay hints. It involves executing kak-lsp within Kakoune, enabling the LSP client for Rust files, setting up hooks for auto-formatting before saving, and configuring inlay hints after saving.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/other_editors.md#_snippet_10

LANGUAGE: shell
CODE:
```
eval %sh{kak-lsp --kakoune -s $kak_session}  # Not needed if you load it with plug.kak.
hook global WinSetOption filetype=rust %{
    # Enable LSP
    lsp-enable-window

    # Auto-formatting on save
    hook window BufWritePre .* lsp-formatting-sync

    # Configure inlay hints (only on save)
    hook window -group rust-inlay-hints BufWritePost .* rust-analyzer-inlay-hints
    hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window rust-inlay-hints
    }
}
```

----------------------------------------

TITLE: Compiler Extern Command Example
DESCRIPTION: Demonstrates the resulting compiler extern command format when Cargo invokes the compiler, showing how the package is referenced as 'core' in the compiled output.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/rustc-std-workspace-core/README.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
--extern core=.../librustc_std_workspace_core-XXXXXXX.rlib
```

----------------------------------------

TITLE: Generated TestDescAndFn Structure
DESCRIPTION: Shows the complete test configuration structure generated by the compiler for each test function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/test-implementation.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
self::test::TestDescAndFn{
  desc: self::test::TestDesc{
    name: self::test::StaticTestName("foo"),
    ignore: false,
    should_panic: self::test::ShouldPanic::Yes,
    allow_fail: false,
  },
  testfn: self::test::StaticTestFn(||
    self::test::assert_test_result(::crate::__test_reexports::foo())),
}
```

----------------------------------------

TITLE: Building and Using Cross-Compiling libgccjit for Rust
DESCRIPTION: Set of commands to configure rustc_codegen_gcc for cross-compilation, including preparing the sysroot, building for specific targets, and handling custom target specification files.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/tips.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
./y.sh prepare --cross
./y.sh build --sysroot --target-triple m68k-unknown-linux-gnu
OVERWRITE_TARGET_TRIPLE=m68k-unknown-linux-gnu ../y.sh cargo build --target m68k-unknown-linux-gnu

# For targets not supported by Rust compiler, using a target specification file:
./y.sh build --sysroot --target-triple m68k-unknown-linux-gnu --target $(pwd)/m68k-unknown-linux-gnu.json
OVERWRITE_TARGET_TRIPLE=m68k-unknown-linux-gnu ../y.sh cargo build --target path/to/m68k-unknown-linux-gnu.json
```

----------------------------------------

TITLE: Displaying Dependency Graph Edges
DESCRIPTION: This snippet describes the output format when displaying the edges of the dependency graph containing paths that should not exist. It helps in visualizing the connections and understanding the dependencies better.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/incrcomp-debugging.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
Hir(foo) -> Collect(bar)
Collect(bar) -> TypeckTables(bar)
```

----------------------------------------

TITLE: Merging Candidate Responses in Rust Trait Solver
DESCRIPTION: When multiple ways to prove a goal exist, the solver uses try_merge_responses to attempt merging the results. If merging fails, it falls back to flounder, returning ambiguity. In some cases, certain choices may be incompletely preferred over others.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/the-solver.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
EvalCtxt::try_merge_responses
```

----------------------------------------

TITLE: Implementing Deep Normalization in Rust's Type System
DESCRIPTION: This code snippet demonstrates how deep normalization is implemented by walking over a type and using structural normalization for each encountered alias. It handles ambiguity by immediately failing if encountered.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/normalization.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
// Source: generalize-no-alias
if let Some(alias) = self.var_value(v).as_alias() {
    let normalized = self.relate_alias_to_var(alias, v)?;
    self.equate(v, normalized)
} else {
    Ok(())
}
```

----------------------------------------

TITLE: Configuring and Building Rust with MSVC Python (Batch)
DESCRIPTION: Shows the commands to run `x.py` from a standard Windows `cmd.exe` shell configured for MSVC. This involves a 'user' setup and then running the build process, assuming Python is accessible in the environment's PATH.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_11

LANGUAGE: Batch
CODE:
```
python x.py setup user
python x.py build
```

----------------------------------------

TITLE: Building and Installing Rust with MSYS2 Python (Shell)
DESCRIPTION: Provides the sequence of commands to run `x.py` using the Python interpreter installed via MSYS2. It includes steps for setup, building the compiler, and installing the results within the MSYS2 environment on Windows.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_10

LANGUAGE: Shell
CODE:
```
python x.py setup dist && python x.py build && python x.py install
```

----------------------------------------

TITLE: Updating codegen-backends in bootstrap.toml
DESCRIPTION: This TOML configuration snippet updates the `codegen-backends` array to include `gcc`. This enables the `rustc_codegen_gcc` backend.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_12

LANGUAGE: toml
CODE:
```
codegen-backends = ["llvm", "gcc"]
```

----------------------------------------

TITLE: IntelliJ Trick for Syntax Parsing at Cursor (Rust)
DESCRIPTION: This code implements the "IntelliJ Trick" by inserting a dummy identifier at cursor position and parsing the modified file to obtain a valid syntax tree for completion analysis.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_23

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/ide-completion/src/context.rs#L644-L648
```

----------------------------------------

TITLE: Handling Canceled Errors in Request Processing (Rust)
DESCRIPTION: This code catches canceled errors that occur when a client sends modifications immediately after completion requests, ensuring graceful handling of interruptions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_18

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/rust-analyzer/src/dispatch.rs#L292
```

----------------------------------------

TITLE: Demonstrating Reachability with Empty Types in Unsafe Rust
DESCRIPTION: This snippet shows how a wildcard pattern can be reachable even when matching on a place of an empty type, due to unsafe code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/pat-exhaustive-checking.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
enum Void {}
let x: u8 = 0;
let ptr: *const Void = &x as *const u8 as *const Void;
unsafe {
    match *ptr {
        _ => println!("Reachable!"),
    }
}
```

----------------------------------------

TITLE: Small Pattern Grammar Definition - Rust
DESCRIPTION: Defines the grammar for what constitutes a 'small' pattern in Rust formatting rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/style-guide/src/expressions.md#2025-04-21_snippet_26

LANGUAGE: rust
CODE:
```
small:
    - small_no_tuple
    - unary tuple constructor: `(` small_no_tuple `,` `)`
    - `&` small

small_no_tuple:
    - single token
    - `&` small_no_tuple
```

----------------------------------------

TITLE: Using the rustfmt::skip attribute on imports in Rust
DESCRIPTION: Example of using the rustfmt::skip attribute to prevent formatting of imports.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_21

LANGUAGE: Rust
CODE:
```
#[rustfmt::skip]
use some::long::import::path;
```

----------------------------------------

TITLE: Solution: Removing Over-Aligned Zero-Sized Field in Rust
DESCRIPTION: This code snippet demonstrates a solution to the error by removing the over-aligned zero-sized field from the transparent struct.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0691.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#[repr(transparent)]
struct Wrapper(f32);
```

----------------------------------------

TITLE: Configuring Rust Build for C-SKY Targets
DESCRIPTION: Modifies the 'bootstrap.toml' to include C-SKY targets for compilation. Requires an appropriate toolchain and stage setting for the 'rustc' build environment. Adjust the 'cc' path to point to the C-SKY GCC toolchain.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/csky-unknown-linux-gnuabiv2.md#2025-04-21_snippet_0

LANGUAGE: TOML
CODE:
```
[build]
target = ["x86_64-unknown-linux-gnu", "csky-unknown-linux-gnuabiv2", "csky-unknown-linux-gnuabiv2hf"]
stage = 2

[target.csky-unknown-linux-gnuabiv2]
# ADJUST THIS PATH TO POINT AT YOUR TOOLCHAIN
cc = "${TOOLCHAIN_PATH}/bin/csky-linux-gnuabiv2-gcc"

[target.csky-unknown-linux-gnuabiv2hf]
# ADJUST THIS PATH TO POINT AT YOUR TOOLCHAIN
cc = "${TOOLCHAIN_PATH}/bin/csky-linux-gnuabiv2-gcc"
```

----------------------------------------

TITLE: Building and Running a Rust Library for Hexagon QuRT OS (Shell)
DESCRIPTION: Shell script to build a shared object (`.so`) for the Hexagon QuRT OS. It compiles a C wrapper (`wrap.c`) and links it with the pre-compiled Rust library (`.rlib`), core/compiler builtins, and the Hexagon SDK's shared C library (`libc.so`) using `clang` (or `hexagon-unknown-none-elf-clang`). Linker flags like `-fPIC`, `-shared`, `-nostdlib`, and symbol wrapping for memory allocation functions are used. Finally, it demonstrates running the shared object in emulation using `qemu-system-hexagon` with the QuRT `runelf.pbn` loader and `run_main_on_hexagon_sim`. Requires setting paths for Hexagon SDK (`hex_sdk_root`), toolchain (`hex_toolchain`), and the compiler (`cc`).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/hexagon-unknown-none-elf.md#_snippet_5

LANGUAGE: sh
CODE:
```
# Hexagon SDK, required for target libraries:
hex_sdk_root=/local/mnt/workspace/Qualcomm/Hexagon_SDK/5.3.0.0
hex_sdk_toolchain=${hex_sdk_root}/tools/HEXAGON_Tools/8.6.06

sdk_libs=${hex_sdk_toolchain}/Tools/target/hexagon/lib
q6_arch=v65
g0_lib_path=${sdk_libs}/${q6_arch}/G0
pic_lib_path=${sdk_libs}/${q6_arch}/G0/pic
runelf=${hex_sdk_root}/rtos/qurt/computev65/sdksim_bin/runelf.pbn
rmohs=${hex_sdk_root}/libs/run_main_on_hexagon/ship/hexagon_toolv86_${q6_arch}/run_main_on_hexagon_sim

# Builds a library suitable for loading into "run_main_on_hexagon_sim" for
# emulation or frpc shell on real target:
${cc} --target=hexagon-unknown-none-elf -o testit.so \
    -fuse-ld=lld \
    -fPIC -shared \
    -nostdlib \
    -Wl,-Bsymbolic \
      -Wl,--wrap=malloc \
      -Wl,--wrap=calloc \
      -Wl,--wrap=free \
      -Wl,--wrap=realloc \
      -Wl,--wrap=memalign \
    -m${q6_arch} \
    wrap.c \
    target/hexagon-unknown-none-elf/${build_cfg}/libdemo2_hexagon.rlib \
    target/hexagon-unknown-none-elf/${build_cfg}/deps/libcore-*.rlib \
    target/hexagon-unknown-none-elf/${build_cfg}/deps/libcompiler_builtins-*.rlib \
    -Wl,-soname=testit \
    ${pic_lib_path}/libc.so

# -Bsymbolic above for memory alloc funcs is necessary to access the heap on
# target, but otherwise not required.

# multi-stage loader: runelf => run_main_on_hexagon_sim => testit.so{`main`}
${hex_toolchain}/x86_64-linux-gnu/bin/qemu-system-hexagon \
    -monitor none \
    -display none \
    -kernel ${runelf} \
    -append "${rmohs} -- ./testit.so"
```

----------------------------------------

TITLE: Configuring Compiler Documentation in bootstrap.toml - TOML
DESCRIPTION: This snippet explains how to modify the bootstrap.toml file to enable the default building of compiler documentation when invoking the x doc command. It highlights the required configuration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/compiler-documenting.md#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[build]
  compiler-docs = true
```

----------------------------------------

TITLE: De Bruijn Index Example for Closures
DESCRIPTION: Illustrates how de Bruijn indices could theoretically be used to represent variable bindings within closures (although rustc doesn't actually implement it this way for closures). The example demonstrates how the index corresponds to the number of levels up the variable is bound.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/appendix/background.md#2025-04-21_snippet_6

LANGUAGE: rust,ignore
CODE:
```
|x| {
    f(x) // de Bruijn index of `x` is 1 because `x` is bound 1 level up

    |y| {
        g(x, y) // index of `x` is 2 because it is bound 2 levels up
                // index of `y` is 1 because it is bound 1 level up
    }
}
```

----------------------------------------

TITLE: Adding Missing Match Arms in Rust
DESCRIPTION: This assist adds missing clauses to a `match` expression. It generates match arms for all variants of an enum that are not already covered.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/assists_generated.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
enum Action { Move { distance: u32 }, Stop }

fn handle(action: Action) {
    match action {
        
    }
}
```

LANGUAGE: rust
CODE:
```
enum Action { Move { distance: u32 }, Stop }

fn handle(action: Action) {
    match action {
        Action::Move { distance } => ${1:todo!()},
        Action::Stop => ${2:todo!()},
    }
}
```

----------------------------------------

TITLE: Building Rust toolchain for QNX with environment variables
DESCRIPTION: This bash snippet shows how to build the Rust toolchain for a QNX target using environment variables to specify the correct tools and compiler flags. It defines the `CC`, `CFLAGS`, `CXX`, and `AR` variables for the target architecture, and then executes the `x.py build` script with the specified targets, which includes the standard library.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/nto-qnx.md#2025-04-21_snippet_3

LANGUAGE: Bash
CODE:
```
```bash
export build_env='\
    CC_aarch64_unknown_nto_qnx710=qcc \
    CFLAGS_aarch64_unknown_nto_qnx710=-Vgcc_ntoaarch64le_cxx \
    CXX_aarch64_unknown_nto_qnx710=qcc \
    AR_aarch64_unknown_nto_qnx710=ntoaarch64-ar \
    '

env $build_env \
    ./x.py build \
        --target x86_64-unknown-linux-gnu,aarch64-unknown-nto-qnx710 \
        rustc library/core library/alloc library/std
```
```

----------------------------------------

TITLE: Tracking Variable Initialization Dynamically - Rust
DESCRIPTION: This code snippet illustrates how variables are conditionally moved and emphasizes the dynamics of initialization prior to a drop. It shows the importance of understanding when a variable goes out of scope and the implications on its drop behavior.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/drop-elaboration.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let mut y = vec![];

{
    let x = vec![1, 2, 3];
    if std::process::id() % 2 == 0 {
        y = x; // conditionally move `x` into `y`
    }
} // `x` goes out of scope here. Should it be dropped?
```

----------------------------------------

TITLE: Cross-compiling Compatible C Code for zkVM
DESCRIPTION: To create compatible C code for the RISC Zero zkVM, use any compiler supporting the RV32IM target, applying specific LLVM flags as outlined for the target specifications.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/riscv32im-risc0-zkvm-elf.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
-march=rv32im -mabi=ilp32 -target riscv32-unknown-none
```

----------------------------------------

TITLE: SCC Example with Outlives Constraints
DESCRIPTION: This example illustrates how outlives constraints can create strongly connected components (SCCs).  SCCs are groups of regions that are mutually outlived by each other. The code demonstrates how constraints like `'a: 'b` and `'b: 'a` form an SCC containing `'a` and `'b`, while `'c: 'd` and `'d: 'c` form another SCC.  The constraint `'a: 'c` creates a dependency between these two SCCs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/constraint_propagation.md#2025-04-21_snippet_2

LANGUAGE: Text
CODE:
```
'a: 'b
'b: 'a

'a: 'c

'c: 'd
'd: 'c
```

----------------------------------------

TITLE: Configuring Rust Build for Hermit Targets - TOML
DESCRIPTION: This configuration specifies the build stages and target triplets for Rust when preparing to compile applications for the Hermit unikernel. It includes setting the host target as well as enabling the use of LLVM tools and the Rust linker.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/hermit.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
target = [
    "<HOST_TARGET>",
    "x86_64-unknown-hermit",
    "aarch64-unknown-hermit",
    "riscv64gc-unknown-hermit",
]

[rust]
lld = true
llvm-tools = true
```

----------------------------------------

TITLE: Enabling Target in Rust Build Configuration
DESCRIPTION: This snippet shows how to specify the powerpc64le target in the `rustc` build configuration using a TOML file. The target is set up to be recognized during the build process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/powerpc64le-unknown-linux-gnu.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["powerpc64le-unknown-linux-gnu"]
```

----------------------------------------

TITLE: External Macro Detection
DESCRIPTION: Shows how to detect and ignore macros from foreign crates using in_external_macro.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/macro_expansions.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
if foo_span.in_external_macro(cx.sess().source_map()) {
    // We should ignore macro from a foreign crate.
    return;
}
```

----------------------------------------

TITLE: Explaining Generic Arguments Symbol Mangling in Rust
DESCRIPTION: Demonstrates how generic arguments, including types and const values, are mangled in a function's symbol.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
fn main() {
    example([123]);
}

fn example<T, const N: usize>(x: [T; N]) {}
```

LANGUAGE: text
CODE:
```
_RINvCsgStHSCytQ6I_7mycrate7examplelKj1_EB2_
  │└──────────────┬───────────────┘││││││
  │               │                │││││└── end of generic-args
  │               │                ││││└─── end of const-data
  │               │                │││└──── const value `1`
  │               │                ││└───── const type `usize`
  │               │                │└────── const generic
  │               │                └─────── generic type i32
  │               └──────────────────────── path to "mycrate::example"
  └──────────────────────────────────────── generic-args
```

----------------------------------------

TITLE: Running x.py Command to Check the Compiler
DESCRIPTION: This snippet presents the command to run 'check' via the x.py build tool, ensuring that most components compile without issues. It is a quick validation step after making changes in the codebase.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
./x check
```

----------------------------------------

TITLE: Configuring rust-analyzer Workspace Discovery Command in JSON
DESCRIPTION: Defines the workspace discovery command configuration for rust-analyzer using JSON, specifying the command to run, progress label for UI display, and file types to watch for build system integration. This setup enables rust-analyzer to automatically detect projects managed outside Cargo by executing custom commands that return project metadata.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_7

LANGUAGE: json
CODE:
```
{
    "rust-analyzer.workspace.discoverConfig": {
        "command": [
            "rust-project",
            "develop-json"
        ],
        "progressLabel": "rust-analyzer",
        "filesToWatch": [
            "BUCK"
        ]
    }
}
```

----------------------------------------

TITLE: Basic Self-Profile Events Usage in Rust
DESCRIPTION: Demonstrates how to enable the self-profiler with specific event types using the -Zself-profile-events flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/self-profile-events.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ rustc -Zself-profile -Zself-profile-events=default,args
```

----------------------------------------

TITLE: Defining Dynamic Suggestions in Rust
DESCRIPTION: This Rust function defines the signature for dynamic suggestions within the suggest-tests tool. Dynamic suggestions take a file path as input and return a vector of suggestions. This allows for greater flexibility and control in generating suggestions based on file modifications.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/suggest-tests.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
fn(&Path) -> Vec<Suggestion>
```

----------------------------------------

TITLE: Incorrect Declaration of simd_shuffle Function in Rust
DESCRIPTION: This code snippet demonstrates the incorrect way of declaring the `simd_shuffle` platform-intrinsic function, which previously resulted in a compiler error. The error occurred because the length of the shuffle wasn't specified in the function name.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0439.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(platform_intrinsics)]

extern "platform-intrinsic" {
    fn simd_shuffle<A,B>(a: A, b: A, c: [u32; 8]) -> B;
    // error: invalid `simd_shuffle`, needs length: `simd_shuffle`
}
```

----------------------------------------

TITLE: Resolving Lexical Region Constraints in Rust
DESCRIPTION: This snippet describes how to resolve lexical region constraints by invoking the `resolve_regions_and_report_errors` method, which finalizes the constraint process and triggers the `lexical_region_resolve` method. It emphasizes the impact of this step on subsequent attempts to equate or create subtyping relationships.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/type-inference.md#2025-04-21_snippet_3

LANGUAGE: Rust
CODE:
```
To solve **lexical** region constraints, you invoke [`resolve_regions_and_report_errors`].  This "closes" the region constraint process and invokes the [`lexical_region_resolve`] code. Once this is done, any further attempt to equate or create a subtyping relationship will yield an ICE.
```

----------------------------------------

TITLE: Using compile_fail with Error Numbers in Rust Doctests
DESCRIPTION: Explains how to use `compile_fail,Exxxx` in a doctest on a nightly build to assert a specific compilation error code is emitted. This is used for verifying error index examples and is not guaranteed to be stable. It's interpreted as plain text on stable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_0

LANGUAGE: Rust
CODE:
```
extern { fn some_func<T>(x: T); }
```

----------------------------------------

TITLE: Configuring and Using Minicore Core Stubs in Rust Tests - Rust
DESCRIPTION: This snippet demonstrates how to configure a codegen or assembly test in Rust to use the minicore auxiliary, which provides core library stubs for cross-compiled targets. It requires the use of specific feature flags (`#![feature(no_core)]`, `#![no_std]`, `#![no_core]`), extern crate declaration of minicore, and the //@ add-core-stubs directive. The test defines a struct that derives Copy provided by minicore, and an unsafe no_mangle function. The test should be compiled with -C panic=abort and -C force-unwind-tables=yes, as unwinding panics are unsupported.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/minicore.md#_snippet_0

LANGUAGE: Rust
CODE:
```
//@ add-core-stubs
//@ revisions: meow bark
//@[meow] compile-flags: --target=x86_64-unknown-linux-gnu
//@[meow] needs-llvm-components: x86
//@[bark] compile-flags: --target=wasm32-unknown-unknown
//@[bark] needs-llvm-components: webassembly

#![crate_type = "lib"]
#![feature(no_core)]
#![no_std]
#![no_core]

extern crate minicore;
use minicore::*;

struct Meow;
impl Copy for Meow {} // `Copy` here is provided by `minicore`

// CHECK-LABEL: meow
#[unsafe(no_mangle)]
fn meow() {}

```

----------------------------------------

TITLE: LLVM Reduction Test Script
DESCRIPTION: Bash script for testing LLVM IR reduction with specific error matching
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/debugging.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
#!/bin/bash
<path/to/your/opt> $1 -load-pass-plugin=/path/to/llvmenzyme-19.so -passes="enzyme" \
    |& grep "/some/path.cpp:686: void llvm::callinst::init"
```

----------------------------------------

TITLE: MIR Assignment and Function Call Example
DESCRIPTION: This MIR snippet demonstrates an assignment and a function call in MIR, showing how temporary variables are used and how function calls are represented as terminators.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/index.md#2025-04-21_snippet_4

LANGUAGE: mir
CODE:
```
bb2: {
    StorageLive(_3);
    _3 = &mut _1;
    _2 = const <std::vec::Vec<T>>::push(move _3, const 1i32) -> [return: bb3, unwind: bb4];
}
```

----------------------------------------

TITLE: Version-Specific UI Test Cases for MSRV-Dependent Lints - Rust
DESCRIPTION: Illustrates how to write UI tests for MSRV-dependent lints by using the #[clippy::msrv = 'version'] attribute on test functions. Each function should trigger the lint if the applicable version requirements are met. This setup is needed for verifying correct lint gating in Clippy's test suite. Place the tests in the lint-specific file under tests/ui. No dependencies beyond standard Clippy testing conventions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_13

LANGUAGE: rust
CODE:
```
#[clippy::msrv = "1.44"]
fn msrv_1_44() {
    /* something that would trigger the lint */
}

#[clippy::msrv = "1.45"]
fn msrv_1_45() {
    /* something that would trigger the lint */
}
```

----------------------------------------

TITLE: Function with Type-Checked Clone Constraint
DESCRIPTION: Demonstrates type checking with a Clone trait bound, where the parameter environment allows proving the trait constraint
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/typing_parameter_envs.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<T: Clone>(a: T) {
    requires_clone(a);
}
```

----------------------------------------

TITLE: Combining Rust Installers with combine-installers.sh
DESCRIPTION: This bash command uses combine-installers.sh to merge multiple installers into a single package. It specifies various parameters including product name, manifest directory, work and output directories, and input tarballs to be combined.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-installer/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
./combine-installers.sh --product-name=Rust \
                        --rel-manifest-dir=rustlib \
                        --success-message=Rust-is-ready-to-roll. \
                        --work-dir=./temp \
                        --output-dir=./dist \
                        --non-installed-overlay=./overlay \
                        --package-name=rustc-nightly-i686-apple-darwin \
                        --legacy-manifest-dirs=rustlib \
                        --input-tarballs=./rustc.tar.gz,cargo.tar.gz
```

----------------------------------------

TITLE: Starting Fuchsia Test Environment
DESCRIPTION: Shell script to initialize and start the Fuchsia test environment using configuration and SDK paths
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_23

LANGUAGE: sh
CODE:
```
( \
    source config-env.sh &&                                                   \
    src/ci/docker/scripts/fuchsia-test-runner.py start                        \
    --rust-build ${RUST_SRC_PATH}/build                                       \
    --sdk ${SDK_PATH}                                                         \
    --target {x86_64-unknown-fuchsia|aarch64-unknown-fuchsia}                 \
    --verbose                                                                 \
)
```

----------------------------------------

TITLE: Creating a Fluent Diagnostic Message with Arguments
DESCRIPTION: Here is a Fluent diagnostic message that includes an argument, allowing for dynamic content in the message. This example shows how the message can be tailored based on context, such as the specific item being referenced.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/translation.md#2025-04-21_snippet_2

LANGUAGE: fluent
CODE:
```
typeck_struct_expr_non_exhaustive =
    cannot create non-exhaustive {$what} using struct expression
```

----------------------------------------

TITLE: Canonical Query Result Structure
DESCRIPTION: This snippet outlines the structure of a canonical query result. It combines certainty, variable values, region constraints, and value data, producing a form suitable for re-applying results in original contexts.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/canonicalization.md#2025-04-21_snippet_6

LANGUAGE: text
CODE:
```
QR = {
    certainty: Proven,             // or whatever
    var_values: [Vec<?E>, '?D, ?E] // this is S
    region_constraints: [?E: '?D], // from the impl
    value: (),                     // for our purposes, just (), but
                                   // in some cases this might have
                                   // a type or other info
}
```

----------------------------------------

TITLE: Installing Josh Proxy for Rust Syncing with Bash
DESCRIPTION: This snippet provides the command to install the Josh proxy which handles changes between the rustc and Miri repositories.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_14

LANGUAGE: sh
CODE:
```
cargo +stable install josh-proxy --git https://github.com/josh-project/josh --tag r24.10.04
```

----------------------------------------

TITLE: Installing Patched Git-Subtree
DESCRIPTION: Commands to clone, build, and install a patched version of git-subtree required for working with rustc. Uses a specific fork that includes necessary fixes for subtree operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/subtree.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
git clone git@github.com:tqc/git.git
cd git
git checkout tqc/subtree
make
make install
cd contrib/subtree
make
cp git-subtree ~/bin
```

----------------------------------------

TITLE: Using pre-built LLVM - Toml
DESCRIPTION: This code snippet shows how to configure Rust to use a pre-built version of LLVM by updating the 'bootstrap.toml' file with the path to the LLVM configuration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/new-target.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[target.x86_64-unknown-linux-gnu]
llvm-config = "/path/to/llvm/llvm-7.0.1/bin/llvm-config"
```

----------------------------------------

TITLE: Running Tidy and Standard Library Tests
DESCRIPTION: Commands to run the tidy script and tests on the standard library or using a specific compiler stage.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
./x test tidy
```

LANGUAGE: text
CODE:
```
./x test --stage 0 library/std
```

LANGUAGE: text
CODE:
```
./x test --stage 0 tidy library/std
```

LANGUAGE: text
CODE:
```
./x test --stage 1 library/std
```

LANGUAGE: text
CODE:
```
./x test --stage 2
```

----------------------------------------

TITLE: Demonstrating Query Dependency Pattern in Rust
DESCRIPTION: This code snippet illustrates how queries can depend on each other conditionally, showing why preserving the execution order is important for the incremental compilation system. It demonstrates a main query that executes different subqueries based on the result of an initial condition.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/incremental-compilation.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main_query(tcx) {
    if tcx.subquery1() {
        tcx.subquery2()
    } else {
        tcx.subquery3()
    }
}
```

----------------------------------------

TITLE: Assessing Function Return Types in Rust
DESCRIPTION: This snippet extends the previous subtyping relationship by adding a return type, demonstrating how type-checking operates under different constraints and ultimately leading to the identification of an error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/placeholders_and_universes.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
for<'a> fn(&'a u32, &'a u32) -> &'a u32
    <: fn(&'!1 u32, &'!2 u32) -> &'!1 u32
```

----------------------------------------

TITLE: Adding ctru-rs Dependency in Cargo.toml
DESCRIPTION: Cargo.toml snippet showing how to add the ctru-rs dependency to a Rust project, which provides access to 3DS-specific APIs and ensures that all necessary symbols are available at link time.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv6k-nintendo-3ds.md#_snippet_2

LANGUAGE: toml
CODE:
```
[dependencies]
ctru-rs = { git = "https://github.com/rust3ds/ctru-rs.git" }
```

----------------------------------------

TITLE: Implementing Error Suggestions in Rust Compiler
DESCRIPTION: Example showing how to create machine-applicable code suggestions using the Diag struct. The code demonstrates error handling with span suggestions and applicability levels.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
let mut err = sess.dcx.struct_span_err(sp, fluent::example::message);

if let Ok(snippet) = sess.source_map().span_to_snippet(sp) {
    err.span_suggestion(
        suggestion_sp,
        fluent::example::try_qux_suggestion,
        format!("qux {}", snippet),
        Applicability::MachineApplicable,
    );
} else {
    err.span_help(suggestion_sp, fluent::example::qux_suggestion);
}

err.emit();
```

----------------------------------------

TITLE: Installing Atom-Beautify Package
DESCRIPTION: Command to install the atom-beautify package in Atom for Rust code formatting functionality
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/atom.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
apm install atom-beautify
```

----------------------------------------

TITLE: Configuring ARM64e Target in Rust Bootstrap
DESCRIPTION: Configuration for enabling the ARM64e Apple Darwin target during Rust build process. Requires adding the target to the bootstrap configuration file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/arm64e-apple-darwin.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["arm64e-apple-darwin"]
```

----------------------------------------

TITLE: Rust Type Relation Example
DESCRIPTION: Shows a type relation example using AOutlivesB trait with lifetime parameters to demonstrate region obligations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/canonicalization.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
(): AOutlivesB<'a, 'b>
```

----------------------------------------

TITLE: Checking External Macro Usage
DESCRIPTION: Example code showing how to check for macros from external crates using in_external_macro.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/macro_expansions.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
#[macro_use]
extern crate a_foreign_crate_with_macros;

// `foo` macro is defined in `a_foreign_crate_with_macros`
foo!("bar");
```

----------------------------------------

TITLE: Complex Higher Ranked Where Clause
DESCRIPTION: Demonstrates nested binders and complex lifetime representations in where clauses
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/instantiating_binders.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn foo<T>()
where
    for<'a> T: Trait<'a, for<'b> fn(&'b T, &'a u32)>
{ ... }
```

----------------------------------------

TITLE: Trait Implementation Example in Rust
DESCRIPTION: Demonstrates a trait implementation for Foo<isize> on usize, used to illustrate the caching mechanism for trait selection
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/caching.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
impl Foo<isize> for usize { ... } \// Impl #22
```

----------------------------------------

TITLE: Completion Implementation Core (Rust)
DESCRIPTION: This function implements the core logic of code completion, collecting the completion context and running a series of independent completion routines to generate completion suggestions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_21

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/ide-completion/src/lib.rs#L148-L229
```

----------------------------------------

TITLE: Installing TypeScript Dependencies for VSCode Extension
DESCRIPTION: Command to install the required TypeScript dependencies for the VSCode extension. This should be run in the 'editors/code' directory of the project.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/debugging.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cd editors/code
npm ci
```

----------------------------------------

TITLE: Struct and Function Definition with Generic Parameters
DESCRIPTION: Example showing how universes work with generic lifetime and type parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/placeholders_and_universes.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
struct Foo { }

fn bar<'a, T>(t: &'a T) {
    ...
}
```

----------------------------------------

TITLE: Checking Iterator Cloned Method Using Type Path
DESCRIPTION: Demonstrates checking trait method implementation using clippy_utils paths when diagnostic or lang items are not available. Uses match_trait_method to check for specific trait method implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/trait_checking.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
use clippy_utils::{match_trait_method, paths};
use rustc_hir::Expr;
use rustc_lint::{LateContext, LateLintPass};

impl LateLintPass<'_> for CheckTokioAsyncReadExtTrait {
    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {
        if match_trait_method(cx, expr, &paths::CORE_ITER_CLONED) {
            println!"`expr` implements `CORE_ITER_CLONED` trait!");
        }
    }
}
```

----------------------------------------

TITLE: Normalizing Where Clauses in Rust
DESCRIPTION: This snippet discusses normalizing where clauses in a `ParamEnv` to ensure correct functionality of Rust's old trait solver. It showcases needing normalized associated types to prove trait bounds. Dependencies include the `Trait` and `Other` traits; input is unnormalized where clauses, and output is a normalized `ParamEnv`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/typing_parameter_envs.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
trait Trait<T> {
    type Assoc;
}

trait Other {
    type Bar;
}

impl<T> Other for T {
    type Bar = u32;
}

// `foo`'s unnormalized `ParamEnv` would be:
// `[T: Sized, U: Sized, U: Trait<T::Bar>]`
fn foo<T, U>(a: U) 
where
    U: Trait<<T as Other>::Bar>,
{
    requires_impl(a);
}

fn requires_impl<U: Trait<u32>>(_: U) {}
```

----------------------------------------

TITLE: Demonstrating Closure Restrictions with Opaque Types in Rust
DESCRIPTION: This code snippet demonstrates a case where an opaque type with an external lifetime is used within a closure. While this specific example compiles in current nightly, it should be considered an error due to potential issues with member constraints.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/opaque-types-region-inference-restrictions.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
type Opaque<'x> = impl Sized + 'x;

fn test<'a>() -> Opaque<'a> {
    let _ = || {
        // `'a` is external to the closure
        let _: Opaque<'a> = ();
        //~^ Should be an error!
    };
    ()
}
```

----------------------------------------

TITLE: Enabling Dataflow State Peeking for Uninitialization in Rust Compiler
DESCRIPTION: This `#[rustc_mir]` attribute applied to a function enables the `rustc_peek` intrinsic calls within that function to query the dataflow state specifically related to the 'maybe uninitialized' analysis. Similar to `rustc_peek_maybe_init`, it triggers an error if the relevant dataflow bit for the Lvalue is not set at the peek point, supporting unit tests for uninitialization analysis.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/mir-dataflow/README.md#_snippet_2

LANGUAGE: Rust
CODE:
```
#[rustc_mir(rustc_peek_maybe_uninit)]
```

----------------------------------------

TITLE: JSON Representation of DiscoverArgument::Path for Workspace Discovery
DESCRIPTION: JSON example representing the 'Path' variant of DiscoverArgument serialized for passing to the rust-analyzer workspace discovery command. It includes the path key with the source file path.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_11

LANGUAGE: json
CODE:
```
{
    "path": "src/main.rs"
}
```

----------------------------------------

TITLE: Updating nightly version in Clippy repository
DESCRIPTION: This snippet demonstrates how to bump the nightly Rust version within the Clippy repository. It includes running a cargo command to update the version, followed by committing the changes to relevant files like rust-toolchain.toml and README.md. This process ensures Clippy remains compatible with the latest nightly Rust updates before submitting a pull request.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/sync.md#_snippet_2

LANGUAGE: bash
CODE:
```
cargo dev sync update_nightly
git commit -m "Bump nightly version -> YYYY-MM-DD" rust-toolchain.toml clippy_utils/README.md
```

----------------------------------------

TITLE: Function Type Example
DESCRIPTION: Example showing the difference between HIR and ty::Ty type representations
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/type_checking.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
fn foo(x: u32) -> u32 { x }
```

----------------------------------------

TITLE: Rust Test Directives Substitution Example
DESCRIPTION: Example of using path substitution in compiler test flags to remap source paths dynamically
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/directives.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
//@ compile-flags: --remap-path-prefix={{src-base}}=/the/src
```

----------------------------------------

TITLE: Using the reg-struct-return Feature Flag in Rust
DESCRIPTION: Example of the -Zreg-struct-return compiler flag for Rust which enables returning small structs in registers instead of on the stack for extern "C"-like functions. This flag is only supported on x86 architecture and is unsound to mix with code not using this flag.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/reg-struct-return.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
-Zreg-struct-return
```

----------------------------------------

TITLE: Tracking Down Incorrect Edges in Dependency Graph
DESCRIPTION: This example demonstrates how to use the `RUST_FORBID_DEP_GRAPH_EDGE` environment variable to identify incorrect edges in the dependency graph by setting specific filters. The backtrace helps in tracking the source of the erroneous edges when running the compiler with debug assertions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/incrcomp-debugging.md#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
RUST_FORBID_DEP_GRAPH_EDGE='Hir&foo -> Collect&bar'
```

----------------------------------------

TITLE: Nested If Statement Pattern Matching
DESCRIPTION: Simplified version of collapsible_if lint showing complex nested pattern matching
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
if let ast::ExprKind::If(check, then, None) = &expr.node {
    if then.stmts.len() == 1 {
        if let ast::StmtKind::Expr(inner) | ast::StmtKind::Semi(inner) = &then.stmts[0].node {
            if let ast::ExprKind::If(check_inner, content, None) = &inner.node {
                ...
            }
        }
    }
}
```

----------------------------------------

TITLE: Architecture Support Options for Small Data Threshold
DESCRIPTION: Enum variants representing the different ways target architectures can support small data thresholds. This includes no support, default architecture settings, LLVM module flags, and LLVM arguments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/small-data-threshold.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
SmallDataThresholdSupport::None
SmallDataThresholdSupport::DefaultForArch
SmallDataThresholdSupport::LlvmModuleFlag
SmallDataThresholdSupport::LlvmArg
```

----------------------------------------

TITLE: Demonstrating Stack Probe in Rust
DESCRIPTION: This Rust code example demonstrates the stack probe feature by allocating a large array on the stack. It's used to illustrate how stack clashing protection works in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
fn main() {
    let v: [u8; 16384] = [1; 16384];
    let first = &v[0];
    println!("The first element is: {first}");
}
```

----------------------------------------

TITLE: Shell Functions for JIT Execution
DESCRIPTION: Convenience shell functions for executing Rust code directly from the command line using JIT mode.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/docs/usage.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
function jit_naked() {
    echo "$@" | $cg_clif_dir/dist/rustc-clif - -Zunstable-options -Cllvm-args=jit-mode-Cprefer-dynamic
}

function jit() {
    jit_naked "fn main() { $@ }"
}

function jit_calc() {
    jit 'println!("0x{:x}", ' $@ ');';
}
```

----------------------------------------

TITLE: NLL Solver in Rust
DESCRIPTION: This snippet discusses the functioning of the NLL solver within the MIR type-checker, which uses canonical queries for solving traits. It explains the use of `take_and_reset_region_constraints` at the end of the process to extract outlives constraints, and how this prepares the NLL solver for analyzing region variable origins with `take_region_var_origins`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/type-inference.md#2025-04-21_snippet_4

LANGUAGE: Rust
CODE:
```
The NLL solver (actually, the MIR type-checker) does things slightly differently. It uses canonical queries for trait solving which use [`take_and_reset_region_constraints`] at the end. This extracts all of the outlives constraints added during the canonical query.
```

----------------------------------------

TITLE: MIR Representation of Variable Declarations
DESCRIPTION: This MIR snippet shows how variable declarations are represented in MIR, including the return place, user-defined variables, and temporary values.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/index.md#2025-04-21_snippet_1

LANGUAGE: mir
CODE:
```
let mut _0: ();                      // return place
let mut _1: std::vec::Vec<i32>;      // in scope 0 at src/main.rs:2:9: 2:16
let mut _2: ();
let mut _3: &mut std::vec::Vec<i32>;
let mut _4: ();
let mut _5: &mut std::vec::Vec<i32>;
```

----------------------------------------

TITLE: Setting VITASDK Environment Variable
DESCRIPTION: This command sets the `VITASDK` environment variable, which specifies the location of the VITASDK toolchain. This is required for `cargo-vita` to find the necessary tools for building Vita-compatible executables.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7-sony-vita-newlibeabihf.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
"export VITASDK=/opt/vitasdk"
```

----------------------------------------

TITLE: Building Rust Documentation
DESCRIPTION: This command builds the standard library documentation for Rust at a specific stage, and opens it automatically in your default browser. It supports documentation development and verification.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/contributing.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
x doc --stage 0 library --open
```

----------------------------------------

TITLE: Trait for Visibility in AST Nodes - Rust
DESCRIPTION: This snippet defines the `HasVisibility` trait, which adds functionality to AST nodes to retrieve visibility information. It implements this trait for the `FnDef` type, showing how to extract visibility attributes from function definitions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/syntax.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
trait HasVisibility: AstNode {
    fn visibility(&self) -> Option<Visibility>;
}

impl HasVisibility for FnDef {
    fn visibility(&self) -> Option<Visibility> {
        self.syntax.children().find_map(Visibility::cast)
    }
}
```

----------------------------------------

TITLE: Configuring Trusty Targets with Rustc in TOML
DESCRIPTION: This TOML configuration snippet demonstrates how to set up Trusty targets for compilation using rustc. It specifies the build stage and the target architectures 'aarch64' and 'armv7' for the Trusty operating system. It is used to enable building for Trusty within the Rust compiler build system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/trusty.md#2025-04-21_snippet_0

LANGUAGE: TOML
CODE:
```
[build]
build-stage = 1
target = ["aarch64-unknown-trusty", "armv7-unknown-trusty"]
```

----------------------------------------

TITLE: Creating Outlives Constraints
DESCRIPTION: This snippet shows how to process subtyping constraints to create outlives constraints in Rust's region inference. It highlights the growth of region values based on established relationships.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/placeholders_and_universes.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
Vs = { CFG; end('static) }
V1 = { CFG; end('static), placeholder(1) }
```

----------------------------------------

TITLE: Compiling Test File with Staged Compiler
DESCRIPTION: Use the newly linked stage1 toolchain to compile a Rust test file
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/quickstart.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
rustc +stage1 testfile.rs
```

----------------------------------------

TITLE: Drop Elaboration Mechanism - Rust
DESCRIPTION: This code illustrates the concept of drop elaboration, which involves managing 'drop flags' for variables to ensure effective drop operations at runtime. It highlights the transformation of MIR to include conditions around drop behavior.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/drop-elaboration.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
One valid model for these rules is to keep a boolean flag (a "drop flag") for every structural path that is used at any point in the function. This flag is set when its path is initialized and is cleared when the path is moved from. When a `Drop` occurs, we check the flags for every obligation associated with the target of the `Drop` and call the associated `Drop` impl for those that are still applicable.
```

----------------------------------------

TITLE: Configuration management in Rustfmt using macros and enums
DESCRIPTION: This snippet explains how Rustfmt handles user configuration options through a dedicated module. It highlights the use of the `create_config!` macro to define options, the handling of various enums for configuration parameters, and the process of parsing configuration files. Functions access config values via methods like `config.max_width()` to customize formatting behavior.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Contributing.md#_snippet_6

LANGUAGE: Rust
CODE:
```
Rustfmt strives to be highly configurable. Often the first part of a patch is creating a configuration option for the feature you are implementing. All handling of configuration options is done in [src/config/mod.rs](src/config/mod.rs). Look for the `create_config!` macro at the end of the file for all the options. The rest of the file defines a bunch of enums used for options, and the machinery to produce the config struct and parse a config file, etc. Checking an option is done by accessing the correct field on the config struct, e.g., `config.max_width()`. Most functions have a `Config`, or one can be accessed via a visitor or context of some kind.
```

----------------------------------------

TITLE: Defining a Basic MIR Pass in Rust
DESCRIPTION: Example of defining a basic MIR pass called RemoveStorageMarkers. This pass walks the MIR and removes all storage marks if they won't be emitted during codegen.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/passes.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub struct RemoveStorageMarkers;
```

----------------------------------------

TITLE: Enabling Control Flow Guard for Rust Standard Library (PowerShell)
DESCRIPTION: This PowerShell script demonstrates how to enable Control Flow Guard for the Rust standard library using cargo's build-std functionality. It installs the nightly toolchain, adds the rust-src component, sets the RUSTFLAGS environment variable, and builds the project with CFG enabled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/control-flow-guard.md#2025-04-21_snippet_1

LANGUAGE: powershell
CODE:
```
rustup toolchain install --force nightly
rustup component add rust-src
$Env:RUSTFLAGS = "-Z control-flow-guard"
cargo +nightly build -Z build-std --target x86_64-pc-windows-msvc
```

----------------------------------------

TITLE: Checking Drop Trait Implementation Using Lang Items
DESCRIPTION: Shows how to verify if an expression implements the Drop trait using lang items. Utilizes the LateContext's TyCtxt to access language items and the implements_trait utility function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/trait_checking.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use clippy_utils::implements_trait;
use rustc_hir::Expr;
use rustc_lint::{LateContext, LateLintPass};

impl LateLintPass<'_> for CheckDropTraitLint {
    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {
        let ty = cx.typeck_results().expr_ty(expr);
        if cx.tcx.lang_items()
            .drop_trait()
            .map_or(false, |id| implements_trait(cx, ty, id, &[])) {
                println!"`expr` implements `Drop` trait!");
            }
    }
}
```

----------------------------------------

TITLE: Pattern Structure Alternatives, Sequences, and Optionals in Rust
DESCRIPTION: The code defines the `Alt`, `Seq`, and `Opt` data structures used for handling pattern variations in PatternTree. It shows how alternatives, sequences, and optional elements are represented within the hierarchical pattern system. This is essential for building pattern representations using Rust's memory-safe language features.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
pub enum Alt<T> {
    Any,
    Elmt(Box<T>),
    Alt(Box<Self>, Box<Self>),
    Named(Box<Self>, ...)
}

pub enum Opt<T> {
    Any,  // anything, but not None
    Elmt(Box<T>),
    None,
    Alt(Box<Self>, Box<Self>),
    Named(Box<Self>, ...)
}

pub enum Seq<T> {
    Any,
    Empty,
    Elmt(Box<T>),
    Repeat(Box<Self>, RepeatRange),
    Seq(Box<Self>, Box<Self>),
    Alt(Box<Self>, Box<Self>),
    Named(Box<Self>, ...)
}

pub struct RepeatRange {
    pub start: usize,
    pub end: Option<usize>  // exclusive
}
```

----------------------------------------

TITLE: Multiline Blocks - True
DESCRIPTION: Demonstrates how closures and match arm bodies are formatted when `force_multiline_blocks` is set to `true`. They are forced to be wrapped in blocks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Configurations.md#2025-04-21_snippet_19

LANGUAGE: rust
CODE:
```
fn main() {
    result.and_then(|maybe_value| {
        match maybe_value {
            None => foo(),
            Some(value) => bar(),
        }
    });

    match lorem {
        None => {
            |ipsum| {
                println!("Hello World");
            }
        }
        Some(dolor) => foo(),
    }
}
```

----------------------------------------

TITLE: Type-Checking Example with Borrow Trait in Rust
DESCRIPTION: This example demonstrates how the `Borrow` trait is used in type-checking with inference variables. The initial call to `foo` results in an ambiguous trait query because the types of the vector and option are not yet fully known, while the subsequent assignment to `u` constrains the type variable, leading to a proven trait obligation after refreshing the query.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/canonical-queries.md#2025-04-21_snippet_1

LANGUAGE: rust,ignore
CODE:
```
"fn foo<A, B>(a: A, vec_b: Option<B>) where A: Borrow<B> { }\n\nfn main() {\n    let mut t: Vec<_> = vec![]; // Type: Vec<?T>\n    let mut u: Option<_> = None; // Type: Option<?U>\n    foo(t, u); // Example 1: requires `Vec<?T>: Borrow<?U>`\n    ...\n}"
```

LANGUAGE: rust,ignore
CODE:
```
"fn foo<A, B>(a: A, vec_b: Option<B>) where A: Borrow<B> { }\n\nfn main() {\n    // What we saw before:\n    let mut t: Vec<_> = vec![]; // Type: Vec<?T>\n    let mut u: Option<_> = None; // Type: Option<?U>\n    foo(t, u); // `Vec<?T>: Borrow<?U>` => ambiguous\n\n    // New stuff:\n    u = Some(vec![]); // ?U = Vec<?V>\n}"
```

----------------------------------------

TITLE: Defining Typing Context in Rust Compiler
DESCRIPTION: This Rust snippet illustrates how the type context (`tcx`) is defined within the compiler, demonstrating its role as a central data structure interfacing with arena-allocated data. The `TyCtxt` struct includes a lifetime parameter, an essential aspect in the memory management of arena-allocated data.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/memory.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
tcx: TyCtxt<'tcx>
//          ----
//          |
//          arena lifetime
```

----------------------------------------

TITLE: Building Rust Compiler and Tools
DESCRIPTION: Command to build the Rust compiler, standard library, rustdoc, and rustfmt using the x.py build script. This step is crucial for incorporating local changes into the Rust toolchain.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/docs/rustc_testing.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
python x.py build --stage=2 compiler library/std src/tools/rustdoc src/tools/rustfmt
```

----------------------------------------

TITLE: Running Entire Test Suite
DESCRIPTION: This command allows running all tests within the Miri test suite, again with the option to specify a target architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_4

LANGUAGE: Shell
CODE:
```
./miri test
```

LANGUAGE: Shell
CODE:
```
./miri test --target i686-unknown-linux-gnu
```

----------------------------------------

TITLE: Xtensa Target Names Table in Markdown
DESCRIPTION: Markdown table showing the mapping between Xtensa target names and their corresponding CPU models, specifically for ESP32 variants.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/xtensa.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| Target name               | Target CPU(s)                                                   |
| ------------------------- | --------------------------------------------------------------- |
| `xtensa-esp32-none-elf`   | [ESP32](https://www.espressif.com/en/products/socs/esp32)       |
| `xtensa-esp32s2-none-elf` | [ESP32-S2](https://www.espressif.com/en/products/socs/esp32-s2) |
| `xtensa-esp32s3-none-elf` | [ESP32-S3](https://www.espressif.com/en/products/socs/esp32-s3) |
```

----------------------------------------

TITLE: ADT Type Representation in Rust Compiler
DESCRIPTION: Illustrates how the Rust compiler internally represents ADT types using AdtDef and GenericArgs, showing the two-part structure of generic type representation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/generic_arguments.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
Adt(&'tcx AdtDef, GenericArgs<'tcx>)
```

----------------------------------------

TITLE: Example of a Coinductive Goal
DESCRIPTION: This snippet demonstrates a co-inductive goal using the `Send` trait and a recursive struct `Foo`. It shows how the solver can determine that `Foo` is `Send` even though the check requires recursively proving `Foo` is `Send`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/goals-and-clauses.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
"struct Foo {
    next: Option<Box<Foo>>
}"
```

----------------------------------------

TITLE: Running Rust Program with SPARC Simulator
DESCRIPTION: Illustrates a workflow using cargo to run a Rust program on a SPARC simulator. Utilizes TSIM Leon3 for simulation, showing console interactions and executing the compiled binary.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/sparc-unknown-none-elf.md#2025-04-21_snippet_5

LANGUAGE: Console
CODE:
```
$ cargo run --target=sparc-unknown-none-elf
   Compiling sparc-demo-rust v0.1.0 (/work/sparc-demo-rust)
    Finished dev [unoptimized + debuginfo] target(s) in 3.44s
     Running `tsim-leon3 target/sparc-unknown-none-elf/debug/sparc-demo-rust`

 TSIM3 LEON3 SPARC simulator, version 3.1.9 (evaluation version)

 Copyright (C) 2023, Frontgrade Gaisler - all rights reserved.
 This software may only be used with a valid license.
 For latest updates, go to https://www.gaisler.com/
 Comments or bug-reports to support@gaisler.com

 This TSIM evaluation version will expire 2023-11-28

Number of CPUs: 2
system frequency: 50.000 MHz
icache: 1 * 4 KiB, 16 bytes/line (4 KiB total)
dcache: 1 * 4 KiB, 16 bytes/line (4 KiB total)
Allocated 8192 KiB SRAM memory, in 1 bank at 0x40000000
Allocated 32 MiB SDRAM memory, in 1 bank at 0x60000000
Allocated 8192 KiB ROM memory at 0x00000000
section: .text, addr: 0x40000000, size: 20528 bytes
section: .rodata, addr: 0x40005030, size: 128 bytes
section: .data, addr: 0x400050b0, size: 1176 bytes
read 347 symbols

tsim> run
  Initializing and starting from 0x40000000
Hello, this is Rust!

  Program exited normally on CPU 0.
tsim>
```

----------------------------------------

TITLE: Defining AST Node Trait - Rust
DESCRIPTION: This snippet defines the `AstNode` trait for concrete nodes in the AST layer, providing methods for casting syntax nodes and accessing them. It establishes the framework for concrete syntax nodes like function definitions (FnDef) and demonstrates type-safe handling of AST nodes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/syntax.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
pub trait AstNode {
    fn cast(syntax: SyntaxNode) -> Option<Self>
    where
        Self: Sized;

    fn syntax(&self) -> &SyntaxNode;
}
```

----------------------------------------

TITLE: FileCheck Revision Annotation in Rust
DESCRIPTION: Demonstrates how to specify test revisions and compile-specific flags for different test variations
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/codegen/README.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// revisions: aaa bbb
// [bbb] compile-flags: --flags-for-bbb
```

----------------------------------------

TITLE: Compiled Caller Location Example in Rust
DESCRIPTION: Demonstrates how the compiler transforms tracked caller code into actual implementation with location parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/implicit-caller-location.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(panic_internals)]
use std::panic::Location;

fn print_caller(caller: &Location) {
    println!("called from {}", caller);
}

fn main() {
    print_caller(&Location::internal_constructor(file!(), line!(), column!()));
}
```

----------------------------------------

TITLE: Trait Conversion with Type Parameter Confirmation
DESCRIPTION: Showcases trait implementation with type parameter conversion, highlighting the confirmation phase of trait resolution where type compatibility is checked
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/resolution.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
trait Convert<Target> {
    fn convert(&self) -> Target;
}

impl Convert<usize> for isize { ... } // isize -> usize
impl Convert<isize> for usize { ... } // usize -> isize

let x: isize = ...;
let y: char = x.convert(); // NOTE: `y: char` now!
```

----------------------------------------

TITLE: Starting Fuchsia Emulator
DESCRIPTION: Commands to start a Fuchsia emulator using ffx.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_16

LANGUAGE: sh
CODE:
```
${SDK_PATH}/tools/${ARCH}/ffx product-bundle get workstation_eng.qemu-${ARCH}
${SDK_PATH}/tools/${ARCH}/ffx emu start workstation_eng.qemu-${ARCH} --headless
```

----------------------------------------

TITLE: Configuring DFSan for Tcmalloc Slab Functions in Rust
DESCRIPTION: This snippet marks Tcmalloc slab-related functions as uninstrumented and discarded for DFSan. These functions handle internal memory management operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/sanitizer/dataflow-abilist.txt#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
fun:TcmallocSlab_Internal_PushBatch_FixedShift=uninstrumented
fun:TcmallocSlab_Internal_PushBatch_FixedShift=discard
fun:TcmallocSlab_Internal_PushBatch_FixedShift_VCPU=uninstrumented
fun:TcmallocSlab_Internal_PushBatch_FixedShift_VCPU=discard
fun:TcmallocSlab_Internal_PerCpuCmpxchg64=uninstrumented
fun:TcmallocSlab_Internal_PerCpuCmpxchg64=discard
fun:TcmallocSlab_Internal_PerCpuCmpxchg64_VCPU=uninstrumented
fun:TcmallocSlab_Internal_PerCpuCmpxchg64_VCPU=discard
fun:TcmallocSlab_Internal_PopBatch_FixedShift=uninstrumented
fun:TcmallocSlab_Internal_PopBatch_FixedShift=discard
fun:TcmallocSlab_Internal_PopBatch_FixedShift_VCPU=uninstrumented
fun:TcmallocSlab_Internal_PopBatch_FixedShift_VCPU=discard
```

----------------------------------------

TITLE: Tagging the Stable Commit - Bash
DESCRIPTION: This command sequence creates and pushes a tag for the stable release. The tag name follows the format `rust-1.XX.0`, where `XX` should be replaced with the corresponding Rust version.  `upstream` refers to the `rust-lang/rust-clippy` remote.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/release.md#_snippet_6

LANGUAGE: bash
CODE:
```
git tag rust-1.XX.0               # XX should be exchanged with the corresponding version
git push upstream rust-1.XX.0     # `upstream` is the `rust-lang/rust-clippy` remote
```

----------------------------------------

TITLE: Building Rust Project for x64 UWP using build-std (PowerShell)
DESCRIPTION: This snippet demonstrates the command to build a Rust project for the x86_64 UWP target using the `cargo` command with the `build-std` option. It allows including specific components for the build, such as `std` and `panic_abort`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/uwp-windows-msvc.md#2025-04-21_snippet_1

LANGUAGE: pwsh
CODE:
```
cargo build -Z build-std=std,panic_abort --target x86_64-uwp-windows-msvc
```

----------------------------------------

TITLE: Checking for Trait Implementation as a Diagnostic Item in Rust
DESCRIPTION: This snippet illustrates how to verify if a given `DefId` belongs to a trait implementation defined by a diagnostic item, utilizing the `TyCtxt::is_diagnostic_item()` method.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/diagnostic-items.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
/// This example checks if a given [`DefId`] from a method is part of a trait
/// implementation defined by a diagnostic item.
fn is_diag_trait_item(
    cx: &LateContext<'_>,
    def_id: DefId,
    diag_item: Symbol
) -> bool {
    if let Some(trait_did) = cx.tcx.trait_of_item(def_id) {
        return cx.tcx.is_diagnostic_item(diag_item, trait_did);
    }
    false
}
```

----------------------------------------

TITLE: Checking Expressions with Pattern Lints
DESCRIPTION: This snippet demonstrates checking an expression with a pattern lint in Rust using procedural blocks such as if_chain!. It leverages Rust's AST structures for pattern matching.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {
    if let Some(result) = pat_if_without_else(expr) {
        if !block_starts_with_comment(cx, result.then) {
            ...
        }
    }
}
```

----------------------------------------

TITLE: Generating Closer HIR Representation in Rust
DESCRIPTION: This bash command generates a HIR representation that closely aligns with the original source code expressions. Like the previous command, it requires cargo to be set up to run rustc with the specified configurations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/hir.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cargo rustc -- -Z unpretty=hir
```

----------------------------------------

TITLE: Configuring Cargo for WALI Linker (TOML)
DESCRIPTION: This snippet describes how to configure the Cargo build tool for linking WALI programs using the LLVM linker. It displays a sample `config.toml` for Cargo where the linker path is directed to lld in the LLVM build within the WALI repo. This setup is necessary for compatibility with the WALI toolchain until LLVM updates are fully integrated.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-wali-linux.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[target.wasm32-wali-linux-musl]
linker = "<WALI>/llvm-project/build/bin/lld"
```

----------------------------------------

TITLE: Defining MatchingBraceParams Interface for Matching Brace Operation
DESCRIPTION: Defines the parameters for finding matching braces, supporting multiple cursor positions. This extension helps navigate between paired delimiters in code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
interface MatchingBraceParams {
    textDocument: TextDocumentIdentifier,
    /// Position for each cursor
    positions: Position[],
}
```

----------------------------------------

TITLE: Lowering Invariants and Requirements
DESCRIPTION: Critical rules and constraints for maintaining AST to HIR conversion integrity, ensuring proper node ID handling and scope management
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ast-lowering.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
1. A `HirId` must be used if created
2. Lowering a `HirId` must be done in the scope of the *owning* item
3. A `NodeId` placed into a HIR structure must be lowered
4. New nodes must have new ids created via `next_id` method
```

----------------------------------------

TITLE: Manual Rustc Compilation with GCC Backend
DESCRIPTION: A manual command showing how to invoke rustc with the necessary environment variables and flags to use the GCC codegen backend.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
$ LIBRARY_PATH="[gcc-path value]" LD_LIBRARY_PATH="[gcc-path value]" rustc +$(cat $CG_GCCJIT_DIR/rust-toolchain | grep 'channel' | cut -d '=' -f 2 | sed 's/"//g' | sed 's/ //g') -Cpanic=abort -Zcodegen-backend=$CG_GCCJIT_DIR/target/release/librustc_codegen_gcc.so --sysroot $CG_GCCJIT_DIR/build_sysroot/sysroot my_crate.rs
```

----------------------------------------

TITLE: Defining a New Diagnostic Item in Rust
DESCRIPTION: This snippet demonstrates how to add a new diagnostic item to a struct in Rust using the `rustc_diagnostic_item` attribute, ensuring that it does not cause compilation errors during tests by using `cfg_attr`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/diagnostic-items.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// This will be the new diagnostic item        vvv
#[cfg_attr(not(test), rustc_diagnostic_item = "Cat")]
struct Cat;
```

----------------------------------------

TITLE: Issuing New Rust Error
DESCRIPTION: This Rust code shows how to issue a new error using the `struct_span_code_err!` macro. It requires a `DiagCtxt`, a span indicating the location of the error, the error code, and a fluent key for the error message. The `.emit()` call actually issues the error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/error-codes.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
struct_span_code_err!(self.dcx(), // some path to the `DiagCtxt` here
                 span, // whatever span in the source you want
                 E0592, // your new error code
                 fluent::example::an_error_message)
    .emit() // actually issue the error

```

----------------------------------------

TITLE: Encoding PathBuf Initialization in Rust
DESCRIPTION: The example demonstrates the mangled symbol encoding for `PathBuf::new` within a specific crate, highlighting the structure of the mangled symbol for a function in Rust's standard library and its recommendation for demangling. No dependencies are required, and the inputs and outputs focus on encoding and identifying symbol paths within a crate.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
std::path::PathBuf::new();
```

----------------------------------------

TITLE: Outlives Constraint Example
DESCRIPTION: Illustrates how outlives constraints, such as `R1: R2`, imply that the value of `R1` must be a superset of the value of `R2`.  The example code showcases a scenario where multiple outlives relationships (e.g., `R1: R2`, `R2: R3`, `R3: R4`, `R4: R1`) lead to the conclusion that all involved regions must be equal (`R1 = R2 = R3 = R4`).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/constraint_propagation.md#2025-04-21_snippet_0

LANGUAGE: Text
CODE:
```

R1: R2
R2: R3
R3: R4
R4: R1

```

----------------------------------------

TITLE: Demonstrating Invalid Meta-Item Usage in Rust Deprecated Attribute (Error E0539)
DESCRIPTION: This code example shows an invalid use of the deprecated attribute where 'note' is provided without a value, which previously triggered error E0539. The compiler expects key-value pairs in attribute meta-items.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0551.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[deprecated(note)] // error!
fn i_am_deprecated() {}
```

----------------------------------------

TITLE: Profiling Rust Compiler with Samply
DESCRIPTION: Shows how to profile the Rust compiler using the Samply sampling profiler via the 'samply' subcommand of 'x perf'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_rustc_perf.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
./x perf samply
```

----------------------------------------

TITLE: Invalid C-cmse-nonsecure-call ABI Usage Example in Rust
DESCRIPTION: Demonstrates an erroneous attempt to use the C-cmse-nonsecure-call ABI directly with a function definition. This will fail with error E0781 as this ABI is restricted to function pointer usage only.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0781.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(abi_c_cmse_nonsecure_call)]

pub extern "C-cmse-nonsecure-call" fn test() {}
```

----------------------------------------

TITLE: Running Rust Compiler UI Tests
DESCRIPTION: Execute UI tests for the Rust compiler using the 'x' test command, focusing on specific test directories
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/quickstart.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
./x test tests/ui
```

----------------------------------------

TITLE: Demonstrating Invalid Syntax in llvm_asm Macro (Rust)
DESCRIPTION: This code snippet demonstrates the invalid syntax that would have previously triggered the deprecated error code. It attempts to use the llvm_asm macro with incorrect syntax in the second argument.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0661.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
let a;
llvm_asm!("nop" : "r"(a));
```

----------------------------------------

TITLE: Re-export Data Structure Example in JSON
DESCRIPTION: Example JSON structure showing how re-exported items are represented in the search index, demonstrating path tracking and canonical path storage.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustdoc-internals/search.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
[
    [ "crate_name", {
        "doc": "Documentation",
        "n": ["Data", "Data"],
        "t": "FF",
        "d": ["The data struct", "The data struct"],
        "q": [[0, "crate_name"], [1, "crate_name::submodule"]],
        "i": [0, 0],
        "p": [],
        "f": """",
        "b": [],
        "c": [],
        "a": [],
        "r": [[0, 1]],
    }]
]
```

----------------------------------------

TITLE: Implementing Parent Module Lookup in Rust
DESCRIPTION: This Rust code snippet demonstrates how the parent module information is stored and retrieved in the search index. It iterates through the search index entries and updates the parent module based on the 'q' field.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustdoc-internals/search.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let mut parent_module = "";
for (i, entry) in search_index.iter().enumerate() {
    if q.contains(i) {
        parent_module = q.get(i);
    }
    // ... do other stuff with `entry` ...
}
```

----------------------------------------

TITLE: Git Error: Uncommitted Changes During Rebase (Console)
DESCRIPTION: This output indicates that you attempted a rebase operation while having uncommitted changes in your working directory. Git requires a clean working tree to perform a rebase.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_4

LANGUAGE: console
CODE:
```
error: cannot pull with rebase: Your index contains uncommitted changes.
error: please commit or stash them.
```

----------------------------------------

TITLE: Handling File Changes in Rust
DESCRIPTION: This code showcases how to define a Change object, which contains file changes that need to be applied through the AnalysisHost. The Change object serves as a wrapper around file modifications, essential for input management within rust-analyzer.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
// Defining a change that wraps a file modification
let change = Change::change_file(file_id, Some(Arc::new(new_content)));
```

----------------------------------------

TITLE: Viewing Diff Ignoring Whitespace (Git Console)
DESCRIPTION: Displays changes between the current branch and `origin/master`, ignoring differences in whitespace. This is a useful technique for reviewing pull requests locally to focus on functional changes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_22

LANGUAGE: console
CODE:
```
git diff -w origin/master
```

----------------------------------------

TITLE: Rust FileSymbol for Struct
DESCRIPTION: This snippet shows an example of a `FileSymbol` struct representing a struct named `StructInModB`. It includes the struct's definition (`Adt(Struct(...))`), location in the source file (`DeclarationLocation`), and other flags. The definition provides the struct's ID, and the location specifies the file, node type, and range of the struct's name.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
{
    name: "StructInModB",
    def: Adt(
        Struct(
            Struct {
                id: StructId(
                    4,
                ),
            },
        ),
    ),
    loc: DeclarationLocation {
        hir_file_id: EditionedFileId(
            FileId(
                1,
            ),
            Edition2021,
        ),
        ptr: SyntaxNodePtr {
            kind: STRUCT,
            range: 0..20,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 7..19,
            },
        ),
    },
    container_name: None,
    is_alias: false,
    is_assoc: false,
}
```

----------------------------------------

TITLE: LocalAnalyzer Structure Definition
DESCRIPTION: Analysis structure with multiple lifetime parameters needed for borrow checking in the generic backend implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/backend-agnostic.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
struct LocalAnalyzer<'mir, 'a, 'tcx> {
  /* ... */
}
```

----------------------------------------

TITLE: Defining Crate Metadata for Proc Macro - Rust
DESCRIPTION: Defines the `CrateData` structure for the `proc_macro` crate (index 4). It includes the Rust edition (`Edition2021`), standard compiler configuration flags (`debug_assertions`, `miri`, `true`), and its dependencies on the `std` (index 6) and `core` (index 1) crates. This crate is essential for defining procedural macros.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_cfg_groups.txt#_snippet_4

LANGUAGE: Rust
CODE:
```
4: CrateData {
    root_file_id: FileId(
        5,
    ),
    edition: Edition2021,
    version: None,
    display_name: Some(
        CrateDisplayName {
            crate_name: CrateName(
                "proc_macro",
            ),
            canonical_name: "proc_macro",
        },
    ),
    cfg_options: CfgOptions(
        [
            "debug_assertions",
            "miri",
            "true",
        ],
    ),
    potential_cfg_options: None,
    env: Env {
        entries: {},
    },
    dependencies: [
        Dependency {
            crate_id: Idx::<CrateData>(6),
            name: CrateName(
                "std",
            ),
            prelude: true,
            sysroot: false,
        },
        Dependency {
            crate_id: Idx::<CrateData>(1),
            name: CrateName(
                "core",
            ),
            prelude: true,
            sysroot: false,
        },
    ],
    origin: Lang(
        ProcMacro,
    ),
    is_proc_macro: false,
    proc_macro_cwd: None,
}
```

----------------------------------------

TITLE: Programmatic Type Creation
DESCRIPTION: Example of creating a slice type programmatically using Ty::new methods
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/type_checking.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
use rustc_middle::ty::Ty;
// assume we have access to a LateContext
let ty = Ty::new_slice(cx.tcx, Ty::new_u8());
```

----------------------------------------

TITLE: Markdown Documentation for Crater Testing
DESCRIPTION: Comprehensive documentation explaining the Crater testing system, including when to use it, how to request runs, and important caveats about its limitations. Covers different types of test runs and their respective durations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/crater.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Crater

[Crater](https://github.com/rust-lang/crater) is a tool for compiling and
running tests for _every_ crate on [crates.io](https://crates.io) (and a few on
GitHub). It is mainly used for checking the extent of breakage when implementing
potentially breaking changes and ensuring lack of breakage by running beta vs
stable compiler versions.

## When to run Crater

You should request a crater run if your PR makes large changes to the compiler
or could cause breakage. If you are unsure, feel free to ask your PR's reviewer.

## Requesting Crater Runs

The rust team maintains a few machines that can be used for running crater runs
on the changes introduced by a PR. If your PR needs a crater run, leave a
comment for the triage team in the PR thread. Please inform the team whether you
require a "check-only" crater run, a "build only" crater run, or a
"build-and-test" crater run. The difference is primarily in time; the
conservative (if you're not sure) option is to go for the build-and-test run. If
making changes that will only have an effect at compile-time (e.g., implementing
a new trait) then you only need a check run.

Your PR will be enqueued by the triage team and the results will be posted when
they are ready. Check runs will take around ~3-4 days, with the other two taking
5-6 days on average.

While crater is really useful, it is also important to be aware of a few
caveats:

- Not all code is on crates.io! There is a lot of code in repos on GitHub and
  elsewhere. Also, companies may not wish to publish their code. Thus, a
  successful crater run is not a magically green light that there will be no
  breakage; you still need to be careful.

- Crater only runs Linux builds on x86_64. Thus, other architectures and
  platforms are not tested. Critically, this includes Windows.

- Many crates are not tested. This could be for a lot of reasons, including that
  the crate doesn't compile any more (e.g. used old nightly features), has
  broken or flaky tests, requires network access, or other reasons.

- Before crater can be run, `@bors try` needs to succeed in building artifacts.
  This means that if your code doesn't compile, you cannot run crater.
```

----------------------------------------

TITLE: Simple Empty Function Definition in Rust
DESCRIPTION: Defines an empty function named 'blah' with line number prefix '4 4 1'
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/tests/writemode/target/modified.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn blah() {}
```

----------------------------------------

TITLE: Analyzing MIR Borrowck Time with perf-focus
DESCRIPTION: Example of using perf-focus to determine what percentage of execution time was spent in the do_mir_borrowck function. This shows how to query specific function performance.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
$ perf focus '{do_mir_borrowck}'
Matcher    : {do_mir_borrowck}
Matches    : 228
Not Matches: 542
Percentage : 29%
```

----------------------------------------

TITLE: Discarding Impl Candidates in New Rust Trait Solver
DESCRIPTION: In the new trait solver, if there is at least one ParamEnv or AliasBound candidate to prove a Trait goal, all impl candidates for both Trait and Projection goals are discarded.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/significant-changes.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
// Source: discard-from-env
if !env_candidates.is_empty() {
    candidates.retain(|c| matches!(c, Candidate::ParamEnv(_) | Candidate::AliasBound(_)));
}
```

----------------------------------------

TITLE: Emit MIR Diff for a Specific Optimization - Rust
DESCRIPTION: This code snippet instructs the test runner to emit a diff of the MIR before and after a specified optimization. The diff is saved to the specified file. This is the most common approach for observing the effect of an optimization pass on the MIR code.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/mir-opt/README.md#_snippet_2

LANGUAGE: Rust
CODE:
```
// EMIT_MIR $file_name_of_some_mir_dump.diff
```

----------------------------------------

TITLE: Tagging Issues with Rustbot
DESCRIPTION: These are example commands for tagging an issue as appropriate for a notification group using rustbot. Each command pings a specific group by name, notifying the members of that group. These commands are typically used during compiler team triage.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/about.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
@rustbot ping apple
@rustbot ping arm
@rustbot ping cleanup-crew
@rustbot ping emscripten
@rustbot ping icebreakers-llvm
@rustbot ping risc-v
@rustbot ping wasi
@rustbot ping wasm
@rustbot ping windows
```

----------------------------------------

TITLE: Running GNU Style Check
DESCRIPTION: Validates the generated patch file against GNU coding style guidelines
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/sending-gcc-patch.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
contrib/check_GNU_style.sh 0001-your-patch.patch
```

----------------------------------------

TITLE: HTML Search Form Implementation in JavaScript
DESCRIPTION: JavaScript function to handle search form submission and URL routing based on selected search option
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/not_found.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
function on_submit(event) {
    var form = event.target;
    var q = form['q'].value;

    event.preventDefault();

    if (form['from'].value === 'duckduckgo') {
        document.location.href = form.action + '?q=' + encodeURIComponent(q + ' site:doc.rust-lang.org');
    } else if (form['from'].value === 'library') {
        document.location.href = '/std/index.html?search=' + encodeURIComponent(q);
    }
}
```

----------------------------------------

TITLE: Displaying Github Label and Ping Command in Markdown
DESCRIPTION: This snippet shows how to format the Github label and ping command for the Windows notification group using Markdown syntax.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/windows.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Github Label:** [O-Windows] <br>
**Ping command:** `@rustbot ping windows`

[O-Windows]: https://github.com/rust-lang/rust/labels/O-Windows
```

----------------------------------------

TITLE: Suppressing Unexpected cfg Warning in Cargo.toml
DESCRIPTION: This snippet shows how to prevent warnings related to the cfg(bootstrap) condition in Rust by updating the Cargo.toml configuration. By adding specific lint configurations, developers can safely use cfg(bootstrap) without facing unexpected warnings.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/bootstrapping/bootstrap-in-dependencies.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(bootstrap)'] }
```

----------------------------------------

TITLE: Building LLVM within Rust Project
DESCRIPTION: These commands are used to build LLVM as part of the Rust build process. The first builds only LLVM, while the second builds the entire Rust compiler toolchain.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/updating-llvm.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
"./x build src/llvm-project"
```

LANGUAGE: bash
CODE:
```
"./x build"
```

----------------------------------------

TITLE: Defining DiscoverProjectData Enum for Workspace Discovery in Rust
DESCRIPTION: Rust enum representing possible outputs of the workspace discovery command for rust-analyzer. The enum variants include Finished (providing buildfile path and project data), Error (error message and optional source), and Progress (status message). It is serialized/deserialized using serde with a 'kind' tag. Provides structured communication between the discovery command and rust-analyzer's workspace handling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_8

LANGUAGE: rust
CODE:
```
#[derive(Debug, Clone, Deserialize, Serialize)]
#[serde(tag = "kind")]
#[serde(rename_all = "snake_case")]
enum DiscoverProjectData {
    Finished { buildfile: Utf8PathBuf, project: ProjectJsonData },
    Error { error: String, source: Option<String> },
    Progress { message: String },
}
```

----------------------------------------

TITLE: Windows Docker Toolbox VirtualBox Configuration
DESCRIPTION: Batch commands to configure VirtualBox for Docker Toolbox on Windows, enabling symbolic link support in shared folders
SOURCE: https://github.com/rust-lang/rust/blob/master/src/ci/docker/README.md#2025-04-21_snippet_3

LANGUAGE: batch
CODE:
```
cd "C:\Program Files\Oracle\VirtualBox"
VBoxManage setextradata default VBoxInternal2/SharedFoldersEnableSymlinksCreate/e/rust 1
```

----------------------------------------

TITLE: Macro Definition Example 2 (Rust)
DESCRIPTION: This example illustrates that `ExpnId` is not isomorphic to `SyntaxContext`. After all expansions, `foo` has context `ROOT -> id(n)` and `bar` has context `ROOT -> id(m) -> id(n)`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/macro-expansion.md#_snippet_3

LANGUAGE: rust
CODE:
```
macro m($i: ident) { macro n() { ($i, bar) } }

m!(foo);
```

----------------------------------------

TITLE: AstId Definition for Position-Independent References (Rust)
DESCRIPTION: This code defines the AstId structure that provides position-independent references to AST nodes, which is key to the source map pattern implementation in Rust Analyzer.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_9

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/hir-expand/src/ast_id_map.rs#L29
```

----------------------------------------

TITLE: Defining RecursiveMemoryLayoutNode Interface in TypeScript
DESCRIPTION: TypeScript interface for nodes in the recursive memory layout tree. Each node represents an item in a data type, containing information about size, alignment, offset, and relationships to other nodes in the hierarchy.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_26

LANGUAGE: typescript
CODE:
```
export interface RecursiveMemoryLayoutNode = {
    /// Name of the item, or [ROOT], `.n` for tuples
    item_name: string;
    /// Full name of the type (type aliases are ignored)
    typename: string;
    /// Size of the type in bytes
    size: number;
    /// Alignment of the type in bytes
    alignment: number;
    /// Offset of the type relative to its parent (or 0 if its the root)
    offset: number;
    /// Index of the node's parent (or -1 if its the root)
    parent_idx: number;
    /// Index of the node's children (or -1 if it does not have children)
    children_start: number;
    /// Number of child nodes (unspecified it does not have children)
    children_len: number;
};

export interface RecursiveMemoryLayout = {
    nodes: RecursiveMemoryLayoutNode[];
};
```

----------------------------------------

TITLE: Building Rust Programs for M68K Target
DESCRIPTION: Command to build Rust programs for the M68K target using Cargo. This uses the cross-compilation setup specified in the Cargo configuration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-none-elf.md#_snippet_5

LANGUAGE: sh
CODE:
```
cargo build --target m68k-unknown-none-elf
```

----------------------------------------

TITLE: Running Error Code Doctests
DESCRIPTION: This shell command executes the error index generator to test examples added in `rustc_error_codes/src/error_codes`.  It ensures the examples are valid and the error messages are correctly formatted.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/error-codes.md#2025-04-21_snippet_4

LANGUAGE: Shell
CODE:
```
./x test ./src/tools/error_index_generator
```

----------------------------------------

TITLE: Implementing Generic Vector Clone in Rust
DESCRIPTION: Example showing trait bound checking for Clone implementation on Vec<T>. The function demonstrates how the trait solver verifies that Vec<T> implements Clone when T has a Clone bound.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/trait-solving.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn uses_vec_clone<T: Clone>(x: Vec<T>) -> (Vec<T>, Vec<T>) {
    (x.clone(), x)
}
```

----------------------------------------

TITLE: Receiver Type Steps Example
DESCRIPTION: Illustrates the progressive dereferencing and potential unsizing steps for method lookup with a complex receiver type
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/method-lookup.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// Receiver type: Rc<Box<[T; 3]>>
// Lookup steps:
1. Rc<Box<[T; 3]>>
2. Box<[T; 3]>
3. [T; 3]
4. [T]
```

----------------------------------------

TITLE: Macro Definition Example 1 (Rust)
DESCRIPTION: This example builds upon the previous one, adding another macro `n` nested inside `m`. It shows how the context of `ident` becomes `ROOT -> id(m) -> id(n)` after both macros are expanded.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/macro-expansion.md#_snippet_2

LANGUAGE: rust
CODE:
```
macro m() { macro n() { ident } }

m!();
n!();
```

----------------------------------------

TITLE: Query Provider Function Signature in Rust Compiler
DESCRIPTION: Shows the standard signature for a query provider function. Providers always take a TyCtxt and the query key as parameters, and return the query result.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/query.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn provider<'tcx>(
    tcx: TyCtxt<'tcx>,
    key: QUERY_KEY,
) -> QUERY_RESULT {
    ...
}
```

----------------------------------------

TITLE: Importing Salsa in Rust
DESCRIPTION: Example of how to import and use Salsa in a Rust project. This code snippet is inferred from the context, as no actual code is provided in the README.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ra-salsa/README.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use salsa::Database;

// Define your queries here

fn main() {
    // Initialize and use Salsa database
}
```

----------------------------------------

TITLE: Filtering Dependency Graph in Rust Compiler
DESCRIPTION: This section describes the syntax for filtering the dependency graph using the `RUST_DEP_GRAPH_FILTER` environment variable. This enables filtering the dependencies to view specific nodes and relations based on provided filters in the graph.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/incrcomp-debugging.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
source_filter     // nodes originating from source_filter
-> target_filter  // nodes that can reach target_filter
source_filter -> target_filter // nodes in between source_filter and target_filter
```

----------------------------------------

TITLE: Compiling C Code for GIMPLE Generation
DESCRIPTION: This console command shows how to compile the C code that generates GIMPLE output. It includes the necessary include and library paths.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/gimple.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
gcc local.c -I `pwd`/gcc/gcc/jit/ -L `pwd`/gcc-build/gcc -lgccjit -o out
```

----------------------------------------

TITLE: Defining Parser Token Source and Tree Sink Interfaces in Rust
DESCRIPTION: Interfaces for managing token input and syntax tree output, providing abstractions for parsing with flexible token handling and tree construction
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/syntax.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
pub struct Token {
    pub kind: SyntaxKind,
    pub is_joined_to_next: bool,
}

pub trait TokenSource {
    fn current(&self) -> Token;
    fn lookahead_nth(&self, n: usize) -> Token;
    fn is_keyword(&self, kw: &str) -> bool;

    fn bump(&mut self);
}

pub trait TreeSink {
    fn token(&mut self, kind: SyntaxKind, n_tokens: u8);

    fn start_node(&mut self, kind: SyntaxKind);
    fn finish_node(&mut self);

    fn error(&mut self, error: ParseError);
}

pub fn parse(
    token_source: &mut dyn TokenSource,
    tree_sink: &mut dyn TreeSink,
) { ... }
```

----------------------------------------

TITLE: Customizing Directives for Specific Revisions
DESCRIPTION: This snippet demonstrates how to customize directives and expected error messages for a specific revision using the `//@[revision-name]` syntax. It provides an example of using different compile flags based on the revision context.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/compiletest.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
"// A flag to pass in only for cfg `foo`:\n//@[foo]compile-flags: -Z verbose-internals\n\n#[cfg(foo)]\nfn test_foo() {\n    let x: usize = 32_u32; //[foo]~ ERROR mismatched types\n}\n"
```

----------------------------------------

TITLE: Pattern Usage in Lint Implementation
DESCRIPTION: Example showing how to use pattern matching in a lint implementation
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
impl EarlyLintPass for MyAwesomeLint {
    fn check_expr(&mut self, cx: &EarlyContext, expr: &syntax::ast::Expr) {

        if my_pattern(expr).is_some() {
            cx.span_lint(
                MY_AWESOME_LINT,
                expr.span,
                "This is a match for a simple pattern. Well done!",
            );
        }

    }
}
```

----------------------------------------

TITLE: Basic Version Override Example in Rust Console
DESCRIPTION: Demonstrates basic usage of RUSTC_OVERRIDE_VERSION_STRING to modify the version output of rustc --version command. Shows how the version string is completely overwritten, discarding the original commit hash and date information.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/rustc-override-version-string.md#2025-04-21_snippet_0

LANGUAGE: console
CODE:
```
$ rustc --version
rustc 1.87.0-nightly (43f0014ef 2025-03-25)
$ env RUSTC_OVERRIDE_VERSION_STRING=1.81.0-nightly rustc --version
rustc 1.81.0-nightly
```

----------------------------------------

TITLE: Updating Test Data using Environment Variables in Bash
DESCRIPTION: This snippet shows how to update test data by setting the `UPDATE_EXPECT` environment variable to 1 and running the `cargo qt` command. This is useful for incorporating changes made to the parser or grammar into the test suite.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/architecture.md#_snippet_0

LANGUAGE: bash
CODE:
```
env UPDATE_EXPECT=1 cargo qt
```

----------------------------------------

TITLE: Using Unsound MIR Optimization Flag in Rust
DESCRIPTION: The -Zunsound-mir-opts flag enables MIR optimization passes that may cause unsound behavior. This flag is restricted to MIR optimization testing within the rustc test suite and should not be used in production code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/unsound-mir-opts.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `unsound-mir-opts`
```

----------------------------------------

TITLE: Implementing Function Definition AST Node - Rust
DESCRIPTION: This snippet implements the `FnDef` struct conforming to the `AstNode` trait. It enables further functionalities such as retrieving the parameter list, return type, and function body from the function definition node. Each method showcases how to interact with the AST in a type-safe manner.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/syntax.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct FnDef {
    syntax: SyntaxNode,
}

impl AstNode for FnDef {
    fn cast(syntax: SyntaxNode) -> Option<Self> {
        match kind {
            FN => Some(FnDef { syntax }),
            _ => None,
        }
    }
    fn syntax(&self) -> &SyntaxNode {
        &self.syntax
    }
}

impl FnDef {
    pub fn param_list(&self) -> Option<ParamList> {
        self.syntax.children().find_map(ParamList::cast)
    }
    pub fn ret_type(&self) -> Option<RetType> {
        self.syntax.children().find_map(RetType::cast)
    }
    pub fn body(&self) -> Option<BlockExpr> {
        self.syntax.children().find_map(BlockExpr::cast)
    }
    // ...
}
```

----------------------------------------

TITLE: Analyzing Time in Trait Solver with perf-focus
DESCRIPTION: Example of using perf-focus with a complex regex to determine how much time the MIR borrowchecker spends in the trait solver. This demonstrates advanced perf-focus usage with path matching.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
$ perf focus '{do_mir_borrowck}..{^rustc::traits}'
Matcher    : {do_mir_borrowck},..{^rustc::traits}
Matches    : 12
Not Matches: 1311
Percentage : 0%
```

----------------------------------------

TITLE: Git Output: Merge Conflict Indicator (Console)
DESCRIPTION: This line appears in the console output during a rebase or merge operation when Git encounters a conflict it cannot resolve automatically in the specified file. You must manually edit the file to fix the conflict.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_7

LANGUAGE: console
CODE:
```
CONFLICT (content): Merge conflict in file.rs
```

----------------------------------------

TITLE: Running Programs with Hexagon Toolchain
DESCRIPTION: This snippet demonstrates how to run a program using the Hexagon toolchain's QEMU and specifies the library path. The path must be adjusted to point to the installed Hexagon C library.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/hexagon-unknown-linux-musl.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
# /opt/clang+llvm-18.1.0-cross-hexagon-unknown-linux-musl/x86_64-linux-gnu/bin/qemu-hexagon -L /opt/clang+llvm-18.1.0-cross-hexagon-unknown-linux-musl/x86_64-linux-gnu/target/hexagon-unknown-linux-musl/usr/ ./hello
```

----------------------------------------

TITLE: Configuring Windows 7 Target in Bootstrap
DESCRIPTION: Configuration snippet for enabling Windows 7 target in Rust's bootstrap configuration file, specifying target list and build stage
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/win7-windows-gnu.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
target = ["x86_64-win7-windows-gnu"]
```

----------------------------------------

TITLE: Setting Language Properties for C Sources
DESCRIPTION: This CMake command sets the `LANGUAGE` property to `C` for the files listed in `C_SOURCES`.  This ensures that the CMake build system treats them as C source files.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/CMakeLists.txt#_snippet_2

LANGUAGE: CMake
CODE:
```
set_source_files_properties(${C_SOURCES}
                            PROPERTIES
                            LANGUAGE C)
```

----------------------------------------

TITLE: Search Form Population and Event Listener Setup
DESCRIPTION: Initializes search form, sets default values, and attaches submit event handler
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/not_found.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
function populate_search() {
    var form = document.getElementById('search-form');
    form.addEventListener('submit', on_submit);
    document.getElementById('search-from').style.display = '';

    form['from'].value = 'library';

    var op = get_url_fragments();
    document.getElementById('search-input').value = op.join(' ');
}
populate_search();
```

----------------------------------------

TITLE: Recursive Type Description Call Stack
DESCRIPTION: Illustrative example showing how a naive depth-first traversal algorithm would handle recursive type descriptions, demonstrating the potential infinite loop problem.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/debuginfo/doc.md#2025-04-21_snippet_2

LANGUAGE: ignore
CODE:
```
describe(t = List)
  describe(t = i32)
  describe(t = Option<Box<List>>)
    describe(t = Box<List>)
      describe(t = List) // at the beginning again...
      ...
```

----------------------------------------

TITLE: Debugging Server Initialization with Wait Loop
DESCRIPTION: Rust code snippet demonstrating a wait loop for debugging server initialization. This allows attaching a debugger at the very beginning of the server's execution.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/debugging.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
let mut d = 4;
while d == 4 { // set a breakpoint here and change the value
    d = 4;
}
```

----------------------------------------

TITLE: Creating Build Configuration with x Setup
DESCRIPTION: Use the 'x' wrapper tool to create a default build configuration for the Rust compiler
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/quickstart.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
./x setup
```

----------------------------------------

TITLE: Defining Crate Metadata in Rust
DESCRIPTION: This Rust code snippet defines the structure for crate metadata using the `CrateData` struct. It outlines various crate properties such as the root file ID, edition, and version. The snippet is used to capture metadata information essential for managing Rust projects.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
{
    0: CrateData {
        root_file_id: FileId(
            1,
        ),
        edition: Edition2018,
        version: Some(
            "0.1.0",
        ),
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "hello_world",
                ),
                canonical_name: "hello-world",
            },
        ),
        cfg_options: CfgOptions(
            [
                "rust_analyzer",
                "test",
                "true",
            ],
        ),
        potential_cfg_options: None,
        env: Env {
            entries: {
                "CARGO": "$CARGO$",
                "CARGO_CRATE_NAME": "hello_world",
                "CARGO_MANIFEST_DIR": "$ROOT$hello-world",
                "CARGO_PKG_AUTHORS": "",
                "CARGO_PKG_DESCRIPTION": "",
                "CARGO_PKG_HOMEPAGE": "",
                "CARGO_PKG_LICENSE": "",
                "CARGO_PKG_LICENSE_FILE": "",
                "CARGO_PKG_NAME": "hello-world",
                "CARGO_PKG_README": "",
                "CARGO_PKG_REPOSITORY": "",
                "CARGO_PKG_RUST_VERSION": "",
                "CARGO_PKG_VERSION": "0.1.0",
                "CARGO_PKG_VERSION_MAJOR": "0",
                "CARGO_PKG_VERSION_MINOR": "1",
                "CARGO_PKG_VERSION_PATCH": "0",
                "CARGO_PKG_VERSION_PRE": "",
            },
        },
        dependencies: [
            Dependency {
                crate_id: Idx::<CrateData>(4),
                name: CrateName(
                    "libc",
                ),
                prelude: true,
                sysroot: false,
            },
        ],
        origin: Local {
            repo: None,
            name: Some(
                "hello-world",
            ),
        },
        is_proc_macro: false,
        proc_macro_cwd: Some(
            AbsPathBuf(
                "$ROOT$hello-world",
            ),
        ),
    },
    1: CrateData {
        root_file_id: FileId(
            2,
        ),
        edition: Edition2018,
        version: Some(
            "0.1.0",
        ),
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "hello_world",
                ),
                canonical_name: "hello-world",
            },
        ),
        cfg_options: CfgOptions(
            [
                "rust_analyzer",
                "test",
                "true",
            ],
        ),
        potential_cfg_options: None,
        env: Env {
            entries: {
                "CARGO": "$CARGO$",
                "CARGO_CRATE_NAME": "hello_world",
                "CARGO_MANIFEST_DIR": "$ROOT$hello-world",
                "CARGO_PKG_AUTHORS": "",
                "CARGO_PKG_DESCRIPTION": "",
                "CARGO_PKG_HOMEPAGE": "",
                "CARGO_PKG_LICENSE": "",
                "CARGO_PKG_LICENSE_FILE": "",
                "CARGO_PKG_NAME": "hello-world",
                "CARGO_PKG_README": "",
                "CARGO_PKG_REPOSITORY": "",
                "CARGO_PKG_RUST_VERSION": "",
                "CARGO_PKG_VERSION": "0.1.0",
                "CARGO_PKG_VERSION_MAJOR": "0",
                "CARGO_PKG_VERSION_MINOR": "1",
                "CARGO_PKG_VERSION_PATCH": "0",
                "CARGO_PKG_VERSION_PRE": "",
            },
        },
        dependencies: [
            Dependency {
                crate_id: Idx::<CrateData>(0),
                name: CrateName(
                    "hello_world",
                ),
                prelude: true,
                sysroot: false,
            },
            Dependency {
                crate_id: Idx::<CrateData>(4),
                name: CrateName(
                    "libc",
                ),
                prelude: true,
                sysroot: false,
            },
        ],
        origin: Local {
            repo: None,
            name: Some(
                "hello-world",
            ),
        },
        is_proc_macro: false,
        proc_macro_cwd: Some(
            AbsPathBuf(
                "$ROOT$hello-world",
            ),
        ),
    },
    2: CrateData {
        root_file_id: FileId(
            3,
        ),
        edition: Edition2018,
        version: Some(
            "0.1.0",
        ),
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "an_example",
                ),
                canonical_name: "an-example",
            },
        ),
        cfg_options: CfgOptions(
            [
                "rust_analyzer",
                "test",
                "true",
            ],
        ),
        potential_cfg_options: None,
        env: Env {
            entries: {
                "CARGO": "$CARGO$",
                "CARGO_CRATE_NAME": "an_example",
                "CARGO_MANIFEST_DIR": "$ROOT$hello-world",
                "CARGO_PKG_AUTHORS": "",
                "CARGO_PKG_DESCRIPTION": "",
                "CARGO_PKG_HOMEPAGE": "",
                "CARGO_PKG_LICENSE": "",
                "CARGO_PKG_LICENSE_FILE": "",
                "CARGO_PKG_NAME": "hello-world",
                "CARGO_PKG_README": "",
                "CARGO_PKG_REPOSITORY": "",
                "CARGO_PKG_RUST_VERSION": "",
                "CARGO_PKG_VERSION": "0.1.0",
                "CARGO_PKG_VERSION_MAJOR": "0",
                "CARGO_PKG_VERSION_MINOR": "1",
                "CARGO_PKG_VERSION_PATCH": "0",
                "CARGO_PKG_VERSION_PRE": "",
            },
        },
        dependencies: [
            Dependency {
                crate_id: Idx::<CrateData>(0),
                name: CrateName(
                    "hello_world",
                ),
                prelude: true,
                sysroot: false,
            },
            Dependency {
                crate_id: Idx::<CrateData>(4),
                name: CrateName(
                    "libc",
                ),
                prelude: true,
                sysroot: false,
            },
        ],
        origin: Local {
            repo: None,
            name: Some(
                "hello-world",
            ),
        },
        is_proc_macro: false,
        proc_macro_cwd: Some(
            AbsPathBuf(
                "$ROOT$hello-world",
            ),
        ),
    },
    3: CrateData {
        root_file_id: FileId(
            4,
        ),
        edition: Edition2018,
        version: Some(
            "0.1.0",
        ),
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "it",
                ),
                canonical_name: "it",
            },
        ),
        cfg_options: CfgOptions(
            [
                "rust_analyzer",
                "test",
                "true",
            ],
        ),
        potential_cfg_options: None,
        env: Env {
            entries: {
                "CARGO": "$CARGO$",
                "CARGO_CRATE_NAME": "it",
                "CARGO_MANIFEST_DIR": "$ROOT$hello-world",
                "CARGO_PKG_AUTHORS": "",
                "CARGO_PKG_DESCRIPTION": "",
                "CARGO_PKG_HOMEPAGE": "",
                "CARGO_PKG_LICENSE": "",
                "CARGO_PKG_LICENSE_FILE": "",
                "CARGO_PKG_NAME": "hello-world",
                "CARGO_PKG_README": "",
                "CARGO_PKG_REPOSITORY": "",
                "CARGO_PKG_RUST_VERSION": "",
                "CARGO_PKG_VERSION": "0.1.0",
                "CARGO_PKG_VERSION_MAJOR": "0",
                "CARGO_PKG_VERSION_MINOR": "1",
                "CARGO_PKG_VERSION_PATCH": "0",
                "CARGO_PKG_VERSION_PRE": "",
            },
        },
        dependencies: [
            Dependency {
                crate_id: Idx::<CrateData>(0),
                name: CrateName(
                    "hello_world",
                ),
                prelude: true,
                sysroot: false,
            },
            Dependency {
                crate_id: Idx::<CrateData>(4),
                name: CrateName(
                    "libc",
                ),
                prelude: true,
                sysroot: false,
            },
        ],
        origin: Local {
            repo: None,
            name: Some(
                "hello-world",
            ),
        },
        is_proc_macro: false,
        proc_macro_cwd: Some(
            AbsPathBuf(
                "$ROOT$hello-world",
            ),
        ),
    },
    4: CrateData {
        root_file_id: FileId(
            5,
        ),
        edition: Edition2015,
        version: Some(
            "0.2.98",
        ),
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "libc",
                ),
                canonical_name: "libc",
            },
        ),
        cfg_options: CfgOptions(
            [
                "feature=default",
                "feature=std",
                "true",
            ],
        ),
        potential_cfg_options: Some(
            CfgOptions(
                [
                    "feature=align",
                    "feature=const-extern-fn",
                    "feature=default",
                    "feature=extra_traits",
                    "feature=rustc-dep-of-std",
                    "feature=std",
                    "feature=use_std",
                    "true",
                ],
            ),
        ),
        env: Env {
            entries: {
                "CARGO": "$CARGO$",
                "CARGO_CRATE_NAME": "libc",
                "CARGO_MANIFEST_DIR": "$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98",
                "CARGO_PKG_AUTHORS": "The Rust Project Developers",
                "CARGO_PKG_DESCRIPTION": "Raw FFI bindings to platform libraries like libc.\n",
                "CARGO_PKG_HOMEPAGE": "https://github.com/rust-lang/libc",
            },
        }
    }
}
```

----------------------------------------

TITLE: Installing M68K Cross-Compiler on Debian-based Systems
DESCRIPTION: Command to install the G++ cross-compiler for M68K architecture on Debian-based systems. This will also pull in additional dependencies required for cross-compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-none-elf.md#_snippet_0

LANGUAGE: sh
CODE:
```
apt install g++-m68k-linux-gnu
```

----------------------------------------

TITLE: Initial Setup and Building
DESCRIPTION: The required sequence of commands to set up the environment and build the sysroot for rustc_codegen_gcc.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
$ ./y.sh prepare
$ ./y.sh build --sysroot
```

----------------------------------------

TITLE: Updating Changelog - Markdown
DESCRIPTION: These markdown snippets describe changes that need to be applied to the `CHANGELOG.md` file when a new stable version is released.  It involves removing the `(beta)` tag from the new stable version header, updating release dates for both the new and previous stable versions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/release.md#_snippet_8

LANGUAGE: markdown
CODE:
```
## Rust 1.XX (beta) -> ## Rust 1.XX
```

LANGUAGE: markdown
CODE:
```
Current beta, release 20YY-MM-DD -> Current stable, released 20YY-MM-DD
```

LANGUAGE: markdown
CODE:
```
Current stable, released 20YY-MM-DD -> Released 20YY-MM-DD
```

----------------------------------------

TITLE: Creating a Salsa Database in Rust
DESCRIPTION: Definition of a Salsa database struct that combines multiple query groups. This example shows the required attributes, fields, and trait implementations needed to create a functional Salsa database that can be used for incremental computation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/salsa.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
///This attribute specifies which query groups are going to be in the database
#[salsa::database(InputsStorage, ParserStorage)]
#[derive(Default)] //optional!
struct MyDatabase {
    ///You also need this one field
    runtime : salsa::Runtime<MyDatabase>,
}
///And this trait has to be implemented
impl salsa::Database for MyDatabase {
    fn salsa_runtime(&self) -> &salsa::Runtime<MyDatabase> {
        &self.runtime
    }
}
```

----------------------------------------

TITLE: Rust If-Else Comment Indentation Example
DESCRIPTION: Demonstrates how trailing comment indentation is handled within if-else blocks, showing comment association with else blocks versus being part of the if block.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_18

LANGUAGE: rust
CODE:
```
// if comment
if cond {
    "if"
// else comment
} else {
    "else"
}
```

----------------------------------------

TITLE: Generating Full Debug Dump of HIR in Rust
DESCRIPTION: This snippet illustrates the command for generating a full `Debug` dump of the HIR. This is useful for examining the complete structure of the HIR from the compiler's perspective.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/hir-debugging.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
-Z unpretty=hir-tree
```

----------------------------------------

TITLE: Configuring Cargo for LynxOS-178 Cross-Compilation
DESCRIPTION: This snippet configures Cargo to use a specific linker for the host when building procedural macros for programs targeting the LynxOS-178 platform. The configuration involves modifying the .cargo/config.toml file to specify the host GCC as the linker.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/lynxos178.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[target.x86_64-unknown-linux-gnu]
linker = "lynx-host-gcc"
```

----------------------------------------

TITLE: Formatting Example: Type Alias with Where Clause
DESCRIPTION: Shows the formatting of trailing where clauses in type aliases, a new feature added in version 1.8.0.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
type Foo
    = Bar
where
    A: B,
    C: D;
```

----------------------------------------

TITLE: Handling Integer with Missing Exponent Digits in Rust Lexer
DESCRIPTION: Illustrates how the Rust lexer handles integer literals followed by an exponent symbol (`e` or `E`) and an optional sign (`+` or `-`) but without the necessary digits after the exponent. This produces a `FLOAT_NUMBER` token with an error message.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_exponent.txt#_snippet_1

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "42e+" error: Missing digits after the exponent symbol
```

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "42e-" error: Missing digits after the exponent symbol
```

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "42E+" error: Missing digits after the exponent symbol
```

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "42E-" error: Missing digits after the exponent symbol
```

----------------------------------------

TITLE: Matching on `TyKind` in Rust
DESCRIPTION: This code snippet demonstrates how to match on the `kind` field of a `Ty` (type) in the Rust compiler.  The `kind` field is of type `TyKind<'tcx>`, which is an enum defining all the different kinds of types in the compiler. Inspecting the `kind` field during type inference can be risky due to inference variables and type unknowns.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
"fn foo(x: Ty<'tcx>) {
  match x.kind {
    ...
  }
}"
```

----------------------------------------

TITLE: Defining a Future Compatibility Lint in Rust
DESCRIPTION: This code snippet demonstrates how to define a future compatibility lint in the Rust compiler's lint framework. The lint is intended to issue warnings about illegal uses of specific patterns in the codebase. It includes steps to declare the lint, add it to the list of hardwired lints, register it for future compatibility, and report the lint when it triggers.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/bug-fix-procedure.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
// 1. Define the lint in `compiler/rustc_middle/src/lint/builtin.rs`:
declare_lint! {
    pub YOUR_ERROR_HERE,
    Warn,
    "illegal use of foo bar baz"
}

// 2. Add to the list of HardwiredLints in the same file:
impl LintPass for HardwiredLints {
    fn get_lints(&self) -> LintArray {
        lint_array!(
            ..,
            YOUR_ERROR_HERE
        )
    }
}

// 3. Register the lint in `compiler/rustc_lint/src/lib.rs`:
store.register_future_incompatible(sess, vec![
    ..., 
    FutureIncompatibleInfo {
        id: LintId::of(YOUR_ERROR_HERE),
        reference: "issue #1234", // your tracking issue here!
    },
]);

// 4. Report the lint:
tcx.lint_node(
    lint::builtin::YOUR_ERROR_HERE,
    path_id,
    binding.span,
    format!("some helper message here"));
```

----------------------------------------

TITLE: Full Example Output - Rust Test Time Reporting
DESCRIPTION: Shows complete example output of running tests with time reporting enabled, including quick, warning, and critical time thresholds.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/report-time.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
cargo test --tests -- -Zunstable-options --report-time
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running target/debug/deps/example-27fb188025bec02c

running 3 tests
test tests::unit_test_quick ... ok <0.000s>
test tests::unit_test_warn ... ok <0.055s>
test tests::unit_test_critical ... ok <0.110s>

test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out

     Running target/debug/deps/tests-cedb06f6526d15d9

running 3 tests
test unit_test_quick ... ok <0.000s>
test unit_test_warn ... ok <0.550s>
test unit_test_critical ... ok <1.100s>

test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
```

----------------------------------------

TITLE: Rust Type Example
DESCRIPTION: This code snippet illustrates the difference between syntactic types (`hir::Ty`) and the internal type representation (`Ty<'tcx>`) within the Rust compiler. It shows how two parameters with the same underlying type can have distinct `hir::Ty` nodes but are represented by the same internal type after collection.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/type-checking.md#2025-04-21_snippet_0

LANGUAGE: rust,ignore
CODE:
```
"struct Foo { }
fn foo(x: Foo, y: self::Foo) { ... }
//        ^^^     ^^^^^^^^^
"
```

----------------------------------------

TITLE: Defining Encodable and Decodable Traits in Rust
DESCRIPTION: The core traits used for serialization in rustc, defining the interface for encoding and decoding data. These traits are implemented by various types to allow them to be serialized and deserialized during compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/serialization.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub trait Encodable<S: Encoder> {
    fn encode(&self, s: &mut S) -> Result<(), S::Error>;
}

pub trait Decodable<D: Decoder>: Sized {
    fn decode(d: &mut D) -> Result<Self, D::Error>;
}
```

----------------------------------------

TITLE: Building Rust for MIPS R6 Target
DESCRIPTION: Executes the Rust build script for the MIPS R6 target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/mips-release-6.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
./x.py build
```

----------------------------------------

TITLE: Configuring Clang Compiler Wrapper for TEEOS in Shell Script
DESCRIPTION: The purpose of the shell scripts is to wrap the Clang compiler from the OpenHarmony SDK for cross-compiling to the aarch64-unknown-teeos target. These scripts modify the target triple to 'aarch64-linux-gnu' and execute Clang with all passed arguments. No additional dependencies are required other than the OpenHarmony SDK, and the scripts modify the execution path of clang and clang++.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/aarch64-unknown-teeos.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
#!/bin/sh
exec /path/to/ohos-sdk/linux/native/llvm/bin/clang \
  -target aarch64-linux-gnu \
  "$@"
```

LANGUAGE: sh
CODE:
```
#!/bin/sh
exec /path/to/ohos-sdk/linux/native/llvm/bin/clang++ \
  -target aarch64-linux-gnu \
  "$@"
```

----------------------------------------

TITLE: Implementing Static Suggestions with Macros in Rust
DESCRIPTION: This Rust snippet defines how static suggestions are implemented in the suggest-tests tool using a macro. Static suggestions utilize globs that map directly to specific commands, making them straightforward and easy to implement.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/suggest-tests.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
macro_rules! static_suggestion { /* macro implementation */ }
```

----------------------------------------

TITLE: Moving a Feature from Unstable to Accepted Status in Rust Compiler
DESCRIPTION: Example of how to update a feature's status from 'unstable' to 'accepted' when stabilizing it. The entry is moved to the accepted.rs file with its status changed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/stabilization_guide.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
// pub(restricted) visibilities (RFC 1422)
(accepted, pub_restricted, "CURRENT_RUSTC_VERSION", Some(32409)),
// note that we changed this
```

----------------------------------------

TITLE: Basic MIR Dump for Function
DESCRIPTION: Demonstrates how to dump MIR for a specific function using the `-Z dump-mir` flag in the Rust compiler. This command will generate MIR dump files for functions matching the specified filter.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/debugging.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
rustc -Z dump-mir=foo ...
```

----------------------------------------

TITLE: GNU Make Recursive Command for Rustc
DESCRIPTION: Demonstrates proper GNU Make configuration for rustc with jobserver support using the '+' recursive indicator.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/jobserver.md#2025-04-21_snippet_1

LANGUAGE: make
CODE:
```
x:
	+@echo 'fn main() {}' | rustc -
```

----------------------------------------

TITLE: Rust Diagnostic Data Structure Definition
DESCRIPTION: Shows a MappedRustDiagnostic instance containing compiler error information about a type mismatch between usize and u32. Includes file location details, error code E0308, severity level, and related documentation links.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/rust-analyzer/src/diagnostics/test_data/rustc_mismatched_type.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
[
    MappedRustDiagnostic {
        url: Url {
            scheme: "file",
            cannot_be_a_base: false,
            username: "",
            password: None,
            host: None,
            port: None,
            path: "/test/runtime/compiler_support.rs",
            query: None,
            fragment: None,
        },
        diagnostic: Diagnostic {
            range: Range {
                start: Position {
                    line: 47,
                    character: 64,
                },
                end: Position {
                    line: 47,
                    character: 69,
                },
            },
            severity: Some(
                Error,
            ),
            code: Some(
                String(
                    "E0308",
                ),
            ),
            code_description: Some(
                CodeDescription {
                    href: Url {
                        scheme: "https",
                        cannot_be_a_base: false,
                        username: "",
                        password: None,
                        host: Some(
                            Domain(
                                "doc.rust-lang.org",
                            ),
                        ),
                        port: None,
                        path: "/error-index.html",
                        query: None,
                        fragment: Some(
                            "E0308",
                        ),
                    },
                },
            ),
            source: Some(
                "rustc",
            ),
            message: "mismatched types\nexpected usize, found u32",
            related_information: None,
            tags: None,
            data: None,
        },
        fix: None,
    },
]
```

----------------------------------------

TITLE: Checking Git Status Showing Submodules (Console)
DESCRIPTION: Displays the output of `git status` when local submodules have new commits upstream. This indicates that the pointers to the submodule commits have updated in the main repository, even if you haven't manually changed them.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_0

LANGUAGE: console
CODE:
```
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   src/llvm-project (new commits)
	modified:   src/tools/cargo (new commits)

no changes added to commit (use "git add" and/or "git commit -a")
```

----------------------------------------

TITLE: Building Rust with C-SKY Target
DESCRIPTION: Commands to build the Rust compiler targeting C-SKY CPUs using the x.py build system. Requires the toolchain to be properly linked for the build environment within the Rust directory.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/csky-unknown-linux-gnuabiv2.md#2025-04-21_snippet_1

LANGUAGE: Shell
CODE:
```
# in rust dir
./x.py build --stage 2
```

----------------------------------------

TITLE: Retrieving Clippy Commit Hash from Rust Repository
DESCRIPTION: A bash command that extracts the latest Clippy commit hash from the Rust repository logs. It filters the git log to find Clippy merge commits and extracts just the commit hash.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/changelog_update.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
git log --oneline -- src/tools/clippy/ | grep -o "Merge commit '[a-f0-9]*' into .*" | head -1 | sed -e "s/Merge commit '\([a-f0-9]*\)' into .*/\1/g"
```

----------------------------------------

TITLE: Declaring a Query in Rust Compiler using rustc_queries! Macro
DESCRIPTION: Shows how to declare a query using the rustc_queries! macro. The example defines a 'type_of' query with its key type, return type, caching behavior, and user-facing description.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/query.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
rustc_queries! {
    /// Records the type of every item.
    query type_of(key: DefId) -> Ty<'tcx> {
        cache_on_disk_if { key.is_local() }
        desc { |tcx| "computing the type of `{}`", tcx.def_path_str(key) }
    }
    ...
}
```

----------------------------------------

TITLE: Enabling Thin LTO in Bootstrap
DESCRIPTION: This TOML snippet configures the Rust compiler (`rustc`) to use Thin Link Time Optimization (LTO) by setting the `rust.lto` option to 'thin' in the `bootstrap.toml` file. This enhancement is primarily supported on the `x86_64-unknown-linux-gnu` target, with potential but untested compatibility on other architectures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/optimized-build.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[rust]
lto = "thin"
```

----------------------------------------

TITLE: Configuring Build Targets for Unikraft in Rust
DESCRIPTION: This snippet configures the build system to include the Unikraft target `x86_64-unikraft-linux-musl`. It is necessary to do this in order to compile Rust programs that will run on Unikraft environments.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/unikraft-linux-musl.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
"[build]\nbuild-stage = 1\ntarget = [\"x86_64-unikraft-linux-musl\"]"
```

----------------------------------------

TITLE: Configuring DFSan for libffi/libgo Assembly Functions in Rust
DESCRIPTION: This snippet marks various libffi and libgo functions as uninstrumented and discarded for DFSan. These functions are typically written in assembly or called from assembly code.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/sanitizer/dataflow-abilist.txt#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fun:ffi_call_unix64=uninstrumented
fun:ffi_call_unix64=discard
fun:ffi_closure_unix64_inner=uninstrumented
fun:ffi_closure_unix64_inner=discard
fun:ffi_closure_unix64=uninstrumented
fun:ffi_closure_unix64=discard
fun:__go_get_closure=uninstrumented
fun:__go_get_closure=discard
fun:__go_makefunc_can_recover=uninstrumented
fun:__go_makefunc_can_recover=discard
fun:__go_makefunc_returning=uninstrumented
fun:__go_makefunc_returning=discard
fun:reflect.MakeFuncStubGo=uninstrumented
fun:reflect.MakeFuncStubGo=discard
fun:reflect.makeFuncStub=uninstrumented
fun:reflect.makeFuncStub=discard
```

----------------------------------------

TITLE: Explaining Trait Definition Symbol Mangling in Rust
DESCRIPTION: Shows how a trait definition is mangled, including the trait-definition indicator, Self type, and path to the trait.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
trait Trait {
    fn example() {}
}
struct Example;
impl Trait for Example {}
```

LANGUAGE: text
CODE:
```
_RNvYNtCs15kBYyAo9fc_7mycrate7ExampleNtB4_5Trait7exampleB4_
    │└──────────────┬───────────────┘└────┬────┘
    │               │                     │
    │               │                     └── path to the trait "Trait"
    │               └──────────────────────── path to the implementing type "mycrate::Example"
    └──────────────────────────────────────── trait-definition
```

----------------------------------------

TITLE: Implementing Lint with Suggestions in Rust
DESCRIPTION: Example of implementing a LateLintPass that provides automatic fix suggestions using span_lint_and_sugg with code formatting.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/emitting_lints.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
impl<'tcx> LateLintPass<'tcx> for LintName {
    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>)  {
        // Imagine that `some_lint_expr_logic` checks for requirements for emitting the lint
        if some_lint_expr_logic(expr) {
            span_lint_and_sugg( // < Note this change
                cx,
                LINT_NAME,
                span,
                "message on why the lint is emitted",
                "use",
                format!("foo + {} * bar", snippet(cx, expr.span, "<default>")), // < Suggestion
                Applicability::MachineApplicable,
            );
        }
    }
}
```

----------------------------------------

TITLE: Using #[autodiff(...)] with Fat-LTO in Rust
DESCRIPTION: The `#[autodiff(...)]` attribute in Enzyme requires the project to be compiled with Fat-LTO.  This is currently necessary to ensure proper differentiation when the function being differentiated calls functions in other compilation units.  While other solutions are possible, Fat-LTO is the simplest way to get started.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/limitations.md#2025-04-21_snippet_0



----------------------------------------

TITLE: Annotating Errors Across Lines and Multiple Messages in Rust UI Tests
DESCRIPTION: Demonstrates advanced error annotation syntax in Rust UI tests. The `//~^` syntax associates a message with a previous line, `//~|` associates it with the same line as the previous comment, and `//~v` associates it with a subsequent line. This allows for precise control over where annotations point relative to the diagnostic location.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_2

LANGUAGE: Rust
CODE:
```
let _ = same_line; //~ ERROR undeclared variable
fn meow(_: [u8]) {}
//~^ ERROR unsized
//~| ERROR anonymous parameters
```

----------------------------------------

TITLE: Declaring and Removing a Lint in Rust Compiler
DESCRIPTION: This snippet shows how to declare a lint using the `declare_lint!` macro in Rust and instructions to remove it from the codebase. It includes removing definitions from lint arrays and updates to future compatibility information. This requires Rust compiler knowledge and access to the Rust compiler's source code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/bug-fix-procedure.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
declare_lint! {
    pub OVERLAPPING_INHERENT_IMPLS,
    Deny, // this may also say Warning
    "two overlapping inherent impls define an item with the same name were erroneously allowed"
}
```

----------------------------------------

TITLE: Lexical Region Resolution Process in Rust
DESCRIPTION: This snippet outlines the initial steps for lexical region resolution, where each region variable is assigned an empty value and processes each outlives constraint iteratively. It explains the concept of growing region variables until a fixed-point is achieved using a least-upper-bound relation on the region lattice.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/type-inference.md#2025-04-21_snippet_5

LANGUAGE: Rust
CODE:
```
Lexical region resolution is done by initially assigning each region variable to an empty value. We then process each outlives constraint repeatedly, growing region variables until a fixed-point is reached.
```

----------------------------------------

TITLE: Building and Running a Rust Executable for Hexagon Standalone OS (Shell)
DESCRIPTION: Shell script that compiles a Rust project for the `hexagon-unknown-none-elf` target using `cargo build` with `build-std`, then links the resulting Rust library (`.rlib`), core/compiler builtins, and Hexagon SDK C runtime objects (`crt0_standalone.o`, `libc.a`, etc.) using `clang` (or `hexagon-unknown-none-elf-clang`) to create a standalone executable (`testit`). Finally, it runs the executable using `qemu-system-hexagon`. Requires setting paths for the Hexagon SDK (`hex_sdk_root`), toolchain (`hex_toolchain`), and specifying the compiler (`cc`).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/hexagon-unknown-none-elf.md#_snippet_2

LANGUAGE: sh
CODE:
```
# Hexagon SDK, required for target libraries:
hex_sdk_root=/local/mnt/workspace/Qualcomm/Hexagon_SDK/5.3.0.0
hex_sdk_toolchain=${hex_sdk_root}/tools/HEXAGON_Tools/8.6.06

sdk_libs=${hex_sdk_toolchain}/Tools/target/hexagon/lib
q6_arch=v65
g0_lib_path=${sdk_libs}/${q6_arch}/G0
pic_lib_path=${sdk_libs}/${q6_arch}/G0/pic

build_cfg=release
cargo build --target=hexagon-unknown-none-elf -Zbuild-std --release

# Builds an executable against "hexagon standalone OS" suitable for emulation:
${cc} --target=hexagon-unknown-none-elf -o testit \
    -fuse-ld=lld \
    -m${q6_arch} \
    -nodefaultlibs \
    -nostartfiles \
    ${g0_lib_path}/crt0_standalone.o \
    ${g0_lib_path}/crt0.o \
    ${g0_lib_path}/init.o \
    -L${sdk_libs}/${q6_arch}/ \
    -L${sdk_libs}/ \
    wrap.c \
    target/hexagon-unknown-none-elf/${build_cfg}/libdemo1_hexagon.rlib \
    target/hexagon-unknown-none-elf/${build_cfg}/deps/libcore-*.rlib \
    target/hexagon-unknown-none-elf/${build_cfg}/deps/libcompiler_builtins-*.rlib \
    -Wl,--start-group \
    -Wl,--defsym,_SDA_BASE_=0,--defsym,__sbss_start=0,--defsym,__sbss_end=0 \
    ${g0_lib_path}/libstandalone.a \
    ${g0_lib_path}/libc.a \
    -lgcc \
    -lc_eh \
    -Wl,--end-group \
    ${g0_lib_path}/fini.o \

${hex_toolchain}/x86_64-linux-gnu/bin/qemu-system-hexagon -monitor none -display none -kernel ./testit
```

----------------------------------------

TITLE: Configuring DFSan for Other Sanitizer Functions in Rust
DESCRIPTION: This snippet marks various other sanitizer functions as uninstrumented and discarded for DFSan. It includes coverage, death callback, counter, and memory allocation tracking functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/sanitizer/dataflow-abilist.txt#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
fun:__sanitizer_cov=uninstrumented
fun:__sanitizer_cov=discard
fun:__sanitizer_cov_module_init=uninstrumented
fun:__sanitizer_cov_module_init=discard
fun:__sanitizer_cov_with_check=uninstrumented
fun:__sanitizer_cov_with_check=discard
fun:__sanitizer_set_death_callback=uninstrumented
fun:__sanitizer_set_death_callback=discard
fun:__sanitizer_update_counter_bitset_and_clear_counters=uninstrumented
fun:__sanitizer_update_counter_bitset_and_clear_counters=discard
fun:__sanitizer_cov_trace_pc*=uninstrumented
fun:__sanitizer_cov_trace_pc*=discard
fun:__sanitizer_cov_pcs_init=uninstrumented
fun:__sanitizer_cov_pcs_init=discard

fun:__sanitizer_get_current_allocated_bytes=uninstrumented
fun:__sanitizer_get_current_allocated_bytes=discard
fun:__sanitizer_get_heap_size=uninstrumented
fun:__sanitizer_get_heap_size=discard
fun:__sanitizer_get_free_bytes=uninstrumented
fun:__sanitizer_get_free_bytes=discard
fun:__sanitizer_get_unmapped_bytes=uninstrumented
fun:__sanitizer_get_unmapped_bytes=discard
fun:__sanitizer_get_estimated_allocated_size=uninstrumented
fun:__sanitizer_get_estimated_allocated_size=discard
fun:__sanitizer_get_ownership=uninstrumented
fun:__sanitizer_get_ownership=discard
fun:__sanitizer_get_allocated_begin=uninstrumented
fun:__sanitizer_get_allocated_begin=discard
fun:__sanitizer_get_allocated_size=uninstrumented
fun:__sanitizer_get_allocated_size=discard
fun:__sanitizer_get_allocated_size_fast=uninstrumented
fun:__sanitizer_get_allocated_size_fast=discard
fun:__sanitizer_print_stack_trace=uninstrumented
fun:__sanitizer_print_stack_trace=discard
```

----------------------------------------

TITLE: Creating a Query Context and Initiating Type Checking in Rust Compiler
DESCRIPTION: Example showing how the compiler driver creates a query context (tcx) and initiates the type checking process by invoking the type_check_crate query from outside the query system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/query-evaluation-model-in-detail.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn compile_crate() {
    let cli_options = ...;
    let hir_map = ...;

    // Create the query context `tcx`
    let tcx = TyCtxt::new(cli_options, hir_map);

    // Do type checking by invoking the type check query
    tcx.type_check_crate();
}
```

----------------------------------------

TITLE: Configuring Build Tasks in JSON for VS Code
DESCRIPTION: This JSON configuration defines a build task for Visual Studio Code to run a custom shell command. The task automates running `./x check`, clearing previous outputs, and categorizing it as the default build task. It requires the problem matcher for Rustc.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/suggested.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "./x check",
            "command": "./x check",
            "type": "shell",
            "problemMatcher": "$rustc",
            "presentation": { "clear": true },
            "group": { "kind": "build", "isDefault": true }
        }
    ]
}
```

----------------------------------------

TITLE: Updating Stable Branch - Bash
DESCRIPTION: This command sequence updates the `stable` branch in the Clippy repository to match the specified commit hash (`SHA`). It checks out the `stable` branch, resets it to the desired commit, and then pushes the updated branch to the `upstream` remote.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/release.md#_snippet_5

LANGUAGE: bash
CODE:
```
git checkout stable
git reset --hard $SHA
git push upstream stable
```

----------------------------------------

TITLE: Building proc-macro-srv-cli
DESCRIPTION: This command builds the `rust-analyzer-proc-macro-srv` component, used by rust-analyzer and IntelliJ Rust plugin to work with proc macros.  It's necessary when using custom toolchains.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/how-to-build-and-run.md#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
./x build proc-macro-srv-cli
```

----------------------------------------

TITLE: Cross-Crate Re-export Example in JSON
DESCRIPTION: JSON example showing how re-exports are handled across different crates, including references to dependencies and standard library items.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustdoc-internals/search.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
[
  [ "crate_name", ... ],
  [ "crate_name_2", { "q": [[0, "crate_name::submodule"], [5, "core::option"]], ... }]
]
```

----------------------------------------

TITLE: Implementing the MutVisitor Trait in Rust
DESCRIPTION: This snippet illustrates the implementation of the `MutVisitor` trait for the custom visitor defined earlier. The `visit_foo` method is overridden to provide custom logic when processing a node labeled 'foo', using the `super_foo` method for recursive traversal.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/visitor.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
impl<'tcx> MutVisitor<'tcx> for MyVisitor {
    fn visit_foo(&mut self, ...) {
        ...
        self.super_foo(...);
    }
}
```

----------------------------------------

TITLE: Defining a Fluent Diagnostic Message with Attributes
DESCRIPTION: This snippet demonstrates how to define a Fluent diagnostic message along with an attribute related to the message. The attribute provides additional context for the user, enhancing the usability of the error message.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/translation.md#2025-04-21_snippet_1

LANGUAGE: fluent
CODE:
```
typeck_address_of_temporary_taken = cannot take address of a temporary
    .label = temporary value
```

----------------------------------------

TITLE: Desugared impl Trait Return Type in Rust
DESCRIPTION: Shows the explicit form of impl Trait return type using type aliases with lifetime parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/member_constraints.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
type MakeReturn<'x, 'y> = impl Trait<'x, 'y>;
fn make(a: &'a u32, b: &'b u32) -> MakeReturn<'a, 'b> { .. }
```

----------------------------------------

TITLE: Querying Dataflow State via Intrinsic in Rust Compiler
DESCRIPTION: The `rustc_peek` intrinsic is used within dataflow unit tests to query the computed dataflow state for a specific Lvalue. Its presence, when paired with a relevant `#[rustc_mir]` attribute, causes the compiler to check the dataflow bit; a set bit allows compilation to proceed, while an unset bit triggers an error message 'rustc_peek: bit not set'. It requires specific `#[rustc_mir]` attributes on the containing function to activate.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/mir-dataflow/README.md#_snippet_0

LANGUAGE: Rust
CODE:
```
rustc_peek
```

----------------------------------------

TITLE: Running Rustfmt from Source
DESCRIPTION: This command runs rustfmt on a specified file from its source code. It's useful for testing changes or debugging, although direct installation from source is discouraged.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Contributing.md#_snippet_1

LANGUAGE: Rust
CODE:
```
cargo run --bin rustfmt -- path/to/file.rs
```

----------------------------------------

TITLE: Parsing Rust Byte Literal with Unicode Escape
DESCRIPTION: An example of an invalid byte literal syntax that requires a closing single quote to properly terminate the literal
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_with_unicode_escape.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
BYTE "b'\u{20AA}"
```

----------------------------------------

TITLE: Running Tests in Different Compare Modes
DESCRIPTION: This snippet provides the command to run tests in a specific compare mode using the `--compare-mode` CLI flag. It outlines the available compare modes, which can help identify differences in test behavior under various compiler flags.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/compiletest.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
"./x test tests/ui --compare-mode=chalk\n"
```

----------------------------------------

TITLE: Markdown Template for Rust Feature Tracking
DESCRIPTION: A markdown template that establishes the structure for tracking Rust language features. It includes a title with the feature name and a reference to the tracking issue on GitHub.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/unstable-book-gen/src/stub-issue.md#_snippet_0

LANGUAGE: markdown
CODE:
```
# `{name}`

The tracking issue for this feature is: [#{issue}]

[#{issue}]: https://github.com/rust-lang/rust/issues/{issue}
```

----------------------------------------

TITLE: Installing Rustfmt with Rustup for Clippy Development
DESCRIPTION: Command to install the rustfmt component for the nightly toolchain, which is required for formatting Clippy code before submitting a PR.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_16

LANGUAGE: bash
CODE:
```
rustup component add rustfmt --toolchain=nightly
```

----------------------------------------

TITLE: Defining Crate Metadata for Alloc - Rust
DESCRIPTION: Defines the `CrateData` structure for the `alloc` crate (index 0). It specifies the Rust edition (`Edition2021`), compiler configuration flags (`debug_assertions`, `miri`, `true`), and its dependency on the `core` crate (index 1). This data is used to model the crate's properties and its position within the dependency graph.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_cfg_groups.txt#_snippet_0

LANGUAGE: Rust
CODE:
```
0: CrateData {
    root_file_id: FileId(
        1,
    ),
    edition: Edition2021,
    version: None,
    display_name: Some(
        CrateDisplayName {
            crate_name: CrateName(
                "alloc",
            ),
            canonical_name: "alloc",
        },
    ),
    cfg_options: CfgOptions(
        [
            "debug_assertions",
            "miri",
            "true",
        ],
    ),
    potential_cfg_options: None,
    env: Env {
        entries: {},
    },
    dependencies: [
        Dependency {
            crate_id: Idx::<CrateData>(1),
            name: CrateName(
                "core",
            ),
            prelude: true,
            sysroot: false,
        },
    ],
    origin: Lang(
        Alloc,
    ),
    is_proc_macro: false,
    proc_macro_cwd: None,
}
```

----------------------------------------

TITLE: Installing mdBook using Cargo for Clippy Book Development
DESCRIPTION: Command to install mdBook using Cargo, which is needed to build and test the Clippy book locally. This is the recommended installation method if you already have Cargo installed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/book.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
cargo install mdbook
```

----------------------------------------

TITLE: Query Definition Structure in Rust Compiler
DESCRIPTION: Illustrates the structural components of a query definition including the query keyword, name, key type, result type, and query modifiers. This shows the syntax for defining queries in the Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/query.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
query type_of(key: DefId) -> Ty<'tcx> { ... }
^^^^^ ^^^^^^^      ^^^^^     ^^^^^^^^   ^^^
|     |            |         |          |
|     |            |         |          query modifiers
|     |            |         result type
|     |            query key type
|     name of query
query keyword
```

----------------------------------------

TITLE: GN Config for Custom Rust Compiler Flags
DESCRIPTION: Example GN configuration showing how to add custom compiler flags to a Rust binary target in Fuchsia build system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ecosystem-test-jobs/fuchsia.md#2025-04-21_snippet_1

LANGUAGE: gn
CODE:
```
config("everybody_loops") {
    rustflags = [ "-Zeverybody-loops" ]
}

rustc_binary("example") {
    crate_root = "src/bin.rs"
    # ...existing keys here...
    configs += [ ":everybody_loops" ]
}
```

----------------------------------------

TITLE: Clang Wrapper Script for armv7-unknown-linux-ohos
DESCRIPTION: This shell script wraps the Clang compiler from the OpenHarmony SDK for the armv7-unknown-linux-ohos target. It sets the target architecture, sysroot, defines the __MUSL__ macro, and specifies ARMv7 architecture options.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/openharmony.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
#!/bin/sh
exec /path/to/ohos-sdk/linux/native/llvm/bin/clang \
  -target arm-linux-ohos \
  --sysroot=/path/to/ohos-sdk/linux/native/sysroot \
  -D__MUSL__ \
  -march=armv7-a \
  -mfloat-abi=softfp \
  -mtune=generic-armv7-a \
  -mthumb \
  "$@"
```

----------------------------------------

TITLE: Configuring MSVC Environment and Building (Batch)
DESCRIPTION: Demonstrates how to explicitly call the Visual Studio `vcvars64.bat` script to correctly set up the command-line environment for the MSVC toolchain. This ensures that the subsequent `python x.py build` command has access to the necessary compiler and linker tools.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_12

LANGUAGE: Batch
CODE:
```
CALL "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
python x.py build
```

----------------------------------------

TITLE: Testing Dependency Graph with Annotations in Rust
DESCRIPTION: This code snippet demonstrates how to use the `#[rustc_if_this_changed]` and `#[rustc_then_this_would_need]` annotations to validate the dependency relationships between functions in Rust. If the function `foo` changes, the compiler will determine if it impacts the requirements of `bar`. The expected output on changing `foo` is 'OK'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/incrcomp-debugging.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#[rustc_if_this_changed]
fn foo() { }

#[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK
fn bar() { foo(); }
```

----------------------------------------

TITLE: Retrieving the `Sized` Trait Lang Item in Rust
DESCRIPTION: This code snippet demonstrates how to retrieve the `sized_trait` lang item using `tcx.lang_items()`. It checks if the trait is available (since it might not be in `#![no_core]` contexts) and proceeds accordingly if found. The code uses the `Option` type to handle cases where the lang item is not present.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/lang-items.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// Note that in case of `#![no_core]`, the trait is not available.
if let Some(sized_trait_def_id) = tcx.lang_items().sized_trait() {
    // do something with `sized_trait_def_id`
}
```

----------------------------------------

TITLE: Building Distribution Artifacts Using Bash
DESCRIPTION: This snippet demonstrates how to build distribution artifacts for the Rust compiler using a Bash command. It requires a properly configured environment where the command `./x dist` can be executed to compile and package the Rust compiler for distribution. This utility helps in preparing the compiler for release or deployment.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/build-install-distribution-artifacts.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./x dist
```

----------------------------------------

TITLE: Adding Main Function for GIMPLE Generation in C
DESCRIPTION: This snippet shows the implementation of a main function that uses the GCC JIT API to generate GIMPLE output. It sets necessary options and calls the create_code function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/gimple.md#2025-04-21_snippet_1

LANGUAGE: C
CODE:
```
int main() {
    gcc_jit_context *ctxt = gcc_jit_context_acquire();
    // To set `-O3`, update it depending on your needs.
    gcc_jit_context_set_int_option(ctxt, GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL, 3);
    // Very important option to generate the gimple format.
    gcc_jit_context_set_bool_option(ctxt, GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE, 1);
    create_code(ctxt, NULL);

    gcc_jit_context_compile(ctxt);
    // If you want to compile to assembly (or any other format) directly, you can
    // use the following call instead:
    // gcc_jit_context_compile_to_file(ctxt, GCC_JIT_OUTPUT_KIND_ASSEMBLER, "out.s");

    return 0;
}
```

----------------------------------------

TITLE: AstIdMap for Source Mapping (Rust)
DESCRIPTION: This code defines the AstIdMap structure that maps position-independent AstIds to position-dependent syntax nodes, enabling connections between stable representations and actual source code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_8

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/hir-expand/src/ast_id_map.rs#L136-L142
```

----------------------------------------

TITLE: Import Representation in ItemTree (Rust)
DESCRIPTION: This code defines how imports are represented in the position-independent ItemTree structure, storing them in a form that doesn't change with source code modifications.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_10

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/hir-def/src/item_tree.rs#L559-L563
```

----------------------------------------

TITLE: Creating a New Standalone Lint
DESCRIPTION: This command, run using the Clippy dev tools, is used to create a new standalone lint in a Clippy project.  It sets the lint name, pass type (late), and category (pedantic). The command generates the necessary boilerplate code and modifies relevant project files, and the output files are listed in the comments following the shell script.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/defining_lints.md#_snippet_0

LANGUAGE: sh
CODE:
```
$ cargo dev new_lint --name=lint_name --pass=late --category=pedantic
```

----------------------------------------

TITLE: Using Built-in Rust Logo with #[doc(rust_logo)] in Rustdoc
DESCRIPTION: Demonstrates how to use the `#[doc(rust_logo)]` crate attribute to set the built-in Rust logo as the main logo for the generated documentation. This feature requires the `rustdoc_internals` feature gate and is intended for official Rust project use only.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/unstable-features.md#_snippet_6

LANGUAGE: Rust
CODE:
```
#![feature(rustdoc_internals)]
#![allow(internal_features)]
#![doc(rust_logo)]
//! This crate has the Rust(tm) branding on it.
```

----------------------------------------

TITLE: Invalid Region Outlives Example
DESCRIPTION: Example demonstrating an invalid function where lifetime 'a doesn't necessarily outlive 'b, used to illustrate region inference errors.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn foo<'a, 'b>(x: &'a usize) -> &'b usize {
    x
}
```

----------------------------------------

TITLE: Declaring Future-Incompatible Lints
DESCRIPTION: This code declares a future-incompatible lint with the `declare_lint!` macro, indicating compatibility issues in upcoming Rust releases. The `ANONYMOUS_PARAMETERS` lint is defined with a reason field, highlighting why code may fail in future versions. This directs users on proactive fixes for their code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_10

LANGUAGE: rust
CODE:
```
declare_lint! {
    pub ANONYMOUS_PARAMETERS,
    Allow,
    "detects anonymous parameters",
    @future_incompatible = FutureIncompatibleInfo {
        reference: "issue #41686 <https://github.com/rust-lang/rust/issues/41686>",
        reason: FutureIncompatibilityReason::EditionError(Edition::Edition2018),
    };
}

```

----------------------------------------

TITLE: Parsing Complex Number Literal Scenarios in Rust
DESCRIPTION: Test cases for edge cases involving number literals, including dot operations and method calls
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/numbers.txt#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
INT_NUMBER "0"DOT "."DOT "."INT_NUMBER "2"
INT_NUMBER "0"DOT "."IDENT "foo"L_PAREN "("R_PAREN ")"
INT_NUMBER "0"DOT "."IDENT "e"PLUS "+"INT_NUMBER "1"
```

----------------------------------------

TITLE: Mangled Symbol Representation for PathBuf in Rust
DESCRIPTION: This text details the mangled symbol for `PathBuf::new` within the crate `mycrate`, illustrating the different components used to encode symbol paths in Rust, and includes the recommendation for human-readable demangling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
_RNvMsr_NtCs3ssYzQotkvD_3std4pathNtB5_7PathBuf3newCs15kBYyAo9fc_7mycrate
```

----------------------------------------

TITLE: Using x perf Command for Rust Compiler Profiling
DESCRIPTION: Demonstrates the usage of the './x perf' command to interact with the rustc-perf benchmarking suite. This command provides various subcommands for benchmarking, comparing results, and profiling the Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_rustc_perf.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./x perf <command> [options]
```

----------------------------------------

TITLE: Verify Custom rustdoc Theme CSS (bash)
DESCRIPTION: Demonstrates using the `--check-theme` flag to verify if a custom CSS theme file implements the same CSS rules as the official `light` theme. This is a separate mode where other flags are ignored and requires a path to the theme CSS file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/command-line-arguments.md#_snippet_28

LANGUAGE: bash
CODE:
```
$ rustdoc --check-theme /path/to/your/custom-theme.css
```

----------------------------------------

TITLE: Preventing Symbol Unmangling by Linker in Rust
DESCRIPTION: Sets the COLLECT_NO_DEMANGLE environment variable to prevent the linker from unmangling symbols when processing Rust code.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/tips.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
COLLECT_NO_DEMANGLE=1
```

----------------------------------------

TITLE: Fluent Translation Strings for Error Messages
DESCRIPTION: Defines localization strings for error messages and suggestions using the Fluent translation system. Provides translatable text for error messages and their associated help text.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_3

LANGUAGE: fluent
CODE:
```
example-example-error = oh no! this is an error!
  .try-qux-suggestion = try using a qux here
  .qux-suggestion = you could use a qux here instead
```

----------------------------------------

TITLE: Implementing Try-Mark-Green Algorithm for Incremental Compilation in Rust
DESCRIPTION: This function implements the try-mark-green algorithm for incremental compilation. It attempts to mark a query node as green (unchanged) by recursively checking its dependencies. If a dependency has changed (red), the current node can't be marked green. For unknown dependencies, it recursively tries to mark them green or re-runs their queries to determine their status.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/incremental-compilation-in-detail.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn try_mark_green(tcx, current_node) -> bool {

    // Fetch the inputs to `current_node`, i.e. get the nodes that the direct
    // edges from `node` lead to.
    let dependencies = tcx.dep_graph.get_dependencies_of(current_node);

    // Now check all the inputs for changes
    for dependency in dependencies {

        match tcx.dep_graph.get_node_color(dependency) {
            Green => {
                // This input has already been checked before and it has not
                // changed; so we can go on to check the next one
            }
            Red => {
                // We found an input that has changed. We cannot mark
                // `current_node` as green without re-running the
                // corresponding query.
                return false
            }
            Unknown => {
                // This is the first time we look at this node. Let's try
                // to mark it green by calling try_mark_green() recursively.
                if try_mark_green(tcx, dependency) {
                    // We successfully marked the input as green, on to the
                    // next.
                } else {
                    // We could *not* mark the input as green. This means we
                    // don't know if its value has changed. In order to find
                    // out, we re-run the corresponding query now!
                    tcx.run_query_for(dependency);

                    // Fetch and check the node color again. Running the query
                    // has forced it to either red (if it yielded a different
                    // result than we have in the cache) or green (if it
                    // yielded the same result).
                    match tcx.dep_graph.get_node_color(dependency) {
                        Red => {
                            // The input turned out to be red, so we cannot
                            // mark `current_node` as green.
                            return false
                        }
                        Green => {
                            // Re-running the query paid off! The result is the
                            // same as before, so this particular input does
                            // not invalidate `current_node`.
                        }
                        Unknown => {
                            // There is no way a node has no color after
                            // re-running the query.
                            panic!("unreachable")
                        }
                    }
                }
            }
        }
    }

    // If we have gotten through the entire loop, it means that all inputs
    // have turned out to be green. If all inputs are unchanged, it means
    // that the query result corresponding to `current_node` cannot have
    // changed either.
    tcx.dep_graph.mark_green(current_node);

    true
}
```

----------------------------------------

TITLE: Using perf-focus with relative percentages for MIR borrowck analysis
DESCRIPTION: Demonstrates using perf-focus with --relative option to show percentages relative to do_mir_borrowck execution time rather than total program time. Also uses max depth and minimum percentage thresholds.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_13

LANGUAGE: bash
CODE:
```
$ perf focus '{do_mir_borrowck}' --tree-callees --relative --tree-max-depth 1 --tree-min-percent 5
Matcher    : {do_mir_borrowck}
Matches    : 577
Not Matches: 746
Percentage : 100%

Tree
| matched `{do_mir_borrowck}` (100% total, 0% self)
: | rustc_borrowck::nll::compute_regions (47% total, 0% self) [...]
: | rustc::mir::visit::Visitor::visit_mir (19% total, 15% self) [...]
: | <rustc_borrowck::MirBorrowckCtxt<'cx, 'tcx> as rustc_mir_dataflow::DataflowResultsConsumer<'cx, 'tcx>>::visit_statement_entry (13% total, 0% self) [...]
: | rustc_mir_dataflow::do_dataflow (8% total, 1% self) [...]
```

----------------------------------------

TITLE: Configuring cargo-ignore-publish
DESCRIPTION: For internal testing, this configuration ignores the `publish` settings in the Cargo manifest. It's a boolean flag.  Defaults to `false`. This is typically used for testing and internal development.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/lint_configuration.md#_snippet_4



----------------------------------------

TITLE: Profiling with RA_PROFILE
DESCRIPTION: This snippet shows how to use the `RA_PROFILE` environment variable to enable hierarchical profiling in rust-analyzer. It allows filtering by entry name, specifying depth, and setting a minimum execution time.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/README.md#_snippet_5

LANGUAGE: Shell
CODE:
```
RA_PROFILE=*             // dump everything
RA_PROFILE=foo|bar|baz   // enabled only selected entries
RA_PROFILE=*@3>10        // dump everything, up to depth 3, if it takes more than 10 ms
```

----------------------------------------

TITLE: Defining PatternTree with Traits in Rust
DESCRIPTION: This snippet outlines the PatternTree structure used for matching patterns against Rust syntax trees. The implementation involves enums for expressions, literals, statements, and block types, with specialized structures to handle alternatives, sequences, and optionals. This is critical for pattern parsers to define pattern representations and matching rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
pub enum Expr {
    Lit(Alt<Lit>),
    Array(Seq<Expr>),
    Block_(Alt<BlockType>),
    If(Alt<Expr>, Alt<BlockType>, Opt<Expr>),
    IfLet(
        Alt<BlockType>,
        Opt<Expr>,
    ),
}

pub enum Lit {
    Char(Alt<char>),
    Bool(Alt<bool>),
    Int(Alt<u128>),
}

pub enum Stmt {
    Expr(Alt<Expr>),
    Semi(Alt<Expr>),
}

pub enum BlockType {
    Block(Seq<Stmt>),
}
```

----------------------------------------

TITLE: Finding Parent Function Node for Completion (Rust)
DESCRIPTION: This code finds the parent function node in the syntax tree during completion context construction, which is necessary for determining the semantic context of the completion site.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_24

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/ide-completion/src/context/analysis.rs#L463
```

----------------------------------------

TITLE: Multi-line Directive Example
DESCRIPTION: Shows how directives can be extended across multiple lines using backslash continuation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustdoc-internals/rustdoc-test-suite.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
//@ directive 'argument' \
// 'continuation'
```

----------------------------------------

TITLE: Committing Version Changes - Bash
DESCRIPTION: After bumping the version, this command commits the changes made to the `Cargo.toml` files. It includes a message indicating the new Clippy version. The `XY` placeholder should be replaced with the actual version number.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/release.md#_snippet_2

LANGUAGE: bash
CODE:
```
git commit -m "Bump Clippy version -> 0.1.XY" **/*Cargo.toml
```

----------------------------------------

TITLE: Candidate Example with Different Self Types
DESCRIPTION: Demonstrates multiple method candidates with different self type requirements for the same method on a complex receiver type
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/method-lookup.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
// Method candidates for foo() on Rc<Box<[T; 3]>>:
// 1. &Rc<U> as extension candidate
// 2. &mut Box<U> as inherent candidate
```

----------------------------------------

TITLE: Completion Request Handler (Rust)
DESCRIPTION: This function handles completion requests by deserializing LSP requests into rust-analyzer specific data types, requesting completions from the analysis engine, and serializing results back to LSP format.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_19

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/rust-analyzer/src/handlers/request.rs#L850-L876
```

----------------------------------------

TITLE: Building with Debug Assertions for Wait Loop Debugging
DESCRIPTION: Command to build the project with debug assertions enabled, which is necessary for the wait loop debugging technique to work.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/debugging.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
RUSTFLAGS='--cfg debug_assertions' cargo build --release
```

----------------------------------------

TITLE: LLVM Debug Configuration in bootstrap.toml
DESCRIPTION: Configuration settings for enabling LLVM debug builds and assertions in the Rust compiler's bootstrap configuration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/debugging.md#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[llvm]
# Indicates whether the LLVM assertions are enabled or not
assertions = true

# Indicates whether the LLVM build is a Release or Debug build
optimize = false
```

----------------------------------------

TITLE: GNU Make Shell Command with Disabled Jobserver
DESCRIPTION: Shows how to disable jobserver for rustc calls within $(shell ...) in recursive Make by clearing MAKEFLAGS.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/jobserver.md#2025-04-21_snippet_2

LANGUAGE: make
CODE:
```
S := $(shell MAKEFLAGS= rustc --print sysroot)

x:
	@$(MAKE) y

y:
	@echo $(S)
```

----------------------------------------

TITLE: Running remote-test-server
DESCRIPTION: This command starts the `remote-test-server` on the remote machine, binding it to the specified IP address and port. The `-v` flag enables verbose output.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_9

LANGUAGE: text
CODE:
```

$ ./remote-test-server -v --bind 0.0.0.0:12345
starting test server
listening on 0.0.0.0:12345!

```

----------------------------------------

TITLE: Failure Status Parsing Implementation in Rust
DESCRIPTION: Rust implementation for parsing and handling the failure status directive in test configurations
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/directives.md#2025-04-21_snippet_3

LANGUAGE: diff
CODE:
```
fn parse_failure_status(&self, line: &str) -> Option<i32> {
        match self.parse_name_value_directive(line, "failure-status") {
            Some(code) => code.trim().parse::<i32>().ok(),
            _ => None,
        }
    }
```

----------------------------------------

TITLE: Setting Up M68K Debian Chroot Environment
DESCRIPTION: Commands for setting up a Debian/M68K chroot environment using debootstrap. This enables running more complex M68K programs through emulation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-none-elf.md#_snippet_2

LANGUAGE: text
CODE:
```
# apt install debootstrap debian-ports-archive-keyring
# debootstrap --keyring=/usr/share/keyrings/debian-ports-archive-keyring.gpg --arch=m68k unstable debian-68k http://ftp.ports.debian.org/debian-ports
```

----------------------------------------

TITLE: Negated Has Directive Example
DESCRIPTION: Example showing how to use a negated 'has' directive to check that a struct page does not exist in the documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustdoc-internals/rustdoc-test-suite.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
//@ !has 'foo/struct.Bar.html'
```

----------------------------------------

TITLE: Updating Git Submodule for LLVM
DESCRIPTION: Updates the 'src/llvm-project' submodule to the latest version available on the remote repository. This is a key step to include the backported fixes or the new LLVM release in the Rust project.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/updating-llvm.md#2025-04-21_snippet_2

LANGUAGE: git
CODE:
```
"git submodule update --remote src/llvm-project"
```

----------------------------------------

TITLE: Accessing a Move Path Place in Rust
DESCRIPTION: This code snippet demonstrates how to access a MIR Place using a MovePathIndex in Rust. It requires the `move_paths` field of `MoveData` for converting indices to Places. Useful for cases where the move analysis requires understanding of indexed locations within MIR.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/moves_and_initialization/move_paths.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
move_data.move_paths[mpi].place
```

----------------------------------------

TITLE: Profiling with RA_PROFILE_JSON
DESCRIPTION: This snippet demonstrates how to use the `RA_PROFILE_JSON` environment variable to enable machine-readable JSON output for profiling in rust-analyzer, filtering by span name.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
RA_PROFILE=* // dump everything
RA_PROFILE_JSON="vfs_load|parallel_prime_caches|discover_command" // dump selected spans
```

----------------------------------------

TITLE: Including content from features_generated.md in Markdown
DESCRIPTION: This snippet includes a section from the `features_generated.md` file, starting from line 2 and continuing for an unspecified number of lines. This is a common practice for incorporating dynamically generated or modular content into markdown documentation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/features.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
{{#include features_generated.md:2:}}
```

----------------------------------------

TITLE: Extending TextDocumentEdit Interface for Snippet Support
DESCRIPTION: Modifies the TextDocumentEdit interface to allow for SnippetTextEdit elements in the edits array, enabling text document edits to contain both plain text and snippet edits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export interface TextDocumentEdit {
    textDocument: OptionalVersionedTextDocumentIdentifier;
    edits: (TextEdit | SnippetTextEdit)[];
}
```

----------------------------------------

TITLE: Defining C Source Files
DESCRIPTION: This CMake command sets the variable `C_SOURCES` to a list of C source files. These files will be compiled as part of the project.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/CMakeLists.txt#_snippet_1

LANGUAGE: CMake
CODE:
```
set(C_SOURCES
    src/foo.c
    )
```

----------------------------------------

TITLE: Function Item Type for Generic Function with Lifetimes in Rust
DESCRIPTION: This snippet shows the desugaring of the previous function into its function item type representation. It emphasizes how lifetime parameters are handled.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
struct FooFnItem<T: Sized>(PhantomData<for<'a> fn(&'a T) -> &'a T>);

impl<'a, T: Sized> Fn<(&'a T,)> for FooFnItem<T> {
    type Output = &'a T;
    /* fn call(&self, ...) -> ... { ... } */
}
```

----------------------------------------

TITLE: Configuring Nix Shell with Custom Bootstrap Settings
DESCRIPTION: Nix configuration example showing how to manage bootstrap.toml settings within a nix shell.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/suggested.md#2025-04-21_snippet_9

LANGUAGE: nix
CODE:
```
let
  config = pkgs.writeText "rustc-config" ''
    # Your bootstrap.toml content goes here
  ''
pkgs.mkShell {
  /* ... */
  # This environment variable tells bootstrap where our bootstrap.toml is.
  RUST_BOOTSTRAP_CONFIG = config;
}
```

----------------------------------------

TITLE: Hard-Resetting All Git Submodules (Git Console)
DESCRIPTION: Iterates through all configured submodules and performs a hard reset on each. This discards any local changes within the submodules and resets them to the commit pinned by the main repository, useful for resolving submodule state issues.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_26

LANGUAGE: console
CODE:
```
git submodule foreach git reset --hard
```

----------------------------------------

TITLE: Generic Code Generation Instance Function
DESCRIPTION: Backend-agnostic function for code generation that is parameterized by builder methods trait. Shows how generic backend interfaces are used in practice.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/backend-agnostic.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
pub fn codegen_instance<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(
    cx: &'a Bx::CodegenCx,
    instance: Instance<'tcx>
) {
    /* ... */
}
```

----------------------------------------

TITLE: Running Graphviz for Rust Debugging Output
DESCRIPTION: This Bash snippet demonstrates how to convert a Graphviz .dot file into a PDF using the 'dot' command. It requires an installed Graphviz package and outputs the rendered graph as a PDF, viewable with any PDF reader.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/compiler-debugging.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
$ dot -T pdf maybe_init_suffix.dot > maybe_init_suffix.pdf
$ firefox maybe_init_suffix.pdf # Or your favorite pdf viewer
```

----------------------------------------

TITLE: Implementing Early Filtering in Rust Pattern Matching
DESCRIPTION: Example of early filtering in pattern matching that evaluates conditions as soon as a pattern part is matched. This demonstrates filtering an if-without-else pattern by checking if it's not within a macro.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/syntax-tree-patterns.md#2025-04-21_snippet_14

LANGUAGE: rust
CODE:
```
pattern!{
    pat_if_without_else: Expr =
        If(
            _,
            Block(
                Expr( If(_, _, ())#inner )
                | Semi( If(_, _, ())#inner )
            )#then,
            ()
        )
    where
        !in_macro(#then.span);
}
```

----------------------------------------

TITLE: Correct Usage of Plugin Attribute in Rust
DESCRIPTION: This snippet demonstrates the correct usage of the `#[plugin]` attribute with a single argument representing the plugin name, e.g., `foo`. It requires the feature to be enabled via the `#![feature(plugin)]` directive and proper plugin name specification without additional arguments. No outputs specified, usage limited by the need for proper plugin crates.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0498.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
#![feature(plugin)]
#![plugin(foo)] // ok!
```

----------------------------------------

TITLE: Git Configuration for Pushing over SSH with Bash
DESCRIPTION: This snippet shows the Git configuration command to use SSH for pushing changes to avoid authentication issues.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_17

LANGUAGE: sh
CODE:
```
[url "git@github.com:"]
    pushInsteadOf = https://github.com/
```

----------------------------------------

TITLE: Configuring DFSan for DFSan Wrappers in Rust
DESCRIPTION: This snippet marks DFSan wrapper functions as uninstrumented and discarded. These functions are specific to DFSan's internal operations and should not be analyzed.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/sanitizer/dataflow-abilist.txt#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
fun:__dfsw_*=uninstrumented
fun:__dfsw_*=discard
fun:__dfso_*=uninstrumented
fun:__dfso_*=discard
```

----------------------------------------

TITLE: Extending CodeAction Interface for Grouping
DESCRIPTION: Adds a 'group' field to the CodeAction interface to support grouping related code actions in the lightbulb menu, allowing for better organization of similar actions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
interface CodeAction {
    title: string;
    group?: string;
    ...
}
```

----------------------------------------

TITLE: Defining Inline Assembly Template Pieces in Rust
DESCRIPTION: Enum representing template pieces for inline assembly, with support for string literals and operand placeholders. Used to parse and represent assembly template strings.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/asm.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
pub enum InlineAsmTemplatePiece {
    String(String),
    Placeholder { operand_idx: usize, modifier: Option<char>, span: Span },
}
```

----------------------------------------

TITLE: Rust Compiler Error: Unterminated Byte Literal
DESCRIPTION: This snippet showcases a Rust compiler error message indicating a missing closing single quote for a byte literal. The error message points out that the byte literal is not terminated properly, causing a syntax error during compilation. The fix is to add the missing single quote.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unclosed_byte_with_ferris.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
"BYTE \"b'🦀\" error: Missing trailing `'` symbol to terminate the byte literal"
```

----------------------------------------

TITLE: Configuring DFSan for Fuzzer Sanitizer Functions in Rust
DESCRIPTION: This snippet defines custom handling and uninstrumented status for various sanitizer functions used in fuzzing. It includes trace comparison and switch operations, replacing some with DFSan-specific versions.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/sanitizer/dataflow-abilist.txt#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
fun:__sanitizer_cov_trace_cmp1=custom
fun:__sanitizer_cov_trace_cmp1=uninstrumented
fun:__sanitizer_cov_trace_cmp2=custom
fun:__sanitizer_cov_trace_cmp2=uninstrumented
fun:__sanitizer_cov_trace_cmp4=custom
fun:__sanitizer_cov_trace_cmp4=uninstrumented
fun:__sanitizer_cov_trace_cmp8=custom
fun:__sanitizer_cov_trace_cmp8=uninstrumented
fun:__sanitizer_cov_trace_const_cmp1=custom
fun:__sanitizer_cov_trace_const_cmp1=uninstrumented
fun:__sanitizer_cov_trace_const_cmp2=custom
fun:__sanitizer_cov_trace_const_cmp2=uninstrumented
fun:__sanitizer_cov_trace_const_cmp4=custom
fun:__sanitizer_cov_trace_const_cmp4=uninstrumented
fun:__sanitizer_cov_trace_const_cmp8=custom
fun:__sanitizer_cov_trace_const_cmp8=uninstrumented
fun:__sanitizer_cov_trace_switch=custom
fun:__sanitizer_cov_trace_switch=uninstrumented
```

----------------------------------------

TITLE: Architecture Diagram - Stable MIR System Components
DESCRIPTION: ASCII art diagram showing the interaction between external tools using stable_mir and the Rust compiler's rustc_smir component. The diagram illustrates the separation between external tools and the compiler infrastructure.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/stable_mir/README.md#2025-04-21_snippet_0

LANGUAGE: ascii-art
CODE:
```
    ┌──────────────────────────────────┐           ┌──────────────────────────────────┐
    │   External Tool     ┌──────────┐ │           │ ┌──────────┐   Rust Compiler     │
    │                     │          │ │           │ │          │                     │
    │                     │stable_mir| │           │ │rustc_smir│                     │
    │                     │          │ ├──────────►| │          │                     │
    │                     │          │ │◄──────────┤ │          │                     │
    │                     │          │ │           │ │          │                     │
    │                     │          │ │           │ │          │                     │
    │                     └──────────┘ │           │ └──────────┘                     │
    └──────────────────────────────────┘           └──────────────────────────────────┘
```

----------------------------------------

TITLE: Printing Debug Representation of a Tree in C
DESCRIPTION: This function call prints a debug representation of a tree structure in C. It's useful for inspecting complex data structures during debugging of libgccjit-related code.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/debugging-libgccjit.md#2025-04-21_snippet_2

LANGUAGE: c
CODE:
```
debug_tree(expr);
```

----------------------------------------

TITLE: Super Trait Cycles Requiring Careful Coinduction Handling
DESCRIPTION: Example demonstrating an issue with super trait relationships that would be unsound if coinduction were implemented naively without considering trait relationships.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/coinduction.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
trait Trait: SuperTrait {}

impl<T: Trait> Trait for T {}

// Keeping the current setup for coinduction
// would allow this compile. Uff :<
fn sup<T: SuperTrait>() {}
fn requires_trait<T: Trait>() { sup::<T>() }
fn generic<T>() { requires_trait::<T>() }
```

----------------------------------------

TITLE: Running GCC JIT Test for Function Attributes
DESCRIPTION: Command to run a specific GCC JIT test for function attributes in your gcc-build folder. This example shows how to test the 'nonnull' attribute implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/add-attribute.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
make check-jit RUNTESTFLAGS="-v -v -v jit.exp=jit.dg/test-nonnull.c"
```

----------------------------------------

TITLE: Interpreting Generic Parameters Syntax in Rust Compiler
DESCRIPTION: Explains the syntax used for generic parameters in the Rust compiler's internal representation. The format is {name}/#{index}, where index corresponds to the parameter's position in the list of generic parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
T/#0
```

----------------------------------------

TITLE: User Type Annotation Example in Rust
DESCRIPTION: This Rust snippet illustrates the potential issue of erasing lifetimes in user-defined types during MIR type-checking. It ensures that the user-defined type is maintained correctly to avoid incorrect type inference.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/type_check.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<'a>(x: &'a u32) {
    let y: &'static u32 = x;
}
```

----------------------------------------

TITLE: Type-Checking Generic Function - Rust
DESCRIPTION: This snippet modifies the previous example to create a generic function `foo<T: Eq<T>>()`, demonstrating the type-checking process for generic types in Rust with logical rules.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/lowering-to-logic.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
fn foo<T: Eq<T>>() { bar::<T>() }
fn bar<U: Eq<U>>() { }
```

----------------------------------------

TITLE: Debug Print Statement in Rust Analyzer
DESCRIPTION: Example debug print statement using eprintln! macro for debugging rust-analyzer.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/setup.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
eprintln!("Hello, world!");
```

----------------------------------------

TITLE: Applying Liveness Constraints to SCCs
DESCRIPTION: Describes how liveness constraints are applied to SCCs in the region inference process.  The example shows how the liveness values associated with individual regions are unioned into the corresponding SCC's value.  The process involves iterating through each region, identifying its SCC, and updating the SCC's value by taking the union of its current value and the region's liveness values.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/constraint_propagation.md#2025-04-21_snippet_3

LANGUAGE: Text
CODE:
```
for each region R:
  let S be the SCC that contains R
  Values(S) = Values(S) union Liveness(R)
```

----------------------------------------

TITLE: Incorrect Intrinsic Static Declaration in Rust
DESCRIPTION: An erroneous example showing an intrinsic declared as a static instead of a function, which is not allowed by the Rust compiler. This code demonstrates the incorrect way to define an intrinsic.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0622.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(intrinsics)]\n#![allow(internal_features)]\n\nextern "C" {\n    #[rustc_intrinsic]\n    pub static atomic_singlethreadfence_seqcst: unsafe fn();\n    // error: intrinsic must be a function\n}\n\nfn main() { unsafe { atomic_singlethreadfence_seqcst(); } }
```

----------------------------------------

TITLE: Cloning rustc-perf Repository
DESCRIPTION: Command to clone the rustc-perf repository for accessing benchmark tests that can be used for profiling. This repository contains standard benchmarks used by the Rust project.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
$ git clone https://github.com/rust-lang/rustc-perf
```

----------------------------------------

TITLE: FileCheck Prefix-Based Expectations in Rust
DESCRIPTION: Shows how to define test expectations using custom prefixes for different test revisions, including SAME and NOT conditions
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/codegen/README.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// CHECK: expected code
// aaa-SAME: emitted-only-for-aaa
// aaa-NOT:                        emitted-only-for-bbb
// bbb-NOT:  emitted-only-for-aaa
// bbb-SAME:                       emitted-only-for-bbb
```

----------------------------------------

TITLE: Configuring bootstrap.toml for armv6k-nintendo-3ds Target
DESCRIPTION: Configuration settings to add to bootstrap.toml when building Rust with support for the armv6k-nintendo-3ds target, specifying the build stage, target, and paths to the devkitARM toolchain executables.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv6k-nintendo-3ds.md#_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
target = ["armv6k-nintendo-3ds"]

[target.armv6k-nintendo-3ds]
cc = "/opt/devkitpro/devkitARM/bin/arm-none-eabi-gcc"
cxx = "/opt/devkitpro/devkitARM/bin/arm-none-eabi-g++"
ar = "/opt/devkitpro/devkitARM/bin/arm-none-eabi-ar"
ranlib = "/opt/devkitpro/devkitARM/bin/arm-none-eabi-ranlib"
linker = "/opt/devkitpro/devkitARM/bin/arm-none-eabi-gcc"
```

----------------------------------------

TITLE: Running Rust test suite on QNX
DESCRIPTION: This bash script demonstrates how to run the Rust test suite on a QNX target. It sets environment variables for the test device address and compiler build environment, and then executes the `x.py test` script, excluding certain tests that are known to fail or are not applicable to the target environment.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/nto-qnx.md#2025-04-21_snippet_4

LANGUAGE: Bash
CODE:
```
```bash
export TEST_DEVICE_ADDR="localhost:12345" # must address the test target, can be a SSH tunnel
export build_env=<see above>

# Disable tests that only work on the host or don't make sense for this target.
# See also:
# - src/ci/docker/host-x86_64/i686-gnu/Dockerfile
# - https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Running.20tests.20on.20remote.20target
# - .github/workflows/ci.yml
export exclude_tests='\
    --exclude src/bootstrap \
    --exclude src/tools/error_index_generator \
    --exclude src/tools/linkchecker \
    --exclude tests/ui-fulldeps \
    --exclude rustc \
    --exclude rustdoc'

env $build_env \
    ./x.py test \
        $exclude_tests \
        --stage 1 \
        --target x86_64-pc-nto-qnx710
```
```

----------------------------------------

TITLE: Markdown List of Rust Humor References
DESCRIPTION: A markdown formatted list of links to various humorous content in the Rust ecosystem, including test files, blog posts, and pull requests that demonstrate the community's sense of humor.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/appendix/humorust.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Humor in Rust

What's a project without a sense of humor? And frankly some of these are
enlightening?

- [Weird exprs test](https://github.com/rust-lang/rust/blob/master/tests/ui/weird-exprs.rs)
- [Ferris Rap](https://fitzgen.com/2018/12/13/rust-raps.html)
- [The Genesis of Generic Germination](https://github.com/rust-lang/rust/pull/53645#issue-210543221)
- [The Bastion of the Turbofish test](https://github.com/rust-lang/rust/blob/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f/src/test/ui/bastion-of-the-turbofish.rs)
- [Rust Koans](https://users.rust-lang.org/t/rust-koans/2408)
- [`break rust;`](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0ab2bd6a9d722e0f05a95e2a5dcf89cc)
- [The Nomicon Intro](https://doc.rust-lang.org/stable/nomicon/)
- [`rustc-ty` renaming punfest](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/rustc-ty.20naming.20bikeshed.20.2F.20punfest.20%28was.3A.20design.20meeting.202.2E.2E.2E/near/189906455)
- [try using their name "ferris" instead](https://github.com/rust-lang/rust/pull/91476)
- [Forbid pineapple on pizza](https://github.com/rust-lang/rust/pull/70645)
```

----------------------------------------

TITLE: Copyright Disclaimer Template
DESCRIPTION: Template for a copyright disclaimer that may need to be signed by an employer or school.
SOURCE: https://github.com/rust-lang/rust/blob/master/LICENSES/GPL-2.0-only.txt#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
Yoyodyne, Inc., hereby disclaims all copyright
interest in the program `Gnomovision'
(which makes passes at compilers) written 
by James Hacker.

signature of Ty Coon, 1 April 1989
Ty Coon, President of Vice
```

----------------------------------------

TITLE: Standard GPL License Header Template
DESCRIPTION: Template for the standard GPL license header that should be included at the start of source files, including copyright notice and warranty disclaimer.
SOURCE: https://github.com/rust-lang/rust/blob/master/LICENSES/GPL-2.0-only.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
one line to give the program's name and an idea of what it does.
Copyright (C) yyyy  name of author

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
```

----------------------------------------

TITLE: @rustbot Release Assignment Command - Markdown
DESCRIPTION: This snippet provides the command to release an assignment from an issue. Contributors can unassign themselves from an issue using this command.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustbot.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
@rustbot release-assignment
```

----------------------------------------

TITLE: Re-labeling Pull Requests in Rust
DESCRIPTION: Use this command to update the label of a pull request in Rust's GitHub repository once merge commits have been resolved. This ensures that the PR status is accurately reflected in the review queue.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/contributing.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
@rustbot label -has-merge-commits
```

----------------------------------------

TITLE: Handling list-like expressions in Rust formatting
DESCRIPTION: This snippet describes the generic processing of list syntax elements such as argument lists, field lists, and array elements in Rust code. It discusses spacing, indentation, comment placement, and separator management using functions like `write_list` and structures like `ListFormatting`. Usually, `itemize_list` prepares the input data for formatting.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Contributing.md#_snippet_5

LANGUAGE: Rust
CODE:
```
Much of the syntax in Rust is lists: lists of arguments, lists of fields, lists of array elements, etc. We have some generic code to handle lists, including how to space them in horizontal and vertical space, indentation, comments between items, trailing separators, etc. However, since there are so many options, the code is a bit complex. Look in [src/lists.rs](src/lists.rs). `write_list` is the key function, and `ListFormatting` the key structure for configuration. You'll need to make a `ListItems` for input, this is usually done using `itemize_list`.
```

----------------------------------------

TITLE: Parsing Rust Compiler Diagnostic Output
DESCRIPTION: This code snippet shows the structure of a MappedRustDiagnostic object, which contains detailed information about a Rust compiler error. It includes the file location, error severity, error code, and a descriptive message about the missing main function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/rust-analyzer/src/diagnostics/test_data/reasonable_line_numbers_from_empty_file.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
MappedRustDiagnostic {
    url: Url {
        scheme: "file",
        cannot_be_a_base: false,
        username: "",
        password: None,
        host: None,
        port: None,
        path: "/test/src/bin/current.rs",
        query: None,
        fragment: None,
    },
    diagnostic: Diagnostic {
        range: Range {
            start: Position {
                line: 0,
                character: 0,
            },
            end: Position {
                line: 0,
                character: 0,
            },
        },
        severity: Some(
            Error,
        ),
        code: Some(
            String(
                "E0601",
            ),
        ),
        code_description: Some(
            CodeDescription {
                href: Url {
                    scheme: "https",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: Some(
                        Domain(
                            "doc.rust-lang.org",
                        ),
                    ),
                    port: None,
                    path: "/error-index.html",
                    query: None,
                    fragment: Some(
                        "E0601",
                    ),
                },
            },
        ),
        source: Some(
            "rustc",
        ),
        message: "`main` function not found in crate `current`\nconsider adding a `main` function to `src/bin/current.rs`",
        related_information: None,
        tags: None,
        data: None,
    },
    fix: None,
}
```

----------------------------------------

TITLE: Documenting Internal Rust Compiler Feature in Markdown
DESCRIPTION: This snippet provides a brief documentation for the 'link_cfg' feature, which is internal to the Rust compiler. It explicitly states that this feature is not intended for general use, indicating it's a specialized component of the compiler's implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/link-cfg.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `link_cfg`

This feature is internal to the Rust compiler and is not intended for general use.
```

----------------------------------------

TITLE: @rustbot Issue Claiming Command - Markdown
DESCRIPTION: This snippet shows the command used to claim an issue. Contributors can use this command to assign the issue to themselves if it is unassigned.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustbot.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
@rustbot claim
```

----------------------------------------

TITLE: Function Subtyping Relationship Example
DESCRIPTION: Text representation showing subtyping relationship between static and placeholder lifetimes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/placeholders_and_universes.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
fn(&'static u32) <: for<'a> fn(&'a u32)
----------------    -------------------
the type of `foo`   the type `bar` expects
```

----------------------------------------

TITLE: QEMU Execution Command for ARM RTEMS Binary
DESCRIPTION: Shell command to execute a compiled binary on QEMU emulator for Xilinx Zynq A9 architecture with specific hardware configuration parameters
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7-rtems-eabihf.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
qemu-system-arm -no-reboot -serial null -serial mon:stdio -net none -nographic -M xilinx-zynq-a9 -m 512M -kernel <binary file>
```

----------------------------------------

TITLE: Complete make Function Implementation in Rust
DESCRIPTION: Full implementation of the make function returning a tuple with lifetime parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/member_constraints.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
type MakeReturn<'x, 'y> = impl Trait<'x, 'y>;
fn make(a: &'a u32, b: &'b u32) -> MakeReturn<'a, 'b> {
  (a, b)
}
```

----------------------------------------

TITLE: Configuring Build Target for i686-apple-darwin in Rust
DESCRIPTION: This snippet shows the configuration required in the `bootstrap.toml` file to build Rust for the `i686-apple-darwin` target. Ensure you have the macOS 10.13 SDK from Xcode 9, and set `SDKROOT` accordingly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/i686-apple-darwin.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["i686-apple-darwin"]
```

----------------------------------------

TITLE: Printing Debug Representation of a Gimple Struct in C
DESCRIPTION: This function call prints a debug representation of a gimple struct in C. It's helpful for examining the internal state of gimple structures during libgccjit debugging.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/debugging-libgccjit.md#2025-04-21_snippet_3

LANGUAGE: c
CODE:
```
debug_gimple_stmt(gimple_struct)
```

----------------------------------------

TITLE: Processed Canonical Query Result
DESCRIPTION: Demonstrates applying the canonical query result in its original context by instantiating and unifying variables with original ones, while capturing region constraints for verification.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/canonicalization.md#2025-04-21_snippet_8

LANGUAGE: text
CODE:
```
{
      certainty: Proven,
      var_values: [Vec<?C>, '?D, ?C]
                       ^^   ^^^ fresh inference variables
      region_constraints: [?C: '?D],
      value: (),
}
```

----------------------------------------

TITLE: Implementing a Type Check Crate Query Provider in Rust Compiler
DESCRIPTION: Example of a query provider implementation for the type_check_crate query, showing how it accesses input data from the HIR map and invokes other queries like type_check_item for each item in the crate.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/query-evaluation-model-in-detail.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fn type_check_crate_provider(tcx, _key: ()) {
    let list_of_hir_items = tcx.hir_map.list_of_items();

    for item_def_id in list_of_hir_items {
        tcx.type_check_item(item_def_id);
    }
}
```

----------------------------------------

TITLE: Enabling Target in Rust Build Configuration
DESCRIPTION: Configuration for adding powerpc64-unknown-linux-musl target to Rust build process, specifying the target in build settings
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/powerpc64-unknown-linux-musl.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["powerpc64-unknown-linux-musl"]
```

----------------------------------------

TITLE: Identifying Rust Tokens After Error
DESCRIPTION: This snippet showcases the Rust tokens that the lexer identifies after encountering the raw string literal error. The tokens include identifiers (IDENT), whitespace (WHITESPACE), and a bang operator (BANG).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/unstarted_raw_string_with_ascii.txt#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
"IDENT \"I\"\nWHITESPACE \" \"\nIDENT \"lack\"\nWHITESPACE \" \"\nIDENT \"a\"\nWHITESPACE \" \"\nIDENT \"quote\"\nBANG \"!\""

```

----------------------------------------

TITLE: Analyzing Unused Variable Warning in Rust
DESCRIPTION: This snippet represents a compiler warning for an unused variable 'foo' in a Rust file. It suggests prefixing the variable with an underscore to indicate it's intentionally unused.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
foo
```

----------------------------------------

TITLE: Adding Date Annotation for Documentation
DESCRIPTION: This snippet shows how to include a date annotation in markdown to provide context for information. It describes the recommended format for adding the date and how to leverage it within the guide.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/contributing.md#2025-04-21_snippet_5

LANGUAGE: markdown
CODE:
```
<!-- date-check --> Apr 2025
```

----------------------------------------

TITLE: Package Requirements with Hashes
DESCRIPTION: Specifies exact versions and SHA-256 hashes for required Python packages clang-format and ruff. Generated automatically by pip-compile from a source requirements file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/tidy/config/requirements.txt#2025-04-21_snippet_0

LANGUAGE: ini
CODE:
```
clang-format==18.1.7 \
    --hash=sha256:035204410f65d03f98cb81c9c39d6d193f9987917cc88de9d0dbd01f2aa9c302 \
    --hash=sha256:05c482a854287a5d21f7567186c0bd4b8dbd4a871751e655a45849185f30b931 \
    --hash=sha256:0b352ec51b291fe04c25a0f0ed15ba1a55b9c9c8eaa7fdf14de3d3585aef4f72 \
    --hash=sha256:217526c8189c18fd175e19bb3e4da2d1bdf14a2bf79d97108c9b6a98d9938351 \
    --hash=sha256:42d0b580ab7a45348155944adebe0bef53d1de9357b925830a59bbc351a25560 \
    --hash=sha256:57090c40a8f0a898e0db8be150a19be2551302d5f5620d2a01de07e7c9220a53 \
    --hash=sha256:607772cf474c1ebe0de44f44c1324e57a2d5b45a1d96d4aff166645532d99b43 \
    --hash=sha256:a49c44d7cc00431be8285aa120a7a21fa0475786c03c53b04a26882c4e626a43 \
    --hash=sha256:a62fca204293893badde0ab004df8b6df1d13eac4d452051554d9684d0a8254e \
    --hash=sha256:a914592a51f77c3563563c7a8970f19bc1ed59174ab992f095a78f4e142382ac \
    --hash=sha256:b3a0a09428cdd656ed87074543222a80660bc506407ed21b8e4bcb3d6d3a5a3c \
    --hash=sha256:c151d42e6ac7c3cc03d7fec61bed3211ce8f75528e1efd8fc64bdb33840987b2 \
    --hash=sha256:d6a2f051124d6ae506ba2a68accfe4ea4c8cb90d13b422c3131bb124413bac32 \
    --hash=sha256:f4f77ac0f4f9a659213fedda0f2d216886c410132e6e7dd4b13f92b34e925554 \
    --hash=sha256:f935d34152a2e11e55120eb9182862f432bc9789ab819f680c9f6db4edebf9e3
    # via -r src/tools/tidy/config/requirements.in
ruff==0.4.9 \
    --hash=sha256:06b60f91bfa5514bb689b500a25ba48e897d18fea14dce14b48a0c40d1635893 \
    --hash=sha256:0e8e7b95673f22e0efd3571fb5b0cf71a5eaaa3cc8a776584f3b2cc878e46bff \
    --hash=sha256:2d45ddc6d82e1190ea737341326ecbc9a61447ba331b0a8962869fcada758505 \
    --hash=sha256:4555056049d46d8a381f746680db1c46e67ac3b00d714606304077682832998e \
    --hash=sha256:5d5460f789ccf4efd43f265a58538a2c24dbce15dbf560676e430375f20a8198 \
    --hash=sha256:673bddb893f21ab47a8334c8e0ea7fd6598ecc8e698da75bcd12a7b9d0a3206e \
    --hash=sha256:732dd550bfa5d85af8c3c6cbc47ba5b67c6aed8a89e2f011b908fc88f87649db \
    --hash=sha256:784d3ec9bd6493c3b720a0b76f741e6c2d7d44f6b2be87f5eef1ae8cc1d54c84 \
    --hash=sha256:78de3fdb95c4af084087628132336772b1c5044f6e710739d440fc0bccf4d321 \
    --hash=sha256:8064590fd1a50dcf4909c268b0e7c2498253273309ad3d97e4a752bb9df4f521 \
    --hash=sha256:88bffe9c6a454bf8529f9ab9091c99490578a593cc9f9822b7fc065ee0712a06 \
    --hash=sha256:8c1aff58c31948cc66d0b22951aa19edb5af0a3af40c936340cd32a8b1ab7438 \
    --hash=sha256:98ec2775fd2d856dc405635e5ee4ff177920f2141b8e2d9eb5bd6efd50e80317 \
    --hash=sha256:b262ed08d036ebe162123170b35703aaf9daffecb698cd367a8d585157732991 \
    --hash=sha256:e0a22c4157e53d006530c902107c7f550b9233e9706313ab57b892d7197d8e52 \
    --hash=sha256:e91175fbe48f8a2174c9aad70438fe9cb0a5732c4159b2a10a3565fea2d94cde \
    --hash=sha256:f1cb0828ac9533ba0135d148d214e284711ede33640465e706772645483427e3
    # via -r src/tools/tidy/config/requirements.in
```

----------------------------------------

TITLE: Setting AMD GPU target and generation in Cargo configuration
DESCRIPTION: The snippet provides a `.cargo/config.toml` configuration that specifies the target architecture for AMD GPUs and sets the rustflags to optimize for a particular GPU generation, such as gfx1100. The optional 'build-std' flag includes necessary libraries like 'core', and the setup is required for robust compilation targeting AMD GPUs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/amdgcn-amd-amdhsa.md#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[build]\ntarget = "amdgcn-amd-amdhsa"\nrustflags = ["-Ctarget-cpu=gfx1100"]\n\n[unstable]\nbuild-std = ["core"] # Optional: "alloc"
```

----------------------------------------

TITLE: Markdown Documentation Structure
DESCRIPTION: Hierarchical table of contents for Rust project documentation, organized into major sections including installation, configuration, features, and contributing guidelines. Links to individual markdown files for each topic.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/SUMMARY.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Summary

- [Introduction](README.md)
- [Installation](installation.md)
  - [VS Code](vs_code.md)
  - [rust-analyzer Binary](rust_analyzer_binary.md)
  - [Other Editors](other_editors.md)
- [Troubleshooting](troubleshooting.md)
- [Configuration](configuration.md)
  - [Non-Cargo Based Projects](non_cargo_based_projects.md)
- [Security](security.md)
- [Privacy](privacy.md)
- [Features](features.md)
  - [Assists (Code Actions)](assists.md)
  - [Diagnostics](diagnostics.md)
- [Editor Features](editor_features.md)
- [Contributing](contributing/README.md)
  - [Architecture](contributing/architecture.md)
  - [Debugging](contributing/debugging.md)
  - [Guide](contributing/guide.md)
  - [LSP Extensions](contributing/lsp-extensions.md)
  - [Setup](contributing/setup.md)
  - [Style](contributing/style.md)
  - [Syntax](contributing/syntax.md)
```

----------------------------------------

TITLE: Defining Core Intrinsics Feature in Rust
DESCRIPTION: This code snippet defines the 'core_intrinsics' feature as an internal Rust compiler feature. It specifies that this feature is not intended for general use and is restricted to internal compiler operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/core-intrinsics.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `core_intrinsics`

This feature is internal to the Rust compiler and is not intended for general use.
```

----------------------------------------

TITLE: Constraining Lifetimes in Function Item Implementations
DESCRIPTION: The following code demonstrates how to configure constrained lifetimes in a struct that represents a function item, showcasing Rust's handling of lifetimes in trait implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_20

LANGUAGE: rust
CODE:
```
struct FooFnItem<'a>(PhantomData<fn() -> &'a String>);

impl<'a> Fn<()> for FooFnItem<'a> {
    type Output = &'a String;
    /* fn call(...) -> ... { ... } */
}
```

----------------------------------------

TITLE: Defining Region Relationships in Rust
DESCRIPTION: This snippet illustrates the creation of region element domains for a specific subtyping constraint in Rust's type system. It outlines how universal variables are established, showing their initial values and the relationship between them.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/placeholders_and_universes.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
Vs = { CFG; end('static) } // it is in U0, so can't name anything else
V1 = { placeholder(1) }
```

----------------------------------------

TITLE: Workflow for Squashing Commits During Rebase (Console)
DESCRIPTION: A sequence of commands combining interactive rebase (to squash commits) with a standard rebase (to apply the squashed changes) and conflict resolution, resulting in a cleaner history with fewer commits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/git.md#_snippet_16

LANGUAGE: console
CODE:
```
git rebase -i --keep-base master  # and squash all changes along the way
git rebase master
# fix all merge conflicts
git rebase --continue
```

----------------------------------------

TITLE: Defining Internal Rust Compiler Feature: fmt_internals
DESCRIPTION: This code snippet defines an internal feature of the Rust compiler named 'fmt_internals'. It explicitly states that this feature is not meant for general use and is restricted to the compiler's internal operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/fmt-internals.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# `fmt_internals`

This feature is internal to the Rust compiler and is not intended for general use.
```

----------------------------------------

TITLE: Configuring Autodiff Compiler Flag in Rust
DESCRIPTION: Sets the -Zautodiff compiler flag with various options to control the behavior of the automatic differentiation feature. Options can be combined using commas.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/autodiff.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
-Zautodiff=<options>
```

----------------------------------------

TITLE: Demonstrating Invalid Input Operand Constraint in llvm_asm Macro (Rust)
DESCRIPTION: This code snippet shows an erroneous example of using the llvm_asm macro with an invalid input operand constraint. The constraint "=test" is not a valid LLVM constraint, causing a compiler error. This error is no longer emitted by the current Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0662.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
llvm_asm!("xor %eax, %eax"
          :
          : "=test"("a")
         );
```

----------------------------------------

TITLE: Markdown Changelog Entry for Rustfmt 0.2.5
DESCRIPTION: Documents fixes and additions in version 0.2.5 including attribute preservation and span field access improvements.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_25

LANGUAGE: markdown
CODE:
```
## [0.2.5] 2017-08-31

### Added

- Format and preserve attributes on statements (#1933).

### Fixed

- Use getters to access `Span` fields (#1899).
```

----------------------------------------

TITLE: Generating Windows System Bindings using x.py
DESCRIPTION: Command sequence to regenerate windows_sys.rs from bindings.txt and format the code. This should be run after making changes to bindings.txt.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/std/src/sys/pal/windows/c/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
./x run generate-windows-sys && ./x fmt
```

----------------------------------------

TITLE: Command Wrappers in Rust Run Make Support
DESCRIPTION: Custom wrapper classes around std::process::Command and std::process::Output to provide more convenient command execution and output handling with added safety and convenience methods
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/run-make-support/CHANGELOG.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
// Custom Command wrapper with added methods
struct Command {
    // Implementation details
    set_stdin(),
    run(),
    run_fail()
}

// Custom CompletedProcess wrapper
struct CompletedProcess {
    // Added convenience methods
    stderr_utf8(),
    stdout_utf8(),
    status(),
    assert_stderr_equals(),
    assert_stdout_contains()
}
```

----------------------------------------

TITLE: Implementing check_fn in EarlyLintPass for Lint Emission - Rust
DESCRIPTION: Implements the EarlyLintPass trait for a custom FooFunctions struct, providing a check_fn method to interact with each function definition in the AST. This basic skeleton serves as a template for further lint logic, granting access to the context, function kind, span, and node identifier. No lint is emitted here; further implementation is needed for actual lint logic. This snippet requires relevant imports and is used within Clippy lint development.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_6

LANGUAGE: rust
CODE:
```
impl EarlyLintPass for FooFunctions {
    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, span: Span, _: NodeId) {
        // TODO: Emit lint here
    }
}
```

----------------------------------------

TITLE: Adding Upstream LLVM Remote with Git
DESCRIPTION: Adds a remote named 'upstream' pointing to the official LLVM repository.  This allows fetching the latest changes from upstream to be merged into the Rust fork.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/updating-llvm.md#2025-04-21_snippet_0

LANGUAGE: git
CODE:
```
"git remote add upstream https://github.com/llvm/llvm-project.git"
```

LANGUAGE: git
CODE:
```
"git fetch upstream"
```

----------------------------------------

TITLE: Using Version Info Macro in Rust
DESCRIPTION: Demonstrates the usage of setup_version_info macro for automated version information handling in Rust projects. This macro simplifies version info setup and no longer requires manual imports.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/rustc_tools_util/CHANGELOG.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
setup_version_info!();
```

----------------------------------------

TITLE: Cycle Fixpoint Algorithm in New Rust Trait Solver
DESCRIPTION: The new trait solver implementation uses a fixpoint algorithm when encountering cycles during trait solving. This is necessary due to the use of canonicalization during goal evaluation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/significant-changes.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// Source: cycle-fixpoint
while !worklist.is_empty() {
    let goal = worklist.pop().unwrap();
    let response = self.evaluate_goal(goal, &mut worklist);
    // ... (rest of the fixpoint algorithm)
}
```

----------------------------------------

TITLE: Defining Goals and Clauses Meta Structure
DESCRIPTION: This snippet defines the meta-structure of Goals and Clauses in Rust's solver, including DomainGoal, logical operators (AND, OR), quantifiers (exists, forall), implication, and boolean values (true, ambiguous). It describes the recursive relationship between Goals and Clauses and how they are used in the trait solving process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/goals-and-clauses.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
"Goal = DomainGoal           // defined in the section below
        | Goal && Goal
        | Goal || Goal
        | exists<K> { Goal }   // existential quantification
        | forall<K> { Goal }   // universal quantification
        | if (Clause) { Goal } // implication
        | true                 // something that's trivially true
        | ambiguous            // something that's never provable

Clause = DomainGoal
        | Clause :- Goal     // if can prove Goal, then Clause is true
        | Clause && Clause
        | forall<K> { Clause }

K = <type>     // a \"kind\"
    | <lifetime>"
```

----------------------------------------

TITLE: Nested Goal Handling in Old Rust Trait Fulfillment
DESCRIPTION: In the old trait system's fulfillment phase, nested goals are simply returned for later processing, unlike in the evaluation phase.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/significant-changes.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
// Source: fulfill-nested
match goal.predicate {
    ty::PredicateKind::Trait(trait_predicate) => {
        self.fulfill_trait_obligation(goal, trait_predicate)
    }
    ty::PredicateKind::Projection(projection_predicate) => {
        self.fulfill_projection(goal, &projection_predicate)
    }
    // ... (other cases)
}
```

----------------------------------------

TITLE: Simple Function with Region Parameter
DESCRIPTION: Example showing a basic function with a lifetime parameter 'a used to demonstrate region analysis.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<'a>(x: &'a u32) {
    // ...
}
```

----------------------------------------

TITLE: Gitignore Extensions for Fuchsia Project
DESCRIPTION: Suggested .gitignore entries for a Fuchsia project.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/fuchsia.md#2025-04-21_snippet_20

LANGUAGE: txt
CODE:
```
pkg/repo
pkg/meta/hello_fuchsia.cm
pkg/hello_fuchsia_manifest
pkg/hello_fuchsia_package_manifest
```

----------------------------------------

TITLE: Using try-job PR description directives for custom CI builds
DESCRIPTION: This example shows how to specify custom CI jobs to run in a try build by adding try-job directives to a PR description. Each pattern can be an exact job name or a glob pattern matching multiple jobs, and must be on its own line.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ci.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
This PR fixes #123456.

try-job: x86_64-msvc
try-job: test-various
try-job: `*-alt`
```

----------------------------------------

TITLE: Creating Type Inference Context in Rust
DESCRIPTION: Shows how to create an inference context using the type checking context (tcx) with a builder pattern for configuration
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/type-inference.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
let infcx = tcx.infer_ctxt().build();
// Use the inference context `infcx` here.
```

----------------------------------------

TITLE: Specifying Benchmark Flags for Enzyme Autodiff in Text
DESCRIPTION: This snippet lists the benchmark flags supported by the Enzyme `autodiff` feature for performance experiments. These flags allow disabling post-optimization of LLVM-IR, enabling runtime activity features, and maximizing inlining.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/flags.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
NoPostopt // We won\'t optimize the LLVM-IR Module after AD
RuntimeActivity // Enables the runtime activity feature from Enzyme
Inline // Instructs Enzyme to maximize inlining as far as possible, beyond LLVM\'s default
```

----------------------------------------

TITLE: Defining Server Status Notification in TypeScript
DESCRIPTION: Defines an experimental server status notification with health status, quiescence state, and optional message for client-side status display
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
interface ServerStatusParams {
    health: "ok" | "warning" | "error",
    quiescent: boolean,
    message?: string,
}
```

----------------------------------------

TITLE: JSON Representation of DiscoverArgument::Buildfile for Workspace Discovery
DESCRIPTION: JSON example representing the 'Buildfile' variant of DiscoverArgument serialized for passing to the rust-analyzer workspace discovery command. It includes the buildfile key with the filename.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/configuration_generated.md#_snippet_12

LANGUAGE: json
CODE:
```
{
    "buildfile": "BUILD"
}
```

----------------------------------------

TITLE: Displaying GitHub Label and Ping Command for WASM Group in Markdown
DESCRIPTION: This snippet shows the GitHub label and ping command for the WebAssembly notification group. It uses Markdown formatting to display the information clearly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/wasm.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
**Github Label:** [O-wasm] <br>
**Ping command:** `@rustbot ping wasm`

[O-wasm]: https://github.com/rust-lang/rust/labels/O-wasm
```

----------------------------------------

TITLE: Defining Multiple Implementations of an Intrinsic in Rust
DESCRIPTION: Example showing how to create multiple implementations of the same intrinsic in different modules. Each implementation can have different behavior for backends that don't override the intrinsic.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/intrinsics.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
#![feature(intrinsics)]
#![allow(internal_features)]

#[rustc_intrinsic]
const unsafe fn const_deallocate(_ptr: *mut u8, _size: usize, _align: usize) {}

mod foo {
    #[rustc_intrinsic]
    const unsafe fn const_deallocate(_ptr: *mut u8, _size: usize, _align: usize) {
        panic!("noisy const dealloc")
    }
}
```

----------------------------------------

TITLE: Renaming libunwind Libraries for Native Bootstrapping
DESCRIPTION: Shell command to rename libunwind libraries to mimic libgcc for native bootstrapping of GNULLVM targets. This is a workaround that might become obsolete and is not recommended for regular use.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/windows-gnullvm.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
https://github.com/msys2/MINGW-packages/blob/68e640756df2df6df6afa60f025e3f936e7b977c/mingw-w64-rust/PKGBUILD#L108-L109
```

----------------------------------------

TITLE: MIR Basic Block Example
DESCRIPTION: This MIR snippet shows an example of a basic block in MIR, including storage statements and a terminator that calls a function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/index.md#2025-04-21_snippet_3

LANGUAGE: mir
CODE:
```
bb0: {
    StorageLive(_1);
    _1 = const <std::vec::Vec<T>>::new() -> bb2;
}
```

----------------------------------------

TITLE: Markdown Changelog Entry for Rustfmt 0.2.4
DESCRIPTION: Documents the addition of Yield support in version 0.2.4.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_26

LANGUAGE: markdown
CODE:
```
## [0.2.4] 2017-08-30

### Added

- Add support for `Yield` (#1928).
```

----------------------------------------

TITLE: MIR Representation of User Variable Debug Info
DESCRIPTION: This MIR snippet demonstrates how user-defined variables are associated with debug information in MIR, showing the mapping between variable names and their corresponding places.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/index.md#2025-04-21_snippet_2

LANGUAGE: mir
CODE:
```
scope 1 {
    debug vec => _1;                 // in scope 1 at src/main.rs:2:9: 2:16
}
```

----------------------------------------

TITLE: Running GCC Changelog Check Script
DESCRIPTION: Executes the changelog verification script to check commit formatting
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/sending-gcc-patch.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./contrib/gcc-changelog/git_check_commit.py
```

----------------------------------------

TITLE: Invalid CoercePointee without Generic Type Parameter
DESCRIPTION: Example showing error when deriving CoercePointee on a struct without generic type parameters.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0802.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#![feature(coerce_pointee)]
use std::marker::CoercePointee;
#[derive(CoercePointee)]
#[repr(transparent)]
struct NoGeneric<'a>(&'a u8);
```

----------------------------------------

TITLE: Building Rust Compiler Stage 1 Library (Bash)
DESCRIPTION: Executes the `./x.py` script to build the Rust compiler. It specifies `stage 1` which builds a minimal compiler to build the rest, and targets `library`, focusing on the core library components including the autodiff feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/installation.md#_snippet_1

LANGUAGE: bash
CODE:
```
./x.py build --stage 1 library
```

----------------------------------------

TITLE: Float128 Type Declaration Comment
DESCRIPTION: Documentation header specifying the f128 type for IEEE 128-bit floating point numbers, with reference to tracking issue #116909.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/f128.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `f128`

The tracking issue for this feature is: [#116909]

[#116909]: https://github.com/rust-lang/rust/issues/116909

---

Enable the `f128` type for  IEEE 128-bit floating numbers (quad precision).
```

----------------------------------------

TITLE: Type_of Query Flow
DESCRIPTION: Mermaid flowchart depicting the process flow of the type_of query when resolving opaque types.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/opaque-types-impl-trait-inference.md#2025-04-21_snippet_2

LANGUAGE: mermaid
CODE:
```
flowchart TD
    TypeOf["type_of query"]
    TypeOf -- find_opaque_ty_constraints --> FindOpaqueTyConstraints
    FindOpaqueTyConstraints --> Iterate
    Iterate["Iterate over each item in defining scope"]
    Iterate -- For each item --> TypeCheck
    TypeCheck["Check typeck(I) to see if it constraints O"]
    TypeCheck -- I does not\nconstrain O --> Iterate
    TypeCheck -- I constrains O --> BorrowCheck
    BorrowCheck["Invoke mir_borrowck(I) to get hidden type\nfor O computed by I"]
    BorrowCheck --> PreviousType
    PreviousType["Hidden type from I\nsame as any previous hidden type\nfound so far?"]
    PreviousType -- Yes --> Complete
    PreviousType -- No --> ReportError
    ReportError["Report an error"]
    ReportError --> Complete["Item I complete"]
    Complete --> Iterate

    FindOpaqueTyConstraints -- All constraints found --> Done
    Done["Done"]
```

----------------------------------------

TITLE: Combining Compiler Lint Passes
DESCRIPTION: This code snippet describes the registration of multiple lint passes into a single combined lint pass for performance improvements in the Rust compiler. This approach minimizes the overhead of managing numerous individual lint passes while utilizing static dispatch for runtime efficiency.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/lintstore.md#2025-04-21_snippet_2

LANGUAGE: Rust
CODE:
```
// Example of combining lint passes
struct BuiltinCombinedModuleLateLintPass;
impl LintPass for BuiltinCombinedModuleLateLintPass {
    fn name(&self) -> &'static str {
        "CombinedLate"
    }
}
```

----------------------------------------

TITLE: URL Fragment Extraction Function in JavaScript
DESCRIPTION: Extracts and processes URL fragments, filtering out HTML and anchor elements
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/not_found.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
function get_url_fragments() {
    var last = document.URL.split("/").pop();
    var tokens = last.split(".");
    var op = [];
    for (var i=0; i < tokens.length; i++) {
        var t = tokens[i];
        if (t == 'html' || t.indexOf("#") != -1) {
            // no html or anchors
        } else {
            op.push(t);
        }
    }
    return op;
}
```

----------------------------------------

TITLE: Pinging Fuchsia Team on Rustbot
DESCRIPTION: Command to notify the Fuchsia team through Rustbot when help is needed with build issues.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ecosystem-test-jobs/fuchsia.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
@rustbot ping fuchsia
```

----------------------------------------

TITLE: Referencing RUSTC_BOOTSTRAP Documentation in Rust
DESCRIPTION: This snippet provides a markdown link to the RUSTC_BOOTSTRAP documentation, which is related to feature enabling in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/allow-features.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
[`RUSTC_BOOTSTRAP`]: ./rustc-bootstrap.html
```

----------------------------------------

TITLE: Collapsing Macro Debug Info in Rust
DESCRIPTION: Controls whether code locations from a macro definition are collapsed into a single location at the macro call site for debuginfo.  Valid values are `y`, `yes`, `on`, `true`, `n`, `no`, `off`, `false`, and `external`.  The option overrides default behavior and `#[collapse_debuginfo]` attributes. The `external` value only collapses if the macro comes from a different crate.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/codegen-options/index.md#_snippet_2



----------------------------------------

TITLE: Delegating Completion to Analysis Engine (Rust)
DESCRIPTION: This function delegates completion requests from the LSP handler to the analysis engine, forming the bridge between the protocol layer and the semantic analysis infrastructure.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_20

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/ide/src/lib.rs#L605-L615
```

----------------------------------------

TITLE: Skip FileCheck Verification - Rust
DESCRIPTION: This comment instructs the test runner to skip FileCheck verification for the current test file. This can be useful in cases where FileCheck is not applicable or when the MIR output is too complex to verify with FileCheck.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/mir-opt/README.md#_snippet_5

LANGUAGE: Rust
CODE:
```
// skip-filecheck
```

----------------------------------------

TITLE: Alternative GIMPLE Generation Option in C
DESCRIPTION: This snippet shows an alternative way to generate GIMPLE output by using a different GCC JIT API option. It adds a command-line option instead of setting a boolean option.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/gimple.md#2025-04-21_snippet_5

LANGUAGE: C
CODE:
```
gcc_jit_context_add_command_line_option(ctxt, "-fdump-tree-gimple");
```

----------------------------------------

TITLE: Hover Actions Extension in TypeScript
DESCRIPTION: Defines an experimental extension for hover actions, allowing additional command links to be displayed with hover information
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_20

LANGUAGE: typescript
CODE:
```
interface Hover {
    actions?: CommandLinkGroup[];
}

interface CommandLink extends Command {
    tooltip?: string;
}

interface CommandLinkGroup {
    title?: string;
    commands: CommandLink[];
}
```

----------------------------------------

TITLE: Illustrating Comment Styles in Bash
DESCRIPTION: These snippets illustrate several ways to document and comment within a shell script. The examples include various comment prefixes such as '//', '//!', and '///', which do not affect the execution of the script. This is useful for documentation and organizational purposes in different contexts when writing scripts.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/single_line_comments.txt#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash\n\n// hello\n//! World\n//!! Inner line doc\n/// Outer line doc\n//// Just a comment\n\n//\n//!\n//!!\n///\n////\n
```

----------------------------------------

TITLE: Checking Specific Commit with Changelog Script
DESCRIPTION: Verifies changelog formatting for a specific commit hash
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/sending-gcc-patch.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
./contrib/gcc-changelog/git_check_commit.py abdef78989
```

----------------------------------------

TITLE: Expression ID for Position-Independent References (Rust)
DESCRIPTION: This code defines the expression ID structure used to reference expressions in a position-independent manner during type inference, enabling stable references across source modifications.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_13

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/hir-def/src/hir.rs#L37
```

----------------------------------------

TITLE: Documenting Deprecated Rust Compiler Error Code
DESCRIPTION: This markdown snippet explains that a specific error code is no longer emitted by the Rust compiler. It describes the previous condition that triggered the error: multiple macro definitions using the same `#[rustc_builtin_macro(..)]` attribute. The snippet clarifies that this is no longer considered an error in the current version of Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0773.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
#### this error code is no longer emitted by the compiler.

This was triggered when multiple macro definitions used the same
`#[rustc_builtin_macro(..)]`. This is no longer an error.
```

----------------------------------------

TITLE: Prolog Mapping for Trait Implementations - Text
DESCRIPTION: This snippet provides a representation of the Rust trait implementation in Prolog-like notation, showcasing how traits can be inferred through logic clauses.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/lowering-to-logic.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
Clone(usize).
Clone(Vec<?T>) :- Clone(?T).

// The notation `A :- B` means "A is true if B is true".
// Or, put another way, B implies A.
```

----------------------------------------

TITLE: Defining MappedRustDiagnostic Structure in Rust
DESCRIPTION: This code snippet defines a MappedRustDiagnostic structure that contains detailed information about a Rust compiler error. It includes the file URL, diagnostic details such as error range, severity, code, and message.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/rust-analyzer/src/diagnostics/test_data/handles_macro_location.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
MappedRustDiagnostic {
    url: Url {
        scheme: "file",
        cannot_be_a_base: false,
        username: "",
        password: None,
        host: None,
        port: None,
        path: "/test/src/main.rs",
        query: None,
        fragment: None,
    },
    diagnostic: Diagnostic {
        range: Range {
            start: Position {
                line: 1,
                character: 4,
            },
            end: Position {
                line: 1,
                character: 26,
            },
        },
        severity: Some(
            Error,
        ),
        code: Some(
            String(
                "E0277",
            ),
        ),
        code_description: Some(
            CodeDescription {
                href: Url {
                    scheme: "https",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: Some(
                        Domain(
                            "doc.rust-lang.org",
                        ),
                    ),
                    port: None,
                    path: "/error-index.html",
                    query: None,
                    fragment: Some(
                        "E0277",
                    ),
                },
            },
        ),
        source: Some(
            "rustc",
        ),
        message: "can't compare `{integer}` with `&str`\nthe trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`",
        related_information: None,
        tags: None,
        data: None,
    },
    fix: None,
}
```

----------------------------------------

TITLE: Defining Domain Goals
DESCRIPTION: This snippet defines the structure of a DomainGoal, which includes Holds(WhereClause), FromEnv(TraitRef), FromEnv(Type), WellFormed(TraitRef), WellFormed(Type), and Normalize(Projection -> Type). It defines the WhereClause which can be Implemented(TraitRef), ProjectionEq(Projection = Type), Outlives(Type: Region), or Outlives(Region: Region).
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/goals-and-clauses.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
"DomainGoal = Holds(WhereClause)
            | FromEnv(TraitRef)
            | FromEnv(Type)
            | WellFormed(TraitRef)
            | WellFormed(Type)
            | Normalize(Projection -> Type)

WhereClause = Implemented(TraitRef)
            | ProjectionEq(Projection = Type)
            | Outlives(Type: Region)
            | Outlives(Region: Region)"
```

----------------------------------------

TITLE: LLVM Function Profile Check
DESCRIPTION: This snippet checks that the `!prof` metadata is correctly attached to the specified functions, `function_called_twice`, `function_called_42_times`, and `function_called_never`. It also verifies that the branching instructions within these functions have the appropriate `!prof` metadata.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/pgo-branch-weights/filecheck-patterns.txt#2025-04-21_snippet_0

LANGUAGE: llvm
CODE:
```
CHECK: define void @function_called_twice(i32 {{.*}} !prof [[function_called_twice_id:![0-9]+]] {
CHECK: br i1 {{.*}}, label {{.*}}, label {{.*}}, !prof [[branch_weights0:![0-9]+]]

CHECK: define void @function_called_42_times(i32{{.*}} %c) {{.*}} !prof [[function_called_42_times_id:![0-9]+]] {
CHECK:      switch i32 %c, label {{.*}} [
CHECK-NEXT:     i32 97, label {{.*}}
CHECK-NEXT:     i32 98, label {{.*}}
CHECK-NEXT: ], !prof [[branch_weights1:![0-9]+]]

CHECK: define void @function_called_never(i32 {{.*}} !prof [[function_called_never_id:![0-9]+]] {
```

----------------------------------------

TITLE: Checking for Non-Executable Memory Regions in Rust Binaries
DESCRIPTION: Example showing how to verify if non-executable memory regions are enabled for a Rust binary by examining the GNU_STACK program header. The absence of the PF_X flag indicates non-executable stack.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/exploit-mitigations.md#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
$ readelf -l target/release/hello-rust | grep -A 1 GNU_STACK
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     0x10
```

----------------------------------------

TITLE: MIR Basic Block Structure
DESCRIPTION: Illustrates the structure of a basic block in MIR (Mid-level Intermediate Representation). A basic block consists of a sequence of statements that execute together, culminating in a terminator that dictates the flow of control to other basic blocks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/appendix/background.md#2025-04-21_snippet_0

LANGUAGE: mir
CODE:
```
bb0: {
    statement0;
    statement1;
    statement2;
    ...
    terminator;
}
```

----------------------------------------

TITLE: Declaring an Intrinsic Without a Body in Rust
DESCRIPTION: Example of declaring an intrinsic without fallback logic using #[rustc_intrinsic]. These intrinsics must be implemented by all backends and cannot have a default implementation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/intrinsics.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
#![feature(intrinsics)]
#![allow(internal_features)]

#[rustc_intrinsic]
pub fn abort() -> !;
```

----------------------------------------

TITLE: Running TypeScript Lints and Tests (bash)
DESCRIPTION: This workflow snippet demonstrates the procedure for setting up and testing VS Code extension modifications using npm. After navigating to the 'editors/code' directory, 'npm ci' installs project dependencies, while 'npm run lint' runs ESLint or another configured linter. Requires Node.js and npm to be installed. Used specifically for contributors modifying or testing the TypeScript-based VS Code client component.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cd editors/code
npm ci
npm run lint

```

----------------------------------------

TITLE: Defining Function with Universal Regions
DESCRIPTION: Example of a function with lifetime parameters demonstrating potential lifetime inference error
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/lifetime_parameters.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> &'b u32 {
  x
}
```

----------------------------------------

TITLE: Downloading Nightly Components Locally
DESCRIPTION: Shell script to download Rust nightly components for local testing and manifest generation. Downloads essential components including rust, rustc, rust-std, rust-docs, and cargo.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/build-manifest/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
for component in rust rustc rust-std rust-docs cargo; do
    wget -P build/dist https://static.rust-lang.org/dist/${component}-nightly-x86_64-unknown-linux-gnu.tar.gz
done
```

----------------------------------------

TITLE: Incorrect Usage of In-Band Lifetimes in Rust Function Types
DESCRIPTION: This code snippet demonstrates erroneous usage of in-band lifetimes in `fn` and `Fn` syntax. These examples are no longer valid in Rust as the feature has been removed.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0687.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(in_band_lifetimes)]

fn foo(x: fn(&'a u32)) {} // error!

fn bar(x: &Fn(&'a u32)) {} // error!

fn baz(x: fn(&'a u32), y: &'a u32) {} // error!

struct Foo<'a> { x: &'a u32 }

impl Foo<'a> {
    fn bar(&self, x: fn(&'a u32)) {} // error!
}
```

----------------------------------------

TITLE: Rust DefPath Example
DESCRIPTION: Example of a stable identifier path used to reference items across compilation sessions
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/incremental-compilation-in-detail.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
std::collections::HashMap
```

----------------------------------------

TITLE: Checking Iterator Trait Implementation Using Diagnostic Items
DESCRIPTION: Demonstrates how to check if an expression implements the Iterator trait using diagnostic items and the LateContext. Uses the clippy_utils library and rustc's type checking facilities.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/trait_checking.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
use clippy_utils::is_trait_method;
use rustc_hir::Expr;
use rustc_lint::{LateContext, LateLintPass};
use rustc_span::symbol::sym;

impl LateLintPass<'_> for CheckIteratorTraitLint {
    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {
		let implements_iterator = cx.tcx.get_diagnostic_item(sym::Iterator).map_or(false, |id| {
    		implements_trait(cx, cx.typeck_results().expr_ty(arg), id, &[])
		});
		if implements_iterator {
			// [...]
		}

    }
}
```

----------------------------------------

TITLE: Defining Test Execution Parameters in TypeScript
DESCRIPTION: Describes RunTestParams, used to manage test execution through inclusive and exclusive clauses for filtering test runs in Rust projects. It streamlines executing comprehensive or selective test collections within integrated TypeScript tools and APIs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
interface RunTestParams {
    include?: string[] | undefined;
    exclude?: string[] | undefined;
}
```

----------------------------------------

TITLE: Defining Test Discovery Parameters in TypeScript
DESCRIPTION: DiscoverTestParams enables test exploration by allowing specification of test IDs for resolving nested tests. It ensures focused or complete discovery of test hierarchies within Rust projects and serves as a predecessor to test execution in TypeScript tools.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
interface DiscoverTestParams {
    testId?: string | undefined;
}
```

----------------------------------------

TITLE: Pulling rustc Changes with Minimal Git Config (Shell)
DESCRIPTION: Executes the `rustc-pull` command while overriding the default global and system git configurations using environment variables (`GIT_CONFIG_GLOBAL`, `GIT_CONFIG_SYSTEM`). This approach ensures that the synchronization process uses a minimal git configuration, potentially avoiding issues caused by complex or conflicting local git settings like `fetch.prunetags = true` which might prevent expected behavior.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/README.md#_snippet_6

LANGUAGE: shell
CODE:
```
GIT_CONFIG_GLOBAL=/path/to/minimal/gitconfig GIT_CONFIG_SYSTEM='' cargo run --manifest-path josh-sync/Cargo.toml -- rustc-pull
```

----------------------------------------

TITLE: Cargo Configuration for M68K Target
DESCRIPTION: Recommended Cargo configuration (.cargo/config.toml) for building Rust programs targeting M68K bare metal. Includes settings for the build standard library and linker configuration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-none-elf.md#_snippet_4

LANGUAGE: toml
CODE:
```
[unstable]
build-std = ["panic_abort", "core", "alloc"]

[target.m68k-unknown-none-elf]
# as we're building for ELF, the m68k-linux linker should be adequate
linker = "m68k-linux-gnu-ld"

# the mold linker also supports m68k, remove the above line and uncomment the
# following ones to use that instead
# linker = "clang"
# rustflags = ["-C", "link-arg=-fuse-ld=/path/to/mold/binary"]
```

----------------------------------------

TITLE: Markdown Changelog Entry for Rustfmt 0.2.3
DESCRIPTION: Details extensive changes in version 0.2.3 including new configuration options, formatting changes, and bug fixes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_27

LANGUAGE: markdown
CODE:
```
## [0.2.3] 2017-08-30

### Added

- `multiline_closure_forces_block` configuration option (#1898).
- `multiline_match_arm_forces_block` configuration option (#1898).
- `merge_derives` configuration option (#1910).
- `struct_remove_empty_braces` configuration option (#1930).
- Various refactorings.

### Changed

- Put single-lined block comments on the same line with list-like structure's item (#1923).
- Preserve blank line between doc comment and attribute (#1925).
- Put the opening and the closing braces of enum and struct on the same line, even when `item_brace_style = "AlwaysNextLine"` (#1930).

### Fixed

- Format attributes on `ast::ForeignItem` and take max width into account (#1916).
- Ignore empty lines when calculating the shortest indent width inside macro with braces (#1918).
- Handle tabs properly inside macro with braces (#1918).
- Fix a typo in `compute_budgets_for_args()` (#1924).
- Recover comment between keyword (`impl` and `trait`) and `{` which used to get removed (#1925).
```

----------------------------------------

TITLE: Compiled WebAssembly module from C
DESCRIPTION: This WebAssembly module shows the C ABI implementation of the `take_my_pair` function, emphasizing the single i32 parameter load, illustrating the ABI difference between Rust and C.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/wasm32-unknown-unknown.md#2025-04-21_snippet_10

LANGUAGE: wasm
CODE:
```
(module
  (import "env" "__linear_memory" (memory 0))
  (func $take_my_pair (param i32) (result i32)
    local.get 0
    i32.load offset=4
    local.get 0
    i32.load
    i32.add
  )
)
```

----------------------------------------

TITLE: Removing Feature Gate Error in the Rust Compiler
DESCRIPTION: Example of removing code that flags an error when a feature gate is not enabled. This type of code needs to be removed when stabilizing a feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/stabilization_guide.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
gate_feature_post!(&self, pub_restricted, span,
 "`pub(restricted)` syntax is experimental");
```

----------------------------------------

TITLE: Example Lint Level Output Format
DESCRIPTION: Shows the output format of the lint levels command, which displays each lint name and its associated level in NAME=LEVEL format.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/print-crate-root-lint-levels.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
unknown_lint=warn
arithmetic_overflow=deny
```

----------------------------------------

TITLE: Parsing Integer Literals in Rust
DESCRIPTION: Test cases for parsing integer literals with different bases, formats, and potential error conditions
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/numbers.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
INT_NUMBER "0"
INT_NUMBER "00"
INT_NUMBER "0_"
INT_NUMBER "01790"
INT_NUMBER "0b1790"
INT_NUMBER "0o1790"
INT_NUMBER "0x1790aAbBcCdDeEfF"
INT_NUMBER "001279"
INT_NUMBER "0_1279"
INT_NUMBER "1i64"
INT_NUMBER "11__s"
```

----------------------------------------

TITLE: Enabling colored log output with RUSTC_LOG_COLOR
DESCRIPTION: This bash command demonstrates how to enable colored log output when piping the output of `rustc` to `less`.  It sets the `RUSTC_LOG_COLOR` environment variable to `always` to force colored output, and uses the `-R` switch in `less` to interpret ANSI color codes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tracing.md#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
# The `-R` switch tells less to print ANSI colors without escaping them.
$ RUSTC_LOG=debug RUSTC_LOG_COLOR=always rustc +stage1 ... | less -R
```

----------------------------------------

TITLE: Disabling Symbol Mangling Version in Rust Compiler with TOML
DESCRIPTION: This configuration snippet disables the new symbol mangling version in the Rust compiler's `bootstrap.toml`, which is necessary when using older versions of GDB than 10.2.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/compiler-debugging.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[rust]
new-symbol-mangling = false
```

----------------------------------------

TITLE: Declaring an Unstable Lint with Feature Gate in Rust
DESCRIPTION: This example demonstrates how to declare an unstable lint with a feature gate. The lint will only fire if the user has enabled the specified feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/guides/editions.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
declare_lint! {
    pub SOME_LINT_NAME,
    Allow,
    "my cool lint",
    @feature_gate = sym::my_feature_name;
}
```

----------------------------------------

TITLE: Syncing Changes from rust-lang/rust to Clippy using git subtree
DESCRIPTION: This snippet outlines the command to push updates from the rust-lang/rust repository’s source subtree of Clippy to a local Clippy fork. It emphasizes the importance of using a separate branch for the operation and ensures changes are correctly integrated. Additional commands for creating a merge commit in the Clippy repository are provided to resolve conflicts during the sync process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/sync.md#_snippet_1

LANGUAGE: bash
CODE:
```
git subtree push -P src/tools/clippy clippy-local rustup
```

LANGUAGE: bash
CODE:
```
git fetch upstream
git switch rustup
git merge upstream/master --no-ff
```

----------------------------------------

TITLE: Adding a Subtree Dependency Using Git in Bash
DESCRIPTION: This Bash command adds a new subtree dependency to the Rust repository, effectively incorporating another repository like Clippy into the main rustc monorepo. It initializes the subtree and sets Clippy as part of the project's source tree. Ensure you run this from the repository's root directory and do not rebase the resulting commit.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/external-repos.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
"git subtree add -P src/tools/clippy https://github.com/rust-lang/rust-clippy.git master"
```

----------------------------------------

TITLE: Registering New Rust Error Code
DESCRIPTION: This Rust code snippet demonstrates how to register a new error code within the `register_diagnostics!` macro in `rustc_error_codes/src/error_codes.rs`.  It includes the error code and the path to its corresponding Markdown explanation file. This is a crucial step in making the error code available for use by the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/error-codes.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
register_diagnostics! {
    ...
    E0592: include_str!("./error_codes/E0592.md"),
}

```

----------------------------------------

TITLE: Encoding Inherent Implementation in Rust
DESCRIPTION: The example outlines how the symbol for a method (`foo`) in an inherent implementation (impl) block of the `Example` struct is mangled in Rust. It systematically explains the inherent-impl encoding details necessary to identify such symbols within crates.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
struct Example;
impl Example {
    fn foo() {}
}
```

----------------------------------------

TITLE: Invoking a Query in Rust Compiler
DESCRIPTION: Shows how to invoke a query (specifically 'type_of') using the TyCtxt (type context) struct. Queries are memoized functions that compute information about the input source code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/query.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
let ty = tcx.type_of(some_def_id);
```

----------------------------------------

TITLE: is_char Implementation
DESCRIPTION: Internal implementation of is_char method for type checking
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/type_checking.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
#[inline]
pub fn is_char(self) -> bool {
    matches!(self.kind(), Char)
}
```

----------------------------------------

TITLE: Struct Type Checking Implementation
DESCRIPTION: Example of checking if an expression's type is a struct using pattern matching
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/type_checking.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
impl LateLintPass<'_> for MyStructLint {
    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {
        // Get type of `expr`
        let ty = cx.typeck_results().expr_ty(expr);
        // Match its kind to enter the type
        match ty.kind() {
            ty::Adt(adt_def, _) if adt_def.is_struct() => println!("Our `expr` is a struct!"),
            _ => ()
        }
    }
}
```

----------------------------------------

TITLE: Implementing MIR Optimization Passes in Rust
DESCRIPTION: Guidelines for creating new MIR optimization passes in the Rust compiler, including step-by-step instructions for adding and testing a new optimization
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/optimizations.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
1. Make a Rust source file in `tests/mir-opt` that shows the code you want to optimize.
2. Run `./x test --bless tests/mir-opt/<your-test>.rs` to generate a MIR dump.
3. Commit the current working directory state.
4. Implement a new optimization in `compiler/rustc_mir_transform/src`.
5. Rerun `./x test --bless tests/mir-opt/<your-test>.rs`.
6. Run `./x test tests/ui`.
7. Commit and open a PR.
```

----------------------------------------

TITLE: Defining Crate Metadata for Std Detect - Rust
DESCRIPTION: Defines the `CrateData` structure for the `std_detect` crate (index 7). It includes the Rust edition (`Edition2021`) and standard compiler configuration flags (`debug_assertions`, `miri`, `true`), with no dependencies listed. This crate provides runtime CPU feature detection.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_cfg_groups.txt#_snippet_7

LANGUAGE: Rust
CODE:
```
7: CrateData {
    root_file_id: FileId(
        8,
    ),
    edition: Edition2021,
    version: None,
    display_name: Some(
        CrateDisplayName {
            crate_name: CrateName(
                "std_detect",
            ),
            canonical_name: "std_detect",
        },
    ),
    cfg_options: CfgOptions(
        [
            "debug_assertions",
            "miri",
            "true",
        ],
    ),
    potential_cfg_options: None,
    env: Env {
        entries: {},
    },
    dependencies: [],
    origin: Lang(
        Other,
    ),
    is_proc_macro: false,
    proc_macro_cwd: None,
}
```

----------------------------------------

TITLE: Adding New Lint Changelog Entry
DESCRIPTION: Example of how to add a changelog entry for a new lint contribution to Clippy.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/CONTRIBUTING.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
changelog: new lint: [`missing_trait_methods`]
```

----------------------------------------

TITLE: Implementing C2Rust Tool Attributes in Rust
DESCRIPTION: Demonstrates using register_tool to enable C2Rust attributes for marking C header file sources and source line locations in generated Rust code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/register-tool.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(register_tool)]
#![register_tool(c2rust)]

// Mark which C header file this module was generated from.
#[c2rust::header_src = "operations.h"]
pub mod operations_h {
    use std::ffi::c_int;

    // Mark which source line this struct was generated from.
    #[c2rust::src_loc = "11:0"]
    pub struct Point {
        pub x: c_int,
        pub y: c_int,
    }
}
```

----------------------------------------

TITLE: Running Custom LLVM Workflow
DESCRIPTION: Command to execute a specific LLVM workflow using environment variables and the Docker run script
SOURCE: https://github.com/rust-lang/rust/blob/master/src/ci/docker/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
DOCKER_SCRIPT=x86_64-gnu-llvm3.sh ./src/ci/docker/run.sh x86_64-gnu-llvm-19
```

----------------------------------------

TITLE: Building and Installing Rust with x.py (Shell)
DESCRIPTION: Provides the sequence of commands to execute the build and installation steps using the `x.py` script. The `build` subcommand compiles the project, and upon success, the `install` subcommand places the resulting binaries and files into the configured installation directory.
SOURCE: https://github.com/rust-lang/rust/blob/master/INSTALL.md#_snippet_5

LANGUAGE: Shell
CODE:
```
./x.py build && ./x.py install
```

----------------------------------------

TITLE: Importing Required Dependencies for Clippy Lint in Rust
DESCRIPTION: Initial imports needed to create a new lint for Clippy. These include the necessary types for implementing an early lint pass in the Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/adding_lints.md#_snippet_2

LANGUAGE: rust
CODE:
```
use rustc_lint::{EarlyLintPass, EarlyContext};
use rustc_session::declare_lint_pass;
use rustc_ast::ast::*;
```

----------------------------------------

TITLE: Defining Remote for Clippy Repository - Bash
DESCRIPTION: This command adds a remote named `upstream` pointing to the rust-clippy GitHub repository. This simplifies future commands by allowing the use of `upstream` instead of the full URL.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/release.md#_snippet_0

LANGUAGE: bash
CODE:
```
git remote add upstream git@github.com:rust-lang/rust-clippy
```

----------------------------------------

TITLE: Running Stdarch Tests with System Debugger Extension
DESCRIPTION: Command to run stdarch tests with the System Debugger Extension (SDE) to emulate specific CPU features. Uses environment variables to configure test execution for x86_64 Linux.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/debugging.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cd build/build_sysroot/sysroot_src/library/stdarch/
STDARCH_TEST_EVERYTHING=1 CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER="sde -future -rtm_mode full --" TARGET=x86_64-unknown-linux-gnu ../../../../../y.sh cargo test
```

----------------------------------------

TITLE: Formatting Example: Unicode Normalization in Trait Names
DESCRIPTION: Demonstrates handling of non-Unicode Normalization Form C identifiers in trait declarations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
trait Foó: Bar {}
```

----------------------------------------

TITLE: Running Rust Compiler with Backtrace and Tracking Diagnostics
DESCRIPTION: This command runs the Rust compiler with backtrace enabled while utilizing the `-Z track-diagnostics` flag to pinpoint where errors were emitted.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/compiler-debugging.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
RUST_BACKTRACE=1 rustc +stage1 error.rs -Z track-diagnostics
```

----------------------------------------

TITLE: Enable Separate MIR Files for Each Bit Width - Rust
DESCRIPTION: This code snippet, when added to a Rust MIR test file, ensures that separate MIR output files are generated for 32-bit and 64-bit systems. This is useful when testing code with bit-width-dependent constants or pointers. It avoids issues with comparing MIR outputs across different architectures.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/mir-opt/README.md#_snippet_0

LANGUAGE: Rust
CODE:
```
// EMIT_MIR_FOR_EACH_BIT_WIDTH
```

----------------------------------------

TITLE: Understanding Variables from Binders Syntax in Rust Compiler
DESCRIPTION: Explains the syntax for variables from binders in the Rust compiler's internal representation. The format is ^{binder}_{index}, where binder and index identify which variable from which binder is being referred to.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty.md#2025-04-21_snippet_6

LANGUAGE: rust
CODE:
```
^0_x
```

LANGUAGE: rust
CODE:
```
^0_2
```

----------------------------------------

TITLE: Cargo.toml Section for Vita Metadata
DESCRIPTION: This section defines metadata specific to the Vita application, such as the title ID and title name. This information is used when creating the VPK package for the application.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7-sony-vita-newlibeabihf.md#2025-04-21_snippet_3

LANGUAGE: toml
CODE:
```
"[package.metadata.vita]\n# A unique 9 character alphanumeric identifier of the app.\ntitle_id = \"RUSTAPP01\"\n# A title that will be used for the app. Optional, name will be used if not defined\ntitle_name = \"My application\""
```

----------------------------------------

TITLE: Original Values Array
DESCRIPTION: This snippet illustrates the use of the CanonicalVarValues array OV which captures the original values corresponding to the canonicalized variables. This array will later be needed when processing the trait query response.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/canonicalization.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
[?A, 'static, ?B]
```

----------------------------------------

TITLE: Adding False Positive Fix Changelog Entry
DESCRIPTION: Example of how to add a changelog entry for fixing a false positive in an existing lint.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/CONTRIBUTING.md#2025-04-21_snippet_3

LANGUAGE: markdown
CODE:
```
changelog: Fix [`unused_peekable`] false positive when peeked in a closure or called as `f(&mut peekable)`
```

----------------------------------------

TITLE: Span Context Assertion
DESCRIPTION: Shows how to assert that spans from different parts of a macro expansion have different contexts.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/macro_expansions.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
// x.is_some() is from inside the macro
// x.unwrap() is from outside the macro
assert_ne!(x_is_some_span.ctxt(), x_unwrap_span.ctxt());
```

----------------------------------------

TITLE: Comparing Span Contexts
DESCRIPTION: Demonstrates how to compare span contexts to detect if expressions come from different macro expansions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/macro_expansions.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
if left.span.ctxt() != right.span.ctxt() {
    // The code author most likely cannot modify this expression
    return;
}
```

----------------------------------------

TITLE: Function Item Implementation Concerning Lifetimes
DESCRIPTION: This code demonstrates an implementation of a function item type that has a lifetime parameter and illustrates how to avoid unconstrained lifetimes in function traits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/early_late_parameters.md#2025-04-21_snippet_19

LANGUAGE: rust
CODE:
```
struct FooFnItem;

impl<'a> Fn<()> for FooFnItem {
    type Output = &'a String;
    /* fn call(...) -> ... { ... } */
}
```

----------------------------------------

TITLE: MIR Pass Definition Structure
DESCRIPTION: Demonstrates how MIR optimization passes are defined and registered in the Rust compiler, using trait objects and a centralized pass management approach
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/optimizations.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
// Example of a MIR pass definition
struct CleanupPostBorrowck;

impl MirPass for CleanupPostBorrowck {
    fn run_pass(&self, tcx: TyCtxt<'_>, body: &mut Body<'_>) {
        // Optimization logic here
    }
}
```

----------------------------------------

TITLE: Installing cargo-vita tool
DESCRIPTION: This command installs the `cargo-vita` tool, which is used for building and packaging Rust applications for the PlayStation Vita. This tool simplifies the process of creating VPK files from Rust code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7-sony-vita-newlibeabihf.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
"cargo install cargo-vita"
```

----------------------------------------

TITLE: Building a UEFI Driver - TOML
DESCRIPTION: This snippet demonstrates how to modify build settings in Cargo to produce a UEFI runtime driver instead of the default application, by setting the appropriate subsystem linker argument.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/unknown-uefi.md#2025-04-21_snippet_2

LANGUAGE: TOML
CODE:
```
# In .cargo/config.toml:
[build]
rustflags = ["-C", "link-args=/subsystem:efi_runtime_driver"]
```

----------------------------------------

TITLE: Generating Full Rust Installer with gen-installer.sh
DESCRIPTION: This bash command uses gen-installer.sh to create a full Rust installer. It specifies various parameters including product name, manifest directory, success message, and directory paths for the installation process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-installer/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./gen-installer.sh --product-name=Rust \
                   --rel-manifest-dir=rustlib \
                   --success-message=Rust-is-ready-to-roll. \
                   --image-dir=./install-image \
                   --work-dir=./temp \
                   --output-dir=./dist \
                   --non-installed-overlay=./overlay \
                   --package-name=rustc-nightly-i686-apple-darwin \
                   --component-name=rustc \
                   --legacy-manifest-dirs=rustlib \
                   --bulk-dirs=share/doc
```

----------------------------------------

TITLE: Pulling Changes from rustc Repository with Bash
DESCRIPTION: This snippet explains how to fetch and merge changes from the rustc repository into the Miri repository to keep it up to date.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_15

LANGUAGE: sh
CODE:
```
./miri rustc-pull
```

LANGUAGE: sh
CODE:
```
./miri toolchain && ./miri fmt
```

LANGUAGE: sh
CODE:
```
git commit -am "rustup"
```

----------------------------------------

TITLE: Configuring Rust Build for Redox OS Targets in TOML
DESCRIPTION: This TOML configuration snippet shows how to set up the Rust build process to include Redox OS targets. It specifies the build stage and lists the target architectures to be included, including the host target and the three Redox OS targets.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/redox.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]
build-stage = 1
target = [
    "<HOST_TARGET>",
    "x86_64-unknown-redox",
    "aarch64-unknown-redox",
    "i586-unknown-redox",
]
```

----------------------------------------

TITLE: Usage Commands for CG_CLIF Build System in Bash
DESCRIPTION: This snippet outlines the main commands available in the cg_clif build system, including prepare, build, test, abi-cafe, and bench. Each command supports various options for customizing the build process.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/build_system/usage.txt#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./y.sh prepare [--out-dir DIR] [--download-dir DIR]
./y.sh build [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]
./y.sh test [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen] [--skip-test TESTNAME]
./y.sh abi-cafe [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]
./y.sh bench [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]
```

----------------------------------------

TITLE: Running libgccjit Tests
DESCRIPTION: Commands to run the libgccjit test suite, including an example of running a specific test with verbose output.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ cd gcc # from the `gcc-build` folder
$ make check-jit
# To run one specific test:
$ make check-jit RUNTESTFLAGS="-v -v -v jit.exp=jit.dg/test-asm.cc"
```

----------------------------------------

TITLE: Query System for Parallel Compilation - Rust
DESCRIPTION: This section describes the query model used in the Rust compiler's parallel environment. It explains how queries are evaluated in parallel and the mechanisms in place for cache management and cycle error detection.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/parallel-rustc.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
/// The query model has some properties that make it actually feasible to evaluate
/// multiple queries in parallel without too much effort:
/// 
/// - All data a query provider can access is via the query context, so
///   the query context can take care of synchronizing access.
/// - Query results are required to be immutable so they can safely be used by
///   different threads concurrently.
/// 
/// When a query `foo` is evaluated, the cache table for `foo` is locked.
/// 
/// - If there already is a result, we can clone it, release the lock and
///   we are done.
/// - If there is no cache entry and no other active query invocation computing the
///   same result, we mark the key as being "in progress", release the lock and
///   start evaluating.
/// - If there *is* another query invocation for the same key in progress, we
///   release the lock, and just block the thread until the other invocation has
///   computed the result we are waiting for. **Cycle error detection** in the parallel
///   compiler requires more complex logic than in single-threaded mode.
```

----------------------------------------

TITLE: Using the lint-llvm-ir Flag in Rust Compiler
DESCRIPTION: This snippet shows how to use the lint-llvm-ir flag which adds a LintPass to the compiler pipeline. It can be combined with the llvm-args flag to abort compilation when errors are found in the generated LLVM IR.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/lint-llvm-ir.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `lint-llvm-ir`

---------------------

This flag will add `LintPass` to the start of the pipeline.
You can use it to check for common errors in the LLVM IR generated by `rustc`.
You can add `-Cllvm-args=-lint-abort-on-error` to abort the process if errors were found.
```

----------------------------------------

TITLE: Initializing Crate Metadata Structures in Rust
DESCRIPTION: This code snippet initializes `CrateData` structures, detailing crate-specific information such as edition, version, and dependencies. Each `CrateData` contains environment variables essential for the Rust build process. Key parameters include `root_file_id`, `edition`, `dependencies`, and `env`. This setup is crucial for compiling and running Rust projects correctly.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
{
    0: CrateData {
        root_file_id: FileId(
            1,
        ),
        edition: Edition2018,
        version: Some(
            "0.1.0",
        ),
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "hello_world",
                ),
                canonical_name: "hello-world",
            },
        ),
        cfg_options: CfgOptions(
            [
                "rust_analyzer",
                "true",
            ],
        ),
        potential_cfg_options: None,
        env: Env {
            entries: {
                "CARGO": "$CARGO$",
                "CARGO_CRATE_NAME": "hello_world",
                "CARGO_MANIFEST_DIR": "$ROOT$hello-world",
                "CARGO_PKG_AUTHORS": "",
                "CARGO_PKG_DESCRIPTION": "",
                "CARGO_PKG_HOMEPAGE": "",
                "CARGO_PKG_LICENSE": "",
                "CARGO_PKG_LICENSE_FILE": "",
                "CARGO_PKG_NAME": "hello-world",
                "CARGO_PKG_README": "",
                "CARGO_PKG_REPOSITORY": "",
                "CARGO_PKG_RUST_VERSION": "",
                "CARGO_PKG_VERSION": "0.1.0",
                "CARGO_PKG_VERSION_MAJOR": "0",
                "CARGO_PKG_VERSION_MINOR": "1",
                "CARGO_PKG_VERSION_PATCH": "0",
                "CARGO_PKG_VERSION_PRE": "",
            },
        },
        dependencies: [
            Dependency {
                crate_id: Idx::<CrateData>(4),
                name: CrateName(
                    "libc",
                ),
                prelude: true,
                sysroot: false,
            },
        ],
        origin: Local {
            repo: None,
            name: Some(
                "hello-world",
            ),
        },
        is_proc_macro: false,
        proc_macro_cwd: Some(
            AbsPathBuf(
                "$ROOT$hello-world",
            ),
        ),
    },
    1: CrateData {
        root_file_id: FileId(
            2,
        ),
        edition: Edition2018,
        version: Some(
            "0.1.0",
        ),
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "hello_world",
                ),
                canonical_name: "hello-world",
            },
        ),
        cfg_options: CfgOptions(
            [
                "rust_analyzer",
                "true",
            ],
        ),
        potential_cfg_options: None,
        env: Env {
            entries: {
                "CARGO": "$CARGO$",
                "CARGO_CRATE_NAME": "hello_world",
                "CARGO_MANIFEST_DIR": "$ROOT$hello-world",
                "CARGO_PKG_AUTHORS": "",
                "CARGO_PKG_DESCRIPTION": "",
                "CARGO_PKG_HOMEPAGE": "",
                "CARGO_PKG_LICENSE": "",
                "CARGO_PKG_LICENSE_FILE": "",
                "CARGO_PKG_NAME": "hello-world",
                "CARGO_PKG_README": "",
                "CARGO_PKG_REPOSITORY": "",
                "CARGO_PKG_RUST_VERSION": "",
                "CARGO_PKG_VERSION": "0.1.0",
                "CARGO_PKG_VERSION_MAJOR": "0",
                "CARGO_PKG_VERSION_MINOR": "1",
                "CARGO_PKG_VERSION_PATCH": "0",
                "CARGO_PKG_VERSION_PRE": "",
            },
        },
        dependencies: [
            Dependency {
                crate_id: Idx::<CrateData>(0),
                name: CrateName(
                    "hello_world",
                ),
                prelude: true,
                sysroot: false,
            },
            Dependency {
                crate_id: Idx::<CrateData>(4),
                name: CrateName(
                    "libc",
                ),
                prelude: true,
                sysroot: false,
            },
        ],
        origin: Local {
            repo: None,
            name: Some(
                "hello-world",
            ),
        },
        is_proc_macro: false,
        proc_macro_cwd: Some(
            AbsPathBuf(
                "$ROOT$hello-world",
            ),
        ),
    },
    2: CrateData {
        root_file_id: FileId(
            3,
        ),
        edition: Edition2018,
        version: Some(
            "0.1.0",
        ),
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "an_example",
                ),
                canonical_name: "an-example",
            },
        ),
        cfg_options: CfgOptions(
            [
                "rust_analyzer",
                "true",
            ],
        ),
        potential_cfg_options: None,
        env: Env {
            entries: {
                "CARGO": "$CARGO$",
                "CARGO_CRATE_NAME": "an_example",
                "CARGO_MANIFEST_DIR": "$ROOT$hello-world",
                "CARGO_PKG_AUTHORS": "",
                "CARGO_PKG_DESCRIPTION": "",
                "CARGO_PKG_HOMEPAGE": "",
                "CARGO_PKG_LICENSE": "",
                "CARGO_PKG_LICENSE_FILE": "",
                "CARGO_PKG_NAME": "hello-world",
                "CARGO_PKG_README": "",
                "CARGO_PKG_REPOSITORY": "",
                "CARGO_PKG_RUST_VERSION": "",
                "CARGO_PKG_VERSION": "0.1.0",
                "CARGO_PKG_VERSION_MAJOR": "0",
                "CARGO_PKG_VERSION_MINOR": "1",
                "CARGO_PKG_VERSION_PATCH": "0",
                "CARGO_PKG_VERSION_PRE": "",
            },
        },
        dependencies: [
            Dependency {
                crate_id: Idx::<CrateData>(0),
                name: CrateName(
                    "hello_world",
                ),
                prelude: true,
                sysroot: false,
            },
            Dependency {
                crate_id: Idx::<CrateData>(4),
                name: CrateName(
                    "libc",
                ),
                prelude: true,
                sysroot: false,
            },
        ],
        origin: Local {
            repo: None,
            name: Some(
                "hello-world",
            ),
        },
        is_proc_macro: false,
        proc_macro_cwd: Some(
            AbsPathBuf(
                "$ROOT$hello-world",
            ),
        ),
    },
    3: CrateData {
        root_file_id: FileId(
            4,
        ),
        edition: Edition2018,
        version: Some(
            "0.1.0",
        ),
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "it",
                ),
                canonical_name: "it",
            },
        ),
        cfg_options: CfgOptions(
            [
                "rust_analyzer",
                "true",
            ],
        ),
        potential_cfg_options: None,
        env: Env {
            entries: {
                "CARGO": "$CARGO$",
                "CARGO_CRATE_NAME": "it",
                "CARGO_MANIFEST_DIR": "$ROOT$hello-world",
                "CARGO_PKG_AUTHORS": "",
                "CARGO_PKG_DESCRIPTION": "",
                "CARGO_PKG_HOMEPAGE": "",
                "CARGO_PKG_LICENSE": "",
                "CARGO_PKG_LICENSE_FILE": "",
                "CARGO_PKG_NAME": "hello-world",
                "CARGO_PKG_README": "",
                "CARGO_PKG_REPOSITORY": "",
                "CARGO_PKG_RUST_VERSION": "",
                "CARGO_PKG_VERSION": "0.1.0",
                "CARGO_PKG_VERSION_MAJOR": "0",
                "CARGO_PKG_VERSION_MINOR": "1",
                "CARGO_PKG_VERSION_PATCH": "0",
                "CARGO_PKG_VERSION_PRE": "",
            },
        },
        dependencies: [
            Dependency {
                crate_id: Idx::<CrateData>(0),
                name: CrateName(
                    "hello_world",
                ),
                prelude: true,
                sysroot: false,
            },
            Dependency {
                crate_id: Idx::<CrateData>(4),
                name: CrateName(
                    "libc",
                ),
                prelude: true,
                sysroot: false,
            },
        ],
        origin: Local {
            repo: None,
            name: Some(
                "hello-world",
            ),
        },
        is_proc_macro: false,
        proc_macro_cwd: Some(
            AbsPathBuf(
                "$ROOT$hello-world",
            ),
        ),
    },
    4: CrateData {
        root_file_id: FileId(
            5,
        ),
        edition: Edition2015,
        version: Some(
            "0.2.98",
        ),
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "libc",
                ),
                canonical_name: "libc",
            },
        ),
        cfg_options: CfgOptions(
            [
                "feature=default",
                "feature=std",
                "true",
            ],
        ),
        potential_cfg_options: Some(
            CfgOptions(
                [
                    "feature=align",
                    "feature=const-extern-fn",
                    "feature=default",
                    "feature=extra_traits",
                    "feature=rustc-dep-of-std",
                    "feature=std",
                    "feature=use_std",
                    "true",
                ],
            ),
        ),
        env: Env {
            entries: {
                "CARGO": "$CARGO$",
                "CARGO_CRATE_NAME": "libc",
                "CARGO_MANIFEST_DIR": "$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98",
                "CARGO_PKG_AUTHORS": "The Rust Project Developers",
                "CARGO_PKG_DESCRIPTION": "Raw FFI bindings to platform libraries like libc.\n",
                "CARGO_PKG_HOMEPAGE": "https://github.com/rust-lang/libc",
                "CARGO_PKG_LICENSE": "MIT OR Apache-2.0",
            },
        },
    }
}
```

----------------------------------------

TITLE: Lint Registration in Rust Compiler
DESCRIPTION: This snippet describes the registration process of lints in the `LintStore`, utilizing the `LintStore::register_lint` function. It illustrates the flow post `Session` creation where all lints are registered into the store ensuring that each lint is registered exactly once to avoid Internal Compiler Errors (ICE). This process is crucial for the runtime behavior of lint checks in the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics/lintstore.md#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
// Example lint registration
lint_store.register_lint(MY_LINT);
```

----------------------------------------

TITLE: Using Tiny Const Eval Limit Flag in Rust
DESCRIPTION: The -Ztiny-const-eval-limit is a compiler flag that enforces a minimal, fixed limit for constant evaluation. This flag is specifically designed for use in rustc's test suite and should not be used in production code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/tiny-const-eval-limit.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `tiny-const-eval-limit`
```

----------------------------------------

TITLE: Prolog-like Logical Representation for Generics - Text
DESCRIPTION: This snippet introduces a Prolog-style logical representation to express the requirements for type-checking generic functions, incorporating universal quantification and implications.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/lowering-to-logic.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
fooTypeChecks :-
  // for all types T...
  forall<T> {
    // ...if we assume that Eq(T, T) is provable...
    if (Eq(T, T)) {
      // ...then we can prove that `barWellFormed(T)` holds.
      barWellFormed(T)
    }
  }.
```

----------------------------------------

TITLE: Thread-Local Static Variable Symbol Example
DESCRIPTION: Illustrates symbol name generation for a thread-local static variable with a vendor-specific suffix on macOS
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_22

LANGUAGE: rust
CODE:
```
thread_local! {
    pub static EXAMPLE: RefCell<u32> = RefCell::new(1);
}
```

----------------------------------------

TITLE: Testing Rust Trait Object Promotion & Inlining (LLVM IR)
DESCRIPTION: This LLVM IR snippet, with associated `CHECK` directives, tests indirect call promotion and inlining for trait object method calls in Rust. The `CHECK`s verify that the generated code includes a comparison against the promoted method (`@foo`) and a subsequent direct call to the inlined target (`@opaque_f2`).
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/pgo-indirect-call-promotion/filecheck-patterns.txt#_snippet_1

LANGUAGE: LLVM IR
CODE:
```
# Same checks as above, repeated for the trait object case

CHECK: define void @call_a_bunch_of_trait_methods({{.*}}
CHECK: %{{.*}} = icmp eq ptr %{{.*}}, {{.*}}@foo
CHECK: tail call void @opaque_f2()
```

----------------------------------------

TITLE: Testing Incremental Name Resolution (Rust)
DESCRIPTION: This test validates that typing inside function bodies does not invalidate name resolution results, confirming the effectiveness of the position-independent representation approach.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_7

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/hir-def/src/nameres/tests/incremental.rs#L31
```

----------------------------------------

TITLE: Referencing External ClangRT Option in Rust Compiler
DESCRIPTION: This code snippet shows the markdown syntax for referencing the 'external-clangrt' option in Rust compiler documentation. It explains the purpose of the option and provides links to related documentation on sanitizers and working with other languages.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/external-clangrt.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `external-clangrt`

This option controls whether the compiler links in its own runtime library for
[sanitizers](./sanitizer.md). Passing this flag makes the compiler *not* link
its own library. For more information, see the section in the sanitizers doc on
[working with other languages.](./sanitizer.md#working-with-other-languages)
```

----------------------------------------

TITLE: Demonstrating Unstable Linker Flavor Usage in Rust
DESCRIPTION: This snippet shows how to use the unstable 'llbc' linker flavor for Nvidia NVPTX targets. It requires specific rustup components and command-line flags.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/codegen-options.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
-Zunstable-options -Clink-self-contained=+linker -Clinker-flavor=llbc
```

----------------------------------------

TITLE: Testing Rust Function Pointer Promotion & Inlining (LLVM IR)
DESCRIPTION: This LLVM IR snippet, combined with `CHECK` directives, tests indirect call promotion and inlining for function pointers in Rust. The `CHECK`s assert that the compiled code includes a comparison against the most frequent target (`@function_called_always`) and a direct call to the inlined version (`@opaque_f1`).
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/pgo-indirect-call-promotion/filecheck-patterns.txt#_snippet_0

LANGUAGE: LLVM IR
CODE:
```
CHECK: define void @call_a_bunch_of_functions({{.*}} {

# Make sure that indirect call promotion inserted a check against the most
# frequently called function.
CHECK: %{{.*}} = icmp eq ptr %{{.*}}, @function_called_always

# Check that the call to `function_called_always` was inlined, so that we
# directly call `opaque_f1` from the upstream crate.
CHECK: call void @opaque_f1()
```

----------------------------------------

TITLE: Defining Internal Rust Compiler Feature 'core_private_diy_float'
DESCRIPTION: This code snippet defines an internal feature of the Rust compiler called 'core_private_diy_float'. It is explicitly stated that this feature is not intended for general use and is internal to the Rust compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/core-private-diy-float.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `core_private_diy_float`

This feature is internal to the Rust compiler and is not intended for general use.
```

----------------------------------------

TITLE: Example of Help-style Lint Output in Rust
DESCRIPTION: Example showing how help messages appear in lint output, demonstrating NaN-related suggestions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/emitting_lints.md#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
error: constant division of 0.0 with 0.0 will always result in NaN
  --> tests/ui/zero_div_zero.rs:6:25
   |
6  |     let other_f64_nan = 0.0f64 / 0.0;
   |                         ^^^^^^^^^^^^
   |
   = help: consider using `f64::NAN` if you would like a constant representing NaN
```

----------------------------------------

TITLE: Generating Flamegraphs from Profiling Data
DESCRIPTION: Demonstrates creating a flamegraph visualization from rustc profiling data using the inferno tool from measureme.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/self-profile.md#2025-04-21_snippet_2

LANGUAGE: console
CODE:
```
$ ../measureme/target/release/inferno foo-1234
```

----------------------------------------

TITLE: Defining CrateData Structures for Rust Standard Library Components
DESCRIPTION: This code snippet defines CrateData structures for various components of the Rust standard library, including alloc, core, std, and utility crates. Each structure contains metadata such as root file ID, edition, display name, configuration options, dependencies, and origin.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_hello_world_project_model.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
{
    0: CrateData {
        root_file_id: FileId(
            1,
        ),
        edition: Edition2021,
        version: None,
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "alloc",
                ),
                canonical_name: "alloc",
            },
        ),
        cfg_options: CfgOptions(
            [
                "debug_assertions",
                "miri",
                "true",
            ],
        ),
        potential_cfg_options: None,
        env: Env {
            entries: {},
        },
        dependencies: [
            Dependency {
                crate_id: Idx::<CrateData>(1),
                name: CrateName(
                    "core",
                ),
                prelude: true,
                sysroot: false,
            },
        ],
        origin: Lang(
            Alloc,
        ),
        is_proc_macro: false,
        proc_macro_cwd: None,
    },
    // ... (similar structures for other crates)
}
```

----------------------------------------

TITLE: Defining Crate Metadata for Panic Abort - Rust
DESCRIPTION: Defines the `CrateData` structure for the `panic_abort` crate (index 2). It includes the Rust edition (`Edition2021`) and standard compiler configuration flags (`debug_assertions`, `miri`, `true`), with no dependencies listed. This crate provides the `panic!` implementation that simply aborts the process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_cfg_groups.txt#_snippet_2

LANGUAGE: Rust
CODE:
```
2: CrateData {
    root_file_id: FileId(
        3,
    ),
    edition: Edition2021,
    version: None,
    display_name: Some(
        CrateDisplayName {
            crate_name: CrateName(
                "panic_abort",
            ),
            canonical_name: "panic_abort",
        },
    ),
    cfg_options: CfgOptions(
        [
            "debug_assertions",
            "miri",
            "true",
        ],
    ),
    potential_cfg_options: None,
    env: Env {
        entries: {},
    },
    dependencies: [],
    origin: Lang(
        Other,
    ),
    is_proc_macro: false,
    proc_macro_cwd: None,
}
```

----------------------------------------

TITLE: Configuring Rust Package Metadata for libc Library
DESCRIPTION: This code snippet defines various package metadata for the 'libc' Rust library, including version information, license details, and repository URL. It also specifies dependencies and origin information.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/cargo_hello_world_project_model.txt#2025-04-21_snippet_1

LANGUAGE: JSON
CODE:
```
{
    "CARGO_PKG_LICENSE": "MIT OR Apache-2.0",
    "CARGO_PKG_LICENSE_FILE": "",
    "CARGO_PKG_NAME": "libc",
    "CARGO_PKG_README": "README.md",
    "CARGO_PKG_REPOSITORY": "https://github.com/rust-lang/libc",
    "CARGO_PKG_RUST_VERSION": "",
    "CARGO_PKG_VERSION": "0.2.98",
    "CARGO_PKG_VERSION_MAJOR": "0",
    "CARGO_PKG_VERSION_MINOR": "2",
    "CARGO_PKG_VERSION_PATCH": "98",
    "CARGO_PKG_VERSION_PRE": "",
    "dependencies": [],
    "origin": {
        "repo": "https://github.com/rust-lang/libc",
        "name": "libc"
    },
    "is_proc_macro": false,
    "proc_macro_cwd": "$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98"
}
```

----------------------------------------

TITLE: Register Class Definition Example
DESCRIPTION: Note showing special case for NVPTX and WebAssembly register handling. These architectures don't support named registers due to their execution models.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/asm-experimental-arch.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
> **Notes**:\n> - NVPTX doesn't have a fixed register set, so named registers are not supported.\n>\n> - WebAssembly doesn't have registers, so named registers are not supported.
```

----------------------------------------

TITLE: Configuring DFSan for Special pthread Functions in Rust
DESCRIPTION: This snippet defines custom handling for pthread_create and pthread_join functions. pthread_create takes a callback and requires manual wrapping, while pthread_join's output doesn't depend on input and needs manual shadow zeroing.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/sanitizer/dataflow-abilist.txt#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
fun:pthread_create=custom
fun:pthread_join=custom
```

----------------------------------------

TITLE: CI Tooling Documentation in Markdown
DESCRIPTION: Documentation explaining the purpose of a Rust CI script that manages job execution determination and local CI testing capabilities.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/ci/citool/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# CI tooling
This is a simple Rust script that determines which jobs should be executed on CI based on the situation (pull request, try job, merge attempt). It also provides a simple way of executing (some) CI jobs locally.
```

----------------------------------------

TITLE: Subtyping Relationships with Return Types in Rust
DESCRIPTION: This code snippet depicts the creation of subtyping relationships that include function return types, demonstrating the complexity of enforcing outlives constraints.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/placeholders_and_universes.md#2025-04-21_snippet_9

LANGUAGE: rust
CODE:
```
&'!1 u32 <: &'?3 u32 // arg 1
&'!2 u32 <: &'?3 u32 // arg 2
&'?3 u32 <: &'!1 u32 // return type
```

----------------------------------------

TITLE: Configuring Debug Options in Rust Compiler with TOML
DESCRIPTION: This configuration snippet enables debug information in the Rust compiler by setting relevant parameters in the `bootstrap.toml` file. It includes enabling debug assertions and the debuginfo level.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/compiler-debugging.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[rust]
debug = true
debuginfo-level = 2
```

----------------------------------------

TITLE: Updating Rust Repository with GCC Changes
DESCRIPTION: Commands to pull changes from rustc_codegen_gcc back into the main Rust repository. Includes creating a new branch, performing the subtree pull, and syncing changes back to prevent future merge conflicts.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/subtree.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cd ../rust
git pull origin master
git checkout -b subtree-update_cg_gcc_YYYY-MM-DD
PATH="$HOME/bin:$PATH" ~/bin/git-subtree pull --prefix=compiler/rustc_codegen_gcc/ https://github.com/rust-lang/rustc_codegen_gcc.git master
git push

# Immediately merge the merge commit into cg_gcc to prevent merge conflicts when syncing from rust-lang/rust later.
PATH="$HOME/bin:$PATH" ~/bin/git-subtree push -P compiler/rustc_codegen_gcc/ ../rustc_codegen_gcc/ sync_branch_name
```

----------------------------------------

TITLE: Formatting `impl` blocks with indentation adjustment in Rust
DESCRIPTION: This snippet explains how Rustfmt manages indentation when formatting code inside `impl` blocks, especially for function calls with multiple arguments. It covers the calculation of indentation levels, width constraints, and the use of checked subtraction to prevent underflow errors, ensuring proper visual alignment and line breaks.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/Contributing.md#_snippet_4

LANGUAGE: Rust
CODE:
```
impl Foo {
    fn foo(...) {
        bar(argument_one,
            baz());
    }
}

// Explanation:
// The formatter adjusts indentation to fit arguments within maximum width constraints.
// Uses block and visual indentation levels for alignment.
// The `rewrite` function returns an `Option`, signaling success or failure.
// When space is insufficient, callers may attempt to reformat with a larger width.
// Uses `checked_sub` to prevent integer underflow when calculating available space.
```

----------------------------------------

TITLE: Copying Rust Dist Tarball from Docker to Host (Bash)
DESCRIPTION: Uses the `docker cp` command to copy the generated Rust distribution tarball from the specified path within the Docker container (`<dockerid>:/rust/build/dist/...tar.gz`) to the current directory on the host machine. Requires knowing the container ID.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/installation.md#_snippet_6

LANGUAGE: bash
CODE:
```
docker cp <dockerid>:/rust/build/dist/rust-nightly-x86_64-unknown-linux-gnu.tar.gz rust-nightly-x86_64-unknown-linux-gnu.tar.gz
```

----------------------------------------

TITLE: Desugared Trait Definition with GAT
DESCRIPTION: This Rust code shows the desugared version of the trait definition using a GAT (Generic Associated Type). It highlights the `assumed wf` bound required for the GAT to be well-formed, which is inherited from the trait method.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/return-position-impl-trait-in-trait.md#2025-04-21_snippet_5

LANGUAGE: rust
CODE:
```
```rust
trait FooDesugared {
    type Iter<'a, T>: Iterator<Item = &'a T>;
    //~^ assumed wf: `&'a [T]`
    // Without assumed wf types, the GAT would not be well-formed on its own.

    fn iter<'a, T>(x: &'a [T]) -> Self::Iter<'a, T>;
}
```
```

----------------------------------------

TITLE: Ty Struct Definition
DESCRIPTION: Core type representation structure in Rust compiler
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/type_checking.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
pub struct Ty<'tcx>(Interned<'tcx, WithStableHash<TyS<'tcx>>>);
```

----------------------------------------

TITLE: Localhost Network Configuration
DESCRIPTION: Sequence of commands to resolve localhost networking issues by updating /etc/hosts
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/nto-qnx.md#2025-04-21_snippet_10

LANGUAGE: bash
CODE:
```
ping localhost
echo "127.0.0.1 localhost" >> /etc/hosts
ping localhost
```

----------------------------------------

TITLE: Asm DWARF Debugging Information - Rust Compiler
DESCRIPTION: This code snippet contains sample debugging information output in the DWARF format by the Rust compiler. It highlights the usage of debugging attributes like 'DW_AT_containing_type' to point to real types from virtual tables in order to dissect trait objects. The expected output is generated through the Rust compiler to align with debugger requirements, accommodating the limitations of existing DWARF implementations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/debugging-support-in-rustc.md#2025-04-21_snippet_0

LANGUAGE: ASM
CODE:
```
<1><1a9>: Abbrev Number: 3 (DW_TAG_structure_type)
   <1aa>   DW_AT_containing_type: <0x1b4>
   <1ae>   DW_AT_name        : (indirect string, offset: 0x23d): vtable
   <1b2>   DW_AT_byte_size   : 0
   <1b3>   DW_AT_alignment   : 8
```

----------------------------------------

TITLE: Checking Commit Range with Changelog Script
DESCRIPTION: Validates changelog formatting for a range of commits
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/sending-gcc-patch.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
./contrib/gcc-changelog/git_check_commit.py HEAD~2
```

----------------------------------------

TITLE: Prolog Predicate for Well-Formed Type-Checking - Text
DESCRIPTION: This snippet defines a Prolog predicate that outlines the conditions necessary for `bar()` to be considered well-formed based on type equality.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/lowering-to-logic.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
barWellFormed(?U) :- Eq(?U, ?U).
```

----------------------------------------

TITLE: Combining All Source Files
DESCRIPTION: This CMake command sets the variable `SOURCES` to a list containing all source files defined previously (C, C++, and Assembly). This combined list is used to build the library.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/CMakeLists.txt#_snippet_7

LANGUAGE: CMake
CODE:
```
set(SOURCES
    ${C_SOURCES}
    ${CXX_SOURCES}
    ${ASM_SOURCES})
```

----------------------------------------

TITLE: Demonstrating Plugin Attribute Errors in Rust
DESCRIPTION: This snippet shows examples of malformed `#[plugin]` attributes in Rust, highlighting incorrect argument configurations. These examples are illustrative of error codes that are no longer emitted by the compiler. No specific dependencies are required to understand the examples. Input: malformed plugin attribute usages. No outputs or runtime constraints noted.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0498.md#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
#![feature(plugin)]
#![plugin(foo(args))] // error: invalid argument
#![plugin(bar=\"test\")] // error: invalid argument
```

----------------------------------------

TITLE: Defining CFI Encodings for Rust Types
DESCRIPTION: This snippet demonstrates how to define custom CFI encodings for Rust types using the cfi_encoding feature. The struct Type1 and external type Type2 are assigned non-standard names to avoid naming conflicts with C functions. The required feature flag must be enabled in order to utilize this functionality.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/cfi-encoding.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(cfi_encoding, extern_types)]

#[cfi_encoding = "3Foo"]
pub struct Type1(i32);

extern {
    #[cfi_encoding = "3Bar"]
type Type2;
}
```

----------------------------------------

TITLE: Supertrait Deduplication During Elaboration in Rust
DESCRIPTION: Illustrates deduplication of where clauses in a `ParamEnv` during the elaboration process in Rust. The code shows that duplicate trait bounds, like multiple `T: Trait`, are deduplicated. This is crucial for maintaining a clean and optimized parameter environment.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/typing_parameter_envs.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
trait Trait {}
// The unelaborated `ParamEnv` would be:
// `[T: Sized, T: Trait, T: Trait]`
// but after elaboration it would be:
// `[T: Sized, T: Trait]`
fn foo<T: Trait + Trait>() {}
```

----------------------------------------

TITLE: Building Targets in Bootstrap Configuration
DESCRIPTION: This TOML snippet configures the rustc build system to enable support for specified watchOS targets. It involves modifying the bootstrap.toml file by setting the build stage and listing the target architectures. The primary prerequisite is having Xcode 12 or higher, and access to the corresponding SDKs.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/apple-watchos.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[build]\nbuild-stage = 1\ntarget = ["aarch64-apple-watchos", "aarch64-apple-watchos-sim"]
```

----------------------------------------

TITLE: Building a VPK with cargo vita
DESCRIPTION: This command uses `cargo vita build vpk` to build a VPK (Vita Package) file from the Rust project. The `--release` flag indicates that the release profile should be used, resulting in an optimized build.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv7-sony-vita-newlibeabihf.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
"cargo vita build vpk --release"
```

----------------------------------------

TITLE: Body Source Map Implementation (Rust)
DESCRIPTION: This code defines the source map structure that maps between position-independent expression IDs and the original syntax, facilitating lookups between stable representation and actual source code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_14

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/hir-def/src/body.rs#L84-L88
```

----------------------------------------

TITLE: Generating Rust Install Script with gen-install-script.sh
DESCRIPTION: This bash command uses gen-install-script.sh to generate a standalone install script for Rust. It specifies the product name, manifest directory, success message, output script name, and legacy manifest directories.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-installer/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
./gen-install-script.sh --product-name=Rust \
                        --rel-manifest-dir=rustlib \
                        --success-message=Rust-is-ready-to-roll. \
                        --output-script=install.sh \
                        --legacy-manifest-dirs=rustlib
```

----------------------------------------

TITLE: BuilderMethods Trait Definition
DESCRIPTION: Core trait defining the interface that all backend builders must implement. Includes methods for basic block creation and control flow operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/backend/backend-agnostic.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
pub trait BuilderMethods<'a, 'tcx>:
    HasCodegen<'tcx>
    + DebugInfoBuilderMethods<'tcx>
    + ArgTypeMethods<'tcx>
    + AbiBuilderMethods<'tcx>
    + IntrinsicCallMethods<'tcx>
    + AsmBuilderMethods<'tcx>
{
    fn new_block<'b>(
        cx: &'a Self::CodegenCx,
        llfn: Self::Function,
        name: &'b str
    ) -> Self;
    /* ... */
    fn cond_br(
        &mut self,
        cond: Self::Value,
        then_llbb: Self::BasicBlock,
        else_llbb: Self::BasicBlock,
    );
    /* ... */
}
```

----------------------------------------

TITLE: Invalid Input Operand Constraint in llvm_asm Macro (Rust)
DESCRIPTION: This code snippet demonstrates an erroneous use of the llvm_asm macro in Rust. It shows an invalid input operand constraint '+test' which would have previously triggered a compiler error. This error is no longer emitted by the compiler as the llvm_asm macro has been deprecated.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0663.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
llvm_asm!("xor %eax, %eax"
          :
          : "+test"("a")
         );
```

----------------------------------------

TITLE: Illustrating Impl Path Symbol Mangling in Rust
DESCRIPTION: Demonstrates how multiple impl blocks for the same struct are differentiated using disambiguators in the symbol mangling process.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
struct Example;
impl Example {
    fn foo() {}
}
impl Example {
    fn bar() {}
}
```

LANGUAGE: text
CODE:
```
_RNvMCs7qp2U7fqm6G_7mycrateNtB2_7Example3foo
     └─────────┬──────────┘
               │
               └── path to the impl's parent crate-root "mycrate"
```

LANGUAGE: text
CODE:
```
_RNvMs_Cs7qp2U7fqm6G_7mycrateNtB4_7Example3bar
     ├┘└─────────┬──────────┘
     │           │
     │           └── path to the impl's parent crate-root "mycrate"
     └────────────── disambiguator 1
```

----------------------------------------

TITLE: Test a Specific MIR Pass - Rust
DESCRIPTION: This code snippet specifies a particular MIR optimization pass to be tested. By adding this to the top of the test file, only the specified pass will be executed, ensuring predictable input and preventing breakage due to changes in other passes. It is useful for isolating and testing individual optimization behaviors.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/mir-opt/README.md#_snippet_1

LANGUAGE: Rust
CODE:
```
//@ test-mir-pass: PassName
```

----------------------------------------

TITLE: Canonicalizing Query in Rust
DESCRIPTION: This snippet demonstrates how to transform a trait query with unbound variables and lifetimes into its canonical form. This involves replacing free lifetime variables and inference variables to create a structure that is consistent regardless of the identity of the original variables. It prepares the query for solving by the trait system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/canonicalization.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
?0: Foo<'?1, ?2>
```

----------------------------------------

TITLE: Short Rust Code Fragment
DESCRIPTION: A minimal code snippet with limited context and functionality
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/rustdoc/short-line.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
inc2
x
```

----------------------------------------

TITLE: Configuring Rust Build Without Jump Tables
DESCRIPTION: Command to build a Rust project with disabled jump tables using nightly compiler and custom standard library compilation. This configuration helps protect against JOP attacks by adding the LLVM no-jump-tables=true attribute to every function.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/no-jump-tables.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
RUSTFLAGS="-Zno-jump-tables" cargo +nightly build -Z build-std
```

----------------------------------------

TITLE: Request Scheduling on Threadpool (Rust)
DESCRIPTION: This code schedules LSP requests on a threadpool for processing, enabling asynchronous handling of client requests like code completion while maintaining responsiveness.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_17

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/rust-analyzer/src/dispatch.rs#L197-L211
```

----------------------------------------

TITLE: Creating a Default Analysis Instance in Rust
DESCRIPTION: This snippet demonstrates how to create an empty analysis instance using the default method within the AnalysisHost component. It highlights the structure necessary to initiate the analysis process, which is crucial for managing input changes and query responses.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
// Creating an empty analysis instance
let analysis_host = AnalysisHost::default();
```

----------------------------------------

TITLE: Handling Unused Variable 'foo' in Rust REPL Subcommand
DESCRIPTION: This snippet shows a diagnostic for an unused variable 'foo' in a Rust file. The compiler suggests prefixing it with an underscore to indicate intentional non-use. The diagnostic includes both a warning and a hint for fixing the issue.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_info.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
foo
```

----------------------------------------

TITLE: Cloning and Configuring Rust with Enzyme (Bash)
DESCRIPTION: Clones the Rust repository from GitHub with depth 1 and runs the configuration script `./configure` enabling shared LLVM linking, plugins, Enzyme, nightly channel, assertions, clang, lld, option checking, ninja, and disabling docs. This sets up the build environment for a custom Rust toolchain with autodiff support.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/installation.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone --depth=1 git@github.com:rust-lang/rust.git
cd rust
./configure --enable-llvm-link-shared --enable-llvm-plugins --enable-llvm-enzyme --release-channel=nightly --enable-llvm-assertions --enable-clang --enable-lld --enable-option-checking --enable-ninja --disable-docs
```

----------------------------------------

TITLE: Assembly Output for TrustZone-M Secure Entry Function
DESCRIPTION: Disassembled output showing the compiled assembly code for the secure entry function. Demonstrates the security-related operations including register clearing and use of BXNS instruction for secure return.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/cmse-nonsecure-entry.md#2025-04-21_snippet_1

LANGUAGE: assembly
CODE:
```
00000000 <entry_function>:
   0:   b580            push    {r7, lr}
   2:   466f            mov     r7, sp
   4:   b082            sub     sp, #8
   6:   9001            str     r0, [sp, #4]
   8:   1d81            adds    r1, r0, #6
   a:   460a            mov     r2, r1
   c:   4281            cmp     r1, r0
   e:   9200            str     r2, [sp, #0]
  10:   d30b            bcc.n   2a <entry_function+0x2a>
  12:   e7ff            b.n     14 <entry_function+0x14>
  14:   9800            ldr     r0, [sp, #0]
  16:   b002            add     sp, #8
  18:   e8bd 4080       ldmia.w sp!, {r7, lr}
  1c:   4671            mov     r1, lr
  1e:   4672            mov     r2, lr
  20:   4673            mov     r3, lr
  22:   46f4            mov     ip, lr
  24:   f38e 8800       msr     CPSR_f, lr
  28:   4774            bxns    lr
  2a:   f240 0000       movw    r0, #0
  2e:   f2c0 0000       movt    r0, #0
  32:   f240 0200       movw    r2, #0
  36:   f2c0 0200       movt    r2, #0
  3a:   211c            movs    r1, #28
  3c:   f7ff fffe       bl      0 <_ZN4core9panicking5panic17h5c028258ca2fb3f5E>
  40:   defe            udf     #254    ; 0xfe
```

----------------------------------------

TITLE: Setting Up Fine-grained Logging
DESCRIPTION: This snippet configures the logging settings in Miri to trace which MIR statements are executed, useful for debugging.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_5

LANGUAGE: Shell
CODE:
```
MIRI_LOG=info ./miri run tests/pass/vec.rs
```

LANGUAGE: Shell
CODE:
```
MIRI_LOG=rustc_mir::interpret=info,miri::stacked_borrows ./miri run tests/pass/vec.rs
```

----------------------------------------

TITLE: Viewing Personality Functions in Assembly Dump with Rust
DESCRIPTION: Command to view personality functions in the assembly dump by passing specific arguments to the linker during the Rust build process.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/tips.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
CG_RUSTFLAGS="-Clink-arg=-save-temps -v -Clink-arg=-dA" ../y.sh cargo build
```

----------------------------------------

TITLE: Building Enzyme with CMake/Ninja (Bash)
DESCRIPTION: Clones the Enzyme repository and builds it using CMake and Ninja, linking against the previously built LLVM. It configures Enzyme to build using Ninja, specifies the location of the LLVM build directory (`-DLLVM_DIR`), points to the `lit.py` test runner, sets the build type to Release, enables export of compile commands, and requests a shared library build. Finally, `ninja` builds Enzyme.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/installation.md#_snippet_8

LANGUAGE: bash
CODE:
```
git clone git@github.com:EnzymeAD/Enzyme.git
cd Enzyme/enzyme
mkdir build
cd build
cmake .. -G Ninja -DLLVM_DIR=<YourLocalPath>/llvm-project/build/lib/cmake/llvm/ -DLLVM_EXTERNAL_LIT=<YourLocalPath>/llvm-project/llvm/utils/lit/lit.py -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=YES -DBUILD_SHARED_LIBS=ON
ninja
```

----------------------------------------

TITLE: Diagnostic Message Structure Example
DESCRIPTION: This snippet illustrates the structure of a typical diagnostic message in the Rust compiler, including the level, code, message, diagnostic window (with spans and labels), and sub-diagnostics. Understanding this structure is crucial for creating clear and informative error messages.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_0

LANGUAGE: txt
CODE:
```
"error[E0000]: main error message
  --> file.rs:LL:CC
   |
LL | <code>
   | -^^^^- secondary label
   |  |
   |  primary label
   |
   = note: note without a `Span`, created with `.note`
note: sub-diagnostic message for `.span_note`
  --> file.rs:LL:CC
   |
LL | more code
   |      ^^^^"
```

----------------------------------------

TITLE: Specifying PowerPC SPE Linux Target in Rust
DESCRIPTION: This code snippet shows the target triple for PowerPC SPE Linux in Rust. It's used to specify the target architecture when compiling Rust code for 32-bit PowerPC processors with SPE.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/powerpc-unknown-linux-gnuspe.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# powerpc-unknown-linux-gnuspe
```

----------------------------------------

TITLE: Building and testing Clippy with cargo commands - Bash
DESCRIPTION: Commands to build and test the Clippy project using cargo. It includes running the full build and test suites as well as filtering tests to run only UI tests or dogfood tests. Additionally, it explains how to update UI test reference files with `cargo bless` after test output changes to keep tests consistent.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/basics.md#_snippet_1

LANGUAGE: bash
CODE:
```
cargo build  # builds Clippy
cargo test   # tests Clippy
```

LANGUAGE: bash
CODE:
```
# only run UI tests
cargo uitest
```

LANGUAGE: bash
CODE:
```
# only run UI tests starting with `test_`
TESTNAME="test_" cargo uitest
```

LANGUAGE: bash
CODE:
```
# only run dogfood tests
cargo dev dogfood
```

LANGUAGE: bash
CODE:
```
cargo bless
```

----------------------------------------

TITLE: Test Re-export Module Transformation
DESCRIPTION: Shows how the compiler transforms private module tests by creating __test_reexports modules.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/test-implementation.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
mod my_priv_mod {
    fn my_priv_func() -> bool {}

    pub fn test_priv_func() {
        assert!(my_priv_func());
    }

    pub mod __test_reexports {
        pub use super::test_priv_func;
    }
}
```

----------------------------------------

TITLE: Checking if a Type Implements a Specific Trait in Rustc Lints - Rust
DESCRIPTION: Provides methods to verify if an expression's type implements a particular trait using Clippy utils such as `is_trait_method` and `implements_trait`. The examples show usage with diagnostic items (e.g., `Iterator` trait) and lang items (e.g., `Drop` trait) accessed via the type context `tcx`. This snippet depends on Rustc internals and Clippy utilities and encourages using diagnostic/lang items if available.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/common_tools_writing_lints.md#_snippet_3

LANGUAGE: rust
CODE:
```
use clippy_utils::ty::implements_trait;
use clippy_utils::is_trait_method;
use rustc_span::symbol::sym;

impl LateLintPass<'_> for MyStructLint {
    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {
        // 1. Using diagnostic items with the expression
        // we use `is_trait_method` function from Clippy's utils
        if is_trait_method(cx, expr, sym::Iterator) {
            // method call in `expr` belongs to `Iterator` trait
        }

        // 2. Using lang items with the expression type
        let ty = cx.typeck_results().expr_ty(expr);
        if cx.tcx.lang_items()
            // we are looking for the `DefId` of `Drop` trait in lang items
            .drop_trait()
            // then we use it with our type `ty` by calling `implements_trait` from Clippy's utils
            .map_or(false, |id| implements_trait(cx, ty, id, &[])) {
                // `expr` implements `Drop` trait
            }
    }
}
```

----------------------------------------

TITLE: Initializing and Evaluating Root Goal in Rust Trait Solver
DESCRIPTION: The entry point of the solver is the evaluate_root_goal function, which sets up the root EvalCtxt and calls evaluate_goal to enter the trait solver. This function handles canonicalization, caching, overflow, and solver cycles.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/the-solver.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
InferCtxtEvalExt::evaluate_root_goal
```

----------------------------------------

TITLE: Running Benchmarks in Miri with Bash
DESCRIPTION: This snippet outlines the command to run Miri benchmarks, detailing the requirements for installation of 'hyperfine' and saving/loading baseline results.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/miri/CONTRIBUTING.md#2025-04-21_snippet_10

LANGUAGE: sh
CODE:
```
run `./miri bench`
```

LANGUAGE: sh
CODE:
```
run `./miri bench --save-baseline=baseline.json`
```

LANGUAGE: sh
CODE:
```
run `./miri bench --load-baseline=baseline.json`
```

LANGUAGE: sh
CODE:
```
run `./miri bench mse`
```

----------------------------------------

TITLE: Comparing Span Contexts in Rust
DESCRIPTION: This snippet illustrates how to compare the contexts of two spans using `span.ctxt()`. It checks if the contexts are equal to determine if the code is generated from the same macro expansion, enabling precise analysis.  The goal is to prevent linting code modified by the user. The code requires two valid spans, `left.span` and `right.span` and checks their context.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/common_tools_writing_lints.md#_snippet_6

LANGUAGE: Rust
CODE:
```
if left.span.ctxt() != right.span.ctxt() {
    // the coder most likely cannot modify this expression
    return;
}
```

----------------------------------------

TITLE: Outlives Constraint Cycle Example
DESCRIPTION: This example demonstrates how outlives constraints can form cycles in a graph representation, indicating that the regions within the cycle must be equivalent. Detecting these cycles through strongly connected components (SCCs) allows the inference process to be more efficient by treating the regions as a single unit.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/constraint_propagation.md#2025-04-21_snippet_1

LANGUAGE: Text
CODE:
```
'a: 'b
'b: 'c
'c: 'd
'd: 'a
```

----------------------------------------

TITLE: Configuring bootstrap.toml for s390x-unknown-linux-musl Support
DESCRIPTION: Configuration for adding s390x-unknown-linux-musl to the target list in bootstrap.toml to enable support for this target when building Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/s390x-unknown-linux-musl.md#_snippet_0

LANGUAGE: toml
CODE:
```
[build]
target = ["s390x-unknown-linux-musl"]
```

----------------------------------------

TITLE: Installing QEMU User Emulation for M68K
DESCRIPTION: Command to install QEMU user emulation package on Debian-based systems to run simple static M68K binaries.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-none-elf.md#_snippet_1

LANGUAGE: text
CODE:
```
# apt install qemu-user-static
```

----------------------------------------

TITLE: Function Body Lowering to Position-Independent Representation (Rust)
DESCRIPTION: This module lowers the AST of function bodies into a position-independent representation where each expression has a stable positional ID, enabling incremental analysis of functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/guide.md#2025-04-21_snippet_15

LANGUAGE: Rust
CODE:
```
// https://github.com/rust-lang/rust-analyzer/blob/2024-01-01/crates/hir-def/src/body.rs
```

----------------------------------------

TITLE: Editing and Updating Reference Files
DESCRIPTION: Command to bless the output files of tests, adjusting them based on intentional changes in the compiler's output.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/running.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
./x test tests/ui --bless
```

----------------------------------------

TITLE: Register Class Table for s390x Architecture in Rust Inline Assembly
DESCRIPTION: This table defines the 'vreg' register class for the s390x architecture, specifying the available registers and corresponding LLVM constraint code. It notes that 'vreg' is clobber-only in stable Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/asm-experimental-reg.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| Architecture | Register class | Registers | LLVM constraint code |
| ------------ | -------------- | --------- | -------------------- |
| s390x | `vreg` | `v[0-31]` | `v` |
```

----------------------------------------

TITLE: Defining FetchDependencyList Result Interface in TypeScript
DESCRIPTION: TypeScript interface for the response of the 'rust-analyzer/fetchDependencyList' method. Returns an array of crates with their name, version, and path to help navigate the dependency tree.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_25

LANGUAGE: typescript
CODE:
```
export interface FetchDependencyListResult {
    crates: {
        name: string;
        version: string;
        path: string;
    }[];
}
```

----------------------------------------

TITLE: Referencing Rust Allocator API Tracking Issue
DESCRIPTION: Provides a link to the GitHub issue tracking the `allocator_api` feature in Rust. This reference allows developers to follow the progress and discussions related to this feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/allocator-api.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
[#32838]: https://github.com/rust-lang/rust/issues/32838
```

----------------------------------------

TITLE: Mangled Symbol for Crate-Rooted Function in Rust
DESCRIPTION: The text example presents the mangled symbol representation for the function `example` in a crate named `mycrate`, explicating the components of the crate-root encoding and providing a recommendation for its demangling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/symbol-mangling/v0.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
_RNvCs15kBYyAo9fc_7mycrate7example
```

----------------------------------------

TITLE: Demonstrating Where-Clause Cycles in Trait Implementations
DESCRIPTION: Example showing how trait implementations with cyclic where clauses can lead to an infinite proof tree that coinduction needs to handle.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/coinduction.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {}
struct Wrapper<T>(T);

impl<T> Foo for Wrapper<Wrapper<T>>
where
    Wrapper<T>: Foo
{} 
```

----------------------------------------

TITLE: Using perf-focus with tree-callees to analyze MIR borrowck performance
DESCRIPTION: Shows how to use perf-focus to analyze the call tree of do_mir_borrowck with minimum percentage threshold of 3%. Displays total and self percentages for each function in the call hierarchy.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_perf.md#2025-04-21_snippet_12

LANGUAGE: bash
CODE:
```
$ perf focus '{do_mir_borrowck}' --tree-callees --tree-min-percent 3
Matcher    : {do_mir_borrowck}
Matches    : 577
Not Matches: 746
Percentage : 43%

Tree
| matched `{do_mir_borrowck}` (43% total, 0% self)
: | rustc_borrowck::nll::compute_regions (20% total, 0% self)
: : | rustc_borrowck::nll::type_check::type_check_internal (13% total, 0% self)
: : : | core::ops::function::FnOnce::call_once (5% total, 0% self)
: : : : | rustc_borrowck::nll::type_check::liveness::generate (5% total, 3% self)
: : : | <rustc_borrowck::nll::type_check::TypeVerifier<'a, 'b, 'tcx> as rustc::mir::visit::Visitor<'tcx>>::visit_mir (3% total, 0% self)
: | rustc::mir::visit::Visitor::visit_mir (8% total, 6% self)
: | <rustc_borrowck::MirBorrowckCtxt<'cx, 'tcx> as rustc_mir_dataflow::DataflowResultsConsumer<'cx, 'tcx>>::visit_statement_entry (5% total, 0% self)
: | rustc_mir_dataflow::do_dataflow (3% total, 0% self)
```

----------------------------------------

TITLE: Setting Up and Running Rust Programs with C-SKY on QEMU
DESCRIPTION: Set up a new Rust project, build, and run it using QEMU for the C-SKY architecture. Requires QEMU installation and setting environment variables to link the toolchain and execute binaries.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/csky-unknown-linux-gnuabiv2.md#2025-04-21_snippet_2

LANGUAGE: Shell
CODE:
```
cargo new hello_world
cd hello_world
```

LANGUAGE: Shell
CODE:
```
CARGO_TARGET_CSKY_UNKNOWN_LINUX_GNUABIV2_RUNNER=${QEMU_PATH}/bin/qemu-cskyv2 -L ${TOOLCHAIN_PATH}/csky-linux-gnuabiv2/libc \
CARGO_TARGET_CSKY_UNKNOWN_LINUX_GNUABIV2_LINKER=${TOOLCHAIN_PATH}/bin/csky-linux-gnuabiv2-gcc \
RUSTFLAGS="-C target-feature=+crt-static" \
cargo +stage2 run --target csky-unknown-linux-gnuabiv2
```

----------------------------------------

TITLE: Configuring Rust Toolchain for TEEOS in toml Configuration
DESCRIPTION: This snippet configures the Rust build system for targeting TEEOS via the 'bootstrap.toml' file. Key configurations include setting the target to 'aarch64-unknown-teeos', enabling sanitizers and profilers, and specifying the usage of custom Clang wrappers and tools from the OpenHarmony SDK. The configuration involves setting the cc, cxx, and linker tools to the shell scripts that wrap clang for cross-compilation.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/aarch64-unknown-teeos.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
profile = "compiler"
change-id = 115898

[build]
sanitizers = true
profiler = true
target = ["x86_64-unknown-linux-gnu", "aarch64-unknown-teeos"]
submodules = false
compiler-docs = false
extended = true

[install]
bindir = "bin"
libdir = "lib"

[target.aarch64-unknown-teeos]
cc = "/path/to/scripts/aarch64-unknown-teeos-clang.sh"
cxx = "/path/to/scripts/aarch64-unknown-teeos-clang.sh"
linker = "/path/to/scripts/aarch64-unknown-teeos-clang.sh"
ar = "/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ar"
ranlib = "/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ranlib"
llvm-config = "/path/to/ohos-sdk/linux/native/llvm/bin/llvm-config"
```

----------------------------------------

TITLE: Running m68k Rust Binary with QEMU
DESCRIPTION: Command to execute a simple m68k Rust binary using QEMU static emulation
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-linux-gnu.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
$ qemu-m68k-static your-code
```

----------------------------------------

TITLE: Parsing Floating Point Literals in Rust
DESCRIPTION: Test cases for parsing float literals with scientific notation, decimal points, and type suffixes
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/numbers.txt#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
FLOAT_NUMBER "0."
FLOAT_NUMBER "0.1279"
FLOAT_NUMBER "0e1279"
FLOAT_NUMBER "0E1279"
FLOAT_NUMBER "0e+1"
FLOAT_NUMBER "0.0E-2"
FLOAT_NUMBER "0___0.10000____0000e+111__"
FLOAT_NUMBER "92.0f32"
```

----------------------------------------

TITLE: Converting Lint Warning to Error in Rust
DESCRIPTION: This code snippet illustrates how to change a lint warning into a hard error using the Rust compiler's `struct_span_code_err!` macro. It replaces the previous `add_lint` call and assigns a new error code. This requires knowledge of Rust linting and diagnostic systems.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/bug-fix-procedure.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
self.tcx.sess.add_lint(lint::builtin::OVERLAPPING_INHERENT_IMPLS,
                       node_id,
                       self.tcx.span_of_impl(item1).unwrap(),
                       msg);
```

LANGUAGE: rust
CODE:
```
struct_span_code_err!(self.dcx(), self.tcx.span_of_impl(item1).unwrap(), E0592, msg)
    .emit();
```

----------------------------------------

TITLE: Structuring Discovered Tests in TypeScript
DESCRIPTION: Describes TestItem structure, which encapsulates ID, location, hierarchy, and execution details for discovered test items in Rust projects. This layout aids in visualizing and managing test trees and executes within IDE environments that support Rust analysis via TypeScript.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
interface TestItem {
    id: string;
    textDocument?: lc.TextDocumentIdentifier | undefined;
    range?: lc.Range | undefined;
    label: string;
    kind: "package" | "module" | "test";
    canResolveChildren: boolean;
    parent?: string | undefined;
    runnable?: Runnable | undefined;
};

interface DiscoverTestResults {
    tests: TestItem[];
    scope: string[] | undefined;
    scopeFile: lc.TextDocumentIdentifier[] | undefined;
}
```

----------------------------------------

TITLE: Using Custom Cranelift Build for Compilation
DESCRIPTION: Example command to use the custom-built Cranelift backend for compiling other Rust programs. This demonstrates how to leverage the modified compiler in practical scenarios.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/docs/rustc_testing.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
$RustCheckoutDir/compiler/rustc_codegen_cranelift/dist/cargo-clif build --release
```

----------------------------------------

TITLE: Demonstrating Drop Check with Invalid References
DESCRIPTION: Example showing how drop checking allows values to be dropped even when their type is not well-formed due to invalid references.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/drop_check.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn main() {
    let x = vec![];
    {
        let y = String::from("I am temporary");
        x.push(&y);
    }
    // `x` goes out of scope here, after the reference to `y`
    // is invalidated. This means that while dropping `x` its type
    // is not well-formed as it contain regions which are not live.
}
```

----------------------------------------

TITLE: Using regparm Compiler Option in Rust
DESCRIPTION: The -Zregparm=N option configures the compiler to pass up to 3 function arguments through registers (EAX, EDX, ECX) instead of the stack for C-style calling conventions. This option is x86-specific and requires careful consideration of linking compatibility between crates.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/regparm.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
-Zregparm=N
```

----------------------------------------

TITLE: Profiling Rust Compiler with Cachegrind
DESCRIPTION: Illustrates how to use Cachegrind to generate a detailed simulated trace of the Rust compiler's execution using the 'cachegrind' subcommand of 'x perf'.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profiling/with_rustc_perf.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
./x perf cachegrind
```

----------------------------------------

TITLE: Documenting Internal Rust Compiler Feature in Markdown
DESCRIPTION: This snippet provides a short explanation about the 'print_internals' feature, indicating that it is for internal use within the Rust compiler and not meant for general usage.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/print-internals.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `print_internals`

This feature is internal to the Rust compiler and is not intended for general use.
```

----------------------------------------

TITLE: Generating MIR from Rust Expressions
DESCRIPTION: This snippet defines a function in Rust that generates MIR by appending statements onto a given basic block and returning a result. The function requires access to MIR-related Rust libraries and the `BasicBlock` type, returning a specified `ResultType`. The input is a mutable reference to a basic block, and the output is the generated MIR.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/mir/construction.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fn generate_some_mir(&mut self, block: BasicBlock) -> ResultType {
   ...
}
```

----------------------------------------

TITLE: RPITIT Query Detection Example
DESCRIPTION: Shows how the compiler detects synthetic associated types during query execution
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/return-position-impl-trait-in-trait.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ... {
    if let Some(rpitit_info) = tcx.opt_rpitit_info(def_id) {
        // Do something special for RPITITs...
        return ...;
    }

    // The regular computation which relies on access to the HIR of `def_id`.
}
```

----------------------------------------

TITLE: Tracing Region Constraints in Rust Functions
DESCRIPTION: This snippet advances the analysis of function types with distinct regions, breaking down the relationships further to yield specific region constraints.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/placeholders_and_universes.md#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
'!1: '?3
'!2: '?3
```

----------------------------------------

TITLE: Test Output from Generated Test Functions in Rust
DESCRIPTION: This shows the test output when running the tests generated by the test_math macro. Six test functions were generated with names that incorporate the integer type and the operation being tested.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/macro-metavar-expr-concat.md#2025-04-21_snippet_5

LANGUAGE: text
CODE:
```
running 6 tests
test test_i32_subtraction ... ok
test test_i32_addition ... ok
test test_u128_addition ... ok
test test_u128_subtraction ... ok
test test_u64_addition ... ok
test test_u64_subtraction ... ok

test result: ok. 6 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s
```

----------------------------------------

TITLE: LLVM IR Example with Enzyme Intrinsic
DESCRIPTION: Example of LLVM IR showing an Enzyme forward differentiation call
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/debugging.md#2025-04-21_snippet_4

LANGUAGE: llvm-ir
CODE:
```
define double @enzyme_opt_helper_0(ptr %0, i64 %1, double %2) {
  %4 = call double (...) @__enzyme_fwddiff(ptr @_zn2ad3_f217h3b3b1800bd39fde3e, metadata !"enzyme_const", ptr %0, metadata !"enzyme_const", i64 %1, metadata !"enzyme_dup", double %2, double %2)
  ret double %4
}
```

----------------------------------------

TITLE: Robots.txt Disallow Rules for Rust Website
DESCRIPTION: This robots.txt snippet configures web crawler access. It prevents crawlers from accessing specific directories related to old versions of the Rust book documentation, ensuring that search engines primarily index the latest content.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/robots.txt#2025-04-21_snippet_0

LANGUAGE: robots.txt
CODE:
```
"User-agent: *\nDisallow: /1.\nDisallow: /0.\nDisallow: /book/first-edition/\nDisallow: /book/second-edition/\nDisallow: /stable/book/first-edition/\nDisallow: /stable/book/second-edition/\nDisallow: /beta/book/first-edition/\nDisallow: /beta/book/second-edition/\nDisallow: /nightly/book/first-edition/\nDisallow: /nightly/book/second-edition/"
```

----------------------------------------

TITLE: Defining SnippetTextEdit Interface in TypeScript
DESCRIPTION: Extends the TextEdit interface to add support for snippets with tab stops and placeholders, used in code actions and on-type formatting. This extension allows for more interactive text edits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface SnippetTextEdit extends TextEdit {
    insertTextFormat?: InsertTextFormat;
    annotationId?: ChangeAnnotationIdentifier;
}
```

----------------------------------------

TITLE: Defining Internal Rust Compiler Feature: core_private_bignum
DESCRIPTION: This code snippet defines the 'core_private_bignum' feature as an internal component of the Rust compiler. It explicitly states that this feature is not intended for general use, indicating its restricted access and specialized purpose within the compiler's architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/core-private-bignum.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# `core_private_bignum`

This feature is internal to the Rust compiler and is not intended for general use.
```

----------------------------------------

TITLE: LLVM Profile Count Verification
DESCRIPTION: This snippet validates the counts associated with the `!prof` metadata tags defined earlier. It verifies the `function_entry_count` and `branch_weights` for each of the functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/pgo-branch-weights/filecheck-patterns.txt#2025-04-21_snippet_1

LANGUAGE: llvm
CODE:
```
CHECK: [[function_called_twice_id]] = !{{"function_entry_count", i64 2}
CHECK: [[branch_weights0]] = !{{"branch_weights", i32 2, i32 0}
CHECK: [[function_called_42_times_id]] = !{{"function_entry_count", i64 42}
CHECK: [[branch_weights1]] = !{{"branch_weights", i32 2, i32 12, i32 28}
CHECK: [[function_called_never_id]] = !{{"function_entry_count", i64 0}
```

----------------------------------------

TITLE: Markdown Code of Conduct Link
DESCRIPTION: Simple markdown document that references the external Code of Conduct document for the Rust project.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/CODE_OF_CONDUCT.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# The Rust Code of Conduct

This repository follows the [Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct) of the Rust organization.
```

----------------------------------------

TITLE: Windows Error Code Constants List
DESCRIPTION: A list of Windows system error codes that represent various error conditions and states in the Windows operating system. These constants are commonly used in system programming and error handling.
SOURCE: https://github.com/rust-lang/rust/blob/master/library/std/src/sys/pal/windows/c/bindings.txt#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
ERROR_BAD_VALIDATION_CLASS
ERROR_BADDB
ERROR_BADKEY
ERROR_BADSTARTPOSITION
ERROR_BEGINNING_OF_MEDIA
ERROR_BEYOND_VDL
ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT
ERROR_BLOCK_SHARED
ERROR_BLOCK_SOURCE_WEAK_REFERENCE_INVALID
ERROR_BLOCK_TARGET_WEAK_REFERENCE_INVALID
ERROR_BLOCK_TOO_MANY_REFERENCES
ERROR_BLOCK_WEAK_REFERENCE_INVALID
ERROR_BLOCKED_BY_PARENTAL_CONTROLS
ERROR_BOOT_ALREADY_ACCEPTED
ERROR_BROKEN_PIPE
ERROR_BUFFER_ALL_ZEROS
ERROR_BUFFER_OVERFLOW
ERROR_BUS_RESET
ERROR_BUSY
ERROR_BUSY_DRIVE
```

----------------------------------------

TITLE: Configuring TCP Stack Parallel Connections
DESCRIPTION: Modifying startup script to increase maximum TCP threads for better network performance
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/nto-qnx.md#2025-04-21_snippet_7

LANGUAGE: text
CODE:
```
io-pkt-v6-hc -U 33:33 -d e1000 -ptcpip threads_max=300
```

----------------------------------------

TITLE: Demonstrating Error: Transparent Struct with Over-Aligned Zero-Sized Field in Rust
DESCRIPTION: This code snippet shows an example that would have previously triggered the error. It defines a struct with repr(transparent) that contains a zero-sized field with an alignment of 32, which conflicts with the transparent representation.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0691.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(repr_align)]

#[repr(align(32))]
struct ForceAlign32;

#[repr(transparent)]
struct Wrapper(f32, ForceAlign32); // error: zero-sized field in transparent
                                   //        struct has alignment of 32, which
                                   //        is larger than 1
```

----------------------------------------

TITLE: Example of ReLateParam representation in Rust
DESCRIPTION: This code snippet demonstrates how the lifetime `'a` within a function body is represented using `ReLateParam`. It showcases the structure including the `DefId` of the item that introduced the late bound generic parameter and a `BoundRegionKind` specifying the generic parameter and its name.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/ty_module/instantiating_binders.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
"impl Trait for Whatever {\n    fn foo<'a>(a: &'a u32) -> &'a u32 {\n        let b: &'a u32 = a;\n        b\n    }\n}"
```

----------------------------------------

TITLE: Subsetting Nanum Barun Gothic Font for Korean Characters using pyftsubset
DESCRIPTION: This command uses pyftsubset to create a subset of the Nanum Barun Gothic font containing only the Korean character ranges. The output is generated as a WOFF2 file which is more compact for web usage in rustdoc.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/librustdoc/html/static/fonts/README.txt#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
pyftsubset NanumBarunGothic.ttf \
--unicodes=U+AC00-D7AF:U+1100-11FF,U+3130-318F,U+A960-A97F,U+D7B0-D7FF \
--output-file=NanumBarunGothic.ttf.woff2 --flavor=woff2
```

----------------------------------------

TITLE: Dependency Graph Visualization
DESCRIPTION: ASCII diagram showing the dependency relationships between the crates.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0460.md#2025-04-21_snippet_4

LANGUAGE: text
CODE:
```
    crate `main`
         |
         +-------------+
         |             |
         |             v
depends: |         crate `b`
 `a` v1  |             |
         |             | depends:
         |             |  `a` v2
         v             |
      crate `a` <------+
```

----------------------------------------

TITLE: Module Symbol Metadata Structure
DESCRIPTION: Detailed representation of module symbols with associated metadata, tracking file-level information and struct definitions
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_doc_alias.txt#2025-04-21_snippet_1

LANGUAGE: Rust
CODE:
```
Module {
    id: ModuleId {
        krate: Idx::<CrateData>(0),
        block: None,
        local_id: Idx::<ModuleData>(0)
    }
}
```

----------------------------------------

TITLE: Plain Listing Example
DESCRIPTION: This snippet shows a plain text listing. It is extracted to show how this differs from code blocks with specified languages. It provides a means to include blocks of unformatted text in the changelog.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/xtask/test_data/expected.md#_snippet_2

LANGUAGE: text
CODE:
```
This is a plain listing.
```

----------------------------------------

TITLE: Dependency Graph Visualization with Mermaid
DESCRIPTION: Visualization of a cycle dependency tree showing relationships between nodes A, B, and C where A and B are cycle heads but only A is a root.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/caching.md#2025-04-21_snippet_0

LANGUAGE: mermaid
CODE:
```
graph TB
    A --> B
    B --> C
    C --> B
    C --> A
```

----------------------------------------

TITLE: Tagging Issues with Rustbot Aliases
DESCRIPTION: These are example commands using aliases to tag an issue as appropriate for a notification group using rustbot. Each command pings the Cleanup Crew. These aliases are defined in the `triagebot.toml` file and are intended for convenience, but are subject to change.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/about.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
@rustbot ping cleanup
@rustbot ping bisect
@rustbot ping reduce
```

----------------------------------------

TITLE: @rustbot Issue Relabeling Command - Markdown
DESCRIPTION: Here is the command to relabel an issue or PR using @rustbot. This allows contributors to update the labels indicating the status after performing specific actions such as rebasing.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustbot.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
@rustbot label -S-waiting-on-author +S-waiting-on-review
```

----------------------------------------

TITLE: Declaring ItemLikeMacro in Rust
DESCRIPTION: This snippet presents a macro definition named 'ItemLikeMacro', illustrating how macros can be specified within a Rust module. The details cover the macro's ID and the declaration location for proper identification when invoked.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_4

LANGUAGE: Rust
CODE:
```
FileSymbol {
    name: "ItemLikeMacro",
    def: Macro(
        Macro {
            id: Macro2Id(
                Macro2Id(
                    0,
                ),
            ),
        },
    ),
    loc: DeclarationLocation {
        hir_file_id: EditionedFileId(
            FileId(
                0,
            ),
            Edition2021,
        ),
        ptr: SyntaxNodePtr {
            kind: USE_TREE,
            range: 727..749,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 736..749,
            },
        ),
    },
    container_name: None,
    is_alias: false,
    is_assoc: false,
}
```

----------------------------------------

TITLE: Declaring Enum in Rust
DESCRIPTION: The snippet declares an enum named 'Enum' with its definition and source location, critical for structuring data types in Rust. It operates under module conventions, impacting how enums are constructed and referenced in the code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_3

LANGUAGE: Rust
CODE:
```
FileSymbol {
    name: "Enum",
    def: Adt(
        Enum(
            Enum {
                id: EnumId(
                    0,
                ),
            },
        ),
    ),
    loc: DeclarationLocation {
        hir_file_id: EditionedFileId(
            FileId(
                0,
            ),
            Edition2021,
        ),
        ptr: SyntaxNodePtr {
            kind: ENUM,
            range: 185..207,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 190..194,
            },
        ),
    },
    container_name: None,
    is_alias: false,
    is_assoc: false,
}
```

----------------------------------------

TITLE: Markdown Documentation Header for allocator_internals
DESCRIPTION: Documents that allocator_internals is an unstable implementation detail not meant for external use.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/allocator-internals.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `allocator_internals`

This feature does not have a tracking issue, it is an unstable implementation
detail of the `global_allocator` feature not intended for use outside the
compiler.
```

----------------------------------------

TITLE: Setting CFLAGS Environment Variable for 3DS Target
DESCRIPTION: Export command for setting the required compiler flags (CFLAGS) for the armv6k-nintendo-3ds target to build compiler_builtins, specifying the float ABI, processor tuning, and architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/armv6k-nintendo-3ds.md#_snippet_1

LANGUAGE: sh
CODE:
```
export CFLAGS_armv6k_nintendo_3ds="-mfloat-abi=hard -mtune=mpcore -mtp=soft -march=armv6k"
```

----------------------------------------

TITLE: Target Addition Issue Template for Rust Compiler
DESCRIPTION: A markdown template for requesting a compiler team member review when adding a new target to Rust. This is used as part of the pull request process to ensure proper review.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/target-tier-policy.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
r? compiler
```

----------------------------------------

TITLE: Declaring an Intrinsic with Fallback Logic in Rust
DESCRIPTION: Example of defining a constant deallocate intrinsic with fallback logic. This implementation provides a default empty body that backends can override if needed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/intrinsics.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(intrinsics)]
#![allow(internal_features)]

#[rustc_intrinsic]
const unsafe fn const_deallocate(_ptr: *mut u8, _size: usize, _align: usize) {}
```

----------------------------------------

TITLE: Defining Lifetime Identifiers
DESCRIPTION: This snippet defines several lifetime identifiers as string constants used in Rust. These identifiers are essential for managing lifetimes in the Rust type system. The constants include various names for lifetime annotations found in Rust source code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/lifetimes.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
LIFETIME_IDENT "'a"
```

LANGUAGE: Rust
CODE:
```
WHITESPACE " "
```

LANGUAGE: Rust
CODE:
```
LIFETIME_IDENT "'foo"
```

LANGUAGE: Rust
CODE:
```
WHITESPACE " "
```

LANGUAGE: Rust
CODE:
```
LIFETIME_IDENT "'foo_bar_baz"
```

LANGUAGE: Rust
CODE:
```
WHITESPACE " "
```

LANGUAGE: Rust
CODE:
```
LIFETIME_IDENT "'_"
```

LANGUAGE: Rust
CODE:
```
WHITESPACE "\n"
```

----------------------------------------

TITLE: Rust Character Literal and Whitespace Token Examples
DESCRIPTION: This text lists various Rust character literals (simple, numeric, escaped hexadecimal, newline, backslash, single quote) identified by the `CHAR` token type, interspersed with `WHITESPACE` tokens (space and newline). This format likely serves as test input for a component within the Rust compiler, such as the lexer.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/chars.txt#_snippet_0

LANGUAGE: Text
CODE:
```
CHAR "'x'"
WHITESPACE " "
CHAR "' '"
WHITESPACE " "
CHAR "'0'"
WHITESPACE " "
CHAR "'hello'"
WHITESPACE " "
CHAR "'\x7f'"
WHITESPACE " "
CHAR "'\n'"
WHITESPACE " "
CHAR "'\\'"
WHITESPACE " "
CHAR "'\''"
WHITESPACE "\n"
```

----------------------------------------

TITLE: Documenting Internal Rust Compiler Feature in Markdown
DESCRIPTION: This snippet provides a brief description of the 'derive_clone_copy' feature, emphasizing its internal nature and restrictions on general use. It uses Markdown formatting for the heading.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/derive-clone-copy.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `derive_clone_copy`

This feature is internal to the Rust compiler and is not intended for general use.
```

----------------------------------------

TITLE: Rust FileSymbol for Macro
DESCRIPTION: This snippet represents a `FileSymbol` for a macro named `SuperItemLikeMacro`. It shows the macro's definition as `Macro(Macro { id: Macro2Id(...) })` and its location details, including the `USE_TREE` kind and the name's range within the file. The location information describes where the macro is defined within the Rust project's source code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
{
    name: "SuperItemLikeMacro",
    def: Macro(
        Macro {
            id: Macro2Id(
                Macro2Id(
                    0,
                ),
            ),
        },
    ),
    loc: DeclarationLocation {
        hir_file_id: EditionedFileId(
            FileId(
                1,
            ),
            Edition2021,
        ),
        ptr: SyntaxNodePtr {
            kind: USE_TREE,
            range: 35..69,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 51..69,
            },
        ),
    },
    container_name: None,
    is_alias: false,
    is_assoc: false,
}
```

----------------------------------------

TITLE: Formatting Python Code Using ruff
DESCRIPTION: This snippet provides commands for formatting and linting Python code in the Rust repository. It employs the ruff tool and specifies two different commands: one for formatting and another for lint checking.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/conventions.md#2025-04-21_snippet_1

LANGUAGE: console
CODE:
```
./x test tidy --extra-checks py:fmt --bless
```

LANGUAGE: console
CODE:
```
./x test tidy --extra-checks py:lint
```

----------------------------------------

TITLE: Checking Remote Branch Comparison with Changelog Script
DESCRIPTION: Verifies changelog formatting between remote branch and current HEAD
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/sending-gcc-patch.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
./contrib/gcc-changelog/git_check_commit.py upstream/master..HEAD
```

----------------------------------------

TITLE: Defining SsrParams Interface for Structural Search Replace
DESCRIPTION: Defines the parameters for structural search replace operations, allowing for syntax-tree based transformations. Includes the query, parse mode, document context, position, and selection ranges.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
interface SsrParams {
    /// Search query.
    /// The specific syntax is specified outside of the protocol.
    query: string,
    /// If true, only check the syntax of the query and don't compute the actual edit.
    parseOnly: boolean,
    /// The current text document. This and `position` will be used to determine in what scope
    /// paths in `query` should be resolved.
    textDocument: TextDocumentIdentifier;
    /// Position where SSR was invoked.
    position: Position;
    /// Current selections. Search/replace will be restricted to these if non-empty.
    selections: Range[];
}
```

----------------------------------------

TITLE: Generated Assembly for TrustZone-M Non-Secure Call
DESCRIPTION: Assembly output generated for thumbv8m.main-none-eabi target showing the implementation of secure to non-secure transition including register clearing and use of BLXNS instruction.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/abi-c-cmse-nonsecure-call.md#2025-04-21_snippet_1

LANGUAGE: assembly
CODE:
```
call_nonsecure_function:
        .fnstart
        .save   {r7, lr}
        push    {r7, lr}
        .setfp  r7, sp
        mov     r7, sp
        .pad    #16
        sub     sp, #16
        str     r0, [sp, #12]
        ldr     r0, [sp, #12]
        str     r0, [sp, #8]
        b       .LBB0_1
.LBB0_1:
        ldr     r0, [sp, #8]
        push.w  {r4, r5, r6, r7, r8, r9, r10, r11}
        bic     r0, r0, #1
        mov     r1, r0
        mov     r2, r0
        mov     r3, r0
        mov     r4, r0
        mov     r5, r0
        mov     r6, r0
        mov     r7, r0
        mov     r8, r0
        mov     r9, r0
        mov     r10, r0
        mov     r11, r0
        mov     r12, r0
        msr     apsr_nzcvq, r0
        blxns   r0
        pop.w   {r4, r5, r6, r7, r8, r9, r10, r11}
        str     r0, [sp, #4]
        b       .LBB0_2
.LBB0_2:
        ldr     r0, [sp, #4]
        add     sp, #16
        pop     {r7, pc}
```

----------------------------------------

TITLE: Beta Backport PR Template
DESCRIPTION: Template for creating a backport pull request description in the Rust repository.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/backport.md#2025-04-21_snippet_3

LANGUAGE: markdown
CODE:
```
[beta] Clippy backports

r? @Mark-Simulacrum

Backports:
- <Link to the Clippy PR>
- ...

<Short summary of what is backported and why>
```

----------------------------------------

TITLE: Generating PSEXE Format Binaries with cargo-psx
DESCRIPTION: Shell command for using cargo-psx to generate binaries in the PSEXE format, which can be run by PlayStation 1 emulators. This requires the cargo-psx tool to be installed.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/mipsel-sony-psx.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
cargo psx build
```

----------------------------------------

TITLE: Interactive Program License Notice Template
DESCRIPTION: Template for the short license notice that should be displayed when interactive programs start up.
SOURCE: https://github.com/rust-lang/rust/blob/master/LICENSES/GPL-2.0-only.txt#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
Gnomovision version 69, Copyright (C) year name of author
Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
type `show w'.  This is free software, and you are welcome
to redistribute it under certain conditions; type `show c' 
for details.
```

----------------------------------------

TITLE: Building Custom GCC for libgccjit
DESCRIPTION: Commands to clone the Rust-patched GCC repository and build it with libgccjit support. This enables the necessary backend functionality for the Rust GCC codegen.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ git clone https://github.com/rust-lang/gcc
$ sudo apt install flex libmpfr-dev libgmp-dev libmpc3 libmpc-dev
$ mkdir gcc-build gcc-install
$ cd gcc-build
$ ../gcc/configure \
    --enable-host-shared \
    --enable-languages=jit \
    --enable-checking=release \ # it enables extra checks which allow to find bugs
    --disable-bootstrap \
    --disable-multilib \
    --prefix=$(pwd)/../gcc-install
$ make -j4 # You can replace `4` with another number depending on how many cores you have.
```

----------------------------------------

TITLE: Stopping Virtual Machine
DESCRIPTION: Command to stop the running QEMU virtual machine
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/nto-qnx.md#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
mkqnximage --stop
```

----------------------------------------

TITLE: Example of Contextual Date Usage
DESCRIPTION: This snippet provides an example of how to contextualize information with a date in the documentation. It emphasizes the importance of adding a date for reliability.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/contributing.md#2025-04-21_snippet_7

LANGUAGE: markdown
CODE:
```
As of <!-- date-check --> Apr 2025, the foo did the bar.
```

----------------------------------------

TITLE: Setting PGO Instrumentation Use Path in LLVM PassManager (C)
DESCRIPTION: This code snippet demonstrates how rustc tells the LLVM PassManagerBuilder where to find the profiling data for use in optimizations during the final compilation step of the PGO workflow.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profile-guided-optimization.md#2025-04-21_snippet_1

LANGUAGE: C
CODE:
```
    unwrap(PMBR)->PGOInstrUse = PGOUsePath;
```

----------------------------------------

TITLE: Configuring libgccjit for C++ Testing
DESCRIPTION: Configuration flag to enable C++ language support in the GCC build, which is required for running libgccjit tests.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/Readme.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
--enable-languages=jit,c++
```

----------------------------------------

TITLE: Recursive Type with Projected Fields
DESCRIPTION: A recursive structure that uses Cow to contain a slice of itself, demonstrating a case where coinduction is needed for type-checking recursive structures with projections.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/coinduction.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
use std::borrow::Cow;
pub struct Foo<'a>(Cow<'a, [Foo<'a>]>);
```

----------------------------------------

TITLE: External Function Reference List in Rust
DESCRIPTION: A plain list tracking references to external functions across different modules. The list shows repeated mentions of extern_fn_1 and extern_fn_2 in different contexts (extern_1 and extern_2).
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/raw-dylib-inline-cross-dylib/output.txt#_snippet_0

LANGUAGE: plaintext
CODE:
```
extern_fn_1
extern_fn_2 in extern_2
extern_fn_2 in extern_1
extern_fn_1
extern_fn_2 in extern_2
extern_fn_2 in extern_2
```

----------------------------------------

TITLE: Identifying Apple Platform Labels in GitHub
DESCRIPTION: GitHub labels used to track and manage Apple platform-specific issues in the Rust project, covering macOS, iOS, tvOS, watchOS, and visionOS
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/apple.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* [O-macos]
* [O-ios]
* [O-tvos]
* [O-watchos]
* [O-visionos]
```

----------------------------------------

TITLE: Illustrating Salsa's Dependency Graph Structure
DESCRIPTION: A simplified diagram showing how dependencies work in Salsa. It illustrates how derived values depend on inputs and other derived values, which helps explain how Salsa can determine which computations need to be rechecked when inputs change.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/queries/salsa.md#2025-04-21_snippet_0

LANGUAGE: ignore
CODE:
```
I <- A <- C ...
          |
J <- B <--+
```

----------------------------------------

TITLE: Enabling Dataflow State Peeking for Initialization in Rust Compiler
DESCRIPTION: This `#[rustc_mir]` attribute applied to a function enables the `rustc_peek` intrinsic calls within that function to query the dataflow state specifically related to the 'maybe initialized' analysis. If `rustc_peek` is called on an Lvalue whose 'maybe initialized' bit is not set at that control flow point, the compiler will emit an error, facilitating unit tests for initialization analysis.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/mir-dataflow/README.md#_snippet_1

LANGUAGE: Rust
CODE:
```
#[rustc_mir(rustc_peek_maybe_init)]
```

----------------------------------------

TITLE: Conceptual Example of Variable Length Arrays in Rust
DESCRIPTION: This snippet demonstrates a potential future syntax for variable length arrays in Rust. It shows how dynamic stack allocation could be used in algorithms like mergesort. Note that this syntax is not yet implemented.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/unsized-locals.md#2025-04-21_snippet_4

LANGUAGE: rust
CODE:
```
#![feature(unsized_locals)]

fn mergesort<T: Ord>(a: &mut [T]) {
    let mut tmp = [T; dyn a.len()];
    // ...
}

fn main() {
    let mut a = [3, 1, 5, 6];
    mergesort(&mut a);
    assert_eq!(a, [1, 3, 5, 6]);
}
```

----------------------------------------

TITLE: Handle Opaque Type Flow
DESCRIPTION: Mermaid flowchart showing the decision process in the handle_opaque_type function for constraint handling.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/opaque-types-impl-trait-inference.md#2025-04-21_snippet_3

LANGUAGE: mermaid
CODE:
```
flowchart TD
    subgraph typecheck["type check comparison routines"]
        equate.rs
        sub.rs
        lub.rs
    end

    typecheck --> TwoSimul

    subgraph handleopaquetype["infcx.handle_opaque_type"]

        TwoSimul["Defining two opaque types simultaneously?"]

        TwoSimul -- Yes --> ReportError["Report error"]

        TwoSimul -- No --> MayDefine -- Yes --> RegisterOpaqueType --> AlreadyHasValue

        MayDefine -- No --> ReportError

        MayDefine["In defining scope OR in query?"]

        AlreadyHasValue["Opaque type X already has\na registered value?"]

        AlreadyHasValue -- No --> Obligations["Register opaque type bounds\nas obligations for hidden type"]

        RegisterOpaqueType["Register opaque type with\nother type as value"]

        AlreadyHasValue -- Yes --> EquateOpaqueTypes["Equate new hidden type\nwith old hidden type"]
    end
```

----------------------------------------

TITLE: Register Class Supported Types for s390x Architecture in Rust Inline Assembly
DESCRIPTION: This table outlines the supported types for the 'vreg' register class in the s390x architecture, specifying the required target feature and allowed data types for use with these registers.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/asm-experimental-reg.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
| Architecture | Register class | Target feature | Allowed types |
| ------------ | -------------- | -------------- | ------------- |
| s390x | `vreg` | `vector` | `i32`, `f32`, `i64`, `f64`, `i128`, `f128`, `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, `f64x2` |
```

----------------------------------------

TITLE: Template Modifiers for s390x Architecture in Rust Inline Assembly
DESCRIPTION: This table describes the template modifiers for the 'vreg' register class in the s390x architecture, showing that no specific modifier is used and providing an example of the output format.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/asm-experimental-reg.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
| Architecture | Register class | Modifier | Example output | LLVM modifier |
| ------------ | -------------- | -------- | -------------- | ------------- |
| s390x | `vreg` | None | `%v0` | None |
```

----------------------------------------

TITLE: Documentation of Rust Build System Output Structure
DESCRIPTION: The document provides an overview of the directory layout utilized by the Rust bootstrap build system. This system stores all outputs under a `build` directory, with subdirectories allocated for cached downloads, build artifacts, temporary files, and specific host triple outputs. Each directory serves a precise function within the build process, such as caching stage0 compiler downloads, storing documentation, and accommodating compiletest outputs. This layout facilitates clear organization and efficient management of the build process components.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/bootstrap/README.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
# Root folder of all output. Everything is scoped underneath here
build/

  # Location where the stage0 compiler downloads are all cached. This directory
  # only contains the tarballs themselves, as they're extracted elsewhere.
  cache/
    2015-12-19/
    2016-01-15/
    2016-01-21/
    ...

  # Output directory for building this build system itself. The stage0
  # cargo/rustc are used to build the build system into this location.
  bootstrap/
    debug/
    release/

  # Output of the dist-related steps like dist-std, dist-rustc, and dist-docs
  dist/

  # Temporary directory used for various input/output as part of various stages
  tmp/

  # Each remaining directory is scoped by the "host" triple of compilation at
  # hand.
  x86_64-unknown-linux-gnu/

    # The build artifacts for the `compiler-rt` library for the target that
    # this folder is under. The exact layout here will likely depend on the
    # platform, and this is also built with CMake, so the build system is
    # also likely different.
    compiler-rt/
      build/

    # Output folder for LLVM if it is compiled for this target
    llvm/

      # build folder (e.g. the platform-specific build system). Like with
      # compiler-rt, this is compiled with CMake
      build/

      # Installation of LLVM. Note that we run the equivalent of 'make install'
      # for LLVM, to setup these folders.
      bin/
      lib/
      include/
      share/
      ...

    # Output folder for all documentation of this target. This is what's filled
    # in whenever the `doc` step is run.
    doc/

    # Output for all compiletest-based test suites
    test/
      ui/
      debuginfo/
      ...

    # Location where the stage0 Cargo and Rust compiler are unpacked. This
    # directory is purely an extracted and overlaid tarball of these two (done
    # by the bootstrap Python script). In theory, the build system does not
    # modify anything under this directory afterwards.
    stage0/

    # These to-build directories are the cargo output directories for builds of
    # the standard library, the test system, the compiler, and various tools,
    # respectively. Internally, these may also
    # have other target directories, which represent artifacts being compiled
    # from the host to the specified target.
    #
    # Essentially, each of these directories is filled in by one `cargo`
    # invocation. The build system instruments calling Cargo in the right order
    # with the right variables to ensure that these are filled in correctly.
    stageN-std/
    stageN-test/
    stageN-rustc/
    stageN-tools/

    # This is a special case of the above directories, **not** filled in via
    # Cargo but rather the build system itself. The stage0 compiler already has
    # a set of target libraries for its own host triple (in its own sysroot)
    # inside of stage0/. When we run the stage0 compiler to bootstrap more
    # things, however, we don't want to use any of these libraries (as those are
    # the ones that we're building). So essentially, when the stage1 compiler is
    # being compiled (e.g. after libstd has been built), *this* is used as the
    # sysroot for the stage0 compiler being run.
    #
    # Basically, this directory is just a temporary artifact used to configure the
    # stage0 compiler to ensure that the libstd that we just built is used to
    # compile the stage1 compiler.
    stage0-sysroot/lib/

    # These output directories are intended to be standalone working
    # implementations of the compiler (corresponding to each stage). The build
    # system will link (using hard links) output from stageN-{std,rustc} into
    # each of these directories.
    #
    # In theory these are working rustc sysroot directories, meaning there is
    # no extra build output in these directories.
    stage1/
    stage2/
    stage3/
```

----------------------------------------

TITLE: Rust Missing Hexadecimal Digits with Underscore Error
DESCRIPTION: This snippet shows an error case where a hexadecimal integer literal (0x_) is defined with only an underscore after the prefix, but no digits. This results in a 'missing digits' compiler error.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_int.txt#2025-04-21_snippet_5

LANGUAGE: Rust
CODE:
```
"INT_NUMBER \"0x_\" error: Missing digits after the integer base prefix\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Entering m68k Chroot Environment
DESCRIPTION: Command to enter the previously created Debian m68k chroot using standard chroot utility
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/m68k-unknown-linux-gnu.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
# chroot /path/to/debian-68k
```

----------------------------------------

TITLE: Adding Nested Goals in Rust Trait Solver
DESCRIPTION: Instead of directly calling compute_goal for nested goals, the solver uses add_goal to handle inference constraints from later goals. This allows for better handling of ambiguous cases that may be resolved by later constraints.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/the-solver.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
EvalCtxt::add_goal
```

----------------------------------------

TITLE: Defining CrateData Instances in Rust
DESCRIPTION: This Rust code defines two instances of a `CrateData` struct, indexed as 10 and 11. These structures hold metadata for Rust crates named "hello_world" and "other_crate", respectively. Key fields include `edition` (Edition2018), `display_name`, `cfg_options` (compilation configuration flags), `dependencies` (listing standard library dependencies like core, alloc, std, test, proc_macro), and `origin` (indicating they are local crates). These definitions are likely used internally by a compiler or analysis tool.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_cfg_groups.txt#_snippet_10

LANGUAGE: Rust
CODE:
```
        proc_macro_cwd: None,
    },
    10: CrateData {
        root_file_id: FileId(
            11,
        ),
        edition: Edition2018,
        version: None,
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "hello_world",
                ),
                canonical_name: "hello_world",
            },
        ),
        cfg_options: CfgOptions(
            [
                "group1_cfg=some_config",
                "group1_other_cfg=other_config",
                "group2_cfg=yet_another_config",
                "rust_analyzer",
                "test",
                "true",
            ],
        ),
        potential_cfg_options: None,
        env: Env {
            entries: {},
        },
        dependencies: [
            Dependency {
                crate_id: Idx::<CrateData>(1),
                name: CrateName(
                    "core",
                ),
                prelude: true,
                sysroot: true,
            },
            Dependency {
                crate_id: Idx::<CrateData>(0),
                name: CrateName(
                    "alloc",
                ),
                prelude: false,
                sysroot: true,
            },
            Dependency {
                crate_id: Idx::<CrateData>(6),
                name: CrateName(
                    "std",
                ),
                prelude: true,
                sysroot: true,
            },
            Dependency {
                crate_id: Idx::<CrateData>(8),
                name: CrateName(
                    "test",
                ),
                prelude: false,
                sysroot: true,
            },
            Dependency {
                crate_id: Idx::<CrateData>(4),
                name: CrateName(
                    "proc_macro",
                ),
                prelude: false,
                sysroot: true,
            },
        ],
        origin: Local {
            repo: None,
            name: Some(
                "hello_world",
            ),
        },
        is_proc_macro: false,
        proc_macro_cwd: None,
    },
    11: CrateData {
        root_file_id: FileId(
            11,
        ),
        edition: Edition2018,
        version: None,
        display_name: Some(
            CrateDisplayName {
                crate_name: CrateName(
                    "other_crate",
                ),
                canonical_name: "other_crate",
            },
        ),
        cfg_options: CfgOptions(
            [
                "group2_cfg=fourth_config",
                "group2_cfg=yet_another_config",
                "rust_analyzer",
                "test",
                "true",
                "unrelated_cfg",
            ],
        ),
        potential_cfg_options: None,
        env: Env {
            entries: {},
        },
        dependencies: [
            Dependency {
                crate_id: Idx::<CrateData>(1),
                name: CrateName(
                    "core",
                ),
                prelude: true,
                sysroot: true,
            },
            Dependency {
                crate_id: Idx::<CrateData>(0),
                name: CrateName(
                    "alloc",
                ),
                prelude: false,
                sysroot: true,
            },
            Dependency {
                crate_id: Idx::<CrateData>(6),
                name: CrateName(
                    "std",
                ),
                prelude: true,
                sysroot: true,
            },
            Dependency {
                crate_id: Idx::<CrateData>(8),
                name: CrateName(
                    "test",
                ),
                prelude: false,
                sysroot: true,
            },
            Dependency {
                crate_id: Idx::<CrateData>(4),
                name: CrateName(
                    "proc_macro",
                ),
                prelude: false,
                sysroot: true,
            },
        ],
        origin: Local {
            repo: None,
            name: Some(
                "other_crate",
            ),
        },
        is_proc_macro: false,
        proc_macro_cwd: None,
    },
```

----------------------------------------

TITLE: Contacting Rust for Linux Devs
DESCRIPTION: This snippet provides instructions for pinging the Rust for Linux developers for support. It is essential for ensuring effective communication during issues related to the integration tests.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ecosystem-test-jobs/rust-for-linux.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
"@rustbot ping rfl"
```

----------------------------------------

TITLE: Handling Zero with Missing Exponent in Rust Lexer
DESCRIPTION: Demonstrates how the Rust lexer processes zero followed by an exponent symbol (`e` or `E`) but missing the required digits after the symbol. This results in a `FLOAT_NUMBER` token with an error indicating the missing digits.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/err/empty_exponent.txt#_snippet_0

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "0e" error: Missing digits after the exponent symbol
```

LANGUAGE: Lexer Output Line
CODE:
```
FLOAT_NUMBER "0E" error: Missing digits after the exponent symbol
```

----------------------------------------

TITLE: CMake Legacy Jobserver Workaround
DESCRIPTION: Shows a workaround for CMake versions before 3.28 to enable jobserver support using $(MAKE) variable.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/jobserver.md#2025-04-21_snippet_4

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.22)
project(x)
add_custom_target(x
    COMMAND DUMMY_VARIABLE=$(MAKE) echo 'fn main() {}' | rustc -
)
```

----------------------------------------

TITLE: Checking LLVM IR with Opt Tool
DESCRIPTION: Command to validate LLVM IR using opt tool with Enzyme pass plugin
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/autodiff/debugging.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
<path/to/opt> out.ll -load-pass-plugin=/path/to/llvmenzyme-19.so -passes="enzyme" -s
```

----------------------------------------

TITLE: Example bootstrap.toml for compiling the Rust toolchain
DESCRIPTION: This is an example of the `bootstrap.toml` configuration file. It specifies that the profile to be used is `compiler` and includes a `change-id` field. This configuration is necessary when compiling the Rust toolchain for a specific target.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/nto-qnx.md#2025-04-21_snippet_2

LANGUAGE: TOML
CODE:
```
```toml
profile = "compiler"
change-id = 999999
```
```

----------------------------------------

TITLE: Cleaning Temporary Files for GIMPLE Generation
DESCRIPTION: This console command removes temporary files created by libgccjit to ensure a clean environment for generating new GIMPLE output.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/gimple.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
rm -rf /tmp/libgccjit-*
```

----------------------------------------

TITLE: Configuring DFSan for pthread Functions in Rust
DESCRIPTION: This snippet defines DFSan behavior for various pthread functions, marking most as 'discard' to ignore them during data flow analysis. It includes thread management, mutex operations, and attribute handling functions.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/ui/sanitizer/dataflow-abilist.txt#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
fun:__pthread_register_cancel=discard
fun:__pthread_unregister_cancel=discard
fun:pthread_attr_destroy=discard
fun:pthread_attr_getaffinity_np=discard
fun:pthread_attr_getdetachstate=discard
fun:pthread_attr_getguardsize=discard
fun:pthread_attr_getinheritsched=discard
fun:pthread_attr_getschedparam=discard
fun:pthread_attr_getschedpolicy=discard
fun:pthread_attr_getscope=discard
fun:pthread_attr_getstack=discard
fun:pthread_attr_getstackaddr=disacrd
fun:pthread_attr_getstacksize=discard
fun:pthread_attr_init=discard
fun:pthread_attr_setaffinity_np=discard
fun:pthread_attr_setdetachstate=discard
fun:pthread_attr_setguardsize=discard
fun:pthread_attr_setinheritsched=discard
fun:pthread_attr_setschedparam=discard
fun:pthread_attr_setschedpolicy=discard
fun:pthread_attr_setscope=discard
fun:pthread_attr_setstack=discard
fun:pthread_attr_setstackaddr=discard
fun:pthread_attr_setstacksize=discard
fun:pthread_equal=discard
fun:pthread_getschedparam=discard
fun:pthread_getspecific=discard
fun:pthread_key_create=discard
fun:pthread_key_delete=discard
fun:pthread_mutex_destroy=discard
fun:pthread_mutex_init=discard
fun:pthread_mutex_lock=discard
fun:pthread_mutex_trylock=discard
fun:pthread_mutex_unlock=discard
fun:pthread_mutexattr_destroy=discard
fun:pthread_mutexattr_init=discard
fun:pthread_mutexattr_settype=discard
fun:pthread_rwlock_destroy=discard
fun:pthread_rwlock_init=discard
fun:pthread_rwlock_rdlock=discard
fun:pthread_rwlock_timedrdlock=discard
fun:pthread_rwlock_timedwrlock=discard
fun:pthread_rwlock_tryrdlock=discard
fun:pthread_rwlock_trywrlock=discard
fun:pthread_rwlock_wrlock=discard
fun:pthread_rwlock_unlock=discard
fun:pthread_setschedparam=discard
fun:pthread_setname_np=discard
fun:pthread_once=discard
fun:pthread_self=discard
fun:pthread_setspecific=discard
```

----------------------------------------

TITLE: Referencing Tracking Issue for F16 Type in Rust
DESCRIPTION: Provides a link to the GitHub issue tracking the implementation of the f16 type in Rust. This issue contains detailed information about the feature's progress and discussions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/f16.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
[#116909]: https://github.com/rust-lang/rust/issues/116909
```

----------------------------------------

TITLE: Defining Crate Metadata for Core - Rust
DESCRIPTION: Defines the `CrateData` structure for the `core` crate (index 1). It specifies the Rust edition (`Edition2021`), compiler configuration flags (`debug_assertions`, `miri`, `true`), and lists no explicit dependencies within this definition. As a fundamental crate, many other crates depend on `core`.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_cfg_groups.txt#_snippet_1

LANGUAGE: Rust
CODE:
```
1: CrateData {
    root_file_id: FileId(
        2,
    ),
    edition: Edition2021,
    version: None,
    display_name: Some(
        CrateDisplayName {
            crate_name: CrateName(
                "core",
            ),
            canonical_name: "core",
        },
    ),
    cfg_options: CfgOptions(
        [
            "debug_assertions",
            "miri",
            "true",
        ],
    ),
    potential_cfg_options: None,
    env: Env {
        entries: {},
    },
    dependencies: [],
    origin: Lang(
        Core,
    ),
    is_proc_macro: false,
    proc_macro_cwd: None,
}
```

----------------------------------------

TITLE: Rust Identifier and Whitespace Sequence
DESCRIPTION: This snippet shows a simple sequence of Rust identifiers (a, b, c, d, e, f) separated by different types of whitespace (spaces, newlines, tabs). It's designed to illustrate how a lexer would identify and separate these tokens.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/parser/test_data/lexer/ok/whitespace.txt#2025-04-21_snippet_0

LANGUAGE: Rust
CODE:
```
"IDENT \"a\"\nWHITESPACE \" \"\nIDENT \"b\"\nWHITESPACE \"  \"\nIDENT \"c\"\nWHITESPACE \"\n\"\nIDENT \"d\"\nWHITESPACE \"\n\n\"\nIDENT \"e\"\nWHITESPACE \"\t\"\nIDENT \"f\"\nWHITESPACE \"\n\""
```

----------------------------------------

TITLE: Alternative Canonical Form with For Syntax
DESCRIPTION: This snippet shows an alternative way to represent the canonicalized query, using 'for<>' to provide information about variable types. 'T' indicates type variables and 'L' indicates lifetime variables. This form also prepares the query for solving by the trait system.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/canonicalization.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
for<T,L,T> { ?0: Foo<'?1, ?2> }
```

----------------------------------------

TITLE: Formatting Zulip Stream Link in Markdown
DESCRIPTION: This snippet demonstrates how to create a Markdown link to the ARM-specific Zulip stream. It uses a reference-style link format.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/arm.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
[`#t-compiler/arm`]: https://rust-lang.zulipchat.com/#narrow/stream/242906-t-compiler.2Farm
```

----------------------------------------

TITLE: Feature Documentation
DESCRIPTION: Markdown documentation for the asm_unwind feature, referencing tracking issue #93334. The feature enables assembly blocks to unwind the stack through the may_unwind option in the asm! macro.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/asm-unwind.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `asm_unwind`

The tracking issue for this feature is: [#93334]

[#93334]: https://github.com/rust-lang/rust/issues/93334
```

----------------------------------------

TITLE: @rustbot Ready Shortcut Command - Markdown
DESCRIPTION: This snippet demonstrates a shortcut command for quickly marking an issue or PR as ready. It serves as an alternative to the full relabeling command.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustbot.md#2025-04-21_snippet_3

LANGUAGE: markdown
CODE:
```
@rustbot ready
```

----------------------------------------

TITLE: Defining Crate Metadata for Std - Rust
DESCRIPTION: Defines the `CrateData` structure for the `std` crate (index 6). It includes the Rust edition (`Edition2021`), standard compiler configuration flags, and an extensive list of dependencies, including `alloc`, `panic_unwind`, `panic_abort`, `core`, `profiler_builtins`, `unwind`, `std_detect`, and `test`. This crate represents the core standard library.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/project-model/test_data/output/rust_project_cfg_groups.txt#_snippet_6

LANGUAGE: Rust
CODE:
```
6: CrateData {
    root_file_id: FileId(
        7,
    ),
    edition: Edition2021,
    version: None,
    display_name: Some(
        CrateDisplayName {
            crate_name: CrateName(
                "std",
            ),
            canonical_name: "std",
        },
    ),
    cfg_options: CfgOptions(
        [
            "debug_assertions",
            "miri",
            "true",
        ],
    ),
    potential_cfg_options: None,
    env: Env {
        entries: {},
    },
    dependencies: [
        Dependency {
            crate_id: Idx::<CrateData>(0),
            name: CrateName(
                "alloc",
            ),
            prelude: true,
            sysroot: false,
        },
        Dependency {
            crate_id: Idx::<CrateData>(3),
            name: CrateName(
                "panic_unwind",
            ),
            prelude: true,
            sysroot: false,
        },
        Dependency {
            crate_id: Idx::<CrateData>(2),
            name: CrateName(
                "panic_abort",
            ),
            prelude: true,
            sysroot: false,
        },
        Dependency {
            crate_id: Idx::<CrateData>(1),
            name: CrateName(
                "core",
            ),
            prelude: true,
            sysroot: false,
        },
        Dependency {
            crate_id: Idx::<CrateData>(5),
            name: CrateName(
                "profiler_builtins",
            ),
            prelude: true,
            sysroot: false,
        },
        Dependency {
            crate_id: Idx::<CrateData>(9),
            name: CrateName(
                "unwind",
            ),
            prelude: true,
            sysroot: false,
        },
        Dependency {
            crate_id: Idx::<CrateData>(7),
            name: CrateName(
                "std_detect",
            ),
            prelude: true,
            sysroot: false,
        },
        Dependency {
            crate_id: Idx::<CrateData>(8),
            name: CrateName(
                "test",
            ),
            prelude: true,
            sysroot: false,
        }
    ],
    origin: Lang(
        Std,
    ),
    is_proc_macro: false,
    proc_macro_cwd: None,
}
```

----------------------------------------

TITLE: Printing Debug Information in GDB for libgccjit Errors
DESCRIPTION: These GDB commands print the line number and filename of the error location when debugging libgccjit issues. They should be used after setting a breakpoint on the 'add_error' function.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_gcc/doc/debugging-libgccjit.md#2025-04-21_snippet_1

LANGUAGE: gdb
CODE:
```
p loc->m_line
p loc->m_filename->m_buffer
```

----------------------------------------

TITLE: WorkerLocal Implementation in Parallel Compiler - Rust
DESCRIPTION: The `WorkerLocal` data structure is designed to hold worker-local values for each thread in a thread pool within the parallel compiler. It is accessed through a specific implementation and is essential for memory allocation in a parallel environment.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/parallel-rustc.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
/// `WorkerLocal` is a special data structure implemented for parallel compilers.
/// It holds worker-locals values for each thread in a thread pool. You can only
/// access the worker local value through the `Deref` `impl` on the thread pool it
/// was constructed on. It panics otherwise.
`WorkerLocal` is used to implement the `Arena` allocator in the parallel
environment, which is critical in parallel queries. Its implementation is
located in the [`rustc_data_structures::sync::worker_local`] module. However,
in the non-parallel compiler, it is implemented as `(OneThread<T>)`, whose `T`
can be accessed directly through `Deref::deref`.
```

----------------------------------------

TITLE: Defining Rust File Symbols
DESCRIPTION: This code snippet defines various Rust symbols including functions, structs, traits, and macros. It includes detailed metadata for each symbol such as its name, type, location, and container information.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_9

LANGUAGE: Rust
CODE:
```
FileSymbol {
    name: "generic_impl_fn",
    def: Function(
        Function {
            id: FunctionId(
                2,
            ),
        },
    ),
    loc: DeclarationLocation {
        hir_file_id: EditionedFileId(
            FileId(
                0,
            ),
            Edition2021,
        ),
        ptr: SyntaxNodePtr {
            kind: FN,
            range: 307..330,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 310..325,
            },
        ),
    },
    container_name: Some(
        "StructT<T>",
    ),
    is_alias: false,
    is_assoc: true,
}
```

----------------------------------------

TITLE: Configuring No-Sysroot Test Suite in Rust Build System
DESCRIPTION: Configuration section for test suite components that don't require a sysroot. Each line represents a test that will be run by default, but can be commented out to skip individual tests.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/config.txt#2025-04-21_snippet_1

LANGUAGE: ini
CODE:
```
testsuite.no_sysroot
build.mini_core
build.example
jit.mini_core_hello_world
aot.mini_core_hello_world
```

----------------------------------------

TITLE: Creating a Static Library
DESCRIPTION: This CMake command creates a static library named `cmake_foo` using the source files listed in the `SOURCES` variable. The `STATIC` keyword specifies that a static library should be created.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/x86_64-fortanix-unknown-sgx-lvi/enclave/libcmake_foo/CMakeLists.txt#_snippet_8

LANGUAGE: CMake
CODE:
```
add_library(cmake_foo STATIC
    ${SOURCES})
```

----------------------------------------

TITLE: Incorrect Usage of #[lang] Attribute on Static Item in Rust
DESCRIPTION: This code snippet demonstrates the incorrect application of the #[lang = "owned_box"] attribute on a static item, which leads to a compilation error E0718. The #[lang] attribute is intended for specific language items and should not be used on static variables.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0718.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(lang_items)]

#[lang = "owned_box"]
static X: u32 = 42;
```

----------------------------------------

TITLE: RPITIT Desugared GAT Implementation
DESCRIPTION: Shows how the compiler desugars RPITIT into an equivalent GAT implementation with explicit lifetime parameters
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/return-position-impl-trait-in-trait.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
trait Foo {
    type Gat<'early, T, 'early_duplicated, 'late>: Sized + Captures<'early_duplicated, 'late>;

    fn method<'early: 'early, 'late, T>() -> Self::Gat<'early, T, 'early, 'late>;
}
```

----------------------------------------

TITLE: Preventing ICE in Empty Macro Rules in Rust
DESCRIPTION: This snippet demonstrates a fix for a previous issue where rustfmt would cause an Internal Compiler Error (ICE) when formatting an empty `macro_rules!` branch. The provided macro definition showcases the scenario that triggered the ICE, now resolved by the fix. This ensures stability when formatting macro definitions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rustfmt/CHANGELOG.md#2025-04-21_snippet_11

LANGUAGE: rust
CODE:
```
macro_rules! statement {
    () => {;};
}
```

----------------------------------------

TITLE: Adding Multiple Changelog Entries
DESCRIPTION: Example showing how to include multiple changelog entries in a single PR.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/CONTRIBUTING.md#2025-04-21_snippet_5

LANGUAGE: markdown
CODE:
```
changelog: Something 1
changelog: Something 2
changelog: Something 3
```

----------------------------------------

TITLE: Listing Windows GNU Target Triples in Markdown
DESCRIPTION: Defines the available target triples for Windows GNU in Rust, specifying their tier status. This includes both 32-bit and 64-bit architectures.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/windows-gnu.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
- `i686-pc-windows-gnu`: Tier 2
- `x86_64-pc-windows-gnu`: Tier 1
```

----------------------------------------

TITLE: Initializing Green Node Builder in Rust
DESCRIPTION: A struct for constructing green syntax trees through depth-first traversal, providing methods to build and manipulate syntax nodes
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/syntax.md#2025-04-21_snippet_8

LANGUAGE: rust
CODE:
```
pub struct GreenNodeBuilder { ... }

impl GreenNodeBuilder {
    pub fn new() -> GreenNodeBuilder { ... }

    pub fn token(&mut self, kind: SyntaxKind, text: &str) { ... }

    pub fn start_node(&mut self, kind: SyntaxKind) { ... }
    pub fn finish_node(&mut self) { ... }

    pub fn finish(self) -> GreenNode { ... }
```

----------------------------------------

TITLE: Starting Local HTTP Server for Rustdoc Testing
DESCRIPTION: Commands to generate documentation and start a local HTTP server for testing rustdoc HTML features that require local storage across pages. The server allows browsing the documentation as if it were hosted online.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/rustdoc-internals.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ ./x doc library
# The documentation has been generated into `build/[YOUR ARCH]/doc`.
$ python3 -m http.server -d build/[YOUR ARCH]/doc
```

----------------------------------------

TITLE: Inline Code Reference
DESCRIPTION: Inline code formatting in markdown to highlight the rustc compiler name.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/contributing.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
`rustc`
```

----------------------------------------

TITLE: Referencing Rust Code of Conduct in Markdown
DESCRIPTION: A markdown snippet that provides a header and a link to the online location of the Rust Code of Conduct. This is typically used in project repositories to direct contributors to the official conduct guidelines.
SOURCE: https://github.com/rust-lang/rust/blob/master/CODE_OF_CONDUCT.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# The Rust Code of Conduct

The Code of Conduct for this repository [can be found online](https://www.rust-lang.org/conduct.html).
```

----------------------------------------

TITLE: Running Specific x86_64 GNU LLVM Job
DESCRIPTION: Example command to run the x86_64-gnu-llvm-19-1 CI job locally
SOURCE: https://github.com/rust-lang/rust/blob/master/src/ci/docker/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cargo run --manifest-path src/ci/citool/Cargo.toml run-local x86_64-gnu-llvm-19-1
```

----------------------------------------

TITLE: Rust FileSymbol for Another Struct
DESCRIPTION: This snippet showcases another `FileSymbol` instance, this time representing a struct named `ThisStruct`. Similar to the previous struct example, it contains the struct's definition, location, and flags. The `DeclarationLocation` specifies the `USE_TREE` kind and the range of the struct's name within the code.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/crates/ide-db/src/test_data/test_symbol_index_collection.txt#2025-04-21_snippet_12

LANGUAGE: rust
CODE:
```
{
    name: "ThisStruct",
    def: Adt(
        Struct(
            Struct {
                id: StructId(
                    4,
                ),
            },
        ),
    ),
    loc: DeclarationLocation {
        hir_file_id: EditionedFileId(
            FileId(
                1,
            ),
            Edition2021,
        ),
        ptr: SyntaxNodePtr {
            kind: USE_TREE,
            range: 85..125,
        },
        name_ptr: AstPtr(
            SyntaxNodePtr {
                kind: NAME,
                range: 115..125,
            },
        ),
    },
    container_name: None,
    is_alias: false,
    is_assoc: false,
}
```

----------------------------------------

TITLE: LLVM Function Declaration Check
DESCRIPTION: This snippet checks for the declaration of a function named `@foo`. It also captures the attribute list ID associated with the function declaration for later checks.
SOURCE: https://github.com/rust-lang/rust/blob/master/tests/run-make/no-builtins-attribute/filecheck.main.txt#2025-04-21_snippet_0

LANGUAGE: llvm
CODE:
```
CHECK: declare void @foo()
CHECK-SAME: #[[ATTR_3:[0-9]+]]
```

----------------------------------------

TITLE: Rust Region Canonicalization Example
DESCRIPTION: Illustrates how region canonicalization works by converting a trait bound with lifetime parameters to its canonicalized form.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/solve/canonicalization.md#2025-04-21_snippet_2

LANGUAGE: rust
CODE:
```
&'a (): Trait<'a>
```

----------------------------------------

TITLE: Target Triple Definition for PowerPC64 AIX
DESCRIPTION: Defines the target triple identifier for PowerPC64 IBM AIX platform in Rust
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/aix.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
powerpc64-ibm-aix
```

----------------------------------------

TITLE: Renaming Cargo Package for Publishing
DESCRIPTION: Instructions for renaming the package from 'clippy_dummy' to 'clippy' in Cargo.toml before publishing to crates.io. The temporary name is used to avoid workspace conflicts during development.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/clippy_dummy/PUBLISH.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
# Before publishing:
# clippy_dummy -> clippy in Cargo.toml
```

----------------------------------------

TITLE: Substitution Instantiation Example
DESCRIPTION: This example demonstrates the creation of a substitution S which replaces canonical variables with fresh inference variables suitable for solving the canonicalized trait query in a fresh context.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/traits/canonicalization.md#2025-04-21_snippet_3

LANGUAGE: text
CODE:
```
S = [?A, '?B, ?C]
```

----------------------------------------

TITLE: Changelog Section Structure Template
DESCRIPTION: A markdown template showing the standard section headers used in the Clippy changelog. This structure organizes changes by type including new lints, moves/deprecations, enhancements, and fixes.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/changelog_update.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
### New Lints
* Added [`LINT`] to `GROUP`

### Moves and Deprecations
* Moved [`LINT`] to `GROUP` (From `GROUP`, now LEVEL-by-default)
* Renamed `LINT` to [`LINT`]

### Enhancements
### False Positive Fixes
### Suggestion Fixes/Improvements
### ICE Fixes
### Documentation Improvements
### Others
```

----------------------------------------

TITLE: Registering Removed Lint in Rust Compiler
DESCRIPTION: This snippet demonstrates how to register a lint as removed in the Rust compiler. It updates the `register_removed` function call with the lint name and a reference link to the tracking issue, indicating the reason for removal.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/bug-fix-procedure.md#2025-04-21_snippet_3

LANGUAGE: rust
CODE:
```
store.register_removed("overlapping_inherent_impls", "converted into hard error, see #36889");
```

----------------------------------------

TITLE: Defining Cargo Args Structure in TypeScript
DESCRIPTION: Details the argument structure required for executing Cargo commands, relevant for tools that interact with Rust projects via shell operations. The configuration set includes environment setups, directory paths, and specific command executions necessary for managing and initiating cargo-based operations.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/rust-analyzer/docs/book/src/contributing/lsp-extensions.md#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
{
    environment?: Record<string, string>;
    cwd: string;
    workspaceRoot?: string;
    cargoArgs: string[];
    executableArgs: string[];
    overrideCargo?: string;
}
```

----------------------------------------

TITLE: Markdown Header for rustc-std-workspace-std Documentation
DESCRIPTION: Simple markdown header indicating the crate name and reference to related documentation
SOURCE: https://github.com/rust-lang/rust/blob/master/library/rustc-std-workspace-std/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# The `rustc-std-workspace-std` crate

See documentation for the `rustc-std-workspace-core` crate.
```

----------------------------------------

TITLE: Specifying a new LLVM - Rust
DESCRIPTION: This snippet describes the steps to specify a different LLVM fork for new targets in Rust. It includes shell commands to set up the LLVM fork and commit changes to the Rust repository.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/building/new-target.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cd src/llvm-project
git remote add my-target-llvm some-llvm-repository
git checkout my-target-llvm/my-branch
cd ..
git add llvm-project
git commit -m 'Use my custom LLVM'
```

----------------------------------------

TITLE: REUSE Directive Comments
DESCRIPTION: Special comments indicating sections to be ignored by REUSE license compliance tools
SOURCE: https://github.com/rust-lang/rust/blob/master/src/librustdoc/html/static/fonts/FiraSans-LICENSE.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
// REUSE-IgnoreStart

// REUSE-IgnoreEnd
```

----------------------------------------

TITLE: CSS Styling for Platform Support Table
DESCRIPTION: CSS style rule to prevent code elements in table cells from wrapping, improving readability of target triples in the platform support tables.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support.md#_snippet_0

LANGUAGE: css
CODE:
```
td code {
        white-space: nowrap;
    }
```

----------------------------------------

TITLE: Matching Runtime Error Pattern (Rust)
DESCRIPTION: Demonstrates using the `//@ error-pattern: pattern` directive to match a specific string pattern in the test output. This is primarily used for runtime errors that don't have source code spans or for certain compile-time messages.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ui.md#_snippet_9

LANGUAGE: Rust
CODE:
```
//@ error-pattern: index out of bounds
fn main() {
    let a: *const [_] = &[1, 2, 3];
    unsafe {
        let _b = (*a)[3];
    }
}
```

----------------------------------------

TITLE: Adding User to Rust Team
DESCRIPTION: This command is used to add a user to the Rust team. It needs to be executed after adding the user's GitHub username to the relevant file in the Rust team repository, if the user is not already a member of a Rust team. The command takes the user's GitHub username as an argument.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/about.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cargo run add-person $your_user_name
```

----------------------------------------

TITLE: Markdown Navigation Structure
DESCRIPTION: Hierarchical markdown document structure defining the table of contents for the Rustc book, including links to various sections covering compiler features, platform support, and implementation details.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/SUMMARY.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# The Rustc Book

- [What is rustc?](what-is-rustc.md)
- [Command-line Arguments](command-line-arguments.md)
    - [Print Options](command-line-arguments/print-options.md)
    - [Codegen Options](codegen-options/index.md)
[...additional navigation items...]
```

----------------------------------------

TITLE: Markdown Reference Links
DESCRIPTION: Reference-style links in markdown defining URLs for the rustc development guide and rustc book source repository.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/contributing.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
[rustc_dev_guide]: https://rustc-dev-guide.rust-lang.org/
[rustc_book]: https://github.com/rust-lang/rust/tree/master/src/doc/rustc
```

----------------------------------------

TITLE: Triggering Rust for Linux CI Job
DESCRIPTION: Instructions on how to trigger the Rust for Linux job in the CI system. This command is used in a PR description to run a specific job for testing the integration.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/ecosystem-test-jobs/rust-for-linux.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
"> try-job: x86_64-rust-for-linux"
```

----------------------------------------

TITLE: Markdown Documentation - Clippy Roadmap 2021
DESCRIPTION: Comprehensive markdown document detailing Clippy's planned improvements for 2021, including user-facing changes like lint configurations and internal process developments for better project management.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/proposals/roadmap-2021.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Roadmap 2021

# Summary

This Roadmap lays out the plans for Clippy in 2021:

- Improving usability and reliability
- Improving experience of contributors and maintainers 
- Develop and specify processes

[...remaining markdown content...]
```

----------------------------------------

TITLE: Example of JSON5 output from the instrumented binary
DESCRIPTION: Sample output from running the instrumented JSON5 formatter binary, showing the formatted JSON5 result.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/instrument-coverage.md#2025-04-21_snippet_5

LANGUAGE: json5
CODE:
```
{
    some: "thing",
}
```

----------------------------------------

TITLE: Disassembly Output of MSP430 Interrupt Handler
DESCRIPTION: This shows the disassembly output of the compiled MSP430 interrupt handler, demonstrating how the compiler placed the interrupt vector at the correct memory address (0xfff2) and how the interrupt handler function ends with the required 'reti' instruction for MSP430 architecture.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/abi-msp430-interrupt.md#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
$ msp430-elf-objdump -CD ./target/msp430/release/app
Disassembly of section __interrupt_vector_10:

0000fff2 <TIM0_VECTOR>:
    fff2:       00 c0           interrupt service routine at 0xc000

Disassembly of section .text:

0000c000 <int::tim0>:
    c000:       00 13           reti
```

----------------------------------------

TITLE: Apple Platform Ping Command
DESCRIPTION: Command used to request assistance from the Apple platform support team in the Rust project
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/apple.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
@rustbot ping apple
```

----------------------------------------

TITLE: Markdown Feature Documentation Header
DESCRIPTION: Markdown header and description for the extended_varargs_abi_support feature, including tracking issue reference and purpose of the feature.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/language-features/extended-varargs-abi-support.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# `extended_varargs_abi_support`

The tracking issue for this feature is: [#100189]

[#100189]: https://github.com/rust-lang/rust/issues/100189

------------------------

This feature adds the possibility of using `sysv64`, `win64` or `efiapi` calling
conventions on functions with varargs.
```

----------------------------------------

TITLE: Displaying GitHub Label for ARM Group in Markdown
DESCRIPTION: This snippet shows how to format the GitHub label for the ARM group using Markdown syntax. It includes a link to the label on GitHub.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/notification-groups/arm.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
[O-ARM]: https://github.com/rust-lang/rust/labels/O-ARM
```

----------------------------------------

TITLE: Applying Patched git-subtree Script for Rust Repository
DESCRIPTION: This snippet describes how to replace the existing git-subtree script with a patched version to fix bugs when working with large repositories like rust-lang/rust. It includes copying the patched script into the git-core directory, setting proper permissions, and ensuring correct ownership. Additional notes address running the first cache build with increased stack size and modifying scripts for Debian's dash shell environment.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/tools/clippy/book/src/development/infrastructure/sync.md#_snippet_0

LANGUAGE: bash
CODE:
```
sudo cp --backup /path/to/patched/git-subtree.sh /usr/lib/git-core/git-subtree
sudo chmod --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subtree
sudo chown --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subtree
```

----------------------------------------

TITLE: Markdown Bibliography Structure
DESCRIPTION: A structured markdown document organizing academic papers and research materials related to Rust into categories including type system, concurrency, and papers about Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/appendix/bibliography.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Rust Bibliography

This is a reading list of material relevant to Rust. It includes prior
research that has - at one time or another - influenced the design of
Rust, as well as publications about Rust.

## Type system

* [Alias burying](https://dl.acm.org/doi/10.1002/spe.370) - We tried something similar and abandoned it.
* [External uniqueness is unique enough](https://lirias.kuleuven.be/retrieve/35835)
* [Macros that work together](https://www.cs.utah.edu/plt/publications/jfp12-draft-fcdf.pdf)

## Concurrency

* [A Java fork/join calamity](https://web.archive.org/web/20190904045322/http://www.coopsoft.com/ar/CalamityArticle.html)
* [Algorithms for scalable synchronization of shared-memory multiprocessors](https://www.cs.rochester.edu/u/scott/papers/1991_TOCS_synch.pdf)

## Others

* [Composing High-Performance Memory Allocators](https://people.cs.umass.edu/~emery/pubs/berger-pldi2001.pdf)
* [Crash-only software](https://www.usenix.org/legacy/events/hotos03/tech/full_papers/candea/candea.pdf)

## Papers *about* Rust

* [GPU Programming in Rust](https://ieeexplore.ieee.org/document/6650903)
* [RustBelt: Securing the Foundations of the Rust Programming Language](https://plv.mpi-sws.org/rustbelt/popl18/)
```

----------------------------------------

TITLE: Enabling PGO Instrumentation Generation in LLVM PassManager (C)
DESCRIPTION: This code snippet shows how rustc instructs LLVM to add profiling instrumentation by setting appropriate flags when creating LLVM PassManagers. It enables PGO instrumentation generation and sets the default output path for the .profraw file.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/profile-guided-optimization.md#2025-04-21_snippet_0

LANGUAGE: C
CODE:
```
    unwrap(PMBR)->EnablePGOInstrGen = true;
    unwrap(PMBR)->PGOInstrGen = PGOGenPath;
```

----------------------------------------

TITLE: Documenting Internal Rust Compiler Feature in Markdown
DESCRIPTION: This snippet provides documentation for an internal Rust compiler feature named 'c_void_variant'. It explicitly states that the feature is not intended for general use, indicating it is a specialized component of the compiler's internal workings.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/library-features/c-void-variant.md#2025-04-21_snippet_0

LANGUAGE: Markdown
CODE:
```
# `c_void_variant`

This feature is internal to the Rust compiler and is not intended for general use.
```

----------------------------------------

TITLE: Incorrect Usage of #[ffi_returns_twice] Attribute in Rust
DESCRIPTION: This code snippet demonstrates the erroneous use of the #[ffi_returns_twice] attribute on a regular Rust function, which is not allowed. The attribute can only be used on foreign function declarations.
SOURCE: https://github.com/rust-lang/rust/blob/master/compiler/rustc_error_codes/src/error_codes/E0724.md#2025-04-21_snippet_0

LANGUAGE: rust
CODE:
```
#![feature(ffi_returns_twice)]
#![crate_type = "lib"]

#[ffi_returns_twice] // error!
pub fn foo() {}
```

----------------------------------------

TITLE: Setting RUSTC_BOOTSTRAP in Run-Make Tests
DESCRIPTION: Example demonstrating how to set RUSTC_BOOTSTRAP environment variable in run-make tests using the rustc() builder pattern to modify compiler behavior.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/tests/misc.md#2025-04-21_snippet_1

LANGUAGE: rust
CODE:
```
use run_make_support::rustc;

fn main() {
    rustc()
        // Pretend that I am very stable
        .env("RUSTC_BOOTSTRAP", "-1")
        //...
        .run();
}
```

----------------------------------------

TITLE: Type Checking Flow Diagram
DESCRIPTION: Mermaid flowchart showing the steps involved in type checking and resolving opaque types in the compiler.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/opaque-types-impl-trait-inference.md#2025-04-21_snippet_1

LANGUAGE: mermaid
CODE:
```
flowchart TD
    TypeChecking["type checking `main`"]
    subgraph TypeOfSeq["type_of(Seq<T>) query"]
        WalkModuleHir["Walk the HIR for the module `m`\nto find the hidden types from each\nfunction/const/static within"]
        VisitProduceSingleton["visit `produce_singleton`"]
        InterimType["`produce_singleton` hidden type is `Vec<T>`\nkeep searching"]
        VisitProduceDoubleton["visit `produce_doubleton`"]
        CompareType["`produce_doubleton` hidden type is also Vec<T>\nthis matches what we saw before ✅"]
        Done["No more items to look at in scope\nReturn `Vec<T>`"]
    end

    BorrowCheckProduceSingleton["`borrow_check(produce_singleton)`"]
    TypeCheckProduceSingleton["`type_check(produce_singleton)`"]

    BorrowCheckProduceDoubleton["`borrow_check(produce_doubleton)`"]
    TypeCheckProduceDoubleton["`type_check(produce_doubleton)`"]

    Substitute["Substitute `T => u32`,\nyielding `Vec<i32>` as the hidden type"]
    CheckSend["Check that `Vec<i32>: Send` ✅"]

    TypeChecking -- trait code for auto traits --> TypeOfSeq
    TypeOfSeq --> WalkModuleHir
    WalkModuleHir --> VisitProduceSingleton
    VisitProduceSingleton --> BorrowCheckProduceSingleton
    BorrowCheckProduceSingleton --> TypeCheckProduceSingleton
    TypeCheckProduceSingleton --> InterimType
    InterimType --> VisitProduceDoubleton
    VisitProduceDoubleton --> BorrowCheckProduceDoubleton
    BorrowCheckProduceDoubleton --> TypeCheckProduceDoubleton
    TypeCheckProduceDoubleton --> CompareType --> Done
    Done --> Substitute --> CheckSend
```

----------------------------------------

TITLE: Documentation Header for Rust Lints
DESCRIPTION: Markdown header indicating this is an auto-generated documentation file for allowed-by-default lints in Rust.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/lints/listing/allowed-by-default.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Allowed-by-default Lints\n\nThis file is auto-generated by the lint-docs script.
```

----------------------------------------

TITLE: Console Output Example for Multi-line Suggestions
DESCRIPTION: Example console output demonstrating how multiple or multi-line suggestions are displayed separately from the main error message.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/diagnostics.md#2025-04-21_snippet_6

LANGUAGE: console
CODE:
```
error[E0999]: oh no! this is an error!
 --> mycode.rs:3:5
  |
3 |     sad()
  |     ^
help: try using a qux here:
  |
3 |     qux sad()
  |     ^^^

error: aborting due to previous error

For more information about this error, try `rustc --explain E0999`.
```

----------------------------------------

TITLE: Example Output of `cargo doc` with Missing Documentation Warning
DESCRIPTION: This text output shows a sample result from running `cargo doc` on a Rust project where the `#![warn(missing_docs)]` attribute is used and the crate itself lacks top-level documentation. It highlights the specific warning and points to the location of the lint definition.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/write-documentation/what-to-include.md#_snippet_1

LANGUAGE: Text
CODE:
```
 Documenting docdemo v0.1.0 (/Users/username/docdemo)
warning: missing documentation for the crate
 --> src/main.rs:1:1
  |
1 | / #![warn(missing_docs)]
2 | |
3 | | fn main() {
4 | |     println!("Hello, world!");
5 | | }
  | |_^
  |
note: the lint level is defined here
 --> src/main.rs:1:9
  |
1 | #![warn(missing_docs)]
  |         ^^^^^^^^^^^^

warning: 1 warning emitted

    Finished dev [unoptimized + debuginfo] target(s) in 2.96s
```

----------------------------------------

TITLE: Universal Regions Liveness Constraints Visualization
DESCRIPTION: Textual representation of universal regions' liveness constraints during region inference
SOURCE: https://github.com/rust-lang/rust/blob/master/src/doc/rustc-dev-guide/src/borrow_check/region_inference/lifetime_parameters.md#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
'a live at {B, end('a)}
'b live at {B, end('b)}
'a: 'b
```

----------------------------------------

TITLE: Apache License 2.0 Header Template
DESCRIPTION: Standard header text for Apache License 2.0 that should be included at the top of source files. Includes placeholder for copyright year and owner name, along with the standard Apache license terms and conditions.
SOURCE: https://github.com/rust-lang/rust/blob/master/src/librustdoc/html/static/LICENSE-APACHE.txt#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
Copyright [yyyy] [name of copyright owner]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
```