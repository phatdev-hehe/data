TITLE: Creating Server Client for Supabase in Next.js
DESCRIPTION: Implementation for creating a Supabase client for server components using the createServerClient function from @supabase/ssr package with proper cookie handling.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
```

----------------------------------------

TITLE: Supabase Database Schema Setup
DESCRIPTION: SQL schema definition for creating and configuring user profiles table with row level security policies, realtime functionality, and storage bucket setup for avatars.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/flutter-user-management/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Creating New Migration File for User Management
DESCRIPTION: Command to generate a new migration file for the user management starter schema when working in a local development environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/project_setup.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase migration new user_management_starter
```

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: JavaScript module that creates and exports a Supabase client instance using environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: Creates a Supabase client instance using project URL and anonymous key for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-11-using-supabase-replit.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
const supabase = createClient(
  'https://ajsstlnzcmdmzbtcgbbd.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
)
```

----------------------------------------

TITLE: Creating Supabase Client - TypeScript
DESCRIPTION: This snippet demonstrates the creation of a Supabase client tailored for TypeScript users in a SvelteKit application. It includes type definitions for the database. The function loads the Supabase client and fetches user session data while depending on the authentication state. Uses the same dependencies as the JavaScript version, with the addition of a Database type.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
// src/routes/+layout.ts
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'
import { createSupabaseLoadClient } from '@supabase/auth-helpers-sveltekit'
import type { Database } from '../DatabaseDefinitions'

export const load = async ({ fetch, data, depends }) => {
  depends('supabase:auth')

  const supabase = createSupabaseLoadClient<Database>({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event: { fetch },
    serverSession: data.session,
  })

  /**
   * It's fine to use `getSession` here, because on the client, `getSession` is
   * safe, and on the server, it reads `session` from the `LayoutData`, which
   * safely checked the session using `safeGetSession`.
   */
  const {
    data: { session },
  } = await supabase.auth.getSession()

  return { supabase, session }
}
```

----------------------------------------

TITLE: Direct Postgres Connection String
DESCRIPTION: This snippet shows an example of a direct connection string to a Supabase Postgres database. It's intended for persistent servers and requires IPv6 support by default. Replace `[YOUR-PASSWORD]` with the actual password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres.mdx#_snippet_0

LANGUAGE: text
CODE:
```
postgresql://postgres:[YOUR-PASSWORD]@db.apbkobhfnmcqqzqeeqss.supabase.co:5432/postgres
```

----------------------------------------

TITLE: Row Level Security Policy Definition in Postgres
DESCRIPTION: Example SQL policy that demonstrates how to implement row-level security in Postgres to restrict users to viewing only their own records in a todos table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-vec2pg.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create policy "Individuals can view their own todos."
  on public.todos
  for select
  using
    ( ( select auth.uid() ) = user_id );
```

----------------------------------------

TITLE: Setting Up Public Profiles Table with RLS
DESCRIPTION: Complete example of creating a profiles table with RLS and a public access policy.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- 1. Create table
create table profiles (
  id uuid primary key,
  user_id references auth.users,
  avatar_url text
);

-- 2. Enable RLS
alter table profiles enable row level security;

-- 3. Create Policy
create policy "Public profiles are visible to everyone."
on profiles for select
to anon         -- the Postgres Role (recommended)
using ( true ); -- the actual Policy
```

----------------------------------------

TITLE: Creating Profiles Table in PostgreSQL
DESCRIPTION: SQL code to create a profiles table with basic user information including id, name, and email fields. This table is used as an example to demonstrate Row Level Security for data dumps.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table profiles (
  id serial primary key,
  name text,
  email text
);
```

----------------------------------------

TITLE: Implementing Advisory Lock for S3 Upload Transaction in JavaScript
DESCRIPTION: Example showing how to implement a Postgres advisory lock within a transaction to safely handle concurrent S3 object uploads. The code demonstrates acquiring a transactional lock using a hashed key, performing the upload operation, and handling metadata storage while ensuring automatic lock release at transaction end.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-12-storage-v3-resumable-uploads.mdx#2025-04-22_snippet_4

LANGUAGE: javascript
CODE:
```
const key = `/bucket-name/folder/bunny.jpg`
const hashedKey = hash(key)

await db.withTransaction(() => {
	// try acquiring a transactional advisory lock
	// these locks are automatically released at the end of every transaction
	await db.run('SELECT pg_advisory_xact_lock(?)', hashedKey);

	// the current server can upload to s3 at the given key
	await uploadObject();

   if (isLastChunk) {
    // storage.objects stores the object metadata of all objects
    // It doubles up as a way to enforce authorization.
    // If a user is able to insert into this table, they can upload.
    await db.run('insert into storage.objects(..) values(..)')
   }
});

// the advisory lock is automatically released at this point
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase Connection
DESCRIPTION: Setup of Supabase connection credentials in a .env file for React applications. Requires Supabase project URL and anonymous key for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/client.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Signing Up New User using Supabase in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to sign up a new user with email and password using Supabase. Optionally, a redirect URL can be specified to direct the user after confirmation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

// ---cut---
async function signUpNewUser() {
  const { data, error } = await supabase.auth.signUp({
    email: 'valid.email@supabase.io',
    password: 'example-password',
    options: {
      emailRedirectTo: 'https://example.com/welcome',
    },
  })
}
```

----------------------------------------

TITLE: Uploading a file using JavaScript in Supabase Storage
DESCRIPTION: This JavaScript snippet demonstrates how to upload a file to Supabase Storage. It retrieves a file from an event target (`event.target.files[0]`), and then uploads it to the 'avatars' bucket with the path 'public/avatar1.png' using the `supabase.storage.from('avatars').upload()` method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const avatarFile = event.target.files[0]
const { data, error } = await supabase.storage
  .from('avatars')
  .upload('public/avatar1.png', avatarFile)
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library for integrating with Supabase services.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Setting User ID Session Variable for RLS
DESCRIPTION: Sets the app.current_user_id session variable with the current user's ID at the beginning of a database session. This value will be used by RLS policies to determine data access permissions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
set app.current_user_id = '<current-user-id>';
```

----------------------------------------

TITLE: Querying Data from Supabase in JavaScript
DESCRIPTION: JavaScript code to query all records from an 'articles' table in Supabase. It uses the Supabase client's 'from' method to specify the table and 'select' to retrieve all columns.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/with-cloudflare-workers/README.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { data } = await supabase.from("articles").select("*");
```

----------------------------------------

TITLE: Implementing Supabase Auth Session Management in Next.js Middleware
DESCRIPTION: Creates a utility function for the middleware that handles authentication token refresh and manages cookies. Ensures proper synchronization between browser and server authentication state and handles potential redirection for unauthenticated users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_5

LANGUAGE: ts
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function updateSession(request: NextRequest) {
  let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  // Do not run code between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  // IMPORTANT: DO NOT REMOVE auth.getUser()

  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (
    !user &&
    !request.nextUrl.pathname.startsWith('/login') &&
    !request.nextUrl.pathname.startsWith('/auth')
  ) {
    // no user, potentially respond by redirecting the user to the login page
    const url = request.nextUrl.clone()
    url.pathname = '/login'
    return NextResponse.redirect(url)
  }

  // IMPORTANT: You *must* return the supabaseResponse object as it is.
  // If you're creating a new response object with NextResponse.next() make sure to:
  // 1. Pass the request in it, like so:
  //    const myNewResponse = NextResponse.next({ request })
  // 2. Copy over the cookies, like so:
  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
  // 3. Change the myNewResponse object to fit your needs, but avoid changing
  //    the cookies!
  // 4. Finally:
  //    return myNewResponse
  // If this is not done, you may be causing the browser and server to go out
  // of sync and terminate the user's session prematurely!

  return supabaseResponse
}
```

----------------------------------------

TITLE: Initializing Supabase Client in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize the Supabase client in JavaScript using the provided project URL and anonymous API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const SUPABASE_URL = 'https://<project>.supabase.co'
const SUPABASE_KEY = '<your-anon-key>'

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY)
```

----------------------------------------

TITLE: Filtering for Specific Changes in JavaScript with Supabase Realtime
DESCRIPTION: Creates a channel that listens for INSERT events on the 'todos' table with a specific filter. The filter parameter 'id=eq.1' ensures only changes where id equals 1 are monitored.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_35

LANGUAGE: javascript
CODE:
```
const changes = supabase
  .channel('table-filter-changes')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'todos',
      filter: 'id=eq.1',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Implementing Full Text Search in Postgres
DESCRIPTION: SQL commands to add a generated column for full text search document and create a GIN index for performance optimization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- Add a generated column that contains the search document
alter table movies
	add column fts_doc_en
	generated always as to_tsvector (
		'english', title || ' ' || original_title || ' ' || overview
	)
	stored;

-- Create a GIN index to make our searches faster
create index movies_fts_doc_en_idx
	on movies
	using gin (fts_doc_en);
```

----------------------------------------

TITLE: Querying First Row per Group in PostgreSQL
DESCRIPTION: This SQL query selects the first row for each distinct team from the 'seasons' table, ordered by points in descending order. It uses the DISTINCT ON clause to return a single row per team with the highest points.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/first-row-in-group.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select distinct
  on (team) id,
  team,
  points
from
  seasons
order BY
  id,
  points desc,
  team;
```

----------------------------------------

TITLE: Initializing Supabase Client with Explicit Options in JavaScript
DESCRIPTION: Example of creating a Supabase client with explicit options for database, authentication, realtime, and global settings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
const supabase = createClient(apiURL, apiKey, {
  db: {
    schema: 'public',
  },
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
  },
  realtime: {
    channels,
    endpoint,
  },
  global: {
    fetch: customFetch,
    headers: DEFAULT_HEADERS,
  },
})
```

----------------------------------------

TITLE: Enabling Row Level Security in SQL
DESCRIPTION: This SQL snippet demonstrates how to enable Row Level Security on the 'todos' table and allow anonymous access. This is useful for development purposes but should be properly secured in production environments. You must have access to modify table policies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_1

LANGUAGE: SQL
CODE:
```
-- Turn on security
alter table "todos"
enable row level security;

-- Allow anonymous access
create policy "Allow anonymous access"
on todos
for select
to anon
using (true);
```

----------------------------------------

TITLE: Signing in with OTP using Dart
DESCRIPTION: Shows implementation of signing in using OTP in Dart language through Supabase. Input consists of the user's email address.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_7

LANGUAGE: Dart
CODE:
```
Future<void> signInWithEmailOtp() async {
  final AuthResponse res = await supabase.auth.signInWithOtp(email: 'valid.email@supabase.io');
}
```

----------------------------------------

TITLE: Creating a Server Component with Edge Runtime in Next.js (TypeScript)
DESCRIPTION: TypeScript implementation of a Next.js server component running on the Edge runtime that fetches todos from Supabase. It uses typed createServerComponentClient for type safety, configures the component for edge runtime, and renders the fetched data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_25

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'

import type { Database } from '@/lib/database.types'

export const runtime = 'edge'
export const dynamic = 'force-dynamic'

export default async function Page() {
  const cookieStore = cookies()

  const supabase = createServerComponentClient<Database>({
    cookies: () => cookieStore,
  })

  const { data } = await supabase.from('todos').select()
  return <pre>{JSON.stringify(data, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Implementing Magic Link Authentication
DESCRIPTION: Implementation of magic link authentication using SupaMagicAuth widget.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
SupaMagicAuth(
  redirectUrl: kIsWeb ? null : 'io.mydomain.myapp://callback',
  onSuccess: (Session response) {},
  onError: (error) {},
)
```

----------------------------------------

TITLE: Configuring Supabase Environment Variables
DESCRIPTION: Set up the Supabase URL and anonymous key as environment variables in a .env.local file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
EXPO_PUBLIC_SUPABASE_URL=
EXPO_PUBLIC_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Enabling Row Level Security
DESCRIPTION: Enables row level security on the todos table and creates a policy allowing public read access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/quickstart.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
alter table "todos"
enable row level security;

create policy "Allow public access"
  on todos
  for select
  to anon
  using (true);
```

----------------------------------------

TITLE: Initializing Supabase Client and Setting Custom JWT in JavaScript
DESCRIPTION: This JavaScript snippet initializes a Supabase client and then sets a custom JWT for Realtime authentication. The `setAuth` method is used to provide the custom token. A Realtime channel is then set up to listen for Postgres changes on a specific table with a filter applied, and then subscribed to.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_49

LANGUAGE: js
CODE:
```
const { createClient } = require('@supabase/supabase-js')

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY, {})

// Set your custom JWT here
supabase.realtime.setAuth('your-custom-jwt')

const channel = supabase
  .channel('db-changes')
  .on(
    'postgres_changes',
    {
      event: '*',
      schema: 'public',
      table: 'messages',
      filter: 'body=eq.bye',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Creating SQL Function to Test Authorization Header in Supabase
DESCRIPTION: This SQL function creates a database function that returns the JWT payload, which can be used to verify the user's authentication status and role during database calls.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/why-is-my-select-returning-an-empty-data-array-and-i-have-data-in-the-table-xvOPgx.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create function test_authorization_header() returns json
    language SQL
    as
$$
    select auth.jwt();
$$;
```

----------------------------------------

TITLE: Setting Environment Variables
DESCRIPTION: Environment configuration file for storing Supabase API credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Implementing Account Page with Avatar Upload in Vue.js for Supabase
DESCRIPTION: This Vue.js component creates an Account page with profile management features. It includes functionality for loading user data, updating profiles, uploading avatars, and signing out. The component interacts with Supabase for data storage and authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_7

LANGUAGE: vue
CODE:
```
<script setup>
const supabase = useSupabaseClient()

const loading = ref(true)
const username = ref('')
const website = ref('')
const avatar_path = ref('')

loading.value = true
const user = useSupabaseUser()

const { data } = await supabase
  .from('profiles')
  .select(`username, website, avatar_url`)
  .eq('id', user.value.id)
  .single()

if (data) {
  username.value = data.username
  website.value = data.website
  avatar_path.value = data.avatar_url
}

loading.value = false

async function updateProfile() {
  try {
    loading.value = true
    const user = useSupabaseUser()

    const updates = {
      id: user.value.id,
      username: username.value,
      website: website.value,
      avatar_url: avatar_path.value,
      updated_at: new Date(),
    }

    const { error } = await supabase.from('profiles').upsert(updates, {
      returning: 'minimal', // Don't return the value after inserting
    })

    if (error) throw error
  } catch (error) {
    alert(error.message)
  } finally {
    loading.value = false
  }
}

async function signOut() {
  try {
    loading.value = true
    const { error } = await supabase.auth.signOut()
    if (error) throw error
  } catch (error) {
    alert(error.message)
  } finally {
    loading.value = false
  }
}
</script>

<template>
  <form class="form-widget" @submit.prevent="updateProfile">
    <Avatar v-model:path="avatar_path" @upload="updateProfile" />
    <div>
      <label for="email">Email</label>
      <input id="email" type="text" :value="user.email" disabled />
    </div>
    <div>
      <label for="username">Name</label>
      <input id="username" type="text" v-model="username" />
    </div>
    <div>
      <label for="website">Website</label>
      <input id="website" type="url" v-model="website" />
    </div>

    <div>
      <input
        type="submit"
        class="button primary block"
        :value="loading ? 'Loading ...' : 'Update'"
        :disabled="loading"
      />
    </div>

    <div>
      <button class="button block" @click="signOut" :disabled="loading">Sign Out</button>
    </div>
  </form>
</template>
```

----------------------------------------

TITLE: Integrating OpenAI API in Edge Function
DESCRIPTION: This code snippet shows how to use the OpenAI API within an Edge Function. It sets up a Deno server, initializes an OpenAI client with an API key, and creates a chat completion using the GPT-3.5-turbo model.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-12-edge-functions-faster-smaller.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import OpenAI from 'npm:openai@4.57.3'

const client = new OpenAI({
  apiKey: Deno.env.get('OPEN_AI_KEY'),
})

Deno.serve(async (req) => {
  const { query } = await req.json()

  const chatCompletion = await client.chat.completions.create({
    messages: [{ role: 'user', content: 'Say this is a test' }],
    model: 'gpt-3.5-turbo',
  })

  return new Response(chatCompletion)
})
```

----------------------------------------

TITLE: Calculating Cache Hit Ratio Over Time in Supabase Storage Logs (SQL)
DESCRIPTION: This SQL query calculates the cache hit ratio over time for objects in Supabase Storage. It aggregates the count of cache hits and divides it by the total number of requests for each hour.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/cdn/metrics.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
  timestamp_trunc(timestamp, hour) as timestamp,
  countif(h.cf_cache_status in ('HIT', 'STALE', 'REVALIDATED', 'UPDATING')) / count(f.id) as ratio
from
  edge_logs as f
  cross join unnest(f.metadata) as m
  cross join unnest(m.request) as r
  cross join unnest(m.response) as res
  cross join unnest(res.headers) as h
where starts_with(r.path, '/storage/v1/object') and r.method = 'GET'
group by timestamp
order by timestamp desc;
```

----------------------------------------

TITLE: Creating Database Schema for User Profiles in Supabase
DESCRIPTION: SQL script to set up the complete backend structure for user profiles in Supabase, including table creation, row-level security policies, realtime publication setup, and storage bucket configuration for avatar images.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/vue3-user-management/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Installing supabase-js v2 via npm
DESCRIPTION: Command to install the latest version of supabase-js v2 using npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
npm install @supabase/supabase-js@2
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library, which provides methods for interacting with Supabase services from the SvelteKit application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: Creating a helper file that initializes the Supabase client using environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

----------------------------------------

TITLE: Implementing Row Level Security in SQL for Supabase Chat App
DESCRIPTION: This SQL code defines Row Level Security policies for the chat application's database tables. It includes a function to check if a user is a room participant and policies for profiles, rooms, room participants, and messages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_18

LANGUAGE: sql
CODE:
```
-- Returns true if the signed in user is a participant of the room
create or replace function is_room_participant(room_id uuid)
returns boolean as $$
  select exists(
    select 1
    from room_participants
    where room_id = is_room_participant.room_id and profile_id = auth.uid()
  );
$$ language sql security definer;


-- *** Row level security polities ***


alter table public.profiles enable row level security;
create policy "Public profiles are viewable by everyone."
  on public.profiles for select using (true);


alter table public.rooms enable row level security;
create policy "Users can view rooms that they have joined"
  on public.rooms for select using (is_room_participant(id));


alter table public.room_participants enable row level security;
create policy "Participants of the room can view other participants."
  on public.room_participants for select using (is_room_participant(room_id));


alter table public.messages enable row level security;
create policy "Users can view messages on rooms they are in."
  on public.messages for select using (is_room_participant(room_id));
create policy "Users can insert messages on rooms they are in."
  on public.messages for insert with check (is_room_participant(room_id) and profile_id = auth.uid());
```

----------------------------------------

TITLE: Selecting a UUID Using uuid_generate_v4() in PostgreSQL
DESCRIPTION: SQL query to generate a UUID using the uuid_generate_v4() function provided by the uuid-ossp extension.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/uuid-ossp.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select uuid_generate_v4();
```

----------------------------------------

TITLE: Using Supabase in Next.js TypeScript Server Components
DESCRIPTION: TypeScript implementation for using Supabase in a Next.js Server Component. This approach provides type safety when fetching data server-side using the createServerComponentClient function with database type definitions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_19

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'

import type { Database } from '@/lib/database.types'

export default async function ServerComponent() {
  const cookieStore = cookies()
  const supabase = createServerComponentClient<Database>({ cookies: () => cookieStore })
  const { data } = await supabase.from('todos').select()
  return <pre>{JSON.stringify(data, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Creating Basic SELECT Policy
DESCRIPTION: Example of creating a simple RLS policy for allowing users to view their own todos.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "Individuals can view their own todos."
on todos for select
using ( (select auth.uid()) = user_id );
```

----------------------------------------

TITLE: Creating Profiles Table - SQL
DESCRIPTION: Defines a new table in the public schema to store user profiles, referencing the auth.users table with cascading deletions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  first_name text,
  last_name text,

  primary key (id)
);

alter table public.profiles enable row level security;
```

----------------------------------------

TITLE: Enabling RLS with JWT Authentication for REST API
DESCRIPTION: Sets up Row Level Security on a document_sections table with a policy that uses Supabase's auth.uid() function to get the user ID from a JWT token. This approach works with the auto-generated REST API and external auth providers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
-- enable row level security
alter table document_sections enable row level security;

-- setup RLS for select operations
create policy "Users can query their own document sections"
on document_sections for select to authenticated using (
  document_id in (
    select id
    from documents
    where (owner_id = (select auth.uid()))
  )
);
```

----------------------------------------

TITLE: Implementing Auth Callback Route Handler in JavaScript
DESCRIPTION: Route handler for processing authentication code exchange in JavaScript.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

export async function GET(request) {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')

  if (code) {
    const cookieStore = cookies()
    const supabase = createRouteHandlerClient({ cookies: () => cookieStore })
    await supabase.auth.exchangeCodeForSession(code)
  }

  return NextResponse.redirect(requestUrl.origin)
}
```

----------------------------------------

TITLE: Configuring Row Level Security Policy
DESCRIPTION: SQL command to create a row level security policy that allows authenticated users to read from the countries table.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/hono/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "authenticated users can read countries"
on public.countries
for select to authenticated
using (true);
```

----------------------------------------

TITLE: Allowing User Access to Own Uploaded Files in SQL
DESCRIPTION: This policy allows a user to access files that were previously uploaded by the same user, based on the owner_id.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/access-control.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create policy "Individual user Access"
on storage.objects for select
to authenticated
using ( (select auth.uid()) = owner_id::uuid );
```

----------------------------------------

TITLE: Signing in with OTP using Python
DESCRIPTION: Implements signing in via email OTP using Python in Supabase environment. Requires user's email and options to configure automatic user creation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
response = supabase.auth.sign_in_with_otp({
  'email': 'valid.email@supabase.io',
  'options': {
    # set this to false if you do not want the user to be automatically signed up
    'should_create_user': False,
  },
})
```

----------------------------------------

TITLE: Creating a 'todos' table in SQL
DESCRIPTION: This SQL snippet is used to create a basic 'todos' table in the Supabase database. The table includes an 'id' as the primary key and a 'task' column for storing task descriptions. Run this SQL command within the Supabase SQL Editor or similar tool.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_0

LANGUAGE: SQL
CODE:
```
-- Create a table called "todos"
-- with a column to store tasks.
create table todos (
  id serial primary key,
  task text
);
```

----------------------------------------

TITLE: Including Supabase JS via CDN
DESCRIPTION: HTML script tags to include the Supabase JavaScript library via CDN links. Two options are provided: jsDelivr and unpkg.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/installing.mdx#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
//or
<script src="https://unpkg.com/@supabase/supabase-js@2"></script>
```

----------------------------------------

TITLE: Configuring Supabase client with environment variables
DESCRIPTION: TypeScript code that creates and configures the Supabase client using environment variables for the URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createClient } from '@refinedev/supabase'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {
  db: {
    schema: 'public',
  },
  auth: {
    persistSession: true,
  },
})
```

----------------------------------------

TITLE: Enabling Row Level Security Using SQL
DESCRIPTION: SQL command to enable Row Level Security (RLS) on a database table named 'todos'. This prevents unauthorized access to the table data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
alter table
  todos enable row level security;
```

----------------------------------------

TITLE: Installing Supabase JS via npm
DESCRIPTION: Command to install the Supabase JavaScript library using npm package manager.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/installing.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Signing Out a User JavaScript
DESCRIPTION: The JavaScript snippet demonstrates how to sign out a user using the Supabase client library. It shows the basic sign-out method and how to invoke it from the client-side, effectively ending the active session. Requires '@supabase/supabase-js' package.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}
```

----------------------------------------

TITLE: Sign Out - JavaScript
DESCRIPTION: This JavaScript snippet shows how to sign out a user using the Supabase client library. It initializes the Supabase client and calls the signOut method to remove the user's session and clear local storage. The function returns a promise that resolves when the sign-out is complete or rejects with an error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-figma.mdx#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Fetching Data with Next.js Server Components and Supabase
DESCRIPTION: Example of querying data from Supabase in a Next.js Server Component. This demonstrates the simplicity of server-side data fetching without needing to use client-side state management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const { data } = await supabase.from('...').select()
  return ...
}
```

----------------------------------------

TITLE: Creating and Securing User Profiles with PostgreSQL Row Level Security in Supabase
DESCRIPTION: SQL script for setting up a profiles table with proper row-level security policies. It creates a table linked to auth.users, adds security policies for viewing, inserting, and updating profiles, configures Supabase Realtime, and sets up Storage for avatar images.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/sveltekit-user-management/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create a table for Public Profiles
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,
  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);
alter table profiles enable row level security;
create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );
create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );
create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );
-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;
-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');
create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );
create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Implementing Hugging Face Embeddings in Supabase Edge Function
DESCRIPTION: This Deno/TypeScript Edge Function creates an API endpoint that accepts text input, generates embeddings using the Hugging Face 'Supabase/gte-small' model via the transformers.js library, and stores the resulting embedding in a Supabase table. It demonstrates full integration between Supabase and Hugging Face in a serverless environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { env, pipeline } from 'https://cdn.jsdelivr.net/npm/@xenova/transformers@2.5.0'
import { createClient } from 'jsr:@supabase/supabase-js@2'

// Preparation for Deno runtime
env.useBrowserCache = false
env.allowLocalModels = false

const supabase = createClient(
  'https://xyzcompany.supabase.co',
  'public-anon-key',
)

// Construct pipeline outside of serve for faster warm starts
const pipe = await pipeline(
  'feature-extraction',
  'Supabase/gte-small',
)

// Deno Handler
serve(async (req) => {
  const { input } = await req.json()

  // Generate the embedding from the user input
  const output = await pipe(input, {
    pooling: 'mean',
    normalize: true,
  })

  // Get the embedding output
  const embedding = Array.from(output.data)

  // Store the embedding
  const { data, error } = await supabase
    .from('collections')
    .insert({ embedding })

  // Return the embedding
  return new Response(
    { new_row: data },
    { headers: { 'Content-Type': 'application/json' } },
  )
})
```

----------------------------------------

TITLE: Multiple Operation RLS Policy Example
DESCRIPTION: Demonstration of correct way to create separate policies for different operations
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create policy "Profiles can be created by any user"
on profiles
for insert
to authenticated
with check ( true );

create policy "Profiles can be deleted by any user"
on profiles
for delete
to authenticated
using ( true );
```

----------------------------------------

TITLE: Including Session Cookie in Fetch Request to API Endpoint (TypeScript)
DESCRIPTION: This code snippet shows how to include the session cookie in a fetch request to an API endpoint. It demonstrates passing the cookie header from the current request to the new fetch request, ensuring the API endpoint has access to the session information.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fetch-requests-to-api-endpoints-arent-showing-the-session-UbUwRs.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const res = await fetch('http://localhost:3000/contact', {
  headers: {
    cookie: headers().get('cookie') as string,
  },
})
```

----------------------------------------

TITLE: Creating Basic Hello World Function in PostgreSQL
DESCRIPTION: Creates a simple PostgreSQL function that returns 'hello world'. Demonstrates basic function structure including declaration, return type, language specification, and function body.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create or replace function hello_world()
returns text
language sql
as $$
  select 'hello world';
$$;
```

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: Setup and initialize the Supabase client with project URL and API key across different programming languages
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const SUPABASE_URL = 'https://<project>.supabase.co'
const SUPABASE_KEY = '<your-anon-key>'

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY)
```

LANGUAGE: dart
CODE:
```
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  Supabase.initialize(
    url: 'https://<project>.supabase.co',
    anonKey: '<your-anon-key>',
  );
  runApp(MyApp());
}

final supabase = Supabase.instance.client;
```

LANGUAGE: swift
CODE:
```
import Supabase

let SUPABASE_URL = "https://<project>.supabase.co"
let SUPABASE_KEY = "<your-anon-key>"

let supabase = SupabaseClient(supabaseURL: URL(string: SUPABASE_URL)!, supabaseKey: SUPABASE_KEY)
```

LANGUAGE: kotlin
CODE:
```
val supabaseUrl = "https://<project>.supabase.co"
val supabaseKey = "<your-anon-key>"
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    install(Realtime)
}
```

LANGUAGE: python
CODE:
```
from supabase import create_client

URL = "https://<project>.supabase.co"
KEY = "<your-anon-key>"
supabase = create_client(URL, KEY)
```

----------------------------------------

TITLE: Creating Login Route Handler in TypeScript
DESCRIPTION: This TypeScript code sample demonstrates creating a server-side route handler for user login in a Next.js application utilizing Supabase. It handles a POST request by reading form data, authenticating via a type-safe Supabase client, and redirecting the user afterward. The snippet relies on @supabase/auth-helpers-nextjs and next/headers, with type definitions enhancing the development process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_11

LANGUAGE: TypeScript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

import type { Database } from '@/lib/database.types'

export async function POST(request: Request) {
  const requestUrl = new URL(request.url)
  const formData = await request.formData()
  const email = String(formData.get('email'))
  const password = String(formData.get('password'))
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })

  await supabase.auth.signInWithPassword({
    email,
    password,
  })

  return NextResponse.redirect(requestUrl.origin, {
    status: 301,
  })
}

```

----------------------------------------

TITLE: Initializing Supabase Client in React
DESCRIPTION: Creating a helper file to initialize the Supabase client with environment variables for use throughout the app.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

----------------------------------------

TITLE: Creating a Supabase client in JavaScript
DESCRIPTION: This JavaScript snippet shows how to create a Supabase client that can be used to interact with the Supabase service and listen to Postgres changes. The function requires the project URL and an anonymous API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  'https://<project>.supabase.co',
  '<your-anon-key>'
)
```

----------------------------------------

TITLE: Creating User Profiles Table with Row Level Security in SQL
DESCRIPTION: Creates a 'profiles' table with user details and implements Row Level Security policies for viewing, inserting, and updating profiles. Includes constraints and references to auth.users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/user_management_quickstart_sql_template.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create a table for public profiles
create table profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/database/postgres/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles
  for update using ((select auth.uid()) = id);
```

----------------------------------------

TITLE: Creating a Next.js Project with Supabase Template
DESCRIPTION: Command to set up a new Next.js project with the official Supabase template. This provides the fastest way to start building an application with Next.js 14 and Supabase integration already configured.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
npx create-next-app@latest -e with-supabase
```

----------------------------------------

TITLE: Implementing Protected Routes with Expo Router and Supabase Auth
DESCRIPTION: This layout component manages authentication-based navigation in a React Native app using Expo Router. It automatically redirects users based on their authentication status - authenticated users to the list page and unauthenticated users to the login page.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
import { Slot, useRouter, useSegments } from 'expo-router'
import { useEffect } from 'react'
import { AuthProvider, useAuth } from '../provider/AuthProvider'

// Makes sure the user is authenticated before accessing protected pages
const InitialLayout = () => {
  const { session, initialized } = useAuth()
  const segments = useSegments()
  const router = useRouter()

  useEffect(() => {
    if (!initialized) return

    // Check if the path/url is in the (auth) group
    const inAuthGroup = segments[0] === '(auth)'

    if (session && !inAuthGroup) {
      // Redirect authenticated users to the list page
      router.replace('/list')
    } else if (!session) {
      // Redirect unauthenticated users to the login page
      router.replace('/')
    }
  }, [session, initialized])

  return <Slot />
}

// Wrap the app with the AuthProvider
const RootLayout = () => {
  return (
    <AuthProvider>
      <InitialLayout />
    </AuthProvider>
  )
}

export default RootLayout
```

----------------------------------------

TITLE: Signing Out with Supabase JavaScript
DESCRIPTION: This JavaScript code provides a method for signing out users from a Supabase project using the `signOut` function. It clears the user session from the browser and localStorage. Ensure the `@supabase/supabase-js` library is installed and configured.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Starting Local Supabase Stack
DESCRIPTION: Start the local Supabase services, including the database, authentication, and storage. This command spins up the necessary Docker containers to run the Supabase stack locally on your machine, allowing you to develop without a network connection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#_snippet_2

LANGUAGE: sh
CODE:
```
npx supabase start
```

LANGUAGE: sh
CODE:
```
yarn supabase start
```

LANGUAGE: sh
CODE:
```
pnpx supabase start
```

LANGUAGE: sh
CODE:
```
supabase start
```

----------------------------------------

TITLE: Quote Identifier Function for SQL Injection Prevention
DESCRIPTION: Rust function that safely quotes identifiers to prevent SQL injection attacks
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-24-how-pg-graphql-works.mdx#2025-04-21_snippet_7

LANGUAGE: rust
CODE:
```
fn quote_ident(ident: &str) -> String {
    format!("\"{}\"", ident.replace("\"", "\"\""))
}
```

----------------------------------------

TITLE: Move object in the same bucket using Supabase
DESCRIPTION: Moves an object within the same bucket using the Supabase storage API. This snippet shows how to use the `move` method to relocate an object from one path to another within the same bucket.  The original object is deleted after the move. Requires `@supabase/supabase-js` and a valid Supabase client instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const { data, error } = await supabase.storage
  .from('avatars')
  .move('public/avatar1.png', 'private/avatar2.png')
```

----------------------------------------

TITLE: Listening to Multiple Changes in Kotlin with Supabase Realtime
DESCRIPTION: Sets up a Kotlin channel to listen to different events on different tables simultaneously. The example shows monitoring all events on the 'messages' table and only INSERT events on the 'users' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_33

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")
val messageChanges = myChannel.postgresChangeFlow<PostgresAction>(schema = "public") {
    table = "messages"
}
val userChanges = myChannel.postgresChangeFlow<PostgresAction.Insert>(schema = "public") {
    table = "users"
}
myChannel.subscribe()
```

----------------------------------------

TITLE: Adding Public Read Access Policy for Instruments Table in SQL
DESCRIPTION: This SQL snippet creates a row-level security policy that allows public read access to the 'instruments' table. It grants select permissions to the 'anon' role, effectively making the data publicly readable.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/quickstart_db_setup.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "public can read instruments"
on public.instruments
for select to anon
using (true);
```

----------------------------------------

TITLE: Initializing Supabase Client in Flutter Main Function
DESCRIPTION: Dart code to initialize the Supabase client in the main function of a Flutter app, setting up the connection with the Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> main() async {
  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SUPABASE_ANON_KEY',
  );
  runApp(const MyApp());
}

final supabase = Supabase.instance.client;

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(title: 'Supabase Flutter');
  }
}

extension ContextExtension on BuildContext {
  void showSnackBar(String message, {bool isError = false}) {
    ScaffoldMessenger.of(this).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: isError
            ? Theme.of(this).colorScheme.error
            : Theme.of(this).snackBarTheme.backgroundColor,
      ),
    );
  }
}
```

----------------------------------------

TITLE: Creating Embedding Processing Function with Batch Support
DESCRIPTION: Implements a function to process queued embedding jobs in batches, with configurable batch size, request limits, and timeout settings. Includes pg_cron scheduling for automatic processing every 10 seconds.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_6

LANGUAGE: plpgsql
CODE:
```
create or replace function util.process_embeddings(
  batch_size int = 10,
  max_requests int = 10,
  timeout_milliseconds int = 5 * 60 * 1000 -- default 5 minute timeout
)
returns void
language plpgsql
as $$
declare
  job_batches jsonb[];
  batch jsonb;
begin
  with
    -- First get jobs and assign batch numbers
    numbered_jobs as (
      select
        message || jsonb_build_object('jobId', msg_id) as job_info,
        (row_number() over (order by 1) - 1) / batch_size as batch_num
      from pgmq.read(
        queue_name => 'embedding_jobs',
        vt => timeout_milliseconds / 1000,
        qty => max_requests * batch_size
      )
    ),
    -- Then group jobs into batches
    batched_jobs as (
      select
        jsonb_agg(job_info) as batch_array,
        batch_num
      from numbered_jobs
      group by batch_num
    )
  -- Finally aggregate all batches into array
  select array_agg(batch_array)
  from batched_jobs
  into job_batches;

  -- Invoke the embed edge function for each batch
  foreach batch in array job_batches loop
    perform util.invoke_edge_function(
      name => 'embed',
      body => batch,
      timeout_milliseconds => timeout_milliseconds
    );
  end loop;
end;
$$;

-- Schedule the embedding processing
select
  cron.schedule(
    'process-embeddings',
    '10 seconds',
    $$
    select util.process_embeddings();
    $$
  );
```

----------------------------------------

TITLE: Creating Singleton Supabase Client in Next.js Client Component
DESCRIPTION: Demonstrates how to create a Supabase client instance in a Next.js client component using createClientComponentClient. The function automatically handles singleton instance management across components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_33

LANGUAGE: jsx
CODE:
```
"use client";

import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

export default function() {
  const supabase = createClientComponentClient();
  return ...
}
```

----------------------------------------

TITLE: Creating a Profile Avatar Component with Supabase Storage
DESCRIPTION: Implements an avatar component that allows users to upload and display profile photos using the device camera and Supabase Storage. Handles image upload, download, and display with proper UI feedback.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_11

LANGUAGE: html
CODE:
```
<template>
  <div class="avatar">
    <div class="avatar_wrapper" @click="uploadAvatar">
      <img v-if="avatarUrl" :src="avatarUrl" />
      <ion-icon v-else name="person" class="no-avatar"></ion-icon>
    </div>
  </div>
</template>

<script lang="ts">
  import { ref, toRefs, watch, defineComponent } from 'vue'
  import { supabase } from '../supabase'
  import { Camera, CameraResultType } from '@capacitor/camera'
  import { IonIcon } from '@ionic/vue'
  import { person } from 'ionicons/icons'
  export default defineComponent({
    name: 'AppAvatar',
    props: { path: String },
    emits: ['upload', 'update:path'],
    components: { IonIcon },
    setup(prop, { emit }) {
      const { path } = toRefs(prop)
      const avatarUrl = ref('')

      const downloadImage = async () => {
        try {
          const { data, error } = await supabase.storage.from('avatars').download(path.value)
          if (error) throw error
          avatarUrl.value = URL.createObjectURL(data!)
        } catch (error: any) {
          console.error('Error downloading image: ', error.message)
        }
      }

      const uploadAvatar = async () => {
        try {
          const photo = await Camera.getPhoto({
            resultType: CameraResultType.DataUrl,
          })
          if (photo.dataUrl) {
            const file = await fetch(photo.dataUrl)
              .then((res) => res.blob())
              .then((blob) => new File([blob], 'my-file', { type: `image/${photo.format}` }))

            const fileName = `${Math.random()}-${new Date().getTime()}.${photo.format}`
            const { error: uploadError } = await supabase.storage
              .from('avatars')
              .upload(fileName, file)
            if (uploadError) {
              throw uploadError
            }
            emit('update:path', fileName)
            emit('upload')
          }
        } catch (error) {
          console.log(error)
        }
      }

      watch(path, () => {
        if (path.value) downloadImage()
      })

      return { avatarUrl, uploadAvatar, person }
    },
  })
</script>
<style>
  .avatar {
    display: block;
    margin: auto;
    min-height: 150px;
  }
  .avatar .avatar_wrapper {
    margin: 16px auto 16px;
    border-radius: 50%;
    overflow: hidden;
    height: 150px;
    aspect-ratio: 1;
    background: var(--ion-color-step-50);
    border: thick solid var(--ion-color-step-200);
  }
  .avatar .avatar_wrapper:hover {
    cursor: pointer;
  }
  .avatar .avatar_wrapper ion-icon.no-avatar {
    width: 100%;
    height: 115%;
  }
  .avatar img {
    display: block;
    object-fit: cover;
    width: 100%;
    height: 100%;
  }
</style>
```

----------------------------------------

TITLE: Creating a Function with Parameters and Fully Qualified Object Names
DESCRIPTION: A PostgreSQL function that calculates the total price for an order using fully qualified object names and parameter handling.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-functions.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create or replace function public.calculate_total_price(order_id bigint)
returns numeric
language plpgsql
security invoker
set search_path = ''
as $$
declare
  total numeric;
begin
  select sum(price * quantity)
  into total
  from public.order_items
  where order_id = calculate_total_price.order_id;

  return total;
end;
$$;
```

----------------------------------------

TITLE: Realtime Subscriptions with Supabase in TypeScript
DESCRIPTION: This code snippet shows how to set up realtime subscriptions using Supabase. It listens for changes in the 'participants' and 'games' tables, updating the UI accordingly.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-09-meetup-kahoot-alternative.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
supabase
  .channel('game')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'participants',
      filter: `game_id=eq.${gameId}`,
    },
    (payload) => {
      setParticipants((currentParticipants) => {
        return [...currentParticipants, payload.new as Participant]
      })
    }
  )
  .on(
    'postgres_changes',
    {
      event: 'UPDATE',
      schema: 'public',
      table: 'games',
      filter: `id=eq.${gameId}`,
    },
    (payload) => {
      const game = payload.new as Game
      setCurrentQuestionSequence(game.current_question_sequence)
      setCurrentScreen(game.phase as AdminScreens)
    }
  )
  .subscribe()
```

----------------------------------------

TITLE: Sign Out - Flutter
DESCRIPTION: This Flutter snippet demonstrates how to sign out a user using the Supabase client library. It calls the signOut method to remove the user's session and clear local storage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-figma.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
Future<void> signOut() async {
  await supabase.auth.signOut();
}
```

----------------------------------------

TITLE: Implementing Reusable Query Function with Supabase
DESCRIPTION: TypeScript function that defines a reusable query to fetch a country by ID using the Supabase client, which can be used in both server and client components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { TypedSupabaseClient } from '@/utils/types'

export function getCountryById(client: TypedSupabaseClient, countryId: number) {
  return client
    .from('countries')
    .select(
      `
      id,
      name
    `
    )
    .eq('id', countryId)
    .throwOnError()
    .single()
}
```

----------------------------------------

TITLE: Implementing Email Signup with Swift
DESCRIPTION: Swift code snippet for signing up a new user with email and password authentication in Supabase. This example includes an optional redirect URL parameter for after email confirmation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_2

LANGUAGE: swift
CODE:
```
let response = try await supabase.auth.signUp(
  email: "valid.email@supabase.io",
  password: "example-password",
  redirectTo: URL(string: "https://example.com/welcome")
)
```

----------------------------------------

TITLE: Getting User Metadata - JavaScript
DESCRIPTION: Fetches the current user's metadata from Supabase using JavaScript.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!)

// ---cut---
const {
  data: { user },
} = await supabase.auth.getUser()
let metadata = user?.user_metadata
```

----------------------------------------

TITLE: Implementing Text-to-Speech Edge Function
DESCRIPTION: Main implementation of the Edge Function that handles text-to-speech conversion, streaming, and storage using Supabase and ElevenLabs API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'
import { createClient } from 'jsr:@supabase/supabase-js@2'
import { ElevenLabsClient } from 'npm:elevenlabs@1.52.0'
import * as hash from 'npm:object-hash'

const supabase = createClient(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
)

const client = new ElevenLabsClient({
  apiKey: Deno.env.get('ELEVENLABS_API_KEY'),
})

async function uploadAudioToStorage(stream: ReadableStream, requestHash: string) {
  const { data, error } = await supabase.storage
    .from('audio')
    .upload(`${requestHash}.mp3`, stream, {
      contentType: 'audio/mp3',
    })

  console.log('Storage upload result', { data, error })
}

Deno.serve(async (req) => {
  console.log('Request origin', req.headers.get('host'))
  const url = new URL(req.url)
  const params = new URLSearchParams(url.search)
  const text = params.get('text')
  const voiceId = params.get('voiceId') ?? 'JBFqnCBsd6RMkjVDRZzb'

  const requestHash = hash.MD5({ text, voiceId })
  console.log('Request hash', requestHash)

  const { data } = await supabase.storage.from('audio').createSignedUrl(`${requestHash}.mp3`, 60)

  if (data) {
    console.log('Audio file found in storage', data)
    const storageRes = await fetch(data.signedUrl)
    if (storageRes.ok) return storageRes
  }

  if (!text) {
    return new Response(JSON.stringify({ error: 'Text parameter is required' }), {
      status: 400,
      headers: { 'Content-Type': 'application/json' },
    })
  }

  try {
    console.log('ElevenLabs API call')
    const response = await client.textToSpeech.convertAsStream(voiceId, {
      output_format: 'mp3_44100_128',
      model_id: 'eleven_multilingual_v2',
      text,
    })

    const stream = new ReadableStream({
      async start(controller) {
        for await (const chunk of response) {
          controller.enqueue(chunk)
        }
        controller.close()
      },
    })

    const [browserStream, storageStream] = stream.tee()

    EdgeRuntime.waitUntil(uploadAudioToStorage(storageStream, requestHash))

    return new Response(browserStream, {
      headers: {
        'Content-Type': 'audio/mpeg',
      },
    })
  } catch (error) {
    console.log('error', { error })
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})
```

----------------------------------------

TITLE: Linking Local Environment to Supabase Project
DESCRIPTION: Shows how to link a local development environment to a Supabase project using the CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase link --project-ref <project-id>
```

----------------------------------------

TITLE: Implementing Database Webhook for Embedding Generation in TypeScript
DESCRIPTION: TypeScript edge function that serves as a database webhook to automatically generate embeddings for text content added to the database. It uses the gte-small model to generate embeddings and updates the corresponding record in the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/semantic-search.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
const model = new Supabase.ai.Session('gte-small')

Deno.serve(async (req) => {
  const payload: WebhookPayload = await req.json()
  const { content, id } = payload.record

  // Generate embedding.
  const embedding = await model.run(content, {
    mean_pool: true,
    normalize: true,
  })

  // Store in database.
  const { error } = await supabase
    .from('embeddings')
    .update({ embedding: JSON.stringify(embedding) })
    .eq('id', id)
  if (error) console.warn(error.message)

  return new Response('ok')
})
```

----------------------------------------

TITLE: Setting Up Supabase Database for Figma Clone
DESCRIPTION: SQL commands to create the necessary table and set up Row Level Security policies for the Figma clone app in Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table canvas_objects (
    id uuid primary key default gen_random_uuid() not null,
    "object" jsonb not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table canvas_objects enable row level security;
create policy select_canvas_objects on canvas_objects as permissive for select to anon using (true);
create policy insert_canvas_objects on canvas_objects as permissive for insert to anon with check (true);
create policy update_canvas_objects on canvas_objects as permissive for update to anon using (true);
```

----------------------------------------

TITLE: Initializing Vector Database Schema in PostgreSQL
DESCRIPTION: SQL setup for enabling pgvector extension, creating documents table with vector support, and defining a similarity search function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/langchain.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the pgvector extension to work with embedding vectors
create extension vector;

-- Create a table to store your documents
create table documents (
  id bigserial primary key,
  content text, -- corresponds to Document.pageContent
  metadata jsonb, -- corresponds to Document.metadata
  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed
);

-- Create a function to search for documents
create function match_documents (
  query_embedding vector(1536),
  match_count int default null,
  filter jsonb DEFAULT '{}'
) returns table (
  id bigint,
  content text,
  metadata jsonb,
  similarity float
)
language plpgsql
as $$
#variable_conflict use_column
begin
  return query
  select
    id,
    content,
    metadata,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where metadata @> filter
  order by documents.embedding <=> query_embedding
  limit match_count;
end;
$$;
```

----------------------------------------

TITLE: Analyzing Query Performance with EXPLAIN ANALYZE in PostgreSQL
DESCRIPTION: This SQL command demonstrates how to use EXPLAIN ANALYZE to get detailed execution information about a query, including actual runtime statistics and execution plan details.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/canceling-statement-due-to-statement-timeout-581wFv.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
explain analyze <query-statement-here>;
```

----------------------------------------

TITLE: Installing Supabase JS via Yarn
DESCRIPTION: Command to install the Supabase JavaScript library using Yarn package manager.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/installing.mdx#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
yarn add @supabase/supabase-js
```

----------------------------------------

TITLE: Creating Account Page with Server-Side Authentication in Next.js
DESCRIPTION: A Next.js page component that uses server-side Supabase client to fetch the authenticated user and renders the AccountForm component. This demonstrates fetching user data on the server before passing it to client components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_14

LANGUAGE: jsx
CODE:
```
import AccountForm from './account-form'
import { createClient } from '@/utils/supabase/server'

export default async function Account() {
  const supabase = await createClient()

  const {
    data: { user },
  } = await supabase.auth.getUser()

  return <AccountForm user={user} />
}
```

----------------------------------------

TITLE: WebSocket Relay to OpenAI Realtime API with Authentication in JSX
DESCRIPTION: This code creates an authenticated WebSocket relay to OpenAI's Realtime API. It uses Supabase Auth to authenticate users via JWT, establishes a WebSocket connection with the client, and forwards messages to and from OpenAI's API while protecting the API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-03-edge-functions-background-tasks-websockets.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
import { createClient } from 'jsr:@supabase/supabase-js@2'

const supabase = createClient(
  Deno.env.get('SUPABASE_URL'),
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')
)
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')

Deno.serve(async (req) => {
  const upgrade = req.headers.get('upgrade') || ''

  if (upgrade.toLowerCase() != 'websocket') {
    return new Response("request isn't trying to upgrade to websocket.")
  }

  // WebSocket browser clients does not support sending custom headers.
  // We have to use the URL query params to provide user's JWT.
  // Please be aware query params may be logged in some logging systems.
  const url = new URL(req.url)
  const jwt = url.searchParams.get('jwt')
  if (!jwt) {
    console.error('Auth token not provided')
    return new Response('Auth token not provided', { status: 403 })
  }
  const { error, data } = await supabase.auth.getUser(jwt)
  if (error) {
    console.error(error)
    return new Response('Invalid token provided', { status: 403 })
  }
  if (!data.user) {
    console.error('user is not authenticated')
    return new Response('User is not authenticated', { status: 403 })
  }

  const { socket, response } = Deno.upgradeWebSocket(req)

  socket.onopen = () => {
    // initiate an outbound WebSocket connection to OpenAI
    const url = 'wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01'

    // openai-insecure-api-key isn't a problem since this code runs in an Edge Function
    const openaiWS = new WebSocket(url, [
      'realtime',
      `openai-insecure-api-key.${OPENAI_API_KEY}`,
      'openai-beta.realtime-v1',
    ])

    openaiWS.onopen = () => {
      console.log('Connected to OpenAI server.')

      socket.onmessage = (e) => {
        console.log('socket message:', e.data)
        // only send the message if openAI ws is open
        if (openaiWS.readyState === 1) {
          openaiWS.send(e.data)
        } else {
          socket.send(
            JSON.stringify({
              type: 'error',
              msg: 'openAI connection not ready',
            })
          )
        }
      }
    }

    openaiWS.onmessage = (e) => {
      console.log(e.data)
      socket.send(e.data)
    }

    openaiWS.onerror = (e) => console.log('OpenAI error: ', e.message)
    openaiWS.onclose = (e) => console.log('OpenAI session closed')
  }

  socket.onerror = (e) => console.log('socket errored:', e.message)
  socket.onclose = () => console.log('socket closed')

  return response // 101 (Switching Protocols)
})
```

----------------------------------------

TITLE: Create Add Department Column Migration (CLI)
DESCRIPTION: This command generates a new migration file using the Supabase CLI, used to add a new `department` column to the existing `employees` table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
supabase migration new add_department_column
```

----------------------------------------

TITLE: Implementing Authentication Handlers in SvelteKit
DESCRIPTION: Server-side handlers for user signup and login using Supabase authentication. Includes error handling and redirection logic.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
const password = formData.get('password') as string

const { error } = await supabase.auth.signUp({ email, password })
if (error) {
  console.error(error)
  redirect(303, '/auth/error')
} else {
  redirect(303, '/')
}
},
login: async ({ request, locals: { supabase } }) => {
const formData = await request.formData()
const email = formData.get('email') as string
const password = formData.get('password') as string

const { error } = await supabase.auth.signInWithPassword({ email, password })
if (error) {
  console.error(error)
  redirect(303, '/auth/error')
} else {
  redirect(303, '/private')
}
},
```

----------------------------------------

TITLE: Enabling pgvector Extension in SQL
DESCRIPTION: SQL command to enable the pgvector extension in the Supabase database, which is necessary for vector operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable pgvector extension
create extension if not exists vector with schema public;
```

----------------------------------------

TITLE: Creating Database Tables for Messaging App with SQL
DESCRIPTION: SQL script to create three tables: users for tracking registered users, groups for chat groups, and messages for all app messages. The tables include relationships with foreign key constraints and default timestamps.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table users (
  id uuid not null primary key,
  email text
);

create table groups (
  id bigint generated by default as identity primary key,
  creator uuid references public.users not null default auth.uid(),
  title text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table messages (
  id bigint generated by default as identity primary key,
  user_id uuid references public.users not null default auth.uid(),
  text text check (char_length(text) > 0),
  group_id bigint references groups on delete cascade not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
```

----------------------------------------

TITLE: Creating Basic Storage Bucket with JavaScript
DESCRIPTION: Creates a public storage bucket named 'avatars' using the Supabase JavaScript client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/creating-buckets.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!)

// Use the JS library to create a bucket.

const { data, error } = await supabase.storage.createBucket('avatars', {
  public: true, // default: false
})
```

----------------------------------------

TITLE: Accessing Request Information in PostgreSQL
DESCRIPTION: SQL queries that demonstrate how to access request information such as headers, cookies, and JWT claims using the current_setting() function in PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
-- To get all the headers sent in the request
SELECT current_setting('request.headers', true)::json;

-- To get a single header, you can use JSON arrow operators
SELECT current_setting('request.headers', true)::json->>'user-agent';

-- Access Cookies
SELECT current_setting('request.cookies', true)::json;
```

----------------------------------------

TITLE: Authenticating Users with Next.js Server Actions and Supabase
DESCRIPTION: Example of using Supabase authentication within a Next.js Server Action. This shows how to create a sign-in function that runs on the server but can be called from a client form submission.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const signIn = async () => {
    'use server'
    supabase.auth.signInWithOAuth({...})
  }

  return (
    <form action={signIn}>
      <button>Sign in with GitHub</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Calling PostgreSQL Functions with supabase-js
DESCRIPTION: Example of how to call a PostgreSQL function using the supabase-js client library with RPC method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-30-supabase-functions-updates.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.rpc('best_star_wars_series', {
  name: 'The Prequels',
})
```

----------------------------------------

TITLE: Setting Up SQL Database Schema for User Profiles in Supabase
DESCRIPTION: SQL commands to create and configure a profiles table with row level security policies, set up Supabase Realtime for the profiles table, and configure storage for avatar images with appropriate access policies.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/nuxt3-user-management/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Implementing File List and Upload UI in React Native with Supabase Storage
DESCRIPTION: This snippet creates a page for displaying and uploading files using Supabase Storage. It includes a floating action button for triggering the file picker and loads existing files for the authenticated user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
import { View, StyleSheet, TouchableOpacity, ScrollView } from 'react-native'
import React, { useEffect, useState } from 'react'
import { Ionicons } from '@expo/vector-icons'
import * as ImagePicker from 'expo-image-picker'
import { useAuth } from '../../provider/AuthProvider'
import * as FileSystem from 'expo-file-system'
import { decode } from 'base64-arraybuffer'
import { supabase } from '../../config/initSupabase'
import { FileObject } from '@supabase/storage-js'

const list = () => {
  const { user } = useAuth()
  const [files, setFiles] = useState<FileObject[]>([])

  useEffect(() => {
    if (!user) return

    // Load user images
    loadImages()
  }, [user])

  const loadImages = async () => {
    const { data } = await supabase.storage.from('files').list(user!.id)
    if (data) {
      setFiles(data)
    }
  }

  const onSelectImage = async () => {
    // TODO
  }

  return (
    <View style={styles.container}>
      {/* FAB to add images */}
      <TouchableOpacity onPress={onSelectImage} style={styles.fab}>
        <Ionicons name="camera-outline" size={30} color={'#fff'} />
      </TouchableOpacity>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#151515',
  },
  fab: {
    borderWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    width: 70,
    position: 'absolute',
    bottom: 40,
    right: 30,
    height: 70,
    backgroundColor: '#2b825b',
    borderRadius: 100,
  },
})

export default list
```

----------------------------------------

TITLE: Installing Supabase Dart Package via Terminal
DESCRIPTION: Command to add the Supabase package to a non-Flutter Dart project using the dart pub add command.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/installing.mdx#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
dart pub add supabase
```

----------------------------------------

TITLE: Installing Supabase Package for Dart
DESCRIPTION: Command to install the Supabase package for regular Dart projects using pub package manager.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v1/installing.mdx#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
dart pub add supabase
```

----------------------------------------

TITLE: Setting Up Supabase Database Schema with RLS Policies
DESCRIPTION: SQL schema for creating profiles table with Row Level Security policies, including user authentication, storage configuration, and realtime subscriptions.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/react-user-management/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a table for Public Profiles
create table
  profiles (
    id uuid references auth.users not null,
    updated_at timestamp
    with
      time zone,
      username text unique,
      avatar_url text,
      website text,
      primary key (id),
      unique (username),
      constraint username_length check (char_length(username) >= 3)
  );

alter table
  profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select
  using (true);

create policy "Users can insert their own profile." on profiles for insert
with
  check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles for
update
  using ((select auth.uid()) = id);

-- Set up Realtime!
begin;

drop
  publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter
  publication supabase_realtime add table profiles;

-- Set up Storage!
insert into
  storage.buckets (id, name)
values
  ('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select
  using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for insert
with
  check (bucket_id = 'avatars');
```

----------------------------------------

TITLE: Creating a Supabase client with service_role secret for server-side use in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a separate Supabase client using the createClient method from @supabase/supabase-js, providing it with the service_role secret. It also disables certain auth properties to ensure proper functionality in a server environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/performing-administration-tasks-on-the-server-side-with-the-servicerole-secret-BYM4Fa.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(supabaseUrl, serviceRoleSecret, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
    detectSessionInUrl: false,
  },
})
```

----------------------------------------

TITLE: Basic Supabase Data Fetching with Retries
DESCRIPTION: Example of using the Supabase client with integrated retry logic for data fetching
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/automatic-retries-in-supabase-js.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
async function fetchData() {
  const { data, error } = await supabase.from('your_table').select('*')

  if (error) {
    console.error('Error fetching data:', error)
  } else {
    console.log('Fetched data:', data)
  }
}

fetchData()
```

----------------------------------------

TITLE: Creating a Next.js API route for Supabase Storage signed URLs in TypeScript
DESCRIPTION: This code creates a Next.js API route that generates signed upload URLs for Supabase Storage, allowing secure client-side file uploads.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-18-calcom-platform-starter-kit-nextjs-supabase.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { auth } from '@/auth'
import { env } from '@/env'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic' // defaults to auto
export async function GET(request: Request) {
  try {
    const session = await auth()
    if (!session || !session.user.id) {
      return new Response('Unauthorized', { status: 401 })
    }
    const {
      user: { id },
    } = session
    // Generate signed upload url to use on client.
    const supabaseAdmin = createClient(env.NEXT_PUBLIC_SUPABASE_URL, env.SUPABASE_SERVICE_ROLE_KEY)

    const { data, error } = await supabaseAdmin.storage
      .from('avatars')
      .createSignedUploadUrl(id, { upsert: true })
    console.log(error)
    if (error) throw error

    return new Response(JSON.stringify(data), {
      status: 200,
    })
  } catch (e) {
    console.error(e)
    return new Response('Internal Server Error', { status: 500 })
  }
}
```

----------------------------------------

TITLE: Enabling pg_graphql Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the pg_graphql extension in a PostgreSQL database. This allows the database to use GraphQL queries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_graphql.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the "pg_graphql" extension
create extension pg_graphql;

-- Disable the "pg_graphql" extension
drop extension if exists pg_graphql;
```

----------------------------------------

TITLE: Importing and initializing Supabase client
DESCRIPTION: JavaScript code to import the Supabase client from the JSR package and create a Supabase instance. This demonstrates how to set up and use Supabase in a JavaScript file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')

console.log('Supabase Instance: ', supabase)
```

----------------------------------------

TITLE: Creating Todo Table with Row Level Security Policies in PostgreSQL
DESCRIPTION: SQL schema for creating a todos table with user authentication and row level security policies. This schema defines the table structure, enables row level security, and creates policies for insert, select, update, and delete operations based on user authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/todo-list/sveltejs-todo-list/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table todos (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  task text check (char_length(task) > 3),
  is_complete boolean default false,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table todos enable row level security;

create policy "Individuals can create todos." on todos for
    insert with check ((select auth.uid()) = user_id);

create policy "Individuals can view their own todos. " on todos for
    select using ((select auth.uid()) = user_id);

create policy "Individuals can update their own todos." on todos for
    update using ((select auth.uid()) = user_id);

create policy "Individuals can delete their own todos." on todos for
    delete using ((select auth.uid()) = user_id);
```

----------------------------------------

TITLE: Creating Profiles Table with Row Level Security in PostgreSQL
DESCRIPTION: SQL script to create a profiles table with Row Level Security policies for user management. Includes table creation, security policies for viewing, inserting, and updating profiles, and setup for Supabase Realtime and Storage features.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/angular-user-management/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create a table for Public Profiles
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,
  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);
alter table profiles enable row level security;
create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );
create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );
create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );
-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;
-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');
create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );
create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Creating a Postgres Trigger to Execute Function in SQL
DESCRIPTION: This SQL code creates a trigger that executes the `your_table_changes` function after any changes (insert, update, or delete) to the `public.your_table` table. The trigger is defined to execute for each row affected by the change.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create trigger handle_your_table_changes
after insert or update or delete
on public.your_table
for each row
execute function your_table_changes ();
```

----------------------------------------

TITLE: Creating a Static Server Component with Supabase in Next.js (TypeScript)
DESCRIPTION: TypeScript implementation of a Next.js static server component that fetches data from Supabase at build time. It uses the typed createClient from supabase-js for type safety, and renders the fetched todos data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_29

LANGUAGE: tsx
CODE:
```
import { createClient } from '@supabase/supabase-js'

import type { Database } from '@/lib/database.types'

export default async function Page() {
  const supabase = createClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )

  const { data } = await supabase.from('todos').select()
  return <pre>{JSON.stringify(data, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Creating Restricted Access RLS Policy
DESCRIPTION: SQL policy to disallow public access to the profiles table for the anon role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create policy "Disallow public access" on profiles to anon for
select
  using (false);
```

----------------------------------------

TITLE: Adding Supabase Dependency
DESCRIPTION: Install the Supabase Flutter package using dart pub
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
dart pub add supabase_flutter
```

----------------------------------------

TITLE: Creating Next.js App with Supabase Template - Bash
DESCRIPTION: Use the `create-next-app` command with the `-e with-supabase` template to quickly set up a Next.js application pre-configured for Supabase cookie-based authentication, TypeScript, and Tailwind CSS. This command initializes the project directory.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/nextjs.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app -e with-supabase
```

----------------------------------------

TITLE: Initializing Films Database Schema with Vector Support
DESCRIPTION: Creates a films table with vector support using pgvector extension, includes columns for movie details and embeddings, and sets up row level security policies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable pgvector extension
create extension vector
with
  schema extensions;

-- Create table
create table public.films (
  id integer primary key,
  title text,
  overview text,
  release_date date,
  backdrop_path text,
  embedding vector(1536)
);

-- Enable row level security
alter table public.films enable row level security;

-- Create policy to allow anyone to read the films table
create policy "Fils are public." on public.films for select using (true);
```

----------------------------------------

TITLE: Implementing Registration Page with Email Confirmation in Flutter
DESCRIPTION: A Flutter widget that handles user registration with email confirmation. It includes form validation, Supabase authentication, and state management for redirecting users after email confirmation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_12

LANGUAGE: dart
CODE:
```
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:my_chat_app/pages/login_page.dart';
import 'package:my_chat_app/pages/rooms_page.dart';
import 'package:my_chat_app/utils/constants.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class RegisterPage extends StatefulWidget {
  const RegisterPage(
      {Key? key, required this.isRegistering})
      : super(key: key);

  static Route<void> route({bool isRegistering = false}) {
    return MaterialPageRoute(
      builder: (context) =>
          RegisterPage(isRegistering: isRegistering),
    );
  }

  final bool isRegistering;

  @override
  State<RegisterPage> createState() => _RegisterPageState();
}

// ... rest of the RegisterPage implementation
```

----------------------------------------

TITLE: Upserting and Returning Data in Supabase with TypeScript
DESCRIPTION: Code examples demonstrating how to upsert (insert or update) data in a Supabase table with and without returning the affected records. The newer version adds a .select() method to return the upserted data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
const { data, error } = await supabase
  .from('my_table')
  .upsert({ new_data })
```

LANGUAGE: typescript
CODE:
```
const { data, error } = await supabase
  .from('my_table')
  .upsert({ new_data })
  .select()
```

----------------------------------------

TITLE: Implementing Email Signup with JavaScript
DESCRIPTION: JavaScript code snippet for signing up a new user with email and password authentication in Supabase. This example uses the implicit flow and includes an optional redirect URL for after email confirmation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

// ---cut---
async function signUpNewUser() {
  const { data, error } = await supabase.auth.signUp({
    email: 'valid.email@supabase.io',
    password: 'example-password',
    options: {
      emailRedirectTo: 'https://example.com/welcome',
    },
  })
}
```

----------------------------------------

TITLE: Implementing Account Form Component in Next.js with Supabase
DESCRIPTION: A React component for managing user profile data using Supabase. It retrieves profile information from the 'profiles' table and allows users to update their full name, username, website, and avatar URL. The component also includes form validation and error handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_13

LANGUAGE: jsx
CODE:
```
'use client'
import { useCallback, useEffect, useState } from 'react'
import { createClient } from '@/utils/supabase/client'

export default function AccountForm({ user }) {
  const supabase = createClient()
  const [loading, setLoading] = useState(true)
  const [fullname, setFullname] = useState(null)
  const [username, setUsername] = useState(null)
  const [website, setWebsite] = useState(null)
  const [avatar_url, setAvatarUrl] = useState(null)

  const getProfile = useCallback(async () => {
    try {
      setLoading(true)

      const { data, error, status } = await supabase
        .from('profiles')
        .select(`full_name, username, website, avatar_url`)
        .eq('id', user?.id)
        .single()

      if (error && status !== 406) {
        throw error
      }

      if (data) {
        setFullname(data.full_name)
        setUsername(data.username)
        setWebsite(data.website)
        setAvatarUrl(data.avatar_url)
      }
    } catch (error) {
      alert('Error loading user data!')
    } finally {
      setLoading(false)
    }
  }, [user, supabase])

  useEffect(() => {
    getProfile()
  }, [user, getProfile])

  async function updateProfile({ username, website, avatar_url }) {
    try {
      setLoading(true)

      const { error } = await supabase.from('profiles').upsert({
        id: user?.id,
        full_name: fullname,
        username,
        website,
        avatar_url,
        updated_at: new Date().toISOString(),
      })
      if (error) throw error
      alert('Profile updated!')
    } catch (error) {
      alert('Error updating the data!')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="form-widget">
      <div>
        <label htmlFor="email">Email</label>
        <input id="email" type="text" value={user?.email} disabled />
      </div>
      <div>
        <label htmlFor="fullName">Full Name</label>
        <input
          id="fullName"
          type="text"
          value={fullname || ''}
          onChange={(e) => setFullname(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="username">Username</label>
        <input
          id="username"
          type="text"
          value={username || ''}
          onChange={(e) => setUsername(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="website">Website</label>
        <input
          id="website"
          type="url"
          value={website || ''}
          onChange={(e) => setWebsite(e.target.value)}
        />
      </div>

      <div>
        <button
          className="button primary block"
          onClick={() => updateProfile({ fullname, username, website, avatar_url })}
          disabled={loading}
        >
          {loading ? 'Loading ...' : 'Update'}
        </button>
      </div>

      <div>
        <form action="/auth/signout" method="post">
          <button className="button block" type="submit">
            Sign out
          </button>
        </form>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Updating user data for logged-in user in TypeScript
DESCRIPTION: Example of how to update the method to update user data for a logged-in user in supabase-js v2. The new version uses updateUser.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
const {
  data: { user },
  error,
} = await supabase.auth.updateUser({ attributes })
```

----------------------------------------

TITLE: Creating Server Supabase Client for Next.js
DESCRIPTION: TypeScript code to create a server-side Supabase client using the Supabase SSR helper library, with proper typing and cookie handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'
import { Database } from './database.types'

export default function useSupabaseServer(cookieStore: ReturnType<typeof cookies>) {
  return createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
      },
    }
  )
}
```

----------------------------------------

TITLE: Starting Local Supabase Database
DESCRIPTION: Command to initialize and start a local Supabase database instance for development purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/database/employees/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx supabase db start
```

----------------------------------------

TITLE: Implementing Row Level Security Policy
DESCRIPTION: Creates a Row Level Security policy that restricts users to only insert their own messages using auth.uid() function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
CREATE POLICY "Individuals can only write their own messages." ON messages FOR
    INSERT WITH CHECK ((select auth.uid()) = user_id);
```

----------------------------------------

TITLE: Creating Authentication Server Actions
DESCRIPTION: Implementation of server actions for login and signup functionality using the new Supabase server client utility function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
// app/login/actions.ts

'use server';

import { revalidatePath } from 'next/cache';
import { redirect } from 'next/navigation';

import { createClient } from '@/utils/supabase/server';

export async function login(formData: FormData) {
  const supabase = createClient();

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  };

  const { error } = await supabase.auth.signInWithPassword(data)

  if (error) {
    redirect('/error');
  }

  revalidatePath('/', 'layout');
  redirect('/');
}

export async function signup(formData: FormData) {
  const supabase = createClient();

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  };

  const { error } = await supabase.auth.signUp(data);

  if (error) {
    redirect('/error');
  }

  revalidatePath('/', 'layout');
  redirect('/');
}
```

----------------------------------------

TITLE: Supavisor Session Mode Connection String
DESCRIPTION: This snippet shows an example of a Supavisor session mode connection string to a Supabase Postgres database via a proxy. This is suitable for persistent clients and supports both IPv4 and IPv6. Replace `[YOUR-PASSWORD]` and `[REGION]` with the actual values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres.mdx#_snippet_1

LANGUAGE: text
CODE:
```
postgres://postgres.apbkobhfnmcqqzqeeqss:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres
```

----------------------------------------

TITLE: Querying Many-to-Many Relationships in Python
DESCRIPTION: Python example showing how to query teams with their related users through a many-to-many relationship.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
data = supabase.from_('teams').select('id, team_name, users(id, name)').execute()
```

----------------------------------------

TITLE: Insert Trigger Function for New Users
DESCRIPTION: PostgreSQL function to handle new user insertion by duplicating auth.users data into the profiles table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = ''
as $$
begin

  -- Insert the new user's data into the 'profiles' table
  insert into public.profiles (id, email)
  values (new.id, new.email);

  return new;     -- Return the new record
end;
$$;
```

----------------------------------------

TITLE: Setting Supabase Environment Variables
DESCRIPTION: This snippet defines the environment variables required to connect your React Router project to a Supabase instance. These variables include the Supabase URL and the Supabase anon key, which are essential for authenticating and authorizing your application's access to the Supabase backend. The values for these variables can be found in the Supabase dashboard or by running `supabase start` or `supabase status` for local instances.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/client.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
"VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY="
```

----------------------------------------

TITLE: Initializing Supabase Client in SvelteKit
DESCRIPTION: Code to create and initialize the Supabase client with the project URL and anon key for use throughout the SvelteKit application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/sveltekit.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

export const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')
```

----------------------------------------

TITLE: Create Cities Table (SQL)
DESCRIPTION: This SQL code creates the `cities` table with columns for `id`, `name`, and `population`.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_8

LANGUAGE: sql
CODE:
```
create table "public"."cities" (
  "id" bigint primary key generated always as identity,
  "name" text,
  "population" bigint
);
```

----------------------------------------

TITLE: Signing in with Email and Password using Supabase in Dart
DESCRIPTION: This snippet shows how to sign in a user with their email and password using the Supabase Dart client. It uses the signInWithPassword() method from the auth module.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_17

LANGUAGE: dart
CODE:
```
Future<void> signInWithEmail() async {
  final AuthResponse res = await supabase.auth.signInWithPassword(
    email: 'valid.email@supabase.io',
    password: 'example-password'
  );
}
```

----------------------------------------

TITLE: Import Postgres Database using psql
DESCRIPTION: This command imports a Postgres database from a file (dump.sql) into a Supabase project using psql. It connects to the Supabase database using the provided connection string and executes the SQL commands in the dump file. This assumes the dump file exists and is accessible.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/postgres.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
"psql -d \"$YOUR_CONNECTION_STRING\" -f dump.sql"
```

----------------------------------------

TITLE: Signing Out User with Supabase Auth (JavaScript)
DESCRIPTION: Shows how to log out the currently authenticated user from the Supabase session. It calls the simple `supabase.auth.signOut()` method, which clears the local session and invalidates the user's token. Required: Supabase client initialized and a user session active.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/monthly-active-users-sso.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
const {error} = await supabase.auth.signOut()
```

----------------------------------------

TITLE: Implementing Supabase Auth in React
DESCRIPTION: React component implementation showing Supabase authentication setup with session management and Auth UI component integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import './index.css'
import { useState, useEffect } from 'react'
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'
import { ThemeSupa } from '@supabase/auth-ui-shared'

const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')

export default function App() {
  const [session, setSession] = useState(null)

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session)
    })

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })

    return () => subscription.unsubscribe()
  }, [])

  if (!session) {
    return (<Auth supabaseClient={supabase} appearance={{ theme: ThemeSupa }} />)
  }
  else {
    return (<div>Logged in!</div>)
  }
}
```

----------------------------------------

TITLE: Signing in with Email and Password using Supabase in JavaScript
DESCRIPTION: This snippet demonstrates how to sign in a user with their email and password using the Supabase JavaScript client. It uses the signInWithPassword() method from the auth module.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

async function signInWithEmail() {
  const { data, error } = await supabase.auth.signInWithPassword({
    email: 'valid.email@supabase.io',
    password: 'example-password',
  })
}
```

----------------------------------------

TITLE: Realtime Client Component
DESCRIPTION: Implements a client component that subscribes to realtime database changes using Supabase channels.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_18

LANGUAGE: tsx
CODE:
```
'use client'

import { useEffect, useState } from 'react'
import supabase from '../../utils/supabase'

export default function RealtimePosts({ serverPosts }: { serverPosts: any }) {
  const [posts, setPosts] = useState(serverPosts)

  useEffect(() => {
    setPosts(serverPosts)
  }, [serverPosts])

  useEffect(() => {
    const channel = supabase
      .channel('*')
      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'posts' }, (payload) =>
        setPosts((posts: any) => [...posts, payload.new])
      )
      .subscribe()

    return () => {
      supabase.removeChannel(channel)
    }
  }, [serverPosts])

  return <pre>{JSON.stringify(posts, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Listening to all Postgres schema changes in JavaScript
DESCRIPTION: This JavaScript snippet configures a Supabase client to listen for any database changes in the 'public' schema. It defines a channel and logs any payload received. The channel cannot be named 'realtime'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const channelA = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: '*',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Sign Out User with Supabase Auth
DESCRIPTION: This JavaScript snippet demonstrates how to sign out a user using the Supabase client library. It initializes the Supabase client and calls the signOut method. The function returns a promise that resolves when the user is successfully signed out or rejects with an error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-slack.mdx#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Generating Supabase Database Types
DESCRIPTION: This command regenerates the Supabase database types and writes them to a file. It uses the Supabase CLI and should be run in the terminal. This is crucial for keeping types in sync with the database schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase gen types --local > registry/default/fixtures/database.types.ts
```

----------------------------------------

TITLE: Creating Database Tables with SQL
DESCRIPTION: SQL script to create the profiles and messages tables in Supabase. The profiles table stores user information, while the messages table stores chat content with references to user profiles. Includes constraints for validation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table if not exists public.profiles (
    id uuid references auth.users on delete cascade not null primary key,
    username varchar(24) not null unique,
    created_at timestamp with time zone default timezone('utc' :: text, now()) not null,

    -- username should be 3 to 24 characters long containing alphabets, numbers and underscores
    constraint username_validation check (username ~* '^[A-Za-z0-9_]{3,24}$')
);
comment on table public.profiles is 'Holds all of users profile information';

create table if not exists public.messages (
    id uuid not null primary key default gen_random_uuid(),
    profile_id uuid default auth.uid() references public.profiles(id) on delete cascade not null,
    content varchar(500) not null,
    created_at timestamp with time zone default timezone('utc' :: text, now()) not null
);
comment on table public.messages is 'Holds individual messages sent on the app.';
```

----------------------------------------

TITLE: Implementing MFA-Based RLS Policy
DESCRIPTION: Creates a restrictive policy that only allows profile updates when multi-factor authentication level is set to aal2.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
create policy "Restrict updates."
on profiles
as restrictive
for update
to authenticated using (
  (select auth.jwt()->>'aal') = 'aal2'
);
```

----------------------------------------

TITLE: Creating Semantic Search Function with Cosine Distance
DESCRIPTION: SQL function to perform semantic search using cosine distance operator with configurable threshold and match count
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create or replace function match_documents (
  query_embedding vector(512),
  match_threshold float,
  match_count int
)
returns setof documents
language sql
as $$
  select *
  from documents
  where documents.embedding <=> query_embedding < 1 - match_threshold
  order by documents.embedding <=> query_embedding asc
  limit least(match_count, 200);
$$;
```

----------------------------------------

TITLE: Implementing Authentication Middleware in JavaScript
DESCRIPTION: Setting up Next.js middleware to handle Supabase authentication session management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'

export async function middleware(req) {
  const res = NextResponse.next()

  // Create a Supabase client configured to use cookies
  const supabase = createMiddlewareClient({ req, res })

  // Refresh session if expired - required for Server Components
  await supabase.auth.getUser()

  return res
}

// Ensure the middleware is only called for relevant paths.
export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
}
```

----------------------------------------

TITLE: Generating TypeScript Types for Supabase Project
DESCRIPTION: Generates TypeScript types for a Supabase project using the CLI and saves them to a file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npx supabase gen types typescript --project-id "$PROJECT_REF" --schema public > database.types.ts
```

----------------------------------------

TITLE: Creating Basic Index in PostgreSQL
DESCRIPTION: Shows how to create a basic btree index on a surname column to improve query performance for surname lookups.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create index idx_students_surname on students (surname);
```

----------------------------------------

TITLE: Creating a User Account Management Component
DESCRIPTION: A Svelte component for authenticated users to view and edit their profile information, including username and website. The component handles fetching, updating, and persisting user data in Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
<script lang="ts">
  import { onMount } from 'svelte'
  import type { AuthSession } from '@supabase/supabase-js'
  import { supabase } from '../supabaseClient'

  export let session: AuthSession

  let loading = false
  let username: string | null = null
  let website: string | null = null
  let avatarUrl: string | null = null

  onMount(() => {
    getProfile()
  })

  const getProfile = async () => {
    try {
      loading = true
      const { user } = session

      const { data, error, status } = await supabase
        .from('profiles')
        .select('username, website, avatar_url')
        .eq('id', user.id)
        .single()

      if (error && status !== 406) throw error

      if (data) {
        username = data.username
        website = data.website
        avatarUrl = data.avatar_url
      }
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      loading = false
    }
  }

  const updateProfile = async () => {
    try {
      loading = true
      const { user } = session

      const updates = {
        id: user.id,
        username,
        website,
        avatar_url: avatarUrl,
        updated_at: new Date().toISOString(),
      }

      const { error } = await supabase.from('profiles').upsert(updates)

      if (error) {
        throw error
      }
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      loading = false
    }
  }
</script>

<form on:submit|preventDefault="{updateProfile}" class="form-widget">
  <div>Email: {session.user.email}</div>
  <div>
    <label for="username">Name</label>
    <input id="username" type="text" bind:value="{username}" />
  </div>
  <div>
    <label for="website">Website</label>
    <input id="website" type="text" bind:value="{website}" />
  </div>
  <div>
    <button type="submit" class="button primary block" disabled="{loading}">
      {loading ? 'Saving ...' : 'Update profile'}
    </button>
  </div>
  <button type="button" class="button block" on:click={() => supabase.auth.signOut()}> Sign Out
  </button>
</form>
```

----------------------------------------

TITLE: Creating Next.js Project with Supabase Starter Template
DESCRIPTION: Command to create a new Next.js project using the official Supabase starter template. The template includes App router support, Cookie-based Auth, Tailwind CSS styled forms, and TypeScript support.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-11-launch-week-8-community-highlights.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app -e with-supabase
```

----------------------------------------

TITLE: Next.js OAuth Callback Handler
DESCRIPTION: Implementation of OAuth callback handling in Next.js, including code exchange and redirect management with load balancer consideration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
// The client you created from the Server-Side Auth instructions
import { createClient } from '@/utils/supabase/server'

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url)
  const code = searchParams.get('code')
  // if "next" is in param, use it as the redirect URL
  const next = searchParams.get('next') ?? '/'

  if (code) {
    const supabase = await createClient()
    const { error } = await supabase.auth.exchangeCodeForSession(code)
    if (!error) {
      const forwardedHost = request.headers.get('x-forwarded-host') // original origin before load balancer
      const isLocalEnv = process.env.NODE_ENV === 'development'
      if (isLocalEnv) {
        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host
        return NextResponse.redirect(`${origin}${next}`)
      } else if (forwardedHost) {
        return NextResponse.redirect(`https://${forwardedHost}${next}`)
      } else {
        return NextResponse.redirect(`${origin}${next}`)
      }
    }
  }

  // return the user to an error page with instructions
  return NextResponse.redirect(`${origin}/auth/auth-code-error`)
}
```

----------------------------------------

TITLE: Using Drizzle ORM with PostgreSQL in Edge Function
DESCRIPTION: This example demonstrates how to use Drizzle ORM with node-postgres in an Edge Function. It defines a table schema, establishes a database connection using environment variables, and performs a select query on the 'users' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-12-edge-functions-faster-smaller.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
import { drizzle } from 'npm:drizzle-orm@0.33.0/node-postgres'
import pg from 'npm:pg@8.12.0'
const { Client } = pg

import { pgTable, serial, text, varchar } from 'npm:drizzle-orm@0.33.0/pg-core'

export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  fullName: text('full_name'),
  phone: varchar('phone', { length: 256 }),
})

const client = new Client({
  connectionString: Deno.env.get('SUPABASE_DB_URL'),
})

await client.connect()
const db = drizzle(client)

Deno.serve(async (req) => {
  const allUsers = await db.select().from(users)
  console.log(allUsers)

  return new Response('ok')
})
```

----------------------------------------

TITLE: RESTRICT Delete Operation Example
DESCRIPTION: Demonstrates how RESTRICT constraint prevents deletion of referenced records.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/cascade-deletes.mdx#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
postgres=# delete from grandparent;
ERROR: update or delete on table "parent" violates foreign key constraint "child_father_fkey" on table "child"
DETAIL: Key (id)=(1) is still referenced from table "child".
```

----------------------------------------

TITLE: Listening to all Postgres schema changes in Dart
DESCRIPTION: This Dart snippet configures a Supabase client to listen for any database changes in the 'public' schema, using `onPostgresChanges` for event handling. It logs any payload received. The channel cannot be named 'realtime'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_6

LANGUAGE: Dart
CODE:
```
supabase
    .channel('schema-db-changes')
    .onPostgresChanges(
        schema: 'public', // Subscribes to the "public" schema in Postgres
        event: PostgresChangeEvent.all, // Listen to all changes

        callback: (payload) => print(payload))
    .subscribe();
```

----------------------------------------

TITLE: Creating RLS Policies for Authorized Delete Access
DESCRIPTION: SQL commands to create Row Level Security policies for authorized delete access on channels and messages tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create policy "Allow authorized delete access" on public.channels for delete to authenticated using ( (SELECT authorize('channels.delete')) );
create policy "Allow authorized delete access" on public.messages for delete to authenticated using ( (SELECT authorize('messages.delete')) );
```

----------------------------------------

TITLE: Listening only to 'INSERT' events in Kotlin
DESCRIPTION: This Kotlin snippet configures a Supabase client to listen only for INSERT events in the 'public' schema using a flow. It logs specific changes to console. The channel cannot be named 'realtime'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_13

LANGUAGE: Kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Insert>(schema = "public")

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

----------------------------------------

TITLE: Using TypeScript Definitions with Supabase Client
DESCRIPTION: This code demonstrates how to use the generated TypeScript definitions when creating a Supabase client instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { Database } from './database.types'

const supabase = createClient<Database>(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
)
```

----------------------------------------

TITLE: Static Posts Component with Revalidation
DESCRIPTION: Implements a server component that fetches and displays posts from Supabase with static revalidation every 60 seconds.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_12

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'
import supabase from '../../utils/supabase'

export const revalidate = 60

export default async function Posts() {
  const { data: posts } = await supabase.from('posts').select('id, title')

  if (!posts) {
    return <p>No posts found.</p>
  }

  return posts.map((post) => (
    <p key={post.id}>
      <Link href={`/static/${post.id}`}>{post.title}</Link>
    </p>
  ))
}
```

----------------------------------------

TITLE: Overriding Response Types in Supabase Queries
DESCRIPTION: This snippet demonstrates how to override the type of a successful response from a Supabase query, including partial and full type overrides.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
// Partial type override allows you to only override some of the properties in your results
const { data } = await supabase.from('countries').select().overrideTypes<Array<{ id: string }>>()
// For a full replacement of the original return type use the `{ merge: false }` property as second argument
const { data } = await supabase
  .from('countries')
  .select()
  .overrideTypes<Array<{ id: string }>, { merge: false }>()
// Use it with `maybeSingle` or `single`
const { data } = await supabase.from('countries').select().single().overrideTypes<{ id: string }>()
```

----------------------------------------

TITLE: Configuring Main Flutter App with Supabase Authentication
DESCRIPTION: Sets up a Flutter application with Supabase authentication and conditional rendering based on user authentication status. It initializes Supabase client, applies custom theming, and provides a utility extension for displaying snackbars throughout the app.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:supabase_quickstart/pages/account_page.dart';
import 'package:supabase_quickstart/pages/login_page.dart';

Future<void> main() async {
  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SUPABASE_ANON_KEY',
  );
  runApp(const MyApp());
}

final supabase = Supabase.instance.client;

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Supabase Flutter',
      theme: ThemeData.dark().copyWith(
        primaryColor: Colors.green,
        textButtonTheme: TextButtonThemeData(
          style: TextButton.styleFrom(
            foregroundColor: Colors.green,
          ),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            foregroundColor: Colors.white,
            backgroundColor: Colors.green,
          ),
        ),
      ),
      home: supabase.auth.currentSession == null
          ? const LoginPage()
          : const AccountPage(),
    );
  }
}

extension ContextExtension on BuildContext {
  void showSnackBar(String message, {bool isError = false}) {
    ScaffoldMessenger.of(this).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: isError
            ? Theme.of(this).colorScheme.error
            : Theme.of(this).snackBarTheme.backgroundColor,
      ),
    );
  }
}
```

----------------------------------------

TITLE: Creating Foreign Key Constraint with CASCADE Option
DESCRIPTION: Example of creating a foreign key constraint using the CASCADE option, which deletes related child records when parent record is deleted.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/cascade-deletes.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
alter table child_table
add constraint fk_parent foreign key (parent_id) references parent_table (id)
  on delete cascade;
```

----------------------------------------

TITLE: Creating JSONB Column in Postgres (SQL)
DESCRIPTION: This SQL snippet demonstrates how to create a database table named `books` that includes an `id`, `title`, `author`, and a `metadata` column defined with the `jsonb` data type. The `jsonb` type is recommended for storing unstructured or variable-schema data efficiently in PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#_snippet_0

LANGUAGE: sql
CODE:
```
create table books (
  id serial primary key,
  title text,
  author text,
  metadata jsonb
);
```

----------------------------------------

TITLE: Configuring Storage Access Control Policies
DESCRIPTION: Sets up three access control policies for storage objects: read access for all users, insert access for authenticated users, and update access for all users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/product_management_sql_template.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
CREATE POLICY "Enable read access for all users" ON "storage"."objects"
AS PERMISSIVE FOR SELECT
TO public
USING (true)

CREATE POLICY "Enable insert for all users" ON "storage"."objects"
AS PERMISSIVE FOR INSERT
TO authenticated, anon
WITH CHECK (true)

CREATE POLICY "Enable update for all users" ON "storage"."objects"
AS PERMISSIVE FOR UPDATE
TO public
USING (true)
WITH CHECK (true)
```

----------------------------------------

TITLE: Protected API Route Implementation with Supabase Auth
DESCRIPTION: Server-side API route implementation with authentication protection and database queries using Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_31

LANGUAGE: typescript
CODE:
```
import { supabaseServerClient, withApiAuth } from '@supabase/auth-helpers-sveltekit'
import type { RequestHandler } from './__types/protected-route'

interface TestTable {
  id: string
  created_at: string
}

interface GetOutput {
  data: TestTable[]
}

export const GET: RequestHandler<GetOutput> = async ({ locals, request }) =>
  withApiAuth({ user: locals.user }, async () => {
    // Run queries with RLS on the server
    const { data } = await supabaseServerClient(request).from('test').select('*')

    return {
      status: 200,
      body: { data },
    }
  })
```

LANGUAGE: typescript
CODE:
```
import type { RequestHandler } from './$types';
import { withAuth } from '@supabase/auth-helpers-sveltekit';
import { json, redirect } from '@sveltejs/kit';

interface TestTable {
  id: string;
  created_at: string;
}

export const GET: RequestHandler = withAuth(async ({ session, getSupabaseClient }) => {
  if (!session.user) {
    redirect(303, '/');
  }

  const { data } = await getSupabaseClient()
    .from<TestTable>('test')
    .select('*');

  return json({ data });
);
```

----------------------------------------

TITLE: Querying 'todos' Table Using cURL
DESCRIPTION: cURL command to make a GET request to the 'todos' table API endpoint, including the necessary headers for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/creating-routes.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
# Append /rest/v1/ to your URL, and then use the table name as the route
curl '<SUPABASE_URL>/rest/v1/todos' \
-H "apikey: <SUPABASE_ANON_KEY>" \
-H "Authorization: Bearer <SUPABASE_ANON_KEY>"
```

----------------------------------------

TITLE: Streaming LLM Responses with Supabase.ai API in Edge Functions
DESCRIPTION: This code shows how to create a streaming response from an LLM model (Mistral) using Supabase.ai API in an Edge Function. It accepts a prompt via query parameter and returns the model's output as a server-sent event stream.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-16-ai-inference-now-available-in-supabase-edge-functions.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
const session = new Supabase.ai.Session('mistral')

Deno.serve(async (req: Request) => {
  // Get the prompt from the query string
  const params = new URL(req.url).searchParams
  const prompt = params.get('prompt') ?? ''

  // Get the output as a stream
  const output = await session.run(prompt, { stream: true })

  // Create a stream
  const stream = new ReadableStream({
    async start(controller) {
      const encoder = new TextEncoder()
      for await (const chunk of output) {
        controller.enqueue(encoder.encode(chunk.response ?? ''))
      }
    },
  })

  // Return the stream to the user
  return new Response(stream, {
    headers: new Headers({
      'Content-Type': 'text/event-stream',
      Connection: 'keep-alive',
    }),
  })
})
```

----------------------------------------

TITLE: Creating a POST Route Handler with Supabase in Next.js (JavaScript)
DESCRIPTION: Implements a Next.js route handler that creates a Supabase client to insert a todo item. It uses createRouteHandlerClient to initialize Supabase with cookie-based authentication, processes the POST request data, and returns the inserted record.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_22

LANGUAGE: jsx
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'

export async function POST(request) {
  const { title } = await request.json()
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })
  const { data } = await supabase.from('todos').insert({ title }).select()
  return NextResponse.json(data)
}
```

----------------------------------------

TITLE: Implementing Embedding Request Handler
DESCRIPTION: TypeScript code implementing the request handler for generating embeddings from input text. Includes mean pooling and normalization options.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/generate-text-embeddings.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
Deno.serve(async (req) => {
  // Extract input string from JSON body
  const { input } = await req.json();

  // Generate the embedding from the user input
  const embedding = await session.run(input, {
    mean_pool: true,
    normalize: true,
  });

  // Return the embedding
  return new Response(
    JSON.stringify({ embedding }),
    { headers: { 'Content-Type': 'application/json' } }
  );
});
```

----------------------------------------

TITLE: Creating Login Route Handler in JavaScript
DESCRIPTION: This JavaScript snippet shows how to create a server-side route handler for user login in a Next.js application using Supabase. It extracts form data from a POST request to authenticate the user with Supabase, and then redirects the user using Next.js utilities. Dependencies include @supabase/auth-helpers-nextjs and next/headers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_10

LANGUAGE: JavaScript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

export async function POST(request) {
  const requestUrl = new URL(request.url)
  const formData = await request.formData()
  const email = formData.get('email')
  const password = formData.get('password')
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })

  await supabase.auth.signInWithPassword({
    email,
    password,
  })

  return NextResponse.redirect(requestUrl.origin, {
    status: 301,
  })
}

```

----------------------------------------

TITLE: Listening to all Postgres schema changes in Python
DESCRIPTION: This Python snippet configures a Supabase client to listen for any database changes in the 'public' schema. It uses the channel to bind a callback function that prints any received payload. The channel cannot be named 'realtime'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_9

LANGUAGE: Python
CODE:
```
changes = supabase.channel('schema-db-changes').on_postgres_changes(
  "*",
  schema="public",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Accessing User Information in a Secure Next.js Page
DESCRIPTION: This snippet defines an async server-side component in Next.js that retrieves user information securely using Supabase. It requires users to be authenticated to access the page. Dependencies include 'next/navigation' and '@/utils/supabase/server'. Redirects unauthorized users to '/login'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
import { redirect } from 'next/navigation'

import { createClient } from '@/utils/supabase/server'

export default async function PrivatePage() {
  const supabase = await createClient()

  const { data, error } = await supabase.auth.getUser()
  if (error || !data?.user) {
    redirect('/login')
  }

  return <p>Hello {data.user.email}</p>
}
```

----------------------------------------

TITLE: Setting up Supabase Client with AsyncStorage in React Native
DESCRIPTION: Implementation of a Supabase client using AsyncStorage for authentication persistence across all React Native platforms.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
import 'react-native-url-polyfill/auto'
import AsyncStorage from '@react-native-async-storage/async-storage'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL
const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
})
```

----------------------------------------

TITLE: Making a Supabase API request with User JWT
DESCRIPTION: This bash code snippet demonstrates how to make a request to a Supabase database using `curl` with a user-specific JWT. It includes both the `apikey` and the `Authorization` header with the user's JWT. The `Authorization` header is set to `Bearer` followed by the JWT.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
curl 'https://xscduanzzfseqszwzhcy.supabase.co/rest/v1/colors?select=name' \
-H "apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYxNDIwNTE3NCwiZXhwIjoxOTI5NzgxMTc0fQ.-NBR1WnZyQGpRLdXJfgfpszoZ0EeE6KHatJsDPLIX8c" \
-H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNjE1ODI0Mzg4LCJzdWIiOiIwMzM0NzQ0YS1mMmEyLTRhYmEtOGM4YS02ZTc0OGY2MmExNzIiLCJlbWFpbCI6InNvbWVvbmVAZW1haWwuY29tIiwiYXBwX21ldGFkYXRhIjp7InByb3ZpZGVyIjoiZW1haWwifSwidXNlcl9tZXRhZGF0YSI6bnVsbCwicm9sZSI6ImF1dGhlbnRpY2F0ZWQifQ.I-_oSsJamtinGxniPETBf-ezAUwDW2sY9bJIThvdX9s"
```

----------------------------------------

TITLE: Creating Postgres Schema with Row Level Security for User Profiles
DESCRIPTION: SQL script to set up a user profiles table with Postgres Row Level Security policies. This creates the profiles table, sets up security policies, configures Realtime, and initializes Storage for avatar images.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/svelte-user-management/README.md#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- Create a table for Public Profiles
create table
	profiles (
		id uuid references auth.users not null,
		updated_at timestamp
		with
			time zone,
			username text unique,
			avatar_url text,
			website text,
			primary key (id),
			unique (username),
			constraint username_length check (char_length(username) >= 3)
	);

alter table
	profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select
	using (true);

create policy "Users can insert their own profile." on profiles for insert
with
	check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles for
update
	using ((select auth.uid()) = id);

-- Set up Realtime!
begin;

drop
	publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter
	publication supabase_realtime add table profiles;

-- Set up Storage!
insert into
	storage.buckets (id, name)
values
	('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select
	using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for insert
with
	check (bucket_id = 'avatars');
```

----------------------------------------

TITLE: Creating a Table with Foreign Key in Postgres SQL
DESCRIPTION: Demonstrates proper table creation with an identity-generated primary key, non-null columns, and a foreign key reference. Includes a table comment describing its purpose.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table books (
  id bigint generated always as identity primary key,
  title text not null,
  author_id bigint references authors (id)
);
comment on table books is 'A list of all the books in the library.';
```

----------------------------------------

TITLE: Implementing Simple Hello World Supabase Edge Function in TypeScript
DESCRIPTION: This snippet demonstrates a basic Supabase Edge Function that responds with a personalized greeting. It uses Deno.serve to handle incoming requests, processes JSON payload, and returns a JSON response with appropriate headers.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/edge-functions.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface reqPayload {
	name: string;
}

console.info('server started');

Deno.serve(async (req: Request) => {
	const { name }: reqPayload = await req.json();
	const data = {
		message: `Hello ${name} from foo!`,
	};

	return new Response(
		JSON.stringify(data),
		{ headers: { 'Content-Type': 'application/json', 'Connection': 'keep-alive' }}
		);
});
```

----------------------------------------

TITLE: Disabling Next.js Caching for Dynamic Data Fetching
DESCRIPTION: These code snippets demonstrate three different approaches to disable caching in Next.js, ensuring that the latest data is always fetched from Supabase. Each option can be added to the page or component file where dynamic data is required.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/nextjs-1314-stale-data-when-changing-rls-or-table-data-85b8oQ.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
export const dynamic = 'force-dynamic'; // no caching
```

LANGUAGE: JavaScript
CODE:
```
export const fetchCache = 'force-no-store' // to page.js
```

LANGUAGE: JavaScript
CODE:
```
export const revalidate = 0
```

----------------------------------------

TITLE: Creating Server-Side Layout Load Function for Session Management
DESCRIPTION: Implements a server-side layout load function that retrieves and validates the user session, making it available to all routes in the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
// src/routes/+layout.server.ts
import type { LayoutServerLoad } from './$types'

export const load: LayoutServerLoad = async ({ locals: { safeGetSession }, cookies }) => {
  const { session, user } = await safeGetSession()

  return {
    session,
    user,
    cookies: cookies.getAll(),
  }
}
```

----------------------------------------

TITLE: Accessing Public URL for Supabase Storage Asset
DESCRIPTION: Demonstrates how to use the Supabase SDK to generate a public URL for an asset stored in a public bucket. This method uses the 'getPublicUrl' function from the storage module.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/downloads.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

const { data } = supabase.storage.from('bucket').getPublicUrl('filePath.jpg')

console.log(data.publicUrl)
```

----------------------------------------

TITLE: Basic Supabase Data Fetching in Server Component
DESCRIPTION: A basic Next.js 13 Server Component that fetches and displays posts from Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
import supabase from '../../utils/supabase'

export default async function Posts() {
  const { data: posts } = await supabase.from('posts').select()
  return <pre>{JSON.stringify(posts, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Optimized Security Definer Function Implementation
DESCRIPTION: Implementation of a security definer function that improves performance by bypassing RLS checks when validating user roles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_14

LANGUAGE: sql
CODE:
```
create function private.has_good_role()
returns boolean
language plpgsql
security definer -- will run as the creator
as $$
begin
  return exists (
    select 1 from roles_table
    where (select auth.uid()) = user_id and role = 'good_role'
  );
end;
$$;

-- Update our policy to use this function:
create policy "rls_test_select"
on test_table
to authenticated
using ( private.has_good_role() );
```

----------------------------------------

TITLE: Code Exchange API Route Implementation
DESCRIPTION: Server-side authentication code exchange route for handling OAuth callbacks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { NextApiHandler } from 'next'
import { createPagesServerClient } from '@supabase/auth-helpers-nextjs'

const handler: NextApiHandler = async (req, res) => {
  const { code } = req.query

  if (code) {
    const supabase = createPagesServerClient({ req, res })
    await supabase.auth.exchangeCodeForSession(String(code))
  }

  res.redirect('/')
}

export default handler
```

----------------------------------------

TITLE: Creating a has_role() Function in SQL
DESCRIPTION: This security definer function checks if the current user has a specific role. It's designed to be used in RLS policies to bypass RLS on the roles table for better performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION has_role()
    RETURNS boolean as
$$
begin
    return exists (select 1 from roles_table where auth.uid() = user_id and role = 'good_role')
end;
$$ language plpgsql security definer;
```

----------------------------------------

TITLE: Setting up Database Schema in Supabase SQL Editor
DESCRIPTION: This SQL snippet creates the necessary tables and relationships for a product management system in Supabase. It defines tables for products, prices, and users, along with their respective columns and constraints.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/kotlin_project_setup.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
<$Partial path="product_management_sql_template.mdx" />
```

----------------------------------------

TITLE: Implementing Magic Link Authentication in RedwoodJS with Supabase
DESCRIPTION: React component that implements email-based magic link authentication using Supabase in a RedwoodJS application. It handles user input and authentication state.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_8

LANGUAGE: jsx
CODE:
```
import { useState } from 'react'
import { useAuth } from '@redwoodjs/auth'

const Auth = () => {
  const { logIn } = useAuth()
  const [loading, setLoading] = useState(false)
  const [email, setEmail] = useState('')

  const handleLogin = async (email) => {
    try {
      setLoading(true)
      const { error } = await logIn({ email })
      if (error) throw error
      alert('Check your email for the login link!')
    } catch (error) {
      alert(error.error_description || error.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="row flex-center flex">
      <div className="col-6 form-widget">
        <h1 className="header">Supabase + RedwoodJS</h1>
        <p className="description">Sign in via magic link with your email below</p>
        <div>
          <input
            className="inputField"
            type="email"
            placeholder="Your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
        </div>
        <div>
          <button
            onClick={(e) => {
              e.preventDefault()
              handleLogin(email)
            }}
            className={'button block'}
            disabled={loading}
          >
            {loading ? <span>Loading</span> : <span>Send magic link</span>}
          </button>
        </div>
      </div>
    </div>
  )
}

export default Auth
```

----------------------------------------

TITLE: Creating Star Wars Database Schema
DESCRIPTION: Creates sample tables for planets and people with Star Wars data, including primary keys and foreign key relationships.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table planets (
  id serial primary key,
  name text
);

insert into planets
  (id, name)
values
  (1, 'Tattoine'),
  (2, 'Alderaan'),
  (3, 'Kashyyyk');

create table people (
  id serial primary key,
  name text,
  planet_id bigint references planets
);

insert into people
  (id, name, planet_id)
values
  (1, 'Anakin Skywalker', 1),
  (2, 'Luke Skywalker', 1),
  (3, 'Princess Leia', 2),
  (4, 'Chewbacca', 3);
```

----------------------------------------

TITLE: Installing Supabase SSR Package
DESCRIPTION: Command to install the Supabase SSR package, which configures Supabase to use cookies for authentication in server-side rendered applications.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install @supabase/ssr @supabase/supabase-js
```

----------------------------------------

TITLE: Creating a Server Component with Edge Runtime in Next.js (JavaScript)
DESCRIPTION: Implements a Next.js server component running on the Edge runtime that fetches todos from Supabase. It uses createServerComponentClient to initialize Supabase with cookie-based authentication, configures the component for edge runtime, and renders the fetched data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_24

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'

export const runtime = 'edge'
export const dynamic = 'force-dynamic'

export default async function Page() {
  const cookieStore = cookies()

  const supabase = createServerComponentClient({
    cookies: () => cookieStore,
  })

  const { data } = await supabase.from('todos').select()
  return <pre>{JSON.stringify(data, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Creating WHERE Clause Indexes in PostgreSQL
DESCRIPTION: Creating indexes for columns used in WHERE clause filtering to improve query performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create index idx_customers_sign_up_date on customers (sign_up_date);

create index idx_orders_status on orders (status);
```

----------------------------------------

TITLE: Creating a Static Route Handler with Supabase in Next.js (JavaScript)
DESCRIPTION: Implements a Next.js static route handler that inserts data into Supabase. It uses the standard createClient from supabase-js since there's no user context at build time, processes the POST request data, and returns the inserted record.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_30

LANGUAGE: jsx
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { NextResponse } from 'next/server'

export async function POST(request) {
  const { title } = await request.json()

  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  )

  const { data } = await supabase.from('todos').insert({ title }).select()
  return NextResponse.json(data)
}
```

----------------------------------------

TITLE: Supabase Login and Signup Actions Server-Side
DESCRIPTION: This snippet contains server-side logic for login and signup actions using Supabase in a Next.js environment. It depends on 'next/cache', 'next/navigation', and '@/utils/supabase/server'. It accepts form data and attempts user authentication or registration with Supabase, redirecting on success or failure.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'

import { createClient } from '@/utils/supabase/server'

export async function login(formData: FormData) {
  const supabase = await createClient()

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  }

  const { error } = await supabase.auth.signInWithPassword(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/')
}

export async function signup(formData: FormData) {
  const supabase = await createClient()

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  }

  const { error } = await supabase.auth.signUp(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/')
}
```

----------------------------------------

TITLE: Creating and Populating Supabase Posts Table
DESCRIPTION: SQL script to create a posts table with UUID primary key and timestamps, then populate it with example data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table if not exists posts (
  id uuid default gen_random_uuid() primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  title text,
  content text
);

insert into posts(title, content)
values
  ('My first post', 'Wow! What a great post.'),
  ('My second post', 'This one needs a little work!');
```

----------------------------------------

TITLE: Creating a Supabase Server Client for Next.js
DESCRIPTION: Utility function to create a Supabase server client with cookie handling for authentication in a Next.js application. This handles cookie operations for server-side rendering and server components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nextjs.mdx#2025-04-21_snippet_3

LANGUAGE: ts
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
```

----------------------------------------

TITLE: Implementing OAuth and Magic Link Authentication in React Native
DESCRIPTION: This code snippet demonstrates how to implement OAuth (with GitHub) and magic link authentication in a React Native app using Supabase. It includes functions for handling deep linking and creating sessions from URL parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_7

LANGUAGE: tsx
CODE:
```
import { Button } from 'react-native'
import { makeRedirectUri } from 'expo-auth-session'
import * as QueryParams from 'expo-auth-session/build/QueryParams'
import * as WebBrowser from 'expo-web-browser'
import * as Linking from 'expo-linking'
import { supabase } from 'app/utils/supabase'

WebBrowser.maybeCompleteAuthSession() // required for web only
const redirectTo = makeRedirectUri()

const createSessionFromUrl = async (url: string) => {
  const { params, errorCode } = QueryParams.getQueryParams(url)

  if (errorCode) throw new Error(errorCode)
  const { access_token, refresh_token } = params

  if (!access_token) return

  const { data, error } = await supabase.auth.setSession({
    access_token,
    refresh_token,
  })
  if (error) throw error
  return data.session
}

const performOAuth = async () => {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'github',
    options: {
      redirectTo,
      skipBrowserRedirect: true,
    },
  })
  if (error) throw error

  const res = await WebBrowser.openAuthSessionAsync(data?.url ?? '', redirectTo)

  if (res.type === 'success') {
    const { url } = res
    await createSessionFromUrl(url)
  }
}

const sendMagicLink = async () => {
  const { error } = await supabase.auth.signInWithOtp({
    email: 'example@email.com',
    options: {
      emailRedirectTo: redirectTo,
    },
  })

  if (error) throw error
  // Email sent.
}

export default function Auth() {
  // Handle linking into app from email app.
  const url = Linking.useURL()
  if (url) createSessionFromUrl(url)

  return (
    <>
      <Button onPress={performOAuth} title="Sign in with Github" />
      <Button onPress={sendMagicLink} title="Send Magic Link" />
    </>
  )
}
```

----------------------------------------

TITLE: Enabling RLS and Creating Policies for Direct Postgres Connection
DESCRIPTION: Sets up Row Level Security on a document_sections table with a policy that restricts users to only see document sections that belong to documents they own. Uses a custom session variable 'app.current_user_id' to identify the current user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- enable row level security
alter table document_sections enable row level security;

-- setup RLS for select operations
create policy "Users can query their own document sections"
on document_sections for select to authenticated using (
  document_id in (
    select id
    from external.documents
    where owner_id = current_setting('app.current_user_id')::bigint
  )
);
```

----------------------------------------

TITLE: Creating Table with Identity Primary Key in SQL
DESCRIPTION: Creates a movies table with an auto-incrementing bigint primary key using the IDENTITY feature in PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table movies (
  id bigint generated always as identity primary key
);
```

----------------------------------------

TITLE: Creating Public Access RLS Policy
DESCRIPTION: SQL policy to allow unauthenticated access to the profiles table using the anon role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "Allow public access" on profiles to anon for
select
  using (true);
```

----------------------------------------

TITLE: Using Supabase in Next.js Client Components
DESCRIPTION: Example showing how to use the Supabase client in a Next.js Client Component to fetch todos. This approach utilizes the createClientComponentClient function and React hooks to manage state and fetch data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_16

LANGUAGE: jsx
CODE:
```
'use client'

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useEffect, useState } from 'react'

export default function Page() {
  const [todos, setTodos] = useState()
  const supabase = createClientComponentClient()

  useEffect(() => {
    const getData = async () => {
      const { data } = await supabase.from('todos').select()
      setTodos(data)
    }

    getData()
  }, [])

  return todos ? <pre>{JSON.stringify(todos, null, 2)}</pre> : <p>Loading todos...</p>
}
```

----------------------------------------

TITLE: Creating Login and Registration Form with Supabase Authentication in React Native
DESCRIPTION: This component implements a login page with email/password authentication using Supabase. It handles both sign-in and registration functionalities with form validation and loading state management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { Alert, View, Button, TextInput, StyleSheet, Text, TouchableOpacity } from 'react-native'
import { useState } from 'react'
import React from 'react'
import Spinner from 'react-native-loading-spinner-overlay'
import { supabase } from '../config/initSupabase'

const Login = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)

  // Sign in with email and password
  const onSignInPress = async () => {
    setLoading(true)

    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })

    if (error) Alert.alert(error.message)
    setLoading(false)
  }

  // Create a new user
  const onSignUpPress = async () => {
    setLoading(true)
    const { error } = await supabase.auth.signUp({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    setLoading(false)
  }

  return (
    <View style={styles.container}>
      <Spinner visible={loading} />

      <Text style={styles.header}>My Cloud</Text>

      <TextInput
        autoCapitalize="none"
        placeholder="john@doe.com"
        value={email}
        onChangeText={setEmail}
        style={styles.inputField}
      />
      <TextInput
        placeholder="password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
        style={styles.inputField}
      />

      <TouchableOpacity onPress={onSignInPress} style={styles.button}>
        <Text style={{ color: '#fff' }}>Sign in</Text>
      </TouchableOpacity>
      <Button onPress={onSignUpPress} title="Create Account" color={'#fff'}></Button>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 200,
    padding: 20,
    backgroundColor: '#151515',
  },
  header: {
    fontSize: 30,
    textAlign: 'center',
    margin: 50,
    color: '#fff',
  },
  inputField: {
    marginVertical: 4,
    height: 50,
    borderWidth: 1,
    borderColor: '#2b825b',
    borderRadius: 4,
    padding: 10,
    color: '#fff',
    backgroundColor: '#363636',
  },
  button: {
    marginVertical: 15,
    alignItems: 'center',
    backgroundColor: '#2b825b',
    padding: 12,
    borderRadius: 4,
  },
})

export default Login
```

----------------------------------------

TITLE: Minimal JWT Access Token Hook
DESCRIPTION: SQL function that implements a minimal JWT token hook to only include essential claims and reduce token size. Uses Postgres JSON functions to manipulate claims.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create or replace function public.custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
as $$
  declare
    original_claims jsonb;
    new_claims jsonb;
    claim text;
  begin
    original_claims = event->'claims';
    new_claims = '{}'::jsonb;

    foreach claim in array array[
      -- add claims you want to keep here
      'iss',
      'aud', 
      'exp',
      'iat',
      'sub',
      'role',
      'aal',
      'session_id'
   ] loop
      if original_claims ? claim then
        -- original_claims contains one of the listed claims, set it on new_claims
        new_claims = jsonb_set(new_claims, array[claim], original_claims->claim);
      end if;
    end loop;

    return jsonb_build_object('claims', new_claims);
  end
$$;
```

----------------------------------------

TITLE: Allowing Authenticated Uploads to User-Specific Folder in SQL
DESCRIPTION: This policy allows authenticated users to upload files to a folder named after their user ID inside a specific bucket.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/access-control.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create policy "Allow authenticated uploads"
on storage.objects
for insert
to authenticated
with check (
  bucket_id = 'my_bucket_id' and
  (storage.foldername(name))[1] = (select auth.uid()::text)
);
```

----------------------------------------

TITLE: Declaring Supabase Environment Variables - Text
DESCRIPTION: Rename `.env.example` to `.env.local` and populate it with your specific Supabase project URL and Anon Key, found in your Supabase dashboard API settings. These environment variables are essential for the Next.js app to connect to your Supabase backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/nextjs.mdx#_snippet_2

LANGUAGE: text
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=your-project-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
```

----------------------------------------

TITLE: Database Schema with Row Level Security for Todo List in SQL
DESCRIPTION: SQL schema for creating a todos table with row-level security policies. Defines the table structure with user references and implements policies for CRUD operations that restrict users to accessing only their own todos.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/todo-list/nextjs-todo-list/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table todos (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  task text check (char_length(task) > 3),
  is_complete boolean default false,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table todos enable row level security;

create policy "Individuals can create todos." on todos for
    insert with check ((select auth.uid()) = user_id);

create policy "Individuals can view their own todos. " on todos for
    select using ((select auth.uid()) = user_id);

create policy "Individuals can update their own todos." on todos for
    update using ((select auth.uid()) = user_id);

create policy "Individuals can delete their own todos." on todos for
    delete using ((select auth.uid()) = user_id);
```

----------------------------------------

TITLE: Implementing Auth Callback Route Handler in TypeScript
DESCRIPTION: TypeScript version of the route handler for processing authentication code exchange with type safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

import type { NextRequest } from 'next/server'
import type { Database } from '@/lib/database.types'

export async function GET(request: NextRequest) {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')

  if (code) {
    const cookieStore = await cookies()
    const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })
    await supabase.auth.exchangeCodeForSession(code)
  }

  return NextResponse.redirect(requestUrl.origin)
}
```

----------------------------------------

TITLE: Creating a Route Handler with Edge Runtime in Next.js (JavaScript)
DESCRIPTION: Implements a Next.js route handler running on the Edge runtime that inserts a todo in Supabase. It uses createRouteHandlerClient to initialize Supabase with cookie-based authentication, configures the handler for edge runtime, and returns the inserted data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_26

LANGUAGE: jsx
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'

export const runtime = 'edge'
export const dynamic = 'force-dynamic'

export async function POST(request) {
  const { title } = await request.json()
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })

  const { data } = await supabase.from('todos').insert({ title }).select()
  return NextResponse.json(data)
}
```

----------------------------------------

TITLE: Initializing Supabase Client in Flutter Main Function
DESCRIPTION: This Dart code initializes the Supabase client in the main function of a Flutter app, using the project URL and public API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/flutter.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SUPABASE_ANON_KEY',
  );
  runApp(MyApp());
}
```

----------------------------------------

TITLE: Creating Object Deletion Policy in Supabase with SQL
DESCRIPTION: This SQL snippet establishes a policy allowing authenticated users to delete their objects. It checks ownership by matching the object owner with the authenticated user ID. The policy is applied to the delete operation on the storage.objects table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/delete-objects.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "User can delete their own objects"
on storage.objects
for delete
TO authenticated
USING (
    owner = (select auth.uid()::text)
);
```

----------------------------------------

TITLE: Using EXPLAIN ANALYZE in PostgreSQL
DESCRIPTION: Demonstrates how to analyze query execution plans using EXPLAIN ANALYZE to understand query performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
EXPLAIN (ANALYZE) SELECT *
FROM students
WHERE surname = 'Krobb';
```

----------------------------------------

TITLE: User Signup - JavaScript
DESCRIPTION: Creates a new user in Supabase with additional metadata like first_name and age during signup.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!)

// ---cut---
const { data, error } = await supabase.auth.signUp({
  email: 'valid.email@supabase.io',
  password: 'example-password',
  options: {
    data: {
      first_name: 'John',
      age: 27,
    },
  },
})
```

----------------------------------------

TITLE: Creating Todos Table in SQL
DESCRIPTION: Creates a new table called 'todos' with id and task columns to store tasks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/quickstart.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table todos (
  id serial primary key,
  task text
);
```

----------------------------------------

TITLE: Creating Inner Product Search Function with pgvector in PGlite
DESCRIPTION: This function performs vector similarity search using pgvector's inner product operator. It takes an embedding vector, match threshold, and result limit as parameters, and returns the most similar items from the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
export const search = async (db, embedding, match_threshold = 0.8, limit = 3) => {
  const res = await db.query(
    `
    select * from embeddings

    -- The inner product is negative, so we negate match_threshold
    where embeddings.embedding <#> $1 < $2

    -- Our embeddings are normalized to length 1, so cosine similarity
    -- and inner product will produce the same query results.
    -- Using inner product which can be computed faster.
    --
    -- For the different distance functions, see https://github.com/pgvector/pgvector
    order by embeddings.embedding <#> $1
    limit $3;
    `,
    [JSON.stringify(embedding), -Number(match_threshold), Number(limit)]
  )
  return res.rows
}
```

----------------------------------------

TITLE: Initializing Supabase Client in TypeScript
DESCRIPTION: Create a Supabase client instance using the environment variables in a utils file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.EXPO_PUBLIC_SUPABASE_URL,
  process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY
)
```

----------------------------------------

TITLE: Querying Data with RLS Policies Applied
DESCRIPTION: Performs a vector similarity search on document sections that automatically respects Row Level Security. Only document sections owned by the current user will be returned due to the RLS policy.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
-- Only document sections owned by the user are returned
select *
from document_sections
where document_sections.embedding <#> embedding < -match_threshold
order by document_sections.embedding <#> embedding;
```

----------------------------------------

TITLE: Handling Authentication Client Component in JavaScript
DESCRIPTION: This JavaScript code snippet showcases a client-side component for handling user authentication in a Next.js application using Supabase. The component manages user sign-ups, sign-ins, and sign-outs by triggering corresponding methods on a Supabase client. It connects to browser event handlers, updating the internal state and refreshing the page after authentication actions. The dependencies include @supabase/auth-helpers-nextjs and next/navigation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_6

LANGUAGE: JavaScript
CODE:
```
'use client'

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useRouter } from 'next/navigation'
import { useState } from 'react'

export default function Login() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const router = useRouter()
  const supabase = createClientComponentClient()

  const handleSignUp = async () => {
    await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `${location.origin}/auth/callback`,
      },
    })
    router.refresh()
  }

  const handleSignIn = async () => {
    await supabase.auth.signInWithPassword({
      email,
      password,
    })
    router.refresh()
  }

  const handleSignOut = async () => {
    await supabase.auth.signOut()
    router.refresh()
  }

  return (
    <>
      <input name="email" onChange={(e) => setEmail(e.target.value)} value={email} />
      <input
        type="password"
        name="password"
        onChange={(e) => setPassword(e.target.value)}
        value={password}
      />
      <button onClick={handleSignUp}>Sign up</button>
      <button onClick={handleSignIn}>Sign in</button>
      <button onClick={handleSignOut}>Sign out</button>
    </>
  )
}

```

----------------------------------------

TITLE: Implementing Similarity Search Function in PostgreSQL
DESCRIPTION: SQL function to perform similarity search on document embeddings. It uses cosine distance to find similar documents based on a query embedding.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create or replace function match_documents (
  query_embedding vector(1536),
  match_threshold float,
  match_count int
)
returns table (
  id bigint,
  content text,
  similarity float
)
language sql stable
as $$
  select
    documents.id,
    documents.content,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where documents.embedding <=> query_embedding < 1 - match_threshold
  order by documents.embedding <=> query_embedding
  limit match_count;
$$;
```

----------------------------------------

TITLE: Initializing Supabase Client in Vue
DESCRIPTION: TypeScript helper file to initialize the Supabase client using environment variables, making it available throughout the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL as string;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY as string;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);
```

----------------------------------------

TITLE: Creating INSERT Policy for Profiles
DESCRIPTION: Example of creating an INSERT policy that allows authenticated users to create their own profiles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- 1. Create table
create table profiles (
  id uuid primary key,
  user_id uuid references auth.users,
  avatar_url text
);

-- 2. Enable RLS
alter table profiles enable row level security;

-- 3. Create Policy
create policy "Users can create a profile."
on profiles for insert
to authenticated                          -- the Postgres Role (recommended)
with check ( (select auth.uid()) = user_id );      -- the actual Policy
```

----------------------------------------

TITLE: Building an Infinite Scroll Component with React, Supabase, and Framer Motion
DESCRIPTION: A complete React component that implements infinite scrolling for tickets data from Supabase. It uses useRef to track container position, debounce from lodash to optimize scroll performance, and Framer Motion for animated entries. The component includes server-side data fetching with pagination support.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_7

LANGUAGE: jsx
CODE:
```
import { useEffect, useState, useRef } from 'react'
import { createClient } from '@supabase/supabase-js'
import { debounce } from 'lodash'
import { motion } from 'framer-motion'

const supabase = createClient('supabase-url', 'supabase-key')

export default function TicketsPage({ tickets }) {
  const PAGE_COUNT = 20
  const containerRef = useRef(null)
  const [loadedTickets, setLoadedTickets] = useState(tickets)
  const [offset, setOffset] = useState(1)
  const [isLoading, setIsLoading] = useState(false)
  const [isInView, setIsInView] = useState(false)

  const handleScroll = (container) => {
    if (containerRef.current && typeof window !== 'undefined') {
      const container = containerRef.current
      const { bottom } = container.getBoundingClientRect()
      const { innerHeight } = window
      setIsInView((prev) => bottom <= innerHeight)
    }
  }

  useEffect(() => {
    const handleDebouncedScroll = debounce(() => !isLast && handleScroll(), 200)
    window.addEventListener('scroll', handleScroll)
    return () => {
      window.removeEventListener('scroll', handleScroll)
    }
  }, [])

  useEffect(() => {
    if (isInView) {
      loadMoreTickets(offset)
    }
  }, [isInView])

  const loadMoreTickets = async (offset: number) => {
    setIsLoading(true)
    setOffset((prev) => prev + 1)
    const { data: newTickets } = await fetchTickets(offset, PAGE_COUNT)
    setLoadedTickets((prevTickets) => [...prevTickets, ...newTickets])
    setIsLoading(false)
  }

  const fetchTickets = async (offset) => {
    const from = offset * PAGE_COUNT
    const to = from + PAGE_COUNT - 1

    const { data } = await supabase!
        .from('my_tickets_table')
        .select('*')
        .range(from, to)
        .order('createdAt', { ascending: false })

    return data
  }

  return (
    <div ref={containerRef}>
      {
        loadedTickets.map((ticket, index) => {
          const recalculatedDelay =
            i >= PAGE_COUNT * 2 ? (i - PAGE_COUNT * (offset - 1)) / 15 : i / 15

          return (
            <motion.div
              key={ticket.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{
                duration: 0.4,
                ease: [0.25, 0.25, 0, 1],
                delay: recalculatedDelay,
              }}
            >
              {/* Actual ticket component */}
            </motion.div>
          )
        })
      }
    </div>
  )

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const { data: tickets } = await supabase!
    .from('my_tickets_table')
    .select('*')
    .order('createdAt', { ascending: false })
    .limit(20)

  return {
    props: {
      tickets,
    },
  }
}
```

----------------------------------------

TITLE: Copy object across buckets using Supabase
DESCRIPTION: Copies an object from one bucket to another using the Supabase storage API. This snippet demonstrates how to specify the destination bucket using the `destinationBucket` option. Requires `@supabase/supabase-js` and a valid Supabase client instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
await supabase.storage.from('avatars').copy('public/avatar1.png', 'private/avatar2.png', {
  destinationBucket: 'avatars2',
})
```

----------------------------------------

TITLE: Creating a Basic B-Tree Index in PostgreSQL
DESCRIPTION: Creates a B-Tree index on the age column of the persons table. This improves query performance when filtering by age by allowing PostgreSQL to find matching rows without scanning the entire table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create index idx_persons_age on persons (age);
```

----------------------------------------

TITLE: Using Typed Supabase Client with useSupabaseClient in Next.js
DESCRIPTION: This snippet shows how to use the useSupabaseClient hook with TypeScript in Next.js to get a typed Supabase client. It demonstrates how to pass CLI-generated types for enhanced type safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
import { useSupabaseClient } from '@supabase/auth-helpers-react'
import { Database } from '../database.types'

const supabaseClient = useSupabaseClient<Database>()
```

----------------------------------------

TITLE: Implementing Account Page with Profile Management
DESCRIPTION: Creates a complete account management page that includes profile data management, avatar upload integration, and sign-out functionality. Handles profile updates and displays user information using Supabase as the backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_9

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:supabase_quickstart/components/avatar.dart';
import 'package:supabase_quickstart/main.dart';
import 'package:supabase_quickstart/pages/login_page.dart';

class AccountPage extends StatefulWidget {
  const AccountPage({super.key});

  @override
  State<AccountPage> createState() => _AccountPageState();
}

class _AccountPageState extends State<AccountPage> {
  final _usernameController = TextEditingController();
  final _websiteController = TextEditingController();

  String? _avatarUrl;
  var _loading = true;

  Future<void> _getProfile() async {
    setState(() {
      _loading = true;
    });

    try {
      final userId = supabase.auth.currentSession!.user.id;
      final data =
          await supabase.from('profiles').select().eq('id', userId).single();
      _usernameController.text = (data['username'] ?? '') as String;
      _websiteController.text = (data['website'] ?? '') as String;
      _avatarUrl = (data['avatar_url'] ?? '') as String;
    } on PostgrestException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        setState(() {
          _loading = false;
        });
      }
    }
  }

  Future<void> _updateProfile() async {
    setState(() {
      _loading = true;
    });
    final userName = _usernameController.text.trim();
    final website = _websiteController.text.trim();
    final user = supabase.auth.currentUser;
    final updates = {
      'id': user!.id,
      'username': userName,
      'website': website,
      'updated_at': DateTime.now().toIso8601String(),
    };
    try {
      await supabase.from('profiles').upsert(updates);
      if (mounted) context.showSnackBar('Successfully updated profile!');
    } on PostgrestException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        setState(() {
          _loading = false;
        });
      }
    }
  }

  Future<void> _signOut() async {
    try {
      await supabase.auth.signOut();
    } on AuthException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (_) => const LoginPage()),
        );
      }
    }
  }

  Future<void> _onUpload(String imageUrl) async {
    try {
      final userId = supabase.auth.currentUser!.id;
      await supabase.from('profiles').upsert({
        'id': userId,
        'avatar_url': imageUrl,
      });
      if (mounted) {
        const SnackBar(
          content: Text('Updated your profile image!'),
        );
      }
    } on PostgrestException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    }
    if (!mounted) {
      return;
    }

    setState(() {
      _avatarUrl = imageUrl;
    });
  }

  @override
  void initState() {
    super.initState();
    _getProfile();
  }

  @override
  void dispose() {
    _usernameController.dispose();
    _websiteController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Profile')),
      body: ListView(
        padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 12),
        children: [
          Avatar(
            imageUrl: _avatarUrl,
            onUpload: _onUpload,
          ),
          const SizedBox(height: 18),
          TextFormField(
            controller: _usernameController,
            decoration: const InputDecoration(labelText: 'User Name'),
          ),
          const SizedBox(height: 18),
          TextFormField(
            controller: _websiteController,
            decoration: const InputDecoration(labelText: 'Website'),
          ),
          const SizedBox(height: 18),
          ElevatedButton(
            onPressed: _loading ? null : _updateProfile,
            child: Text(_loading ? 'Saving...' : 'Update'),
          ),
          const SizedBox(height: 18),
          TextButton(onPressed: _signOut, child: const Text('Sign Out')),
        ],
      ),
    );
  }
}
```

----------------------------------------

TITLE: Implementing Advanced Search with OpenAI Embeddings and GPT-3 in Supabase Edge Function
DESCRIPTION: This Edge Function extends the simple search by using OpenAI embeddings to find relevant documents, then using GPT-3 to generate a comprehensive answer based on the matched documents. It includes token counting to manage context size within OpenAI's limits.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
import { serve } from 'https://deno.land/std@0.170.0/http/server.ts'
import 'https://deno.land/x/xhr@0.2.1/mod.ts'
import { createClient } from 'jsr:@supabase/supabase-js@2'
import GPT3Tokenizer from 'https://esm.sh/gpt3-tokenizer@1.1.5'
import { Configuration, OpenAIApi } from 'https://esm.sh/openai@3.1.0'
import { oneLine, stripIndent } from 'https://esm.sh/common-tags@1.8.2'
import { supabaseClient } from './lib/supabase'

export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  // Search query is passed in request payload
  const { query } = await req.json()

  // OpenAI recommends replacing newlines with spaces for best results
  const input = query.replace(/\n/g, ' ')

  const configuration = new Configuration({ apiKey: '<YOUR_OPENAI_API_KEY>' })
  const openai = new OpenAIApi(configuration)

  // Generate a one-time embedding for the query itself
  const embeddingResponse = await openai.createEmbedding({
    model: 'text-embedding-ada-002',
    input,
  })

  const [{ embedding }] = embeddingResponse.data.data

  // Fetching whole documents for this simple example.
  //
  // Ideally for context injection, documents are chunked into
  // smaller sections at earlier pre-processing/embedding step.
  const { data: documents } = await supabaseClient.rpc('match_documents', {
    query_embedding: embedding,
    match_threshold: 0.78, // Choose an appropriate threshold for your data
    match_count: 10, // Choose the number of matches
  })

  const tokenizer = new GPT3Tokenizer({ type: 'gpt3' })
  let tokenCount = 0
  let contextText = ''

  // Concat matched documents
  for (let i = 0; i < documents.length; i++) {
    const document = documents[i]
    const content = document.content
    const encoded = tokenizer.encode(content)
    tokenCount += encoded.text.length

    // Limit context to max 1500 tokens (configurable)
    if (tokenCount > 1500) {
      break
    }

    contextText += `${content.trim()}\n---\n`
  }

  const prompt = stripIndent`${oneLine`
    You are a very enthusiastic Supabase representative who loves
    to help people! Given the following sections from the Supabase
    documentation, answer the question using only that information,
    outputted in markdown format. If you are unsure and the answer
    is not explicitly written in the documentation, say
    "Sorry, I don't know how to help with that."`}

    Context sections:
    ${contextText}

    Question: """
    ${query}
    """

    Answer as markdown (including related code snippets if available):
  `

  // In production we should handle possible errors
  const completionResponse = await openai.createCompletion({
    model: 'text-davinci-003',
    prompt,
    max_tokens: 512, // Choose the max allowed tokens in completion
    temperature: 0, // Set to 0 for deterministic results
  })

  const {
    id,
    choices: [{ text }],
  } = completionResponse.data

  return new Response(JSON.stringify({ id, text }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  })
})
```

----------------------------------------

TITLE: Listening to Multiple Changes in Dart with Supabase Realtime
DESCRIPTION: Creates a Dart channel that listens to different events on different tables simultaneously. The example shows monitoring all events on the 'messages' table and only INSERT events on the 'users' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_31

LANGUAGE: dart
CODE:
```
supabase
    .channel('db-changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.all,
        schema: 'public',
        table: 'messages',
        callback: (payload) => print(payload))
    .onPostgresChanges(
        event: PostgresChangeEvent.insert,
        schema: 'public',
        table: 'users',
        callback: (payload) => print(payload))
    .subscribe();
```

----------------------------------------

TITLE: Implementing Login Page with Supabase in Next.js
DESCRIPTION: Creates a login page component with Supabase authentication, including sign-in and sign-up functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
import { useRouter } from 'next/router'
import { useState } from 'react'

import { createClient } from '@/utils/supabase/component'

export default function LoginPage() {
  const router = useRouter()
  const supabase = createClient()

  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  async function logIn() {
    const { error } = await supabase.auth.signInWithPassword({ email, password })
    if (error) {
      console.error(error)
    }
    router.push('/')
  }

  async function signUp() {
    const { error } = await supabase.auth.signUp({ email, password })
    if (error) {
      console.error(error)
    }
    router.push('/')
  }

  return (
    <main>
      <form>
        <label htmlFor="email">Email:</label>
        <input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
        <label htmlFor="password">Password:</label>
        <input
          id="password"
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="button" onClick={logIn}>
          Log in
        </button>
        <button type="button" onClick={signUp}>
          Sign up
        </button>
      </form>
    </main>
  )
}
```

----------------------------------------

TITLE: Signing Out from Supabase (JavaScript)
DESCRIPTION: This snippet shows how to sign out a user from a Supabase application using JavaScript. It requires the Supabase client setup and calls the `signOut` method to remove the user from the session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Signing in with Magic Link using JavaScript
DESCRIPTION: Demonstrates signing in a user via a magic link using Supabase JavaScript client. Requires Supabase JS library and a valid Supabase URL and key. Inputs: a user's email. Automatically signs up an unsigned user unless specified otherwise.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('url', 'anonKey')

// ---cut---
async function signInWithEmail() {
  const { data, error } = await supabase.auth.signInWithOtp({
    email: 'valid.email@supabase.io',
    options: {
      // set this to false if you do not want the user to be automatically signed up
      shouldCreateUser: false,
      emailRedirectTo: 'https://example.com/welcome',
    },
  })
}
```

----------------------------------------

TITLE: Creating Test Table with RLS in PostgreSQL
DESCRIPTION: Sets up a todos table with Row Level Security enabled and creates a policy to restrict access to authenticated users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/overview.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create a simple todos table
create table todos (
id uuid primary key default gen_random_uuid(),
task text not null,
user_id uuid references auth.users not null,
completed boolean default false
);

-- Enable RLS
alter table todos enable row level security;

-- Create a policy
create policy "Users can only access their own todos"
on todos for all -- this policy applies to all operations
to authenticated
using ((select auth.uid()) = user_id);
```

----------------------------------------

TITLE: Creating a Next.js App with Supabase Template
DESCRIPTION: Command to create a new Next.js application using the with-supabase template, which comes pre-configured with cookie-based authentication, TypeScript, and Tailwind CSS.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nextjs.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app -e with-supabase
```

----------------------------------------

TITLE: Generated TypeScript Types for Movies Table
DESCRIPTION: This TypeScript code shows the automatically generated types for the 'movies' table, including types for select, insert, and update operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]

export interface Database {
  public: {
    Tables: {
      movies: {
        Row: {               // the data expected from .select()
          id: number
          name: string
          data: Json | null
        }
        Insert: {            // the data to be passed to .insert()
          id?: never         // generated columns must not be supplied
          name: string       // `not null` columns with no default must be supplied
          data?: Json | null // nullable columns can be omitted
        }
        Update: {            // the data to be passed to .update()
          id?: never
          name?: string      // `not null` columns are optional on .update()
          data?: Json | null
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Row Level Security Policies in Supabase
DESCRIPTION: Sets up Row Level Security for the database schema including helper functions for role checking and post limit verification. Defines policies for profiles, organizations, org members, posts, and comments based on user roles and membership status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
-- Create a private schema to store all security definer functions utils
-- As such functions should never be in a API exposed schema
create schema if not exists private;
-- Helper function for role checks
create or replace function private.get_user_org_role(org_id bigint, user_id uuid)
returns text
set search_path = ''
as $$
  select role from public.org_members
  where org_id = $1 and user_id = $2;
-- Note the use of security definer to avoid RLS checking recursion issue
-- see: https://supabase.com/docs/guides/database/postgres/row-level-security#use-security-definer-functions
$$ language sql security definer;
-- Helper utils to check if an org is below the max post limit
create or replace function private.can_add_post(org_id bigint)
returns boolean
set search_path = ''
as $$
  select (select count(*)
          from public.posts p
          where p.org_id = $1) < o.max_posts
  from public.organizations o
  where o.id = $1
$$ language sql security definer;


-- Enable RLS for all tables
alter table public.profiles enable row level security;
alter table public.organizations enable row level security;
alter table public.org_members enable row level security;
alter table public.posts enable row level security;
alter table public.comments enable row level security;

-- Profiles policies
create policy "Public profiles are viewable by everyone"
  on public.profiles for select using (true);

create policy "Users can insert their own profile"
  on public.profiles for insert with check ((select auth.uid()) = id);

create policy "Users can update their own profile"
  on public.profiles for update using ((select auth.uid()) = id)
  with check ((select auth.uid()) = id);

-- Organizations policies
create policy "Public org info visible to all"
  on public.organizations for select using (true);

create policy "Org management restricted to owners"
  on public.organizations for all using (
    private.get_user_org_role(id, (select auth.uid())) = 'owner'
  );

-- Org Members policies
create policy "Members visible to org members"
  on public.org_members for select using (
    private.get_user_org_role(org_id, (select auth.uid())) is not null
  );

create policy "Member management restricted to admins and owners"
  on public.org_members for all using (
    private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin')
  );

-- Posts policies
create policy "Complex post visibility"
  on public.posts for select using (
    -- Published non-premium posts are visible to all
    (status = 'published' and not is_premium)
    or
    -- Premium posts visible to org members only
    (status = 'published' and is_premium and
    private.get_user_org_role(org_id, (select auth.uid())) is not null)
    or
    -- All posts visible to editors and above
    private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin', 'editor')
  );

create policy "Post creation rules"
  on public.posts for insert with check (
    -- Must be org member with appropriate role
    private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin', 'editor')
    and
    -- Check org post limits for free plans
    (
      (select o.plan_type != 'free'
      from organizations o
      where o.id = org_id)
      or
      (select private.can_add_post(org_id))
    )
  );

create policy "Post update rules"
  on public.posts for update using (
    exists (
      select 1
      where
        -- Editors can update non-published posts
        (private.get_user_org_role(org_id, (select auth.uid())) = 'editor' and status != 'published')
        or
        -- Admins and owners can update any post
        private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin')
    )
  );

-- Comments policies
create policy "Comments on published posts are viewable by everyone"
  on public.comments for select using (
    exists (
      select 1 from public.posts
      where id = post_id
      and status = 'published'
    )
    and not is_deleted
  );

create policy "Authenticated users can create comments"
  on public.comments for insert with check ((select auth.uid()) = author_id);

create policy "Users can update their own comments"
  on public.comments for update using (author_id = (select auth.uid()));
```

----------------------------------------

TITLE: Fetching User Data with Supabase in JavaScript
DESCRIPTION: This snippet shows how to use the Supabase client to fetch user data on the server side within a Next.js page. It authenticates the user and returns their email and associated data from the 'users' table, handling the session validation and redirection if not authenticated.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import { createPagesServerClient } from '@supabase/auth-helpers-nextjs'

export default function ProtectedPage({ user, data }) {
  return (
    <>
      <div>Protected content for {user.email}</div>
      <pre>{JSON.stringify(data, null, 2)}</pre>
      <pre>{JSON.stringify(user, null, 2)}</pre>
    </>
  )
}

export const getServerSideProps = async (ctx) => {
  // Create authenticated Supabase Client
  const supabase = createPagesServerClient(ctx)
  // Check if we have a session
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!session)
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }

  // Run queries with RLS on the server
  const { data } = await supabase.from('users').select('*')

  return {
    props: {
      user,
      data: data ?? [],
    },
  }
}
```

----------------------------------------

TITLE: User Avatar Component with Supabase Storage Integration in Svelte
DESCRIPTION: A Svelte component for handling profile picture uploads using Supabase Storage. It allows users to upload, download, and display avatar images, with real-time previews and error handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_16

LANGUAGE: svelte
CODE:
```
<!-- src/routes/account/Avatar.svelte -->
<script lang="ts">
	import type { SupabaseClient } from '@supabase/supabase-js'
	import { createEventDispatcher } from 'svelte'

	export let size = 10
	export let url: string
	export let supabase: SupabaseClient

	let avatarUrl: string | null = null
	let uploading = false
	let files: FileList

	const dispatch = createEventDispatcher()

	const downloadImage = async (path: string) => {
		try {
			const { data, error } = await supabase.storage.from('avatars').download(path)

			if (error) {
				throw error
			}

			const url = URL.createObjectURL(data)
			avatarUrl = url
		} catch (error) {
			if (error instanceof Error) {
				console.log('Error downloading image: ', error.message)
			}
		}
	}

	const uploadAvatar = async () => {
		try {
			uploading = true

			if (!files || files.length === 0) {
				throw new Error('You must select an image to upload.')
			}

			const file = files[0]
			const fileExt = file.name.split('.').pop()
			const filePath = `${Math.random()}.${fileExt}`

			const { error } = await supabase.storage.from('avatars').upload(filePath, file)

			if (error) {
				throw error
			}

			url = filePath
			setTimeout(() => {
				dispatch('upload')
			}, 100)
		} catch (error) {
			if (error instanceof Error) {
				alert(error.message)
			}
		} finally {
			uploading = false
		}
	}

	$: if (url) downloadImage(url)
</script>

<div>
	{#if avatarUrl}
		<img
			src={avatarUrl}
			alt={avatarUrl ? 'Avatar' : 'No image'}
			class="avatar image"
			style="height: {size}em; width: {size}em;"
		/>
	{:else}
		<div class="avatar no-image" style="height: {size}em; width: {size}em;" />
	{/if}
	<input type="hidden" name="avatarUrl" value={url} />

	<div style="width: {size}em;">
		<label class="button primary block" for="single">
			{uploading ? 'Uploading ...' : 'Upload'}
		</label>
		<input
			style="visibility: hidden; position:absolute;"
			type="file"
			id="single"
			accept="image/*"
			bind:files
			on:change={uploadAvatar}
			disabled={uploading}
		/>
	</div>
</div>
```

----------------------------------------

TITLE: Creating Documents Table with Full-text and Vector Search Columns
DESCRIPTION: SQL code to create a documents table with columns for content, full-text search (tsvector), and semantic search (vector). Includes auto-generated ID and computed columns.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create table documents (
  id bigint primary key generated always as identity,
  content text,
  fts tsvector generated always as (to_tsvector('english', content)) stored,
  embedding vector(512)
);
```

----------------------------------------

TITLE: Sign Out in JavaScript
DESCRIPTION: This code snippet demonstrates how to sign out a user using the Supabase JavaScript client library. It initializes the Supabase client and calls the `signOut` function. The function returns a promise that resolves when the user is signed out or rejects with an error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Client-Side OAuth Implementation with Supabase
DESCRIPTION: Client-side implementation of OAuth authentication using Supabase's signInWithOAuth method with redirect handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient, type Provider } from '@supabase/supabase-js';
const supabase = createClient('url', 'anonKey')
const provider = 'provider' as Provider

// ---cut---
await supabase.auth.signInWithOAuth({
  provider,
  options: {
    redirectTo: `http://example.com/auth/callback`,
  },
})
```

----------------------------------------

TITLE: Implementing Main App Component
DESCRIPTION: Main App component implementation with session management and authentication state handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import 'react-native-url-polyfill/auto'
import { useState, useEffect } from 'react'
import { supabase } from './lib/supabase'
import Auth from './components/Auth'
import { View, Text } from 'react-native'
import { Session } from '@supabase/supabase-js'

export default function App() {
  const [session, setSession] = useState<Session | null>(null)

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session)
    })

    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })
  }, [])

  return (
    <View>
      <Auth />
      {session && session.user && <Text>{session.user.id}</Text>}
    </View>
  )
}
```

----------------------------------------

TITLE: API Key Validation Pre-Request Function
DESCRIPTION: Implements a pre-request function that validates custom API keys for anonymous role requests, blocking unauthorized access with HTTP 403.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
create function public.check_request()
  returns void
  language plpgsql
  security definer
  as $$
declare
  req_app_api_key text := current_setting('request.headers', true)::json->>'x-app-api-key';
  is_app_api_key_registered boolean;
  jwt_role text := current_setting('request.jwt.claims', true)::json->>'role';
begin
  if jwt_role <> 'anon' then
    -- not `anon` role, allow the request to pass
    return;
  end if;

  select
    true into is_app_api_key_registered
  from private.anon_api_keys
  where
    id = req_app_api_key::uuid
  limit 1;

  if is_app_api_key_registered is true then
    -- api key is registered, allow the request to pass
    return;
  end if;

  raise sqlstate 'PGRST' using
    message = json_build_object(
      'message', 'No registered API key found in x-app-api-key header.')::text,
    detail = json_build_object(
      'status', 403)::text;
end;
  $$;
```

----------------------------------------

TITLE: Initializing and Starting Supabase Locally with CLI
DESCRIPTION: Commands to initialize and start the Supabase stack on a local machine using the CLI. These commands set up the project and launch the entire Supabase infrastructure locally.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cli.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase init
supabase start
```

----------------------------------------

TITLE: Creating Related Tables with Foreign Keys
DESCRIPTION: Creates a categories table and adds a foreign key reference in the movies table to establish a one-to-many relationship.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create table categories (
  id bigint generated always as identity primary key,
  name text -- category name
);

alter table movies
  add column category_id bigint references categories;
```

----------------------------------------

TITLE: Using auth.getSession and auth.getUser in Supabase Authentication
DESCRIPTION: This snippet explains the usage and security implications of auth.getSession and auth.getUser methods. auth.getSession reads local storage data without server verification, while auth.getUser always fetches trusted data from the Auth server.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/get_session_warning.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
<Admonition type="danger">

Note that `auth.getSession` reads the auth token and the unencoded session data from the local storage medium. It _doesn't_ send a request back to the Supabase Auth server unless the local session is expired.

You should **never** trust the unencoded session data if you're writing server code, since it could be tampered with by the sender. If you need verified, trustworthy user data, call `auth.getUser` instead, which always makes a request to the Auth server to fetch trusted data.

</Admonition>
```

----------------------------------------

TITLE: OpenAI Text Completion Request Handler
DESCRIPTION: Implements the OpenAI completion API request with streaming response handling, including prompt construction and error management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
const prompt = codeBlock`
  ${oneLine`
    You are a very enthusiastic Supabase representative who loves
    to help people! Given the following sections from the Supabase
    documentation, answer the question using only that information,
    outputted in markdown format. If you are unsure and the answer
    is not explicitly written in the documentation, say
    "Sorry, I don't know how to help with that."
  `}

  Context sections:
  ${contextText}

  Question: """
  ${sanitizedQuery}
  """

  Answer as markdown (including related code snippets if available):
`

const completionOptions: CreateCompletionRequest = {
  model: 'gpt-3.5-turbo-instruct',
  prompt,
  max_tokens: 512,
  temperature: 0,
  stream: true,
}

const response = await fetch('https://api.openai.com/v1/completions', {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${openAiKey}`,
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(completionOptions),
})

if (!response.ok) {
  const error = await response.json()
  throw new ApplicationError('Failed to generate completion', error)
}

return new Response(response.body, {
  headers: {
    'Content-Type': 'text/event-stream',
  },
})
```

----------------------------------------

TITLE: Granting Schema Privileges
DESCRIPTION: SQL command to grant create privileges on public schema to a role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
# as postgres
postgres=> grant create on schema public to junior_dev;
GRANT
```

----------------------------------------

TITLE: Configuring Main App Component in Vue 3
DESCRIPTION: Setting up the main App component to handle authentication state and render appropriate components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-vue-3.mdx#2025-04-21_snippet_5

LANGUAGE: vue
CODE:
```
<script setup>
import { onMounted, ref } from 'vue'
import Account from './components/Account.vue'
import Auth from './components/Auth.vue'
import { supabase } from './supabase'

const session = ref()

onMounted(() => {
  supabase.auth.getSession().then(({ data }) => {
    session.value = data.session
  })

  supabase.auth.onAuthStateChange((_, _session) => {
    session.value = _session
  })
})
</script>

<template>
  <div class="container" style="padding: 50px 0 100px 0">
    <Account v-if="session" :session="session" />
    <Auth v-else />
  </div>
</template>
```

----------------------------------------

TITLE: Using Supabase in Next.js Server Components
DESCRIPTION: Example of using Supabase within a Next.js Server Component. This approach allows for server-side data fetching using the createServerComponentClient function, which requires cookies from the request.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_18

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'

export default async function Page() {
  const cookieStore = cookies()
  const supabase = createServerComponentClient({ cookies: () => cookieStore })
  const { data } = await supabase.from('todos').select()
  return <pre>{JSON.stringify(data, null, 2)}</pre>
}
```

----------------------------------------

TITLE: User Authentication Actions - JavaScript
DESCRIPTION: This JavaScript snippet defines login and signup actions for Supabase authentication through form submissions. It extracts email and password from the form data, handles user sign-up, and manages redirects using Supabase client. Includes error handling for server-side operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
// src/routes/login/+page.server.js
import { fail } from '@sveltejs/kit'

export const actions = {
  default: async ({ request, url, locals: { supabase } }) => {
    const formData = await request.formData()
    const email = formData.get('email')
    const password = formData.get('password')

    const { error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `${url.origin}/auth/callback`,
      },
    })

    if (error) {
      return fail(500, { message: 'Server error. Try again later.', success: false, email })
    }

    return {
      message: 'Please check your email for a magic link to log into the website.',
      success: true,
    }
  },
}
```

----------------------------------------

TITLE: Initializing Supabase Client in Swift
DESCRIPTION: Creates a new Supabase client instance using project URL and anonymous API key for authentication. This client instance will be used for all database interactions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ios-swiftui.mdx#2025-04-21_snippet_0

LANGUAGE: swift
CODE:
```
import Supabase

let supabase = SupabaseClient(
  supabaseURL: URL(string: "YOUR_SUPABASE_URL")!,
  supabaseKey: "YOUR_SUPABASE_ANON_KEY"
)
```

----------------------------------------

TITLE: Creating UPDATE Policy for Profiles
DESCRIPTION: Example of creating an UPDATE policy that allows users to update their own profiles using both USING and WITH CHECK clauses.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- 1. Create table
create table profiles (
  id uuid primary key,
  user_id uuid references auth.users,
  avatar_url text
);

-- 2. Enable RLS
alter table profiles enable row level security;

-- 3. Create Policy
create policy "Users can update their own profile."
on profiles for update
to authenticated                    -- the Postgres Role (recommended)
using ( (select auth.uid()) = user_id )       -- checks if the existing row complies with the policy expression
with check ( (select auth.uid()) = user_id ); -- checks if the new row complies with the policy expression
```

----------------------------------------

TITLE: Implementing RLS USING Clause in SQL Queries
DESCRIPTION: Illustrates how the USING clause in RLS appends additional conditions to the WHERE statement of a query. This example shows how RLS modifies a SELECT query to include user authentication checks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-simplified-BJTcS8.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Your Using condition
USING (
  (select auth.uid()) = user_id
);

-- Your query without RLS:
SELECT * FROM some_table
WHERE id = 5 OR id = 6;

-- Your query after RLS
SELECT * FROM some_table
WHERE
  (id = 5 OR id = 6)
    AND
  (select auth.uid()) = user_id) -- <--- added by the USING clause;
```

----------------------------------------

TITLE: Implementing User Management with Security Definer in Supabase
DESCRIPTION: Complete example of setting up a secure user management system with proper table structure, trigger function with security definer, and trigger creation for handling new users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/dashboard-errors-when-managing-users-N1ls4A.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);

create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
```

----------------------------------------

TITLE: Resetting Local Database
DESCRIPTION: Command to reset the local database and rerun all migrations to reflect recent changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
supabase db reset
```

----------------------------------------

TITLE: Creating and Configuring Profiles Table with Row Level Security in PostgreSQL
DESCRIPTION: This SQL snippet creates a 'profiles' table, sets up row level security policies, and creates a trigger for automatically creating profile entries for new users. It also configures storage buckets and policies for avatar images.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/nextjs-user-management/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create a table for public profiles
create table profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles
  for update using ((select auth.uid()) = id);

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');

create policy "Anyone can update their own avatar." on storage.objects
  for update using ( auth.uid() = owner ) with check (bucket_id = 'avatars');
```

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Creates a new Supabase project in a local folder using the Supabase CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-quickstart.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase init
```

----------------------------------------

TITLE: Defining SvelteKit TypeScript Types for Supabase Auth
DESCRIPTION: Type definitions for SvelteKit application interfaces including user session handling and authentication. Shows both pre-0.7.0 and post-0.7.0 implementations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_28

LANGUAGE: typescript
CODE:
```
/// <reference types="@sveltejs/kit" />
// See https://kit.svelte.dev/docs/types#app
// for information about these interfaces
declare namespace App {
  interface UserSession {
    user: import('@supabase/supabase-js').User
    accessToken?: string
  }

  interface Locals extends UserSession {
    error: import('@supabase/supabase-js').ApiError
  }

  interface Session extends UserSession {}

  // interface Platform {}
  // interface Stuff {}
}
```

LANGUAGE: typescript
CODE:
```
/// <reference types="@sveltejs/kit" />

// See https://kit.svelte.dev/docs/types#app
// for information about these interfaces
// and what to do when importing types
declare namespace App {
  interface Locals {
    session: import('@supabase/auth-helpers-sveltekit').SupabaseSession
  }

  interface PageData {
    session: import('@supabase/auth-helpers-sveltekit').SupabaseSession
  }

  // interface Error {}
  // interface Platform {}
}
```

----------------------------------------

TITLE: Creating Next.js Server Supabase Client
DESCRIPTION: Configures a Supabase server client in Next.js with cookie management for server-side rendering and authentication
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {}
        },
      },
    }
  )
}
```

----------------------------------------

TITLE: Enabling Realtime Functionality for Messages in Supabase
DESCRIPTION: SQL script to enable realtime functionality for the messages table. It reconfigures the realtime publication to only publish inserts and adds the messages table to the publication for instant updates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
begin;
  -- remove the supabase_realtime publication
  drop publication if exists supabase_realtime;

  -- re-create the supabase_realtime publication with no tables and only for insert
  create publication supabase_realtime with (publish = 'insert');
commit;

-- add a table to the publication
alter publication supabase_realtime add table messages;
```

----------------------------------------

TITLE: Creating a Custom Table for User Metadata in Supabase
DESCRIPTION: This SQL snippet shows how to create a custom table named `user_metadata` in the `private` schema to store user-specific metadata. The table includes a foreign key relationship to the `auth.users` table, ensuring data integrity.  It allows for flexible storage of user data beyond the default `raw_user_meta_data` and `raw_app_meta_data` fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/auth0.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create table private.user_metadata (
	id int generated always as identity,
	user_id uuid references auth.users(id) on delete cascade,
	user_metadata jsonb
);
```

----------------------------------------

TITLE: Implementing Row Level Security Policies for Supabase Trello Clone
DESCRIPTION: This SQL script sets up row level security policies for boards, user_boards, lists, and cards tables. It ensures that users can only access and modify data they are authorized to.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- boards row level security
alter table boards enable row level security;

-- Policies
create policy "Users can create boards" on boards for
  insert to authenticated with CHECK (true);

create policy "Users can view their boards" on boards for
    select using (
      id in (
        select get_boards_for_authenticated_user()
      )
    );

create policy "Users can update their boards" on boards for
    update using (
      id in (
        select get_boards_for_authenticated_user()
      )
    );

create policy "Users can delete their created boards" on boards for
    delete using ((select auth.uid()) = creator);

-- user_boards row level security
alter table user_boards enable row level security;

create policy "Users can add their boards" on user_boards for
    insert to authenticated with check (true);

create policy "Users can view boards" on user_boards for
    select using ((select auth.uid()) = user_id);

create policy "Users can delete their boards" on user_boards for
    delete using ((select auth.uid()) = user_id);

-- lists row level security
alter table lists enable row level security;

-- Policies
create policy "Users can edit lists if they are part of the board" on lists for
    all using (
      board_id in (
        select get_boards_for_authenticated_user()
      )
    );

-- cards row level security
alter table cards enable row level security;

-- Policies
create policy "Users can edit cards if they are part of the board" on cards for
    all using (
      board_id in (
        select get_boards_for_authenticated_user()
      )
    );
```

----------------------------------------

TITLE: Import Database to Supabase using psql
DESCRIPTION: This command uses `psql` to import a SQL file into a Supabase project. It requires a Supabase connection string to connect to the database. The `-d` option specifies the database to connect to using the connection string, and the `-f` option specifies the SQL file to execute.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/heroku.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
psql -d "$YOUR_CONNECTION_STRING" -f heroku_dump.sql
```

----------------------------------------

TITLE: Creating Generic Trigger Function for Queueing Embeddings
DESCRIPTION: Implements a PL/pgSQL trigger function that queues embedding jobs when content is inserted or updated. Takes content function name and embedding column name as arguments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_5

LANGUAGE: plpgsql
CODE:
```
create or replace function util.queue_embeddings()
returns trigger
language plpgsql
as $$
declare
  content_function text = TG_ARGV[0];
  embedding_column text = TG_ARGV[1];
begin
  perform pgmq.send(
    queue_name => 'embedding_jobs',
    msg => jsonb_build_object(
      'id', NEW.id,
      'schema', TG_TABLE_SCHEMA,
      'table', TG_TABLE_NAME,
      'contentFunction', content_function,
      'embeddingColumn', embedding_column
    )
  );
  return NEW;
end;
$$;
```

----------------------------------------

TITLE: Implementing Board Component Logic in TypeScript
DESCRIPTION: Angular component class that handles board, list and card operations. Includes functionality for CRUD operations on boards, lists and cards, with preparation for realtime updates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_24

LANGUAGE: typescript
CODE:
```
import { DataService } from './../../../services/data.service'
import { Component, HostListener, OnInit } from '@angular/core'
import { ActivatedRoute, Router } from '@angular/router'

@Component({
  selector: 'app-board',
  templateUrl: './board.component.html',
  styleUrls: ['./board.component.scss'],
})
export class BoardComponent implements OnInit {
  lists: any[] = []
  boardId: string | null = null
  editTitle: any = {}
  editCard: any = {}
  boardInfo: any = null
  titleChanged = false

  listCards: any = {}
  addUserEmail = ''

  constructor(
    private route: ActivatedRoute,
    private dataService: DataService,
    private router: Router
  ) {}

  async ngOnInit() {
    this.boardId = this.route.snapshot.paramMap.get('id')
    if (this.boardId) {
      // Load general board information
      const board = await this.dataService.getBoardInfo(this.boardId)
      this.boardInfo = board.data

      // Retrieve all lists
      this.lists = await this.dataService.getBoardLists(this.boardId)

      // Retrieve cards for each list
      for (let list of this.lists) {
        this.listCards[list.id] = await this.dataService.getListCards(list.id)
      }

      // For later...
      this.handleRealtimeUpdates()
    }
  }

  //
  // BOARD logic
  //
  async saveBoardTitle() {
    await this.dataService.updateBoard(this.boardInfo)
    this.titleChanged = false
  }

  async deleteBoard() {
    await this.dataService.deleteBoard(this.boardInfo)
    this.router.navigateByUrl('/workspace')
  }

  //
  // LISTS logic
  //
  async addList() {
    const newList = await this.dataService.addBoardList(this.boardId!, this.lists.length)
  }

  editingTitle(list: any, edit = false) {
    this.editTitle[list.id] = edit
  }

  async updateListTitle(list: any) {
    await this.dataService.updateBoardList(list)
    this.editingTitle(list, false)
  }

  async deleteBoardList(list: any) {
    await this.dataService.deleteBoardList(list)
  }

  //
  // CARDS logic
  //
  async addCard(list: any) {
    await this.dataService.addListCard(list.id, this.boardId!, this.listCards[list.id].length)
  }

  editingCard(card: any, edit = false) {
    this.editCard[card.id] = edit
  }

  async updateCard(card: any) {
    await this.dataService.updateCard(card)
    this.editingCard(card, false)
  }

  async deleteCard(card: any) {
    await this.dataService.deleteCard(card)
  }

  // Invites
  async addUser() {
    await this.dataService.addUserToBoard(this.boardId!, this.addUserEmail)
    this.addUserEmail = ''
  }

  handleRealtimeUpdates() {
    // TODO
  }
}
```

----------------------------------------

TITLE: Initializing Supabase Client in Vue
DESCRIPTION: Create a Supabase client instance with project URL and anonymous API key, allowing the Vue application to connect to Supabase services.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/vue.mdx#2025-04-21_snippet_2

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'

export const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')
```

----------------------------------------

TITLE: Installing Supabase Client Library
DESCRIPTION: Command to navigate to the React app directory and install the Supabase JavaScript client. This library provides methods for interacting with your Supabase backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/reactjs.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cd my-app && npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Initializing Supabase in Flutter
DESCRIPTION: Setup Supabase client initialization in the main.dart file with URL and anonymous key configuration
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  await Supabase.initialize(
    url: 'SUPABASE_URL',
    anonKey: 'SUPABASE_ANONKEY',
  );
  runApp(const MyApp());
}

/// Extract SupabaseClient instance in a handy variable
final supabase = Supabase.instance.client;
```

----------------------------------------

TITLE: Implementing Login Page in Flutter with Supabase Authentication
DESCRIPTION: This code creates a login page with email and password fields. It uses Supabase for user authentication and includes error handling and navigation to the chat page upon successful login.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_11

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:my_chat_app/pages/chat_page.dart';
import 'package:my_chat_app/utils/constants.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({Key? key}) : super(key: key);

  static Route<void> route() {
    return MaterialPageRoute(builder: (context) => const LoginPage());
  }

  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  bool _isLoading = false;
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  Future<void> _signIn() async {
    setState(() {
      _isLoading = true;
    });
    try {
      await supabase.auth.signInWithPassword(
        email: _emailController.text,
        password: _passwordController.text,
      );
      Navigator.of(context)
          .pushAndRemoveUntil(ChatPage.route(), (route) => false);
    } on AuthException catch (error) {
      context.showErrorSnackBar(message: error.message);
    } catch (_) {
      context.showErrorSnackBar(message: unexpectedErrorMessage);
    }
    if (mounted) {
      setState(() {
        _isLoading = true;
      });
    }
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sign In')),
      body: ListView(
        padding: formPadding,
        children: [
          TextFormField(
            controller: _emailController,
            decoration: const InputDecoration(labelText: 'Email'),
            keyboardType: TextInputType.emailAddress,
          ),
          formSpacer,
          TextFormField(
            controller: _passwordController,
            decoration: const InputDecoration(labelText: 'Password'),
            obscureText: true,
          ),
          formSpacer,
          ElevatedButton(
            onPressed: _isLoading ? null : _signIn,
            child: const Text('Login'),
          ),
        ],
      ),
    );
  }
}
```

----------------------------------------

TITLE: Next.js Supabase Middleware Implementation in JavaScript
DESCRIPTION: JavaScript implementation for handling Supabase authentication session updates in Next.js middleware with cookie management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_8

LANGUAGE: jsx
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { NextResponse } from 'next/server'

export async function updateSession(request) {
  let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  // refreshing the auth token
  await supabase.auth.getUser()

  return supabaseResponse
}
```

----------------------------------------

TITLE: Implementing OpenAI GPT Completion in TypeScript Edge Function
DESCRIPTION: This TypeScript code implements an edge function that uses OpenAI's API to generate GPT completions. It takes a user query via a POST request and returns the AI-generated response.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/openai.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import OpenAI from 'https://deno.land/x/openai@v4.24.0/mod.ts'

Deno.serve(async (req) => {
  const { query } = await req.json()
  const apiKey = Deno.env.get('OPENAI_API_KEY')
  const openai = new OpenAI({
    apiKey: apiKey,
  })

  // Documentation here: https://github.com/openai/openai-node
  const chatCompletion = await openai.chat.completions.create({
    messages: [{ role: 'user', content: query }],
    // Choose model from here: https://platform.openai.com/docs/models
    model: 'gpt-3.5-turbo',
    stream: false,
  })

  const reply = chatCompletion.choices[0].message.content

  return new Response(reply, {
    headers: { 'Content-Type': 'text/plain' },
  })
})
```

----------------------------------------

TITLE: Generating Secure Nonce for Google Sign-In in JavaScript
DESCRIPTION: This code generates a secure nonce and its hashed version for use with Google Sign-In and Supabase authentication. It uses the Web Crypto API for secure random number generation and hashing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
// Adapted from https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest#converting_a_digest_to_a_hex_string

const nonce = btoa(String.fromCharCode(...crypto.getRandomValues(new Uint8Array(32))))
const encoder = new TextEncoder()
const encodedNonce = encoder.encode(nonce)
crypto.subtle.digest('SHA-256', encodedNonce).then((hashBuffer) => {
  const hashArray = Array.from(new Uint8Array(hashBuffer))
  const hashedNonce = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('')
})

// Use 'hashedNonce' when making the authentication request to Google
// Use 'nonce' when invoking the supabase.auth.signInWithIdToken() method
```

----------------------------------------

TITLE: Enabling Vector Extension in PostgreSQL
DESCRIPTION: SQL command to enable the Vector extension in PostgreSQL, which is necessary for using pgvector.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create extension vector;
```

----------------------------------------

TITLE: Creating Authentication Component in Vue 3
DESCRIPTION: Implementing a Vue component for user authentication using Supabase magic link sign-in.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-vue-3.mdx#2025-04-21_snippet_3

LANGUAGE: vue
CODE:
```
<script setup>
import { ref } from 'vue'
import { supabase } from '../supabase'

const loading = ref(false)
const email = ref('')

const handleLogin = async () => {
  try {
    loading.value = true
    const { error } = await supabase.auth.signInWithOtp({
      email: email.value,
    })
    if (error) throw error
    alert('Check your email for the login link!')
  } catch (error) {
    if (error instanceof Error) {
      alert(error.message)
    }
  } finally {
    loading.value = false
  }
}
</script>

<template>
  <form class="row flex-center flex" @submit.prevent="handleLogin">
    <div class="col-6 form-widget">
      <h1 class="header">Supabase + Vue 3</h1>
      <p class="description">Sign in via magic link with your email below</p>
      <div>
        <input class="inputField" required type="email" placeholder="Your email" v-model="email" />
      </div>
      <div>
        <input
          type="submit"
          class="button block"
          :value="loading ? 'Loading' : 'Send magic link'"
          :disabled="loading"
        />
      </div>
    </div>
  </form>
</template>
```

----------------------------------------

TITLE: Querying Supabase Data and Displaying in Android Compose UI
DESCRIPTION: Implementation of an Android activity and Composable function that queries the 'instruments' table from Supabase and displays the results in a LazyColumn. This uses Kotlin Coroutines to handle asynchronous API calls.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/kotlin.mdx#2025-04-21_snippet_4

LANGUAGE: kotlin
CODE:
```
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            SupabaseTutorialTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    InstrumentsList()
                }
            }
        }
    }
}

@Composable
fun InstrumentsList() {
    var instruments by remember { mutableStateOf<List<Instrument>>(listOf()) }
    LaunchedEffect(Unit) {
        withContext(Dispatchers.IO) {
            instruments = supabase.from("instruments")
                              .select().decodeList<Instrument>()
        }
    }
    LazyColumn {
        items(
            instruments,
            key = { instrument -> instrument.id },
        ) { instrument ->
            Text(
                instrument.name,
                modifier = Modifier.padding(8.dp),
            )
        }
    }
}
```

----------------------------------------

TITLE: Creating Structured Vector Embeddings Table in SQL
DESCRIPTION: Creates a table for storing vector embeddings with structured metadata using dedicated columns for content and URL. Demonstrates insertion of sample data with a 3-dimensional vector embedding.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/structured-unstructured.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table docs (
  id uuid primary key,
  embedding vector(3),
  content text,
  url text
);

insert into docs
  (id, embedding, content, url)
values
  ('79409372-7556-4ccc-ab8f-5786a6cfa4f7', array[0.1, 0.2, 0.3], 'Hello world', '/hello-world');
```

----------------------------------------

TITLE: Implementing GitHub OAuth Sign-In in Flutter with Supabase
DESCRIPTION: This snippet shows how to integrate GitHub sign-in for a Flutter application using Supabase. It uses the `signInWithOAuth` method and provides options for handling redirect links and launching modes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signInWithGithub() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.github,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}
```

----------------------------------------

TITLE: Creating Table with Optional Identity Primary Key in SQL
DESCRIPTION: Creates a movies table with a bigint primary key that allows manual value insertion while still supporting auto-generation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table movies (
  id bigint generated by default as identity primary key
);
```

----------------------------------------

TITLE: Creating Supabase SSR Client in Next.js
DESCRIPTION: Sets up a Supabase client for server-side rendering in Next.js, handling cookie management for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = cookies()

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
      },
    }
  )

  const { data } = await supabase.from('countries').select()

  return <pre>{JSON.stringify(data, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Complex Boolean Logic - OR AND OR
DESCRIPTION: Shows how to implement a complex WHERE clause combining OR and AND conditions for team_id and age filtering using both SQL and JavaScript approaches.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/sql-to-api.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select *
from players
where ((team_id = 'CHN' or team_id is null) and (age > 35 or age is null));
```

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('players')
  .select() // or .select('*')
  .or('team_id.eq.CHN,team_id.is.null')
  .or('age.gt.35,age.is.null') // additional filters imply "AND"
```

----------------------------------------

TITLE: Creating Composite Index in PostgreSQL
DESCRIPTION: Creating a composite index on multiple columns to optimize queries filtering on multiple conditions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create index idx_customers_sign_up_date_priority on customers (sign_up_date, priority);
```

----------------------------------------

TITLE: Less Than Filter Implementation
DESCRIPTION: Demonstrates how to listen for database changes when a column is less than a specific value using the 'lt' filter. Uses Postgres's < operator to filter profile inserts where age is less than 65.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_42

LANGUAGE: javascript
CODE:
```
const channel = supabase
  .channel('changes')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'profiles',
      filter: 'age=lt.65',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

LANGUAGE: dart
CODE:
```
supabase
    .channel('changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.insert,
        schema: 'public',
        table: 'profiles',
        filter: PostgresChangeFilter(
          type: PostgresChangeFilterType.lt,
          column: 'age',
          value: 65,
        ),
        callback: (payload) => print(payload))
    .subscribe();
```

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("db-changes")

let changes = await myChannel.postgresChange(
  InsertAction.self,
  schema: "public",
  table: "profiles",
  filter: .lt("age", value: 65)
)

await myChannel.subscribe()

for await change in changes {
  print(change.record)
}
```

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Insert>(schema = "public") {
    table = "profiles"
    filter = "age=lt.65"
}

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

LANGUAGE: python
CODE:
```
changes = supabase.channel('db-changes').on_postgres_changes(
  "INSERT",
  schema="public",
  table="profiles",
  filter="age=lt.65",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: SQL Send SMS Function Implementation
DESCRIPTION: Creates a function to handle SMS sending by queueing messages with priority and scheduling logic, including permissions setup.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create or replace function send_sms(event jsonb) returns void as $$
declare
    job_data jsonb;
    scheduled_time timestamp;
    priority int;
begin
    -- extract phone and otp from the event json
    job_data := jsonb_build_object(
        'phone', event->'user'->>'phone',
        'otp', event->'sms'->>'otp'
    );

    -- calculate the nearest 5-minute window for scheduled_time
    scheduled_time := date_trunc('minute', now()) + interval '5 minute' * floor(extract('epoch' from (now() - date_trunc('minute', now())) / 60) / 5);

    -- assign priority dynamically (example logic: higher priority for earlier scheduled time)
    priority := extract('epoch' from (scheduled_time - now()))::int;

    -- insert the job into the job_queue table
    insert into job_queue (job_data, priority, scheduled_at, max_retries)
    values (job_data, priority, scheduled_time, 2);
end;
$$ language plpgsql;

grant all
  on table public.job_queue
  to supabase_auth_admin;

revoke all
  on table public.job_queue
  from authenticated, anon;
```

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Initialize a new Supabase project in your repository's root directory after installing the CLI. This command sets up the necessary configuration files and directories for managing your local Supabase environment and linking it to a remote project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#_snippet_1

LANGUAGE: sh
CODE:
```
npx supabase init
```

LANGUAGE: sh
CODE:
```
yarn supabase init
```

LANGUAGE: sh
CODE:
```
pnpx supabase init
```

LANGUAGE: sh
CODE:
```
supabase init
```

----------------------------------------

TITLE: Implementing Row Level Security in Edge Function
DESCRIPTION: Demonstrates how to implement Row Level Security in a Supabase Edge Function when querying data with authentication context.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/auth.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createClient } from 'jsr:@supabase/supabase-js@2'

Deno.serve(async (req: Request) => {

  const supabaseClient = createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_ANON_KEY') ?? '',
  );

  // Get the session or user object
  const authHeader = req.headers.get('Authorization')!;
  const token = authHeader.replace('Bearer ', '');
  const { data: userData } = await supabaseClient.auth.getUser(token);
  const { data, error } = await supabaseClient.from('profiles').select('*');

  return new Response(JSON.stringify({ data }), {
    headers: { 'Content-Type': 'application/json' },
    status: 200,
  })

})
```

----------------------------------------

TITLE: Creating RLS Policy for UPDATE Operations
DESCRIPTION: Shows how to create an RLS policy for UPDATE operations using both USING and WITH CHECK clauses. This policy ensures that users can only update their own records in the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-simplified-BJTcS8.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create policy "Allow user to edit their stuff"
on "public"."<SOME TABLE NAME>"
as RESTRICTIVE
for UPDATE
to authenticated
using (
  (select auth.uid()) = user_id
)
with check(
  (select auth.uid()) = user_id
);
```

----------------------------------------

TITLE: Creating Middleware Utility Function
DESCRIPTION: Implementation of a middleware utility function that creates a server client and handles session updates in Next.js middleware, including authentication flow redirects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// utils/supabase/middleware.ts
import { createServerClient } from '@supabase/ssr';
import { NextResponse, type NextRequest } from 'next/server';

export async function updateSession(request: NextRequest) {
  let supabaseResponse = NextResponse.next({
    request,
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  );

  // IMPORTANT: Avoid writing any logic between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (
    !user &&
    !request.nextUrl.pathname.startsWith('/login') &&
    !request.nextUrl.pathname.startsWith('/auth')
  ) {
    // no user, potentially respond by redirecting the user to the login page
    const url = request.nextUrl.clone();
    url.pathname = '/login';
    return NextResponse.redirect(url);
  }

  // IMPORTANT: You *must* return the supabaseResponse object as it is. If you're
  // creating a new response object with NextResponse.next() make sure to:
  // 1. Pass the request in it, like so:
  //    const myNewResponse = NextResponse.next({ request })
  // 2. Copy over the cookies, like so:
  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
  // 3. Change the myNewResponse object to fit your needs, but avoid changing
  //    the cookies!
  // 4. Finally:
  //    return myNewResponse
  // If this is not done, you may be causing the browser and server to go out
  // of sync and terminate the user's session prematurely!

  return supabaseResponse;
}
```

----------------------------------------

TITLE: Creating ORDER BY Column Index in PostgreSQL
DESCRIPTION: Creating index for column used in ORDER BY clause to optimize sorting operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create index idx_orders_date_of_purchase on orders (date_of_purchase);
```

----------------------------------------

TITLE: Signing In with Email and Password in v0 vs v1
DESCRIPTION: Shows the change in the method for signing in with email and password. In v1, a more explicit method signature is used for better type hinting.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
await supabase.auth.signIn(email: email, password: password);
```

LANGUAGE: dart
CODE:
```
await supabase.auth.signInWithPassword(email: email, password: password);
```

----------------------------------------

TITLE: Implement OAuth and Linking Handlers in React Native
DESCRIPTION: This TypeScript code snippet shows how to implement OAuth and deep linking handlers in a React Native application using Expo and Supabase. It covers initializing the Supabase client, performing OAuth with Github, handling magic links, and processing incoming URLs to create user sessions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { Button } from "react-native";
import { makeRedirectUri } from "expo-auth-session";
import * as QueryParams from "expo-auth-session/build/QueryParams";
import * as WebBrowser from "expo-web-browser";
import * as Linking from "expo-linking";
import { supabase } from "app/utils/supabase";

WebBrowser.maybeCompleteAuthSession(); // required for web only
const redirectTo = makeRedirectUri();

const createSessionFromUrl = async (url: string) => {
  const { params, errorCode } = QueryParams.getQueryParams(url);

  if (errorCode) throw new Error(errorCode);
  const { access_token, refresh_token } = params;

  if (!access_token) return;

  const { data, error } = await supabase.auth.setSession({
    access_token,
    refresh_token,
  });
  if (error) throw error;
  return data.session;
};

const performOAuth = async () => {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: "github",
    options: {
      redirectTo,
      skipBrowserRedirect: true,
    },
  });
  if (error) throw error;

  const res = await WebBrowser.openAuthSessionAsync(
    data?.url ?? "",
    redirectTo
  );

  if (res.type === "success") {
    const { url } = res;
    await createSessionFromUrl(url);
  }
};

const sendMagicLink = async () => {
  const { error } = await supabase.auth.signInWithOtp({
    email: "valid.email@supabase.io",
    options: {
      emailRedirectTo: redirectTo,
    },
  });

  if (error) throw error;
  // Email sent.
};

export default function Auth() {
  // Handle linking into app from email app.
  const url = Linking.useURL();
  if (url) createSessionFromUrl(url);

  return (
    <>
      <Button onPress={performOAuth} title="Sign in with Github" />
      <Button onPress={sendMagicLink} title="Send Magic Link" />
    </>
  );
}
```

----------------------------------------

TITLE: Initializing Supabase Client with Clerk Authentication
DESCRIPTION: JavaScript/TypeScript code showing how to initialize the Supabase client with Clerk authentication token integration. The code sets up the connection to Supabase and configures the access token to be retrieved from the Clerk session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-31-clerk-tpa-pricing.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { createClient } from '@supabase/supabase-js'

const SUPABASE_URL = 'https://<supabase-project>.supabase.co'
const SUPABASE_ANON_KEY = '<SUPABASE_ANON_KEY>'

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  accessToken: () => {
    return Clerk.session?.getToken()
  },
})
```

----------------------------------------

TITLE: Querying Supabase Data in Flutter App
DESCRIPTION: This Dart code demonstrates how to query data from Supabase in a Flutter app, displaying the results in a ListView using a FutureBuilder.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/flutter.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Instruments',
      home: HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final _future = Supabase.instance.client
      .from('instruments')
      .select();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: FutureBuilder(
        future: _future,
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return const Center(child: CircularProgressIndicator());
          }
          final instruments = snapshot.data!;
          return ListView.builder(
            itemCount: instruments.length,
            itemBuilder: ((context, index) {
              final instrument = instruments[index];
              return ListTile(
                title: Text(instrument['name']),
              );
            }),
          );
        },
      ),
    );
  }
}
```

----------------------------------------

TITLE: Implementing Supabase Queries in a React Component
DESCRIPTION: React component that initializes a Supabase client and fetches instrument data from a database table. The component displays the retrieved instruments as a list and uses React hooks to manage state and side effects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/reactjs.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { useEffect, useState } from "react";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient("https://<project>.supabase.co", "<your-anon-key>");

function App() {
  const [instruments, setInstruments] = useState([]);

  useEffect(() => {
    getInstruments();
  }, []);

  async function getInstruments() {
    const { data } = await supabase.from("instruments").select();
    setInstruments(data);
  }

  return (
    <ul>
      {instruments.map((instrument) => (
        <li key={instrument.name}>{instrument.name}</li>
      ))}
    </ul>
  );
}

export default App;
```

----------------------------------------

TITLE: Implementing Login Page Component with Authentication Logic
DESCRIPTION: This TypeScript code implements the login page component with reactive forms for authentication. It includes user subscription, form validation, and handling the login process through the AuthService.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
import { AuthService } from './../../services/auth.service'
import { Component } from '@angular/core'
import { FormBuilder, Validators } from '@angular/forms'
import { Router } from '@angular/router'
import { LoadingController, AlertController } from '@ionic/angular'

@Component({
  selector: 'app-login',
  templateUrl: './login.page.html',
  styleUrls: ['./login.page.scss'],
})
export class LoginPage {
  credentials = this.fb.nonNullable.group({
    email: ['', Validators.required],
    password: ['', Validators.required],
  })

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private loadingController: LoadingController,
    private alertController: AlertController,
    private router: Router
  ) {
    this.authService.getCurrentUser().subscribe((user) => {
      if (user) {
        this.router.navigateByUrl('/groups', { replaceUrl: true })
      }
    })
  }

  get email() {
    return this.credentials.controls.email
  }

  get password() {
    return this.credentials.controls.password
  }

  async login() {
    const loading = await this.loadingController.create()
    await loading.present()

    this.authService.signIn(this.credentials.getRawValue()).then(async (data) => {
      await loading.dismiss()

      if (data.error) {
        this.showAlert('Login failed', data.error.message)
      }
    })
  }

  async showAlert(title, msg) {
    const alert = await this.alertController.create({
      header: title,
      message: msg,
      buttons: ['OK'],
    })
    await alert.present()
  }
}
```

----------------------------------------

TITLE: Sign Out using Supabase
DESCRIPTION: This JavaScript snippet demonstrates how to sign out a user using Supabase's `signOut` method. It initializes a Supabase client and then calls the `signOut` method. This removes the user from the browser session and any objects from localStorage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Setting Up Supabase Environment Variables
DESCRIPTION: Configuration of environment variables in .env.local file to connect the Next.js application to Supabase by setting the Supabase URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nextjs.mdx#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=<SUBSTITUTE_SUPABASE_URL>
NEXT_PUBLIC_SUPABASE_ANON_KEY=<SUBSTITUTE_SUPABASE_ANON_KEY>
```

----------------------------------------

TITLE: Creating Database Tables and Functions in SQL for Supabase Trello Clone
DESCRIPTION: This SQL script creates tables for boards, lists, cards, users, and user_boards. It also defines a function to get boards for authenticated users and sets up replica identity for realtime functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
drop table if exists user_boards;
drop table if exists cards;
drop table if exists lists;
drop table if exists boards;
drop table if exists users;

-- Create boards table
create table boards (
  id bigint generated by default as identity primary key,
  creator uuid references auth.users not null default auth.uid(),
  title text default 'Untitled Board',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create lists table
create table lists (
  id bigint generated by default as identity primary key,
  board_id bigint references boards ON DELETE CASCADE not null,
  title text default '',
  position int not null default 0,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create Cards table
create table cards (
  id bigint generated by default as identity primary key,
  list_id bigint references lists ON DELETE CASCADE not null,
  board_id bigint references boards ON DELETE CASCADE not null,
  position int not null default 0,
  title text default '',
  description text check (char_length(description) > 0),
  assigned_to uuid references auth.users,
  done boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Many to many table for user <-> boards relationship
create table user_boards (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users ON DELETE CASCADE not null default auth.uid(),
  board_id bigint references boards ON DELETE CASCADE
);

-- User ID lookup table
create table users (
  id uuid not null primary key,
  email text
);

-- Make sure deleted records are included in realtime
alter table cards replica identity full;
alter table lists replica identity full;

-- Function to get all user boards
create or replace function get_boards_for_authenticated_user()
returns setof bigint
language sql
security definer
set search_path = ''
stable
as $$
    select board_id
    from public.user_boards
    where user_id = auth.uid()
$$;
```

----------------------------------------

TITLE: Signing in with Email and Password using Supabase in Python
DESCRIPTION: This snippet shows how to sign in a user with their email and password using the Supabase Python client. It uses the sign_in_with_password() method from the auth module.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_20

LANGUAGE: python
CODE:
```
data = client.auth.sign_in_with_password({
  'email': 'valid.email@supabase.io',
  'password': 'example-password',
})
```

----------------------------------------

TITLE: Signing in with Supabase Auth in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to sign in a user using Supabase Auth. It calls the `supabase.auth.signIn()` method with the user's email and password.  This function triggers the creation and issuance of a user-specific JWT.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
supabase.auth.signIn({
  email: 'valid.email@supabase.io',
  password: 'They_Live_1988!',
})
```

----------------------------------------

TITLE: Signing Out a User Python
DESCRIPTION: This Python code snippet calls the sign_out method on the Supabase authentication object to sign out a user. It ends the session locally. Ensure the Supabase Python client is properly configured.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_4

LANGUAGE: Python
CODE:
```
supabase.auth.sign_out()
```

----------------------------------------

TITLE: Signing Up New User using Supabase in Kotlin
DESCRIPTION: This Kotlin snippet illustrates how to sign up a new user using the Supabase Kotlin SDK by providing their email and password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_14

LANGUAGE: kotlin
CODE:
```
suspend fun signUpNewUser() {
	supabase.auth.signUpWith(Email) {
		email = "valid.email@supabase.io"
		password = "example-password"
	}
}
```

----------------------------------------

TITLE: Selecting Data from PostgreSQL Table with Granted Privileges
DESCRIPTION: This snippet demonstrates how a role (senior_dev) can now select data from a table after being granted the select privilege.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_14

LANGUAGE: sql
CODE:
```
postgres=> select * from public.apps;
┌────┬──────────┐
│ id │   name   │
├────┼──────────┤
│  1 │ next app │
└────┴──────────┘
(1 row)
```

----------------------------------------

TITLE: Full Text Search on Description Column in SQL
DESCRIPTION: SQL query using PostgreSQL's full text search to find all books where the description contains the word 'big'. Uses to_tsvector() and to_tsquery() with the @@ match operator.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_13

LANGUAGE: sql
CODE:
```
select
  *
from
  books
where
  to_tsvector(description)
  @@ to_tsquery('big');
```

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Commands to initialize and start a local Supabase project using the CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/generate-text-embeddings.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
supabase init
supabase start
```

----------------------------------------

TITLE: Creating Avatar Component with Camera Integration and Supabase Storage
DESCRIPTION: Implements an Avatar component that allows users to take photos using Capacitor Camera and upload them to Supabase Storage. The component also handles downloading and displaying existing avatar images.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_10

LANGUAGE: jsx
CODE:
```
import { IonIcon } from '@ionic/react';
import { person } from 'ionicons/icons';
import { Camera, CameraResultType } from '@capacitor/camera';
import { useEffect, useState } from 'react';
import { supabase } from '../supabaseClient';
import './Avatar.css'
export function Avatar({
  url,
  onUpload,
}: {
  url: string;
  onUpload: (e: any, file: string) => Promise<void>;
}) {
  const [avatarUrl, setAvatarUrl] = useState<string | undefined>();

  useEffect(() => {
    if (url) {
      downloadImage(url);
    }
  }, [url]);
  const uploadAvatar = async () => {
    try {
      const photo = await Camera.getPhoto({
        resultType: CameraResultType.DataUrl,
      });

      const file = await fetch(photo.dataUrl!)
        .then((res) => res.blob())
        .then(
          (blob) =>
            new File([blob], 'my-file', { type: `image/${photo.format}` })
        );

      const fileName = `${Math.random()}-${new Date().getTime()}.${
        photo.format
      }`;
      const { error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(fileName, file);
      if (uploadError) {
        throw uploadError;
      }
      onUpload(null, fileName);
    } catch (error) {
      console.log(error);
    }
  };

  const downloadImage = async (path: string) => {
    try {
      const { data, error } = await supabase.storage
        .from('avatars')
        .download(path);
      if (error) {
        throw error;
      }
      const url = URL.createObjectURL(data!);
      setAvatarUrl(url);
    } catch (error: any) {
      console.log('Error downloading image: ', error.message);
    }
  };

  return (
    <div className="avatar">
    <div className="avatar_wrapper" onClick={uploadAvatar}>
      {avatarUrl ? (
        <img src={avatarUrl} />
      ) : (
        <IonIcon icon={person} className="no-avatar" />
      )}
    </div>

    </div>
  );
```

----------------------------------------

TITLE: Error Handling in Supabase Flutter Queries
DESCRIPTION: Shows the new error handling approach using try-catch blocks instead of returning error objects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-02-supabase-flutter-sdk-1-developer-preview.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
// Before
final response = await Supabase.instance.from('messages').select().execute();
final data = response.data;
final error = response.error;

// After
try {
  final data = await Supabase.instance.from('messages').select();
} catch(error) {
  // Handle error here
}
```

----------------------------------------

TITLE: Creating Typed Supabase Client in Next.js
DESCRIPTION: These snippets demonstrate how to create typed Supabase clients using createPagesBrowserClient and createPagesServerClient in Next.js. They show how to use CLI-generated types for enhanced type safety and auto-completion.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
// client-side
import type { Database } from 'types_db'
const [supabaseClient] = useState(() => createPagesBrowserClient<Database>())

// server-side API route
import type { NextApiRequest, NextApiResponse } from 'next'
import type { Database } from 'types_db'

export default async (req: NextApiRequest, res: NextApiResponse) => {
  const supabaseServerClient = createPagesServerClient<Database>({
    req,
    res,
  })
  const {
    data: { user },
  } = await supabaseServerClient.auth.getUser()

  res.status(200).json({ name: user?.name ?? '' })
}
```

----------------------------------------

TITLE: Implementing Account Management Component in React Native with TypeScript
DESCRIPTION: A React Native component for managing user account details including username, website, and avatar. Uses Supabase for data storage and includes profile fetching and updating functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_5

LANGUAGE: tsx
CODE:
```
import { useState, useEffect } from 'react'
import { supabase } from '../lib/supabase'
import { StyleSheet, View, Alert } from 'react-native'
import { Button, Input } from '@rneui/themed'
import { Session } from '@supabase/supabase-js'

export default function Account({ session }: { session: Session }) {
  const [loading, setLoading] = useState(true)
  const [username, setUsername] = useState('')
  const [website, setWebsite] = useState('')
  const [avatarUrl, setAvatarUrl] = useState('')

  useEffect(() => {
    if (session) getProfile()
  }, [session])

  async function getProfile() {
    try {
      setLoading(true)
      if (!session?.user) throw new Error('No user on the session!')

      const { data, error, status } = await supabase
        .from('profiles')
        .select(`username, website, avatar_url`)
        .eq('id', session?.user.id)
        .single()
      if (error && status !== 406) {
        throw error
      }

      if (data) {
        setUsername(data.username)
        setWebsite(data.website)
        setAvatarUrl(data.avatar_url)
      }
    } catch (error) {
      if (error instanceof Error) {
        Alert.alert(error.message)
      }
    } finally {
      setLoading(false)
    }
  }

  async function updateProfile({
    username,
    website,
    avatar_url,
  }: {
    username: string
    website: string
    avatar_url: string
  }) {
    try {
      setLoading(true)
      if (!session?.user) throw new Error('No user on the session!')

      const updates = {
        id: session?.user.id,
        username,
        website,
        avatar_url,
        updated_at: new Date(),
      }

      const { error } = await supabase.from('profiles').upsert(updates)

      if (error) {
        throw error
      }
    } catch (error) {
      if (error instanceof Error) {
        Alert.alert(error.message)
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <View style={styles.container}>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Input label="Email" value={session?.user?.email} disabled />
      </View>
      <View style={styles.verticallySpaced}>
        <Input label="Username" value={username || ''} onChangeText={(text) => setUsername(text)} />
      </View>
      <View style={styles.verticallySpaced}>
        <Input label="Website" value={website || ''} onChangeText={(text) => setWebsite(text)} />
      </View>

      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Button
          title={loading ? 'Loading ...' : 'Update'}
          onPress={() => updateProfile({ username, website, avatar_url: avatarUrl })}
          disabled={loading}
        />
      </View>

      <View style={styles.verticallySpaced}>
        <Button title="Sign Out" onPress={() => supabase.auth.signOut()} />
      </View>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    marginTop: 40,
    padding: 12,
  },
  verticallySpaced: {
    paddingTop: 4,
    paddingBottom: 4,
    alignSelf: 'stretch',
  },
  mt20: {
    marginTop: 20,
  },
})
```

----------------------------------------

TITLE: Creating React Native App with Expo
DESCRIPTION: Command to create a new React Native application using Expo with TypeScript template.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx create-expo-app -t expo-template-blank-typescript my-app
```

----------------------------------------

TITLE: Querying Many-to-Many Relationships in JavaScript
DESCRIPTION: JavaScript example showing how to query teams with their related users through a many-to-many relationship using Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('teams').select(`
  id,
  team_name,
  users ( id, name )
`)
```

----------------------------------------

TITLE: Serving Supabase Functions Locally
DESCRIPTION: Commands to start Supabase services and serve functions locally for testing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
supabase start
supabase functions serve --env-file supabase/functions/.env
```

----------------------------------------

TITLE: Handling Supabase Auth Confirmation in Next.js API Route
DESCRIPTION: Implements an API route handler for Supabase auth confirmation, exchanging a secure code for an auth token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
import { type EmailOtpType } from '@supabase/supabase-js'
import type { NextApiRequest, NextApiResponse } from 'next'

import createClient from '@/utils/supabase/api'

function stringOrFirstString(item: string | string[] | undefined) {
  return Array.isArray(item) ? item[0] : item
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'GET') {
    res.status(405).appendHeader('Allow', 'GET').end()
    return
  }

  const queryParams = req.query
  const token_hash = stringOrFirstString(queryParams.token_hash)
  const type = stringOrFirstString(queryParams.type)

  let next = '/error'

  if (token_hash && type) {
    const supabase = createClient(req, res)
    const { error } = await supabase.auth.verifyOtp({
      type: type as EmailOtpType,
      token_hash,
    })
    if (error) {
      console.error(error)
    } else {
      next = stringOrFirstString(queryParams.next) || '/'
    }
  }

  res.redirect(next)
}
```

----------------------------------------

TITLE: Creating Basic INSERT Policy for Storage Objects in SQL
DESCRIPTION: This snippet demonstrates how to create a basic RLS policy that allows INSERT operations on the storage.objects table without any restrictions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/access-control.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create policy "policy_name"
ON storage.objects
for insert with check (
  true
);
```

----------------------------------------

TITLE: Implementing Private Route Layout in Svelte
DESCRIPTION: Svelte layout component for private routes. Includes a logout button and renders child components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_14

LANGUAGE: svelte
CODE:
```
<script>
  let { data, children } = $props()
  let { supabase } = $derived(data)

  const logout = async () => {
    const { error } = await supabase.auth.signOut()
    if (error) {
      console.error(error)
    }
  }
</script>

<header>
  <nav>
    <a href="/">Home</a>
  </nav>
  <button onclick={logout}>Logout</button>
</header>
<main>
  {@render children()}
</main>
```

----------------------------------------

TITLE: Creating Server-side Authentication Link in HTML
DESCRIPTION: A custom email link template that redirects users to a server-side endpoint for authentication. This approach allows server-side access to authentication tokens rather than using client-side fragments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-templates.mdx#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<a
  href="https://api.example.com/v1/authenticate?token_hash={{ .TokenHash }}&type=invite&redirect_to={{ .RedirectTo }}"
  >Accept the invite
</a>
```

----------------------------------------

TITLE: User Signup - Swift
DESCRIPTION: Uses Swift to register a new user in Supabase with additional metadata included.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_4

LANGUAGE: swift
CODE:
```
try await supabase.auth.signUp(
  email: "valid.email@supabase.io",
  password: "example-password",
  data: [
    "first_name": .string("John"),
    "age": .integer(27),
  ]
)
```

----------------------------------------

TITLE: Creating Security Definer Function for User Teams in PostgreSQL
DESCRIPTION: This SQL snippet defines a security definer function 'user_teams()' that returns an array of team IDs for the authenticated user. It queries the team_user table to fetch team IDs associated with the current user's ID.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION user_teams()
    RETURNS int[] as
$$
begin
    return array( select team_id from team_user where auth.uid() = user_id);
end;
$$ language plpgsql security definer;
```

----------------------------------------

TITLE: Creating Signed URL with Image Transformation (JavaScript)
DESCRIPTION: Demonstrates how to create a signed URL for an image with specific width and height transformations using Supabase storage
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/storage-image-transformations.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
supabase.storage.from('bucket').createSignedUrl('image-1.jpg', 60000, {
  transform: {
    width: 200,
    height: 200,
  },
})
```

LANGUAGE: javascript
CODE:
```
supabase.storage.from('bucket').createSignedUrl('image-2.jpg', 60000, {
  transform: {
    width: 400,
    height: 300,
  },
})
```

LANGUAGE: javascript
CODE:
```
supabase.storage.from('bucket').createSignedUrl('image-2.jpg', 60000, {
  transform: {
    width: 600,
    height: 250,
  },
})
```

----------------------------------------

TITLE: Implementing Simple Similarity Search with OpenAI Embeddings in Supabase Edge Function
DESCRIPTION: This Edge Function performs a similarity search using OpenAI embeddings. It generates an embedding for the input query, then uses Supabase's match_documents RPC to find similar documents based on the embedding.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import { serve } from 'https://deno.land/std@0.170.0/http/server.ts'
import 'https://deno.land/x/xhr@0.2.1/mod.ts'
import { createClient } from 'jsr:@supabase/supabase-js@2'
import { Configuration, OpenAIApi } from 'https://esm.sh/openai@3.1.0'
import { supabaseClient } from './lib/supabase'

export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  // Search query is passed in request payload
  const { query } = await req.json()

  // OpenAI recommends replacing newlines with spaces for best results
  const input = query.replace(/\n/g, ' ')

  const configuration = new Configuration({ apiKey: '<YOUR_OPENAI_API_KEY>' })
  const openai = new OpenAIApi(configuration)

  // Generate a one-time embedding for the query itself
  const embeddingResponse = await openai.createEmbedding({
    model: 'text-embedding-ada-002',
    input,
  })

  const [{ embedding }] = embeddingResponse.data.data

  // In production we should handle possible errors
  const { data: documents } = await supabaseClient.rpc('match_documents', {
    query_embedding: embedding,
    match_threshold: 0.78, // Choose an appropriate threshold for your data
    match_count: 10, // Choose the number of matches
  })

  return new Response(JSON.stringify(documents), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  })
})
```

----------------------------------------

TITLE: Implementing SSO Sign-In with Supabase JS
DESCRIPTION: Example of implementing Single Sign-On authentication using the supabase-js library. Shows how to initiate the SSO flow with a specific domain and handle the redirect URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const { data } = await supabase.auth.signInWithSSO({ domain: 'acme.corp' })

if (data.url) window.location.href = data.url
```

----------------------------------------

TITLE: Signing Up New User using Supabase in Swift
DESCRIPTION: This Swift code snippet demonstrates registering a new user by providing an email address and password using the Supabase Swift client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_13

LANGUAGE: swift
CODE:
```
let response = try await supabase.auth.signUp(
  email: "valid.email@supabase.io",
  password: "example-password",
)
```

----------------------------------------

TITLE: Querying Postgres Vector Function from the Browser with supabase-js
DESCRIPTION: This JavaScript snippet shows how to call a Postgres vector similarity search function directly from the browser using the supabase-js client. It passes the query embedding, match threshold, and count parameters and receives matching image records sorted by similarity.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
let { data: images, error } = await supabase.rpc('match_images', {
  query_embedding,
  match_threshold,
  match_count,
})
```

----------------------------------------

TITLE: Setting Auth Context in Edge Function
DESCRIPTION: Demonstrates how to set up authentication context in a Supabase Edge Function by extracting and using the Authorization header token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/auth.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from 'jsr:@supabase/supabase-js@2'

Deno.serve(async (req: Request) => {

  const supabaseClient = createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_ANON_KEY') ?? '',
  );

  // Get the session or user object
  const authHeader = req.headers.get('Authorization')!;
  const token = authHeader.replace('Bearer ', '');
  const { data } = await supabaseClient.auth.getUser(token);

})
```

----------------------------------------

TITLE: Calculating Safe Memory-Based Connection Limit
DESCRIPTION: SQL query to calculate the theoretical maximum connection limit based on available server memory and PostgreSQL configuration parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-change-max-database-connections-_BQ8P5.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select
  '(SERVER MEMORY - ' || current_setting('shared_buffers') || ' - (' || current_setting('autovacuum_max_workers') || ' * ' || current_setting('maintenance_work_mem') || ')) / ' || current_setting('work_mem');
```

----------------------------------------

TITLE: Implementing Supabase Authentication Service in Ionic Angular
DESCRIPTION: Creates an authentication service using Supabase in an Ionic Angular app. Handles user session management, sign-up, sign-in, and other auth operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
/* eslint-disable @typescript-eslint/naming-convention */
import { Injectable } from '@angular/core'
import { Router } from '@angular/router'
import { isPlatform } from '@ionic/angular'
import { createClient, SupabaseClient, User } from '@supabase/supabase-js'
import { BehaviorSubject, Observable } from 'rxjs'
import { environment } from '../../environments/environment'

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private supabase: SupabaseClient
  private currentUser: BehaviorSubject<User | boolean> = new BehaviorSubject(null)

  constructor(private router: Router) {
    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)

    this.supabase.auth.onAuthStateChange((event, sess) => {
      if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
        console.log('SET USER')

        this.currentUser.next(sess.user)
      } else {
        this.currentUser.next(false)
      }
    })

    // Trigger initial session load
    this.loadUser()
  }

  async loadUser() {
    if (this.currentUser.value) {
      // User is already set, no need to do anything else
      return
    }
    const user = await this.supabase.auth.getUser()

    if (user.data.user) {
      this.currentUser.next(user.data.user)
    } else {
      this.currentUser.next(false)
    }
  }

  signUp(credentials: { email; password }) {
    return this.supabase.auth.signUp(credentials)
  }

  signIn(credentials: { email; password }) {
    return this.supabase.auth.signInWithPassword(credentials)
  }

  sendPwReset(email) {
    return this.supabase.auth.resetPasswordForEmail(email)
  }

  async signOut() {
    await this.supabase.auth.signOut()
    this.router.navigateByUrl('/', { replaceUrl: true })
  }

  getCurrentUser(): Observable<User | boolean> {
    return this.currentUser.asObservable()
  }

  getCurrentUserId(): string {
    if (this.currentUser.value) {
      return (this.currentUser.value as User).id
    } else {
      return null
    }
  }

  signInWithEmail(email: string) {
    return this.supabase.auth.signInWithOtp({ email })
  }
}
```

----------------------------------------

TITLE: Optimized RLS Policy Implementation
DESCRIPTION: Performance-optimized examples of RLS policies using recommended practices
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create policy "Users can access records belonging to their teams" on test_table
to authenticated
using (
  team_id in (
    select team_id
    from team_user
    where user_id = (select auth.uid())
  )
);
```

----------------------------------------

TITLE: Creating a New Edge Function with Supabase CLI
DESCRIPTION: Command to create a new Edge Function named 'embed' using the Supabase CLI. This function will be responsible for generating vector embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
supabase functions new embed
```

----------------------------------------

TITLE: Implementing Hybrid Search Function in PostgreSQL
DESCRIPTION: SQL function that combines full-text and semantic search using reciprocal rank fusion (RRF). Accepts query text, embedding, and various parameters for customizing search behavior.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create or replace function hybrid_search(
  query_text text,
  query_embedding vector(512),
  match_count int,
  full_text_weight float = 1,
  semantic_weight float = 1,
  rrf_k int = 50
)
returns setof documents
language sql
as $$
with full_text as (
  select
    id,
    -- Note: ts_rank_cd is not indexable but will only rank matches of the where clause
    -- which shouldn't be too big
    row_number() over(order by ts_rank_cd(fts, websearch_to_tsquery(query_text)) desc) as rank_ix
  from
    documents
  where
    fts @@ websearch_to_tsquery(query_text)
  order by rank_ix
  limit least(match_count, 30) * 2
),
semantic as (
  select
    id,
    row_number() over (order by embedding <#> query_embedding) as rank_ix
  from
    documents
  order by rank_ix
  limit least(match_count, 30) * 2
)
select
  documents.*
from
  full_text
  full outer join semantic
    on full_text.id = semantic.id
  join documents
    on coalesce(full_text.id, semantic.id) = documents.id
order by
  coalesce(1.0 / (rrf_k + full_text.rank_ix), 0.0) * full_text_weight +
  coalesce(1.0 / (rrf_k + semantic.rank_ix), 0.0) * semantic_weight
  desc
limit
  least(match_count, 30)
$$;
```

----------------------------------------

TITLE: Linking OAuth Identity with JavaScript
DESCRIPTION: Example showing how to link a Google OAuth identity to an existing user using the Supabase JavaScript client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.auth.linkIdentity({ provider: 'google' })
```

----------------------------------------

TITLE: Create Employees Table (SQL)
DESCRIPTION: This SQL code creates the `employees` table with columns for `id`, `name`, `email`, and `created_at`. The `id` column is the primary key and is auto-generated.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_1

LANGUAGE: sql
CODE:
```
create table if not exists employees (
  id bigint primary key generated always as identity,
  name text not null,
  email text,
  created_at timestamptz default now()
);
```

----------------------------------------

TITLE: Creating an Exporter User with Limited Permissions in PostgreSQL
DESCRIPTION: SQL commands to create a dedicated user named 'exporter' with login privileges and grant them the necessary permissions to access the public schema and select from the profiles table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a new user with login privileges
create user exporter
  with password 'exporter_secure_password';

-- Allow this user to select the rows we need
grant usage on schema public to exporter;
grant select on profiles to exporter;
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library via npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Creating Token Exchange Endpoint in Remix for Supabase Auth
DESCRIPTION: Implementation of a Remix loader function to handle Supabase authentication token exchange for password reset flow. It verifies OTP tokens and manages cookie headers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_29

LANGUAGE: TypeScript
CODE:
```
import { redirect, type LoaderFunctionArgs } from '@remix-run/node'
import { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'
import { type EmailOtpType } from '@supabase/supabase-js'

export async function loader({ request }: LoaderFunctionArgs) {
  const requestUrl = new URL(request.url)
  const token_hash = requestUrl.searchParams.get('token_hash')
  const type = requestUrl.searchParams.get('type') as EmailOtpType | null
  const next = requestUrl.searchParams.get('next') || '/'
  const headers = new Headers()

  if (token_hash && type) {
    const supabase = createServerClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {
      cookies: {
        getAll() {
          return parseCookieHeader(request.headers.get('Cookie') ?? '')
        },
        setAll(key, value, options) {
          headers.append('Set-Cookie', serializeCookieHeader(key, value, options))
        },
      },
    })

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })

    if (!error) {
      return redirect(next, { headers })
    }
  }

  // return the user to an error page with instructions
  return redirect('/auth/auth-code-error', { headers })
}
```

----------------------------------------

TITLE: Decoded Supabase User JWT Payload
DESCRIPTION: This JavaScript code snippet shows the decoded payload of a Supabase user-specific JWT.  It includes claims about the user, such as `aud` (audience), `exp` (expiration time), `sub` (subject), `email`, `app_metadata`, `user_metadata`, and `role`. The `sub` claim represents the user's UUID, and the `role` is typically set to `authenticated`.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
{
  "aud": "authenticated",
  "exp": 1615824388,
  "sub": "0334744a-f2a2-4aba-8c8a-6e748f62a172",
  "email": "valid.email@supabase.io",
  "app_metadata": {
    "provider": "email"
  },
  "user_metadata": null,
  "role": "authenticated"
}
```

----------------------------------------

TITLE: Less Than or Equal To Filter Implementation
DESCRIPTION: Shows how to listen for database changes when a column is less than or equal to a specific value using the 'lte' filter. Uses Postgres's <= operator to filter profile updates where age is less than or equal to 65.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_43

LANGUAGE: javascript
CODE:
```
const channel = supabase
  .channel('changes')
  .on(
    'postgres_changes',
    {
      event: 'UPDATE',
      schema: 'public',
      table: 'profiles',
      filter: 'age=lte.65',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

LANGUAGE: dart
CODE:
```
supabase
    .channel('changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.insert,
        schema: 'public',
        table: 'profiles',
        filter: PostgresChangeFilter(
          type: PostgresChangeFilterType.lte,
          column: 'age',
          value: 65,
        ),
        callback: (payload) => print(payload))
    .subscribe();
```

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("db-changes")

let changes = await myChannel.postgresChange(
  InsertAction.self,
  schema: "public",
  table: "profiles",
  filter: .lte("age", value: 65)
)

await myChannel.subscribe()

for await change in changes {
  print(change.record)
}
```

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = "public") {
    table = "profiles"
    filter = "age=lte.65"
}

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

LANGUAGE: python
CODE:
```
changes = supabase.channel('db-changes').on_postgres_changes(
  "UPDATE",
  schema="public",
  table="profiles",
  filter="age=lte.65",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Ollama Integration for LLM Inference
DESCRIPTION: Implements a streaming interface for large language model inference using Ollama with the Mistral model. Handles prompt processing and stream response.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'
const session = new Supabase.ai.Session('mistral')

Deno.serve(async (req: Request) => {
  const params = new URL(req.url).searchParams
  const prompt = params.get('prompt') ?? ''

  const output = await session.run(prompt, { stream: true })

  const headers = new Headers({
    'Content-Type': 'text/event-stream',
    Connection: 'keep-alive',
  })

  const stream = new ReadableStream({
    async start(controller) {
      const encoder = new TextEncoder()

      try {
        for await (const chunk of output) {
          controller.enqueue(encoder.encode(chunk.response ?? ''))
        }
      } catch (err) {
        console.error('Stream error:', err)
      } finally {
        controller.close()
      }
    },
  })

  return new Response(stream, {
    headers,
  })
})
```

----------------------------------------

TITLE: Uploading Files to S3 using PutObject in JavaScript
DESCRIPTION: This snippet demonstrates how to upload a file to Supabase Storage using the S3 PutObject action. It uses the @aws-sdk/client-s3 package to create an S3 client and send a PutObjectCommand.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/s3-uploads.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3'

const s3Client = new S3Client({...})

const file = fs.createReadStream('path/to/file')

const uploadCommand = new PutObjectCommand({
  Bucket: 'bucket-name',
  Key: 'path/to/file',
  Body: file,
  ContentType: 'image/jpeg',
})

await s3Client.send(uploadCommand)
```

----------------------------------------

TITLE: Seed Function for Creating and Populating Vector Collection
DESCRIPTION: Python function to create a Supabase Vector collection, generate embeddings for sample images, and upsert them into the database with metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
def seed():
    # create vector store client
    vx = vecs.create_client(DB_CONNECTION)

    # get or create a collection of vectors with 1024 dimensions
    images = vx.get_or_create_collection(name="image_vectors", dimension=1024)

    # Generate image embeddings with Amazon Titan Model
    img_emb1 = encode_image('./images/one.jpg')
    img_emb2 = encode_image('./images/two.jpg')
    img_emb3 = encode_image('./images/three.jpg')
    img_emb4 = encode_image('./images/four.jpg')

    # add records to the *images* collection
    images.upsert(
        records=[
            (
                "one.jpg",       # the vector's identifier
                img_emb1,        # the vector. list or np.array
                {"type": "jpg"}  # associated  metadata
            ), (
                "two.jpg",
                img_emb2,
                {"type": "jpg"}
            ), (
                "three.jpg",
                img_emb3,
                {"type": "jpg"}
            ), (
                "four.jpg",
                img_emb4,
                {"type": "jpg"}
            )
        ]
    )
    print("Inserted images")

    # index the collection for fast search performance
    images.create_index()
    print("Created index")
```

----------------------------------------

TITLE: Protected API Route in TypeScript
DESCRIPTION: The TypeScript version of the protected API route ensures type safety for request and response objects while providing similar functionality to the JavaScript version, returning user data only if the user is authenticated.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
import { NextApiHandler } from 'next'
import { createPagesServerClient } from '@supabase/auth-helpers-nextjs'

const ProtectedRoute: NextApiHandler = async (req, res) => {
  // Create authenticated Supabase Client
  const supabase = createPagesServerClient({ req, res })
  // Check if we have a session
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!user)
    return res.status(401).json({
      error: 'not_authenticated',
      description: 'The user does not have an active session or is not authenticated',
    })

  // Run queries with RLS on the server
  const { data } = await supabase.from('test').select('*')
  res.json(data)
}

export default ProtectedRoute
```

----------------------------------------

TITLE: Broadcast Authorization Policies
DESCRIPTION: SQL policies for controlling broadcast message access and sending capabilities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/authorization.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create policy "authenticated can receive broadcast"
on "realtime"."messages"
for select
to authenticated
using (
exists (
    select
      user_id
    from
      rooms_users
    where
      user_id = (select auth.uid())
      and topic = (select realtime.topic())
      and realtime.messages.extension in ('broadcast')
  )
);
```

----------------------------------------

TITLE: Extension-Specific RLS Policy Creation
DESCRIPTION: SQL command showing how to create an RLS policy that controls access based on the Realtime extension type (broadcast or presence).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create policy "read access to broadcast and presence"
on "realtime"."messages"
as permissive
for select
to authenticated
using (
  realtime.messages.extension in ('broadcast', 'presence') -- specify the topic name
);
```

----------------------------------------

TITLE: Installing Drizzle ORM and Dependencies with npm
DESCRIPTION: Command to install Drizzle ORM and its dependencies including postgres client and drizzle-kit development dependency.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/drizzle.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
npm i drizzle-orm postgres
npm i -D drizzle-kit
```

----------------------------------------

TITLE: Implementing GitHub OAuth Sign-In in Kotlin with Supabase
DESCRIPTION: This snippet illustrates how to set up GitHub sign-in in a Kotlin application using Supabase. The example shows the use of `signInWith` method specifying `Github` as the provider.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithGithub() {
	supabase.auth.signInWith(Github)
}
```

----------------------------------------

TITLE: Initializing Seed Data in Supabase
DESCRIPTION: SQL files placed in ./supabase/seed.sql will be used to populate Preview Branches with initial data. This provides isolated test environments without using production data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_7

LANGUAGE: filepath
CODE:
```
./supabase/seed.sql
```

----------------------------------------

TITLE: Initiating Password Reset in JavaScript with Supabase
DESCRIPTION: JavaScript function that uses Supabase client to initiate a password reset flow by sending a reset password email to the user's email address.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_31

LANGUAGE: JavaScript
CODE:
```
async function resetPassword() {
  const { data, error } = await supabase.auth.resetPasswordForEmail(email)
}
```

----------------------------------------

TITLE: Creating Database Webhook Trigger (SQL)
DESCRIPTION: Shows the SQL statement to create a trigger named "my_webhook" that fires after an INSERT on "public"."my_table". It executes the supabase_functions.http_request function to send a POST request to a specified URL with headers and a timeout. This requires the pg_net extension and the supabase_functions.http_request function to be available.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/webhooks.mdx#_snippet_0

LANGUAGE: SQL
CODE:
```
create trigger "my_webhook" after insert
on "public"."my_table" for each row
execute function "supabase_functions"."http_request"(
  'http://host.docker.internal:3000',
  'POST',
  '{"Content-Type":"application/json"}',
  '{}',
  '1000'
);
```

----------------------------------------

TITLE: Implementing Row Level Security Policy in Supabase
DESCRIPTION: Example of creating a Row Level Security (RLS) policy in Supabase that restricts users to viewing only their own documents. This policy is enforced across all access methods including REST API and edge functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_alternatives/supabase-vs-auth0.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create policy "Users can only view their own documents."
on docs for select
using ( (select auth.uid()) = user_id );
```

----------------------------------------

TITLE: Creating Sign-up Route Handler in JavaScript
DESCRIPTION: This JavaScript snippet illustrates how to create a server-side route handler for user sign-up in a Next.js application with Supabase. It processes form data from a POST request and utilizes Supabase to register a new user, followed by redirecting the user using Next.js' response utilities. Essential dependencies include @supabase/auth-helpers-nextjs and next/headers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_8

LANGUAGE: JavaScript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

export async function POST(request) {
  const requestUrl = new URL(request.url)
  const formData = await request.formData()
  const email = formData.get('email')
  const password = formData.get('password')
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })

  await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${requestUrl.origin}/auth/callback`,
    },
  })

  return NextResponse.redirect(requestUrl.origin, {
    status: 301,
  })
}

```

----------------------------------------

TITLE: Basic RLS Policy for Realtime Topic Access
DESCRIPTION: SQL policy that allows authenticated users to read messages on a specific topic using the realtime.topic() helper function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/authorization.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create policy "authenticated can read all messages on topic"
on "realtime"."messages"
for select
to authenticated
using (
  (select realtime.topic()) = 'room-1'
);
```

----------------------------------------

TITLE: Signing Out - JavaScript
DESCRIPTION: This JavaScript snippet shows how to sign out users from the Instagram account using the Supabase client. The `signOut()` method is called to remove the user from the session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-discord.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}
```

----------------------------------------

TITLE: Using Generated Types with Supabase Client in TypeScript
DESCRIPTION: Shows how to use the generated TypeScript types to enhance type checking when querying the database with supabase-js v2.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import type { Database } from './DatabaseDefinitions'

const supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)

const { data } = await supabase.from('messages').select().match({ id: 1 })
```

----------------------------------------

TITLE: Creating Supabase SSR Client in SvelteKit
DESCRIPTION: Demonstrates how to create a Supabase client for server-side rendering in SvelteKit, handling cookie management for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_19

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr';

export const load = async ({ fetch, cookies }) => {
  const supabase = createServerClient(
    import.meta.env.VITE_SUPABASE_URL,
    import.meta.env.VITE_SUPABASE_ANON_KEY,
    {
      cookies: {
        get: (key) => cookies.get(key),
        set: (key, value, options) => cookies.set(key, value, options),
        remove: (key, options) => cookies.delete(key, options),
      },
    }
  );

  const { data } = await supabase.from('countries').select();

  return { countries: data };
};
```

----------------------------------------

TITLE: Creating Users with Admin API
DESCRIPTION: Uses edge.exec to call the Supabase Auth Admin API for creating new users. Demonstrates setting email, password and user metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
select edge.exec(
$js$

const { data, error } = await supabase.auth.admin.createUser({
  email: 'user@email.com',
  password: 'password',
  user_metadata: { name: 'Yoda' }
});

$js$));
```

----------------------------------------

TITLE: Implementing Profile View with Image Selection and Update (SwiftUI, Supabase)
DESCRIPTION: This SwiftUI View (`ProfileView`) allows users to view and edit their profile information, including username, full name, website, and avatar image. It integrates `PhotosPicker` for selecting a new avatar, handles image loading, and provides functions to fetch the initial profile data, update the profile in the Supabase database, and upload the selected avatar image to Supabase Storage. It manages loading state and includes sign-out functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#_snippet_6

LANGUAGE: Swift
CODE:
```
import PhotosUI
import Storage
import Supabase
import SwiftUI

struct ProfileView: View {
  @State var username = ""
  @State var fullName = ""
  @State var website = ""

  @State var isLoading = false

 @State var imageSelection: PhotosPickerItem?
 @State var avatarImage: AvatarImage?

  var body: some View {
    NavigationStack {
      Form {
        Section {
          HStack {
            Group {
              if let avatarImage {
                avatarImage.image.resizable()
              } else {
                Color.clear
              }
            }
            .scaledToFit()
            .frame(width: 80, height: 80)

            Spacer()

            PhotosPicker(selection: $imageSelection, matching: .images) {
              Image(systemName: "pencil.circle.fill")
                .symbolRenderingMode(.multicolor)
                .font(.system(size: 30))
                .foregroundColor(.accentColor)
            }
          }
        }

        Section {
          TextField("Username", text: $username)
            .textContentType(.username)
            .textInputAutocapitalization(.never)
          TextField("Full name", text: $fullName)
            .textContentType(.name)
          TextField("Website", text: $website)
            .textContentType(.URL)
            .textInputAutocapitalization(.never)
        }

        Section {
          Button("Update profile") {
            updateProfileButtonTapped()
          }
          .bold()

          if isLoading {
            ProgressView()
          }
        }
      }
      .navigationTitle("Profile")
      .toolbar(content: {
        ToolbarItem {
          Button("Sign out", role: .destructive) {
            Task {
              try? await supabase.auth.signOut()
            }
          }
        }
      })
      .onChange(of: imageSelection) { _, newValue in
        guard let newValue else { return }
        loadTransferable(from: newValue)
      }
    }
    .task {
      await getInitialProfile()
    }
  }

  func getInitialProfile() async {
    do {
      let currentUser = try await supabase.auth.session.user

      let profile: Profile =
      try await supabase
        .from("profiles")
        .select()
        .eq("id", value: currentUser.id)
        .single()
        .execute()
        .value

      username = profile.username ?? ""
      fullName = profile.fullName ?? ""
      website = profile.website ?? ""

      if let avatarURL = profile.avatarURL, !avatarURL.isEmpty {
        try await downloadImage(path: avatarURL)
      }

    } catch {
      debugPrint(error)
    }
  }

  func updateProfileButtonTapped() {
    Task {
      isLoading = true
      defer { isLoading = false }
      do {
        let imageURL = try await uploadImage()

        let currentUser = try await supabase.auth.session.user

        let updatedProfile = Profile(
          username: username,
          fullName: fullName,
          website: website,
          avatarURL: imageURL
        )

        try await supabase
          .from("profiles")
          .update(updatedProfile)
          .eq("id", value: currentUser.id)
          .execute()
      } catch {
        debugPrint(error)
      }
    }
  }

  private func loadTransferable(from imageSelection: PhotosPickerItem) {
    Task {
      do {
        avatarImage = try await imageSelection.loadTransferable(type: AvatarImage.self)
      } catch {
        debugPrint(error)
      }
    }
  }

  private func downloadImage(path: String) async throws {
    let data = try await supabase.storage.from("avatars").download(path: path)
    avatarImage = AvatarImage(data: data)
  }

  private func uploadImage() async throws -> String? {
    guard let data = avatarImage?.data else { return nil }

    let filePath = "\(UUID().uuidString).jpeg"

    try await supabase.storage
      .from("avatars")
      .upload(
        filePath,
        data: data,
        options: FileOptions(contentType: "image/jpeg")
      )

    return filePath
  }
}
```

----------------------------------------

TITLE: Supabase Initialization in Flutter
DESCRIPTION: Dart code to initialize Supabase client in the Flutter application
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SUPABASE_ANON_KEY',
  );
  runApp(const MainApp());
}

final supabase = Supabase.instance.client;
```

----------------------------------------

TITLE: JavaScript Channel Subscription with Private Config
DESCRIPTION: JavaScript implementation for subscribing to a private realtime channel with broadcast event handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/authorization.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const channel = supabase.channel('room-1', {
  config: { private: true },
})

channel
  .on('broadcast', { event: 'test' }, (payload) => console.log(payload))
  .subscribe((status, err) => {
    if (status === 'SUBSCRIBED') {
      console.log('Connected!')
    } else {
      console.error(err)
    }
  })
```

----------------------------------------

TITLE: Handling Supabase OAuth Callback and Token Exchange in TypeScript
DESCRIPTION: This code snippet shows how to handle the OAuth callback from Supabase, exchange the authorization code for access and refresh tokens, and store them. It uses the PKCE flow and handles the callback securely.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/integrations/build-a-supabase-integration.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
router.get('/connect-supabase/oauth2/callback', async (ctx) => {
  // Make sure the codeVerifier is present for the user's session.
  const codeVerifier = ctx.state.session.get('codeVerifier') as string
  if (!codeVerifier) throw new Error('No codeVerifier!')

  // Exchange the authorization code for an access token.
  const tokens = await fetch(config.tokenUri, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      Accept: 'application/json',
      Authorization: `Basic ${btoa(`${config.clientId}:${config.clientSecret}`)}`,
    },
    body: new URLSearchParams({
      grant_type: 'authorization_code',
      code: ctx.request.url.searchParams.get('code') || '',
      redirect_uri: config.redirectUri,
      code_verifier: codeVerifier,
    }),
  }).then((res) => res.json())
  console.log('tokens', tokens)

  // Store the tokens in your DB for future use.

  ctx.response.body = 'Success'
})
```

----------------------------------------

TITLE: Installing Supabase CLI
DESCRIPTION: Install the Supabase Command Line Interface (CLI) globally or as a dev dependency using your preferred package manager (npm, yarn, pnpm) or Homebrew. The CLI is necessary to manage local Supabase projects and services.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
npm install supabase --save-dev
```

LANGUAGE: sh
CODE:
```
yarn add supabase --dev
```

LANGUAGE: sh
CODE:
```
pnpm add supabase --save-dev
```

LANGUAGE: sh
CODE:
```
brew install supabase/tap/supabase
```

----------------------------------------

TITLE: Authentication with Password in Supabase.js v2
DESCRIPTION: Example of signing in with email and password using the new signInWithPassword() method in Supabase.js v2.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_9

LANGUAGE: ts
CODE:
```
const { data } = await supabase.auth.signInWithPassword({
  email: 'hello@example',
  password: 'pass',
})
```

----------------------------------------

TITLE: PostgreSQL Schema for User Profiles with Row Level Security
DESCRIPTION: SQL script that creates a profiles table with row level security policies for user management. The script sets up table constraints, access policies, realtime publication, and storage bucket for avatars.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/solid-user-management/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a table for Public Profiles
create table
	profiles (
		id uuid references auth.users not null,
		updated_at timestamp
		with
			time zone,
			username text unique,
			avatar_url text,
			website text,
			primary key (id),
			unique (username),
			constraint username_length check (char_length(username) >= 3)
	);

alter table
	profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select
	using (true);

create policy "Users can insert their own profile." on profiles for insert
with
	check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles for
update
	using ((select auth.uid()) = id);

-- Set up Realtime!
begin;

drop
	publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter
	publication supabase_realtime add table profiles;

-- Set up Storage!
insert into
	storage.buckets (id, name)
values
	('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select
	using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for insert
with
	check (bucket_id = 'avatars');
```

----------------------------------------

TITLE: Handling Authentication Client Component in TypeScript
DESCRIPTION: This TypeScript code snippet demonstrates a client-side component for user authentication in a Next.js application using Supabase. It includes methods for user sign-up, sign-in, and sign-out, utilizing a typed Supabase client and React hooks for state management. Dependencies include @supabase/auth-helpers-nextjs, next/navigation, and TypeScript types for the database are specified for type safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_7

LANGUAGE: TypeScript
CODE:
```
'use client'

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useRouter } from 'next/navigation'
import { useState } from 'react'

import type { Database } from '@/lib/database.types'

export default function Login() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const router = useRouter()
  const supabase = createClientComponentClient<Database>()

  const handleSignUp = async () => {
    await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `${location.origin}/auth/callback`,
      },
    })
    router.refresh()
  }

  const handleSignIn = async () => {
    await supabase.auth.signInWithPassword({
      email,
      password,
    })
    router.refresh()
  }

  const handleSignOut = async () => {
    await supabase.auth.signOut()
    router.refresh()
  }

  return (
    <>
      <input name="email" onChange={(e) => setEmail(e.target.value)} value={email} />
      <input
        type="password"
        name="password"
        onChange={(e) => setPassword(e.target.value)}
        value={password}
      />
      <button onClick={handleSignUp}>Sign up</button>
      <button onClick={handleSignIn}>Sign in</button>
      <button onClick={handleSignOut}>Sign out</button>
    </>
  )
}

```

----------------------------------------

TITLE: Building Auth Component with Sign In and Sign Up Functionality
DESCRIPTION: React Native component that handles user authentication with email and password, including session management, form inputs, and error handling. It also configures auto-refresh for authentication state.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_4

LANGUAGE: tsx
CODE:
```
import React, { useState } from 'react'
import { Alert, StyleSheet, View, AppState } from 'react-native'
import { supabase } from '../lib/supabase'
import { Button, Input } from '@rneui/themed'

// Tells Supabase Auth to continuously refresh the session automatically if
// the app is in the foreground. When this is added, you will continue to receive
// `onAuthStateChange` events with the `TOKEN_REFRESHED` or `SIGNED_OUT` event
// if the user's session is terminated. This should only be registered once.
AppState.addEventListener('change', (state) => {
  if (state === 'active') {
    supabase.auth.startAutoRefresh()
  } else {
    supabase.auth.stopAutoRefresh()
  }
})

export default function Auth() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)

  async function signInWithEmail() {
    setLoading(true)
    const { error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    setLoading(false)
  }

  async function signUpWithEmail() {
    setLoading(true)
    const {
      data: { session },
      error,
    } = await supabase.auth.signUp({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    if (!session) Alert.alert('Please check your inbox for email verification!')
    setLoading(false)
  }

  return (
    <View style={styles.container}>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Input
          label="Email"
          leftIcon={{ type: 'font-awesome', name: 'envelope' }}
          onChangeText={(text) => setEmail(text)}
          value={email}
          placeholder="email@address.com"
          autoCapitalize={'none'}
        />
      </View>
      <View style={styles.verticallySpaced}>
        <Input
          label="Password"
          leftIcon={{ type: 'font-awesome', name: 'lock' }}
          onChangeText={(text) => setPassword(text)}
          value={password}
          secureTextEntry={true}
          placeholder="Password"
          autoCapitalize={'none'}
        />
      </View>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Button title="Sign in" disabled={loading} onPress={() => signInWithEmail()} />
      </View>
      <View style={styles.verticallySpaced}>
        <Button title="Sign up" disabled={loading} onPress={() => signUpWithEmail()} />
      </View>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    marginTop: 40,
    padding: 12,
  },
  verticallySpaced: {
    paddingTop: 4,
    paddingBottom: 4,
    alignSelf: 'stretch',
  },
  mt20: {
    marginTop: 20,
  },
})
```

----------------------------------------

TITLE: Edge Function Implementation - Main Handler
DESCRIPTION: Complete implementation of the Edge Function including authentication, code execution, and error handling. Uses Supabase client and supports async operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import "jsr:@supabase/functions-js/edge-runtime.d.ts";

// Import the supabase client
import { createClient } from "<https://esm.sh/@supabase/supabase-js@2>";

console.log("===\n\tBooted Edge Worker!\n===\n");
const supabase_url = Deno.env.get("SUPABASE_URL") ?? "";
const service_role = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
// Set the permission to service_role key:
const supabase = createClient(supabase_url, service_role);
// This allows us to use Supabase.ai in the function
const session = new Supabase.ai.Session('gte-small');

Deno.serve(async (req: Request) =>
  const authorization = req.headers.get("Authorization");
  if (!authorization) throw new Error("Authorization header is missing.");
  // Ensures that the function is called with service_role to prevent missuse
  if (!authorization.includes(service_role)) {
    throw new Error("Authorization header is invalid.");
  }

  const { code } = await req.json();
  try {
    // Wrap the provided code in an async function context
    const asyncFunction = new Function('supabase', `
      return (async () => {
        ${code.replace(/\\/g, '')}
      })();
    `);
    // Pass the Supabase client as the scope for the function to use:
    const data = await asyncFunction(supabase);
    console.log(data);
    return new Response(
      JSON.stringify({ data }),
      { headers: { 'Content-Type': 'application/json', 'Connection': 'keep-alive' } },
    );
  } catch (error) {
    console.error("Error executing user code:", error);
    return new Response(
      JSON.stringify({ error: "An error occurred -> " + error.message }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
});
```

----------------------------------------

TITLE: Creating Token Exchange Endpoint in Next.js
DESCRIPTION: This snippet creates a new API endpoint in a Next.js application to handle the token exchange for authentication. It retrieves parameters from the request, verifies the OTP token with Supabase, and redirects the user based on the success of the verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { type EmailOtpType } from '@supabase/supabase-js'
import { type NextRequest } from 'next/server'

import { createClient } from '@/utils/supabase/server'
import { redirect } from 'next/navigation'

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const token_hash = searchParams.get('token_hash')
  const type = searchParams.get('type') as EmailOtpType | null
  const next = searchParams.get('next') ?? '/'

  if (token_hash && type) {
    const supabase = await createClient()

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })
    if (!error) {
      // redirect user to specified redirect URL or root of app
      redirect(next)
    }
  }

  // redirect the user to an error page with some instructions
  redirect('/auth/auth-code-error')
}
```

----------------------------------------

TITLE: Basic Text Search Implementation
DESCRIPTION: Demonstrates basic text search implementation across multiple languages using the created fts column to search for specific terms.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_27

LANGUAGE: sql
CODE:
```
select
  *
from
  books
where
  fts @@ to_tsquery('little & big');
```

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('books').select().textSearch('fts', `'little' & 'big'`)
```

LANGUAGE: dart
CODE:
```
final result = await client
  .from('books')
  .select()
  .textSearch('fts', "'little' & 'big'");
```

LANGUAGE: swift
CODE:
```
let response = try await client
  .from("books")
  .select()
  .textSearch("fts", value: "'little' & 'big'")
  .execute()
```

LANGUAGE: kotlin
CODE:
```
val data = supabase.from("books").select {
    filter {
        textSearch("fts", "'title' & 'big'", TextSearchType.NONE)
    }
}
```

LANGUAGE: python
CODE:
```
data = client.from_('books').select().text_search('fts', "'little' & 'big'").execute()
```

----------------------------------------

TITLE: Creating a PostgreSQL RLS Policy for Selective Access
DESCRIPTION: A SQL example showing how to create a Row Level Security policy on a todos table that restricts users to only select their own todos based on user_id matching the authenticated user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-01-realtime-row-level-security-in-postgresql.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create policy todo_select_policy
    on todos for select
    using ( (select auth.uid()) = user_id );
```

----------------------------------------

TITLE: Implementing Email Signup with Python
DESCRIPTION: Python code snippet for signing up a new user with email and password authentication in Supabase. This example includes an optional email_redirect_to parameter for after confirmation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
data = await supabase.auth.sign_up({
  'email': 'valid.email@supabase.io',
  'password': 'example-password',
  'options': {
    'email_redirect_to': 'https://example.com/welcome',
  },
})
```

----------------------------------------

TITLE: Using TypeScript Types with Supabase Client
DESCRIPTION: Demonstrates how to use the generated TypeScript types with the Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { Database } from './database.types'

const supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY)
```

----------------------------------------

TITLE: Unsubscribing from Realtime Events in Supabase with TypeScript
DESCRIPTION: Code examples showing how to unsubscribe from realtime events in Supabase. The older version calls unsubscribe() directly on the listener, while the newer version uses the removeChannel() method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
userListener.unsubscribe()
```

LANGUAGE: typescript
CODE:
```
supabase.removeChannel(userListener)
```

----------------------------------------

TITLE: Implementing Real-Time Chat Page in Flutter with Supabase
DESCRIPTION: This code snippet creates a ChatPage widget that displays real-time messages using Supabase's stream() method. It includes functionality for loading user profiles, displaying chat bubbles, and sending new messages. The widget uses StreamBuilder to handle real-time updates and implements a message input bar.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_12

LANGUAGE: dart
CODE:
```
import 'dart:async';

import 'package:flutter/material.dart';

import 'package:my_chat_app/models/message.dart';
import 'package:my_chat_app/models/profile.dart';
import 'package:my_chat_app/utils/constants.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:timeago/timeago.dart';

/// Page to chat with someone.
///
/// Displays chat bubbles as a ListView and TextField to enter new chat.
class ChatPage extends StatefulWidget {
  const ChatPage({Key? key}) : super(key: key);

  static Route<void> route() {
    return MaterialPageRoute(
      builder: (context) => const ChatPage(),
    );
  }

  @override
  State<ChatPage> createState() => _ChatPageState();
}

class _ChatPageState extends State<ChatPage> {
  late final Stream<List<Message>> _messagesStream;
  final Map<String, Profile> _profileCache = {};

  @override
  void initState() {
    final myUserId = supabase.auth.currentUser!.id;
    _messagesStream = supabase
        .from('messages')
        .stream(primaryKey: ['id'])
        .order('created_at')
        .map((maps) => maps
            .map((map) => Message.fromMap(map: map, myUserId: myUserId))
            .toList());
    super.initState();
  }

  Future<void> _loadProfileCache(String profileId) async {
    if (_profileCache[profileId] != null) {
      return;
    }
    final data =
        await supabase.from('profiles').select().eq('id', profileId).single();
    final profile = Profile.fromMap(data);
    setState(() {
      _profileCache[profileId] = profile;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Chat')),
      body: StreamBuilder<List<Message>>(
        stream: _messagesStream,
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            final messages = snapshot.data!;
            return Column(
              children: [
                Expanded(
                  child: messages.isEmpty
                      ? const Center(
                          child: Text('Start your conversation now :)'),
                        )
                      : ListView.builder(
                          reverse: true,
                          itemCount: messages.length,
                          itemBuilder: (context, index) {
                            final message = messages[index];

                            /// I know it's not good to include code that is not related
                            /// to rendering the widget inside build method, but for
                            /// creating an app quick and dirty, it's fine 😂
                            _loadProfileCache(message.profileId);

                            return _ChatBubble(
                              message: message,
                              profile: _profileCache[message.profileId],
                            );
                          },
                        ),
                ),
                const _MessageBar(),
              ],
            );
          } else {
            return preloader;
          }
        },
      ),
    );
  }
}

/// Set of widget that contains TextField and Button to submit message
class _MessageBar extends StatefulWidget {
  const _MessageBar({
    Key? key,
  }) : super(key: key);

  @override
  State<_MessageBar> createState() => _MessageBarState();
}

class _MessageBarState extends State<_MessageBar> {
  late final TextEditingController _textController;

  @override
  Widget build(BuildContext context) {
    return Material(
      color: Colors.grey[200],
      child: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Row(
            children: [
              Expanded(
                child: TextFormField(
                  keyboardType: TextInputType.text,
                  maxLines: null,
                  autofocus: true,
                  controller: _textController,
                  decoration: const InputDecoration(
                    hintText: 'Type a message',
                    border: InputBorder.none,
                    focusedBorder: InputBorder.none,
                    contentPadding: EdgeInsets.all(8),
                  ),
                ),
              ),
              TextButton(
                onPressed: () => _submitMessage(),
                child: const Text('Send'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void initState() {
    _textController = TextEditingController();
    super.initState();
  }

  @override
  void dispose() {
    _textController.dispose();
    super.dispose();
  }

  void _submitMessage() async {
    final text = _textController.text;
    final myUserId = supabase.auth.currentUser!.id;
    if (text.isEmpty) {
      return;
    }
    _textController.clear();
    try {
      await supabase.from('messages').insert({
        'profile_id': myUserId,
        'content': text,
      });
    } on PostgrestException catch (error) {
      context.showErrorSnackBar(message: error.message);
    } catch (_) {
      context.showErrorSnackBar(message: unexpectedErrorMessage);
    }
  }
}

class _ChatBubble extends StatelessWidget {
  const _ChatBubble({
    Key? key,
    required this.message,
    required this.profile,
  }) : super(key: key);

  final Message message;
  final Profile? profile;

  @override
  Widget build(BuildContext context) {
    List<Widget> chatContents = [
      if (!message.isMine)
        CircleAvatar(
          child: profile == null
              ? preloader
              : Text(profile!.username.substring(0, 2)),
        ),
      const SizedBox(width: 12),
      Flexible(
        child: Container(
          padding: const EdgeInsets.symmetric(
            vertical: 8,
            horizontal: 12,
          ),
          decoration: BoxDecoration(
            color: message.isMine
                ? Theme.of(context).primaryColor
                : Colors.grey[300],
            borderRadius: BorderRadius.circular(8),
          ),
          child: Text(message.content),
        ),
      ),
      const SizedBox(width: 12),
      Text(format(message.createdAt, locale: 'en_short')),
      const SizedBox(width: 60),
    ];
    if (message.isMine) {
      chatContents = chatContents.reversed.toList();
    }
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 18),
      child: Row(
        mainAxisAlignment:
            message.isMine ? MainAxisAlignment.end : MainAxisAlignment.start,
        children: chatContents,
      ),
    );
  }
}
```

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Example of required environment variables for Supabase configuration in .env.local file.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/nextjs/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=[INSERT SUPABASE PROJECT URL]
NEXT_PUBLIC_SUPABASE_ANON_KEY=[INSERT SUPABASE PROJECT API ANON KEY]
```

----------------------------------------

TITLE: Fetching Supabase Data Count: Deprecating FetchOption (Dart)
DESCRIPTION: Shows how to fetch the count of records in Supabase using the deprecated `FetchOption` in v1 and the new `.count()` methods in v2.  `.count()` can be chained after `.select()` to retrieve data and its count simultaneously, or called directly on `.from()` to perform a head request fetching only the count value.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_12

LANGUAGE: dart
CODE:
```
// Request with count option
final res = await supabase.from('cities').select(
      'name',
      const FetchOptions(
        count: CountOption.exact,
      ),
    );

final data = res.data;
final count = res.count;

// Request with count and head option
// obtains the count value without fetching the data.
final res = await supabase.from('cities').select(
      'name',
      const FetchOptions(
        count: CountOption.exact,
        head: true,
      ),
    );

final count = res.count;
```

LANGUAGE: dart
CODE:
```
// Request with count option
final res = await supabase
    .from('cities')
    .select('name')
    .count(); // CountOption.exact is the default value

final data = res.data;
final int count = res.count;

// `.count()` directly on `.from()` performs a head request,
// obtaining the count value without fetching the data.
final int count = await supabase
    .from('cities')
    .count(); // CountOption.exact is the default value
```

----------------------------------------

TITLE: ZIP File Processing with Background Tasks and Ephemeral Storage in JSX
DESCRIPTION: This code uses background tasks and ephemeral storage to process large ZIP files efficiently. It writes the uploaded ZIP to temporary storage, then processes it in a background task to avoid memory limitations when handling large archives.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-03-edge-functions-background-tasks-websockets.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import { BlobWriter, ZipReader, ZipReaderStream } from 'https://deno.land/x/zipjs/index.js'

import { createClient } from 'jsr:@supabase/supabase-js@2'

const supabase = createClient(
  Deno.env.get('SUPABASE_URL'),
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')
)

let numFilesUploaded = 0

async function processZipFile(uploadId, filepath) {
  const file = await Deno.open(filepath, { read: true })
  const zipReader = new ZipReader(file.readable)
  const entries = await zipReader.getEntries()

  await supabase.storage.createBucket(uploadId, {
    public: false,
  })

  await Promise.all(
    entries.map(async (entry) => {
      // read file entry
      const blobWriter = new BlobWriter()
      const blob = await entry.getData(blobWriter)

      if (entry.directory) {
        return
      }

      // write file to Supabase Storage
      await supabase.storage.from(uploadId).upload(entry.filename, blob, {})

      numFilesUploaded += 1
      console.log('uploaded', entry.filename)
    })
  )

  await zipReader.close()
}

// you can add a `beforeunload` event listener to be notified
// when Function Worker is about to terminate.
// use this to do any logging, save states.
globalThis.addEventListener('beforeunload', (ev) => {
  console.log('function about to terminate: ', ev.detail.reason)
  console.log('number of files uploaded: ', numFilesUploaded)
})

async function writeZipFile(filepath, stream) {
  await Deno.writeFile(filepath, stream)
}

Deno.serve(async (req) => {
  const uploadId = crypto.randomUUID()
  await writeZipFile('/tmp/' + uploadId, req.body)

  // process zip file in a background task
  // calling EdgeRuntime.waitUntil() would ensure
  // function worker wouldn't exit until the promise is completed.
  EdgeRuntime.waitUntil(processZipFile(uploadId, '/tmp/' + uploadId))

  return new Response(
    JSON.stringify({
      uploadId,
    }),
    {
      headers: {
        'content-type': 'application/json',
      },
    }
  )
})
```

----------------------------------------

TITLE: Configuring Supabase Environment Variables
DESCRIPTION: Setting up environment variables in a .env file to store Supabase URL and anonymous key for API authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Testing Prisma API Connection in TypeScript
DESCRIPTION: This snippet provides a TypeScript example for testing the Prisma API connection. It demonstrates how to create a PrismaClient instance, query a table, and handle the connection lifecycle.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_26

LANGUAGE: typescript
CODE:
```
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function main() {
  //change to reference a table in your schema
  const val = await prisma.<SOME_TABLE_NAME>.findMany({
    take: 10,
  });
  console.log(val);
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
  process.exit(1);
});
```

----------------------------------------

TITLE: Subscribe to Realtime Events in TypeScript
DESCRIPTION: This TypeScript code snippet demonstrates how to subscribe to realtime events from a Supabase database within a Remix application.  It uses types for enhanced type safety with Supabase and the database. The snippet leverages `createServerClient` for server-side Supabase client creation and establishes a channel to listen for INSERT events on the posts table, updating the state with new post data when an event occurs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
import { useLoaderData, useOutletContext } from '@remix-run/react'
import { createServerClient } from '@supabase/auth-helpers-remix'
import { json } from '@remix-run/node'
import { useEffect, useState } from 'react'

import type { SupabaseClient } from '@supabase/auth-helpers-remix'
import type { Database } from 'db_types'

type Post = Database['public']['Tables']['posts']['Row']

import type { LoaderFunctionArgs } from '@remix-run/node'

export const loader = async ({ request }: LoaderFunctionArgs) => {
  const response = new Response()
  const supabase = createServerClient<Database>(
    process.env.SUPABASE_URL!,
    process.env.SUPABASE_ANON_KEY!,
    {
      request,
      response,
    }
  )

  const { data } = await supabase.from('posts').select()

  return json({ serverPosts: data ?? [] }, { headers: response.headers })
}

export default function Index() {
  const { serverPosts } = useLoaderData<typeof loader>()
  const [posts, setPosts] = useState(serverPosts)
  const { supabase } = useOutletContext<{ supabase: SupabaseClient<Database> }>()

  useEffect(() => {
    setPosts(serverPosts)
  }, [serverPosts])

  useEffect(() => {
    const channel = supabase
      .channel('*')
      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'posts' }, (payload) =>
        setPosts([...posts, payload.new as Post])
      )
      .subscribe()

    return () => {
      supabase.removeChannel(channel)
    }
  }, [supabase, posts, setPosts])

  return <pre>{JSON.stringify(posts, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Streaming Updates using Postgres Changes in JavaScript
DESCRIPTION: This JavaScript code demonstrates how to stream updated rows in a table using Postgres Changes with the Supabase client. It initializes the Supabase client, creates a channel, and subscribes to 'postgres_changes' events with the 'UPDATE' event type and a specified schema. Whenever a row is updated, the payload is logged to the console.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
// @noImplicitAny: false
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const channel = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: 'UPDATE',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Creating Authenticated Users RLS Policy
DESCRIPTION: SQL policy to allow access to the profiles table for authenticated users only.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create policy "Allow access to authenticated users" on profiles to authenticated for
select
  using (true);
```

----------------------------------------

TITLE: Implementing Email and Password Authentication in React Native
DESCRIPTION: This code snippet demonstrates a React Native component for email and password authentication using Supabase. It includes functions for sign-in and sign-up, as well as form inputs for email and password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_5

LANGUAGE: tsx
CODE:
```
import React, { useState } from 'react'
import { Alert, StyleSheet, View } from 'react-native'
import { supabase } from '../lib/supabase'
import { Button, Input } from '@rneui/themed'

export default function EmailForm() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)

  async function signInWithEmail() {
    setLoading(true)
    const { error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    setLoading(false)
  }

  async function signUpWithEmail() {
    setLoading(true)
    const {
      data: { session },
      error,
    } = await supabase.auth.signUp({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    if (!session) Alert.alert('Please check your inbox for email verification!')
    setLoading(false)
  }

  return (
    <View style={styles.container}>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Input
          label="Email"
          leftIcon={{ type: 'font-awesome', name: 'envelope' }}
          onChangeText={(text) => setEmail(text)}
          value={email}
          placeholder="email@address.com"
          autoCapitalize={'none'}
        />
      </View>
      <View style={styles.verticallySpaced}>
        <Input
          label="Password"
          leftIcon={{ type: 'font-awesome', name: 'lock' }}
          onChangeText={(text) => setPassword(text)}
          value={password}
          secureTextEntry={true}
          placeholder="Password"
          autoCapitalize={'none'}
        />
      </View>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Button title="Sign in" disabled={loading} onPress={() => signInWithEmail()} />
      </View>
      <View style={styles.verticallySpaced}>
        <Button title="Sign up" disabled={loading} onPress={() => signUpWithEmail()} />
      </View>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    marginTop: 40,
    padding: 12,
  },
  verticallySpaced: {
    paddingTop: 4,
    paddingBottom: 4,
    alignSelf: 'stretch',
  },
  mt20: {
    marginTop: 20,
  },
})
```

----------------------------------------

TITLE: Implementing MFA Enrollment Component in React
DESCRIPTION: A React component that handles the MFA enrollment flow using Supabase Auth. It manages QR code display, verification code input, and the challenge-verify process. The component uses useState for state management and useEffect for initialization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/totp.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
/**
 * EnrollMFA shows a simple enrollment dialog. When shown on screen it calls
 * the `enroll` API. Each time a user clicks the Enable button it calls the
 * `challenge` and `verify` APIs to check if the code provided by the user is
 * valid.
 * When enrollment is successful, it calls `onEnrolled`. When the user clicks
 * Cancel the `onCancelled` callback is called.
 */
export function EnrollMFA({
  onEnrolled,
  onCancelled,
}: {
  onEnrolled: () => void
  onCancelled: () => void
}) {
  const [factorId, setFactorId] = useState('')
  const [qr, setQR] = useState('') // holds the QR code image SVG
  const [verifyCode, setVerifyCode] = useState('') // contains the code entered by the user
  const [error, setError] = useState('') // holds an error message

  const onEnableClicked = () => {
    setError('')
    ;(async () => {
      const challenge = await supabase.auth.mfa.challenge({ factorId })
      if (challenge.error) {
        setError(challenge.error.message)
        throw challenge.error
      }

      const challengeId = challenge.data.id

      const verify = await supabase.auth.mfa.verify({
        factorId,
        challengeId,
        code: verifyCode,
      })
      if (verify.error) {
        setError(verify.error.message)
        throw verify.error
      }

      onEnrolled()
    })()
  }

  useEffect(() => {
    ;(async () => {
      const { data, error } = await supabase.auth.mfa.enroll({
        factorType: 'totp',
      })
      if (error) {
        throw error
      }

      setFactorId(data.id)

      // Supabase Auth returns an SVG QR code which you can convert into a data
      // URL that you can place in an <img> tag.
      setQR(data.totp.qr_code)
    })()
  }, [])

  return (
    <>
      {error && <div className="error">{error}</div>}
      <img src={qr} />
      <input
        type="text"
        value={verifyCode}
        onChange={(e) => setVerifyCode(e.target.value.trim())}
      />
      <input type="button" value="Enable" onClick={onEnableClicked} />
      <input type="button" value="Cancel" onClick={onCancelled} />
    </>
  )
}
```

----------------------------------------

TITLE: Querying pg_stat_statements to Identify Expensive Queries
DESCRIPTION: SQL query that identifies frequently executed and slow queries using the pg_stat_statements view. The query filters for calls greater than 50, mean execution time over 2ms, total execution time over one minute, and applies a table-specific filter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_stat_statements.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
	calls,
	mean_exec_time,
	max_exec_time,
	total_exec_time,
	stddev_exec_time,
	query
from
	pg_stat_statements
where
    calls > 50                   -- at least 50 calls
    and mean_exec_time > 2.0     -- averaging at least 2ms/call
    and total_exec_time > 60000  -- at least one minute total server time spent
    and query ilike '%user_in_organization%' -- filter to queries that touch the user_in_organization table
order by
	calls desc
```

----------------------------------------

TITLE: Creating a Documents Table with Vector Embedding Column in SQL
DESCRIPTION: This SQL snippet shows how to create a table for storing documents with their embeddings. It includes a vector column for storing the embeddings and creates an HNSW index for efficient vector similarity search.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Table to store documents with embeddings
create table documents (
  id integer primary key generated always as identity,
  title text not null,
  content text not null,
  embedding halfvec(1536),
  created_at timestamp with time zone default now()
);

-- Index for vector search over document embeddings
create index on documents using hnsw (embedding halfvec_cosine_ops);
```

----------------------------------------

TITLE: Implementing a Supabase Edge Function for Restricted Map Access
DESCRIPTION: TypeScript implementation of a Supabase Edge Function that restricts access to private map files. It validates origins and proxies requests to private storage buckets with proper authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-19-self-host-maps-storage-protomaps.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
const ALLOWED_ORIGINS = ['http://localhost:8000']
const corsHeaders = {
  'Access-Control-Allow-Origin': ALLOWED_ORIGINS.join(','),
  'Access-Control-Allow-Headers':
    'authorization, x-client-info, apikey, content-type, range, if-match',
  'Access-Control-Expose-Headers': 'range, accept-ranges, etag',
  'Access-Control-Max-Age': '300',
}

Deno.serve((req) => {
  // This is needed if you're planning to invoke your function from a browser.
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  // Check origin
  const origin = req.headers.get('Origin')

  if (!origin || !ALLOWED_ORIGINS.includes(origin)) {
    return new Response('Not Allowed', { status: 405 })
  }

  const reqUrl = new URL(req.url)
  const url = `${Deno.env.get('SUPABASE_URL')}/storage/v1/object/authenticated${reqUrl.pathname}`

  const { method, headers } = req
  // Add Auth header
  const modHeaders = new Headers(headers)
  modHeaders.append('authorization', `Bearer ${Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!}`)
  return fetch(url, { method, headers: modHeaders })
})
```

----------------------------------------

TITLE: Database Schema Setup for Realtime Authorization
DESCRIPTION: SQL schema definition including tables for rooms, profiles, and room users relationships with RLS enabled.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/authorization.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table public.rooms (
    id bigint generated by default as identity primary key,
    topic text not null unique
);

alter table public.rooms enable row level security;

create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  email text NOT NULL,

  primary key (id)
);

alter table public.profiles enable row level security;

create table public.rooms_users (
  user_id uuid references auth.users (id),
  room_topic text references public.rooms (topic),
  created_at timestamptz default current_timestamp
);

alter table public.rooms_users enable row level security;
```

----------------------------------------

TITLE: Implementing Auth Component
DESCRIPTION: React Native component implementation for handling user authentication including sign-in and sign-up functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import React, { useState } from 'react'
import { Alert, StyleSheet, View } from 'react-native'
import { supabase } from '../lib/supabase'
import { Button, Input } from '@rneui/themed'

export default function Auth() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)

  async function signInWithEmail() {
    setLoading(true)
    const { error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    setLoading(false)
  }

  async function signUpWithEmail() {
    setLoading(true)
    const {
      data: { session },
      error,
    } = await supabase.auth.signUp({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    if (!session) Alert.alert('Please check your inbox for email verification!')
    setLoading(false)
  }

  return (
    <View style={styles.container}>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Input
          label="Email"
          leftIcon={{ type: 'font-awesome', name: 'envelope' }}
          onChangeText={(text) => setEmail(text)}
          value={email}
          placeholder="email@address.com"
          autoCapitalize={'none'}
        />
      </View>
      <View style={styles.verticallySpaced}>
        <Input
          label="Password"
          leftIcon={{ type: 'font-awesome', name: 'lock' }}
          onChangeText={(text) => setPassword(text)}
          value={password}
          secureTextEntry={true}
          placeholder="Password"
          autoCapitalize={'none'}
        />
      </View>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Button title="Sign in" disabled={loading} onPress={() => signInWithEmail()} />
      </View>
      <View style={styles.verticallySpaced}>
        <Button title="Sign up" disabled={loading} onPress={() => signUpWithEmail()} />
      </View>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    marginTop: 40,
    padding: 12,
  },
  verticallySpaced: {
    paddingTop: 4,
    paddingBottom: 4,
    alignSelf: 'stretch',
  },
  mt20: {
    marginTop: 20,
  },
})
```

----------------------------------------

TITLE: Enabling SSL enforcement with Supabase CLI
DESCRIPTION: Command to enable SSL enforcement on your Supabase project database using the CLI. This prevents clients from connecting without SSL, increasing security.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ssl-enforcement.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase ssl-enforcement --project-ref {ref} update --enable-db-ssl-enforcement --experimental
```

----------------------------------------

TITLE: Optimized RLS Policy with Role Specification
DESCRIPTION: Improved RLS policy that includes role specification to prevent unnecessary policy evaluation for unauthorized users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_18

LANGUAGE: sql
CODE:
```
create policy "rls_test_select" on rls_test
to authenticated
using ( (select auth.uid()) = user_id );
```

----------------------------------------

TITLE: Listening to UPDATE Events in Kotlin with Supabase Realtime
DESCRIPTION: Sets up a Kotlin channel to listen for UPDATE events in the public schema of a Supabase database. The code creates a flow of PostgresAction.Update events and processes them in a coroutine scope.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_18

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = "public")

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

----------------------------------------

TITLE: Creating a Custom Schema in Supabase
DESCRIPTION: SQL command to create a custom schema in your Supabase database. Replace 'myschema' with your preferred schema name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/using-custom-schemas.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE SCHEMA myschema;
```

----------------------------------------

TITLE: Initializing AI Model Session in TypeScript
DESCRIPTION: Creates a new AI model inference session using Supabase.ai API. Shows basic setup and type hints import.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const model = new Supabase.ai.Session('model-name')
```

LANGUAGE: typescript
CODE:
```
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'
```

----------------------------------------

TITLE: Creating a Static Server Component with Supabase in Next.js (JavaScript)
DESCRIPTION: Implements a Next.js static server component that fetches data from Supabase at build time. It uses the standard createClient from supabase-js since there's no user context at build time, and renders the fetched todos data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_28

LANGUAGE: jsx
CODE:
```
import { createClient } from '@supabase/supabase-js'

export default async function Page() {
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  )

  const { data } = await supabase.from('todos').select()
  return <pre>{JSON.stringify(data, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Enabling pgvector Extension in PostgreSQL
DESCRIPTION: This SQL snippet enables the pgvector extension in the PostgreSQL database, which is required for vector operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create extension vector
with
  schema extensions;
```

----------------------------------------

TITLE: Signing in a user with password in Supabase Auth (JavaScript)
DESCRIPTION: This snippet demonstrates how to authenticate a user using their email and password with the Supabase Auth client. A successful login counts towards the Monthly Active Users (MAUs) for the current billing cycle if the user hasn't been counted before.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/monthly-active-users.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
const {data, error} = await supabase.auth.signInWithPassword({
  email: 'user-1@email.com',
  password: 'example-password-1',
})
```

----------------------------------------

TITLE: Signing in with Phone OTP
DESCRIPTION: Demonstrates how to initiate phone authentication by sending an OTP to a user's phone number. This generates a 6-digit pin that must be verified within 60 seconds.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/phone-login.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.auth.signInWithOtp({
  phone: '+13334445555',
})
```

LANGUAGE: swift
CODE:
```
try await supabase.auth.signInWithOTP(
  phone: "+13334445555"
)
```

LANGUAGE: kotlin
CODE:
```
supabase.auth.signInWith(OTP) {
    phone = "+13334445555"
}
```

LANGUAGE: python
CODE:
```
response = supabase.auth.sign_in_with_otp({
  'phone': '+13334445555',
})
```

LANGUAGE: bash
CODE:
```
curl -X POST 'https://cvwawazfelidkloqmbma.supabase.co/auth/v1/otp' \
-H "apikey: SUPABASE_KEY" \
-H "Content-Type: application/json" \
-d '{
  "phone": "+13334445555"
}'
```

----------------------------------------

TITLE: Initializing Supabase Client in Dart
DESCRIPTION: This snippet shows how to initialize the Supabase client in a Dart application using the project URL and anonymous API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
void main() {
  Supabase.initialize(
    url: 'https://<project>.supabase.co',
    anonKey: '<your-anon-key>',
  );

  runApp(MyApp());
}

final supabase = Supabase.instance.client;
```

----------------------------------------

TITLE: Creating Database Schema for User Profiles with Supabase in SQL
DESCRIPTION: SQL script that sets up the database schema for a user profile system with Supabase. It creates a profiles table with row-level security policies, configures Supabase Realtime for the profiles table, and sets up storage policies for avatar images.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/swift-user-management/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Implementing RLS Policies for Document Access Control
DESCRIPTION: Sets up Row Level Security policies to restrict access to document sections based on document ownership. Enables RLS and creates a policy for select operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
alter table document_sections enable row level security;

create policy "Users can query their own document sections"
on document_sections for select to authenticated using (
  document_id in (
    select id
    from documents
    where (owner_id = (select auth.uid()))
  )
);
```

----------------------------------------

TITLE: Handling Google Sign-In Response and Authenticating with Supabase in JavaScript
DESCRIPTION: This function handles the Google Sign-In response and uses the credential to authenticate with Supabase. It can optionally include a nonce for added security.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
async function handleSignInWithGoogle(response) {
  const { data, error } = await supabase.auth.signInWithIdToken({
    provider: 'google',
    token: response.credential,
  })
}
```

LANGUAGE: javascript
CODE:
```
async function handleSignInWithGoogle(response) {
  const { data, error } = await supabase.auth.signInWithIdToken({
    provider: 'google',
    token: response.credential,
    nonce: '<NONCE>',
  })
}
```

----------------------------------------

TITLE: Initializing Supabase in Flutter Main Function
DESCRIPTION: This snippet shows how to initialize Supabase in the main function of a Flutter app. It sets up the Supabase client with the provided URL and anonymous key, and configures the app's theme and initial route.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:my_chat_app/utils/constants.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:my_chat_app/pages/splash_page.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Supabase.initialize(
    // TODO: Replace credentials with your own
    url: 'SUPABASE_URL',
    anonKey: 'SUPABASE_ANON_KEY',
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'My Chat App',
      theme: appTheme,
      home: const SplashPage(),
    );
  }
}
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library using npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Creating SQL schema for user profiles with row level security
DESCRIPTION: SQL script that sets up the profiles table with proper references to auth.users, constraints, and row level security policies to control access based on user authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/expo-user-management/README.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- Create a table for Public Profiles
create table
  profiles (
    id uuid references auth.users not null,
    updated_at timestamp
    with
      time zone,
      username text unique,
      avatar_url text,
      website text,
      primary key (id),
      unique (username),
      constraint username_length check (char_length(username) >= 3)
  );

alter table
  profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select
  using (true);

create policy "Users can insert their own profile." on profiles for insert
with
  check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles for
update
  using ((select auth.uid()) = id);

-- Set up Realtime!
begin;

drop
  publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter
  publication supabase_realtime add table profiles;

-- Set up Storage!
insert into
  storage.buckets (id, name)
values
  ('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select
  using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for insert
with
  check (bucket_id = 'avatars');
```

----------------------------------------

TITLE: Running Local Supabase Development Commands
DESCRIPTION: Common CLI commands used for local Supabase development and database management including starting the local environment, resetting the database, and generating migration diffs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-13-supabase-branching.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase start
supabase db reset
supabase db diff
```

----------------------------------------

TITLE: Implementing Phone MFA Enrollment Component in React with Supabase
DESCRIPTION: A React component that handles phone MFA enrollment flow using Supabase Auth. It manages phone number input, verification code entry, and implements the complete enrollment process including factor enrollment, challenge creation, and code verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/phone.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
export function EnrollMFA({
  onEnrolled,
  onCancelled,
}: {
  onEnrolled: () => void
  onCancelled: () => void
}) {
  const [phoneNumber, setPhoneNumber] = useState('')
  const [factorId, setFactorId] = useState('')
  const [verifyCode, setVerifyCode] = useState('')
  const [error, setError] = useState('')
  const [challengeId, setChallengeId] = useState('')

  const onEnableClicked = () => {
    setError('')
    ;(async () => {
      const verify = await auth.mfa.verify({
        factorId,
        challengeId,
        code: verifyCode,
      })
      if (verify.error) {
        setError(verify.error.message)
        throw verify.error
      }

      onEnrolled()
    })()
  }
  const onEnrollClicked = async () => {
    setError('')
    try {
      const factor = await auth.mfa.enroll({
        phone: phoneNumber,
        factorType: 'phone',
      })
      if (factor.error) {
        setError(factor.error.message)
        throw factor.error
      }

      setFactorId(factor.data.id)
    } catch (error) {
      setError('Failed to Enroll the Factor.')
    }
  }

  const onSendOTPClicked = async () => {
    setError('')
    try {
      const challenge = await auth.mfa.challenge({ factorId })
      if (challenge.error) {
        setError(challenge.error.message)
        throw challenge.error
      }

      setChallengeId(challenge.data.id)
    } catch (error) {
      setError('Failed to resend the code.')
    }
  }

  return (
    <>
      {error && <div className="error">{error}</div>}
      <input
        type="text"
        placeholder="Phone Number"
        value={phoneNumber}
        onChange={(e) => setPhoneNumber(e.target.value.trim())}
      />
      <input
        type="text"
        placeholder="Verification Code"
        value={verifyCode}
        onChange={(e) => setVerifyCode(e.target.value.trim())}
      />
      <input type="button" value="Enroll" onClick={onEnrollClicked} />
      <input type="button" value="Submit Code" onClick={onEnableClicked} />
      <input type="button" value="Send OTP Code" onClick={onSendOTPClicked} />
      <input type="button" value="Cancel" onClick={onCancelled} />
    </>
  )
}
```

----------------------------------------

TITLE: Enabling Row Level Security in Postgres
DESCRIPTION: Basic SQL command to enable Row Level Security on a table in a specific schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
alter table <schema_name>.<table_name>
enable row level security;
```

----------------------------------------

TITLE: Supabase Storage: Set Select Policy
DESCRIPTION: SQL policy that allows authenticated users to select their own objects from any bucket. Uses the `owner_id` column to verify ownership based on the `auth.uid()` function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create policy "User can select their own objects (in any buckets)"
on storage.objects
for select
to authenticated
using (
    owner_id = (select auth.uid())
);
```

----------------------------------------

TITLE: Generating TypeScript Types with Supabase CLI
DESCRIPTION: Shows how to generate TypeScript types for local and remote Supabase databases using the CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
# in a project set up with the CLI:
supabase gen types typescript --local
supabase gen types typescript --db-url $SUPABASE_DB_URL
```

----------------------------------------

TITLE: Generating TypeScript Types for Supabase Project
DESCRIPTION: This command generates TypeScript types for the storage and public schemas of a Supabase project. It outputs the types to a file named types.ts in the huggingface-image-captioning function directory.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/huggingface-image-captioning.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase gen types typescript --project-id=your-project-ref --schema=storage,public > supabase/functions/huggingface-image-captioning/types.ts
```

----------------------------------------

TITLE: Generating TypeScript Types with Supabase CLI
DESCRIPTION: This command uses the Supabase CLI to generate TypeScript types for a specific project and output them to a file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase gen types typescript --project-id abcdefghijklmnopqrst > database.types.ts
```

----------------------------------------

TITLE: Restricting INSERT Policy to Authenticated Users and Specific Bucket in SQL
DESCRIPTION: This snippet shows how to modify the INSERT policy to only allow authenticated users to upload assets to a specific bucket.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/access-control.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "policy_name"
on storage.objects for insert to authenticated with check (
    -- restrict bucket
    bucket_id = 'my_bucket_id'
);
```

----------------------------------------

TITLE: Environment Configuration for Supabase Credentials
DESCRIPTION: Defines essential environment variables for connecting to Supabase, including the project URL and anonymous key
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/password-based-auth.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Uploading Files to Supabase Storage in Python
DESCRIPTION: This snippet shows how to upload a file to Supabase Storage using the standard upload method in Python. It assumes a Supabase client has already been initialized.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
response = supabase.storage.from_('bucket_name').upload('file_path', file)
```

----------------------------------------

TITLE: Setting Up Environment Variables for Database Connection
DESCRIPTION: Environment file containing placeholders for the database hostname, password, and SSL certificate needed to connect to a Supabase Postgres database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/kysely-postgres.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
DB_HOSTNAME=
DB_PASSWORD=
DB_SSL_CERT="-----BEGIN CERTIFICATE-----
GET YOUR CERT FROM YOUR PROJECT DASHBOARD
-----END CERTIFICATE-----"
```

----------------------------------------

TITLE: Querying Connection Statistics in PostgreSQL
DESCRIPTION: SQL query to observe database roles and servers connecting to the database by joining pg_stat_ssl and pg_stat_activity views. Shows detailed connection information including SSL status, connected roles, and query states.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/monitor-supavisor-postgres-connections.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT
   pg_stat_activity.pid,
   ssl AS ssl_connection,
   datname AS database,
   usename AS connected_role,
   application_name,
   client_addr,
   query,
   query_start,
   state,
   backend_start
FROM pg_stat_ssl
JOIN pg_stat_activity
 ON pg_stat_ssl.pid = pg_stat_activity.pid;
```

----------------------------------------

TITLE: Configuring Next.js Middleware for Supabase Auth Session Refresh
DESCRIPTION: Sets up Next.js middleware to refresh authentication tokens and manage cookie state. Defines path matchers to optimize middleware execution and handles potential redirects for unauthenticated users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_4

LANGUAGE: ts
CODE:
```
import { type NextRequest } from 'next/server'
import { updateSession } from '@/utils/supabase/middleware'

export async function middleware(request: NextRequest) {
  return await updateSession(request)
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
```

----------------------------------------

TITLE: Implementing Pagination Controls with TanStack Table in React
DESCRIPTION: Adds pagination functionality to a data table using React Table's pagination API with next/previous buttons. The code implements the UI controls that connect to the table's pagination methods.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
import { Button } from "@/components/ui/button"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  })

  return (
    <div>
      <div className="rounded-md border">
        <Table>
          { // .... }
        </Table>
      </div>
      <div className="flex items-center justify-end space-x-2 py-4">
        <Button
          variant="outline"
          size="sm"
          onClick={() => table.previousPage()}
          disabled={!table.getCanPreviousPage()}
        >
          Previous
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => table.nextPage()}
          disabled={!table.getCanNextPage()}
        >
          Next
        </Button>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Fetching Repositories with a Provider Token in JavaScript
DESCRIPTION: This snippet outlines the process of fetching data from a third-party API (GitHub) using a provider token. It first checks for a valid session, retrieves the provider token, and then makes a GET request to fetch repositories for the authenticated user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
import { createPagesServerClient } from '@supabase/auth-helpers-nextjs'

export default function ProtectedPage({ user, allRepos }) {
  return (
    <>
      <div>Protected content for {user.email}</div>
      <p>Data fetched with provider token:</p>
      <pre>{JSON.stringify(allRepos, null, 2)}</pre>
      <p>user:</p>
      <pre>{JSON.stringify(user, null, 2)}</pre>
    </>
  )
}

export const getServerSideProps = async (ctx) => {
  // Create authenticated Supabase Client
  const supabase = createPagesServerClient(ctx)
  // Check if we have a session
  const {
    data: { session },
  } = await supabase.auth.getSession()

  if (!session)
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }

  // Retrieve provider_token & logged in user's third-party id from metadata
  const { provider_token, user } = session
  const userId = user.user_metadata.user_name

  const allRepos = await (
    await fetch(`https://api.github.com/search/repositories?q=user:${userId}`, {
      method: 'GET',
      headers: {
        Authorization: `token ${provider_token}`,
      },
    })
  ).json()

  return { props: { user, allRepos } }
}
```

----------------------------------------

TITLE: Creating JOIN Column Index in PostgreSQL
DESCRIPTION: Creating index for foreign key column used in table joins to optimize join operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create index idx_orders_customer_id on orders (customer_id);
```

----------------------------------------

TITLE: Implementing Flutter Login Screen with Google Sign-In
DESCRIPTION: Creates a login screen with Google authentication using Supabase and Google Sign-In package. Handles auth state changes and token management for sign-in flow.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-18-flutter-authentication.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:myauthapp/main.dart';
import 'package:myauthapp/screens/profile_screen.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  @override
  void initState() {
    _setupAuthListener();
    super.initState();
  }

  void _setupAuthListener() {
    supabase.auth.onAuthStateChange.listen((data) {
      final event = data.event;
      if (event == AuthChangeEvent.signedIn) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(
            builder: (context) => const ProfileScreen(),
          ),
        );
      }
    });
  }

  Future<AuthResponse> _googleSignIn() async {
    const webClientId = 'my-web.apps.googleusercontent.com';
    const iosClientId = 'my-ios.apps.googleusercontent.com';

    final GoogleSignIn googleSignIn = GoogleSignIn(
      clientId: iosClientId,
      serverClientId: webClientId,
    );
    final googleUser = await googleSignIn.signIn();
    final googleAuth = await googleUser!.authentication;
    final accessToken = googleAuth.accessToken;
    final idToken = googleAuth.idToken;

    if (accessToken == null) {
      throw 'No Access Token found.';
    }
    if (idToken == null) {
      throw 'No ID Token found.';
    }

    return supabase.auth.signInWithIdToken(
      provider: OAuthProvider.google,
      idToken: idToken,
      accessToken: accessToken,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Login'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _googleSignIn,
          child: const Text('Google login'),
        ),
      ),
    );
  }
}
```

----------------------------------------

TITLE: Signing Out - Flutter
DESCRIPTION: This Flutter snippet demonstrates how to sign out users from the Instagram account using the Supabase client. The `signOut()` method is called to remove the user from the session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-discord.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
Future<void> signOut() async {\n  await supabase.auth.signOut();\n}
```

----------------------------------------

TITLE: Creating Function for Automatic User Data Insertion in Supabase
DESCRIPTION: SQL script that creates a trigger function to automatically insert user data into a custom users table after registration. This is needed because the Supabase auth table is an internal table with limited access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- Function for handling new users
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.users (id, email)
  values (new.id, new.email);
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
```

----------------------------------------

TITLE: Implementing SwiftUI View with Supabase Query
DESCRIPTION: Creates a SwiftUI view that fetches instrument data from Supabase and displays it in a list. Includes loading state handling and error management using Swift's async/await pattern.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ios-swiftui.mdx#2025-04-21_snippet_2

LANGUAGE: swift
CODE:
```
struct ContentView: View {

  @State var instruments: [Instrument] = []

  var body: some View {
    List(instruments) { instrument in
      Text(instrument.name)
    }
    .overlay {
      if instruments.isEmpty {
        ProgressView()
      }
    }
    .task {
      do {
        instruments = try await supabase.from("instruments").select().execute().value
      } catch {
        dump(error)
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Flutter Routing with go_router for MFA Authentication Flow
DESCRIPTION: This code snippet demonstrates how to structure the main.dart file with go_router to manage navigation paths and implement authentication redirects. It handles complex MFA flows including redirecting unauthenticated users to registration, users without MFA setup to the enrollment page, and users with MFA but not verified to the verification page.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_15

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:mfa_app/pages/auth/login_page.dart';
import 'package:mfa_app/pages/auth/register_page.dart';
import 'package:mfa_app/pages/home_page.dart';
import 'package:mfa_app/pages/list_mfa_page.dart';
import 'package:mfa_app/pages/mfa/verify_page.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:mfa_app/pages/mfa/enroll_page.dart';

void main() async {
  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_ANON_KEY',
  );
  runApp(const MyApp());
}

/// Extract SupabaseClient instance in a handy variable
final supabase = Supabase.instance.client;

final _router = GoRouter(
  routes: [
    GoRoute(
      path: HomePage.route,
      builder: (context, state) => const HomePage(),
    ),
    GoRoute(
      path: ListMFAPage.route,
      builder: (context, state) => ListMFAPage(),
    ),
    GoRoute(
      path: LoginPage.route,
      builder: (context, state) => const LoginPage(),
    ),
    GoRoute(
      path: RegisterPage.route,
      builder: (context, state) => const RegisterPage(),
    ),
    GoRoute(
      path: MFAEnrollPage.route,
      builder: (context, state) => const MFAEnrollPage(),
    ),
    GoRoute(
      path: MFAVerifyPage.route,
      builder: (context, state) => const MFAVerifyPage(),
    ),
  ],
  redirect: (context, state) async {
    // Any users can visit the /auth route
    if (state.location.contains('/auth') == true) {
      return null;
    }

    final session = supabase.auth.currentSession;
    // A user without a session should be redirected to the register page
    if (session == null) {
      return RegisterPage.route;
    }

    final assuranceLevelData =
        supabase.auth.mfa.getAuthenticatorAssuranceLevel();

    // The user has not setup MFA yet, so send them to enroll MFA page.
    if (assuranceLevelData.currentLevel == AuthenticatorAssuranceLevels.aal1) {
      await supabase.auth.refreshSession();
      final nextLevel =
          supabase.auth.mfa.getAuthenticatorAssuranceLevel().nextLevel;
      if (nextLevel == AuthenticatorAssuranceLevels.aal2) {
        // The user has already setup MFA, but haven't login via MFA
        // Redirect them to the verify page
        return MFAVerifyPage.route;
      } else {
        // The user has not yet setup MFA
        // Redirect them to the enrollment page
        return MFAEnrollPage.route;
      }
    }

    // The user has signed invia MFA, and is allowed to view any page.
    return null;
  },
);

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      title: 'MFA App',
      debugShowCheckedModeBanner: false,
      theme: ThemeData.light().copyWith(
        inputDecorationTheme: const InputDecorationTheme(
          border: OutlineInputBorder(),
        ),
      ),
      routerConfig: _router,
    );
  }
}
```

----------------------------------------

TITLE: Creating Supabase Client-Side Utility in JavaScript
DESCRIPTION: JavaScript utility to create a Supabase client for browser-side operations using environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  // Create a supabase client on the browser with project's credentials
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  )
}
```

----------------------------------------

TITLE: Deno Email Service Handler Implementation
DESCRIPTION: Main service handler that processes incoming email requests. Implements a failover system between Postmark and SendGrid, includes webhook verification, and comprehensive error handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-email-hook.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
Deno.serve(async (req) => {
    const payload = await req.text();
    const postmarkServerToken = Deno.env.get("POSTMARK_SERVER_TOKEN");
    const sendGridApiKey = Deno.env.get("SENDGRID_API_KEY");
    const headers = Object.fromEntries(req.headers);
    const base64_secret = Deno.env.get('SEND_EMAIL_HOOK_SECRET').replace('v1,whsec_', '');
    const wh = new Webhook(base64_secret);
    const {
        user,
        email_data
    } = wh.verify(payload, headers);

    try {
        // Try sending email using Postmark
        let response = await sendEmailWithPostmark(user, email_data, postmarkServerToken!);

        if (!response.ok) {
            // If Postmark fails, try SendGrid
            console.error(`Primary email send failed: ${await response.text()}`);
            response = await sendEmailWithSendGrid(user, email_data, sendGridApiKey!);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`Failed to send email via backup: ${errorData.errors[0].message}`);
            }
        }

        return new Response(JSON.stringify({
            message: "Email sent successfully."
        }), {
            headers: {
                "Content-Type": "application/json"
            }
        });
    } catch (error) {
        return new Response(JSON.stringify({
            error: `Failed to process the request: ${error.message}`
        }), {
            status: 500,
            headers: {
                "Content-Type": "application/json"
            }
        });
    }
});
```

----------------------------------------

TITLE: Creating a Similarity Search Function in SQL
DESCRIPTION: SQL function to perform similarity search on vector embeddings using cosine distance. This function can be called via RPC from client libraries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-columns.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create or replace function match_documents (
  query_embedding vector(384),
  match_threshold float,
  match_count int
)
returns table (
  id bigint,
  title text,
  body text,
  similarity float
)
language sql stable
as $$
  select
    documents.id,
    documents.title,
    documents.body,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where 1 - (documents.embedding <=> query_embedding) > match_threshold
  order by (documents.embedding <=> query_embedding) asc
  limit match_count;
$$;
```

----------------------------------------

TITLE: Implementing Avatar Upload Component with Supabase Storage
DESCRIPTION: A React component for uploading and displaying user profile avatars using Supabase Storage. It manages downloading existing images, uploading new ones, and handling image state. The component provides a full UI for the avatar selection experience.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_17

LANGUAGE: jsx
CODE:
```
'use client'
import React, { useEffect, useState } from 'react'
import { createClient } from '@/utils/supabase/client'
import Image from 'next/image'

export default function Avatar({ uid, url, size, onUpload }) {
  const supabase = createClient()
  const [avatarUrl, setAvatarUrl] = useState(url)
  const [uploading, setUploading] = useState(false)

  useEffect(() => {
    async function downloadImage(path) {
      try {
        const { data, error } = await supabase.storage.from('avatars').download(path)
        if (error) {
          throw error
        }

        const url = URL.createObjectURL(data)
        setAvatarUrl(url)
      } catch (error) {
        console.log('Error downloading image: ', error)
      }
    }

    if (url) downloadImage(url)
  }, [url, supabase])

  const uploadAvatar = async (event) => {
    try {
      setUploading(true)

      if (!event.target.files || event.target.files.length === 0) {
        throw new Error('You must select an image to upload.')
      }

      const file = event.target.files[0]
      const fileExt = file.name.split('.').pop()
      const filePath = `${uid}-${Math.random()}.${fileExt}`

      const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)

      if (uploadError) {
        throw uploadError
      }

      onUpload(filePath)
    } catch (error) {
      alert('Error uploading avatar!')
    } finally {
      setUploading(false)
    }
  }

  return (
    <div>
      {avatarUrl ? (
        <Image
          width={size}
          height={size}
          src={avatarUrl}
          alt="Avatar"
          className="avatar image"
          style={{ height: size, width: size }}
        />
      ) : (
        <div className="avatar no-image" style={{ height: size, width: size }} />
      )}
      <div style={{ width: size }}>
        <label className="button primary block" htmlFor="single">
          {uploading ? 'Uploading ...' : 'Upload'}
        </label>
        <input
          style={{
            visibility: 'hidden',
            position: 'absolute',
          }}
          type="file"
          id="single"
          accept="image/*"
          onChange={uploadAvatar}
          disabled={uploading}
        />
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating RLS Policy for Authenticated User Uploads in SQL
DESCRIPTION: This example shows how to create a policy that allows authenticated users to upload files to a folder named 'private' using the storage.foldername() function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/helper-functions.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "Allow authenticated uploads"
on storage.objects
for insert
to authenticated
with check (
  (storage.foldername(name))[1] = 'private'
);
```

----------------------------------------

TITLE: Starting Supabase locally using the CLI
DESCRIPTION: This command starts the Supabase environment locally, which is a prerequisite for running the og-images function locally. It uses the Supabase CLI tool.
SOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/og-images/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
"supabase start"
```

----------------------------------------

TITLE: Applying Supabase Migrations to a Remote Database
DESCRIPTION: This command applies local Supabase migrations to a linked remote database. It's useful for syncing schema changes between local and remote environments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
supabase db push
```

----------------------------------------

TITLE: Subscribe to Realtime Events in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to subscribe to realtime events from a Supabase database within a Remix application.  It utilizes the `supabase` client from the `useOutletContext` hook to establish a channel and listen for `INSERT` events on the `posts` table. When a new post is inserted, the state is updated to reflect the change.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_8

LANGUAGE: jsx
CODE:
```
import { useLoaderData, useOutletContext } from '@remix-run/react'
import { createServerClient } from '@supabase/auth-helpers-remix'
import { json } from '@remix-run/node'
import { useEffect, useState } from 'react'

export const loader = async ({ request }) => {
  const response = new Response()
  const supabase = createServerClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY, {
    request,
    response,
  })

  const { data } = await supabase.from('posts').select()

  return json({ serverPosts: data ?? [] }, { headers: response.headers })
}

export default function Index() {
  const { serverPosts } = useLoaderData()
  const [posts, setPosts] = useState(serverPosts)
  const { supabase } = useOutletContext()

  useEffect(() => {
    setPosts(serverPosts)
  }, [serverPosts])

  useEffect(() => {
    const channel = supabase
      .channel('*')
      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'posts' }, (payload) =>
        setPosts([...posts, payload.new])
      )
      .subscribe()

    return () => {
      supabase.removeChannel(channel)
    }
  }, [supabase, posts, setPosts])

  return <pre>{JSON.stringify(posts, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Initializing Supabase Client in Android Kotlin App
DESCRIPTION: Code to create a Supabase client instance that will be used for API calls. This initialization requires the Supabase URL and anonymous key from the project settings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/kotlin.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
import ...

val supabase = createSupabaseClient(
    supabaseUrl = "https://xyzcompany.supabase.co",
    supabaseKey = "your_public_anon_key"
  ) {
    install(Postgrest)
}
...
```

----------------------------------------

TITLE: Setting Environment Variables for Supabase
DESCRIPTION: This snippet outlines the required environment variables to be placed in a .env file for Supabase authentication setup. It specifies the Supabase URL and anon key, which are essential for connecting the application to the Supabase backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/social-auth.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Defining Database Entities with SQL
DESCRIPTION: This SQL snippet demonstrates how to define a table, a view based on the table, and a function using standard SQL syntax within a schema file. This approach allows managing complex entities declaratively.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_11

LANGUAGE: sql
CODE:
```
create table "employees" (
  "id" integer not null,
  "name" text,
  "age" smallint not null
);

create view "profiles" as
  select id, name from "employees";

create function "get_age"(employee_id integer) RETURNS smallint
  LANGUAGE "sql"
AS $$
  select age
  from employees
  where id = employee_id;
$$;
```

----------------------------------------

TITLE: Basic SELECT with Filtering and Ordering
DESCRIPTION: Demonstrates how to select specific columns with WHERE, ORDER BY, and LIMIT clauses using both SQL and JavaScript. The query filters players by age range and team, then orders results by name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/sql-to-api.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select first_name, last_name, team_id, age
from players
where age between 20 and 24 and team_id != 'STL'
order by last_name, first_name desc
limit 20;
```

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('players')
  .select('first_name,last_name,team_id,age')
  .gte('age', 20)
  .lte('age', 24)
  .not('team_id', 'eq', 'STL')
  .order('last_name', { ascending: true }) // or just .order('last_name')
  .order('first_name', { ascending: false })
  .limit(20)
```

----------------------------------------

TITLE: Creating Instruments Table and Inserting Sample Data in SQL
DESCRIPTION: This SQL snippet creates an 'instruments' table with an auto-incrementing ID and a name column. It then inserts sample data for violin, viola, and cello. Finally, it enables row-level security on the table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/quickstart_db_setup.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create the table
create table instruments (
  id bigint primary key generated always as identity,
  name text not null
);
-- Insert some sample data into the table
insert into instruments (name)
values
  ('violin'),
  ('viola'),
  ('cello');

alter table instruments enable row level security;
```

----------------------------------------

TITLE: Creating Planet Insert Function with Parameters
DESCRIPTION: Creates a PL/pgSQL function that accepts a name parameter, inserts a new planet into the planets table, and returns the new planet's ID.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create or replace function add_planet(name text)
returns bigint
language plpgsql
as $$
declare
  new_row bigint;
begin
  insert into planets(name)
  values (add_planet.name)
  returning id into new_row;

  return new_row;
end;
$$;
```

----------------------------------------

TITLE: Creating Team-Based RLS Policy with JWT
DESCRIPTION: Creates a policy that checks if a user belongs to a team by accessing the teams array stored in app_metadata through auth.jwt().
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create policy "User is in team"
on my_table
to authenticated
using ( team_id in (select auth.jwt() -> 'app_metadata' -> 'teams'));
```

----------------------------------------

TITLE: Signing In with Password Using New Auth Methods in TypeScript
DESCRIPTION: Demonstrates the new explicit signInWithPassword() method in supabase-js v2 for authenticating users with email and password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// v2
const { data } = await supabase.auth.signInWithPassword({
  email: 'hello@example',
  password: 'pass',
})

// v1
const { data } = await supabase.auth.signIn({
  email: 'hello@example',
  password: 'pass',
})
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase Connection
DESCRIPTION: Environment variables setup for connecting to Supabase database using transaction and session mode connection strings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
# Transaction mode connection string used for migrations
DATABASE_URL="postgres://postgres.[project-ref]:[db-password]@xxx.pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=1"

# Session mode connection string — used by Prisma Client
DIRECT_URL="postgres://postgres.[project-ref]:[db-password]@xxx.pooler.supabase.com:5432/postgres"
```

----------------------------------------

TITLE: Implementing Login and Signup Actions with Supabase in Next.js
DESCRIPTION: This code snippet shows the implementation of login and signup actions using Supabase in a Next.js application. It handles form submission, authenticates users, and manages redirects based on the authentication result.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_10

LANGUAGE: js
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'

import { createClient } from '@/utils/supabase/server'

export async function login(formData) {
  const supabase = await createClient()

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email'),
    password: formData.get('password'),
  }

  const { error } = await supabase.auth.signInWithPassword(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/account')
}

export async function signup(formData) {
  const supabase = await createClient()

  const data = {
    email: formData.get('email'),
    password: formData.get('password'),
  }

  const { error } = await supabase.auth.signUp(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/account')
}
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase in .env
DESCRIPTION: Environment variable configuration for connecting to Supabase services, including URL, API key, and JWT secret.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
SUPABASE_URL=YOUR_SUPABASE_URL
SUPABASE_KEY=YOUR_SUPABASE_ANON_KEY
SUPABASE_JWT_SECRET=YOUR_SUPABASE_JWT_SECRET
```

----------------------------------------

TITLE: Implementing Restrictive RLS Policy for Universal MFA Enforcement in SQL
DESCRIPTION: SQL policy that enforces MFA for all authenticated users by checking if the JWT's 'aal' claim equals 'aal2'. This restrictive policy ensures that only users who have completed MFA verification can access the table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-14-mfa-auth-via-rls.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create policy "Enforce MFA for all end users."
  on table_name
  as restrictive
  to authenticated
  using ( (select auth.jwt()->>'aal') = 'aal2' );
```

----------------------------------------

TITLE: Main App Component with Supabase Authentication
DESCRIPTION: Main application component that handles authentication state and conditionally renders either the Account or Auth component based on session status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_6

LANGUAGE: tsx
CODE:
```
import { useState, useEffect } from 'react'
import { supabase } from './lib/supabase'
import Auth from './components/Auth'
import Account from './components/Account'
import { View } from 'react-native'
import { Session } from '@supabase/supabase-js'

export default function App() {
  const [session, setSession] = useState<Session | null>(null)

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session)
    })

    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })
  }, [])

  return (
    <View>
      {session && session.user ? <Account key={session.user.id} session={session} /> : <Auth />}
    </View>
  )
}
```

----------------------------------------

TITLE: Creating an Authentication Component with Magic Links
DESCRIPTION: A Svelte component that implements passwordless authentication using Supabase's magic link functionality. Users can sign in by receiving an email with a login link.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_4

LANGUAGE: html
CODE:
```
<script lang="ts">
  import { supabase } from '../supabaseClient'

  let loading = false
  let email = ''

  const handleLogin = async () => {
    try {
      loading = true
      const { error } = await supabase.auth.signInWithOtp({ email })
      if (error) throw error
      alert('Check your email for login link!')
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      loading = false
    }
  }
</script>

<div class="row flex-center flex">
  <div class="col-6 form-widget" aria-live="polite">
    <h1 class="header">Supabase + Svelte</h1>
    <p class="description">Sign in via magic link with your email below</p>
    <form class="form-widget" on:submit|preventDefault="{handleLogin}">
      <div>
        <label for="email">Email</label>
        <input
          id="email"
          class="inputField"
          type="email"
          placeholder="Your email"
          bind:value="{email}"
        />
      </div>
      <div>
        <button type="submit" class="button block" aria-live="polite" disabled="{loading}">
          <span>{loading ? 'Loading' : 'Send magic link'}</span>
        </button>
      </div>
    </form>
  </div>
</div>
```

----------------------------------------

TITLE: Streaming Inserts using Postgres Changes in JavaScript
DESCRIPTION: This JavaScript code shows how to stream new rows inserted into a table using Postgres Changes and the Supabase client. It initializes the Supabase client, creates a channel, and subscribes to 'postgres_changes' events with the 'INSERT' event type and a specified schema. When a new row is inserted, the payload is logged to the console.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
// @noImplicitAny: false
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const channel = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Implementing Background Task with Event Listener in TypeScript
DESCRIPTION: Demonstrates how to set up a long-running background task using EdgeRuntime.waitUntil and handle function shutdown events with beforeunload listener.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/background-tasks.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
async function longRunningTask() {
  // do work here
}

// Mark the longRunningTask's returned promise as a background task.
// note: we are not using await because we don't want it to block.
EdgeRuntime.waitUntil(longRunningTask())

// Use beforeunload event handler to be notified when function is about to shutdown
addEventListener('beforeunload', (ev) => {
  console.log('Function will be shutdown due to', ev.detail?.reason)

  // save state or log the current progress
})

// Invoke the function using a HTTP request.
// This will start the background task
Deno.serve(async (req) => {
  return new Response('ok')
})
```

----------------------------------------

TITLE: Creating Tables for User Roles and Permissions in SQL
DESCRIPTION: SQL commands to create custom types, user roles table, and role permissions table for implementing RBAC.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Custom types
create type public.app_permission as enum ('channels.delete', 'messages.delete');
create type public.app_role as enum ('admin', 'moderator');

-- USER ROLES
create table public.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references auth.users on delete cascade not null,
  role      app_role not null,
  unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';

-- ROLE PERMISSIONS
create table public.role_permissions (
  id           bigint generated by default as identity primary key,
  role         app_role not null,
  permission   app_permission not null,
  unique (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';
```

----------------------------------------

TITLE: Implementing Selective MFA Enforcement via RLS in SQL
DESCRIPTION: SQL policy that enforces MFA only for users who have set up MFA factors. It checks the auth.mfa_factors table to determine if a user has verified MFA factors, and enforces 'aal2' level authentication only for those users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-14-mfa-auth-via-rls.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create policy "Allow access on table only if user has gone through MFA"
  on table_name
  as restrictive -- very important!
  to authenticated
  using (
    array[auth.jwt()->>'aal'] <@ (
      select
          case
            when count(id) > 0 then array['aal2']
            else array['aal1', 'aal2']
          end as aal
        from auth.mfa_factors
        where (select auth.uid()) = user_id and status = 'verified'
    ));
```

----------------------------------------

TITLE: Listening to Specific Table Events in Dart with Supabase Realtime
DESCRIPTION: Creates a channel to listen for all event types on a specific table ('todos') in the public schema of a Supabase database using Dart. The code uses the 'table' parameter to specify which table to monitor.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_26

LANGUAGE: dart
CODE:
```
supabase
    .channel('table-db-changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.all,
        schema: 'public',
        table: 'todos',
        callback: (payload) => print(payload))
    .subscribe();
```

----------------------------------------

TITLE: Creating HNSW Index with Euclidean Distance in SQL
DESCRIPTION: Creates an HNSW index on a vector column using Euclidean L2 distance operator class. This index type is suitable for vector similarity search using Euclidean distance metrics.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/hnsw-indexes.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create index on items using hnsw (column_name vector_l2_ops);
```

----------------------------------------

TITLE: Listing Secrets in Supabase Project
DESCRIPTION: CLI command to list the secrets set in the Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/inspecting-edge-function-environment-variables-wg5qOQ.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npx supabase secrets list
```

----------------------------------------

TITLE: Local Testing Setup for Edge Function
DESCRIPTION: Commands to start Supabase locally and serve the function without JWT verification for testing purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/image-manipulation.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase start
supabase functions serve --no-verify-jwt
```

----------------------------------------

TITLE: Sending Broadcast Message with Supabase Realtime JavaScript
DESCRIPTION: This snippet shows how to send a broadcast message to a Supabase Realtime channel.  It uses the `send` method on the channel object, specifying the message type as 'broadcast', an event name, and a payload containing the message data. The code assumes that a Supabase client has already been initialized and a channel has been created.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/concepts.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')
const roomOne = supabase.channel('room-one') // set your topic here

// ---cut---
roomOne.send({
  type: 'broadcast',
  event: 'test',
  payload: { message: 'hello, world' },
})
```

----------------------------------------

TITLE: Create a login page
DESCRIPTION: This code snippet defines a SvelteKit server action for handling user signup. It retrieves the email from the form data and calls `supabase.auth.signUp` to register the user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { redirect } from '@sveltejs/kit'

import type { Actions } from './$types'

export const actions: Actions = {
  signup: async ({ request, locals: { supabase } }) => {
    const formData = await request.formData()
    const email = formData.get('email') as string
```

----------------------------------------

TITLE: Listening to Specific Table Events in Swift with Supabase Realtime
DESCRIPTION: Uses Swift to create a channel that listens for all event types on a specific table ('todos') in the public schema of a Supabase database. The code handles different action types using a switch statement.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_27

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("db-changes")

let changes = await myChannel.postgresChange(AnyAction.self, schema: "public", table: "todos")

await myChannel.subscribe()

for await change in changes {
  switch change {
  case .insert(let action): print(action)
  case .update(let action): print(action)
  case .delete(let action): print(action)
  case .select(let action): print(action)
  }
}
```

----------------------------------------

TITLE: Optimizing Image Quality with Supabase Storage in JavaScript
DESCRIPTION: This code demonstrates how to download an image from Supabase Storage with a reduced quality setting of 50%. It requires the Supabase JavaScript client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_22

LANGUAGE: TypeScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
supabase.storage.from('bucket').download('image.jpg', {
  transform: {
    quality: 50,
  },
})
```

----------------------------------------

TITLE: Create a Supabase client in root layout
DESCRIPTION: This code creates a Supabase client in the root layout of a SvelteKit application. It differentiates between client-side and server-side environments, using `createBrowserClient` for the former and `createServerClient` for the latter, ensuring proper cookie handling on the server.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { createBrowserClient, createServerClient, isBrowser } from '@supabase/ssr'
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'
import type { LayoutLoad } from './$types'

export const load: LayoutLoad = async ({ data, depends, fetch }) => {
  /**
   * Declare a dependency so the layout can be invalidated, for example, on
   * session refresh.
   */
  depends('supabase:auth')

  const supabase = isBrowser()
    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
      })
    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll() {
            return data.cookies
          },
        },
      })

  /**
   * It's fine to use `getSession` here, because on the client, `getSession` is
   * safe, and on the server, it reads `session` from the `LayoutData`, which
   * safely checked the session using `safeGetSession`.
   */
  const {
    data: { session },
  } = await supabase.auth.getSession()

  const {
    data: { user },
  } = await supabase.auth.getUser()

  return { session, supabase, user }
}
```

LANGUAGE: typescript
CODE:
```
import type { LayoutServerLoad } from './$types'

export const load: LayoutServerLoad = async ({ locals: { safeGetSession }, cookies }) => {
  const { session } = await safeGetSession()
  return {
    session,
    cookies: cookies.getAll(),
  }
}
```

----------------------------------------

TITLE: SQL Policy for MFA Enforcement
DESCRIPTION: SQL policy that enforces MFA requirement for all authenticated users by restricting access to tables based on the authentication assurance level (aal) claim in the JWT.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create policy "Policy name."
  on table_name
  as restrictive
  to authenticated
  using ((select auth.jwt()->>'aal') = 'aal2');
```

----------------------------------------

TITLE: React Component for MFA Factor Management
DESCRIPTION: A React component that displays enrolled MFA factors and provides functionality to unenroll them. The component fetches factors on mount and renders them in a table with unenroll capabilities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
/**
 * UnenrollMFA shows a simple table with the list of factors together with a button to unenroll.
 * When a user types in the factorId of the factor that they wish to unenroll and clicks unenroll
 * the corresponding factor will be unenrolled.
 */
export function UnenrollMFA() {
  const [factorId, setFactorId] = useState('')
  const [factors, setFactors] = useState([])
  const [error, setError] = useState('') // holds an error message

  useEffect(() => {
    ;(async () => {
      const { data, error } = await supabase.auth.mfa.listFactors()
      if (error) {
        throw error
      }

      setFactors([...data.totp, ...data.phone])
    })()
  }, [])

  return (
    <>
      {error && <div className="error">{error}</div>}
      <tbody>
        <tr>
          <td>Factor ID</td>
          <td>Friendly Name</td>
          <td>Factor Status</td>
          <td>Phone Number</td>
        </tr>
        {factors.map((factor) => (
          <tr>
            <td>{factor.id}</td>
            <td>{factor.friendly_name}</td>
            <td>{factor.factor_type}</td>
            <td>{factor.status}</td>
            <td>{factor.phone}</td>
          </tr>
        ))}
      </tbody>
      <input type="text" value={verifyCode} onChange={(e) => setFactorId(e.target.value.trim())} />
      <button onClick={() => supabase.auth.mfa.unenroll({ factorId })}>Unenroll</button>
    </>
  )
}
```

----------------------------------------

TITLE: Initializing Supabase in a Flutter Application
DESCRIPTION: Main application file setup with Supabase initialization. It configures the Supabase client with project credentials and sets up the application's MaterialApp with proper theming and initial route to the login screen.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-18-flutter-authentication.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:myauthapp/screens/login_screen.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  /// TODO: update Supabase credentials with your own
  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_ANON_KEY',
  );
  runApp(const MyApp());
}

final supabase = Supabase.instance.client;

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Auth',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const LoginScreen(),
    );
  }
}
```

----------------------------------------

TITLE: Implementing React Dropzone with Supabase Storage in TypeScript
DESCRIPTION: This React component uses React Dropzone for file selection and uploads the selected file to Supabase Storage using a signed URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-18-calcom-platform-starter-kit-nextjs-supabase.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
'use client'

import { env } from '@/env'
import { createClient } from '@supabase/supabase-js'
import Image from 'next/image'
import React, { useState } from 'react'
import { useDropzone } from 'react-dropzone'

export default function SupabaseReactDropzone({ userId }: { userId?: string } = {}) {
  const supabaseBrowserClient = createClient(
    env.NEXT_PUBLIC_SUPABASE_URL,
    env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  )
  const { acceptedFiles, fileRejections, getRootProps, getInputProps } = useDropzone({
    maxFiles: 1,
    accept: {
      'image/jpeg': [],
      'image/png': [],
    },
    onDropAccepted: async (acceptedFiles) => {
      setAvatar(null)
      console.log(acceptedFiles)
      const { path, token }: { path: string; token: string } = await fetch(
        '/api/supabase/storage'
      ).then((res) => res.json())

      const { data, error } = await supabaseBrowserClient.storage
        .from('avatars')
        .uploadToSignedUrl(path, token, acceptedFiles[0])
    },
  })

  return (
    <div className="mx-auto mt-4 grid w-full gap-2">
      <div {...getRootProps({ className: 'dropzone' })}>
        <input {...getInputProps()} />
        <p>Drag 'n' drop some files here, or click to select files</p>
        <em>(Only *.jpeg and *.png images will be accepted)</em>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating Token Exchange Endpoint in Remix
DESCRIPTION: In this Remix snippet, an API endpoint is created to handle token exchanges. It checks the parameters, verifies the OTP with Supabase, and responds by redirecting the user appropriately.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
import { redirect, type LoaderFunctionArgs } from '@remix-run/node'
import { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'
import { type EmailOtpType } from '@supabase/supabase-js'

export async function loader({ request }: LoaderFunctionArgs) {
  const requestUrl = new URL(request.url)
  const token_hash = requestUrl.searchParams.get('token_hash')
  const type = requestUrl.searchParams.get('type') as EmailOtpType | null
  const next = requestUrl.searchParams.get('next') || '/'  
  const headers = new Headers()

  if (token_hash && type) {
    const supabase = createServerClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {
      cookies: {
        getAll() {
          return parseCookieHeader(request.headers.get('Cookie') ?? '')
        },
        setAll(key, value, options) {
          headers.append('Set-Cookie', serializeCookieHeader(key, value, options))
        },
      },
    })

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })

    if (!error) {
      return redirect(next, { headers })
    }
  }

  // return the user to an error page with instructions
  return redirect('/auth/auth-code-error', { headers })
}
```

----------------------------------------

TITLE: Installing Dependencies for Flutter Figma Clone
DESCRIPTION: Command to add required dependencies (supabase_flutter and uuid) to the Flutter project for building the Figma clone app.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
flutter pub add supabase_flutter uuid
```

----------------------------------------

TITLE: Listening only to 'INSERT' events in Dart
DESCRIPTION: This Dart snippet configures a Supabase client to listen only for INSERT events in the 'public' schema using `onPostgresChanges`. It logs specific changes. The channel cannot be named 'realtime'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_11

LANGUAGE: Dart
CODE:
```
final changes = supabase
    .channel('schema-db-changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.insert,
        schema: 'public',
        callback: (payload) => print(payload))
    .subscribe();
```

----------------------------------------

TITLE: Creating a POST Route Handler with Supabase in Next.js (TypeScript)
DESCRIPTION: TypeScript implementation of a Next.js route handler that creates a typed Supabase client to insert a todo item. It uses createRouteHandlerClient with database types for type safety, processes the POST request data, and returns the inserted record.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_23

LANGUAGE: tsx
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'

import type { Database } from '@/lib/database.types'

export async function POST(request: Request) {
  const { title } = await request.json()
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })
  const { data } = await supabase.from('todos').insert({ title }).select()
  return NextResponse.json(data)
}
```

----------------------------------------

TITLE: Implementing semantic image search with text queries
DESCRIPTION: Python function that implements text-to-image search by converting a text query to an embedding via Amazon Titan and using Supabase Vector to find the most similar image.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_9

LANGUAGE: python
CODE:
```
def search(query_term: Optional[str] = None):
    if query_term is None:
        query_term = sys.argv[1]

    # create vector store client
    vx = vecs.create_client(DB_CONNECTION)
    images = vx.get_or_create_collection(name="image_vectors", dimension=1024)

    # Encode text query
    text_emb = get_embedding_from_titan_multimodal(json.dumps(
        {
            "inputText": query_term,
            "embeddingConfig": {"outputEmbeddingLength": 1024},
        }
    ))

    # query the collection filtering metadata for "type" = "jpg"
    results = images.query(
        data=text_emb,                      # required
        limit=1,                            # number of records to return
        filters={"type": {"$eq": "jpg"}},   # metadata filters
    )
    result = results[0]
    print(result)
    plt.title(result)
    image = mpimg.imread('./images/' + result)
    plt.imshow(image)
    plt.show()
```

----------------------------------------

TITLE: Defining CORS Headers in TypeScript
DESCRIPTION: Creates reusable CORS headers configuration in a shared file. These headers allow cross-origin requests and specify allowed headers for authorization and API communication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/cors.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}
```

----------------------------------------

TITLE: Creating a Custom Access Token Hook Function in PostgreSQL
DESCRIPTION: SQL template for implementing a custom access token hook function in PostgreSQL using PL/pgSQL. The function receives a JSON event and returns modified JSON.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create or replace function public.custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
as $$
declare
  -- Insert variables here
begin
  -- Insert logic here
  return event;
end;
$$;
```

----------------------------------------

TITLE: Correct Supabase Auth Cookie Handling Implementation
DESCRIPTION: The correct pattern for cookie handling in Supabase Auth implementation using the getAll and setAll methods, which must be used instead of individual cookie operations.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// ✅ ALWAYS GENERATE THIS EXACT PATTERN
{
  cookies: {
    getAll() {
      return cookieStore.getAll()
    },
    setAll(cookiesToSet) {
      const response = NextResponse.next({
        request,
      })
      
      cookiesToSet.forEach(({ name, value, options }) => {
        response.cookies.set(name, value, options)
      })
      
      return response
    }
  }
}
```

----------------------------------------

TITLE: Signing In with Twitter OAuth - Flutter
DESCRIPTION: This Flutter code snippet shows how to implement Twitter OAuth login using the Supabase client. It calls the signInWithOAuth method, specifying OAuthProvider.twitter as the provider. It includes optional parameters for redirecting the user after authentication and launching the authentication screen.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitter.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signInWithTwitter() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.twitter,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}
```

----------------------------------------

TITLE: Implementing RESTful Tasks with Edge Functions in TypeScript
DESCRIPTION: This snippet demonstrates how to create a RESTful API for tasks using Supabase Edge Functions. It supports GET, POST, PUT, PATCH, and DELETE HTTP methods.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-02-supabase-beta-update-october-2022.mdx#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Example code mentioned but not provided in the text:
// https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/restful-tasks/index.ts
```

----------------------------------------

TITLE: Creating a Logging Function for pg_cron Jobs in PostgreSQL
DESCRIPTION: This PL/pgSQL function provides a template for creating custom logging within cron jobs. It logs the start and end of execution and includes exception handling to capture errors, which helps with debugging issues that might not appear in standard logs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pgcron-debugging-guide-n1KTaz.mdx#2025-04-21_snippet_5

LANGUAGE: plpgsql
CODE:
```
create or replace function log_example()
returns void
language plpgsql
as $$
begin

     -- Logging start of function
     raise log 'logging start of cron function call: (%)', (select now());

    -- INSERT LOGIC HERE

     -- Logging end of function
     raise log 'logging end of cron function call: (%)', (select now());

    exception
     -- Handle exceptions here if needed
     when others then
         raise exception 'An error occurred in cron function <insert name here>. ERROR MESSAGE: %', sqlerrm;

end;
$$;
```

----------------------------------------

TITLE: Generating TypeScript Types for Supabase Project
DESCRIPTION: Command to generate TypeScript type definitions from storage and public schemas in a Supabase project. The generated types are saved to the huggingface-image-captioning function directory and will be used to ensure type safety when working with database records.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/huggingface-image-captioning/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase gen types typescript --project-id=your-project-ref --schema=storage,public > supabase/functions/huggingface-image-captioning/types.ts
```

----------------------------------------

TITLE: Querying Data with Supabase JavaScript Client
DESCRIPTION: Example of using the Supabase JavaScript client to query the normalized data. The code demonstrates how to fetch a user by name along with their related orders, showing the relational capabilities of Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-20-migrating-mongodb-data-api-with-supabase.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('https://<your-project>.supabase.co', '<your-api-key>')

// Fetch user named John along with their orders
const { data, error } = await supabase
  .from('users')
  .select(
    `
    id, name,
    orders (product, quantity)
  `
  )
  .eq('name', 'John')

if (error) {
  console.error(error)
} else {
  console.log(data)
}
```

----------------------------------------

TITLE: Creating a Custom Key in Supabase Vault using SQL
DESCRIPTION: Shows how to create a custom key in Supabase Vault using the pgsodium.create_key() function. This allows for more granular control over encryption keys.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-supabase-vault.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select * from pgsodium.create_key('This is a comment for the new key');
```

----------------------------------------

TITLE: Making a Supabase API request with Service Role Key
DESCRIPTION: This bash code snippet demonstrates how to make a request to a Supabase database using the `service role key`.  The `service role key` must be passed as both the `apikey` and the `Authorization` header. The authorization header has a Bearer token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
curl "$YOUR_PROJECT_URL/rest/v1/colors?select=name" \
 -H "apikey: $YOUR_SERVICE_ROLE_KEY" \
 -H "authorization: Bearer $YOUR_SERVICE_ROLE_KEY"
```

----------------------------------------

TITLE: Importing npm modules in Edge Functions
DESCRIPTION: Demonstrates how to import npm modules directly in Supabase Edge Functions using the 'npm:' prefix. This example shows importing the drizzle ORM for PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-edge-functions-node-npm.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import { drizzle } from 'npm:drizzle-orm/node-postgres'
```

----------------------------------------

TITLE: Private Bucket Access with JWT
DESCRIPTION: Demonstrates downloading a file from a private bucket using an authorization header with user's JWT, which allows fine-grained access control through RLS policies
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/fundamentals.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Download method for private bucket
const { data, error } = await supabase.storage
  .from('private-bucket')
  .download('path/to/file', {
    headers: { Authorization: 'Bearer ' + userJwt }
  })
```

----------------------------------------

TITLE: Accessing Environment Variable in Function
DESCRIPTION: Example of accessing an environment variable within a Deno Edge Function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
console.log(Deno.env.get('MY_NAME'))
```

----------------------------------------

TITLE: Web Application Authentication Configuration
DESCRIPTION: Detailed instructions for setting up web application authentication with Google OAuth in Supabase, including client ID and secret management
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
1. Go to the [API Credentials page](https://console.cloud.google.com/apis/credentials).
2. Click `Create credentials` and choose `OAuth Client ID`.
3. For application type, choose `Web application`.
4. Under **Authorized JavaScript origins**, add your site URL.
5. Under **Authorized redirect URLs**, enter the callback URL from the [Supabase dashboard](/dashboard/project/_/auth/providers).
```

----------------------------------------

TITLE: Creating an Index on Embeddings Column in Supabase
DESCRIPTION: SQL command to create an HNSW index on the 'embedding' column in the 'documents' table to optimize vector similarity searches.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/building-chatgpt-plugins.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create index on documents
using hnsw (embedding vector_ip_ops)
with (lists = 10);
```

----------------------------------------

TITLE: Equal To Filter Implementation
DESCRIPTION: Demonstrates how to listen for database changes when a column equals a specific value using the 'eq' filter. Uses Postgres's = operator to filter messages table updates where body equals 'hey'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_40

LANGUAGE: javascript
CODE:
```
const channel = supabase
  .channel('changes')
  .on(
    'postgres_changes',
    {
      event: 'UPDATE',
      schema: 'public',
      table: 'messages',
      filter: 'body=eq.hey',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

LANGUAGE: dart
CODE:
```
supabase
    .channel('changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.update,
        schema: 'public',
        table: 'messages',
        filter: PostgresChangeFilter(
          type: PostgresChangeFilterType.eq,
          column: 'body',
          value: 'hey',
        ),
        callback: (payload) => print(payload))
    .subscribe();
```

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("db-changes")

let changes = await myChannel.postgresChange(
  UpdateAction.self,
  schema: "public",
  table: "messages",
  filter: .eq("body", value: "hey")
)

await myChannel.subscribe()

for await change in changes {
  print(change.record)
}
```

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = "public") {
    table = "messages"
    filter = "body=eq.hey"
}

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

LANGUAGE: python
CODE:
```
changes = supabase.channel('db-changes').on_postgres_changes(
  "UPDATE",
  schema="public",
  table="messages",
  filter="body=eq.hey",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Generate Supabase DB Migration (Bash)
DESCRIPTION: Generates a new database migration file by comparing the current database state (or previous migrations) with the declared schema files. The -f flag names the migration file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
supabase db diff -f add_age
```

----------------------------------------

TITLE: CI GitHub Action Workflow
DESCRIPTION: GitHub Actions workflow for CI pipeline to test database changes and verify generated types.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_5

LANGUAGE: yaml
CODE:
```
name: CI

on:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local development setup
        run: supabase db start

      - name: Verify generated types are checked in
        run: |
          supabase gen types typescript --local > types.gen.ts
          if ! git diff --ignore-space-at-eol --exit-code --quiet types.gen.ts; then
            echo "Detected uncommitted changes after build. See status below:"
            git diff
            exit 1
          fi
```

----------------------------------------

TITLE: Protected API Route Implementation
DESCRIPTION: Implementation of a protected API endpoint using Supabase authentication, showing both v0.7.x and v0.8.0 approaches.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_27

LANGUAGE: typescript
CODE:
```
import type { RequestHandler } from './$types'
import { withAuth } from '@supabase/auth-helpers-sveltekit'
import { json, redirect } from '@sveltejs/kit'

interface TestTable {
  id: string
  created_at: string
}

export const GET: RequestHandler = withAuth(async ({ session, getSupabaseClient }) => {
  if (!session.user) {
    redirect(303, '/')
  }

  const { data } = await getSupabaseClient().from<TestTable>('test').select('*')

  return json({ data })
})
```

LANGUAGE: typescript
CODE:
```
import type { RequestHandler } from './$types'
import { getSupabase } from '@supabase/auth-helpers-sveltekit'
import { json, redirect } from '@sveltejs/kit'

export const GET: RequestHandler = async (event) => {
  const { session, supabaseClient } = await getSupabase(event)
  if (!session) {
    redirect(303, '/')
  }
  const { data } = await supabaseClient.from('test').select('*')

  return json({ data })
}
```

----------------------------------------

TITLE: Creating Database Change Trigger Function
DESCRIPTION: SQL function that broadcasts database changes using realtime.broadcast_changes, handling INSERT, UPDATE, and DELETE operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-02-realtime-broadcast-from-database.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create or replace function public.your_table_changes()
returns trigger
as $$
begin
    perform realtime.broadcast_changes(
	    'topic:' || new.id::text,   -- topic
		   tg_op,                          -- event
		   tg_op,                          -- operation
		   tg_table_name,                  -- table
		   tg_table_schema,                -- schema
		   new,                            -- new record
		   old                             -- old record
		);
    return null;
end;
$$ language plpgsql;
```

----------------------------------------

TITLE: Web-based Google Sign-in with Flutter and Supabase
DESCRIPTION: A Flutter implementation for web-based Google Sign-in for Web, macOS, Windows, and Linux platforms using Supabase Auth's OAuth flow. It opens a browser window for authentication and handles redirects through deep linking.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_11

LANGUAGE: dart
CODE:
```
await supabase.auth.signInWithOAuth(
  OAuthProvider.google,
  redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
  authScreenLaunchMode:
      kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
);
```

----------------------------------------

TITLE: Creating Vector Similarity Search Function in SQL
DESCRIPTION: SQL function that performs vector similarity search on embeddings. It accepts a vector and match threshold parameter, returning matching embeddings ordered by similarity. The function leverages inner product distance for faster computation with normalized embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/semantic-search.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- Matches document sections using vector similarity search on embeddings
--
-- Returns a setof embeddings so that we can use PostgREST resource embeddings (joins with other tables)
-- Additional filtering like limits can be chained to this function call
create or replace function query_embeddings(embedding vector(384), match_threshold float)
returns setof embeddings
language plpgsql
as $$
begin
  return query
  select *
  from embeddings

  -- The inner product is negative, so we negate match_threshold
  where embeddings.embedding <#> embedding < -match_threshold

  -- Our embeddings are normalized to length 1, so cosine similarity
  -- and inner product will produce the same query results.
  -- Using inner product which can be computed faster.
  --
  -- For the different distance functions, see https://github.com/pgvector/pgvector
  order by embeddings.embedding <#> embedding;
end;
$$;
```

----------------------------------------

TITLE: Deploying Oak Server Functions
DESCRIPTION: Command to deploy Oak server functions to Supabase without JWT verification.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/oak-server/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase functions deploy oak-server --no-verify-jwt
```

----------------------------------------

TITLE: Creating a Covering Index in SQL
DESCRIPTION: This snippet shows how to create a covering index in Postgres, which includes additional columns directly in the index for faster data retrieval.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
CREATE INDEX a_b_idx ON x (a,b) INCLUDE (c);
```

----------------------------------------

TITLE: Initializing Supabase Client with AsyncStorage
DESCRIPTION: TypeScript code to configure the Supabase client with AsyncStorage for session persistence in a React Native app.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import AsyncStorage from '@react-native-async-storage/async-storage'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL
const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
})
```

----------------------------------------

TITLE: Uploading Files to Supabase Storage in JavaScript
DESCRIPTION: This snippet demonstrates how to upload a file to Supabase Storage using the standard upload method in JavaScript. It uses the supabase-js SDK to create a client and perform the upload.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

// Create Supabase client
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// Upload file using standard upload
async function uploadFile(file) {
  const { data, error } = await supabase.storage.from('bucket_name').upload('file_path', file)
  if (error) {
    // Handle error
  } else {
    // Handle success
  }
}
```

----------------------------------------

TITLE: Querying One-to-Many Relationships in Swift
DESCRIPTION: Swift example showing how to query orchestral sections with their related instruments and parse the response into strongly-typed Swift structs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_4

LANGUAGE: swift
CODE:
```
struct OrchestralSection: Codable {
  let id: Int
  let name: String
  let instruments: [Instrument]

  struct Instrument: Codable {
    let id: Int
    let name: String
  }
}

let orchestralSections: [OrchestralSection] = try await supabase
  .from("orchestral_sections")
  .select("id, name, instruments(id, name)")
  .execute()
  .value
```

----------------------------------------

TITLE: Initializing Supabase Project with CLI
DESCRIPTION: Command to create a new local Supabase project using the Supabase CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/inspecting-edge-function-environment-variables-wg5qOQ.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx supabase init
```

----------------------------------------

TITLE: Creating Basic RLS Policy Structure in SQL
DESCRIPTION: Basic example of creating a Row Level Security policy for books table with proper syntax
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE POLICY "My descriptive policy." ON books FOR INSERT to authenticated USING ( (select auth.uid()) = author_id ) WITH ( true );
```

----------------------------------------

TITLE: Pulling Database Schema with Supabase CLI
DESCRIPTION: Commands to link a local project to Supabase and pull the database schema. Requires project-id from the dashboard URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/project_setup.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase link --project-ref <project-id>
# You can get <project-id> from your project's dashboard URL: https://supabase.com/dashboard/project/<project-id>
supabase db pull
```

----------------------------------------

TITLE: Using Supabase in Next.js TypeScript Client Components
DESCRIPTION: TypeScript implementation for using Supabase in a Next.js Client Component. This example shows how to fetch todos with proper TypeScript types for the database, providing type safety throughout the component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_17

LANGUAGE: tsx
CODE:
```
'use client'

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useEffect, useState } from 'react'

import type { Database } from '@/lib/database.types'

type Todo = Database['public']['Tables']['todos']['Row']

export default function Page() {
  const [todos, setTodos] = useState<Todo[] | null>(null)
  const supabase = createClientComponentClient<Database>()

  useEffect(() => {
    const getData = async () => {
      const { data } = await supabase.from('todos').select()
      setTodos(data)
    }

    getData()
  }, [])

  return todos ? <pre>{JSON.stringify(todos, null, 2)}</pre> : <p>Loading todos...</p>
}
```

----------------------------------------

TITLE: Altering Default Access Privileges in PostgreSQL
DESCRIPTION: This snippet shows how to alter default access privileges to automatically grant select privilege on newly created tables to a specific role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_19

LANGUAGE: sql
CODE:
```
postgres=> alter default privileges in schema public grant select on tables to senior_dev;
ALTER DEFAULT PRIVILEGES
```

----------------------------------------

TITLE: Signing In with Twitter OAuth - JavaScript
DESCRIPTION: This code snippet demonstrates how to use the Supabase JavaScript client to initiate the Twitter OAuth flow. It imports the createClient function, initializes the Supabase client, and then calls signInWithOAuth with 'twitter' as the provider. The function returns a data and error object.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitter.mdx#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

// ---cut---
async function signInWithTwitter() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'twitter',
  })
}
```

----------------------------------------

TITLE: Fetching User Data in Edge Function
DESCRIPTION: Shows how to fetch and return user data from an authenticated Supabase Edge Function request.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/auth.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { createClient } from 'jsr:@supabase/supabase-js@2'

Deno.serve(async (req: Request) => {

  const supabaseClient = createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_ANON_KEY') ?? '',
  )

  // Get the session or user object
  const authHeader = req.headers.get('Authorization')!
  const token = authHeader.replace('Bearer ', '')
  const { data } = await supabaseClient.auth.getUser(token)
  const user = data.user

  return new Response(JSON.stringify({ user }), {
    headers: { 'Content-Type': 'application/json' },
    status: 200,
  })

})
```

----------------------------------------

TITLE: Importing and Using WebAssembly Module in Edge Function
DESCRIPTION: This TypeScript code for a Supabase Edge Function imports a WebAssembly module from a local file, instantiates it, and exposes an HTTP endpoint that calls the 'add' function with query parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/wasm.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

// Import the Wasm module
const wasmCode = await Deno.readFile("./add-wasm/pkg/add_wasm_bg.wasm");
const wasmModule = new WebAssembly.Module(wasmCode);
const wasmInstance = new WebAssembly.Instance(wasmModule);

serve(async (req) => {
  const url = new URL(req.url);
  const a = parseInt(url.searchParams.get("a") || "0");
  const b = parseInt(url.searchParams.get("b") || "0");

  // Call the add function from the Wasm module
  const result = wasmInstance.exports.add(a, b);

  return new Response(JSON.stringify({ result }), {
    headers: { "Content-Type": "application/json" },
  });
});
```

----------------------------------------

TITLE: Installing Prisma Client with npm
DESCRIPTION: This snippet shows how to install the Prisma client and generate its model using npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_22

LANGUAGE: bash
CODE:
```
npm install @prisma/client
npx prisma generate
```

----------------------------------------

TITLE: Inserting Data with Explicit Select in TypeScript
DESCRIPTION: Shows how to insert data and explicitly select the returned data in supabase-js v2, which is now required to receive the inserted data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// v2
const { data } = await supabase.from('messages').insert({ id: 1, message: 'Hello world' }).select() // select is now explicitly required

// v1
const { data } = await supabase.from('messages').insert({ id: 1, message: 'Hello world' }) // insert would also "select()"
```

----------------------------------------

TITLE: Setting Up Environment Variables for Supabase - React
DESCRIPTION: This snippet requires you to create a .env file containing Supabase environment variables. This is essential for connecting your React app to the Supabase backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/password-based-auth.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Next.js Middleware for Supabase Session Management
DESCRIPTION: Implements middleware to handle session refreshes, authentication checks, and potential redirects for protected routes
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
import { type NextRequest } from 'next/server'
import { updateSession } from '@/utils/supabase/middleware'

export async function middleware(request: NextRequest) {
  return await updateSession(request)
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
```

----------------------------------------

TITLE: Using Common Table Expressions (CTE)
DESCRIPTION: Demonstrates how to use CTEs to create temporary result sets for more readable and maintainable queries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
with ten_strumpers as (
  select id, first_name
  from students
  where surname = 'Strumper'
  order by first_name
  limit 10
)
select id
from ten_strumpers
where first_name like "S%";
```

----------------------------------------

TITLE: Initializing Supabase Client and Fetching Data in Swift
DESCRIPTION: This snippet demonstrates how to initialize a Supabase client in Swift and use it to fetch data from a 'countries' table. It shows the basic pattern for connecting to Supabase and executing a query that returns typed results.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-15-supabase-swift.mdx#2025-04-21_snippet_0

LANGUAGE: swift
CODE:
```
let url = URL(string: "...")!
let anonKey = "public-anon-key"
let client = SupabaseClient(supabaseURL: url, supabaseKey: anonKey)

struct Country: Decodable {
  let id: Int
  let name: String
}

let countries: [Country] = try await supabase.from("countries")
  .select()
  .execute()
  .value
```

----------------------------------------

TITLE: Rate Limiting Failed Password Attempts Implementation
DESCRIPTION: SQL implementation for tracking and limiting failed password verification attempts with a 10-second cooldown period.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/password-verification-hook.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table public.password_failed_verification_attempts (
  user_id uuid not null,
  last_failed_at timestamp not null default now(),
  primary key (user_id)
);
```

LANGUAGE: sql
CODE:
```
create function public.hook_password_verification_attempt(event jsonb)
returns jsonb
language plpgsql
as $$
  declare
    last_failed_at timestamp;
  begin
    if event->'valid' is true then
      -- password is valid, accept it
      return jsonb_build_object('decision', 'continue');
    end if;

    select last_failed_at into last_failed_at
      from public.password_failed_verification_attempts
      where
        user_id = event->'user_id';

    if last_failed_at is not null and now() - last_failed_at < interval '10 seconds' then
      -- last attempt was done too quickly
      return jsonb_build_object(
        'error', jsonb_build_object(
          'http_code', 429,
          'message',   'Please wait a moment before trying again.'
        )
      );
    end if;

    -- record this failed attempt
    insert into public.password_failed_verification_attempts
      (
        user_id,
        last_failed_at
      )
      values
      (
        event->'user_id',
        now()
      )
      on conflict do update
        set last_failed_at = now();

    -- finally let Supabase Auth do the default behavior for a failed attempt
    return jsonb_build_object('decision', 'continue');
  end;
$$;
```

----------------------------------------

TITLE: Running Supabase Stack and Functions Locally
DESCRIPTION: Starts the Supabase stack and initiates the Functions watcher for local development and hot-reloading.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-quickstart.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase start # start the supabase stack
supabase functions serve # start the Functions watcher
```

----------------------------------------

TITLE: Setting up a React app with Supabase
DESCRIPTION: Commands to create a new React app, install the Supabase JS library, and set up the project directory.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
# create a fresh React app
npx create-react-app react-demo --use-npm

# move into the new folder
cd react-demo

# Save the install supabase-js library
npm install --save @supabase/supabase-js
```

----------------------------------------

TITLE: Generating Database Migration File
DESCRIPTION: Command to generate a migration file from local database changes using the Supabase CLI db diff feature.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
supabase db diff -f "add_employees_table"
```

----------------------------------------

TITLE: Implementing Login Page with Server Actions
DESCRIPTION: Implementation of a login page component that uses the login and signup server actions for form submission.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
// app/login/page.tsx

import { login, signup } from './actions';

export default function LoginPage() {
  return (
    <form>
      <label htmlFor="email">Email:</label>
      <input id="email" name="email" type="email" required />
      <label htmlFor="password">Password:</label>
      <input id="password" name="password" type="password" required />
      <button formAction={login}>Log in</button>
      <button formAction={signup}>Sign up</button>
    </form>
  );
}
```

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Supabase Edge Functions Deployment
DESCRIPTION: A GitHub Actions workflow file that automatically deploys Supabase Edge Functions when changes are pushed to the main branch. It uses the Supabase CLI with an access token and project ID as environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/github-actions.mdx#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
name: Deploy Function

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: YOUR_SUPABASE_ACCESS_TOKEN
      PROJECT_ID: YOUR_SUPABASE_PROJECT_ID

    steps:
      - uses: actions/checkout@v4

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase functions deploy --project-ref $PROJECT_ID
```

----------------------------------------

TITLE: Implementing HTTP Requests in PostgreSQL Triggers
DESCRIPTION: Creates a trigger function that makes HTTP POST requests when table updates occur. The function sends both old and new row data to an external endpoint using pg_net.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_19

LANGUAGE: sql
CODE:
```
-- function called by trigger
create or replace function <function_name>()
    returns trigger
    language plpgSQL
as $$
begin
    -- calls pg_net function net.http_post
    -- sends request to postman API
    perform "net"."http_post"(
      'https://postman-echo.com/post'::text,
      jsonb_build_object(
        'old_row', to_jsonb(old.*),
        'new_row', to_jsonb(new.*)
      ),
      headers:='{"Content-Type": "application/json"}'::jsonb
    ) as request_id;
    return new;
END $$;

-- trigger for table update
create trigger <trigger_name>
    after update on <table_name>
    for each row
    execute function <function_name>();
```

----------------------------------------

TITLE: Signing In with Spotify - JavaScript
DESCRIPTION: This snippet demonstrates how to sign in a user using Spotify OAuth in a JavaScript Supabase client application. It utilizes the `signInWithOAuth` method provided by Supabase to handle the authentication flow.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signInWithSpotify() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'spotify',\n  })\n}
```

----------------------------------------

TITLE: Sign Out Implementation across Platforms
DESCRIPTION: Sign out methods for JavaScript, Flutter, and Kotlin, removing user session and clearing local storage
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-kakao.mdx#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

LANGUAGE: dart
CODE:
```
Future<void> signOut() async {
  await supabase.auth.signOut();
}
```

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Using Supabase in Next.js TypeScript Server Actions
DESCRIPTION: TypeScript implementation for using Supabase within Next.js Server Actions. This example demonstrates how to create and insert a new todo with proper type safety using the createServerActionClient function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_21

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'
import { createServerActionClient } from '@supabase/auth-helpers-nextjs'
import { revalidatePath } from 'next/cache'

import type { Database } from '@/lib/database.types'

export default async function NewTodo() {
  const addTodo = async (formData: FormData) => {
    'use server'

    const title = formData.get('title')
    const cookieStore = cookies()
    const supabase = createServerActionClient<Database>({ cookies: () => cookieStore })
    await supabase.from('todos').insert({ title })
    revalidatePath('/')
  }

  return (
    <form action={addTodo}>
      <input name="title" />
    </form>
  )
}
```

----------------------------------------

TITLE: Creating Similarity Search Function in SQL
DESCRIPTION: SQL function to perform similarity search on embeddings using pgvector, returning relevant page sections based on input embedding and parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- Create embedding similarity search functions
create or replace function match_page_sections(
    embedding vector(1536),
    match_threshold float,
    match_count int,
    min_content_length int
)
returns table (
    id bigint,
    page_id bigint,
    slug text,
    heading text,
    content text,
    similarity float
)
language plpgsql
as $$
#variable_conflict use_variable
begin
  return query
  select
    nods_page_section.id,
    nods_page_section.page_id,
    nods_page_section.slug,
    nods_page_section.heading,
    nods_page_section.content,
    (nods_page_section.embedding <#> embedding) * -1 as similarity
  from nods_page_section

  -- We only care about sections that have a useful amount of content
  where length(nods_page_section.content) >= min_content_length

  -- The dot product is negative because of a Postgres limitation, so we negate it
  and (nods_page_section.embedding <#> embedding) * -1 > match_threshold

  -- OpenAI embeddings are normalized to length 1, so
  -- cosine similarity and dot product will produce the same results.
  -- Using dot product which can be computed slightly faster.
  --
  -- For the different syntaxes, see https://github.com/pgvector/pgvector
  order by nods_page_section.embedding <#> embedding

  limit match_count;
end;
$$;
```

----------------------------------------

TITLE: Signing In with LinkedIn using Supabase JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to authenticate a user with LinkedIn OAuth using Supabase's `signInWithOAuth` function. It requires the `@supabase/supabase-js` library and a Supabase project URL with an anonymous key. Parameters include the `provider` set to `linkedin_oidc`, returning the user's authentication data upon success.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signInWithLinkedIn() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'linkedin_oidc',
  })
}
```

----------------------------------------

TITLE: Production Supabase Connection Variables (dotenv)
DESCRIPTION: Shows the initial content for the `supabase/.env.production` file, which includes the production Supabase URL and the project's anonymous key. This file contains values specific to the deployed Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#_snippet_4

LANGUAGE: dotenv
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=https://<your-project>.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=<your-project-apikey>
```

----------------------------------------

TITLE: Creating MFA Policy for New Users in PostgreSQL
DESCRIPTION: This SQL snippet creates a restrictive policy to enforce different AAL (Authenticator Assurance Levels) based on user creation date. Users created after 12th December 2022 require 'aal2' for database access, while earlier users can use either 'aal1' or 'aal2'. The policy ensures this is the most restrictive rule applied, overriding other policies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create policy "Policy name."
  on table_name
  as restrictive -- very important!
  to authenticated
  using
    (array[(select auth.jwt()->>'aal')] <@ (
       select
         case
           when created_at >= '2022-12-12T00:00:00Z' then array['aal2']
           else array['aal1', 'aal2']
         end as aal
       from auth.users
       where (select auth.uid()) = id));
```

----------------------------------------

TITLE: Creating Trigger Function for Auditing in PostgreSQL
DESCRIPTION: Defines a trigger function that automatically populates the audit table when data changes occur in the audited tables. It captures inserts, updates, and deletes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create or replace function audit.insert_update_delete_trigger()
    returns trigger
    security definer
    language plpgsql
as $$
declare
    pkey_cols text[] = audit.primary_key_columns(TG_RELID);
    record_jsonb jsonb = to_jsonb(new);
    record_id uuid = audit.to_record_id(TG_RELID, pkey_cols, record_jsonb);
    old_record_jsonb jsonb = to_jsonb(old);
    old_record_id uuid = audit.to_record_id(TG_RELID, pkey_cols, old_record_jsonb);
begin

    insert into audit.record_version(
        record_id,
        old_record_id,
        op,
        table_oid,
        table_schema,
        table_name,
        record,
        old_record
    )
    select
        record_id,
        old_record_id,
        TG_OP,
        TG_RELID,
        TG_TABLE_SCHEMA,
        TG_TABLE_NAME,
        record_jsonb,
        old_record_jsonb;

    return coalesce(new, old);
end;
$$;
```

----------------------------------------

TITLE: Setting Up Row Level Security Policies in Supabase
DESCRIPTION: SQL script to enable Row Level Security on tables and define policies for user access. It allows unauthenticated users to read group data while restricting other actions to authenticated users only.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Secure tables
alter table users enable row level security;
alter table groups enable row level security;
alter table messages enable row level security;

-- User Policies
create policy "Users can read the user email." on users
  for select using (true);

-- Group Policies
create policy "Groups are viewable by everyone." on groups
  for select using (true);

create policy "Authenticated users can create groups." on groups for
  insert to authenticated with check (true);

create policy "The owner can delete a group." on groups for
    delete using ((select auth.uid()) = creator);

-- Message Policies
create policy "Authenticated users can read messages." on messages
  for select to authenticated using (true);

create policy "Authenticated users can create messages." on messages
  for insert to authenticated with check (true);
```

----------------------------------------

TITLE: Creating and Populating Vector Collection
DESCRIPTION: Creates a new vector collection with 3-dimensional vectors and inserts sample vectors with associated metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/google-colab.mdx#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
collection = vx.get_or_create_collection(name="colab_collection", dimension=3)

collection.upsert(
    vectors=[
        (
         "vec0",           # the vector's identifier
         [0.1, 0.2, 0.3],  # the vector. list or np.array
         {"year": 1973}    # associated  metadata
        ),
        (
         "vec1",
         [0.7, 0.8, 0.9],
         {"year": 2012}
        )
    ]
)
```

----------------------------------------

TITLE: Creating Index for RLS Performance
DESCRIPTION: Creates a btree index on the user_id column to improve RLS policy performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
create index userid
on test_table
using btree (user_id);
```

----------------------------------------

TITLE: Analyzing Query Execution Plan in PostgreSQL
DESCRIPTION: Using EXPLAIN command to analyze query execution plan for performance optimization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
explain select * from customers where sign_up_date > 25;
```

----------------------------------------

TITLE: Creating an Authentication Context Provider for React Native with Supabase
DESCRIPTION: This code creates a React Context for handling authentication state across the app. It subscribes to Supabase's auth state changes, manages the user session, and provides a sign-out function that can be accessed throughout the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import React, { useState, useEffect, createContext, PropsWithChildren } from 'react'
import { Session, User } from '@supabase/supabase-js'
import { supabase } from '../config/initSupabase'

type AuthProps = {
  user: User | null
  session: Session | null
  initialized?: boolean
  signOut?: () => void
}

export const AuthContext = createContext<Partial<AuthProps>>({})

// Custom hook to read the context values
export function useAuth() {
  return React.useContext(AuthContext)
}

export const AuthProvider = ({ children }: PropsWithChildren) => {
  const [user, setUser] = useState<User | null>()
  const [session, setSession] = useState<Session | null>(null)
  const [initialized, setInitialized] = useState<boolean>(false)

  useEffect(() => {
    // Listen for changes to authentication state
    const { data } = supabase.auth.onAuthStateChange(async (event, session) => {
      setSession(session)
      setUser(session ? session.user : null)
      setInitialized(true)
    })
    return () => {
      data.subscription.unsubscribe()
    }
  }, [])

  // Log out the user
  const signOut = async () => {
    await supabase.auth.signOut()
  }

  const value = {
    user,
    session,
    initialized,
    signOut,
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}
```

----------------------------------------

TITLE: Implementing Authentication Middleware in TypeScript
DESCRIPTION: TypeScript version of the Next.js middleware for Supabase authentication with type safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'

import type { NextRequest } from 'next/server'
import type { Database } from '@/lib/database.types'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()

  // Create a Supabase client configured to use cookies
  const supabase = createMiddlewareClient<Database>({ req, res })

  // Refresh session if expired - required for Server Components
  await supabase.auth.getSession()

  return res
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
}
```

----------------------------------------

TITLE: Listening to Specific Table Events in JavaScript with Supabase Realtime
DESCRIPTION: Creates a channel to listen for all event types on a specific table ('todos') in the public schema of a Supabase database. The code uses the 'table' parameter to specify which table to monitor.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_25

LANGUAGE: javascript
CODE:
```
const changes = supabase
  .channel('table-db-changes')
  .on(
    'postgres_changes',
    {
      event: '*',
      schema: 'public',
      table: 'todos',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Implementing Telegram Bot Edge Function for Location Updates
DESCRIPTION: Edge Function that processes location updates from a Telegram Bot and inserts them into Supabase database using RPCs. Handles both initial and edited location messages while implementing error handling and authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-04-postgres-realtime-location-sharing-with-maplibre.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { Bot, webhookCallback } from 'https://deno.land/x/grammy@v1.20.3/mod.ts'
import { createClient } from 'jsr:@supabase/supabase-js@2.39.7'
import { Database } from '../_shared/database.types.ts'

const token = Deno.env.get('BOT_TOKEN')
if (!token) throw new Error('BOT_TOKEN is unset')

const supabase = createClient<Database>(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
)

const bot = new Bot(token)
// ...

bot.on('edit:location', async (ctx) => {
  const {
    location,
    from: { id: user_id },
    edit_date,
  } = ctx.update.edited_message!
  if (location) {
    // Insert into db
    const { error } = await supabase.rpc('location_insert', {
      _user_id: user_id,
      _lat: location.latitude,
      _long: location.longitude,
      _timestamp: edit_date,
    })
    if (
      error &&
      error.message !==
        'null value in column "event_id" of relation "locations" violates not-null constraint' &&
      error.message !== 'duplicate key value violates unique constraint "locations_pkey"'
    ) {
      return console.log(`edit:location:insert:error:user:${user_id}: ${error.message}`)
    }
  }
  return
})

const handleUpdate = webhookCallback(bot, 'std/http')

Deno.serve(async (req) => {
  const headers = req.headers
  try {
    const url = new URL(req.url)
    if (url.searchParams.get('secret') !== Deno.env.get('FUNCTION_SECRET')) {
      return new Response('not allowed', { status: 405 })
    }

    return await handleUpdate(req)
  } catch (err) {
    console.log(headers)
    console.error(err)
  }
  return new Response()
})
```

----------------------------------------

TITLE: Auth State Change Listener Implementation
DESCRIPTION: Demonstrates how to listen to authentication state changes using the new stream-based approach.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-21-supabase-flutter-sdk-v1-released.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
supabase.auth.onAuthStateChange.listen((data) {
  final AuthChangeEvent event = data.event;
  final Session? session = data.session;
});
```

----------------------------------------

TITLE: Configuring Main App in Dart with Supabase and Bloc for Flutter Chat
DESCRIPTION: This code sets up the main application structure, initializes Supabase, and provides the ProfilesCubit to the widget tree using BlocProvider.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_17

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:my_chat_app/cubits/profiles/profiles_cubit.dart';
import 'package:my_chat_app/utils/constants.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:my_chat_app/pages/splash_page.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Supabase.initialize(
    // TODO: Replace credentials with your own
    url: 'supabase_url',
    anonKey: 'supabase_anon_key',
    authCallbackUrlHostname: 'login',
  );

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return BlocProvider<ProfilesCubit>(
      create: (context) => ProfilesCubit(),
      child: MaterialApp(
        title: 'SupaChat',
        debugShowCheckedModeBanner: false,
        theme: appTheme,
        home: const SplashPage(),
      ),
    );
  }
}
```

----------------------------------------

TITLE: Supabase Storage: Set Insert Policy
DESCRIPTION: SQL policy that allows authenticated users to insert objects into their own folders within any bucket. Verifies that the folder name matches the user's ID using `storage.folder(name)` and `auth.uid()`.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create policy "User can upload in their own folders (in any buckets)"
on storage.objects
for insert
to authenticated
with check (
    (storage.folder(name))[1] = (select auth.uid())
);
```

----------------------------------------

TITLE: Listening to Broadcast Events on Client Side in JavaScript
DESCRIPTION: This JavaScript code demonstrates how to listen to broadcast events on the client side using the Supabase client. It initializes the Supabase client, sets the authentication token, and subscribes to a channel with a specific topic. The code listens for 'INSERT', 'UPDATE', and 'DELETE' events on the channel and logs the payload to the console.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const gameId = 'id'
await supabase.realtime.setAuth() // Needed for Realtime Authorization
const changes = supabase
  .channel(`topic:${gameId}`, {
    config: { private: true },
  })
  .on('broadcast', { event: 'INSERT' }, (payload) => console.log(payload))
  .on('broadcast', { event: 'UPDATE' }, (payload) => console.log(payload))
  .on('broadcast', { event: 'DELETE' }, (payload) => console.log(payload))
  .subscribe()
```

----------------------------------------

TITLE: Creating Read Access Policy for Public Avatars Subfolder in SQL
DESCRIPTION: This SQL snippet shows how to create a policy that grants read access to a specific subfolder ('public') within the 'avatars' bucket using Postgres Row Level Security.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-30-supabase-storage.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "Read access for public avatars."
on storage.objects for select using (
	bucket_id = 'avatars'
	and (storage.foldername(name))[1] = 'public'
);
```

----------------------------------------

TITLE: PostgreSQL Cache Hit Rate Analysis
DESCRIPTION: Query to analyze cache efficiency by calculating index and table hit rates from PostgreSQL shared buffers, helping identify memory-related performance issues
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
select
  'index hit rate' as name,
  (sum(idx_blks_hit)) / nullif(sum(idx_blks_hit + idx_blks_read), 0) * 100 as ratio
from pg_statio_user_indexes
union all
select
  'table hit rate' as name,
  sum(heap_blks_hit) / nullif(sum(heap_blks_hit) + sum(heap_blks_read), 0) * 100 as ratio
from pg_statio_user_tables;
```

----------------------------------------

TITLE: Fetching Data Server-Side with React Query and Supabase in Next.js
DESCRIPTION: This code demonstrates how to prefetch data on the server using React Query and Supabase in a Next.js server component. It uses the prefetchQuery method to fetch country data and passes it to a client component via HydrationBoundary.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
import { dehydrate, HydrationBoundary, QueryClient } from '@tanstack/react-query'
import { prefetchQuery } from '@supabase-cache-helpers/postgrest-react-query'
import useSupabaseServer from '@/utils/supabase-server'
import { cookies } from 'next/headers'
import Country from '../country'
import { getCountryById } from '@/queries/get-country-by-id'

export default async function CountryPage({ params }: { params: { id: number } }) {
  const queryClient = new QueryClient()
  const cookieStore = cookies()
  const supabase = useSupabaseServer(cookieStore)

  await prefetchQuery(queryClient, getCountryById(supabase, params.id))

  return (
    // Neat! Serialization is now as easy as passing props.
    // HydrationBoundary is a Client Component, so hydration will happen there.
    <HydrationBoundary state={dehydrate(queryClient)}>
      <Country id={params.id} />
    </HydrationBoundary>
  )
}
```

----------------------------------------

TITLE: Creating a Supabase Client with JavaScript
DESCRIPTION: This JavaScript code snippet sets up the Supabase client by using environment variables and injects it into the SvelteKit server event for authentication. It includes safe session retrieval logic by validating the JWT via `getUser`.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
// src/hooks.server.js
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'
import { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit'

export const handle = async ({ event, resolve }) => {
  event.locals.supabase = createSupabaseServerClient({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event,
  })

  /**
   * Unlike `supabase.auth.getSession`, which is unsafe on the server because it
   * doesn't validate the JWT, this function validates the JWT by first calling
   * `getUser` and aborts early if the JWT signature is invalid.
   */
  event.locals.safeGetSession = async () => {
    const {
      data: { user },
      error,
    } = await supabase.auth.getUser()
    if (error) {
      return { session: null, user: null }
    }

    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}
```

----------------------------------------

TITLE: Initializing Supabase Client with Bitbucket OAuth in JavaScript
DESCRIPTION: Create a Supabase client and implement sign-in functionality using Bitbucket OAuth provider. Requires Supabase project URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-bitbucket.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

async function signInWithBitbucket() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'bitbucket',
  })
}
```

----------------------------------------

TITLE: Multipart File Upload to S3 using Upload class in JavaScript
DESCRIPTION: This snippet shows how to perform a multipart upload of a large file to Supabase Storage using the S3 protocol. It utilizes the Upload class from @aws-sdk/lib-storage to split the file into parts and upload them in parallel.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/s3-uploads.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { S3Client } from '@aws-sdk/client-s3'
import { Upload } from '@aws-sdk/lib-storage'

const s3Client = new S3Client({...})

const file = fs.createReadStream('path/to/very-large-file')

const upload = new Upload(s3Client, {
  Bucket: 'bucket-name',
  Key: 'path/to/file',
  ContentType: 'image/jpeg',
  Body: file,
})

await uploader.done()
```

----------------------------------------

TITLE: Signing Out a User Dart
DESCRIPTION: The Dart snippet provides an asynchronous function to sign out a user using the Supabase client library. The function clears the current session data from the client-side. Ensure that Supabase Dart package is installed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_1

LANGUAGE: Dart
CODE:
```
Future<void> signOut() async {\n   await supabase.auth.signOut();\n}
```

----------------------------------------

TITLE: Supabase Database Connection String Format
DESCRIPTION: Example format of a Supabase database connection string using the Session pooler.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_2

LANGUAGE: txt
CODE:
```
postgresql://postgres.[PROJECT-REF]:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres
```

----------------------------------------

TITLE: Protected Route Implementation with Supabase Auth
DESCRIPTION: Implementation of protected routes using Supabase authentication, including server-side data fetching with Row Level Security (RLS).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_30

LANGUAGE: svelte
CODE:
```
<script lang="ts" context="module">
  import { supabaseServerClient, withPageAuth } from '@supabase/auth-helpers-sveltekit'
  import type { Load } from './__types/protected-page'

  export const load: Load = async ({ session }) =>
    withPageAuth(
      {
        redirectTo: '/',
        user: session.user,
      },
      async () => {
        const { data } = await supabaseServerClient(session.accessToken).from('test').select('*')
        return { props: { data, user: session.user } }
      }
    )
</script>

<script>
  export let data
  export let user
</script>

<div>Protected content for {user.email}</div>
<p>server-side fetched data with RLS:</p>
<pre>{JSON.stringify(data, null, 2)}</pre>
<p>user:</p>
<pre>{JSON.stringify(user, null, 2)}</pre>
```

LANGUAGE: typescript
CODE:
```
import { withAuth } from '@supabase/auth-helpers-sveltekit'
import { redirect } from '@sveltejs/kit'
import type { PageLoad } from './$types'

export const load: PageLoad = withAuth(async ({ session, getSupabaseClient }) => {
  if (!session.user) {
    redirect(303, '/')
  }

  const { data: tableData } = await getSupabaseClient().from('test').select('*')
  return { tableData, user: session.user }
})
```

----------------------------------------

TITLE: Setting Production Secrets
DESCRIPTION: Commands for setting secrets in production environment using Supabase CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
supabase secrets set --env-file ./supabase/.env

# You can also set secrets individually using:
supabase secrets set MY_NAME=Chewbacca
```

----------------------------------------

TITLE: Deploying Supabase Function
DESCRIPTION: Deploys the Supabase function to production environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
supabase functions deploy
```

----------------------------------------

TITLE: Deleting and Returning Data in Supabase with TypeScript
DESCRIPTION: Code examples showing how to delete data from a Supabase table with and without returning the deleted records. The newer version adds a .select() method to return the deleted data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
const { data, error } = await supabase
  .from('my_table')
  .delete()
  .eq('id', id)
```

LANGUAGE: typescript
CODE:
```
const { data, error } = await supabase
  .from('my_table')
  .delete()
  .eq('id', id)
  .select()
```

----------------------------------------

TITLE: Setting up and running RLS tests with Supabase in SQL
DESCRIPTION: This SQL script sets up and runs various RLS tests using the Supabase testing framework. Dependencies include the presence of setup scripts such as '000-setup-tests-hooks.sql'. Key operations involve creating test users and profiles, testing role-based permissions for different actions (like updating organizations or viewing posts), and ensuring plan limitations (like post creation limits) are respected. Inputs involve role authentication and test data setup, while outputs include test validations and potential RLS policy violations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
-- Assuming we already have: 000-setup-tests-hooks.sql file we can use tests helpers
begin;
-- Declare total number of tests
select plan(10);

-- Create test users
select tests.create_supabase_user('org_owner', 'owner@test.com');
select tests.create_supabase_user('org_admin', 'admin@test.com');
select tests.create_supabase_user('org_editor', 'editor@test.com');
select tests.create_supabase_user('premium_user', 'premium@test.com');
select tests.create_supabase_user('free_user', 'free@test.com');
select tests.create_supabase_user('scheduler', 'scheduler@test.com');
select tests.create_supabase_user('free_author', 'free_author@test.com');

-- Create profiles for test users
insert into profiles (id, username, full_name)
values
  (tests.get_supabase_uid('org_owner'), 'org_owner', 'Organization Owner'),
  (tests.get_supabase_uid('org_admin'), 'org_admin', 'Organization Admin'),
  (tests.get_supabase_uid('org_editor'), 'org_editor', 'Organization Editor'),
  (tests.get_supabase_uid('premium_user'), 'premium_user', 'Premium User'),
  (tests.get_supabase_uid('free_user'), 'free_user', 'Free User'),
  (tests.get_supabase_uid('scheduler'), 'scheduler', 'Scheduler User'),
  (tests.get_supabase_uid('free_author'), 'free_author', 'Free Author');

-- First authenticate as service role to bypass RLS for initial setup
select tests.authenticate_as_service_role();

-- Create test organizations and setup data
with new_org as (
  insert into organizations (name, slug, plan_type, max_posts)
  values
    ('Test Org', 'test-org', 'pro', 100),
    ('Premium Org', 'premium-org', 'enterprise', 1000),
    ('Schedule Org', 'schedule-org', 'pro', 100),
    ('Free Org', 'free-org', 'free', 2)
  returning id, slug
),
-- Setup members and posts
member_setup as (
  insert into org_members (org_id, user_id, role)
  select
    org.id,
    user_id,
    role
  from new_org org cross join (
    values
      (tests.get_supabase_uid('org_owner'), 'owner'),
      (tests.get_supabase_uid('org_admin'), 'admin'),
      (tests.get_supabase_uid('org_editor'), 'editor'),
      (tests.get_supabase_uid('premium_user'), 'viewer'),
      (tests.get_supabase_uid('scheduler'), 'editor'),
      (tests.get_supabase_uid('free_author'), 'editor')
  ) as members(user_id, role)
  where org.slug = 'test-org'
     or (org.slug = 'premium-org' and role = 'viewer')
     or (org.slug = 'schedule-org' and role = 'editor')
     or (org.slug = 'free-org' and role = 'editor')
)
-- Setup initial posts
insert into posts (title, content, org_id, author_id, status, is_premium, scheduled_for)
select
  title,
  content,
  org.id,
  author_id,
  status,
  is_premium,
  scheduled_for
from new_org org cross join (
  values
    ('Premium Post', 'Premium content', tests.get_supabase_uid('premium_user'), 'published', true, null),
    ('Free Post', 'Free content', tests.get_supabase_uid('premium_user'), 'published', false, null),
    ('Future Post', 'Future content', tests.get_supabase_uid('scheduler'), 'published', false, '2024-01-02 12:00:00+00'::timestamptz)
) as posts(title, content, author_id, status, is_premium, scheduled_for)
where org.slug in ('premium-org', 'schedule-org');

-- Test owner privileges
select tests.authenticate_as('org_owner');
select lives_ok(
  $$
    update organizations
    set name = 'Updated Org'
    where id = (select id from organizations limit 1)
  $$,
  'Owner can update organization'
);

-- Test admin privileges
select tests.authenticate_as('org_admin');
select results_eq(
    $$select count(*) from org_members$$,
    ARRAY[6::bigint],
    'Admin can view all members'
);

-- Test editor restrictions
select tests.authenticate_as('org_editor');
select throws_ok(
  $$
    insert into org_members (org_id, user_id, role)
    values (
      (select id from organizations limit 1),
      (select tests.get_supabase_uid('org_editor')),
      'viewer'
    )
  $$,
  '42501',
  'new row violates row-level security policy for table "org_members"',
  'Editor cannot manage members'
);

-- Premium Content Access Tests
select tests.authenticate_as('premium_user');
select results_eq(
    $$select count(*) from posts where org_id = (select id from organizations where slug = 'premium-org')$$,
    ARRAY[3::bigint],
    'Premium user can see all posts'
);

select tests.clear_authentication();
select results_eq(
    $$select count(*) from posts where org_id = (select id from organizations where slug = 'premium-org')$$,
    ARRAY[2::bigint],
    'Anonymous users can only see free posts'
);

-- Time-Based Publishing Tests
select tests.authenticate_as('scheduler');
select tests.freeze_time('2024-01-01 12:00:00+00'::timestamptz);

select results_eq(
    $$select count(*) from posts where scheduled_for > now() and org_id = (select id from organizations where slug = 'schedule-org')$$,
    ARRAY[1::bigint],
    'Can see scheduled posts'
);

select tests.freeze_time('2024-01-02 13:00:00+00'::timestamptz);

select results_eq(
    $$select count(*) from posts where scheduled_for < now() and org_id = (select id from organizations where slug = 'schedule-org')$$,
    ARRAY[1::bigint],
    'Can see posts after schedule time'
);

select tests.unfreeze_time();

-- Plan Limit Tests
select tests.authenticate_as('free_author');

select lives_ok(
  $$
    insert into posts (title, content, org_id, author_id, status)
    select 'Post 1', 'Content 1', id, auth.uid(), 'draft'
    from organizations where slug = 'free-org' limit 1
  $$,
  'First post creates successfully'
);

select lives_ok(
  $$
    insert into posts (title, content, org_id, author_id, status)
    select 'Post 2', 'Content 2', id, auth.uid., 'draft'
    from organizations where slug = 'free-org' limit 1
  $$,
  'Second post creates successfully'
);

select throws_ok(
  $$
    insert into posts (title, content, org_id, author_id, status)
    select 'Post 3', 'Content 3', id, auth.uid., 'draft'
    from organizations where slug = 'free-org' limit 1
  $$,
  '42501',
  'new row violates row-level security policy for table "posts"',
  'Cannot exceed free plan post limit'
);

select * from finish();
rollback;
```

----------------------------------------

TITLE: Configuring Supabase Client for Server-Side with Cookies
DESCRIPTION: Configuration code to set up Supabase client to use cookies instead of localStorage for session management when running on the server. This allows Supabase to work in server environments like Server Components and Server Actions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    flowType: 'pkce',
    autoRefreshToken: false,
    detectSessionInUrl: false,
    persistSession: true,
    storage: {
      getItem: async (key: string) => {
        cookieStore.get(key)
      },
      setItem: async (key: string, value: string) => {
        cookieStore.set(key, value)
      },
      removeItem: async (key: string) => {
        cookieStore.remove(key)
      },
    },
  },
})
```

----------------------------------------

TITLE: Handling Authentication Confirmation in Next.js
DESCRIPTION: This snippet implements a server-side route handler in Next.js for auth confirmation via email link using Supabase capabilities. It interacts with Supabase to verify OTP tokens from confirmation URLs and redirects upon success or failure of verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
import { type EmailOtpType } from '@supabase/supabase-js'
import { type NextRequest } from 'next/server'

import { createClient } from '@/utils/supabase/server'
import { redirect } from 'next/navigation'

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const token_hash = searchParams.get('token_hash')
  const type = searchParams.get('type') as EmailOtpType | null
  const next = searchParams.get('next') ?? '/'

  if (token_hash && type) {
    const supabase = await createClient()

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })
    if (!error) {
      // redirect user to specified redirect URL or root of app
      redirect(next)
    }
  }

  // redirect the user to an error page with some instructions
  redirect('/error')
}
```

----------------------------------------

TITLE: Implementing Avatar Upload Component with Supabase Storage in React TypeScript
DESCRIPTION: This component handles avatar image upload and display functionality using Supabase Storage. It downloads existing avatars and allows users to upload new ones, storing them in the 'avatars' bucket. The component includes state management for tracking upload status and rendering appropriate UI elements.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_11

LANGUAGE: tsx
CODE:
```
import { useEffect, useState } from 'react'
import { supabaseClient } from '../utility/supabaseClient'

type TAvatarProps = {
  url?: string
  size: number
  onUpload: (filePath: string) => void
}

export default function Avatar({ url, size, onUpload }: TAvatarProps) {
  const [avatarUrl, setAvatarUrl] = useState('')
  const [uploading, setUploading] = useState(false)

  useEffect(() => {
    if (url) downloadImage(url)
  }, [url])

  async function downloadImage(path: string) {
    try {
      const { data, error } = await supabaseClient.storage.from('avatars').download(path)
      if (error) {
        throw error
      }
      const url = URL.createObjectURL(data)
      setAvatarUrl(url)
    } catch (error: any) {
      console.log('Error downloading image: ', error?.message)
    }
  }

  async function uploadAvatar(event: React.ChangeEvent<HTMLInputElement>) {
    try {
      setUploading(true)

      if (!event.target.files || event.target.files.length === 0) {
        throw new Error('You must select an image to upload.')
      }

      const file = event.target.files[0]
      const fileExt = file.name.split('.').pop()
      const fileName = `${Math.random()}.${fileExt}`
      const filePath = `${fileName}`

      const { error: uploadError } = await supabaseClient.storage
        .from('avatars')
        .upload(filePath, file)

      if (uploadError) {
        throw uploadError
      }
      onUpload(filePath)
    } catch (error: any) {
      alert(error.message)
    } finally {
      setUploading(false)
    }
  }

  return (
    <div>
      {avatarUrl ? (
        <img
          src={avatarUrl}
          alt="Avatar"
          className="avatar image"
          style={{ height: size, width: size }}
        />
      ) : (
        <div className="avatar no-image" style={{ height: size, width: size }} />
      )}
      <div style={{ width: size }}>
        <label className="button primary block" htmlFor="single">
          {uploading ? 'Uploading ...' : 'Upload'}
        </label>
        <input
          style={{
            visibility: 'hidden',
            position: 'absolute',
          }}
          type="file"
          id="single"
          name="avatar_url"
          accept="image/*"
          onChange={uploadAvatar}
          disabled={uploading}
        />
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing Trigger for New User Profile Creation in SQL
DESCRIPTION: Creates a function and trigger to automatically generate a profile entry when a new user signs up via Supabase Auth. Extracts full name and avatar URL from user metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/user_management_quickstart_sql_template.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger
set search_path = ''
as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
```

----------------------------------------

TITLE: Analyzing Slowest SQL Queries
DESCRIPTION: SQL query to identify and analyze the slowest queries by execution time with detailed performance metrics
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select
  auth.rolname,
  statements.query,
  statements.calls,
  statements.total_exec_time + statements.total_plan_time as total_time,
  statements.min_exec_time + statements.min_plan_time as min_time,
  statements.max_exec_time + statements.max_plan_time as max_time,
  statements.mean_exec_time + statements.mean_plan_time as mean_time,
  statements.rows / statements.calls as avg_rows
from
  pg_stat_statements as statements
  inner join pg_authid as auth on statements.userid = auth.oid
order by max_time desc
limit 100;
```

----------------------------------------

TITLE: Generate migration file from schema diff (Bash)
DESCRIPTION: Use the Supabase CLI to compare the declared schema files (`supabase/schemas`) against the current database state and generate a versioned migration file in the `supabase/migrations` directory. The `-f` flag names the generated file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
supabase db diff -f create_employees_table
```

----------------------------------------

TITLE: Creating User Account Management Component in Ionic Vue
DESCRIPTION: Vue component for user profile management that allows viewing and updating profile details, fetching profile data from Supabase, and handling user sign-out. Includes form handling and session management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_5

LANGUAGE: html
CODE:
```
<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-title>Account</ion-title>
      </ion-toolbar>
    </ion-header>

    <ion-content>
      <form @submit.prevent="updateProfile">
        <ion-item>
          <ion-label>
            <p>Email</p>
            <p>{{ user?.email }}</p>
          </ion-label>
        </ion-item>

        <ion-item>
          <ion-label position="stacked">Name</ion-label>
          <ion-input type="text" v-model="profile.username" />
        </ion-item>

        <ion-item>
          <ion-label position="stacked">Website</ion-label>
          <ion-input type="url" v-model="profile.website" />
        </ion-item>

        <div class="ion-text-center">
          <ion-button type="submit" fill="clear">Update Profile</ion-button>
        </div>
      </form>

      <div class="ion-text-center">
        <ion-button fill="clear" @click="signOut">Log Out</ion-button>
      </div>
    </ion-content>
  </ion-page>
</template>

<script lang="ts">
  import {
    IonPage,
    IonHeader,
    IonToolbar,
    IonTitle,
    IonContent,
    IonItem,
    IonLabel,
    IonInput,
    IonButton,
    toastController,
    loadingController,
  } from '@ionic/vue'
  import { defineComponent, onMounted, ref } from 'vue'
  import { useRouter } from 'vue-router'
  import { supabase } from '@/supabase'
  import type { User } from '@supabase/supabase-js'

  export default defineComponent({
    name: 'AccountPage',
    components: {
      IonPage,
      IonHeader,
      IonToolbar,
      IonTitle,
      IonContent,
      IonItem,
      IonLabel,
      IonInput,
      IonButton,
    },
    setup() {
      const router = useRouter()
      const user = ref<User | null>(null)

      const profile = ref({
        username: '',
        website: '',
        avatar_url: '',
      })

      const getProfile = async () => {
        const loader = await loadingController.create()
        const toast = await toastController.create({ duration: 5000 })
        await loader.present()

        try {
          const { data, error, status } = await supabase
            .from('profiles')
            .select('username, website, avatar_url')
            .eq('id', user.value?.id)
            .single()

          if (error && status !== 406) throw error

          if (data) {
            profile.value = {
              username: data.username,
              website: data.website,
              avatar_url: data.avatar_url,
            }
          }
        } catch (error: any) {
          toast.message = error.message
          await toast.present()
        } finally {
          await loader.dismiss()
        }
      }

      const updateProfile = async () => {
        const loader = await loadingController.create()
        const toast = await toastController.create({ duration: 5000 })
        await loader.present()

        try {
          const updates = {
            id: user.value?.id,
            ...profile.value,
            updated_at: new Date(),
          }

          const { error } = await supabase.from('profiles').upsert(updates, {
            returning: 'minimal',
          })

          if (error) throw error
        } catch (error: any) {
          toast.message = error.message
          await toast.present()
        } finally {
          await loader.dismiss()
        }
      }

      const signOut = async () => {
        const loader = await loadingController.create()
        const toast = await toastController.create({ duration: 5000 })
        await loader.present()

        try {
          const { error } = await supabase.auth.signOut()
          if (error) throw error
          router.push('/')
        } catch (error: any) {
          toast.message = error.message
          await toast.present()
        } finally {
          await loader.dismiss()
        }
      }

      onMounted(async () => {
        const loader = await loadingController.create()
        await loader.present()

        const { data } = await supabase.auth.getSession()
        user.value = data.session?.user ?? null

        if (!user.value) {
          router.push('/')
        } else {
          await getProfile()
        }

        await loader.dismiss()
      })

      return {
        user,
        profile,
        updateProfile,
        signOut,
      }
    },
  })
</script>
```

----------------------------------------

TITLE: Setting Up Notes Table in SQL
DESCRIPTION: SQL script to create a notes table with row-level security and appropriate permissions for authenticated users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_15

LANGUAGE: sql
CODE:
```
-- Run this SQL against your database to create a `notes` table.

create table notes (
  id bigint primary key generated always as identity,
  created_at timestamp with time zone not null default now(),
  user_id uuid references auth.users on delete cascade not null default auth.uid(),
  note text not null
);

alter table notes enable row level security;

revoke all on table notes from authenticated;
revoke all on table notes from anon;

grant all (note) on table notes to authenticated;
grant select (id) on table notes to authenticated;
grant delete on table notes to authenticated;

create policy "Users can access and modify their own notes"
on notes
for all
to authenticated
using ((select auth.uid()) = user_id);
```

----------------------------------------

TITLE: Implementing MFA Enrollment Page in Flutter with QR Code
DESCRIPTION: Creates an MFA enrollment page that generates and displays a QR code for authenticator app setup. Handles TOTP verification and includes copy-to-clipboard functionality for manual secret entry.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_8

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:go_router/go_router.dart';
import 'package:mfa_app/main.dart';
import 'package:mfa_app/pages/auth/register_page.dart';
import 'package:mfa_app/pages/home_page.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class MFAEnrollPage extends StatefulWidget {
  static const route = '/mfa/enroll';
  const MFAEnrollPage({super.key});

  @override
  State<MFAEnrollPage> createState() => _MFAEnrollPageState();
}

class _MFAEnrollPageState extends State<MFAEnrollPage> {
  final _enrollFuture = supabase.auth.mfa.enroll();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Setup MFA'),
        actions: [
          TextButton(
            onPressed: () {
              supabase.auth.signOut();
              context.go(RegisterPage.route);
            },
            child: Text(
              'Logout',
              style: TextStyle(color: Theme.of(context).colorScheme.onPrimary),
            ),
          ),
        ],
      ),
      body: FutureBuilder(
        future: _enrollFuture,
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Center(child: Text(snapshot.error.toString()));
          }
          if (!snapshot.hasData) {
            return const Center(child: CircularProgressIndicator());
          }

          final response = snapshot.data!;
          final qrCodeUrl = response.totp.qrCode;
          final secret = response.totp.secret;
          final factorId = response.id;

          return ListView(
            padding: const EdgeInsets.symmetric(
              horizontal: 20,
              vertical: 24,
            ),
            children: [
              const Text(
                'Open your authentication app and add this app via QR code or by pasting the code below.',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 16),
              SvgPicture.string(
                qrCodeUrl,
                width: 150,
                height: 150,
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: Text(
                      secret,
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 18,
                      ),
                    ),
                  ),
                  IconButton(
                    onPressed: () {
                      Clipboard.setData(ClipboardData(text: secret));
                      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
                          content: Text('Copied to your clip board')));
                    },
                    icon: const Icon(Icons.copy),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              const Text('Enter the code shown in your authentication app.'),
              const SizedBox(height: 16),
              TextFormField(
                decoration: const InputDecoration(
                  hintText: '000000',
                ),
                style: const TextStyle(fontSize: 24),
                textAlign: TextAlign.center,
                keyboardType: TextInputType.number,
                onChanged: (value) async {
                  if (value.length != 6) return;

                  try {
                    final challenge =
                        await supabase.auth.mfa.challenge(factorId: factorId);
                    await supabase.auth.mfa.verify(
                      factorId: factorId,
                      challengeId: challenge.id,
                      code: value,
                    );
                    await supabase.auth.refreshSession();
                    if (mounted) {
                      context.go(HomePage.route);
                    }
                  } on AuthException catch (error) {
                    ScaffoldMessenger.of(context)
                        .showSnackBar(SnackBar(content: Text(error.message)));
                  } catch (error) {
                    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
                        content: Text('Unexpected error occurred')));
                  }
                },
              ),
            ],
          );
        },
      ),
    );
  }
}
```

----------------------------------------

TITLE: Creating Tables for Many-to-Many Relationships in PostgreSQL
DESCRIPTION: SQL commands to create tables representing users, teams, and a many-to-many joining table for team members.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
create table users (
  "id" serial primary key,
  "name" text
);

create table teams (
  "id" serial primary key,
  "team_name" text
);

create table members (
  "user_id" int references users,
  "team_id" int references teams,
  primary key (user_id, team_id)
);
```

----------------------------------------

TITLE: Signing a JWT using jsonwebtoken library in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to sign a JWT using the `jsonwebtoken` library. It uses the `jwt.sign()` method to create a signed token with a payload containing the user's name and a secret key (`some-secret`). The library must be installed as a dependency to use this code.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// from https://replit.com/@awalias/jsonwebtokens#index.js
let token = jwt.sign({ name: 'Sam Vimes' }, 'some-secret')
```

----------------------------------------

TITLE: Request Handler with Background Task in TypeScript
DESCRIPTION: Shows how to initiate a background task within a request handler using EdgeRuntime.waitUntil for non-blocking operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/background-tasks.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
async function fetchAndLog(url: string) {
  const response = await fetch(url)
  console.log(response)
}

Deno.serve(async (req) => {
  // this will not block the request,
  // instead it will run in the background
  EdgeRuntime.waitUntil(fetchAndLog('https://httpbin.org/json'))

  return new Response('ok')
})
```

----------------------------------------

TITLE: Updating Route Handlers
DESCRIPTION: Example of updating a Next.js API route handler to use the new server client utility function instead of the deprecated createRouteHandlerClient.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
// replace
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';

// with
import { createClient } from '@/utils/supabase/server';

export async function POST(request: Request) {
	// replace
	const supabase = createRouteHandlerClient<Database>({
    cookies: () => cookieStore,
  });

  // with
  const supabase = createClient();

  return...
}
```

----------------------------------------

TITLE: Injecting TypeScript Types into Supabase Client
DESCRIPTION: Import the generated types and inject them into the Supabase client for type safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { Database } from './database.types'
// [...]

const supabase = createClient<Database>(
  process.env.EXPO_PUBLIC_SUPABASE_URL,
  process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY
)

// [...]
```

----------------------------------------

TITLE: Implementing SvelteKit Layout Component with Auth State Change Listener
DESCRIPTION: Creates a layout component that provides the application container and sets up a listener for authentication state changes to keep the session in sync across page transitions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_8

LANGUAGE: svelte
CODE:
```
<!-- src/routes/+layout.svelte -->
<script lang="ts">
	import '../styles.css'
	import { invalidate } from '$app/navigation'
	import { onMount } from 'svelte'

	export let data

	let { supabase, session } = data
	$: ({ supabase, session } = data)

	onMount(() => {
		const { data } = supabase.auth.onAuthStateChange((event, newSession) => {
			if (newSession?.expires_at !== session?.expires_at) {
				invalidate('supabase:auth')
			}
		})

		return () => data.subscription.unsubscribe()
	})
</script>

<svelte:head>
	<title>User Management</title>
</svelte:head>

<div class="container" style="padding: 50px 0 100px 0">
	<slot />
</div>
```

----------------------------------------

TITLE: Generating Embeddings with Supabase.ai API in Edge Function
DESCRIPTION: This example demonstrates how to use the built-in Supabase.ai API to generate embeddings. It creates a Deno server that processes incoming requests, extracts text from query parameters, and uses the 'gte-small' model to generate embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/edge-functions.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const model = new Supabase.ai.Session('gte-small');

Deno.serve(async (req: Request) => {
	const params = new URL(req.url).searchParams;
	const input = params.get('text');
	const output = await model.run(input, { mean_pool: true, normalize: true });
	return new Response(
		JSON.stringify(
			output,
		),
		{
			headers: {
				'Content-Type': 'application/json',
				'Connection': 'keep-alive',
			},
		},
	);
});
```

----------------------------------------

TITLE: Calling a Stored Function using Supabase JavaScript Client
DESCRIPTION: This JavaScript code shows how to call the previously created stored function using the Supabase client's rpc method. It passes parameters to the function and includes promise handling for both successful responses and errors.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/certain-operations-are-too-complex-to-perform-directly-using-the-client-libraries-8JaphH.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
supabase.rpc("get_my_complex_query", { parameter: 1 })
  .then(response => {
    // Handle the response
  })
  .catch(error => {
    // Handle errors
  });
```

----------------------------------------

TITLE: Export Postgres Database using pg_dump
DESCRIPTION: This command exports a Postgres database to a file (dump.sql) using pg_dump. The command includes options to clean existing objects, handle identifier quoting, exclude ownership information and privileges, and connects to the database using host, user, and database credentials. The output is redirected to a dump file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/postgres.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
"pg_dump --clean --if-exists --quote-all-identifiers \
-h $HOST -U $USER -d $DATABASE \
--no-owner --no-privileges > dump.sql"
```

----------------------------------------

TITLE: Deploying Supabase Functions with GitHub Actions
DESCRIPTION: GitHub Actions workflow configuration for automatically deploying Supabase Edge Functions when pushing to or merging into the main branch. Requires SUPABASE_ACCESS_TOKEN secret and project ID configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/README.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
name: Deploy Function

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      PROJECT_ID: your-project-id

    steps:
      - uses: actions/checkout@v3

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase functions deploy --project-ref $PROJECT_ID
```

----------------------------------------

TITLE: Creating Client-Side Layout Load Function with Supabase
DESCRIPTION: Sets up a client-side layout load function that creates the appropriate Supabase client (browser or server) and ensures session data is available throughout the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
// src/routes/+layout.ts
import { createBrowserClient, createServerClient, isBrowser } from '@supabase/ssr'
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'
import type { LayoutLoad } from './$types'

export const load: LayoutLoad = async ({ fetch, data, depends }) => {
  depends('supabase:auth')

  const supabase = isBrowser()
    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
      })
    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll() {
            return data.cookies
          },
        },
      })

  /**
   * It's fine to use `getSession` here, because on the client, `getSession` is
   * safe, and on the server, it reads `session` from the `LayoutData`, which
   * safely checked the session using `safeGetSession`.
   */
  const {
    data: { session },
  } = await supabase.auth.getSession()

  return { supabase, session }
}
```

----------------------------------------

TITLE: Authentication Component Implementation
DESCRIPTION: Vue component for handling user authentication with magic link login functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_3

LANGUAGE: vue
CODE:
```
<script setup>
const supabase = useSupabaseClient()

const loading = ref(false)
const email = ref('')

const handleLogin = async () => {
  try {
    loading.value = true
    const { error } = await supabase.auth.signInWithOtp({ email: email.value })
    if (error) throw error
    alert('Check your email for the login link!')
  } catch (error) {
    alert(error.error_description || error.message)
  } finally {
    loading.value = false
  }
}
</script>

<template>
  <form class="row flex-center flex" @submit.prevent="handleLogin">
    <div class="col-6 form-widget">
      <h1 class="header">Supabase + Nuxt 3</h1>
      <p class="description">Sign in via magic link with your email below</p>
      <div>
        <input class="inputField" type="email" placeholder="Your email" v-model="email" />
      </div>
      <div>
        <input
          type="submit"
          class="button block"
          :value="loading ? 'Loading' : 'Send magic link'"
          :disabled="loading"
        />
      </div>
    </div>
  </form>
</template>
```

----------------------------------------

TITLE: Querying dead rows count in PostgreSQL tables
DESCRIPTION: This SQL query shows the number of dead tuples in a specific table, which helps identify tables that might need vacuum maintenance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- number of dead rows
SELECT
	n_dead_tup
FROM
	pg_stat_user_tables
WHERE
	relname = 'mytable';
```

----------------------------------------

TITLE: Signing in with Magic Link using Swift
DESCRIPTION: Explains signing in with a Magic Link in Swift, using Supabase's sign-in feature. Inputs: user email, redirect URL, and an option to prevent automatic user sign-up.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_3

LANGUAGE: Swift
CODE:
```
try await supabase.auth.signInWithOTP(
  email: "valid.email@supabase.io",
  redirectTo: URL(string: "https://example.com/welcome"),
  // set this to false if you do not want the user to be automatically signed up
  shouldCreateUser: false
)
```

----------------------------------------

TITLE: Querying Nested JSON Data using Postgres Operators
DESCRIPTION: This SQL snippet demonstrates querying specific values from a JSONB column (`metadata`) in the `books` table using Postgres JSON operators. It selects `title`, extracts `description` as text (`->>`), and extracts `price`, `low_age`, and `high_age` as jsonb (`->`), including accessing array elements.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#_snippet_1

LANGUAGE: SQL
CODE:
```
select
  title,
  metadata ->> 'description' as description, -- returned as text
  metadata -> 'price' as price,
  metadata -> 'ages' -> 0 as low_age,
  metadata -> 'ages' -> 1 as high_age
from books;
```

----------------------------------------

TITLE: Implementing Login Endpoint with PKCE in Next.js
DESCRIPTION: Server-side implementation of the login endpoint that initiates OTP sign-in and handles redirect. Uses Supabase client to manage authentication process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
// api/auth/login
import { NextApiRequest, NextApiResponse } from 'next'
import { createServerSupabaseClient } from '@supabase/auth-helpers-nextjs'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Create the Supabase Client
  const supabase = createServerSupabaseClient(
    { req, res },
    {
      supabaseUrl: process.env.SUPABASE_URL,
      supabaseKey: process.env.SUPABASE_ANON_KEY,
    }
  )

  // Start sign in with one-time password
  const { error } = await supabase.auth.signInWithOtp({
    email: 'foo@example.com',
    options: {
      emailRedirectTo: 'http://localhost:3000/api/auth/callback',
    },
  })

  if (error) {
    res.json(JSON.stringify(error))
  }

  res.redirect('/')
}
```

----------------------------------------

TITLE: GitHub Action for Updating Supabase Types
DESCRIPTION: Defines a GitHub Action workflow to automatically update Supabase types on a schedule.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_14

LANGUAGE: yaml
CODE:
```
name: Update database types

on:
  schedule:
    # sets the action to run daily. You can modify this to run the action more or less frequently
    - cron: '0 0 * * *'

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      PROJECT_REF: <your-project-id>
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm run update-types
      - name: check for file changes
        id: git_status
        run: |
          echo "status=$(git status -s)" >> $GITHUB_OUTPUT
      - name: Commit files
        if: ${{contains(steps.git_status.outputs.status, ' ')}}
        run: |
          git add database.types.ts
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Update database types" -a
      - name: Push changes
        if: ${{contains(steps.git_status.outputs.status, ' ')}}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
```

----------------------------------------

TITLE: Next.js Middleware Configuration in JavaScript
DESCRIPTION: JavaScript middleware file for Next.js that intercepts and processes requests to handle authentication session updates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_7

LANGUAGE: jsx
CODE:
```
import { updateSession } from '@/utils/supabase/middleware'

export async function middleware(request) {
  // update user's auth session
  return await updateSession(request)
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)'
  ],
}
```

----------------------------------------

TITLE: Connecting to Supabase PostgreSQL using PSQL with SSL verification
DESCRIPTION: This command connects to a Supabase PostgreSQL database using SSL encryption for security. It specifies the SSL mode as 'verify-full', references the downloaded SSL root certificate, and includes the connection parameters for the pooled connection with session mode.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/psql.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
psql "sslmode=verify-full sslrootcert=/path/to/prod-supabase.cer host=[CLOUD_PROVIDER]-0-[REGION].pooler.supabase.com dbname=postgres user=postgres.[PROJECT_REF]"
```

----------------------------------------

TITLE: Update Trigger Function for User Changes
DESCRIPTION: PostgreSQL function to handle user updates by synchronizing changes from auth.users to the profiles table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create function public.update_user()
returns trigger
language plpgsql
security definer set search_path = ''
as
$$
begin
  -- Update the user's data in the 'profiles' table
  update public.profiles
  set email = new.email     -- Update the 'email' field
  where id = new.id;        -- Match the 'id' field with the new record

  return new;  -- Return the new record
end;
$$;
```

----------------------------------------

TITLE: Listening to Multiple Changes in JavaScript with Supabase Realtime
DESCRIPTION: Creates a channel that listens to different events on different tables simultaneously. The example shows monitoring all events on the 'messages' table and only INSERT events on the 'users' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_30

LANGUAGE: javascript
CODE:
```
const channel = supabase
  .channel('db-changes')
  .on(
    'postgres_changes',
    {
      event: '*',
      schema: 'public',
      table: 'messages',
    },
    (payload) => console.log(payload)
  )
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'users',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Setting Secrets for Deployed Supabase Project
DESCRIPTION: Command to set environment variables as secrets in the deployed Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
supabase secrets set --env-file supabase/functions/.env
```

----------------------------------------

TITLE: Running Supabase Functions Locally for OG Image Generation
DESCRIPTION: Commands to start Supabase locally and serve the lwx-og function for development. Uses environment variables from a local file and disables JWT verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/supabase/functions/lwx-og/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase start
supabase functions serve lwx-og --no-verify-jwt --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Handling List Realtime Updates in Angular Board Component
DESCRIPTION: This code block handles realtime updates for list data. It processes INSERT, UPDATE, and DELETE events to maintain synchronized lists data across all connected clients, completing the realtime functionality of the Trello clone.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_31

LANGUAGE: TypeScript
CODE:
```
else if (update.table == 'lists') {
  if (event === 'INSERT') {
    this.lists.push(record);
    this.listCards[record.id] = [];
  } else if (event === 'UPDATE') {
    this.lists.filter((list: any) => list.id === record.id)[0] = record;

    const newArr = [];

    for (let list of this.lists) {
      if (list.id == record.id) {
        list = record;
      }
      newArr.push(list);
    }
    this.lists = newArr;
  } else if (event === 'DELETE') {
    this.lists = this.lists.filter((list: any) => list.id !== record.id);
  }
}
```

----------------------------------------

TITLE: Querying Vectors with Filtering in PostgreSQL
DESCRIPTION: SQL query example for searching vectors with filtering. This query may return fewer than the requested number of rows due to index limitations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgvector.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
SELECT * FROM items WHERE category_id = 123 ORDER BY embedding <-> '[3,1,2]' LIMIT 5;
```

----------------------------------------

TITLE: Syncing Database Schema
DESCRIPTION: Command to push local database schema changes to the remote Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
SUPABASE_ENV=production npx supabase@latest db push
```

----------------------------------------

TITLE: Email Notification System for Failed Password Attempts
DESCRIPTION: SQL implementation for tracking login attempts and sending email notifications when suspicious activity is detected.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/password-verification-hook.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create table public.password_sign_in_attempts (
  user_id uuid not null,
  attempt_id uuid not null,
  last_attempt_at timestamp not null default now(),
  attempt_successful boolean not null,
  primary key (user_id, attempt_id)
);
```

LANGUAGE: sql
CODE:
```
create or replace function public.hook_notify_user_on_failed_attempts(event jsonb)
returns jsonb
language plpgsql
as $$
  declare
    user_id uuid;
    server_token text;
    user_email_address text;
    email_body jsonb;
    response_id int;
    http_code int;
    error_message jsonb;
    attempt_count int;
    max_attempts int := 5;
  begin
    user_id := (event->>'user_id')::uuid;

    insert into public.password_sign_in_attempts (user_id, attempt_id, last_attempt_at, attempt_successful)
    values (user_id, (event->>'attempt_id')::uuid, now(), (event->>'valid')::boolean)
    on conflict (user_id, attempt_id)
    do update set last_attempt_at = now(), attempt_successful = (event->>'valid')::boolean;

    select count(*), u.email into attempt_count, user_email_address
    from public.password_sign_in_attempts a
    join auth.users u on a.user_id = u.id
    where a.user_id = user_id and attempt_successful = false and last_attempt_at > (now() - interval '1 day');

    if attempt_count >= max_attempts then
      select decrypted_secret into server_token from vault.decrypted_secrets where name = 'my_api_key_name';

      email_body := format('{
        "from": "yoursenderemail@example.com",
        "to": "%s",
        "subject": "Security Alert: Repeated Login Attempts Detected",
        "textbody": "We have detected repeated login attempts for your account. If this was not you, please secure your account.",
        "htmlbody": "<html><body><strong>Security Alert:</strong> We have detected repeated login attempts for your account. If this was not you, please secure your account.</body></html>",
        "messagestream": "outbound"
      }', user_email_address)::jsonb;

      select id into response_id from net.http_post(
        'https://api.youremailprovider.com/email',
        email_body,
        'application/json',
        array['Accept: application/json', 'X-Postmark-Server-Token: ' || server_token]
      );

      select status_code, content into http_code, error_message from net._http_response where id = response_id;

      if http_code is null or (http_code < 200 or http_code >= 300) then
        return jsonb_build_object(
          'error', jsonb_build_object(
            'http_code', coalesce(http_code, 0),
            'message', coalesce(error_message ->> 'message', 'error sending email')
          )
        );
      end if;
    end if;

    return jsonb_build_object('decision', 'continue');
  end;
$$;
```

----------------------------------------

TITLE: Starting Supabase Stack
DESCRIPTION: Command to start the local Supabase stack
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
supabase start
```

----------------------------------------

TITLE: Sample SQL Query for Books with Filtering, Ordering, and Pagination
DESCRIPTION: This SQL query selects the title and description from a books table, filters for descriptions containing 'cheese', orders results by title in descending order, and implements pagination with a limit of 5 records starting from offset 10.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/sql-to-rest.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select
  title,
  description
from
  books
where
  description ilike '%cheese%'
order by
  title desc
limit
  5
offset
  10
```

----------------------------------------

TITLE: Installing Supabase Dependencies
DESCRIPTION: Command to install Supabase client and required dependencies for React Native implementation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cd my-app && npx expo install @supabase/supabase-js @react-native-async-storage/async-storage @rneui/themed react-native-url-polyfill
```

----------------------------------------

TITLE: Starting Local Development Stack (Bash)
DESCRIPTION: Provides the bash commands required to start the local Supabase development stack and the Next.js frontend application. This sets up the necessary services and the web server for testing locally.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npx supabase start
npm run dev
```

----------------------------------------

TITLE: Restrict Application Access in PLPGSQL
DESCRIPTION: This function restricts application access based on authentication methods and the user's email claim. It is implemented in PLPGSQL and checks if the user belongs to allowed domains or has specific allowed emails to grant access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_4

LANGUAGE: plpgsql
CODE:
```
create or replace function public.restrict_application_access(event jsonb)
 returns jsonb
 language plpgsql
as $function$
declare
    authentication_method text;
    email_claim text;
    allowed_emails text[] := array['myemail@company.com', 'example@company.com'];
begin
    -- Extract email claim and authentication method
    email_claim = event->'claims'->>'email';
    authentication_method = event->'authentication_method';
    -- Authentication methods come double quoted (e.g. "otp")
    authentication_method = replace(authentication_method, '"', '');

    if email_claim ilike '%@supabase.io' or authentication_method = 'sso/saml' or email_claim = any(allowed_emails) then
        return event;
    end if;

    -- If none of the conditions are met, return an error
    return jsonb_build_object(
        'error', jsonb_build_object(
            'http_code', 403,
            'message', 'Staging access is only allowed to team members. Please use your @company.com account instead'
        )
    );
end;
$function$
;
-- manually added
grant execute
  on function public.restrict_application_access
  to supabase_auth_admin;

revoke execute
  on function public.restrict_application_access
  from authenticated, anon, public;
```

----------------------------------------

TITLE: Implementing Server Actions for Magic Link Authentication
DESCRIPTION: Sets up server-side form handling for magic link authentication, including form validation, error handling, and Supabase integration for sending magic links.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
// src/routes/+page.server.ts
import { fail, redirect } from '@sveltejs/kit'
import type { Actions, PageServerLoad } from './$types'

export const load: PageServerLoad = async ({ url, locals: { safeGetSession } }) => {
  const { session } = await safeGetSession()

  // if the user is already logged in return them to the account page
  if (session) {
    redirect(303, '/account')
  }

  return { url: url.origin }
}

export const actions: Actions = {
  default: async (event) => {
    const {
      url,
      request,
      locals: { supabase },
    } = event
    const formData = await request.formData()
    const email = formData.get('email') as string
    const validEmail = /^[\w-\.+]+@([\w-]+\.)+[\w-]{2,8}$/.test(email)

    if (!validEmail) {
      return fail(400, { errors: { email: 'Please enter a valid email address' }, email })
    }

    const { error } = await supabase.auth.signInWithOtp({ email })

    if (error) {
      return fail(400, {
        success: false,
        email,
        message: `There was an issue, Please contact support.`,
      })
    }

    return {
      success: true,
      message: 'Please check your email for a magic link to log into the website.',
    }
  },
}
```

----------------------------------------

TITLE: Writing RLS Tests with pgTAP
DESCRIPTION: Comprehensive pgTAP test suite for testing RLS policies including setup, user access controls, and data modification restrictions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/overview.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
begin;
-- install tests utilities
-- install pgtap extension for testing
create extension if not exists pgtap with schema extensions;
-- Start declare we'll have 4 test cases in our test suite
select plan(4);

-- Setup our testing data
-- Set up auth.users entries
insert into auth.users (id, email) values
	('123e4567-e89b-12d3-a456-426614174000', 'user1@test.com'),
	('987fcdeb-51a2-43d7-9012-345678901234', 'user2@test.com');

-- Create test todos
insert into public.todos (task, user_id) values
	('User 1 Task 1', '123e4567-e89b-12d3-a456-426614174000'),
	('User 1 Task 2', '123e4567-e89b-12d3-a456-426614174000'),
	('User 2 Task 1', '987fcdeb-51a2-43d7-9012-345678901234');

-- as User 1
set local role authenticated;
set local request.jwt.claim.sub = '123e4567-e89b-12d3-a456-426614174000';

-- Test 1: User 1 should only see their own todos
select results_eq(
	'select count(*) from todos',
	ARRAY[2::bigint],
	'User 1 should only see their 2 todos'
);

-- Test 2: User 1 can create their own todo
select lives_ok(
	$$insert into todos (task, user_id) values ('New Task', '123e4567-e89b-12d3-a456-426614174000'::uuid)$$,
	'User 1 can create their own todo'
);

-- as User 2
set local request.jwt.claim.sub = '987fcdeb-51a2-43d7-9012-345678901234';

-- Test 3: User 2 should only see their own todos
select results_eq(
	'select count(*) from todos',
	ARRAY[1::bigint],
	'User 2 should only see their 1 todo'
);

-- Test 4: User 2 cannot modify User 1's todo
SELECT results_ne(
	$$ update todos set task = 'Hacked!' where user_id = '123e4567-e89b-12d3-a456-426614174000'::uuid returning 1 $$,
	$$ values(1) $$,
	'User 2 cannot modify User 1 todos'
);

select * from finish();
rollback;
```

----------------------------------------

TITLE: Creating Sign-up Route Handler in TypeScript
DESCRIPTION: This TypeScript code example provides a server-side route handler for signing up users in a Next.js application using Supabase. It involves processing a POST request with form data, utilizing a type-safe Supabase client to handle user registration, and redirecting the user afterward. It requires @supabase/auth-helpers-nextjs and next/headers packages, and includes TypeScript type definitions for better type checking.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_9

LANGUAGE: TypeScript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

import type { Database } from '@/lib/database.types'

export async function POST(request: Request) {
  const requestUrl = new URL(request.url)
  const formData = await request.formData()
  const email = String(formData.get('email'))
  const password = String(formData.get('password'))
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })

  await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${requestUrl.origin}/auth/callback`,
    },
  })

  return NextResponse.redirect(requestUrl.origin, {
    status: 301,
  })
}

```

----------------------------------------

TITLE: Updating Middleware with createMiddlewareClient in Next.js
DESCRIPTION: This snippet demonstrates how to replace the deprecated withMiddlewareAuth function with createMiddlewareClient in a Next.js middleware file. It shows how to create an authenticated Supabase client, check for an active session, and implement custom authentication logic.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  // We need to create a response and hand it to the supabase client to be able to modify the response headers.
  const res = NextResponse.next()
  // Create authenticated Supabase Client.
  const supabase = createMiddlewareClient({ req, res })
  // Check if we have a session
  const {
    data: { user },
  } = await supabase.auth.getUser()

  // Check auth condition
  if (user?.email?.endsWith('@gmail.com')) {
    // Authentication successful, forward request to protected route.
    return res
  }

  // Auth condition not met, redirect to home page.
  const redirectUrl = req.nextUrl.clone()
  redirectUrl.pathname = '/'
  redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname)
  return NextResponse.redirect(redirectUrl)
}

export const config = {
  matcher: '/middleware-protected',
}
```

----------------------------------------

TITLE: Creating Storage Policy using SQL in Supabase
DESCRIPTION: This SQL snippet creates a policy named "Public Access" on the `storage.objects` table in Supabase. It grants `SELECT` permissions, allowing anyone to download files, but only if the `bucket_id` is 'public'. This policy enables public read access to files within the 'public' bucket.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
-- Use SQL to create a policy.

create policy "Public Access"
  on storage.objects for select
  using ( bucket_id = 'public' );
```

----------------------------------------

TITLE: Implementing Realtime Updates for Golden Ticket Status (JavaScript)
DESCRIPTION: This code sets up a Supabase Realtime subscription to provide realtime feedback on golden ticket status changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-07-designing-with-ai-midjourney.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
const channel = supabase
  .channel('changes')
  .on(
    'postgres_changes',
    {
      event: 'UPDATE',
      schema: 'public',
      table: 'lw7_tickets',
      filter: `username=eq.${username}`,
    },
    (payload) => {
      const golden = !!payload.new.sharedOnTwitter && !!payload.new.sharedOnLinkedIn
      setUserData({
        ...payload.new,
        golden,
      })
      if (golden) {
        channel.unsubscribe()
      }
    }
  )
  .subscribe()
```

----------------------------------------

TITLE: Generating and Storing Embeddings using Transformer.js and Supabase
DESCRIPTION: JavaScript code demonstrating how to generate a vector embedding using Transformer.js and store it in a PostgreSQL database using the Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgvector.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { pipeline } from '@xenova/transformers'
const generateEmbedding = await pipeline('feature-extraction', 'Supabase/gte-small')

const title = 'First post!'
const body = 'Hello world!'

// Generate a vector using Transformers.js
const output = await generateEmbedding(body, {
  pooling: 'mean',
  normalize: true,
})

// Extract the embedding output
const embedding = Array.from(output.data)

// Store the vector in Postgres
const { data, error } = await supabase.from('posts').insert({
  title,
  body,
  embedding,
})
```

----------------------------------------

TITLE: Best Practices for Selecting Nested Values
DESCRIPTION: Contrasts inefficient vs. efficient approaches for querying nested data. Shows why selecting individual values is better than retrieving entire large nested objects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
-- ❌ Avoid doing this
select
  datetime(timestamp),
  m as metadata -- <- metadata contains many nested keys
from
  edge_logs as t
  cross join unnest(t.metadata) as m;

-- ✅ Do this
select
  datetime(timestamp),
  r.method -- <- select only the required values
from
  edge_logs as t
  cross join unnest(t.metadata) as m
  cross join unnest(m.request) as r;
```

----------------------------------------

TITLE: Implementing Avatar Upload Component in Vue 3
DESCRIPTION: Creating a Vue component for uploading and displaying user avatar images using Supabase Storage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-vue-3.mdx#2025-04-21_snippet_6

LANGUAGE: vue
CODE:
```
<script setup>
import { ref, toRefs, watchEffect } from 'vue'
import { supabase } from '../supabase'

const prop = defineProps(['path', 'size'])
const { path, size } = toRefs(prop)

const emit = defineEmits(['upload', 'update:path'])
const uploading = ref(false)
const src = ref('')
const files = ref()

const downloadImage = async () => {
  try {
    const { data, error } = await supabase.storage.from('avatars').download(path.value)
    if (error) throw error
    src.value = URL.createObjectURL(data)
  } catch (error) {
    console.error('Error downloading image: ', error.message)
  }
}

const uploadAvatar = async (evt) => {
  files.value = evt.target.files
  try {
    uploading.value = true
    if (!files.value || files.value.length === 0) {
      throw new Error('You must select an image to upload.')
    }

    const file = files.value[0]
    const fileExt = file.name.split('.').pop()
    const filePath = `${Math.random()}.${fileExt}`

    const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)

    if (uploadError) throw uploadError
    emit('update:path', filePath)
    emit('upload')
  } catch (error) {
    alert(error.message)
  } finally {
    uploading.value = false
  }
}

watchEffect(() => {
  if (path.value) downloadImage()
})
</script>

<template>
  <div>
    <img
      v-if="src"
      :src="src"
      alt="Avatar"
      class="avatar image"
      :style="{ height: size + 'em', width: size + 'em' }"
    />
    <div v-else class="avatar no-image" :style="{ height: size + 'em', width: size + 'em' }" />

    <div :style="{ width: size + 'em' }">
      <label class="button primary block" for="single">
        {{ uploading ? 'Uploading ...' : 'Upload' }}
      </label>
      <input
        style="visibility: hidden; position: absolute"
        type="file"
        id="single"
        accept="image/*"
        @change="uploadAvatar"
        :disabled="uploading"
      />
    </div>
  </div>
</template>
```

----------------------------------------

TITLE: Setting Replica Identity for Receiving Old Records in Supabase
DESCRIPTION: SQL command to set replica identity to 'full' on a table, which enables receiving old record values when records are updated or deleted. For DELETE operations with RLS enabled, only primary keys will be included in the old record.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_47

LANGUAGE: sql
CODE:
```
alter table
  messages replica identity full;
```

----------------------------------------

TITLE: Configuring Postgres Function Security Grants
DESCRIPTION: SQL commands to configure security permissions for auth hook Postgres functions, including granting access to supabase_auth_admin and revoking access from other roles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Grant access to function to supabase_auth_admin
grant execute
  on function public.custom_access_token_hook
  to supabase_auth_admin;

-- Grant access to schema to supabase_auth_admin
grant usage on schema public to supabase_auth_admin;

-- Revoke function permissions from authenticated, anon and public
revoke execute
  on function public.custom_access_token_hook
  from authenticated, anon, public;
```

----------------------------------------

TITLE: Set up server-side hooks in SvelteKit
DESCRIPTION: This code defines server-side hooks for SvelteKit using TypeScript. These hooks create a Supabase client specific to the request, check user authentication, and protect pages based on the authentication status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { type Handle, redirect } from '@sveltejs/kit'
import { sequence } from '@sveltejs/kit/hooks'

import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'

const supabase: Handle = async ({ event, resolve }) => {
  /**
   * Creates a Supabase client specific to this server request.
   *
   * The Supabase client gets the Auth token from the request cookies.
   */
  event.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
    cookies: {
      getAll: () => event.cookies.getAll(),
      /**
       * SvelteKit's cookies API requires `path` to be explicitly set in
       * the cookie options. Setting `path` to `/` replicates previous/
       * standard behavior.
       */
      setAll: (cookiesToSet) => {
        cookiesToSet.forEach(({ name, value, options }) => {
          event.cookies.set(name, value, { ...options, path: '/' })
        })
      },
    },
  })

  /**
   * Unlike `supabase.auth.getSession()`, which returns the session _without_
   * validating the JWT, this function also calls `getUser()` to validate the
   * JWT before returning the session.
   */
  event.locals.safeGetSession = async () => {
    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    if (!session) {
      return { session: null, user: null }
    }

    const {
      data: { user },
      error,
    } = await event.locals.supabase.auth.getUser()
    if (error) {
      // JWT validation has failed
      return { session: null, user: null }
    }

    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      /**
       * Supabase libraries use the `content-range` and `x-supabase-api-version`
       * headers, so we need to tell SvelteKit to pass it through.
       */
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}

const authGuard: Handle = async ({ event, resolve }) => {
  const { session, user } = await event.locals.safeGetSession()
  event.locals.session = session
  event.locals.user = user

  if (!event.locals.session && event.url.pathname.startsWith('/private')) {
    redirect(303, '/auth')
  }

  if (event.locals.session && event.url.pathname === '/auth') {
    redirect(303, '/private')
  }

  return resolve(event)
}

export const handle: Handle = sequence(supabase, authGuard)
```

----------------------------------------

TITLE: Initializing Local Supabase Environment with CLI
DESCRIPTION: Basic commands to initialize and link a local Supabase project with a remote instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase init
supabase login
supabase link --project-ref $PROJECT_ID
```

----------------------------------------

TITLE: Implementing Redis Counter Edge Function
DESCRIPTION: TypeScript implementation of an Edge Function that uses Upstash Redis to track function invocation counts by region. The function increments a counter for the specific region and returns the total counts across all regions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/upstash-redis.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { Redis } from 'https://deno.land/x/upstash_redis@v1.19.3/mod.ts'

console.log(`Function "upstash-redis-counter" up and running!`)

Deno.serve(async (_req) => {
  try {
    const redis = new Redis({
      url: Deno.env.get('UPSTASH_REDIS_REST_URL')!,
      token: Deno.env.get('UPSTASH_REDIS_REST_TOKEN')!,
    })

    const deno_region = Deno.env.get('DENO_REGION')
    if (deno_region) {
      // Increment region counter
      await redis.hincrby('supa-edge-counter', deno_region, 1)
    } else {
      // Increment localhost counter
      await redis.hincrby('supa-edge-counter', 'localhost', 1)
    }

    // Get all values
    const counterHash: Record<string, number> | null = await redis.hgetall('supa-edge-counter')
    const counters = Object.entries(counterHash!)
      .sort(([, a], [, b]) => b - a) // sort desc
      .reduce((r, [k, v]) => ({ total: r.total + v, regions: { ...r.regions, [k]: v } }), {
        total: 0,
        regions: {},
      })

    return new Response(JSON.stringify({ counters }), { status: 200 })
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), { status: 200 })
  }
})
```

----------------------------------------

TITLE: Configuring Google Sign-In Button with HTML and JavaScript
DESCRIPTION: This snippet shows how to set up a Google Sign-In button using HTML and JavaScript. It includes the necessary attributes for the button and a callback function to handle the sign-in response.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_5

LANGUAGE: html
CODE:
```
<div
  id="g_id_onload"
  data-client_id="<client ID>"
  data-context="signin"
  data-ux_mode="popup"
  data-callback="handleSignInWithGoogle"
  data-nonce=""
  data-auto_select="true"
  data-itp_support="true"
  data-use_fedcm_for_prompt="true"
></div>

<div
  class="g_id_signin"
  data-type="standard"
  data-shape="pill"
  data-theme="outline"
  data-text="signin_with"
  data-size="large"
  data-logo_alignment="left"
></div>
```

----------------------------------------

TITLE: Creating Server Client Utility Function
DESCRIPTION: Implementation of a utility function to create a server-side Supabase client using createServerClient from the SSR package and Next.js cookies API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// utils/supabase/server.ts
import { createServerClient, type CookieOptions } from '@supabase/ssr';
import { cookies } from 'next/headers';

export function createClient() {
  const cookieStore = cookies();

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  );
}
```

----------------------------------------

TITLE: Configuring App.tsx with routes for instruments resource
DESCRIPTION: React component setup that configures refine with Supabase data provider and defines routes for the CRUD operations (list, create, edit, show) on the instruments resource.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/refine.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import { Refine, WelcomePage } from "@refinedev/core";
import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";
import routerBindings, {
  DocumentTitleHandler,
  NavigateToResource,
  UnsavedChangesNotifier,
} from "@refinedev/react-router-v6";
import { dataProvider, liveProvider } from "@refinedev/supabase";
import { BrowserRouter, Route, Routes } from "react-router-dom";

import "./App.css";
import authProvider from "./authProvider";
import { supabaseClient } from "./utility";
import { InstrumentsCreate, InstrumentsEdit, InstrumentsList, InstrumentsShow } from "./pages/instruments";

function App() {
  return (
    <BrowserRouter>
      <RefineKbarProvider>
        <Refine
          dataProvider={dataProvider(supabaseClient)}
          liveProvider={liveProvider(supabaseClient)}
          authProvider={authProvider}
          routerProvider={routerBindings}
          options={{
            syncWithLocation: true,
            warnWhenUnsavedChanges: true,
          }}
          resources={[{
            name: "instruments",
            list: "/instruments",
            create: "/instruments/create",
            edit: "/instruments/edit/:id",
            show: "/instruments/show/:id"
          }]}>
          <Routes>
            <Route index
              element={<NavigateToResource resource="instruments" />}
            />
            <Route path="/instruments">
              <Route index element={<InstrumentsList />} />
              <Route path="create" element={<InstrumentsCreate />} />
              <Route path="edit/:id" element={<InstrumentsEdit />} />
              <Route path="show/:id" element={<InstrumentsShow />} />
            </Route>
          </Routes>
          <RefineKbar />
          <UnsavedChangesNotifier />
          <DocumentTitleHandler />
        </Refine>
      </RefineKbarProvider>
    </BrowserRouter>
  );
}

export default App;
```

----------------------------------------

TITLE: Configuring Supabase Client in SvelteKit Layout (v0.9.0)
DESCRIPTION: Implements Supabase client setup and authentication handling for version 0.9.0 using the new load client pattern and type definitions. Includes both the loader and component implementation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_21

LANGUAGE: typescript
CODE:
```
import { invalidate } from '$app/navigation'
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'
import { createSupabaseLoadClient } from '@supabase/auth-helpers-sveltekit'
import type { LayoutLoad } from './$types'
import type { Database } from '../DatabaseDefinitions'

export const load: LayoutLoad = async ({ fetch, data, depends }) => {
  depends('supabase:auth')

  const supabase = createSupabaseLoadClient<Database>({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event: { fetch },
    serverSession: data.session,
  })

  const {
    data: { session },
  } = await supabase.auth.getSession()

  return { supabase, session }
}
```

LANGUAGE: svelte
CODE:
```
<script lang="ts">
  import { invalidate } from '$app/navigation';
  import { onMount } from 'svelte';
  import type { LayoutData } from './$types';

  export let data: LayoutData;

  $: ({ supabase, session } = data);

  onMount(() => {
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((event, _session) => {
      if (_session?.expires_at !== session?.expires_at) {
        invalidate('supabase:auth')
      }
    });

    return () => subscription.unsubscribe();
  });
</script>

<slot />
```

----------------------------------------

TITLE: Initializing Supabase Client with Firebase Auth in TypeScript
DESCRIPTION: Creates a Supabase client for web applications using TypeScript, passing an async function to retrieve the Firebase Auth JWT of the current user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {
  accessToken: async () => {
    return (await firebase.auth().currentUser?.getIdToken(/* forceRefresh */ false)) ?? null
  },
})
```

----------------------------------------

TITLE: Linking OAuth Identity in Supabase Auth
DESCRIPTION: Demonstrates how to use the linkIdentity() method to link an OAuth identity to a user's account in Supabase Auth. This code snippet shows linking a Google identity.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-auth-identity-linking-hooks.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase.auth.linkIdentity({
  provider: 'google',
})
```

----------------------------------------

TITLE: Complex Boolean Logic - AND OR AND
DESCRIPTION: Demonstrates how to implement a complex WHERE clause with nested AND and OR conditions for filtering team_id and age using both SQL and JavaScript syntax.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/sql-to-api.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select *
from players
where ((team_id = 'CHN' and age > 35) or (team_id != 'CHN' and age is not null));
```

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('players')
  .select() // or .select('*')
  .or('and(team_id.eq.CHN,age.gt.35),and(team_id.neq.CHN,.not.age.is.null)')
```

----------------------------------------

TITLE: Downloading a file using JavaScript in Supabase Storage
DESCRIPTION: This JavaScript snippet shows how to download a file from Supabase Storage. It uses the `supabase.storage.from('avatars').download('public/avatar1.png')` method to download the file located at 'public/avatar1.png' within the 'avatars' bucket. The function returns a promise that resolves with the file data or an error if the download fails.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
// Use the JS library to download a file.

const { data, error } = await supabase.storage.from('avatars').download('public/avatar1.png')
```

----------------------------------------

TITLE: Initializing Supabase Project for Llamafile Integration
DESCRIPTION: Command to bootstrap a new Supabase project locally for integrating Llamafile.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx supabase bootstrap scratch
```

----------------------------------------

TITLE: Using LangChain's Hybrid Search with Supabase in JavaScript
DESCRIPTION: Illustrates how to use the LangChain hybrid search functionality with Supabase in a JavaScript frontend. The code sets up a retriever that combines similarity search with keyword search to find relevant documents based on a query.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
import { OpenAIEmbeddings } from 'langchain/embeddings/openai'
import { createClient } from '@supabase/supabase-js'
import { SupabaseHybridSearch } from 'langchain/retrievers/supabase'

const privateKey = process.env.SUPABASE_PRIVATE_KEY
if (!privateKey) throw new Error(`Expected env var SUPABASE_PRIVATE_KEY`)

const url = process.env.SUPABASE_URL
if (!url) throw new Error(`Expected env var SUPABASE_URL`)

export const run = async () => {
  const client = createClient(url, privateKey)

  const embeddings = new OpenAIEmbeddings()

  const retriever = new SupabaseHybridSearch(embeddings, {
    client,
    //  Below are the defaults, expecting that you set up your supabase table and functions according to the guide above. Please change if necessary.
    similarityK: 2,
    keywordK: 2,
    tableName: 'documents',
    similarityQueryName: 'match_documents',
    keywordQueryName: 'kw_match_documents',
  })

  const results = await retriever.getRelevantDocuments('hello bye')

  console.log(results)
}
```

----------------------------------------

TITLE: Creating Logout Route Handler in TypeScript
DESCRIPTION: This TypeScript code provides an example of setting up a server-side route handler for user logout in a Next.js application with Supabase. By calling signOut on a typed Supabase client, it signs out the user and subsequently redirects them to a login page. Required dependencies are @supabase/auth-helpers-nextjs and next/headers, using TypeScript type support for enhanced safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_13

LANGUAGE: TypeScript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

import type { Database } from '@/lib/database.types'

export async function POST(request: Request) {
  const requestUrl = new URL(request.url)
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })

  await supabase.auth.signOut()

  return NextResponse.redirect(`${requestUrl.origin}/login`, {
    status: 301,
  })
}

```

----------------------------------------

TITLE: User Authentication Actions - TypeScript
DESCRIPTION: Similar to the JavaScript snippet, this TypeScript snippet implements login and signup actions for user authentication with Supabase. Type definitions are provided for email and password. It manages form submissions in a strongly typed manner.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
// src/routes/login/+page.server.ts
import { fail } from '@sveltejs/kit'

export const actions = {
  default: async ({ request, url, locals: { supabase } }) => {
    const formData = await request.formData()
    const email = formData.get('email') as string
    const password = formData.get('password') as string

    const { error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `${url.origin}/auth/callback`,
      },
    })

    if (error) {
      return fail(500, { message: 'Server error. Try again later.', success: false, email })
    }

    return {
      message: 'Please check your email for a magic link to log into the website.',
      success: true,
    }
  },
}
```

----------------------------------------

TITLE: Creating a Route Handler with Edge Runtime in Next.js (TypeScript)
DESCRIPTION: TypeScript implementation of a Next.js route handler running on the Edge runtime that inserts a todo in Supabase. It uses typed createRouteHandlerClient for type safety, configures the handler for edge runtime, and returns the inserted data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_27

LANGUAGE: tsx
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'

import type { Database } from '@/lib/database.types'

export const runtime = 'edge'
export const dynamic = 'force-dynamic'

export async function POST(request: Request) {
  const { title } = await request.json()
  const cookieStore = cookies()

  const supabase = createRouteHandlerClient<Database>({
    cookies: () => cookieStore,
  })

  const { data } = await supabase.from('todos').insert({ title }).select()
  return NextResponse.json(data)
}
```

----------------------------------------

TITLE: Creating Auth Hook Function in PL/pgSQL
DESCRIPTION: PL/pgSQL function to implement a custom access token hook for adding user roles to JWT claims.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create or replace function public.custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
stable
as $$
  declare
    claims jsonb;
    user_role public.app_role;
  begin
    -- Fetch the user role in the user_roles table
    select role into user_role from public.user_roles where user_id = (event->>'user_id')::uuid;

    claims := event->'claims';

    if user_role is not null then
      -- Set the claim
      claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
    else
      claims := jsonb_set(claims, '{user_role}', 'null');
    end if;

    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);

    -- Return the modified or original event
    return event;
  end;
$$;

grant usage on schema public to supabase_auth_admin;

grant execute
  on function public.custom_access_token_hook
  to supabase_auth_admin;

revoke execute
  on function public.custom_access_token_hook
  from authenticated, anon, public;

grant all
  on table public.user_roles
to supabase_auth_admin;

revoke all
  on table public.user_roles
  from authenticated, anon, public;

create policy "Allow auth admin to read user roles" ON public.user_roles
as permissive for select
to supabase_auth_admin
using (true)
```

----------------------------------------

TITLE: Implementing Task API with Route Parameters in Oak Framework
DESCRIPTION: An Oak framework implementation for a task management API. This code sets up a router with endpoints for managing tasks, demonstrating how to access route parameters through ctx.params and handle various HTTP methods with appropriate responses.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
import { Application } from "jsr:@oak/oak/application";
import { Router } from "jsr:@oak/oak/router";

const router = new Router();

let tasks: { [id: string]: any } = {};

router
  .get("/tasks", (ctx) => {
    ctx.response.body = Object.values(tasks);
  })
  .post("/tasks", async (ctx) => {
    const body = ctx.request.body();
    const { name } = await body.value;
    const id = Math.random().toString(36).substring(7);
    tasks[id] = { id, name };
    ctx.response.body = tasks[id];
  })
  .get("/tasks/:id", (ctx) => {
    const id = ctx.params.id;
    const task = tasks[id];
    if (task) {
      ctx.response.body = task;
    } else {
      ctx.response.status = 404;
      ctx.response.body = 'Task not found';
    }
  })
  .patch("/tasks/:id", async (ctx) => {
    const id = ctx.params.id;
    const body = ctx.request.body();
    const updates = await body.value;
    const task = tasks[id];
    if (task) {
      tasks[id] = { ...task, ...updates };
      ctx.response.body = tasks[id];
    } else {
      ctx.response.status = 404;
      ctx.response.body = 'Task not found';
    }
  })
  .delete("/tasks/:id", (ctx) => {
    const id = ctx.params.id;
    if (tasks[id]) {
      delete tasks[id];
      ctx.response.body = 'Task deleted successfully';
    } else {
      ctx.response.status = 404;
      ctx.response.body = 'Task not found';
    }
  });


const app = new Application();
app.use(router.routes());
app.use(router.allowedMethods());

app.listen({ port: 3000 });
```

----------------------------------------

TITLE: Verifying OTP using Python
DESCRIPTION: Showcases the OTP verification to create a user session using Python in Supabase. Inputs necessary are user's email and OTP token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
response = supabase.auth.verify_otp({
  'email': email,
  'token': '123456',
  'type': 'email',
})
```

----------------------------------------

TITLE: Generating AI Embeddings with Edge Function
DESCRIPTION: Demonstrates using edge.exec to run a JavaScript AI session for generating embeddings. Uses the gte-small model to process text input.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
select edge.exec(
$js$

const session = new Supabase.ai.Session('gte-small');
return await session.run('hello world');

$js$);
```

----------------------------------------

TITLE: Downloading Transformed Image in JavaScript
DESCRIPTION: This snippet demonstrates how to download a transformed image using the Supabase JavaScript client, specifying transformation options.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

supabase.storage.from('bucket').download('image.jpg', {
  transform: {
    width: 800,
    height: 300,
  },
})
```

----------------------------------------

TITLE: Creating Avatar Upload Widget in Flutter
DESCRIPTION: Implements a stateful widget for handling profile image uploads to Supabase storage. The component displays the current avatar image and provides an upload button that allows users to select and upload new profile pictures.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_8

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:supabase_quickstart/main.dart';

class Avatar extends StatefulWidget {
  const Avatar({
    super.key,
    required this.imageUrl,
    required this.onUpload,
  });

  final String? imageUrl;
  final void Function(String) onUpload;

  @override
  State<Avatar> createState() => _AvatarState();
}

class _AvatarState extends State<Avatar> {
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        if (widget.imageUrl == null || widget.imageUrl!.isEmpty)
          Container(
            width: 150,
            height: 150,
            color: Colors.grey,
            child: const Center(
              child: Text('No Image'),
            ),
          )
        else
          Image.network(
            widget.imageUrl!,
            width: 150,
            height: 150,
            fit: BoxFit.cover,
          ),
        ElevatedButton(
          onPressed: _isLoading ? null : _upload,
          child: const Text('Upload'),
        ),
      ],
    );
  }

  Future<void> _upload() async {
    final picker = ImagePicker();
    final imageFile = await picker.pickImage(
      source: ImageSource.gallery,
      maxWidth: 300,
      maxHeight: 300,
    );
    if (imageFile == null) {
      return;
    }
    setState(() => _isLoading = true);

    try {
      final bytes = await imageFile.readAsBytes();
      final fileExt = imageFile.path.split('.').last;
      final fileName = '${DateTime.now().toIso8601String()}.$fileExt';
      final filePath = fileName;
      await supabase.storage.from('avatars').uploadBinary(
            filePath,
            bytes,
            fileOptions: FileOptions(contentType: imageFile.mimeType),
          );
      final imageUrlResponse = await supabase.storage
          .from('avatars')
          .createSignedUrl(filePath, 60 * 60 * 24 * 365 * 10);
      widget.onUpload(imageUrlResponse);
    } on StorageException catch (error) {
      if (mounted) {
        context.showSnackBar(error.message, isError: true);
      }
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    }

    setState(() => _isLoading = false);
  }
}
```

----------------------------------------

TITLE: Correct Method for Logging Request Headers in Edge Functions
DESCRIPTION: Proper technique for logging request headers in Edge Functions using Object.fromEntries to convert the Headers object into a standard JavaScript object that can be properly stringified and logged.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/logging.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
Deno.serve(async (req) => {
  let headersObject = Object.fromEntries(req.headers)
  let requestHeaders = JSON.stringify(headersObject, null, 2)
  console.log(`Request headers: ${requestHeaders}`)
  return new Response('ok', {
    headers: {
      'Content-Type': 'application/json',
    },
    status: 200,
  })
})
```

----------------------------------------

TITLE: Creating a Publication on Supabase Database for Logical Replication
DESCRIPTION: Creates a publication named 'example_pub' on the Supabase database, which will be used to publish changes that can be consumed by subscribers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/setup-replication-external.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE PUBLICATION example_pub;
```

----------------------------------------

TITLE: Enabling pgvector Extension in Supabase SQL
DESCRIPTION: SQL commands to enable and disable the pgvector extension in Supabase. This allows the use of vector data types and operations in Postgres.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-columns.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Example: enable the "vector" extension.
create extension vector
with
  schema extensions;

-- Example: disable the "vector" extension
drop
  extension if exists vector;
```

----------------------------------------

TITLE: Using Supabase CLI login command
DESCRIPTION: The Supabase CLI login command that initiates the automatic login process. This command generates a unique session ID, creates ECDH keys, and opens the browser for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-01-automatic-cli-login.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase login
```

----------------------------------------

TITLE: Signing in with Magic Link using Python
DESCRIPTION: Demonstrates signing in with a Magic Link using Supabase's Python client. Key parameters include user's email and redirect URL. Automatically signs up an unsigned user unless specified.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_5

LANGUAGE: Python
CODE:
```
response = supabase.auth.sign_in_with_otp({
  'email': 'valid.email@supabase.io',
  'options': {
    # set this to false if you do not want the user to be automatically signed up
    'should_create_user': False,
    'email_redirect_to': 'https://example.com/welcome',
  },
})
```

----------------------------------------

TITLE: Using HTTP DELETE with pg_net
DESCRIPTION: Example of making an asynchronous HTTP DELETE request to a REST API endpoint using the net.http_delete function. The function returns a request ID for tracking.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
select
    net.http_delete(
        'https://dummy.restapiexample.com/api/v1/delete/2'
    ) as request_id;
----------
         1
(1 row)
```

----------------------------------------

TITLE: Executing Similarity Search using Supabase JavaScript Client
DESCRIPTION: JavaScript code to call the similarity search function using Supabase client's RPC method. This allows querying for similar documents based on a given embedding.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-columns.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { data: documents } = await supabaseClient.rpc('match_documents', {
  query_embedding: embedding, // Pass the embedding you want to compare
  match_threshold: 0.78, // Choose an appropriate threshold for your data
  match_count: 10, // Choose the number of matches
})
```

----------------------------------------

TITLE: Combining Components into a Main App
DESCRIPTION: The main App.svelte component that handles authentication state and conditionally renders either the Auth component for unauthenticated users or the Account component for authenticated users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_6

LANGUAGE: html
CODE:
```
<script lang="ts">
  import { onMount } from 'svelte'
  import { supabase } from './supabaseClient'
  import type { AuthSession } from '@supabase/supabase-js'
  import Account from './lib/Account.svelte'
  import Auth from './lib/Auth.svelte'

  let session: AuthSession | null

  onMount(() => {
    supabase.auth.getSession().then(({ data }) => {
      session = data.session
    })

    supabase.auth.onAuthStateChange((_event, _session) => {
      session = _session
    })
  })
</script>

<div class="container" style="padding: 50px 0 100px 0">
  {#if !session}
  <Auth />
  {:else}
  <Account {session} />
  {/if}
</div>
```

----------------------------------------

TITLE: Generating UUIDv4 in PostgreSQL
DESCRIPTION: Demonstrates how to generate a version 4 UUID in PostgreSQL using the gen_random_uuid() function. UUIDv4 uses 122 bits of randomness, making it highly unlikely to produce collisions and ideal for globally unique identifiers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
SELECT gen_random_uuid();

           uuid_generate_v4
--------------------------------------
 6ca93dde-81d4-4ea0-bfe1-92ecb4d81ee4

(1 row)
```

----------------------------------------

TITLE: Inserting Reservations with Exclusion Constraint
DESCRIPTION: These SQL statements demonstrate how the exclusion constraint prevents overlapping reservations from being inserted.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- Add a first reservation
insert into reservations (title, duration)
values ('Tyler Dinner', '[2024-07-04 18:00, 2024-07-04 21:00)');

-- The following insert fails because the duration overlaps with the above
insert into reservations (title, duration)
values ('Thor Dinner', '[2024-07-04 20:00, 2024-07-04 22:00)');
```

----------------------------------------

TITLE: Signing in with Email and Password using Supabase in Kotlin
DESCRIPTION: This snippet demonstrates how to sign in a user with their email and password using the Supabase Kotlin client. It uses the signInWith(Email) method from the auth module.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_19

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithEmail() {
	supabase.auth.signInWith(Email) {
		email = "valid.email@supabase.io"
		password = "example-password"
	}
}
```

----------------------------------------

TITLE: MySQL to Postgres Migration with pgloader
DESCRIPTION: This SQL snippet configures pgloader to migrate a MySQL database to a Postgres database. It specifies the source MySQL connection string, the destination Supabase Postgres connection string, alters the schema owner, and sets WAL buffer and memory parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/amazon-rds.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
load database
  from mysql://user:password@host/source_db
  into postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres
alter schema 'public' owner to 'postgres';
set wal_buffers = '64MB', max_wal_senders = 0, statement_timeout = 0, work_mem to '2GB';
```

----------------------------------------

TITLE: Signing In with Azure in Supabase (Flutter)
DESCRIPTION: This snippet shows how to implement Azure OAuth sign-in within a Flutter application using the Supabase SDK. The code calls the `signInWithOAuth` method with Azure as the provider, optionally setting a redirect URI for non-web platforms.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signInWithAzure() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.azure,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}
```

----------------------------------------

TITLE: Rebasing Supabase Migrations
DESCRIPTION: This bash script demonstrates how to rebase local schema changes on top of new migrations from the main branch. It involves renaming the migration file with a new timestamp and resetting the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_13

LANGUAGE: bash
CODE:
```
git pull
supabase migration new dev_A
# Assume the new file is: supabase/migrations/<t+2>_dev_A.sql
mv <time>_dev_A.sql <t+2>_dev_A.sql
supabase db reset
```

----------------------------------------

TITLE: Testing Edge Function
DESCRIPTION: Shell commands to serve the function locally and test it using cURL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/generate-text-embeddings.mdx#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
supabase functions serve
```

LANGUAGE: shell
CODE:
```
curl --request POST 'http://localhost:54321/functions/v1/embed' \
  --header 'Authorization: Bearer ANON_KEY' \
  --header 'Content-Type: application/json' \
  --data '{ "input": "hello world" }'
```

----------------------------------------

TITLE: Server/Client Hooks Setup for SvelteKit Auth - v0.8.0
DESCRIPTION: Separate server and client hook configurations for Supabase authentication in SvelteKit v0.8.0.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_24

LANGUAGE: typescript
CODE:
```
// make sure the supabase instance is initialized on the server
import '$lib/db'
```

LANGUAGE: typescript
CODE:
```
// make sure the supabase instance is initialized on the client
import '$lib/db'
```

----------------------------------------

TITLE: Creating Signed URL for Transformed Image in JavaScript
DESCRIPTION: This snippet shows how to create a signed URL for a transformed image in a private bucket using the Supabase JavaScript client, specifying expiration time and transformation options.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

supabase.storage.from('bucket').createSignedUrl('image.jpg', 60000, {
  transform: {
    width: 200,
    height: 200,
  },
})
```

----------------------------------------

TITLE: Creating Supabase SSR Client in Express
DESCRIPTION: Sets up a Supabase client for server-side rendering in an Express application, handling cookie management for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_22

LANGUAGE: javascript
CODE:
```
const { createServerClient, parseCookieHeader, serializeCookieHeader } = require('@supabase/ssr')

exports.createClient = (context) => {
  return createServerClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY, {
    cookies: {
      getAll() {
        return parseCookieHeader(context.req.headers.cookie ?? '')
      },
      setAll(cookiesToSet) {
        cookiesToSet.forEach(({ name, value, options }) =>
          context.res.appendHeader('Set-Cookie', serializeCookieHeader(name, value, options))
        )
      },
    },
  })
}
```

----------------------------------------

TITLE: Implementing Dropzone Component for File Uploads in React
DESCRIPTION: This code snippet demonstrates how to use the Dropzone component for file uploads in a React application. It utilizes the useSupabaseUpload hook to configure upload settings and renders the Dropzone with empty state and content components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/dropzone.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { Dropzone, DropzoneContent, DropzoneEmptyState } from '@/components/dropzone'
import { useSupabaseUpload } from '@/hooks/use-supabase-upload'

const FileUploadDemo = () => {
  const props = useSupabaseUpload({
    bucketName: 'test',
    path: 'test',
    allowedMimeTypes: ['image/*'],
    maxFiles: 2,
    maxFileSize: 1000 * 1000 * 10, // 10MB,
  })

  return (
    <div className="w-[500px]">
      <Dropzone {...props}>
        <DropzoneEmptyState />
        <DropzoneContent />
      </Dropzone>
    </div>
  )
}

export { FileUploadDemo }
```

----------------------------------------

TITLE: Create Employees Table Migration (CLI)
DESCRIPTION: This command generates a new migration file using the Supabase CLI. The migration file will be used to store the SQL commands for creating the `employees` table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
supabase migration new create_employees_table
```

----------------------------------------

TITLE: Protected API Route in JavaScript
DESCRIPTION: This JavaScript code creates a protected API route using Supabase. It retrieves the logged-in user's session and responds with data from the 'test' table if the user is authenticated, otherwise it sends a 401 error response.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
import { createPagesServerClient } from '@supabase/auth-helpers-nextjs'

const ProtectedRoute = async (req, res) => {
  // Create authenticated Supabase Client
  const supabase = createPagesServerClient({ req, res })
  // Check if we have a user
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!user)
    return res.status(401).json({
      error: 'not_authenticated',
      description: 'The user does not have an active session or is not authenticated',
    })

  // Run queries with RLS on the server
  const { data } = await supabase.from('test').select('*')
  res.json(data)
}

export default ProtectedRoute
```

----------------------------------------

TITLE: Enabling and Disabling pgRouting Extension in SQL
DESCRIPTION: SQL commands to enable or disable the pgRouting extension in a Supabase project. The 'create extension' command enables the extension with the cascade option to handle dependencies, while 'drop extension' disables it.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgrouting.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the "pgRouting" extension
create extension pgrouting cascade;

-- Disable the "pgRouting" extension
drop extension if exists pgRouting;
```

----------------------------------------

TITLE: Implementing MFA Verification Page in Flutter with Supabase
DESCRIPTION: This snippet defines an MFAVerifyPage widget that handles the verification of a Time-based One-Time Password (TOTP) for Multi-Factor Authentication. It uses Supabase to verify the TOTP and redirects to the home page upon successful verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_10

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:mfa_app/main.dart';
import 'package:mfa_app/pages/auth/register_page.dart';
import 'package:mfa_app/pages/home_page.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class MFAVerifyPage extends StatefulWidget {
  static const route = '/mfa/verify';
  const MFAVerifyPage({super.key});

  @override
  State<MFAVerifyPage> createState() => _MFAVerifyPageState();
}

class _MFAVerifyPageState extends State<MFAVerifyPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Verify MFA'),
        actions: [
          TextButton(
            onPressed: () {
              supabase.auth.signOut();
              context.go(RegisterPage.route);
            },
            child: Text(
              'Logout',
              style: TextStyle(color: Theme.of(context).colorScheme.onPrimary),
            ),
          ),
        ],
      ),
      body: ListView(
        padding: const EdgeInsets.symmetric(
          horizontal: 20,
          vertical: 24,
        ),
        children: [
          Text(
            'Verification Required',
            style: Theme.of(context).textTheme.titleLarge,
          ),
          const SizedBox(height: 16),
          const Text('Enter the code shown in your authentication app.'),
          const SizedBox(height: 16),
          TextFormField(
            decoration: const InputDecoration(
              hintText: '000000',
            ),
            style: const TextStyle(fontSize: 24),
            textAlign: TextAlign.center,
            keyboardType: TextInputType.number,
            onChanged: (value) async {
              if (value.length != 6) return;

              // kick off the verification process once 6 characters are entered
              try {
                final factorsResponse = await supabase.auth.mfa.listFactors();
                final factor = factorsResponse.totp.first;
                final factorId = factor.id;

                final challenge =
                    await supabase.auth.mfa.challenge(factorId: factorId);
                await supabase.auth.mfa.verify(
                  factorId: factorId,
                  challengeId: challenge.id,
                  code: value,
                );
                await supabase.auth.refreshSession();
                if (mounted) {
                  context.go(HomePage.route);
                }
              } on AuthException catch (error) {
                ScaffoldMessenger.of(context)
                    .showSnackBar(SnackBar(content: Text(error.message)));
              } catch (error) {
                ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Unexpected error occurred')));
              }
            },
          ),
        ],
      ),
    );
  }
}
```

----------------------------------------

TITLE: Signing in with Magic Link using Dart
DESCRIPTION: Demonstrates how to sign in a user with a magic link using Dart in Supabase. Requires the user's email address to execute the sign-in process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_2

LANGUAGE: Dart
CODE:
```
Future<void> signInWithEmail() async {
  final AuthResponse res = await supabase.auth.signinwithotp(email: 'valid.email@supabase.io');
}
```

----------------------------------------

TITLE: Client-side Data Fetching with Row Level Security in SvelteKit
DESCRIPTION: This snippet shows how to implement client-side data fetching with Supabase Row Level Security (RLS) in a SvelteKit component. It uses the supabaseClient from PageData and only runs the query once the session is defined client-side.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_16

LANGUAGE: svelte
CODE:
```
<script lang="ts">
  export let data

  let loadedData = []
  async function loadData() {
    const { data: result } = await data.supabase.from('test').select('*').limit(20)
    loadedData = result
  }

  $: if (data.session) {
    loadData()
  }
</script>

{#if data.session}
<p>client-side data fetching with RLS</p>
<pre>{JSON.stringify(loadedData, null, 2)}</pre>
{/if}
```

----------------------------------------

TITLE: Accessing Vector Data with Supabase JS Client
DESCRIPTION: Demonstrates how to query vector data from the frontend using the Supabase JavaScript client library. This allows filtering and selecting specific fields from the vector collection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_8

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('docs')
  .select('id, embedding, metadata')
  .eq('url', '/hello-world')
```

----------------------------------------

TITLE: Enabling PgBouncer for Prisma
DESCRIPTION: Shows how to add the pgbouncer=true parameter to the Prisma connection string to address prepared statement issues.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_3

LANGUAGE: markdown
CODE:
```
.../postgres?pgbouncer=true
```

----------------------------------------

TITLE: Implementing Email Signup with Dart
DESCRIPTION: Dart code snippet for signing up a new user with email and password authentication in Supabase. This example uses the implicit flow to register users with their email and password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signUpNewUser() async {
  final AuthResponse res = await supabase.auth.signUp(
    email: 'valid.email@supabase.io',
    password: 'example-password'
  );
}
```

----------------------------------------

TITLE: Creating Supabase Server Client for Next.js Server Components
DESCRIPTION: Defines a utility function that creates a Supabase client for use in Server Components, Server Actions, and Route Handlers. Configures cookie handling to manage authentication state on the server.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_3

LANGUAGE: ts
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
```

----------------------------------------

TITLE: Replacing auth.email() with auth.jwt() in Supabase RLS Policy
DESCRIPTION: This snippet shows how to replace the deprecated auth.email() function with the more generic auth.jwt() function when creating an RLS policy for user profile viewing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/deprecated-rls-features-Pm77Zs.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
- DEPRECATED
create policy "User can view their profile."
on profiles for select using (
  auth.email() = email
);

-- RECOMMENDED
create policy "User can view their profile."
on profiles for select using (
  (auth.jwt() ->> 'email') = email
);
```

----------------------------------------

TITLE: Inserting Role Permissions in SQL
DESCRIPTION: SQL commands to insert role permissions for admin and moderator roles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
insert into public.role_permissions (role, permission)
values
  ('admin', 'channels.delete'),
  ('admin', 'messages.delete'),
  ('moderator', 'messages.delete');
```

----------------------------------------

TITLE: AI Filter API Implementation
DESCRIPTION: This code snippet shows the implementation of an API endpoint that integrates with an AI model to generate filters from natural language prompts. It uses `ai`, `openai`, and `zod` for AI interaction, schema validation, and type safety. The endpoint validates that generated property names and operators are valid before returning the filters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
import { generateObject } from 'ai'
import { openai } from '@ai-sdk/openai'
import { z } from 'zod'

// Define schemas for validation
const FilterProperty = z.object({
  label: z.string(),
  name: z.string(),
  type: z.enum(['string', 'number', 'date', 'boolean']),
  options: z.array(z.string()).optional(),
  operators: z.array(z.string()).optional(),
})

const FilterCondition = z.object({
  propertyName: z.string(),
  value: z.union([z.string(), z.number(), z.boolean(), z.null()]),
  operator: z.string(),
})

type FilterGroupType = {
  logicalOperator: 'AND' | 'OR'
  conditions: Array<z.infer<typeof FilterCondition> | FilterGroupType>
}

const FilterGroup: z.ZodType<FilterGroupType> = z.lazy(() =>
  z.object({
    logicalOperator: z.enum(['AND', 'OR']),
    conditions: z.array(z.union([FilterCondition, FilterGroup])),
  })
)

export async function POST(req: Request) {
  const { prompt, filterProperties } = await req.json()
  const filterPropertiesString = JSON.stringify(filterProperties)

  try {
    const { object } = await generateObject({
      model: openai('gpt-4-mini'),
      schema: FilterGroup,
      prompt: `Generate a filter group based on the following prompt: "${prompt}". \
              Use only these filter properties: ${filterPropertiesString}. \
              Each property has its own set of valid operators defined in the operators field. \
              Return a filter group with a logical operator ('AND'/'OR') and an array of conditions. \
              Each condition can be either a filter condition or another filter group. \
              Filter conditions should have the structure: { propertyName: string, value: string | number | boolean | null, operator: string }. \
              Ensure that the generated filters use only the provided property names and their corresponding operators.`, 
    })

    // Validate that all propertyNames exist in filterProperties
    const validatePropertyNames = (group: FilterGroupType): boolean => {
      return group.conditions.every((condition) => {
        if ('logicalOperator' in condition) {
          return validatePropertyNames(condition as FilterGroupType)
        }
        const property = filterProperties.find(
          (p: z.infer<typeof FilterProperty>) => p.name === condition.propertyName
        )
        if (!property) return false
        // Validate operator is valid for this property
        return property.operators?.includes(condition.operator) ?? false
      })
    }

    if (!validatePropertyNames(object)) {
      throw new Error('Invalid property names or operators in generated filter')
    }

    // Zod will throw an error if the object doesn't match the schema
    const validatedFilters = FilterGroup.parse(object)
    return Response.json(validatedFilters)
  } catch (error: any) {
    console.error('Error in AI filtering:', error)
    return Response.json({ error: error.message || 'AI filtering failed' }, { status: 500 })
  }
}
```

----------------------------------------

TITLE: Using Response Types for Complex Supabase Queries
DESCRIPTION: Demonstrates how to use response types for complex Supabase queries with nested relations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
import { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'

const countriesWithCitiesQuery = supabase.from('countries').select(`
  id,
  name,
  cities (
    id,
    name
  )
`)
type CountriesWithCities = QueryData<typeof countriesWithCitiesQuery>

const { data, error } = await countriesWithCitiesQuery
if (error) throw error
const countriesWithCities: CountriesWithCities = data
```

----------------------------------------

TITLE: Making a Supabase API request using curl with Anon Key
DESCRIPTION: This bash code snippet demonstrates how to make a request to a Supabase database using the `curl` command-line tool. It sends a `GET` request to retrieve the `name` column from the `colors` table. It uses the `anon key` in the `apikey` header for authentication. The URL and API key are specific to a Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
curl 'https://xscduanzzfseqszwzhcy.supabase.co/rest/v1/colors?select=name' \
-H "apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYxNDIwNTE3NCwiZXhwIjoxOTI5NzgxMTc0fQ.-NBR1WnZyQGpRLdXJfgfpszoZ0EeE6KHatJsDPLIX8c"
```

----------------------------------------

TITLE: Implementing Email Signup with Kotlin
DESCRIPTION: Kotlin code snippet for signing up a new user with email and password authentication in Supabase. This example uses the signUpWith(Email) method to register users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
suspend fun signUpNewUser() {
	supabase.auth.signUpWith(Email) {
		email = "valid.email@supabase.io"
		password = "example-password"
	}
}
```

----------------------------------------

TITLE: Creating a 'todos' Table in Supabase SQL
DESCRIPTION: SQL command to create a 'todos' table with an auto-incrementing id and a task column with a length check constraint.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/creating-routes.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table
  todos (
    id bigint generated by default as identity primary key,
    task text check (char_length(task) > 3)
  );
```

----------------------------------------

TITLE: Accessing Session After SupabaseAuth Class Removal in v2
DESCRIPTION: Shows how to access the current session after the SupabaseAuth class was removed in v2. The initialSession member is no longer available, and currentSession should be used instead to access the session at any time.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_9

LANGUAGE: dart
CODE:
```
// Use `initialSession` to obtain the initial session when the app starts.
final initialSession = await SupabaseAuth.initialSession;
```

LANGUAGE: dart
CODE:
```
// Use `currentSession` to access the session at any time.
final initialSession = await supabase.auth.currentSession;
```

----------------------------------------

TITLE: Handling JavaScript Auth Errors
DESCRIPTION: This section describes how to handle errors originating from the `supabase.auth` namespace in JavaScript. All errors are wrapped by the `AuthError` class and can be further categorized into `AuthApiError` (from Supabase Auth API) and `CustomAuthError` (from client library state). `AuthApiError` includes `code` and `status` properties to identify the error and HTTP status code, respectively. Use `isAuthApiError` to check error type.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/debugging/error-codes.mdx#2025-04-21_snippet_0



----------------------------------------

TITLE: Summing Values from JSONB Arrays Using Common Table Expressions in PostgreSQL
DESCRIPTION: Demonstrates the correct approach to aggregate data from JSONB arrays using a Common Table Expression (CTE). This query first flattens the JSONB array data into a tabular form, then applies the sum aggregate function to calculate total calories per day.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
with data as
(
  select
    date,
    (jsonb_array_elements(food_log)->'calories')::integer as calories
  from calendar
  where user_id = 'xyz'
    and date between '2022-01-01' and '2022-01-31'
)
select date, sum(calories)
from data
group by date;
```

----------------------------------------

TITLE: Bitbucket Pipeline for Edge Functions
DESCRIPTION: Bitbucket pipeline configuration for deploying Edge Functions. Includes setup step for installing dependencies and parallel execution for function deployment with Docker service.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/cicd-workflow.mdx#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
image: node:20

pipelines:
  default:
    - step:
        name: Setup
        caches:
          - node
        script:
          - npm i supabase
    - parallel:
        - step:
            name: Functions Deploy
            script:
              - npx supabase init
              - npx supabase functions deploy --debug
            services:
              - docker
```

----------------------------------------

TITLE: Sign Out using Supabase
DESCRIPTION: This Kotlin snippet demonstrates how to sign out a user using Supabase. It uses the `signOut` method to remove the user's session and local storage data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_7

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Linking OAuth Identity to Anonymous User in Supabase JS
DESCRIPTION: JavaScript code to link an OAuth provider (Google) to an anonymous user, converting them to a permanent user with the same user ID.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase
  .auth
  .linkIdentity({ provider: 'google' })
```

----------------------------------------

TITLE: Resetting Password with Supabase in JavaScript
DESCRIPTION: This snippet demonstrates how to initiate a password reset process using the Supabase JavaScript client. It sends a reset password email to the user's email address with a redirect URL for updating the password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_21

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

await supabase.auth.resetPasswordForEmail('valid.email@supabase.io', {
  redirectTo: 'http://example.com/account/update-password',
})
```

----------------------------------------

TITLE: SQL Offset Pagination Example
DESCRIPTION: SQL equivalent of the offset-based pagination showing limit and offset usage
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-pg-graphql-1-5-7.mdx#2025-04-21_snippet_2

LANGUAGE: graphql
CODE:
```
select
    *
from
    blog
limit
    2
offset
    5
```

----------------------------------------

TITLE: Adding CASCADE Delete Constraint Example
DESCRIPTION: Adds a new column with CASCADE delete constraint and updates existing data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/cascade-deletes.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
alter table child
add column mother integer references parent (id)
  on delete cascade;

update child
set mother = 2
where id = 1;
```

----------------------------------------

TITLE: Using Realtime Channels in Supabase.js v2
DESCRIPTION: Examples of using the new channel() method for Realtime functionality in Supabase.js v2, including presence and postgres changes subscriptions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_10

LANGUAGE: ts
CODE:
```
supabase
  .channel('any_string_you_want')
  .on('presence', { event: 'track' }, (payload) => {
    console.log(payload)
  })
  .subscribe()

supabase
  .channel('any_string_you_want')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'movies',
    },
    (payload) => {
      console.log(payload)
    }
  )
  .subscribe()
```

----------------------------------------

TITLE: Creating a Static Route Handler with Supabase in Next.js (TypeScript)
DESCRIPTION: TypeScript implementation of a Next.js static route handler that inserts data into Supabase. It uses the typed createClient from supabase-js for type safety, processes the POST request data, and returns the inserted record.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_31

LANGUAGE: tsx
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { NextResponse } from 'next/server'

import type { Database } from '@/lib/database.types'

export async function POST(request: Request) {
  const { title } = await request.json()

  const supabase = createClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )

  const { data } = await supabase.from('todos').insert({ title }).select()
  return NextResponse.json(data)
}
```

----------------------------------------

TITLE: Event Listener for Supabase Auth Changes - Svelte
DESCRIPTION: This Svelte snippet sets up an event listener in the root +layout.svelte file to manage authentication state changes. It uses the 'onMount' lifecycle function to listen for changes and calls 'invalidate' to refresh the session state accordingly. The snippet relies on the supabase client being passed in as props.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_11

LANGUAGE: svelte
CODE:
```
<!-- src/routes/+layout.svelte -->
<script lang="ts">
  import { invalidate } from '$app/navigation'
  import { onMount } from 'svelte'

  export let data

  let { supabase, session } = data
  $: ({ supabase, session } = data)

  onMount(() => {
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((event, _session) => {
      if (_session?.expires_at !== session?.expires_at) {
        invalidate('supabase:auth')
      }
    })

    return () => subscription.unsubscribe()
  });
</script>

<slot />
```

----------------------------------------

TITLE: Listening to DELETE Events in JavaScript with Supabase Realtime
DESCRIPTION: Creates a channel to listen specifically for DELETE events in the public schema of a Supabase database. The code establishes a subscription that logs payload data whenever database deletions occur.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_20

LANGUAGE: javascript
CODE:
```
const changes = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: 'DELETE', // Listen only to DELETEs
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Executing EXPLAIN with supabase-js
DESCRIPTION: Example of using the EXPLAIN function with the supabase-js library to get execution plan with analyze and verbose options enabled.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('countries')
  .select()
  .explain({analyze:true,verbose:true})
```

----------------------------------------

TITLE: Data Loading Script with Supabase Python SDK
DESCRIPTION: Python script that uses the Supabase SDK and Faker library to generate and insert random vendor and product data into Supabase tables. It creates vendor entries and associates multiple products with each vendor using foreign key relationships.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-15-loading-data-supabase-python.mdx#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import os
import json
from dotenv import load_dotenv
from supabase import create_client, Client
from faker import Faker
import faker_commerce


def add_entries_to_vendor_table(supabase, vendor_count):
    fake = Faker()
    foreign_key_list = []
    fake.add_provider(faker_commerce.Provider)
    main_list = []
    for i in range(vendor_count):
        value = {'vendor_name': fake.company(), 'total_employees': fake.random_int(40, 169),
                 'vendor_location': fake.country()}

        main_list.append(value)
    data = supabase.table('Vendor').insert(main_list).execute()
    data_json = json.loads(data.json())
    data_entries = data_json['data']
    for i in range(len(data_entries)):
        foreign_key_list.append(int(data_entries[i]['vendor_id']))
    return foreign_key_list


def add_entries_to_product_table(supabase, vendor_id):
    fake = Faker()
    fake.add_provider(faker_commerce.Provider)
    main_list = []
    iterator = fake.random_int(1, 15)
    for i in range(iterator):
        value = {'vendor_id': vendor_id, 'product_name': fake.ecommerce_name(),
                 'inventory_count': fake.random_int(1, 100), 'price': fake.random_int(45, 100)}
        main_list.append(value)
    data = supabase.table('Product').insert(main_list).execute()


def main():
    vendor_count = 10
    load_dotenv()
    url: str = os.environ.get("SUPABASE_URL")
    key: str = os.environ.get("SUPABASE_KEY")
    supabase: Client = create_client(url, key)
    fk_list = add_entries_to_vendor_table(supabase, vendor_count)
    for i in range(len(fk_list)):
        add_entries_to_product_table(supabase, fk_list[i])


main()
```

----------------------------------------

TITLE: Creating Many-to-Many Relationship Tables
DESCRIPTION: Sets up a many-to-many relationship between movies and actors using a junction table called performances.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create table movies (
  id bigint generated by default as identity primary key,
  name text,
  description text
);

create table actors (
  id bigint generated by default as identity primary key,
  name text
);

create table performances (
  id bigint generated by default as identity primary key,
  movie_id bigint not null references movies,
  actor_id bigint not null references actors
);
```

----------------------------------------

TITLE: Signing Up New User using Supabase in Python
DESCRIPTION: This Python snippet demonstrates how to sign up a new user by providing their email address and password with the Supabase Python client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_15

LANGUAGE: python
CODE:
```
data = supabase.auth.sign_up({
  'email': 'valid.email@supabase.io',
  'password': 'example-password',
})
```

----------------------------------------

TITLE: Creating a new Supabase function for Resend
DESCRIPTION: Command to create a new Supabase Edge Function named 'resend' using the Supabase CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/send-emails.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions new resend
```

----------------------------------------

TITLE: Sign Out in Flutter
DESCRIPTION: This code snippet demonstrates how to sign out a user using the Supabase Flutter client library. It calls the `signOut` function. The function returns a Future that completes when the sign-out process is finished.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
Future<void> signOut() async {
  await supabase.auth.signOut();
}
```

----------------------------------------

TITLE: Generating TypeScript Types with Supabase CLI
DESCRIPTION: Commands to start Supabase and generate TypeScript types using the Supabase CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
supabase start
supabase gen types typescript --local > DatabaseDefinitions.ts
```

----------------------------------------

TITLE: Implementing a Kysely Query in Deno Edge Function
DESCRIPTION: Edge function that sets up a Kysely instance with the Deno PostgresDriver, defines a type-safe database schema, and executes a query to fetch animal records. It handles proper JSON serialization of bigint values and error handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/kysely-postgres.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { serve } from 'https://deno.land/std@0.175.0/http/server.ts'
import { Pool } from 'https://deno.land/x/postgres@v0.17.0/mod.ts'
import {
  Kysely,
  Generated,
  PostgresAdapter,
  PostgresIntrospector,
  PostgresQueryCompiler,
} from 'https://esm.sh/kysely@0.23.4'
import { PostgresDriver } from './DenoPostgresDriver.ts'

console.log(`Function "kysely-postgres" up and running!`)

interface AnimalTable {
  id: Generated<bigint>
  animal: string
  created_at: Date
}

// Keys of this interface are table names.
interface Database {
  animals: AnimalTable
}

// Create a database pool with one connection.
const pool = new Pool(
  {
    tls: { caCertificates: [Deno.env.get('DB_SSL_CERT')!] },
    database: 'postgres',
    hostname: Deno.env.get('DB_HOSTNAME'),
    user: 'postgres',
    port: 5432,
    password: Deno.env.get('DB_PASSWORD'),
  },
  1
)

// You'd create one of these when you start your app.
const db = new Kysely<Database>({
  dialect: {
    createAdapter() {
      return new PostgresAdapter()
    },
    createDriver() {
      return new PostgresDriver({ pool })
    },
    createIntrospector(db: Kysely<unknown>) {
      return new PostgresIntrospector(db)
    },
    createQueryCompiler() {
      return new PostgresQueryCompiler()
    },
  },
})

serve(async (_req) => {
  try {
    // Run a query
    const animals = await db.selectFrom('animals').select(['id', 'animal', 'created_at']).execute()

    // Neat, it's properly typed \o/
    console.log(animals[0].created_at.getFullYear())

    // Encode the result as pretty printed JSON
    const body = JSON.stringify(
      animals,
      (key, value) => (typeof value === 'bigint' ? value.toString() : value),
      2
    )

    // Return the response with the correct content type header
    return new Response(body, {
      status: 200,
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
      },
    })
  } catch (err) {
    console.error(err)
    return new Response(String(err?.message ?? err), { status: 500 })
  }
})
```

----------------------------------------

TITLE: Creating and Populating Float16 Vector Table
DESCRIPTION: Demonstrates how to create a table with float16 vectors and copy data from an existing float32 table, reducing memory usage by 50%.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table embedding_half (
  id serial,
  vector halfvec(1536),
  primary key (id)
);

insert into embedding_half (vector)
select
  vector::halfvec(1536)
from
  embedding_full;
```

----------------------------------------

TITLE: Signing in with OTP using JavaScript
DESCRIPTION: Showcases sending OTP for email login using JavaScript by invoking the Supabase client. Requires JavaScript library, a proper setup of Supabase, and a user's email address.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('url', 'anonKey')

// ---cut---
const { data, error } = await supabase.auth.signInWithOtp({
  email: 'valid.email@supabase.io',
  options: {
    // set this to false if you do not want the user to be automatically signed up
    shouldCreateUser: false,
  },
})
```

----------------------------------------

TITLE: Creating a TypeScript Login Component in React
DESCRIPTION: A TypeScript version of the login component that renders a form with email and password fields, along with buttons for signing in and signing up. The form submits to authentication endpoints.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_15

LANGUAGE: tsx
CODE:
```
export default function Login() {
  return (
    <form action="/auth/login" method="post">
      <label htmlFor="email">Email</label>
      <input name="email" />
      <label htmlFor="password">Password</label>
      <input type="password" name="password" />
      <button>Sign In</button>
      <button formAction="/auth/sign-up">Sign Up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Creating Many-to-Many Relationships in SQL
DESCRIPTION: Demonstrates the new requirement for detecting many-to-many relationships in PostgREST v10, where the primary key of the join table must include the foreign key columns of both ends of the relationship.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
create table books (
  id int primary key,
  name text
);

create table books_authors (
  book_id int references books (id),
  author_id int references authors (id),
  primary key (book_id, author_id) -- this is now necessary
);

create table authors (
  id int primary key,
  name text
);
```

----------------------------------------

TITLE: Filtering Supabase Realtime with Greater Than (gt) Operator
DESCRIPTION: Examples of using the 'greater than' filter to listen for changes when a column's value exceeds a specified threshold. This uses Postgres's '>' operator and works for both numeric and non-numeric types.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_44

LANGUAGE: javascript
CODE:
```
const channel = supabase
  .channel('changes')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'products',
      filter: 'quantity=gt.10',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

LANGUAGE: dart
CODE:
```
supabase
    .channel('changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.insert,
        schema: 'public',
        table: 'products',
        filter: PostgresChangeFilter(
          type: PostgresChangeFilterType.gt,
          column: 'quantity',
          value: 10,
        ),
        callback: (payload) => print(payload))
    .subscribe();
```

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("db-changes")

let changes = await myChannel.postgresChange(
  InsertAction.self,
  schema: "public",
  table: "products",
  filter: .gt("quantity", value: 10)
)

await myChannel.subscribe()

for await change in changes {
  print(change.record)
}
```

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = "public") {
    table = "products"
    filter = "quantity=gt.10"
}

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

LANGUAGE: python
CODE:
```
changes = supabase.channel('db-changes').on_postgres_changes(
  "UPDATE",
  schema="public",
  table="products",
  filter="quantity=gt.10",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Define Employees Table Schema (SQL)
DESCRIPTION: Defines the initial SQL schema for the 'employees' table, including 'id', 'name', and 'age' columns. This represents the desired state of the table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_4

LANGUAGE: sql
CODE:
```
create table "employees" (
  "id" integer not null,
  "name" text,
  "age" smallint not null
);
```

----------------------------------------

TITLE: Updating User Phone Number
DESCRIPTION: Demonstrates how to update a logged-in user's phone number. After updating, the user receives an SMS with a 6-digit pin that must be verified within 60 seconds.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/phone-login.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.auth.updateUser({
  phone: '123456789',
})
```

LANGUAGE: swift
CODE:
```
try await supabase.auth.updateUser(
  user: UserAttributes(
    phone: "123456789"
  )
)
```

LANGUAGE: kotlin
CODE:
```
supabase.auth.updateUser {
    phone = "123456789"
}
```

LANGUAGE: python
CODE:
```
response = supabase.auth.update_user({
  'phone': '123456789',
})
```

----------------------------------------

TITLE: Creating OpenAI Embeddings in TypeScript
DESCRIPTION: Demonstrates how to generate embeddings from user questions using OpenAI's API by making a POST request to the embeddings endpoint with proper authentication and input sanitization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
const embeddingResponse = await fetch('https://api.openai.com/v1/embeddings', {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${openAiKey}`,
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    model: 'text-embedding-ada-002',
    input: sanitizedQuery.replaceAll('\n', ' '),
  }),
})

if (embeddingResponse.status !== 200) {
  throw new ApplicationError('Failed to create embedding for question', embeddingResponse)
}

const {
  data: [{ embedding }],
} = await embeddingResponse.json()
```

----------------------------------------

TITLE: Creating Database Function for Similar Movies Search
DESCRIPTION: Sets up HNSW index for efficient vector similarity search and creates a database function to query similar movies based on embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- Set index on embedding column
create index on films using hnsw (embedding vector_cosine_ops);

-- Create function to find related films
create or replace function get_related_film(embedding vector(1536), film_id integer)
returns setof films
language sql
as $$
    select *
    from films
    where id != film_id
    order by films.embedding <=> get_related_film.embedding
    limit 6;
$$ security invoker;
```

----------------------------------------

TITLE: Creating HNSW Index with Cosine Distance in SQL
DESCRIPTION: Creates an HNSW index on a vector column using cosine distance operator class. This index type is best suited for vector similarity search using cosine similarity metrics.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/hnsw-indexes.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create index on items using hnsw (column_name vector_cosine_ops);
```

----------------------------------------

TITLE: Validating JSON Data with pg_jsonschema Check Constraint
DESCRIPTION: This SQL snippet shows how to create a `customers` table with a JSON column and add a check constraint using `json_matches_schema` to validate the column's content against a defined JSON Schema. The `pg_jsonschema` extension is required for this function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#_snippet_6

LANGUAGE: SQL
CODE:
```
create table customers (
  id serial primary key,
  metadata json
);

alter table customers
add constraint check_metadata check (
  json_matches_schema(
    '{
        "type": "object",
        "properties": {
            "tags": {
                "type": "array",
                "items": {
                    "type": "string",
                    "maxLength": 16
                }
            }
        }
    }',
    metadata
  )
);
```

----------------------------------------

TITLE: Implementing GitHub OAuth Sign-Out in JavaScript with Supabase
DESCRIPTION: This code snippet demonstrates how to implement user sign-out from a Supabase application using the JavaScript client. The `signOut` method removes user session data from the browser.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Direct SQL Query for Semantic Search
DESCRIPTION: Example of directly calling the semantic search function using SQL
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select *
from match_documents(
  '[...]'::vector(512), -- pass the query embedding
  0.78, -- chose an appropriate threshold for your data
  10 -- choose the number of matches
);
```

----------------------------------------

TITLE: Handling Presence Events with Dedicated Methods in Supabase Realtime (Dart)
DESCRIPTION: This code showcases the newer, more streamlined approach to handling presence events in Supabase Realtime using dedicated methods. It creates a channel, sets up handlers for presence sync, join, and leave events, subscribes to the channel, and tracks the user's presence with a timestamp when successfully subscribed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_17

LANGUAGE: dart
CODE:
```
final channel = supabase.channel('room1');

channel.onPresenceSync(
  (payload) {
    print('Synced presence state: ${channel.presenceState()}');
  },
).onPresenceJoin(
  (payload) {
    print('Newly joined presences $payload');
  },
).onPresenceLeave(
  (payload) {
    print('Newly left presences: $payload');
  },
).subscribe(
  (status, error) async {
    if (status == RealtimeSubscribeStatus.subscribed) {
      await channel
          .track({'online_at': DateTime.now().toIso8601String()});
    }
  },
);
```

----------------------------------------

TITLE: Initializing Supabase Project with CLI
DESCRIPTION: This command initializes a new Supabase project using the Supabase CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/openai.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
supabase init
```

----------------------------------------

TITLE: Updating get logged-in user in TypeScript
DESCRIPTION: Example of how to update the method to get the logged-in user in supabase-js v2. The new version uses an async getUser method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
const {
  data: { user },
} = await supabase.auth.getUser()
```

----------------------------------------

TITLE: Text Embeddings Generation with GTE-Small Model
DESCRIPTION: Demonstrates how to generate text embeddings using the gte-small model in an Edge Function. Handles request parameters and returns normalized embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const model = new Supabase.ai.Session('gte-small')

Deno.serve(async (req: Request) => {
  const params = new URL(req.url).searchParams
  const input = params.get('input')
  const output = await model.run(input, { mean_pool: true, normalize: true })
  return new Response(JSON.stringify(output), {
    headers: {
      'Content-Type': 'application/json',
      Connection: 'keep-alive',
    },
  })
})
```

----------------------------------------

TITLE: Querying Database Table with Basic Select in JavaScript
DESCRIPTION: Simple Supabase query to select the 'name' column from the 'countries' table. This translates to a lightweight URL request that won't trigger 520 errors.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
let { data: countries, error } = await supabase.from('countries').select('name')
```

----------------------------------------

TITLE: Implementing Bitbucket OAuth Sign-In in Flutter
DESCRIPTION: Set up Bitbucket OAuth authentication in a Flutter application with support for web and mobile platforms, including custom redirect handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-bitbucket.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signInWithBitbucket() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.bitbucket,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}
```

----------------------------------------

TITLE: Creating Supabase Server-Side Utility in JavaScript
DESCRIPTION: JavaScript utility to create a Supabase client for server-side operations with cookie handling for session management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  // Create a server's supabase client with newly configured cookie,
  // which could be used to maintain user's session
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
```

----------------------------------------

TITLE: Updating Existing Secrets in Vault
DESCRIPTION: Shows how to update an existing secret using vault.update_secret(). The function takes the secret's UUID and allows updating the secret value, name, and description.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/vault.mdx#2025-04-22_snippet_3

LANGUAGE: sql
CODE:
```
select
  vault.update_secret(
    '7095d222-efe5-4cd5-b5c6-5755b451e223',
    'n3w_upd@ted_s3kret',
    'updated_unique_name',
    'This is the updated description'
  );
```

----------------------------------------

TITLE: Sign Out - Kotlin
DESCRIPTION: This Kotlin snippet shows how to sign out a user using the Supabase client library. It calls the signOut method to remove the user's session and clear local storage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-figma.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Organizing Complex Queries with CTEs in Postgres SQL
DESCRIPTION: Example of using Common Table Expressions (CTEs) to organize complex queries in a readable, linear fashion. Includes comments for each CTE block to explain its purpose.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
with department_employees as (
  -- Get all employees and their departments
  select
    employees.department_id,
    employees.first_name,
    employees.last_name,
    departments.department_name
  from
    employees
  join
    departments on employees.department_id = departments.department_id
),
employee_counts as (
  -- Count how many employees in each department
  select
    department_name,
    count(*) as num_employees
  from
    department_employees
  group by
    department_name
)
select
  department_name,
  num_employees
from
  employee_counts
order by
  department_name;
```

----------------------------------------

TITLE: Creating User-Specific File Access Policy in SQL
DESCRIPTION: This SQL snippet demonstrates how to create a policy that grants access to a specific file for a particular Supabase user, integrating with the User Management system.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-30-supabase-storage.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create policy crud_uid_file
on storage.objects for all using (
	bucket_id = 'avatars'
	and name = 'folder/only_uid.jpg'
	and (select auth.uid()) = 'd8c7bce9-cfeb-497b-bd61-e66ce2cbdaa2'
);
```

----------------------------------------

TITLE: Creating Trigger for New User - SQL
DESCRIPTION: Sets up a trigger function to automatically insert new user details into the public.profiles table when a user is created in auth.users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- inserts a row into public.profiles
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = ''
as $$
begin
  insert into public.profiles (id, first_name, last_name)
  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name');
  return new;
end;
$$;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
```

----------------------------------------

TITLE: Resetting Password with Supabase in Kotlin
DESCRIPTION: This snippet illustrates how to initiate a password reset process using the Supabase Kotlin client. It sends a reset password email to the user's email address with a redirect URL for updating the password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_23

LANGUAGE: kotlin
CODE:
```
supabase.auth.resetPasswordForEmail(
    email = "valid.email@supabase.io",
    redirectUrl = "http://example.com/account/update-password"
)
```

----------------------------------------

TITLE: Auth UI with Social Providers
DESCRIPTION: Implementation of Auth UI with social authentication providers like Google, Facebook, and Twitter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'
import { ThemeSupa } from '@supabase/auth-ui-shared'

const supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')

const App = () => (
  <Auth
    supabaseClient={supabase}
    appearance={{ theme: ThemeSupa }}
    providers={['google', 'facebook', 'twitter']}
  />
)
```

----------------------------------------

TITLE: Querying Supabase Database using JavaScript Client in Edge Function
DESCRIPTION: This snippet demonstrates how to use the Supabase JavaScript client within an Edge Function to query a database. It sets up a Deno server, creates a Supabase client with environment variables, and performs a select query on a 'countries' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-12-edge-functions-faster-smaller.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import { createClient } from 'npm:@supabase/supabase-js@2'

Deno.serve(async (_req) => {
  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    )

    const { data, error } = await supabase.from('countries').select('*')

    if (error) {
      throw error
    }

    return new Response(JSON.stringify({ data }), {
      headers: { 'Content-Type': 'application/json' },
      status: 200,
    })
  } catch (err) {
    return new Response(String(err?.message ?? err), { status: 500 })
  }
})
```

----------------------------------------

TITLE: Initializing Supabase Client and Signing In with Google OAuth in JavaScript
DESCRIPTION: This snippet demonstrates how to create a Supabase client and use it to sign in a user with Google OAuth. It includes an option to request offline access and prompt for consent to obtain a refresh token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('url', 'anonKey')

// ---cut---
supabase.auth.signInWithOAuth({
  provider: 'google',
})
```

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

// ---cut---
const { data, error } = await supabase.auth.signInWithOAuth({
  provider: 'google',
  options: {
    queryParams: {
      access_type: 'offline',
      prompt: 'consent',
    },
  },
})
```

----------------------------------------

TITLE: Creating MFA Opt-in Policy in PostgreSQL
DESCRIPTION: Sets a restrictive policy for users who have opted-in to MFA. Users with at least one verified MFA factor require 'aal2'; otherwise, 'aal1' or 'aal2' is allowed. This SQL policy ensures security by applying the most restrictive rule on the table, regardless of other existing policies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create policy "Policy name."
  on table_name
  as restrictive -- very important!
  to authenticated
  using (
    array[(select auth.jwt()->>'aal')] <@ (
      select
          case
            when count(id) > 0 then array['aal2']
            else array['aal1', 'aal2']
          end as aal
        from auth.mfa_factors
        where ((select auth.uid()) = user_id) and status = 'verified'
    ));
```

----------------------------------------

TITLE: Using explain() Method with Supabase Query
DESCRIPTION: Example of how to chain the explain() method to a Supabase query to get the execution plan for a select operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/debugging-performance.mdx#2025-04-21_snippet_1

LANGUAGE: ts
CODE:
```
const { data, error } = await supabase
  .from('instruments')
  .select()
  .explain()
```

----------------------------------------

TITLE: Basic LangChain Vector Store Usage with Supabase
DESCRIPTION: Example showing how to initialize and use Supabase vector store with LangChain for similarity search operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/langchain.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { SupabaseVectorStore } from 'langchain/vectorstores/supabase'
import { OpenAIEmbeddings } from 'langchain/embeddings/openai'
import { createClient } from '@supabase/supabase-js'

const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY
if (!supabaseKey) throw new Error(`Expected SUPABASE_SERVICE_ROLE_KEY`)

const url = process.env.SUPABASE_URL
if (!url) throw new Error(`Expected env var SUPABASE_URL`)

export const run = async () => {
  const client = createClient(url, supabaseKey)

  const vectorStore = await SupabaseVectorStore.fromTexts(
    ['Hello world', 'Bye bye', "What's this?"],
    [{ id: 2 }, { id: 1 }, { id: 3 }],
    new OpenAIEmbeddings(),
    {
      client,
      tableName: 'documents',
      queryName: 'match_documents',
    }
  )

  const resultOne = await vectorStore.similaritySearch('Hello world', 1)

  console.log(resultOne)
}
```

----------------------------------------

TITLE: Exporting Database Using pg_dump
DESCRIPTION: This code snippet demonstrates how to export a database from Neon using the pg_dump command. It outlines the command options to ensure a full migration of the database schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/neon.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pg_dump "$OLD_DB_URL" \
  --clean \
  --if-exists \
  --quote-all-identifiers \
  --no-owner \
  --no-privileges \
  > dump.sql
```

----------------------------------------

TITLE: Restoring PostgreSQL Logical Backup
DESCRIPTION: Command to restore a PostgreSQL database from a logical backup SQL file using the psql utility. Executes the SQL commands in the backup file to recreate the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-17-postgresql-physical-logical-backups.mdx#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
psql -d db_name -f file_name.sql
```

----------------------------------------

TITLE: Generating Database Migration
DESCRIPTION: Command to generate migration files by comparing declared schema against current database state. Requires a descriptive migration name as parameter.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/declarative-database-schema.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase db diff -f <migration_name>
```

----------------------------------------

TITLE: Implementing User Registration Page in Flutter with Supabase Auth
DESCRIPTION: Creates a registration page with email and password fields. Implements Supabase signUp method with email redirect configuration for MFA enrollment. Includes error handling and loading states.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_7

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:mfa_app/main.dart';
import 'package:mfa_app/pages/auth/login_page.dart';
import 'package:mfa_app/pages/mfa/enroll_page.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class RegisterPage extends StatefulWidget {
  static const route = '/auth/register';

  const RegisterPage({super.key});

  @override
  State<RegisterPage> createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  bool _isLoading = false;

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Register')),
      body: ListView(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 24),
        children: [
          TextFormField(
            controller: _emailController,
            decoration: const InputDecoration(
              label: Text('Email'),
            ),
          ),
          const SizedBox(height: 16),
          TextFormField(
            controller: _passwordController,
            decoration: const InputDecoration(
              label: Text('Password'),
            ),
            obscureText: true,
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () async {
              try {
                setState(() {
                  _isLoading = true;
                });
                final email = _emailController.text.trim();
                final password = _passwordController.text.trim();
                await supabase.auth.signUp(
                  email: email,
                  password: password,
                  emailRedirectTo:
                      'mfa-app://callback${MFAEnrollPage.route}',
                );
                if (mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Check your inbox.')));
                }
              } on AuthException catch (error) {
                ScaffoldMessenger.of(context)
                    .showSnackBar(SnackBar(content: Text(error.message)));
              } catch (error) {
                ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Unexpected error occurred')));
              }
              if (mounted) {
                setState(() {
                  _isLoading = false;
                });
              }
            },
            child: _isLoading
                ? const SizedBox(
                    height: 24,
                    width: 24,
                    child: Center(
                        child: CircularProgressIndicator(color: Colors.white)),
                  )
                : const Text('Register'),
          ),
          const SizedBox(height: 16),
          TextButton(
            onPressed: () => context.push(LoginPage.route),
            child: const Text('I already have an account'),
          )
        ],
      ),
    );
  }
}
```

----------------------------------------

TITLE: Creating Lock Monitor View in SQL for Supabase
DESCRIPTION: This SQL script creates a view named 'lock_monitor' in the public schema. It joins various system tables to provide information about blocked queries, blocking queries, and their durations. The view helps in identifying and troubleshooting query blocking issues in the current database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-check-if-my-queries-are-being-blocked-by-other-queries-NSKtR1.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create view
  public.lock_monitor as
select
  coalesce(
    blockingl.relation::regclass::text,
    blockingl.locktype
  ) as locked_item,
  now() - blockeda.query_start as waiting_duration,
  blockeda.pid as blocked_pid,
  blockeda.query as blocked_query,
  blockedl.mode as blocked_mode,
  blockinga.pid as blocking_pid,
  blockinga.query as blocking_query,
  blockingl.mode as blocking_mode
from
  pg_locks blockedl
  join pg_stat_activity blockeda on blockedl.pid = blockeda.pid
  join pg_locks blockingl on (
    blockingl.transactionid = blockedl.transactionid
    or blockingl.relation = blockedl.relation
    and blockingl.locktype = blockedl.locktype
  )
  and blockedl.pid <> blockingl.pid
  join pg_stat_activity blockinga on blockingl.pid = blockinga.pid
  and blockinga.datid = blockeda.datid
where
  not blockedl.granted
  and blockinga.datname = current_database();
```

----------------------------------------

TITLE: Demonstrating Implicit RLS Policy in SQL Queries
DESCRIPTION: Shows how a Row Level Security policy is implicitly added to SQL queries, effectively filtering results to only include rows where the authenticated user ID matches the user_id column.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-01-realtime-row-level-security-in-postgresql.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select *
from todos
where auth.uid() = todos.user_id; -- Policy is implicitly added.
```

----------------------------------------

TITLE: Receiving Postgres Changes with Supabase Realtime in JavaScript
DESCRIPTION: This snippet demonstrates how to use Supabase Realtime to listen for Postgres database changes. It shows how to create a channel, set up a filter for specific database events, and handle the received events.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-18-supabase-realtime-multiplayer-general-availability.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const channelId = '#random'

// Create a filter only for new messages
const databaseFilter = {
  schema: 'public',
  table: 'messages',
  filter: `room_id=eq.${channelId}`,
  event: 'INSERT',
}

const channel = supabase
  .channel(channelId)
  .on('postgres_changes', databaseFilter, (payload) => receivedDatabaseEvent(payload))
  .subscribe()

const receivedDatabaseEvent = (event) => {
  const { payload } = event
  console.log(payload)
}
```

----------------------------------------

TITLE: Implementing a Salary Update Trigger Function in PostgreSQL
DESCRIPTION: This example creates a trigger function that logs salary changes and a corresponding trigger. The function inserts a record into a salary_log table whenever an employee's salary is updated.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/triggers.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Example: Update salary_log when salary is updated
create function update_salary_log()
returns trigger
language plpgsql
as $$
begin
  insert into salary_log(employee_id, old_salary, new_salary)
  values (new.id, old.salary, new.salary);
  return new;
end;
$$;

create trigger salary_update_trigger
after update on employees
for each row
execute function update_salary_log();
```

----------------------------------------

TITLE: Creating RLS Policy to Restrict Anonymous Users from Creating Posts
DESCRIPTION: SQL policy that prevents anonymous users from inserting new posts while allowing permanent authenticated users to do so.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create policy "Only permanent users can create posts"
on public.posts
for insert
to authenticated -- Note: user is still authenticated
with check (
  (select auth.jwt() ->> 'is_anonymous')::boolean is false
);
```

----------------------------------------

TITLE: Pulling Remote Database Changes
DESCRIPTION: Command to pull database changes from a remote Supabase branch to local migrations directory using database URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
supabase db pull --db-url "postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres"
```

----------------------------------------

TITLE: Creating a Trigger Function with Associated Trigger
DESCRIPTION: A PostgreSQL trigger function that updates a timestamp column automatically before updates, including the trigger creation statement.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-functions.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create or replace function my_schema.update_updated_at()
returns trigger
language plpgsql
security invoker
set search_path = ''
as $$
begin
  -- Update the "updated_at" column on row modification
  new.updated_at := now();
  return new;
end;
$$;

create trigger update_updated_at_trigger
before update on my_schema.my_table
for each row
execute function my_schema.update_updated_at();
```

----------------------------------------

TITLE: Initializing Drizzle ORM with Vercel Postgres in TypeScript
DESCRIPTION: Sets up a Drizzle ORM configuration for Vercel Postgres, defining a users table schema and creating a database connection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres/serverless-drivers.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { pgTable, serial, text, timestamp, uniqueIndex } from 'drizzle-orm/pg-core'
import { InferSelectModel, InferInsertModel } from 'drizzle-orm'
import { sql } from '@vercel/postgres'
import { drizzle } from 'drizzle-orm/vercel-postgres'

export const UsersTable = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: text('name').notNull(),
    email: text('email').notNull(),
    image: text('image').notNull(),
    createdAt: timestamp('createdAt').defaultNow().notNull(),
  },
  (users) => {
    return {
      uniqueIdx: uniqueIndex('unique_idx').on(users.email),
    }
  }
)

export type User = InferSelectModel<typeof UsersTable>
export type NewUser = InferInsertModel<typeof UsersTable>

// Connect to Vercel Postgres
export const db = drizzle(sql)
```

----------------------------------------

TITLE: Advanced Image Transformation with Supabase Storage JavaScript API
DESCRIPTION: Shows how to download a resized image with additional transformation parameters like resize mode using the JavaScript API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-13-storage-image-resizing-smart-cdn.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
supabase.storage.from('bucket').download('image.jpg', {
  transform: {
    width: 800,
    height: 300,
    resize: 'contain', // 'contain' | 'cover' | 'fill'
  },
})
```

----------------------------------------

TITLE: GitHub Actions Workflow for Database Testing
DESCRIPTION: CI/CD configuration for automated database testing using GitHub Actions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/overview.mdx#2025-04-21_snippet_5

LANGUAGE: yaml
CODE:
```
name: Database Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1

      - name: Start Supabase
        run: supabase start

      - name: Run Tests
        run: supabase test db
```

----------------------------------------

TITLE: Configuring Supabase and Route Protection in SvelteKit Hooks
DESCRIPTION: This snippet demonstrates how to set up Supabase server client, implement safe session retrieval, and protect multiple routes using SvelteKit's sequence helper in the hooks.server.js file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
// src/hooks.server.js
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'
import { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit'
import { redirect, error } from '@sveltejs/kit'
import { sequence } from '@sveltejs/kit/hooks'

async function supabase({ event, resolve }) {
  event.locals.supabase = createSupabaseServerClient({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event,
  })

  /**
   * Unlike `supabase.auth.getSession`, which is unsafe on the server because it
   * doesn't validate the JWT, this function validates the JWT by first calling
   * `getUser` and aborts early if the JWT signature is invalid.
   */
  event.locals.safeGetSession = async () => {
    const {
      data: { user },
      error,
    } = await event.locals.supabase.auth.getUser()
    if (error) return { session: null, user: null }

    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}

async function authorization({ event, resolve }) {
  // protect requests to all routes that start with /protected-routes
  if (event.url.pathname.startsWith('/protected-routes') && event.request.method === 'GET') {
    const { session } = await event.locals.safeGetSession()
    if (!session) {
      // the user is not signed in
      redirect(303, '/')
    }
  }

  // protect POST requests to all routes that start with /protected-posts
  if (event.url.pathname.startsWith('/protected-posts') && event.request.method === 'POST') {
    const { session } = await event.locals.safeGetSession()
    if (!session) {
      // the user is not signed in
      throw error(303, '/')
    }
  }

  return resolve(event)
}

export const handle = sequence(supabase, authorization)
```

----------------------------------------

TITLE: Applying Database Migration - Bash
DESCRIPTION: Command to reset the database and apply current migrations
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase db reset
```

----------------------------------------

TITLE: Edge Functions Error Handling - JavaScript
DESCRIPTION: Example showing how to handle different types of errors when invoking Edge Functions using supabase-js library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/development-tips.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { FunctionsHttpError, FunctionsRelayError, FunctionsFetchError } from '@supabase/supabase-js'

const { data, error } = await supabase.functions.invoke('hello', {
  headers: { 'my-custom-header': 'my-custom-header-value' },
  body: { foo: 'bar' },
})

if (error instanceof FunctionsHttpError) {
  const errorMessage = await error.context.json()
  console.log('Function returned an error', errorMessage)
} else if (error instanceof FunctionsRelayError) {
  console.log('Relay error:', error.message)
} else if (error instanceof FunctionsFetchError) {
  console.log('Fetch error:', error.message)
}
```

----------------------------------------

TITLE: Using Next.js Image Component with Supabase Loader
DESCRIPTION: This snippet demonstrates how to use the Next.js Image component with the custom Supabase loader for image optimization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_21

LANGUAGE: typescript
CODE:
```
import Image from 'next/image'

const MyImage = (props) => {
  return <Image src="bucket/image.png" alt="Picture of the author" width={500} height={500} />
}
```

----------------------------------------

TITLE: Listening only to 'INSERT' events in Swift
DESCRIPTION: This Swift snippet configures a Supabase client to listen only for INSERT events in the 'public' schema using async/await. It logs specific changes by printing action records. The channel cannot be named 'realtime'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_12

LANGUAGE: Swift
CODE:
```
let myChannel = await supabase.channel("schema-db-changes")

let changes = await myChannel.postgresChange(InsertAction.self, schema: "public")

await myChannel.subscribe()

for await change in changes {
  print(change.record)
}
```

----------------------------------------

TITLE: Creating a Table with JSONB Fields in PostgreSQL
DESCRIPTION: Creates a calendar table with standard SQL fields and JSONB fields for more complex data structures. The table includes fields for basic information like date and weight, plus JSONB fields for storing food, water, and exercise logs as structured data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
CREATE TABLE calendar (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    date date,
    user_id uuid NOT NULL,
    weight numeric,
    notes text,
    food_log jsonb,
    water_log jsonb,
    exercise_log jsonb
);
-- (Optional) - create a foreign key relationship for the user_id field
ALTER TABLE ONLY calendar
    ADD CONSTRAINT calendar_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);
```

----------------------------------------

TITLE: Implementing Row Level Security for SSO Tenants
DESCRIPTION: SQL policy definition for implementing multi-tenant access control using Row Level Security in PostgreSQL, utilizing the provider's identifier from the user's JWT.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create policy "Only allow read-write access to tenants" on tablename as restrictive to authenticated using (
  tenant_id = (select auth.jwt() -> 'app_metadata' ->> 'provider')
);
```

----------------------------------------

TITLE: Installing and Using the Index Advisor Extension to Optimize PostgreSQL Queries
DESCRIPTION: Demonstrates how to install and use the olirice-index_advisor extension to analyze a SQL query and recommend indexes that would improve query performance. The example includes creating a test table and then getting index recommendations for a simple query.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_5

LANGUAGE: sql
CODE:
```
select dbdev.install('olirice-index_advisor');
create extension if not exists hypopg;
create extension "olirice-index_advisor";

-- Create a dummy table
create table account(
	id int primary key,
	name text
);

-- Search for indexes to optimize "select id from account where name = 'adsf'"
select
	*
from
	index_advisor($$select id from account where name = 'Foo'$$)
```

----------------------------------------

TITLE: Setting Custom JWT for Realtime in Swift
DESCRIPTION: This Swift snippet illustrates how to set a custom JWT token for Supabase Realtime authentication. The `setAuth` method is called to apply the custom token.  A Realtime channel is then set up to listen for Postgres changes on a specific table with a filter applied, and then subscribed to. It then iterates through the changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_51

LANGUAGE: swift
CODE:
```
await supabase.realtime.setAuth("your-custom-jwt")

let myChannel = await supabase.channel("db-changes")

let changes = await myChannel.postgresChange(
  UpdateAction.self,
  schema: "public",
  table: "products",
  filter: "name=in.(red, blue, yellow)"
)

await myChannel.subscribe()

for await change in changes {
  print(change.record)
}
```

----------------------------------------

TITLE: Sign Out Implementation in JavaScript
DESCRIPTION: Method to sign out users and clear browser session and local storage in a JavaScript Supabase application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-bitbucket.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Invoking Edge Functions with Automatic Content Type Detection in TypeScript
DESCRIPTION: Demonstrates the simplified invocation of Edge Functions in supabase-js v2, which now automatically detects the content type for request/response bodies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
// v2
const { data: user, error } = await supabase.functions.invoke('hello', {
  body: { foo: 'bar' },
})

// v1
const { data: user, error } = await supabase.functions.invoke('hello', {
  headers: { 'Content-Type': 'application/json' }
  body: JSON.stringify({ foo: 'bar' }),
})
```

----------------------------------------

TITLE: Decoding JWT API Key Structure
DESCRIPTION: Example of a decoded Supabase API key showing the JWT structure with role, issued date, and expiry date.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "role": "anon",
  "iat": 1625137684,
  "exp": 1940713684
}
```

----------------------------------------

TITLE: Implementing JSON Schema Validation with Check Constraints
DESCRIPTION: Example showing how to use pg_jsonschema with a table definition that includes a check constraint. The constraint ensures that JSON data in the metadata column conforms to a specified schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_jsonschema.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table customer(
    id serial primary key,
    ...
    metadata json,

    check (
        json_matches_schema(
            '{
                "type": "object",
                "properties": {
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxLength": 16
                        }
                    }
                }
            }',
            metadata
        )
    )
);

-- Example: Valid Payload
insert into customer(metadata)
values ('{"tags": ["vip", "darkmode-ui"]}');
-- Result:
--   INSERT 0 1

-- Example: Invalid Payload
insert into customer(metadata)
values ('{"tags": [1, 3]}');
-- Result:
--   ERROR:  new row for relation "customer" violates check constraint "customer_metadata_check"
--   DETAIL:  Failing row contains (2, {"tags": [1, 3]}).
```

----------------------------------------

TITLE: Serving Supabase Function Locally
DESCRIPTION: Runs a specific Supabase function locally for testing before redeployment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/quickstart.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase functions serve function-name
```

----------------------------------------

TITLE: Optimized Supabase Query With Filter
DESCRIPTION: Example of an optimized Supabase query with explicit user_id filter for better performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
const { data } = supabase
  .from('table')
  .select()
  .eq('user_id', userId)
```

----------------------------------------

TITLE: Copying Data to New Column with Type Casting in Postgres
DESCRIPTION: This SQL command updates the table by copying data from the old column to the new column, casting it to the new data type. It's the second step in the alternative approach.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/slow-execution-of-alter-table-on-large-table-when-changing-column-type-qmZRpZ.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
UPDATE "table_name" SET "old_column_name" = "new_column_name"::new_data_type;
```

----------------------------------------

TITLE: Implementing Login Page with Magic Link Authentication in Flutter
DESCRIPTION: Dart code for a Flutter widget that handles user login using Supabase magic link authentication. It includes email input, magic link sending, and auth state management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:supabase_quickstart/main.dart';
import 'package:supabase_quickstart/pages/account_page.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  bool _isLoading = false;
  bool _redirecting = false;
  late final TextEditingController _emailController = TextEditingController();
  late final StreamSubscription<AuthState> _authStateSubscription;

  Future<void> _signIn() async {
    try {
      setState(() {
        _isLoading = true;
      });
      await supabase.auth.signInWithOtp(
        email: _emailController.text.trim(),
        emailRedirectTo:
            kIsWeb ? null : 'io.supabase.flutterquickstart://login-callback/',
      );
      if (mounted) {
        context.showSnackBar('Check your email for a login link!');

        _emailController.clear();
      }
    } on AuthException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  void initState() {
    _authStateSubscription = supabase.auth.onAuthStateChange.listen(
      (data) {
        if (_redirecting) return;
        final session = data.session;
        if (session != null) {
          _redirecting = true;
          Navigator.of(context).pushReplacement(
            MaterialPageRoute(builder: (context) => const AccountPage()),
          );
        }
      },
      onError: (error) {
        if (error is AuthException) {
          context.showSnackBar(error.message, isError: true);
        } else {
          context.showSnackBar('Unexpected error occurred', isError: true);
        }
      },
    );
    super.initState();
  }

  @override
  void dispose() {
    _emailController.dispose();
    _authStateSubscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sign In')),
      body: ListView(
        padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 12),
        children: [
          const Text('Sign in via the magic link with your email below'),
          const SizedBox(height: 18),
          TextFormField(
            controller: _emailController,
            decoration: const InputDecoration(labelText: 'Email'),
          ),
          const SizedBox(height: 18),
          ElevatedButton(
            onPressed: _isLoading ? null : _signIn,
            child: Text(_isLoading ? 'Sending...' : 'Send Magic Link'),
          ),
        ],
      ),
    );
  }
}
```

----------------------------------------

TITLE: Creating Security-Invoker View
DESCRIPTION: Example of creating a view that respects RLS policies in Postgres 15 and above.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create view <VIEW_NAME>
with(security_invoker = true)
as select <QUERY>
```

----------------------------------------

TITLE: Signing out a user in Supabase Auth (JavaScript)
DESCRIPTION: This snippet shows how to sign out the currently authenticated user using the Supabase Auth client. Signing out a user does not affect the Monthly Active Users (MAU) count, as the user was already counted upon their successful login or token refresh.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/monthly-active-users.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
const {error} = await supabase.auth.signOut()
```

----------------------------------------

TITLE: Creating SQL Triggers for Embedding Enqueue
DESCRIPTION: The SQL snippet defines triggers and associated functions to enqueue embedding jobs for the 'documents' table when content is inserted or updated. It includes 'after insert' and 'after update' triggers that utilize the 'util.queue_embeddings' function. Changes to 'title' or 'content' lead to re-generation of embeddings, requiring the 'embedding_input' function for input generation and specifying 'embedding' as the destination storage column.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_13

LANGUAGE: sql
CODE:
```
-- Customize the input for embedding generation
-- e.g. Concatenate title and content with a markdown header
create or replace function embedding_input(doc documents)
returns text
language plpgsql
immutable
as $$
begin
  return '# ' || doc.title || E'\n\n' || doc.content;
end;
$$;

-- Trigger for insert events
create trigger embed_documents_on_insert
  after insert
  on documents
  for each row
  execute function util.queue_embeddings('embedding_input', 'embedding');

-- Trigger for update events
create trigger embed_documents_on_update
  after update of title, content -- must match the columns in embedding_input()
  on documents
  for each row
  execute function util.queue_embeddings('embedding_input', 'embedding');
```

----------------------------------------

TITLE: Implementing InfiniteList Component with Supabase in React
DESCRIPTION: A reusable component that handles infinite scrolling for Supabase tables. It uses the Intersection Observer API to detect when the user has scrolled to the bottom and automatically fetches the next page of data. The component includes customizable renderers for items, loading states, empty states, and end-of-list messages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/infinite-query-hook.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'

import { cn } from '@/lib/utils'
import {
  SupabaseQueryHandler,
  SupabaseTableData,
  SupabaseTableName,
  useInfiniteQuery,
} from '@/hooks/use-infinite-query'
import * as React from 'react'

interface InfiniteListProps<TableName extends SupabaseTableName> {
  tableName: TableName
  columns?: string
  pageSize?: number
  trailingQuery?: SupabaseQueryHandler<TableName>
  renderItem: (item: SupabaseTableData<TableName>, index: number) => React.ReactNode
  className?: string
  renderNoResults?: () => React.ReactNode
  renderEndMessage?: () => React.ReactNode
  renderSkeleton?: (count: number) => React.ReactNode
}

const DefaultNoResults = () => (
  <div className="text-center text-muted-foreground py-10">No results.</div>
)

const DefaultEndMessage = () => (
  <div className="text-center text-muted-foreground py-4 text-sm">You&apos;ve reached the end.</div>
)

const defaultSkeleton = (count: number) => (
  <div className="flex flex-col gap-2 px-4">
    {Array.from({ length: count }).map((_, index) => (
      <div key={index} className="h-4 w-full bg-muted animate-pulse" />
    ))}
  </div>
)

export function InfiniteList<TableName extends SupabaseTableName>({
  tableName,
  columns = '*',
  pageSize = 20,
  trailingQuery,
  renderItem,
  className,
  renderNoResults = DefaultNoResults,
  renderEndMessage = DefaultEndMessage,
  renderSkeleton = defaultSkeleton,
}: InfiniteListProps<TableName>) {
  const { data, isFetching, hasMore, fetchNextPage, isSuccess } = useInfiniteQuery({
    tableName,
    columns,
    pageSize,
    trailingQuery,
  })

  // Ref for the scrolling container
  const scrollContainerRef = React.useRef<HTMLDivElement>(null)

  // Intersection observer logic - target the last rendered *item* or a dedicated sentinel
  const loadMoreSentinelRef = React.useRef<HTMLDivElement>(null)
  const observer = React.useRef<IntersectionObserver | null>(null)

  React.useEffect(() => {
    if (observer.current) observer.current.disconnect()

    observer.current = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && hasMore && !isFetching) {
          fetchNextPage()
        }
      },
      {
        root: scrollContainerRef.current, // Use the scroll container for scroll detection
        threshold: 0.1, // Trigger when 10% of the target is visible
        rootMargin: '0px 0px 100px 0px', // Trigger loading a bit before reaching the end
      }
    )

    if (loadMoreSentinelRef.current) {
      observer.current.observe(loadMoreSentinelRef.current)
    }

    return () => {
      if (observer.current) observer.current.disconnect()
    }
  }, [isFetching, hasMore, fetchNextPage])

  return (
    <div ref={scrollContainerRef} className={cn('relative h-full overflow-auto', className)}>
      <div>
        {isSuccess && data.length === 0 && renderNoResults()}

        {data.map((item, index) => renderItem(item, index))}

        {isFetching && renderSkeleton && renderSkeleton(pageSize)}

        <div ref={loadMoreSentinelRef} style={{ height: '1px' }} />

        {!hasMore && data.length > 0 && renderEndMessage()}
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Starting Supabase Local Development Server
DESCRIPTION: Command to start the Supabase server locally for testing Edge Functions in a development environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/unit-test.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase start
```

----------------------------------------

TITLE: Pulling Remote Schema Changes
DESCRIPTION: Command to synchronize local environment with remote schema changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
supabase db pull
```

----------------------------------------

TITLE: Implementing Authentication Component in Angular
DESCRIPTION: Creating an AuthComponent to handle user sign-in using magic link authentication with Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { Component } from '@angular/core'
import { FormBuilder } from '@angular/forms'
import { SupabaseService } from '../supabase.service'

@Component({
  selector: 'app-auth',
  templateUrl: './auth.component.html',
  styleUrls: ['./auth.component.css'],
})
export class AuthComponent {
  loading = false

  signInForm = this.formBuilder.group({
    email: '',
  })

  constructor(
    private readonly supabase: SupabaseService,
    private readonly formBuilder: FormBuilder
  ) {}

  async onSubmit(): Promise<void> {
    try {
      this.loading = true
      const email = this.signInForm.value.email as string
      const { error } = await this.supabase.signIn(email)
      if (error) throw error
      alert('Check your email for the login link!')
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      this.signInForm.reset()
      this.loading = false
    }
  }
}
```

LANGUAGE: html
CODE:
```
<div class="row flex-center flex">
  <div class="col-6 form-widget" aria-live="polite">
    <h1 class="header">Supabase + Angular</h1>
    <p class="description">Sign in via magic link with your email below</p>
    <form [formGroup]="signInForm" (ngSubmit)="onSubmit()" class="form-widget">
      <div>
        <label for="email">Email</label>
        <input
          id="email"
          formControlName="email"
          class="inputField"
          type="email"
          placeholder="Your email"
        />
      </div>
      <div>
        <button type="submit" class="button block" [disabled]="loading">
          {{ loading ? 'Loading' : 'Send magic link' }}
        </button>
      </div>
    </form>
  </div>
</div>
```

----------------------------------------

TITLE: Querying Product and Vendor Data in SQL
DESCRIPTION: This SQL query joins the Product and Vendor tables to retrieve vendor names, product names, and total employees for vendors with employees. It demonstrates how to create a custom query in Metabase for visualization purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-29-visualizing-supabase-data-using-metabase.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select "Vendor".vendor_name, product_name, "Vendor".total_employees
from
  "Product"
  left join "Vendor" on "Product".vendor_id = "Vendor".vendor_id
where "Vendor".total_employees;
```

----------------------------------------

TITLE: Invoking Edge Function with JavaScript Supabase Client
DESCRIPTION: Shows how to invoke the Edge Function using the Supabase JavaScript client library, including client initialization and function invocation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-quickstart.mdx#2025-04-21_snippet_5

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY)

const { data, error } = await supabase.functions.invoke('hello-world', {
  body: { name: 'Functions' },
})
```

----------------------------------------

TITLE: Implementing Resumable Uploads with tus-js-client in JavaScript
DESCRIPTION: This snippet demonstrates how to use tus-js-client to implement resumable uploads to Supabase Storage. It includes error handling, progress tracking, and configuration for the TUS protocol.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/resumable-uploads.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const tus = require('tus-js-client')

const projectId = ''

async function uploadFile(bucketName, fileName, file) {
    const { data: { session } } = await supabase.auth.getSession()

    return new Promise((resolve, reject) => {
        var upload = new tus.Upload(file, {
            endpoint: `https://${projectId}.supabase.co/storage/v1/upload/resumable`,
            retryDelays: [0, 3000, 5000, 10000, 20000],
            headers: {
                authorization: `Bearer ${session.access_token}`,
                'x-upsert': 'true', // optionally set upsert to true to overwrite existing files
            },
            uploadDataDuringCreation: true,
            removeFingerprintOnSuccess: true, // Important if you want to allow re-uploading the same file https://github.com/tus/tus-js-client/blob/main/docs/api.md#removefingerprintonsuccess
            metadata: {
                bucketName: bucketName,
                objectName: fileName,
                contentType: 'image/png',
                cacheControl: 3600,
            },
            chunkSize: 6 * 1024 * 1024, // NOTE: it must be set to 6MB (for now) do not change it
            onError: function (error) {
                console.log('Failed because: ' + error)
                reject(error)
            },
            onProgress: function (bytesUploaded, bytesTotal) {
                var percentage = ((bytesUploaded / bytesTotal) * 100).toFixed(2)
                console.log(bytesUploaded, bytesTotal, percentage + '%')
            },
            onSuccess: function () {
                console.log('Download %s from %s', upload.file.name, upload.url)
                resolve()
            },
        })


        // Check if there are any previous uploads to continue.
        return upload.findPreviousUploads().then(function (previousUploads) {
            // Found previous uploads so we select the first one.
            if (previousUploads.length) {
                upload.resumeFromPreviousUpload(previousUploads[0])
            }

            // Start the upload
            upload.start()
        })
    })
}
```

----------------------------------------

TITLE: Setting Up the App Component with Supabase Authentication
DESCRIPTION: Implements the main App component with Supabase authentication integration. Handles session retrieval on mount and subscribes to auth state changes to keep the user state up to date.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_7

LANGUAGE: html
CODE:
```
<template>
  <ion-app>
    <ion-router-outlet />
  </ion-app>
</template>

<script lang="ts">
  import { IonApp, IonRouterOutlet, useIonRouter } from '@ionic/vue'
  import { defineComponent, ref, onMounted } from 'vue'
  import { supabase } from './supabase'

  export default defineComponent({
    name: 'App',
    components: {
      IonApp,
      IonRouterOutlet,
    },
    setup() {
      const router = useIonRouter()
      const user = ref(null)

      onMounted(() => {
        supabase.auth
          .getSession()
          .then((resp) => {
            user.value = resp.data.session?.user ?? null
          })
          .catch((err) => {
            console.log('Error fetching session', err)
          })

        supabase.auth.onAuthStateChange((_event, session) => {
          user.value = session?.user ?? null
        })
      })

      return { user }
    },
  })
</script>
```

----------------------------------------

TITLE: Creating Employees Table - SQL
DESCRIPTION: SQL migration to create the employees table with id, name, email, and timestamp columns
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table employees (
  id bigint primary key generated always as identity,
  name text,
  email text,
  created_at timestamptz default now()
);
```

----------------------------------------

TITLE: Updating signIn with phone and password in TypeScript
DESCRIPTION: Example of how to update the signIn method for phone and password authentication in supabase-js v2. The new version uses signInWithPassword.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
const { error } = await supabase
  .auth
  .signInWithPassword({ phone, password })
```

----------------------------------------

TITLE: Initializing Supabase with Simplified Auth State Management
DESCRIPTION: Shows the simplified initialization process in version 1.0 which automatically handles auth state persistence without requiring SupabaseAuthState classes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-02-supabase-flutter-sdk-1-developer-preview.mdx#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
// Before
await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
);
...

class AuthState<T extends StatefulWidget> extends SupabaseAuthState<T> {
  ...
}

// After
await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
);
```

----------------------------------------

TITLE: Initiating Password Reset in Swift with Supabase
DESCRIPTION: Swift implementation to initiate a password reset flow using Supabase client by sending a reset password email to the specified email address.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_32

LANGUAGE: Swift
CODE:
```
try await supabase.auth.resetPasswordForEmail("valid.email@supabase.io")
```

----------------------------------------

TITLE: Inserting Reservations with Complex Exclusion Constraint
DESCRIPTION: These SQL statements demonstrate how the complex exclusion constraint prevents overlapping reservations for the same table while allowing non-overlapping reservations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
-- Add a first reservation
insert into reservations (title, table_id, duration)
values ('Tyler Dinner', 1, '[2024-07-04 18:00, 2024-07-04 21:00)');

-- Insert fails, because table 1 is taken from 18:00 - 21:00
insert into reservations (title, table_id, duration)
values ('Thor Dinner', 1, '[2024-07-04 20:00, 2024-07-04 22:00)');

-- Insert succeeds because table 2 is not taken by anyone
insert into reservations (title, table_id, duration)
values ('Thor Dinner', 2, '[2024-07-04 20:00, 2024-07-04 22:00)');
```

----------------------------------------

TITLE: Raising Custom HTTP Error Response
DESCRIPTION: SQL code that demonstrates how to raise a custom HTTP error response with status code, custom message, hint, and additional headers from within a security function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
raise sqlstate 'PGRST' using
  message = json_build_object(
    'code',    '123',
    'message', 'Payment Required',
    'details', 'Quota exceeded',
    'hint',    'Upgrade your plan')::text,
  detail = json_build_object(
    'status',  402,
    'headers', json_build_object(
      'X-Powered-By', 'Nerd Rage'))::text;
```

----------------------------------------

TITLE: Equality Search Using Dart Supabase Client
DESCRIPTION: Dart implementation using Supabase client to perform an equality search on the books table, filtering by the title column for exact matches of 'Harry'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
final result = await client
  .from('books')
  .select()
  .eq('title', 'Harry');
```

----------------------------------------

TITLE: Synchronizing Prisma Migrations with npm
DESCRIPTION: This snippet shows how to synchronize Prisma migrations using npm. It includes commands for pulling the database schema, creating a migration file, and resolving the migration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_18

LANGUAGE: bash
CODE:
```
npx prisma migrate diff \
--from-empty \
--to-schema-datamodel prisma/schema.prisma \
--script > prisma/migrations/0_init_supabase/migration.sql
```

LANGUAGE: bash
CODE:
```
npx prisma migrate resolve --applied 0_init_supabase
```

----------------------------------------

TITLE: Overriding Types for Supabase Queries
DESCRIPTION: Demonstrates how to override types for specific Supabase query responses.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
// Partial type override allows you to only override some of the properties in your results
const { data } = await supabase.from('countries').select().overrideTypes<Array<{ id: string }>>()
// For a full replacement of the original return type use the `{ merge: false }` property as second argument
const { data } = await supabase
  .from('countries')
  .select()
  .overrideTypes<Array<{ id: string }>, { merge: false }>()
// Use it with `maybeSingle` or `single`
const { data } = await supabase.from('countries').select().single().overrideTypes<{ id: string }>()
```

----------------------------------------

TITLE: Filtering for Specific Changes in Dart with Supabase Realtime
DESCRIPTION: Creates a Dart channel that listens for INSERT events on the 'todos' table with a specific filter. The filter parameter ensures only changes where id equals 1 are monitored using the PostgresChangeFilter object.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_36

LANGUAGE: dart
CODE:
```
  supabase
      .channel('table-filter-changes')
      .onPostgresChanges(
          event: PostgresChangeEvent.insert,
          schema: 'public',
          table: 'todos',
          filter: PostgresChangeFilter(
            type: PostgresChangeFilterType.eq,
            column: 'id',
            value: 1,
          ),
          callback: (payload) => print(payload))
      .subscribe();
```

----------------------------------------

TITLE: Server-Side User Profile Management in SvelteKit with Supabase
DESCRIPTION: Server-side logic for the account page that loads user profile data from Supabase and handles form actions for updating profiles and signing out. It includes session verification, database operations, and redirects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
import { fail, redirect } from '@sveltejs/kit'
import type { Actions, PageServerLoad } from './$types'

export const load: PageServerLoad = async ({ locals: { supabase, safeGetSession } }) => {
  const { session } = await safeGetSession()

  if (!session) {
    redirect(303, '/')
  }

  const { data: profile } = await supabase
    .from('profiles')
    .select(`username, full_name, website, avatar_url`)
    .eq('id', session.user.id)
    .single()

  return { session, profile }
}

export const actions: Actions = {
  update: async ({ request, locals: { supabase, safeGetSession } }) => {
    const formData = await request.formData()
    const fullName = formData.get('fullName') as string
    const username = formData.get('username') as string
    const website = formData.get('website') as string
    const avatarUrl = formData.get('avatarUrl') as string

    const { session } = await safeGetSession()

    const { error } = await supabase.from('profiles').upsert({
      id: session?.user.id,
      full_name: fullName,
      username,
      website,
      avatar_url: avatarUrl,
      updated_at: new Date(),
    })

    if (error) {
      return fail(500, {
        fullName,
        username,
        website,
        avatarUrl,
      })
    }

    return {
      fullName,
      username,
      website,
      avatarUrl,
    }
  },
  signout: async ({ locals: { supabase, safeGetSession } }) => {
    const { session } = await safeGetSession()
    if (session) {
      await supabase.auth.signOut()
      redirect(303, '/')
    }
  },
}
```

----------------------------------------

TITLE: Getting Current Session in v0 vs v1
DESCRIPTION: Shows the change in how to get the user's current session. In v1, a property is used instead of a method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_10

LANGUAGE: dart
CODE:
```
final session = supabase.auth.session();
```

LANGUAGE: dart
CODE:
```
final Session? session = supabase.auth.currentSession;
```

----------------------------------------

TITLE: Revoking Role-Specific Function Execution in PostgreSQL
DESCRIPTION: SQL command to revoke execution permissions of a function named 'foo' from a specific role ('anon'). This prevents the specified role from executing the function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-can-i-revoke-execution-of-a-postgresql-function-2GYb0A.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
revoke execute on function foo from anon;
```

----------------------------------------

TITLE: Advanced Function Logging
DESCRIPTION: Comprehensive example of advanced logging techniques including variable formatting and row logging.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
create or replace function advanced_example(num int default 10)
returns text
language plpgsql
as $$
declare
    var1 int := 20;
    var2 text;
begin
    -- Logging start of function
    raise log 'logging start of function call: (%)', (select now());

    -- Logging a variable from a SELECT query
    select
      col_1 into var1
    from some_table
    limit 1;
    raise log 'logging a variable (%)', var1;

    -- It is also possible to avoid using variables, by returning the values of your query to the log
    raise log 'logging a query with a single return value(%)', (select col_1 from some_table limit 1);

    -- If necessary, you can even log an entire row as JSON
    raise log 'logging an entire row as JSON (%)', (select to_jsonb(some_table.*) from some_table limit 1);

    -- When using INSERT or UPDATE, the new value(s) can be returned
    -- into a variable.
    -- When using DELETE, the deleted value(s) can be returned.
    -- All three operations use "RETURNING value(s) INTO variable(s)" syntax
    insert into some_table (col_2)
    values ('new val')
    returning col_2 into var2;

    raise log 'logging a value from an INSERT (%)', var2;

    return var1 || ',' || var2;
exception
    -- Handle exceptions here if needed
    when others then
        raise exception 'An error occurred in function <advanced_example>: %', sqlerrm;
end;
$$;

select advanced_example();
```

----------------------------------------

TITLE: Verifying OTP using Swift
DESCRIPTION: Explains OTP verification for user session in Swift using Supabase. Necessary parameters include the email and OTP token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_12

LANGUAGE: Swift
CODE:
```
try await supabase.auth.verifyOTP(
  email: email,
  token: "123456",
  type: .email
)
```

----------------------------------------

TITLE: Creating a Table with Columns in SQL
DESCRIPTION: SQL query to create a new table named 'movies' with columns for id, name, and description. The id column is set as the primary key with auto-incrementing values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table movies (
  id bigint generated by default as identity primary key,
  name text,
  description text
);
```

----------------------------------------

TITLE: Restoring Database with Supabase CLI - Bash
DESCRIPTION: This snippet details the commands required to restore a previously backed-up Supabase database using the Supabase CLI. It emphasizes the need for inputting the correct connection string for the new project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/backup-restore.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
psql \
  --single-transaction \
  --variable ON_ERROR_STOP=1 \
  --file roles.sql \
  --file schema.sql \
  --command 'SET session_replication_role = replica' \
  --file data.sql \
  --dbname [CONNECTION_STRING]
```

LANGUAGE: bash
CODE:
```
export OLD_PROJECT_REF="<old_project_ref>"\nexport NEW_PROJECT_REF="<new_project_ref>"\nexport SUPABASE_ACCESS_TOKEN="<personal_access_token>"\n\ncurl "https://api.supabase.com/v1/projects/$OLD_PROJECT_REF/pgsodium" \
  -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" |\ncurl "https://api.supabase.com/v1/projects/$NEW_PROJECT_REF/pgsodium" \
  -H "Authorization: Bearer $SUPABASE_ACCESS_TOKEN" \
  -X PUT --json @-
```

----------------------------------------

TITLE: Scaffolding a New Next.js App with Supabase Integration
DESCRIPTION: Command for creating a new Next.js application with pre-configured Supabase integration using create-next-app. The template includes server-side cookie-based Auth, TypeScript, and Tailwind CSS as a perfect starting point.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-10-using-supabase-with-vercel.mdx#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
npx create-next-app -e with-supabase
```

----------------------------------------

TITLE: Create first page with Supabase data
DESCRIPTION: This code demonstrates creating a simple page in SvelteKit that fetches data from Supabase.  It uses `PageServerLoad` to query the 'colors' table and passes the retrieved data to the Svelte component for rendering a list of colors.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import type { PageServerLoad } from './$types'

export const load: PageServerLoad = async ({ locals: { supabase } }) => {
  const { data: colors } = await supabase.from('colors').select('name').limit(5).order('name')
  return { colors: colors ?? [] }
}
```

LANGUAGE: svelte
CODE:
```
<script>
  let { data } = $props()
  let { colors } = $derived(data)
</script>

<h1>Welcome to Supabase!</h1>
<ul>
  {#each colors as color}
    <li>{color.name}</li>
  {/each}
</ul>
```

----------------------------------------

TITLE: Fetching User Data with Supabase in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates the same functionality as the JavaScript version, but with type annotations for better type safety. It retrieves user information and related data, ensuring session validation before querying.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { User, createPagesServerClient } from '@supabase/auth-helpers-nextjs'
import { GetServerSidePropsContext } from 'next'

export default function ProtectedPage({ user, data }: { user: User; data: any }) {
  return (
    <>
      <div>Protected content for {user.email}</div>
      <pre>{JSON.stringify(data, null, 2)}</pre>
      <pre>{JSON.stringify(user, null, 2)}</pre>
    </>
  )
}

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  // Create authenticated Supabase Client
  const supabase = createPagesServerClient(ctx)
  // Check if we have a session
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!user)
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }

  // Run queries with RLS on the server
  const { data } = await supabase.from('users').select('*')

  return {
    props: {
      user,
      data: data ?? [],
    },
  }
}
```

----------------------------------------

TITLE: Creating a Login Component in React
DESCRIPTION: A React component that renders a login form with email and password fields, along with buttons for signing in, signing up, and signing out. The form submits to authentication endpoints.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_14

LANGUAGE: jsx
CODE:
```
export default function Login() {
  return (
    <form action="/auth/login" method="post">
      <label htmlFor="email">Email</label>
      <input name="email" />
      <label htmlFor="password">Password</label>
      <input type="password" name="password" />
      <button>Sign In</button>
      <button formAction="/auth/sign-up">Sign Up</button>
      <button formAction="/auth/logout">Sign Out</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Signing Out - JavaScript
DESCRIPTION: This code snippet is for signing out a user from the Supabase session in a JavaScript application. The `signOut` function removes the user from the browser session and clears any relevant local storage objects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}
```

----------------------------------------

TITLE: Obtaining Kakao ID Token via OAuth Flow
DESCRIPTION: Example of exchanging authorization code for an ID token using Kakao's OAuth API, demonstrating the token retrieval process
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-kakao.mdx#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
const requestUrl = new URL(request.url);
const code = requestUrl.searchParams.get('code');

if (code) {
  const res = await fetch('https://kauth.kakao.com/oauth/token', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',
    },
    body: new URLSearchParams({
      grant_type: 'authorization_code',
      client_id: '<CLIENT_ID>',
      redirect_uri: '<url>/api/auth/kakao/oidc',
      code,
      client_secret: '<CLIENT_SECRET>',
    }),
  });

  const {id_token} = await res.json();
}
```

----------------------------------------

TITLE: HTTP Hook Payload Verification
DESCRIPTION: JavaScript/Deno code demonstrating how to verify HTTP hook payloads using the Standard Webhooks library and process the authenticated request.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
import { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'

Deno.serve(async (req) => {
  const payload = await req.text()
  const hookSecret = Deno.env.get('SEND_SMS_HOOK_SECRETS').replace('v1,whsec_', '')
  // Extract headers and security specific fields
  const headers = Object.fromEntries(req.headers)
  const wh = new Webhook(hookSecret)
  const data = wh.verify(payload, headers)

  // Payload data is verified, continue with business logic here
  // ...
})
```

----------------------------------------

TITLE: Creating Token Exchange Endpoint in Next.js for Supabase Auth
DESCRIPTION: Implementation of a Next.js API route to handle Supabase authentication token exchange for password reset flow. It verifies OTP tokens and redirects users accordingly.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_26

LANGUAGE: TypeScript
CODE:
```
import { type EmailOtpType } from '@supabase/supabase-js'
import { cookies } from 'next/headers'
import { NextRequest, NextResponse } from 'next/server'
// The client you created from the Server-Side Auth instructions
import { createClient } from '@/utils/supabase/server'

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const token_hash = searchParams.get('token_hash')
  const type = searchParams.get('type') as EmailOtpType | null
  const next = searchParams.get('next') ?? '/'
  const redirectTo = request.nextUrl.clone()
  redirectTo.pathname = next

  if (token_hash && type) {
    const supabase = await createClient()

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })
    if (!error) {
      return NextResponse.redirect(redirectTo)
    }
  }

  // return the user to an error page with some instructions
  redirectTo.pathname = '/auth/auth-code-error'
  return NextResponse.redirect(redirectTo)
}
```

----------------------------------------

TITLE: Creating New Rails Project with Postgres
DESCRIPTION: Command to create a new Rails project configured to use PostgreSQL as the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
rails new blog -d=postgresql
```

----------------------------------------

TITLE: Getting User Metadata - Swift
DESCRIPTION: Uses Swift to access the current user's metadata from Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_8

LANGUAGE: swift
CODE:
```
let user = try await supabase.auth.user()
let metadata = user.userMetadata
```

----------------------------------------

TITLE: Creating an Image Item Component for Supabase Storage Files in React Native
DESCRIPTION: This snippet defines a component for displaying individual image items from Supabase Storage. It includes functionality to download and display the image, show the file name, and provide a delete button.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
import { FileObject } from '@supabase/storage-js'
import { Image, View, Text, TouchableOpacity } from 'react-native'
import { supabase } from '../config/initSupabase'
import { useState } from 'react'
import { Ionicons } from '@expo/vector-icons'

// Image item component that displays the image from Supabase Storage and a delte button
const ImageItem = ({
  item,
  userId,
  onRemoveImage,
}: {
  item: FileObject
  userId: string
  onRemoveImage: () => void
}) => {
  const [image, setImage] = useState<string>('')

  supabase.storage
    .from('files')
    .download(`${userId}/${item.name}`)
    .then(({ data }) => {
      const fr = new FileReader()
      fr.readAsDataURL(data!)
      fr.onload = () => {
        setImage(fr.result as string)
      }
    })

  return (
    <View style={{ flexDirection: 'row', margin: 1, alignItems: 'center', gap: 5 }}>
      {image ? (
        <Image style={{ width: 80, height: 80 }} source={{ uri: image }} />
      ) : (
        <View style={{ width: 80, height: 80, backgroundColor: '#1A1A1A' }} />
      )}
      <Text style={{ flex: 1, color: '#fff' }}>{item.name}</Text>
      {/* Delete image button */}
      <TouchableOpacity onPress={onRemoveImage}>
        <Ionicons name="trash-outline" size={20} color={'#fff'} />
      </TouchableOpacity>
    </View>
  )
}

export default ImageItem
```

----------------------------------------

TITLE: Deploying Supabase Edge Functions with GitHub Actions YAML Configuration
DESCRIPTION: This YAML configuration sets up a GitHub Action that automatically deploys a Supabase Edge Function when changes are pushed to or merged into the main branch. It uses the Supabase CLI Action to run the deployment command. The workflow requires a SUPABASE_ACCESS_TOKEN secret and a PROJECT_ID environment variable.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/github-action-deploy/README.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
name: Deploy Function

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      PROJECT_ID: zdtdtxajzydjqzuktnqx

    steps:
      - uses: actions/checkout@v3

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase functions deploy github-action-deploy --project-ref $PROJECT_ID
```

----------------------------------------

TITLE: Express.js Routing Implementation
DESCRIPTION: Example of implementing routing in Edge Functions using Express.js framework. Handles GET and POST requests with JSON body parsing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import express from 'npm:express@4.18.2'

const app = express()
app.use(express.json())
// If you want a payload larger than 100kb, then you can tweak it here:
// app.use( express.json({ limit : "300kb" }));

const port = 3000

app.get('/hello-world', (req, res) => {
  res.send('Hello World!')
})

app.post('/hello-world', (req, res) => {
  const { name } = req.body
  res.send(`Hello ${name}!`)
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})
```

----------------------------------------

TITLE: Initializing Supabase Vector Store Connection
DESCRIPTION: Code to establish a connection to Supabase database using SQLAlchemy connection string and create a vector store client. Requires connection pooling for Google Colab compatibility.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/llamaindex.mdx#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)
```

----------------------------------------

TITLE: Synchronizing Prisma Migrations with yarn
DESCRIPTION: This snippet shows how to synchronize Prisma migrations using yarn. It includes commands for pulling the database schema, creating a migration file, and resolving the migration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_20

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

LANGUAGE: bash
CODE:
```
mkdir -p prisma/migrations/0_init_supabase
```

LANGUAGE: bash
CODE:
```
npx prisma migrate diff \
--from-empty \
--to-schema-datamodel prisma/schema.prisma \
--script > prisma/migrations/0_init_supabase/migration.sql
```

LANGUAGE: bash
CODE:
```
npx prisma migrate resolve --applied 0_init_supabase
```

----------------------------------------

TITLE: Creating Search RPC Function
DESCRIPTION: SQL function creation for implementing partial search through RPC calls
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_24

LANGUAGE: sql
CODE:
```
create or replace function search_books_by_title_prefix(prefix text)
returns setof books AS $$
begin
  return query
  select * from books where to_tsvector('english', title) @@ to_tsquery(prefix || ':*');
end;
$$ language plpgsql;
```

----------------------------------------

TITLE: Replacing auth.role() with TO clause in Postgres RLS Policy
DESCRIPTION: This snippet demonstrates how to replace the deprecated auth.role() function with the native TO clause in Postgres when creating an RLS policy for public profile viewing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/deprecated-rls-features-Pm77Zs.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- DEPRECATED
create policy "Public profiles are viewable by everyone."
on profiles for select using (
  auth.role() = 'authenticated' or auth.role() = 'anon'
);

-- RECOMMENDED
create policy "Public profiles are viewable by everyone."
on profiles for select
to authenticated, anon
using (
  true
);
```

----------------------------------------

TITLE: Using TypeScript with Supabase.js v2
DESCRIPTION: Example of using TypeScript with Supabase.js v2, where definitions are injected in the 'createClient()' method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_3

LANGUAGE: ts
CODE:
```
import type { Database } from './DatabaseDefinitions'

// definitions are injected in `createClient()`
const supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)

const { data } = await supabase.from('messages').select().match({ id: 1 })
```

----------------------------------------

TITLE: Creating Supabase Client - JavaScript
DESCRIPTION: This snippet initializes a Supabase client in a SvelteKit application using JavaScript. It creates an async load function that fetches the session information and returns both the client and session to the parent layout. Dependencies include '@supabase/auth-helpers-sveltekit' and environment variables for Supabase URL and anon key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
// src/routes/+layout.js
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'
import { createSupabaseLoadClient } from '@supabase/auth-helpers-sveltekit'

export const load = async ({ fetch, data, depends }) => {
  depends('supabase:auth')

  const supabase = createSupabaseLoadClient({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event: { fetch },
    serverSession: data.session,
  })

  /**
   * It's fine to use `getSession` here, because on the client, `getSession` is
   * safe, and on the server, it reads `session` from the `LayoutData`, which
   * safely checked the session using `safeGetSession`.
   */
  const {
    data: { session },
  } = await supabase.auth.getSession()

  return { supabase, session }
}
```

----------------------------------------

TITLE: Creating a Reusable DataTable Component with TanStack Table
DESCRIPTION: A client-side React component that implements a data table using TanStack Table and shadcn/ui Table components, handling row selection, headers, and empty states.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

import { ColumnDef, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table'

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
}

export function DataTable<TData, TValue>({ columns, data }: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  })

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          {table.getHeaderGroups().map((headerGroup) => (
            <TableRow key={headerGroup.id}>
              {headerGroup.headers.map((header) => {
                return (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                )
              })}
            </TableRow>
          ))}
        </TableHeader>
        <TableBody>
          {table.getRowModel().rows?.length ? (
            table.getRowModel().rows.map((row) => (
              <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={columns.length} className="h-24 text-center">
                No results.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating Serializable Data Model for Supabase Table
DESCRIPTION: Definition of a Kotlin data class that represents the 'instruments' table in Supabase. The @Serializable annotation enables automatic serialization/deserialization of database results to Kotlin objects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/kotlin.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
@Serializable
data class Instrument(
    val id: Int,
    val name: String,
)
```

----------------------------------------

TITLE: Creating Custom Security Check Function for API Requests
DESCRIPTION: SQL function that implements custom security checks to run before each API request. This function can be configured to run automatically with every Data API request.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create function public.check_request()
  returns void
  language plpgsql
  security definer
  as $$
begin
  -- your logic here
end;
$$;
```

----------------------------------------

TITLE: Implementing Password Reset and Magic Link Authentication Methods
DESCRIPTION: Additional methods for the login page component that handle password reset and magic link authentication. Each function creates an alert with an input field for the user's email and handles the API calls to Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
  async forgotPw() {
    const alert = await this.alertController.create({
      header: "Receive a new password",
      message: "Please insert your email",
      inputs: [
        {
          type: "email",
          name: "email",
        },
      ],
      buttons: [
        {
          text: "Cancel",
          role: "cancel",
        },
        {
          text: "Reset password",
          handler: async (result) => {
            const loading = await this.loadingController.create();
            await loading.present();
            const { data, error } = await this.authService.sendPwReset(
              result.email
            );
            await loading.dismiss();

            if (error) {
              this.showAlert("Failed", error.message);
            } else {
              this.showAlert(
                "Success",
                "Please check your emails for further instructions!"
              );
            }
          },
        },
      ],
    });
    await alert.present();
  }

  async getMagicLink() {
    const alert = await this.alertController.create({
      header: "Get a Magic Link",
      message: "We will send you a link to magically log in!",
      inputs: [
        {
          type: "email",
          name: "email",
        },
      ],
      buttons: [
        {
          text: "Cancel",
          role: "cancel",
        },
        {
          text: "Get Magic Link",
          handler: async (result) => {
            const loading = await this.loadingController.create();
            await loading.present();
            const { data, error } = await this.authService.signInWithEmail(
              result.email
            );
            await loading.dismiss();

            if (error) {
              this.showAlert("Failed", error.message);
            } else {
              this.showAlert(
                "Success",
                "Please check your emails for further instructions!"
              );
            }
          },
        },
      ],
    });
    await alert.present();
  }
```

----------------------------------------

TITLE: Enabling explain() in Postgres for Supabase
DESCRIPTION: SQL commands to enable the explain() method in Supabase by setting the pgrst.db_plan_enabled role parameter to true and reloading the configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/debugging-performance.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- enable explain
alter role authenticator
set pgrst.db_plan_enabled to 'true';

-- reload the config
notify pgrst, 'reload config';
```

----------------------------------------

TITLE: Returning Retry-able Error Response in HTTP
DESCRIPTION: This code snippet is used to return a retry-able error response in a Supabase HTTP hook by sending a status code of 429 and a 'retry-after' header. Developed using JavaScript, it requires a basic understanding of HTTP responses and JavaScript syntax. It takes an error object as input and outputs an HTTP response with error details. Limitations include the need for proper content-type specification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_12

LANGUAGE: jsx
CODE:
```
return new Response(
  JSON.stringify({
    error: `Failed to process the request: ${error}`,
  }),
  { status: 429, headers: { 'Content-Type': 'application/json', 'retry-after': 'true' } }
)
```

----------------------------------------

TITLE: Adding a New Column to Projects Table with Declarative Schema in SQL
DESCRIPTION: This snippet shows how to add a new 'metadata' column to the 'projects' table using a declarative schema approach. It demonstrates the simplicity of schema changes with this method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-03-declarative-schemas.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create table private.projects (
  id              bigint    not null,
  name            text      not null,
  organization_id bigint    not null,
  metadata        jsonb,
  inserted_at     timestamp not null,
  updated_at      timestamp not null
);
```

----------------------------------------

TITLE: Creating Table for Document Embeddings in PostgreSQL
DESCRIPTION: SQL command to create a table for storing documents and their embeddings. The table includes columns for content and a 1536-dimensional vector for the embedding.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table documents (
  id bigserial primary key,
  content text,
  embedding vector(1536)
);
```

----------------------------------------

TITLE: Testing Migrations and Releasing Schema Changes
DESCRIPTION: Demonstrates how to test migrations on a fresh local database and release schema changes to staging and production environments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
supabase init
supabase start
```

LANGUAGE: bash
CODE:
```
$ supabase link --project-ref $PROJECT_ID
$ supabase db push
```

----------------------------------------

TITLE: Generating TypeScript Types with Supabase CLI
DESCRIPTION: Demonstrates how to use the Supabase CLI to generate TypeScript types for your database schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase start
supabase gen types typescript --local > DatabaseDefinitions.ts
```

----------------------------------------

TITLE: Database Role and Secrets Query Commands
DESCRIPTION: SQL commands to view database roles and query the secrets table after assuming the devotee role. Demonstrates privilege escalation through role switching.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
SELECT * FROM pg_roles;
SET ROLE devotee;
SELECT * FROM secrets;
```

----------------------------------------

TITLE: Setting Environment Variables for Next.js
DESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env.local file for a Next.js application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
```

----------------------------------------

TITLE: Generating TypeScript Types for Local Supabase Development
DESCRIPTION: Generates TypeScript types for a local Supabase development environment using the CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
npx supabase gen types typescript --local > database.types.ts
```

----------------------------------------

TITLE: Creating Token Exchange Endpoint in Astro for Supabase Auth
DESCRIPTION: Implementation of an Astro API route to handle Supabase authentication token exchange for password reset flow. It verifies OTP tokens using the Supabase SSR client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_28

LANGUAGE: TypeScript
CODE:
```
import { createServerClient, parseCookieHeader } from '@supabase/ssr'
import { type EmailOtpType } from '@supabase/supabase-js'
import { type APIRoute } from 'astro'

export const GET: APIRoute = async ({ request, cookies, redirect }) => {
  const requestUrl = new URL(request.url)
  const token_hash = requestUrl.searchParams.get('token_hash')
  const type = requestUrl.searchParams.get('type') as EmailOtpType | null
  const next = requestUrl.searchParams.get('next') || '/'

  if (token_hash && type) {
    const supabase = createServerClient(
      import.meta.env.PUBLIC_SUPABASE_URL,
      import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
      {
        cookies: {
          getAll() {
            return parseCookieHeader(request.headers.get('Cookie') ?? '')
          },
          setAll(cookiesToSet) {
            cookiesToSet.forEach(({ name, value, options }) => cookies.set(name, value, options))
          },
        },
      }
    )

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })

    if (!error) {
      return redirect(next)
    }
  }

  // return the user to an error page with some instructions
  return redirect('/auth/auth-code-error')
}
```

----------------------------------------

TITLE: Generating TypeScript Types for Supabase Tables
DESCRIPTION: Use the Supabase CLI to generate TypeScript types for the database schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
supabase start
supabase gen types --lang=typescript --local > utils/database.types.ts
```

----------------------------------------

TITLE: Syncing and Tracking State in Dart
DESCRIPTION: This snippet provides implementation details for tracking presence state in Dart, including responding to sync, join, and leave events.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
final supabase = Supabase.instance.client;

final roomOne = supabase.channel('room_01');

roomOne.onPresenceSync((_) {
  final newState = roomOne.presenceState();
  print('sync: $newState');
}).onPresenceJoin((payload) {
  print('join: $payload');
}).onPresenceLeave((payload) {
  print('leave: $payload');
}).subscribe();
```

----------------------------------------

TITLE: Using Python Vecs Library for Unstructured Embeddings
DESCRIPTION: Demonstrates how to use the Python vecs library to create and interact with vector embeddings in Supabase. Shows collection creation and vector insertion with metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/structured-unstructured.mdx#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
#!/usr/bin/env python3
import vecs

# In practice, do not hard-code your password. Use environment variables.
DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)

docs = vx.get_or_create_collection(name="docs", dimension=1536)

docs.upsert(vectors=[
  ('79409372-7556-4ccc-ab8f-5786a6cfa4f7', [100, 200, 300], { url: '/hello-world' })
])

```

----------------------------------------

TITLE: SvelteKit Server Hooks for Supabase Authentication
DESCRIPTION: Configures server hooks to handle Supabase client initialization, session validation, and secure authentication
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'
import { createServerClient } from '@supabase/ssr'
import type { Handle } from '@sveltejs/kit'

export const handle: Handle = async ({ event, resolve }) => {
  event.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
    cookies: {
      getAll() {
        return event.cookies.getAll()
      },
      setAll(cookiesToSet) {
        cookiesToSet.forEach(({ name, value, options }) =>
          event.cookies.set(name, value, { ...options, path: '/' })
        )
      },
    },
  })

  return resolve(event)
}
```

----------------------------------------

TITLE: Implementing Secure Storage for Supabase with Encryption
DESCRIPTION: Advanced implementation using AES encryption with Expo's SecureStore for encrypted session storage. This approach addresses the 2048 byte size limitation of SecureStore by using a hybrid approach.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import { createClient } from "@supabase/supabase-js";
import AsyncStorage from "@react-native-async-storage/async-storage";
import * as SecureStore from 'expo-secure-store';
import * as aesjs from 'aes-js';
import 'react-native-get-random-values';

// As Expo's SecureStore does not support values larger than 2048
// bytes, an AES-256 key is generated and stored in SecureStore, while
// it is used to encrypt/decrypt values stored in AsyncStorage.
class LargeSecureStore {
  private async _encrypt(key: string, value: string) {
    const encryptionKey = crypto.getRandomValues(new Uint8Array(256 / 8));

    const cipher = new aesjs.ModeOfOperation.ctr(encryptionKey, new aesjs.Counter(1));
    const encryptedBytes = cipher.encrypt(aesjs.utils.utf8.toBytes(value));

    await SecureStore.setItemAsync(key, aesjs.utils.hex.fromBytes(encryptionKey));

    return aesjs.utils.hex.fromBytes(encryptedBytes);
  }

  private async _decrypt(key: string, value: string) {
    const encryptionKeyHex = await SecureStore.getItemAsync(key);
    if (!encryptionKeyHex) {
      return encryptionKeyHex;
    }

    const cipher = new aesjs.ModeOfOperation.ctr(aesjs.utils.hex.toBytes(encryptionKeyHex), new aesjs.Counter(1));
    const decryptedBytes = cipher.decrypt(aesjs.utils.hex.toBytes(value));

    return aesjs.utils.utf8.fromBytes(decryptedBytes);
  }

  async getItem(key: string) {
    const encrypted = await AsyncStorage.getItem(key);
    if (!encrypted) { return encrypted; }

    return await this._decrypt(key, encrypted);
  }

  async removeItem(key: string) {
    await AsyncStorage.removeItem(key);
    await SecureStore.deleteItemAsync(key);
  }

  async setItem(key: string, value: string) {
    const encrypted = await this._encrypt(key, value);

    await AsyncStorage.setItem(key, encrypted);
  }
}

const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL
const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: new LargeSecureStore(),
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
});
```

----------------------------------------

TITLE: MFA Challenge Component in React
DESCRIPTION: This component allows users to verify their identity via multi-factor authentication (MFA) using a phone factor. It interfaces with Supabase's MFA APIs to start and verify challenges. Key variables include the phone number and error states, and it requires a valid phone factor to initiate challenges. Utilize this component to facilitate user input for MFA verification codes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/phone.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
function AuthMFA() {
  const [verifyCode, setVerifyCode] = useState('')
  const [error, setError] = useState('')
  const [factorId, setFactorId] = useState('')
  const [challengeId, setChallengeId] = useState('')
  const [phoneNumber, setPhoneNumber] = useState('')

  const startChallenge = async () => {
    setError('')
    try {
      const factors = await supabase.auth.mfa.listFactors()
      if (factors.error) {
        throw factors.error
      }

      const phoneFactor = factors.data.phone[0]

      if (!phoneFactor) {
        throw new Error('No phone factors found!')
      }

      const factorId = phoneFactor.id
      setFactorId(factorId)
      setPhoneNumber(phoneFactor.phone)

      const challenge = await supabase.auth.mfa.challenge({ factorId })
      if (challenge.error) {
        setError(challenge.error.message)
        throw challenge.error
      }

      setChallengeId(challenge.data.id)
    } catch (error) {
      setError(error.message)
    }
  }

  const verifyCode = async () => {
    setError('')
    try {
      const verify = await supabase.auth.mfa.verify({
        factorId,
        challengeId,
        code: verifyCode,
      })
      if (verify.error) {
        setError(verify.error.message)
        throw verify.error
      }
    } catch (error) {
      setError(error.message)
    }
  }

  return (
    <>
      <div>Please enter the code sent to your phone.</div>
      {phoneNumber && <div>Phone number: {phoneNumber}</div>}
      {error && <div className="error">{error}</div>}
      <input
        type="text"
        value={verifyCode}
        onChange={(e) => setVerifyCode(e.target.value.trim())}
      />
      {!challengeId ? (
        <input type="button" value="Start Challenge" onClick={startChallenge} />
      ) : (
        <input type="button" value="Verify Code" onClick={verifyCode} />
      )}
    </>
  )
}
```

----------------------------------------

TITLE: Server-Side Rendering with Authentication
DESCRIPTION: Example of implementing server-side rendering with authenticated Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
import { createPagesServerClient } from '@supabase/auth-helpers-nextjs'

export default function Profile({ user }) {
  return <div>Hello {user.name}</div>
}

export const getServerSideProps = async (ctx) => {
  const supabase = createPagesServerClient(ctx)
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!user)
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }

  return {
    props: {
      user,
    },
  }
}
```

----------------------------------------

TITLE: Creating Supabase SSR Client in Remix Loader
DESCRIPTION: Demonstrates how to create a Supabase client for server-side rendering in a Remix loader function, handling cookie management for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_21

LANGUAGE: typescript
CODE:
```
import { type LoaderFunctionArgs } from '@remix-run/node'
import { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'

export async function loader({ request }: LoaderFunctionArgs) {
  const headers = new Headers()

  const supabase = createServerClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {
    cookies: {
      getAll() {
        return parseCookieHeader(request.headers.get('Cookie') ?? '')
      },
      setAll(cookiesToSet) {
        cookiesToSet.forEach(({ name, value, options }) =>
          headers.append('Set-Cookie', serializeCookieHeader(name, value, options))
        )
      },
    },
  })

  return new Response('...', {
    headers,
  })
}
```

----------------------------------------

TITLE: Creating Many-to-Many Document Ownership Structure
DESCRIPTION: Implements a join table to support multiple owners per document, allowing for more flexible access control patterns.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table document_owners (
  id bigint primary key generated always as identity,
  owner_id uuid not null references auth.users (id) default auth.uid(),
  document_id bigint not null references documents (id)
);
```

----------------------------------------

TITLE: Implementing Auth Callback Handler in Next.js
DESCRIPTION: Server-side implementation of the callback endpoint that exchanges authentication code for a user session. Handles the PKCE code exchange process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
// api/auth/callback
import { NextApiRequest, NextApiResponse } from 'next'
import { createServerSupabaseClient } from '@supabase/auth-helpers-nextjs'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Create authenticated Supabase Client
  const supabase = createServerSupabaseClient(
    { req, res },
    {
      supabaseUrl: SUPABASE_URL,
      supabaseKey: SUPABASE_ANON_KEY,
    }
  )
  // check for code in url querystring
  const code = req.query.code

  if (typeof code === 'string') {
    // exchange the auth code for user session
    await supabase.auth.exchangeCodeForSession(code)
  }

  // redirect the user to a server-side protected area in your app
  res.redirect('/')
}
```

----------------------------------------

TITLE: Creating Authentication Component with Magic Link
DESCRIPTION: SolidJS component that handles user authentication with magic link email sign-in functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
import { createSignal } from 'solid-js'
import { supabase } from './supabaseClient'

export default function Auth() {
  const [loading, setLoading] = createSignal(false)
  const [email, setEmail] = createSignal('')

  const handleLogin = async (e: SubmitEvent) => {
    e.preventDefault()

    try {
      setLoading(true)
      const { error } = await supabase.auth.signInWithOtp({ email: email() })
      if (error) throw error
      alert('Check your email for the login link!')
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <div class="row flex-center flex">
      <div class="col-6 form-widget" aria-live="polite">
        <h1 class="header">Supabase + SolidJS</h1>
        <p class="description">Sign in via magic link with your email below</p>
        <form class="form-widget" onSubmit={handleLogin}>
          <div>
            <label for="email">Email</label>
            <input
              id="email"
              class="inputField"
              type="email"
              placeholder="Your email"
              value={email()}
              onChange={(e) => setEmail(e.currentTarget.value)}
            />
          </div>
          <div>
            <button type="submit" class="button block" aria-live="polite">
              {loading() ? <span>Loading</span> : <span>Send magic link</span>}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating RLS Policy with Different Access Levels for Anonymous vs. Permanent Users
DESCRIPTION: SQL policy that limits anonymous users to view only posts created today while giving permanent users full read access to all posts.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create policy "Limit access to anonymous users"
on public.posts
for select
to authenticated -- Note: user is still authenticated
using (
  case
    when (select (auth.jwt() ->> 'is_anonymous'))::boolean is true
    then (created_at >= current_date)
  else
    true
  end
);
```

----------------------------------------

TITLE: Downloading a file using Swift in Supabase Storage
DESCRIPTION: This Swift snippet demonstrates how to download a file from Supabase Storage. It uses the `supabase.storage.from("avatars").download(path: "public/avatar1.png")` method to download the file located at 'public/avatar1.png' within the 'avatars' bucket. The `try await` keywords are used to handle the asynchronous operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_9

LANGUAGE: swift
CODE:
```
let response = try await supabase.storage.from("avatars").download(path: "public/avatar1.png")
```

----------------------------------------

TITLE: Updating API Route with createPagesServerClient in Next.js
DESCRIPTION: This snippet demonstrates how to replace the deprecated withApiAuth function with createPagesServerClient in a Next.js API route. It shows how to create an authenticated Supabase client, check for an active session, and run queries with Row Level Security (RLS) on the server.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
import { NextApiHandler } from 'next'
import { createPagesServerClient } from '@supabase/auth-helpers-nextjs'

const ProtectedRoute: NextApiHandler = async (req, res) => {
  // Create authenticated Supabase Client
  const supabase = createPagesServerClient({ req, res })
  // Check if we have a session
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!user)
    return res.status(401).json({
      error: 'not_authenticated',
      description: 'The user does not have an active session or is not authenticated',
    })

  // Run queries with RLS on the server
  const { data } = await supabase.from('test').select('*')
  res.json(data)
}

export default ProtectedRoute
```

----------------------------------------

TITLE: Signing Out - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to sign a user out using the Supabase client. It calls the signOut() method on the auth object, which removes the user's session from the browser and clears any stored objects from localStorage. This function returns a data and error object.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitter.mdx#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Listening only to 'INSERT' events in JavaScript
DESCRIPTION: This JavaScript snippet configures a Supabase client to listen only for INSERT events in the 'public' schema. The function logs specific changes to the console. The channel cannot be named 'realtime'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_10

LANGUAGE: JavaScript
CODE:
```
const changes = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: 'INSERT', // Listen only to INSERTs
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Granting Function Execution Permission
DESCRIPTION: Example of granting execution permission for a specific function to an authenticated role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
grant execute on function public.hello_world to authenticated;
```

----------------------------------------

TITLE: Enabling pgvector Extension
DESCRIPTION: Shows how to enable the pgvector extension in a Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create extension if not exists vector
with
  schema extensions;
```

----------------------------------------

TITLE: Setting Up Auth Users Table Monitoring
DESCRIPTION: SQL commands to create and configure audit logging for the auth.users table
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
-- create logging role
create role "auth_auditor" noinherit;

-- give role permission to observe relevant table events
grant select on auth.users to "auth_auditor";
grant delete on auth.users to "auth_auditor";

-- assign auth_auditor to pgaudit.role
alter role "postgres" set pgaudit.role to 'auth_auditor';
```

----------------------------------------

TITLE: Two-Stage Vector Search with Bit Vectors
DESCRIPTION: Demonstrates a two-stage search approach using binary quantization for pre-selection followed by exact distance calculation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select * from (
  select
    *
  from
    embedding
  order by
    binary_quantize(vector)::bit(3) <~> binary_quantize('[1,-2,3]')
  limit 20
)
order by
  vector <=> '[1,-2,3]'
limit 5;
```

----------------------------------------

TITLE: Implementing Account Management Component
DESCRIPTION: React component for managing user profile details including username, website, and avatar.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
import { useState, useEffect } from 'react'
import { supabase } from './supabaseClient'

export default function Account({ session }) {
  const [loading, setLoading] = useState(true)
  const [username, setUsername] = useState(null)
  const [website, setWebsite] = useState(null)
  const [avatar_url, setAvatarUrl] = useState(null)

  useEffect(() => {
    let ignore = false
    async function getProfile() {
      setLoading(true)
      const { user } = session

      const { data, error } = await supabase
        .from('profiles')
        .select(`username, website, avatar_url`)
        .eq('id', user.id)
        .single()

      if (!ignore) {
        if (error) {
          console.warn(error)
        } else if (data) {
          setUsername(data.username)
          setWebsite(data.website)
          setAvatarUrl(data.avatar_url)
        }
      }

      setLoading(false)
    }

    getProfile()

    return () => {
      ignore = true
    }
  }, [session])

  async function updateProfile(event, avatarUrl) {
    event.preventDefault()

    setLoading(true)
    const { user } = session

    const updates = {
      id: user.id,
      username,
      website,
      avatar_url: avatarUrl,
      updated_at: new Date(),
    }

    const { error } = await supabase.from('profiles').upsert(updates)

    if (error) {
      alert(error.message)
    } else {
      setAvatarUrl(avatarUrl)
    }
    setLoading(false)
  }

  return (
    <form onSubmit={updateProfile} className="form-widget">
      <div>
        <label htmlFor="email">Email</label>
        <input id="email" type="text" value={session.user.email} disabled />
      </div>
      <div>
        <label htmlFor="username">Name</label>
        <input
          id="username"
          type="text"
          required
          value={username || ''}
          onChange={(e) => setUsername(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="website">Website</label>
        <input
          id="website"
          type="url"
          value={website || ''}
          onChange={(e) => setWebsite(e.target.value)}
        />
      </div>

      <div>
        <button className="button block primary" type="submit" disabled={loading}>
          {loading ? 'Loading ...' : 'Update'}
        </button>
      </div>

      <div>
        <button className="button block" type="button" onClick={() => supabase.auth.signOut()}>
          Sign Out
        </button>
      </div>
    </form>
  )
```

----------------------------------------

TITLE: Creating Various Distance Type Indexes
DESCRIPTION: Shows how to create HNSW indexes using different distance metrics including L1, Hamming, and Jaccard distances.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create index on items using hnsw (embedding vector_l1_ops);

create index on items using hnsw (embedding bit_hamming_ops);

create index on vector using hnsw (vector bit_jaccard_ops);
```

----------------------------------------

TITLE: Creating Login Page with Supabase Authentication in Flutter
DESCRIPTION: This snippet defines a LoginPage widget that allows users to sign in with their email and password using Supabase authentication. Upon successful login, users are redirected to the MFA verification page.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_9

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:mfa_app/main.dart';
import 'package:mfa_app/pages/mfa/verify_page.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class LoginPage extends StatefulWidget {
  static const route = '/auth/login';

  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Login')),
      body: ListView(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 24),
        children: [
          TextFormField(
            controller: _emailController,
            decoration: const InputDecoration(
              label: Text('Email'),
            ),
          ),
          const SizedBox(height: 16),
          TextFormField(
            controller: _passwordController,
            decoration: const InputDecoration(
              label: Text('Password'),
            ),
            obscureText: true,
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () async {
              try {
                final email = _emailController.text.trim();
                final password = _passwordController.text.trim();
                await supabase.auth.signInWithPassword(
                  email: email,
                  password: password,
                );
                if (mounted) {
                  context.go(MFAVerifyPage.route);
                }
              } on AuthException catch (error) {
                ScaffoldMessenger.of(context)
                    .showSnackBar(SnackBar(content: Text(error.message)));
              } catch (error) {
                ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Unexpected error occurred')));
              }
            },
            child: const Text('Login'),
          ),
        ],
      ),
    );
  }
}
```

----------------------------------------

TITLE: Signing In with Spotify - Flutter
DESCRIPTION: This snippet shows how to authenticate a user using Spotify OAuth in a Flutter application. It uses the `signInWithOAuth` method and specifies `OAuthProvider.spotify` as the provider, along with optional parameters for redirect handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signInWithSpotify() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.spotify,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode: kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}
```

----------------------------------------

TITLE: Explaining Query Execution Plan in PostgreSQL
DESCRIPTION: This SQL command displays the execution plan for a query, showing how PostgreSQL will execute it. It helps to understand if indexes are being used or if sequential scans are happening.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
explain select name from persons where age = 32;
```

----------------------------------------

TITLE: Text-to-Image Edge Function Implementation
DESCRIPTION: TypeScript implementation of an Edge Function that uses Hugging Face's Inference API to convert text prompts into images using the Stable Diffusion model
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hugging-face.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { HfInference } from 'https://esm.sh/@huggingface/inference@2.3.2'

const hf = new HfInference(Deno.env.get('HUGGING_FACE_ACCESS_TOKEN'))

serve(async (req) => {
  const { prompt } = await req.json()

  const image = await hf.textToImage(
    {
      inputs: prompt,
      model: 'stabilityai/stable-diffusion-2',
    },
    {
      use_cache: false,
    }
  )

  return new Response(image)
})
```

----------------------------------------

TITLE: Configuring PKCE Authentication Flow
DESCRIPTION: Example of initializing the Supabase client with PKCE (Proof Key for Code Exchange) flow type for enhanced security in server-side rendering and mobile applications.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    flowType: 'pkce',
  },
})
```

----------------------------------------

TITLE: Querying One-to-One Relationships with supabase-js
DESCRIPTION: Demonstrates how to query a one-to-one relationship between country and capital tables using supabase-js, resulting in a nested JSON object structure.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase
  .from('country')
  .select('name,capital(name)')
  .in('id', [1, 2])

console.log(data)
```

----------------------------------------

TITLE: Fetching and Displaying Posts with Links in Server Component
DESCRIPTION: Enhanced Server Component that fetches specific columns from Supabase posts table and renders links to individual post pages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_7

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'
import supabase from '../../utils/supabase'

export default async function Posts() {
  const { data: posts } = await supabase.from('posts').select('id, title')

  if (!posts) {
    return <p>No posts found.</p>
  }

  return posts.map((post) => (
    <p key={post.id}>
      <Link href={`/static/${post.id}`}>{post.title}</Link>
    </p>
  ))
}
```

----------------------------------------

TITLE: Deno Webhook: WhatsApp and SMS Messaging with Regional Routing
DESCRIPTION: Advanced JavaScript implementation for sending messages via WhatsApp or SMS based on user's country code, supporting Latin American region
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
const sendMessage = async (
    messageBody: string,
    accountSid: string | undefined,
    authToken: string | undefined,
    fromNumber: string,
    toNumber: string,
    useWhatsApp: boolean,
): Promise < any > => {
    if (!accountSid || !authToken) {
        console.log("Your Twilio account credentials are missing. Please add them.");
        return;
    }
    const url: string = `https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`;

    const encodedCredentials: string = base64.fromUint8Array(
        new TextEncoder().encode(`${accountSid}:${authToken}`),
    );

    const body: URLSearchParams = new URLSearchParams({
        To: useWhatsApp ? `whatsapp:${toNumber}` : toNumber,
        From: useWhatsApp ? `whatsapp:${fromNumber}` : smsFromNumber,
        Body: messageBody,
    });

    const response = await fetch(url, {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": `Basic ${encodedCredentials}`,
        },
        body,
    });

    return response.json();
}
```

----------------------------------------

TITLE: Creating Materialized View
DESCRIPTION: Creates a materialized view that stores the query results physically for faster subsequent access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-11-18-postgresql-views.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create materialized view transcripts as
  select
    students.name,
    students.type,
    courses.title,
    courses.code,
    grades.result
  from
    grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;
```

----------------------------------------

TITLE: Implementing Match Page Sections Function in SQL for ChatGPT Retrieval Plugin
DESCRIPTION: SQL function to query and find relevant information based on embedding similarity. This function is used to retrieve context for ChatGPT responses from the vector database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create or replace function match_page_sections(
	in_embedding vector(1536),
	in_match_count int default 3,
	in_document_id text default '%%',
	in_source_id text default '%%',
	in_source text default '%%',
	in_author text default '%%',
	in_start_date timestamptz default '-infinity',
	in_end_date timestamptz default 'infinity'
)
returns table (
	id text,
	source text,
	source_id text,
	document_id text,
	url text,
	created_at timestamptz,
	author text,
	content text,
	embedding vector(1536),
	similarity float
)
language plpgsql
as $$
#variable_conflict use_variable
begin
return query

select
	documents.id,
	documents.source,
	documents.source_id,
	documents.document_id,
	documents.url,
	documents.created_at,
	documents.author,
	documents.content,
	documents.embedding,
	(documents.embedding <#> in_embedding) * -1 as similarity
from
	documents
where
	in_start_date <= documents.created_at and
  documents.created_at <= in_end_date and
  (documents.source_id like in_source_id or documents.source_id is null) and
  (documents.source like in_source or documents.source is null) and
  (documents.author like in_author or documents.author is null) and
  (documents.document_id like in_document_id or documents.document_id is null)
order by
	documents.embedding <#> in_embedding
limit
	in_match_count;
end;
$$;
```

----------------------------------------

TITLE: Configuring Ionic React App with Routing and Authentication
DESCRIPTION: Main App component with routing configuration that handles authentication state using Supabase. Redirects users to the appropriate page based on their authentication status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
import { Redirect, Route } from 'react-router-dom'
import { IonApp, IonRouterOutlet, setupIonicReact } from '@ionic/react'
import { IonReactRouter } from '@ionic/react-router'
import { supabase } from './supabaseClient'

import '@ionic/react/css/ionic.bundle.css'

/* Theme variables */
import './theme/variables.css'
import { LoginPage } from './pages/Login'
import { AccountPage } from './pages/Account'
import { useEffect, useState } from 'react'
import { Session } from '@supabase/supabase-js'

setupIonicReact()

const App: React.FC = () => {
  const [session, setSession] = useState < Session > null
  useEffect(() => {
    setSession(supabase.auth.session())
    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })
  }, [])
  return (
    <IonApp>
      <IonReactRouter>
        <IonRouterOutlet>
          <Route
            exact
            path="/"
            render={() => {
              return session ? <Redirect to="/account" /> : <LoginPage />
            }}
          />
          <Route exact path="/account">
            <AccountPage />
          </Route>
        </IonRouterOutlet>
      </IonReactRouter>
    </IonApp>
  )
}

export default App
```

----------------------------------------

TITLE: Phone Number OTP Verification
DESCRIPTION: Verifies a one-time password (OTP) sent via SMS for phone number authentication. The OTP must be verified within 60 seconds of receipt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_40

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

const {
  data: { session },
  error,
} = await supabase.auth.verifyOtp({
  phone: '+13334445555',
  token: '123456',
  type: 'sms',
})
```

LANGUAGE: swift
CODE:
```
try await supabase.auth.verifyOTP(
  phone: "+13334445555",
  token: "123456",
  type: .sms
)
```

LANGUAGE: kotlin
CODE:
```
supabase.auth.verifyPhoneOtp(
    type = OtpType.Phone.SMS,
    phone = "+13334445555",
    token = "123456"
)
```

LANGUAGE: python
CODE:
```
supabase.auth.verify_otp({
  'phone': "+13334445555",
  'token': "123456",
  'type': "sms"
})
```

LANGUAGE: bash
CODE:
```
curl -X POST 'https://<PROJECT_REF>.supabase.co/auth/v1/verify' \
-H "apikey: <SUPABASE_KEY>" \
-H "Content-Type: application/json" \
-d '{
  "type": "sms",
  "phone": "+13334445555",
  "token": "123456"
}'
```

----------------------------------------

TITLE: Implementing Authentication Component
DESCRIPTION: Creates a login component with email, GitHub authentication, and logout functionality using the Supabase client instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_7

LANGUAGE: jsx
CODE:
```
export default function Login() {
  const { supabase } = useOutletContext()

  const handleEmailLogin = async () => {
    await supabase.auth.signInWithPassword({
      email: 'valid.email@supabase.io',
      password: 'password',
    })
  }

  const handleGitHubLogin = async () => {
    await supabase.auth.signInWithOAuth({
      provider: 'github',
      options: {
        redirectTo: 'http://localhost:3000/auth/callback',
      },
    })
  }

  const handleLogout = async () => {
    await supabase.auth.signOut()
  }

  return (
    <>
      <button onClick={handleEmailLogin}>Email Login</button>
      <button onClick={handleGitHubLogin}>GitHub Login</button>
      <button onClick={handleLogout}>Logout</button>
    </>
  )
}
```

LANGUAGE: tsx
CODE:
```
export default function Login() {
  const { supabase } = useOutletContext<{ supabase: SupabaseClient<Database> }>()

  const handleEmailLogin = async () => {
    await supabase.auth.signInWithPassword({
      email: 'valid.email@supabase.io',
      password: 'password',
    })
  }

  const handleGitHubLogin = async () => {
    await supabase.auth.signInWithOAuth({
      provider: 'github',
      options: {
        redirectTo: 'http://localhost:3000/auth/callback',
      },
    })
  }

  const handleLogout = async () => {
    await supabase.auth.signOut()
  }

  return (
    <>
      <button onClick={handleEmailLogin}>Email Login</button>
      <button onClick={handleGitHubLogin}>GitHub Login</button>
      <button onClick={handleLogout}>Logout</button>
    </>
  )
}
```

----------------------------------------

TITLE: Supabase Auth Sign Up Example
DESCRIPTION: This JavaScript code snippet shows an example of how to use the `signUp` function from the Supabase auth client. It demonstrates how to sign up a user with an email and password, including setting the `emailRedirectTo` option.  The `emailRedirectTo` option specifies the URL where the user will be redirected after confirming their email.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_10

LANGUAGE: jsx
CODE:
```
supabaseClient.auth.signUp({
  email: 'valid.email@supabase.io',
  password: 'sup3rs3cur3',
  options: {
    emailRedirectTo: 'http://localhost:3000/auth/callback',
  },
})
```

----------------------------------------

TITLE: Generating and Storing OpenAI Embeddings in PostgreSQL
DESCRIPTION: TypeScript function to generate embeddings using OpenAI's API and store them in a PostgreSQL database using Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { Configuration, OpenAIApi } from 'openai'
import { supabaseClient } from './lib/supabase'

async function generateEmbeddings() {
  const configuration = new Configuration({ apiKey: '<YOUR_OPENAI_API_KEY>' })
  const openAi = new OpenAIApi(configuration)

  const documents = await getDocuments() // Your custom function to load docs

  // Assuming each document is a string
  for (const document of documents) {
    // OpenAI recommends replacing newlines with spaces for best results
    const input = document.replace(/\n/g, ' ')

    const embeddingResponse = await openai.createEmbedding({
      model: 'text-embedding-ada-002',
      input,
    })

    const [{ embedding }] = embeddingResponse.data.data

    // In production we should handle possible errors
    await supabaseClient.from('documents').insert({
      content: document,
      embedding,
    })
  }
}
```

----------------------------------------

TITLE: Listening to Multiple Changes in Python with Supabase Realtime
DESCRIPTION: Establishes a Python channel to listen to different events on different tables simultaneously. The example shows monitoring all events on the 'messages' table and only INSERT events on the 'users' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_34

LANGUAGE: python
CODE:
```
changes = supabase.channel('db-changes').on_postgres_changes(
  "*",
  schema="public",
  table="messages"
  callback=lambda payload: print(payload)
).on_postgres_changes(
  "INSERT",
  schema="public",
  table="users",
  callback=lambda payload: print(payload)
).subscribe()
```

----------------------------------------

TITLE: Creating Authorize Function for RLS Policies
DESCRIPTION: SQL function to authorize user permissions based on their role for use in Row Level Security policies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create or replace function public.authorize(
  requested_permission app_permission
)
returns boolean as $$
declare
  bind_permissions int;
  user_role public.app_role;
begin
  -- Fetch user role once and store it to reduce number of calls
  select (auth.jwt() ->> 'user_role')::public.app_role into user_role;

  select count(*)
  into bind_permissions
  from public.role_permissions
  where role_permissions.permission = requested_permission
    and role_permissions.role = user_role;

  return bind_permissions > 0;
end;
$$ language plpgsql stable security definer set search_path = '';
```

----------------------------------------

TITLE: Implementing GitHub OAuth Sign-In in JavaScript with Supabase
DESCRIPTION: This snippet demonstrates how to implement GitHub sign-in functionality using Supabase's JavaScript client. It utilizes the `signInWithOAuth` method and requires a Supabase client created with your project URL and anon key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

// ---cut---
async function signInWithGithub() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'github',
  })
}
```

----------------------------------------

TITLE: Defining Webhook Payload Types (TypeScript)
DESCRIPTION: Provides TypeScript type definitions for the JSON payload data sent by the database webhook for different event types (INSERT, UPDATE, DELETE). It shows the structure, including the event type, affected table and schema, and the relevant record data (new record for INSERT/UPDATE, old record for UPDATE/DELETE).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/webhooks.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
type InsertPayload = {
  type: 'INSERT'
  table: string
  schema: string
  record: TableRecord<T>
  old_record: null
}
type UpdatePayload = {
  type: 'UPDATE'
  table: string
  schema: string
  record: TableRecord<T>
  old_record: TableRecord<T>
}
type DeletePayload = {
  type: 'DELETE'
  table: string
  schema: string
  record: null
  old_record: TableRecord<T>
}
```

----------------------------------------

TITLE: Creating a Partial Index in PostgreSQL
DESCRIPTION: Creates an index that only includes rows where the deceased column is false. This is more efficient when frequently querying only a subset of rows matching a specific condition.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create index idx_living_persons_age on persons (age)
where deceased is false;
```

----------------------------------------

TITLE: Sending Single Message
DESCRIPTION: Sends a single JSON message to a specified queue with optional delay.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select * from pgmq.send('my_queue', '{"hello": "world"}');
```

----------------------------------------

TITLE: Supabase Client Initialization - Version 2
DESCRIPTION: Demonstrates the new initialization pattern in version 2.x where configuration options are organized into separate option objects for auth, realtime, and storage clients.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
  authOptions: const FlutterAuthClientOptions(
    authFlowType: AuthFlowType.pkce,
  ),
  realtimeClientOptions: const RealtimeClientOptions(
    logLevel: RealtimeLogLevel.info,
  ),
  storageOptions: const StorageClientOptions(
    retryAttempts: 10,
  ),
);
```

----------------------------------------

TITLE: Deploy Supabase DB Changes (Bash)
DESCRIPTION: Pushes the local database schema changes (represented by migration files) to the linked remote Supabase project's database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
supabase db push
```

----------------------------------------

TITLE: Server-Side OAuth Implementation with Supabase
DESCRIPTION: Server-side implementation of OAuth authentication using Supabase's signInWithOAuth method with URL redirect handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { createClient, type Provider } from '@supabase/supabase-js'
const supabase = createClient('url', 'anonKey')
const provider = 'provider' as Provider
const redirect = (url: string) => {}

// ---cut---
const { data, error } = await supabase.auth.signInWithOAuth({
  provider,
  options: {
    redirectTo: 'http://example.com/auth/callback',
  },
})

if (data.url) {
  redirect(data.url) // use the redirect API for your server framework
}
```

----------------------------------------

TITLE: Querying the Vector Index
DESCRIPTION: Demonstrates how to create a query engine and perform queries against the created vector index.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/llamaindex/llamaindex.ipynb#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
query_engine = index.as_query_engine()

# Ask a question
response = query_engine.query("What did the author do growing up?")

# Print the response
print(response)
```

----------------------------------------

TITLE: Creating Main Application Component with Session Management
DESCRIPTION: Main SolidJS component that manages authentication state and conditionally renders either the Auth or Account component based on session status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
import { Component, createEffect, createSignal } from 'solid-js'
import { supabase } from './supabaseClient'
import { AuthSession } from '@supabase/supabase-js'
import Account from './Account'
import Auth from './Auth'

const App: Component = () => {
  const [session, setSession] = createSignal<AuthSession | null>(null)

  createEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session)
    })

    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })
  })

  return (
    <div class="container" style={{ padding: '50px 0 100px 0' }}>
      {!session() ? <Auth /> : <Account session={session()!} />}
    </div>
  )
}

export default App
```

----------------------------------------

TITLE: Granting Schema Usage Permissions
DESCRIPTION: Grants usage permissions on the api schema to both anonymous and authenticated users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/hardening-data-api.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
grant usage on schema api to anon, authenticated;
```

----------------------------------------

TITLE: Configuring Deep Links for iOS in Info.plist
DESCRIPTION: XML configuration to set up deep linking for iOS in the Info.plist file, enabling the app to handle Supabase authentication redirects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_1

LANGUAGE: xml
CODE:
```
<!-- ... other tags -->
<plist>
<dict>
  <!-- ... other tags -->

  <!-- Add this array for Deep Links -->
  <key>CFBundleURLTypes</key>
  <array>
    <dict>
      <key>CFBundleTypeRole</key>
      <string>Editor</string>
      <key>CFBundleURLSchemes</key>
      <array>
        <string>io.supabase.flutterquickstart</string>
      </array>
    </dict>
  </array>
  <!-- ... other tags -->
</dict>
</plist>
```

----------------------------------------

TITLE: Wrapping Root Layout with React Query Provider in Next.js
DESCRIPTION: Next.js root layout file that incorporates the React Query Client Provider to enable React Query throughout the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { ReactQueryClientProvider } from '@/components/ReactQueryClientProvider'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ReactQueryClientProvider>
      <html lang="en">
        <body className={inter.className}>{children}</body>
      </html>
    </ReactQueryClientProvider>
  )
}
```

----------------------------------------

TITLE: Using Supabase in Next.js Server Actions
DESCRIPTION: Example of using Supabase within Next.js Server Actions to perform data mutations server-side. This approach uses the createServerActionClient function to insert a new todo, and revalidates the path after the insertion.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_20

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'
import { createServerActionClient } from '@supabase/auth-helpers-nextjs'
import { revalidatePath } from 'next/cache'

export default async function NewTodo() {
  const addTodo = async (formData) => {
    'use server'

    const title = formData.get('title')
    const supabase = createServerActionClient({ cookies })
    await supabase.from('todos').insert({ title })
    revalidatePath('/')
  }

  return (
    <form action={addTodo}>
      <input name="title" />
    </form>
  )
}
```

----------------------------------------

TITLE: Enabling Postgres Changes by Creating Publication in SQL
DESCRIPTION: This SQL code block demonstrates how to create a publication named `supabase_realtime` and add a table to it, which is necessary for enabling Postgres Changes. It first removes the existing publication if it exists, recreates it without any tables, commits the changes, and then adds the 'messages' table to the publication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
begin;

-- remove the supabase_realtime publication
drop
  publication if exists supabase_realtime;

-- re-create the supabase_realtime publication with no tables
create publication supabase_realtime;

commit;

-- add a table called 'messages' to the publication
-- (update this to match your tables)
alter
  publication supabase_realtime add table messages;
```

----------------------------------------

TITLE: Configuring Supabase Database Connection
DESCRIPTION: Environment variables configuration for connecting Laravel to Supabase Postgres database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-22-laravel-postgres.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
DB_CONNECTION=pgsql
DATABASE_URL=postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres
```

----------------------------------------

TITLE: Creating a Policy for Role-Based Access
DESCRIPTION: This SQL code snippet creates a policy that allows complete read access to all objects within the 'teams' bucket for users with the 'manager' role. The policy uses Supabase's Row Level Security to enforce this access control.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/custom-roles.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "Manager can view all files in the bucket 'teams'"
on storage.objects
for select
to manager
using (
  bucket_id = 'teams'
);
```

----------------------------------------

TITLE: Adding NPM Script for Updating Types
DESCRIPTION: Adds an NPM script to package.json for updating Supabase types.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_13

LANGUAGE: json
CODE:
```
"update-types": "npx supabase gen types --lang=typescript --project-id \"$PROJECT_REF\" > database.types.ts"
```

----------------------------------------

TITLE: Running Edge Functions Locally with Bash Script
DESCRIPTION: Command to start the Edge Runtime locally by specifying the functions directory and port. This allows you to test Supabase Edge Functions on your local machine.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/self-hosting-functions/introduction.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
./run.sh start --main-service /path/to/supabase/functions -p 9000
```

----------------------------------------

TITLE: Creating Logout Route Handler in JavaScript
DESCRIPTION: This JavaScript snippet provides a method to set up a server-side route handler for user logout in a Next.js app using Supabase. It utilizes the Supabase client to sign the user out, then redirects them to the login page using a Next.js response. Required packages are @supabase/auth-helpers-nextjs and next/headers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_12

LANGUAGE: JavaScript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

export async function POST(request) {
  const requestUrl = new URL(request.url)
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })

  await supabase.auth.signOut()

  return NextResponse.redirect(`${requestUrl.origin}/login`, {
    status: 301,
  })
}

```

----------------------------------------

TITLE: Setting Environment Variables for Supabase in Next.js
DESCRIPTION: This snippet provides environment variable configuration necessary for connecting a Next.js application to Supabase. Ensure that 'NEXT_PUBLIC_SUPABASE_URL' and 'NEXT_PUBLIC_SUPABASE_ANON_KEY' are correctly set in the '.env' file. These values can be found in the Supabase dashboard or obtained by running specific Supabase CLI commands. The environment variables are essential for API communication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/client.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Querying Time-Series Data with Time Bucket
DESCRIPTION: Example query using TimescaleDB's time_bucket function to aggregate temperature readings into hourly averages for a specific sensor.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/timescaledb.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
select
    time_bucket('1 hour', time) AS hour,
    avg(temperature) AS average_temperature
from
    temperatures
where
    sensor_id = 1
    and time > NOW() - interval '1 hour'
group by
    hour;
```

----------------------------------------

TITLE: Querying Supabase Data in Next.js Page Component
DESCRIPTION: Creating a Next.js page component that fetches instrument data from a Supabase table and renders it on the page. This demonstrates server-side data fetching with Supabase in Next.js.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nextjs.mdx#2025-04-21_snippet_2

LANGUAGE: ts
CODE:
```
import { createClient } from '@/utils/supabase/server';

export default async function Instruments() {
  const supabase = await createClient();
  const { data: instruments } = await supabase.from("instruments").select();

  return <pre>{JSON.stringify(instruments, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Creating Database Schema Tables in Supabase
DESCRIPTION: Defines the core database tables for a content management application with user profiles, organizations, membership roles, posts, and comments. Includes foreign key relationships, constraints, and default values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create table public.profiles (
  id uuid references auth.users(id) primary key,
  username text unique not null,
  full_name text,
  bio text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.organizations (
  id bigint primary key generated always as identity,
  name text not null,
  slug text unique not null,
  plan_type text not null check (plan_type in ('free', 'pro', 'enterprise')),
  max_posts int not null default 5,
  created_at timestamptz default now()
);

create table public.org_members (
  org_id bigint references public.organizations(id) on delete cascade,
  user_id uuid references auth.users(id) on delete cascade,
  role text not null check (role in ('owner', 'admin', 'editor', 'viewer')),
  created_at timestamptz default now(),
  primary key (org_id, user_id)
);

create table public.posts (
  id bigint primary key generated always as identity,
  title text not null,
  content text not null,
  author_id uuid references public.profiles(id) not null,
  org_id bigint references public.organizations(id),
  status text not null check (status in ('draft', 'published', 'archived')),
  is_premium boolean default false,
  scheduled_for timestamptz,
  category text,
  view_count int default 0,
  published_at timestamptz,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.comments (
  id bigint primary key generated always as identity,
  post_id bigint references public.posts(id) on delete cascade,
  author_id uuid references public.profiles(id),
  content text not null,
  is_deleted boolean default false,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
```

----------------------------------------

TITLE: Creating Index for Vector Similarity Search in PostgreSQL
DESCRIPTION: SQL command to create an index on the embedding column using the IVFFLAT algorithm, which improves performance for similarity searches.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create index on documents using ivfflat (embedding vector_cosine_ops)
with
  (lists = 100);
```

----------------------------------------

TITLE: Initializing Supabase for Edge Functions
DESCRIPTION: This bash command initializes Supabase for creating edge functions, which will be used to implement the route calculation functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
# initialize Supabase
npx supabase init
```

----------------------------------------

TITLE: UI Error Handling with React Query Hooks
DESCRIPTION: Example of how to handle loading, error, and success states in UI components when using Tanstack Query. This pattern ensures users are always informed of the request status by displaying appropriate UI components for each state.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/data/__templates/README.md#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
const { data, error, isLoading, isError, isSuccess } = useQuery()

return (
  <>
    {isLoading && <GenericSkeletonLoader />}

    {isError && <AlertError subject="A subject" error={error} />}

    {isSuccess && <div>Your UI component</div>}
  </>
)
```

----------------------------------------

TITLE: Initializing Supabase Client in Python
DESCRIPTION: This snippet illustrates how to initialize a Supabase client in Python by using the necessary URL and API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from supabase import create_client

SUPABASE_URL = 'https://<project>.supabase.co'
SUPABASE_KEY = '<your-anon-key>'

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
```

----------------------------------------

TITLE: Creating Storage Access Policy in SQL
DESCRIPTION: SQL script to create a storage policy that enables user-specific access control for file uploads in Supabase Storage bucket.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE POLICY "Enable storage access for users based on user_id" ON "storage"."objects"
AS PERMISSIVE FOR ALL
TO public
USING (bucket_id = 'files' AND (SELECT auth.uid()::text )= (storage.foldername(name))[1])
WITH CHECK (bucket_id = 'files' AND (SELECT auth.uid()::text) = (storage.foldername(name))[1])
```

----------------------------------------

TITLE: Identify and Migrate MD5 Passwords in Postgres
DESCRIPTION: These SQL statements help identify custom roles still using the deprecated md5 hashing method for passwords and provide the syntax to migrate a specific role's password to the more secure scram-sha-256 method after a Supabase project upgrade.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/upgrading.mdx#_snippet_0

LANGUAGE: SQL
CODE:
```
-- List roles using md5 hashing method
SELECT
  rolname
FROM pg_authid
WHERE rolcanlogin = true
  AND rolpassword LIKE 'md5%';

-- Migrate a role's password to scram-sha-256
ALTER ROLE <role_name> WITH PASSWORD '<password>';
```

----------------------------------------

TITLE: Incorporating npm Packages in Supabase Edge Function
DESCRIPTION: This snippet illustrates how to use npm packages in Supabase Edge Functions. It imports the Express framework from npm and sets up a simple server that responds with a welcome message for all routes.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/edge-functions.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import express from "npm:express@4.18.2";

const app = express();

app.get(/(.*)/, (req, res) => {
    res.send("Welcome to Supabase");
});

app.listen(8000);
```

----------------------------------------

TITLE: Importing Database to Supabase with psql
DESCRIPTION: Command to import the previously exported database dump into Supabase using psql, targeting the new database URL and specifying the dump file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/vercel-postgres.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
psql -d "$NEW_DB_URL" -f dump.sql
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase in Next.js
DESCRIPTION: Sets up the necessary environment variables for connecting to Supabase in a Next.js application. These variables include the Supabase URL and anonymous key, which are essential for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/password-based-auth.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Inserting and Updating Documents for Embedding Generation
DESCRIPTION: This SQL snippet inserts a new document and updates its content in the 'documents' table. It demonstrates how embedding columns are asynchronously generated and reset to 'null' upon content updates. The example showcases executing select queries to check embedding states as a response to document manipulations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_15

LANGUAGE: sql
CODE:
```
-- Insert a new document
insert into documents (title, content)
values
  ('Understanding Vector Databases', 'Vector databases are specialized...');

-- Immediately check the embedding column
select id, embedding
from documents
where title = 'Understanding Vector Databases';
```

LANGUAGE: sql
CODE:
```
select id, embedding
from documents
where title = 'Understanding Vector Databases';
```

LANGUAGE: sql
CODE:
```
-- Update the content of the document
update documents
set content = 'Vector databases allow you to query...'
where title = 'Understanding Vector Databases';

-- Immediately check the embedding column
select id, embedding
from documents
where title = 'Understanding Vector Databases';
```

LANGUAGE: sql
CODE:
```
-- Update the title of the document
update documents
set title = 'Understanding Vector Databases with Supabase'
where title = 'Understanding Vector Databases';
```

LANGUAGE: sql
CODE:
```
select id, embedding
from documents
where title = 'Understanding Vector Databases with Supabase';
```

----------------------------------------

TITLE: Querying Most Frequent SQL Statements
DESCRIPTION: SQL query to analyze most frequently called queries with execution statistics and performance metrics
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select
  auth.rolname,
  statements.query,
  statements.calls,
  statements.total_exec_time + statements.total_plan_time as total_time,
  statements.min_exec_time + statements.min_plan_time as min_time,
  statements.max_exec_time + statements.max_plan_time as max_time,
  statements.mean_exec_time + statements.mean_plan_time as mean_time,
  statements.rows / statements.calls as avg_rows
from
  pg_stat_statements as statements
  inner join pg_authid as auth on statements.userid = auth.oid
order by statements.calls desc
limit 100;
```

----------------------------------------

TITLE: Creating Vector Index for Embeddings
DESCRIPTION: SQL command to create an IVFFlat index on the embedding column using vector_ip_ops for improved search performance. Uses 10 lists for tables with less than 1 million records.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
create index on documents
using ivfflat (embedding vector_ip_ops)
with (lists = 10);
```

----------------------------------------

TITLE: Set up Supabase environment variables
DESCRIPTION: This code snippet shows how to define Supabase URL and Anon Key in the `.env.local` file. These variables are necessary for initializing the Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
PUBLIC_SUPABASE_URL=<your_supabase_project_url>
PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>
```

----------------------------------------

TITLE: Generating Embeddings with Supabase.ai API in Edge Functions
DESCRIPTION: This code demonstrates how to instantiate a new inference session with the 'gte-small' model and run inference on a text prompt to generate embeddings that can be stored in pgvector.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-16-ai-inference-now-available-in-supabase-edge-functions.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
// Instantiate a new inference session
const session = new Supabase.ai.Session('gte-small')

// then use the session to run inference on a prompt
const output = await session.run('Luke, I am your father')

console.log(output)
// [ -0.047715719789266586, -0.006132732145488262, ...]
```

----------------------------------------

TITLE: Handling OAuth Callback and Exchanging Code for Session in TypeScript
DESCRIPTION: This snippet shows how to handle the OAuth callback in a Next.js API route. It retrieves the 'code' query parameter, checks if it's present, and exchanges it for a user session using Supabase. The response then redirects the user based on the environment and the presence of the X-Forwarded-Host header.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-workos.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import { createClient } from '@/utils/supabase/server'

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url)
  const code = searchParams.get('code')
  // if "next" is in param, use it as the redirect URL
  const next = searchParams.get('next') ?? '/' 

  if (code) {
    const supabase = await createClient()
    const { error } = await supabase.auth.exchangeCodeForSession(code)
    if (!error) {
      const forwardedHost = request.headers.get('x-forwarded-host') // original origin before load balancer
      const isLocalEnv = process.env.NODE_ENV === 'development'
      if (isLocalEnv) {
        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host
        return NextResponse.redirect(`${origin}${next}`)
      } else if (forwardedHost) {
        return NextResponse.redirect(`https://${forwardedHost}${next}`)
      } else {
        return NextResponse.redirect(`${origin}${next}`)
      }
    }
  }

  // return the user to an error page with instructions
  return NextResponse.redirect(`${origin}/auth/auth-code-error`) 
}
```

----------------------------------------

TITLE: Updating Supabase Provider for Social Authentication
DESCRIPTION: This code snippet demonstrates how to switch the social auth provider in the Supabase `signInWithOAuth` method. It instructs developers to update the `provider` field to the desired provider after ensuring it is enabled in the Supabase Dashboard.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/social-auth.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Change the provider field in signInWithOAuth
supabase.auth.signInWithOAuth({
    provider: 'github', // Update this to the desired provider
});
```

----------------------------------------

TITLE: Implementing Google One Tap Sign-in with Supabase Auth
DESCRIPTION: Example code showing how to handle Google One Tap authentication response and sign in using Supabase Auth's signInWithIdToken method. The code demonstrates the callback function that processes the credential received from Google's authentication button.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-06-27-native-mobile-auth.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
async function handleSignInWithGoogle(response) {
  const { data, error } = await supabase.auth.signInWithIdToken({
    token: response.credential,
    nonce: 'NONCE', // must be the same one as provided in data-nonce (if any)
  })
}
```

----------------------------------------

TITLE: Creating Supabase SSR Client in Hono Middleware
DESCRIPTION: Demonstrates how to create a Supabase client for server-side rendering in a Hono middleware, handling cookie management for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
import { createServerClient, parseCookieHeader } from '@supabase/ssr'
import { SupabaseClient } from '@supabase/supabase-js'
import type { Context, MiddlewareHandler } from 'hono'
import { env } from 'hono/adapter'
import { setCookie } from 'hono/cookie'

declare module 'hono' {
  interface ContextVariableMap {
    supabase: SupabaseClient
  }
}

export const getSupabase = (c: Context) => {
  return c.get('supabase')
}

type SupabaseEnv = {
  SUPABASE_URL: string
  SUPABASE_ANON_KEY: string
}

export const supabaseMiddleware = (): MiddlewareHandler => {
  return async (c, next) => {
    const supabaseEnv = env<SupabaseEnv>(c)
    const supabaseUrl = supabaseEnv.SUPABASE_URL
    const supabaseAnonKey = supabaseEnv.SUPABASE_ANON_KEY

    if (!supabaseUrl) {
      throw new Error('SUPABASE_URL missing!')
    }

    if (!supabaseAnonKey) {
      throw new Error('SUPABASE_ANON_KEY missing!')
    }

    const supabase = createServerClient(supabaseUrl, supabaseAnonKey, {
      cookies: {
        getAll() {
          return parseCookieHeader(c.req.header('Cookie') ?? '')
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => setCookie(c, name, value, options))
        },
      },
    })

    c.set('supabase', supabase)

    await next()
  }
}
```

----------------------------------------

TITLE: Creating DELETE Policy for Profiles
DESCRIPTION: Example of creating a DELETE policy that allows users to delete their own profiles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
-- 1. Create table
create table profiles (
  id uuid primary key,
  user_id uuid references auth.users,
  avatar_url text
);

-- 2. Enable RLS
alter table profiles enable row level security;

-- 3. Create Policy
create policy "Users can delete a profile."
on profiles for delete
to authenticated                     -- the Postgres Role (recommended)
using ( (select auth.uid()) = user_id );      -- the actual Policy
```

----------------------------------------

TITLE: Querying Vector Collection with Filters
DESCRIPTION: Demonstrates how to query the vector collection with metadata filters to find relevant matches
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vecs-python-client.mdx#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import vecs

docs = vecs.get_or_create_collection(name="docs", dimension=3)

# query the collection filtering metadata for "year" = 2012
docs.query(
    data=[0.4,0.5,0.6],      # required
    limit=1,                         # number of records to return
    filters={"year": {"$eq": 2012}}, # metadata filters
)
```

----------------------------------------

TITLE: Creating Initial Database Migration for Todos Table
DESCRIPTION: Set up the todos table in Supabase with the necessary columns and triggers for syncing with Legend-State.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create table todos (
  id uuid default gen_random_uuid() primary key,
  counter bigint generated by default as identity,
  text text,
  done boolean default false,
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  deleted boolean default false -- needed for soft deletes
);

-- Enable realtime
alter
  publication supabase_realtime add table todos;

-- Legend-State helper to facilitate "Sync only diffs" (changesSince: 'last-sync') mode
CREATE OR REPLACE FUNCTION handle_times()
    RETURNS trigger AS
    $$
    BEGIN
    IF (TG_OP = 'INSERT') THEN
        NEW.created_at := now();
        NEW.updated_at := now();
    ELSEIF (TG_OP = 'UPDATE') THEN
        NEW.created_at = OLD.created_at;
        NEW.updated_at = now();
    END IF;
    RETURN NEW;
    END;
    $$ language plpgsql;

CREATE TRIGGER handle_times
    BEFORE INSERT OR UPDATE ON todos
    FOR EACH ROW
EXECUTE PROCEDURE handle_times();
```

----------------------------------------

TITLE: Invoking Cloudflare Turnstile Validation Function from Client-Side
DESCRIPTION: JavaScript code to invoke the deployed Supabase Edge Function for validating a Cloudflare Turnstile token. The token is passed in the request body and the function returns validation results.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/cloudflare-turnstile/README.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.functions.invoke('cloudflare-turnstile', {
  body: { token },
})
```

----------------------------------------

TITLE: Querying Array Data in SQL
DESCRIPTION: This SQL snippet selects the first item from the 'textarray' column and calculates the total length of the array using the array_length function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
SELECT textarray[1], array_length(textarray, 1) FROM arraytest;
```

----------------------------------------

TITLE: Creating Hybrid Vector Embeddings Table in SQL
DESCRIPTION: Creates a table that combines both structured and unstructured metadata approaches, using dedicated columns for known fields and a JSONB column for dynamic metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/structured-unstructured.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create table docs (
  id uuid primary key,
  embedding vector(3),
  content text,
  url string,
  meta jsonb
);

insert into docs
  (id, embedding, content, url, meta)
values
  (
    '79409372-7556-4ccc-ab8f-5786a6cfa4f7',
    array[0.1, 0.2, 0.3],
    'Hello world',
    '/hello-world',
    '{"key": "value"}'
  );
```

----------------------------------------

TITLE: Realtime Server Component
DESCRIPTION: Implements the server-side portion of a realtime posts component with initial data fetch.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_17

LANGUAGE: tsx
CODE:
```
import supabase from '../../utils/supabase'
import RealtimePosts from './realtime-posts'

export const revalidate = 0

export default async function Realtime() {
  const { data } = await supabase.from('posts').select('*')
  return <RealtimePosts serverPosts={data} />
}
```

----------------------------------------

TITLE: Combining Data Fetching and Mutations with Next.js Server Actions
DESCRIPTION: Example showing how to use both data fetching and mutations within the same Next.js component using Supabase. This demonstrates fetching data with Server Components and adding server-side mutation logic using Server Actions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const { data } = await supabase.from('...').select()

  const createNote = async () => {
    'use server'
    await supabase.from('...').insert({...})
  }

  return ...
}
```

----------------------------------------

TITLE: Creating Token Exchange Endpoint in Express
DESCRIPTION: This Express.js snippet creates a route that processes token exchanges. It retrieves the necessary parameters from the request, verifies the OTP with Supabase, and handles user redirection based on the verification result.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
// The client you created from the Server-Side Auth instructions
const { createClient } = require("./lib/supabase")
...
app.get("/auth/confirm", async function (req, res) {
  const token_hash = req.query.token_hash
  const type = req.query.type
  const next = req.query.next ?? "/"

  if (token_hash && type) {
    const supabase = createClient({ req, res })
    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })
    if (!error) {
      res.redirect(303, `/${next.slice(1)}`)
    }
  }

  // return the user to an error page with some instructions
  res.redirect(303, '/auth/auth-code-error')
})
```

----------------------------------------

TITLE: Implementing Resumable Uploads with Uppy.js and TUS Protocol
DESCRIPTION: Shows how to implement resumable file uploads using Uppy.js with TUS protocol integration for Supabase Storage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-12-storage-v3-resumable-uploads.mdx#2025-04-22_snippet_3

LANGUAGE: jsx
CODE:
```
import { Uppy, Dashboard, Tus } from 'https://releases.transloadit.com/uppy/v3.6.1/uppy.min.mjs'

const token = 'anon-key'
const projectId = 'your-project-ref'
const bucketName = 'avatars'
const folderName = 'foldername'
const supabaseUploadURL = `https://${projectId}.supabase.co/storage/v1/upload/resumable`

var uppy = new Uppy()
  .use(Dashboard, {
    inline: true,
    target: '#drag-drop-area',
    showProgressDetails: true,
  })
  .use(Tus, {
    endpoint: supabaseUploadURL,
    headers: {
      authorization: `Bearer ${token}`,
    },
    chunkSize: 6 * 1024 * 1024,
    allowedMetaFields: ['bucketName', 'objectName', 'contentType', 'cacheControl'],
  })

uppy.on('file-added', (file) => {
  file.meta = {
    ...file.meta,
    bucketName: bucketName,
    objectName: folderName ? `${folderName}/${file.name}` : file.name,
    contentType: file.type,
  }
})

uppy.on('complete', (result) => {
  console.log('Upload complete! We've uploaded these files:', result.successful)
})
```

----------------------------------------

TITLE: Running Supabase functions locally with environment variables
DESCRIPTION: Commands to start the Supabase local environment and serve the Edge Function with environment variables from a .env file, without JWT verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/send-emails.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase start
supabase functions serve --no-verify-jwt --env-file .env
```

----------------------------------------

TITLE: Using EXPLAIN for Query Plan Analysis in SQL
DESCRIPTION: This snippet demonstrates how to use the EXPLAIN keyword to view the query execution plan in Postgres, which is useful for understanding index usage and query optimization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
EXPLAIN <your query>
```

----------------------------------------

TITLE: Creating Edge Function for Image Processing
DESCRIPTION: Command to create a new Supabase Edge Function for image manipulation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/image-manipulation.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions new image-blur
```

----------------------------------------

TITLE: Setting Refreshed JWT Token in Swift
DESCRIPTION: This Swift snippet demonstrates setting a refreshed JWT token for Supabase Realtime authentication using the `setAuth` method. This assumes that supabase client has already been initialised.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_56

LANGUAGE: swift
CODE:
```
await supabase.realtime.setAuth("fresh-token")
```

----------------------------------------

TITLE: Normalizing MongoDB Data in PostgreSQL
DESCRIPTION: SQL commands to transform the imported MongoDB JSONB data into normalized PostgreSQL tables. The example shows extracting user information and normalizing nested order data into separate tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-20-migrating-mongodb-data-api-with-supabase.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- Example to normalize user data
INSERT INTO users (name, email)
SELECT
  data->>'name' as name,
  data->>'email' as email
FROM mongo_users_raw;

-- Example to normalize orders into a separate table
INSERT INTO orders (user_id, product, quantity)
SELECT
  u.id,
  orders->>'product',
  (orders.value->>'quantity')::INTEGER
FROM mongo_users_raw m
JOIN users u ON (m.data->>'name') = u.name,
LATERAL jsonb_array_elements(m.data->'orders') AS order_data
```

----------------------------------------

TITLE: Creating a Table with Generated Embeddings Column in SQL
DESCRIPTION: This snippet demonstrates how to create a table with a vector column that automatically generates embeddings using the embed() function. This approach uses a generated column that calls an embedding function on write, but has limitations for large-scale applications.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table documents (
  id uuid primary key,
  content text,
  embedding vector(1536) generated always as (embed(content)) stored
);
```

----------------------------------------

TITLE: Downloading a file using Python in Supabase Storage
DESCRIPTION: This Python snippet demonstrates how to download a file from Supabase Storage. It uses the `supabase.storage.from_('avatars').download('public/avatar1.png')` method to download the file located at 'public/avatar1.png' within the 'avatars' bucket. The response object contains the result of the operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_10

LANGUAGE: python
CODE:
```
response = supabase.storage.from_('avatars').download('public/avatar1.png')
```

----------------------------------------

TITLE: pg_net HTTP POST Request Example
DESCRIPTION: SQL example demonstrating how to make an asynchronous HTTP POST request using the pg_net PostgreSQL extension.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-30-supabase-functions-updates.mdx#2025-04-22_snippet_2

LANGUAGE: sql
CODE:
```
select
    net.http_post(
        url:='https://httpbin.org/post',
        body:='{"hello": "world"}'::jsonb
    );
```

----------------------------------------

TITLE: Converting Anonymous User to Permanent User with Email in Supabase JS
DESCRIPTION: JavaScript code to update an anonymous user with an email address, converting them to a permanent user while preserving their user ID.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase
  .auth
  .updateUser({ email })
```

----------------------------------------

TITLE: Creating Employee Table Migration
DESCRIPTION: SQL migration script for creating a basic employees table with an auto-incrementing ID and name field.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create table public.employees (
  id integer primary key generated always as identity,
  name text
);
```

----------------------------------------

TITLE: Creating Supabase Client for API Routes in Next.js
DESCRIPTION: Utility function to create a Supabase client for use in Next.js API routes, handling server-side cookie management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
import { createServerClient, serializeCookieHeader } from '@supabase/ssr'
import { type NextApiRequest, type NextApiResponse } from 'next'

export default function createClient(req: NextApiRequest, res: NextApiResponse) {
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return Object.keys(req.cookies).map((name) => ({ name, value: req.cookies[name] || '' }))
        },
        setAll(cookiesToSet) {
          res.setHeader(
            'Set-Cookie',
            cookiesToSet.map(({ name, value, options }) =>
              serializeCookieHeader(name, value, options)
            )
          )
        },
      },
    }
  )

  return supabase
}
```

----------------------------------------

TITLE: Deploying Supabase Function
DESCRIPTION: Deploys a specific Supabase function after making local edits.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/quickstart.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
supabase functions deploy function-name
```

----------------------------------------

TITLE: Authenticating WebSocket Connections with JWT via Query Parameters
DESCRIPTION: An example of authenticating WebSocket connections by extracting and validating a JWT from URL query parameters. The code verifies the user's authentication status using Supabase's auth services before upgrading the connection to a WebSocket.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/websockets.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { createClient } from "jsr:@supabase/supabase-js@2";

const supabase = createClient(
Deno.env.get("SUPABASE_URL"),
Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"),
);
Deno.serve(req => {
const upgrade = req.headers.get("upgrade") || "";

    if (upgrade.toLowerCase() != "WebSocket") {
        return new Response("request isn't trying to upgrade to WebSocket.", { status: 400 });
    }

// Please be aware query params may be logged in some logging systems.
const url = new URL(req.url);
const jwt = url.searchParams.get("jwt");
if (!jwt) {
console.error("Auth token not provided");
return new Response("Auth token not provided", { status: 403 });
}
const { error, data } = await supabase.auth.getUser(jwt);
if (error) {
console.error(error);
return new Response("Invalid token provided", { status: 403 });
}
if (!data.user) {
console.error("user is not authenticated");
return new Response("User is not authenticated", { status: 403 });
}

    const { socket, response } = Deno.upgradeWebSocket(req);

    socket.onopen = () => console.log("socket opened");
    socket.onmessage = (e) => {
        console.log("socket message:", e.data);
        socket.send(new Date().toString());
    };

    socket.onerror = e => console.log("socket errored:", e.message);
    socket.onclose = () => console.log("socket closed");

    return response;

});
```

----------------------------------------

TITLE: Signing Out in JavaScript using Supabase
DESCRIPTION: Demonstrates logging out a user using the Supabase JS client by calling the signOut() function to remove the session and clear relevant storage. This snippet requires a Supabase client instance created with project URL and anon key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

```

----------------------------------------

TITLE: Signing Out from Supabase (Flutter)
DESCRIPTION: This Flutter snippet shows how to implement the sign-out functionality using the Supabase SDK. The `signOut` method is called to clear the user session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
Future<void> signOut() async {
  await supabase.auth.signOut();
}
```

----------------------------------------

TITLE: Implementing CORS in Edge Function Handler
DESCRIPTION: Demonstrates a complete Edge Function implementation with CORS support, including preflight request handling, request processing, and error handling. The function accepts JSON input with a name parameter and returns a greeting message.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/cors.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { corsHeaders } from '../_shared/cors.ts'

console.log(`Function "browser-with-cors" up and running!`)

Deno.serve(async (req) => {
  // This is needed if you're planning to invoke your function from a browser.
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { name } = await req.json()
    const data = {
      message: `Hello ${name}!`,
    }

    return new Response(JSON.stringify(data), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    })
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    })
  }
})
```

----------------------------------------

TITLE: Creating Supabase Swift Profile View
DESCRIPTION: This SwiftUI view allows authenticated users to view and update their profile details stored in Supabase. It includes fields for username, full name, and website, along with buttons for updating the profile and signing out.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#_snippet_2

LANGUAGE: Swift
CODE:
```
import SwiftUI

struct ProfileView: View {
  @State var username = ""
  @State var fullName = ""
  @State var website = ""

  @State var isLoading = false

  var body: some View {
    NavigationStack {
      Form {
        Section {
          TextField("Username", text: $username)
            .textContentType(.username)
            .textInputAutocapitalization(.never)
          TextField("Full name", text: $fullName)
            .textContentType(.name)
          TextField("Website", text: $website)
            .textContentType(.URL)
            .textInputAutocapitalization(.never)
        }

        Section {
          Button("Update profile") {
            updateProfileButtonTapped()
          }
          .bold()

          if isLoading {
            ProgressView()
          }!
        }
      }
      .navigationTitle("Profile")
      .toolbar(content: {
        ToolbarItem(placement: .topBarLeading){
          Button("Sign out", role: .destructive) {
            Task {
              try? await supabase.auth.signOut()
            }
          }
        }
      })
    }
    .task {
      await getInitialProfile()
    }
  }

  func getInitialProfile() async {
    do {
      let currentUser = try await supabase.auth.session.user

      let profile: Profile =
      try await supabase
        .from("profiles")
        .select()
        .eq("id", value: currentUser.id)
        .single()
        .execute()
        .value

      self.username = profile.username ?? ""
      self.fullName = profile.fullName ?? ""
      self.website = profile.website ?? ""

    } catch {
      debugPrint(error)
    }
  }

  func updateProfileButtonTapped() {
    Task {
      isLoading = true
      defer { isLoading = false }
      do {
        let currentUser = try await supabase.auth.session.user

        try await supabase
          .from("profiles")
          .update(
            UpdateProfileParams(
              username: username,
              fullName: fullName,
              website: website
            )
          )
          .eq("id", value: currentUser.id)
          .execute()
      } catch {
        debugPrint(error)
      }
    }
  }
}
```

----------------------------------------

TITLE: Querying Data from Supabase in Vue Component
DESCRIPTION: A Vue component that fetches instrument data from a Supabase table and renders it as a list. The data is retrieved on component mount using the Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/vue.mdx#2025-04-21_snippet_3

LANGUAGE: vue
CODE:
```
<script setup>
import { ref, onMounted } from 'vue'
import { supabase } from './lib/supabaseClient'

const instruments = ref([])

async function getInstruments() {
  const { data } = await supabase.from('instruments').select()
  instruments.value = data
}

onMounted(() => {
   getInstruments()
})
</script>

<template>
  <ul>
    <li v-for="instrument in instruments" :key="instrument.id">{{ instrument.name }}</li>
  </ul>
</template>
```

----------------------------------------

TITLE: Using Infinite Query Hook with Filtering
DESCRIPTION: This code snippet shows how to use the `useInfiniteQuery` hook to filter data based on search parameters. It uses the `useSearchParams` hook to get the search query from the URL and applies a filter to the Supabase query to only fetch products whose names contain the search query.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/infinite-query-hook.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const params = useSearchParams()
const searchQuery = params.get('q')

const { data, isLoading, isFetching, fetchNextPage, count, isSuccess } = useInfiniteQuery({
  tableName: 'products',
  columns: '*',
  pageSize: 10,
  trailingQuery: (query) => {
    if (searchQuery && searchQuery.length > 0) {
      query = query.ilike('name', `%${searchQuery}%`)
    }
    return query
  },
})

return (
  <div>
    {data.map((item) => (
      <ProductCard key={item.id} product={item} />
    ))}
    <Button onClick={fetchNextPage}>Load more products</Button>
  </div>
)
```

----------------------------------------

TITLE: Signing Out Users in Supabase JavaScript
DESCRIPTION: This JavaScript code demonstrates how to log out users and clear session data using the `signOut` method in a Supabase environment. The client must be pre-configured with project-specific details. It is a straightforward logout operation removing the authentication token from the session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: TypeScript Types for Complex Queries with Joins
DESCRIPTION: This TypeScript code demonstrates how to use helper types to get nested types for database joins, specifically for a query joining countries and cities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'

const countriesWithCitiesQuery = supabase
  .from("countries")
  .select(`
    id,
    name,
    cities (
      id,
      name
    )
  `);
type CountriesWithCities = QueryData<typeof countriesWithCitiesQuery>;

const { data, error } = await countriesWithCitiesQuery;
if (error) throw error;
const countriesWithCities: CountriesWithCities = data;
```

----------------------------------------

TITLE: Installing Supabase JS via pnpm
DESCRIPTION: Command to install the Supabase JavaScript library using pnpm package manager.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/installing.mdx#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
pnpm add @supabase/supabase-js
```

----------------------------------------

TITLE: Accessing Custom Schema Table in Supabase JS Client
DESCRIPTION: Example of how to properly reference a table in a custom schema using the Supabase JavaScript client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-42p01-relation-does-not-exist-error-W4_9-V.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.schema('myschema').from('mytable').select()
```

----------------------------------------

TITLE: Integrating OAuth Sign In with WorkOS in Supabase using JavaScript
DESCRIPTION: This snippet demonstrates how to implement OAuth sign-in using WorkOS in a Supabase project. It initializes a Supabase client and defines a function that calls the signInWithOAuth method with the WorkOS provider. The redirect URL must be set in the Supabase dashboard. The function handles the response by redirecting the user if login is successful.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-workos.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js';
const supabase = createClient('<your-project-url>', '<your-anon-key>');
const redirect = (url: string) => {}

// ---cut---
async function signInWithWorkOS() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'workos',
    options: {
      redirectTo: 'http://example.com/auth/v1/callback', // Make sure your redirect URL is configured in the Supabase Dashboard Auth settings
      queryParams: {
        connection: '<connection_id>',
      },
    },
  })

  if (data.url) {
    redirect(data.url) // use the redirect API for your server or framework
  }
}
```

----------------------------------------

TITLE: Signing In with Apple ID Token (Native) - Supabase Flutter
DESCRIPTION: Checks for the presence of the ID token obtained from the native Apple sign-in credential. If found, it uses the Supabase client's `signInWithIdToken` method to authenticate the user with Apple, providing the ID token and the original nonce.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#_snippet_5

LANGUAGE: Dart
CODE:
```
final idToken = credential.identityToken;
if (idToken == null) {
  throw const AuthException(
      'Could not find ID Token from generated credential.');
}

return supabase.auth.signInWithIdToken(
  provider: OAuthProvider.apple,
  idToken: idToken,
  nonce: rawNonce,
);
```

----------------------------------------

TITLE: Configuring AppComponent for User Session Management in Angular
DESCRIPTION: This snippet shows how to set up the AppComponent to handle user sessions using the SupabaseService. It initializes the session and listens for auth changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { Component, OnInit } from '@angular/core'
import { SupabaseService } from './supabase.service'

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent implements OnInit {
  title = 'angular-user-management'

  session = this.supabase.session

  constructor(private readonly supabase: SupabaseService) {}

  ngOnInit() {
    this.supabase.authChanges((_, session) => (this.session = session))
  }
}
```

----------------------------------------

TITLE: Combined Presence and Broadcast Policies
DESCRIPTION: SQL policies that handle both presence and broadcast authorization in a single policy.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/authorization.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create policy "authenticated can listen to broadcast and presence on topic"
on "realtime"."messages"
for select
to authenticated
using (
  exists (
    select
      user_id
    from
      rooms_users
    where
      user_id = (select auth.uid())
      and topic = (select realtime.topic())
      and realtime.messages.extension in ('broadcast', 'presence')
  )
);
```

----------------------------------------

TITLE: Move object across buckets using Supabase
DESCRIPTION: Moves an object from one bucket to another using the Supabase storage API. This snippet demonstrates how to specify the destination bucket using the `destinationBucket` option. The original object is deleted after the move. Requires `@supabase/supabase-js` and a valid Supabase client instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
await supabase.storage.from('avatars').move('public/avatar1.png', 'private/avatar2.png', {
  destinationBucket: 'avatars2',
})
```

----------------------------------------

TITLE: Implementing Google Sign-In with Swift for iOS
DESCRIPTION: Swift code to implement native Google sign-in with Supabase in an iOS app. It uses the GoogleSignIn-iOS package to obtain an ID token and access token, which are then used to sign in to Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_3

LANGUAGE: swift
CODE:
```
import GoogleSignIn

class GoogleSignInViewController: UIViewController {
  ...

  func googleSignIn() async throws {
    let result = try await GIDSignIn.sharedInstance.signIn(withPresenting: self)

    guard let idToken = result.user.idToken?.tokenString else {
      print("No idToken found.")
      return
    }

    let accessToken = result.user.accessToken.tokenString

    try await supabase.auth.signInWithIdToken(
      credentials: OpenIDConnectCredentials(
        provider: .google,
        idToken: idToken,
        accessToken: accessToken
      )
    )
  }
  ...

}
```

----------------------------------------

TITLE: Complex index_advisor Query Example with Multiple Tables
DESCRIPTION: A more complex example demonstrating the extension's ability to recommend multiple indexes for queries involving joins across several tables. The extension identifies foreign key relationships that would benefit from indexing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/index_advisor.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create extension if not exists index_advisor cascade;

create table author(
    id serial primary key,
    name text not null
);

create table publisher(
    id serial primary key,
    name text not null,
    corporate_address text
);

create table book(
    id serial primary key,
    author_id int not null references author(id),
    publisher_id int not null references publisher(id),
    title text
);

create table review(
    id serial primary key,
    book_id int references book(id),
    body text not null
);

select
    *
from
    index_advisor('
        select
            book.id,
            book.title,
            publisher.name as publisher_name,
            author.name as author_name,
            review.body review_body
        from
            book
            join publisher
                on book.publisher_id = publisher.id
            join author
                on book.author_id = author.id
            join review
                on book.id = review.book_id
        where
            author.id = $1
            and publisher.id = $2
    ');

 startup_cost_before | startup_cost_after | total_cost_before | total_cost_after |                  index_statements                         | errors
---------------------+--------------------+-------------------+------------------+-----------------------------------------------------------+--------
 27.26               | 12.77              | 68.48             | 42.37            | {"CREATE INDEX ON public.book USING btree (author_id)",   | {}
                                                                                    "CREATE INDEX ON public.book USING btree (publisher_id)",
                                                                                    "CREATE INDEX ON public.review USING btree (book_id)"}
(3 rows)
```

----------------------------------------

TITLE: Creating a User with Custom Metadata in Supabase Auth (Admin)
DESCRIPTION: This code snippet demonstrates how to create a new user in Supabase Auth with custom metadata using the admin API. It utilizes the `createUser` method, passing in the user's email, `user_metadata`, and `app_metadata`.  It requires the `@supabase/supabase-js` library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/auth0.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const { data, error } = await supabase.auth.admin.createUser({
  email: 'valid.email@supabase.io',
  user_metadata: {
    full_name: 'Foo Bar',
  },
  app_metadata: {
    role: 'admin',
  },
})
```

----------------------------------------

TITLE: Creating One-to-One Relationships in SQL
DESCRIPTION: Shows two methods of creating one-to-one relationships in PostgreSQL: using a unique constraint on a foreign key or using a primary key as a foreign key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
-- A unique constraint on a foreign key
create table country (
  id serial primary key,
  name text
);

create table capital (
  id serial primary key,
  name text,
  country_id int unique,
  foreign key (country_id) references country (id)
);

-- or a primary key on a foreign key
create table country (
  id serial primary key,
  name text
);

create table capital (
  id serial primary key,
  name text,
  foreign key (id) references country (id)
);
```

----------------------------------------

TITLE: Using Sign-Out Scopes Dart
DESCRIPTION: This snippet illustrates how to use sign-out scopes like 'global' and 'local' in Dart with Supabase Auth. The default behavior is to end all sessions. It's necessary to have Supabase Dart library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_6

LANGUAGE: Dart
CODE:
```
// defaults to the local scope\nawait supabase.auth.signOut();\n\n// sign out from all sessions\nawait supabase.auth.signOut(scope: SignOutScope.global);
```

----------------------------------------

TITLE: Full Text Search on Description Using Python
DESCRIPTION: Python implementation using Supabase client to perform a full text search on the books table, searching the description column for the word 'big'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
data = supabase.from_('books').select().text_search('description', "'big'").execute()
```

----------------------------------------

TITLE: Implementing Apple Sign-In with Expo and Supabase Auth (TSX)
DESCRIPTION: This snippet provides a React Native component (`Auth`) that renders an Apple Sign-In button specifically for iOS using `expo-apple-authentication`. It handles the button press, retrieves the Apple ID credential, and uses the identity token to sign in the user via Supabase Auth's `signInWithIdToken` method. It includes basic error handling for user cancellation and other errors.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Platform } from 'react-native'
import * as AppleAuthentication from 'expo-apple-authentication'
import { supabase } from 'app/utils/supabase'

export function Auth() {
  if (Platform.OS === 'ios')
    return (
      <AppleAuthentication.AppleAuthenticationButton
        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
        cornerRadius={5}
        style={{ width: 200, height: 64 }}
        onPress={async () => {
          try {
            const credential = await AppleAuthentication.signInAsync({
              requestedScopes: [
                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
                AppleAuthentication.AppleAuthenticationScope.EMAIL,
              ],
            })
            // Sign in via Supabase Auth.
            if (credential.identityToken) {
              const {
                error,
                data: {
                  user
                },
              } = await supabase.auth.signInWithIdToken({
                provider: 'apple',
                token: credential.identityToken,
              })
              console.log(JSON.stringify({ error, user }, null, 2))
              if (!error) {
                // User is signed in.
              }
            } else {
              throw new Error('No identityToken.')
            }
          } catch (e) {
            if (e.code === 'ERR_REQUEST_CANCELED') {
              // handle that the user canceled the sign-in flow
            } else {
              // handle other errors
            }
          }
        }}
      />
    )
  return <>{/* Implement Android Auth options. */}</>
}
```

----------------------------------------

TITLE: Importing Sheets Submodule from googleapis NPM Package in TypeScript
DESCRIPTION: Demonstrates how to selectively import a specific submodule from an NPM package to optimize bundle size in Supabase Edge Functions. This example imports the Sheets submodule from the googleapis package.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/troubleshooting.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { Sheets } from 'npm:@googleapis/sheets'
```

----------------------------------------

TITLE: Signing Out a User Swift
DESCRIPTION: This Swift snippet uses asynchronous syntax to call the sign out method from the Supabase client library, clearing the user session. Ensure the necessary Supabase packages are integrated into the Swift project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_2

LANGUAGE: Swift
CODE:
```
try await supabase.auth.signOut()
```

----------------------------------------

TITLE: Inspecting Database Cache Hit Rate using Supabase CLI
DESCRIPTION: This code snippet demonstrates how to use the Supabase CLI to check the cache hit rate of a linked project's database. It includes steps for logging in, initializing a local Supabase directory, linking a project, and running the inspect command.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supabase-grafana-memory-charts.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
# login to the CLI
npx supabase login

# initlize a local supabase directory
npx supabase init

#link your project
npx supabase link

# find cache hit rate
npx supabase inspect db cache-hit --linked
```

----------------------------------------

TITLE: Listening to DELETE Events in Kotlin with Supabase Realtime
DESCRIPTION: Sets up a Kotlin channel to listen for DELETE events in the public schema of a Supabase database. The code creates a flow of PostgresAction.Delete events and processes them in a coroutine scope.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_23

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Delete>(schema = "public")

changes
    .onEach {
        println(it.oldRecord)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

----------------------------------------

TITLE: Creating Products Table in SQL with Supabase
DESCRIPTION: Creates a public products table with UUID primary key, name, price, and optional image fields. Uses PostgreSQL default tablespace.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/product_management_sql_template.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table
  public.products (
    id uuid not null default gen_random_uuid (),
    name text not null,
    price real not null,
    image text null,
    constraint products_pkey primary key (id)
  ) tablespace pg_default;
```

----------------------------------------

TITLE: Resizing Images with Custom Mode in Supabase Storage in Swift
DESCRIPTION: This snippet demonstrates downloading a resized image (800x300) with the 'contain' resize mode from Supabase Storage using the Swift client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_29

LANGUAGE: Swift
CODE:
```
let data = try await supabase.storage.from("bucket")
  .download(
    path: "image.jpg",
    options: TransformOptions(
      width: 800,
      height: 300,
      resize: "contain" // "cover" | "fill"
    )
  )
```

----------------------------------------

TITLE: Syncing and Tracking State in JavaScript
DESCRIPTION: This snippet shows how to listen to presence events in JavaScript using the Supabase client. It captures state changes such as sync, join, and leave events.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const roomOne = supabase.channel('room_01')

roomOne
  .on('presence', { event: 'sync' }, () => {
    const newState = roomOne.presenceState()
    console.log('sync', newState)
  })
  .on('presence', { event: 'join' }, ({ key, newPresences }) => {
    console.log('join', key, newPresences)
  })
  .on('presence', { event: 'leave' }, ({ key, leftPresences }) => {
    console.log('leave', key, leftPresences)
  })
  .subscribe()
```

----------------------------------------

TITLE: Creating Splash Page for Auth State Redirection in Flutter
DESCRIPTION: This snippet defines a SplashPage widget that checks the user's authentication state and redirects them to either the Register page or the Chat page accordingly. It uses the Supabase auth currentSession to determine the user's state.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:my_chat_app/pages/chat_page.dart';
import 'package:my_chat_app/pages/register_page.dart';
import 'package:my_chat_app/utils/constants.dart';

/// Page to redirect users to the appropriate page depending on the initial auth state
class SplashPage extends StatefulWidget {
  const SplashPage({Key? key}) : super(key: key);

  @override
  SplashPageState createState() => SplashPageState();
}

class SplashPageState extends State<SplashPage> {
  @override
  void initState() {
    super.initState();
    _redirect();
  }

  Future<void> _redirect() async {
    // await for for the widget to mount
    await Future.delayed(Duration.zero);

    final session = supabase.auth.currentSession;
    if (session == null) {
      Navigator.of(context)
          .pushAndRemoveUntil(RegisterPage.route(), (route) => false);
    } else {
      Navigator.of(context)
          .pushAndRemoveUntil(ChatPage.route(), (route) => false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return const Scaffold(body: preloader);
  }
}
```

----------------------------------------

TITLE: Querying Vectors with Metadata Filtering
DESCRIPTION: Performs a vector query with optional metadata filtering. Returns a list of vector record IDs based on similarity and filter criteria.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/vector_hello_world.ipynb#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
docs.query(
    query_vector=[0.4,0.5,0.6],
    filters={"year": {"$eq": 2012}}, # metadata filters
)
```

----------------------------------------

TITLE: Checking table-specific autovacuum settings in PostgreSQL
DESCRIPTION: This SQL query shows the custom storage options for a specific table, including any table-level autovacuum settings that override the global configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_10

LANGUAGE: jsx
CODE:
```
SELECT relname, reloptions FROM pg_class WHERE relname='mytable';
```

----------------------------------------

TITLE: Implementing Password Reset Widget
DESCRIPTION: Implementation of password reset functionality using SupaResetPassword widget.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
SupaResetPassword(
  accessToken: supabase.auth.currentSession?.accessToken,
  onSuccess: (UserResponse response) {},
  onError: (error) {},
)
```

----------------------------------------

TITLE: Authorized Channel Access Example
DESCRIPTION: TypeScript example demonstrating successful connection to a private channel with an authenticated user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
// With an authenticated user
supabase.realtime.setAuth(token)

supabase.realtime
  .channel('locked', { config: { private: true } })
  .subscribe((status: string, err: any) => {
    if (status === 'SUBSCRIBED') {
      console.log('Connected!')
    } else {
      console.error(err.message)
    }
  })

// Outputs the following code:
// "Connected!"
```

----------------------------------------

TITLE: Configuring Deep Links for Android in AndroidManifest.xml
DESCRIPTION: XML configuration to set up deep linking for Android in the AndroidManifest.xml file, allowing the app to handle Supabase authentication redirects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_2

LANGUAGE: xml
CODE:
```
<manifest ...>
  <!-- ... other tags -->
  <application ...>
    <activity ...>
      <!-- ... other tags -->

      <!-- Add this intent-filter for Deep Links -->
      <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <!-- Accepts URIs that begin with YOUR_SCHEME://YOUR_HOST -->
        <data
          android:scheme="io.supabase.flutterquickstart"
          android:host="login-callback" />
      </intent-filter>

    </activity>
  </application>
</manifest>
```

----------------------------------------

TITLE: Querying Similar Vectors in Python
DESCRIPTION: Demonstrates how to search for vectors similar to a query vector with optional filtering based on metadata. The query can be customized with distance measures, limits, and return preferences for metadata and distance values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
docs.query(
    query_vector=[0.10,0.21,0.29],   # required
    limit=1,                         # (optional) number of records to return
    filters={"year": {"$eq": 1973}}, # (optional) metadata filters
    measure="cosine_distance",       # (optional) distance measure to use
    include_value=False,             # (optional) should distance measure values be returned?
    include_metadata=False,          # (optional) should record metadata be returned?
)
```

----------------------------------------

TITLE: Custom Logging in Edge Functions with TypeScript
DESCRIPTION: Example of implementing custom log events in a Supabase Edge Function. This snippet demonstrates how to use console.log, console.warn, and console.error for effective debugging, along with error handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/logging.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
Deno.serve(async (req) => {
  try {
    const { name } = await req.json()

    if (!name) {
      console.warn('Empty name provided')
    }

    const data = {
      message: `Hello ${name || 'Guest'}!`, // Provide a default value if name is empty
    }

    console.log(`Name: ${name}`)

    return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })
  } catch (error) {
    console.error(`Error processing request: ${error}`)
    return new Response(JSON.stringify({ error: 'Internal Server Error' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})
```

----------------------------------------

TITLE: Creating Time-Based RLS Policy in PostgreSQL
DESCRIPTION: SQL code that demonstrates creating an analytics table and implementing a Row Level Security policy that only allows access to recent data (within the last 2 months) for specific users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
-- A fake analytics table where we store actions a user takes
create table analytics (
  id serial primary key,
  ts timestamptz default now(),
  profile_id references profiles,
  event text
);
alter table profiles
  enable row level security;

-- Here is an "age" rule so that we only dump the most recent analytics
create policy "Data dump rule" on logs
  for select
  to exporter
  using (
    profile_id in (1, 2, 3) and
    ts > now() - interval '2 MONTHS' -- here's the magic
  );
```

----------------------------------------

TITLE: Initializing Supabase Browser Client
DESCRIPTION: Creates a singleton instance of Supabase browser client using useState hook and shares it through Outlet context.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
const [supabase] = useState(() => createBrowserClient(env.SUPABASE_URL, env.SUPABASE_ANON_KEY))

<Outlet context={{ supabase }} />
```

LANGUAGE: tsx
CODE:
```
const [supabase] = useState(() =>
  createBrowserClient<Database>(env.SUPABASE_URL, env.SUPABASE_ANON_KEY)
)

<Outlet context={{ supabase }} />
```

----------------------------------------

TITLE: Creating a Supabase Client with TypeScript
DESCRIPTION: This TypeScript snippet shows how to create a Supabase client within SvelteKit, configured with specific typings for Handle. It includes functions for safely retrieving session data with JWT validation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_3

LANGUAGE: TypeScript
CODE:
```
// src/hooks.server.ts
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'
import { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit'
import type { Handle } from '@sveltejs/kit'

export const handle: Handle = async ({ event, resolve }) => {
  event.locals.supabase = createSupabaseServerClient({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event,
  })

  /**
   * Unlike `supabase.auth.getSession`, which is unsafe on the server because it
   * doesn't validate the JWT, this function validates the JWT by first calling
   * `getUser` and aborts early if the JWT signature is invalid.
   */
  event.locals.safeGetSession = async () => {
    const {
      data: { user },
      error,
    } = await supabase.auth.getUser()
    if (error) {
      return { session: null, user: null }
    }

    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}
```

----------------------------------------

TITLE: Configuring Pre-Request Function
DESCRIPTION: SQL commands to configure the pre-request function for the authenticator role and reload the PostgREST configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
alter role authenticator
  set pgrst.db_pre_request = 'public.check_request';

notify pgrst, 'reload config';
```

----------------------------------------

TITLE: Querying Decrypted Secrets from Vault
DESCRIPTION: Demonstrates how to query the vault.decrypted_secrets view to access decrypted secret values. This view automatically decrypts the stored secrets on-the-fly when queried.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/vault.mdx#2025-04-22_snippet_2

LANGUAGE: sql
CODE:
```
select * 
from vault.decrypted_secrets 
order by created_at desc 
limit 3;
```

----------------------------------------

TITLE: Realtime Chat with Initial Messages in React
DESCRIPTION: This snippet extends the basic usage by incorporating initial messages into the RealtimeChat component. It utilizes a custom hook (useMessagesQuery) to fetch existing messages and passes them as a prop to the RealtimeChat component, allowing the chat to display prior conversations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/realtime-chat.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { RealtimeChat } from '@/components/realtime-chat'
import { useMessagesQuery } from '@/hooks/use-messages-query'

export default function ChatPage() {
  const { data: messages } = useMessagesQuery()

  return <RealtimeChat roomName="my-chat-room" username="john_doe" messages={messages} />
}
```

----------------------------------------

TITLE: Signing Out - Kotlin
DESCRIPTION: This Kotlin code snippet shows how to implement the sign-out functionality using the Supabase client. It calls the signOut() function on the auth object, which removes the user's session and any associated data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitter.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Syncing and Tracking State in Python
DESCRIPTION: This snippet illustrates how to listen to presence events in Python, handling sync, join, and leave actions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
room_one = supabase.channel('room_01')

room_one
  .on_presence_sync(lambda: print('sync', room_one.presenceState()))
  .on_presence_join(lambda key, curr_presences, joined_presences: print('join', key, curr_presences, joined_presences))
  .on_presence_leave(lambda key, curr_presences, left_presences: print('leave', key, curr_presences, left_presences))
  .subscribe()
```

----------------------------------------

TITLE: Query Performance Statistics Analysis in PostgreSQL
DESCRIPTION: SQL query to analyze query performance statistics by showing the most time-consuming queries, their frequency, total execution time, and percentage of total execution time by role
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
select
  auth.rolname,
  statements.query,
  statements.calls,
  statements.total_exec_time + statements.total_plan_time as total_time,
  to_char(
    (
      (statements.total_exec_time + statements.total_plan_time) / sum(
        statements.total_exec_time + statements.total_plan_time
      ) over ()
    ) * 100,
    'FM90D0'
  ) || '%' as prop_total_time
from
  pg_stat_statements as statements
  inner join pg_authid as auth on statements.userid = auth.oid
order by total_time desc
limit 100;
```

----------------------------------------

TITLE: Signing In with Spotify - Kotlin
DESCRIPTION: This snippet illustrates how to use Spotify OAuth for signing in a user in a Kotlin application. It leverages Supabase's `signInWith` method to initiate the authentication process with Spotify as the provider.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithSpotify() {\n\tsupabase.auth.signInWith(Spotify)\n}
```

----------------------------------------

TITLE: Setting Environment Variables for Remix
DESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env file for a Remix application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key
```

----------------------------------------

TITLE: Checking Function Privileges
DESCRIPTION: Shows how to inspect function privileges using \df+ command, revealing access privileges for different roles including public access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_29

LANGUAGE: bash
CODE:
```
# as postgres
postgres=> \df+ add
┌────────┬──────┬──────────────────┬─────────────────────┬──────┬────────────┬──────────┬──────────┬──────────┬──────────────────────────┬──────────┐
│ Schema │ Name │ Result data type │ Argument data types │ Type │ Volatility │ Parallel │   Owner  │ Security │     Access privileges    │ Language │
├────────┼──────┼──────────────────┼─────────────────────┼──────┼────────────┼──────────┼──────────┼──────────┼──────────────────────────┼──────────│
│ public │ add  │ integer          │ integer, integer    │ func │ volatile   │ unsafe   │ postgres │ invoker  │ =X/postgres             ↵│ sql      │
│        │      │                  │                     │      │            │          │          │          │ postgres=X/postgres     ↵│          │
│        │      │                  │                     │      │            │          │          │          │ anon=X/postgres         ↵│          │
│        │      │                  │                     │      │            │          │          │          │ authenticated=X/postgres↵│          │
│        │      │                  │                     │      │            │          │          │          │ service_role=X/postgres  │          │
└────────┴──────┴──────────────────┴─────────────────────┴──────┴────────────┴──────────┴──────────┴──────────┴──────────────────────────┴──────────┘
(1 row)
```

----------------------------------------

TITLE: Querying Computed Relationships with supabase-js
DESCRIPTION: Demonstrates how to query computed relationships using supabase-js, showing both one-to-many and many-to-one relationship queries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_8

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase
  .from('scores')
  .select('lvl_name, player(name)')
  .eq('lvl_name', "Grand Prix 1")
  .single()

console.log(data)

const { data, error } = await supabase
  .from('players')
  .select('name,scores(lvl_name, total)')
  .eq('id', 1)
  .single()

console.log(data)
```

----------------------------------------

TITLE: Scheduling Database Stored Procedure Call in Supabase
DESCRIPTION: This SQL snippet shows how to schedule a cron job to call a database stored procedure every 5 minutes using the cron.schedule function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
select cron.schedule('call-db-procedure', '*/5 * * * *', 'CALL my_procedure()');
```

----------------------------------------

TITLE: Creating TimescaleDB Hypertable
DESCRIPTION: Creates a table for temperature sensor data and converts it into a TimescaleDB hypertable using the time column for partitioning.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/timescaledb.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table temperatures (
  time timestamptz not null,
  sensor_id int not null,
  temperature double precision not null
);

select create_hypertable('temperatures', 'time');
```

----------------------------------------

TITLE: Supabase Login (CLI)
DESCRIPTION: This command logs in to the Supabase CLI using a Personal Access Token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_9

LANGUAGE: bash
CODE:
```
supabase login
```

----------------------------------------

TITLE: Creating Table with Vector Column
DESCRIPTION: SQL commands to create a new table with a vector column or add a vector column to an existing table
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table documents (
  id bigint primary key generated always as identity,
  content text,
  embedding vector(512)
);
```

LANGUAGE: sql
CODE:
```
alter table documents
add column embedding vector(512);
```

----------------------------------------

TITLE: Initializing Vue 3 App with Vite
DESCRIPTION: Commands to create a new Vue 3 project using Vite and install the Supabase JavaScript client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-vue-3.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
# npm 6.x
npm create vite@latest supabase-vue-3 --template vue

# npm 7+, extra double-dash is needed:
npm create vite@latest supabase-vue-3 -- --template vue

cd supabase-vue-3
```

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Creating a Before Insert Trigger in PostgreSQL
DESCRIPTION: This SQL snippet shows how to create a trigger that executes before an insert operation on the 'orders' table. It demonstrates the syntax for a 'BEFORE' trigger.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/triggers.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create trigger before_insert_trigger
before insert on orders
for each row
execute function before_insert_function();
```

----------------------------------------

TITLE: Initializing Supabase Project with CLI
DESCRIPTION: Commands to initialize a Supabase project and start a local Postgres instance using Docker
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vecs-python-client.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
# Initialize your project
supabase init

# Start Postgres
supabase start
```

----------------------------------------

TITLE: Inserting Embeddings into PostgreSQL
DESCRIPTION: Uploads the generated embeddings and metadata into the PostgreSQL database.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
reviews.upsert(records)
```

----------------------------------------

TITLE: Implementing OAuth Sign-In Redirect in Next.js with Supabase Auth
DESCRIPTION: This snippet shows how to perform a server-side redirect for OAuth sign-in using Supabase Auth in a Next.js application. It uses the NextResponse.redirect method to handle the redirection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/oauth-sign-in-isnt-redirecting-on-the-server-side-ShGMtr.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextResponse } from "next/server";
...
const { data } = await supabase.auth.signInWithOAuth({
  provider: 'github',
})

return NextResponse.redirect(data.url)
```

----------------------------------------

TITLE: Signing In with Notion in JavaScript using Supabase
DESCRIPTION: This snippet demonstrates how to use the Supabase JS client library to sign in with Notion via OAuth by calling the function signInWithOAuth() with 'notion' as the provider. Dependencies include the Supabase JS client library, and the function requires project URL and anon key for initialization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signInWithNotion() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'notion',
  })
}

```

----------------------------------------

TITLE: Enabling PostGIS Extension in Postgres via SQL
DESCRIPTION: SQL commands to create a dedicated schema and enable the PostGIS extension for geo-spatial data handling in Postgres. The example also shows how to disable the extension if needed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create a dedicated separate schema
create schema if not exists "gis";

-- Example: enable the "postgis" extension
create extension postgis with schema "gis";

-- Example: disable the "postgis" extension
drop extension if exists postgis;
```

----------------------------------------

TITLE: Implementing Broadcast for Real-time Cursor Position Sharing in JavaScript
DESCRIPTION: This snippet demonstrates how to use Supabase Realtime's Broadcast feature to send and receive mouse cursor positions in real-time. It shows how to subscribe to a channel, listen for broadcast events, and send cursor position updates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-18-supabase-realtime-multiplayer-general-availability.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const channel = supabase.channel('room_1')
const MOUSE_EVENT = 'cursor'

// Subscribe to mouse events.
// Our second parameter filters only for mouse events.
channel
  .on('broadcast', { event: MOUSE_EVENT }, (event) => {
    receivedCursorPosition(event)
  })
  .subscribe()

// Handle a mouse event.
const receivedCursorPosition = ({ event, payload }) => {
  console.log(`
		User: ${payload.userId}
		x Position: ${payload.x}
		y Position: ${payload.y}
	`)
}

// Helper function for sending our own mouse position.
const sendMousePosition = (channel, userId, x, y) => {
  return channel.send({
    type: 'broadcast',
    event: MOUSE_EVENT,
    payload: { userId, x, y },
  })
}
```

----------------------------------------

TITLE: Using the FilterBar Component
DESCRIPTION: This example demonstrates the usage of the `FilterBar` component with static filter properties. It manages the `filters` state using `useState` and provides handlers for freeform text and filter changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export function FilterDemo() {
  const [filters, setFilters] = useState<FilterGroup>(initialFilters)
  const [freeformText, setFreeformText] = useState('')

  return (
    <FilterBar
      filterProperties={filterProperties}
      freeformText={freeformText}
      onFreeformTextChange={setFreeformText}
      filters={filters}
      onFilterChange={setFilters}
    />
  )
}
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase in Next.js
DESCRIPTION: The purpose of this snippet is to set the required environment variables for connecting a Next.js application with a Supabase project. These variables are crucial for initializing the Supabase client. Ensure that 'NEXT_PUBLIC_SUPABASE_URL' and 'NEXT_PUBLIC_SUPABASE_ANON_KEY' are set with correct values which can be obtained from the Supabase dashboard or a local instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/social-auth.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Basic ETL Query with Foreign Data Wrapper
DESCRIPTION: SQL query demonstrating how to copy data from a production database to a data warehouse for the last 24 hours using FDW.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
insert into warehouse.analytics
select * from public.analytics
where ts > (now() - interval '1 DAY');
```

----------------------------------------

TITLE: Searching for Specific Items in JSONB Arrays in PostgreSQL
DESCRIPTION: Shows how to search for specific items within JSONB arrays using a Common Table Expression (CTE). This example flattens the food log data into a tabular form and then filters for a specific food item ('Garlic Bread').
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
with my_food as
(
  select
    date,
    jsonb_array_elements(food_log)->>'title' as title,
    (jsonb_array_elements(food_log)->'calories')::integer as calories
  from calendar
  where user_id = 'xyz'
    and date between '2022-01-01' and '2022-01-31'
)
select
  title,
  calories
from my_food
where title = 'Garlic Bread';
```

----------------------------------------

TITLE: Configuring Seed Files using Glob Pattern - TOML
DESCRIPTION: Configuration snippet for `supabase/config.toml` to enable database seeding and specify a glob pattern to include multiple SQL files from a directory as seeds. The pattern `./seeds/*.sql` includes all `.sql` files within the `supabase/seeds` directory.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#_snippet_2

LANGUAGE: toml
CODE:
```
[db.seed]
enabled = true
sql_paths = ['./seeds/*.sql']
```

----------------------------------------

TITLE: Disabling explain() in Supabase
DESCRIPTION: SQL commands to disable the explain() method after use by setting the appropriate role parameters back to their default values and reloading the configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/debugging-performance.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
-- disable explain
alter role authenticator
set pgrst.db_plan_enabled to 'false';

-- if you used the above pre-request
alter role authenticator
set pgrst.db_pre_request to '';

-- reload the config
notify pgrst, 'reload config';
```

----------------------------------------

TITLE: Downloading a file using Dart in Supabase Storage
DESCRIPTION: This Dart snippet shows how to download a file from Supabase Storage. It uses the `supabase.storage.from('public').download('example.txt')` method to download the file located at 'example.txt' within the 'public' bucket. The `async` keyword handles the asynchronous download operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_8

LANGUAGE: dart
CODE:
```
void main() async {
  final supabase = SupabaseClient('supabaseUrl', 'supabaseKey');

  final storageResponse = await supabase
      .storage
      .from('public')
      .download('example.txt');
}
```

----------------------------------------

TITLE: Revoking Public Execute Permission
DESCRIPTION: Shows the process of revoking execute permission from the public role, which effectively prevents junior_dev from executing the function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_30

LANGUAGE: bash
CODE:
```
# as postgres
postgres=> revoke execute on function add(integer, integer) from public;
REVOKE
postgres=> \df+ add
┌────────┬──────┬──────────────────┬─────────────────────┬──────┬────────────┬──────────┬──────────┬──────────┬──────────────────────────┬──────────┐
│ Schema │ Name │ Result data type │ Argument data types │ Type │ Volatility │ Parallel │   Owner  │ Security │     Access privileges    │ Language │
├────────┼──────┼──────────────────┼─────────────────────┼──────┼────────────┼──────────┼──────────┼──────────┼──────────────────────────┼──────────│
│ public │ add  │ integer          │ integer, integer    │ func │ volatile   │ unsafe   │ postgres │ invoker  │ postgres=X/postgres     ↵│ sql      │
│        │      │                  │                     │      │            │          │          │          │ anon=X/postgres         ↵│          │
│        │      │                  │                     │      │            │          │          │          │ authenticated=X/postgres↵│          │
│        │      │                  │                     │      │            │          │          │          │ service_role=X/postgres  │          │
│        │      │                  │                     │      │            │          │          │          │                          │          │
└────────┴──────┴──────────────────┴─────────────────────┴──────┴────────────┴──────────┴──────────┴──────────┴──────────────────────────┴──────────┘
(1 row)
```

----------------------------------------

TITLE: Specifying Content Type for Uploads in Supabase Storage with JavaScript
DESCRIPTION: This snippet demonstrates how to specify the content type when uploading a file to Supabase Storage using JavaScript. It uses the 'contentType' option to set the MIME type.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const file = new Blob()

// Create Supabase client
const supabase = createClient('your_project_url', 'your_supabase_api_key')

await supabase.storage.from('bucket_name').upload('file_path', file, {
  contentType: 'image/jpeg',
})
```

----------------------------------------

TITLE: Configuring Avatar Storage and Access Control in SQL
DESCRIPTION: Sets up a storage bucket for avatars and creates policies for public access, uploading, and updating avatar images. Ensures users can only update their own avatars.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/user_management_quickstart_sql_template.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage/security/access-control#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');

create policy "Anyone can update their own avatar." on storage.objects
  for update using ((select auth.uid()) = owner) with check (bucket_id = 'avatars');
```

----------------------------------------

TITLE: Creating a SignInViewModel with Authentication Repository in Kotlin
DESCRIPTION: A ViewModel implementation using Hilt for dependency injection that handles sign-in functionality. It manages email and password state using Kotlin Flows and provides methods for email/password sign-in and Google authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_25

LANGUAGE: kotlin
CODE:
```
@HiltViewModel
class SignInViewModel @Inject constructor(
    private val authenticationRepository: AuthenticationRepository
) : ViewModel() {

    private val _email = MutableStateFlow("")
    val email: Flow<String> = _email

    private val _password = MutableStateFlow("")
    val password = _password

    fun onEmailChange(email: String) {
        _email.value = email
    }

    fun onPasswordChange(password: String) {
        _password.value = password
    }

    fun onSignIn() {
        viewModelScope.launch {
            authenticationRepository.signIn(
                email = _email.value,
                password = _password.value
            )
        }
    }

    fun onGoogleSignIn() {
        viewModelScope.launch {
            authenticationRepository.signInWithGoogle()
        }
    }

}
```

----------------------------------------

TITLE: Updating signIn with third-party provider in TypeScript
DESCRIPTION: Example of how to update the signIn method for third-party provider authentication in supabase-js v2. The new version uses signInWithOAuth.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
const { error } = await supabase
  .auth
  .signInWithOAuth({ provider })
```

----------------------------------------

TITLE: Creating a Bucket using SQL in Supabase Storage
DESCRIPTION: This SQL snippet demonstrates how to create a new bucket in Supabase Storage named 'avatars'. It inserts a new row into the `storage.buckets` table, specifying the bucket's ID and name. This allows users to organize their files within distinct containers with specific security and access rules.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Use Postgres to create a bucket.

insert into storage.buckets
  (id, name)
values
  ('avatars', 'avatars');
```

----------------------------------------

TITLE: Sign Out using Supabase
DESCRIPTION: This Swift snippet demonstrates how to sign out a user using Supabase's `signOut` method. It calls the `signOut` function to remove the user's session and local storage data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_6

LANGUAGE: swift
CODE:
```
func signOut() async throws {
  try await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Sign Out Implementation in Kotlin
DESCRIPTION: Method to sign out users and clear browser session and local storage in a Kotlin Supabase application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-bitbucket.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Installing Supabase Dependencies for React Native
DESCRIPTION: Command to install supabase-js and its required dependencies for a React Native project using Expo.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
npx expo install @supabase/supabase-js @react-native-async-storage/async-storage react-native-url-polyfill
```

----------------------------------------

TITLE: Linking OAuth Identity with Swift
DESCRIPTION: Example showing how to link a Google OAuth identity using the Supabase Swift client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_2

LANGUAGE: swift
CODE:
```
try await supabase.auth.linkIdentity(provider: .google)
```

----------------------------------------

TITLE: Creating Database Function and Trigger for User Profile in SQL
DESCRIPTION: SQL commands to create a database function and trigger that automatically adds an entry to public.profiles whenever a new user is created. This ensures that user profiles are maintained alongside user authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-authorization-demo/README.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION insert_user() RETURNS TRIGGER AS
$$
  BEGIN
    INSERT INTO public.profiles (id, email) VALUES (NEW.id, NEW.email); RETURN NEW;
  END;
$$ LANGUAGE plpgsql
   SECURITY DEFINER
   SET search_path = public;

CREATE OR REPLACE TRIGGER "on_new_auth_create_profile"
AFTER INSERT ON auth.users FOR EACH ROW
EXECUTE FUNCTION insert_user();

GRANT EXECUTE ON FUNCTION insert_user () TO supabase_auth_admin;
GRANT INSERT ON TABLE public.profiles TO supabase_auth_admin;
```

----------------------------------------

TITLE: Setting Custom JWT for Realtime in Kotlin
DESCRIPTION: This Kotlin snippet demonstrates how to configure a Supabase client with a custom JWT for Realtime during client initialization using the `Realtime` feature installation. It sets up a Realtime channel and a flow to observe Postgres changes with specific filtering criteria, launching the flow to print each change. Then subscribes to the channel.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_52

LANGUAGE: kotlin
CODE:
```
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
	install(Realtime) {
		jwtToken = "your-custom-jwt"
	}
}
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = "public") {
    table = "products"
    filter = "name=in.(red, blue, yellow)"
}

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

----------------------------------------

TITLE: Inserting Geographic Point Data with Swift
DESCRIPTION: Swift code using Supabase client to insert restaurant data with geographic points. It defines a Restaurant struct for type safety before inserting the data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_6

LANGUAGE: swift
CODE:
```
struct Restaurant: Codable {
    let name: String
    let location: String // You could also use a custom type with a custom `Encodable` conformance for convenience.
}

try await supabase.from("restaurants")
  .insert(
    [
      Restaurant(name: "Supa Burger", location: "POINT(-73.946823 40.807416)"),
      Restaurant(name: "Supa Pizza", location: "POINT(-73.94581 40.807475)"),
      Restaurant(name: "Supa Taco", location: "POINT(-73.945826 40.80629)"),
    ]
  )
  .execute()
```

----------------------------------------

TITLE: Granting Select Privilege on PostgreSQL Table
DESCRIPTION: This snippet demonstrates how to grant select privilege on a table to a specific role. It shows an error when the granting user doesn't have sufficient privileges.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
postgres=> grant select on table public.apps to senior_dev;
ERROR:  permission denied for table apps
```

----------------------------------------

TITLE: Connecting to Postgres Database
DESCRIPTION: The provided database connection strings demonstrate how to connect to the Supabase PostgreSQL database for both session-based and pooled transactions. Ensure to replace placeholders with actual tenant ID and password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
psql 'postgres://postgres.your-tenant-id:your-super-secret-and-long-postgres-password@localhost:5432/postgres'
```

LANGUAGE: bash
CODE:
```
psql 'postgres://postgres.your-tenant-id:your-super-secret-and-long-postgres-password@localhost:6543/postgres'
```

----------------------------------------

TITLE: Creating a Documents Table with Vector Embeddings Support
DESCRIPTION: SQL script to create a table for storing documents with vector embeddings. The table includes columns for document content and a specialized column for storing vector embeddings, along with an HNSW index for efficient vector similarity search.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
-- Table to store documents with embeddings
create table documents (
  id integer primary key generated always as identity,
  title text not null,
  content text not null,
  embedding halfvec(1536),
  created_at timestamp with time zone default now()
);

-- Index for vector search over document embeddings
create index on documents using hnsw (embedding halfvec_cosine_ops);
```

----------------------------------------

TITLE: User Account Management Page in Svelte with Supabase Integration
DESCRIPTION: A Svelte component that allows users to view and edit their profile information after authentication. It includes forms for updating profile details and signing out, with client-side form enhancement.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_13

LANGUAGE: svelte
CODE:
```
<!-- src/routes/account/+page.svelte -->
<script lang="ts">
	import { enhance } from '$app/forms';
	import type { SubmitFunction } from '@sveltejs/kit';

	export let data
	export let form

	let { session, supabase, profile } = data
	$: ({ session, supabase, profile } = data)

	let profileForm: HTMLFormElement
	let loading = false
	let fullName: string = profile?.full_name ?? ''
	let username: string = profile?.username ?? ''
	let website: string = profile?.website ?? ''
	let avatarUrl: string = profile?.avatar_url ?? ''

	const handleSubmit: SubmitFunction = () => {
		loading = true
		return async () => {
			loading = false
		}
	}

	const handleSignOut: SubmitFunction = () => {
		loading = true
		return async ({ update }) => {
			loading = false
			update()
		}
	}
</script>

<div class="form-widget">
	<form
		class="form-widget"
		method="post"
		action="?/update"
		use:enhance={handleSubmit}
		bind:this={profileForm}
	>
		<div>
			<label for="email">Email</label>
			<input id="email" type="text" value={session.user.email} disabled />
		</div>

		<div>
			<label for="fullName">Full Name</label>
			<input id="fullName" name="fullName" type="text" value={form?.fullName ?? fullName} />
		</div>

		<div>
			<label for="username">Username</label>
			<input id="username" name="username" type="text" value={form?.username ?? username} />
		</div>

		<div>
			<label for="website">Website</label>
			<input id="website" name="website" type="url" value={form?.website ?? website} />
		</div>

		<div>
			<input
				type="submit"
				class="button block primary"
				value={loading ? 'Loading...' : 'Update'}
				disabled={loading}
			/>
		</div>
	</form>

	<form method="post" action="?/signout" use:enhance={handleSignOut}>
		<div>
			<button class="button block" disabled={loading}>Sign Out</button>
		</div>
	</form>
</div>
```

----------------------------------------

TITLE: Refreshing Materialized View
DESCRIPTION: Shows how to refresh a materialized view to update its stored data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-11-18-postgresql-views.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
refresh materialized view transcripts;
```

----------------------------------------

TITLE: Implementing Sign-Out Route Handler in Next.js
DESCRIPTION: A Next.js API route handler that handles user sign-out. It first verifies if a user is logged in, performs the sign-out operation using Supabase, and then redirects to the login page. It also revalidates the page layout for updated UI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_15

LANGUAGE: js
CODE:
```
import { createClient } from '@/utils/supabase/server'
import { revalidatePath } from 'next/cache'
import { NextResponse } from 'next/server'

export async function POST(req) {
  const supabase = await createClient()

  // Check if a user's logged in
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (user) {
    await supabase.auth.signOut()
  }

  revalidatePath('/', 'layout')
  return NextResponse.redirect(new URL('/login', req.url), {
    status: 302,
  })
}
```

----------------------------------------

TITLE: Storing Authentication Credentials in Supabase Vault
DESCRIPTION: SQL commands to securely store the project URL and anonymous key in Supabase Vault for later use in scheduled function calls.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/schedule-functions.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select vault.create_secret('https://project-ref.supabase.co', 'project_url');
select vault.create_secret('YOUR_SUPABASE_ANON_KEY', 'anon_key');
```

----------------------------------------

TITLE: Installing Supabase SSR Packages with yarn
DESCRIPTION: Installs the @supabase/ssr and @supabase/supabase-js packages using yarn package manager for implementing server-side rendering with Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn add @supabase/ssr @supabase/supabase-js
```

----------------------------------------

TITLE: Enabling Row Level Security and Creating Access Policies in PostgreSQL
DESCRIPTION: SQL commands to enable Row Level Security on the profiles table and create a policy that restricts the exporter user to only access specific rows by ID (1, 2, and 3).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- Turn on Row Level Security
alter table profiles
  enable row level security;

-- Only dump data for internal team members 1, 2, 3
create policy "Data dump rule" on profiles
  for select
  to exporter
  using (
    id in (1, 2, 3)
  );
```

----------------------------------------

TITLE: Initiating Password Reset in Kotlin with Supabase
DESCRIPTION: Kotlin implementation to initiate a password reset flow by sending a recovery email using the Supabase GoTrue client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_33

LANGUAGE: Kotlin
CODE:
```
supabase.gotrue.sendRecoveryEmail(
    email = "valid.email@supabase.io",
)
```

----------------------------------------

TITLE: Adding SUPABASE_URL Secret to Cloudflare
DESCRIPTION: Command to create a specific secret for storing the Supabase project URL in Cloudflare Workers. This URL is found in the Supabase dashboard under Settings > API.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/with-cloudflare-workers/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npx wrangler secret put SUPABASE_URL
```

----------------------------------------

TITLE: Implementing the email sending handler function in TypeScript
DESCRIPTION: TypeScript implementation of a Supabase Edge Function that sends emails using the Resend API. The function handles HTTP requests, forwards them to the Resend API endpoint, and returns the response to the client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/send-emails.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
const RESEND_API_KEY = Deno.env.get('RESEND_API_KEY')

const handler = async (_request: Request): Promise<Response> => {
  const res = await fetch('https://api.resend.com/emails', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${RESEND_API_KEY}`,
    },
    body: JSON.stringify({
      from: 'onboarding@resend.dev',
      to: 'delivered@resend.dev',
      subject: 'hello world',
      html: '<strong>it works!</strong>',
    }),
  })

  const data = await res.json()

  return new Response(JSON.stringify(data), {
    status: 200,
    headers: {
      'Content-Type': 'application/json',
    },
  })
}

Deno.serve(handler)
```

----------------------------------------

TITLE: Implementing Login Component with Magic Links in Ionic React
DESCRIPTION: A React component for handling login functionality using Supabase's passwordless authentication with magic links. Uses Ionic UI components and displays toast notifications for user feedback.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
import { useState } from 'react';
import {
  IonButton,
  IonContent,
  IonHeader,
  IonInput,
  IonItem,
  IonLabel,
  IonList,
  IonPage,
  IonTitle,
  IonToolbar,
  useIonToast,
  useIonLoading,
} from '@ionic/react';
import { supabase } from '../supabaseClient';

export function LoginPage() {
  const [email, setEmail] = useState('');

  const [showLoading, hideLoading] = useIonLoading();
  const [showToast ] = useIonToast();
  const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {
    console.log()
    e.preventDefault();
    await showLoading();
    try {
      await supabase.auth.signIn({ email });
      await showToast({ message: 'Check your email for the login link!' });
    } catch (e: any) {
      await showToast({ message: e.error_description || e.message , duration: 5000});
    } finally {
      await hideLoading();
    }
  };
  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Login</IonTitle>
        </IonToolbar>
      </IonHeader>

      <IonContent>
        <div className="ion-padding">
          <h1>Supabase + Ionic React</h1>
          <p>Sign in via magic link with your email below</p>
        </div>
        <IonList inset={true}>
          <form onSubmit={handleLogin}>
            <IonItem>
              <IonLabel position="stacked">Email</IonLabel>
              <IonInput
                value={email}
                name="email"
                onIonChange={(e) => setEmail(e.detail.value ?? '')}
                type="email"
              ></IonInput>
            </IonItem>
            <div className="ion-text-center">
              <IonButton type="submit" fill="clear">
                Login
              </IonButton>
            </div>
          </form>
        </IonList>
      </IonContent>
    </IonPage>
  );
```

----------------------------------------

TITLE: Authenticating with Supabase CLI
DESCRIPTION: Command to log in to the Supabase CLI for deployment access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase login
```

----------------------------------------

TITLE: Setting Supabase Secrets for Edge Function Deployment
DESCRIPTION: Commands to set the OpenAI API key as a secret for the Edge Function using the Supabase CLI. This is needed when deploying the function to production.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_10

LANGUAGE: bash
CODE:
```
supabase secrets set --env-file .env
```

----------------------------------------

TITLE: Invoking Edge Function with JavaScript
DESCRIPTION: Example of invoking a deployed Edge Function using the Supabase JavaScript client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

// Create a single supabase client for interacting with your database
const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')

const { data, error } = await supabase.functions.invoke('hello-world', {
  body: { name: 'Functions' },
})
```

----------------------------------------

TITLE: Deploying Single Edge Function
DESCRIPTION: Command to deploy a specific Edge Function by name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
supabase functions deploy hello-world
```

----------------------------------------

TITLE: Creating Table with Array Column in SQL
DESCRIPTION: This SQL snippet creates a table named 'arraytest' with an integer 'id' column and a text array column named 'textarray'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table arraytest (
  id integer not null,
  textarray text array
);
```

----------------------------------------

TITLE: Initializing React App with Vite
DESCRIPTION: Commands to create a new React application using Vite and install the Supabase JavaScript client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm create vite@latest supabase-react -- --template react
cd supabase-react

npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Setting idle transaction timeout in PostgreSQL
DESCRIPTION: This SQL command configures a timeout for idle transactions in the current session, automatically terminating transactions that remain idle for the specified duration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_13

LANGUAGE: jsx
CODE:
```
SET idle_in_transaction_session_timeout TO '10000s';
```

----------------------------------------

TITLE: Resetting Database Statistics in SQL
DESCRIPTION: This query shows how to reset the statistics in a Postgres database, which can be useful when statistics become stale and affect query planning.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
select pg_stat_reset();
```

----------------------------------------

TITLE: Edge Function for Gzip Compressed Log Drain (TypeScript)
DESCRIPTION: TypeScript code for an edge function that receives, decompresses, and processes gzip compressed log drain data from Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/log-drains.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { gunzipSync } from 'node:zlib'

Deno.serve(async (req) => {
  try {
    // Check if the request body is gzip compressed
    const contentEncoding = req.headers.get('content-encoding')
    if (contentEncoding !== 'gzip') {
      return new Response('Request body is not gzip compressed', {
        status: 400,
      })
    }

    // Read the compressed body
    const compressedBody = await req.arrayBuffer()

    // Decompress the body
    const decompressedBody = gunzipSync(new Uint8Array(compressedBody))

    // Convert the decompressed body to a string
    const decompressedString = new TextDecoder().decode(decompressedBody)
    const data = JSON.parse(decompressedString)
    // Process the decompressed body as needed
    console.log(`Received: ${data.length} logs.`)

    return new Response('ok', {
      headers: { 'Content-Type': 'text/plain' },
    })
  } catch (error) {
    console.error('Error:', error)
    return new Response('Error processing request', { status: 500 })
  }
})
```

----------------------------------------

TITLE: Anonymous Sign-in with Supabase Auth in TypeScript
DESCRIPTION: This snippet demonstrates how to implement anonymous sign-in using Supabase Auth. It checks for an existing session and signs in the user anonymously if no session exists.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-09-meetup-kahoot-alternative.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const { data: sessionData, error: sessionError } = await supabase.auth.getSession()

let userId: string | null = null

if (sessionData.session) {
  userId = sessionData.session?.user.id ?? null
} else {
  const { data, error } = await supabase.auth.signInAnonymously()
  userId = data?.user?.id ?? null
}
```

----------------------------------------

TITLE: Granting Select Privilege as Table Owner in PostgreSQL
DESCRIPTION: This snippet shows how the table owner (junior_dev) can successfully grant select privilege on the table to another role (senior_dev).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_13

LANGUAGE: sql
CODE:
```
postgres=> grant select on public.apps to senior_dev;
GRANT
```

----------------------------------------

TITLE: Implementing Supabase Service in Angular
DESCRIPTION: Creating a SupabaseService to initialize the Supabase client and implement methods for authentication and profile management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@angular/core'
import {
  AuthChangeEvent,
  AuthSession,
  createClient,
  Session,
  SupabaseClient,
  User,
} from '@supabase/supabase-js'
import { environment } from '../environments/environment'

export interface Profile {
  id?: string
  username: string
  website: string
  avatar_url: string
}

@Injectable({
  providedIn: 'root',
})
export class SupabaseService {
  private supabase: SupabaseClient
  _session: AuthSession | null = null

  constructor() {
    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)
  }

  get session() {
    this.supabase.auth.getSession().then(({ data }) => {
      this._session = data.session
    })
    return this._session
  }

  profile(user: User) {
    return this.supabase
      .from('profiles')
      .select(`username, website, avatar_url`)
      .eq('id', user.id)
      .single()
  }

  authChanges(callback: (event: AuthChangeEvent, session: Session | null) => void) {
    return this.supabase.auth.onAuthStateChange(callback)
  }

  signIn(email: string) {
    return this.supabase.auth.signInWithOtp({ email })
  }

  signOut() {
    return this.supabase.auth.signOut()
  }

  updateProfile(profile: Profile) {
    const update = {
      ...profile,
      updated_at: new Date(),
    }

    return this.supabase.from('profiles').upsert(update)
  }

  downLoadImage(path: string) {
    return this.supabase.storage.from('avatars').download(path)
  }

  uploadAvatar(filePath: string, file: File) {
    return this.supabase.storage.from('avatars').upload(filePath, file)
  }
}
```

----------------------------------------

TITLE: Listening to all Postgres schema changes in Swift
DESCRIPTION: This Swift snippet configures a Supabase client to listen for any database changes in the 'public' schema using async/await. It prints information about the database actions received. The channel cannot be named 'realtime'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_7

LANGUAGE: Swift
CODE:
```
let myChannel = await supabase.channel("schema-db-changes")

let changes = await myChannel.postgresChange(AnyAction.self, schema: "public")

await myChannel.subscribe()

for await change in changes {
  switch change {
  case .insert(let action): print(action)
  case .update(let action): print(action)
  case .delete(let action): print(action)
  case .select(let action): print(action)
  }
}
```

----------------------------------------

TITLE: Downloading Transformed Image in Kotlin
DESCRIPTION: This snippet demonstrates how to download a transformed image using the Supabase Kotlin client, specifying transformation options. It includes examples for both in-memory download and direct file download.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_12

LANGUAGE: kotlin
CODE:
```
val data = supabase.storage.from("bucket").downloadAuthenticated("image.jpg") {
    transform {
        size(800, 300)
    }
}

//Or on JVM stream directly to a file
val file = File("image.jpg")
supabase.storage.from("bucket").downloadAuthenticatedTo("image.jpg", file) {
    transform {
        size(800, 300)
    }
}
```

----------------------------------------

TITLE: Scheduling Supabase Edge Function Invocation
DESCRIPTION: This SQL snippet schedules a cron job to make a POST request to a Supabase Edge Function every 30 seconds. It uses the net.http_post function to send the request with custom headers and body.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
select
  cron.schedule(
    'invoke-function-every-half-minute',
    '30 seconds',
    $$
    select
      net.http_post(
          url:='https://project-ref.supabase.co/functions/v1/function-name',
          headers:=jsonb_build_object('Content-Type','application/json', 'Authorization', 'Bearer ' || 'YOUR_ANON_KEY'),
          body:=jsonb_build_object('time', now() ),
          timeout_milliseconds:=5000
      ) as request_id;
    $$
  );
```

----------------------------------------

TITLE: Defining Data Models in Prisma Schema
DESCRIPTION: Example Prisma schema file with User and Post models that demonstrates relationships between tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_11

LANGUAGE: ts
CODE:
```
model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model User {
  id    Int     @id @default(autoincrement())
  name  String?
  email String  @unique
  posts Post[]
}
```

----------------------------------------

TITLE: Filtering for Specific Changes in Swift with Supabase Realtime
DESCRIPTION: Uses Swift to create a channel that listens for INSERT events on the 'todos' table with a specific filter. The filter parameter '.eq("id", value: 1)' ensures only changes where id equals 1 are monitored.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_37

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("db-changes")

let changes = await myChannel.postgresChange(
  InsertAction.self,
  schema: "public",
  table: "todos",
  filter: .eq("id", value: 1)
)

await myChannel.subscribe()

for await change in changes {
  print(change.record)
}
```

----------------------------------------

TITLE: Export Heroku Database using pg_dump
DESCRIPTION: This command uses `pg_dump` to export a Heroku Postgres database to a SQL file. It requires Heroku credentials (host, user, database) to connect to the database. The `--clean`, `--if-exists`, and `--quote-all-identifiers` options ensure a clean and consistent export. The `--no-owner` and `--no-privileges` flags prevent migration issues related to different user privileges.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/heroku.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
pg_dump --clean --if-exists --quote-all-identifiers \
 -h $HEROKU_HOST -U $HEROKU_USER -d $HEROKU_DATABASE \
 --no-owner --no-privileges > heroku_dump.sql
```

----------------------------------------

TITLE: Backup and Stop Supabase Containers
DESCRIPTION: Commands to backup schema and data, then stop running Supabase containers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
supabase db diff -f my_schema
supabase db dump --local --data-only > supabase/seed.sql
supabase stop --no-backup
```

----------------------------------------

TITLE: Creating Simplified Restrictive RLS Policy Using Custom Function in SQL
DESCRIPTION: Creates a simplified restrictive Row-Level Security policy using the custom function for JWT validation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create policy "Restrict access to correct Supabase and Firebase projects"
  on table_name
  as restrictive
  to authenticated
  using ((select public.is_supabase_or_firebase_project_jwt()) is true);
```

----------------------------------------

TITLE: Supabase Type Generation CLI Command
DESCRIPTION: CLI command for generating TypeScript types from Postgres schema
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_6

LANGUAGE: markdown
CODE:
```
supabase gen types
Generate types from Postgres schema

Usage:
  supabase gen types [command]

Available Commands:
  typescript  Generate types for TypeScript
```

----------------------------------------

TITLE: Push Database Migrations (CLI)
DESCRIPTION: This command pushes the local database migrations to the remote Supabase database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_11

LANGUAGE: bash
CODE:
```
supabase db push
```

----------------------------------------

TITLE: Configuring Supabase Server Client in SvelteKit Hooks (v0.9.0)
DESCRIPTION: This snippet demonstrates how to set up the Supabase server client in the hooks.server.ts file for SvelteKit version 0.9.0. It includes creating the client, implementing safe session retrieval, and configuring response header filtering.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_19

LANGUAGE: typescript
CODE:
```
// src/hooks.server.ts
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'
import { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit'
import type { Handle } from '@sveltejs/kit'

export const handle: Handle = async ({ event, resolve }) => {
  event.locals.supabase = createSupabaseServerClient({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event,
  })

  /**
   * Unlike `supabase.auth.getSession`, which is unsafe on the server because it
   * doesn't validate the JWT, this function validates the JWT by first calling
   * `getUser` and aborts early if the JWT signature is invalid.
   */
  event.locals.safeGetSession = async () => {
    const {
      data: { user },
      error,
    } = await event.locals.supabase.auth.getUser()
    if (error) return { session: null, user: null }

    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}
```

----------------------------------------

TITLE: Server-side Data Fetching with Row Level Security in SvelteKit
DESCRIPTION: This snippet demonstrates server-side data fetching with Supabase Row Level Security (RLS) in SvelteKit. It includes both the Svelte component and the corresponding page.ts file for loading data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_17

LANGUAGE: svelte
CODE:
```
<!-- src/routes/profile/+page.svelte -->
<script lang="ts">
  export let data

  let { user, tableData } = data
  $: ({ user, tableData } = data)
</script>

<div>Protected content for {user.email}</div>
<pre>{JSON.stringify(tableData, null, 2)}</pre>
<pre>{JSON.stringify(user, null, 2)}</pre>
```

LANGUAGE: typescript
CODE:
```
// src/routes/profile/+page.ts
import { redirect } from '@sveltejs/kit'

export const load = async ({ parent }) => {
  const { supabase, session } = await parent()
  if (!session) {
    redirect(303, '/')
  }
  const { data: tableData } = await supabase.from('test').select('*')

  return {
    user: session.user,
    tableData,
  }
}
```

----------------------------------------

TITLE: Signing in with Email and Password using Supabase in Swift
DESCRIPTION: This snippet illustrates how to sign in a user with their email and password using the Supabase Swift client. It uses the signIn(email:password:) method from the auth module.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_18

LANGUAGE: swift
CODE:
```
try await supabase.auth.signIn(
  email: "valid.email@supabase.io",
  password: "example-password"
)
```

----------------------------------------

TITLE: Updating User Password in JavaScript with Supabase
DESCRIPTION: JavaScript implementation that creates a Supabase client and uses it to update a user's password after they have received a reset password email.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_35

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('url', 'anonKey')

// ---cut---
await supabase.auth.updateUser({ password: 'new_password' })
```

----------------------------------------

TITLE: Creating a Login Page Component with Magic Link Authentication
DESCRIPTION: Angular component for the login page that implements magic link authentication using Supabase. Includes form handling and error management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { Component, OnInit } from '@angular/core'
import { SupabaseService } from '../supabase.service'

@Component({
  selector: 'app-login',
  template: `
    <ion-header>
      <ion-toolbar>
        <ion-title>Login</ion-title>
      </ion-toolbar>
    </ion-header>

    <ion-content>
      <div class="ion-padding">
        <h1>Supabase + Ionic Angular</h1>
        <p>Sign in via magic link with your email below</p>
      </div>
      <ion-list inset="true">
        <form (ngSubmit)="handleLogin($event)">
          <ion-item>
            <ion-label position="stacked">Email</ion-label>
            <ion-input [(ngModel)]="email" name="email" autocomplete type="email"></ion-input>
          </ion-item>
          <div class="ion-text-center">
            <ion-button type="submit" fill="clear">Login</ion-button>
          </div>
        </form>
      </ion-list>
    </ion-content>
  `,
  styleUrls: ['./login.page.scss'],
})
export class LoginPage {
  email = ''

  constructor(private readonly supabase: SupabaseService) {}

  async handleLogin(event: any) {
    event.preventDefault()
    const loader = await this.supabase.createLoader()
    await loader.present()
    try {
      const { error } = await this.supabase.signIn(this.email)
      if (error) {
        throw error
      }
      await loader.dismiss()
      await this.supabase.createNotice('Check your email for the login link!')
    } catch (error: any) {
      await loader.dismiss()
      await this.supabase.createNotice(error.error_description || error.message)
    }
  }
}
```

----------------------------------------

TITLE: Analyzing Query Costs with EXPLAIN (SQL)
DESCRIPTION: Uses the `EXPLAIN` command to show the estimated query plan and total cost for selecting a single row (low cost) and selecting all rows (high cost) from the 'book' table, demonstrating the cost difference that `pg_plan_filter` can use.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_plan_filter.mdx#_snippet_1

LANGUAGE: SQL
CODE:
```
explain select * from book where id =1;
                                QUERY PLAN
---------------------------------------------------------------------------
 Index Only Scan using book_pkey on book  (cost=0.28..2.49 rows=1 width=4)
   Index Cond: (id = 1)
(2 rows)

explain select * from book;
                       QUERY PLAN
---------------------------------------------------------
 Seq Scan on book  (cost=0.00..135.00 rows=10000 width=4)
(1 row)
```

----------------------------------------

TITLE: Signing Out Users in Supabase Flutter
DESCRIPTION: This Flutter code snippet signs out a user and removes their session using Supabase's `signOut` function. It is essential to manage user session state and ensure smooth logout processes across applications implemented with Flutter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_4

LANGUAGE: Dart
CODE:
```
Future<void> signOut() async {
  await supabase.auth.signOut();
}
```

----------------------------------------

TITLE: Creating Signed URL for Private Supabase Storage Asset
DESCRIPTION: Shows how to generate a time-limited signed URL for accessing a private asset in Supabase Storage. This method uses the 'createSignedUrl' function, specifying the bucket, file path, and expiration time in seconds.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/downloads.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

const { data, error } = await supabase.storage
  .from('bucket')
  .createSignedUrl('private-document.pdf', 3600)

if (data) {
  console.log(data.signedUrl)
}
```

----------------------------------------

TITLE: Initializing Supabase in Flutter Figma Clone
DESCRIPTION: Dart code to initialize Supabase in the main.dart file of the Flutter Figma clone app. It sets up the Supabase client and defines the main app structure.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
import 'package:canvas/canvas/canvas_page.dart';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter';

void main() async {
  Supabase.initialize(
		// TODO: Replace the credentials with your own
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SUPABASE_ANON_KEY',
  );
  runApp(const MyApp());
}

final supabase = Supabase.instance.client;

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Figma Clone',
      debugShowCheckedModeBanner: false,
      home: CanvasPage(),
    );
  }
}
```

----------------------------------------

TITLE: Connecting to Supabase Database with Vecs in Python
DESCRIPTION: This snippet shows how to establish a connection to a Supabase database using the Vecs library in Python. It requires the database connection string and creates a vector store client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/face-similarity.mdx#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import vecs

DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)
```

----------------------------------------

TITLE: Setting Environment Secrets for Telegram Bot
DESCRIPTION: Command to set the required environment secrets for the Telegram bot function, including the bot token and a function secret for security.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/telegram-bot/README.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
supabase secrets set TELEGRAM_BOT_TOKEN=your_token FUNCTION_SECRET=random_secret
```

----------------------------------------

TITLE: Implementing Realtime Table Changes Listener in TypeScript with Supabase
DESCRIPTION: This function creates a Subject that emits changes from Supabase tables in realtime. It subscribes to both cards and lists tables and returns an Observable that emits whenever changes occur in either table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_29

LANGUAGE: TypeScript
CODE:
```
  getTableChanges() {
    const changes = new Subject();

    this.supabase
      .from(CARDS_TABLE)
      .on('*', (payload: any) => {
        changes.next(payload);
      })
      .subscribe();

    this.supabase
      .from(LISTS_TABLE)
      .on('*', (payload: any) => {
        changes.next(payload);
      })
      .subscribe();

    return changes.asObservable();
  }
```

----------------------------------------

TITLE: Granting Read-Only Access in PostgreSQL 14
DESCRIPTION: Demonstrates how to grant read-only access to a user using the new pg_read_all_data role in PostgreSQL 14. This simplifies the process of setting up read-only users for scenarios like demos or restricted access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_7

LANGUAGE: sql
CODE:
```
grant pg_read_all_data to bobfries;
```

----------------------------------------

TITLE: Static Revalidation Configuration in Next.js
DESCRIPTION: Sets up static page revalidation using the revalidate export variable to specify data freshness duration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_11

LANGUAGE: tsx
CODE:
```
export const revalidate = 60
```

----------------------------------------

TITLE: Creating Documents Table with Vector Embeddings
DESCRIPTION: This SQL snippet creates a table to store documents and their corresponding 3072-dimensional vector embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create table documents (
  id bigint primary key generated always as identity,
  content text not null,
  embedding vector (3072)
);
```

----------------------------------------

TITLE: Basic Realtime Chat Usage in React
DESCRIPTION: This snippet demonstrates the basic usage of the RealtimeChat component in a React application. It imports the component and renders it with a specified room name and username, establishing a real-time chat interface.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/realtime-chat.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { RealtimeChat } from '@/components/realtime-chat'

export default function ChatPage() {
  return <RealtimeChat roomName="my-chat-room" username="john_doe" />
}
```

----------------------------------------

TITLE: Creating Custom Prisma Database User with Appropriate Permissions in SQL
DESCRIPTION: SQL commands to create a dedicated 'prisma' database user with the necessary permissions for database operations. This separation of privileges provides better security control and monitoring capabilities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create custom user
create user "prisma" with password 'custom_password' bypassrls createdb;

-- extend prisma's privileges to postgres (necessary to view changes in Dashboard)
grant "prisma" to "postgres";

-- Grant it necessary permissions over the relevant schemas (public)
grant usage on schema public to prisma;
grant create on schema public to prisma;
grant all on all tables in schema public to prisma;
grant all on all routines in schema public to prisma;
grant all on all sequences in schema public to prisma;
alter default privileges for role postgres in schema public grant all on tables to prisma;
alter default privileges for role postgres in schema public grant all on routines to prisma;
alter default privileges for role postgres in schema public grant all on sequences to prisma;
```

----------------------------------------

TITLE: Creating Audit Table in PostgreSQL
DESCRIPTION: Defines the structure of the audit table using JSONB data type for flexible schema-less storage of audited records. This approach allows auditing multiple tables in a single audit table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table audit.record_version (
  id bigserial primary key,
  -- auditing metadata
  record_id uuid, -- identifies a new record by it's table + primary key
  old_record_id uuid, -- ^
  op varchar(8) not null, -- INSERT/UPDATE/DELETE/TRUNCATE
  ts timestamptz not null default now(),
  -- table identifiers
  table_oid oid not null, -- pg internal id for a table
  table_schema name not null, -- audited table's schema name e.g. 'public'
  table_name name not null, -- audited table's table name e.g. 'account'
  -- record data
  record jsonb, -- contents of the new record
  old_record jsonb -- previous record contents (for UPDATE/DELETE)
);
```

----------------------------------------

TITLE: Implementing Register Page in Flutter with Supabase Authentication
DESCRIPTION: This code creates a registration page with email, password, and username fields. It uses Supabase for user authentication and includes form validation and error handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_9

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:my_chat_app/pages/chat_page.dart';
import 'package:my_chat_app/pages/login_page.dart';
import 'package:my_chat_app/utils/constants.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class RegisterPage extends StatefulWidget {
  const RegisterPage({Key? key, required this.isRegistering}) : super(key: key);

  static Route<void> route({bool isRegistering = false}) {
    return MaterialPageRoute(
      builder: (context) => RegisterPage(isRegistering: isRegistering),
    );
  }

  final bool isRegistering;

  @override
  State<RegisterPage> createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final bool _isLoading = false;

  final _formKey = GlobalKey<FormState>();

  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _usernameController = TextEditingController();

  Future<void> _signUp() async {
    final isValid = _formKey.currentState!.validate();
    if (!isValid) {
      return;
    }
    final email = _emailController.text;
    final password = _passwordController.text;
    final username = _usernameController.text;
    try {
      await supabase.auth.signUp(
          email: email, password: password, data: {'username': username});
      Navigator.of(context)
          .pushAndRemoveUntil(ChatPage.route(), (route) => false);
    } on AuthException catch (error) {
      context.showErrorSnackBar(message: error.message);
    } catch (error) {
      context.showErrorSnackBar(message: unexpectedErrorMessage);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Register'),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: formPadding,
          children: [
            TextFormField(
              controller: _emailController,
              decoration: const InputDecoration(
                label: Text('Email'),
              ),
              validator: (val) {
                if (val == null || val.isEmpty) {
                  return 'Required';
                }
                return null;
              },
              keyboardType: TextInputType.emailAddress,
            ),
            formSpacer,
            TextFormField(
              controller: _passwordController,
              obscureText: true,
              decoration: const InputDecoration(
                label: Text('Password'),
              ),
              validator: (val) {
                if (val == null || val.isEmpty) {
                  return 'Required';
                }
                if (val.length < 6) {
                  return '6 characters minimum';
                }
                return null;
              },
            ),
            formSpacer,
            TextFormField(
              controller: _usernameController,
              decoration: const InputDecoration(
                label: Text('Username'),
              ),
              validator: (val) {
                if (val == null || val.isEmpty) {
                  return 'Required';
                }
                final isValid = RegExp(r'^[A-Za-z0-9_]{3,24}$').hasMatch(val);
                if (!isValid) {
                  return '3-24 long with alphanumeric or underscore';
                }
                return null;
              },
            ),
            formSpacer,
            ElevatedButton(
              onPressed: _isLoading ? null : _signUp,
              child: const Text('Register'),
            ),
            formSpacer,
            TextButton(
              onPressed: () {
                Navigator.of(context).push(LoginPage.route());
              },
              child: const Text('I already have an account'),
            )
          ],
        ),
      ),
    );
  }
}
```

----------------------------------------

TITLE: Sign In with Figma OAuth - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to sign in a user with Figma OAuth using the Supabase client library. It initializes the Supabase client and calls the signInWithOAuth method with 'figma' as the provider.  The function returns a promise that resolves with the authentication data or rejects with an error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-figma.mdx#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signInWithFigma() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'figma',
  })
}
```

----------------------------------------

TITLE: Creating Read Access Policy for Avatars Bucket in SQL
DESCRIPTION: This SQL snippet demonstrates how to create a policy that grants read access to a bucket called 'avatars' using Postgres Row Level Security.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-30-supabase-storage.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create policy "Read access for avatars."
on storage.objects for select using (
	bucket_id = 'avatars'
);
```

----------------------------------------

TITLE: Implementing Code Exchange Route in JavaScript
DESCRIPTION: This JavaScript code snippet implements a server-side route to exchange an authentication code for a user's session using SvelteKit with Supabase. It redirects to the root once the session is acquired.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { redirect } from '@sveltejs/kit'

export const GET = async ({ url, locals: { supabase } }) => {
  const code = url.searchParams.get('code')

  if (code) {
    await supabase.auth.exchangeCodeForSession(code)
  }

  redirect(303, '/')
}
```

----------------------------------------

TITLE: Inserting Multiple Records in Multiple Languages
DESCRIPTION: Demonstrates inserting multiple movie records using different programming languages and the Supabase client libraries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
insert into movies
  (name, description)
values
  (
    'The Empire Strikes Back',
    'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'
  ),
  (
    'Return of the Jedi',
    'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'
  );
```

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('movies').insert([
  {
    name: 'The Empire Strikes Back',
    description:
      'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.',
  },
  {
    name: 'Return of the Jedi',
    description:
      'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.',
  },
])
```

LANGUAGE: dart
CODE:
```
await supabase
  .from('movies')
  .insert([{
    name: 'The Empire Strikes Back',
    description: 'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'
  }, {
    name: 'Return of the Jedi',
    description: 'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'
  }]);
```

----------------------------------------

TITLE: Connecting to Postgres using supabase-js in Edge Functions
DESCRIPTION: Demonstrates how to connect to a Supabase database using the supabase-js client in an Edge Function. Includes error handling and authentication header forwarding.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/connect-to-postgres.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from 'jsr:@supabase/supabase-js@2'

Deno.serve(async (req) => {
  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    )

    const { data, error } = await supabase.from('countries').select('*')

    if (error) {
      throw error
    }

    return new Response(JSON.stringify({ data }), {
      headers: { 'Content-Type': 'application/json' },
      status: 200,
    })
  } catch (err) {
    return new Response(String(err?.message ?? err), { status: 500 })
  }
})
```

----------------------------------------

TITLE: Invoking Semantic Search from TypeScript
DESCRIPTION: Example of calling the semantic search function using Supabase JavaScript client
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
const { data: documents } = await supabase.rpc('match_documents', {
  query_embedding: embedding, // pass the query embedding
  match_threshold: 0.78, // choose an appropriate threshold for your data
  match_count: 10, // choose the number of matches
})
```

----------------------------------------

TITLE: Setting Supabase Environment Variables in Bash
DESCRIPTION: Commands to set up environment variables for Supabase URL and API keys in bash/zsh shell
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-15-loading-data-supabase-python.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
export SUPABASE_URL=<<the value under config > URL>>
export SUPABASE_KEY=<<the value present in Project API keys > anon public>>
export SUPABASE_SECRET_KEY=<<the value present in Project API keys > service_role secret>>
```

----------------------------------------

TITLE: Implementing Flutter Details Page with Vector Similarity Search
DESCRIPTION: This code implements the DetailsPage widget that displays detailed information about a selected film and recommends similar films based on vector similarity. It calls the 'get_related_film' Supabase RPC function to retrieve films with similar embeddings and displays them in a responsive grid layout.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
import 'package:filmsearch/components/film_cell.dart';
import 'package:filmsearch/main.dart';
import 'package:filmsearch/models/film.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class DetailsPage extends StatefulWidget {
  const DetailsPage({super.key, required this.film});

  final Film film;

  @override
  State<DetailsPage> createState() => _DetailsPageState();
}

class _DetailsPageState extends State<DetailsPage> {
  late final Future<List<Film>> relatedFilmsFuture;

  @override
  void initState() {
    super.initState();

		// Create a future that calls the get_related_film function to query
		// related movies.
    relatedFilmsFuture = supabase.rpc('get_related_film', params: {
      'embedding': widget.film.embedding,
      'film_id': widget.film.id,
    }).withConverter<List<Film>>((data) =>
        List<Map<String, dynamic>>.from(data).map(Film.fromJson).toList());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.film.title),
      ),
      body: ListView(
        children: [
          Hero(
            tag: widget.film.imageUrl,
            child: Image.network(widget.film.imageUrl),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Text(
                  DateFormat.yMMMd().format(widget.film.releaseDate),
                  style: const TextStyle(color: Colors.grey),
                ),
                const SizedBox(height: 8),
                Text(
                  widget.film.overview,
                  style: const TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 24),
                const Text(
                  'You might also like:',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
					// Display the list of related movies
          FutureBuilder<List<Film>>(
              future: relatedFilmsFuture,
              builder: (context, snapshot) {
                if (snapshot.hasError) {
                  return Center(
                    child: Text(snapshot.error.toString()),
                  );
                }
                if (!snapshot.hasData) {
                  return const Center(child: CircularProgressIndicator());
                }
                final films = snapshot.data!;
                return Wrap(
                  children: films
                      .map((film) => InkWell(
                            onTap: () {
                              Navigator.of(context).push(MaterialPageRoute(
                                  builder: (context) =>
                                      DetailsPage(film: film)));
                            },
                            child: FractionallySizedBox(
                              widthFactor: 0.5,
                              child: FilmCell(
                                film: film,
                                isHeroEnabled: false,
                                fontSize: 16,
                              ),
                            ),
                          ))
                      .toList(),
                );
              }),
        ],
      ),
    );
  }
}
```

----------------------------------------

TITLE: Initializing Supabase Client in Flutter
DESCRIPTION: Configuration code to initialize Supabase client with custom URL and anonymous key. Sets up realtime client options with 40 events per second for game synchronization.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/flutter-multiplayer-shooting-game/README.md#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
void main() async {
  await Supabase.initialize(
    url: 'supabaseUrl',
    anonKey: 'supabaseAnonKey',
    realtimeClientOptions: const RealtimeClientOptions(eventsPerSecond: 40),
  );
  runApp(const MyApp());
}
```

----------------------------------------

TITLE: Creating Database Migration with yarn
DESCRIPTION: Command to create and apply a Prisma migration using yarn. This initializes the database schema based on your Prisma models.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_14

LANGUAGE: bash
CODE:
```
npx prisma migrate dev --name first_prisma_migration
```

----------------------------------------

TITLE: Configuring Supabase Environment Variables in local.properties
DESCRIPTION: Creates a local properties file to securely store Supabase credentials that should not be committed to source control.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_0

LANGUAGE: kotlin
CODE:
```
SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
SUPABASE_URL=YOUR_SUPABASE_URL
```

----------------------------------------

TITLE: Configuring pgAudit Logging for Postgres in SQL
DESCRIPTION: SQL commands to configure pgAudit logging for Postgres, including setting log classes, adjusting log levels, and resetting configurations. This enables detailed query logging for various statement types.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- temporary single-session config update
set pgaudit.log = 'function, write, ddl';

-- equivalent permanent config update.
alter role postgres set pgaudit.log to 'function, write, ddl';

-- for API-related logs
alter role authenticator set pgaudit.log to 'write';

-- adjust log level
alter role postgres set pgaudit.log_level to 'info';
alter role postgres set pgaudit.log_level to 'debug5';

-- resets stored config.
alter role postgres reset pgaudit.log
```

----------------------------------------

TITLE: Client-side User Authentication Check in SvelteKit
DESCRIPTION: Svelte component implementation for checking user authentication status and displaying conditional content based on login state.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_29

LANGUAGE: svelte
CODE:
```
<script>
  import { session } from '$app/stores'
</script>

{#if !$session.user}
<h1>I am not logged in</h1>
{:else}
<h1>Welcome {$session.user.email}</h1>
<p>I am logged in!</p>
{/if}
```

LANGUAGE: svelte
CODE:
```
<script>
  import { page } from '$app/stores'
</script>

{#if !$page.data.session.user}
<h1>I am not logged in</h1>
{:else}
<h1>Welcome {$page.data.session.user.email}</h1>
<p>I am logged in!</p>
{/if}
```

----------------------------------------

TITLE: Implementing Private Page with Notes in Svelte
DESCRIPTION: Svelte component for the private page. Displays user email, lists notes, and provides a form to add new notes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_17

LANGUAGE: svelte
CODE:
```
<script lang="ts">
  import { invalidate } from '$app/navigation'
  import type { EventHandler } from 'svelte/elements'

  import type { PageData } from './$types'

  let { data } = $props()
  let { notes, supabase, user } = $derived(data)

  const handleSubmit: EventHandler<SubmitEvent, HTMLFormElement> = async (evt) => {
    evt.preventDefault()
    if (!evt.target) return

    const form = evt.target as HTMLFormElement

    const note = (new FormData(form).get('note') ?? '') as string
    if (!note) return

    const { error } = await supabase.from('notes').insert({ note })
    if (error) console.error(error)

    invalidate('supabase:db:notes')
    form.reset()
  }
</script>

<h1>Private page for user: {user?.email}</h1>
<h2>Notes</h2>
<ul>
  {#each notes as note}
    <li>{note.note}</li>
  {/each}
</ul>
<form onsubmit={handleSubmit}>
  <label>
    Add a note
    <input name="note" type="text" />
  </label>
</form>
```

----------------------------------------

TITLE: Overwriting Files in Supabase Storage with Dart
DESCRIPTION: This snippet shows how to overwrite an existing file in Supabase Storage using Dart. It uses the 'upsert' option in FileOptions to enable overwriting.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
await supabase.storage.from('bucket_name').upload(
      'file_path',
      file,
      fileOptions: const FileOptions(upsert: true),
    );
```

----------------------------------------

TITLE: Creating Database Schema and Sample Data for Supabase
DESCRIPTION: SQL commands to create a 'countries' table in Supabase and insert sample data for demonstration purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create table countries (
  "id" serial primary key,
  "name" text
);

insert into countries
  (id, name)
values
  (1, 'United Kingdom'),
  (2, 'United States'),
  (3, 'Singapore');
```

----------------------------------------

TITLE: Create Schema Diff Migration (CLI)
DESCRIPTION: This command generates a migration file by diffing the current database schema against the schema defined in the Supabase dashboard.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
supabase db diff -f create_cities_table
```

----------------------------------------

TITLE: Sign Out Implementation in Flutter
DESCRIPTION: Method to sign out users and clear browser session and local storage in a Flutter Supabase application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-bitbucket.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
Future<void> signOut() async {
  await supabase.auth.signOut();
}
```

----------------------------------------

TITLE: Connecting to Postgres using Drizzle ORM
DESCRIPTION: Example of using Drizzle ORM with Postgres.js to connect to a database and perform queries in Edge Functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/connect-to-postgres.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/postgres-js'
import postgres from 'postgres'
import { countries } from '../_shared/schema.ts'

const connectionString = Deno.env.get('SUPABASE_DB_URL')!

Deno.serve(async (_req) => {
  const client = postgres(connectionString, { prepare: false })
  const db = drizzle(client)
  const allCountries = await db.select().from(countries)

  return Response.json(allCountries)
})
```

----------------------------------------

TITLE: Creating a Table for Storing Vectors in PostgreSQL
DESCRIPTION: SQL command to create a table named 'posts' with a vector column for storing embeddings. The vector column is defined with a dimension of 384.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgvector.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table posts (
  id serial primary key,
  title text not null,
  body text not null,
  embedding vector(384)
);
```

----------------------------------------

TITLE: Implementing RLS Policy for Object Deletion in Supabase Storage
DESCRIPTION: This SQL snippet creates a Row Level Security (RLS) policy that allows authenticated users to delete only their own objects in Supabase Storage. It compares the object's owner_id with the user's auth.uid() to enforce ownership-based access control.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/ownership.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create policy "User can delete their own objects"
on storage.objects
for delete
to authenticated
using (
    owner_id = (select auth.uid())
);
```

----------------------------------------

TITLE: Granting pg_read_all_stats Privilege to Postgres Role in SQL
DESCRIPTION: This SQL command grants the pg_read_all_stats privilege to the postgres role, allowing it to read all statistics from the system. This resolves the "insufficient privilege" error when accessing pg_stat_statements or the Query Performance Report.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/insufficient-privilege-when-accessing-pgstatstatements-e5M_EQ.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
grant pg_read_all_stats to postgres;
```

----------------------------------------

TITLE: Running pg_dump with Row Level Security for PostgreSQL
DESCRIPTION: Bash command to execute pg_dump with the exporter user, ensuring Row Level Security is enforced with the --enable-row-security flag. This dumps only the data permitted by the RLS policies into a seed.sql file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
# Dump all the data into a "seed.sql" file
# which we can use to restore our local databases.
pg_dump \
-h db.host.supabase.co \
-U exporter \
-d postgres \
-n public \
--data-only \
--enable-row-security \
--table=profiles \
> seed.sql
```

----------------------------------------

TITLE: Express OAuth Callback Handler
DESCRIPTION: Implementation of OAuth callback handling in Express.js, managing code exchange and redirect flow.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
app.get("/auth/callback", async function (req, res) {
  const code = req.query.code
  const next = req.query.next ?? "/"

  if (code) {
    const supabase = createServerClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_ANON_KEY, {
    cookies: {
      getAll() {
        return parseCookieHeader(context.req.headers.cookie ?? '')
      },
      setAll(cookiesToSet) {
        cookiesToSet.forEach(({ name, value, options }) =>
          context.res.appendHeader('Set-Cookie', serializeCookieHeader(name, value, options))
        )
      },
    },
  })
    await supabase.auth.exchangeCodeForSession(code)
  }

  res.redirect(303, `/${next.slice(1)}`)
})
```

----------------------------------------

TITLE: Tracking Presence with Supabase Realtime JavaScript
DESCRIPTION: This snippet demonstrates how to track a user's presence in a Supabase Realtime channel. It uses the `track` method on the channel object to set the user's state. The code assumes that a Supabase client has already been initialized and a channel has been created.  It also shows how to store a timestamp.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/concepts.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')
const roomOne = supabase.channel('room-one') // set your topic here

// ---cut---
const presenceTrackStatus = await roomOne.track({
  user: 'user-1',
  online_at: new Date().toISOString(),
})
```

----------------------------------------

TITLE: Updating signIn with magic link in TypeScript
DESCRIPTION: Example of how to update the signIn method for magic link authentication in supabase-js v2. The new version uses signInWithOtp.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const { error } = await supabase
  .auth
  .signInWithOtp({ email })
```

----------------------------------------

TITLE: Creating a GIN Index on JSONB Column in SQL
DESCRIPTION: This snippet demonstrates how to create a GIN (Generalized Inverted Index) index on a JSONB column, which is useful for efficient querying of JSON data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE INDEX some_arbitary_index_name ON some_table USING gin (data);
```

----------------------------------------

TITLE: Link to Supabase Project (CLI)
DESCRIPTION: This command links the local Supabase project to a remote Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
supabase link
```

----------------------------------------

TITLE: Performing Similarity Search with Supabase
DESCRIPTION: Shows how to execute a similarity search using Supabase's RPC function with the generated embedding to find relevant content matches.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
const { error: matchError, data: pageSections } = await supabaseClient.rpc(
  'match_page_sections',
  {
    embedding,
    match_threshold: 0.78,
    match_count: 10,
    min_content_length: 50,
  }
)
```

----------------------------------------

TITLE: Subscribing to Realtime Events in Supabase with TypeScript
DESCRIPTION: Code examples demonstrating how to subscribe to realtime events from a Supabase table. The older version uses the .from().on() pattern, while the newer version uses the channel API with postgres_changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
const userListener = supabase
  .from('users')
  .on('*', (payload) => handleAllEventsPayload(payload.new))
  .subscribe()
```

LANGUAGE: typescript
CODE:
```
const userListener = supabase
  .channel('public:user')
  .on('postgres_changes', { event: '*', schema: 'public', table: 'user' }, (payload) =>
    handleAllEventsPayload()
  )
  .subscribe()
```

----------------------------------------

TITLE: Create an employees table schema (SQL)
DESCRIPTION: Create a SQL file in the `supabase/schemas` directory to define the structure of an `employees` table with `id` and `name` columns. This declares the desired state of the schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_0

LANGUAGE: sql
CODE:
```
create table "employees" (
  "id" integer not null,
  "name" text
);
```

----------------------------------------

TITLE: Creating User Metadata During Signup with Supabase Auth in JavaScript
DESCRIPTION: This snippet demonstrates how to use the Supabase JavaScript client's signUp function to create a new user with additional metadata including personal information. The metadata is stored in the auth.raw_user_meta_data column of the auth.users table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/customizing-emails-by-language-KZ_38Q.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.auth.signUp({
  email: 'email@some_[email.com](http://email.com/)',
  password: 'example-password',
  options: {
    data: {
      first_name: 'John',
      last_name: 'Doe',
      age: 27,
    },
  },
})
```

----------------------------------------

TITLE: Handling Card Realtime Updates in Angular Board Component
DESCRIPTION: This function processes realtime updates for card data. It subscribes to the table changes and handles different event types (INSERT, UPDATE, DELETE) to keep the local card data synchronized with the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_30

LANGUAGE: TypeScript
CODE:
```
  handleRealtimeUpdates() {
    this.dataService.getTableChanges().subscribe((update: any) => {
      const record = update.new?.id ? update.new : update.old;
      const event = update.eventType;

      if (!record) return;

      if (update.table == 'cards') {
        if (event === 'INSERT') {
          this.listCards[record.list_id].push(record);
        } else if (event === 'UPDATE') {
          const newArr = [];

          for (let card of this.listCards[record.list_id]) {
            if (card.id == record.id) {
              card = record;
            }
            newArr.push(card);
          }
          this.listCards[record.list_id] = newArr;
        } else if (event === 'DELETE') {
          this.listCards[record.list_id] = this.listCards[
            record.list_id
          ].filter((card: any) => card.id !== record.id);
        }
      } else if (update.table == 'lists') {
        // TODO
      }
    });
  }
```

----------------------------------------

TITLE: Implementing Supabase Service for Angular
DESCRIPTION: TypeScript service that initializes the Supabase client and provides methods for authentication, profile management, and storage operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@angular/core'
import { LoadingController, ToastController } from '@ionic/angular'
import { AuthChangeEvent, createClient, Session, SupabaseClient } from '@supabase/supabase-js'
import { environment } from '../environments/environment'

export interface Profile {
  username: string
  website: string
  avatar_url: string
}

@Injectable({
  providedIn: 'root',
})
export class SupabaseService {
  private supabase: SupabaseClient

  constructor(
    private loadingCtrl: LoadingController,
    private toastCtrl: ToastController
  ) {
    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)
  }

  get user() {
    return this.supabase.auth.getUser().then(({ data }) => data?.user)
  }

  get session() {
    return this.supabase.auth.getSession().then(({ data }) => data?.session)
  }

  get profile() {
    return this.user
      .then((user) => user?.id)
      .then((id) =>
        this.supabase.from('profiles').select(`username, website, avatar_url`).eq('id', id).single()
      )
  }

  authChanges(callback: (event: AuthChangeEvent, session: Session | null) => void) {
    return this.supabase.auth.onAuthStateChange(callback)
  }

  signIn(email: string) {
    return this.supabase.auth.signInWithOtp({ email })
  }

  signOut() {
    return this.supabase.auth.signOut()
  }

  async updateProfile(profile: Profile) {
    const user = await this.user
    const update = {
      ...profile,
      id: user?.id,
      updated_at: new Date(),
    }

    return this.supabase.from('profiles').upsert(update)
  }

  downLoadImage(path: string) {
    return this.supabase.storage.from('avatars').download(path)
  }

  uploadAvatar(filePath: string, file: File) {
    return this.supabase.storage.from('avatars').upload(filePath, file)
  }

  async createNotice(message: string) {
    const toast = await this.toastCtrl.create({ message, duration: 5000 })
    await toast.present()
  }

  createLoader() {
    return this.loadingCtrl.create()
  }
}
```

----------------------------------------

TITLE: Creating WebSocket Server with Node.js in Edge Functions
DESCRIPTION: An example of setting up a WebSocket server using Node.js and the 'ws' package. This code creates an HTTP server, configures WebSocket handling, and manages connection events. The server listens on port 8080 and responds to messages with the current timestamp.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/websockets.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { createServer } from "node:http";
import { WebSocketServer } from "npm:ws";

const server = createServer();
// Since we manually created the HTTP server,
// turn on the noServer mode.
const wss = new WebSocketServer({ noServer: true });

wss.on("connection", ws => {
console.log("socket opened");
ws.on("message", (data /** Buffer \*/, isBinary /** bool \*/) => {
if (isBinary) {
console.log("socket message:", data);
} else {
console.log("socket message:", data.toString());
}

        ws.send(new Date().toString());
    });

    ws.on("error", err => {
        console.log("socket errored:", err.message);
    });

    ws.on("close", () => console.log("socket closed"));

});

server.on("upgrade", (req, socket, head) => {
wss.handleUpgrade(req, socket, head, ws => {
wss.emit("connection", ws, req);
});
});

server.listen(8080);
```

----------------------------------------

TITLE: Full Text Search on Description Using Swift
DESCRIPTION: Swift implementation using Supabase client to perform a full text search on the books table, searching the description column for the word 'big'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_16

LANGUAGE: swift
CODE:
```
let response = await client.from("books")
  .select()
  .textSearch("description", value: "'big'")
  .execute()
```

----------------------------------------

TITLE: Git Setup and Local Development
DESCRIPTION: Commands to commit initial Supabase configuration and start local development.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
git add .
git commit -m "init supabase"
supabase start
```

----------------------------------------

TITLE: Creating Job Queue Table for Email Messaging - SQL
DESCRIPTION: Defines a SQL table structure for a job queue utilized in handling email messages efficiently. This structure supports storing metadata about each job, including its status, priority, and retry information.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-email-hook.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table job_queue (
  job_id uuid primary key default gen_random_uuid(),
  job_data jsonb not null,
  created_at timestamp default now(),
  status text default 'pending',
  priority int default 0,
  retry_count int default 0,
  
```

----------------------------------------

TITLE: Creating RLS Policy for Restricting File Type Uploads in SQL
DESCRIPTION: This snippet illustrates how to create a policy that restricts uploads to only PNG files within a specific bucket named 'cats' using the storage.extension() function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/helper-functions.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create policy "Only allow PNG uploads"
on storage.objects
for insert
to authenticated
with check (
  bucket_id = 'cats' and storage.extension(name) = 'png'
);
```

----------------------------------------

TITLE: Updating HomePage to Handle Authentication State in RedwoodJS
DESCRIPTION: Updates the HomePage component to conditionally render either the Auth or Account component based on the user's authentication status using the isAuthenticated value from useAuth hook.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_11

LANGUAGE: jsx
CODE:
```
import { useAuth } from '@redwoodjs/auth'
import { MetaTags } from '@redwoodjs/web'

import Account from 'src/components/Account'
import Auth from 'src/components/Auth'

const HomePage = () => {
  const { isAuthenticated } = useAuth()

  return (
    <>
      <MetaTags title="Welcome" />
      {!isAuthenticated ? <Auth /> : <Account />}
    </>
  )
}

export default HomePage
```

----------------------------------------

TITLE: Displaying Supabase Data in SvelteKit Component
DESCRIPTION: Svelte component that renders the list of instruments fetched from Supabase as an unordered list.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/sveltekit.mdx#2025-04-21_snippet_4

LANGUAGE: svelte
CODE:
```
<script>
  let { data } = $props();
</script>

<ul>
  {#each data.instruments as instrument}
    <li>{instrument.name}</li>
  {/each}
</ul>
```

----------------------------------------

TITLE: Testing Supabase Edge Functions with Deno Test
DESCRIPTION: Example TypeScript test script for Edge Functions that validates both Supabase client functionality and specific function behavior using Deno's assertion utilities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/unit-test.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Import required libraries and modules
import { assert, assertEquals } from 'jsr:@std/assert@1'
import { createClient, SupabaseClient } from 'jsr:@supabase/supabase-js@2'

// Will load the .env file to Deno.env
import 'jsr:@std/dotenv/load'

// Set up the configuration for the Supabase client
const supabaseUrl = Deno.env.get('SUPABASE_URL') ?? ''
const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY') ?? ''
const options = {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
    detectSessionInUrl: false,
  },
}

// Test the creation and functionality of the Supabase client
const testClientCreation = async () => {
  var client: SupabaseClient = createClient(supabaseUrl, supabaseKey, options)

  // Verify if the Supabase URL and key are provided
  if (!supabaseUrl) throw new Error('supabaseUrl is required.')
  if (!supabaseKey) throw new Error('supabaseKey is required.')

  // Test a simple query to the database
  const { data: table_data, error: table_error } = await client
    .from('my_table')
    .select('*')
    .limit(1)
  if (table_error) {
    throw new Error('Invalid Supabase client: ' + table_error.message)
  }
  assert(table_data, 'Data should be returned from the query.')
}

// Test the 'hello-world' function
const testHelloWorld = async () => {
  var client: SupabaseClient = createClient(supabaseUrl, supabaseKey, options)

  // Invoke the 'hello-world' function with a parameter
  const { data: func_data, error: func_error } = await client.functions.invoke('hello-world', {
    body: { name: 'bar' },
  })

  // Check for errors from the function invocation
  if (func_error) {
    throw new Error('Invalid response: ' + func_error.message)
  }

  // Log the response from the function
  console.log(JSON.stringify(func_data, null, 2))

  // Assert that the function returned the expected result
  assertEquals(func_data.message, 'Hello bar!')
}

// Register and run the tests
Deno.test('Client Creation Test', testClientCreation)
Deno.test('Hello-world Function Test', testHelloWorld)
```

----------------------------------------

TITLE: Unlinking Identity with JavaScript
DESCRIPTION: Example showing how to fetch and unlink a Google OAuth identity from a user using the Supabase JavaScript client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { data: identities, error: identitiesError } = await supabase.auth.getUserIdentities()

if (!identitiesError) {
  const googleIdentity = identities.identities.find((identity) => identity.provider === 'google')

  if (googleIdentity) {
    const { data, error } = await supabase.auth.unlinkIdentity(googleIdentity)
  }
}
```

----------------------------------------

TITLE: Running Supabase Functions Locally
DESCRIPTION: Command to serve Supabase functions locally without JWT verification for development purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/og-image-with-storage-cdn/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions serve --no-verify-jwt
```

----------------------------------------

TITLE: Querying Supabase Data Server-Side in SvelteKit
DESCRIPTION: Server-side load function that fetches data from the 'instruments' table in Supabase and makes it available to the page component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/sveltekit.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { supabase } from "$lib/supabaseClient";

export async function load() {
  const { data } = await supabase.from("instruments").select();
  return {
    instruments: data ?? [],
  };
}
```

----------------------------------------

TITLE: Listening to UPDATE Events in Python with Supabase Realtime
DESCRIPTION: Establishes a Python channel to listen for UPDATE events in the public schema of a Supabase database. The code creates a subscription that calls a lambda function to print the payload whenever database updates occur.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
changes = supabase.channel('schema-db-changes').on_postgres_changes(
  "UPDATE", # Listen only to UPDATEs
  schema="public",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Signing In with Discord - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to sign in users using Discord OAuth through the Supabase client. The `signInWithOAuth()` method is called with 'discord' as the provider to initiate the login process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-discord.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n// ---cut---\nasync function signInWithDiscord() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'discord',\n  })\n}
```

----------------------------------------

TITLE: Implementing Phone-based MFA with Supabase Auth in TypeScript
DESCRIPTION: This code snippet shows how to implement phone-based multi-factor authentication using Supabase Auth. It includes sending an SMS or WhatsApp message challenge and verifying the received code. The user's 'aal' claim in the JWT is upgraded to aal2 upon successful verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-14-third-party-auth-mfa-phone-send-hooks.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Send an SMS or WhatsApp message to the user
const { data: { challengeId } } = await supabase.auth.mfa.challenge({
  factorId,
})

// To verify the code received by the user
await supabase.auth.mfa.verify({
  factorId,
  challengeId,
  code: '123456',
})

// The user's `aal` claim in the JWT 
// will be upgraded to aal2
```

----------------------------------------

TITLE: Creating a Function with Error Handling
DESCRIPTION: A PostgreSQL function that safely performs division with error handling to prevent division by zero errors.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-functions.md#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create or replace function my_schema.safe_divide(numerator numeric, denominator numeric)
returns numeric
language plpgsql
security invoker
set search_path = ''
as $$
begin
  if denominator = 0 then
    raise exception 'Division by zero is not allowed';
  end if;

  return numerator / denominator;
end;
$$;
```

----------------------------------------

TITLE: Creating Unstructured Vector Embeddings Table in SQL
DESCRIPTION: Creates a table for storing vector embeddings with unstructured metadata using a JSONB column. Shows how to insert sample data with metadata stored in JSON format.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/structured-unstructured.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table docs (
  id uuid primary key,
  embedding vector(3),
  meta jsonb
);

insert into docs
  (id, embedding, meta)
values
  (
    '79409372-7556-4ccc-ab8f-5786a6cfa4f7',
    array[0.1, 0.2, 0.3],
    '{"content": "Hello world", "url": "/hello-world"}'
  );
```

----------------------------------------

TITLE: Generating Schema Diff with Supabase CLI
DESCRIPTION: Demonstrates how to use the 'db diff' command with the experimental '--use-migra' flag to generate a DDL script for schema changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ supabase db diff --use-migra --file file_name
# Creates a DDL script: supabase/migrations/<datetime_string>_file_name.sql
```

----------------------------------------

TITLE: Revoking Column-Level UPDATE Privilege in PostgreSQL
DESCRIPTION: SQL command to revoke the column-level UPDATE privilege for the 'title' column from the 'authenticated' role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/column-level-security.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
revoke
update
  (title) on table public.posts
from
  authenticated;
```

----------------------------------------

TITLE: Multi-Word Search with AND Operator
DESCRIPTION: SQL query demonstrating how to search for multiple words using the AND operator (&) in tsquery
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_21

LANGUAGE: sql
CODE:
```
select
  *
from
  books
where
  to_tsvector(description)
  @@ to_tsquery('little & big');
```

----------------------------------------

TITLE: Error Detection Query
DESCRIPTION: Complex SQL query for finding API errors using regex patterns to match specific tables and columns.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
select
  cast(timestamp as datetime) as timestamp,
  status_code,
  url,
  event_message
from edge_logs
cross join unnest(metadata) as metadata
cross join unnest(response) AS request;
cross join unnest(response) AS response;
where
  -- find all errors
  status_code >= 400
    and
  -- find queries featuring the a specific <table_name> and <column_name>
  (
    regexp_contains(url, '<table_name>')
    and
    regexp_contains(event_message, '<column_name1>|<column_name2>')
  )
```

----------------------------------------

TITLE: Implementing Authenticated Route Redirection in React
DESCRIPTION: Creates an authenticated route component that checks the user's authentication status and redirects to the login page if unauthenticated. Uses Supabase client for authentication verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/password-based-auth.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { useEffect } from "react"
import { createClient } from "@supabase/supabase-js"

export default function AuthenticatedRoute() {
  useEffect(() => {
    const checkAuth = async () => {
      const client = createClient()
      const { error } = await client.auth.getUser()

      if (error) {
        location.href = "/login"
      }
    }
    checkAuth()
  }, [])

  return <div>Authenticated page</div>;
}
```

----------------------------------------

TITLE: Environment variables for Supabase configuration
DESCRIPTION: Environment variables file (.env.local) containing Supabase URL and anonymous key placeholders.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Querying Vector Collections with Vecs
DESCRIPTION: Python code demonstrating vector queries using Vecs library with cosine similarity and metadata filtering
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/engineering-for-scale.mdx#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
# cosine similarity
docs.query(query_vector=[0.4,0.5,0.6], limit=5)

# metadata filtering
docs.query(
    query_vector=[0.4,0.5,0.6],
    limit=5,
    filters={"year": {"$eq": 2012}}, # metadata filters
)
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase
DESCRIPTION: Environment configuration for connecting to Supabase backend, including the database URL and anonymous API key.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-auth-presence/README.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=<<insert-your-db-url-here>>

NEXT_PUBLIC_SUPABASE_ANON_KEY=<<insert-your-anon-key-here>>
```

----------------------------------------

TITLE: Start Supabase and Apply Migrations (Bash)
DESCRIPTION: Starts the local Supabase development environment and then applies any pending database migrations found in the migrations directory.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
supabase start && supabase migration up
```

----------------------------------------

TITLE: Initiating Sign in with Apple OAuth Flow with Supabase JS/TS
DESCRIPTION: This snippet demonstrates how to initiate the Sign in with Apple OAuth flow using the Supabase JavaScript/TypeScript client library. It creates a Supabase client and calls the `signInWithOAuth` method, specifying 'apple' as the provider. This action redirects the user to Apple's authentication page.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project.supabase.co', 'your-anon-key')\n\n// ---cut---\nsupabase.auth.signInWithOAuth({\n  provider: 'apple',\n})
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase Authentication
DESCRIPTION: Environment variables required for setting up Supabase authentication. These include the Supabase URL and anonymous key that can be found in the Supabase dashboard or local instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/social-auth.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Configuring Supabase Client with Custom Storage (Cookies) in Typescript
DESCRIPTION: This code snippet demonstrates how to override the default storage mechanism of the Supabase client to use a custom storage object, typically for storing tokens in cookies on the server-side. It uses the `createClient` function from `@supabase/supabase-js` and configures the `auth.storage` option with a custom object that implements `getItem`, `setItem`, and `removeItem` methods, mimicking the `Storage` interface. This is suitable for server-side applications where HTTP-only cookies are desired.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/sessions.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('SUPABASE_URL', 'SUPABASE_ANON_KEY', {
  auth: {
    storage: {
      getItem: () => {
        return Promise.resolve('FETCHED_COOKIE')
      },
      setItem: () => {},
      removeItem: () => {},
    },
  },
})
```

----------------------------------------

TITLE: Allowing Authenticated Uploads to Private Folder in SQL
DESCRIPTION: This example demonstrates how to create a policy that allows authenticated users to upload files to a folder called 'private' inside a specific bucket.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/access-control.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create policy "Allow authenticated uploads"
on storage.objects
for insert
to authenticated
with check (
  bucket_id = 'my_bucket_id' and
  (storage.foldername(name))[1] = 'private'
);
```

----------------------------------------

TITLE: Setting Up Database Trigger
DESCRIPTION: SQL trigger that executes the broadcast function for INSERT, UPDATE, or DELETE operations on the specified table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-02-realtime-broadcast-from-database.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create trigger broadcast_changes_for_your_table_trigger
after insert or update or delete
on public.your_table
for each row
execute function your_table_changes();
```

----------------------------------------

TITLE: Implementing Account Component with Supabase Authentication in RedwoodJS
DESCRIPTION: Complete implementation of the Account component that handles user profile management. It uses Supabase client via RedwoodJS's useAuth hook to fetch and update user profile data in the profiles table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_10

LANGUAGE: jsx
CODE:
```
import { useState, useEffect } from 'react'
import { useAuth } from '@redwoodjs/auth'

const Account = () => {
  const { client: supabase, currentUser, logOut } = useAuth()
  const [loading, setLoading] = useState(true)
  const [username, setUsername] = useState(null)
  const [website, setWebsite] = useState(null)
  const [avatar_url, setAvatarUrl] = useState(null)

  useEffect(() => {
    getProfile()
  }, [supabase.auth.session])

  async function getProfile() {
    try {
      setLoading(true)
      const user = supabase.auth.user()

      const { data, error, status } = await supabase
        .from('profiles')
        .select(`username, website, avatar_url`)
        .eq('id', user.id)
        .single()

      if (error && status !== 406) {
        throw error
      }

      if (data) {
        setUsername(data.username)
        setWebsite(data.website)
        setAvatarUrl(data.avatar_url)
      }
    } catch (error) {
      alert(error.message)
    } finally {
      setLoading(false)
    }
  }

  async function updateProfile({ username, website, avatar_url }) {
    try {
      setLoading(true)
      const user = supabase.auth.user()

      const updates = {
        id: user.id,
        username,
        website,
        avatar_url,
        updated_at: new Date(),
      }

      const { error } = await supabase.from('profiles').upsert(updates, {
        returning: 'minimal', // Don't return the value after inserting
      })

      if (error) {
        throw error
      }

      alert('Updated profile!')
    } catch (error) {
      alert(error.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="row flex-center flex">
      <div className="col-6 form-widget">
        <h1 className="header">Supabase + RedwoodJS</h1>
        <p className="description">Your profile</p>
        <div className="form-widget">
          <div>
            <label htmlFor="email">Email</label>
            <input id="email" type="text" value={currentUser.email} disabled />
          </div>
          <div>
            <label htmlFor="username">Name</label>
            <input
              id="username"
              type="text"
              value={username || ''}
              onChange={(e) => setUsername(e.target.value)}
            />
          </div>
          <div>
            <label htmlFor="website">Website</label>
            <input
              id="website"
              type="url"
              value={website || ''}
              onChange={(e) => setWebsite(e.target.value)}
            />
          </div>

          <div>
            <button
              className="button primary block"
              onClick={() => updateProfile({ username, website, avatar_url })}
              disabled={loading}
            >
              {loading ? 'Loading ...' : 'Update'}
            </button>
          </div>

          <div>
            <button className="button block" onClick={() => logOut()}>
              Sign Out
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Account
```

----------------------------------------

TITLE: Regional Invocation with cURL
DESCRIPTION: Shows how to invoke an Edge Function in a specific region using cURL. This includes setting the x-region header to specify which region the function should run in.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-edge-functions-node-npm.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
# https://supabase.com/docs/guides/functions/deploy#invoking-remote-functions
curl --request POST 'https://<project_ref>.supabase.co/functions/v1/hello-world' \
  --header 'Authorization: Bearer ANON_KEY' \
  --header 'Content-Type: application/json' \
  --header 'x-region: eu-west-3' \
  --data '{ "name":"Functions" }'
```

----------------------------------------

TITLE: Building a Magic Link Login Page Component in SvelteKit
DESCRIPTION: Creates a login page component with a form that sends magic links for authentication. Includes form handling, loading states, and error display functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_9

LANGUAGE: svelte
CODE:
```
<!-- src/routes/+page.svelte -->
<script lang="ts">
	import { enhance } from '$app/forms'
	import type { ActionData, SubmitFunction } from './$types.js'

	export let form: ActionData;

	let loading = false

	const handleSubmit: SubmitFunction = () => {
		loading = true
		return async ({ update }) => {
			update()
			loading = false
		}
	}
</script>

<svelte:head>
	<title>User Management</title>
</svelte:head>

<form class="row flex flex-center" method="POST" use:enhance={handleSubmit}>
	<div class="col-6 form-widget">
		<h1 class="header">Supabase + SvelteKit</h1>
		<p class="description">Sign in via magic link with your email below</p>
		{#if form?.message !== undefined}
		<div class="success {form?.success ? '' : 'fail'}">
			{form?.message}
		</div>
		{/if}
		<div>
			<label for="email">Email address</label>
			<input
				id="email"
				name="email"
				class="inputField"
				type="email"
				placeholder="Your email"
				value={form?.email ?? ''}
			/>
		</div>
		{#if form?.errors?.email}
		<span class="flex items-center text-sm error">
			{form?.errors?.email}
		</span>
		{/if}
		<div>
			<button class="button primary block">
				{ loading ? 'Loading' : 'Send magic link' }
			</button>
		</div>
	</div>
</form>
```

----------------------------------------

TITLE: Push Database Migrations with Seed (CLI)
DESCRIPTION: This command pushes the local database migrations and seed data to the remote Supabase database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_12

LANGUAGE: bash
CODE:
```
supabase db push --include-seed
```

----------------------------------------

TITLE: Getting Public URL for Transformed Image in Swift
DESCRIPTION: This snippet illustrates how to use the Supabase Swift client to get a public URL for a transformed image, specifying width and height.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_2

LANGUAGE: swift
CODE:
```
let url = try await supabase.storage.from("bucket")
  .getPublicURL(
    path: "image.jpg"
    options: TransformOptions(with: 500, height: 600)
  )
```

----------------------------------------

TITLE: Complete Dynamic Post Page with Static Generation
DESCRIPTION: Full implementation of a dynamic post page with static path generation, data fetching, and error handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_10

LANGUAGE: tsx
CODE:
```
import supabase from '../../../utils/supabase'
import { notFound } from 'next/navigation'

export async function generateStaticParams() {
  const { data: posts } = await supabase.from('posts').select('id')

  return posts?.map(({ id }) => ({
    id,
  }))
}

export default async function Post({ params: { id } }: { params: { id: string } }) {
  const { data: post } = await supabase.from('posts').select().match({ id }).single()

  if (!post) {
    notFound()
  }

  return <pre>{JSON.stringify(post, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Creating Supabase Browser Client for Next.js Client Components
DESCRIPTION: Defines a utility function that creates a Supabase client for use in browser-side Client Components. Uses createBrowserClient from the ssr package to handle client-side authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_2

LANGUAGE: ts
CODE:
```
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

----------------------------------------

TITLE: Configure URL Scheme in React Native (Expo)
DESCRIPTION: This JSON snippet demonstrates how to configure a custom URL scheme for a React Native (Expo) application.  Adding a scheme allows the app to be opened via a deep link. The scheme should be added to the app.json or app.config.js file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "expo": {
    "scheme": "com.supabase"
  }
}
```

----------------------------------------

TITLE: Implementing Auth UI with Theme
DESCRIPTION: Setting up Auth UI with the default Supa theme for styled authentication interface.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { Auth } from '@supabase/auth-ui-react'
import {
  ThemeSupa,
} from '@supabase/auth-ui-shared'

const supabase = createClient(
  '<INSERT PROJECT URL>',
  '<INSERT PROJECT ANON API KEY>'
)

const App = () => (
  <Auth
    supabaseClient={supabase}
    appearance={{ theme: ThemeSupa }}
  />
)
```

----------------------------------------

TITLE: Querying JSONB Data in PostgreSQL
DESCRIPTION: Demonstrates how to query JSONB data type using the arrow operator to access specific fields within a JSON object stored in a grades column.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select * from students where grades->>'geography' = 'A';
```

----------------------------------------

TITLE: Analyzing Inefficient Sequential Scans with High Filter Rates in PostgreSQL
DESCRIPTION: Example of a sequential scan that filters out most rows (2997 out of 3000), indicating that an index on the filtered column (price) could significantly improve performance by avoiding a full table scan.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
Seq Scan on products  (cost=0.00..100.00 rows=300 width=50) (actual time=50.000..100.000 rows=3 loops=1)
   Filter: (price > 1000)
   Rows Removed by Filter: 2997
```

----------------------------------------

TITLE: Sending Broadcast Messages
DESCRIPTION: Methods for sending broadcast messages using client libraries before and after subscription
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const myChannel = supabase.channel('test-channel')

myChannel
  .send({
    type: 'broadcast',
    event: 'shout',
    payload: { message: 'Hi' },
  })
  .then((resp) => console.log(resp))
```

LANGUAGE: sql
CODE:
```
select
  realtime.send(
    jsonb_build_object('hello', 'world'),
    'event',
    'topic',
    false
  );
```

----------------------------------------

TITLE: Identity Column Creation in Postgres 10+
DESCRIPTION: Shows the standards-compliant way to create auto-incrementing columns using IDENTITY
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
CREATE TABLE (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  email citext NOT NULL CHECK (LENGTH(email) < 255),
  name text NOT NULL
)
```

----------------------------------------

TITLE: Querying Related Tables with Resource Embedding in PostgREST
DESCRIPTION: Demonstrates how to query related tables using PostgREST resource embedding. The example shows querying films and their technical specifications using both HTTP and JavaScript approaches.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-postgrest-11-prerelease.mdx#2025-04-21_snippet_0

LANGUAGE: http
CODE:
```
GET /films?select=title,technical_specs(camera,laboratory,sound_mix)
```

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase.from('films').select(`
    title,
    technical_specs (
      camera, laboratory, duration
    )
  `)
```

LANGUAGE: json
CODE:
```
[
  {
    "title": "Pulp Fiction",
    "technical_specs": {
      "camera": "Arriflex 35-III",
      "laboratory": "DeLuxe, Hollywood (CA), USA (color)",
      "duration": "02:34:00"
    }
  },
  "..."
]
```

----------------------------------------

TITLE: Sending Session to Client in JavaScript
DESCRIPTION: This JavaScript snippet modifies the SvelteKit server load function to pass the user's session and user data to the client, aiding in making session data available across the UI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_7

LANGUAGE: JavaScript
CODE:
```
// src/routes/+layout.server.js
export const load = async ({ locals: { safeGetSession } }) => {
  const { session, user } = await safeGetSession()

  return {
    session,
    user,
  }
}
```

----------------------------------------

TITLE: Retrieving and Deleting Queue Messages with pgmq_public.pop
DESCRIPTION: Function to retrieve and delete the next available message from a specified queue. Takes a queue name as input and returns the message while removing it from the queue.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/api.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
pgmq_public.pop(queue_name text)
```

----------------------------------------

TITLE: Installing Supabase Cron Postgres Module via SQL
DESCRIPTION: SQL commands to create the pg_cron extension and grant necessary privileges. This enables the Supabase Cron functionality for scheduling recurring Jobs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/install.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create extension pg_cron with schema pg_catalog;

grant usage on schema cron to postgres;
grant all privileges on all tables in schema cron to postgres;
```

----------------------------------------

TITLE: Querying Large Files in Supabase Storage
DESCRIPTION: SQL query to list files larger than 5 MB with size formatting, retrieving file name, bucket, and human-readable file size
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/storage-size.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select
    name,
    bucket_id as bucket,
    case
        when (metadata->>'size')::int >= 1073741824 then
            ((metadata->>'size')::int / 1073741824.0)::numeric(10, 2) || ' GB'
        when (metadata->>'size')::int >= 1048576 then
            ((metadata->>'size')::int / 1048576.0)::numeric(10, 2) || ' MB'
        when (metadata->>'size')::int >= 1024 then
            ((metadata->>'size')::int / 1024.0)::numeric(10, 2) || ' KB'
        else
            (metadata->>'size')::int || ' bytes'
        end as size
from
    storage.objects
where
    (metadata->>'size')::int > 1048576 * 5
order by (metadata->>'size')::int desc
```

----------------------------------------

TITLE: SQL Schema for Chat App with RLS
DESCRIPTION: SQL code to set up the database schema for a chat application with rooms, participants, and messages tables. Includes a create_new_room function to handle chat room creation logic.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- *** Table definitions ***

create table if not exists public.rooms (
    id uuid not null primary key default gen_random_uuid(),
    created_at timestamp with time zone default timezone('utc' :: text, now()) not null
);
comment on table public.rooms is 'Holds chat rooms';

create table if not exists public.room_participants (
    profile_id uuid references public.profiles(id) on delete cascade not null,
    room_id uuid references public.rooms(id) on delete cascade not null,
    created_at timestamp with time zone default timezone('utc' :: text, now()) not null,
    primary key (profile_id, room_id)
);
comment on table public.room_participants is 'Relational table of users and rooms.';

alter table public.messages
add column room_id uuid references public.rooms(id) on delete cascade not null;

-- *** Add tables to the publication to enable realtime ***

alter publication supabase_realtime add table public.room_participants;

-- Creates a new room with the user and another user in it.
-- Will return the room_id of the created room
-- Will return a room_id if there were already a room with those participants
create or replace function create_new_room(other_user_id uuid) returns uuid as $$
    declare
        new_room_id uuid;
    begin
        -- Check if room with both participants already exist
        with rooms_with_profiles as (
            select room_id, array_agg(profile_id) as participants
            from room_participants
            group by room_id
        )
        select room_id
        into new_room_id
        from rooms_with_profiles
        where create_new_room.other_user_id=any(participants)
        and auth.uid()=any(participants);


        if not found then
            -- Create a new room
            insert into public.rooms default values
            returning id into new_room_id;

            -- Insert the caller user into the new room
            insert into public.room_participants (profile_id, room_id)
            values (auth.uid(), new_room_id);

            -- Insert the other_user user into the new room
            insert into public.room_participants (profile_id, room_id)
            values (other_user_id, new_room_id);
        end if;

        return new_room_id;
    end
$$ language plpgsql security definer;
```

----------------------------------------

TITLE: Querying One-to-Many Relationships via REST URL
DESCRIPTION: REST URL example showing how to query orchestral sections with their related instruments directly using the Supabase REST API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
GET https://[REF].supabase.co/rest/v1/orchestral_sections?select=id,name,instruments(id,name)
```

----------------------------------------

TITLE: Supabase API Client Query Example
DESCRIPTION: JavaScript example showing how to query data using the Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
let { data: countries, error } = await supabase.from('countries').select('name')
```

----------------------------------------

TITLE: Team-based Authorization using JWT
DESCRIPTION: Example of using auth.jwt() function to implement team-based access control
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create policy "User is in team"
on my_table
to authenticated
using ( team_id in (select auth.jwt() -> 'app_metadata' -> 'teams'));
```

----------------------------------------

TITLE: Creating and Using Presigned Upload URLs in Supabase Storage
DESCRIPTION: Demonstrates how to generate and use presigned URLs for authenticated file uploads in Supabase Storage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-12-storage-v3-resumable-uploads.mdx#2025-04-22_snippet_2

LANGUAGE: javascript
CODE:
```
// create a signed upload url
const filePath = 'users.txt'
const { token } = await storage.from(newBucketName).createSignedUploadUrl(filePath)

// this token can then be used to upload to storage
await storage.from(newBucketName).uploadToSignedUrl(filePath, token, file)
```

----------------------------------------

TITLE: Listen to Auth events in SvelteKit
DESCRIPTION: This Svelte component sets up a listener for Supabase authentication events.  The `onAuthStateChange` function is used to detect session refreshes and signouts, invalidating the 'supabase:auth' dependency to trigger a reload of the layout and update the UI accordingly.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_5

LANGUAGE: svelte
CODE:
```
<script>
  import { invalidate } from '$app/navigation'
  import { onMount } from 'svelte'

  let { data, children } = $props()
  let { session, supabase } = $derived(data)

  onMount(() => {
    const { data } = supabase.auth.onAuthStateChange((_, newSession) => {
      if (newSession?.expires_at !== session?.expires_at) {
        invalidate('supabase:auth')
      }
    })

    return () => data.subscription.unsubscribe()
  })
</script>

{@render children()}
```

----------------------------------------

TITLE: Adding Supabase Dependencies with Gradle KTS
DESCRIPTION: Demonstrates how to add Supabase module dependencies using Gradle Kotlin DSL build system. Uses BOM (Bill of Materials) for version management and includes core modules like postgrest-kt, gotrue-kt, and realtime-kt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_0

LANGUAGE: kotlin
CODE:
```
implementation(platform("io.github.jan-tennert.supabase:bom:VERSION"))
implementation("io.github.jan-tennert.supabase:postgrest-kt")
implementation("io.github.jan-tennert.supabase:gotrue-kt")
implementation("io.github.jan-tennert.supabase:realtime-kt")
```

----------------------------------------

TITLE: Creating Signed URL for Private Bucket File
DESCRIPTION: Shows how to generate a temporary signed URL for a file in a private bucket, allowing time-limited access without permanent public exposure
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/fundamentals.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Create signed URL for limited-time access
const { data, error } = await supabase.storage
  .from('private-bucket')
  .createSignedUrl('path/to/file', 60) // URL valid for 60 seconds
```

----------------------------------------

TITLE: Listening to DELETE Events in Python with Supabase Realtime
DESCRIPTION: Establishes a Python channel to listen for DELETE events in the public schema of a Supabase database. The code creates a subscription that calls a lambda function to print the payload whenever database deletions occur.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
changes = supabase.channel('schema-db-changes').on_postgres_changes(
  "DELETE", # Listen only to DELETEs
  schema="public",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Oak Framework Routing Implementation
DESCRIPTION: Example of implementing routing in Edge Functions using Oak framework with GET and POST request handlers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { Application } from "jsr:@oak/oak@15/application";
import { Router } from "jsr:@oak/oak@15/router";

const router = new Router();

router.get("/hello-world", (ctx) => {
ctx.response.body = "Hello world!";
});

router.post("/hello-world", async (ctx) => {
const { name } = await ctx.request.body.json();
ctx.response.body = `Hello ${name}!`;
});

const app = new Application();
app.use(router.routes());
app.use(router.allowedMethods());

app.listen({ port: 3000 });
```

----------------------------------------

TITLE: Removing IP Bans with Supabase CLI
DESCRIPTION: Command to remove a specific IP address from the ban list, allowing connections from that IP to your Supabase project database again. This is useful when you've been locked out due to failed login attempts.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/error-connection-refused-when-trying-to-connect-to-supabase-database-hwG0Dr.mdx#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
% supabase network-bans remove --db-unban-ip <ip_address> --project-ref <project_reference_id> --experimental
```

----------------------------------------

TITLE: Basic EXPLAIN ANALYZE Output Example
DESCRIPTION: Sample output of EXPLAIN ANALYZE showing sequential scan performance metrics including actual execution time and filter results.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
Seq Scan on users  (cost=0.00..19.00 rows=1 width=240) (actual time=0.026..0.026 rows=1 loops=1)
  Filter: (user_id = 1)
  Rows Removed by Filter: 999
Planning Time: 0.135 ms
```

----------------------------------------

TITLE: Creating Local Environment File
DESCRIPTION: Command to create a local environment file for storing development secrets.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
echo "MY_NAME=Yoda" >> ./supabase/.env.local
```

----------------------------------------

TITLE: Recreating a Publication in SQL Transaction
DESCRIPTION: Safely recreates a publication within a transaction to ensure atomicity. The publication is first dropped if it exists, then recreated without enabling it for any tables initially.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
begin;
  -- remove the realtime publication
  drop publication if exists publication_name;

  -- re-create the publication but don't enable it for any tables
  create publication publication_name;
commit;
```

----------------------------------------

TITLE: Configuring Postgres Connection URL for Vercel Edge Functions
DESCRIPTION: Sets up the Postgres connection URL as an environment variable for Vercel Edge Functions, including the necessary suffix for Supabase pooler compatibility.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres/serverless-drivers.mdx#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
POSTGRES_URL="postgres://postgres.cfcxynqnhdybqtbhjemm:[YOUR-PASSWORD]@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres?workaround=supabase-pooler.vercel"
```

----------------------------------------

TITLE: Performing Near-Duplicate Detection
DESCRIPTION: Searches for near-duplicate reviews by comparing vector similarities, filtering results based on distance threshold and text length.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
for ix, text in tqdm(enumerate(data['text'])):

    # Load the next row from the dataset
    query_results = reviews.fetch(ids=[f'{ix}'])
    
    (query_id, query_embedding, query_meta) = query_results[0]

    # Retrieve the original text from the row's metadata
    query_text = query_meta["text"]

    # To keep the output easy to read quickly, we'll restrict reviews to < 500 characters
    # In the real-world you would not include this restriction
    if len(query_text) < 500:

        # Query the review embeddings for the most similar 5 reviews
        top_5 = reviews.query(
            query_vector=query_embedding,
            limit = 5,
            include_metadata= True,
            include_value=True
        )

        # For each result
        for result_id, result_distance, result_meta in top_5[1:]:
            
            result_text = result_meta["text"]

            if (
                # Since our query embedding is in the collection, the nearest result
                # is always itself with a distance of 0. We exclude that record and 
                # review any others with a distance < 0.17
                0.01 < abs(result_distance) < 0.17
                and len(result_text) < 500
                and query_id < result_id
            ):
                print(
                    "query_id:", query_id,
                    "\t", "result_id:", result_id,
                    "\t", "distance", round(result_distance, 4),
                    "\n\n", "Query Text",
                    "\n\n", query_meta["text"],
                    "\n\n", "Result Text",
                    "\n\n", result_meta["text"],
                    "\n", "-" * 80
                )
```

----------------------------------------

TITLE: Implementing ProfilesCubit in Dart for Flutter Chat App
DESCRIPTION: This code implements the ProfilesCubit class, which manages the state of user profiles. It includes methods for fetching and caching user profiles using Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_16

LANGUAGE: dart
CODE:
```
import 'dart:async';

import 'package:bloc/bloc.dart';
import 'package:meta/meta.dart';
import 'package:my_chat_app/models/profile.dart';
import 'package:my_chat_app/utils/constants.dart';

part 'profiles_state.dart';

class ProfilesCubit extends Cubit<ProfilesState> {
  ProfilesCubit() : super(ProfilesInitial());

  /// Map of app users cache in memory with profile_id as the key
  final Map<String, Profile?> _profiles = {};

  Future<void> getProfile(String userId) async {
    if (_profiles[userId] != null) {
      return;
    }

    final data = await supabase
        .from('profiles')
        .select()
        .match({'id': userId}).single();

    if (data == null) {
      return;
    }
    _profiles[userId] = Profile.fromMap(data);

    emit(ProfilesLoaded(profiles: _profiles));
  }
}
```

----------------------------------------

TITLE: Installing Supabase SSR Packages with pnpm
DESCRIPTION: Installs the @supabase/ssr and @supabase/supabase-js packages using pnpm package manager for implementing server-side rendering with Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
pnpm add @supabase/ssr @supabase/supabase-js
```

----------------------------------------

TITLE: Implementing OAuth Sign-In Redirect in Remix with Supabase Auth
DESCRIPTION: This snippet shows how to implement server-side OAuth sign-in redirects using Supabase Auth in a Remix application. It uses the redirect function from @remix-run/node (or cloudflare/deno) to handle the redirection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/oauth-sign-in-isnt-redirecting-on-the-server-side-ShGMtr.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { redirect } from "@remix-run/node"; // or cloudflare/deno
...
const { data } = await supabase.auth.signInWithOAuth({
  provider: 'github',
})

return redirect(data.url)
```

----------------------------------------

TITLE: Deploying Supabase Edge Functions
DESCRIPTION: Command to deploy the Supabase Edge Functions to the production environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
supabase functions deploy
```

----------------------------------------

TITLE: Bulk Insert with Default Values Example
DESCRIPTION: JavaScript example showing how to perform bulk insert while respecting default values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_7

LANGUAGE: jsx
CODE:
```
const { error } = await supabase
  .from('foo')
  .insert([
	  { "bar": "val1"
	  }
	, { "bar": "val2"
	  , "baz": 15
	  }
	], defaultToNull: false)
  .select()
```

----------------------------------------

TITLE: Handling Python Auth Errors
DESCRIPTION: This section describes how to handle errors originating from the `supabase.auth` namespace in Python. All errors are wrapped by the `AuthError` class and can be further categorized into `AuthApiError` (from Supabase Auth API). `AuthApiError` includes `code` and `status` properties to identify the error and HTTP status code, respectively.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/debugging/error-codes.mdx#2025-04-21_snippet_3



----------------------------------------

TITLE: Setting Refreshed JWT Token in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to set a refreshed JWT token for Supabase Realtime authentication. It uses the `setAuth` method of the `supabase.realtime` object to update the token. This assumes the Supabase client has already been initialized.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_54

LANGUAGE: js
CODE:
```
// Client setup

supabase.realtime.setAuth('fresh-token')
```

----------------------------------------

TITLE: Database Error Query
DESCRIPTION: SQL query for finding database-level errors in postgres_logs with specific filtering conditions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
select
  cast(postgres_logs.timestamp as datetime) as timestamp,
  error_severity,
  user_name,
  query,
  detail,
  sql_state_code,
  event_message
from postgres_logs
  cross join unnest(metadata) as metadata
  cross join unnest(metadata.parsed) as parsed
where
  -- filter only for error events
  regexp_contains(parsed.error_severity, 'ERROR|FATAL|PANIC')
    and
  -- All DB API requests are registered as the authenticator role
  parsed.user_name = 'authenticator'
    and
  -- find failed queries featuring the function <function_name>
  regexp_contains(parsed.query, '<function_name>')
    and
  -- limit the time of the search to be around the time of the failed API request
postgres_logs.timestamp between '2024-04-15 10:50:00' AND '2024-04-15 10:50:27'
order by
 timestamp desc
limit 100;
```

----------------------------------------

TITLE: Supabase Auth Error Codes Table
DESCRIPTION: Markdown table containing error codes and their descriptions used in Supabase Authentication system. Each code represents a specific error condition that can occur during authentication flows.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/auth_error_codes_table.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| Code                                    | Description                                                                                                                                                                                                                                                                                                   |
| --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `anonymous_provider_disabled`           | Anonymous sign-ins are disabled.                                                                                                                                                                                                                                                                              |
| `bad_code_verifier`                     | Returned from the PKCE flow where the provided code verifier does not match the expected one. Indicates a bug in the implementation of the client library.                                                                                                                                                    |
| `bad_json`                              | Usually used when the HTTP body of the request is not valid JSON.                                                                                                                                                                                                                                             |
| `bad_jwt`                               | JWT sent in the `Authorization` header is not valid.                                                                                                                                                                                                                                                          |
```

----------------------------------------

TITLE: Implementing Client-Side Realtime Listener
DESCRIPTION: JavaScript/React code that sets up a Supabase client to listen for broadcast events on a specific channel.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-02-realtime-broadcast-from-database.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
const id = 'id'
await supabase.realtime.setAuth() // Needed for Realtime Authorization
const changes = supabase
  .channel(`topic:${id}`, {
    config: { private: true },
  })
  .on('broadcast', { event: 'INSERT' }, (payload) => console.log(payload))
  .on('broadcast', { event: 'UPDATE' }, (payload) => console.log(payload))
  .on('broadcast', { event: 'DELETE' }, (payload) => console.log(payload))
  .subscribe()
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase
DESCRIPTION: This bash script sets up environment variables for your Supabase project by retrieving the URL and anon key from the project's API settings. These are placed in a `.env.local` file for secure configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
# Find these in your Supabase project settings https://supabase.com/dashboard/project/_/settings/api
PUBLIC_SUPABASE_URL=https://your-project.supabase.co
PUBLIC_SUPABASE_ANON_KEY=your-anon-key
```

----------------------------------------

TITLE: Downloading Image with Transformation (JavaScript)
DESCRIPTION: Shows how to download an image from Supabase storage with specific width and height transformations
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/storage-image-transformations.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
supabase.storage.from('bucket').download('image-2.jpg', {
  transform: {
    width: 800,
    height: 300,
  },
})
```

----------------------------------------

TITLE: Optimized RLS Policy without Join
DESCRIPTION: Improved version of the RLS policy that avoids table joins by using a subquery with IN clause.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_16

LANGUAGE: sql
CODE:
```
create policy "rls_test_select" on test_table
to authenticated
using (
  team_id in (
    select team_id
    from team_user
    where user_id = (select auth.uid()) -- no join
  )
);
```

----------------------------------------

TITLE: Main App Component Implementation
DESCRIPTION: React component that manages authentication state and renders either the Auth or Account component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import './App.css'
import { useState, useEffect } from 'react'
import { supabase } from './supabaseClient'
import Auth from './Auth'
import Account from './Account'

function App() {
  const [session, setSession] = useState(null)

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session)
    })

    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })
  }, [])

  return (
    <div className="container" style={{ padding: '50px 0 100px 0' }}>
      {!session ? <Auth /> : <Account key={session.user.id} session={session} />}
    </div>
  )
}

export default App
```

----------------------------------------

TITLE: Enabling and Disabling pg_stat_statements Extension in PostgreSQL
DESCRIPTION: SQL commands to enable or disable the pg_stat_statements extension in a PostgreSQL database. The extension is created within a separate schema to keep the public schema clean.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_stat_statements.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the "pg_stat_statements" extension
create extension pg_stat_statements with schema extensions;

-- Disable the "pg_stat_statements" extension
drop extension if exists pg_stat_statements;
```

----------------------------------------

TITLE: Verifying Phone OTP
DESCRIPTION: Shows how to verify the 6-digit OTP code sent to the user's phone. Upon successful verification, returns a session with access and refresh tokens.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/phone-login.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const {
  data: { session },
  error,
} = await supabase.auth.verifyOtp({
  phone: '13334445555',
  token: '123456',
  type: 'sms',
})
```

LANGUAGE: swift
CODE:
```
try await supabase.auth.verifyOTP(
  phone: "+13334445555",
  token: "123456",
  type: .sms
)
```

LANGUAGE: kotlin
CODE:
```
supabase.auth.verifyPhoneOtp(
    type = OtpType.Phone.SMS,
    phone = "+13334445555",
    token = "123456"
)
```

LANGUAGE: python
CODE:
```
response = supabase.auth.verify_otp({
  'phone': '13334445555',
  'token': '123456',
  'type': 'sms',
})
```

LANGUAGE: bash
CODE:
```
curl -X POST 'https://<PROJECT_REF>.supabase.co/auth/v1/verify' \
-H "apikey: <SUPABASE_KEY>" \
-H "Content-Type: application/json" \
-d '{
  "type": "sms",
  "phone": "+13334445555",
  "token": "123456"
}'
```

----------------------------------------

TITLE: Searching Multiple Columns in PostgreSQL
DESCRIPTION: SQL query to search through multiple columns by concatenating them and using tsvector/tsquery for full text search
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_19

LANGUAGE: sql
CODE:
```
select
  *
from
  books
where
  to_tsvector(description || ' ' || title)
  @@ to_tsquery('little');
```

----------------------------------------

TITLE: Creating Basic View in PostgreSQL
DESCRIPTION: Creates a view named 'transcripts' that joins students, courses, and grades tables to provide a comprehensive transcript view. Includes grant permissions for authenticated users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create view transcripts as
    select
        students.name,
        students.type,
        courses.title,
        courses.code,
        grades.result
    from grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;

grant all on table transcripts to authenticated;
```

----------------------------------------

TITLE: Filtering Postgres Logs by Error Severity in SQL
DESCRIPTION: SQL WHERE clause to find all error events with severe impact levels (ERROR, FATAL, PANIC) in the postgres_logs table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- find error events
... query
where
  parsed.error_severity in ('ERROR', 'FATAL', 'PANIC')
```

----------------------------------------

TITLE: Creating a Bucket using Python in Supabase Storage
DESCRIPTION: This Python snippet demonstrates how to create a new bucket in Supabase Storage using the Supabase client library. It calls the `create_bucket` method on the `storage` property of the `supabase` object, creating a bucket named 'avatars'. The response object will contain the result of the operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
response = supabase.storage.create_bucket('avatars')
```

----------------------------------------

TITLE: Making an Authenticated Request to Supabase Management API
DESCRIPTION: Example of making an authenticated HTTP request to the Supabase Management API using cURL. The request demonstrates how to include the authorization token in the header to fetch projects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/api/introduction.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
curl https://api.supabase.com/v1/projects \
-H "Authorization: Bearer sbp_bdd0••••••••••••••••••••••••••••••••4f23"
```

----------------------------------------

TITLE: Implementing Search Edge Function in TypeScript
DESCRIPTION: TypeScript edge function that handles semantic search operations. It takes a search term, generates an embedding using the gte-small model, then queries the database using the query_embeddings RPC function with a similarity threshold to find relevant content.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/semantic-search.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
const model = new Supabase.ai.Session('gte-small')

Deno.serve(async (req) => {
  const { search } = await req.json()
  if (!search) return new Response('Please provide a search param!')
  // Generate embedding for search term.
  const embedding = await model.run(search, {
    mean_pool: true,
    normalize: true,
  })

  // Query embeddings.
  const { data: result, error } = await supabase
    .rpc('query_embeddings', {
      embedding,
      match_threshold: 0.8,
    })
    .select('content')
    .limit(3)
  if (error) {
    return Response.json(error)
  }

  return Response.json({ search, result })
})
```

----------------------------------------

TITLE: Creating a new Supabase Edge Function for Cloudflare Turnstile
DESCRIPTION: Command to create a new Supabase Edge Function named 'cloudflare-turnstile' that will handle the CAPTCHA validation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/cloudflare-turnstile.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions new cloudflare-turnstile
```

----------------------------------------

TITLE: Implementing Code Exchange Route in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates a SvelteKit route for exchanging an auth code for a session using Supabase. It requires capturing the code from URL and leveraging Supabase's function for code exchange.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_5

LANGUAGE: TypeScript
CODE:
```
import { redirect } from '@sveltejs/kit'

export const GET = async ({ url, locals: { supabase } }) => {
  const code = url.searchParams.get('code')

  if (code) {
    await supabase.auth.exchangeCodeForSession(code)
  }

  redirect(303, '/')
}
```

----------------------------------------

TITLE: Sending State in JavaScript
DESCRIPTION: This snippet demonstrates how to send the current user's state to all subscribers in JavaScript using the track method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const roomOne = supabase.channel('room_01')

const userStatus = {
  user: 'user-1',
  online_at: new Date().toISOString(),
}

roomOne.subscribe(async (status) => {
  if (status !== 'SUBSCRIBED') { return }

  const presenceTrackStatus = await roomOne.track(userStatus)
  console.log(presenceTrackStatus)
})
```

----------------------------------------

TITLE: Configuring Supabase with Env Variables (TOML)
DESCRIPTION: Demonstrates using the `env()` syntax within `config.toml` to load configuration values from environment variables. This allows different environments (local, production, preview) to use different values without changing the configuration file itself. It shows examples for `site_url`, `additional_redirect_urls`, and GitHub external authentication settings.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#_snippet_0

LANGUAGE: toml
CODE:
```
site_url = "env(SUPABASE_AUTH_SITE_URL)"
additional_redirect_urls = [
    "env(SUPABASE_AUTH_ADDITIONAL_REDIRECT_URLS)"
]

[auth.external.github]
enabled = true
client_id = "env(SUPABASE_AUTH_EXTERNAL_GITHUB_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_EXTERNAL_GITHUB_SECRET)"
```

----------------------------------------

TITLE: Creating an HNSW Index for Vector Similarity Search with pgvector
DESCRIPTION: SQL command to create a Hierarchical Navigable Small World (HNSW) index on a vector column for improved performance with inner product distance function. This index type is available in pgvector v0.5.0 and later.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-09-06-increase-performance-pgvector-hnsw.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Add a HNSW index for the inner product distance function
CREATE INDEX ON documents
USING hnsw (embedding vector_ip_ops);
```

----------------------------------------

TITLE: Installing Supabase Dependencies for React Native
DESCRIPTION: Commands to install required dependencies including Supabase client, AsyncStorage for session management, and UI components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx expo install @supabase/supabase-js @react-native-async-storage/async-storage @rneui/themed
```

----------------------------------------

TITLE: Installing Supabase Python Client with PIP
DESCRIPTION: Installs the Supabase Python client library using PIP package manager. This is for Python version 3.8 and above.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/python/installing.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
pip install supabase
```

----------------------------------------

TITLE: Using New Channel Interface for Multiplayer Features in TypeScript
DESCRIPTION: Previews the new channel() interface in supabase-js v2, which is a preparatory release for upcoming multiplayer features.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
supabase
  .channel('any_string_you_want')
  .on('presence', { event: 'track' }, (payload) => {
    console.log(payload)
  })
  .subscribe()
```

----------------------------------------

TITLE: Analyzing Index Usage Statistics in PostgreSQL
DESCRIPTION: SQL query to analyze how frequently indexes are used when accessing tables, showing percentage of index usage and table sizes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/steps-to-improve-query-performance-with-indexes-q8PoC9.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
  relname,
  100 * idx_scan / (seq_scan + idx_scan) as percent_of_times_index_used,
  n_live_tup as rows_in_table
from pg_stat_user_tables
where seq_scan + idx_scan > 0
order by n_live_tup desc;
```

----------------------------------------

TITLE: Launching Supabase Bootstrap via CLI
DESCRIPTION: Command to initiate the Supabase Bootstrap process using npx. This command allows users to create a new Supabase project from existing starter templates without installing the CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-15-supabase-bootstrap.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx supabase bootstrap
```

----------------------------------------

TITLE: Authenticate with Supabase on Apple Sign-in Success Event (JS)
DESCRIPTION: Shows how to listen for the `AppleIDSignInOnSuccess` event from Sign in with Apple JS and use the received ID token from the event data to authenticate the user with Supabase Auth via the `signInWithIdToken` method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// Listen for authorization success.
document.addEventListener('AppleIDSignInOnSuccess', async (event) => {
  await supabase.auth.signInWithIdToken({
    provider: 'apple',
    token: event.data.id_token,
    nonce: '<value used in appleid-signin-nonce meta tag>',
  })
})
```

----------------------------------------

TITLE: Creating a Bucket using JavaScript in Supabase Storage
DESCRIPTION: This JavaScript snippet demonstrates how to create a new bucket in Supabase Storage using the Supabase client library. It utilizes the `supabase.storage.createBucket()` method to create a bucket named 'avatars'. The function returns a promise that resolves with the data or an error if the operation fails.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Use the JS library to create a bucket.

const { data, error } = await supabase.storage.createBucket('avatars')
```

----------------------------------------

TITLE: Using Sign-Out Scopes JavaScript
DESCRIPTION: Shows how to use different session termination scopes such as 'global' and 'local' in JavaScript using Supabase's client library. This involves both ending all sessions and selectively maintaining some active. Requires '@supabase/supabase-js' package.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\n// ---cut---\n// defaults to the global scope\nawait supabase.auth.signOut()\n\n// sign out from the current session only\nawait supabase.auth.signOut({ scope: 'local' })
```

----------------------------------------

TITLE: Updating signIn with email and password in TypeScript
DESCRIPTION: Example of how to update the signIn method for email and password authentication in supabase-js v2. The new version uses signInWithPassword and has a slightly different return structure.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
const {
  data: { user },
  error,
} = await supabase
  .auth
  .signInWithPassword({ email, password })
```

----------------------------------------

TITLE: Starting Supabase with Docker Compose
DESCRIPTION: Command to start the Supabase stack using Docker Compose, which includes the Analytics server with Postgres backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/self-hosting-analytics/introduction.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
# clone the supabase/supabase repo, and run the following
cd docker
docker compose -f docker-compose.yml up
```

----------------------------------------

TITLE: Importing Dependencies and Setting Database Connection
DESCRIPTION: Python code for importing required libraries and setting up the database connection string for Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
import sys
import boto3
import vecs
import json
import base64
from matplotlib import pyplot as plt
from matplotlib import image as mpimg
from typing import Optional

DB_CONNECTION = "postgresql://postgres.[PROJECT-REF]:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres"
```

----------------------------------------

TITLE: Creating RLS Policy for Public File Downloads in SQL
DESCRIPTION: This snippet demonstrates how to create a policy that allows any user to download a specific file named 'favicon.ico' using the storage.filename() function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/helper-functions.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create policy "Allow public downloads"
on storage.objects
for select
to public
using (
  storage.filename(name) = 'favicon.ico'
);
```

----------------------------------------

TITLE: Running Supabase Functions Locally
DESCRIPTION: Commands to start Supabase locally and serve functions with environment configuration for development.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/upstash-redis-ratelimit/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase start
supabase functions serve --env-file supabase/.env.local
```

----------------------------------------

TITLE: Querying One-to-Many Relationships in JavaScript
DESCRIPTION: JavaScript example showing how to query orchestral sections with their related instruments using Supabase's automatic relationship detection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('orchestral_sections').select(`
  id,
  name,
  instruments ( id, name )
`)
```

----------------------------------------

TITLE: Account Management Component
DESCRIPTION: Vue component for user profile management including update and sign out functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_4

LANGUAGE: vue
CODE:
```
<script setup>
const supabase = useSupabaseClient()

const loading = ref(true)
const username = ref('')
const website = ref('')
const avatar_path = ref('')

loading.value = true
const user = useSupabaseUser()

const { data } = await supabase
  .from('profiles')
  .select(`username, website, avatar_url`)
  .eq('id', user.value.id)
  .single()

if (data) {
  username.value = data.username
  website.value = data.website
  avatar_path.value = data.avatar_url
}

loading.value = false

async function updateProfile() {
  try {
    loading.value = true
    const user = useSupabaseUser()

    const updates = {
      id: user.value.id,
      username: username.value,
      website: website.value,
      avatar_url: avatar_path.value,
      updated_at: new Date(),
    }

    const { error } = await supabase.from('profiles').upsert(updates, {
      returning: 'minimal', // Don't return the value after inserting
    })
    if (error) throw error
  } catch (error) {
    alert(error.message)
  } finally {
    loading.value = false
  }
}

async function signOut() {
  try {
    loading.value = true
    const { error } = await supabase.auth.signOut()
    if (error) throw error
    user.value = null
  } catch (error) {
    alert(error.message)
  } finally {
    loading.value = false
  }
}
</script>

<template>
  <form class="form-widget" @submit.prevent="updateProfile">
    <div>
      <label for="email">Email</label>
      <input id="email" type="text" :value="user.email" disabled />
    </div>
    <div>
      <label for="username">Username</label>
      <input id="username" type="text" v-model="username" />
    </div>
    <div>
      <label for="website">Website</label>
      <input id="website" type="url" v-model="website" />
    </div>

    <div>
      <input
        type="submit"
        class="button primary block"
        :value="loading ? 'Loading ...' : 'Update'"
        :disabled="loading"
      />
    </div>

    <div>
      <button class="button block" @click="signOut" :disabled="loading">Sign Out</button>
    </div>
  </form>
</template>
```

----------------------------------------

TITLE: Querying One-to-Many Relationships in Dart
DESCRIPTION: Dart example showing how to query orchestral sections with their related instruments using Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
final data = await supabase.from('orchestral_sections').select('id, name, instruments(id, name)');
```

----------------------------------------

TITLE: Defining Custom Claims JSON Structure
DESCRIPTION: Example of a JSON structure for custom claims, including user role, plan, level, and other attributes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "user_role": "admin",
  "plan": "TRIAL",
  "user_level": 100,
  "group_name": "Super Guild!",
  "joined_on": "2022-05-20T14:28:18.217Z",
  "group_manager": false,
  "items": ["toothpick", "string", "ring"]
}
```

----------------------------------------

TITLE: Dynamic Posts Component
DESCRIPTION: Implements a server component that fetches fresh data on every request using revalidate: 0.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_14

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'
import supabase from '../../utils/supabase'

export const revalidate = 0

export default async function Posts() {
  const { data: posts } = await supabase.from('posts').select('id, title')

  if (!posts) {
    return <p>No posts found.</p>
  }

  return posts.map((post) => (
    <p key={post.id}>
      <Link href={`/static/${post.id}`}>{post.title}</Link>
    </p>
  ))
}
```

----------------------------------------

TITLE: Implementing Supabase Authentication Service in Angular
DESCRIPTION: Authentication service that manages Supabase client initialization, user session handling, and magic link sign-in functionality. Uses BehaviorSubject to track current user state and provides methods for sign-in and logout.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@angular/core'
import { Router } from '@angular/router'
import { createClient, SupabaseClient, User } from '@supabase/supabase-js'
import { BehaviorSubject } from 'rxjs'
import { environment } from 'src/environments/environment'

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private supabase: SupabaseClient
  private _currentUser: BehaviorSubject<boolean | User | any> = new BehaviorSubject(null)

  constructor(private router: Router) {
    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)

    const user = this.supabase.auth.user()
    if (user) {
      this._currentUser.next(user)
    } else {
      this._currentUser.next(false)
    }

    this.supabase.auth.onAuthStateChange((event, session) => {
      if (event == 'SIGNED_IN') {
        this._currentUser.next(session!.user)
      } else {
        this._currentUser.next(false)
        this.router.navigateByUrl('/', { replaceUrl: true })
      }
    })
  }

  signInWithEmail(email: string) {
    return this.supabase.auth.signIn({
      email,
    })
  }

  logout() {
    this.supabase.auth.signOut()
  }

  get currentUser() {
    return this._currentUser.asObservable()
  }
}
```

----------------------------------------

TITLE: Implementing Main Worker Request Handler
DESCRIPTION: Example showing how to implement a Main Worker that handles incoming requests by creating and delegating to User Workers. Includes configuration for memory limits, timeouts, and environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-11-edge-runtime-self-hosted-deno-functions.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
serve(async (req: Request) => {
  const memoryLimitMb = 150
  const workerTimeoutMs = 1 * 60 * 1000
  const noModuleCache = false
  const importMapPath = null
  const envVars = [
    ['USER', 'foo'],
    ['PASSWORD', 'BAR'],
  ]

  try {
    const worker = await EdgeRuntime.userWorkers.create({
      servicePath,
      memoryLimitMb,
      workerTimeoutMs,
      noModuleCache,
      importMapPath,
      envVars,
    })
    return await worker.fetch(req)
  } catch (e) {
    const error = { msg: e.toString() }
    return new Response(JSON.stringify(error), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})
```

----------------------------------------

TITLE: Running Supabase Locally
DESCRIPTION: This snippet details how to start the Supabase local development environment and serve specific Supabase functions. Dependencies include Supabase CLI and access to the provided environment configuration file. The commands must be executed in a terminal. The expected outcome is a locally available Supabase function for testing, accessible via a web browser.
SOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/lw12-ticket-og/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase start
supabase functions serve lw12-ticket-og --no-verify-jwt --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Initializes a Supabase project using the CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npx supabase init
```

----------------------------------------

TITLE: Signing in with OTP using Swift
DESCRIPTION: Explains the steps to sign in through an OTP using Swift in Supabase. Requires the user email and a boolean to prevent auto user creation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_8

LANGUAGE: Swift
CODE:
```
try await supabase.auth.signInWithOTP(
  email: "valid.email@supabase.io",
  // set this to false if you do not want the user to be automatically signed up
  shouldCreateUser: false
)
```

----------------------------------------

TITLE: Implementing Stripe Webhook Handling in TypeScript with Supabase Edge Functions
DESCRIPTION: This code demonstrates how to set up an Edge Function that verifies and processes Stripe webhooks. It validates webhook signatures, parses event data, and handles different event types.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/stripe-webhooks.mdx#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { serve } from 'https://deno.land/std@0.131.0/http/server.ts'
import Stripe from 'https://esm.sh/stripe@11.1.0?target=deno'

const stripe = Stripe(Deno.env.get('STRIPE_API_KEY') ?? '', {
  httpClient: Stripe.createFetchHttpClient(),
  apiVersion: '2022-08-01',
})

// This is your Stripe CLI webhook secret for testing your endpoint locally.
const webhookSecret = Deno.env.get('STRIPE_WEBHOOK_SECRET') ?? ''

serve(async (req) => {
  const signature = req.headers.get('Stripe-Signature')

  if (!signature) {
    return new Response('No signature', { status: 400 })
  }

  const body = await req.text()

  let event
  try {
    event = await stripe.webhooks.constructEventAsync(
      body,
      signature,
      webhookSecret,
      undefined,
      Stripe.createSubtleCryptoProvider()
    )
  } catch (err) {
    console.error(`❌ Error message: ${err.message}`)
    return new Response(`Webhook Error: ${err.message}`, { status: 400 })
  }

  console.log(`✅ Success: ${event.id}`)

  // Return a response to acknowledge receipt of the event.
  return new Response(JSON.stringify({ received: true }), {
    headers: { 'Content-Type': 'application/json' },
  })
})
```

----------------------------------------

TITLE: Upserting Vectors into a Collection
DESCRIPTION: Adds or updates records in the collection. Each record consists of an identifier, a vector, and associated metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/vector_hello_world.ipynb#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
# add records to the collection
docs.upsert(
    records=[
        (
         "vec0",           # the vector's identifier
         [0.1, 0.2, 0.3],  # the vector. list or np.array
         {"year": 1973}    # associated  metadata
        ),
        (
         "vec1",
         [0.7, 0.8, 0.9],
         {"year": 2012}
        )
    ]
)
```

----------------------------------------

TITLE: Detecting Row Count Estimation Errors in PostgreSQL Sequential Scans
DESCRIPTION: Example showing a sequential scan where the query planner's estimated row count (100) significantly differs from the actual count (10,000). This discrepancy can lead to suboptimal execution plans.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
Seq Scan on users  (cost=0.00..50.00 rows=100 width=50) (actual time=0.010..25.000 rows=10000 loops=1)
```

----------------------------------------

TITLE: Initializing Supabase Client with PKCE Configuration - JavaScript
DESCRIPTION: This snippet demonstrates how to initialize the Supabase client for PKCE flow. It shows the configuration of authentication options including automatic session detection in the URL and specifying a custom storage approach.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/sessions/pkce-flow.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'

// ---cut---
const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key', {
  // ...
  auth: {
    // ...
    detectSessionInUrl: true,
    flowType: 'pkce',
    storage: {
      getItem: () => Promise.resolve('FETCHED_TOKEN'),
      setItem: () => {},
      removeItem: () => {},
    },
  },
  // ...
})
```

----------------------------------------

TITLE: Creating Token Exchange Endpoint in Express for Supabase Auth
DESCRIPTION: Implementation of an Express route to handle Supabase authentication token exchange for password reset flow. It verifies OTP tokens and redirects users to appropriate pages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_30

LANGUAGE: JavaScript
CODE:
```
// The client you created from the Server-Side Auth instructions
const { createClient } = require("./lib/supabase")
...
app.get("/auth/confirm", async function (req, res) {
  const token_hash = req.query.token_hash
  const type = req.query.type
  const next = req.query.next ?? "/"

  if (token_hash && type) {
    const supabase = createClient({ req, res })
    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })
    if (!error) {
      res.redirect(303, `/${next.slice(1)}`)
    }
  }

  // return the user to an error page with some instructions
  res.redirect(303, '/auth/auth-code-error')
})
```

----------------------------------------

TITLE: Batch Sending Queue Messages with Optional Delay
DESCRIPTION: Function to add multiple messages to a specified queue in a single batch operation with optional visibility delay. Takes queue name, array of message payloads (JSONB[]), and optional sleep seconds as parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/api.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
pgmq_public.send_batch(queue_name text, messages jsonb[], sleep_seconds integer)
```

----------------------------------------

TITLE: Running FTS Queries in Postgres
DESCRIPTION: JavaScript function to execute Full Text Search queries against a Postgres database. It uses websearch_to_tsquery with English language configuration and returns an array of matching document IDs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
// Querying search phrases
async function query({ phrase, pool }) {
  const results = await pool.query(sql`
select id, title
from movies
where fts_doc_en @@ websearch_to_tsquery('english', ${phrase}::text)
`)
  const ids = results.rows.map((r) => r.id)
  return ids
}
```

----------------------------------------

TITLE: Implementing Supabase Queue Operations in React TypeScript
DESCRIPTION: Example React component demonstrating how to send and receive messages using Supabase Queues. Shows implementation of enqueueing and dequeueing operations using the Supabase client library with TypeScript.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/quickstart.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'supabaseURL'
const supabaseKey = 'supabaseKey'

const supabase = createClient(supabaseUrl, supabaseKey)

const QueuesTest: React.FC = () => {
  //Add a Message
  const sendToQueue = async () => {
    const result = await supabase.schema('pgmq_public').rpc('send', {
      queue_name: 'foo',
      message: { hello: 'world' },
      sleep_seconds: 30,
    })
    console.log(result)
  }

  //Dequeue Message
  const popFromQueue = async () => {
    const result = await supabase.schema('pgmq_public').rpc('pop', { queue_name: 'foo' })
    console.log(result)
  }

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Queue Test Component</h2>
      <button
        onClick={sendToQueue}
        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 mr-4"
      >
        Add Message
      </button>
      <button
        onClick={popFromQueue}
        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
      >
        Pop Message
      </button>
    </div>
  )
}

export default QueuesTest
```

----------------------------------------

TITLE: Supabase Authentication with CAPTCHA Token
DESCRIPTION: Implementation of Supabase signUp function with CAPTCHA token integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-captcha.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
await supabase.auth.signUp({
  email,
  password,
  options: { captchaToken },
})
```

----------------------------------------

TITLE: Accessing Custom Claims in JavaScript Client
DESCRIPTION: JavaScript code to access custom claims from the JWT in a client-side application using the jwt-decode package.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
import { jwtDecode } from 'jwt-decode'

const { subscription: authListener } = supabase.auth.onAuthStateChange(async (event, session) => {
  if (session) {
    const jwt = jwtDecode(session.access_token)
    const userRole = jwt.user_role
  }
})
```

----------------------------------------

TITLE: Filtering Supabase Realtime with 'Contained in List' (in) Operator
DESCRIPTION: Examples of using the 'in' filter to listen for changes when a column's value equals any of the specified values in a list. This uses Postgres's '= ANY' operator and allows up to 100 values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_46

LANGUAGE: javascript
CODE:
```
const channel = supabase
  .channel('changes')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'colors',
      filter: 'name=in.(red, blue, yellow)',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

LANGUAGE: dart
CODE:
```
supabase
    .channel('changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.insert,
        schema: 'public',
        table: 'colors',
        filter: PostgresChangeFilter(
          type: PostgresChangeFilterType.lte,
          column: 'name',
          value: ['red', 'blue', 'yellow'],
        ),
        callback: (payload) => print(payload))
    .subscribe();
```

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("db-changes")

let changes = await myChannel.postgresChange(
  InsertAction.self,
  schema: "public",
  table: "products",
  filter: .in("name", values: ["red", "blue", "yellow"])
)

await myChannel.subscribe()

for await change in changes {
  print(change.record)
}
```

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = "public") {
    table = "products"
    filter = "name=in.(red, blue, yellow)"
}

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

LANGUAGE: python
CODE:
```
changes = supabase.channel('db-changes').on_postgres_changes(
  "UPDATE",
  schema="public",
  table="products",
  filter="name=in.(red, blue, yellow)",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Creating Token Exchange Endpoint in Astro
DESCRIPTION: This snippet for Astro creates a token exchange endpoint. It handles the request, verifies the OTP against Supabase, and redirects users based on verification success or failure.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { createServerClient, parseCookieHeader } from '@supabase/ssr'
import { type EmailOtpType } from '@supabase/supabase-js'
import { type APIRoute } from 'astro'

export const GET: APIRoute = async ({ request, cookies, redirect }) => {
  const requestUrl = new URL(request.url)
  const token_hash = requestUrl.searchParams.get('token_hash')
  const type = requestUrl.searchParams.get('type') as EmailOtpType | null
  const next = requestUrl.searchParams.get('next') || '/'

  if (token_hash && type) {
    const supabase = createServerClient(
      import.meta.env.PUBLIC_SUPABASE_URL,
      import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
      {
        cookies: {
          getAll() {
            return parseCookieHeader(request.headers.get('Cookie') ?? '')
          },
          setAll(cookiesToSet) {
            cookiesToSet.forEach(({ name, value, options }) => cookies.set(name, value, options))
          },
        },
      }
    )

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })

    if (!error) {
      return redirect(next)
    }
  }

  // return the user to an error page with some instructions
  return redirect('/auth/auth-code-error')
}
```

----------------------------------------

TITLE: Querying User Data with RLS Policy in JavaScript
DESCRIPTION: Example showing simplified user data query after implementing Row Level Security policy. The database policy handles the filtering automatically based on the authenticated user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-05-supabase-auth.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
let user = await supabase.from('users').select('user_id, name')
// Still returns { id: 'd0714948', name: 'Jane' }
```

----------------------------------------

TITLE: Implementing Row Level Security for MFA
DESCRIPTION: SQL code to enable row-level security and create a policy that only allows access to authenticated users with MFA (aal2 level).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
-- Enable RLS for private_posts table
alter table
  public.private_posts enable row level security;

-- Create a policy that only allows read if they user has signed in via MFA
create policy "Users can view private_posts if they have signed in via MFA" on public.private_posts for
select
  to authenticated using ((select auth.jwt() - >> 'aal') = 'aal2');
```

----------------------------------------

TITLE: Setting Table-Level Permissions
DESCRIPTION: Example of granting specific CRUD permissions on tables within the api schema to different user roles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/hardening-data-api.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
grant select on table api.<your_table> to anon;
grant select, insert, update, delete on table api.<your_table> to authenticated;
```

----------------------------------------

TITLE: Search Function for Text-to-Image Queries
DESCRIPTION: Python function to perform a semantic search from a text query by generating a text embedding and finding the most similar image in the vector collection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_9

LANGUAGE: python
CODE:
```
def search(query_term: Optional[str] = None):
    if query_term is None:
        query_term = sys.argv[1]

    # create vector store client
    vx = vecs.create_client(DB_CONNECTION)
    images = vx.get_or_create_collection(name="image_vectors", dimension=1024)

    # Encode text query
    text_emb = get_embedding_from_titan_multimodal(json.dumps(
        {
            "inputText": query_term,
            "embeddingConfig": {"outputEmbeddingLength": 1024},
        }
    ))

    # query the collection filtering metadata for "type" = "jpg"
    results = images.query(
        data=text_emb,                      # required
        limit=1,                            # number of records to return
        filters={"type": {"$eq": "jpg"}},   # metadata filters
    )
    result = results[0]
    print(result)
    plt.title(result)
    image = mpimg.imread('./images/' + result)
    plt.imshow(image)
    plt.show()
```

----------------------------------------

TITLE: Passwordless SMS Login Implementation in Supabase
DESCRIPTION: Example of implementing passwordless SMS login using supabase-js, demonstrating the OTP verification flow.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-28-supabase-auth-passwordless-sms-login.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Code reference for illustration - actual example not provided in text
```

----------------------------------------

TITLE: Implementing an is_admin() Function in SQL
DESCRIPTION: This function checks if the current user has an admin role. It's designed to be used in RLS policies and is implemented as a security definer function for better performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION is_admin()
  RETURNS boolean as
$$
begin
  return exists(select from rlstest_roles where auth.uid() = user_id and role = 'admin');
end;
$$ language plpgsql security definer;
```

----------------------------------------

TITLE: Rendering Social Login Providers using React and Supabase
DESCRIPTION: This code snippet demonstrates how to render a grid of social login provider options using React components and data from Supabase. It uses a NavData component to iterate through social login items and creates clickable IconPanel components for each provider.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
<div className="grid grid-cols-12 xs:gap-x-10 gap-y-10 not-prose py-8">
  <NavData data="socialLoginItems">
    {(data) =>
      data.map((item) => (
        <Link
          href={`${item.url}`}
          key={item.name}
          passHref
          className="col-span-12 xs:col-span-6 lg:col-span-4 xl:col-span-3"
        >
          <IconPanel
            title={item.name}
            span="col-span-6"
            icon={item.icon}
            isDarkMode={item.isDarkMode}
            hasLightIcon={item.hasLightIcon}
          >
            {item.description}
          </IconPanel>
        </Link>
      ))
    }
  </NavData>
</div>
```

----------------------------------------

TITLE: Creating a Function for Sorting Restaurants by Distance
DESCRIPTION: SQL function that returns restaurants sorted by distance from a given point. It uses the PostGIS <-> operator for nearest-neighbor sorting and returns geographic coordinates in human-readable format.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
create or replace function nearby_restaurants(lat float, long float)
returns table (id public.restaurants.id%TYPE, name public.restaurants.name%TYPE, lat float, long float, dist_meters float)
set search_path = ''
language sql
as $$
  select id, name, gis.st_y(location::gis.geometry) as lat, gis.st_x(location::gis.geometry) as long, gis.st_distance(location, gis.st_point(long, lat)::gis.geography) as dist_meters
  from public.restaurants
  order by location operator(gis.<->) gis.st_point(long, lat)::gis.geography;
$$;
```

----------------------------------------

TITLE: Creating Custom API Schema in Postgres
DESCRIPTION: Creates a new schema named 'api' and grants usage permissions to anon and authenticated roles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/hardening-data-api.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create schema if not exists api;
```

----------------------------------------

TITLE: Signing Out in Kotlin using Supabase
DESCRIPTION: This Kotlin snippet describes the process of signing out from an application using Supabase by invoking the signOut() function. It requires a configured Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_5

LANGUAGE: Kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}

```

----------------------------------------

TITLE: Implementing Lobby Management with Supabase Presence in Flutter
DESCRIPTION: Creates a lobby system using Supabase's presence feature to track online players and handle game initiation. Manages player waiting, game start broadcasts, and participant synchronization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_9

LANGUAGE: dart
CODE:
```
class _LobbyDialogState extends State<_LobbyDialog> {
  List<String> _userids = [];
  bool _loading = false;

  /// Unique identifier for each players to identify eachother in lobby
  final myUserId = const Uuid().v4();

  late final RealtimeChannel _lobbyChannel;

  @override
  void initState() {
    super.initState();

    _lobbyChannel = supabase.channel(
      'lobby',
      opts: const RealtimeChannelConfig(self: true),
    );
    _lobbyChannel
        .onPresenceSync((payload, [ref]) {
          // Update the lobby count
          final presenceStates = _lobbyChannel.presenceState();

          setState(() {
            _userids = presenceStates
                .map((presenceState) => (presenceState.presences.first)
                    .payload['user_id'] as String)
                .toList();
          });
        })
        .onBroadcast(
            event: 'game_start',
            callback: (payload, [_]) {
              // Start the game if someone has started a game with you
              final participantIds = List<String>.from(payload['participants']);
              if (participantIds.contains(myUserId)) {
                final gameId = payload['game_id'] as String;
                widget.onGameStarted(gameId);
                Navigator.of(context).pop();
              }
            })
        .subscribe(
          (status, _) async {
            if (status == RealtimeSubscribeStatus.subscribed) {
              await _lobbyChannel.track({'user_id': myUserId});
            }
          },
        );
  }

  @override
  void dispose() {
    supabase.removeChannel(_lobbyChannel);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Lobby'),
      content: _loading
          ? const SizedBox(
              height: 100,
              child: Center(child: CircularProgressIndicator()),
            )
          : Text('${_userids.length} users waiting'),
      actions: [
        TextButton(
          onPressed: _userids.length < 2
              ? null
              : () async {
                  setState(() {
                    _loading = true;
                  });

                  final opponentId =
                      _userids.firstWhere((userId) => userId != myUserId);
                  final gameId = const Uuid().v4();
                  await _lobbyChannel.sendBroadcastMessage(
                    event: 'game_start',
                    payload: {
                      'participants': [
                        opponentId,
                        myUserId,
                      ],
                      'game_id': gameId,
                    },
                  );
                },
          child: const Text('start'),
        ),
      ],
    );
  }
}
```

----------------------------------------

TITLE: Full Text Search in SQL with PostgreSQL
DESCRIPTION: SQL query using PostgreSQL's full text search capabilities to find books where the title contains 'Harry'. Uses to_tsvector() and to_tsquery() with the @@ match operator.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
select *
from books
where to_tsvector(title) @@ to_tsquery('Harry');
```

----------------------------------------

TITLE: Application-Level Testing with TypeScript
DESCRIPTION: End-to-end testing implementation using TypeScript and Supabase client library to test RLS policies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/overview.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { beforeAll, describe, expect, it } from 'vitest'
import crypto from 'crypto'

describe('Todos RLS', () => {
  // Generate unique IDs for this test suite to avoid conflicts with other tests
  const USER_1_ID = crypto.randomUUID()
  const USER_2_ID = crypto.randomUUID()

  const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!)

  beforeAll(async () => {
    // Setup test data specific to this test suite
    const adminSupabase = createClient(process.env.SUPABASE_URL!, process.env.SERVICE_ROLE_KEY!)

    // Create test users with unique IDs
    await adminSupabase.auth.admin.createUser({
      id: USER_1_ID,
      email: `user1-${USER_1_ID}@test.com`,
      password: 'password123',
      // We want the user to be usable right away without email confirmation
      email_confirm: true,
    })
    await adminSupabase.auth.admin.createUser({
      id: USER_2_ID,
      email: `user2-${USER_2_ID}@test.com`,
      password: 'password123',
      email_confirm: true,
    })

    // Create initial todos
    await adminSupabase.from('todos').insert([
      { task: 'User 1 Task 1', user_id: USER_1_ID },
      { task: 'User 1 Task 2', user_id: USER_1_ID },
      { task: 'User 2 Task 1', user_id: USER_2_ID },
    ])
  })

  it('should allow User 1 to only see their own todos', async () => {
    // Sign in as User 1
    await supabase.auth.signInWithPassword({
      email: `user1-${USER_1_ID}@test.com`,
      password: 'password123',
    })

    const { data: todos } = await supabase.from('todos').select('*')

    expect(todos).toHaveLength(2)
    todos?.forEach((todo) => {
      expect(todo.user_id).toBe(USER_1_ID)
    })
  })

  it('should allow User 1 to create their own todo', async () => {
    await supabase.auth.signInWithPassword({
      email: `user1-${USER_1_ID}@test.com`,
      password: 'password123',
    })

    const { error } = await supabase.from('todos').insert({ task: 'New Task', user_id: USER_1_ID })

    expect(error).toBeNull()
  })

  it('should allow User 2 to only see their own todos', async () => {
    // Sign in as User 2
    await supabase.auth.signInWithPassword({
      email: `user2-${USER_2_ID}@test.com`,
      password: 'password123',
    })

    const { data: todos } = await supabase.from('todos').select('*')
    expect(todos).toHaveLength(1)
    todos?.forEach((todo) => {
      expect(todo.user_id).toBe(USER_2_ID)
    })
  })

  it('should prevent User 2 from modifying User 1 todos', async () => {
    await supabase.auth.signInWithPassword({
      email: `user2-${USER_2_ID}@test.com`,
      password: 'password123',
    })

    // Attempt to update the todos we shouldn't have access to
    // result will be a no-op
    await supabase.from('todos').update({ task: 'Hacked!' }).eq('user_id', USER_1_ID)

    // Log back in as User 1 to verify their todos weren't changed
    await supabase.auth.signInWithPassword({
      email: `user1-${USER_1_ID}@test.com`,
      password: 'password123',
    })

    // Fetch User 1's todos
    const { data: todos } = await supabase.from('todos').select('*')

    // Verify that none of the todos were changed to "Hacked!"
    expect(todos).toBeDefined()
    todos?.forEach((todo) => {
      expect(todo.task).not.toBe('Hacked!')
    })
  })
})
```

----------------------------------------

TITLE: Uploading Files to Supabase Storage in Swift
DESCRIPTION: This snippet illustrates how to upload a file to Supabase Storage using the standard upload method in Swift. It creates a Supabase client and performs the upload operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_2

LANGUAGE: swift
CODE:
```
import Supabase

// Create Supabase client
let supabase = SupabaseClient(supabaseURL: URL(string: "your_project_url")!, supabaseKey: "your_supabase_api_key")

try await supabase.storage.from("bucket_name").upload(path: "file_path", file: file)
```

----------------------------------------

TITLE: Astro OAuth Callback Handler
DESCRIPTION: Implementation of OAuth callback handling in Astro, including cookie management and code exchange.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { createServerClient, parseCookieHeader } from '@supabase/ssr'
import { type APIRoute } from 'astro'

export const GET: APIRoute = async ({ request, cookies, redirect }) => {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')
  const next = requestUrl.searchParams.get('next') || '/'

  if (code) {
    const supabase = createServerClient(
      import.meta.env.PUBLIC_SUPABASE_URL,
      import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
      {
        cookies: {
          getAll() {
            return parseCookieHeader(Astro.request.headers.get('Cookie') ?? '')
          },
          setAll(cookiesToSet) {
            cookiesToSet.forEach(({ name, value, options }) =>
              Astro.cookies.set(name, value, options)
            )
          },
        },
      }
    )

    const { error } = await supabase.auth.exchangeCodeForSession(code)

    if (!error) {
      return redirect(next)
    }
  }

  // return the user to an error page with instructions
  return redirect('/auth/auth-code-error')
}
```

----------------------------------------

TITLE: Setting OpenAI API Key
DESCRIPTION: Sets up the OpenAI API key as an environment variable for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/llamaindex/llamaindex.ipynb#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import os
os.environ['OPENAI_API_KEY'] = "[your_openai_api_key]"
```

----------------------------------------

TITLE: Defining TypeScript Types for Nested Queries in Supabase
DESCRIPTION: Example of how to define TypeScript types for nested join queries in Supabase, making response data strongly typed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'

const sectionsWithInstrumentsQuery = supabase.from('orchestral_sections').select(`
  id,
  name,
  instruments (
    id,
    name
  )
`)
type SectionsWithInstruments = QueryData<typeof sectionsWithInstrumentsQuery>

const { data, error } = await sectionsWithInstrumentsQuery
if (error) throw error
const sectionsWithInstruments: SectionsWithInstruments = data
```

----------------------------------------

TITLE: Using Adaptive Retrieval Function in SQL
DESCRIPTION: This SQL snippet demonstrates how to use the match_documents_adaptive function to perform a similarity search with a query embedding.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
select
  *
from match_documents_adaptive(query_embedding, 10);
```

----------------------------------------

TITLE: Initializing Supabase Realtime Channel with JavaScript
DESCRIPTION: This snippet demonstrates how to initialize a Supabase Realtime client and create a channel with a specific topic.  The channel object can then be used to send and receive messages. The code imports the `createClient` function from `@supabase/supabase-js` to establish a connection with your Supabase project using the project URL and anon key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/concepts.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')

const roomOne = supabase.channel('room-one') // set your topic here
```

----------------------------------------

TITLE: Creating an After Delete Trigger in PostgreSQL
DESCRIPTION: This example illustrates the creation of a trigger that executes after a delete operation on the 'customers' table. It shows the syntax for an 'AFTER' trigger.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/triggers.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create trigger after_delete_trigger
after delete on customers
for each row
execute function after_delete_function();
```

----------------------------------------

TITLE: Signing In with Discord - Kotlin
DESCRIPTION: This Kotlin snippet demonstrates how to sign in users using Discord OAuth through the Supabase client. The `signInWith()` method is called with `Discord` as the provider to initiate the login process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-discord.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithDiscord() {\n\tsupabase.auth.signInWith(Discord)\n}
```

----------------------------------------

TITLE: Sign In with Slack using Supabase Auth
DESCRIPTION: This JavaScript snippet demonstrates how to sign in a user with Slack OAuth using the Supabase client library. It initializes the Supabase client and calls the signInWithOAuth method with the `slack_oidc` provider. The function returns a promise that resolves with the user data or rejects with an error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-slack.mdx#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signInWithSlack() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'slack_oidc',
  })
}
```

----------------------------------------

TITLE: Listening to UPDATE Events in Swift with Supabase Realtime
DESCRIPTION: Uses Swift to create a channel that listens for UPDATE events in the public schema of a Supabase database. The code specifies UpdateAction.self as the event type and processes changes using an async iterator.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_17

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("schema-db-changes")

let changes = await myChannel.postgresChange(UpdateAction.self, schema: "public")

await myChannel.subscribe()

for await change in changes {
  print(change.oldRecord, change.record)
}
```

----------------------------------------

TITLE: Enabling Required PostgreSQL Extensions
DESCRIPTION: SQL commands to enable necessary PostgreSQL extensions for vector operations, queueing, HTTP requests, scheduling, and data management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create extension if not exists vector with schema extensions;
create extension if not exists pgmq;
create extension if not exists pg_net with schema extensions;
create extension if not exists pg_cron;
create extension if not exists hstore with schema extensions;
```

----------------------------------------

TITLE: Initialize and Start Supabase Project
DESCRIPTION: Commands to initialize a new Supabase project and start the local development stack.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
supabase init
supabase start
```

----------------------------------------

TITLE: Generating Text Embeddings
DESCRIPTION: Processes the dataset in batches to create embeddings for each review, preparing them for insertion into the database.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
from typing import List, Dict, Tuple
from flupy import flu
import numpy as np
from tqdm import tqdm


batch_size = 50

records: List[Tuple[str, np.ndarray, Dict]] = []

# Iterate over the dataset in chunks
for chunk_ix, chunk in tqdm(flu(data['text']).chunk(batch_size).enumerate()):

    # Create embeddings for current chunk
    embedding_chunk = model.encode(chunk)

    # Enumerate the embeddings and create a record to insert into the database
    for row_ix, (text, embedding) in enumerate(zip(chunk, embedding_chunk)):
        record_id = chunk_ix * batch_size + row_ix
        records.append((f"{record_id}", embedding, {"text": text}))
```

----------------------------------------

TITLE: Native Android Google Sign-In Implementation
DESCRIPTION: Complete implementation of Google sign-in using Credential Manager in Android with Compose UI, including nonce generation and error handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_14

LANGUAGE: kotlin
CODE:
```
@Composable
fun GoogleSignInButton() {
    val coroutineScope = rememberCoroutineScope()
    val context = LocalContext.current

    val onClick: () -> Unit = {
        val credentialManager = CredentialManager.create(context)

        // Generate a nonce and hash it with sha-256
        // Providing a nonce is optional but recommended
        val rawNonce = UUID.randomUUID().toString() // Generate a random String. UUID should be sufficient, but can also be any other random string.
        val bytes = rawNonce.toString().toByteArray()
        val md = MessageDigest.getInstance("SHA-256")
        val digest = md.digest(bytes)
        val hashedNonce = digest.fold("") { str, it -> str + "%02x".format(it) } // Hashed nonce to be passed to Google sign-in


        val googleIdOption: GetGoogleIdOption = GetGoogleIdOption.Builder()
            .setFilterByAuthorizedAccounts(false)
            .setServerClientId("WEB_GOOGLE_CLIENT_ID")
            .setNonce(hashedNonce) // Provide the nonce if you have one
            .build()

        val request: GetCredentialRequest = GetCredentialRequest.Builder()
            .addCredentialOption(googleIdOption)
            .build()

        coroutineScope.launch {
            try {
                val result = credentialManager.getCredential(
                    request = request,
                    context = context,
                )

                val googleIdTokenCredential = GoogleIdTokenCredential
                    .createFrom(result.credential.data)

                val googleIdToken = googleIdTokenCredential.idToken

                supabase.auth.signInWith(IDToken) {
                    idToken = googleIdToken
                    provider = Google
                    nonce = rawNonce
                }

                // Handle successful sign-in
            } catch (e: GetCredentialException) {
                // Handle GetCredentialException thrown by `credentialManager.getCredential()`
            } catch (e: GoogleIdTokenParsingException) {
                // Handle GoogleIdTokenParsingException thrown by `GoogleIdTokenCredential.createFrom()`
            } catch (e: RestException) {
                // Handle RestException thrown by Supabase
            } catch (e: Exception) {
                // Handle unknown exceptions
            }
        }
    }

    Button(
        onClick = onClick,
    ) {
        Text("Sign in with Google")
    }
}
```

----------------------------------------

TITLE: Start local database and apply migrations (Bash)
DESCRIPTION: Start the local Supabase development environment and then apply all pending migration files from the `supabase/migrations` directory to update the local database schema according to the declared state.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
supabase start && supabase migration up
```

----------------------------------------

TITLE: Creating an Avatar Upload Component with Supabase Storage
DESCRIPTION: A component that allows users to upload and display profile photos using Supabase Storage. It handles file selection, uploading to the 'avatars' bucket, and displaying the current avatar image.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_7

LANGUAGE: html
CODE:
```
<script lang="ts">
  import { createEventDispatcher } from 'svelte'
  import { supabase } from '../supabaseClient'

  export let size: number
  export let url: string | null = null

  let avatarUrl: string | null = null
  let uploading = false
  let files: FileList

  const dispatch = createEventDispatcher()

  const downloadImage = async (path: string) => {
    try {
      const { data, error } = await supabase.storage.from('avatars').download(path)

      if (error) {
        throw error
      }

      const url = URL.createObjectURL(data)
      avatarUrl = url
    } catch (error) {
      if (error instanceof Error) {
        console.log('Error downloading image: ', error.message)
      }
    }
  }

  const uploadAvatar = async () => {
    try {
      uploading = true

      if (!files || files.length === 0) {
        throw new Error('You must select an image to upload.')
      }

      const file = files[0]
      const fileExt = file.name.split('.').pop()
      const filePath = `${Math.random()}.${fileExt}`

      const { error } = await supabase.storage.from('avatars').upload(filePath, file)

      if (error) {
        throw error
      }

      url = filePath
      dispatch('upload')
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      uploading = false
    }
  }

  $: if (url) downloadImage(url)
</script>

<div style="width: {size}px" aria-live="polite">
  {#if avatarUrl} <img src={avatarUrl} alt={avatarUrl ? 'Avatar' : 'No image'} class="avatar image"
  style="height: {size}px, width: {size}px" /> {:else}
  <div class="avatar no-image" style="height: {size}px, width: {size}px" />
  {/if}
  <div style="width: {size}px">
    <label class="button primary block" for="single">
      {uploading ? 'Uploading ...' : 'Upload avatar'}
    </label>
    <span style="display:none">
      <input
        type="file"
        id="single"
        accept="image/*"
        bind:files
        on:change={uploadAvatar}
        disabled={uploading}
      />
    </span>
  </div>
</div>
```

----------------------------------------

TITLE: Updating Table Statistics in PostgreSQL
DESCRIPTION: Using ANALYZE command to update table statistics for better query planning.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
analyze customers;
```

----------------------------------------

TITLE: Configuring PostgREST with Environment Variables in Docker Compose
DESCRIPTION: Example of how to configure the PostgREST service in docker-compose.yml using environment variables with secrets loaded from an external .env file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_7

LANGUAGE: yml
CODE:
```
services:
  rest:
    image: postgrest/postgrest
    environment:
      PGRST_JWT_SECRET: ${JWT_SECRET}
```

----------------------------------------

TITLE: Deno Webhook: Twilio SMS Messaging with Error Handling
DESCRIPTION: JavaScript implementation for sending SMS messages using Twilio, with comprehensive error handling and base64 authentication
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
const sendTextMessage = async (
  messageBody: string,
  accountSid: string | undefined,
  authToken: string | undefined,
  fromNumber: string,
  toNumber: string
): Promise<any> => {
  if (!accountSid || !authToken) {
    console.log('Your Twilio account credentials are missing. Please add them.')
    return
  }
  const url: string = `https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`

  const encodedCredentials: string = base64.fromUint8Array(
    new TextEncoder().encode(`${accountSid}:${authToken}`)
  )

  const body: URLSearchParams = new URLSearchParams({
    To: `+${toNumber}`,
    From: fromNumber,
    Body: messageBody,
  })

  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      Authorization: `Basic ${encodedCredentials}`,
    },
    body,
  })

  return response.json()
}
```

----------------------------------------

TITLE: Sign In with Facebook using Supabase
DESCRIPTION: This JavaScript snippet demonstrates how to sign in a user with Facebook using Supabase's `signInWithOAuth` method. It imports the `createClient` function from the `@supabase/supabase-js` library, initializes a Supabase client, and then calls the `signInWithOAuth` method with the `facebook` provider. This function returns a promise that resolves with the authentication data or rejects with an error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

// ---cut---
async function signInWithFacebook() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'facebook',
  })
}
```

----------------------------------------

TITLE: Creating User Role with Login in PostgreSQL
DESCRIPTION: Creates a new role with login capabilities and password authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/roles.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create role "role_name" with login password 'extremely_secure_password';
```

----------------------------------------

TITLE: Querying Nested JSON Data using Supabase JavaScript Client
DESCRIPTION: This JavaScript snippet uses the Supabase client library to perform a query similar to the SQL example. It fetches `title` and extracts nested values from the `metadata` JSON column in the `books` table using the appropriate Postgres JSON operators within the select string.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const { data, error } = await supabase.from('books').select(`
    title,
    description:  metadata->>description,
    price:        metadata->price,
    low_age:      metadata->ages->0,
    high_age:     metadata->ages->1
  `)
```

----------------------------------------

TITLE: Creating Supabase Client for getServerSideProps in Next.js
DESCRIPTION: Utility function to create a Supabase client for use in getServerSideProps, handling server-side cookie management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
import { type GetServerSidePropsContext } from 'next'
import { createServerClient, serializeCookieHeader } from '@supabase/ssr'

export function createClient({ req, res }: GetServerSidePropsContext) {
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return Object.keys(req.cookies).map((name) => ({ name, value: req.cookies[name] || '' }))
        },
        setAll(cookiesToSet) {
          res.setHeader(
            'Set-Cookie',
            cookiesToSet.map(({ name, value, options }) =>
              serializeCookieHeader(name, value, options)
            )
          )
        },
      },
    }
  )

  return supabase
}
```

----------------------------------------

TITLE: Filtering Supabase Realtime with Greater Than or Equal To (gte) Operator
DESCRIPTION: Examples of using the 'greater than or equal to' filter to listen for changes when a column's value is greater than or equal to a specified threshold. This uses Postgres's '>=' operator.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_45

LANGUAGE: javascript
CODE:
```
const channel = supabase
  .channel('changes')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'products',
      filter: 'quantity=gte.10',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

LANGUAGE: dart
CODE:
```
supabase
    .channel('changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.insert,
        schema: 'public',
        table: 'products',
        filter: PostgresChangeFilter(
          type: PostgresChangeFilterType.gte,
          column: 'quantity',
          value: 10,
        ),
        callback: (payload) => print(payload))
    .subscribe();
```

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("db-changes")

let changes = await myChannel.postgresChange(
  InsertAction.self,
  schema: "public",
  table: "products",
  filter: .gte("quantity", value: 10)
)

await myChannel.subscribe()

for await change in changes {
  print(change.record)
}
```

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = "public") {
    table = "products"
    filter = "quantity=gte.10"
}

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

LANGUAGE: python
CODE:
```
changes = supabase.channel('db-changes').on_postgres_changes(
  "UPDATE",
  schema="public",
  table="products",
  filter="quantity=gte.10",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Implementing Email Authentication Widget
DESCRIPTION: Implementation of email and password authentication using SupaEmailAuth widget with custom metadata fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
SupaEmailAuth(
  redirectTo: kIsWeb ? null : 'io.mydomain.myapp://callback',
  onSignInComplete: (response) {},
  onSignUpComplete: (response) {},
  metadataFields: [
    MetaDataField(
    prefixIcon: const Icon(Icons.person),
    label: 'Username',
    key: 'username',
    validator: (val) {
            if (val == null || val.isEmpty) {
            return 'Please enter something';
            }
            return null;
          },
        ),
    ],
)
```

----------------------------------------

TITLE: Accessing Storage API with Supabase Storage Client
DESCRIPTION: This JavaScript snippet demonstrates using the Supabase Storage Client to list files in the 'teams' bucket. It requires a valid JWT token with appropriate permissions and the '@supabase/storage-js' library to interact with the Storage API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/custom-roles.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { StorageClient } = require('@supabase/storage-js')

const PROJECT_URL = 'https://your-project-id.supabase.co/storage/v1'

const storage = new StorageClient(PROJECT_URL, {
  authorization: `Bearer ${token}`,
})

await storage.from('teams').list()
```

----------------------------------------

TITLE: Form Handling and User Authentication Logic in Next.js
DESCRIPTION: This snippet provides a user interface for login and signup forms, leveraging functions that manage authentication through Supabase. It requires './actions' for corresponding login and signup logic. Inputs include user email and password, with form submission triggering navigation through login or signup actions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { login, signup } from './actions'

export default function LoginPage() {
  return (
    <form>
      <label htmlFor="email">Email:</label>
      <input id="email" name="email" type="email" required />
      <label htmlFor="password">Password:</label>
      <input id="password" name="password" type="password" required />
      <button formAction={login}>Log in</button>
      <button formAction={signup}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Installing Supabase SSR Package
DESCRIPTION: Commands to uninstall the deprecated auth-helpers packages and install the new SSR package along with the required Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm uninstall @supabase/auth-helpers-nextjs @supabase/supabase-js
npm install @supabase/ssr @supabase/supabase-js
```

----------------------------------------

TITLE: Protecting API Routes - TypeScript
DESCRIPTION: This TypeScript snippet shows how to protect an API route by validating the user's session. If the session is invalid, it responds with a 401 Unauthorized error. Otherwise, it retrieves data from a protected resource using Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
// src/routes/api/protected-route/+server.ts
import { json, error } from '@sveltejs/kit'

export const GET = async ({ locals: { supabase, safeGetSession } }) => {
  const { session } = await safeGetSession()
  if (!session) {
    // the user is not signed in
    throw error(401, { message: 'Unauthorized' })
  }
  const { data } = await supabase.from('test').select('*')

  return json({ data })
}
```

----------------------------------------

TITLE: Creating Indexes for Efficient Querying in PostgreSQL
DESCRIPTION: Sets up BRIN and BTREE indexes on the audit table to optimize query performance for time range and table filtering operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- index ts for time range filtering
create index record_version_ts
  on audit.record_version
  using brin(ts);

-- index table_oid for table filtering
create index record_version_table_oid
  on audit.record_version
  using btree(table_oid);
```

----------------------------------------

TITLE: Image Search Implementation
DESCRIPTION: Python function to perform image search using text queries against stored embeddings
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
def search():
    # create vector store client
    vx = vecs.create_client(DB_CONNECTION)
    images = vx.get_or_create_collection(name="image_vectors", dimension=512)

    # Load CLIP model
    model = SentenceTransformer('clip-ViT-B-32')
    # Encode text query
    query_string = "a bike in front of a red brick wall"
    text_emb = model.encode(query_string)

    # query the collection filtering metadata for "type" = "jpg"
    results = images.query(
        data=text_emb,                      # required
        limit=1,                            # number of records to return
        filters={"type": {"$eq": "jpg"}},   # metadata filters
    )
    result = results[0]
    print(result)
    plt.title(result)
    image = mpimg.imread('./images/' + result)
    plt.imshow(image)
    plt.show()
```

----------------------------------------

TITLE: Installing Supabase - General Setup with Git
DESCRIPTION: This snippet demonstrates the steps to clone the Supabase repository, set up a project directory, copy necessary Docker files, and start the Supabase services. It assumes Docker is already installed and configured.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
# Get the code
 git clone --depth 1 https://github.com/supabase/supabase

 # Make your new supabase project directory
 mkdir supabase-project

 # Tree should look like this
 # .
 # ├── supabase
 # └── supabase-project

 # Copy the compose files over to your project
 cp -rf supabase/docker/* supabase-project

 # Copy the fake env vars
 cp supabase/docker/.env.example supabase-project/.env

 # Switch to your project directory
 cd supabase-project

 # Pull the latest images
 docker compose pull

 # Start the services (in detached mode)
 docker compose up -d
```

----------------------------------------

TITLE: Signing In with Twitter OAuth - Kotlin
DESCRIPTION: This Kotlin code snippet shows how to authenticate using Twitter OAuth with Supabase. It calls the signInWith(Provider) function on the auth object, passing Twitter as the provider. This initiates the OAuth flow for Twitter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitter.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithTwitter() {
	supabase.auth.signInWith(Twitter)
}
```

----------------------------------------

TITLE: Rendering Realtime Cursors with React
DESCRIPTION: This code snippet demonstrates how to use the `<RealtimeCursors />` component in a React application to render real-time cursors from other users in a specified room. It imports the component and passes the `roomName` and `username` props to configure the cursor sharing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/realtime-cursor.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { RealtimeCursors } from '@/components/realtime-cursors'

export default function Page() {
  return (
    <div className="w-full min-h-screen">
      <RealtimeCursors roomName="macrodata_refinement_office" username="Mark Scout" />
    </div>
  )
}
```

----------------------------------------

TITLE: Production Supabase Auth Redirect URLs (dotenv)
DESCRIPTION: Shows the environment variables required to configure the authentication redirects for the deployed production application. These variables should reflect the live URL of the deployed application (e.g., on Vercel).
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#_snippet_5

LANGUAGE: dotenv
CODE:
```
SUPABASE_AUTH_SITE_URL=https://<your-app-url>.vercel.app/
SUPABASE_AUTH_ADDITIONAL_REDIRECT_URLS=https://<your-app-url>.vercel.app/**
```

----------------------------------------

TITLE: Creating Function with Custom Timeout
DESCRIPTION: Creates a Postgres function with a custom timeout setting of 4 seconds. Includes a simulated long-running process using pg_sleep.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create or replace function myfunc()
returns void as $$
 select pg_sleep(3); -- simulating some long-running process
$$
language sql
set statement_timeout TO '4s'; -- set custom timeout
```

----------------------------------------

TITLE: Creating Database Schema for Vector Search
DESCRIPTION: SQL queries to create two tables: 'nods_page' for storing page metadata and 'nods_page_section' for storing embeddings and content sections.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Stores the checksum of our pages.
-- This ensures that we only regenerate embeddings
-- when the page content has changed.
create table "public"."nods_page" (
  id bigserial primary key,
  parent_page_id bigint references public.nods_page,
  path text not null unique,
  checksum text,
  meta jsonb,
  type text,
  source text
);
alter table "public"."nods_page"
  enable row level security;

-- Stores the actual embeddings with some metadata
create table "public"."nods_page_section" (
  id bigserial primary key,
  page_id bigint not null references public.nods_page on delete cascade,
  content text,
  token_count int,
  embedding vector(1536),
  slug text,
  heading text
);
alter table "public"."nods_page_section"
  enable row level security;
```

----------------------------------------

TITLE: Creating and Populating Table
DESCRIPTION: SQL commands to create a table and insert data after receiving proper privileges.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
# as junior_dev
postgres=> create table public.apps(id serial primary key, name text);
CREATE TABLE
postgres=> insert into public.apps(name) values ('next app');
INSERT 0 1
postgres=> select * from public.apps;
┌────┬──────────┐
│ id │   name   │
├────┼──────────┤
│  1 │ next app │
└────┴──────────┘
(1 row)
```

----------------------------------------

TITLE: Returning Data from Delete Operation in SQL
DESCRIPTION: Example of how to return deleted rows in Supabase.js v2 by adding a .select() call at the end of the delete operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
const { data, error } = await supabase
    .from('my_table')
    .delete()
    .eq('id', 1)
    .select()
```

----------------------------------------

TITLE: Implementing Hello World Edge Function in TypeScript
DESCRIPTION: Defines an Edge Function that accepts a name in the request and responds with a greeting. It uses Deno.serve for handling HTTP requests.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-quickstart.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
Deno.serve(async (req) => {
  const { name } = await req.json()
  const data = {
    message: `Hello ${name}!`,
  }

  return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })
})
```

----------------------------------------

TITLE: Obtaining the Provider Refresh Token (JavaScript)
DESCRIPTION: In this JavaScript snippet, the `signInWithOAuth` method is called with 'azure' as the provider and requests the offline access scope to obtain the provider refresh token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

// ---cut---
async function signInWithAzure() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'azure',
    options: {
      scopes: 'offline_access',
    },
  })
}
```

----------------------------------------

TITLE: Deleting Objects in Supabase with JavaScript
DESCRIPTION: This JavaScript snippet shows how to delete objects using the Supabase client library. The 'remove' method from the storage API is used, requiring the Supabase project URL and API key as prerequisites. It deletes multiple objects specified by their paths.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/delete-objects.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
await supabase.storage.from('bucket').remove(['object-path-2', 'folder/avatar2.png'])
```

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Command to initialize a Supabase project in the current directory.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
supabase init
```

----------------------------------------

TITLE: Starting Supabase and React app
DESCRIPTION: Commands to start the Supabase services locally and run the React application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
supabase start  # Start Supabase
npm start       # Start the React app
```

----------------------------------------

TITLE: Initiating Apple Sign-In with OAuth (Non-Native) - Supabase Flutter
DESCRIPTION: Initiates the Apple Sign-In flow for non-native platforms using the Supabase client's `signInWithOAuth` method. It specifies `OAuthProvider.apple` and includes optional parameters for `redirectTo` (for deep linking on mobile) and `authScreenLaunchMode` to control how the authentication screen is launched.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#_snippet_6

LANGUAGE: Dart
CODE:
```
await supabase.auth.signInWithOAuth(
  OAuthProvider.apple,
  redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
  authScreenLaunchMode:
      kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
);
```

----------------------------------------

TITLE: Defining Instrument Data Model in Swift
DESCRIPTION: Creates a decodable struct representing the instrument data model with id and name properties. This model is used to deserialize data from the Supabase database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ios-swiftui.mdx#2025-04-21_snippet_1

LANGUAGE: swift
CODE:
```
struct Instrument: Decodable, Identifiable {
  let id: Int
  let name: String
}
```

----------------------------------------

TITLE: Configuring Vue Router for Supabase Authentication in Ionic
DESCRIPTION: Sets up route configuration for the application with login and account pages. Defines routes for the authentication flow and creates a router instance with web history.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { createRouter, createWebHistory } from '@ionic/vue-router'
import { RouteRecordRaw } from 'vue-router'
import LoginPage from '../views/Login.vue'
import AccountPage from '../views/Account.vue'
const routes: Array<RouteRecordRaw> = [
  {
    path: '/',
    name: 'Login',
    component: LoginPage,
  },
  {
    path: '/account',
    name: 'Account',
    component: AccountPage,
  },
]

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes,
})

export default router
```

----------------------------------------

TITLE: Next.js Middleware for Supabase Auth
DESCRIPTION: Implementation of Next.js middleware function for handling Supabase Auth token refreshing and authentication state, including path protection and proper request/response handling.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
    let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  // Do not run code between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  // IMPORTANT: DO NOT REMOVE auth.getUser()

  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (
    !user &&
    !request.nextUrl.pathname.startsWith('/login') &&
    !request.nextUrl.pathname.startsWith('/auth')
  ) {
    // no user, potentially respond by redirecting the user to the login page
    const url = request.nextUrl.clone()
    url.pathname = '/login'
    return NextResponse.redirect(url)
  }

  // IMPORTANT: You *must* return the supabaseResponse object as it is.
  // If you're creating a new response object with NextResponse.next() make sure to:
  // 1. Pass the request in it, like so:
  //    const myNewResponse = NextResponse.next({ request })
  // 2. Copy over the cookies, like so:
  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
  // 3. Change the myNewResponse object to fit your needs, but avoid changing
  //    the cookies!
  // 4. Finally:
  //    return myNewResponse
  // If this is not done, you may be causing the browser and server to go out
  // of sync and terminate the user's session prematurely!

  return supabaseResponse
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
```

----------------------------------------

TITLE: Using Node Built-in APIs in Supabase Edge Function
DESCRIPTION: This example showcases how to use Node.js built-in APIs within a Supabase Edge Function. It demonstrates importing and using the crypto, http, and process modules to generate random strings and create a simple HTTP server.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/edge-functions.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { randomBytes } from "node:crypto";
import { createServer } from "node:http";
import process from "node:process";

const generateRandomString = (length) => {
    const buffer = randomBytes(length);
    return buffer.toString('hex');
};

const randomString = generateRandomString(10);
console.log(randomString);

const server = createServer((req, res) => {
    const message = `Hello`;
    res.end(message);
});

server.listen(9999);
```

----------------------------------------

TITLE: Seed Employees Table (SQL)
DESCRIPTION: This SQL code inserts seed data into the `employees` table, adding three employee names.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_5

LANGUAGE: sql
CODE:
```
insert into public.employees
  (name)
values
  ('Erlich Bachman'),
  ('Richard Hendricks'),
  ('Monica Hall');
```

----------------------------------------

TITLE: Deploying Supabase Streams Function in Bash
DESCRIPTION: Command to deploy the 'streams' Supabase Edge Function to production without JWT verification. This makes the function available on your Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/streams/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase functions deploy --no-verify-jwt streams
```

----------------------------------------

TITLE: Creating a Custom Role for Prisma in PostgreSQL
DESCRIPTION: SQL commands to create a new user role for Prisma with specific permissions, enhancing security and observability.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create user "prisma" with password 'secret_password' bypassrls createdb;
```

----------------------------------------

TITLE: Updating get current session in TypeScript
DESCRIPTION: Example of how to update the method to get the current session in supabase-js v2. The new version uses an async getSession method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
const {
  data: { session },
} = await supabase.auth.getSession()
```

----------------------------------------

TITLE: Connecting to Postgres with verify-full SSL mode
DESCRIPTION: Example of connecting to a Supabase Postgres database using psql with verify-full SSL mode for maximum security. This verifies both the connection encryption and server certificate.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ssl-enforcement.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
psql "postgresql://aws-0-eu-central-1.pooler.supabase.com:6543/postgres?sslmode=verify-full" -U postgres.<user>
```

----------------------------------------

TITLE: Overwriting Files in Supabase Storage with JavaScript
DESCRIPTION: This code snippet demonstrates how to overwrite an existing file in Supabase Storage using JavaScript. It sets the 'upsert' option to true to allow overwriting.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const file = new Blob()

// Create Supabase client
const supabase = createClient('your_project_url', 'your_supabase_api_key')

await supabase.storage.from('bucket_name').upload('file_path', file, {
  upsert: true,
})
```

----------------------------------------

TITLE: Implementing Login Component with Magic Links in Ionic Vue
DESCRIPTION: Vue component for user authentication that implements passwordless login using Supabase Magic Links. Includes form handling, error management, and toast notifications.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_4

LANGUAGE: html
CODE:
```
<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-title>Login</ion-title>
      </ion-toolbar>
    </ion-header>

    <ion-content>
      <div class="ion-padding">
        <h1>Supabase + Ionic Vue</h1>
        <p>Sign in via magic link with your email below</p>
      </div>
      <ion-list inset="true">
        <form @submit.prevent="handleLogin">
          <ion-item>
            <ion-label position="stacked">Email</ion-label>
            <ion-input v-model="email" name="email" autocomplete type="email"></ion-input>
          </ion-item>
          <div class="ion-text-center">
            <ion-button type="submit" fill="clear">Login</ion-button>
          </div>
        </form>
      </ion-list>
      <p>{{ email }}</p>
    </ion-content>
  </ion-page>
</template>

<script lang="ts">
  import { supabase } from '../supabase'
  import {
    IonContent,
    IonHeader,
    IonPage,
    IonTitle,
    IonToolbar,
    IonList,
    IonItem,
    IonLabel,
    IonInput,
    IonButton,
    toastController,
    loadingController,
  } from '@ionic/vue'
  import { defineComponent, ref } from 'vue'

  export default defineComponent({
    name: 'LoginPage',
    components: {
      IonContent,
      IonHeader,
      IonPage,
      IonTitle,
      IonToolbar,
      IonList,
      IonItem,
      IonLabel,
      IonInput,
      IonButton,
    },
    setup() {
      const email = ref('')
      const handleLogin = async () => {
        const loader = await loadingController.create({})
        const toast = await toastController.create({ duration: 5000 })

        try {
          await loader.present()
          const { error } = await supabase.auth.signInWithOtp({ email: email.value })

          if (error) throw error

          toast.message = 'Check your email for the login link!'
          await toast.present()
        } catch (error: any) {
          toast.message = error.error_description || error.message
          await toast.present()
        } finally {
          await loader.dismiss()
        }
      }
      return { handleLogin, email }
    },
  })
</script>
```

----------------------------------------

TITLE: Deploying Supabase Function for OG Image Generation
DESCRIPTION: Command to deploy the 'lwx-ticket' Supabase function for Open Graph image generation. This deployment is configured without JWT verification for public access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/supabase/functions/lwx-ticket/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions deploy lwx-ticket --no-verify-jwt
```

----------------------------------------

TITLE: Handling Email Verification in SvelteKit
DESCRIPTION: Server-side handler for email verification. Processes the verification token and redirects accordingly.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
import type { EmailOtpType } from '@supabase/supabase-js'
import { redirect } from '@sveltejs/kit'

import type { RequestHandler } from './$types'

export const GET: RequestHandler = async ({ url, locals: { supabase } }) => {
  const token_hash = url.searchParams.get('token_hash')
  const type = url.searchParams.get('type') as EmailOtpType | null
  const next = url.searchParams.get('next') ?? '/'

  /**
   * Clean up the redirect URL by deleting the Auth flow parameters.
   *
   * `next` is preserved for now, because it's needed in the error case.
   */
  const redirectTo = new URL(url)
  redirectTo.pathname = next
  redirectTo.searchParams.delete('token_hash')
  redirectTo.searchParams.delete('type')

  if (token_hash && type) {
    const { error } = await supabase.auth.verifyOtp({ type, token_hash })
    if (!error) {
      redirectTo.searchParams.delete('next')
      redirect(303, redirectTo)
    }
  }

  redirectTo.pathname = '/auth/error'
  redirect(303, redirectTo)
}
```

----------------------------------------

TITLE: Creating a Basic Postgres Trigger in SQL
DESCRIPTION: This snippet demonstrates the basic syntax for creating a trigger in PostgreSQL. It shows how to define a trigger that executes after an insert operation on a specified table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/triggers.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create trigger "trigger_name"
after insert on "table_name"
for each row
execute function trigger_function();
```

----------------------------------------

TITLE: Sign In with Slack using Supabase Auth
DESCRIPTION: This Kotlin snippet demonstrates how to sign in a user with Slack OAuth using the Supabase client library. It calls the signInWith function with the `SlackOIDC` provider.  This suspends the execution of the current coroutine until the sign-in process is complete.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-slack.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithSlack() {
	supabase.auth.signInWith(SlackOIDC)
}
```

----------------------------------------

TITLE: Creating Association Table for Tracking Post Views in PostgreSQL
DESCRIPTION: SQL script that creates an associative table to track which users have seen which posts. The table maintains a many-to-many relationship between posts and users with a seen count for each relationship.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
begin;

create table posts_seen_by_users (
  post_id bigint references posts (id),
  user_id bigint references users (id),
  seen_count bigint not null default 0 check (seen_count > 0),
  primary key (post_id, user_id)
);

commit;
```

----------------------------------------

TITLE: Creating Storage Policy for Public Uploads in SQL
DESCRIPTION: SQL statement to create a storage policy that allows public uploads to a specific bucket. This policy is required to permit uploads from the client side.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/storage/resumable-upload-uppy/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE POLICY "allow uploads" ON storage.objects FOR INSERT TO public WITH CHECK (bucket_id = 'your-bucket-name');
```

----------------------------------------

TITLE: Creating a Table with UUID Primary Key in PostgreSQL
DESCRIPTION: SQL command to create a table with a UUID primary key that is automatically generated using the uuid_generate_v4() function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/uuid-ossp.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table contacts (
  id uuid default uuid_generate_v4(),
  first_name text,
  last_name text,
  primary key (id)
);
```

----------------------------------------

TITLE: Implementing Chat Page Component in TypeScript with Ionic Angular
DESCRIPTION: This code snippet shows the implementation of the MessagesPage component in Ionic Angular. It handles loading group information, retrieving messages, and subscribing to realtime updates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
import { AuthService } from './../../services/auth.service'
import { DataService } from './../../services/data.service'
import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core'
import { ActivatedRoute } from '@angular/router'
import { IonContent } from '@ionic/angular'

@Component({
  selector: 'app-messages',
  templateUrl: './messages.page.html',
  styleUrls: ['./messages.page.scss'],
})
export class MessagesPage implements OnInit, AfterViewInit, OnDestroy {
  @ViewChild(IonContent) content: IonContent
  group = null
  messages = []
  currentUserId = null
  messageText = ''

  constructor(
    private route: ActivatedRoute,
    private data: DataService,
    private authService: AuthService
  ) {}

  async ngOnInit() {
    const groupid = this.route.snapshot.paramMap.get('groupid')
    this.group = await this.data.getGroupById(groupid)
    this.currentUserId = this.authService.getCurrentUserId()
    this.messages = await this.data.getGroupMessages(groupid)
    this.data.listenToGroup(groupid).subscribe((msg) => {
      this.messages.push(msg)
      setTimeout(() => {
        this.content.scrollToBottom(200)
      }, 100)
    })
  }

  ngAfterViewInit(): void {
    setTimeout(() => {
      this.content.scrollToBottom(200)
    }, 300)
  }

  loadMessages() {}

  async sendMessage() {
    await this.data.addGroupMessage(this.group.id, this.messageText)
    this.messageText = ''
  }

  ngOnDestroy(): void {
    this.data.unsubscribeGroupChanges()
  }
}
```

----------------------------------------

TITLE: Creating Flag-Based RLS Policy in PostgreSQL
DESCRIPTION: SQL code that adds an exportable flag to the profiles table and creates a Row Level Security policy that only allows access to rows where this flag is set to true.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create table profiles (
  id serial primary key,
  name text,
  email text,
  is_exportable boolean -- make this "TRUE" if you want to allow access
);
alter table profiles
  enable row level security;

-- Only dump data for internal team members 1, 2, 3
create policy "Data dump rule" on profiles
  for select
  to exporter
  using ( is_exportable = true );
```

----------------------------------------

TITLE: Querying Tables with Multiple Foreign Keys in Python
DESCRIPTION: Python example showing how to query shifts with explicit join definitions for multiple foreign keys to the same table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_22

LANGUAGE: python
CODE:
```
data = supabase.from_('shifts').select("""
  *,
  start_scan:scans!scan_id_start (
    id,
    user_id,
    badge_scan_time
  ),
  end_scan:scans!scan_id_end (
    id,
    user_id,
    badge_scan_time
  )
""").execute()
```

----------------------------------------

TITLE: Optimizing Image Quality with Supabase Storage in Swift
DESCRIPTION: This snippet demonstrates downloading an image with reduced quality (50%) from a Supabase Storage bucket using the Swift client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_24

LANGUAGE: Swift
CODE:
```
let data = try await supabase.storage.from("bucket")
  .download(
    path: "image.jpg",
    options: TransformOptions(
      quality: 50
    )
  )
```

----------------------------------------

TITLE: Setting Up Environment Variables for Stripe Webhooks
DESCRIPTION: Copies the example environment variables file to create a local configuration for Stripe webhook integration.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/stripe-webhooks/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cp supabase/.env.local.example supabase/.env.local
```

----------------------------------------

TITLE: Creating Basic Database Schema for Users and Posts
DESCRIPTION: SQL migration to set up the initial database schema with users and posts tables, including necessary extensions and email domain validation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE EXTENSION IF NOT EXISTS uuid-ossp;
CREATE EXTENSION IF NOT EXISTS citext;

CREATE DOMAIN email
AS citext
CHECK ( LENGTH(VALUE) <= 255 AND value ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$' );

COMMENT ON DOMAIN email is 'lightly validated email address';

CREATE TABLE users (
    id bigserial PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uuid uuid NOT NULL DEFAULT uuid_nonmc_v1(),

    email email NOT NULL,
    name text,
    about_html text,

    created_at timestamptz NOT NULL DEFAULT NOW()
);

CREATE TABLE posts (
    id bigserial PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uuid uuid NOT NULL DEFAULT uuid_nonmc_v1(),

    title text,
    content text,
    main_image_src text,
    main_link_src text,

    created_by bigint REFERENCES users(id),

    last_hidden_at timestamptz,
    last_updated_at timestamptz,
    created_at timestamptz NOT NULL DEFAULT NOW()
);
```

----------------------------------------

TITLE: Creating Edge Function
DESCRIPTION: Creates a new Edge Function named 'hello-world' within the Supabase project structure.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-quickstart.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions new hello-world
```

----------------------------------------

TITLE: Generating OpenAI Embeddings for Movies
DESCRIPTION: Calls OpenAI's embedding API to convert movie overviews into vector embeddings for similarity search.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
const response = await fetch('https://api.openai.com/v1/embeddings', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${openAiApiKey}`,
  },
  body: JSON.stringify({
    input: film.overview,
    model: 'text-embedding-3-small',
  }),
})

const responseData = await response.json()
if (responseData.error) {
  return returnError({
    message: `Error obtaining Open API embedding: ${responseData.error.message}`,
  })
}

const embedding = responseData.data[0].embedding
```

----------------------------------------

TITLE: Using Type Shorthands for Supabase Tables
DESCRIPTION: Shows how to use type shorthands for accessing Supabase table types.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
import { Database, Tables, Enums } from "./database.types.ts";

// Before 😕
let movie: Database['public']['Tables']['movies']['Row'] = // ...

// After 😍
let movie: Tables<'movies'>
```

----------------------------------------

TITLE: Serving Functions with Environment File
DESCRIPTION: Command to serve Edge Functions locally with environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase functions serve --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Code Exchange Route Implementation (TypeScript)
DESCRIPTION: Implementation of the auth callback route for handling code exchange in TypeScript with type safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { redirect } from '@remix-run/node'
import { createServerClient } from '@supabase/auth-helpers-remix'

import type { Database } from 'db_types'
import type { LoaderFunctionArgs } from '@remix-run/node'

export const loader = async ({ request }: LoaderFunctionArgs) => {
  const response = new Response()
  const url = new URL(request.url)
  const code = url.searchParams.get('code')

  if (code) {
    const supabaseClient = createServerClient<Database>(
      process.env.SUPABASE_URL!,
      process.env.SUPABASE_ANON_KEY!,
      { request, response }
    )
    await supabaseClient.auth.exchangeCodeForSession(code)
  }

  return redirect('/', {
    headers: response.headers,
  })
}
```

----------------------------------------

TITLE: Filtering pg_audit Logs by Role in SQL
DESCRIPTION: SQL query to filter pg_audit logs by a specific role. It looks for events starting with 'AUDIT' in the event message and filters by the specified role name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
... query
where
 -- all pg_audit recorded events start with 'AUDIT'
 regexp_contains(event_message, '^AUDIT')
  and
 -- Finding queries executed from the relevant role (e.g., 'API_role')
 parsed.user_name = 'API_role'
```

----------------------------------------

TITLE: Creating Browser Client for Supabase in Next.js
DESCRIPTION: Implementation for creating a Supabase client for browser components using the createBrowserClient function from @supabase/ssr package.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

----------------------------------------

TITLE: Defining Complex Projects Table with RLS in SQL
DESCRIPTION: This snippet shows a more complex example of a 'projects' table with row-level security policies and a public view. It includes table creation, RLS policies, and a view definition.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-03-declarative-schemas.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table private.projects (
  id              bigint    not null,
  name            text      not null,
  organization_id bigint    not null,
  inserted_at     timestamp not null,
  updated_at      timestamp not null
);

alter table private.projects
enable row level security;

create policy projects_insert
  on private.projects
  for insert
  to authenticated
with check auth.can_write(project_id);

create policy projects_select
  on private.projects
  for select
  to authenticated
using auth.can_read(project_id);

-- Users can only view the projects that they have access to
create view public.projects as select
  projects.id,
  projects.name,
  projects.organization_id,
  projects.inserted_at,
  projects.updated_at
from private.projects
where auth.can_read(projects.id);
```

----------------------------------------

TITLE: Configuring WAL-G Environment Variables for AWS Storage
DESCRIPTION: Commands to create and configure the environment variables required for WAL-G to connect to AWS S3 for storing PostgreSQL backups. Sets up access keys, S3 bucket path, and database password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
$ umask u=rwx,g=rx,o=
$ mkdir -p /etc/wal-g.d/env
$ echo 'secret-key-content' > /etc/wal-g.d/env/AWS_SECRET_ACCESS_KEY
$ echo 'access-key' > /etc/wal-g.d/env/AWS_ACCESS_KEY_ID
$ echo 's3://backup-bucket/project-directory' > /etc/wal-g.d/env/WALG_S3_PREFIX
$ echo 'db password' > /etc/wal-g.d/env/PGPASSWORD
$ chown -R root:postgres /etc/wal-g.d
```

----------------------------------------

TITLE: Implementing File Removal in React Native with Supabase Storage
DESCRIPTION: This snippet shows how to implement file removal functionality using Supabase Storage in a React Native app. It removes the file from storage and updates the local state to reflect the change.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
const onRemoveImage = async (item: FileObject, listIndex: number) => {
  supabase.storage.from('files').remove([`${user!.id}/${item.name}`])
  const newFiles = [...files]
  newFiles.splice(listIndex, 1)
  setFiles(newFiles)
}
```

----------------------------------------

TITLE: Creating Planet Retrieval Function
DESCRIPTION: Creates a PostgreSQL function that returns all planets from the planets table using setof to return multiple rows.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create or replace function get_planets()
returns setof planets
language sql
as $$
  select * from planets;
$$;
```

----------------------------------------

TITLE: Signing In with Azure in Supabase (JavaScript)
DESCRIPTION: This snippet demonstrates how to sign in users using Azure OAuth in a Supabase application. It requires the `@supabase/supabase-js` package to be installed. The `signInWithOAuth` method is called with 'azure' as the provider and requests the email scope.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

// ---cut---
async function signInWithAzure() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'azure',
    options: {
      scopes: 'email',
    },
  })
}
```

----------------------------------------

TITLE: Creating Basic Role in PostgreSQL
DESCRIPTION: Creates a new role in PostgreSQL without login privileges.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/roles.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create role "role_name";
```

----------------------------------------

TITLE: Creating HNSW Index on Vector Column in SQL
DESCRIPTION: SQL command template for creating an HNSW index on a vectorized column in Supabase. The syntax includes options for different search types: Euclidean distance, negative inner product, or cosine distance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE INDEX <custom name of index> ON <table name> USING hnsw (<vectorized column> <search type>);
```

----------------------------------------

TITLE: Accessing Custom Schema with JavaScript Supabase Client
DESCRIPTION: JavaScript code showing how to initialize the Supabase client with a custom schema and query data from it. Demonstrates both global schema configuration and per-query schema selection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/using-custom-schemas.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// Initialize the JS client
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, { db: { schema: 'myschema' } })

// Make a request
const { data: todos, error } = await supabase.from('todos').select('*')

// You can also change the target schema on a per-query basis
const { data: todos, error } = await supabase.schema('myschema').from('todos').select('*')
```

----------------------------------------

TITLE: Creating a PostgreSQL Function for RPC
DESCRIPTION: SQL code to create a database function that can be called via RPC. This function accepts an array of UUIDs, logs the array size, and returns the array.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create or replace function example(id uuid[])
returns uuid[]
language plpgsql
as $$
begin
 raise log 'the function example was called with an array size of: %', (select array_length(id, 1));
 return id;
end;
$$;
```

----------------------------------------

TITLE: Running Supabase Edge Function Locally
DESCRIPTION: Command to start local Supabase environment and serve an edge function with JWT verification disabled and custom environment variables
SOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/lw13-meetup-og/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase start
supabase functions serve lw13-meetups-ogs --no-verify-jwt --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Syncing and Tracking State in Swift
DESCRIPTION: This snippet demonstrates how to listen for presence changes in Swift, observing the join and leave events in a channel.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_7

LANGUAGE: swift
CODE:
```
let roomOne = await supabase.channel("room_01")
let presenceStream = await roomOne.presenceChange()

await roomOne.subscribe()

for await presence in presenceStream {
  print(presence.join) // You can also use presence.decodeJoins(as: MyType.self)
  print(presence.leaves) // You can also use presence.decodeLeaves(as: MyType.self)
}
```

----------------------------------------

TITLE: Running Supabase Functions Locally
DESCRIPTION: Commands to start Supabase locally and serve functions without JWT verification using local environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/upstash-redis-counter/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase start
supabase functions serve --no-verify-jwt --env-file supabase/.env.local
```

----------------------------------------

TITLE: Initiating SSO Login with Supabase Auth (JavaScript)
DESCRIPTION: Demonstrates how to initiate the Single Sign-On (SSO) authentication flow using the Supabase JavaScript client. It calls `supabase.auth.signInWithSSO`, passing the user's domain, and redirects the browser to the identity provider's login URL if successful. Required: Supabase client initialized.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/monthly-active-users-sso.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.auth.signInWithSSO({
  domain: 'company.com'
})

if (data?.url) {
  // redirect User-1 to the identity provider's authentication flow
  window.location.href = data.url
}
```

----------------------------------------

TITLE: Authenticate with Supabase using Apple ID Token (JS)
DESCRIPTION: Demonstrates how to sign in a user with Supabase Auth using the `signInWithIdToken` method. It first obtains the ID token from `AppleID.auth.signIn()` and then passes it along with the provider and nonce to the Supabase method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
function signIn() {
  const data = await AppleID.auth.signIn()

  await supabase.auth.signInWithIdToken({
    provider: 'apple',
    token: data.id_token,
    nonce: '<nonce used in AppleID.auth.init>',
  })
}
```

----------------------------------------

TITLE: Aborting Requests with AbortController in JavaScript
DESCRIPTION: Example of using AbortController to cancel long-running queries in the Supabase JavaScript library. This functionality allows developers to abort requests that are in flight.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-10-04-supabase-beta-sept-2021.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const ac = new AbortController()
const { data, error } = await supabase
  .from('very_big_table')
  .select()
  .abortSignal(ac.signal)

// Abort the request after 5 seconds
setTimeout(() => ac.abort(), 5000)
```

----------------------------------------

TITLE: Fetching Data Client-Side with React Query and Supabase in Next.js
DESCRIPTION: This code demonstrates how to fetch data on the client side using React Query and Supabase in a Next.js client component. It handles loading and error states, and renders the fetched country data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_11

LANGUAGE: tsx
CODE:
```
'use client'

import useSupabaseBrowser from '@/utils/supabase-browser'
import { getCountryById } from '@/queries/get-country-by-id'
import { useQuery } from '@supabase-cache-helpers/postgrest-react-query'

export default function CountryPage({ params }: { params: { id: number } }) {
  const supabase = useSupabaseBrowser()
  const { data: country, isLoading, isError } = useQuery(getCountryById(supabase, params.id))

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (isError || !country) {
    return <div>Error</div>
  }

  return (
    <div>
      <h1>{country.name}</h1>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating a Basic Table Structure in PostgreSQL
DESCRIPTION: This SQL creates a sample 'persons' table with columns for id, age, height, weight, name, and deceased status. The id field uses the BIGINT type with an identity generator as the primary key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table persons (
  id bigint generated by default as identity primary key,
  age int,
  height int,
  weight int,
  name text,
  deceased boolean
);
```

----------------------------------------

TITLE: Creating Functional Index with MD5 Hashing
DESCRIPTION: SQL command to create a functional index using MD5 hashing for large column values that exceed B-tree size limits.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/error-index-row-size-exceeds-btree-version-4-maximum-for-index-LMmoeU.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE INDEX ON table_name(MD5(column_name));
```

----------------------------------------

TITLE: Invoking Edge Function with cURL
DESCRIPTION: Example of invoking a deployed Edge Function using cURL with authorization header and JSON payload.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
curl --request POST 'https://<project_id>.supabase.co/functions/v1/hello-world' \
  --header 'Authorization: Bearer ANON_KEY' \
  --header 'Content-Type: application/json' \
  --data '{ "name":"Functions" }'
```

----------------------------------------

TITLE: Creating Authentication Form in Svelte
DESCRIPTION: Svelte component for rendering a login and signup form. Uses form actions for submitting login and signup requests.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_9

LANGUAGE: svelte
CODE:
```
<form method="POST" action="?/login">
  <label>
    Email
    <input name="email" type="email" />
  </label>
  <label>
    Password
    <input name="password" type="password" />
  </label>
  <button>Login</button>
  <button formaction="?/signup">Sign up</button>
</form>
```

----------------------------------------

TITLE: Querying Tables with Multiple Foreign Keys in JavaScript
DESCRIPTION: JavaScript example showing how to query shifts with explicit ON clause definitions for multiple foreign keys to the same table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_18

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('shifts').select(
  `
    *,
    start_scan:scans!scan_id_start (
      id,
      user_id,
      badge_scan_time
    ),
   end_scan:scans!scan_id_end (
     id,
     user_id,
     badge_scan_time
    )
  `
)
```

----------------------------------------

TITLE: Listening only to 'INSERT' events in Python
DESCRIPTION: This Python snippet configures a Supabase client to listen only for INSERT events in the 'public' schema. It uses the channel to bind a callback that logs specific changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_14

LANGUAGE: Python
CODE:
```
changes = supabase.channel('schema-db-changes').on_postgres_changes(
  "INSERT", # Listen only to INSERTs
  schema="public",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Implementing Next.js Middleware for Authentication
DESCRIPTION: Setup of the Next.js middleware file that leverages the updateSession utility to handle authentication across the application with appropriate path matching.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
// middleware.ts

import { type NextRequest } from 'next/server';
import { updateSession } from '@/utils/supabase/middleware';

export async function middleware(request: NextRequest) {
  return await updateSession(request);
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
};
```

----------------------------------------

TITLE: Grouping with Aggregate Functions in cURL
DESCRIPTION: This snippet demonstrates how to use aggregate functions with implicit grouping in PostgREST, grouping max and min release years by genre using cURL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
$ curl 'http://postgrest/movies?select=genre,release_year.max(),release_year.min()'
```

----------------------------------------

TITLE: Checking Session Validity in Supabase Flutter v2
DESCRIPTION: Shows how to check if a session is valid in v2, which is necessary since the initialization no longer awaits for session refresh. This change makes the app launch faster, but requires explicit session validity checking.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
// Session is valid, no check required
final session = supabase.auth.currentSession;
```

LANGUAGE: dart
CODE:
```
final session = supabase.auth.currentSession;

// Check if the session is valid.
final isSessionExpired = session?.isExpired;
```

----------------------------------------

TITLE: Updating Server Components
DESCRIPTION: Example of updating a server component to use the new server client utility function instead of the deprecated createServerComponentClient.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
// replace
import { cookies } from 'next/headers';
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';

// with
import { createClient } from '@/utils/supabase/server';

export default async function Page() {
	// replace
	const cookieStore = cookies();
	const supabase = createServerComponentClient<Database>({
		cookies: () => cookieStore
	});

	// with
	const supabase = createClient();

	return...
}
```

----------------------------------------

TITLE: Using Supabase Realtime for Avatar Stack in Next.js
DESCRIPTION: The code snippet defines a Next.js component that imports the 'RealtimeAvatarStack' and uses it within a page component. It connects to a specific Supabase Realtime room to render avatars representing currently online users. This setup depends on having Supabase configured and requires the use of the @/components/realtime-avatar-stack module. The 'roomName' prop is a string that specifies the realtime room to connect to, and it is crucial for determining the displayed avatars.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-avatar-stack.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { RealtimeAvatarStack } from '@/components/realtime-avatar-stack'

export default function Page() {
  return (
    <Header className="flex items-center justify-between">
      <h1>Lumon Industries</h1>
      <RealtimeAvatarStack roomName="break_room" />
    </Header>
  )
}
```

----------------------------------------

TITLE: Uploading Decryption Keys to Supabase Secrets (Bash)
DESCRIPTION: Provides the bash command to upload the contents of the `supabase/.env.keys` file (containing both production and preview decryption keys) to the Supabase project's secret storage. This allows Supabase's branching system to decrypt secrets when needed for different environments.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
npx supabase secrets set --env-file supabase/.env.keys
```

----------------------------------------

TITLE: Implementing Twitch Sign-In Code in JavaScript
DESCRIPTION: This snippet demonstrates how to implement the sign-in functionality using Twitch OAuth in a Supabase JavaScript client application. It initializes the Supabase client and uses the signInWithOAuth method with 'twitch' as the provider.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signInWithTwitch() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'twitch',\n  })\n}
```

----------------------------------------

TITLE: Uploading NodeJS Stream to Supabase Storage
DESCRIPTION: Demonstrates how to upload a NodeJS ReadableStream to Supabase Storage using the supabase-js library. This new capability allows for direct binary data uploads without increasing bundle size.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-27-storage-beta.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createReadStream } from 'fs'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('YOUR_SUPABASE_URL', 'YOUR_SUPABASE_KEY')

const stream = createReadStream('./my-file.txt')

const { data, error } = await supabase.storage
  .from('bucket')
  .upload('folder/file.txt', stream)
```

----------------------------------------

TITLE: Implementing Partition Loading Procedures in PostgreSQL
DESCRIPTION: Defines two procedures: load_chats_partition for handling individual date partitions and load_chats_partitions for processing the entire date range. The procedures create partitions, copy data, and attach tables incrementally with transaction commits between operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE PROCEDURE app.load_chats_partition(i date)
    LANGUAGE plpgsql AS
$$
BEGIN
    CALL app.create_chats_partition(i);
    CALL app.copy_chats_partition(i);
    CALL app.index_and_attach_chats_partition(i);
END;
$$;

CREATE OR REPLACE PROCEDURE app.load_chats_partitions()
    LANGUAGE plpgsql AS
$$
DECLARE
    start_date date;
    end_date date;
    i date;
BEGIN
    SELECT min(created_at)::date INTO start_date FROM chats;
    SELECT max(created_at)::date INTO end_date FROM chats;
    FOR i IN SELECT * FROM generate_series(end_date, start_date, interval '-1 day') LOOP
        CALL app.load_chats_partition(i);
        COMMIT;
    END LOOP;
END;
$$;
```

----------------------------------------

TITLE: Sign In Anonymously with Flutter in Supabase
DESCRIPTION: Creates an anonymous user authentication session using the Supabase Flutter SDK. Returns a session object for the anonymous user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
await supabase.auth.signInAnonymously();
```

----------------------------------------

TITLE: Setting Up Embedding Triggers for Automatic Updates in SQL
DESCRIPTION: This SQL snippet creates two triggers that automatically queue embedding generation jobs when documents are inserted or updated. These triggers use the util.queue_embeddings function to handle the asynchronous processing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- Trigger for insert events
create trigger embed_documents_on_insert
  after insert
  on documents
  for each row
  execute function util.queue_embeddings('embedding_input', 'embedding');

-- Trigger for update events
create trigger embed_documents_on_update
  after update of title, content -- must match the columns in embedding_input()
  on documents
  for each row
  execute function util.queue_embeddings('embedding_input', 'embedding');
```

----------------------------------------

TITLE: Overwriting Files in Supabase Storage with Python
DESCRIPTION: This code shows how to overwrite an existing file in Supabase Storage using Python. It uses the 'upsert' option set to 'true' to allow file overwriting.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
response = supabase.storage.from_('bucket_name').upload('file_path', file, {
  'upsert': 'true',
})
```

----------------------------------------

TITLE: Implementing HyperLogLog for Tracking Post Views in PostgreSQL
DESCRIPTION: SQL script that adds a HyperLogLog column to the posts table for probabilistic counting of unique viewers. This approach uses the citus/postgresql-hll extension to efficiently track large numbers of unique viewers with a small memory footprint.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
BEGIN;

CREATE EXTENSION IF NOT EXISTS hll;

ALTER TABLE posts ADD COLUMN seen_count_hll hll
  NOT NULL DEFAULT hll_empty();

COMMENT ON COLUMN posts.seen_count_hll
  IS 'HyperLogLog storing user IDs';

COMMIT;
```

----------------------------------------

TITLE: Identifying long-running PostgreSQL transactions
DESCRIPTION: This SQL query lists all active transactions with their start times, helping identify long-running transactions that might prevent successful vacuum operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_11

LANGUAGE: jsx
CODE:
```
SELECT xact_start, state FROM pg_stat_activity;
```

----------------------------------------

TITLE: Restricting Access for SSO Users in JavaScript
DESCRIPTION: This JavaScript function is a webhook that restricts access to employees logging in through SSO. It verifies the authentication method and checks against an allowlist of emails to determine if access should be granted or denied. It also uses the Deno runtime and requires a secret for payload verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
import { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'
import { readAll } from 'https://deno.land/std/io/read_all.ts'
import * as base64 from 'https://denopkg.com/chiefbiiko/base64/mod.ts'

Deno.serve(async (req) => {
  const payload = await req.text()
  const base64_secret = Deno.env.get('CUSTOM_ACCESS_TOKEN_SECRET').replace('v1,whsec_', '')
  const headers = Object.fromEntries(req.headers)
  const wh = new Webhook(base64_secret)
  try {
    const { user_id, claims, authentication_method } = wh.verify(payload, headers)

    // Check the condition
    const allowedEmails = ['myemail@company.com', 'example@company.com']
    if (authentication_method === 'sso/saml' || allowedEmails.includes(claims.email)) {
      return new Response(
        JSON.stringify({
          claims,
        }),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )
    } else {
      return new Response(
        JSON.stringify({
          error: 'Unauthorized',
        }),
        {
          status: 500,
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )
    }
  } catch (error) {
    return new Response(
      JSON.stringify({
        error: `Failed to process the request: ${error}`,
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    )
  }
})
```

----------------------------------------

TITLE: Updating and Returning Data in Supabase with TypeScript
DESCRIPTION: Code examples showing how to update data in a Supabase table with and without returning the updated data. The newer version adds a .select() method to return the updated records.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
const { data, error } = await supabase
  .from('my_table')
  .update({ new_data })
  .eq('id', id)
```

LANGUAGE: typescript
CODE:
```
const { data, error } = await supabase
  .from('my_table')
  .update({ new_data })
  .eq('id', id)
  .select()
```

----------------------------------------

TITLE: Creating Browser Client Utility Function
DESCRIPTION: Implementation of a utility function to create a browser-side Supabase client using the createBrowserClient function from the SSR package.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// utils/supabase/client.ts

import { createBrowserClient } from '@supabase/ssr';

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );
}
```

----------------------------------------

TITLE: Initializing Dropzone React Component with Supabase Upload
DESCRIPTION: Demonstrates how to configure and use the Dropzone component with Supabase upload hook, setting bucket name, path, allowed MIME types, and file upload limits.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/dropzone.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { Dropzone, DropzoneContent, DropzoneEmptyState } from '@/components/dropzone'
import { useSupabaseUpload } from '@/hooks/use-supabase-upload'

const FileUploadDemo = () => {
  const props = useSupabaseUpload({
    bucketName: 'test',
    path: 'test',
    allowedMimeTypes: ['image/*'],
    maxFiles: 2,
    maxFileSize: 1000 * 1000 * 10, // 10MB,
  })

  return (
    <div className="w-[500px]">
      <Dropzone {...props}>
        <DropzoneEmptyState />
        <DropzoneContent />
      </Dropzone>
    </div>
  )
}

export { FileUploadDemo }
```

----------------------------------------

TITLE: Filtering Storage Logs by 5XX Error Status Codes
DESCRIPTION: This SQL query retrieves storage logs and filters them to only include entries where the HTTP status code is a 5XX error (server-side error). It extracts the ID, timestamp, event message, status code, error message, and raw error details from the storage logs' metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/debugging/logs.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select
  id,
  storage_logs.timestamp,
  event_message,
  r.statusCode,
  e.message as errorMessage,
  e.raw as rawError
from
  storage_logs
  cross join unnest(metadata) as m
  cross join unnest(m.res) as r
  cross join unnest(m.error) as e
where r.statusCode >= 500
order by timestamp desc
limit 100;
```

----------------------------------------

TITLE: Querying View in PostgreSQL
DESCRIPTION: Shows how to query the created view to retrieve all records.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
select * from transcripts;
```

----------------------------------------

TITLE: Creating a Publication for All Tables in SQL
DESCRIPTION: Creates a publication that includes changes to all tables in the database. This is the broadest form of replication configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create publication publication_name
for all tables;
```

----------------------------------------

TITLE: Handling Errors in supabase-flutter v0 vs v1
DESCRIPTION: Demonstrates the change in error handling between v0 and v1. In v0, errors were returned as a response, while in v1, errors are thrown as exceptions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
final res = await supabase.from('my_table').select().execute();
final error = res.error;
if (error != null) {
  // handle error
}
final data = res.data;
```

LANGUAGE: dart
CODE:
```
try {
    final data = supabase.from('my_table').select();
} catch (error) {
    // handle error
}
```

----------------------------------------

TITLE: Calling Authorization Test Function in JavaScript with Supabase
DESCRIPTION: This JavaScript snippet demonstrates how to call the test_authorization_header function using Supabase's RPC method. It logs the user's role and UUID, helping to debug authentication-related issues.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/why-is-my-select-returning-an-empty-data-array-and-i-have-data-in-the-table-xvOPgx.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { data: testData, error: testError } = await supabase.rpc('test_authorization_header')
console.log(`The user role is ${testData.role} and the user UUID is ${testData.sub}. `, testError)
```

----------------------------------------

TITLE: Invoking a Supabase Edge Function with pg_net
DESCRIPTION: Example of making a POST request to a Supabase Edge Function with authentication header and JSON payload using the net.http_post function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_17

LANGUAGE: sql
CODE:
```
select
    net.http_post(
        url:='https://project-ref.supabase.co/functions/v1/function-name',
        headers:='{"Content-Type": "application/json", "Authorization": "Bearer <YOUR_ANON_KEY>"}'::jsonb,
        body:='{"name": "pg_net"}'::jsonb
    ) as request_id;
```

----------------------------------------

TITLE: Revoking Execute Permission from Client Roles
DESCRIPTION: SQL command to revoke execution permission on a hook function from authenticated and anonymous roles for security purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
revoke execute
  on function public.custom_access_token_hook
  from authenticated, anon;
```

----------------------------------------

TITLE: Loading More Tickets with Supabase Range Method
DESCRIPTION: Implements the logic to load more tickets based on the current offset using Supabase's range method for efficient pagination.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
export default function TicketsPage() {
  const PAGE_COUNT = 20
  const [offset, setOffset] = useState(1)
  const [isLoading, setIsLoading] = useState(false)
  const [isInView, setIsInView] = useState(false)

  useEffect(() => {
    if (isInView) {
      loadMoreTickets(offset)
    }
  }, [isInView])

  const loadMoreTickets = async (offset: number) => {
    setIsLoading(true)
    // Every time we fetch, we want to increase
    // the offset to load fresh tickets
    setOffset((prev) => prev + 1)
    const { data: newTickets } = await fetchTickets(offset, PAGE_COUNT)
    // Merge new tickets with all previously loaded
    setLoadedTickets((prevTickets) => [...prevTickets, ...newTickets])
    setIsLoading(false)
  }

  const fetchTickets = async (offset, limit) => {
    const from = offset * PAGE_COUNT
    const to = from + PAGE_COUNT - 1

    const { data } = await supabase!
        .from('my_tickets_table')
        .select('*')
        .range(from, to)
        .order('createdAt', { ascending: false })


    return data
  }
}
```

----------------------------------------

TITLE: Implementing Resumable Uploads with tus-py-client in Python
DESCRIPTION: This snippet shows how to use tus-py-client to implement resumable uploads in Python. It includes setup for Supabase authentication and configuration for the TUS protocol.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/resumable-uploads.mdx#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
from io import BufferedReader
from tusclient import client
from supabase import create_client

def upload_file(
    bucket_name: str, file_name: str, file: BufferedReader, access_token: str
):
    # create Tus client
    my_client = client.TusClient(
        f"{supabase_url}/storage/v1/upload/resumable",
        headers={"Authorization": f"Bearer {access_token}", "x-upsert": "true"},
    )
    uploader = my_client.uploader(
        file_stream=file,
        chunk_size=(6 * 1024 * 1024),
        metadata={
            "bucketName": bucket_name,
            "objectName": file_name,
            "contentType": "image/png",
            "cacheControl": "3600",
        },
    )
    uploader.upload()

# create client and sign in
supabase = create_client(supabase_url, supabase_key)

# retrieve the current user's session for authentication
session = supabase.auth.get_session()

# open file and send file stream to upload
with open("./assets/40mb.jpg", "rb") as fs:
    upload_file(
        bucket_name="assets",
        file_name="large_file",
        file=fs,
        access_token=session.access_token,
    )
```

----------------------------------------

TITLE: Creating Signed URL for Transformed Image in Kotlin
DESCRIPTION: This snippet shows how to create a signed URL for a transformed image in a private bucket using the Supabase Kotlin client, specifying expiration time and transformation options.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_8

LANGUAGE: kotlin
CODE:
```
val url = supabase.storage.from("bucket").createSignedUrl("image.jpg", 60.seconds) {
	size(200, 200)
}
```

----------------------------------------

TITLE: Implementing Splash Page with Authentication Check in Flutter
DESCRIPTION: A Flutter widget that handles initial authentication state checking and user redirection. It checks for existing sessions and routes users to either the registration or rooms page.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_14

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:my_chat_app/pages/register_page.dart';
import 'package:my_chat_app/pages/rooms_page.dart';
import 'package:my_chat_app/utils/constants.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

/// Page to redirect users to the appropriate page depending on the initial auth state
class SplashPage extends StatefulWidget {
  const SplashPage({Key? key}) : super(key: key);

  @override
  SplashPageState createState() => SplashPageState();
}

// ... rest of the SplashPage implementation
```

----------------------------------------

TITLE: Implementing Avatar Upload Component in Angular with Supabase Storage
DESCRIPTION: This TypeScript code defines an AvatarComponent for handling profile photo uploads and downloads using Supabase Storage. It includes methods for image manipulation and event handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
import { Component, EventEmitter, Input, Output } from '@angular/core'
import { SafeResourceUrl, DomSanitizer } from '@angular/platform-browser'
import { SupabaseService } from '../supabase.service'

@Component({
  selector: 'app-avatar',
  templateUrl: './avatar.component.html',
  styleUrls: ['./avatar.component.css'],
})
export class AvatarComponent {
  _avatarUrl: SafeResourceUrl | undefined
  uploading = false

  @Input()
  set avatarUrl(url: string | null) {
    if (url) {
      this.downloadImage(url)
    }
  }

  @Output() upload = new EventEmitter<string>()

  constructor(
    private readonly supabase: SupabaseService,
    private readonly dom: DomSanitizer
  ) {}

  async downloadImage(path: string) {
    try {
      const { data } = await this.supabase.downLoadImage(path)
      if (data instanceof Blob) {
        this._avatarUrl = this.dom.bypassSecurityTrustResourceUrl(URL.createObjectURL(data))
      }
    } catch (error) {
      if (error instanceof Error) {
        console.error('Error downloading image: ', error.message)
      }
    }
  }

  async uploadAvatar(event: any) {
    try {
      this.uploading = true
      if (!event.target.files || event.target.files.length === 0) {
        throw new Error('You must select an image to upload.')
      }

      const file = event.target.files[0]
      const fileExt = file.name.split('.').pop()
      const filePath = `${Math.random()}.${fileExt}`

      await this.supabase.uploadAvatar(filePath, file)
      this.upload.emit(filePath)
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      this.uploading = false
    }
  }
}
```

----------------------------------------

TITLE: Creating Tables for SupaSecureSlack in SQL
DESCRIPTION: SQL commands to create the necessary tables for the chat application, including rooms, profiles, and rooms_users. These tables are used to manage chat rooms, user profiles, and room-user associations.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-authorization-demo/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE TABLE public.rooms (
    id bigint GENERATED BY default AS IDENTITY PRIMARY KEY,
    topic text NOT NULL UNIQUE
);
ALTER TABLE public.rooms ENABLE ROW LEVEL SECURITY;

CREATE TABLE public.profiles (
  id uuid NOT NULL REFERENCES auth.users ON DELETE CASCADE,
  email text NOT NULL,

  PRIMARY KEY (id)
);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

CREATE TABLE public.rooms_users (
  user_id uuid REFERENCES auth.users (id),
  room_topic text REFERENCES public.rooms (topic),
  created_at timestamptz DEFAULT CURRENT_TIMESTAMP
);
ALTER TABLE public.rooms_users ENABLE ROW LEVEL SECURITY;
```

----------------------------------------

TITLE: Listening to Specific Table Events in Kotlin with Supabase Realtime
DESCRIPTION: Sets up a Kotlin channel to listen for all event types on a specific table ('todos') in the public schema of a Supabase database. The code creates a flow of PostgresAction events with a table filter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_28

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction>(schema = "public") {
    table = "todos"
}

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

----------------------------------------

TITLE: Unlinking Identity in Supabase Auth
DESCRIPTION: Shows how to retrieve all identities linked to a user, find a specific identity (in this case, Google), and then unlink it using the unlinkIdentity() method in Supabase Auth.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-auth-identity-linking-hooks.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
// retrieve all identities linked to a user
const {
  data: { identities },
} = await supabase.auth.getUserIdentities()

// find the google identity linked to the user
const googleIdentity = identities.find(({ provider }) => provider === 'google')

// unlink the google identity from the user
const { data, error } = await supabase.auth.unlinkIdentity(googleIdentity)
```

----------------------------------------

TITLE: Listening to UPDATE Events in Dart with Supabase Realtime
DESCRIPTION: Creates a channel to listen specifically for UPDATE events in the public schema of a Supabase database using Dart. The code establishes a subscription that prints payload data whenever database updates occur.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_16

LANGUAGE: dart
CODE:
```
supabase
    .channel('schema-db-changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.update, // Listen only to UPDATEs
        schema: 'public',
        callback: (payload) => print(payload))
    .subscribe();
```

----------------------------------------

TITLE: Configuring Storage Bucket for Audio Files in Supabase
DESCRIPTION: TOML configuration for setting up a storage bucket named 'audio' with specific permissions and limitations for storing audio files.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[storage.buckets.audio]
public = false
file_size_limit = "50MiB"
allowed_mime_types = ["audio/mp3"]
objects_path = "./audio"
```

----------------------------------------

TITLE: Native Google Sign-in with Expo React Native and Supabase
DESCRIPTION: A React Native component for native Google Sign-in on Android using the react-native-google-signin library with Supabase Auth. It configures the Google Sign-in client, handles the authentication flow, and sends the ID token to Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
import {
  GoogleSignin,
  GoogleSigninButton,
  statusCodes,
} from '@react-native-google-signin/google-signin'
import { supabase } from '../utils/supabase'

export default function () {
  GoogleSignin.configure({
    scopes: ['https://www.googleapis.com/auth/drive.readonly'],
    webClientId: 'YOUR CLIENT ID FROM GOOGLE CONSOLE',
  })

  return (
    <GoogleSigninButton
      size={GoogleSigninButton.Size.Wide}
      color={GoogleSigninButton.Color.Dark}
      onPress={async () => {
        try {
          await GoogleSignin.hasPlayServices()
          const userInfo = await GoogleSignin.signIn()
          if (userInfo.data.idToken) {
            const { data, error } = await supabase.auth.signInWithIdToken({
              provider: 'google',
              token: userInfo.data.idToken,
            })
            console.log(error, data)
          } else {
            throw new Error('no ID token present!')
          }
        } catch (error: any) {
          if (error.code === statusCodes.SIGN_IN_CANCELLED) {
            // user cancelled the login flow
          } else if (error.code === statusCodes.IN_PROGRESS) {
            // operation (e.g. sign in) is in progress already
          } else if (error.code === statusCodes.PLAY_SERVICES_NOT_AVAILABLE) {
            // play services not available or outdated
          } else {
            // some other error happened
          }
        }
      }}
    />
  )
}
```

----------------------------------------

TITLE: Running Supabase Edge Functions locally
DESCRIPTION: Commands to start Supabase locally and serve the Edge Function without JWT verification, using the local environment file for configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/send-email-resend/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
supabase start
supabase functions serve --no-verify-jwt --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Ejecting Supabase Configuration for Self-Hosting
DESCRIPTION: This command generates the necessary files and directories for self-hosting Supabase. It creates a docker-compose.yml file and kong and postgres directories.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
supabase eject
```

----------------------------------------

TITLE: Querying Tables with Multiple Foreign Keys in Kotlin
DESCRIPTION: Kotlin example showing how to query shifts with explicit join definitions for multiple foreign keys to the same table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_21

LANGUAGE: kotlin
CODE:
```
val data = supabase.from("shifts").select(Columns.raw('''
  *,
  start_scan:scans!scan_id_start (
    id,
    user_id,
    badge_scan_time
  ),
end_scan:scans!scan_id_end (
    id,
    user_id,
    badge_scan_time
  )
'''));
```

----------------------------------------

TITLE: Initializing Supabase for Real-Time Communication in Flutter
DESCRIPTION: Sets up Supabase in a Flutter application for real-time communication between players, configuring a higher events-per-second rate for smoother gameplay synchronization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_7

LANGUAGE: dart
CODE:
```
void main() async {
  await Supabase.initialize(
  url: 'YOUR_SUPABASE_URL',
  anonKey: 'YOUR_ANON_KEY',
  realtimeClientOptions: const RealtimeClientOptions(eventsPerSecond: 40),
  );
  runApp(const MyApp());
}

// Extract Supabase client for easy access to Supabase
final supabase = Supabase.instance.client;
```

----------------------------------------

TITLE: Creating Restricted Storage Bucket with JavaScript
DESCRIPTION: Creates a public storage bucket with file type and size restrictions, limiting uploads to images under 1MB.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/creating-buckets.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!)

// Use the JS library to create a bucket.

const { data, error } = await supabase.storage.createBucket('avatars', {
  public: true,
  allowedMimeTypes: ['image/*'],
  fileSizeLimit: '1MB',
})
```

----------------------------------------

TITLE: Implementing Account Management in Vue 3
DESCRIPTION: Creating a Vue component for user profile management, including fetching and updating profile data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-vue-3.mdx#2025-04-21_snippet_4

LANGUAGE: vue
CODE:
```
<script setup>
import { supabase } from '../supabase'
import { onMounted, ref, toRefs } from 'vue'

const props = defineProps(['session'])
const { session } = toRefs(props)

const loading = ref(true)
const username = ref('')
const website = ref('')
const avatar_url = ref('')

onMounted(() => {
  getProfile()
})

async function getProfile() {
  try {
    loading.value = true
    const { user } = session.value

    const { data, error, status } = await supabase
      .from('profiles')
      .select(`username, website, avatar_url`)
      .eq('id', user.id)
      .single()

    if (error && status !== 406) throw error

    if (data) {
      username.value = data.username
      website.value = data.website
      avatar_url.value = data.avatar_url
    }
  } catch (error) {
    alert(error.message)
  } finally {
    loading.value = false
  }
}

async function updateProfile() {
  try {
    loading.value = true
    const { user } = session.value

    const updates = {
      id: user.id,
      username: username.value,
      website: website.value,
      avatar_url: avatar_url.value,
      updated_at: new Date(),
    }

    const { error } = await supabase.from('profiles').upsert(updates)

    if (error) throw error
  } catch (error) {
    alert(error.message)
  } finally {
    loading.value = false
  }
}

async function signOut() {
  try {
    loading.value = true
    const { error } = await supabase.auth.signOut()
    if (error) throw error
  } catch (error) {
    alert(error.message)
  } finally {
    loading.value = false
  }
}
</script>

<template>
  <form class="form-widget" @submit.prevent="updateProfile">
    <div>
      <label for="email">Email</label>
      <input id="email" type="text" :value="session.user.email" disabled />
    </div>
    <div>
      <label for="username">Name</label>
      <input id="username" type="text" v-model="username" />
    </div>
    <div>
      <label for="website">Website</label>
      <input id="website" type="url" v-model="website" />
    </div>

    <div>
      <input
        type="submit"
        class="button primary block"
        :value="loading ? 'Loading ...' : 'Update'"
        :disabled="loading"
      />
    </div>

    <div>
      <button class="button block" @click="signOut" :disabled="loading">Sign Out</button>
    </div>
  </form>
</template>
```

----------------------------------------

TITLE: Installing Supabase Packages for Next.js Authentication
DESCRIPTION: Installs the Supabase JavaScript client and the SSR helper package needed for server-side authentication in Next.js applications.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
npm install @supabase/supabase-js @supabase/ssr
```

----------------------------------------

TITLE: Creating a Multi-Column Index in SQL
DESCRIPTION: This example demonstrates how to create a multi-column index in Postgres, which can be beneficial for queries that frequently filter on multiple columns together.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create index test2_mm_idx on test2 (major, minor);
```

----------------------------------------

TITLE: Proximity Text Search Implementation
DESCRIPTION: Shows how to implement proximity-based text search to find terms within a specific distance of each other.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_28

LANGUAGE: sql
CODE:
```
select
  *
from
  books
where
  to_tsvector(description) @@ to_tsquery('big <-> dreams');
```

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('books')
  .select()
  .textSearch('description', `'big' <-> 'dreams'`)
```

LANGUAGE: dart
CODE:
```
final result = await client
  .from('books')
  .select()
  .textSearch('description', "'big' <-> 'dreams'");
```

LANGUAGE: swift
CODE:
```
let response = try await client
  .from("books")
  .select()
  .textSearch("description", value: "'big' <-> 'dreams'")
  .execute()
```

LANGUAGE: kotlin
CODE:
```
val data = supabase.from("books").select {
    filter {
        textSearch("description", "'big' <-> 'dreams'", TextSearchType.NONE)
    }
}
```

LANGUAGE: python
CODE:
```
data = client.from_('books').select().text_search('description', "'big' <-> 'dreams'").execute()
```

----------------------------------------

TITLE: Installing Supabase Auth UI Dependencies
DESCRIPTION: Command to install required Supabase packages including the core client, Auth UI React component, and shared utilities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js @supabase/auth-ui-react @supabase/auth-ui-shared
```

----------------------------------------

TITLE: Implementing Google One-Tap Authentication in Next.js with Supabase
DESCRIPTION: A Next.js component that handles Google One-Tap authentication using Supabase Auth. It generates a secure nonce, initializes the Google One-Tap UI, handles the authentication callback, and redirects users upon successful login.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
'use client'

import Script from 'next/script'
import { createClient } from '@/utils/supabase/client'
import { CredentialResponse } from 'google-one-tap'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'

const OneTapComponent = () => {
  const supabase = createClient()
  const router = useRouter()

  // generate nonce to use for google id token sign-in
  const generateNonce = async (): Promise<string[]> => {
    const nonce = btoa(String.fromCharCode(...crypto.getRandomValues(new Uint8Array(32))))
    const encoder = new TextEncoder()
    const encodedNonce = encoder.encode(nonce)
    const hashBuffer = await crypto.subtle.digest('SHA-256', encodedNonce)
    const hashArray = Array.from(new Uint8Array(hashBuffer))
    const hashedNonce = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('')

    return [nonce, hashedNonce]
  }

  useEffect(() => {
    const initializeGoogleOneTap = () => {
      console.log('Initializing Google One Tap')
      window.addEventListener('load', async () => {
        const [nonce, hashedNonce] = await generateNonce()
        console.log('Nonce: ', nonce, hashedNonce)

        // check if there's already an existing session before initializing the one-tap UI
        const { data, error } = await supabase.auth.getSession()
        if (error) {
          console.error('Error getting session', error)
        }
        if (data.session) {
          router.push('/')
          return
        }

        /* global google */
        google.accounts.id.initialize({
          client_id: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID,
          callback: async (response: CredentialResponse) => {
            try {
              // send id token returned in response.credential to supabase
              const { data, error } = await supabase.auth.signInWithIdToken({
                provider: 'google',
                token: response.credential,
                nonce,
              })

              if (error) throw error
              console.log('Session data: ', data)
              console.log('Successfully logged in with Google One Tap')

              // redirect to protected page
              router.push('/')
            } catch (error) {
              console.error('Error logging in with Google One Tap', error)
            }
          },
          nonce: hashedNonce,
          // with chrome's removal of third-party cookies, we need to use FedCM instead (https://developers.google.com/identity/gsi/web/guides/fedcm-migration)
          use_fedcm_for_prompt: true,
        })
        google.accounts.id.prompt() // Display the One Tap UI
      })
    }
    initializeGoogleOneTap()
    return () => window.removeEventListener('load', initializeGoogleOneTap)
  }, [])

  return (
    <>
      <Script src="https://accounts.google.com/gsi/client" />
      <div id="oneTap" className="fixed top-0 right-0 z-[100]" />
    </>
  )
}

export default OneTapComponent
```

----------------------------------------

TITLE: Unenrolling MFA Factor with Supabase JS Client
DESCRIPTION: Example of how to unenroll an MFA factor using the Supabase JavaScript client. The code initializes a Supabase client and calls the unenroll method with a factor ID.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

// ---cut---
supabase.auth.mfa.unenroll({ factorId: 'd30fd651-184e-4748-a928-0a4b9be1d429' })
```

----------------------------------------

TITLE: Realtime Stream Method - Dart Supabase
DESCRIPTION: Demonstrates changes in realtime streaming method, including simplified filtering and primary key specification
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_15

LANGUAGE: dart
CODE:
```
supabase.from('my_table:id=eq.120')
  .stream(['id'])
  .listen();
```

LANGUAGE: dart
CODE:
```
supabase.from('my_table')
  .stream(primaryKey: ['id'])
  .eq('id', '120')
  .listen();
```

----------------------------------------

TITLE: Querying Nested JSON in PostgreSQL 14
DESCRIPTION: Demonstrates how to use JSON subscripting to access nested JSON fields in PostgreSQL 14. This new feature allows for quick traversal of nested JSON structures to retrieve values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_0

LANGUAGE: sql
CODE:
```
select (
  '{ "PostgreSQL": { "release": 14 }}'::jsonb
)['PostgreSQL']['release'];

 jsonb
-------
 14
```

----------------------------------------

TITLE: Exporting Render Database Using pg_dump
DESCRIPTION: This snippet demonstrates how to use the pg_dump command to export your Render Postgres database to a SQL file. It requires the Render database host, user, and database name to be set as environment variables. The output is a SQL file named 'render_dump.sql'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/render.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
pg_dump --clean --if-exists --quote-all-identifiers \n-h $RENDER_HOST -U $RENDER_USER -d $RENDER_DATABASE \n--no-owner --no-privileges > render_dump.sql
```

----------------------------------------

TITLE: Implementing CRUD Functions for Supabase Database in Angular
DESCRIPTION: Extended data service methods that handle CRUD operations for boards, lists, and cards in the Supabase database. These methods perform basic SQL operations like select, insert, update, and delete for different entities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
// CRUD Board
  async getBoardInfo(boardId: string) {
    return await this.supabase
      .from(BOARDS_TABLE)
      .select('*')
      .match({ id: boardId })
      .single();
  }

  async updateBoard(board: any) {
    return await this.supabase
      .from(BOARDS_TABLE)
      .update(board)
      .match({ id: board.id });
  }

  async deleteBoard(board: any) {
    return await this.supabase
      .from(BOARDS_TABLE)
      .delete()
      .match({ id: board.id });
  }

  // CRUD Lists
  async getBoardLists(boardId: string) {
    const lists = await this.supabase
      .from(LISTS_TABLE)
      .select('*')
      .eq('board_id', boardId)
      .order('position');

    return lists.data || [];
  }

  async addBoardList(boardId: string, position = 0) {
    return await this.supabase
      .from(LISTS_TABLE)
      .insert({ board_id: boardId, position, title: 'New List' })
      .select('*')
      .single();
  }

  async updateBoardList(list: any) {
    return await this.supabase
      .from(LISTS_TABLE)
      .update(list)
      .match({ id: list.id });
  }

  async deleteBoardList(list: any) {
    return await this.supabase
      .from(LISTS_TABLE)
      .delete()
      .match({ id: list.id });
  }

  // CRUD Cards
  async addListCard(listId: string, boardId: string, position = 0) {
    return await this.supabase
      .from(CARDS_TABLE)
      .insert(
        { board_id: boardId, list_id: listId, position }
      )
      .select('*')
      .single();
  }

  async getListCards(listId: string) {
    const lists = await this.supabase
      .from(CARDS_TABLE)
      .select('*')
      .eq('list_id', listId)
      .order('position');

    return lists.data || [];
  }

  async updateCard(card: any) {
    return await this.supabase
      .from(CARDS_TABLE)
      .update(card)
      .match({ id: card.id });
  }

  async deleteCard(card: any) {
    return await this.supabase
      .from(CARDS_TABLE)
      .delete()
      .match({ id: card.id });
  }
```

----------------------------------------

TITLE: Setting Environment Variables
DESCRIPTION: Configuration of Supabase environment variables for API URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
SUPABASE_URL="YOUR_SUPABASE_URL"
SUPABASE_KEY="YOUR_SUPABASE_ANON_KEY"
```

----------------------------------------

TITLE: Querying Nearby Restaurants with JavaScript
DESCRIPTION: JavaScript code to call the nearby_restaurants function with latitude and longitude parameters. This queries restaurants sorted by distance from the specified point.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.rpc('nearby_restaurants', {
  lat: 40.807313,
  long: -73.946713,
})
```

----------------------------------------

TITLE: Creating Flutter Profile Screen with Supabase User Data
DESCRIPTION: Implements a profile screen that displays user information retrieved from Supabase authentication, including profile image and full name. Includes sign-out functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-18-flutter-authentication.mdx#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:myauthapp/main.dart';
import 'package:myauthapp/screens/login_screen.dart';

class ProfileScreen extends StatelessWidget {
  const ProfileScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final user = supabase.auth.currentUser;
    final profileImageUrl = user?.userMetadata?['avatar_url'];
    final fullName = user?.userMetadata?['full_name'];
    return Scaffold(
      appBar: AppBar(
        title: const Text('Profile'),
        actions: [
          TextButton(
            onPressed: () async {
              await supabase.auth.signOut();
              if (context.mounted) {
                Navigator.of(context).pushReplacement(
                  MaterialPageRoute(builder: (context) => const LoginScreen()),
                );
              }
            },
            child: const Text('Sign out'),
          )
        ],
      ),
      body: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            if (profileImageUrl != null)
              ClipOval(
                child: Image.network(
                  profileImageUrl,
                  width: 100,
                  height: 100,
                  fit: BoxFit.cover,
                ),
              ),
            const SizedBox(height: 16),
            Text(
              fullName ?? '',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
            const SizedBox(height: 32),
          ],
        ),
      ),
    );
  }
}
```

----------------------------------------

TITLE: Declarative Partitioning Example in PostgreSQL
DESCRIPTION: This snippet demonstrates the syntax for declarative partitioning in PostgreSQL, creating a partitioned table 'measurement' using the RANGE partitioning strategy on the 'logdate' column.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_3

LANGUAGE: markdown
CODE:
```
```markdown
CREATE TABLE measurement (
city_id int not null,
logdate date not null,
peaktemp int,
unitsales int
) PARTITION BY RANGE (logdate);
```
```

----------------------------------------

TITLE: Creating Supabase Vault Extension in SQL
DESCRIPTION: Shows how to create the Supabase Vault extension in a PostgreSQL database. This is the first step in setting up Vault for secure secret management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-supabase-vault.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create extension supabase_vault with schema vault;
```

----------------------------------------

TITLE: Creating a SolidJS Avatar Component with Supabase Storage Integration
DESCRIPTION: A complete SolidJS component that handles avatar image uploads and downloads using Supabase Storage. The component displays the current avatar, provides an upload button, and handles the file selection, uploading process, and display of the uploaded image.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_8

LANGUAGE: jsx
CODE:
```
import { Component, createEffect, createSignal, JSX } from 'solid-js'
import { supabase } from './supabaseClient'

interface Props {
  size: number
  url: string | null
  onUpload: (event: Event, filePath: string) => void
}

const Avatar: Component<Props> = (props) => {
  const [avatarUrl, setAvatarUrl] = createSignal<string | null>(null)
  const [uploading, setUploading] = createSignal(false)

  createEffect(() => {
    if (props.url) downloadImage(props.url)
  })

  const downloadImage = async (path: string) => {
    try {
      const { data, error } = await supabase.storage.from('avatars').download(path)
      if (error) {
        throw error
      }
      const url = URL.createObjectURL(data)
      setAvatarUrl(url)
    } catch (error) {
      if (error instanceof Error) {
        console.log('Error downloading image: ', error.message)
      }
    }
  }

  const uploadAvatar: JSX.EventHandler<HTMLInputElement, Event> = async (event) => {
    try {
      setUploading(true)

      const target = event.currentTarget
      if (!target?.files || target.files.length === 0) {
        throw new Error('You must select an image to upload.')
      }

      const file = target.files[0]
      const fileExt = file.name.split('.').pop()
      const fileName = `${Math.random()}.${fileExt}`
      const filePath = `${fileName}`

      const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)

      if (uploadError) {
        throw uploadError
      }

      props.onUpload(event, filePath)
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      setUploading(false)
    }
  }

  return (
    <div style={{ width: `${props.size}px` }} aria-live="polite">
      {avatarUrl() ? (
        <img
          src={avatarUrl()!}
          alt={avatarUrl() ? 'Avatar' : 'No image'}
          class="avatar image"
          style={{ height: `${props.size}px`, width: `${props.size}px` }}
        />
      ) : (
        <div
          class="avatar no-image"
          style={{ height: `${props.size}px`, width: `${props.size}px` }}
        />
      )}
      <div style={{ width: `${props.size}px` }}>
        <label class="button primary block" for="single">
          {uploading() ? 'Uploading ...' : 'Upload avatar'}
        </label>
        <span style="display:none">
          <input
            type="file"
            id="single"
            accept="image/*"
            onChange={uploadAvatar}
            disabled={uploading()}
          />
        </span>
      </div>
    </div>
  )
}

export default Avatar
```

----------------------------------------

TITLE: Implementing Sign In and Sign Out Actions in SvelteKit
DESCRIPTION: This snippet shows how to implement sign in and sign out actions in SvelteKit using Supabase authentication. It includes error handling and redirection after successful authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
import { fail, redirect } from '@sveltejs/kit'
import { AuthApiError } from '@supabase/supabase-js'

export const actions = {
  signin: async ({ request, locals: { supabase } }) => {
    const formData = await request.formData()

    const email = formData.get('email') as string
    const password = formData.get('password') as string

    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })

    if (error) {
      if (error instanceof AuthApiError && error.status === 400) {
        return fail(400, {
          error: 'Invalid credentials.',
          values: {
            email,
          },
        })
      }
      return fail(500, {
        error: 'Server error. Try again later.',
        values: {
          email,
        },
      })
    }

    redirect(303, '/dashboard')
  },

  signout: async ({ locals: { supabase } }) => {
    await supabase.auth.signOut()
    redirect(303, '/')
  },
}
```

----------------------------------------

TITLE: Cancelling specific idle PostgreSQL transactions
DESCRIPTION: This SQL command cancels a backend process for a specific transaction identified by its start time, useful for removing transactions that are blocking vacuum operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_12

LANGUAGE: jsx
CODE:
```
SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE xact_start = '<value from previous query>';
```

----------------------------------------

TITLE: Sign In with Facebook using Supabase
DESCRIPTION: This Kotlin snippet demonstrates how to sign in a user with Facebook using Supabase. It uses the `signInWith` method, passing `Facebook` as the provider to initiate the Facebook OAuth flow.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithFacebook() {
	supabase.auth.signInWith(Facebook)
}
```

----------------------------------------

TITLE: Updating Driver Location Marker in Flutter Google Maps
DESCRIPTION: Methods for updating the driver's marker position and rotation on Google Maps based on real-time location updates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_12

LANGUAGE: dart
CODE:
```
  void _updateDriverMarker(Driver driver) {
    setState(() {
      _markers.removeWhere((marker) => marker.markerId.value == 'driver');

      double rotation = 0;
      if (_previousDriverLocation != null) {
        rotation =
            _calculateRotation(_previousDriverLocation!, driver.location);
      }

      _markers.add(Marker(
        markerId: const MarkerId('driver'),
        position: driver.location,
        icon: _carIcon!,
        anchor: const Offset(0.5, 0.5),
        rotation: rotation,
      ));

      _previousDriverLocation = driver.location;
    });
  }

  void _adjustMapView({required LatLng target}) {
    if (_driver != null && _selectedDestination != null) {
      LatLngBounds bounds = LatLngBounds(
        southwest: LatLng(
          min(_driver!.location.latitude, target.latitude),
          min(_driver!.location.longitude, target.longitude),
        ),
        northeast: LatLng(
          max(_driver!.location.latitude, target.latitude),
          max(_driver!.location.longitude, target.longitude),
        ),
      );
      _mapController?.animateCamera(CameraUpdate.newLatLngBounds(bounds, 100));
    }
  }

  double _calculateRotation(LatLng start, LatLng end) {
    double latDiff = end.latitude - start.latitude;
    double lngDiff = end.longitude - start.longitude;
    double angle = atan2(lngDiff, latDiff);
    return angle * 180 / pi;
  }
```

----------------------------------------

TITLE: Indexing Vector Collection in Python
DESCRIPTION: Shows how to create an index on a vector collection to optimize query performance. This is a recommended practice after inserting data and before performing similarity searches.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
docs.index()
```

----------------------------------------

TITLE: Creating Postgres Function for Embeddings
DESCRIPTION: Creates a PL/pgSQL function that wraps the edge.exec call to generate embeddings. Takes input text as parameter and returns the embedding as JSONB data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_8

LANGUAGE: plpgsql
CODE:
```
CREATE OR REPLACE FUNCTION edge.generate_embedding(input_text TEXT) RETURNS JSONB AS $$
DECLARE
    response JSONB;
BEGIN
    -- Call the edge function to generate the embedding for the provided text
    response := edge.exec(
        format(
            $js$
            const session = new Supabase.ai.Session('gte-small');
            return await session.run(%L);
            $js$,
            input_text
        )
    );
    RETURN response->'response'->'data';
END;
$$ LANGUAGE plpgsql;
```

----------------------------------------

TITLE: Listening to Specific Table Events in Python with Supabase Realtime
DESCRIPTION: Establishes a Python channel to listen for UPDATE events on a specific table ('todos') in the public schema of a Supabase database. The code uses the 'table' parameter to specify which table to monitor.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_29

LANGUAGE: python
CODE:
```
changes = supabase.channel('db-changes').on_postgres_changes(
  "UPDATE",
  schema="public",
  table="todos",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Adding SUPABASE_ANON_KEY Secret to Cloudflare
DESCRIPTION: Command to create a specific secret for storing the Supabase anonymous key in Cloudflare Workers. This key is found in the Supabase dashboard under Settings > API.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/with-cloudflare-workers/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
npx wrangler secret put SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Creating Auto-Update Trigger Function
DESCRIPTION: Implements an auto-updating updated_at column using a PL/pgSQL function and trigger combination.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
CREATE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  new.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER handle_updated_at
  BEFORE UPDATE ON students
  FOR EACH ROW
  EXECUTE PROCEDURE set_updated_at();
```

----------------------------------------

TITLE: Advanced RLS testing example in PostgreSQL for Supabase
DESCRIPTION: This SQL snippet demonstrates a complete example of using test helpers to verify RLS policies in a Supabase project. It includes creating test users, inserting test data, and running various tests to ensure proper RLS enforcement.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
begin;
-- Assuming 000-setup-tests-hooks.sql file is present to use tests helpers
select plan(4);

-- Set up test data

-- Create test supabase users
select tests.create_supabase_user('user1@test.com');
select tests.create_supabase_user('user2@test.com');

-- Create test data
insert into public.todos (task, user_id) values
  ('User 1 Task 1', tests.get_supabase_uid('user1@test.com')),
  ('User 1 Task 2', tests.get_supabase_uid('user1@test.com')),
  ('User 2 Task 1', tests.get_supabase_uid('user2@test.com'));

-- Test as User 1
select tests.authenticate_as('user1@test.com');

-- Test 1: User 1 should only see their own todos
select results_eq(
  'select count(*) from todos',
  ARRAY[2::bigint],
  'User 1 should only see their 2 todos'
);

-- Test 2: User 1 can create their own todo
select lives_ok(
  $$insert into todos (task, user_id) values ('New Task', tests.get_supabase_uid('user1@test.com'))$$,
  'User 1 can create their own todo'
);

-- Test as User 2
select tests.authenticate_as('user2@test.com');

-- Test 3: User 2 should only see their own todos
select results_eq(
  'select count(*) from todos',
  ARRAY[1::bigint],
  'User 2 should only see their 1 todo'
);

-- Test 4: User 2 cannot modify User 1's todo
SELECT results_ne(
    $$ update todos set task = 'Hacked!' where user_id = tests.get_supabase_uid('user1@test.com') returning 1 $$,
    $$ values(1) $$,
    'User 2 cannot modify User 1 todos'
);

select * from finish();
rollback;
```

----------------------------------------

TITLE: Installing Dependencies for Supabase Svelte Project
DESCRIPTION: Command to install all necessary dependencies for the Supabase Svelte user management project.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/svelte-user-management/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install
```

----------------------------------------

TITLE: Defining Types for Supabase with TypeScript
DESCRIPTION: This TypeScript definition file extends global interfaces to include Supabase client types, ensuring accurate IntelliSense and type checking when accessing session and user data in a SvelteKit application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_6

LANGUAGE: TypeScript
CODE:
```
// src/app.d.ts

import { SupabaseClient, Session, User } from '@supabase/supabase-js'
import { Database } from './DatabaseDefinitions'

declare global {
  namespace App {
    interface Locals {
      supabase: SupabaseClient<Database>
      safeGetSession(): Promise<{ session: Session | null; user: User | null }>
    }
    interface PageData {
      session: Session | null
      user: User | null
    }
    // interface Error {}
    // interface Platform {}
  }
}
```

----------------------------------------

TITLE: Implementing Firebase Cloud Messaging (FCM) in Supabase Edge Function
DESCRIPTION: This edge function sends push notifications using Firebase Cloud Messaging. It retrieves the user's FCM token from the profiles table, generates a Google authentication token, and sends a notification with content from the newly inserted notification record.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/push-notifications.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { createClient } from 'npm:@supabase/supabase-js@2'
import { JWT } from 'npm:google-auth-library@9'
import serviceAccount from '../service-account.json' with { type: 'json' }

interface Notification {
  id: string
  user_id: string
  body: string
}

interface WebhookPayload {
  type: 'INSERT'
  table: string
  record: Notification
  schema: 'public'
}

const supabase = createClient(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
)

Deno.serve(async (req) => {
  const payload: WebhookPayload = await req.json()

  const { data } = await supabase
    .from('profiles')
    .select('fcm_token')
    .eq('id', payload.record.user_id)
    .single()

  const fcmToken = data!.fcm_token as string

  const accessToken = await getAccessToken({
    clientEmail: serviceAccount.client_email,
    privateKey: serviceAccount.private_key,
  })

  const res = await fetch(
    `https://fcm.googleapis.com/v1/projects/${serviceAccount.project_id}/messages:send`,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${accessToken}`,
      },
      body: JSON.stringify({
        message: {
          token: fcmToken,
          notification: {
            title: `Notification from Supabase`,
            body: payload.record.body,
          },
        },
      }),
    }
  )

  const resData = await res.json()
  if (res.status < 200 || 299 < res.status) {
    throw resData
  }

  return new Response(JSON.stringify(resData), {
    headers: { 'Content-Type': 'application/json' },
  })
})

const getAccessToken = ({
  clientEmail,
  privateKey,
}: {
  clientEmail: string
  privateKey: string
}): Promise<string> => {
  return new Promise((resolve, reject) => {
    const jwtClient = new JWT({
      email: clientEmail,
      key: privateKey,
      scopes: ['https://www.googleapis.com/auth/firebase.messaging'],
    })
    jwtClient.authorize((err, tokens) => {
      if (err) {
        reject(err)
        return
      }
      resolve(tokens!.access_token!)
    })
  })
}
```

----------------------------------------

TITLE: Listening to all Postgres schema changes in Kotlin
DESCRIPTION: This Kotlin snippet configures a Supabase client to listen for any database changes in the 'public' schema using a flow. It logs any payload received. The channel cannot be named 'realtime'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_8

LANGUAGE: Kotlin
CODE:
```
val myChannel = supabase.channel("schema-db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction>(schema = "public")

changes
    .onEach {
        when(it) { //You can also check for <is PostgresAction.Insert>, etc.. manually
            is HasRecord -> println(it.record)
            is HasOldRecord -> println(it.oldRecord)
            else -> println(it)
        }
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

----------------------------------------

TITLE: Sending Queue Messages with Optional Delay
DESCRIPTION: Function to add a message to a specified queue with an optional visibility delay. Takes queue name, message payload (JSONB), and optional sleep seconds as parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/api.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
pgmq_public.send(queue_name text, message jsonb, sleep_seconds integer)
```

----------------------------------------

TITLE: PostgreSQL Audit Tracking Implementation Functions
DESCRIPTION: Core implementation of enable_tracking and disable_tracking functions that manage audit triggers. The enable_tracking function creates a trigger for insert, update, and delete operations, while disable_tracking removes the trigger. Includes validation for primary key requirement.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
create or replace function audit.enable_tracking(regclass)
    returns void
    volatile
    security definer
    language plpgsql
as $$
declare
    statement_row text = format('
        create trigger audit_i_u_d
            before insert or update or delete
            on %I
            for each row
            execute procedure audit.insert_update_delete_trigger();',
        $1
    );

    pkey_cols text[] = audit.primary_key_columns($1);
begin
    if pkey_cols = array[]::text[] then
        raise exception 'Table % can not be audited because it has no primary key', $1;
    end if;

    if not exists(select 1 from pg_trigger where tgrelid = $1 and tgname = 'audit_i_u_d') then
        execute statement_row;
    end if;
end;
$$;

create or replace function audit.disable_tracking(regclass)
    returns void
    volatile
    security definer
    language plpgsql
as $$
declare
    statement_row text = format(
        'drop trigger if exists audit_i_u_d on %I;',
        $1
    );
begin
    execute statement_row;
end;
$$;
```

----------------------------------------

TITLE: Receiving Broadcast Messages
DESCRIPTION: Implementation of message reception handlers for broadcast messages on a specific channel
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const myChannel = supabase.channel('test-channel')

function messageReceived(payload) {
  console.log(payload)
}

myChannel
  .on(
    'broadcast',
    { event: 'shout' },
    (payload) => messageReceived(payload)
  )
  .subscribe()
```

LANGUAGE: dart
CODE:
```
final myChannel = supabase.channel('test-channel');

void messageReceived(payload) {
  print(payload);
}

myChannel
    .onBroadcast(
        event: 'shout',
        callback: (payload) => messageReceived(payload)
    )
    .subscribe();
```

----------------------------------------

TITLE: Creating a Postgres Trigger Function for Broadcast in SQL
DESCRIPTION: This SQL code defines a function that broadcasts changes to a specific topic when a record is created, updated, or deleted in a table. It utilizes Postgres's native trigger variables and the `realtime.broadcast_changes()` function provided by Supabase Realtime.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create or replace function public.your_table_changes()
returns trigger
language plpgsql
as $$
begin
  perform realtime.broadcast_changes(
    'topic:' || coalesce(NEW.topic, OLD.topic) ::text, -- topic - the topic to which we're broadcasting
    TG_OP,                                             -- event - the event that triggered the function
    TG_OP,                                             -- operation - the operation that triggered the function
    TG_TABLE_NAME,                                     -- table - the table that caused the trigger
    TG_TABLE_SCHEMA,                                   -- schema - the schema of the table that caused the trigger
    NEW,                                               -- new record - the record after the change
    OLD                                                -- old record - the record before the change
  );
  return null;
end;
$$;
```

----------------------------------------

TITLE: Implementing CRUD Operations with Legend-State and Supabase
DESCRIPTION: Shows how to add new todos and toggle their completion status using Legend-State. Uses UUID generation for client-side ID creation before syncing with Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_9

LANGUAGE: ts
CODE:
```
// [...]
import 'react-native-get-random-values'
import { v4 as uuidv4 } from 'uuid'
// [...]

// Provide a function to generate ids locally
const generateId = () => uuidv4()

export function addTodo(text: string) {
  const id = generateId()
  // Add keyed by id to the todos$ observable to trigger a create in Supabase
  todos$[id].assign({
    id,
    text,
  })
}

export function toggleDone(id: string) {
  todos$[id].done.set((prev) => !prev)
}
```

----------------------------------------

TITLE: Starting Function Server in Debug Mode - Shell Command
DESCRIPTION: Command to start the Supabase Functions server in inspection mode with breakpoint at first line. This enables debugging through Chrome DevTools.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/debugging-tools.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
supabase functions serve --inspect-mode brk
```

----------------------------------------

TITLE: Cleanup Anonymous Users in Supabase Database with SQL
DESCRIPTION: A SQL snippet to delete anonymous users from the Supabase database who were created over 30 days ago. This helps manage database size by removing outdated, anonymous user records. Suitable for use in automated maintenance tasks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_17

LANGUAGE: sql
CODE:
```
-- deletes anonymous users created more than 30 days ago
delete from auth.users
where is_anonymous is true and created_at < now() - interval '30 days';
```

----------------------------------------

TITLE: Reindexing a Single Index Concurrently in PostgreSQL
DESCRIPTION: Rebuilds a specific index without blocking concurrent operations. This is useful for maintaining index performance over time without locking the table for writes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
reindex index concurrently idx_persons_age;
```

----------------------------------------

TITLE: Full Text Search on Description Using Kotlin
DESCRIPTION: Kotlin implementation using Supabase client to perform a full text search on the books table, searching the description column for the word 'big'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_17

LANGUAGE: kotlin
CODE:
```
val data = supabase.from("books").select {
    filter {
        textSearch("description", "'big'", TextSearchType.NONE)
    }
}
```

----------------------------------------

TITLE: Querying Many-to-Many Relationships via REST URL
DESCRIPTION: REST URL example showing how to query teams with their related users directly using the Supabase REST API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_16

LANGUAGE: bash
CODE:
```
GET https://[REF].supabase.co/rest/v1/teams?select=id,team_name,users(id,name)
```

----------------------------------------

TITLE: Detecting Viewport Intersection for Infinite Scroll
DESCRIPTION: Implements logic to check if the bottom of the tickets container intersects with the bottom of the viewport, triggering the loading of more tickets.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { useRef, useState } from 'react'

// ...

const containerRef = useRef(null)
const [offset, setOffset] = useState(1)
const [isInView, setIsInView] = useState(false)

const handleScroll = (container) => {
  if (containerRef.current && typeof window !== 'undefined') {
    const container = containerRef.current
    const { bottom } = container.getBoundingClientRect()
    const { innerHeight } = window
    setIsInView((prev) => bottom <= innerHeight)
  }
}

useEffect(() => {
  if (isInView) {
    loadMoreUsers(offset)
  }
}, [isInView])

return <div ref={containerRef}>{/* List of loaded tickets */}</div>
```

----------------------------------------

TITLE: Creating HTML Template for Login Page with Reactive Forms
DESCRIPTION: HTML template for the login page that includes a reactive form with email and password inputs, validation error messages, and buttons for various authentication methods including magic link, password reset, and registration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_12

LANGUAGE: html
CODE:
```
<ion-header>
  <ion-toolbar color="primary">
    <ion-title>Supa Chat</ion-title>
  </ion-toolbar>
</ion-header>

<ion-content scrollY="false">
  <ion-card>
    <ion-card-content>
      <form (ngSubmit)="login()" [formGroup]="credentials">
        <ion-item>
          <ion-label position="stacked">Your Email</ion-label>
          <ion-input
            type="email"
            inputmode="email"
            placeholder="Email"
            formControlName="email"
          ></ion-input>
          <ion-note slot="error" *ngIf="(email.dirty || email.touched) && email.errors"
            >Please insert your email</ion-note
          >
        </ion-item>
        <ion-item>
          <ion-label position="stacked">Password</ion-label>
          <ion-input type="password" placeholder="Password" formControlName="password"></ion-input>
          <ion-note slot="error" *ngIf="(password.dirty || password.touched) && password.errors"
            >Please insert your password</ion-note
          >
        </ion-item>
        <ion-button type="submit" expand="block" strong="true" [disabled]="!credentials.valid"
          >Sign in</ion-button
        >

        <div class="ion-margin-top">
          <ion-button
            type="button"
            expand="block"
            color="primary"
            fill="outline"
            routerLink="register"
          >
            <ion-icon name="person-outline" slot="start"></ion-icon>
            Create Account
          </ion-button>

          <ion-button type="button" expand="block" color="secondary" (click)="forgotPw()">
            <ion-icon name="key-outline" slot="start"></ion-icon>
            Forgot password?
          </ion-button>

          <ion-button type="button" expand="block" color="tertiary" (click)="getMagicLink()">
            <ion-icon name="mail-outline" slot="start"></ion-icon>
            Get a Magic Link
          </ion-button>
          <ion-button type="button" expand="block" color="warning" routerLink="groups">
            <ion-icon name="arrow-forward" slot="start"></ion-icon>
            Start without account
          </ion-button>
        </div>
      </form>
    </ion-card-content>
  </ion-card>
</ion-content>
```

----------------------------------------

TITLE: Signing In with Discord - Flutter
DESCRIPTION: This Flutter snippet demonstrates how to sign in users using Discord OAuth through the Supabase client. The `signInWithOAuth()` method is called with `OAuthProvider.discord` to initiate the login process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-discord.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signInWithDiscord() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.discord,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}
```

----------------------------------------

TITLE: Creating Tables with Multiple Foreign Keys in PostgreSQL
DESCRIPTION: SQL schema for tracking employee shift check-ins and check-outs with multiple foreign key references to the same table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_17

LANGUAGE: sql
CODE:
```
-- Employees
create table users (
  "id" serial primary key,
  "name" text
);

-- Badge scans
create table scans (
  "id" serial primary key,
  "user_id" int references users,
  "badge_scan_time" timestamp
);

-- Work shifts
create table shifts (
  "id" serial primary key,
  "user_id" int references users,
  "scan_id_start" int references scans, -- clocking in
  "scan_id_end" int references scans, -- clocking out
  "attendance_status" text
);
```

----------------------------------------

TITLE: Input JSON Structure for SMS Hook
DESCRIPTION: Sample JSON structure showing the user and SMS data passed to the SMS hook, including user authentication details and OTP information.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "user": {
    "id": "6481a5c1-3d37-4a56-9f6a-bee08c554965",
    "aud": "authenticated",
    "role": "authenticated",
    "email": "",
    "phone": "+1333363128",
    "phone_confirmed_at": "2024-05-13T11:52:48.157306Z",
    "confirmation_sent_at": "2024-05-14T12:31:52.824573Z",
    "confirmed_at": "2024-05-13T11:52:48.157306Z",
    "phone_change_sent_at": "2024-05-13T11:47:02.183064Z",
    "last_sign_in_at": "2024-05-13T11:52:48.162518Z",
    "app_metadata": {
      "provider": "phone",
      "providers": ["phone"]
    },
    "user_metadata": {},
    "identities": [
      {
        "identity_id": "3be5e552-65aa-41d9-9db9-2a502f845459",
        "id": "6481a5c1-3d37-4a56-9f6a-bee08c554965",
        "user_id": "6481a5c1-3d37-4a56-9f6a-bee08c554965",
        "identity_data": {
          "email_verified": false,
          "phone": "+1612341244428",
          "phone_verified": true,
          "sub": "6481a5c1-3d37-4a56-9f6a-bee08c554965"
        },
        "provider": "phone",
        "last_sign_in_at": "2024-05-13T11:52:48.155562Z",
        "created_at": "2024-05-13T11:52:48.155599Z",
        "updated_at": "2024-05-13T11:52:48.159391Z"
      }
    ],
    "created_at": "2024-05-13T11:45:33.7738Z",
    "updated_at": "2024-05-14T12:31:52.82475Z",
    "is_anonymous": false
  },
  "sms": {
    "otp": "561166"
  }
}
```

----------------------------------------

TITLE: Creating a Collection with Hugging Face Text Embedding Adapter in Python
DESCRIPTION: This snippet demonstrates how to initialize a vector collection with adapter functionality in the Supabase Python client. It configures a ParagraphChunker to split large text into smaller pieces and a TextEmbedding adapter that uses the Hugging Face 'Supabase/gte-small' model to transform text into vector embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import vecs
from vecs.adapter import Adapter, ParagraphChunker, TextEmbedding

vx = vecs.create_client("postgresql://<user>:<password>@<host>:<port>/<db_name>")

# create a new collection with an associated adapter
docs = vx.get_or_create_collection(
    name="docs",
    # here comes the new part
    adapter=Adapter(
        [
            ParagraphChunker(skip_during_query=True),
            TextEmbedding(model='Supabase/gte-small'),
        ]
    )
)
```

----------------------------------------

TITLE: Configuring Third-Party Auth in Supabase using TOML
DESCRIPTION: This snippet shows how to configure third-party authentication with Auth0 in a Supabase project using TOML. It involves updating the 'supabase/config.toml' file to enable Auth0 support by setting tenant and tenant region details.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/auth0.mdx#2025-04-21_snippet_4

LANGUAGE: toml
CODE:
```
[auth.third_party.auth0]
enabled = true
tenant = "<id>"
tenant_region = "<region>" # if your tenant has a region
```

----------------------------------------

TITLE: Deploying OpenAI Function to Supabase
DESCRIPTION: Commands to deploy the OpenAI function and set up environment secrets in Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/openai/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase functions deploy --no-verify-jwt openai
supabase secrets set --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Registering Pre-Request Security Function
DESCRIPTION: SQL command that configures a custom security function to run before each Data API request by setting the pgrst.db_pre_request parameter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
alter role authenticator
  set pgrst.db_pre_request = 'public.check_request';
```

----------------------------------------

TITLE: Link Email to Anonymous User in JavaScript
DESCRIPTION: Updates an anonymous user to add an email address and password in Supabase. This converts an anonymous user to a permanent user by linking an email identity. The email must be verified before setting a password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { data: updateEmailData, error: updateEmailError } = await supabase.auth.updateUser({
  email: 'valid.email@supabase.io',
})

// verify the user's email by clicking on the email change link
// or entering the 6-digit OTP sent to the email address

// once the user has been verified, update the password
const { data: updatePasswordData, error: updatePasswordError } = await supabase.auth.updateUser({
  password: 'password',
})
```

----------------------------------------

TITLE: Installing index_advisor Postgres Extension
DESCRIPTION: Creates the index_advisor extension in a Postgres database. This is required before using the extension to get index recommendations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/index_advisor.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create extension index_advisor;
```

----------------------------------------

TITLE: Implementing Login Page in Flutter with Supabase
DESCRIPTION: A Flutter widget that handles user login using Supabase authentication. It provides a simple form interface for email and password input with basic error handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_13

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:my_chat_app/utils/constants.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({Key? key}) : super(key: key);

  static Route<void> route() {
    return MaterialPageRoute(
        builder: (context) => const LoginPage());
  }

  @override
  _LoginPageState createState() => _LoginPageState();
}

// ... rest of the LoginPage implementation
```

----------------------------------------

TITLE: Creating Custom Confirmation Link in HTML
DESCRIPTION: A custom email link template that helps avoid issues with email prefetching by redirecting users to a confirmation page rather than using the direct confirmation URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-templates.mdx#2025-04-21_snippet_0

LANGUAGE: html
CODE:
```
<a href="{{ .SiteURL }}/confirm-signup?confirmation_url={{ .ConfirmationURL }}"
  >Confirm your signup
</a>
```

----------------------------------------

TITLE: Installing Supabase CLI on Windows
DESCRIPTION: Install the Supabase CLI using Scoop package manager on Windows.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_1

LANGUAGE: powershell
CODE:
```
scoop bucket add supabase https://github.com/supabase/scoop-bucket.git
scoop install supabase
```

----------------------------------------

TITLE: Creating Search Indexes for Full-text and Vector Columns
DESCRIPTION: SQL commands to create GIN index for full-text search and HNSW index for vector search to optimize query performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- Create an index for the full-text search
create index on documents using gin(fts);

-- Create an index for the semantic vector search
create index on documents using hnsw (embedding vector_ip_ops);
```

----------------------------------------

TITLE: Magic Link Authentication Provider for Supabase
DESCRIPTION: Custom auth provider implementation that uses Supabase's magic link (OTP) authentication instead of password-based login. Handles login, logout, session checking, and user identity retrieval.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { AuthBindings } from '@refinedev/core'

import { supabaseClient } from './utility'

const authProvider: AuthBindings = {
  login: async ({ email }) => {
    try {
      const { error } = await supabaseClient.auth.signInWithOtp({ email })

      if (!error) {
        alert('Check your email for the login link!')
        return {
          success: true,
        }
      }

      throw error
    } catch (e: any) {
      alert(e.message)
      return {
        success: false,
        e,
      }
    }
  },
  logout: async () => {
    const { error } = await supabaseClient.auth.signOut()

    if (error) {
      return {
        success: false,
        error,
      }
    }

    return {
      success: true,
      redirectTo: '/',
    }
  },
  onError: async (error) => {
    console.error(error)
    return { error }
  },
  check: async () => {
    try {
      const { data } = await supabaseClient.auth.getSession()
      const { session } = data

      if (!session) {
        return {
          authenticated: false,
          error: {
            message: 'Check failed',
            name: 'Session not found',
          },
          logout: true,
          redirectTo: '/login',
        }
      }
    } catch (error: any) {
      return {
        authenticated: false,
        error: error || {
          message: 'Check failed',
          name: 'Not authenticated',
        },
        logout: true,
        redirectTo: '/login',
      }
    }

    return {
      authenticated: true,
    }
  },
  getIdentity: async () => {
    const { data } = await supabaseClient.auth.getUser()

    if (data?.user) {
      return {
        ...data.user,
        name: data.user.email,
      }
    }

    return null
  },
}

export default authProvider
```

----------------------------------------

TITLE: Setting Up Environment Variables
DESCRIPTION: Creating an environment file to store Supabase API URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Setting Up Environment Variables for Supabase
DESCRIPTION: Configuration of environment variables in a .env.local file to store Supabase URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=YOUR_SUPABASE_URL
NEXT_PUBLIC_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Next.js Middleware for Authentication
DESCRIPTION: This TypeScript snippet shows how to implement Next.js middleware to protect routes. It checks if a user is signed in and redirects to the home page if not, while allowing requests from users whose email ends with '@gmail.com'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  // We need to create a response and hand it to the supabase client to be able to modify the response headers.
  const res = NextResponse.next()
  // Create authenticated Supabase Client.
  const supabase = createMiddlewareClient({ req, res })
  // Check if we have a session
  const {
    data: { user },
  } = await supabase.auth.getUser()

  // Check auth condition
  if (user?.email?.endsWith('@gmail.com')) {
    // Authentication successful, forward request to protected route.
    return res
  }

  // Auth condition not met, redirect to home page.
  const redirectUrl = req.nextUrl.clone()
  redirectUrl.pathname = '/' 
  redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname)
  return NextResponse.redirect(redirectUrl)
}

export const config = {
  matcher: '/middleware-protected/:path*',
}
```

----------------------------------------

TITLE: Specifying Content Type for Uploads in Supabase Storage with Python
DESCRIPTION: This snippet shows how to specify the content type when uploading a file to Supabase Storage using Python. It uses the 'content-type' option to set the MIME type.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
response = supabase.storage.from_('bucket_name').upload('file_path', file, {
  'content-type': 'image/jpeg',
})
```

----------------------------------------

TITLE: Overwriting Files in Supabase Storage with Swift
DESCRIPTION: This code demonstrates how to overwrite an existing file in Supabase Storage using Swift. It uses the 'upsert' option in FileOptions to allow file overwriting.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_7

LANGUAGE: swift
CODE:
```
import Supabase

// Create Supabase client
let supabase = SupabaseClient(supabaseURL: URL(string: "your_project_url")!, supabaseKey: "your_supabase_api_key")

try await supabase.storage.from("bucket_name")
  .upload(
    path: "file_path",
    file: file,
    options: FileOptions(
      upsert: true
    )
  )
```

----------------------------------------

TITLE: Rendering App with MFA in React
DESCRIPTION: This React component conditionally renders the MFA challenge screen or the main app based on the user's authenticator assurance level (AAL). It utilizes Supabase's `getAuthenticatorAssuranceLevel()` API to determine if an MFA step is necessary, updating the component's state accordingly. Dependencies include Supabase's authentication library and React hooks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/phone.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
function AppWithMFA() {
  const [readyToShow, setReadyToShow] = useState(false)
  const [showMFAScreen, setShowMFAScreen] = useState(false)

  useEffect(() => {
    ;(async () => {
      try {
        const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()
        if (error) {
          throw error
        }

        console.log(data)

        if (data.nextLevel === 'aal2' && data.nextLevel !== data.currentLevel) {
          setShowMFAScreen(true)
        }
      } finally {
        setReadyToShow(true)
      }
    })()
  }, [])

  if (readyToShow) {
    if (showMFAScreen) {
      return <AuthMFA />
    }

    return <App />
  }

  return <></>
}
```

----------------------------------------

TITLE: Generating Shortened OpenAI Embeddings
DESCRIPTION: Creates an embedding using OpenAI's text-embedding-3-large model with a specified reduced dimension size of 1024.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { OpenAI } from 'openai'

const openai = new OpenAI()

const {
  data: [{ embedding }],
} = await openai.embeddings.create({
  model: 'text-embedding-3-large',
  input: 'The cat chases the mouse',
  dimensions: 1024, // Generate an embedding with 1024 dimensions
})

console.log(embedding.length) // 1024
```

----------------------------------------

TITLE: Querying Postgres Logs by Role in SQL
DESCRIPTION: SQL query to filter Postgres logs by a specific role using the parsed.user_name field. This is useful for retrieving logs made by specific roles or servers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
-- find events based on role/server
... query
where
  -- find events from the relevant role
  parsed.user_name = '<ROLE>'
...
```

----------------------------------------

TITLE: Adding Vector Embeddings to Collection
DESCRIPTION: Inserts vector embeddings with metadata into the 'docs' collection using the upsert() method
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vecs-python-client.mdx#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import vecs

# create vector store client
docs = vecs.get_or_create_collection(name="docs", dimension=3)

# a collection of vectors with 3 dimensions
vectors=[
  ("vec0", [0.1, 0.2, 0.3], {"year": 1973}),
  ("vec1", [0.7, 0.8, 0.9], {"year": 2012})
]

# insert our vectors
docs.upsert(vectors=vectors)
```

----------------------------------------

TITLE: Connecting to Supabase Database
DESCRIPTION: Establishes connection to a Supabase database using the Vecs client and a Postgres connection string.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/google-colab.mdx#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import vecs

DB_CONNECTION = "postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)
```

----------------------------------------

TITLE: Sign In Anonymously with Kotlin in Supabase
DESCRIPTION: Creates an anonymous user authentication session using the Supabase Kotlin SDK. This allows users to access authenticated features without providing personal information.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
supabase.auth.signInAnonymously()
```

----------------------------------------

TITLE: Creating Semantic Search Function with Inner Product
DESCRIPTION: SQL function to perform semantic search using negative inner product operator for normalized vectors
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create or replace function match_documents (
  query_embedding vector(512),
  match_threshold float,
  match_count int
)
returns setof documents
language sql
as $$
  select *
  from documents
  where documents.embedding <#> query_embedding < -match_threshold
  order by documents.embedding <#> query_embedding asc
  limit least(match_count, 200);
$$;
```

----------------------------------------

TITLE: Setting Up Supabase Environment Variables in Next.js
DESCRIPTION: Creates a .env.local file with Supabase URL and anonymous key for a Next.js project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_12

LANGUAGE: text
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=<your_supabase_project_url>
NEXT_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>
```

----------------------------------------

TITLE: Creating User Account Management Component
DESCRIPTION: SolidJS component that allows authenticated users to view and edit their profile information, including username, website, and avatar URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import { AuthSession } from '@supabase/supabase-js'
import { Component, createEffect, createSignal } from 'solid-js'
import { supabase } from './supabaseClient'

interface Props {
  session: AuthSession
}

const Account: Component<Props> = ({ session }) => {
  const [loading, setLoading] = createSignal(true)
  const [username, setUsername] = createSignal<string | null>(null)
  const [website, setWebsite] = createSignal<string | null>(null)
  const [avatarUrl, setAvatarUrl] = createSignal<string | null>(null)

  createEffect(() => {
    getProfile()
  })

  const getProfile = async () => {
    try {
      setLoading(true)
      const { user } = session

      const { data, error, status } = await supabase
        .from('profiles')
        .select(`username, website, avatar_url`)
        .eq('id', user.id)
        .single()

      if (error && status !== 406) {
        throw error
      }

      if (data) {
        setUsername(data.username)
        setWebsite(data.website)
        setAvatarUrl(data.avatar_url)
      }
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      setLoading(false)
    }
  }

  const updateProfile = async (e: Event) => {
    e.preventDefault()

    try {
      setLoading(true)
      const { user } = session

      const updates = {
        id: user.id,
        username: username(),
        website: website(),
        avatar_url: avatarUrl(),
        updated_at: new Date().toISOString(),
      }

      const { error } = await supabase.from('profiles').upsert(updates)

      if (error) {
        throw error
      }
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <div aria-live="polite">
      <form onSubmit={updateProfile} class="form-widget">
        <div>Email: {session.user.email}</div>
        <div>
          <label for="username">Name</label>
          <input
            id="username"
            type="text"
            value={username() || ''}
            onChange={(e) => setUsername(e.currentTarget.value)}
          />
        </div>
        <div>
          <label for="website">Website</label>
          <input
            id="website"
            type="text"
            value={website() || ''}
            onChange={(e) => setWebsite(e.currentTarget.value)}
          />
        </div>
        <div>
          <button type="submit" class="button primary block" disabled={loading()}>
            {loading() ? 'Saving ...' : 'Update profile'}
          </button>
        </div>
        <button type="button" class="button block" onClick={() => supabase.auth.signOut()}>
          Sign Out
        </button>
      </form>
    </div>
  )
}

export default Account
```

----------------------------------------

TITLE: Initializing Supabase Client with KotlinX Serialization
DESCRIPTION: This Kotlin snippet demonstrates how to initialize the Supabase client with KotlinX Serialization, including the option to provide a custom Json instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_7

LANGUAGE: kotlin
CODE:
```
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    //Already the default serializer, but you can provide a custom Json instance (optional):
    defaultSerializer = KotlinXSerializer(Json {
        //apply your custom config
    })
}
```

----------------------------------------

TITLE: Initializing S3 Client with Session Token in JavaScript
DESCRIPTION: This snippet shows how to initialize an S3 client using the AWS SDK for JavaScript, authenticating with a session token. It requires the `@aws-sdk/client-s3` package and a valid JWT token obtained from Supabase Auth. Replace `project_region` and `project_ref` with your actual Supabase project credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/s3/authentication.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { S3Client } from '@aws-sdk/client-s3'

const {
  data: { session },
} = await supabase.auth.getSession()

const client = new S3Client({
  forcePathStyle: true,
  region: 'project_region',
  endpoint: 'https://project_ref.supabase.co/storage/v1/s3',
  credentials: {
    accessKeyId: 'project_ref',
    secretAccessKey: 'anonKey',
    sessionToken: session.access_token,
  },
})
```

----------------------------------------

TITLE: Querying Vector Database with Text Input in Python
DESCRIPTION: This snippet shows how to perform a similarity search query using plain text input. The adapter automatically converts the text query into a vector embedding before searching the database for similar content.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
# Search by text
docs.query(data="how many ping pong balls fit in a Boeing ...")

# Results: [...]
```

----------------------------------------

TITLE: Creating a Postgres Function to List Objects
DESCRIPTION: Defines a Postgres function to efficiently list objects in a storage bucket, providing a customizable interface to limit, offset, and filter by prefix. Requires a Postgres database with Supabase's storage schema. Inputs include `bucketid`, `prefix`, `limits`, and `offsets`. Outputs a table with object metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/production/scaling.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create or replace function list_objects(\n    bucketid text,\n    prefix text,\n    limits int default 100,\n    offsets int default 0\n) returns table (\n    name text,\n    id uuid,\n    updated_at timestamptz,\n    created_at timestamptz,\n    last_accessed_at timestamptz,\n    metadata jsonb\n) as $$\nbegin\n    return query SELECT\n        objects.name,\n        objects.id,\n        objects.updated_at,\n        objects.created_at,\n        objects.last_accessed_at,\n        objects.metadata\n    FROM storage.objects\n    WHERE objects.name like prefix || '%'\n    AND bucket_id = bucketid\n    ORDER BY name ASC\n    LIMIT limits\n    OFFSET offsets;\nend;\n$$ language plpgsql stable;
```

----------------------------------------

TITLE: Linking OAuth Identity with Python
DESCRIPTION: Example showing how to link a Google OAuth identity using the Supabase Python client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
response = supabase.auth.link_identity({'provider': 'google'})
```

----------------------------------------

TITLE: Initiating Sign-In with SSO (Dart)
DESCRIPTION: This Dart snippet demonstrates how to initiate a sign-in process using a SAML 2.0 identity provider registered for a specific domain using Supabase Auth. It uses the `signInWithSSO` method to start the SP Initiated Flow. The Supabase client must be initialized before using this function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
"await supabase.auth.signInWithSSO(
  domain: 'company.com',
);"
```

----------------------------------------

TITLE: Querying One-to-Many Relationships in Python
DESCRIPTION: Python example showing how to query orchestral sections with their related instruments using Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
data = supabase.from_('orchestral_sections').select('id, name, instruments(id, name)').execute()
```

----------------------------------------

TITLE: Configuring Supabase Client for Client-Side with Cookies
DESCRIPTION: Configuration code to set up Supabase client to use cookies instead of localStorage for session management in the browser. This enables consistent authentication between server and client environments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    flowType: 'pkce',
    autoRefreshToken: true,
    detectSessionInUrl: true,
    persistSession: true,
    storage: {
      getItem: async (key: string) => {
        return parse(document.cookie[key])
      },
      setItem: async (key: string, value: string) => {
        document.cookie = serialize(key, value)
      },
    },
    removeItem: async (key: string) => {
      document.cookie = serialize(key, '', {
        maxAge: 0,
      })
    },
  },
})
```

----------------------------------------

TITLE: Simple POST Request Using the HTTP Extension
DESCRIPTION: Makes a POST request to create a new resource on an external API. The example sends JSON data with a specified content type and returns the response status and content.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/http.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select
  "status", "content"::jsonb
from
  http_post(
    'https://jsonplaceholder.typicode.com/posts',
    '{ "title": "foo", "body": "bar", "userId": 1 }',
    'application/json'
  );
```

----------------------------------------

TITLE: Querying GraphQL from SQL in Supabase
DESCRIPTION: Demonstrates how to execute a GraphQL query using the graphql.resolve function within a SQL statement. This query retrieves account information including nested address data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select graphql.resolve($$
    {
      accountCollection(first: 1) {
        edges {
          node {
            id
            firstName
            address {
              countryCode
            }
          }
        }
      }
    }
$$);
```

----------------------------------------

TITLE: Using signOut Method in Next.js with Supabase
DESCRIPTION: This snippet shows how to use the signOut method from supabase-js v2 in a Next.js component. It demonstrates logging out a user and redirecting to the home page.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_15

LANGUAGE: jsx
CODE:
```
<button
  onClick={async () => {
    await supabaseClient.auth.signOut()
    router.push('/')
  }}
>
  Logout
</button>
```

----------------------------------------

TITLE: Creating Environment Variables File for Supabase Credentials
DESCRIPTION: Sets up a .env file with environment variables for the Supabase URL and anonymous key, which are required for connecting to the Supabase backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
PUBLIC_SUPABASE_URL="YOUR_SUPABASE_URL"
PUBLIC_SUPABASE_ANON_KEY="YOUR_SUPABASE_KEY"
```

----------------------------------------

TITLE: Staging Deployment GitHub Action
DESCRIPTION: GitHub Actions workflow for deploying database migrations to staging environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_6

LANGUAGE: yaml
CODE:
```
name: Deploy Migrations to Staging

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.STAGING_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: supabase db push
```

----------------------------------------

TITLE: Scheduling Daily Vacuum in Supabase
DESCRIPTION: This SQL snippet schedules a daily vacuum operation at 3:00 AM (GMT) using the cron.schedule function. It demonstrates how to schedule a maintenance task in Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
select cron.schedule('nightly-vacuum', '0 3 * * *', 'VACUUM');
```

----------------------------------------

TITLE: Updating SAML Connection (Supabase CLI)
DESCRIPTION: This command updates the configuration of an identity provider in Supabase Auth using the Supabase CLI. It requires specifying the provider ID and the project reference. Use `--help` to see all available flags for updating the connection settings, such as cryptographic keys, metadata URL, domains, and attribute mappings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_14

LANGUAGE: bash
CODE:
```
"supabase sso update <provider-id> --project-ref <your-project>"
```

----------------------------------------

TITLE: Disabling PGAudit Monitoring
DESCRIPTION: SQL commands to disable both object level and global/user level logging for specific roles
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
  -- Use to disable object level logging
  alter role "<role name>" set pgaudit.role to '';

  -- Use to disable global and user level logging
  alter role "<role name>" set pgaudit.log to 'none';
```

----------------------------------------

TITLE: Realtime Chat with Initial Messages in Next.js
DESCRIPTION: Extends the basic usage by querying initial messages via a custom hook, allowing the RealtimeChat component to display pre-existing messages. Requires '@/hooks/use-messages-query' for fetching messages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-chat.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { RealtimeChat } from '@/components/realtime-chat'
import { useMessagesQuery } from '@/hooks/use-messages-query'

export default function ChatPage() {
  const { data: messages } = useMessagesQuery()

  return <RealtimeChat roomName="my-chat-room" username="john_doe" messages={messages} />
}
```

----------------------------------------

TITLE: Querying Many-to-Many Relationships in Dart
DESCRIPTION: Dart example showing how to query teams with their related users through a many-to-many relationship.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_11

LANGUAGE: dart
CODE:
```
final data = await supabase.from('teams').select('id, team_name, users(id, name)');
```

----------------------------------------

TITLE: Linking OAuth Identity with Dart
DESCRIPTION: Example showing how to link a Google OAuth identity using the Supabase Dart client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
await supabase.auth.linkIdentity(OAuthProvider.google);
```

----------------------------------------

TITLE: Setting Environment Variables for Hono
DESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env file for a Hono application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_12

LANGUAGE: bash
CODE:
```
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key
```

----------------------------------------

TITLE: Image Resizing with Supabase Storage JavaScript API
DESCRIPTION: Demonstrates how to use the Supabase Storage API to get a public URL for a resized image with specified dimensions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-13-storage-image-resizing-smart-cdn.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
supabase.storage.from('bucket').getPublicUrl('image.jpg', {
  transform: {
    width: 500,
    height: 600,
  },
})
```

----------------------------------------

TITLE: Altering Database-Level Setting in Supabase Postgres
DESCRIPTION: This SQL command demonstrates how to alter a database-level setting, specifically setting the statement_timeout to 60 seconds for the 'postgres' database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
alter database "postgres" set "statement_timeout" TO '60s';
```

----------------------------------------

TITLE: Defining AddProductViewModel for Product Management
DESCRIPTION: Defines the 'AddProductViewModel', handling state management for adding products. Utilizes Hilt for dependency injection and Flow for reactive state updates. The onCreateProduct method creates a product using the repository and updates UI states for loading and success.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_21

LANGUAGE: kotlin
CODE:
```
@HiltViewModel
class AddProductViewModel @Inject constructor(
    private val productRepository: ProductRepository,
) : ViewModel() {

    private val _isLoading = MutableStateFlow(false)
    val isLoading: Flow<Boolean> = _isLoading

    private val _showSuccessMessage = MutableStateFlow(false)
    val showSuccessMessage: Flow<Boolean> = _showSuccessMessage

    fun onCreateProduct(name: String, price: Double) {
        if (name.isEmpty() || price <= 0) return
        viewModelScope.launch {
            _isLoading.value = true
            val product = Product(
                id = UUID.randomUUID().toString(),
                name = name,
                price = price,
            )
            productRepository.createProduct(product = product)
            _isLoading.value = false
            _showSuccessMessage.emit(true)

        }
    }
}
```

----------------------------------------

TITLE: Implementing Cross-Origin Authentication with Supabase SSO
DESCRIPTION: TypeScript code snippet demonstrating how to use the signInWithSSO method to implement cross-origin authentication within the same site. It includes the redirectTo option to specify a custom callback URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

// ---cut---
const { data, error } = await supabase.auth.signInWithSSO({
  domain: 'company.com',
  options: {
    redirectTo: `https://app.company.com/callback`,
  },
})
```

----------------------------------------

TITLE: Creating the Product DTO Class
DESCRIPTION: Defines a data transfer object with Kotlinx Serialization annotations to map JSON data from Supabase to Kotlin objects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_10

LANGUAGE: kotlin
CODE:
```
@Serializable
data class ProductDto(

    @SerialName("name")
    val name: String,

    @SerialName("price")
    val price: Double,

    @SerialName("image")
    val image: String?,

    @SerialName("id")
    val id: String,
)
```

----------------------------------------

TITLE: Implementing Twitch Sign-In Code in Flutter
DESCRIPTION: This snippet provides the implementation of the Twitch sign-in functionality using the Supabase Flutter client. It shows the use of signInWithOAuth with Twitch as the provider and includes options for redirect URLs and launch modes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signInWithTwitch() async {\n  await supabase.auth.signInWithOAuth(\n    OAuthProvider.twitch,\n    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.\n    authScreenLaunchMode:\n        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.\n  );\n}
```

----------------------------------------

TITLE: Implementing OAuth Sign-In Redirect in SvelteKit with Supabase Auth
DESCRIPTION: This snippet demonstrates how to handle server-side OAuth sign-in redirects using Supabase Auth in a SvelteKit application. It uses the redirect function from @sveltejs/kit to perform the redirection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/oauth-sign-in-isnt-redirecting-on-the-server-side-ShGMtr.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { redirect } from '@sveltejs/kit';
...
const { data } = await supabase.auth.signInWithOAuth({
  provider: 'github',
})

throw redirect(303, data.url)
```

----------------------------------------

TITLE: Creating a Stripe Server Connection in PostgreSQL
DESCRIPTION: SQL command to create a server connection to Stripe using the Stripe wrapper with an API key for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create server stripe_server
foreign data wrapper stripe_wrapper
options (api_key 'sk_test_xxx');
```

----------------------------------------

TITLE: Raw Postgres Connection using Deno Postgres Driver
DESCRIPTION: Shows how to establish a direct connection to Postgres using the Deno Postgres driver, implementing connection pooling and raw SQL queries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/connect-to-postgres.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import * as postgres from 'https://deno.land/x/postgres@v0.17.0/mod.ts'

const databaseUrl = Deno.env.get('SUPABASE_DB_URL')!

const pool = new postgres.Pool(databaseUrl, 3, true)

Deno.serve(async (_req) => {
  try {
    const connection = await pool.connect()

    try {
      const result = await connection.queryObject`SELECT * FROM animals`
      const animals = result.rows

      const body = JSON.stringify(
        animals,
        (key, value) => (typeof value === 'bigint' ? value.toString() : value),
        2
      )

      return new Response(body, {
        status: 200,
        headers: { 'Content-Type': 'application/json; charset=utf-8' },
      })
    } finally {
      connection.release()
    }
  } catch (err) {
    console.error(err)
    return new Response(String(err?.message ?? err), { status: 500 })
  }
})
```

----------------------------------------

TITLE: MFA Verification Hook Implementation
DESCRIPTION: SQL function implementing the MFA verification hook with rate limiting logic for failed attempts.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/mfa-verification-hook.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create function public.hook_mfa_verification_attempt(event jsonb)
  returns jsonb
  language plpgsql
as $$
  declare
    last_failed_at timestamp;
  begin
    if event->'valid' is true then
      -- code is valid, accept it
      return jsonb_build_object('decision', 'continue');
    end if;

    select last_failed_at into last_failed_at
      from public.mfa_failed_verification_attempts
      where
        user_id = event->'user_id'
          and
        factor_id = event->'factor_id';

    if last_failed_at is not null and now() - last_failed_at < interval '2 seconds' then
      -- last attempt was done too quickly
      return jsonb_build_object(
        'error', jsonb_build_object(
          'http_code', 429,
          'message',   'Please wait a moment before trying again.'
        )
      );
    end if;

    -- record this failed attempt
    insert into public.mfa_failed_verification_attempts
      (
        user_id,
        factor_id,
        last_refreshed_at
      )
      values
      (
        event->'user_id',
        event->'factor_id',
        now()
      )
      on conflict do update
        set last_refreshed_at = now();

    -- finally let Supabase Auth do the default behavior for a failed attempt
    return jsonb_build_object('decision', 'continue');
  end;
$$;
```

----------------------------------------

TITLE: Running Supabase Functions Locally
DESCRIPTION: Command to start and serve Supabase Functions for local development and testing.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
supabase functions serve
```

----------------------------------------

TITLE: Configuring Supabase Server Client with SvelteKit Hooks
DESCRIPTION: Implements server-side hooks for SvelteKit that initialize the Supabase client with cookie-based authentication and adds a safe session retrieval method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
// src/hooks.server.ts
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'
import { createServerClient } from '@supabase/ssr'
import type { Handle } from '@sveltejs/kit'

export const handle: Handle = async ({ event, resolve }) => {
  event.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
    cookies: {
      getAll: () => event.cookies.getAll(),
      /**
       * SvelteKit's cookies API requires `path` to be explicitly set in
       * the cookie options. Setting `path` to `/` replicates previous/
       * standard behavior.
       */
      setAll: (cookiesToSet) => {
        cookiesToSet.forEach(({ name, value, options }) => {
          event.cookies.set(name, value, { ...options, path: '/' })
        })
      },
    },
  })

  /**
   * Unlike `supabase.auth.getSession()`, which returns the session _without_
   * validating the JWT, this function also calls `getUser()` to validate the
   * JWT before returning the session.
   */
  event.locals.safeGetSession = async () => {
    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    if (!session) {
      return { session: null, user: null }
    }

    const {
      data: { user },
      error,
    } = await event.locals.supabase.auth.getUser()
    if (error) {
      // JWT validation has failed
      return { session: null, user: null }
    }

    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}
```

----------------------------------------

TITLE: Stop Tracking Presence in Kotlin
DESCRIPTION: This snippet illustrates how to stop presence tracking in Kotlin by using the untrack method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_18

LANGUAGE: kotlin
CODE:
```
suspend fun untrackPresence() {
	roomOne.untrack()
}

untrackPresence()
```

----------------------------------------

TITLE: Querying Supabase data in Nuxt application
DESCRIPTION: This Vue component creates a Supabase client, fetches instruments data from Supabase, and displays it in a list. It demonstrates how to integrate Supabase queries into a Nuxt application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nuxtjs.mdx#2025-04-21_snippet_2

LANGUAGE: vue
CODE:
```
<script setup>
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')
const instruments = ref([])

async function getInstruments() {
  const { data } = await supabase.from('instruments').select()
  instruments.value = data
}

onMounted(() => {
  getInstruments()
})
</script>

<template>
  <ul>
    <li v-for="instrument in instruments" :key="instrument.id">{{ instrument.name }}</li>
  </ul>
</template>
```

----------------------------------------

TITLE: Integrating Realtime Chat in TypeScript
DESCRIPTION: The snippet demonstrates how to integrate a basic real-time chat component in a TypeScript project, utilizing Supabase and TanStack. It imports the `RealtimeChat` component and uses it within a React functional component. The `roomName` and `username` props specify the chat room and user details, respectively.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/realtime-chat.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { RealtimeChat } from '@/components/realtime-chat'

export default function ChatPage() {
  return <RealtimeChat roomName="my-chat-room" username="john_doe" />
}
```

----------------------------------------

TITLE: Configuring iOS Deep Link URL Scheme in Info.plist
DESCRIPTION: XML configuration for iOS Info.plist file to define a custom URL scheme that enables deep linking for Supabase authentication callbacks. Sets up the bundle URL types and schemes for the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_9

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <!-- other tags -->
  <key>CFBundleURLTypes</key>
  <array>
    <dict>
      <key>CFBundleTypeRole</key>
      <string>Editor</string>
      <key>CFBundleURLSchemes</key>
      <array>
        <string>io.supabase.user-management</string>
      </array>
    </dict>
  </array>
</dict>
</plist>
```

----------------------------------------

TITLE: Pushing Database Schema to Supabase in Bash
DESCRIPTION: Bash command for synchronizing the local database schema with the remote Supabase project. Ensures the database structure matches the local development environment.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/todo-list/nextjs-todo-list/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
SUPABASE_ENV=production npx supabase@latest db push
```

----------------------------------------

TITLE: Role Impersonation and Table Creation
DESCRIPTION: Demonstrates role impersonation and creating objects as a group.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_24

LANGUAGE: bash
CODE:
```
# as junior_dev
postgres=> set role developers;
SET
postgres=> create table public.apps(id serial primary key, name text);
CREATE TABLE
```

----------------------------------------

TITLE: Initializing Supabase Realtime Channel Connection
DESCRIPTION: Example showing how to connect to a Supabase Realtime channel without authorization using the supabase-js client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'

// Prepare client with authenticated user
const client = createClient('<url>', '<anon_key>')
client.realtime.setAuth(token)

// Prepare the realtime channel
const channel = client.channel('topic')

channel
.subscribe((status: string, err: any) => {
  if (status === 'SUBSCRIBED') {
    console.log('Connected')
  }
})
```

----------------------------------------

TITLE: Listening to Database Changes with New Channel Interface in TypeScript
DESCRIPTION: Shows the new method for listening to PostgreSQL database changes using the channel() interface in supabase-js v2, compared to the old method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
// v2
supabase
  .channel('any_string_you_want')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'movies',
    },
    (payload) => {
      console.log(payload)
    }
  )
  .subscribe()

// v1
supabase
  .from('movies')
  .on('INSERT', (payload) => {
    console.log(payload)
  })
  .subscribe()
```

----------------------------------------

TITLE: Querying JSONB Data with GIN Index in SQL
DESCRIPTION: This example shows a SQL query that can utilize a GIN index on a JSONB column, using the @> operator to search for specific JSON structures.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SELECT id FROM some_table
WHERE data @> '[ { "itemId": "p11" } ]';
```

----------------------------------------

TITLE: Implementing Supabase Swift App Entry Point
DESCRIPTION: This SwiftUI view serves as the main entry point for the application. It listens for Supabase authentication state changes and conditionally renders either the `ProfileView` (if authenticated) or the `AuthView` (if not authenticated).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#_snippet_4

LANGUAGE: Swift
CODE:
```
import SwiftUI

struct AppView: View {
  @State var isAuthenticated = false

  var body: some View {
    Group {
      if isAuthenticated {
        ProfileView()
      } else {
        AuthView()
      }
    }
    .task {
      for await state in supabase.auth.authStateChanges {
        if [.initialSession, .signedIn, .signedOut].contains(state.event) {
          isAuthenticated = state.session != nil
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Resizing Images with Custom Mode in Supabase Storage in JavaScript
DESCRIPTION: This code demonstrates how to download an image with resizing to specific dimensions (800x300) using the 'contain' resize mode in JavaScript. Other available modes are 'cover' and 'fill'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_27

LANGUAGE: TypeScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
supabase.storage.from('bucket').download('image.jpg', {
  transform: {
    width: 800,
    height: 300,
    resize: 'contain', // 'cover' | 'fill'
  },
})
```

----------------------------------------

TITLE: Configuring Clerk Third-Party Auth (TOML)
DESCRIPTION: Provides the configuration snippet to add to the `supabase/config.toml` file when developing locally or self-hosting, enabling Clerk as a third-party authentication provider.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/clerk.mdx#_snippet_0

LANGUAGE: toml
CODE:
```
[auth.third_party.clerk]
enabled = true
domain = "example.clerk.accounts.dev"
```

----------------------------------------

TITLE: Creating Private Route Layout in SvelteKit
DESCRIPTION: Empty TypeScript file to ensure protection of all routes in the private directory by triggering hooks.server.ts.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
/**
 * This file is necessary to ensure protection of all routes in the `private`
 * directory. It makes the routes in this directory _dynamic_ routes, which
 * send a server request, and thus trigger `hooks.server.ts`.
 **/
```

----------------------------------------

TITLE: Deploying Edge Functions with GitHub Actions
DESCRIPTION: GitHub Actions workflow configuration that automatically deploys Edge Functions when code is merged to the main branch. Uses the official Supabase CLI setup action and requires a Supabase access token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/cicd-workflow.mdx#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
name: Deploy Function

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      PROJECT_ID: your-project-id

    steps:
      - uses: actions/checkout@v4

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase functions deploy --project-ref $PROJECT_ID
```

----------------------------------------

TITLE: Driver Assignment and Real-time Location Tracking in Flutter
DESCRIPTION: Flutter implementation for finding nearby drivers and subscribing to real-time updates of driver location and ride status using Supabase streams.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_11

LANGUAGE: dart
CODE:
```
  Future<void> _findDriver() async {
    try {
      final response = await supabase.rpc('find_driver', params: {
        'origin':
            'POINT(${_currentLocation!.longitude} ${_currentLocation!.latitude})',
        'destination':
            'POINT(${_selectedDestination!.longitude} ${_selectedDestination!.latitude})',
        'fare': _fare,
      }) as List<dynamic>;

      if (response.isEmpty) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
                content: Text('No driver found. Please try again later.')),
          );
        }
        return;
      }
      String driverId = response.first['driver_id'];
      String rideId = response.first['ride_id'];

      _driverSubscription = supabase
          .from('drivers')
          .stream(primaryKey: ['id'])
          .eq('id', driverId)
          .listen((List<Map<String, dynamic>> data) {
            if (data.isNotEmpty) {
              setState(() {
                _driver = Driver.fromJson(data[0]);
              });
              _updateDriverMarker(_driver!);
              _adjustMapView(
                  target: _appState == AppState.waitingForPickup
                      ? _currentLocation!
                      : _selectedDestination!);
            }
          });

      _rideSubscription = supabase
          .from('rides')
          .stream(primaryKey: ['id'])
          .eq('id', rideId)
          .listen((List<Map<String, dynamic>> data) {
            if (data.isNotEmpty) {
              setState(() {
                final ride = Ride.fromJson(data[0]);
                if (ride.status == RideStatus.riding &&
                    _appState != AppState.riding) {
                  _appState = AppState.riding;
                } else if (ride.status == RideStatus.completed &&
                    _appState != AppState.postRide) {
                  _appState = AppState.postRide;
                  _cancelSubscriptions();
                  _showCompletionModal();
                }
              });
            }
          });

      _goToNextState();
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error: ${e.toString()}')),
        );
      }
    }
  }
```

----------------------------------------

TITLE: Uploading Files to Supabase Storage in Dart
DESCRIPTION: This code snippet shows how to upload a file to Supabase Storage using the standard upload method in Dart. It assumes a Supabase client has already been initialized.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
// Upload file using standard upload
Future<void> uploadFile(File file) async {
  await supabase.storage.from('bucket_name').upload('file_path', file);
}
```

----------------------------------------

TITLE: Async Auth Session Retrieval in TypeScript
DESCRIPTION: Shows the new async method for retrieving the auth session in supabase-js v2, which helps solve race conditions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
// v2
const { data } = await supabase.auth.getSession()

// v1
const { data } = supabase.auth.session()
```

----------------------------------------

TITLE: Creating IVFFlat Index for Inner Product in SQL
DESCRIPTION: SQL command to create an IVFFlat index using the vector_ip_ops operator class for inner product distance. The index is created on the 'column_name' of the 'items' table with 100 lists.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/ivf-indexes.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create index on items using ivfflat (column_name vector_ip_ops) with (lists = 100);
```

----------------------------------------

TITLE: Enabling and Disabling pg_hashids Extension in SQL
DESCRIPTION: SQL commands to enable the pg_hashids extension within a separate schema and disable it if needed. Creating the extension within a separate schema helps keep the public schema clean.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_hashids.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the "pg_hashids" extension
create extension pg_hashids with schema extensions;

-- Disable the "pg_hashids" extension
drop extension if exists pg_hashids;
```

----------------------------------------

TITLE: Creating Hypothetical Index and Analyzing Query Plan with HypoPG
DESCRIPTION: SQL commands to create a hypothetical index using HypoPG and generate an explain plan to analyze its impact on query performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/hypopg.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
select * from hypopg_create_index('create index on account(id)');

explain select * from account where id=1;
```

----------------------------------------

TITLE: Hono Framework Routing Implementation
DESCRIPTION: Example of implementing routing in Edge Functions using Hono framework with GET and POST endpoints.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { Hono } from 'jsr:@hono/hono';

const app = new Hono();

app.post('/hello-world', async (c) => {
  const { name } = await c.req.json();
  return new Response(`Hello ${name}!`)
});

app.get('/hello-world', (c) => {
  return new Response('Hello World!')
});

Deno.serve(app.fetch);
```

----------------------------------------

TITLE: Filtering Storage Logs by IP Address
DESCRIPTION: This SQL query retrieves storage logs and filters them based on the IP address of the request. It extracts the ID, timestamp, event message, and remote address (IP address) from the storage logs' metadata. Replace "IP_ADDRESS" with the actual IP address to filter by.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/debugging/logs.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
select id, storage_logs.timestamp, event_message, r.remoteAddress
from
  storage_logs
  cross join unnest(metadata) as m
  cross join unnest(m.req) as r
where r.remoteAddress in ("IP_ADDRESS")
order by timestamp desc
limit 100;
```

----------------------------------------

TITLE: Negation Text Search Implementation
DESCRIPTION: Demonstrates how to implement text search with negation to exclude specific terms from the search results.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_29

LANGUAGE: sql
CODE:
```
select
  *
from
  books
where
  to_tsvector(description) @@ to_tsquery('big & !little');
```

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('books')
  .select()
  .textSearch('description', `'big' & !'little'`)
```

LANGUAGE: dart
CODE:
```
final result = await client
  .from('books')
  .select()
  .textSearch('description', "'big' & !'little'");
```

LANGUAGE: swift
CODE:
```
let response = try await client
  .from("books")
  .select()
  .textSearch("description", value: "'big' & !'little'")
  .execute()
```

LANGUAGE: kotlin
CODE:
```
val data = supabase.from("books").select {
    filter {
        textSearch("description", "'big' & !'little'", TextSearchType.NONE)
    }
}
```

LANGUAGE: python
CODE:
```
data = client.from_('books').select().text_search('description', "'big' & !'little'").execute()
```

----------------------------------------

TITLE: Querying Most Recent Authentication Method in PostgreSQL
DESCRIPTION: This SQL snippet uses `jsonb_path_query` to extract the most recent authentication method from a JWT stored in a JSONB column. The path `$.amr[0]` locates the latest entry, allowing enforcement of stricter JWT verification policies based on recent authentication methods.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
jsonb_path_query((select auth.jwt()), '$.amr[0]')
```

----------------------------------------

TITLE: Getting Public URL for Transformed Image in JavaScript
DESCRIPTION: This snippet demonstrates how to use the Supabase JavaScript client to get a public URL for a transformed image, specifying width and height.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

supabase.storage.from('bucket').getPublicUrl('image.jpg', {
  transform: {
    width: 500,
    height: 600,
  },
})
```

----------------------------------------

TITLE: Getting Public URL for Transformed Image in Kotlin
DESCRIPTION: This snippet shows how to use the Supabase Kotlin client to get a public URL for a transformed image, specifying width and height.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
val url = supabase.storage.from("bucket").publicRenderUrl("image.jpg") {
    size(width = 500, height = 600)
}
```

----------------------------------------

TITLE: Disabling Automatic Optimization in Swift
DESCRIPTION: This snippet illustrates how to disable automatic image optimization and request the original format using the Supabase Swift client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_16

LANGUAGE: swift
CODE:
```
let data = try await supabase.storage.from("bucket")
  .download(
    path: "image.jpg",
    options: TransformOptions(
      width: 200,
      height: 200,
      format: "origin"
    )
  )
```

----------------------------------------

TITLE: Link Supabase Remote Project (Bash)
DESCRIPTION: Links the local Supabase project directory to a specific remote Supabase project using the CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_9

LANGUAGE: bash
CODE:
```
supabase link
```

----------------------------------------

TITLE: Multi-Word Search with OR Operator
DESCRIPTION: SQL query showing how to search for multiple words using the OR operator (|) in tsquery
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_22

LANGUAGE: sql
CODE:
```
select
  *
from
  books
where
  to_tsvector(description)
  @@ to_tsquery('little | big');
```

----------------------------------------

TITLE: Adding Messages to a Queue using Supabase JavaScript Client
DESCRIPTION: This TypeScript/JavaScript snippet shows how to use the Supabase client to add a message to a queue. It creates a client instance with the pgmq_public schema and uses the send RPC function to add a message to the 'foo' queue.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-05-supabase-queues.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { createClient } from '@supabase/supabase-js'

const url = 'SUPABASE_URL'
const key = 'SUPABASE_ANON_KEY'

const queues = createClient(url, key, {
  db: { schema: 'pgmq_public' },
})

const { data, error } = await queues.rpc('send', {
  queue_name: 'foo',
  message: { hello: 'world' },
})

console.log('Message: ', data)
```

----------------------------------------

TITLE: Native Google Sign-in with Flutter and Supabase for iOS and Android
DESCRIPTION: A Flutter implementation for native Google Sign-in on iOS and Android using the google_sign_in package with Supabase Auth. It obtains an ID token and access token from Google and uses them to authenticate with Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_10

LANGUAGE: dart
CODE:
```
import 'package:google_sign_in/google_sign_in.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

...
Future<void> _nativeGoogleSignIn() async {
  /// TODO: update the Web client ID with your own.
  ///
  /// Web Client ID that you registered with Google Cloud.
  const webClientId = 'my-web.apps.googleusercontent.com';

  /// TODO: update the iOS client ID with your own.
  ///
  /// iOS Client ID that you registered with Google Cloud.
  const iosClientId = 'my-ios.apps.googleusercontent.com';

  final GoogleSignIn googleSignIn = GoogleSignIn(
    clientId: iosClientId,
    serverClientId: webClientId,
  );
  final googleUser = await googleSignIn.signIn();
  final googleAuth = await googleUser!.authentication;
  final accessToken = googleAuth.accessToken;
  final idToken = googleAuth.idToken;

  if (accessToken == null) {
    throw 'No Access Token found.';
  }
  if (idToken == null) {
    throw 'No ID Token found.';
  }

  await supabase.auth.signInWithIdToken(
    provider: OAuthProvider.google,
    idToken: idToken,
    accessToken: accessToken,
  );
}
...
```

----------------------------------------

TITLE: Creating Postgres Function and Trigger for User Profile Creation
DESCRIPTION: This SQL script creates a function to handle new user registration by inserting a row into the profiles table. It also sets up a trigger to automatically call this function when a new user is created in the auth.users table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
-- Function to create a new row in profiles table upon signup
-- Also copies the username value from metadata
create or replace function handle_new_user() returns trigger as $$
    begin
        insert into public.profiles(id, username)
        values(new.id, new.raw_user_meta_data->>'username');

        return new;
    end;
$$ language plpgsql security definer;

-- Trigger to call `handle_new_user` when new user signs up
create trigger on_auth_user_created
    after insert on auth.users
    for each row
    execute function handle_new_user();
```

----------------------------------------

TITLE: Adding SAML Connection with Metadata URL (Supabase CLI)
DESCRIPTION: This command adds a SAML 2.0 Identity Provider connection to Supabase Auth using the Supabase CLI. It requires a project reference and a metadata URL pointing to the SAML 2.0 metadata XML file, and optionally specifies the email domains associated with the organization's IdP. The command registers a new identity provider with the project's Auth server.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
"supabase sso add --type saml --project-ref <your-project> \
  --metadata-url 'https://company.com/idp/saml/metadata' \
  --domains company.com"
```

----------------------------------------

TITLE: Streaming ZIP File Extraction and Upload to Supabase Storage in JSX
DESCRIPTION: This code demonstrates how to extract files from a ZIP archive using streams and upload them to Supabase Storage. It creates a new bucket with a random UUID and streams each file directly from the ZIP archive to storage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-03-edge-functions-background-tasks-websockets.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import { ZipReaderStream } from 'https://deno.land/x/zipjs/index.js'
import { createClient } from 'jsr:@supabase/supabase-js@2'

const supabase = createClient(
  Deno.env.get('SUPABASE_URL'),
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')
)

Deno.serve(async (req) => {
  const uploadId = crypto.randomUUID()

  const { error } = await supabase.storage.createBucket(uploadId, {
    public: false,
  })

  for await (const entry of await req.body.pipeThrough(new ZipReaderStream())) {
    // write file to Supabase Storage
    const { error } = await supabase.storage
      .from(uploadId)
      .upload(entry.filename, entry.readable, {})

    console.log('uploaded', entry.filename)
  }

  return new Response(
    JSON.stringify({
      uploadId,
    }),
    {
      headers: {
        'content-type': 'application/json',
      },
    }
  )
})
```

----------------------------------------

TITLE: Creating and Configuring Tables for MFA in Supabase SQL
DESCRIPTION: This SQL script creates a 'private_posts' table, inserts dummy data, enables Row Level Security (RLS), and creates a policy allowing access only to users authenticated via MFA.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/flutter-mfa/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Dummy table that contains "secure" information
create table if not exists public.private_posts (
    id int generated by default as identity primary key,
    content text not null
);

-- Dmmy "secure" data
insert into public.private_posts
    (content)
values
    ('Flutter is awesome!'),
    ('Supabase is awesome!'),
    ('Postgres is awesome!');

-- Enable RLS for private_posts table
alter table public.private_posts enable row level security;

-- Create a policy that only allows read if they user has signed in via MFA
create policy "Users can view private_posts if they have signed in via MFA"
  on public.private_posts
  for select
  to authenticated
  using ((select auth.jwt()->>'aal') = 'aal2');
```

----------------------------------------

TITLE: Link Email to Anonymous User in Flutter
DESCRIPTION: Updates an anonymous user to add an email address in Supabase using Flutter. This begins the process of converting an anonymous user to a permanent user by linking an email identity.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
await supabase.auth.updateUser(UserAttributes(email: 'valid.email@supabase.io'));
```

----------------------------------------

TITLE: Native Sign in with Apple Implementation in Flutter
DESCRIPTION: Simple implementation of native Apple sign-in using the Supabase Flutter SDK. Requires iOS Bundle ID configuration in the project dashboard.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_7

LANGUAGE: dart
CODE:
```
final AuthResponse response = await supabase.auth.signInWithApple();
```

----------------------------------------

TITLE: Basic index_advisor Usage Example
DESCRIPTION: A complete example showing how to install the extension, create a table, and get index recommendations for a query with a filter on an unindexed column.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/index_advisor.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create extension if not exists index_advisor cascade;

create table book(
  id int primary key,
  title text not null
);

select
  *
from
  index_advisor('select book.id from book where title = $1');

 startup_cost_before | startup_cost_after | total_cost_before | total_cost_after |                  index_statements                   | errors
---------------------+--------------------+-------------------+------------------+-----------------------------------------------------+--------
 0.00                | 1.17               | 25.88             | 6.40             | {"CREATE INDEX ON public.book USING btree (title)"},| {}
(1 row)
```

----------------------------------------

TITLE: Managing MFA Challenge Screen State in React
DESCRIPTION: The AppWithMFA component manages the display of the MFA challenge screen based on the user's authenticator assurance level. It checks the MFA state upon mount and determines whether to show the MFA screen or the main application. Dependencies include React hooks and Supabase auth methods.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/totp.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
function AppWithMFA() {
  const [readyToShow, setReadyToShow] = useState(false)
  const [showMFAScreen, setShowMFAScreen] = useState(false)

  useEffect(() => {
    ;(async () => {
      try {
        const { data, error } = await supabase.auth.mfa.getAuthenticatorAssuranceLevel()
        if (error) {
          throw error
        }

        console.log(data)

        if (data.nextLevel === 'aal2' && data.nextLevel !== data.currentLevel) {
          setShowMFAScreen(true)
        }
      } finally {
        setReadyToShow(true)
      }
    })()
  }, [])

  if (readyToShow) {
    if (showMFAScreen) {
      return <AuthMFA />
    }

    return <App />
  }

  return <></>
}
```

----------------------------------------

TITLE: Sign In with Zoom OAuth in JavaScript
DESCRIPTION: This code snippet demonstrates how to sign in a user with Zoom OAuth using the Supabase JavaScript client library. It initializes the Supabase client and calls the `signInWithOAuth` function, passing in 'zoom' as the provider. The function returns a promise that resolves with the user's data or rejects with an error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signInWithZoom() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'zoom',
  })
}
```

----------------------------------------

TITLE: Implementing Message Storage with RealtimeChat Component in React
DESCRIPTION: Illustrates how to use the RealtimeChat component with a callback function to store messages in a database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/realtime-chat.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { RealtimeChat } from '@/components/realtime-chat'
import { useMessagesQuery } from '@/hooks/use-messages-query'
import { storeMessages } from '@/lib/store-messages'

export default function ChatPage() {
  const { data: messages } = useMessagesQuery()
  const handleMessage = (messages: ChatMessage[]) => {
    // Store messages in your database
    await storeMessages(messages)
  }

  return <RealtimeChat roomName="my-chat-room" username="john_doe" onMessage={handleMessage} />
}
```

----------------------------------------

TITLE: Implementing Offset Pagination in GraphQL
DESCRIPTION: Example of offset-based pagination using first/offset parameters to skip records and retrieve a specified number of results
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-pg-graphql-1-5-7.mdx#2025-04-21_snippet_1

LANGUAGE: graphql
CODE:
```
{
  blogCollection(
    first: 2,
    offset: 5
  ) {
  ...
}
```

----------------------------------------

TITLE: Llamafile Integration with OpenAI-Compatible API
DESCRIPTION: Implements LLM inference using Mozilla Llamafile with OpenAI-compatible API interface. Processes chat completion requests with system and user messages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import OpenAI from 'https://deno.land/x/openai@v4.53.2/mod.ts'

Deno.serve(async (req) => {
  const client = new OpenAI()
  const { prompt } = await req.json()
  const stream = true

  const chatCompletion = await client.chat.completions.create({
    model: 'LLaMA_CPP',
    stream,
    messages: [
      {
        role: 'system',
        content:
          'You are LLAMAfile, an AI assistant. Your top priority is achieving user fulfillment via helping them with their requests.',
      },
      {
        role: 'user',
        content: prompt,
      },
    ],
  })

  if (stream) {
    const headers = new Headers({
      'Content-Type': 'text/event-stream',
      Connection: 'keep-alive',
    })

    const stream = new ReadableStream({
      async start(controller) {
        const encoder = new TextEncoder()

        try {
          for await (const part of chatCompletion) {
            controller.enqueue(encoder.encode(part.choices[0]?.delta?.content || ''))
          }
        } catch (err) {
          console.error('Stream error:', err)
        } finally {
          controller.close()
        }
      },
    })

    return new Response(stream, {
      headers,
    })
  }

  return Response.json(chatCompletion)
})
```

----------------------------------------

TITLE: Adding FCM Token Column to Existing Profiles Table
DESCRIPTION: SQL command to alter an existing profiles table by adding a column for storing Firebase Cloud Messaging tokens. This enables existing Supabase implementations to add push notification capabilities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/push-notifications.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
ALTER TABLE public.profiles
ADD COLUMN fcm_token text;
```

----------------------------------------

TITLE: Verifying OTP to Create Session in JavaScript
DESCRIPTION: Details verifying OTP for login session creation using JavaScript client in Supabase. Essential inputs are user's email and the OTP code along with the type 'email'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_11

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('url', 'anonKey')

// ---cut---
const {
  data: { session },
  error,
} = await supabase.auth.verifyOtp({
  email: 'email@example.com',
  token: '123456',
  type: 'email',
})
```

----------------------------------------

TITLE: Creating Login Roles
DESCRIPTION: SQL commands to create new database roles with login privileges.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
# as postgres
postgres=> create role junior_dev login password 'a long and secure password';
CREATE ROLE
postgres=> create role senior_dev login password 'another long and secure password';
CREATE ROLE
```

----------------------------------------

TITLE: Configuring Supabase Function Settings
DESCRIPTION: TOML configuration file example for setting function-specific options like JWT verification and import map location. Uses config.toml to manage individual function settings.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/README.md#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[functions.hello-world]
verify_jwt = false
```

----------------------------------------

TITLE: Implementing Cloudflare Turnstile Validation in Supabase Edge Function
DESCRIPTION: TypeScript code for a Supabase Edge Function that validates Cloudflare Turnstile tokens. The function receives a token from the client, validates it with Cloudflare's API, and returns the validation result.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/cloudflare-turnstile.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { corsHeaders } from '../_shared/cors.ts'

console.log('Hello from Cloudflare Trunstile!')

function ips(req: Request) {
  return req.headers.get('x-forwarded-for')?.split(/\s*,\s*/)
}

Deno.serve(async (req) => {
  // This is needed if you're planning to invoke your function from a browser.
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  const { token } = await req.json()
  const clientIps = ips(req) || ['']
  const ip = clientIps[0]

  // Validate the token by calling the
  // "/siteverify" API endpoint.
  let formData = new FormData()
  formData.append('secret', Deno.env.get('CLOUDFLARE_SECRET_KEY') ?? '')
  formData.append('response', token)
  formData.append('remoteip', ip)

  const url = 'https://challenges.cloudflare.com/turnstile/v0/siteverify'
  const result = await fetch(url, {
    body: formData,
    method: 'POST',
  })

  const outcome = await result.json()
  console.log(outcome)
  if (outcome.success) {
    return new Response('success', { headers: corsHeaders })
  }
  return new Response('failure', { headers: corsHeaders })
})
```

----------------------------------------

TITLE: Listening to DELETE Events in Swift with Supabase Realtime
DESCRIPTION: Uses Swift to create a channel that listens for DELETE events in the public schema of a Supabase database. The code specifies DeleteAction.self as the event type and processes changes using an async iterator.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_22

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("schema-db-changes")

let changes = await myChannel.postgresChange(DeleteAction.self, schema: "public")

await myChannel.subscribe()

for await change in changes {
  print(change.oldRecord)
}
```

----------------------------------------

TITLE: Demonstrating to_tsvector() Function in PostgreSQL
DESCRIPTION: Example showing how to_tsvector() converts text into searchable tokens. The function normalizes words and removes common words, returning stemmed tokens with their positions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select to_tsvector('green eggs and ham');
-- Returns 'egg':2 'green':1 'ham':4
```

----------------------------------------

TITLE: Listening to Multiple Changes in Swift with Supabase Realtime
DESCRIPTION: Uses Swift to create a channel that listens to different events on different tables simultaneously. The example shows monitoring all events on the 'messages' table and only INSERT events on the 'users' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_32

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("db-changes")

let messageChanges = await myChannel.postgresChange(AnyAction.self, schema: "public", table: "messages")
let userChanges = await myChannel.postgresChange(InsertAction.self, schema: "public", table: "users")

await myChannel.subscribe()
```

----------------------------------------

TITLE: Creating Tables with Different Delete Constraints
DESCRIPTION: Creates a set of related tables (grandparent, parent, child) with different foreign key constraints and populates them with sample data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/cascade-deletes.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table grandparent (
  id serial primary key,
  name text
);

create table parent (
  id serial primary key,
  name text,
  parent_id integer references grandparent (id)
    on delete cascade
);

create table child (
  id serial primary key,
  name text,
  father integer references parent (id)
    on delete restrict
);

insert into grandparent
  (id, name)
values
  (1, 'Elizabeth');

insert into parent
  (id, name, parent_id)
values
  (1, 'Charles', 1);

insert into parent
  (id, name, parent_id)
values
  (2, 'Diana', 1);

-- We'll just link the father for now
insert into child
  (id, name, father)
values
  (1, 'William', 1);
```

----------------------------------------

TITLE: Implementing Confirmation Endpoint for Supabase Auth in Next.js
DESCRIPTION: This code creates a server-side endpoint to handle email confirmation for Supabase authentication in a Next.js application. It verifies the OTP token and manages user redirection after confirmation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_12

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'

import { createClient } from '@/utils/supabase/server'

// Creating a handler to a GET request to route /auth/confirm
export async function GET(request) {
  const { searchParams } = new URL(request.url)
  const token_hash = searchParams.get('token_hash')
  const type = searchParams.get('type')
  const next = '/account'

  // Create redirect link without the secret token
  const redirectTo = request.nextUrl.clone()
  redirectTo.pathname = next
  redirectTo.searchParams.delete('token_hash')
  redirectTo.searchParams.delete('type')

  if (token_hash && type) {
    const supabase = await createClient()

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })
    if (!error) {
      redirectTo.searchParams.delete('next')
      return NextResponse.redirect(redirectTo)
    }
  }

  // return the user to an error page with some instructions
  redirectTo.pathname = '/error'
  return NextResponse.redirect(redirectTo)
}
```

----------------------------------------

TITLE: Example Customer Orders Query in PostgreSQL
DESCRIPTION: Sample query demonstrating joins between customers and orders tables with filtering and sorting operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select
  a.name,
  b.date_of_purchase
from
  customers as a
  join orders as b on a.id = b.customer_id
where a.sign_up_date > '2023-01-01' and b.status = 'shipped'
order by b.date_of_purchase
limit 10;
```

----------------------------------------

TITLE: Configuring Serverless Environment Connections in .env File
DESCRIPTION: Environment configuration for Prisma in serverless deployments. This setup uses separate connection strings: one for the application using transaction mode (6543) and another for migrations using session mode (5432).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_9

LANGUAGE: text
CODE:
```
# Used in your application (use transaction mode)
DATABASE_URL="postgres://[DB-USER].[PROJECT-REF]:[PRISMA-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres?pgbouncer=true"

# Used for Prisma Migrations (use session mode or direct connection)
DIRECT_URL="postgres://[DB-USER].[PROJECT-REF]:[PRISMA-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:5432/postgres"
```

----------------------------------------

TITLE: Migrating Storage Objects in Supabase - JavaScript
DESCRIPTION: This snippet establishes connections to the old and new Supabase projects using the Supabase JavaScript client and retrieves storage objects from the old project. It then downloads each object and uploads it to the new project, handling any errors that occur during migration. Ensure to install the Supabase client and configure the project URLs and service keys properly.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/backup-restore.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
// npm install @supabase/supabase-js@1
const { createClient } = require('@supabase/supabase-js')

const OLD_PROJECT_URL = 'https://xxx.supabase.co'
const OLD_PROJECT_SERVICE_KEY = 'old-project-service-key-xxx'

const NEW_PROJECT_URL = 'https://yyy.supabase.co'
const NEW_PROJECT_SERVICE_KEY = 'new-project-service-key-yyy'

;(async () => {
  const oldSupabaseRestClient = createClient(OLD_PROJECT_URL, OLD_PROJECT_SERVICE_KEY, {
    db: {
      schema: 'storage',
    },
  })
  const oldSupabaseClient = createClient(OLD_PROJECT_URL, OLD_PROJECT_SERVICE_KEY)
  const newSupabaseClient = createClient(NEW_PROJECT_URL, NEW_PROJECT_SERVICE_KEY)

  // make sure you update max_rows in postgrest settings if you have a lot of objects
  // or paginate here
  const { data: oldObjects, error } = await oldSupabaseRestClient.from('objects').select()
  if (error) {
    console.log('error getting objects from old bucket')
    throw error
  }

  for (const objectData of oldObjects) {
    console.log(`moving ${objectData.id}`)
    try {
      const { data, error: downloadObjectError } = await oldSupabaseClient.storage
        .from(objectData.bucket_id)
        .download(objectData.name)
      if (downloadObjectError) {
        throw downloadObjectError
      }

      const { _, error: uploadObjectError } = await newSupabaseClient.storage
        .from(objectData.bucket_id)
        .upload(objectData.name, data, {
          upsert: true,
          contentType: objectData.metadata.mimetype,
          cacheControl: objectData.metadata.cacheControl,
        })
      if (uploadObjectError) {
        throw uploadObjectError
      }
    } catch (err) {
      console.log('error moving ', objectData)
      console.log(err)
    }
  }
})()
```

----------------------------------------

TITLE: Creating PostGIS Database Functions for Geo Queries
DESCRIPTION: These SQL commands create two database functions: 'nearby_stores' to find stores near a given location, and 'stores_in_view' to find stores within a specific geographic bounding box.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create or replace function nearby_stores(lat float, long float)
returns table (id public.stores.id%TYPE, name public.stores.name%TYPE, description public.stores.description%TYPE, lat float, long float, dist_meters float)
language sql
as $$
  select id, name, description, st_y(location::geometry) as lat, st_x(location::geometry) as long, st_distance(location, st_point(long, lat)::geography) as dist_meters
  from public.stores
  order by location <-> st_point(long, lat)::geography;
$$;


create or replace function stores_in_view(min_lat float, min_long float, max_lat float, max_long float)
returns table (id public.stores.id%TYPE, name public.stores.name%TYPE, lat float, long float)
language sql
as $$
	select id, name, ST_Y(location::geometry) as lat, ST_X(location::geometry) as long
	from public.stores
	where location && ST_SetSRID(ST_MakeBox2D(ST_Point(min_long, min_lat), ST_Point(max_long, max_lat)),4326)
$$;
```

----------------------------------------

TITLE: Link Email to Anonymous User in Swift
DESCRIPTION: Updates an anonymous user to add an email address in Supabase using Swift. This begins the process of converting an anonymous user to a permanent user by linking an email identity.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_7

LANGUAGE: swift
CODE:
```
try await supabase.auth.updateUser(
  user: UserAttributes(email: "valid.email@supabase.io")
)
```

----------------------------------------

TITLE: Setting Supabase Secrets from Environment File
DESCRIPTION: Uploads the environment variables from the local configuration file to Supabase as secrets.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/stripe-webhooks/README.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
supabase secrets set --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Creating BRIN Index in PostgreSQL
DESCRIPTION: Creating a BRIN index for timestamp columns that continuously increase, providing better scalability than B-tree indexes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create index idx_orders_created_at ON customers using brin(created_at);
```

----------------------------------------

TITLE: Setting up Routes and Authentication in a React App with Refine and Supabase
DESCRIPTION: This snippet configures the main App component with Refine, setting up routes for authentication and account management. It uses Supabase for data and authentication providers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
import { Authenticated, Refine } from '@refinedev/core'
import { RefineKbar, RefineKbarProvider } from '@refinedev/kbar'
import routerBindings, {
  CatchAllNavigate,
  DocumentTitleHandler,
  UnsavedChangesNotifier,
} from '@refinedev/react-router-v6'
import { dataProvider, liveProvider } from '@refinedev/supabase'
import { BrowserRouter, Outlet, Route, Routes } from 'react-router-dom'

import './App.css'
import authProvider from './authProvider'
import { supabaseClient } from './utility'
import Account from './components/account'
import Auth from './components/auth'

function App() {
  return (
    <BrowserRouter>
      <RefineKbarProvider>
        <Refine
          dataProvider={dataProvider(supabaseClient)}
          liveProvider={liveProvider(supabaseClient)}
          authProvider={authProvider}
          routerProvider={routerBindings}
          options={{
            syncWithLocation: true,
            warnWhenUnsavedChanges: true,
          }}
        >
          <Routes>
            <Route
              element={
                <Authenticated fallback={<CatchAllNavigate to="/login" />}>
                  <Outlet />
                </Authenticated>
              }
            >
              <Route index element={<Account />} />
            </Route>
            <Route element={<Authenticated fallback={<Outlet />} />}>
              <Route path="/login" element={<Auth />} />
            </Route>
          </Routes>
          <RefineKbar />
          <UnsavedChangesNotifier />
          <DocumentTitleHandler />
        </Refine>
      </RefineKbarProvider>
    </BrowserRouter>
  )
}

export default App
```

----------------------------------------

TITLE: Executing Postgres Queries with Template Literals
DESCRIPTION: Example of executing a parameterized SQL query using Postgres.js template literals. Demonstrates how to create a function that queries users based on age criteria.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres-js.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import sql from './db.js'

async function getUsersOver(age) {
  const users = await sql`
    select name, age
    from users
    where age > ${ age }
  `
  // users = Result [{ name: "Walter", age: 80 }, { name: 'Murray', age: 68 }, ...]
  return users
}
```

----------------------------------------

TITLE: SSR Client Import Example
DESCRIPTION: Reference to @supabase/ssr package implementation for customizing token storage and client initialization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/advanced-guide.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
// Reference to: https://github.com/supabase/auth-helpers/blob/main/packages/ssr/src/index.ts
```

----------------------------------------

TITLE: Signing in with Magic Link using Expo React Native
DESCRIPTION: Illustrates using Supabase in an Expo React Native environment to send a magic link. Utilizes `expo-auth-session` for redirect URI configuration. Input: user email.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { makeRedirectUri } from 'expo-auth-session'

const redirectTo = makeRedirectUri()

const { error } = await supabase.auth.signInWithOtp({
  email: 'valid.email@supabase.io',
  options: {
    emailRedirectTo: redirectTo,
  },
})
```

----------------------------------------

TITLE: Connecting to PostgreSQL Database with vecs
DESCRIPTION: Creates a vecs client to communicate with a PostgreSQL database. Requires a valid connection string.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/vector_hello_world.ipynb#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import vecs

DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)
```

----------------------------------------

TITLE: Creating Anonymous Users with Supabase JS
DESCRIPTION: JavaScript code snippet using the Supabase Auth API to sign in a user anonymously without requiring credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase
  .auth
  .signInAnonymously()
```

----------------------------------------

TITLE: Listening to UPDATE Events in JavaScript with Supabase Realtime
DESCRIPTION: Creates a channel to listen specifically for UPDATE events in the public schema of a Supabase database. The code establishes a subscription that logs payload data whenever database updates occur.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
const changes = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: 'UPDATE', // Listen only to UPDATEs
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Implementing Hugging Face Image Captioning with Supabase Edge Function
DESCRIPTION: This TypeScript code implements an Edge Function that uses Hugging Face's image-to-text model to generate captions for images uploaded to Supabase Storage. It listens for webhook events, retrieves the uploaded image, generates a caption, and stores it in a database table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/huggingface-image-captioning.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { HfInference } from 'https://esm.sh/@huggingface/inference@2.3.2'
import { createClient } from 'jsr:@supabase/supabase-js@2'
import { Database } from './types.ts'

console.log('Hello from `huggingface-image-captioning` function!')

const hf = new HfInference(Deno.env.get('HUGGINGFACE_ACCESS_TOKEN'))

type SoRecord = Database['storage']['Tables']['objects']['Row']
interface WebhookPayload {
  type: 'INSERT' | 'UPDATE' | 'DELETE'
  table: string
  record: SoRecord
  schema: 'public'
  old_record: null | SoRecord
}

serve(async (req) => {
  const payload: WebhookPayload = await req.json()
  const soRecord = payload.record
  const supabaseAdminClient = createClient<Database>(
    // Supabase API URL - env var exported by default when deployed.
    Deno.env.get('SUPABASE_URL') ?? '',
    // Supabase API SERVICE ROLE KEY - env var exported by default when deployed.
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
  )

  // Construct image url from storage
  const { data, error } = await supabaseAdminClient.storage
    .from(soRecord.bucket_id!)
    .createSignedUrl(soRecord.path_tokens!.join('/'), 60)
  if (error) throw error
  const { signedUrl } = data

  // Run image captioning with Huggingface
  const imgDesc = await hf.imageToText({
    data: await (await fetch(signedUrl)).blob(),
    model: 'nlpconnect/vit-gpt2-image-captioning',
  })

  // Store image caption in Database table
  await supabaseAdminClient
    .from('image_caption')
    .insert({ id: soRecord.id!, caption: imgDesc.generated_text })
    .throwOnError()

  return new Response('ok')
})
```

----------------------------------------

TITLE: Setting Up Supabase CLI Commands
DESCRIPTION: Bash commands for initializing Supabase, creating migrations, starting Supabase locally, and pushing changes to a hosted Supabase instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase init
```

LANGUAGE: bash
CODE:
```
supabase migration new init
```

LANGUAGE: bash
CODE:
```
supabase start
```

LANGUAGE: bash
CODE:
```
supabase link --project-ref=your-project-ref

supabase db push
```

----------------------------------------

TITLE: Implementing Location Selection in Flutter Uber Clone
DESCRIPTION: This snippet defines the _confirmLocation method, which is called when the user confirms their destination. It invokes a Supabase Edge Function to get route information, draws a polyline on the map, and updates the app state.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_8

LANGUAGE: dart
CODE:
```
Future<void> _confirmLocation() async {
    if (_selectedDestination != null && _currentLocation != null) {
      try {
        final response = await supabase.functions.invoke(
          'route',
          body: {
            'origin': {
              'latitude': _currentLocation!.latitude,
              'longitude': _currentLocation!.longitude,
            },
            'destination': {
              'latitude': _selectedDestination!.latitude,
              'longitude': _selectedDestination!.longitude,
            },
          },
        );

        final data = response.data as Map<String, dynamic>;
        final coordinates = data['legs'][0]['polyline']['geoJsonLinestring']
            ['coordinates'] as List<dynamic>;
        final duration = parseDuration(data['duration'] as String);
        _fare = ((duration.inMinutes * 40)).ceil();

        final List<LatLng> polylineCoordinates = coordinates.map((coord) {
          return LatLng(coord[1], coord[0]);
        }).toList();

        setState(() {
          _polylines.add(Polyline(
            polylineId: const PolylineId('route'),
            points: polylineCoordinates,
            color: Colors.black,
            width: 5,
          ));

          _markers.add(Marker(
            markerId: const MarkerId('destination'),
            position: _selectedDestination!,
            icon: _pinIcon ??
                BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),
          ));
        });

        LatLngBounds bounds = LatLngBounds(
          southwest: LatLng(
            polylineCoordinates
                .map((e) => e.latitude)
                .reduce((a, b) => a < b ? a : b),
            polylineCoordinates
                .map((e) => e.longitude)
                .reduce((a, b) => a < b ? a : b),
          ),
          northeast: LatLng(
            polylineCoordinates
                .map((e) => e.latitude)
                .reduce((a, b) => a > b ? a : b),
            polylineCoordinates
                .map((e) => e.longitude)
                .reduce((a, b) => a > b ? a : b),
          ),
        );
        _mapController?.animateCamera(CameraUpdate.newLatLngBounds(bounds, 50));
        _goToNextState();
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error: ${e.toString()}')),
          );
        }
      }
    }
  }
```

----------------------------------------

TITLE: Importing Database Dump using PSQL
DESCRIPTION: Command to import a SQL dump file into a PostgreSQL database using psql client. Connects to a local database instance on default port 5432 using postgres credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/transferring-from-cloud-to-self-host-in-supabase-2oWNvW.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
psql -h 127.0.0.1 -p 5432 -d postgres -U postgres -f <dump-file-name>.sql
```

----------------------------------------

TITLE: Handling Presence Events with ChannelFilter in Supabase Realtime (Dart)
DESCRIPTION: This code demonstrates how to handle presence events (sync, join, leave) in a Supabase Realtime channel using the ChannelFilter approach. It sets up event handlers for presence state synchronization and user join/leave events, then subscribes to the channel and tracks the user's presence with a timestamp.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_16

LANGUAGE: dart
CODE:
```
ChannelFilter(event: 'sync'),
          (payload, [ref]) {
            print('Synced presence state: ${channel.presenceState()}');
          },
        ).on(
          RealtimeListenTypes.presence,
          ChannelFilter(event: 'join'),
          (payload, [ref]) {
            print('Newly joined presences $payload');
          },
        ).on(
          RealtimeListenTypes.presence,
          ChannelFilter(event: 'leave'),
          (payload, [ref]) {
            print('Newly left presences: $payload');
          },
        ).subscribe(
          (status, [error]) async {
            if (status == 'SUBSCRIBED') {
              await channel.track({'online_at': DateTime.now().toIso8601String()});
            }
          },
        );
```

----------------------------------------

TITLE: Full Text Search Using JavaScript Supabase Client
DESCRIPTION: JavaScript implementation using Supabase client to perform a full text search on the books table, searching the title column for 'Harry'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('books').select().textSearch('title', `'Harry'`)
```

----------------------------------------

TITLE: Initializing Supabase Client with Custom Domain in JavaScript
DESCRIPTION: Initialize the Supabase client in JavaScript using the custom domain as the Supabase URL. This code snippet demonstrates how to use the custom domain in client-side applications.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

// Use a custom domain as the supabase URL
const supabase = createClient('https://api.example.com', 'public-anon-key')
```

----------------------------------------

TITLE: Installing Supabase Flutter Package via Terminal
DESCRIPTION: Command to add the Supabase Flutter package to a Flutter project using the flutter pub add command.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/installing.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
flutter pub add supabase_flutter
```

----------------------------------------

TITLE: Configuring Prisma for Postgres on Supabase in TypeScript
DESCRIPTION: This snippet shows how to configure Prisma to work with Postgres databases hosted on Supabase, including connection string setup and multi-schema support.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-18-calcom-platform-starter-kit-nextjs-supabase.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  schemas   = ["prisma"] // see multi-schema support below
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

model Account {
  id                String  @id @default(cuid())
  // ...

  @@schema("prisma")
}
```

----------------------------------------

TITLE: Querying Similar Sentences
DESCRIPTION: Python code to query the vector database for similar sentences using a query embedding generated from a sample sentence
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/amazon-bedrock.mdx#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
query_sentence = "A quick animal jumps over a lazy one."

# create vector store client
vx = vecs.Client(DB_CONNECTION)

# create an embedding for the query sentence
response = client.invoke_model(
        body= json.dumps({"inputText": query_sentence}),
        modelId= "amazon.titan-embed-text-v1",
        accept = "application/json",
        contentType = "application/json"
    )

response_body = json.loads(response["body"].read())

query_embedding = response_body.get("embedding")

# query the 'sentences' collection for the most similar sentences
results = sentences.query(
    data=query_embedding,
    limit=3,
    include_value = True
)

# print the results
for result in results:
    print(result)
```

----------------------------------------

TITLE: Initiating Sign-In with SSO (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to initiate a sign-in process using a SAML 2.0 identity provider registered for a specific domain using Supabase Auth. It uses the `signInWithSSO` method to start the SP Initiated Flow. The Supabase client must be initialized before using this function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
"import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
supabase.auth.signInWithSSO({
  domain: 'company.com',
})"
```

----------------------------------------

TITLE: Form Component Structure with React Hook Form
DESCRIPTION: Basic anatomy of a form built with React Hook Form components, showing the essential structure with FormField, FormItem, FormLabel, FormControl, FormDescription, and FormMessage components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/form.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
<Form>
  <FormField
    control={...}
    name="..."
    render={() => (
      <FormItem>
        <FormLabel />
        <FormControl>
          { /* Your form field */}
        </FormControl>
        <FormDescription />
        <FormMessage />
      </FormItem>
    )}
  />
</Form>
```

----------------------------------------

TITLE: Connecting to Postgres Database URI Format
DESCRIPTION: Example connection string format for connecting to a Supabase Postgres database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
postgres://[USER].[YOUR-PROJECT-REF]:[YOUR-PASSWORD]@[REGION-SUBDOMAIN].pooler.supabase.com:5432/postgres
```

----------------------------------------

TITLE: Full Text Search on Description Using JavaScript
DESCRIPTION: JavaScript implementation using Supabase client to perform a full text search on the books table, searching the description column for the word 'big'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('books').select().textSearch('description', `'big'`)
```

----------------------------------------

TITLE: Using Sign-Out Scopes Kotlin
DESCRIPTION: The Kotlin snippet demonstrates how to set different session termination scopes using Supabase Auth. It defaults to the local scope but can be set to end all sessions with a different parameter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_7

LANGUAGE: Kotlin
CODE:
```
// defaults to the local scope\nawait supabase.auth.signOut();\n\n// sign out from all sessions\nsupabase.auth.signOut(SignOutScope.GLOBAL)
```

----------------------------------------

TITLE: Testing Oak Server API Endpoint
DESCRIPTION: cURL command to test the Oak server greeting endpoint by making a POST request with JSON payload and authorization header.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/oak-server/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
curl --location --request POST 'http://localhost:54321/functions/v1/oak-server/greet' \
--header 'Authorization: Bearer YOUR_TOKEN' \
--header 'Content-Type: application/json' \
--data-raw '{ "name": "John Doe" }'
```

----------------------------------------

TITLE: Upserting Text Data with Automatic Vector Conversion in Python
DESCRIPTION: This code shows how to insert text data into a vector collection. The adapter configured for the collection automatically transforms the plain text input into vector embeddings during the upsert operation. The code also includes metadata in the form of a 'publish_year' field.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
# Upsert
docs.upsert(
    records=[
        (
         "vec0",
         "the diameter of a 747 ...", # <- inserting text!
         {"publish_year": 2019}
        )
    ]
)
```

----------------------------------------

TITLE: Querying Staff Table via PostgREST
DESCRIPTION: Demonstrates how to query the staff table in the public schema using the PostgREST API
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
curl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/staff' \
-H 'accept-profile: public' \
-H "apikey: $ANON_KEY" \
-H "authorization: Bearer $ANON_KEY"
```

----------------------------------------

TITLE: Sign In with Facebook using Supabase
DESCRIPTION: This Dart snippet demonstrates how to sign in a user with Facebook using Supabase's `signInWithOAuth` method. It calls the `signInWithOAuth` function with `OAuthProvider.facebook` as the provider, and optionally sets a redirect URI and authScreenLaunchMode.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signInWithFacebook() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.facebook,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}
```

----------------------------------------

TITLE: Adding Department Column - SQL
DESCRIPTION: SQL migration to add a department column to the employees table
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
alter table if exists public.employees
add department text default 'Hooli';
```

----------------------------------------

TITLE: HNSW 384-Dimension Performance Metrics
DESCRIPTION: Benchmark data for 384-dimension vectors using gte-small embeddings across different compute sizes. Shows performance metrics including QPS, latency, and RAM usage for 100k to 1M vectors.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/choosing-compute-addon.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
| Compute Size | Vectors   | m   | ef_construction | ef_search | QPS  | Latency Mean | Latency p95 | RAM Usage  | RAM    |
| ------------ | --------- | --- | --------------- | --------- | ---- | ------------ | ----------- | ---------- | ------ |
| Micro        | 100,000   | 16  | 64              | 60        | 580  | 0.017 sec    | 0.024 sec   | 1.2 (Swap) | 1 GB   |
```

----------------------------------------

TITLE: Uninstalling Supabase Auth Helper Packages
DESCRIPTION: This snippet shows how to uninstall Supabase Auth Helper packages for different frameworks, preparing for migration to the SSR package. It is necessary to remove existing packages before installing the SSR package.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/migrating-to-ssr-from-auth-helpers.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm uninstall @supabase/auth-helpers-nextjs
```

LANGUAGE: bash
CODE:
```
npm uninstall @supabase/auth-helpers-sveltekit
```

LANGUAGE: bash
CODE:
```
npm uninstall @supabase/auth-helpers-remix
```

----------------------------------------

TITLE: Implementing Real-time Location Updates with React and MapLibre
DESCRIPTION: React component that subscribes to Supabase Realtime updates and renders location markers on a MapLibre GL JS map. Uses react-map-gl for map integration and handles real-time location updates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-04-postgres-realtime-location-sharing-with-maplibre.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
export default function Page({ params }: { params: { event: string } }) {
  const supabase = createClient<Database>()
  const [locations, setLocations] = useState<{
    [key: string]: Tables<'locations'>
  } | null>(null)
  const locationsRef = useRef<{
    [key: string]: Tables<'locations'>
  } | null>()
  locationsRef.current = locations

  useEffect(() => {
    // Listen to realtime updates
    const subs = supabase
      .channel('schema-db-changes')
      .on(
        'postgres_changes',
        {
          event: 'INSERT', // Listen only to INSERTs
          schema: 'public',
          table: 'locations',
          filter: `event_id=eq.${params.event}`,
        },
        (payload) => {
          const loc = payload.new as Tables<'locations'>
          const updated = {
            ...locationsRef.current,
            [loc.user_id.toString()]: loc,
          }

          setLocations(updated)
        }
      )
      .subscribe()
    console.log('Subscribed')

    return () => {
      subs.unsubscribe()
    }
  }, [])
```

LANGUAGE: tsx
CODE:
```
<Map
  className="map"
  cooperativeGestures={true}
  initialViewState={{
    longitude: 103.852713,
    latitude: 1.285727,
    zoom: 13,
  }}
  mapStyle={{
    version: 8,
    glyphs: 'https://cdn.protomaps.com/fonts/pbf/{fontstack}/{range}.pbf',
    sources: {
      protomaps: {
        attribution:
          '<a href="https://github.com/protomaps/basemaps">Protomaps</a> © <a href="https://openstreetmap.org">OpenStreetMap</a>',
        type: 'vector',
        url: 'pmtiles://https://<project_ref>.supabase.co/functions/v1/maps-private/my_area.pmtiles',
      },
    },
    transition: {
      duration: 0,
    },
    // @ts-ignore
    layers: layers('protomaps', 'light'),
  }}
  // @ts-ignore
  mapLib={maplibregl}
>
  {Object.entries(locations).map(([key, value]) => (
    <Marker key={key} longitude={value.long} latitude={value.lat} color="red" />
  ))}
</Map>
```

----------------------------------------

TITLE: Filtering Postgres Logs by IP Address in SQL
DESCRIPTION: SQL query to filter Postgres logs by IP address. It groups successful authentication events by IP address and counts occurrences, focusing on connections from outside the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
-- filter by IP
select
  event_message,
  connection_from as ip,
  count(connection_from) as ip_count
from
  postgres_logs
  cross join unnest(metadata) as metadata
  cross join unnest(parsed) as parsed
where
  regexp_contains(user_name, '<ROLE>')
  and regexp_contains(backend_type, 'client backend') -- only search for connections from outside the database (excludes cron jobs)
  and regexp_contains(event_message, '^connection authenticated') -- only view successful authentication events
group by connection_from, event_message
order by ip_count desc
limit 100;
```

----------------------------------------

TITLE: Filtering for Specific Changes in Kotlin with Supabase Realtime
DESCRIPTION: Sets up a Kotlin channel to listen for INSERT events on the 'todos' table with a specific filter. The filter parameter 'filter = "id=eq.1"' ensures only changes where id equals 1 are monitored.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_38

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Insert>(schema = "public") {
    table = "todos"
    filter = "id=eq.1"
}

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

----------------------------------------

TITLE: Sign Out Implementation in Kotlin
DESCRIPTION: Logout method to remove user session and clear local storage in Supabase authentication for Kotlin
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Initializing Prisma Project with npm
DESCRIPTION: Commands to initialize a new Node.js project, install Prisma and TypeScript dependencies, and set up the initial Prisma configuration using npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm init -y
npm install prisma typescript ts-node @types/node --save-dev

npx tsc --init

npx prisma init
```

----------------------------------------

TITLE: Initial Data Fetching with Next.js and Supabase
DESCRIPTION: Sets up the Supabase client and fetches the first batch of tickets using getServerSideProps in Next.js. This ensures the page doesn't start empty.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import { useEffect, useState } from 'react'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('supabase-url', 'supabase-key')

export default function TicketsPage({ tickets }) {
  const [loadedTickets, setLoadedTickets] = useState(tickets)

  return (
    <div>
      {loadedTickets.map((ticket, index) => (
        {/* We'll get to this part later */}
      ))}
    </div>
  )

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const { data: tickets } = await supabase!
    .from('my_tickets_table')
    .select('*')
    .order('createdAt', { ascending: false })
    .limit(20)

  return {
    props: {
      tickets,
    },
  }
}
```

----------------------------------------

TITLE: Sign Out User with Supabase Auth
DESCRIPTION: This Kotlin snippet demonstrates how to sign out a user using the Supabase client library. The signOut method removes the user's session and any objects from local storage. The code uses the `suspend` keyword, indicating that this function is a coroutine and can be executed asynchronously.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-slack.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Initiating Password Reset in Python with Supabase
DESCRIPTION: Python implementation to initiate a password reset flow using Supabase client by sending a reset password email to the specified email address.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_34

LANGUAGE: Python
CODE:
```
supabase.auth.reset_password_email('valid.email@supabase.io')
```

----------------------------------------

TITLE: Running Discord Bot Locally with ngrok
DESCRIPTION: This snippet shows how to run the Discord bot locally for development and testing, using the Supabase CLI to serve the function and ngrok to expose the local server to the internet.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/discord-bot.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase functions serve discord-bot --no-verify-jwt --env-file ./supabase/.env.local
ngrok http 54321
```

----------------------------------------

TITLE: Executing GraphQL Query via HTTP in Supabase
DESCRIPTION: Shows how to send a GraphQL query to the Supabase GraphQL endpoint using a curl command. This example retrieves the first 3 account IDs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
curl -X POST https://<PROJECT_REF>.supabase.co/graphql/v1 \
    -H 'apiKey: <API_KEY>'\
    -H 'Content-Type: application/json' \
    --data-raw '
    {
      "query":"{ accountCollection(first: 3) { edges { node { id } } } }"
    }'
```

----------------------------------------

TITLE: Enabling Auditing on a Table in PostgreSQL
DESCRIPTION: Demonstrates how to create a table and enable auditing on it using the custom auditing system. It also shows how to insert, update, and delete records, and then query the audit log.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- create a table
create table public.members (
  id int primary key,
  name text not null
);

-- Enable auditing on the new table
select audit.enable_tracking('public.members');
```

LANGUAGE: sql
CODE:
```
-- create a new record
insert into public.members
  (id, name)
values
  (1, 'foo');

-- edit the record
update public.members
set name = 'bar'
where id = 1;

-- delete the record
delete from public.members;
```

LANGUAGE: sql
CODE:
```
select * from audit.record_history;
```

----------------------------------------

TITLE: Setting OpenAI API Key in .env File
DESCRIPTION: Example of setting the OpenAI API key in a .env file for local development. This environment variable is required by the Edge Function to authenticate with OpenAI's API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_9

LANGUAGE: text
CODE:
```
OPENAI_API_KEY=your-api-key
```

----------------------------------------

TITLE: Client-side Posts Component
DESCRIPTION: Implements a client component that fetches posts data using useState and useEffect hooks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_16

LANGUAGE: tsx
CODE:
```
'use client'

import { useEffect, useState } from 'react'
import supabase from '../../utils/supabase'

export default function ClientPosts() {
  const [isLoading, setIsLoading] = useState(true)
  const [posts, setPosts] = useState<any>([])

  useEffect(() => {
    const fetchPosts = async () => {
      const { data } = await supabase.from('posts').select()
      setPosts(data)
      setIsLoading(false)
    }

    fetchPosts()
  }, [])

  return isLoading ? <p>Loading</p> : <pre>{JSON.stringify(posts, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Initializing Supabase Project Directory
DESCRIPTION: Command to create a new Supabase directory structure for project configuration and management
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
supabase init
```

----------------------------------------

TITLE: Attribute Mapping JSON Configuration
DESCRIPTION: This JSON structure configures attribute mapping for user identity properties like `email` and `first_name` in Supabase Auth. The `name` fields within the `keys` object specify the corresponding attributes in the SAML assertion to map to these properties. This JSON can be provided via file using the Supabase CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_8

LANGUAGE: json
CODE:
```
"{
  \"keys\": {
    \"email\": {
      \"name\": \"mail\"
    },
    \"first_name\": {
      \"name\": \"givenName\"
    }
  }
}"
```

----------------------------------------

TITLE: Configuring Routing in Ionic Angular with Supabase Auth
DESCRIPTION: Sets up the routing module for an Ionic Angular app, including protected routes and lazy-loaded modules.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { AuthGuard } from './guards/auth.guard'
import { NgModule } from '@angular/core'
import { PreloadAllModules, RouterModule, Routes } from '@angular/router'

const routes: Routes = [
  {
    path: '',
    loadChildren: () => import('./pages/login/login.module').then((m) => m.LoginPageModule),
  },
  {
    path: 'register',
    loadChildren: () =>
      import('./pages/register/register.module').then((m) => m.RegisterPageModule),
  },
  {
    path: 'groups',
    loadChildren: () => import('./pages/groups/groups.module').then((m) => m.GroupsPageModule),
  },
  {
    path: 'groups/:groupid',
    loadChildren: () =>
      import('./pages/messages/messages.module').then((m) => m.MessagesPageModule),
    canActivate: [AuthGuard],
  },
  {
    path: '',
    redirectTo: 'home',
    pathMatch: 'full',
  },
]

@NgModule({
  imports: [RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })],
  exports: [RouterModule],
})
export class AppRoutingModule {}
```

----------------------------------------

TITLE: Verifying OTP on Server-side with TypeScript
DESCRIPTION: Server-side code that handles verification of email One-Time-Password (OTP) by extracting parameters from the URL and using Supabase's verifyOtp method. This allows session management on the server side.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-templates.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { createClient, type EmailOtpType } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

// ---cut---
const { token_hash, type } = Object.fromEntries(new URLSearchParams(window.location.search))
const {
  data: { session },
  error,
} = await supabase.auth.verifyOtp({ token_hash, type: type as EmailOtpType })

// subsequently redirect the user back to the client using the redirect_to param
// ...
```

----------------------------------------

TITLE: Custom Access Token Hook in Supabase Auth
DESCRIPTION: Defines a Postgres function that acts as an Auth Hook to customize JWT claims. This example adds a user's level as a custom claim to the access token for a gamified application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-auth-identity-linking-hooks.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create function custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
as $$
declare
  user_level jsonb;
begin
  -- fetch the current user's level
  select
    to_jsonb(level) into user_level
  from profiles
  where
    user_id = event->>'user_id'::uuid;

  -- change the event.claims.level
  return jsonb_set(
		event,
		'{claims,level}',
		user_level);

end;
$$
```

----------------------------------------

TITLE: Verifying a JWT using pgjwt in PostgreSQL
DESCRIPTION: Example of using the verify function from the pgjwt extension to parse and validate a JWT. The function takes the token, secret, and algorithm as parameters and returns the decoded contents with metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgjwt.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select
  extensions.verify(
    token := 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiRm9vIn0.Q8hKjuadCEhnCPuqIj9bfLhTh_9QSxshTRsA5Aq4IuM',
    secret    := 'secret',
    algorithm := 'HS256'
  );
```

----------------------------------------

TITLE: Video Search Implementation
DESCRIPTION: Python function to perform semantic video search using text queries through Mixpeek embeddings and Supabase Vector.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_8

LANGUAGE: python
CODE:
```
def search():
    # Initialize Supabase and Mixpeek clients
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    mixpeek = Mixpeek(MIXPEEK_API_KEY)

    # Generate embedding for text query
    query_string = "a car chase scene"
    text_emb = mixpeek.embed.video(
        model_id="vuse-generic-v1",
        input=query_string,
        input_type="text"
    )

    # Query the collection
    results = supabase.rpc(
        'match_video_chunks',
        {
            'query_embedding': text_emb['embedding'],
            'match_threshold': 0.8,
            'match_count': 5
        }
    ).execute()

    # Display the results
    if results.data:
        for result in results.data:
            print(f"Matched chunk from {result['start_time']} to {result['end_time']} seconds")
            print(f"Video URL: {result['metadata']['video_url']}")
            print(f"Similarity: {result['similarity']}")
            print("---")
    else:
        print("No matching video chunks found")
```

----------------------------------------

TITLE: Implementing Twitch Sign-In Code in Kotlin
DESCRIPTION: This snippet illustrates how to implement the Twitch sign-in functionality using the Supabase Kotlin client. It outlines the usage of the signInWith method with Twitch specified as the provider.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithTwitch() {\n\tsupabase.auth.signInWith(Twitch)\n}
```

----------------------------------------

TITLE: Generated TypeScript Types for Database Tables
DESCRIPTION: Shows the structure of generated TypeScript types for the 'movies' table, including Row, Insert, and Update interfaces.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]

export interface Database {
  public: {
    Tables: {
      movies: {
        Row: {
          // the data expected from .select()
          id: number
          name: string
          data: Json | null
        }
        Insert: {
          // the data to be passed to .insert()
          id?: never // generated columns must not be supplied
          name: string // `not null` columns with no default must be supplied
          data?: Json | null // nullable columns can be omitted
        }
        Update: {
          // the data to be passed to .update()
          id?: never
          name?: string // `not null` columns are optional on .update()
          data?: Json | null
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Scheduling a Cron Job using SQL in Supabase
DESCRIPTION: This SQL snippet demonstrates how to schedule a cron job in Supabase using the cron.schedule function. It takes a job name, schedule interval, and the SQL command to execute.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Cron Job name cannot be edited
select cron.schedule('permanent-cron-job-name', '30 seconds', 'CALL do_something()');
```

----------------------------------------

TITLE: Implementing RLS Policies for SupaSecureSlack in SQL
DESCRIPTION: SQL commands to create Row Level Security (RLS) policies for the public schema tables and the realtime.messages table. These policies control user access to rooms and Broadcast/Presence functionality based on entries in the rooms_users table.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-authorization-demo/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE POLICY "authenticated can view all profiles"
ON "public"."profiles"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "supabase_auth_admin can insert profile"
ON "public"."profiles"
AS PERMISSIVE FOR INSERT
TO supabase_auth_admin
WITH CHECK (true);

CREATE POLICY "authenticated can read rooms"
ON "public"."rooms"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (TRUE);

CREATE POLICY "authenticated can add rooms"
ON "public"."rooms"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (TRUE);

CREATE POLICY "authenticated can read rooms_users"
ON "public"."rooms_users"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (TRUE);

CREATE POLICY "authenticated can add rooms_users"
ON "public"."rooms_users"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (TRUE);

CREATE POLICY "authenticated can read broadcast and presence state"
ON "realtime"."messages"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1
    FROM public.rooms_users
    WHERE user_id = (select auth.uid())
    AND room_topic = realtime.topic()
    AND realtime.messages.extension in ('broadcast', 'presence')
  )
);

CREATE POLICY "authenticated can send broadcast and track presence"
ON "realtime"."messages"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (
  EXISTS (
    SELECT 1
    FROM public.rooms_users
    WHERE user_id = (select auth.uid())
    AND room_topic = realtime.topic()
    AND realtime.messages.extension in ('broadcast', 'presence')
  )
);
```

----------------------------------------

TITLE: Signing Out - Flutter
DESCRIPTION: This snippet demonstrates the signing out process of a user from a Flutter application using Supabase. It employs the `signOut` method to clear the authentication session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
Future<void> signOut() async {\n  await supabase.auth.signOut();\n}
```

----------------------------------------

TITLE: OAuth Sign-in Without Flutter Webview in Supabase v2
DESCRIPTION: Shows updated OAuth sign-in implementation after the webview_flutter dependency was removed in v2. The context parameter is no longer needed, giving developers more control over the UI of the OAuth flow.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
// Opens a webview on iOS.
await supabase.auth.signInWithOAuth(
  Provider.github,
  authScreenLaunchMode: LaunchMode.inAppWebView,
  context: context,
);
```

LANGUAGE: dart
CODE:
```
// Opens in app webview on iOS.
await supabase.auth.signInWithOAuth(
  OAuthProvider.github,
  authScreenLaunchMode: LaunchMode.inAppWebView,
);
```

----------------------------------------

TITLE: Generated GraphQL Query and Mutation Types
DESCRIPTION: Illustrates the automatically generated GraphQL Query and Mutation types for the Account table, including operations for querying, inserting, updating, and deleting accounts.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_4

LANGUAGE: graphql
CODE:
```
type Query {
  accountCollection(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    filter: AccountFilter
    orderBy: [AccountOrderBy!]
  ): AccountConnection
}

type Mutation {
	insertIntoAccountCollection(
		objects: [AccountInsertInput!]!
	): AccountInsertResponse

	updateAccountCollection(
    set: AccountUpdateInput!
    filter: AccountFilter
    atMost: Int! = 1
  ): AccountUpdateResponse!

  deleteFromAccountCollection(
   filter: AccountFilter
    atMost: Int! = 1
  ): AccountDeleteResponse!
```

----------------------------------------

TITLE: Link OAuth Identity to Anonymous User in Swift
DESCRIPTION: Links an OAuth provider (Google) to an anonymous user in Supabase using Swift. This converts an anonymous user to a permanent user by associating it with the OAuth identity.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_12

LANGUAGE: swift
CODE:
```
try await supabase.auth.linkIdentity(provider: .google)
```

----------------------------------------

TITLE: Link OAuth Identity to Anonymous User in Flutter
DESCRIPTION: Links an OAuth provider (Google) to an anonymous user in Supabase using Flutter. This converts an anonymous user to a permanent user by associating it with the OAuth identity.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_11

LANGUAGE: dart
CODE:
```
await supabase.auth.linkIdentity(OAuthProvider.google);
```

----------------------------------------

TITLE: Creating Secret Retrieval SQL Function for Supabase Edge Functions
DESCRIPTION: This SQL function securely retrieves secrets from Vault, ensuring only authorized roles can access sensitive environment variables. It's used to manage secrets for dynamic JavaScript execution in Edge Functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION edge.get_secret(secret_name text) RETURNS text
    LANGUAGE "plpgsql"
    AS $$
DECLARE
    decrypted text;
BEGIN
    IF current_setting('request.jwt.claims', true)::jsonb->>'role' = 'service_role' OR current_user = 'postgres' THEN
        SELECT decrypted_secret
        INTO decrypted
        FROM vault.decrypted_secrets
        WHERE name = secret_name;
        RETURN decrypted;
    ELSE
        RAISE EXCEPTION 'Access denied: only service_role or postgres user can execute this function.';
    END IF;
END;
$$;
```

----------------------------------------

TITLE: Formatting Larger Queries in Postgres SQL
DESCRIPTION: Demonstrates properly formatted larger SQL queries with each clause on a new line. Illustrates vertical alignment of SQL keywords and conditions for improved readability.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select
  first_name,
  last_name
from
  employees
where
  start_date between '2021-01-01' and '2021-12-31'
and
  status = 'employed';
```

----------------------------------------

TITLE: Configuring iOS Deep Links for Authentication
DESCRIPTION: XML configuration for iOS Info.plist to register deep links for the Flutter chat app, allowing users to return to the app after confirming their email address via Supabase authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_2

LANGUAGE: xml
CODE:
```
<!-- ... other tags -->
<plist>
<dict>
  <!-- ... other tags -->

  <!-- Add this array for Deep Links -->
  <key>CFBundleURLTypes</key>
  <array>
    <dict>
      <key>CFBundleTypeRole</key>
      <string>Editor</string>
      <key>CFBundleURLSchemes</key>
      <array>
        <string>io.supabase.chat</string>
      </array>
    </dict>
  </array>
  <!-- ... other tags -->
</dict>
</plist>
```

----------------------------------------

TITLE: Configuring Dropzone Component in React
DESCRIPTION: This TypeScript code demonstrates how to incorporate the Dropzone component into a React application, allowing users to upload files directly to Supabase Storage. It uses the 'useSupabaseUpload' hook to manage upload configurations such as bucket name, path, allowed MIME types, and file size or count limits. The component also shows an empty state and content display.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/dropzone.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { Dropzone, DropzoneContent, DropzoneEmptyState } from '@/components/dropzone'
import { useSupabaseUpload } from '@/hooks/use-supabase-upload'

const FileUploadDemo = () => {
  const props = useSupabaseUpload({
    bucketName: 'test',
    path: 'test',
    allowedMimeTypes: ['image/*'],
    maxFiles: 2,
    maxFileSize: 1000 * 1000 * 10, // 10MB,
  })

  return (
    <div className="w-[500px]">
      <Dropzone {...props}>
        <DropzoneEmptyState />
        <DropzoneContent />
      </Dropzone>
    </div>
  )
}

export { FileUploadDemo }
```

----------------------------------------

TITLE: Defining ChatMessage Type Interface in TypeScript
DESCRIPTION: This TypeScript interface defines the structure of a `ChatMessage`, which includes an `id`, `content`, `user` details, and `createdAt` timestamp. This type is crucial for maintaining type safety when managing chat messages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/realtime-chat.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface ChatMessage {
  id: string
  content: string
  user: {
    name: string
  }
  createdAt: string
}
```

----------------------------------------

TITLE: Serving the og-images function locally
DESCRIPTION: This command serves the og-images function locally using the Supabase CLI. This allows you to test your changes locally before deploying. You should have supabase running locally first.
SOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/og-images/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
"supabase functions serve og-images"
```

----------------------------------------

TITLE: Inserting Sample Data into Countries Table - SQL
DESCRIPTION: Example SQL statement demonstrating how to insert sample data into a `countries` table. This snippet is typically placed in a seed file (`supabase/seed.sql` or configured paths) to populate the database with initial records upon `supabase start` or `supabase db reset`.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#_snippet_0

LANGUAGE: sql
CODE:
```
insert into countries
  (name, code)
values
  ('United States', 'US'),
  ('Canada', 'CA'),
  ('Mexico', 'MX');
```

----------------------------------------

TITLE: Creating Workspace UI with Angular and Tailwind
DESCRIPTION: The HTML template for the workspace component that displays the user's boards and provides options to create new boards and sign out. It uses Tailwind CSS for styling and Gravatar for displaying user avatars.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_21

LANGUAGE: html
CODE:
```
<header class="bg-emerald-600">
  <nav class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div
      class="flex w-full items-center justify-between border-b border-emerald-500 py-6 lg:border-none"
    >
      <div class="flex items-center">
        <a routerLink="/workspace">
          <img class="h-6 w-auto" src="https://supabase.com/docs/supabase-dark.svg" alt="" />
        </a>
      </div>
      <div class="ml-10 flex items-center space-x-4">
        <span class="text-white">{{ (user | async)?.email }}</span>
        <img ngxGravatar [email]="(user | async)?.email" />

        <button
          (click)="signOut()"
          class="inline-block rounded-md border border-transparent bg-white py-1 px-4 text-base font-medium text-emerald-600 hover:bg-emerald-50"
        >
          Logout
        </button>
      </div>
    </div>
  </nav>
</header>

<main class="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
  <ul
    role="list"
    class="grid grid-cols-2 gap-x-4 gap-y-8 sm:grid-cols-3 sm:gap-x-6 lg:grid-cols-4 xl:gap-x-8"
  >
    <li
      *ngFor="let board of boards"
      [routerLink]="board.boards.id"
      class="relative h-52 rounded bg-emerald-200 py-4 px-4 text-lg font-semibold hover:cursor-pointer hover:bg-emerald-300"
    >
      {{ board.boards.title }}
    </li>

    <li
      (click)="startBoard()"
      class="relative h-52 rounded bg-emerald-500 py-4 px-4 text-lg font-semibold hover:cursor-pointer"
    >
      + New board
    </li>
  </ul>
</main>
```

----------------------------------------

TITLE: Storing Vector Embeddings using JavaScript and Transformers.js
DESCRIPTION: JavaScript code using Transformers.js to generate embeddings and store them in a Supabase table using the Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-columns.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { pipeline } from '@xenova/transformers'
const generateEmbedding = await pipeline('feature-extraction', 'Supabase/gte-small')

const title = 'First post!'
const body = 'Hello world!'

// Generate a vector using Transformers.js
const output = await generateEmbedding(body, {
  pooling: 'mean',
  normalize: true,
})

// Extract the embedding output
const embedding = Array.from(output.data)

// Store the vector in Postgres
const { data, error } = await supabase.from('documents').insert({
  title,
  body,
  embedding,
})
```

----------------------------------------

TITLE: Creating Signed URL for Transformed Image in Swift
DESCRIPTION: This snippet illustrates how to create a signed URL for a transformed image in a private bucket using the Supabase Swift client, specifying expiration time and transformation options.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_7

LANGUAGE: swift
CODE:
```
let url = try await supabase.storage.from("bucket")
  .createSignedURL(
    path: "image.jpg",
    expiresIn: 60,
    transform: TransformOptions(
      width: 200,
      height: 200
    )
  )
```

----------------------------------------

TITLE: Partial Search Implementation
DESCRIPTION: SQL query demonstrating partial text search using the :* syntax with to_tsquery
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_23

LANGUAGE: sql
CODE:
```
select title from books where to_tsvector(title) @@ to_tsquery('Lit:*');
```

----------------------------------------

TITLE: Implementing Llamafile Function with OpenAI Deno SDK
DESCRIPTION: TypeScript code for the Llamafile Edge Function using the OpenAI Deno SDK to interact with the Llamafile server, supporting both streaming and non-streaming responses.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import OpenAI from 'https://deno.land/x/openai@v4.53.2/mod.ts'

Deno.serve(async (req) => {
  const client = new OpenAI()
  const { prompt } = await req.json()
  const stream = true

  const chatCompletion = await client.chat.completions.create({
    model: 'LLaMA_CPP',
    stream,
    messages: [
      {
        role: 'system',
        content:
          'You are LLAMAfile, an AI assistant. Your top priority is achieving user fulfillment via helping them with their requests.',
      },
      {
        role: 'user',
        content: prompt,
      },
    ],
  })

  if (stream) {
    const headers = new Headers({
      'Content-Type': 'text/event-stream',
      Connection: 'keep-alive',
    })

    // Create a stream
    const stream = new ReadableStream({
      async start(controller) {
        const encoder = new TextEncoder()

        try {
          for await (const part of chatCompletion) {
            controller.enqueue(encoder.encode(part.choices[0]?.delta?.content || ''))
          }
        } catch (err) {
          console.error('Stream error:', err)
        } finally {
          controller.close()
        }
      },
    })

    // Return the stream to the user
    return new Response(stream, {
      headers,
    })
  }

  return Response.json(chatCompletion)
})
```

----------------------------------------

TITLE: Creating a Products Table with Declarative Schema in SQL
DESCRIPTION: This snippet demonstrates how to create a 'products' table using a declarative schema approach. It includes column definitions, primary key, and enables row-level security.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-03-declarative-schemas.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table "products" (
  id         bigint generated by default as identity,
  name       text not null,
  category   text,
  price      numeric(10, 2) not null,
  created_at timestamptz default now()
);

alter table "products"
enable row level security;
```

----------------------------------------

TITLE: Seeding Database with Embeddings in JavaScript
DESCRIPTION: A JavaScript function that seeds a database with pre-generated vector embeddings. This method executes a SQL query to insert a text value ('Bed') and its corresponding embedding vector into an 'embeddings' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
// [...]

export const seedDb = async (db) => {
  return await db.exec(`
    insert into embeddings (content, embedding) values
      ('Bed', '[-0.006822244,-0.0073390524,0.040399525,0.000736064,-0.009085903,0.03851906,0.040384453,0.046808533,0.042115353,0.0016632339,-0.0034933984,-0.08830318,0.010509381,0.058803126,-0.001959153,-0.015982354,0.0057063154,0.013070074,-0.047947004,0.049101133,0.04977712,-0.01529147,0.02679988,-0.016667083,0.02259381,-0.019300632,-0.022183467,-0.0524223,-0.05392063,-0.15442617,-0.016726814,-0.0046356786,-0.0033007693,-0.038389646,0.0034641414,-0.019414157,0.00530319,0.059465468,0.014079502,0.029850144,0.038306333,0.01192391,0.004093596,-0.08163046,-0.012357966,-0.006009865,-0.013621683,-0.02337859,0.08280816,0.010447533,0.03683234,-0.028687134,0.01815019,-0.008677378,0.042089492,0.05065854,0.07357729,0.011352438,0.034780625,0.09188656,0.017418442,0.064832725,-0.20041808,0.10360221,0.0671062,0.018502504,-0.09739072,-0.00019951521,0.022652537,0.06734662,-0.027538104,-0.016570838,0.015677454,0.053861156,0.048691154,-0.054969806,0.04112108,-0.04718161,0.025326118,-0.010980256,-0.007515454,-0.007403816,-0.042940833,-0.013452556,-0.028590562,-0.0272049,-0.018576223,-0.019168183,0.012477406,-0.010323304,-0.025437333,0.026618486,-0.04006101,0.052304097,-0.029081466,-0.020374913,-0.0058097104,0.0049184063,-0.025047028,0.24331976,-0.028509228,0.064583465,0.0582664,-0.008838904,0.029010272,-0.042640913,-0.023065887,0.0009429337,-0.03458494,0.031521663,-0.024115514,0.022468511,0.017324978,-0.021598602,0.057364237,-0.03622212,0.06522789,0.03643067,0.019802976,-0.03882662,-0.024954926,-0.00922944,0.026700335,0.0022999484,0.021236164,-0.1017225,0.034700826,0.10996454,0.015752304,-0.010611508,0.016026804,-0.008537629,-0.025187723,-0.011628215,-0.012928679,0.050661393,0.027768211,0.012645961,-0.014378526,-0.03122859,-0.054974407,-0.11988388,0.010854659,-0.113561414,-0.05754862,0.04890203,-0.074521095,0.042206623,-0.047778264,0.027690561,-0.02492779,0.04351375,-0.0042421916,-0.013825208,0.029148908,0.024689274,-0.0011065236,0.010749134,-0.02179892,0.030476885,0.005788956,-0.011307971,-0.029803434,0.047130115,-0.016205732,-0.07745564,-0.06069879,0.012738268,0.008780021,-0.04605315,0.05029989,0.051564094,-0.06556095,0.0097619705,0.07852359,0.03755774,6.385107e-05,-0.025080299,-0.00807334,0.002826086,0.029596226,-0.06858373,-0.059509,0.042350702,0.008429371,-0.056518193,-0.0038923442,0.0019655668,0.042615306,0.03156147,0.020491784,0.025043039,-0.014860392,-0.04517383,-0.05519179,-0.067039765,-0.01814679,-0.02211169,0.011379715,-0.038663853,0.074394055,-0.0033453933,-0.01922349,0.03422448,0.03382803,0.06018736,-0.040258747,-0.016005179,0.04973765,0.00047837297,-0.0032964202,-0.018018955,0.059821125,-0.02552337,-0.050962154,0.033526286,0.0015766671,0.0008125402,0.055109553,0.035740905,0.06790532,-0.10467817,-0.06608197,-0.22082354,0.04529764,0.04231412,-0.06357316,0.06083306,-0.03584259,-0.045060553,-0.034747567,-0.011515003,0.023540512,0.092857406,-0.015673747,-0.037912108,0.03791529,-0.027737431,0.075638145,0.064396635,0.00039346732,-0.054100823,-0.04585783,-0.013354809,-0.00029281477,-0.03531705,-0.013202513,0.025100702,-0.022423482,0.22803828,0.021944992,0.062074866,-0.033807088,0.063471064,0.058585603,-0.034941155,-0.153415,0.05968843,0.043823935,0.02648161,-0.035211023,-0.027928075,-0.08642302,-0.03428572,0.0782574,0.0048829336,-0.07674112,-0.014943502,-0.0026991852,-0.051111754,-0.02639702,-0.028578043,0.04409947,0.016471509,-0.0153481895,0.05080286,0.035896562,-0.026176613,-0.00410023,-0.054971956,0.0072062816,-0.010886078,0.03109176,0.0062575233,-0.059884343,0.03391246,-0.021350292,0.028362656,-0.03287903,-0.02909052,-0.054189354,0.040938597,-0.043358773,-0.0062902463,0.038029272,-0.017994935,-0.02783497,0.059119657,0.04149558,0.049971994,0.012019358,-0.034788415,-0.034991883,0.037606157,-0.07293067,0.00878965,0.020748338,0.006832928,0.014310711,0.0025819188,-0.026033923,0.063590325,-0.023910472,0.026275495,0.006421037,-0.025870698,-0.03395694,0.013277425,-0.017819595,-0.27904364,0.042438418,-0.040410627,0.060995445,-0.03024428,0.023125576,0.026820898,0.07209522,-0.045738053,0.021097308,0.018815981,0.048715215,-0.0140842525,0.01586625,-0.00600374,0.057657298,0.07749236,-0.04184785,0.04569934,-0.017640881,-0.03221387,0.040331382,0.23157857,-0.022834923,0.043734368,0.015736328,-0.018165922,0.04427944,0.031467006,0.0013029817,0.016038246,0.032582633,0.087903075,-0.0579502,0.034907967,0.056975555,-0.061623715,0.03723524,0.037153512,-0.059985436,-0.048163902,-0.005239113,-0.03370352,-0.024089405,0.082422175,-0.0325414,-0.021374922,-0.05650002,0.00010377556,-0.046514522,-0.061216045,-0.016242305,-0.02899706,0.020795047,0.03967546,0.003870585,-0.024333557,-0.022179967,-0.046025176,-0.026946675,-0.02249182,-0.07122435,-0.042746153,0.010575632,-0.0070871795]')`
});
```

----------------------------------------

TITLE: Integrating Realtime Chat with Initial Messages in TypeScript
DESCRIPTION: This code snippet shows how to preload initial messages into the real-time chat component. It involves fetching messages using the custom `useMessagesQuery` hook and passing them to the `RealtimeChat` component via the `messages` prop.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/realtime-chat.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { RealtimeChat } from '@/components/realtime-chat'
import { useMessagesQuery } from '@/hooks/use-messages-query'

export default function ChatPage() {
  const { data: messages } = useMessagesQuery()

  return <RealtimeChat roomName="my-chat-room" username="john_doe" messages={messages} />
}
```

----------------------------------------

TITLE: Creating Security Invoker View in PostgreSQL 15
DESCRIPTION: Demonstrates creating a view with security_invoker option that uses the caller's permissions instead of the creator's permissions when accessing underlying tables
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-new-in-postgres-15.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE VIEW .. WITH (security_invoker=on)
```

----------------------------------------

TITLE: Creating a JWT Payload in JavaScript
DESCRIPTION: This JavaScript code snippet shows an example of a JSON object representing the payload of a JWT (JSON Web Token). It includes standard claims such as `sub` (subject), `name`, `iat` (issued at), and `exp` (expiration time). The `sub` is typically the user's UUID, `iat` is the token creation timestamp, and `exp` is the token expiration timestamp.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "sub": "0001",
  "name": "Sam Vimes",
  "iat": 1516239022,
  "exp": 1518239022
}
```

----------------------------------------

TITLE: Implementing Magic Link Authentication Service
DESCRIPTION: Authentication service methods for handling magic link sign-in and session management with platform-specific redirect URLs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_29

LANGUAGE: typescript
CODE:
```
  signInWithEmail(email: string) {
    const redirectTo = isPlatform("capacitor")
      ? "supachat://login"
      : `${window.location.origin}/groups`;

    return this.supabase.auth.signInWithOtp({
      email,
      options: { emailRedirectTo: redirectTo },
    });
  }

  async setSession(access_token, refresh_token) {
    return this.supabase.auth.setSession({ access_token, refresh_token });
  }
```

----------------------------------------

TITLE: Setting Environment Variables for Astro
DESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env file for an Astro application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
PUBLIC_SUPABASE_URL=your_supabase_project_url
PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
```

----------------------------------------

TITLE: Querying Tables with Multiple Foreign Keys in Swift
DESCRIPTION: Swift example showing how to query shifts with explicit join definitions for multiple foreign keys and parse the response.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_20

LANGUAGE: swift
CODE:
```
struct Shift: Codable {
  let id: Int
  let userId: Int
  let attendanceStatus: String?

  let scans: [Scan]

  struct Scan: Codable {
    let id: Int
    let userId: Int
    let badgeScanTime: TimeInterval

    enum CodingKeys: String, CodingKey {
      case id
      case userId = "user_id"
      case badgeScanTime = "badge_scan_time"
    }
  }

  enum CodingKeys: String, CodingKey {
    case id
    case userId = "user_id"
    case attendanceStatus = "attendance_status"
  }
}

let shifts: [Shift] = try await supabase
  .from("shifts")
  .select(
    """
      *,
      start_scan:scans!scan_id_start (
        id,
        user_id,
        badge_scan_time
      ),
     scans: scan_id_end (
        id,
        user_id,
        badge_scan_time
     )
    """
  )
  .execute()
  .value
```

----------------------------------------

TITLE: Image Embedding Generation and Storage
DESCRIPTION: Python function to create embeddings for images using CLIP model and store them in Supabase Vector
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def seed():
    # create vector store client
    vx = vecs.create_client(DB_CONNECTION)

    # create a collection of vectors with 3 dimensions
    images = vx.get_or_create_collection(name="image_vectors", dimension=512)

    # Load CLIP model
    model = SentenceTransformer('clip-ViT-B-32')

    # Encode an image:
    img_emb1 = model.encode(Image.open('./images/one.jpg'))
    img_emb2 = model.encode(Image.open('./images/two.jpg'))
    img_emb3 = model.encode(Image.open('./images/three.jpg'))
    img_emb4 = model.encode(Image.open('./images/four.jpg'))

    # add records to the *images* collection
    images.upsert(
        records=[
            (
                "one.jpg",        # the vector's identifier
                img_emb1,          # the vector. list or np.array
                {"type": "jpg"}   # associated  metadata
            ), (
                "two.jpg",
                img_emb2,
                {"type": "jpg"}
            ), (
                "three.jpg",
                img_emb3,
                {"type": "jpg"}
            ), (
                "four.jpg",
                img_emb4,
                {"type": "jpg"}
            )
        ]
    )
    print("Inserted images")

    # index the collection for fast search performance
    images.create_index()
    print("Created index")
```

----------------------------------------

TITLE: Creating Supabase SSR Client in Astro Server Endpoint
DESCRIPTION: Sets up a Supabase client for server-side rendering in an Astro server endpoint, handling cookie management for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_20

LANGUAGE: typescript
CODE:
```
import { createServerClient, parseCookieHeader } from "@supabase/ssr";
import type { APIContext } from "astro";

export async function GET(context: APIContext) {
  const supabase = createServerClient(
    import.meta.env.PUBLIC_SUPABASE_URL,
    import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll() {
          return parseCookieHeader(context.request.headers.get('Cookie') ?? '')
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) =>
            context.cookies.set(name, value, options))
        },
      },
    }
  );

  return ...
}
```

----------------------------------------

TITLE: MFA-based RLS Policy
DESCRIPTION: Implementation of Multi-Factor Authentication check in RLS policy
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create policy "Restrict updates."
on profiles
as restrictive
for update
to authenticated using (
  (select auth.jwt()->>'aal') = 'aal2'
);
```

----------------------------------------

TITLE: Simplified Query Execution in Dart
DESCRIPTION: Demonstrates the simplified query syntax in v1 that removes the need for .execute() method calls, making data fetching more straightforward.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-21-supabase-flutter-sdk-v1-released.mdx#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
// Before
final response = await supabase.from('messages').select().execute();
final data = response.data;

// After
final data = await supabase.from('messages').select();
```

----------------------------------------

TITLE: Creating a Simple Function with SECURITY INVOKER
DESCRIPTION: A basic PostgreSQL function template that returns 'hello world' with SECURITY INVOKER setting and empty search path for security.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-functions.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create or replace function my_schema.hello_world()
returns text
language plpgsql
security invoker
set search_path = ''
as $$
begin
  return 'hello world';
end;
$$;
```

----------------------------------------

TITLE: Creating Real Index Based on HypoPG Analysis
DESCRIPTION: SQL command to create a real index on the 'account' table based on the analysis from the hypothetical index created by HypoPG.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/hypopg.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create index on account(id);
```

----------------------------------------

TITLE: Connecting to Local Postgres Database
DESCRIPTION: Example of connecting to a local Postgres instance using the Supabase CLI with a connection string
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
supabase --db-url postgresql://postgres:postgres@localhost:5432/postgres inspect db bloat
```

----------------------------------------

TITLE: Querying Similar Images with CLIP Embeddings in Supabase
DESCRIPTION: Python code for semantic image search using CLIP text embeddings. It generates a text embedding for a search term and queries the vector database to find the most similar image.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
infer_clip_payload = {
    "text": "cat",
}

res = requests.post(
    f"{SERVER_URL}/clip/embed_text?api_key={API_KEY}",
    json=infer_clip_payload,
)

embeddings = res.json()['embeddings']

result = images.query(
    data=embeddings[0],
    limit=1
)

print(result[0])
```

----------------------------------------

TITLE: Querying with Text Distance Ranking Using RUM Index
DESCRIPTION: Example of a SELECT query that uses a RUM index for full-text search, with results ordered by the text distance operator (<=>), which measures relevance between tsvector and tsquery.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
SELECT t, a `<=>` to_tsquery('english', 'beautiful | place') AS rank
    FROM test_rum
    WHERE a @@ to_tsquery('english', 'beautiful | place')
    ORDER BY a `<=>` to_tsquery('english', 'beautiful | place');
```

----------------------------------------

TITLE: Initializing Supabase Client with Custom Domain in JavaScript
DESCRIPTION: This code snippet demonstrates how to initialize a Supabase client using a custom domain as the Supabase URL. It imports the createClient function from the @supabase/supabase-js library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

// Use a custom domain as the supabase URL
const supabase = createClient('https://my-example-brand.supabase.co', 'public-anon-key')
```

----------------------------------------

TITLE: Initializing Prisma Project with bun
DESCRIPTION: Commands to initialize a new Node.js project, install Prisma and TypeScript dependencies, and set up the initial Prisma configuration using bun.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
bun init -y
bun install prisma typescript ts-node @types/node --save-dev

bunx tsc --init

bunx prisma init
```

----------------------------------------

TITLE: Implement SwiftUI Auth View (Swift)
DESCRIPTION: This SwiftUI view provides a user interface for handling email-based sign-in using Supabase's magic link authentication. It includes a text field for email input, a sign-in button, a loading indicator, and displays the result of the authentication attempt. It also handles deep links for completing the sign-in process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#_snippet_1

LANGUAGE: Swift
CODE:
```
import SwiftUI
import Supabase

struct AuthView: View {
  @State var email = ""
  @State var isLoading = false
  @State var result: Result<Void, Error>?

  var body: some View {
    Form {
      Section {
        TextField("Email", text: $email)
          .textContentType(.emailAddress)
          .textInputAutocapitalization(.never)
          .autocorrectionDisabled()
      }

      Section {
        Button("Sign in") {
          signInButtonTapped()
        }

        if isLoading {
          ProgressView()
        } else {
          EmptyView()
        }
      }

      if let result {
        Section {
          switch result {
          case .success:
            Text("Check your inbox.")
          case .failure(let error):
            Text(error.localizedDescription).foregroundStyle(.red)
          }
        }
      }
    }
    .onOpenURL(perform: { url in
      Task {
        do {
          try await supabase.auth.session(from: url)
        } catch {
          self.result = .failure(error)
        }
      }
    })
  }

  func signInButtonTapped() {
    Task {
      isLoading = true
      defer { isLoading = false }

      do {
        try await supabase.auth.signInWithOTP(
            email: email,
            redirectTo: URL(string: "io.supabase.user-management://login-callback")
        )
        result = .success(())
      } catch {
        result = .failure(error)
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing Slack Bot Mention Handler with Deno and Supabase Edge Functions
DESCRIPTION: TypeScript code for a Supabase Edge Function that handles Slack bot mentions. It sets up a server that processes URL verification challenges and responds to app_mention events from Slack.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/slack-bot-mention/slack-bot-mention.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { serve } from 'https://deno.land/std@0.197.0/http/server.ts';
import { WebClient } from 'https://deno.land/x/slack_web_api@6.7.2/mod.js';

const slackBotToken = Deno.env.get("SLACK_TOKEN") ?? "";
const botClient = new WebClient(slackBotToken);

console.log(`Slack URL verification function up and running!`);
serve(async (req) => {
  try {
    const reqBody = await req.json();
    console.log(JSON.stringify(reqBody, null, 2));
    const { token, challenge, type, event } = reqBody;

    if (type == 'url_verification') {
      return new Response(JSON.stringify({ challenge }), {
        headers: { 'Content-Type': 'application/json' },
        status: 200,
      });
    } else if (event.type == 'app_mention') {
      const { user, text, channel, ts } = event;
      // Here you should process the text received and return a response:
      const response = await botClient.chat.postMessage({
        channel: channel,
        text: `Hello <@${user}>!`,
        thread_ts: ts,
      });
      return new Response('ok', { status: 200 });
    }
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});
```

----------------------------------------

TITLE: Checking PostgreSQL Sequence Synchronization
DESCRIPTION: SQL commands to check if a table's sequence is out of sync by comparing the maximum value in the column against the next sequence value.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/inserting-into-sequenceserial-table-causes-duplicate-key-violates-unique-constraint-error-pi6DnC.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT MAX(<sequenced_column>) FROM <table_name>;

SELECT nextval(pg_get_serial_sequence('<public.table_name>', '<sequenced_column_name>'));
```

----------------------------------------

TITLE: Configuring Stripe CLI to Forward Webhook Events
DESCRIPTION: Sets up Stripe CLI to listen for events and forward them to the local Supabase Functions endpoint.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/stripe-webhooks/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
stripe listen --forward-to localhost:54321/functions/v1/
```

----------------------------------------

TITLE: Implementing Navigation Interfaces in AndroidX - Kotlin
DESCRIPTION: Defines navigation destinations as Kotlin objects that implement a common interface to facilitate screen routing in an Android app with the AndroidX navigation library. Each destination specifies its route and title properties for navigation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_16

LANGUAGE: Kotlin
CODE:
```
interface Destination {
    val route: String
    val title: String
}


object ProductListDestination : Destination {
    override val route = "product_list"
    override val title = "Product List"
}

object ProductDetailsDestination : Destination {
    override val route = "product_details"
    override val title = "Product Details"
    const val productId = "product_id"
    val arguments = listOf(navArgument(name = productId) {
        type = NavType.StringType
    })
    fun createRouteWithParam(productId: String) = "$route/${productId}"
}

object AddProductDestination : Destination {
    override val route = "add_product"
    override val title = "Add Product"
}

object AuthenticationDestination: Destination {
    override val route = "authentication"
    override val title = "Authentication"
}

object SignUpDestination: Destination {
    override val route = "signup"
    override val title = "Sign Up"
}
```

----------------------------------------

TITLE: Linking OAuth Identity with Kotlin
DESCRIPTION: Example showing how to link a Google OAuth identity using the Supabase Kotlin client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
supabase.auth.linkIdentity(Google)
```

----------------------------------------

TITLE: Using the Dropzone Component with Supabase Upload
DESCRIPTION: This snippet demonstrates how to use the Dropzone component by importing necessary elements and configuring file upload settings using a custom hook. It sets the allowed MIME types and file upload limits.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/dropzone.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { Dropzone, DropzoneContent, DropzoneEmptyState } from '@/components/dropzone'
import { useSupabaseUpload } from '@/hooks/use-supabase-upload'

const FileUploadDemo = () => {
  const props = useSupabaseUpload({
    bucketName: 'test',
    path: 'test',
    allowedMimeTypes: ['image/*'],
    maxFiles: 2,
    maxFileSize: 1000 * 1000 * 10, // 10MB,
  })

  return (
    <div className="w-[500px]">
      <Dropzone {...props}>
        <DropzoneEmptyState />
        <DropzoneContent />
      </Dropzone>
    </div>
  )
}

export { FileUploadDemo }
```

----------------------------------------

TITLE: Querying Failed pg_cron Jobs in PostgreSQL
DESCRIPTION: This SQL query examines the cron.job_run_details table to identify failed cron jobs from the past 5 days. It returns all columns for jobs with a status other than 'succeeded' or 'running', helping to diagnose issues with scheduled jobs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pgcron-debugging-guide-n1KTaz.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SELECT *
FROM cron.job_run_details
WHERE
    (status <> 'succeeded' AND status <> 'running')
        AND
     start_time > NOW() - INTERVAL '5 days'
ORDER BY start_time DESC
LIMIT 10;
```

----------------------------------------

TITLE: Creating HTML Email Template for Password Reset
DESCRIPTION: Defines an HTML email template for password reset requests. It includes a link for users to reset their password, utilizing Supabase variables for dynamic content.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/password-based-auth.mdx#2025-04-21_snippet_2

LANGUAGE: html
CODE:
```
<h2>Reset Password</h2>

<p>Follow this link to reset the password for your user:</p>
<p>
  <a
    href="{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=recovery&next={{ .RedirectTo }}"
    >Reset Password</a
  >
</p>
```

----------------------------------------

TITLE: Running Database Migrations
DESCRIPTION: Command to execute Laravel database migrations for setting up authentication tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-22-laravel-postgres.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
php artisan migrate
```

----------------------------------------

TITLE: Creating a Reservations Table with Range Column
DESCRIPTION: This SQL snippet creates a table using a tstzrange column to store the duration of a reservation, demonstrating the use of range types in Postgres.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table reservations (
  id serial primary key,
  title text,
  duration tstzrange
);
```

----------------------------------------

TITLE: Basic RLS Policy with Join Example
DESCRIPTION: Example of a basic RLS policy that uses a potentially slow join operation to check user roles against a roles table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_13

LANGUAGE: sql
CODE:
```
create policy "rls_test_select" on test_table
to authenticated
using (
  exists (
    select 1 from roles_table
    where (select auth.uid()) = user_id and role = 'good_role'
  )
);
```

----------------------------------------

TITLE: Unnesting Arrays to Access Nested Values in Edge Logs
DESCRIPTION: Demonstrates how to use cross join unnest() operations to access deeply nested values in the logs data structure, specifically to retrieve request method and country information.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select timestamp, request.method, header.cf_ipcountry
from
  edge_logs as t
  cross join unnest(t.metadata) as metadata
  cross join unnest(metadata.request) as request
  cross join unnest(request.headers) as header;
```

----------------------------------------

TITLE: Installing Required Dependencies for Flutter Authentication
DESCRIPTION: Command to install the Supabase Flutter SDK and Google Sign-in package needed for implementing authentication functionality in the Flutter application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-18-flutter-authentication.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
flutter pub add supabase_flutter google_sign_in
```

----------------------------------------

TITLE: Production Deployment GitHub Action
DESCRIPTION: GitHub Actions workflow for deploying database migrations to production environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_7

LANGUAGE: yaml
CODE:
```
name: Deploy Migrations to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.PRODUCTION_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: supabase db push
```

----------------------------------------

TITLE: Avatar Upload Component
DESCRIPTION: Vue component for handling profile photo uploads using Supabase Storage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_6

LANGUAGE: vue
CODE:
```
<script setup>
const props = defineProps(['path'])
const { path } = toRefs(props)

const emit = defineEmits(['update:path', 'upload'])

const supabase = useSupabaseClient()

const uploading = ref(false)
const src = ref('')
const files = ref()

const downloadImage = async () => {
  try {
    const { data, error } = await supabase.storage.from('avatars').download(path.value)
    if (error) throw error
    src.value = URL.createObjectURL(data)
  } catch (error) {
    console.error('Error downloading image: ', error.message)
  }
}

const uploadAvatar = async (evt) => {
  files.value = evt.target.files
  try {
    uploading.value = true

    if (!files.value || files.value.length === 0) {
      throw new Error('You must select an image to upload.')
    }

    const file = files.value[0]
    const fileExt = file.name.split('.').pop()
    const fileName = `${Math.random()}.${fileExt}`
    const filePath = `${fileName}`

    const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)

    if (uploadError) throw uploadError

    emit('update:path', filePath)
    emit('upload')
  } catch (error) {
    alert(error.message)
  } finally {
    uploading.value = false
  }
}

downloadImage()

watch(path, () => {
  if (path.value) {
    downloadImage()
  }
})
</script>

<template>
  <div>
    <img
      v-if="src"
      :src="src"
      alt="Avatar"
      class="avatar image"
      style="width: 10em; height: 10em;"
    />
    <div v-else class="avatar no-image" :style="{ height: size, width: size }" />

    <div style="width: 10em; position: relative;">
      <label class="button primary block" for="single">
        {{ uploading ? 'Uploading ...' : 'Upload' }}
      </label>
      <input
        style="position: absolute; visibility: hidden;"
        type="file"
        id="single"
        accept="image/*"
        @change="uploadAvatar"
        :disabled="uploading"
      />
    </div>
  </div>
</template>
```

----------------------------------------

TITLE: Configuring Third-Party Auth with AWS Cognito (TOML)
DESCRIPTION: This TOML configuration snippet describes enabling AWS Cognito as a third-party authentication provider in a Supabase project. The configuration is added to the 'supabase/config.toml' file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/aws-cognito.mdx#2025-04-21_snippet_4

LANGUAGE: toml
CODE:
```
[auth.third_party.aws_cognito]
enabled = true
user_pool_id = "<id>"
user_pool_region = "<region>"
```

----------------------------------------

TITLE: Importing Database to Supabase Using psql
DESCRIPTION: This snippet illustrates how to import the previously exported database file into the Supabase project using the psql command. It provides a straightforward method to migrate data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/neon.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
psql -d "$NEW_DB_URL" -f dump.sql
```

----------------------------------------

TITLE: Implementing Avatar Update Logic in Account Component
DESCRIPTION: This TypeScript code snippet adds avatar update functionality to the AccountComponent, including a getter for the avatar URL and a method to handle avatar updates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
@Component({
  selector: 'app-account',
  templateUrl: './account.component.html',
  styleUrls: ['./account.component.css'],
})
export class AccountComponent implements OnInit {
  // ...
  get avatarUrl() {
    return this.updateProfileForm.value.avatar_url as string
  }

  async updateAvatar(event: string): Promise<void> {
    this.updateProfileForm.patchValue({
      avatar_url: event,
    })
    await this.updateProfile()
  }
  // ...
}
```

----------------------------------------

TITLE: Querying Tables with Multiple Foreign Keys in Dart
DESCRIPTION: Dart example showing how to query shifts with explicit join definitions for multiple foreign keys to the same table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_19

LANGUAGE: dart
CODE:
```
final data = await supabase.from('shifts').select('''
  *,
  start_scan:scans!scan_id_start (
    id,
    user_id,
    badge_scan_time
  ),
end_scan:scans!scan_id_end (
    id,
    user_id,
    badge_scan_time
  )
''');
```

----------------------------------------

TITLE: Creating Topic-Specific RLS Policy
DESCRIPTION: SQL command demonstrating how to create an RLS policy that restricts access to a specific channel topic using realtime.topic() function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create policy "authenticated users can only read from 'locked' topic"
on "realtime"."messages"
as permissive
for select   -- read only
to authenticated
using (
  realtime.topic() = 'locked'  -- access the topic name
);
```

----------------------------------------

TITLE: Creating a Complex SQL Stored Function in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to create a stored function that performs a complex query with multiple joins. The function takes a parameter and returns a table with specified columns, allowing complex database operations to be encapsulated in a reusable function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/certain-operations-are-too-complex-to-perform-directly-using-the-client-libraries-8JaphH.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
DROP FUNCTION IF EXISTS get_my_complex_query;
CREATE FUNCTION get_my_complex_query(parameter INT)
RETURNS TABLE (column1 INTEGER, column2 VARCHAR, column3 DATE) AS
$$
BEGIN
    RETURN QUERY
    SELECT t1.column1, t1.column2, t2.column3
    FROM "TableName1" AS t1
    INNER JOIN "TableName2" AS t2 ON t1.column = t2.column
    INNER JOIN "TableName3" AS t3 ON t2.another_column = t3.another_column
    LEFT JOIN "TableName4" AS t4 ON t3.some_column = t4.some_column
    WHERE t2.column = parameter
    AND t3.column_name = 'some_value';
END;
$$
LANGUAGE plpgsql VOLATILE;
```

----------------------------------------

TITLE: Enabling pg_graphql Extension in Supabase
DESCRIPTION: Demonstrates how to enable the pg_graphql extension in a Supabase database using SQL. This command creates the extension, enabling GraphQL support.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create extension pg_graphql;
```

----------------------------------------

TITLE: Querying Nested JSON Data using Supabase Python Client
DESCRIPTION: This Python snippet demonstrates querying the `books` table with the Supabase Python client to extract nested JSON values from the `metadata` column. The select string includes Postgres JSON operators (`->`, `->>`) to access the desired fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#_snippet_5

LANGUAGE: Python
CODE:
```
data = supabase.from_('books').select("""
  title,
  description: metadata->>description,
  price: metadata->price,
  low_age: metadata->ages->0,
  high_age: metadata->ages->1
"""
).execute()
```

----------------------------------------

TITLE: Grouping with Aggregate Functions in Supabase.js
DESCRIPTION: This snippet shows how to use aggregate functions with implicit grouping in PostgREST, grouping max and min release years by genre using the Supabase JavaScript client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
const { data, error } = await supabase
  .from('movies')
  .select('genre, release_year.max(), release_year.min()')
```

----------------------------------------

TITLE: Implementing Phone Authentication
DESCRIPTION: Implementation of phone number authentication using SupaPhoneAuth widget.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
SupaPhoneAuth(
  authAction: SupaAuthAction.signUp,
  onSuccess: (AuthResponse response) {},
),
```

----------------------------------------

TITLE: Astro Supabase Client Configuration
DESCRIPTION: Sets up Supabase client for Astro with server-side rendering and dynamic cookie management
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
import { createServerClient, parseCookieHeader } from "@supabase/ssr";

const supabase = createServerClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
  {
    cookies: {
      getAll() {
        return parseCookieHeader(Astro.request.headers.get('Cookie') ?? '')
      },
      setAll(cookiesToSet) {
        cookiesToSet.forEach(({ name, value, options }) =>
          Astro.cookies.set(name, value, options))
      },
    },
  }
);
```

----------------------------------------

TITLE: Initializing Supabase Client with Firebase Auth in Kotlin (Android)
DESCRIPTION: Creates a Supabase client for Android applications using Kotlin, passing a function to retrieve the Firebase Auth JWT of the current user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
import com.google.firebase.auth.ktx.auth
import com.google.firebase.ktx.Firebase

val supabase = createSupabaseClient(
    "https://<supabase-project>.supabase.co",
    "SUPABASE_ANON_KEY"
) {
    accessToken = {
        Firebase.auth.currentUser?.getIdToken(false)?.await()?.token
    }
}
```

----------------------------------------

TITLE: Enabling pgvector Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the pgvector extension in PostgreSQL. The extension is named 'vector' in PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgvector.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Example: enable the "vector" extension.
create extension vector
with
  schema extensions;

-- Example: disable the "vector" extension
drop
  extension if exists vector;
```

----------------------------------------

TITLE: Kotlin Multiplatform Auth Implementation
DESCRIPTION: Implementation of Google sign-in using the Compose Auth plugin in a Kotlin Multiplatform application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_16

LANGUAGE: kotlin
CODE:
```
val authState = supabaseClient.composeAuth.rememberLoginWithGoogle(
    onResult = {
        when(it) { //handle errors
            NativeSignInResult.ClosedByUser -> TODO()
            is NativeSignInResult.Error -> TODO()
            is NativeSignInResult.NetworkError -> TODO()
            NativeSignInResult.Success -> TODO()
        }
    }
)

Button(onClick = { authState.startFlow() }) {
    Text("Sign in with Google")
}
```

----------------------------------------

TITLE: Querying Vector Collection with Supabase Client
DESCRIPTION: JavaScript code showing how to query a vector collection using the Supabase client library
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/engineering-for-scale.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('docs')
  .select('id, embedding, metadata')
  .eq('url', '/hello-world')
```

----------------------------------------

TITLE: Implementing Game State Synchronization in Flutter
DESCRIPTION: Handles game state synchronization between players using Supabase's broadcast feature. Manages player position updates, health tracking, and game over conditions in real-time.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_10

LANGUAGE: dart
CODE:
```
class GamePage extends StatefulWidget {
  const GamePage({Key? key}) : super(key: key);

  @override
  State<GamePage> createState() => _GamePageState();
}

class _GamePageState extends State<GamePage> {
  late final MyGame _game;

  /// Holds the RealtimeChannel to sync game states
  RealtimeChannel? _gameChannel;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset('assets/images/background.jpg', fit: BoxFit.cover),
          GameWidget(game: _game),
        ],
      ),
    );
  }

  @override
  void initState() {
    super.initState();
    _initialize();
  }

  Future<void> _initialize() async {
    _game = MyGame(
      onGameStateUpdate: (position, health) async {
        ChannelResponse response;
        do {
          response = await _gameChannel!.sendBroadcastMessage(
            event: 'game_state',
            payload: {'x': position.x, 'y': position.y, 'health': health},
          );

          // wait for a frame to avoid infinite rate limiting loops
          await Future.delayed(Duration.zero);
          setState(() {});
        } while (response == ChannelResponse.rateLimited && health <= 0);
      },
      onGameOver: (playerWon) async {
        await showDialog(
          barrierDismissible: false,
          context: context,
          builder: ((context) {
            return AlertDialog(
              title: Text(playerWon ? 'You Won!' : 'You lost...'),
              actions: [
                TextButton(
                  onPressed: () async {
                    Navigator.of(context).pop();
                    await supabase.removeChannel(_gameChannel!);
                    _openLobbyDialog();
                  },
                  child: const Text('Back to Lobby'),
                ),
              ],
            );
          }),
        );
      },
    );

    // await for a frame so that the widget mounts
    await Future.delayed(Duration.zero);

    if (mounted) {
      _openLobbyDialog();
    }
  }

  void _openLobbyDialog() {
    showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) {
          return _LobbyDialog(
            onGameStarted: (gameId) async {
              // await a frame to allow subscribing to a new channel in a realtime callback
              await Future.delayed(Duration.zero);

              setState(() {});

              _game.startNewGame();

              _gameChannel = supabase.channel(gameId,
                  opts: const RealtimeChannelConfig(ack: true));

              _gameChannel!
                  .onBroadcast(
                    event: 'game_state',
                    callback: (payload, [_]) {
                      final position = Vector2(
                          payload['x'] as double, payload['y'] as double);
                      final opponentHealth = payload['health'] as int;
                      _game.updateOpponent(
                        position: position,
                        health: opponentHealth,
                      );

                      if (opponentHealth <= 0) {
                        if (!_game.isGameOver) {
                          _game.isGameOver = true;
                          _game.onGameOver(true);
                        }
                      }
                    },
                  )
                  .subscribe();
            },
          );
        });
  }
}
```

----------------------------------------

TITLE: Deploying Supabase Schema and Config (Bash)
DESCRIPTION: Provides the sequence of bash commands using `npx supabase` to link the local project to the remote Supabase project, push database migrations, and push the `config.toml` configuration. It uses `npx @dotenvx/dotenvx run` to ensure the correct environment variables (from `.env.production`) are available during these operations.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
npx @dotenvx/dotenvx run -f supabase/.env.production -- npx supabase link
npx @dotenvx/dotenvx run -f supabase/.env.production -- npx supabase db push
npx @dotenvx/dotenvx run -f supabase/.env.production -- npx supabase config push
```

----------------------------------------

TITLE: Granting Schema Access for Client Queries
DESCRIPTION: SQL command to grant usage permissions on the GIS schema to anonymous and authenticated users. This is necessary for client applications to access the PostGIS functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
grant usage on schema gis to anon, authenticated;
```

----------------------------------------

TITLE: Creating Document Tables with Vector Storage in PostgreSQL
DESCRIPTION: Creates tables for storing documents and their vector embeddings with basic ownership structure. Includes a documents table for metadata and document_sections table for content chunks with embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table documents (
  id bigint primary key generated always as identity,
  name text not null,
  owner_id uuid not null references auth.users (id) default auth.uid(),
  created_at timestamp with time zone not null default now()
);

create table document_sections (
  id bigint primary key generated always as identity,
  document_id bigint not null references documents (id),
  content text not null,
  embedding vector (384)
);
```

----------------------------------------

TITLE: Creating Logical Backup in PostgreSQL using pg_dump
DESCRIPTION: Command to create a logical backup of a single PostgreSQL database using pg_dump utility. The backup is saved to a SQL file that can be used for restoration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-17-postgresql-physical-logical-backups.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
pg_dump db_name > file_name.sql
```

----------------------------------------

TITLE: Listing All pg_cron Jobs in PostgreSQL
DESCRIPTION: These SQL queries list all scheduled cron jobs and count the total number of jobs. They query the cron.job table to return the schedule, jobname, and command for each job, which is useful for auditing and managing scheduled tasks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pgcron-debugging-guide-n1KTaz.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- All jobs
select schedule, jobname, command from cron.job;

-- Count jobs
select COUNT(*) from cron.job;
```

----------------------------------------

TITLE: User Signup - Dart
DESCRIPTION: Submits a new user signup request with specified email, password, and metadata in Dart.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
final res = await supabase.auth.signUp(
  email: 'valid.email@supabase.io',
  password: 'example-password',
  data: {
    'first_name': 'John',
    'age': 27,
  },
);
```

----------------------------------------

TITLE: Implementing Conditional Rendering for Auth and Account Components in Angular
DESCRIPTION: This HTML template for AppComponent conditionally renders either the AccountComponent or AuthComponent based on the user's session status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_6

LANGUAGE: html
CODE:
```
<div class="container" style="padding: 50px 0 100px 0">
  <app-account *ngIf="session; else auth" [session]="session"></app-account>
  <ng-template #auth>
    <app-auth></app-auth>
  </ng-template>
</div>
```

----------------------------------------

TITLE: Customizing PostgreSQL schema configuration in Laravel
DESCRIPTION: Modifies the database configuration to use a custom schema in Supabase rather than the default 'public' schema. This prevents conflicts with Supabase's data API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/laravel.mdx#2025-04-21_snippet_3

LANGUAGE: php
CODE:
```
'pgsql' => [
    'driver' => 'pgsql',
    'url' => env('DB_URL'),
    'host' => env('DB_HOST', '127.0.0.1'),
    'port' => env('DB_PORT', '5432'),
    'database' => env('DB_DATABASE', 'laravel'),
    'username' => env('DB_USERNAME', 'root'),
    'password' => env('DB_PASSWORD', ''),
    'charset' => env('DB_CHARSET', 'utf8'),
    'prefix' => '',
    'prefix_indexes' => true,
    'search_path' => 'laravel',
    'sslmode' => 'prefer',
],
```

----------------------------------------

TITLE: React Component Template in TypeScript
DESCRIPTION: A basic template for creating React components in TypeScript with properly typed props. Shows the recommended structure including interface declaration for props and export pattern.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/components/README.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Declare the prop types of your component
interface ComponentAProps {
  sampleProp: string
}

// Name your component accordingly
const ComponentA = ({ sampleProp }: ComponentAProps) => {
  return <div>ComponentA: {sampleProp}</div>
}

export default ComponentA
```

----------------------------------------

TITLE: Defining Primary Key for View in pg_graphql
DESCRIPTION: This SQL snippet adds a comment to the 'ProjectOwner' view, specifying the primary key columns for use with pg_graphql. This is necessary because pg_graphql requires primary keys for all entities it exposes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
comment on view "ProjectOwner"
  is '@graphql({"primary_key_columns": ["id"]})';
```

----------------------------------------

TITLE: Enabling and Disabling uuid-ossp Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the uuid-ossp extension in PostgreSQL. The extension is created within a separate schema to keep the public schema clean.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/uuid-ossp.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Example: enable the "uuid-ossp" extension
create extension "uuid-ossp" with schema extensions;

-- Example: disable the "uuid-ossp" extension
drop extension if exists "uuid-ossp";
```

----------------------------------------

TITLE: Creating a new Rails project with PostgreSQL
DESCRIPTION: Scaffolds a new Ruby on Rails project configured to use PostgreSQL as the database backend. The -d=postgresql flag specifies that the project should use PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ruby-on-rails.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
rails new blog -d=postgresql
```

----------------------------------------

TITLE: Querying Vector Collection
DESCRIPTION: Performs a similarity search on the vector collection using cosine distance measure with specified parameters for limit and metadata inclusion.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/google-colab.mdx#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
collection.query(
    query_vector=[0.4,0.5,0.6],  # required
    limit=5,                     # number of records to return
    filters={},                  # metadata filters
    measure="cosine_distance",   # distance measure to use
    include_value=False,         # should distance measure values be returned?
    include_metadata=False,      # should record metadata be returned?
)
```

----------------------------------------

TITLE: Using EXPLAIN VERBOSE with Query ID in PostgreSQL 14
DESCRIPTION: Shows how to use the EXPLAIN VERBOSE statement to view the query plan along with the new query_id. This is useful for query performance analysis and troubleshooting.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_6

LANGUAGE: sql
CODE:
```
explain (verbose, costs off)
select schemaname, tablename
from pg_tables, pg_sleep(5)
where schemaname <> 'pg_catalog';
```

----------------------------------------

TITLE: Pulling Database Migrations
DESCRIPTION: Commands to pull existing database schema and migrations from a Supabase project using the database connection string
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
supabase db pull --db-url <db_connection_string>

# Your Database connection string will look like this:
# postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres
```

----------------------------------------

TITLE: Creating Multi-Column Search Function
DESCRIPTION: SQL function that concatenates title and description columns for full text search capability
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_20

LANGUAGE: sql
CODE:
```
create function title_description(books) returns text as $$
  select $1.title || ' ' || $1.description;
$$ language sql immutable;
```

----------------------------------------

TITLE: Enabling PostgREST Explain Feature in SQL
DESCRIPTION: This SQL command enables the explain feature in PostgREST, allowing performance analysis of queries through Supabase clients. This should not be used in production environments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
alter role authenticator set pgrst.db_plan_enabled to true;
NOTIFY pgrst, 'reload config';
```

----------------------------------------

TITLE: Installing Supabase Package for Flutter
DESCRIPTION: Command to install the Supabase Flutter package using Flutter's package manager.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v1/installing.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
flutter pub add supabase_flutter
```

----------------------------------------

TITLE: Warming Database Cache with pgvector Index
DESCRIPTION: SQL command to pre-warm the database cache by loading vector index into RAM using pg_prewarm to avoid cold cache issues.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/going-to-prod.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select pg_prewarm('vecs.docs_vec_idx');
```

----------------------------------------

TITLE: Initializing a Svelte App with Vite
DESCRIPTION: Commands to create a new Svelte TypeScript project using Vite and install required dependencies, including the Supabase JavaScript client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm create vite@latest supabase-svelte -- --template svelte-ts
cd supabase-svelte
npm install
```

----------------------------------------

TITLE: Edge Function Entry Point for OG Image Generation
DESCRIPTION: The main entry point for the Edge Function that imports and serves the OG image handler using Deno.serve(). It includes a console log for debugging purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/og-image.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import handler from './handler.tsx'

console.log('Hello from og-image Function!')

Deno.serve(handler)
```

----------------------------------------

TITLE: Connecting to Supabase Database with Drizzle ORM
DESCRIPTION: Sets up a database connection using Drizzle ORM with the Supabase Connection Pooler. Creates a client with prefetch disabled for Transaction pool mode compatibility.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/drizzle.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import 'dotenv/config'

import { drizzle } from 'drizzle-orm/postgres-js'
import postgres from 'postgres'

const connectionString = process.env.DATABASE_URL

// Disable prefetch as it is not supported for "Transaction" pool mode
export const client = postgres(connectionString, { prepare: false })
export const db = drizzle(client);
```

----------------------------------------

TITLE: Delete Trigger Function for User Removal
DESCRIPTION: PostgreSQL function to handle user deletions by removing corresponding records from the profiles table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create function public.delete_user()
returns trigger
language plpgsql
security definer set search_path = ''
as
$$
begin
  -- Delete the user's data from the 'profiles' table
  delete from public.profiles
  where id = old.id;  -- Match the 'id' field with the old record

  return old;  -- Return the old record
end;
$$;
```

----------------------------------------

TITLE: Implementing AuthenticationRepositoryImpl with Supabase in Kotlin
DESCRIPTION: This class implements the AuthenticationRepository interface using Supabase's Auth service. It provides methods for email/password authentication and Google OAuth, handling success and error cases.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_15

LANGUAGE: kotlin
CODE:
```
class AuthenticationRepositoryImpl @Inject constructor(
    private val auth: Auth
) : AuthenticationRepository {
    override suspend fun signIn(email: String, password: String): Boolean {
        return try {
            auth.signInWith(Email) {
                this.email = email
                this.password = password
            }
            true
        } catch (e: Exception) {
            false
        }
    }

    override suspend fun signUp(email: String, password: String): Boolean {
        return try {
            auth.signUpWith(Email) {
                this.email = email
                this.password = password
            }
            true
        } catch (e: Exception) {
            false
        }
    }

    override suspend fun signInWithGoogle(): Boolean {
        return try {
            auth.signInWith(Google)
            true
        } catch (e: Exception) {
            false
        }
    }
}
```

----------------------------------------

TITLE: Linking Anonymous User to Existing Account with Supabase JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates linking an anonymous user to an existing account in Supabase. It includes signing in anonymously, attempting to update with an existing email, handling potential conflicts, and resolving data conflicts through reassignment. It requires Supabase JS client as a dependency.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
// 1. Sign in anonymously (assuming the user is already signed in anonymously)
const { data: anonData, error: anonError } = await supabase.auth.getSession()

// 2. Attempt to update the user with the existing email
const { data: updateData, error: updateError } = await supabase.auth.updateUser({
  email: 'valid.email@supabase.io',
})

// 3. Handle the error (since the email belongs to an existing user)
if (updateError) {
  console.log('This email belongs to an existing user. Please sign in to that account.')

  // 4. Sign in to the existing account
  const {
    data: { user: existingUser },
    error: signInError,
  } = await supabase.auth.signInWithPassword({
    email: 'valid.email@supabase.io',
    password: 'user_password',
  })

  if (existingUser) {
    // 5. Reassign entities tied to the anonymous user
    // This step will vary based on your specific use case and data model
    const { data: reassignData, error: reassignError } = await supabase
      .from('your_table')
      .update({ user_id: existingUser.id })
      .eq('user_id', anonData.session.user.id)

    // 6. Implement your chosen conflict resolution strategy
    // This could involve merging data, overwriting, or other custom logic
    await resolveDataConflicts(anonData.session.user.id, existingUser.id)
  }
}

// Helper function to resolve data conflicts (implement based on your strategy)
async function resolveDataConflicts(anonymousUserId, existingUserId) {
  // Implement your conflict resolution logic here
  // This could involve ignoring the anonymous user's metadata, overwriting the existing user's metadata, or merging the data of both the anonymous and existing user.
}
```

----------------------------------------

TITLE: Disabling Triggers for Efficient Data Import in Supabase
DESCRIPTION: SQL commands to disable and re-enable triggers on a specific table. This is useful for speeding up large data imports by temporarily disabling complex logic or integrity checks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/import-data.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- Disable triggers on a specific table
ALTER TABLE table_name DISABLE TRIGGER ALL;

-- To re-enable triggers
ALTER TABLE table_name ENABLE TRIGGER ALL;
```

----------------------------------------

TITLE: Adding Sorting Functionality to TanStack Table in React
DESCRIPTION: Updates the DataTable component to enable sorting functionality. The code adds state management for sorting and integrates the necessary TanStack Table sorting hooks and methods.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_10

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import {
  ColumnDef,
  SortingState,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    state: {
      sorting,
    },
  })

  return (
    <div>
      <div className="rounded-md border">
        <Table>{ ... }</Table>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing Flutter Home Page with Supabase Query
DESCRIPTION: This code implements the HomePage widget that retrieves and displays a list of films from the Supabase database. It uses a FutureBuilder to handle asynchronous data loading and displays the films in a ListView using the FilmCell component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
import 'package:filmsearch/components/film_cell.dart';
import 'package:filmsearch/main.dart';
import 'package:filmsearch/models/film.dart';

import 'package:flutter/material.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final filmsFuture = supabase
      .from('films')
      .select<List<Map<String, dynamic>>>()
      .withConverter<List<Film>>((data) => data.map(Film.fromJson).toList());

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Films'),
      ),
      body: FutureBuilder(
          future: filmsFuture,
          builder: (context, snapshot) {
            if (snapshot.hasError) {
              return Center(
                child: Text(snapshot.error.toString()),
              );
            }
            if (!snapshot.hasData) {
              return const Center(child: CircularProgressIndicator());
            }
            final films = snapshot.data!;
            return ListView.builder(
              itemBuilder: (context, index) {
                final film = films[index];
                return FilmCell(film: film);
              },
              itemCount: films.length,
            );
          }),
    );
  }
}
```

----------------------------------------

TITLE: Setting Up Environment Variables for Hook Secrets
DESCRIPTION: Environment variable configuration for storing webhook secrets used by the authentication hooks for secure payload verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_9

LANGUAGE: ini
CODE:
```
SEND_SMS_HOOK_SECRETS='v1,whsec_<base64-secret>'
```

----------------------------------------

TITLE: Synchronizing Prisma Migrations with pnpm
DESCRIPTION: This snippet demonstrates how to synchronize Prisma migrations using pnpm. It includes commands for pulling the database schema, creating a migration file, and resolving the migration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_19

LANGUAGE: bash
CODE:
```
pnpx prisma db pull
```

LANGUAGE: bash
CODE:
```
mkdir -p prisma/migrations/0_init_supabase
```

LANGUAGE: bash
CODE:
```
pnpx prisma migrate diff \
--from-empty \
--to-schema-datamodel prisma/schema.prisma \
--script > prisma/migrations/0_init_supabase/migration.sql
```

LANGUAGE: bash
CODE:
```
pnpx prisma migrate resolve --applied 0_init_supabase
```

----------------------------------------

TITLE: Configuring Storage Buckets in TOML
DESCRIPTION: This snippet demonstrates how to configure a Storage bucket named 'assets' with a specified path for objects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-04-cli-v2-config-as-code.mdx#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[storage.buckets.assets]
objects_path = "./assets"
```

----------------------------------------

TITLE: Importing Node.js Built-in Module
DESCRIPTION: Example of importing a Node.js built-in module using the node: specifier.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import process from 'node:process'
```

----------------------------------------

TITLE: Adding GitLab Sign-In in Supabase Kotlin
DESCRIPTION: This Kotlin snippet leverages the `signInWith` method for GitLab authentication via Supabase. The function signs a user in by specifying `Gitlab` as the Provider. This code should be used in projects where the Supabase client is properly configured within a Kotlin environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_2

LANGUAGE: Kotlin
CODE:
```
suspend fun signInWithGitLab() {
	supabase.auth.signInWith(Gitlab)
}
```

----------------------------------------

TITLE: Aggregate Functions with Embedded Resources in cURL
DESCRIPTION: This snippet demonstrates using aggregate functions with embedded resources in a one-to-many relationship, finding the newest and oldest movie years for each director using cURL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
$ curl 'http://postgrest/directors?select=name,movies(newest_movie_year:release_year.max(),oldest_movie_year:release_year.min())'
```

----------------------------------------

TITLE: Implementing User Account Management in Ionic React
DESCRIPTION: A React component for managing user account details after authentication. Features include fetching profile data from Supabase, updating profile information, and signing out functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import {
  IonButton,
  IonContent,
  IonHeader,
  IonInput,
  IonItem,
  IonLabel,
  IonPage,
  IonTitle,
  IonToolbar,
  useIonLoading,
  useIonToast,
  useIonRouter
} from '@ionic/react';
import { useEffect, useState } from 'react';
import { supabase } from '../supabaseClient';

export function AccountPage() {
  const [showLoading, hideLoading] = useIonLoading();
  const [showToast] = useIonToast();
  const [session] = useState(() => supabase.auth.session());
  const router = useIonRouter();
  const [profile, setProfile] = useState({
    username: '',
    website: '',
    avatar_url: '',
  });
  useEffect(() => {
    getProfile();
  }, [session]);
  const getProfile = async () => {
    console.log('get');
    await showLoading();
    try {
      const user = supabase.auth.user();
      const { data, error, status } = await supabase
        .from('profiles')
        .select(`username, website, avatar_url`)
        .eq('id', user!.id)
        .single();

      if (error && status !== 406) {
        throw error;
      }

      if (data) {
        setProfile({
          username: data.username,
          website: data.website,
          avatar_url: data.avatar_url,
        });
      }
    } catch (error: any) {
      showToast({ message: error.message, duration: 5000 });
    } finally {
      await hideLoading();
    }
  };
  const signOut = async () => {
    await supabase.auth.signOut();
    router.push('/', 'forward', 'replace');
  }
  const updateProfile = async (e?: any, avatar_url: string = '') => {
    e?.preventDefault();

    console.log('update ');
    await showLoading();

    try {
      const user = supabase.auth.user();

      const updates = {
        id: user!.id,
        ...profile,
        avatar_url: avatar_url,
        updated_at: new Date(),
      };

      const { error } = await supabase.from('profiles').upsert(updates, {
        returning: 'minimal', // Don't return the value after inserting
      });

      if (error) {
        throw error;
      }
    } catch (error: any) {
      showToast({ message: error.message, duration: 5000 });
    } finally {
      await hideLoading();
    }
  };
  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Account</IonTitle>
        </IonToolbar>
      </IonHeader>

      <IonContent>
        <form onSubmit={updateProfile}>
          <IonItem>
            <IonLabel>
              <p>Email</p>
              <p>{session?.user?.email}</p>
            </IonLabel>
          </IonItem>

          <IonItem>
            <IonLabel position="stacked">Name</IonLabel>
            <IonInput
              type="text"
              name="username"
              value={profile.username}
              onIonChange={(e) =>
                setProfile({ ...profile, username: e.detail.value ?? '' })
              }
            ></IonInput>
          </IonItem>

          <IonItem>
            <IonLabel position="stacked">Website</IonLabel>
            <IonInput
              type="url"
              name="website"
              value={profile.website}
              onIonChange={(e) =>
                setProfile({ ...profile, website: e.detail.value ?? '' })
              }
            ></IonInput>
          </IonItem>
          <div className="ion-text-center">
            <IonButton fill="clear" type="submit">
              Update Profile
            </IonButton>
          </div>
        </form>

        <div className="ion-text-center">
          <IonButton fill="clear" onClick={signOut}>
            Log Out
          </IonButton>
        </div>
      </IonContent>
    </IonPage>
  );
```

----------------------------------------

TITLE: Querying Tables with Multiple Foreign Keys with GraphQL
DESCRIPTION: GraphQL query example showing how to query shifts with their related scan records for both start and end times.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_23

LANGUAGE: javascript
CODE:
```
const Query = `
  query {
    shiftsCollection {
      edges {
        node {
          id
          user_id
          attendance_status
          scan_id_start {
            id
            user_id
            badge_scan_time
          }
          scan_id_end {
            id
            user_id
            badge_scan_time
          }
        }
      }
    }
  }
`
```

----------------------------------------

TITLE: Implementing Expo Push Notification Handler in Supabase Edge Function
DESCRIPTION: This edge function handles database webhooks to send push notifications via Expo's service. It retrieves the user's Expo push token from the profiles table and sends a notification with the content from the newly inserted notification record.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/push-notifications.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from 'jsr:@supabase/supabase-js@2'

console.log('Hello from Functions!')

interface Notification {
  id: string
  user_id: string
  body: string
}

interface WebhookPayload {
  type: 'INSERT' | 'UPDATE' | 'DELETE'
  table: string
  record: Notification
  schema: 'public'
  old_record: null | Notification
}

const supabase = createClient(
  Deno.env.get('SUPABASE_URL')!,
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
)

Deno.serve(async (req) => {
  const payload: WebhookPayload = await req.json()
  const { data } = await supabase
    .from('profiles')
    .select('expo_push_token')
    .eq('id', payload.record.user_id)
    .single()

  const res = await fetch('https://exp.host/--/api/v2/push/send', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${Deno.env.get('EXPO_ACCESS_TOKEN')}`,
    },
    body: JSON.stringify({
      to: data?.expo_push_token,
      sound: 'default',
      body: payload.record.body,
    }),
  }).then((res) => res.json())

  return new Response(JSON.stringify(res), {
    headers: { 'Content-Type': 'application/json' },
  })
})
```

----------------------------------------

TITLE: Using HTTP GET with pg_net
DESCRIPTION: Example of making an asynchronous HTTP GET request to Hacker News using the net.http_get function. The function returns a request ID that can be used to track the request.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select
    net.http_get('https://news.ycombinator.com')
    as request_id;
request_id
----------
         1
(1 row)
```

----------------------------------------

TITLE: Invoking Embedding Edge Function with cURL
DESCRIPTION: This bash command demonstrates how to call the Supabase Edge Function for generating embeddings. It sends a POST request with JSON data containing the text input to be embedded, and includes the necessary authorization header with an anonymous API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
curl --request POST 'http://localhost:54321/functions/v1/embed' \
  --header 'Authorization: Bearer ANON_KEY' \
  --header 'Content-Type: application/json' \
  --data '{ "input": "hello world" }'
```

----------------------------------------

TITLE: Rendering the Table in a Next.js Page Component
DESCRIPTION: Server component implementation that fetches data and renders the DataTable component with the provided columns and data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import { Payment, columns } from './columns'
import { DataTable } from './data-table'

async function getData(): Promise<Payment[]> {
  // Fetch data from your API here.
  return [
    {
      id: '728ed52f',
      amount: 100,
      status: 'pending',
      email: 'm@example.com',
    },
    // ...
  ]
}

export default async function DemoPage() {
  const data = await getData()

  return (
    <div className="container mx-auto py-10">
      <DataTable columns={columns} data={data} />
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing RegisterPage Component in Angular
DESCRIPTION: Defines the RegisterPage component with form controls, validation, and account creation functionality using AuthService.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
import { Component } from '@angular/core'
import { Validators, FormBuilder } from '@angular/forms'
import { LoadingController, AlertController, NavController } from '@ionic/angular'
import { AuthService } from 'src/app/services/auth.service'

@Component({
  selector: 'app-register',
  templateUrl: './register.page.html',
  styleUrls: ['./register.page.scss'],
})
export class RegisterPage {
  credentials = this.fb.nonNullable.group({
    email: ['', [Validators.required, Validators.email]],
    password: ['', [Validators.required, Validators.minLength(6)]],
  })

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private loadingController: LoadingController,
    private alertController: AlertController,
    private navCtrl: NavController
  ) {}

  get email() {
    return this.credentials.controls.email
  }

  get password() {
    return this.credentials.controls.password
  }

  async createAccount() {
    const loading = await this.loadingController.create()
    await loading.present()

    this.authService.signUp(this.credentials.getRawValue()).then(async (data) => {
      await loading.dismiss()

      if (data.error) {
        this.showAlert('Registration failed', data.error.message)
      } else {
        this.showAlert('Signup success', 'Please confirm your email now!')
        this.navCtrl.navigateBack('')
      }
    })
  }

  async showAlert(title, msg) {
    const alert = await this.alertController.create({
      header: title,
      message: msg,
      buttons: ['OK'],
    })
    await alert.present()
  }
}
```

----------------------------------------

TITLE: React Email Template Component
DESCRIPTION: React component that defines the email template for magic link authentication. Includes styling and layout for the email content.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/auth-send-email-hook-react-email-resend.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import {
  Body,
  Container,
  Head,
  Heading,
  Html,
  Link,
  Preview,
  Text,
} from 'npm:@react-email/components@0.0.22'
import * as React from 'npm:react@18.3.1'

interface MagicLinkEmailProps {
  supabase_url: string
  email_action_type: string
  redirect_to: string
  token_hash: string
  token: string
}

export const MagicLinkEmail = ({
  token,
  supabase_url,
  email_action_type,
  redirect_to,
  token_hash,
}: MagicLinkEmailProps) => (
  <Html>
    <Head />
    <Preview>Log in with this magic link</Preview>
    <Body style={main}>
      <Container style={container}>
        <Heading style={h1}>Login</Heading>
        <Link
          href={`${supabase_url}/auth/v1/verify?token=${token_hash}&type=${email_action_type}&redirect_to=${redirect_to}`}
          target="_blank"
          style={{
            ...link,
            display: 'block',
            marginBottom: '16px',
          }}
        >
          Click here to log in with this magic link
        </Link>
        <Text style={{ ...text, marginBottom: '14px' }}>
          Or, copy and paste this temporary login code:
        </Text>
        <code style={code}>{token}</code>
        <Text
          style={{
            ...text,
            color: '#ababab',
            marginTop: '14px',
            marginBottom: '16px',
          }}
        >
          If you didn&apos;t try to login, you can safely ignore this email.
        </Text>
        <Text style={footer}>
          <Link
            href="https://demo.vercel.store/"
            target="_blank"
            style={{ ...link, color: '#898989' }}
          >
            ACME Corp
          </Link>
          , the famouse demo corp.
        </Text>
      </Container>
    </Body>
  </Html>
)
```

----------------------------------------

TITLE: Creating a PGroonga Full-Text Search Index
DESCRIPTION: SQL command to create a PGroonga index on the 'content' column of the 'memos' table for full-text search capabilities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create index ix_memos_content ON memos USING pgroonga(content);
```

----------------------------------------

TITLE: Installing Required Python Dependencies
DESCRIPTION: Installs necessary Python packages including vecs, datasets, llama_index and html2text for the implementation.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/llamaindex/llamaindex.ipynb#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
!pip install -qU vecs datasets llama_index html2text
```

----------------------------------------

TITLE: Setting Role-Level Timeout
DESCRIPTION: Changes the statement timeout setting for a specific database role to 10 minutes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
alter role example_role set statement_timeout = '10min'; -- could also use seconds '10s'
```

----------------------------------------

TITLE: Basic Auth UI Component Implementation
DESCRIPTION: Minimal setup for the Auth UI component using the Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'

const supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')

const App = () => <Auth supabaseClient={supabase} />
```

----------------------------------------

TITLE: Storing Embeddings with Vecs
DESCRIPTION: Python code to store the generated embeddings in a Postgres database using vecs client, creating a collection and index
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/amazon-bedrock.mdx#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import vecs

DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.Client(DB_CONNECTION)

# create a collection named 'sentences' with 1536 dimensional vectors
# to match the default dimension of the Titan Embeddings G1 - Text model
sentences = vx.get_or_create_collection(name="sentences", dimension=1536)

# upsert the embeddings into the 'sentences' collection
sentences.upsert(records=embeddings)

# create an index for the 'sentences' collection
sentences.create_index()
```

----------------------------------------

TITLE: Creating Migration Directory for Existing Database
DESCRIPTION: Command to create an initial migration directory for an existing Supabase database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_17

LANGUAGE: bash
CODE:
```
mkdir -p prisma/migrations/0_init_supabase
```

----------------------------------------

TITLE: Implementing Avatar Component with Supabase Storage in RedwoodJS
DESCRIPTION: Complete implementation of the Avatar component that handles uploading, downloading, and displaying profile photos using Supabase Storage. It provides a UI for users to upload and preview their avatar images.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_14

LANGUAGE: jsx
CODE:
```
import { useEffect, useState } from 'react'
import { useAuth } from '@redwoodjs/auth'

const Avatar = ({ url, size, onUpload }) => {
  const { client: supabase } = useAuth()

  const [avatarUrl, setAvatarUrl] = useState(null)
  const [uploading, setUploading] = useState(false)

  useEffect(() => {
    if (url) downloadImage(url)
  }, [url])

  async function downloadImage(path) {
    try {
      const { data, error } = await supabase.storage.from('avatars').download(path)
      if (error) {
        throw error
      }
      const url = URL.createObjectURL(data)
      setAvatarUrl(url)
    } catch (error) {
      console.log('Error downloading image: ', error.message)
    }
  }

  async function uploadAvatar(event) {
    try {
      setUploading(true)

      if (!event.target.files || event.target.files.length === 0) {
        throw new Error('You must select an image to upload.')
      }

      const file = event.target.files[0]
      const fileExt = file.name.split('.').pop()
      const fileName = `${Math.random()}.${fileExt}`
      const filePath = `${fileName}`

      const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)

      if (uploadError) {
        throw uploadError
      }

      onUpload(filePath)
    } catch (error) {
      alert(error.message)
    } finally {
      setUploading(false)
    }
  }

  return (
    <div>
      {avatarUrl ? (
        <img
          src={avatarUrl}
          alt="Avatar"
          className="avatar image"
          style={{ height: size, width: size }}
        />
      ) : (
        <div className="avatar no-image" style={{ height: size, width: size }} />
      )}
      <div style={{ width: size }}>
        <label className="button primary block" htmlFor="single">
          {uploading ? 'Uploading ...' : 'Upload'}
        </label>
        <input
          style={{
            visibility: 'hidden',
            position: 'absolute',
          }}
          type="file"
          id="single"
          accept="image/*"
          onChange={uploadAvatar}
          disabled={uploading}
        />
      </div>
    </div>
  )
}

export default Avatar
```

----------------------------------------

TITLE: Using Infinite Query Hook with Sorting
DESCRIPTION: This code snippet demonstrates how to use the `useInfiniteQuery` hook with sorting applied to the data fetched from a Supabase table. It fetches data from the 'products' table, orders it by 'created_at' in descending order, and displays the products in a list with a button to load more.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/infinite-query-hook.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
const { data, fetchNextPage } = useInfiniteQuery({
  tableName: 'products',
  columns: '*',
  pageSize: 10,
  trailingQuery: (query) => query.order('created_at', { ascending: false }),
})

return (
  <div>
    {data.map((item) => (
      <ProductCard key={item.id} product={item} />
    ))}
    <Button onClick={fetchNextPage}>Load more products</Button>
  </div>
)
```

----------------------------------------

TITLE: Implementing Data Service for Supabase Integration in Angular
DESCRIPTION: A service that handles database interactions with Supabase tables. It includes constants for table names and functions for basic board operations such as creating a new board and retrieving all boards for a user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_19

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@angular/core'
import { SupabaseClient, createClient } from '@supabase/supabase-js'
import { environment } from 'src/environments/environment'

export const BOARDS_TABLE = 'boards'
export const USER_BOARDS_TABLE = 'user_boards'
export const LISTS_TABLE = 'lists'
export const CARDS_TABLE = 'cards'
export const USERS_TABLE = 'users'

@Injectable({
  providedIn: 'root',
})
export class DataService {
  private supabase: SupabaseClient

  constructor() {
    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)
  }

  async startBoard() {
    // Minimal return will be the default in the next version and can be removed here!
    return await this.supabase.from(BOARDS_TABLE).insert({}, { returning: 'minimal' })
  }

  async getBoards() {
    const boards = await this.supabase.from(USER_BOARDS_TABLE).select(`
    boards:board_id ( title, id )
  `)
    return boards.data || []
  }
}
```

----------------------------------------

TITLE: Connecting to Restored Local Database with PSQL
DESCRIPTION: Command to connect to the restored local Postgres database using psql client with default credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/restoring-downloaded-backup.mdx#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
psql 'postgresql://postgres:postgres@localhost:54322/postgres'
```

----------------------------------------

TITLE: Creating Stable Function for JWT Validation in SQL
DESCRIPTION: Defines a stable PostgreSQL function to check if the JWT is from the correct Supabase or Firebase project, useful for managing complex RLS policies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create function public.is_supabase_or_firebase_project_jwt()
  returns bool
  language sql
  stable
  returns null on null input
  return (
    (auth.jwt()->>'iss' = 'https://<project-ref>.supabase.co/auth/v1')
    or
    (
        auth.jwt()->>'iss' = concat('https://securetoken.google.com/<firebase-project-id>')
        and
        auth.jwt()->>'aud' = '<firebase-project-id>'
     )
  );
```

----------------------------------------

TITLE: Clearing Embeddings with SQL Trigger on Update
DESCRIPTION: This SQL snippet sets up a 'before update' trigger to clear the 'embedding' column whenever either the 'title' or 'content' columns in the 'documents' table are updated. The 'util.clear_column' function is utilized to ensure accurate synchronization of embeddings but requires updates in the 'hstore' extension.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_14

LANGUAGE: sql
CODE:
```
-- Trigger to clear the embedding column on update
create trigger clear_document_embedding_on_update
  before update of title, content -- must match the columns in embedding_input()
  on documents
  for each row
  execute function util.clear_column('embedding');
```

----------------------------------------

TITLE: Initialize Supabase Client (Swift)
DESCRIPTION: This snippet demonstrates how to initialize the Supabase client in a Swift application. It requires your Supabase project URL and the 'anon' key. The client instance is created using the SupabaseClient class.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#_snippet_0

LANGUAGE: Swift
CODE:
```
import Foundation
import Supabase

let supabase = SupabaseClient(
  supabaseURL: URL(string: "YOUR_SUPABASE_URL")!,
  supabaseKey: "YOUR_SUPABASE_ANON_KEY"
)
```

----------------------------------------

TITLE: Connecting to Supabase Database with Vecs in Python
DESCRIPTION: This snippet shows how to establish a connection to a Supabase database using the Vecs library in Python. It requires the database connection string and creates a Vecs client for interacting with vector embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/text-deduplication.mdx#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import vecs

DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)
```

----------------------------------------

TITLE: Updating schema.prisma for Serverless Deployments
DESCRIPTION: Configuration for the Prisma schema file to reference both DATABASE_URL and DIRECT_URL for serverless deployments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_10

LANGUAGE: text
CODE:
```
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
```

----------------------------------------

TITLE: Avatar Upload Component with Image Picker
DESCRIPTION: Component for handling profile image uploads using expo-image-picker and Supabase Storage. Includes image preview, upload functionality, and styling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_7

LANGUAGE: tsx
CODE:
```
import { useState, useEffect } from 'react'
import { supabase } from '../lib/supabase'
import { StyleSheet, View, Alert, Image, Button } from 'react-native'
import * as ImagePicker from 'expo-image-picker'

interface Props {
  size: number
  url: string | null
  onUpload: (filePath: string) => void
}

export default function Avatar({ url, size = 150, onUpload }: Props) {
  const [uploading, setUploading] = useState(false)
  const [avatarUrl, setAvatarUrl] = useState<string | null>(null)
  const avatarSize = { height: size, width: size }

  useEffect(() => {
    if (url) downloadImage(url)
  }, [url])

  async function downloadImage(path: string) {
    try {
      const { data, error } = await supabase.storage.from('avatars').download(path)

      if (error) {
        throw error
      }

      const fr = new FileReader()
      fr.readAsDataURL(data)
      fr.onload = () => {
        setAvatarUrl(fr.result as string)
      }
    } catch (error) {
      if (error instanceof Error) {
        console.log('Error downloading image: ', error.message)
      }
    }
  }

  async function uploadAvatar() {
    try {
      setUploading(true)

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsMultipleSelection: false,
        allowsEditing: true,
        quality: 1,
        exif: false,
      })

      if (result.canceled || !result.assets || result.assets.length === 0) {
        console.log('User cancelled image picker.')
        return
      }

      const image = result.assets[0]
      console.log('Got image', image)

      if (!image.uri) {
        throw new Error('No image uri!')
      }

      const arraybuffer = await fetch(image.uri).then((res) => res.arrayBuffer())

      const fileExt = image.uri?.split('.').pop()?.toLowerCase() ?? 'jpeg'
      const path = `${Date.now()}.${fileExt}`
      const { data, error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(path, arraybuffer, {
          contentType: image.mimeType ?? 'image/jpeg',
        })

      if (uploadError) {
        throw uploadError
      }

      onUpload(data.path)
    } catch (error) {
      if (error instanceof Error) {
        Alert.alert(error.message)
      } else {
        throw error
      }
    } finally {
      setUploading(false)
    }
  }

  return (
    <View>
      {avatarUrl ? (
        <Image
          source={{ uri: avatarUrl }}
          accessibilityLabel="Avatar"
          style={[avatarSize, styles.avatar, styles.image]}
        />
      ) : (
        <View style={[avatarSize, styles.avatar, styles.noImage]} />
      )}
      <View>
        <Button
          title={uploading ? 'Uploading ...' : 'Upload'}
          onPress={uploadAvatar}
          disabled={uploading}
        />
      </View>
    </View>
  )
}

const styles = StyleSheet.create({
  avatar: {
    borderRadius: 5,
    overflow: 'hidden',
    maxWidth: '100%',
  },
  image: {
    objectFit: 'cover',
    paddingTop: 0,
  },
  noImage: {
    backgroundColor: '#333',
    borderWidth: 1,
    borderStyle: 'solid',
    borderColor: 'rgb(200, 200, 200)',
    borderRadius: 5,
  },
})
```

----------------------------------------

TITLE: Configuring Supabase MCP Server for macOS
DESCRIPTION: JSON configuration for running the Supabase MCP server on macOS. It specifies the command as 'npx' and includes arguments for installing and running the latest version of the server with a personal access token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_config.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "supabase": {
      "command": "npx",
      "args": [
        "-y",
        "@supabase/mcp-server-supabase@latest",
        "--access-token",
        "<personal-access-token>"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Adding Role Claim in Custom Access Token with JavaScript
DESCRIPTION: This JavaScript function serves as a webhook that adds a role claim to the access token based on app metadata. It utilizes the Deno runtime and requires a secret for verification of the payload to process claims correctly.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'
import { readAll } from 'https://deno.land/std/io/read_all.ts'
import * as base64 from 'https://denopkg.com/chiefbiiko/base64/mod.ts'

Deno.serve(async (req) => {
  const payload = await req.text()
  const base64_secret = Deno.env.get('CUSTOM_ACCESS_TOKEN_SECRET').replace('v1,whsec_', '')
  const headers = Object.fromEntries(req.headers)
  const wh = new Webhook(base64_secret)
  try {
    const { user_id, claims, authentication_method } = wh.verify(payload, headers)
    if (claims.app_metadata && claims.app_metadata.role) {
      claims['role'] = claims.app_metadata.role
    }
    return new Response(
      JSON.stringify({
        claims,
      }),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    )
  } catch (error) {
    return new Response(
      JSON.stringify({
        error: `Failed to process the request: ${error}`,
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    )
  }
})
```

----------------------------------------

TITLE: RLS Policies for Anonymous Users in Supabase
DESCRIPTION: Creates SQL row-level security policies that differentiate between anonymous and permanent users. Uses the 'is_anonymous' JWT claim to restrict certain operations (like posting) while allowing others (like viewing).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_15

LANGUAGE: sql
CODE:
```
create policy "Only permanent users can post to the news feed"
on news_feed as restrictive for insert
to authenticated
with check ((select (auth.jwt()->>'is_anonymous')::boolean) is false );

create policy "Anonymous and permanent users can view the news feed"
on news_feed for select
to authenticated
using ( true );
```

----------------------------------------

TITLE: Implementing Search Interface Event Handler
DESCRIPTION: JavaScript code for handling search queries and streaming responses from the Supabase Edge Function. Implements EventSource to handle streamed responses from OpenAI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/headless-vector-search.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const onSubmit = (e: Event) => {
  e.preventDefault()
  answer.value = ""
  isLoading.value = true

  const query = new URLSearchParams({ query: inputRef.current!.value })
  const projectUrl = `https://your-project-ref.supabase.co/functions/v1`
  const queryURL = `${projectURL}/${query}`
  const eventSource = new EventSource(queryURL)

  eventSource.addEventListener("error", (err) => {
    isLoading.value = false
    console.error(err)
  })

  eventSource.addEventListener("message", (e: MessageEvent) => {
    isLoading.value = false

    if (e.data === "[DONE]") {
      eventSource.close()
      return
    }

    const completionResponse: CreateCompletionResponse = JSON.parse(e.data)
    const text = completionResponse.choices[0].text

    answer.value += text
  });

  isLoading.value = true
}
```

----------------------------------------

TITLE: Phone Number Signup with Supabase Authentication
DESCRIPTION: Demonstrates how to sign up users with a phone number and password using Supabase authentication. Creates a new user account with the provided credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_39

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

const { data, error } = await supabase.auth.signUp({
  phone: '+13334445555',
  password: 'some-password',
})
```

LANGUAGE: swift
CODE:
```
try await supabase.auth.signUp(
  phone: "+13334445555",
  password: "some-password"
)
```

LANGUAGE: kotlin
CODE:
```
supabase.auth.signUpWith(Phone) {
    phone = "+13334445555"
    password = "some-password"
}
```

LANGUAGE: python
CODE:
```
supabase.auth.sign_up({
  'phone': "+13334445555",
  'password': "some-password"
})
```

LANGUAGE: bash
CODE:
```
curl -X POST 'https://cvwawazfelidkloqmbma.supabase.co/auth/v1/signup' \
-H "apikey: SUPABASE_KEY" \
-H "Content-Type: application/json" \
-d '{
  "phone": "+13334445555",
  "password": "some-password"
}'
```

----------------------------------------

TITLE: Testing Function Execution Permissions in PostgreSQL
DESCRIPTION: SQL transaction demonstrating how to test function execution permissions by temporarily setting role to 'anon' and attempting to execute the function, resulting in a permission denied error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-can-i-revoke-execution-of-a-postgresql-function-2GYb0A.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
begin;
set local role anon;
select foo();
ERROR:  permission denied for function foo
```

----------------------------------------

TITLE: Configuring Supabase Environment Variables in Angular
DESCRIPTION: Setting up environment variables for Supabase URL and API key in the Angular environment file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export const environment = {
  production: false,
  supabaseUrl: 'YOUR_SUPABASE_URL',
  supabaseKey: 'YOUR_SUPABASE_KEY',
}
```

----------------------------------------

TITLE: Sending State in Kotlin
DESCRIPTION: This snippet provides the mechanism to send user status in Kotlin after subscribing to the channel.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_13

LANGUAGE: kotlin
CODE:
```
val roomOne = supabase.channel("room_01")

val userStatus = UserStatus( //Your custom class
    user = "user-1",
    onlineAt = Clock.System.now().toEpochMilliseconds()
)

roomOne.subscribe(blockUntilSubscribed = true) //You can also use the roomOne.status flow instead, but this parameter will block the coroutine until the status is joined.

roomOne.track(userStatus)
```

----------------------------------------

TITLE: New Email Variable Usage
DESCRIPTION: Example of using NewEmail variable in email change template.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_6

LANGUAGE: html
CODE:
```
<p>You are requesting to update your email address to {{ .NewEmail }}.</p>
```

----------------------------------------

TITLE: Basic HTML Email Template Structure
DESCRIPTION: Sample HTML template for invite email showing basic structure with confirmation URL variable.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<html>
  <body>
    <h2>Confirm your signup</h2>
    <p><a href="{{ .ConfirmationURL }}">Confirm your email</a></p>
  </body>
</html>
```

----------------------------------------

TITLE: Granting Public Access in PostgreSQL
DESCRIPTION: Shows how to grant INSERT privileges to all users (PUBLIC role) on a specific table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
GRANT INSERT ON students TO PUBLIC;
```

----------------------------------------

TITLE: Implementing RoomCubit for State Management in Dart
DESCRIPTION: This snippet implements the RoomCubit class, which manages the state of the rooms page. It handles initializing rooms, fetching new users, subscribing to room updates, and managing message subscriptions for each room.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:my_chat_app/cubits/profiles/profiles_cubit.dart';
import 'package:my_chat_app/models/profile.dart';
import 'package:my_chat_app/models/message.dart';
import 'package:my_chat_app/models/room.dart';
import 'package:my_chat_app/utils/constants.dart';

part 'rooms_state.dart';

class RoomCubit extends Cubit<RoomState> {
  RoomCubit() : super(RoomsLoading());

  final Map<String, StreamSubscription<Message?>>
      _messageSubscriptions = {};

  late final String _myUserId;

  /// List of new users of the app for the user to start talking to
  late final List<Profile> _newUsers;

  /// List of rooms
  List<Room> _rooms = [];
  StreamSubscription<List<Map<String, dynamic>>>?
      _rawRoomsSubscription;
  bool _haveCalledGetRooms = false;

  Future<void> initializeRooms(BuildContext context) async {
    if (_haveCalledGetRooms) {
      return;
    }
    _haveCalledGetRooms = true;

    _myUserId = supabase.auth.currentUser!.id;

    late final List data;

    try {
      data = await supabase
          .from('profiles')
          .select()
          .not('id', 'eq', _myUserId)
          .order('created_at')
          .limit(12);
    } catch (_) {
      emit(RoomsError('Error loading new users'));
    }

    final rows = List<Map<String, dynamic>>.from(data);
    _newUsers = rows.map(Profile.fromMap).toList();

    /// Get realtime updates on rooms that the user is in
    _rawRoomsSubscription =
        supabase.from('room_participants').stream(
      primaryKey: ['room_id', 'profile_id'],
    ).listen((participantMaps) async {
      if (participantMaps.isEmpty) {
        emit(RoomsEmpty(newUsers: _newUsers));
        return;
      }

      _rooms = participantMaps
          .map(Room.fromRoomParticipants)
          .where((room) => room.otherUserId != _myUserId)
          .toList();
      for (final room in _rooms) {
        _getNewestMessage(
            context: context, roomId: room.id);
        BlocProvider.of<ProfilesCubit>(context)
            .getProfile(room.otherUserId);
      }
      emit(RoomsLoaded(
        newUsers: _newUsers,
        rooms: _rooms,
      ));
    }, onError: (error) {
      emit(RoomsError('Error loading rooms'));
    });
  }

  // Setup listeners to listen to the most recent message in each room
  void _getNewestMessage({
    required BuildContext context,
    required String roomId,
  }) {
    _messageSubscriptions[roomId] = supabase
        .from('messages')
        .stream(primaryKey: ['id'])
        .eq('room_id', roomId)
        .order('created_at')
        .limit(1)
        .map<Message?>(
          (data) => data.isEmpty
              ? null
              : Message.fromMap(
                  map: data.first,
                  myUserId: _myUserId,
                ),
        )
        .listen((message) {
          final index = _rooms
              .indexWhere((room) => room.id == roomId);
          _rooms[index] =
              _rooms[index].copyWith(lastMessage: message);
          _rooms.sort((a, b) {
            /// Sort according to the last message
            /// Use the room createdAt when last message is not available
            final aTimeStamp = a.lastMessage != null
                ? a.lastMessage!.createdAt
                : a.createdAt;
            final bTimeStamp = b.lastMessage != null
                ? b.lastMessage!.createdAt
                : b.createdAt;
            return bTimeStamp.compareTo(aTimeStamp);
          });
          if (!isClosed) {
            emit(RoomsLoaded(
              newUsers: _newUsers,
              rooms: _rooms,
            ));
          }
        });
  }

  /// Creates or returns an existing roomID of both participants
  Future<String> createRoom(String otherUserId) async {
    final data = await supabase.rpc('create_new_room',
        params: {'other_user_id': otherUserId});
    emit(RoomsLoaded(rooms: _rooms, newUsers: _newUsers));
    return data as String;
  }

  @override
  Future<void> close() {
    _rawRoomsSubscription?.cancel();
    return super.close();
  }
}
```

----------------------------------------

TITLE: Configuring Supabase Server for Linux
DESCRIPTION: JSON configuration for setting up Supabase server on Linux systems. Uses direct npx command execution with environment variable setup.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_vscode_config.mdx#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "inputs": [
    {
      "type": "promptString",
      "id": "supabase-access-token",
      "description": "Supabase personal access token",
      "password": true
    }
  ],
  "servers": {
    "supabase": {
      "command": "npx",
      "args": ["-y", "@supabase/mcp-server-supabase@latest"],
      "env": {
        "SUPABASE_ACCESS_TOKEN": "${input:supabase-access-token}"
      }
    }
  }
}
```

----------------------------------------

TITLE: Generating TypeScript Types from Supabase Schema
DESCRIPTION: Bash commands to use Supabase CLI for generating TypeScript types based on the linked Supabase project schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
supabase login
supabase init
supabase link
supabase gen types typescript --linked --schema=public > utils/database.types.ts
```

----------------------------------------

TITLE: Angular Route Guard for Authentication Protection
DESCRIPTION: Implementation of CanActivate guard to protect routes that require authentication, using the auth service to verify user state.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
import { AuthService } from './../services/auth.service'
import { Injectable } from '@angular/core'
import { CanActivate, Router, UrlTree } from '@angular/router'
import { Observable } from 'rxjs'
import { filter, map, take } from 'rxjs/operators'

@Injectable({
  providedIn: 'root',
})
export class AuthGuard implements CanActivate {
  constructor(
    private auth: AuthService,
    private router: Router
  ) {}

  canActivate(): Observable<boolean | UrlTree> {
    return this.auth.currentUser.pipe(
      filter((val) => val !== null),
      take(1),
      map((isAuthenticated) => {
        if (isAuthenticated) {
          return true
        } else {
          return this.router.createUrlTree(['/'])
        }
      })
    )
  }
}
```

----------------------------------------

TITLE: Signing Out - Flutter
DESCRIPTION: This Flutter code snippet demonstrates how to sign out a user using the Supabase client. It calls the signOut() method on the auth object. This removes the user's session and related data from local storage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitter.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
Future<void> signOut() async {
  await supabase.auth.signOut();
}
```

----------------------------------------

TITLE: Installing TLE using dbdev in SQL
DESCRIPTION: Demonstrates how to install a Trusted Language Extension named 'langchain-embedding_search' using the dbdev package registry in SQL. This simplified installation process allows developers to easily add extensions to their Postgres databases.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-pg-tle.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select dbdev.install('langchain-embedding_search');
```

----------------------------------------

TITLE: Counting Total Requests by IP for Supabase Auth API (SQL)
DESCRIPTION: This query counts the total number of requests made to the Auth API by each unique IP address. It filters for paths starting with '/auth/v1/' and orders results by the count of requests per IP.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
select
  cf_connecting_ip as ip,
  count(cf_connecting_ip) as ip_count
from
  edge_logs
  cross join unnest(metadata) as metadata
  cross join unnest(request) as request
  cross join unnest(headers) as headers
  cross join unnest(cf) as cf
  cross join unnest(response) as response
where regexp_contains(path, '^/auth/v1/')
group by ip
order by ip_count;
```

----------------------------------------

TITLE: Implementing Supabase Pull Function for Data Synchronization
DESCRIPTION: Creates a Postgres function to handle pulling changes from the Supabase database to the client, including fetching created, updated, and deleted profiles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create or replace function pull(last_pulled_at bigint default 0) returns jsonb as $$
declare _ts timestamp with time zone;
_profiles jsonb;
begin -- timestamp
_ts := to_timestamp(last_pulled_at / 1000);
--- profiles
select jsonb_build_object(
        'created',
        '[]'::jsonb,
        'updated',
        coalesce(
            jsonb_agg(
                jsonb_build_object(
                    'id',
                    t.id,
                    'name',
                    t.name,
                    'website',
                    t.website,
                    'created_at',
                    timestamp_to_epoch(t.created_at),
                    'updated_at',
                    timestamp_to_epoch(t.updated_at)
                )
            ) filter (
                where t.deleted_at is null
                    and t.last_modified_at > _ts
            ),
            '[]'::jsonb
        ),
        'deleted',
        coalesce(
            jsonb_agg(to_jsonb(t.id)) filter (
                where t.deleted_at is not null
                    and t.last_modified_at > _ts
            ),
            '[]'::jsonb
        )
    ) into _profiles
from sync_profiles_view t;
return jsonb_build_object(
    'changes',
    jsonb_build_object(
        'profiles',
        _profiles
    ),
    'timestamp',
    timestamp_to_epoch(now())
);
end;
$$ language plpgsql;
```

----------------------------------------

TITLE: Installing Dependencies for React Query and Supabase Integration in Next.js
DESCRIPTION: Command to install the required npm packages for using React Query with Next.js and Supabase, including Supabase Cache Helpers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js @tanstack/react-query @supabase/ssr @supabase-cache-helpers/postgrest-react-query
```

----------------------------------------

TITLE: Using Realtime Cursors Component in a Room (React)
DESCRIPTION: This snippet demonstrates how to utilize the Realtime Cursors component in a React application. It sets up a basic page that grants the added functionality of sharing cursor positions among users in the same room, identified by a unique name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/realtime-cursor.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { RealtimeCursors } from '@/components/realtime-cursors'

export default function Page() {
  return (
    <div className="w-full min-h-screen">
      <RealtimeCursors roomName="macrodata_refinement_office" username="Mark Scout" />
    </div>
  )
}
```

----------------------------------------

TITLE: Creating Function with Custom Isolation Level
DESCRIPTION: SQL example showing how to create a function with a specific transaction isolation level.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create function hello()
returns text as $$
  select 'hello';
$$ language sql
set default_transaction_isolation = 'repeatable read';
```

----------------------------------------

TITLE: Table Creation with JSON Schema Validation
DESCRIPTION: SQL code demonstrating how to create a table with a JSON column and JSON Schema validation using pg_jsonschema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-pg-jsonschema-a-postgres-extension-for-json-validation.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create table some_table(
  id serial primary key,
  metadata json not null,

  check (
    json_matches_schema(
      schema :='{
         "type": "object",
         "properties": {
          "foo": {
           "type": "string"
          }
         },
         "required": ["foo"],
         "additionalProperties": false
      }',
      instance := metadata
    )
  )
);

insert into some_table(metadata)
values
  (<SQL input>);
```

----------------------------------------

TITLE: Configuring AppComponent with Supabase Authentication in Angular
DESCRIPTION: This snippet shows how to set up the AppComponent to handle Supabase authentication changes and navigate to the account page when a user is logged in.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { Component } from '@angular/core'
import { Router } from '@angular/router'
import { SupabaseService } from './supabase.service'

@Component({
  selector: 'app-root',
  template: `
    <ion-app>
      <ion-router-outlet></ion-router-outlet>
    </ion-app>
  `,
  styleUrls: ['app.component.scss'],
})
export class AppComponent {
  constructor(
    private supabase: SupabaseService,
    private router: Router
  ) {
    this.supabase.authChanges((_, session) => {
      console.log(session)
      if (session?.user) {
        this.router.navigate(['/account'])
      }
    })
  }
}
```

----------------------------------------

TITLE: Serving Edge Function Locally with Environment Variables
DESCRIPTION: This command serves the edge function locally, using environment variables from a .env.local file and disabling JWT verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/openai.mdx#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
supabase functions serve --env-file ./supabase/.env.local --no-verify-jwt
```

----------------------------------------

TITLE: Creating Partial Index in PostgreSQL
DESCRIPTION: Creating a partial index that only includes specific rows matching a WHERE clause condition.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create index idx_orders_status on orders (status)
where status = 'shipped';
```

----------------------------------------

TITLE: Implementing Hybrid Search Edge Function with OpenAI and Supabase
DESCRIPTION: TypeScript/JavaScript code for implementing a Deno Edge Function that generates embeddings using OpenAI and executes hybrid search using Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { createClient } from 'jsr:@supabase/supabase-js@2'
import OpenAI from 'npm:openai'

const supabaseUrl = Deno.env.get('SUPABASE_URL')!
const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const openaiApiKey = Deno.env.get('OPENAI_API_KEY')!

Deno.serve(async (req) => {
  // Grab the user's query from the JSON payload
  const { query } = await req.json()

  // Instantiate OpenAI client
  const openai = new OpenAI({ apiKey: openaiApiKey })

  // Generate a one-time embedding for the user's query
  const embeddingResponse = await openai.embeddings.create({
    model: 'text-embedding-3-large',
    input: query,
    dimensions: 512,
  })

  const [{ embedding }] = embeddingResponse.data

  // Instantiate the Supabase client
  // (replace service role key with user's JWT if using Supabase auth and RLS)
  const supabase = createClient(supabaseUrl, supabaseServiceRoleKey)

  // Call hybrid_search Postgres function via RPC
  const { data: documents } = await supabase.rpc('hybrid_search', {
    query_text: query,
    query_embedding: embedding,
    match_count: 10,
  })

  return new Response(JSON.stringify(documents), {
    headers: { 'Content-Type': 'application/json' },
  })
})
```

----------------------------------------

TITLE: Implementing Authenticated Stack Navigation in React Native with Expo Router
DESCRIPTION: This snippet defines a stack navigation layout for the authenticated area of the app. It includes a logout button and sets up the screen for listing files.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_7

LANGUAGE: tsx
CODE:
```
import { Stack } from 'expo-router'
import { useAuth } from '../../provider/AuthProvider'
import React from 'react'
import { TouchableOpacity } from 'react-native'
import { Ionicons } from '@expo/vector-icons'

// Simple stack layout within the authenticated area
const StackLayout = () => {
  const { signOut } = useAuth()

  return (
    <Stack
      screenOptions={{
        headerStyle: {
          backgroundColor: '#0f0f0f',
        },
        headerTintColor: '#fff',
      }}
    >
      <Stack.Screen
        name="list"
        options={{
          headerTitle: 'My Files',
          headerRight: () => (
            <TouchableOpacity onPress={signOut}>
              <Ionicons name="log-out-outline" size={30} color={'#fff'} />
            </TouchableOpacity>
          ),
        }}
      ></Stack.Screen>
    </Stack>
  )
}

export default StackLayout
```

----------------------------------------

TITLE: Adding GitLab Sign-In in Supabase Flutter
DESCRIPTION: This Flutter snippet demonstrates how to authenticate users via GitLab using Supabase's `signInWithOAuth` method. It supports optional redirect links and launch modes for a more seamless user experience, especially in mobile apps. Prerequisites include the setup of Supabase client and relevant OAuth configurations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_1

LANGUAGE: Dart
CODE:
```
Future<void> signInWithGitLab() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.gitlab,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}
```

----------------------------------------

TITLE: Configuring Edge Runtime in Supabase for Background Tasks
DESCRIPTION: This TOML configuration sets up the edge runtime policy for the Supabase project to enable background tasks. The 'per_worker' policy is required for local testing to ensure proper function execution.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-speech-to-text/README.md#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[edge_runtime]
enabled = true
policy = "per_worker"
```

----------------------------------------

TITLE: Implementing Task API with Route Parameters in Hono Framework
DESCRIPTION: A Hono framework implementation for a task management API. This example shows how to set up a base path with the function name and define routes with parameters. It demonstrates accessing route parameters through c.req.param() and handling HTTP responses.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
import { Hono } from 'jsr:@hono/hono'

// You can set the basePath with Hono
const functionName = 'tasks'
const app = new Hono().basePath(`/${functionName}`)

// /tasks/id
app.get('/:id', async (c) => {
  const id = c.req.param('id')
  const task = {} // Fetch task by id here
  if (task) {
    return new Response(JSON.stringify(task))
  } else {
    return new Response('Task not found', { status: 404 })
  }
})

app.patch('/:id', async (c) => {
  const id = c.req.param('id')
  const body = await c.req.body()
  const updates = body.value
  const task = {} // Fetch task by id here
  if (task) {
    Object.assign(task, updates)
    return new Response(JSON.stringify(task))
  } else {
    return new Response('Task not found', { status: 404 })
  }
})

app.delete('/:id', async (c) => {
  const id = c.req.param('id')
  const task = {} // Fetch task by id here
  if (task) {
    // Delete task
    return new Response('Task deleted successfully')
  } else {
    return new Response('Task not found', { status: 404 })
  }
})

Deno.serve(app.fetch)
```

----------------------------------------

TITLE: Creating Avatar Upload Component with Supabase Storage in React
DESCRIPTION: This snippet defines a React component for uploading and displaying user avatars. It uses Supabase storage for uploading and downloading images, and handles states for avatar URL and upload process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
import { useEffect, useState } from 'react'
import { supabase } from './supabaseClient'

export default function Avatar({ url, size, onUpload }) {
  const [avatarUrl, setAvatarUrl] = useState(null)
  const [uploading, setUploading] = useState(false)

  useEffect(() => {
    if (url) downloadImage(url)
  }, [url])

  async function downloadImage(path) {
    try {
      const { data, error } = await supabase.storage.from('avatars').download(path)
      if (error) {
        throw error
      }
      const url = URL.createObjectURL(data)
      setAvatarUrl(url)
    } catch (error) {
      console.log('Error downloading image: ', error.message)
    }
  }

  async function uploadAvatar(event) {
    try {
      setUploading(true)

      if (!event.target.files || event.target.files.length === 0) {
        throw new Error('You must select an image to upload.')
      }

      const file = event.target.files[0]
      const fileExt = file.name.split('.').pop()
      const fileName = `${Math.random()}.${fileExt}`
      const filePath = `${fileName}`

      const { error: uploadError } = await supabase.storage.from('avatars').upload(filePath, file)

      if (uploadError) {
        throw uploadError
      }

      onUpload(event, filePath)
    } catch (error) {
      alert(error.message)
    } finally {
      setUploading(false)
    }
  }

  return (
    <div>
      {avatarUrl ? (
        <img
          src={avatarUrl}
          alt="Avatar"
          className="avatar image"
          style={{ height: size, width: size }}
        />
      ) : (
        <div className="avatar no-image" style={{ height: size, width: size }} />
      )}
      <div style={{ width: size }}>
        <label className="button primary block" htmlFor="single">
          {uploading ? 'Uploading ...' : 'Upload'}
        </label>
        <input
          style={{
            visibility: 'hidden',
            position: 'absolute',
          }}
          type="file"
          id="single"
          accept="image/*"
          onChange={uploadAvatar}
          disabled={uploading}
        />
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Calculating Total Bucket Storage Size
DESCRIPTION: SQL query to aggregate and list total storage size for each bucket in megabytes, sorted in descending order
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/storage-size.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
    bucket_id,
    (sum((metadata->>'size')::int) / 1048576.0)::numeric(10, 2) as total_size_megabyte
from
    storage.objects
group by
    bucket_id
order by
    total_size_megabyte desc;
```

----------------------------------------

TITLE: Deploying Supabase Functions
DESCRIPTION: This snippet outlines the command to deploy the Supabase function to the edge. It uses the Supabase CLI and includes a flag for JWT verification, ensuring a streamlined deployment process.
SOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/lw13-meetups-ogs/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions deploy lw13-meetups-ogs --no-verify-jwt
```

----------------------------------------

TITLE: Unlinking Identity with Kotlin
DESCRIPTION: Example showing how to fetch and unlink a Google OAuth identity using the Supabase Kotlin client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_8

LANGUAGE: kotlin
CODE:
```
val identities = supabase.auth.currentIdentitiesOrNull() ?: emptyList()

val googleIdentity = identities.first { it.provider == "google" }

supabase.auth.unlinkIdentity(googleIdentity.identityId!!)
```

----------------------------------------

TITLE: Loading Store Data with Supabase in TypeScript
DESCRIPTION: Functions to load store information and retrieve transformed images from Supabase database and storage. Includes image transformation parameters for optimized loading.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
  async loadStoreInformation(id: number) {
    const { data } = await this.supabase
      .from('stores')
      .select('*')
      .match({ id })
      .single();
    return data;
  }

  async getStoreImage(id: number) {
    return this.supabase.storage
      .from('stores')
      .getPublicUrl(`images/${id}.png`, {
        transform: {
          width: 300,
          resize: 'contain',
        },
      }).data.publicUrl;
  }
```

----------------------------------------

TITLE: Querying Normalized Data with Supabase JavaScript Client
DESCRIPTION: Example of querying normalized data from Supabase using the JavaScript client. This demonstrates the simpler syntax when working with properly structured relational data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-21-migrating-from-fauna-to-supabase.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('https://<your-project>.supabase.co', '<your-api-key>')

const { data, error } = await supabase.from('users').select('name, email')

if (error) console.error(error)
else console.log(data)
```

----------------------------------------

TITLE: Email Handler Implementation
DESCRIPTION: Core implementation of the email sending function that processes webhook requests and sends emails using Resend. Handles authentication validation and email template rendering.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/auth-send-email-hook-react-email-resend.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import React from 'npm:react@18.3.1'
import { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'
import { Resend } from 'npm:resend@4.0.0'
import { renderAsync } from 'npm:@react-email/components@0.0.22'
import { MagicLinkEmail } from './_templates/magic-link.tsx'

const resend = new Resend(Deno.env.get('RESEND_API_KEY') as string)
const hookSecret = Deno.env.get('SEND_EMAIL_HOOK_SECRET') as string

Deno.serve(async (req) => {
  if (req.method !== 'POST') {
    return new Response('not allowed', { status: 400 })
  }

  const payload = await req.text()
  const headers = Object.fromEntries(req.headers)
  const wh = new Webhook(hookSecret)
  try {
    const {
      user,
      email_data: { token, token_hash, redirect_to, email_action_type },
    } = wh.verify(payload, headers) as {
      user: {
        email: string
      }
      email_data: {
        token: string
        token_hash: string
        redirect_to: string
        email_action_type: string
        site_url: string
        token_new: string
        token_hash_new: string
      }
    }

    const html = await renderAsync(
      React.createElement(MagicLinkEmail, {
        supabase_url: Deno.env.get('SUPABASE_URL') ?? '',
        token,
        token_hash,
        redirect_to,
        email_action_type,
      })
    )

    const { error } = await resend.emails.send({
      from: 'welcome <onboarding@resend.dev>',
      to: [user.email],
      subject: 'Supa Custom MagicLink!',
      html,
    })
    if (error) {
      throw error
    }
  } catch (error) {
    console.log(error)
    return new Response(
      JSON.stringify({
        error: {
          http_code: error.code,
          message: error.message,
        },
      }),
      {
        status: 401,
        headers: { 'Content-Type': 'application/json' },
      }
    )
  }

  const responseHeaders = new Headers()
  responseHeaders.set('Content-Type', 'application/json')
  return new Response(JSON.stringify({}), {
    status: 200,
    headers: responseHeaders,
  })
})
```

----------------------------------------

TITLE: Unlinking Identity with Swift
DESCRIPTION: Example showing how to fetch and unlink a Google OAuth identity using the Supabase Swift client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_7

LANGUAGE: swift
CODE:
```
let identities = try await supabase.auth.userIdentities()

let googleIdentity = identities.first { $0.provider == .google }

try await supabase.auth.unlinkIdentity(googleIdentity)
```

----------------------------------------

TITLE: Enabling pg_cron Extension in Postgres
DESCRIPTION: This SQL command enables the pg_cron extension in the Postgres database if it's not already enabled.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create extension if not exists pg_cron;
```

----------------------------------------

TITLE: Storing Realtime Chat Messages in React
DESCRIPTION: This snippet demonstrates how to persist chat messages using the onMessage prop of the RealtimeChat component. It defines a handleMessage function that's triggered whenever new messages are sent.  This function asynchronously stores the messages, likely in a database, using the storeMessages function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/realtime-chat.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { RealtimeChat } from '@/components/realtime-chat'
import { useMessagesQuery } from '@/hooks/use-messages-query'
import { storeMessages } from '@/lib/store-messages'

export default function ChatPage() {
  const { data: messages } = useMessagesQuery()
  const handleMessage = (messages: ChatMessage[]) => {
    // Store messages in your database
    await storeMessages(messages)
  }

  return <RealtimeChat roomName="my-chat-room" username="john_doe" onMessage={handleMessage} />
}
```

----------------------------------------

TITLE: Initializing Vecs Client Connection in Python
DESCRIPTION: Establishes connection to Supabase database using vecs library. Requires PostgreSQL connection string with proper authentication details. Uses SQLAlchemy-compatible connection format.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/hello-world.mdx#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import vecs

DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)
```

----------------------------------------

TITLE: Creating IVFFlat Index for Cosine Distance in SQL
DESCRIPTION: SQL command to create an IVFFlat index using the vector_cosine_ops operator class for cosine distance. The index is created on the 'column_name' of the 'items' table with 100 lists.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/ivf-indexes.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create index on items using ivfflat (column_name vector_cosine_ops) with (lists = 100);
```

----------------------------------------

TITLE: Advanced Supabase Query Examples
DESCRIPTION: Examples of different query operators in Supabase including or, is, in, and neq operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-11-using-supabase-replit.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
// or
const { data, error } = await supabase
  .from('cities')
  .select('name, country_id')
  .or('id.eq.20,id.eq.30')

// is
const { data, error } = await supabase.from('cities').select('name, country_id').is('name', null)

// in
const { data, error } = await supabase
  .from('cities')
  .select('name, country_id')
  .in('name', ['Rio de Janeiro', 'San Francisco'])

// neq (not equal to)
const { data, error } = await supabase
  .from('cities')
  .select('name, country_id')
  .neq('name', 'The shire')

// full docs here: /docs/reference/javascript/filter
```

----------------------------------------

TITLE: Renaming Case-Sensitive Table in PostgreSQL
DESCRIPTION: SQL command to rename a case-sensitive table to lowercase for better compatibility.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-42p01-relation-does-not-exist-error-W4_9-V.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
alter table "Table_name"
rename to table_name;
```

----------------------------------------

TITLE: Signing In with Notion in Flutter using Supabase
DESCRIPTION: This snippet explains how to sign in with Notion using Supabase in a Flutter application by calling signInWithOAuth() with OAuthProvider.notion. Key parameters include redirectTo and authScreenLaunchMode, which are used for configuring deep linking and launching the auth screen, respectively.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_1

LANGUAGE: Dart
CODE:
```
Future<void> signInWithNotion() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.notion,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}

```

----------------------------------------

TITLE: Initializing Supabase Client with Custom Labels - React - JavaScript
DESCRIPTION: This snippet shows how to create a Supabase client instance and implement the Auth component with custom localization variables for the login interface. It allows for customizing the labels for email, password, and other elements in the UI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nimport { Auth } from '@supabase/auth-ui-react'\n\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n\nconst App = () => (\n  <Auth\n    supabaseClient={supabase}\n    localization={{\n      variables: {\n        sign_in: {\n          email_label: 'Your email address',\n          password_label: 'Your strong password',\n        },\n      },\n    }}\n  />\n)
```

----------------------------------------

TITLE: Installing Supabase Auth Helpers for Remix
DESCRIPTION: Command to install the required Supabase packages for Remix integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @supabase/auth-helpers-remix @supabase/supabase-js
```

----------------------------------------

TITLE: Invoking Edge Functions with Regional Specification Using cURL
DESCRIPTION: This snippet demonstrates how to use the x-region HTTP header in a cURL request to specify where a Supabase Edge Function should be executed. The example sets the region to eu-west-3 and passes a JSON payload.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/regional-invocation.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
# https://supabase.com/docs/guides/functions/deploy#invoking-remote-functions
curl --request POST 'https://<project_ref>.supabase.co/functions/v1/hello-world' \
  --header 'Authorization: Bearer ANON_KEY' \
  --header 'Content-Type: application/json' \
  --header 'x-region: eu-west-3' \
  --data '{ "name":"Functions" }'
```

----------------------------------------

TITLE: Using Explain with Supabase Client in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to use the explain() modifier with a Supabase client to get performance metrics for a query. It's useful for analyzing query execution plans and times.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('projects')
  .select('*')
  .eq('id', 1)
  .explain({ analyze: true })

console.log(data)
```

----------------------------------------

TITLE: Querying Nearby Restaurants with Dart
DESCRIPTION: Dart code to call the nearby_restaurants function with latitude and longitude parameters. Returns restaurants sorted by proximity to the given location.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_12

LANGUAGE: dart
CODE:
```
final data = await supabase.rpc('nearby_restaurants',params: {
  'lat': 40.807313,
  'long': -73.946713,
});
```

----------------------------------------

TITLE: Running React Tests with npm test
DESCRIPTION: Launches the test runner in interactive watch mode. This command executes tests for the React application and watches for changes to rerun tests as needed.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/app/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm test
```

----------------------------------------

TITLE: Setting up Vecs Collection with PostgreSQL
DESCRIPTION: Initializes connection to PostgreSQL database and creates a collection for storing review embeddings using the vecs library.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
import vecs

# Substitute your connection string here
DB_CONNECTION = "postgresql://postgres:password@localhost:5431/db"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)

# create a PostgreSQL/pgvector table named "reviews" to contain the review embeddings
reviews = vx.get_or_create_collection(name="reviews", dimension=384)
```

----------------------------------------

TITLE: Resizing Images with Custom Mode in Supabase Storage in Kotlin
DESCRIPTION: This code demonstrates two methods for downloading a resized image in Kotlin - one retrieving the data directly and another streaming to a file on JVM platforms, both using the CONTAIN resize mode.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_30

LANGUAGE: Kotlin
CODE:
```
val data = supabase.storage.from("bucket").downloadAuthenticated("image.jpg") {
    transform {
        size(800, 300)
        resize = ImageTransformation.Resize.CONTAIN
    }
}

//Or on JVM stream directly to a file
val file = File("image.jpg")
supabase.storage.from("bucket").downloadAuthenticatedTo("image.jpg", file) {
    transform {
        size(800, 300)
        resize = ImageTransformation.Resize.CONTAIN
    }
}
```

----------------------------------------

TITLE: Starting Local Supabase Development Environment
DESCRIPTION: Command to start the local Supabase development environment for making schema changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
supabase start
```

----------------------------------------

TITLE: Granting Schema Usage Permission to Auth Admin Role
DESCRIPTION: SQL command to grant usage permission on the public schema to the supabase_auth_admin role, enabling access to objects within the schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
grant usage on schema public to supabase_auth_admin;
```

----------------------------------------

TITLE: Installing Prisma Client with yarn
DESCRIPTION: This snippet shows how to install the Prisma client and generate its model using yarn.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_24

LANGUAGE: bash
CODE:
```
yarn add @prisma/client
npx prisma generate
```

----------------------------------------

TITLE: Creating a Login Component with Refine and Supabase in TypeScript
DESCRIPTION: This snippet creates a React component for user authentication using Refine's useLogin hook. It handles email-based login with a magic link.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { useState } from 'react'
import { useLogin } from '@refinedev/core'

export default function Auth() {
  const [email, setEmail] = useState('')
  const { isLoading, mutate: login } = useLogin()

  const handleLogin = async (event: { preventDefault: () => void }) => {
    event.preventDefault()
    login({ email })
  }

  return (
    <div className="row flex flex-center container">
      <div className="col-6 form-widget">
        <h1 className="header">Supabase + refine</h1>
        <p className="description">Sign in via magic link with your email below</p>
        <form className="form-widget" onSubmit={handleLogin}>
          <div>
            <input
              className="inputField"
              type="email"
              placeholder="Your email"
              value={email}
              required={true}
              onChange={(e) => setEmail(e.target.value)}
            />
          </div>
          <div>
            <button className={'button block'} disabled={isLoading}>
              {isLoading ? <span>Loading</span> : <span>Send magic link</span>}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Setting Custom Presence Key in Swift
DESCRIPTION: This snippet shows how to set a custom presence key while creating a channel in Swift.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_22

LANGUAGE: swift
CODE:
```
let channelC = await supabase.channel("test") {
  $0.presence.key = "userId-123"
}
```

----------------------------------------

TITLE: Error Handling in Functions
DESCRIPTION: Implementation of custom error handling for null value validation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
create or replace function error_if_null(some_val text)
returns text
language plpgsql
as $$
begin
  -- error if some_val is null
  if some_val is null then
    raise exception 'some_val should not be NULL';
  end if;
  -- return some_val if it is not null
  return some_val;
end;
$$;

select error_if_null(null);
```

----------------------------------------

TITLE: Analyzing Requests by Region in Supabase Edge Logs (SQL)
DESCRIPTION: This query counts requests by region and path for the Database API. It groups results by region and path, ordering by the count of requests per region.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
select
  path,
  region,
  count(region) as region_count
from
  edge_logs
  cross join unnest(metadata) as metadata
  cross join unnest(request) as request
  cross join unnest(cf) as cf
where
  -- only look at DB API
  regexp_contains(path, '^/rest/v1/')
group by region, path
order by requester_region_count;
```

----------------------------------------

TITLE: Implementing Keyset Pagination in GraphQL
DESCRIPTION: Example of keyset pagination implementation using first/after parameters to retrieve specific records after a cursor
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-pg-graphql-1-5-7.mdx#2025-04-21_snippet_0

LANGUAGE: graphql
CODE:
```
{
  blogCollection(
    first: 2,
    after: "Y3Vyc29yMQ=="
  ) {
  ...
}
```

----------------------------------------

TITLE: Rate Limiting Pre-Request Function
DESCRIPTION: Implements a pre-request function that checks if an IP has made more than 100 requests in the last 5 minutes. Only applies to modifying requests (POST, PUT, PATCH, DELETE).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
create function public.check_request()
  returns void
  language plpgsql
  security definer
  as $$
declare
  req_method text := current_setting('request.method', true);
  req_ip inet := split_part(
    current_setting('request.headers', true)::json->>'x-forwarded-for',
    ',', 1)::inet;
  count_in_five_mins integer;
begin
  if req_method = 'GET' or req_method = 'HEAD' or req_method is null then
    -- rate limiting can't be done on GET and HEAD requests
    return;
  end if;

  select
    count(*) into count_in_five_mins
  from private.rate_limits
  where
    ip = req_ip and request_at between now() - interval '5 minutes' and now();

  if count_in_five_mins > 100 then
    raise sqlstate 'PGRST' using
      message = json_build_object(
        'message', 'Rate limit exceeded, try again after a while')::text,
      detail = json_build_object(
        'status',  420,
        'status_text', 'Enhance Your Calm')::text;
  end if;

  insert into private.rate_limits (ip, request_at) values (req_ip, now());
end;
  $$;
```

----------------------------------------

TITLE: SQL Table Creation for Vector Storage
DESCRIPTION: Shows the SQL statement that Vecs generates to create a table for storing vectors. This table includes columns for the ID, vector data, and associated metadata stored as JSONB.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_1

LANGUAGE: sql
CODE:
```
create table vecs.docs (
    id text primary key,
    vec vector(3) not null,
    metadata jsonb not null default '{}'::jsonb
);
```

----------------------------------------

TITLE: Adding Supabase Dependency to Swift Package
DESCRIPTION: This code snippet demonstrates how to add the Supabase package as a dependency in a Swift package. It shows the configuration for the Package.swift file, including the package URL, version requirement, and target dependencies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/swift/v1/installing.mdx#2025-04-21_snippet_0

LANGUAGE: swift
CODE:
```
let package = Package(
    ...
    dependencies: [
        ...
        .package(
            url: "https://github.com/supabase/supabase-swift.git",
            from: "2.0.0"
        ),
    ],
    targets: [
        .target(
            name: "YourTargetName",
            dependencies: [
                .product(
                    name: "Supabase", // Auth, Realtime, Postgrest, Functions, or Storage
                    package: "supabase-swift"
                ),
            ]
        )
    ]
)
```

----------------------------------------

TITLE: Installing Prisma Client with bun
DESCRIPTION: This snippet demonstrates how to install the Prisma client and generate its model using bun.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_25

LANGUAGE: bash
CODE:
```
bun install @prisma/client
bunx prisma generate
```

----------------------------------------

TITLE: Restoring PostgreSQL from WAL-G Physical Backup
DESCRIPTION: Commands to remove the current data directory and restore it from the latest physical backup stored in S3 using WAL-G.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_12

LANGUAGE: shell
CODE:
```
$ rm -rf /var/lib/postgresql/12/main
$ envdir /etc/wal-g.d/env /usr/local/bin/wal-g backup-fetch /var/lib/postgresql/12/main LATEST
```

----------------------------------------

TITLE: Sign Out in Kotlin
DESCRIPTION: This code snippet demonstrates how to sign out a user using the Supabase Kotlin client library. It calls the `signOut` function. The function suspends until the sign-out process is complete.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Email Template for User Signup - HTML
DESCRIPTION: This HTML snippet is an email template for user signup confirmation. It contains a link for users to confirm their email address after signing up.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/password-based-auth.mdx#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<h2>Confirm your signup</h2>

<p>Follow this link to confirm your user:</p>
<p>
  <a
    href="{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email&next={{ .RedirectTo }}"
    >Confirm your email</a
  >
</p>
```

----------------------------------------

TITLE: Deploying Secrets to Supabase Project
DESCRIPTION: CLI command to set secrets in the Supabase project using the created .env file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/inspecting-edge-function-environment-variables-wg5qOQ.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npx supabase secrets set --env-file ./supabase/.env --project-ref <PROJECT REF>
```

----------------------------------------

TITLE: Deploying Supabase Functions
DESCRIPTION: Command to deploy Supabase Functions to the linked remote Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
supabase functions deploy
```

----------------------------------------

TITLE: Sending State in Dart
DESCRIPTION: This snippet shows how to send user status in Dart after subscribing to a channel.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_11

LANGUAGE: dart
CODE:
```
final roomOne = supabase.channel('room_01');

final userStatus = {
  'user': 'user-1',
  'online_at': DateTime.now().toIso8601String(),
};

roomOne.subscribe((status, error) async {
  if (status != RealtimeSubscribeStatus.subscribed) return;

  final presenceTrackStatus = await roomOne.track(userStatus);
  print(presenceTrackStatus);
});
```

----------------------------------------

TITLE: Admin Role Access Token Hook
DESCRIPTION: SQL implementation of a custom hook that adds an admin role claim to tokens for users marked as admins in a profiles table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table profiles (
  user_id uuid not null primary key references auth.users (id),
  is_admin boolean not null default false
);

create or replace function public.custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
as $$
  declare
    claims jsonb;
    is_admin boolean;
  begin
    -- Check if the user is marked as admin in the profiles table
    select is_admin into is_admin from profiles where user_id = (event->>'user_id')::uuid;

    -- Proceed only if the user is an admin 
    if is_admin then
      claims := event->'claims';

      -- Check if 'app_metadata' exists in claims
      if jsonb_typeof(claims->'app_metadata') is null then
        -- If 'app_metadata' does not exist, create an empty object
        claims := jsonb_set(claims, '{app_metadata}', '{}');
      end if;

      -- Set a claim of 'admin'
      claims := jsonb_set(claims, '{app_metadata, admin}', 'true');

      -- Update the 'claims' object in the original event
      event := jsonb_set(event, '{claims}', claims);
    end if;

    -- Return the modified or original event
    return event;
  end;
$$;

grant all
  on table public.profiles
  to supabase_auth_admin;

revoke all
  on table public.profiles
  from authenticated, anon, public;
```

----------------------------------------

TITLE: Sending State in Swift
DESCRIPTION: This snippet demonstrates how to send user status in Swift using a custom type or a raw JSONObject.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_12

LANGUAGE: swift
CODE:
```
let roomOne = await supabase.channel("room_01")

// Using a custom type
let userStatus = UserStatus(
    user: "user-1",
    onlineAt: Date().timeIntervalSince1970
)

await roomOne.subscribe()

try await roomOne.track(userStatus)

// Or using a raw JSONObject.
await roomOne.track(
  [
    "user": .string("user-1"),
    "onlineAt": .double(Date().timeIntervalSince1970)
  ]
)
```

----------------------------------------

TITLE: Creating Vector Index
DESCRIPTION: Creates an index on the vector column to optimize similarity search performance.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/semantic_text_deduplication.ipynb#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
reviews.create_index()
```

----------------------------------------

TITLE: Sign Out Implementation in JavaScript
DESCRIPTION: Logout method to remove user session and clear local storage in Supabase authentication
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Identifying Time-Intensive Hash Join Operations in PostgreSQL Query Plans
DESCRIPTION: Example of a hash join operation that takes significant execution time, which could be a potential performance bottleneck in a query. The actual execution time of 100 milliseconds indicates this operation may need optimization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
Hash Join  (cost=100.00..200.00 rows=1000 width=50) (actual time=50.012..150.023 rows=1000 loops=1)
```

----------------------------------------

TITLE: Creating Storage Bucket with Dart
DESCRIPTION: Creates a storage bucket named 'avatars' using the Supabase Dart client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/creating-buckets.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
void main() async {
  final supabase = SupabaseClient('supabaseUrl', 'supabaseKey');

  final storageResponse = await supabase
      .storage
      .createBucket('avatars');
}
```

----------------------------------------

TITLE: Creating a More Complex JWT Payload in JavaScript
DESCRIPTION: This JavaScript code snippet shows an example of a more complex JSON object that can be used as the payload of a JWT. In addition to the standard claims like `sub`, `name`, `iat`, and `exp`, it includes a custom `theme` property with nested `primary` and `secondary` color values. This demonstrates that JWTs can store arbitrary data, although larger payloads increase the token size.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
{
  "sub": "0002",
  "name": "Věra Hrabánková",
  "iat": 1516239022,
  "exp": 1518239022,
  "theme": {
      "primary" : "#D80C14",
      "secondary" : "#FFFFFF"
  }
}
```

----------------------------------------

TITLE: Setting Environment Variables for Supabase and OpenAI
DESCRIPTION: Environment variables required for connecting to Supabase and OpenAI API, to be added to a .env file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=

# Get your key at https://platform.openai.com/account/api-keys
OPENAI_API_KEY=
```

----------------------------------------

TITLE: Ingesting Movie Data into Postgres with Slonik
DESCRIPTION: JavaScript function that inserts movie documents into a Postgres database using the Slonik SQL query builder. It handles document validation, inserts data with proper field mapping, and implements an upsert pattern to handle duplicate IDs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
// Ingesting search documents
async function ingest({ document, pool }) {
  // Ignore rows without proper release dates
  if (document.release_date.trim().length === 0) {
    return
  }

  await pool.query(sql`
insert into movies (
	id, 
	title, 
	original_title, 
	overview, 
	released_at
)
values
(
	${document.id},
	${document.title},
	${document.original_title},
	${document.overview},
	${new Date(document.release_date).toISOString()}::timestamptz
)
on conflict (id) do update set
  title=${document.title}, 
	original_title=${document.original_title}, 
	overview=${document.overview}, 
	released_at=${new Date(document.release_date).toISOString()}::timestamptz
;
`)
```

----------------------------------------

TITLE: Storing Messages in Realtime Chat using Next.js
DESCRIPTION: Illustrates the integration of a message storage mechanism, triggering a store action on message event. Utilizes '@/lib/store-messages' to handle message storage operations asynchronously.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-chat.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { RealtimeChat } from '@/components/realtime-chat'
import { useMessagesQuery } from '@/hooks/use-messages-query'
import { storeMessages } from '@/lib/store-messages'

export default function ChatPage() {
  const { data: messages } = useMessagesQuery()
  const handleMessage = (messages: ChatMessage[]) => {
    // Store messages in your database
    await storeMessages(messages)
  }

  return <RealtimeChat roomName="my-chat-room" username="john_doe" onMessage={handleMessage} />
}
```

----------------------------------------

TITLE: Handling MFA Verification Process in React
DESCRIPTION: The AuthMFA component manages the MFA verification process. It lists available MFA factors, presents a challenge to the user, and verifies the code provided through the authenticator app. Dependencies include React hooks and Supabase auth methods.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/totp.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
function AuthMFA() {
  const [verifyCode, setVerifyCode] = useState('')
  const [error, setError] = useState('')

  const onSubmitClicked = () => {
    setError('')
    ;(async () => {
      const factors = await supabase.auth.mfa.listFactors()
      if (factors.error) {
        throw factors.error
      }

      const totpFactor = factors.data.totp[0]

      if (!totpFactor) {
        throw new Error('No TOTP factors found!')
      }

      const factorId = totpFactor.id

      const challenge = await supabase.auth.mfa.challenge({ factorId })
      if (challenge.error) {
        setError(challenge.error.message)
        throw challenge.error
      }

      const challengeId = challenge.data.id

      const verify = await supabase.auth.mfa.verify({
        factorId,
        challengeId,
        code: verifyCode,
      })
      if (verify.error) {
        setError(verify.error.message)
        throw verify.error
      }
    })()
  }

  return (
    <>
      <div>Please enter the code from your authenticator app.</div>
      {error && <div className="error">{error}</div>}
      <input
        type="text"
        value={verifyCode}
        onChange={(e) => setVerifyCode(e.target.value.trim())}
      />
      <input type="button" value="Submit" onClick={onSubmitClicked} />
    </>
  )
}
```

----------------------------------------

TITLE: GraphQL Query for Profiles in Supabase Example App
DESCRIPTION: Shows a GraphQL query used in the example Hacker News clone app to fetch profile information, including id, username, bio, avatarUrl, and website.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-29-graphql-now-available.mdx#2025-04-21_snippet_7

LANGUAGE: graphql
CODE:
```
query ProfilesQuery {
    profileCollection {
      edges {
        node {
          id
          username
          bio
          avatarUrl
          website
      }
    }
  }
}
```

----------------------------------------

TITLE: Invoking Edge Function Locally with cURL
DESCRIPTION: Demonstrates how to invoke the local Edge Function using cURL, including the necessary headers and payload.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-quickstart.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
curl --request POST 'http://localhost:54321/functions/v1/hello-world' \
  --header 'Authorization: Bearer SUPABASE_ANON_KEY' \
  --header 'Content-Type: application/json' \
  --data '{ "name":"Functions" }'
```

----------------------------------------

TITLE: Full Text Search Using Kotlin Supabase Client
DESCRIPTION: Kotlin implementation using Supabase client to perform a full text search on the books table, searching the title column for 'Harry'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_12

LANGUAGE: kotlin
CODE:
```
val data = supabase.from("books").select {
    filter {
        textSearch("title", "'Harry'", TextSearchType.NONE)
    }
}
```

----------------------------------------

TITLE: Copy object in the same bucket using Supabase
DESCRIPTION: Copies an object within the same bucket using the Supabase storage API. This snippet shows how to use the `copy` method to duplicate an object from one path to another within the same bucket. Requires `@supabase/supabase-js` and a valid Supabase client instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
await supabase.storage.from('avatars').copy('public/avatar1.png', 'private/avatar2.png')
```

----------------------------------------

TITLE: Referencing Environment Variables in TOML
DESCRIPTION: Demonstrates how to reference environment variables from the .env file within the config.toml file using the env() function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/managing-config.mdx#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[auth.external.github]
enabled = true
client_id = "env(GITHUB_CLIENT_ID)"
secret = "env(GITHUB_SECRET)"
redirect_uri = "" # Overrides the default auth redirectUrl.
```

----------------------------------------

TITLE: Adding Moshi serializer dependency in Groovy build file
DESCRIPTION: This snippet demonstrates how to add the Moshi serializer dependency to a Kotlin project using Gradle Groovy DSL. It's necessary for using Moshi as the serialization method in supabase-kt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_12

LANGUAGE: groovy
CODE:
```
implementation 'io.github.jan-tennert.supabase:serializer-moshi:VERSION'
```

----------------------------------------

TITLE: Signing In with Azure in Supabase (Kotlin)
DESCRIPTION: This Kotlin snippet demonstrates how to authenticate users using Azure OAuth in a Supabase application. The `signInWith` method is invoked with the Azure provider, requesting the email scope.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithAzure() {
    supabase.auth.signInWith(Azure) {
        scopes.add("email")
    }
}
```

----------------------------------------

TITLE: Initializing Supabase Client with Jackson Serialization
DESCRIPTION: This Kotlin snippet demonstrates how to initialize the Supabase client with Jackson Serialization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_15

LANGUAGE: kotlin
CODE:
```
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    defaultSerializer = JacksonSerializer()
}
```

----------------------------------------

TITLE: Complete Form Implementation with React Hook Form and Zod
DESCRIPTION: A complete example of building a form using the Form components with React Hook Form and Zod validation, including imports, schema definition, form setup, and rendering the form with submit button.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/form.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'

import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { z } from 'zod'

import { Button } from '@/components/ui/button'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'

const formSchema = z.object({
  username: z.string().min(2, {
    message: 'Username must be at least 2 characters.',
  }),
})

export function ProfileForm() {
  // ...

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder="shadcn" {...field} />
              </FormControl>
              <FormDescription>This is your public display name.</FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  )
}
```

----------------------------------------

TITLE: Link Email to Anonymous User in Python
DESCRIPTION: Updates an anonymous user to add an email address and password in Supabase using Python. This converts an anonymous user to a permanent user by linking an email identity. The email must be verified before setting a password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
response = supabase.auth.update_user({
  'email': 'valid.email@supabase.io',
})

# verify the user's email by clicking on the email change link
# or entering the 6-digit OTP sent to the email address

# once the user has been verified, update the password
response = supabase.auth.update_user({
  'password': 'password',
})
```

----------------------------------------

TITLE: Creating New PostgreSQL Database
DESCRIPTION: Basic SQL command to create a new database, which by default uses template1 as its template.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-09-postgresql-templates.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE DATABASE new_db_name;
```

----------------------------------------

TITLE: Creating a SolidJS app with degit
DESCRIPTION: Uses the degit command to create a new SolidJS application from a template. This creates the foundational project structure for a JavaScript-based SolidJS app.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/solidjs.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx degit solidjs/templates/js my-app
```

----------------------------------------

TITLE: Implementing Account Page with Profile Management in Flutter and Supabase
DESCRIPTION: A StatefulWidget that allows users to view and update their profile information stored in Supabase. It includes functionality to fetch profile data, update profile details, and sign out. The widget handles various error states and loading indicators.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:supabase_quickstart/main.dart';
import 'package:supabase_quickstart/pages/login_page.dart';

class AccountPage extends StatefulWidget {
  const AccountPage({super.key});

  @override
  State<AccountPage> createState() => _AccountPageState();
}

class _AccountPageState extends State<AccountPage> {
  final _usernameController = TextEditingController();
  final _websiteController = TextEditingController();

  String? _avatarUrl;
  var _loading = true;

  /// Called once a user id is received within `onAuthenticated()`
  Future<void> _getProfile() async {
    setState(() {
      _loading = true;
    });

    try {
      final userId = supabase.auth.currentSession!.user.id;
      final data =
          await supabase.from('profiles').select().eq('id', userId).single();
      _usernameController.text = (data['username'] ?? '') as String;
      _websiteController.text = (data['website'] ?? '') as String;
      _avatarUrl = (data['avatar_url'] ?? '') as String;
    } on PostgrestException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        setState(() {
          _loading = false;
        });
      }
    }
  }

  /// Called when user taps `Update` button
  Future<void> _updateProfile() async {
    setState(() {
      _loading = true;
    });
    final userName = _usernameController.text.trim();
    final website = _websiteController.text.trim();
    final user = supabase.auth.currentUser;
    final updates = {
      'id': user!.id,
      'username': userName,
      'website': website,
      'updated_at': DateTime.now().toIso8601String(),
    };
    try {
      await supabase.from('profiles').upsert(updates);
      if (mounted) context.showSnackBar('Successfully updated profile!');
    } on PostgrestException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        setState(() {
          _loading = false;
        });
      }
    }
  }

  Future<void> _signOut() async {
    try {
      await supabase.auth.signOut();
    } on AuthException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (_) => const LoginPage()),
        );
      }
    }
  }

  @override
  void initState() {
    super.initState();
    _getProfile();
  }

  @override
  void dispose() {
    _usernameController.dispose();
    _websiteController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Profile')),
      body: ListView(
        padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 12),
        children: [
          TextFormField(
            controller: _usernameController,
            decoration: const InputDecoration(labelText: 'User Name'),
          ),
          const SizedBox(height: 18),
          TextFormField(
            controller: _websiteController,
            decoration: const InputDecoration(labelText: 'Website'),
          ),
          const SizedBox(height: 18),
          ElevatedButton(
            onPressed: _loading ? null : _updateProfile,
            child: Text(_loading ? 'Saving...' : 'Update'),
          ),
          const SizedBox(height: 18),
          TextButton(onPressed: _signOut, child: const Text('Sign Out')),
        ],
      ),
    );
  }
}
```

----------------------------------------

TITLE: Running Supabase Functions Locally for OG Image Generation
DESCRIPTION: Commands to start Supabase locally and serve the 'lwx-ticket' function for Open Graph image generation. This setup allows for local testing of the function without JWT verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/supabase/functions/lwx-ticket/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase start
supabase functions serve lwx-ticket --no-verify-jwt --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Configuring Schema Order with TOML
DESCRIPTION: This TOML configuration snippet shows how to specify a custom order for applying schema files using the `schema_paths` setting in `config.toml`. This is useful for managing dependencies between schema files, ensuring parent tables are created before child tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_13

LANGUAGE: toml
CODE:
```
[db.migrations]
schema_paths = [
  "./schemas/employees.sql",
  "./schemas/*.sql",
]
```

----------------------------------------

TITLE: Implementing a Discord Slash Command with TypeScript and Deno
DESCRIPTION: This TypeScript code implements a Discord bot that responds to a '/hello' slash command. It uses the Sift routing library and TweetNaCl for signature verification, handling both Ping interactions and ApplicationCommand interactions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/discord-bot.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Sift is a small routing library that abstracts away details like starting a
// listener on a port, and provides a simple function (serve) that has an API
// to invoke a function for a specific path.
import { json, serve, validateRequest } from 'https://deno.land/x/sift@0.6.0/mod.ts'
// TweetNaCl is a cryptography library that we use to verify requests
// from Discord.
import nacl from 'https://cdn.skypack.dev/tweetnacl@v1.0.3?dts'

enum DiscordCommandType {
  Ping = 1,
  ApplicationCommand = 2,
}

// For all requests to "/" endpoint, we want to invoke home() handler.
serve({
  '/discord-bot': home,
})

// The main logic of the Discord Slash Command is defined in this function.
async function home(request: Request) {
  // validateRequest() ensures that a request is of POST method and
  // has the following headers.
  const { error } = await validateRequest(request, {
    POST: {
      headers: ['X-Signature-Ed25519', 'X-Signature-Timestamp'],
    },
  })
  if (error) {
    return json({ error: error.message }, { status: error.status })
  }

  // verifySignature() verifies if the request is coming from Discord.
  // When the request's signature is not valid, we return a 401 and this is
  // important as Discord sends invalid requests to test our verification.
  const { valid, body } = await verifySignature(request)
  if (!valid) {
    return json(
      { error: 'Invalid request' },
      {
        status: 401,
      }
    )
  }

  const { type = 0, data = { options: [] } } = JSON.parse(body)
  // Discord performs Ping interactions to test our application.
  // Type 1 in a request implies a Ping interaction.
  if (type === DiscordCommandType.Ping) {
    return json({
      type: 1, // Type 1 in a response is a Pong interaction response type.
    })
  }

  // Type 2 in a request is an ApplicationCommand interaction.
  // It implies that a user has issued a command.
  if (type === DiscordCommandType.ApplicationCommand) {
    const { value } = data.options.find(
      (option: { name: string; value: string }) => option.name === 'name'
    )
    return json({
      // Type 4 responds with the below message retaining the user's
      // input at the top.
      type: 4,
      data: {
        content: `Hello, ${value}!`,
      },
    })
  }

  // We will return a bad request error as a valid Discord request
  // shouldn't reach here.
  return json({ error: 'bad request' }, { status: 400 })
}

/** Verify whether the request is coming from Discord. */
async function verifySignature(request: Request): Promise<{ valid: boolean; body: string }> {
  const PUBLIC_KEY = Deno.env.get('DISCORD_PUBLIC_KEY')!
  // Discord sends these headers with every request.
  const signature = request.headers.get('X-Signature-Ed25519')!
  const timestamp = request.headers.get('X-Signature-Timestamp')!
  const body = await request.text()
  const valid = nacl.sign.detached.verify(
    new TextEncoder().encode(timestamp + body),
    hexToUint8Array(signature),
    hexToUint8Array(PUBLIC_KEY)
  )

  return { valid, body }
}

/** Converts a hexadecimal string to Uint8Array. */
function hexToUint8Array(hex: string) {
  return new Uint8Array(hex.match(/.{1,2}/g)!.map((val) => parseInt(val, 16)))
}
```

----------------------------------------

TITLE: Creating SQL Function in PostgreSQL
DESCRIPTION: Demonstrates creating a simple addition function in PostgreSQL using SQL language. The function takes two integer parameters and returns their sum.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_26

LANGUAGE: bash
CODE:
```
# as postgres
postgres=> create function add(integer, integer)
returns integer
as 'select $1 + $2;'
language sql;
CREATE FUNCTION
```

----------------------------------------

TITLE: Pulling a specific schema from Supabase
DESCRIPTION: This command synchronizes your local database with a specific schema from your Supabase project by using the --schema option followed by the schema name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
supabase db pull --schema <schema_name>
```

----------------------------------------

TITLE: Creating Token Exchange Endpoint in SvelteKit
DESCRIPTION: This SvelteKit snippet sets up an API endpoint to confirm token exchanges. It cleans up the redirect URL, verifies the OTP via Supabase, and either redirects users to a specified location or an error page.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { redirect } from '@sveltejs/kit'
import { type EmailOtpType } from '@supabase/supabase-js'

export const GET = async (event) => {
  const {
    url,
    locals: { supabase },
  } = event
  const token_hash = url.searchParams.get('token_hash') as string
  const type = url.searchParams.get('type') as EmailOtpType | null
  const next = url.searchParams.get('next') ?? '/'

  /**
   * Clean up the redirect URL by deleting the Auth flow parameters.
   *
   * `next` is preserved for now, because it's needed in the error case.
   */
  const redirectTo = new URL(url)
  redirectTo.pathname = next
  redirectTo.searchParams.delete('token_hash')
  redirectTo.searchParams.delete('type')

  if (token_hash && type) {
    const { error } = await supabase.auth.verifyOtp({ token_hash, type })
    if (!error) {
      redirectTo.searchParams.delete('next')
      redirect(303, redirectTo)
    }
  }

  // return the user to an error page with some instructions
  redirectTo.pathname = '/auth/error'
  redirect(303, redirectTo)
}
```

----------------------------------------

TITLE: Next.js Browser Sentry Configuration with Supabase
DESCRIPTION: Configuration for Sentry in a Next.js application's browser environment. Sets up Supabase integration with tracing and filtering for browser requests.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_6

LANGUAGE: ts
CODE:
```
import * as Sentry from '@sentry/nextjs'
import { SupabaseClient } from '@supabase/supabase-js'
import { supabaseIntegration } from '@supabase/sentry-js-integration'

Sentry.init({
  dsn: SENTRY_DSN,
  integrations: [
    supabaseIntegration(SupabaseClient, Sentry, {
      tracing: true,
      breadcrumbs: true,
      errors: true,
    }),
    Sentry.browserTracingIntegration({
      shouldCreateSpanForRequest: (url) => {
        return !url.startsWith(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest`)
      },
    }),
  ],

  // Adjust this value in production, or use tracesSampler for greater control
  tracesSampleRate: 1,

  // Setting this option to true will print useful information to the console while you're setting up Sentry.
  debug: true,
})
```

----------------------------------------

TITLE: Deploying the Cloudflare Turnstile Edge Function
DESCRIPTION: Commands to deploy the Cloudflare Turnstile validation function to Supabase and set the required secret key environment variable for Cloudflare authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/cloudflare-turnstile.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase functions deploy cloudflare-turnstile
supabase secrets set CLOUDFLARE_SECRET_KEY=your_secret_key
```

----------------------------------------

TITLE: Implementing Social Authentication
DESCRIPTION: Implementation of social authentication providers using SupaSocialsAuth widget.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
SupaSocialsAuth(
  socialProviders: [
    OAuthProvider.apple,
    OAuthProvider.google,
  ],
  colored: true,
  redirectUrl: kIsWeb
    ? null
    : 'io.mydomain.myapp://callback',
  onSuccess: (Session response) {},
  onError: (error) {},
)
```

----------------------------------------

TITLE: Creating Users in Supabase Auth Using Password Hashes - TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to create new users in Supabase Auth using a password hash. It requires the '@supabase/supabase-js' library for creating a Supabase client. The function uses the 'createUser' method from the Supabase admin API and requires the user's email, password hash, and email confirmation status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/auth0.mdx#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst { data, error } = await supabase.auth.admin.createUser({\n  email: 'valid.email@supabase.io',\n  password_hash: '$2y$10$a9pghn27d7m0ltXvlX8LiOowy7XfFw0hW0G80OjKYQ1jaoejaA7NC',\n  email_confirm: true,\n})
```

----------------------------------------

TITLE: Inserting Array Data with JavaScript Supabase Client
DESCRIPTION: This JavaScript snippet uses the Supabase client to insert a record into the 'arraytest' table with an id of 2 and a text array containing four elements.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('arraytest')
  .insert([{ id: 2, textarray: ['one', 'two', 'three', 'four'] }])
```

----------------------------------------

TITLE: Complete Sidebar Implementation with Navigation
DESCRIPTION: Full implementation of a sidebar component with navigation menu and icons.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { Calendar, Home, Inbox, Search, Settings } from 'lucide-react'

import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from '@/components/ui/sidebar'

const items = [
  {
    title: 'Home',
    url: '#',
    icon: Home,
  },
  {
    title: 'Inbox',
    url: '#',
    icon: Inbox,
  },
  {
    title: 'Calendar',
    url: '#',
    icon: Calendar,
  },
  {
    title: 'Search',
    url: '#',
    icon: Search,
  },
  {
    title: 'Settings',
    url: '#',
    icon: Settings,
  },
]

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Application</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {items.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <a href={item.url}>
                      <item.icon />
                      <span>{item.title}</span>
                    </a>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Initializing Prisma Project with yarn
DESCRIPTION: Commands to initialize a new Node.js project, install Prisma and TypeScript dependencies, and set up the initial Prisma configuration using yarn.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
yarn init -y
yarn add prisma typescript ts-node @types/node --save-dev

npx tsc --init

npx prisma init
```

----------------------------------------

TITLE: Sign In with Slack using Supabase Auth
DESCRIPTION: This Flutter snippet demonstrates how to sign in a user with Slack OAuth using the Supabase client library. It initializes the Supabase client and calls the signInWithOAuth method with the `OAuthProvider.slack` provider. It also handles the redirect URL for web and mobile platforms, along with the auth screen launch mode.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-slack.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signInWithSlack() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.slack,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}
```

----------------------------------------

TITLE: Cancelling all active PostgreSQL transactions and running manual vacuum
DESCRIPTION: This SQL sequence cancels all active backend processes and then runs a manual vacuum on a specific table, useful when autovacuum is blocked by locks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_14

LANGUAGE: jsx
CODE:
```
SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE state = 'active';
VACUUM mytable;
```

----------------------------------------

TITLE: Creating Table with Enum Column
DESCRIPTION: Shows how to create a table that uses the previously defined mood enum type as a column constraint.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table person (
  id serial primary key,
  name text,
  current_mood mood
);
```

----------------------------------------

TITLE: Implementing Supabase Push Function for Data Synchronization
DESCRIPTION: Creates a Postgres function to handle pushing changes from the client to the Supabase database, including creating, updating, and deleting profiles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create or replace function push(changes jsonb) returns void as $$
declare new_profile jsonb;
declare updated_profile jsonb;
begin
-- create profiles
for new_profile in
select jsonb_array_elements((changes->'profiles'->'created')) loop perform create_profile(
        (new_profile->>'id')::uuid,
        (new_profile->>'user_id')::uuid,
        (new_profile->>'name'),
        (new_profile->>'website'),
        epoch_to_timestamp(new_profile->>'created_at'),
        epoch_to_timestamp(new_profile->>'updated_at')
    );
end loop;
-- delete profiles
with changes_data as (
    select jsonb_array_elements_text(changes->'profiles'->'deleted')::uuid as deleted
)
-- update profiles
update profiles
set deleted_at = now(),
    last_modified_at = now()
from changes_data
where profiles.id = changes_data.deleted;
end;
$$ language plpgsql;
```

----------------------------------------

TITLE: Code Exchange Route Implementation (JavaScript)
DESCRIPTION: Implementation of the auth callback route for handling code exchange in JavaScript.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { redirect } from '@remix-run/node'
import { createServerClient } from '@supabase/auth-helpers-remix'

export const loader = async ({ request }) => {
  const response = new Response()
  const url = new URL(request.url)
  const code = url.searchParams.get('code')

  if (code) {
    const supabaseClient = createServerClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_ANON_KEY,
      { request, response }
    )
    await supabaseClient.auth.exchangeCodeForSession(code)
  }

  return redirect('/', {
    headers: response.headers,
  })
}
```

----------------------------------------

TITLE: Initializing Kakao OAuth Sign-In with JavaScript
DESCRIPTION: Function to initiate Kakao authentication using Supabase JavaScript client, enabling users to sign in with their Kakao account
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-kakao.mdx#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
async function signInWithKakao() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'kakao',
  })
}
```

----------------------------------------

TITLE: Basic Posts Table Creation in PostgreSQL
DESCRIPTION: SQL command to create a basic posts table with title and content columns.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-10-postgres-crdt.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table posts (
  id serial primary key,
  title text,
  content text default ''
);
```

----------------------------------------

TITLE: Removing Custom Subdomain using Supabase CLI
DESCRIPTION: This command removes a custom subdomain from a Supabase project using the CLI. It requires the project reference and uses the --experimental flag.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
supabase vanity-subdomains delete --project-ref abcdefghijklmnopqrst --experimental
```

----------------------------------------

TITLE: Implementing GitHub Sign-in Route
DESCRIPTION: Flask route handler for initiating GitHub OAuth sign-in process using Supabase authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-21-oauth2-login-python-flask-apps.mdx#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
@app.route("/signin/github")
def signin_with_github():
    res = supabase.auth.sign_in_with_oauth(
        {
            "provider": "github",
            "options": {
	            "redirect_to": f"{request.host_url}callback"
	        },
        }
    )
    return redirect(res.url)
```

----------------------------------------

TITLE: Handling Deep Links in Android Activity
DESCRIPTION: Kotlin implementation for handling deep links in the Android activity's onCreate method using Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_12

LANGUAGE: kotlin
CODE:
```
override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    supabase.handleDeeplinks(intent)
}
```

----------------------------------------

TITLE: Creating an Index on a JSONB Key in SQL
DESCRIPTION: This example demonstrates how to create an index on a specific key within a JSONB column using a standard BTREE index, which can be more efficient than indexing the entire JSONB body.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
create table person (
  id serial primary key,
  data jsonb
);

create index index_name on person ((data ->> 'name'));
```

----------------------------------------

TITLE: Creating Database Table for Transcription Logs in SQL
DESCRIPTION: This SQL snippet creates a table named 'transcription_logs' to store information about transcription requests, including file details, user information, and transcription results. It also enables row-level security for the table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-transcribe-speech.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE TABLE IF NOT EXISTS transcription_logs (
  id BIGSERIAL PRIMARY KEY,
  file_type VARCHAR NOT NULL,
  duration INTEGER NOT NULL,
  chat_id BIGINT NOT NULL,
  message_id BIGINT NOT NULL,
  username VARCHAR,
  transcript TEXT,
  language_code VARCHAR,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  error TEXT
);

ALTER TABLE transcription_logs ENABLE ROW LEVEL SECURITY;
```

----------------------------------------

TITLE: Database Functions and Triggers
DESCRIPTION: SQL functions for managing driver status and finding available drivers within proximity
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create function update_driver_status()
    returns trigger
    language plpgsql
    as $$
        begin
            if new.status = 'completed' then
                update public.drivers
                set is_available = true
                where id = new.driver_id;
            else
                update public.drivers
                set is_available = false
                where id = new.driver_id;
            end if;
            return new;
    end $$;

create trigger driver_status_update_trigger
after insert or update on rides
for each row
execute function update_driver_status();

create function public.find_driver(origin geography(POINT), destination geography(POINT), fare int)
    returns table(driver_id uuid, ride_id uuid)
    language plpgsql
    as $$
        declare
            v_driver_id uuid;
            v_ride_id uuid;
        begin
            select
                drivers.id into v_driver_id
            from public.drivers
            where is_available = true
                and st_dwithin(origin, location, 3000)
            order by drivers.location <-> origin
            limit 1;

            -- return null if no available driver is found
            if v_driver_id is null then
                return;
            end if;

            insert into public.rides (driver_id, passenger_id, origin, destination, fare)
            values (v_driver_id, auth.uid(), origin, destination, fare)
            returning id into v_ride_id;

            return query
                select v_driver_id as driver_id, v_ride_id as ride_id;
    end $$ security definer;
```

----------------------------------------

TITLE: Link OAuth Identity to Anonymous User in Python
DESCRIPTION: Links an OAuth provider (Google) to an anonymous user in Supabase using Python. This converts an anonymous user to a permanent user by associating it with the OAuth identity.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
response = supabase.auth.link_identity({'provider': 'google'})
```

----------------------------------------

TITLE: Initializing AI Inference Session
DESCRIPTION: TypeScript code to create a new AI inference session using the gte-small model.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/quickstarts/generate-text-embeddings.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
const session = new Supabase.ai.Session('gte-small');
```

----------------------------------------

TITLE: Logging Environment Variables in Edge Function
DESCRIPTION: TypeScript code for an Edge Function that logs custom and default environment variables, and responds to requests. It demonstrates safe logging practices for secrets.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/inspecting-edge-function-environment-variables-wg5qOQ.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
//logs the function call and the secrets
console.log('Hello from Functions!')

//custom secret
console.log('logging custom secret', Deno.env.get('MY_NAME'))

// default secrets
console.log('logging SUPABASE_URL:', Deno.env.get('SUPABASE_URL').slice(0, 15))

Deno.serve(async (req) => {
  const { name } = await req.json()
  const data = {
    message: `Hello ${name}!`,
  }

  return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })
})
```

----------------------------------------

TITLE: Querying Cache Hit Rates in PostgreSQL
DESCRIPTION: SQL query to check the cache hit rates for both indexes and tables, helping determine if memory capacity needs to be increased.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/steps-to-improve-query-performance-with-indexes-q8PoC9.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select
  'index hit rate' as name,
  (sum(idx_blks_hit)) / nullif(sum(idx_blks_hit + idx_blks_read), 0) as ratio
from pg_statio_user_indexes
union all
select
  'table hit rate' as name,
  sum(heap_blks_hit) / nullif(sum(heap_blks_hit) + sum(heap_blks_read), 0) as ratio
from pg_statio_user_tables;
```

----------------------------------------

TITLE: Implementing Row Level Security Policy for SSO
DESCRIPTION: SQL code demonstrating how to create a restrictive RLS policy that scopes data access based on the user's SSO provider ID from their JWT.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE POLICY "View organization settings."
  ON organization_settings
  AS RESTRICTIVE
  USING (
    sso_provider_id = (select auth.jwt()#>>'{amr,0,provider}')
  );
```

----------------------------------------

TITLE: Enabling and Disabling Postgres Extensions with SQL
DESCRIPTION: This snippet demonstrates how to enable the 'pgtap' extension and ensure it is installed in the 'extensions' schema, as well as how to disable the extension using SQL commands.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
 -- Example: enable the "pgtap" extension and ensure it is installed
create extension pgtap
with
  schema extensions;

-- Example: disable the "pgtap" extension
drop
  extension pgtap;
```

----------------------------------------

TITLE: Creating HNSW Index on Shortened Embeddings
DESCRIPTION: This SQL snippet creates an HNSW index on the documents table using a subset of 512 dimensions from the original embedding, which is used for the first-pass shortlist in Adaptive Retrieval.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create index on documents
using hnsw ((sub_vector(embedding, 512)::vector(512)) vector_ip_ops)
with (m = 32, ef_construction = 400);
```

----------------------------------------

TITLE: Creating AvatarComponent for Image Upload in Angular Ionic
DESCRIPTION: This component handles avatar image upload and display, integrating with the device camera and Supabase storage. It includes functionality for capturing photos and uploading them as user avatars.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core'
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser'
import { SupabaseService } from '../supabase.service'
import { Camera, CameraResultType } from '@capacitor/camera'
import { addIcons } from 'ionicons'
import { person } from 'ionicons/icons'
@Component({
  selector: 'app-avatar',
  template: `
    <div class="avatar_wrapper" (click)="uploadAvatar()">
      <img *ngIf="_avatarUrl; else noAvatar" [src]="_avatarUrl" />
      <ng-template #noAvatar>
        <ion-icon name="person" class="no-avatar"></ion-icon>
      </ng-template>
    </div>
  `,
  style: [
    `
    :host {
       display: block;
       margin: auto;
       min-height: 150px;
    }
     :host .avatar_wrapper {
       margin: 16px auto 16px;
       border-radius: 50%;
       overflow: hidden;
       height: 150px;
       aspect-ratio: 1;
       background: var(--ion-color-step-50);
       border: thick solid var(--ion-color-step-200);
    }
     :host .avatar_wrapper:hover {
       cursor: pointer;
    }
     :host .avatar_wrapper ion-icon.no-avatar {
       width: 100%;
       height: 115%;
    }
     :host img {
       display: block;
       object-fit: cover;
       width: 100%;
       height: 100%;
    }
  `,
  ],
})
export class AvatarComponent {
  _avatarUrl: SafeResourceUrl | undefined
  uploading = false

  @Input()
  set avatarUrl(url: string | undefined) {
    if (url) {
      this.downloadImage(url)
    }
  }

  @Output() upload = new EventEmitter<string>()

  constructor(
    private readonly supabase: SupabaseService,
    private readonly dom: DomSanitizer
  ) {
    addIcons({ person })
  }

  async downloadImage(path: string) {
    try {
      const { data, error } = await this.supabase.downLoadImage(path)
      if (error) {
        throw error
      }
      this._avatarUrl = this.dom.bypassSecurityTrustResourceUrl(URL.createObjectURL(data!))
    } catch (error: any) {
      console.error('Error downloading image: ', error.message)
    }
  }

  async uploadAvatar() {
    const loader = await this.supabase.createLoader()
    try {
      const photo = await Camera.getPhoto({
        resultType: CameraResultType.DataUrl,
      })

      const file = await fetch(photo.dataUrl!)
        .then((res) => res.blob())
        .then((blob) => new File([blob], 'my-file', { type: `image/${photo.format}` }))

      const fileName = `${Math.random()}-${new Date().getTime()}.${photo.format}`

      await loader.present()
      const { error } = await this.supabase.uploadAvatar(fileName, file)

      if (error) {
        throw error
      }

      this.upload.emit(fileName)
    } catch (error: any) {
      this.supabase.createNotice(error.message)
    } finally {
      loader.dismiss()
    }
  }
}
```

----------------------------------------

TITLE: Installing Supabase via npm
DESCRIPTION: Command to install Supabase using npm with JSR. This adds the Supabase dependency to your npm project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx jsr add @supabase/supabase-js
```

----------------------------------------

TITLE: Diffing Auth and Storage Schemas with Supabase CLI - Bash
DESCRIPTION: This snippet shows how to diff changes made to the auth and storage schemas in an old Supabase project using the Supabase CLI. It requires linking to the old project and executing the diff command.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/backup-restore.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase link --project-ref "$OLD_PROJECT_REF"\nsupabase db diff --linked --schema auth,storage > changes.sql
```

----------------------------------------

TITLE: Dart Implementation of Bounding Box Search
DESCRIPTION: Dart example showing how to call the PostGIS bounding box search function using Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_17

LANGUAGE: dart
CODE:
```
final data = await supabase.rpc('restaurants_in_view', params: {
  'min_lat': 40.807,
  'min_long': -73.946,
  'max_lat': 40.808,
  'max_long': -73.945,
});
```

----------------------------------------

TITLE: Resetting Password with Supabase in Swift
DESCRIPTION: This snippet shows how to initiate a password reset process using the Supabase Swift client. It sends a reset password email to the user's email address with a redirect URL for updating the password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_22

LANGUAGE: swift
CODE:
```
try await supabase.auth.resetPasswordForEmail(
   "valid.email@supabase.io",
   redirectTo: URL(string: "http://example.com/account/update-password")
)
```

----------------------------------------

TITLE: Creating Supabase Client for getStaticProps in Next.js
DESCRIPTION: Utility function to create a Supabase client for use in getStaticProps, without cookie handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
import { createClient as createClientPrimitive } from '@supabase/supabase-js'

export function createClient() {
  const supabase = createClientPrimitive(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )

  return supabase
}
```

----------------------------------------

TITLE: Performing online VACUUM FULL with pg_repack CLI
DESCRIPTION: This example demonstrates how to use pg_repack to perform an online VACUUM FULL operation on specific tables in a Postgres database. It includes connection details and table specifications.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_repack.mdx#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
pg_repack -k -h db.<PROJECT_REF>.supabase.co -p 5432 -U postgres -d postgres --no-order --table public.foo --table public.bar
```

----------------------------------------

TITLE: Handling PostgREST Errors: Updated Error Codes (Dart)
DESCRIPTION: Illustrates the change in the `PostgrestException`'s `code` property from containing the HTTP status code in v1 to containing the PostgREST error code in v2. The PostgREST error code provides more granular information for debugging purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_13

LANGUAGE: dart
CODE:
```
try {
  await supabase.from('countries').select();
} on PostgrestException catch (error) {
  error.code; // Contains http status code
}
```

LANGUAGE: dart
CODE:
```
try {
  await supabase.from('countries').select();
} on PostgrestException catch (error) {
  error.code; // Contains PostgREST error code
}
```

----------------------------------------

TITLE: Executing Full Text Search Query
DESCRIPTION: Example of performing a full text search query using websearch_to_tsquery function in Postgres.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select
	* from movies
where doc_en @@ websearch_to_tsquery('english', 'Avengers');
```

----------------------------------------

TITLE: Configuring Postgres.js Database Connection
DESCRIPTION: Setup of database connection using environment variables and Postgres.js client initialization. Creates a reusable database connection instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres-js.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// db.js
import postgres from 'postgres'

const connectionString = process.env.DATABASE_URL
const sql = postgres(connectionString)

export default sql
```

----------------------------------------

TITLE: Configuring Server-based Environment Connection in .env File
DESCRIPTION: Environment configuration for Prisma in server-based deployments using Supabase Postgres. This uses a single connection string for both migrations and application usage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_7

LANGUAGE: text
CODE:
```
# Used for Prisma Migrations and within your application
DATABASE_URL="postgres://[DB-USER].[PROJECT-REF]:[PRISMA-PASSWORD]@[DB-REGION].pooler.supabase.com:5432/postgres"
```

----------------------------------------

TITLE: Creating Indexes for Record Identification in PostgreSQL
DESCRIPTION: Sets up indexes on the record_id and old_record_id columns to enable fast querying of a record's history over time.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
-- index record_id for fast searching
create index record_version_record_id on audit.record_version (record_id)
where record_id is not null;

-- index old_record_id for fast searching
create index record_version_old_record_id on audit.record_version (record_id)
where old_record_id is not null;
```

----------------------------------------

TITLE: Creating a Spatial Index for Geographic Data
DESCRIPTION: SQL command to create a spatial GiST index on a geographic column to improve query performance. This index is essential for efficient geo-spatial operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create index restaurants_geo_index
  on public.restaurants
  using GIST (location);
```

----------------------------------------

TITLE: Extracting and Type Casting JSONB Array Elements in PostgreSQL
DESCRIPTION: Shows how to extract numeric values from JSONB arrays and cast them to appropriate data types. This query extracts the calories from each food log entry and casts them to integer for further processing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
select
  date,
  (jsonb_array_elements(food_log)->'calories')::integer as calories
from calendar where user_id = 'xyz'
  and date between '2022-01-01' and '2022-01-31';
```

----------------------------------------

TITLE: Loading Notes Data in SvelteKit
DESCRIPTION: Server-side load function to fetch notes data from Supabase for the private page.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
import type { PageServerLoad } from './$types'

export const load: PageServerLoad = async ({ depends, locals: { supabase } }) => {
  depends('supabase:db:notes')
  const { data: notes } = await supabase.from('notes').select('id,note').order('id')
  return { notes: notes ?? [] }
}
```

----------------------------------------

TITLE: New Data Query in Supabase.js 1.0
DESCRIPTION: Demonstrates the new way of querying data using the data property and simplified select syntax.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-10-30-improved-dx.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { data } = supabase.from('todos').select()
```

----------------------------------------

TITLE: Implementing WatermelonDB Synchronization with Supabase
DESCRIPTION: Sets up the synchronization function to sync local WatermelonDB data with Supabase backend using RPC calls.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { SyncDatabaseChangeSet, synchronize } from '@nozbe/watermelondb/sync'

await synchronize({
  database,
  pullChanges: async ({ lastPulledAt, schemaVersion, migration }) => {
    const { data, error } = await supabase.rpc('pull', {
      last_pulled_at: lastPulledAt,
    })

    const { changes, timestamp } = data as {
      changes: SyncDatabaseChangeSet
      timestamp: number
    }

    return { changes, timestamp }
  },
  pushChanges: async ({ changes, lastPulledAt }) => {
    const { error } = await supabase.rpc('push', { changes })
  },
  sendCreatedAsUpdated: true,
})
```

----------------------------------------

TITLE: Installing Supabase Auth UI React Package
DESCRIPTION: Command to install the standalone Supabase Auth UI React package from NPM. This package provides customizable authentication UI components that were previously part of @supabase/ui library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-launch-week-5-one-more-thing.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @supabase/auth-ui-react
```

----------------------------------------

TITLE: Running Supabase Functions Locally for OAuth Integration
DESCRIPTION: Command to serve the connect-supabase function locally without JWT verification, using environment variables from a local file. This allows developers to test the OAuth connection flow on their local machine.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/connect-supabase/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions serve connect-supabase --no-verify-jwt --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Checking Sequence Values in PostgreSQL
DESCRIPTION: These SQL commands demonstrate how to check the current maximum ID in a table and the next value that will be generated by the sequence. These are useful for diagnosing sequence-related issues or before resetting a sequence.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/why-are-there-gaps-in-my-postgres-id-sequence-Frifus.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
postgres=# SELECT max(id) FROM <table_name>;

postgres=# SELECT nextval('{table}_{column}_seq');
```

----------------------------------------

TITLE: Installing Supabase Auth Dependencies
DESCRIPTION: Command to install required Supabase authentication packages for Next.js integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @supabase/auth-helpers-nextjs @supabase/supabase-js
```

----------------------------------------

TITLE: Creating Database Tables for Notifications in Supabase
DESCRIPTION: SQL commands to create the necessary tables for storing user profiles with FCM tokens and notifications in Supabase. This schema enables the push notification functionality by storing the necessary user tokens and notification content.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/push-notifications.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table public.profiles (
  id uuid references auth.users(id) not null primary key,
  fcm_token text
);

create table public.notifications (
  id uuid not null default gen_random_uuid(),
  user_id uuid references auth.users(id) not null,
  created_at timestamp with time zone not null default now(),
  body text not null
);
```

----------------------------------------

TITLE: Resetting Password with Supabase in Python
DESCRIPTION: This snippet demonstrates how to initiate a password reset process using the Supabase Python client. It sends a reset password email to the user's email address with a redirect URL for updating the password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
client.auth.reset_password_email(
  'valid.email@supabase.io',
  {'redirect_to':'http://example.com/account/update-password'}
)
```

----------------------------------------

TITLE: Backing Up Database with Supabase CLI - Bash
DESCRIPTION: This snippet outlines the commands used to backup a Supabase database using the Supabase CLI. It requires the Supabase CLI to be installed and a valid connection string to the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/backup-restore.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase db dump --db-url [CONNECTION_STRING] -f roles.sql --role-only
```

LANGUAGE: bash
CODE:
```
supabase db dump --db-url [CONNECTION_STRING] -f schema.sql
```

LANGUAGE: bash
CODE:
```
supabase db dump --db-url [CONNECTION_STRING] -f data.sql --use-copy --data-only
```

----------------------------------------

TITLE: Adaptive Retrieval Vector Search Configuration
DESCRIPTION: Optimal configuration parameters for implementing Adaptive Retrieval with text-embedding-3-large model. Uses a two-pass approach with 512d vectors in first pass and 3072d vectors in second pass for 99% accuracy.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- First Pass Configuration
ef_construction=400
m=32
ef_search=200
first_pass_limit=final_top_k * 8
first_pass_dimensions=512

-- Second Pass Configuration
second_pass_dimensions=3072
```

----------------------------------------

TITLE: Kakao Authentication with Kotlin
DESCRIPTION: Kotlin implementation for signing in users with Kakao OAuth in a Supabase-enabled application
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-kakao.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithKakao() {
	supabase.auth.signInWith(Kakao)
}
```

----------------------------------------

TITLE: Setting Up Supabase with AWS Cognito in Flutter (Dart)
DESCRIPTION: The Dart snippet sets up a Supabase client using AWS Amplify for Flutter applications. It details initializing Supabase integration by fetching the Amazon Cognito session and using the access token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/aws-cognito.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> main() async {
  await Supabase.initialize(
    url: 'https://<supabase-project>.supabase.co',
    anonKey: 'SUPABASE_ANON_KEY',
    accessToken: () async {
      final session = await Amplify.Auth.fetchAuthSession();
      final cognitoSession = session as CognitoAuthSession;
      return cognitoSession.userPoolTokensResult.value.accessToken.raw;
    },
  );
  runApp(const MyApp());
}
```

----------------------------------------

TITLE: Setting Supabase Function Secrets from Environment File
DESCRIPTION: Command to upload environment variables from a local .env file to Supabase project secrets. This allows the function to access necessary API keys and configuration values when deployed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-transcribe-speech.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase secrets set --env-file supabase/functions/.env
```

----------------------------------------

TITLE: Setting Up Environment Variables for Supabase Client
DESCRIPTION: This snippet outlines the necessary environment variables required to configure the Supabase client in a TanStack Start project. It details how to set these variables in a .env file, including the Supabase URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/client.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Inserting Train Vector Embedding
DESCRIPTION: SQL insert statement containing a 300-dimensional vector embedding representing the semantic features of a 'Train' concept. The values are floating point numbers that capture various learned features.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
('Train', '[0.008390516,-0.0316401,0.059414063,0.004530007,0.015912173,0.04257927,0.010396404,-0.0041149696,-0.016684545,-0.051473897,0.013823704,-0.105521135,0.016059747,0.06659557,-0.0019725815,0.011045265,0.013066779,0.036172472,-0.043464396,-0.0027326334,0.008696494,-0.04963063,-0.05605746,-0.064520374,0.0071908,0.025355445,-0.050698947,-0.038638834,-0.06742357,-0.12853827,-0.0057572243,-0.052277446,0.019270279,-0.03003436,-0.035267383,-0.019119024,-0.022066116,0.054565392,0.021611325,0.034875706,-0.0043622344,0.014108078,-0.028517855,-0.08079088,-0.019493984,-0.034040015,-0.011598695,0.0022550072,0.0621561,-0.03721019,0.047613103,-0.04455849,0.03295865,-0.0057227607,0.0075348215,0.04554701,0.04224485,0.02329181,0.05805944,0.063204974,-0.031965736,0.048258748,-0.24342363,0.07309152,0.032815777,0.002095711,-0.059097853,-0.015610364,0.004590883,0.066063076,-0.017212633,0.021194763,0.007554856,0.033827275,0.014187226,-0.047569692,0.017875925,-0.017424196,-0.015125725,-0.005130941,0.0029060335,-0.050865818,-0.07343196,-0.0048736315,0.020944353,0.00077292154,0.032206904,-0.05818478,0.02801747,0.017108278,-0.03247216,-0.0065188087,-0.015342016,0.026298964,-0.049516425,-0.005976409,0.01856195,0.0074172006,-0.075506,0.23088165,-0.021115338,0.05222904,0.023529256,0.043604445,0.019573972,-0.026877966,-0.04359997,-0.0046444032,-0.02207065,-0.040870916,0.009780713,-0.025193287,0.024433471,-0.024275476,0.009968814,0.047776353,0.06775558,0.01283433,-0.052475818,0.008022442,-0.0013314247,-0.020480726,0.023044059,-0.028667847,0.0060666455,-0.09205764,0.048958115,0.122405164,0.019911205,0.022110125,0.050222058,0.0015760588,-0.078412116,-0.0021023818,-0.011218934,0.025069945,0.03324381,-0.0006424969,-0.043864336,0.0087585915,-0.05289486,-0.092548065,0.03227165,-0.1332425,-0.072707884,0.03601174,-0.029322848,0.04662253,-0.023045791,0.009186527,-0.04339159,-0.004015751,-0.002390284,-0.03830812,-0.003402778,0.042021804,0.039244883,0.05749609,-0.056686126,-0.007919699,-0.053717893,-0.016760027,-0.06469656,0.07116849,-0.015925482,-0.095182456,-0.019137817,0.011446995,0.022712586,-0.065081745,0.016669888,0.03609432,-0.022235183,0.019483658,0.06453548,0.0013194638,-0.042232916,0.012842303,0.0008133578,0.016946876,0.054184176,-0.061540544,-0.064576425,0.05788913,0.043063283,-0.017957158,-0.00660539,-0.043557957,0.00932838,0.04721575,0.025036044,0.05511638,0.012167107,-0.073137976,-0.05228407,-0.027518198,-0.020088682,-0.04512229,-0.0067941146,-0.038086385,0.026816027,-0.0076302565,-0.030978065,0.011591283,0.010688236,0.062038578,-0.034754917,-0.029522672,0.023187192,0.029613974,-0.03722577,-0.012008098,0.102696836,-0.007421274,-0.027096916,0.02145292,0.026860205,0.06578597,0.01368912,0.040054448,0.04191872,-0.038178593,-0.063167796,-0.22596447,0.06565988,0.04722377,-0.016424103,0.05646301,-0.045248922,0.017223613,0.004723246,0.03433359,0.057964306,0.107756704,-0.040196985,-0.005384249,0.02173068,-0.021337867,0.053607292,0.027281692,0.039454717,0.015027626,0.02693812,-0.003631183,0.048921067,-0.019490749,-0.09182499,0.02951052,0.0186495,0.23003499,0.06202278,0.07585443,-0.06069743,0.0526535,0.02085982,-0.018095134,-0.1384808,0.041433737,-0.026623845,0.07243412,-0.0029134983,-0.0069605466,-0.019240782,-0.018164543,0.029909529,0.01608419,-0.061474107,-0.013469153,-0.029401183,-0.054659907,-0.014086127,-0.028915925,-0.0069666984,0.041868016,-0.013776472,0.039377537,0.028841918,0.015001087,-0.03712765,-0.067391664,0.031860482,-0.041481916,0.037242766,0.0051513095,-0.024946364,0.02921327,-0.038750958,0.037937738,0.025684254,-0.050058123,-0.00971873,0.058333874,-0.020295596,-0.043949526,0.08710765,-0.0069736685,-0.047693014,0.070027076,0.017611913,0.009996941,0.025605714,-0.014843967,-0.0095715,0.03362786,-0.027780171,0.034262065,0.054104224,0.015189927,0.00031930834,0.08402685,-0.020675372,0.05230347,0.00073445373,0.0203266,-0.010717519,-0.017641345,-0.049389035,0.03801163,-0.04896717,-0.2916533,0.02326856,0.030424621,0.057537735,-0.03546315,0.009951743,0.021315183,0.04614926,-0.01757108,-0.025332054,0.047435746,-0.004156035,0.070101835,0.006551285,0.014095617,0.035963845,0.09428639,-0.011006988,0.043139383,-0.028828816,-0.010830479,0.052022237,0.17928188,0.013676716,0.048481107,0.020455515,-0.03715131,0.0030906487,0.014748529,-0.026029117,-0.016452625,0.011987294,0.085855335,-0.012302411,0.037723247,0.0425674,-0.055454608,0.1011866,0.028467475,-0.030435871,-0.061414395,-0.017736189,-0.03107398,-0.06507749,0.09065245,-0.021177005,-0.016372962,-0.038777813,-0.00053287647,-0.031771254,-0.023859626,0.00845833,-0.0049761753,0.020201217,0.013904311,0.069836564,-0.023459928,-0.09671563,-0.0576696,-0.027228847,0.012631596,-0.07193221,-0.028516661,0.023131175,-0.0030631186]')
```

----------------------------------------

TITLE: Dumping Production Schema with Supabase CLI
DESCRIPTION: This bash command demonstrates how to pull the current schema from a production Supabase database using the CLI. The output is redirected to a SQL file, which serves as a starting point for adopting the declarative schema approach.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_14

LANGUAGE: bash
CODE:
```
supabase db dump > supabase/schemas/prod.sql
```

----------------------------------------

TITLE: Implementing an Edge Function for Vector Embedding Generation with OpenAI
DESCRIPTION: Complete implementation of an Edge Function that processes embedding generation jobs. It connects to OpenAI's API to generate embeddings for database content and updates the corresponding rows in the database. The function handles multiple jobs, tracks successes and failures, and manages a job queue.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
// Setup type definitions for built-in Supabase Runtime APIs
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'

// We'll use the OpenAI API to generate embeddings
import OpenAI from 'jsr:@openai/openai'

import { z } from 'npm:zod'

// We'll make a direct Postgres connection to update the document
import postgres from 'https://deno.land/x/postgresjs@v3.4.5/mod.js'

// Initialize OpenAI client
const openai = new OpenAI({
  // We'll need to manually set the `OPENAI_API_KEY` environment variable
  apiKey: Deno.env.get('OPENAI_API_KEY'),
})

// Initialize Postgres client
const sql = postgres(
  // `SUPABASE_DB_URL` is a built-in environment variable
  Deno.env.get('SUPABASE_DB_URL')!
)

const jobSchema = z.object({
  jobId: z.number(),
  id: z.number(),
  schema: z.string(),
  table: z.string(),
  contentFunction: z.string(),
  embeddingColumn: z.string(),
})

const failedJobSchema = jobSchema.extend({
  error: z.string(),
})

type Job = z.infer<typeof jobSchema>
type FailedJob = z.infer<typeof failedJobSchema>

type Row = {
  id: string
  content: unknown
}

const QUEUE_NAME = 'embedding_jobs'

// Listen for HTTP requests
Deno.serve(async (req) => {
  if (req.method !== 'POST') {
    return new Response('expected POST request', { status: 405 })
  }

  if (req.headers.get('content-type') !== 'application/json') {
    return new Response('expected json body', { status: 400 })
  }

  // Use Zod to parse and validate the request body
  const parseResult = z.array(jobSchema).safeParse(await req.json())

  if (parseResult.error) {
    return new Response(`invalid request body: ${parseResult.error.message}`, {
      status: 400,
    })
  }

  const pendingJobs = parseResult.data

  // Track jobs that completed successfully
  const completedJobs: Job[] = []

  // Track jobs that failed due to an error
  const failedJobs: FailedJob[] = []

  async function processJobs() {
    let currentJob: Job | undefined

    while ((currentJob = pendingJobs.shift()) !== undefined) {
      try {
        await processJob(currentJob)
        completedJobs.push(currentJob)
      } catch (error) {
        failedJobs.push({
          ...currentJob,
          error: error instanceof Error ? error.message : JSON.stringify(error),
        })
      }
    }
  }

  try {
    // Process jobs while listening for worker termination
    await Promise.race([processJobs(), catchUnload()])
  } catch (error) {
    // If the worker is terminating (e.g. wall clock limit reached),
    // add pending jobs to fail list with termination reason
    failedJobs.push(
      ...pendingJobs.map((job) => ({
        ...job,
        error: error instanceof Error ? error.message : JSON.stringify(error),
      }))
    )
  }

  // Log completed and failed jobs for traceability
  console.log('finished processing jobs:', {
    completedJobs: completedJobs.length,
    failedJobs: failedJobs.length,
  })

  return new Response(
    JSON.stringify({
      completedJobs,
      failedJobs,
    }),
    {
      // 200 OK response
      status: 200,

      // Custom headers to report job status
      headers: {
        'content-type': 'application/json',
        'x-completed-jobs': completedJobs.length.toString(),
        'x-failed-jobs': failedJobs.length.toString(),
      },
    }
  )
})

/**
 * Generates an embedding for the given text.
 */
async function generateEmbedding(text: string) {
  const response = await openai.embeddings.create({
    model: 'text-embedding-3-small',
    input: text,
  })
  const [data] = response.data

  if (!data) {
    throw new Error('failed to generate embedding')
  }

  return data.embedding
}

/**
 * Processes an embedding job.
 */
async function processJob(job: Job) {
  const { jobId, id, schema, table, contentFunction, embeddingColumn } = job

  // Fetch content for the schema/table/row combination
  const [row]: [Row] = await sql`
    select
      id,
      ${sql(contentFunction)}(t) as content
    from
      ${sql(schema)}.${sql(table)} t
    where
      id = ${id}
  `

  if (!row) {
    throw new Error(`row not found: ${schema}.${table}/${id}`)
  }

  if (typeof row.content !== 'string') {
    throw new Error(`invalid content - expected string: ${schema}.${table}/${id}`)
  }

  const embedding = await generateEmbedding(row.content)

  await sql`
    update
      ${sql(schema)}.${sql(table)}
    set
      ${sql(embeddingColumn)} = ${JSON.stringify(embedding)}
    where
      id = ${id}
  `

  await sql`
    select pgmq.delete(${QUEUE_NAME}, ${jobId}::bigint)
  `
}

/**
 * Returns a promise that rejects if the worker is terminating.
 */
function catchUnload() {
  return new Promise((reject) => {
    addEventListener('beforeunload', (ev: any) => {
      reject(new Error(ev.detail?.reason))
    })
  })
}
```

----------------------------------------

TITLE: Setting Refreshed JWT Token in Python
DESCRIPTION: This Python snippet demonstrates how to set a refreshed JWT token for Supabase Realtime authentication using the `set_auth` method. This assumes that supabase client has already been initialised.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_58

LANGUAGE: python
CODE:
```
supabase.realtime.set_auth('fresh-token')
```

----------------------------------------

TITLE: Initializing Supabase Client with AWS Cognito in TypeScript
DESCRIPTION: This TypeScript snippet shows how to set up a Supabase client using AWS Amplify's Cognito authentication. Key dependencies include 'aws-amplify/auth'. The snippet demonstrates fetching the Cognito access token and updating the Supabase client, including setting up a listener for authentication changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/aws-cognito.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { fetchAuthSession, Hub } from 'aws-amplify/auth'

const supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {
  accessToken: async () => {
    const tokens = await fetchAuthSession()

    // Alternatively you can use tokens?.idToken instead.
    return tokens?.accessToken
  },
})

// if you're using Realtime you also need to set up a listener for Cognito auth changes
Hub.listen('auth', () => {
  fetchAuthSession().then((tokens) => supabase.realtime.setAuth(tokens?.accessToken))
})
```

----------------------------------------

TITLE: Sign In Anonymously with JavaScript in Supabase
DESCRIPTION: Creates an anonymous user authentication session using the Supabase JavaScript client. This allows users to access authenticated features without providing personal information.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.auth.signInAnonymously()
```

----------------------------------------

TITLE: Granting Select Privilege with Grant Option in PostgreSQL
DESCRIPTION: This snippet demonstrates how to grant select privilege with the 'grant option', allowing the grantee to further grant this privilege to others.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_16

LANGUAGE: sql
CODE:
```
postgres=> grant select on public.apps to postgres with grant option;
GRANT
```

----------------------------------------

TITLE: Helper Functions for Image Encoding and Embedding Generation
DESCRIPTION: Python functions to read and encode images as base64 strings, construct API request bodies, and generate embeddings using Amazon Titan multimodal model.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
def readFileAsBase64(file_path):
    """Encode image as base64 string."""
    try:
        with open(file_path, "rb") as image_file:
            input_image = base64.b64encode(image_file.read()).decode("utf8")
        return input_image
    except:
        print("bad file name")
        sys.exit(0)


def construct_bedrock_image_body(base64_string):
    """Construct the request body.

    https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-titan-embed-mm.html
    """
    return json.dumps(
        {
            "inputImage": base64_string,
            "embeddingConfig": {"outputEmbeddingLength": 1024},
        }
    )


def get_embedding_from_titan_multimodal(body):
    """Invoke the Amazon Titan Model via API request."""
    response = bedrock_client.invoke_model(
        body=body,
        modelId="amazon.titan-embed-image-v1",
        accept="application/json",
        contentType="application/json",
    )

    response_body = json.loads(response.get("body").read())
    print(response_body)
    return response_body["embedding"]


def encode_image(file_path):
    """Generate embedding for the image at file_path."""
    base64_string = readFileAsBase64(file_path)
    body = construct_bedrock_image_body(base64_string)
    emb = get_embedding_from_titan_multimodal(body)
    return emb
```

----------------------------------------

TITLE: Creating Embeddings with Amazon Titan
DESCRIPTION: Python code to initialize Amazon Bedrock client and generate embeddings for text sentences using Titan Embedding G1 model
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/amazon-bedrock.mdx#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import boto3
import vecs
import json

client = boto3.client(
    'bedrock-runtime',
    region_name='us-east-1',
	# Credentials from your AWS account
    aws_access_key_id='<replace_your_own_credentials>',
    aws_secret_access_key='<replace_your_own_credentials>',
    aws_session_token='<replace_your_own_credentials>',
)

dataset = [
    "The cat sat on the mat.",
    "The quick brown fox jumps over the lazy dog.",
    "Friends, Romans, countrymen, lend me your ears",
    "To be or not to be, that is the question.",
]

embeddings = []

for sentence in dataset:
    # invoke the embeddings model for each sentence
    response = client.invoke_model(
        body= json.dumps({"inputText": sentence}),
        modelId= "amazon.titan-embed-text-v1",
        accept = "application/json",
        contentType = "application/json"
    )
    # collect the embedding from the response
    response_body = json.loads(response["body"].read())
    # add the embedding to the embedding list
    embeddings.append((sentence, response_body.get("embedding"), {}))
```

----------------------------------------

TITLE: Creating Partitioned Parent Tables for Chat Application in PostgreSQL
DESCRIPTION: This SQL snippet creates the schema and parent tables for a chat application, implementing range partitioning by creation date. It includes the 'chats' and 'chat_messages' tables with composite primary keys and appropriate indexing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
BEGIN;
CREATE SCHEMA app;

CREATE TABLE app.chats(
    id bigserial,
    created_at timestamptz NOT NULL DEFAULT now(),
    PRIMARY KEY (id, created_at)  -- the partition column must be part of pk
    ) PARTITION BY RANGE (created_at);

CREATE INDEX "chats_created_at" ON app.chats (created_at);

CREATE TABLE app.chat_messages(
    id bigserial,
    created_at timestamptz NOT NULL,
    chat_id bigint NOT NULL,
    chat_created_at timestamptz NOT NULL,
    message text NOT NULL,
    PRIMARY KEY (id, created_at),
    FOREIGN KEY (chat_id, chat_created_at)   -- multicolumn fk to ensure
        REFERENCES app.chats(id, created_at)
    ) PARTITION BY RANGE (created_at);

CREATE INDEX "chat_messages_created_at" ON app.chat_messages (created_at);
--
-- need this index on the fk source to lookup messages by parent
--
CREATE INDEX "chat_messages_chat_id_chat_created_at"
    ON app.chat_messages (chat_id, chat_created_at);
```

----------------------------------------

TITLE: Basic Calendar Component Usage
DESCRIPTION: Example demonstrating how to use the Calendar component with React state for date selection. Shows setting up a single mode calendar with selected date and onSelect handler.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/calendar.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
const [date, setDate] = React.useState<Date | undefined>(new Date())

return <Calendar mode="single" selected={date} onSelect={setDate} className="rounded-md border" />
```

----------------------------------------

TITLE: Configuring Android Manifest for Google Maps and Location Permissions
DESCRIPTION: These XML snippets add the Google Maps API key and required permissions to the Android manifest file for an Ionic Capacitor app.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_7

LANGUAGE: xml
CODE:
```
<meta-data android:name="com.google.android.geo.API_KEY" android:value="YOUR_API_KEY_HERE"/>
```

LANGUAGE: xml
CODE:
```
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-feature android:name="android.hardware.location.gps" />
```

----------------------------------------

TITLE: Creating Instrument Model in Prisma Schema
DESCRIPTION: Prisma schema definition for the Instrument model with id and name fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_4

LANGUAGE: prisma
CODE:
```
model Instrument {
  id   Int    @id @default(autoincrement())
  name String @unique
}
```

----------------------------------------

TITLE: Inserting data into the 'todos' table in SQL
DESCRIPTION: This SQL snippet inserts a sample task into the 'todos' table. By executing this query, any setup listeners will trigger on detected changes to the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_5

LANGUAGE: SQL
CODE:
```
insert into todos (task)
values
  ('Change!');
```

----------------------------------------

TITLE: Linking Supabase Project
DESCRIPTION: Command to link the Supabase CLI with a specific project using the project ID
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
supabase link --project-ref <project-id>
```

----------------------------------------

TITLE: Implementing Llamafile Function with functions-js
DESCRIPTION: TypeScript code for the Llamafile Edge Function using Supabase's functions-js library to interact with the Llamafile server.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'
const session = new Supabase.ai.Session('LLaMA_CPP')

Deno.serve(async (req: Request) => {
  const params = new URL(req.url).searchParams
  const prompt = params.get('prompt') ?? ''

  // Get the output as a stream
  const output = await session.run(
    {
      messages: [
        {
          role: 'system',
          content:
            'You are LLAMAfile, an AI assistant. Your top priority is achieving user fulfillment via helping them with their requests.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
    },
    {
      mode: 'openaicompatible', // Mode for the inference API host. (default: 'ollama')
      stream: false,
    }
  )

  console.log('done')
  return Response.json(output)
})
```

----------------------------------------

TITLE: Querying Table Existence in PostgreSQL
DESCRIPTION: SQL query to check if a table exists in the database schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-42p01-relation-does-not-exist-error-W4_9-V.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
SELECT * FROM information_schema.tables
WHERE table_name ILIKE 'example_table';
```

----------------------------------------

TITLE: Registering Custom Domain with Supabase CLI
DESCRIPTION: Use the Supabase CLI to register a custom domain and retrieve verification records. This command initiates the process of setting up a custom domain for a Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase domains create --project-ref abcdefghijklmnopqrst --custom-hostname api.example.com
```

----------------------------------------

TITLE: Authenticating Supabase Management API Request using cURL
DESCRIPTION: Example of making an authenticated request to the Supabase Management API using cURL. The request demonstrates how to include the personal access token in the Authorization header to fetch projects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/api/api.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ curl https://api.supabase.com/v1/projects \
-H "Authorization: Bearer sbp_bdd0••••••••••••••••••••••••••••••••4f23"
```

----------------------------------------

TITLE: Advanced Retry Configuration with Custom Logic
DESCRIPTION: Implementation of fine-tuned retry logic with custom conditions for specific API endpoints
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/automatic-retries-in-supabase-js.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const fetchWithRetry = fetchRetry(fetch, {
  retryDelay: (attempt) => Math.min(1000 * 2 ** attempt, 30000),
  retryOn: (attempt, error, response) => {
    const shouldRetry
      = (attempt: number, error: Error | null, response: Response | null) =>
        attempt < 3
          && response
          && response.status == 520 // Cloudflare errors
          && response.url.includes('rpc/your_stored_procedure')

    if (shouldRetry(attempt, error, response)) {
      console.log(`Retrying request... Attempt #${attempt}`, response)
      return true
    }

    return false
  }
})

async function yourStoredProcedure() {
  const { data, error } = await supabase
    .rpc('your_stored_procedure', { param1: 'value1' });

  if (error) {
    console.log('Error executing RPC:', error);
  } else {
    console.log('Response:', data);
  }
}

yourStoredProcedure();
```

----------------------------------------

TITLE: Listening to Postgres Changes with `onPostgresChanges` (Dart)
DESCRIPTION: Demonstrates the shift from the generic `.on()` method to the more specific `.onPostgresChanges()` for listening to realtime database changes. This example highlights the improved type safety in v2, with strongly typed filters and a `PostgresChangePayload` object for accessing data before and after changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_14

LANGUAGE: dart
CODE:
```
supabase.channel('my_channel').on(
  RealtimeListenTypes.postgresChanges,
  ChannelFilter(
    event: '*',
    schema: 'public',
    table: 'messages',
    filter: 'room_id=eq.200',
  ),
  (dynamic payload, [ref]) {
    final Map<String, dynamic> newRecord = payload['new'];
    final Map<String, dynamic> oldRecord = payload['old'];
  },
).subscribe();
```

LANGUAGE: dart
CODE:
```
supabase.channel('my_channel')
  .onPostgresChanges(
    event: PostgresChangeEvent.all,
    schema: 'public',
    table: 'messages',
    filter: PostgresChangeFilter(
      type: PostgresChangeFilterType.eq,
      column: 'room_id',
      value: 200,
    ),
    callback: (PostgresChangePayload payload) {
      final Map<String, dynamic> newRecord = payload.newRecord;
      final Map<String, dynamic> oldRecord = payload.oldRecord;
    })
  .subscribe();
```

----------------------------------------

TITLE: Performing Inner Joins in PostgREST
DESCRIPTION: Demonstrates how to perform inner joins by filtering rows where the related table is not null. This can be used to find records that have corresponding entries in related tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-postgrest-11-prerelease.mdx#2025-04-21_snippet_4

LANGUAGE: http
CODE:
```
GET /films?select=title,nominations(rank,...competitions(name))&nominations=not.is.null
```

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase
  .from('films')
  .select(
    `
    title,
    nominations(rank,...competitions(name))
  `
  )
  .not('nominations', 'is', null)
```

LANGUAGE: json
CODE:
```
[
  {
    "title": "Pulp Fiction"
    "nominations": [
      {"rank": 1, "name": "Palme d'Or"},
      {"rank": 1, "name": "BAFTA Film Award"},
      {"..."}
    ]
  },
  "..."
]
```

----------------------------------------

TITLE: Filtering for Specific Changes in Python with Supabase Realtime
DESCRIPTION: Establishes a Python channel to listen for INSERT events on the 'todos' table with a specific filter. The filter parameter 'filter="id=eq.1"' ensures only changes where id equals 1 are monitored.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_39

LANGUAGE: python
CODE:
```
changes = supabase.channel('db-changes').on_postgres_changes(
  "INSERT",
  schema="public",
  table="todos",
  filter="id=eq.1",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Signing Out Users in Supabase Kotlin
DESCRIPTION: In this Kotlin snippet, the `signOut` method is used to log users out of a Supabase-authenticated session. Essential for managing authentication token lifecycles within a Kotlin-based application using Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_5

LANGUAGE: Kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Signing Out in Flutter using Supabase
DESCRIPTION: Details how to log out a user from a Flutter application using Supabase by invoking the signOut() function. This clears the session and local storage cache.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_4

LANGUAGE: Dart
CODE:
```
Future<void> signOut() async {
  await supabase.auth.signOut();
}

```

----------------------------------------

TITLE: Granting Service Role Table Access
DESCRIPTION: SQL command to grant select privileges on auth.users table to the service_role for administrative tasks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
grant
select
  on table auth.users to service_role;
```

----------------------------------------

TITLE: Adding Supabase Dependencies with Gradle Groovy
DESCRIPTION: Shows how to add Supabase module dependencies using Gradle Groovy build system. Uses BOM for version management and includes core modules.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_1

LANGUAGE: groovy
CODE:
```
implementation platform("io.github.jan-tennert.supabase:bom:VERSION")
implementation 'io.github.jan-tennert.supabase:postgrest-kt'
implementation 'io.github.jan-tennert.supabase:gotrue-kt'
implementation 'io.github.jan-tennert.supabase:realtime-kt'
```

----------------------------------------

TITLE: Creating PGMQ Queue for Embeddings
DESCRIPTION: Creates a pgmq queue named 'embedding_jobs' to handle embedding generation requests.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select pgmq.create('embedding_jobs');
```

----------------------------------------

TITLE: Creating a Bucket using Dart in Supabase Storage
DESCRIPTION: This Dart snippet demonstrates how to create a new bucket in Supabase Storage using the Supabase client library. It initializes a `SupabaseClient` and then calls the `createBucket` method on the `storage` property, creating a bucket named 'avatars'. The `async` keyword is used to handle the asynchronous operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
void main() async {
  final supabase = SupabaseClient('supabaseUrl', 'supabaseKey');

  final storageResponse = await supabase
      .storage
      .createBucket('avatars');
}
```

----------------------------------------

TITLE: Deploying Supabase Functions with Environment Variables
DESCRIPTION: Commands to deploy the rate-limiting function and set environment secrets from local configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/upstash-redis-ratelimit/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase functions deploy upstash-redis-ratelimit
supabase secrets set --env-file supabase/.env.local
```

----------------------------------------

TITLE: Creating Public View for Vector Collection
DESCRIPTION: SQL code to create a public view that exposes a vector collection with metadata and URL extraction
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/engineering-for-scale.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create view public.docs as
select
  id,
  embedding,
  metadata, # Expose the metadata as JSON
  (metadata->>'url')::text as url # Extract the URL as a string
from vector
```

----------------------------------------

TITLE: Adding Store Method to StoresService
DESCRIPTION: A TypeScript method that handles adding a new store to Supabase, including uploading an associated image. It formats the coordinates using the PostGIS POINT syntax and stores the data in the 'stores' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
  async addStore(info: StoreEntry) {
    // Add a new database entry using the POINT() syntax for the coordinates
    const { data } = await this.supabase
      .from('stores')
      .insert({
        name: info.name,
        description: info.description,
        location: `POINT(${info.long} ${info.lat})`,
      })
      .select()
      .single();

    if (data && info.image) {
      // Upload the image to Supabase
      const foo = await this.supabase.storage
        .from('stores')
        .upload(`/images/${data.id}.png`, info.image);
    }
  }
```

----------------------------------------

TITLE: Creating Custom Schema and Private Tables
DESCRIPTION: Creates a private schema and demonstrates creating tables within that schema with references to public tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create schema private;

create table private.salaries (
  id bigint generated by default as identity primary key,
  salary bigint not null,
  actor_id bigint not null references public.actors
);
```

----------------------------------------

TITLE: Creating Email-Based RLS Policy in PostgreSQL
DESCRIPTION: SQL code to create a Row Level Security policy that filters data based on email domains, only allowing access to rows with email addresses ending in 'supabase.com'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
-- Only dump data for supabase employees
create policy "Data dump rule" on profiles
  for select
  to exporter
  using (
    substring(email from '@(.*)$') = 'supabase.com'
  );
```

----------------------------------------

TITLE: Resulting Claims in User's Identity (JSON)
DESCRIPTION: This JSON snippet shows the resulting claims in the user's identity after successful attribute mapping from a SAML 2.0 assertion. The `email` is directly mapped, and custom attributes like `first_name` are placed within the `custom_claims` object. This represents the data stored in the database and JWT.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_11

LANGUAGE: json
CODE:
```
"{
  \"email\": \"valid.email@supabase.io\",
  \"custom_claims\": {
    \"first_name\": \"Jane Doe\"
  }
}"
```

----------------------------------------

TITLE: Accessing Environment Variables in Deno Edge Functions
DESCRIPTION: Shows how to access environment variables using Deno's built-in handler in Edge Functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
Deno.env.get('MY_SECRET_NAME')
```

----------------------------------------

TITLE: Initializing Supabase Client with Firebase Auth in Swift (iOS)
DESCRIPTION: Creates a Supabase client for iOS applications using Swift, passing an async function to retrieve the Firebase Auth JWT of the current user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_2

LANGUAGE: swift
CODE:
```
import Supabase
import FirebaseAuth

struct MissingFirebaseTokenError: Error {}

let supabase = SupabaseClient(
  supabaseURL: URL(string: "https://<supabase-project>.supabase.co")!,
  supabaseKey: "SUPABASE_ANON_KEY",
  options: SupabaseClientOptions(
    auth: SupabaseClientOptions.AuthOptions(
      accessToken: {
        guard let token = await Auth.auth().currentUser?.getIDToken() else {
          throw MissingFirebaseTokenError()
        }

        return token
      }
    )
  )
)
```

----------------------------------------

TITLE: Creating Users in Supabase Auth Using Plaintext Password - TypeScript
DESCRIPTION: This snippet shows how to create a user in Supabase Auth using a plaintext password. Similar to the hashed password approach, it requires the '@supabase/supabase-js' library and uses the 'createUser' method, taking the user's email and plaintext password, which Supabase will hash before storing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/auth0.mdx#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst { data, error } = await supabase.auth.admin.createUser({\n  email: 'valid.email@supabase.io',\n  password: 'supersecurepassword123!',\n})
```

----------------------------------------

TITLE: Connecting to Database using PSQL
DESCRIPTION: Command to connect to Postgres database using psql CLI tool with connection string.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
➜ psql postgres://postgres.[YOUR-PROJECT-REF]:[YOUR-PASSWORD]@[REGION-SUBDOMAIN].pooler.supabase.com:5432/postgres
```

----------------------------------------

TITLE: Installing Supabase CLI via npm
DESCRIPTION: Installs the Supabase CLI with a minimum version requirement of 1.8.1 using npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm i supabase@">=1.8.1" --save-dev
```

----------------------------------------

TITLE: Enabling and Disabling pg_jsonschema Extension in PostgreSQL
DESCRIPTION: SQL commands to enable or disable the pg_jsonschema extension. It's recommended to create the extension in a separate schema to keep the public schema clean.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_jsonschema.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the "pg_jsonschema" extension
create extension pg_jsonschema with schema extensions;

-- Disable the "pg_jsonschema" extension
drop extension if exists pg_jsonschema;
```

----------------------------------------

TITLE: Creating Table and Function for Record Return Example
DESCRIPTION: SQL code that creates an Account table, inserts sample data, and defines a function to search accounts by email domain. The function returns a set of accounts matching the search criteria.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create table "Account"(
  id serial primary key,
  email varchar(255) not null
);

insert into "Account"(email)
values
  ('a@foo.com'),
  ('b@bar.com'),
  ('c@foo.com');

create function "accountsByEmailDomain"("domainToSearch" text)
  returns setof "Account"
  stable
  language sql
as $$
	select
		id, email
	from
		"Account"
	where
		email ilike ('%@' || "domainToSearch");
$$;
```

----------------------------------------

TITLE: Creating Rate Limiting Table in PostgreSQL
DESCRIPTION: Creates a table and index in the private schema to store rate limit data including IP addresses and request timestamps.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create table private.rate_limits (
  ip inet,
  request_at timestamp
);

-- add an index so that lookups are fast
create index rate_limits_ip_request_at_idx on private.rate_limits (ip, request_at desc);
```

----------------------------------------

TITLE: Signing Out - Kotlin
DESCRIPTION: This Kotlin snippet demonstrates how to sign out users from the Instagram account using the Supabase client. The `signOut()` method is called to remove the user from the session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-discord.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {\n\tsupabase.auth.signOut()\n}
```

----------------------------------------

TITLE: Creating API Key Validation Table
DESCRIPTION: Creates a table in the private schema to store application API keys for request validation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
create table private.anon_api_keys (
  id uuid primary key,
  -- other relevant fields
);
```

----------------------------------------

TITLE: Getting Public URL for Transformed Image in Python
DESCRIPTION: This snippet demonstrates how to use the Supabase Python client to get a public URL for a transformed image, specifying width and height.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
url = supabase.storage.from_('avatars').get_public_url(
  'image.jpg',
  {
    'transform': {
      'width': 500,
      'height': 500,
    },
  }
)
```

----------------------------------------

TITLE: Flutter MFA Factor Management Page
DESCRIPTION: Dart code implementing a Flutter page for listing and managing MFA factors, including the ability to unenroll factors.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_14

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:mfa_app/main.dart';
import 'package:mfa_app/pages/auth/register_page.dart';

/// A page that lists the currently signed in user's MFA methods.
///
/// The user can unenroll the factors.
class ListMFAPage extends StatelessWidget {
  static const route = '/list-mfa';
  ListMFAPage({super.key});

  final _factorListFuture = supabase.auth.mfa.listFactors();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('List of MFA Factors')),
      body: FutureBuilder(
        future: _factorListFuture,
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Center(child: Text(snapshot.error.toString()));
          }
          if (!snapshot.hasData) {
            return const Center(child: CircularProgressIndicator());
          }

          final response = snapshot.data!;
          final factors = response.all;
          return ListView.builder(
            itemCount: factors.length,
            itemBuilder: (context, index) {
              final factor = factors[index];
              return ListTile(
                title: Text(factor.friendlyName ?? factor.factorType.name),
                subtitle: Text(factor.status.name),
                trailing: IconButton(
                  onPressed: () {
                    showDialog(
                        context: context,
                        builder: (context) {
                          return AlertDialog(
                            title: const Text(
                              'Are you sure you want to delete this factor? You will be signed out of the app upon removing the factor.',
                            ),
                            actions: [
                              TextButton(
                                onPressed: () {
                                  context.pop();
                                },
                                child: const Text('cancel'),
                              ),
                              TextButton(
                                onPressed: () async {
                                  await supabase.auth.mfa.unenroll(factor.id);
                                  await supabase.auth.signOut();
                                  if (context.mounted) {
                                    context.go(RegisterPage.route);
                                  }
                                },
                                child: const Text('delete'),
                              ),
                            ],
                          );
                        });
                  },
                  icon: const Icon(Icons.delete_outline),
                ),
              );
            },
          );
        },
      ),
    );
  }
}
```

----------------------------------------

TITLE: Configuring Table Permissions for Password Sign-in Attempts in SQL
DESCRIPTION: This SQL snippet sets up permissions for the 'password_sign_in_attempts' table in the public schema. It restricts access to authenticated users, anonymous users, and public roles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/password-verification-hook.mdx#2025-04-21_snippet_4

LANGUAGE: SQL
CODE:
```
on table public.password_sign_in_attempts
from authenticated, anon, public;
```

----------------------------------------

TITLE: Inserting Geographic Point Data with JavaScript
DESCRIPTION: JavaScript code using Supabase client to insert restaurant data with geographic points as WKT (Well-Known Text) strings. The POINT format is 'POINT(longitude latitude)'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { error } = await supabase.from('restaurants').insert([
  {
    name: 'Supa Burger',
    location: 'POINT(-73.946823 40.807416)',
  },
  {
    name: 'Supa Pizza',
    location: 'POINT(-73.94581 40.807475)',
  },
  {
    name: 'Supa Taco',
    location: 'POINT(-73.945826 40.80629)',
  },
])
```

----------------------------------------

TITLE: Importing JSON Users to Supabase Auth (Node.js)
DESCRIPTION: This command imports user data from a specified JSON file into Supabase's 'auth.users' table. The path to the JSON file and the optional batch size can be provided.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firebase-auth.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
node import_users.js <path_to_json_file> [<batch_size>]
```

----------------------------------------

TITLE: Initializing Supabase Client in TypeScript
DESCRIPTION: Creating a helper file to initialize the Supabase client using environment variables, making it available throughout the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

----------------------------------------

TITLE: Adding Exclusion Constraint to Prevent Overlapping Reservations
DESCRIPTION: This SQL statement adds an exclusion constraint to the reservations table to prevent overlapping reservations using the GiST index.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
alter table reservations
	add constraint exclude_duration exclude
	using gist (duration with &&)
```

----------------------------------------

TITLE: Storing CLIP Embeddings in Supabase Vector Database
DESCRIPTION: Python code for storing CLIP embeddings in a Supabase vector database using the vecs package. It creates or accesses a collection of vectors and upserts the embeddings with filenames as identifiers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
import vecs

DB_CONNECTION = "postgresql://postgres:[password]@[host]:[port]/[database]"

vx = vecs.create_client(DB_CONNECTION)

# create a collection of vectors with 3 dimensions
images = vx.get_or_create_collection(name="image_vectors", dimension=512)

for result in results:
    image = result["filename"]
    embeddings = result["embeddings"][0]

    # insert a vector into the collection
    images.upsert(
        records=[
            (
                image,
                embeddings,
                {} # metadata
            )
        ]
    )

images.create_index()
```

----------------------------------------

TITLE: Setting Refreshed JWT Token in Dart
DESCRIPTION: This Dart snippet demonstrates how to set a refreshed JWT token for Supabase Realtime authentication. The `setAuth` method is used to update the token. This assumes that supabase client has already been initialised.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_55

LANGUAGE: dart
CODE:
```
supabase.realtime.setAuth('fresh-token');
```

----------------------------------------

TITLE: Implementing Form Item Layout with React Hook Form in TSX
DESCRIPTION: This snippet shows the basic structure of a form item using react-hook-form components, highlighting the parts that can be replaced by FormItemLayout.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/form-item-layout.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
<FormItem_Shadcn_>
  <FormLabel_Shadcn_>Username</FormLabel_Shadcn_>
  <FormControl_Shadcn_>
    <Input placeholder="shadcn" {...field} />
  </FormControl_Shadcn_>
  <FormDescription_Shadcn_>This is your public display name.</FormDescription_Shadcn_>
  <FormMessage_Shadcn_ />
</FormItem_Shadcn_>
```

----------------------------------------

TITLE: Updating User Password in Python with Supabase
DESCRIPTION: Python implementation to update a user's password after a successful password reset flow using the Supabase authentication client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_38

LANGUAGE: Python
CODE:
```
supabase.auth.update_user({'password': 'new_password'})
```

----------------------------------------

TITLE: Creating RLS Policy for Realtime Messages
DESCRIPTION: SQL policy that allows authenticated users to receive broadcast messages from the realtime.messages table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-02-realtime-broadcast-from-database.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create policy "Authenticated users can receive broadcasts"
on "realtime"."messages"
for select
to authenticated
using ( true );
```

----------------------------------------

TITLE: Direct Storage API Request for Image Resizing
DESCRIPTION: Example of making a direct HTTP request to the Storage API endpoint for image resizing using query parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-13-storage-image-resizing-smart-cdn.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
GET https://project_id.supabase.co/storage/v1/render/image/public/bucket/image.jpg?width=500&height=600
```

----------------------------------------

TITLE: Creating Supabase Client in Next.js
DESCRIPTION: TypeScript utility to create and export a Supabase client instance configured with environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import { createClient } from '@supabase/supabase-js'

export default createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)
```

----------------------------------------

TITLE: Creating Login/Signup Form in Next.js
DESCRIPTION: This snippet demonstrates how to create a login/signup form using Next.js. It includes input fields for email and password, along with buttons for login and signup actions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_9

LANGUAGE: jsx
CODE:
```
import { login, signup } from './actions'

export default function LoginPage() {
  return (
    <form>
      <label htmlFor="email">Email:</label>
      <input id="email" name="email" type="email" required />
      <label htmlFor="password">Password:</label>
      <input id="password" name="password" type="password" required />
      <button formAction={login}>Log in</button>
      <button formAction={signup}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Adding Supabase CA certificate to trusted authorities
DESCRIPTION: Command to add the downloaded Supabase CA certificate to the Postgres trusted certificate authorities list, enabling the use of verify-full SSL mode for maximum security.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ssl-enforcement.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
cat {location of downloaded prod-ca-2021.crt} >> ~/.postgres/root.crt
```

----------------------------------------

TITLE: Implementing Todo List with Infinite Scrolling in Supabase
DESCRIPTION: A practical example of using the InfiniteList component with a Todo list from Supabase. It demonstrates how to render todo items with checkboxes, format dates, and customize the query to order items by insertion date. The component is configured to load 3 items per page for demonstration purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/infinite-query-hook.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'

import { Checkbox } from '@/components/ui/checkbox'
import { InfiniteList } from './infinite-component'
import { SupabaseQueryHandler } from '@/hooks/use-infinite-query'
import { Database } from '@/lib/supabase.types'

type TodoTask = Database['public']['Tables']['todos']['Row']

// Define how each item should be rendered
const renderTodoItem = (todo: TodoTask) => {
  return (
    <div
      key={todo.id}
      className="border-b py-3 px-4 hover:bg-muted flex items-center justify-between"
    >
      <div className="flex items-center gap-3">
        <Checkbox defaultChecked={todo.is_complete ?? false} />
        <div>
          <span className="font-medium text-sm text-foreground">{todo.task}</span>
          <div className="text-sm text-muted-foreground">
            {new Date(todo.inserted_at).toLocaleDateString()}
          </div>
        </div>
      </div>
    </div>
  )
}

const orderByInsertedAt: SupabaseQueryHandler<'todos'> = (query) => {
  return query.order('inserted_at', { ascending: false })
}

export const InfiniteListDemo = () => {
  return (
    <div className="bg-background h-[600px]">
      <InfiniteList
        tableName="todos"
        renderItem={renderTodoItem}
        pageSize={3}
        trailingQuery={orderByInsertedAt}
      />
    </div>
  )
}
```

----------------------------------------

TITLE: GitHub Actions Workflow for Custom ORM Migration
DESCRIPTION: GitHub Actions workflow configuration that waits for Supabase Preview deployment and runs custom ORM migrations. The workflow triggers on pull request events and uses Supabase CLI to fetch branch credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_10

LANGUAGE: yaml
CODE:
```
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main
    paths:
      - 'supabase/**'

jobs:
  wait:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check.outputs.conclusion }}
    steps:
      - uses: fountainhead/action-wait-for-check@v1.2.0
        id: check
        with:
          checkName: Supabase Preview
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

  migrate:
    needs:
      - wait
    if: ${{ needs.wait.outputs.status == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      - run: supabase --experimental branches get "$GITHUB_HEAD_REF" -o env >> $GITHUB_ENV
      - name: Custom ORM migration
        run: psql "$POSTGRES_URL_NON_POOLING" -c 'select 1'
```

----------------------------------------

TITLE: Aggregate Functions with Spread Embedded Resources in cURL
DESCRIPTION: This snippet demonstrates using aggregate functions with spread embedded resources to calculate average box office earnings grouped by director's country using cURL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
$ curl 'http://postgrest/movies?select=avg_earnings:box_office_earnings.avg(),...directors(country)'
```

----------------------------------------

TITLE: Adding Pagination to TanStack Table
DESCRIPTION: Updated DataTable component with pagination functionality using TanStack Table's getPaginationRowModel feature to automatically handle pagination.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  useReactTable,
} from '@tanstack/react-table'

export function DataTable<TData, TValue>({ columns, data }: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  })

  // ...
}
```

----------------------------------------

TITLE: Implementing Resumable Uploads with @uppy/tus in React
DESCRIPTION: This snippet shows how to use @uppy/tus to implement resumable uploads in a React application. It includes a custom hook for configuring Uppy with Supabase authentication and TUS resumable uploads.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/resumable-uploads.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { useEffect, useState } from "react";
import { createClient } from "@supabase/supabase-js";
import Uppy from "@uppy/core";
import Tus from "@uppy/tus";
import Dashboard from "@uppy/dashboard";
import "@uppy/core/dist/style.min.css";
import "@uppy/dashboard/dist/style.min.css";

function App() {
    // Initialize Uppy instance with the 'sample' bucket specified for uploads
    const uppy = useUppyWithSupabase({ bucketName: "sample" });

    useEffect(() => {
        // Set up Uppy Dashboard to display as an inline component within a specified target
        uppy.use(Dashboard, {
            inline: true, // Ensures the dashboard is rendered inline
            target: "#drag-drop-area", // HTML element where the dashboard renders
            showProgressDetails: true, // Show progress details for file uploads
        });
    }, []);

    return (
        <div id="drag-drop-area">
        </div>
        {/* Target element for the Uppy Dashboard */}
    );
}

export default App;

/**
 * Custom hook for configuring Uppy with Supabase authentication and TUS resumable uploads
 * @param {Object} options - Configuration options for the Uppy instance.
 * @param {string} options.bucketName - The bucket name in Supabase where files are stored.
 * @returns {Object} uppy - Uppy instance with configured upload settings.
 */
export const useUppyWithSupabase = ({ bucketName }: { bucketName: string }) => {
    // Initialize Uppy instance only once
    const [uppy] = useState(() => new Uppy());
    // Initialize Supabase client with project URL and anon key
    const supabase = createClient(projectURL, anonKey);

    useEffect(() => {
        const initializeUppy = async () => {
        // Retrieve the current user's session for authentication
        const {
            data: { session },
        } = await supabase.auth.getSession();

        uppy.use(Tus, {
                endpoint: `${projectURL}/storage/v1/upload/resumable`, // Supabase TUS endpoint
                retryDelays: [0, 3000, 5000, 10000, 20000], // Retry delays for resumable uploads
                headers: {
                    authorization: `Bearer ${session?.access_token}`, // User session access token
                    apikey: anonKey, // API key for Supabase
                },
                uploadDataDuringCreation: true, // Send metadata with file chunks
                removeFingerprintOnSuccess: true, // Remove fingerprint after successful upload
                chunkSize: 6 * 1024 * 1024, // Chunk size for TUS uploads (6MB)
                allowedMetaFields: [
                    "bucketName",
                    "objectName",
                    "contentType",
                    "cacheControl",
                ], // Metadata fields allowed for the upload
                onError: (error) => console.error("Upload error:", error), // Error handling for uploads
            }).on("file-added", (file) => {
                // Attach metadata to each file, including bucket name and content type
                file.meta = {
                    ...file.meta,
                    bucketName, // Bucket specified by the user of the hook
                    objectName: file.name, // Use file name as object name
                    contentType: file.type, // Set content type based on file MIME type
                };
            });
        };

        // Initialize Uppy with Supabase settings
        initializeUppy();
    }, [uppy, bucketName]);

    // Return the configured Uppy instance
    return uppy;
};
```

----------------------------------------

TITLE: Retrieving Metrics for All Queues in PGMQ with SQL
DESCRIPTION: The metrics_all function returns metrics for all existing queues, including queue length, message ages, and total message count for each queue.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_18

LANGUAGE: sql
CODE:
```
select * from pgmq.metrics_all();
      queue_name      | queue_length | newest_msg_age_sec | oldest_msg_age_sec | total_messages |          scrape_time
----------------------+--------------+--------------------+--------------------+----------------+-------------------------------
 my_queue             |           16 |               2563 |               2565 |             35 | 2023-10-28 20:25:07.016413-05
 my_partitioned_queue |            1 |                 11 |                 11 |              1 | 2023-10-28 20:25:07.016413-05
 my_unlogged          |            1 |                  3 |                  3 |              1 | 2023-10-28 20:25:07.016413-05
```

----------------------------------------

TITLE: Importing Stripe Module for Deno Edge Functions in JavaScript
DESCRIPTION: This code snippet demonstrates how to import the Stripe module from esm.sh for use in Deno Edge Functions. By adding '?target=deno' to the import URL, it resolves potential import errors.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/importing-stripe-or-other-modules-from-esmsh-on-deno-edge-functions-throws-an-error-TmbB5p.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import Stripe from "https://esm.sh/stripe@11.2.0?target=deno";
```

----------------------------------------

TITLE: Simple index_advisor Query Example
DESCRIPTION: Demonstrates using index_advisor with a simple query that filters an unindexed column. The extension recommends creating an index for the 'title' column to improve query performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/index_advisor.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select
    *
from
  index_advisor('select book.id from book where title = $1');

 startup_cost_before | startup_cost_after | total_cost_before | total_cost_after |                  index_statements                   | errors
---------------------+--------------------+-------------------+------------------+-----------------------------------------------------+--------
 0.00                | 1.17               | 25.88             | 6.40             | {"CREATE INDEX ON public.book USING btree (title)"},| {}
(1 row)
```

----------------------------------------

TITLE: Creating Storage Bucket with Python
DESCRIPTION: Creates a public storage bucket named 'avatars' using the Supabase Python client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/creating-buckets.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
supabase.storage.create_bucket(
  'avatars',
  options={"public": True}
)
```

----------------------------------------

TITLE: Link OAuth Identity to Anonymous User in Kotlin
DESCRIPTION: Links an OAuth provider (Google) to an anonymous user in Supabase using Kotlin. This converts an anonymous user to a permanent user by associating it with the OAuth identity.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_13

LANGUAGE: kotlin
CODE:
```
supabase.auth.linkIdentity(Google)
```

----------------------------------------

TITLE: Setting Up Web Worker for Embedding Generation with Transformers.js
DESCRIPTION: This worker script sets up a Transformers.js pipeline for generating embeddings from text. It uses the Singleton pattern to lazily instantiate the pipeline and communicates with the main thread via postMessage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
import { pipeline } from '@huggingface/transformers'

// Use the Singleton pattern to enable lazy construction of the pipeline.
class PipelineSingleton {
  static task = 'feature-extraction'
  static model = 'Supabase/gte-small'
  static instance = null

  static async getInstance(progress_callback = null) {
    if (this.instance === null) {
      this.instance = pipeline(this.task, this.model, {
        progress_callback,
        dtype: 'fp32',
        device: !!navigator.gpu ? 'webgpu' : 'wasm',
      })
    }
    return this.instance
  }
}

// Listen for messages from the main thread
self.addEventListener('message', async (event) => {
  // Retrieve the classification pipeline. When called for the first time,
  // this will load the pipeline and save it for future use.
  let classifier = await PipelineSingleton.getInstance((x) => {
    // We also add a progress callback to the pipeline so that we can
    // track model loading.
    self.postMessage(x)
  })

  // Actually perform the classification
  let output = await classifier(event.data.text, {
    pooling: 'mean',
    normalize: true,
  })

  // Extract the embedding output
  const embedding = Array.from(output.data)

  // Send the output back to the main thread
  self.postMessage({
    status: 'complete',
    embedding,
  })
})
```

----------------------------------------

TITLE: Configuring Prometheus Scrape Job for Supabase
DESCRIPTION: YAML configuration example for setting up a Prometheus scrape job to collect metrics from a Supabase project. It includes the necessary parameters like metrics_path, authentication details, and target specification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/metrics.mdx#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
scrape_configs:
  - job_name: "MySupabaseJob"
    metrics_path: "/customer/v1/privileged/metrics"
    scheme: https
    basic_auth:
      username: "service_role"
      password: "<your service_role JWT>"
    static_configs:
      - targets: [
        "<your Supabase Project ID>.supabase.co:443"
          ]
        labels:
          group: "MyGroupLabel"
```

----------------------------------------

TITLE: Implementing Sentry Error Monitoring in Edge Function
DESCRIPTION: TypeScript implementation of a Supabase Edge Function with Sentry integration for error monitoring. Includes Sentry initialization, custom tag setting, and error handling with request processing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/sentry-monitoring.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import * as Sentry from 'https://deno.land/x/sentry/index.mjs'

Sentry.init({
  // https://docs.sentry.io/product/sentry-basics/concepts/dsn-explainer/#where-to-find-your-dsn
  dsn: SENTRY_DSN,
  defaultIntegrations: false,
  // Performance Monitoring
  tracesSampleRate: 1.0,
  // Set sampling rate for profiling - this is relative to tracesSampleRate
  profilesSampleRate: 1.0,
})

// Set region and execution_id as custom tags
Sentry.setTag('region', Deno.env.get('SB_REGION'))
Sentry.setTag('execution_id', Deno.env.get('SB_EXECUTION_ID'))

Deno.serve(async (req) => {
  try {
    const { name } = await req.json()
    // This will throw, as `name` in our example call will be `undefined`
    const data = {
      message: `Hello ${name}!`,
    }

    return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })
  } catch (e) {
    Sentry.captureException(e)
    return new Response(JSON.stringify({ msg: 'error' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})
```

----------------------------------------

TITLE: Signing In with LinkedIn using Supabase Kotlin
DESCRIPTION: This Kotlin snippet illustrates signing in with LinkedIn via Supabase's authentication mechanism. It involves calling the `signInWith` function with `LinkedIn` as the provider, assuming the necessary setup and Supabase Kotlin library are in place.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_2

LANGUAGE: Kotlin
CODE:
```
suspend fun signInWithKaLinkedIn() {
	supabase.auth.signInWith(LinkedIn)
}
```

----------------------------------------

TITLE: Database Webhook Payload Type Definitions
DESCRIPTION: TypeScript type definitions for the payload structure of Database Webhook events including INSERT, UPDATE, and DELETE operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-30-supabase-functions-updates.mdx#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
type InsertPayload = {
  type: 'INSERT'
  table: string
  schema: string
  record: TableRecord<T>
  old_record: null
}
type UpdatePayload = {
  type: 'UPDATE'
  table: string
  schema: string
  record: TableRecord<T>
  old_record: TableRecord<T>
}
type DeletePayload = {
  type: 'DELETE'
  table: string
  schema: string
  record: null
  old_record: TableRecord<T>
}
```

----------------------------------------

TITLE: Defining Private Channel in TypeScript
DESCRIPTION: TypeScript code snippet demonstrating how to define a private channel using the new configuration field during channel creation in Supabase Realtime.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-authorization-demo/README.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
const channel = supabase.channel('room-1', {
  config: { private: true },
})
```

----------------------------------------

TITLE: Setting Custom Presence Key in Kotlin
DESCRIPTION: This snippet illustrates how to set a custom presence key while creating a channel in Kotlin.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_23

LANGUAGE: kotlin
CODE:
```
val channelC = supabase.channel("test") {
    presence {
        key = "userId-123"
    }
}
```

----------------------------------------

TITLE: Implementing Server-Client State Sync
DESCRIPTION: Handles authentication state synchronization between server and client using Remix's useRevalidator hook and Supabase's auth state change listener.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
useEffect(() => {
  const {
    data: { subscription },
  } = supabase.auth.onAuthStateChange((event, session) => {
    if (session?.access_token !== serverAccessToken) {
      // server and client are out of sync.
      revalidate()
    }
  })

  return () => {
    subscription.unsubscribe()
  }
}, [serverAccessToken, supabase, revalidate])
```

LANGUAGE: tsx
CODE:
```
useEffect(() => {
  const {
    data: { subscription },
  } = supabase.auth.onAuthStateChange((event, session) => {
    if (event !== 'INITIAL_SESSION' && session?.access_token !== serverAccessToken) {
      // server and client are out of sync.
      revalidate()
    }
  })

  return () => {
    subscription.unsubscribe()
  }
}, [serverAccessToken, supabase, revalidate])
```

----------------------------------------

TITLE: Configuring Supabase Auth SignUp with Email Redirect
DESCRIPTION: Example of using the Supabase signUp function with email redirect configuration pointing to the auth callback route handler. Shows how to properly set up email redirection for authentication flows.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_32

LANGUAGE: jsx
CODE:
```
supabase.auth.signUp({
  email: 'valid.email@supabase.io',
  password: 'sup3rs3cur3',
  options: {
    emailRedirectTo: 'http://localhost:3000/auth/callback',
  },
})
```

----------------------------------------

TITLE: Creating Base Chat Tables in PostgreSQL
DESCRIPTION: Creates two tables: 'chats' for storing chat conversations and 'chat_messages' for storing individual messages. Includes primary key constraints and foreign key relationships between tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table chats (
  id bigserial,
  created_at timestamptz not null default now(),
  primary key (id)
);

create table chat_messages (
  id bigserial,
  created_at timestamptz not null,
  chat_id bigint not null,
  chat_created_at timestamptz not null,
  message text not null,
  primary key (id),
  foreign key (chat_id) references chats (id)
);
```

----------------------------------------

TITLE: Querying Total Database Size in Postgres
DESCRIPTION: This SQL query calculates and displays the total size of all databases in the Postgres cluster using the pg_size_pretty and pg_database_size functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/database-size.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select
  pg_size_pretty(sum(pg_database_size(pg_database.datname)))
from pg_database;
```

----------------------------------------

TITLE: Database Schema Setup
DESCRIPTION: SQL commands for creating PostGIS tables and defining schema for drivers and rides
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create extension postgis with schema extensions;

create table if not exists public.drivers (
	id uuid primary key default gen_random_uuid(),
	model text not null,
  number text not null,
  is_available boolean not null default false,
	location geography(POINT) not null,
  latitude double precision generated always as (st_y(location::geometry)) stored,
  longitude double precision generated always as (st_x(location::geometry)) stored
);

create type ride_status as enum ('picking_up', 'riding', 'completed');

create table if not exists public.rides (
  id uuid primary key default gen_random_uuid(),
  driver_id uuid not null references public.drivers(id),
  passenger_id uuid not null references auth.users(id),
  origin geography(POINT) not null,
  destination geography(POINT) not null,
  fare integer not null,
  status ride_status not null default 'picking_up'
);
```

----------------------------------------

TITLE: Running Supabase Streams Function Locally in Bash
DESCRIPTION: Command to serve the 'streams' Supabase Edge Function locally without JWT verification. This allows for local testing and development of the function.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/streams/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions serve --no-verify-jwt
```

----------------------------------------

TITLE: Creating Index After Data Import in Supabase
DESCRIPTION: SQL command to create an index on a table after data import. This approach can significantly speed up the import process by building indices after the data is loaded.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/import-data.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- Create an index on a table
create index index_name on table_name (column_name);
```

----------------------------------------

TITLE: Configuring Self-Send Messages in Kotlin
DESCRIPTION: This Kotlin snippet shows how to set up a Supabase Realtime channel to receive its own broadcast messages. It configures the 'receiveOwnBroadcasts' parameter, sets up a broadcast flow, and sends a message.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_8

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("room-2") {
    broadcast {
        receiveOwnBroadcasts = true
    }
}

val broadcastFlow: Flow<JsonObject> = myChannel.broadcastFlow<JsonObject>("test-my-messages")
    .onEach {
        println(it)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe(blockUntilSubscribed = true) //You can also use the myChannel.status flow instead, but this parameter will block the coroutine until the status is joined.

myChannel.broadcast(
    event = "test-my-messages",
    payload = YourMessage(
        message = "talking to myself"
    )
)
```

----------------------------------------

TITLE: Using startsWith Filter in GraphQL Query
DESCRIPTION: This GraphQL query demonstrates the use of the new 'startsWith' filter in pg_graphql v1.2. It queries the generalLedgerCollection for entries where the identifierCode starts with 'BX1:'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_5

LANGUAGE: graphql
CODE:
```
{
  generalLedgerCollection(filter: { identifierCode: { startsWith: "BX1:" } }) {
    edges {
      node {
        nodeId
        identifierCode
        amount
      }
    }
  }
}
```

----------------------------------------

TITLE: Activating and Deactivating a Cron Job using SQL in Supabase
DESCRIPTION: These SQL snippets demonstrate how to activate or deactivate an existing cron job in Supabase using the cron.alter_job function with the active parameter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- Activate Job
select cron.alter_job(
  job_id := (select jobid from cron.job where jobname = 'permanent-cron-job-name'),
  active := true
);

-- Deactivate Job
select cron.alter_job(
  job_id := (select jobid from cron.job where jobname = 'permanent-cron-job-name'),
  active := false
);
```

----------------------------------------

TITLE: Deploying a Supabase Edge Function
DESCRIPTION: Command to deploy the 'resend' Edge Function to Supabase without JWT verification, which is needed for public access to the function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/send-emails.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase functions deploy resend --no-verify-jwt
```

----------------------------------------

TITLE: Implementing Turnstile CAPTCHA Component
DESCRIPTION: React implementation of Turnstile CAPTCHA component with success callback for token handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-captcha.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
<Turnstile
  siteKey="your-sitekey"
  onSuccess={(token) => {
    setCaptchaToken(token)
  }}
/>
```

----------------------------------------

TITLE: Inserting Data into Parent Table with Limit in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to insert a subset of data from the original table into the new partitioned table. The ORDER BY and LIMIT clauses are used to control the amount of data inserted for testing purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/partitioning-an-existing-table-with-same-name-VEnbzK.mdx#2025-04-21_snippet_1

LANGUAGE: SQL
CODE:
```
ORDER BY id LIMIT <number>
```

----------------------------------------

TITLE: Creating IVFFlat Index for Euclidean Distance in SQL
DESCRIPTION: SQL command to create an IVFFlat index using the vector_l2_ops operator class for Euclidean distance. The index is created on the 'column_name' of the 'items' table with 100 lists.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/ivf-indexes.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create index on items using ivfflat (column_name vector_l2_ops) with (lists = 100);
```

----------------------------------------

TITLE: Configuring Image Transformations in Supabase Storage
DESCRIPTION: Demonstrates how to use image transformation options including width, height, quality and format when downloading images from Supabase Storage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-12-storage-v3-resumable-uploads.mdx#2025-04-22_snippet_0

LANGUAGE: javascript
CODE:
```
supabase.storage.from('bucket').download('image.jpg', {
  transform: {
    width: 800,
    height: 300,
    quality: 75,
    format: 'origin',
  },
})
```

----------------------------------------

TITLE: Basic Supabase Queries with Promise and Async/Await
DESCRIPTION: Demonstrates two different syntax approaches for querying data from Supabase: Promise-based (.then) and async/await.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-11-using-supabase-replit.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
// .then() syntax
supabase.
  .from('countries')
  .select('*')
  .limit(5)
  .then(console.log)
  .catch(console.error)

// or...
// async/await syntax
const main = async() => {
  const { data, error } = supabase
    .from('countries')
    .select('*')
    .limit(5)

  if (error) {
    console.log(error)
    return
  }

  console.log(data)
}
main()
```

----------------------------------------

TITLE: Enabling pgvector Extension in PostgreSQL
DESCRIPTION: SQL command to enable the pgvector extension in PostgreSQL for vector operations
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create extension vector
with
  schema extensions;
```

----------------------------------------

TITLE: Creating Edge Function - Basic Setup
DESCRIPTION: Command to create a new Supabase Edge Function named 'multi-purpose'
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
supabase functions new multi-purpose
```

----------------------------------------

TITLE: Initializing Supabase Client with Auth0 in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to set up the Supabase client and Auth0 client together. Auth0 is used for authorization, retrieving a silent token when needed. Dependencies include '@supabase/supabase-js' and '@auth0/auth0-spa-js'. Parameters include domain, clientId, and redirect_uri for Auth0 setup.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/auth0.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
import Auth0Client from '@auth0/auth0-spa-js'

const auth0 = new Auth0Client({
  domain: '<AUTH0_DOMAIN>',
  clientId: '<AUTH0_CLIENT_ID>',
  authorizationParams: {
    redirect_uri: '<MY_CALLBACK_URL>',
  },
})

const supabase = createClient('https://<supabase-project>.supabase.co', 'SUPABASE_ANON_KEY', {
  accessToken: async () => {
    const accessToken = await auth0.getTokenSilently()

    // Alternatively you can use (await auth0.getIdTokenClaims()).__raw to
    // use an ID token instead.

    return accessToken
  },
})
```

----------------------------------------

TITLE: Auth Error Handling with URL Parameters
DESCRIPTION: JavaScript code to handle authentication errors by parsing URL query fragments and displaying appropriate error messages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/redirect-urls.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const params = new URLSearchParams(window.location.hash.slice())

if (params.get('error_code').startsWith('4')) {
  // show error message if error is a 4xx error
  window.alert(params.get('error_description'))
}
```

----------------------------------------

TITLE: Creating Supabase Tables for Slack Channel Management
DESCRIPTION: SQL commands to create two tables in Supabase: 'slack_channels' for managing watched channels and their destinations, and 'slack_watcher' for storing message data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-09-slack-consolidate-slackbot-to-consolidate-messages.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE TABLE slack_channels (
    id SERIAL PRIMARY KEY,
    channel text,
    channel_id text,
    p_level text DEFAULT ''::text NOT NULL,
    dest_channel text,
    dest_channel_id text,
    private int DEFAULT '0'::int NOT NULL
);

CREATE TABLE slack_watcher (
    channel_name text,
    channel_id text NOT NULL,
    message text,
    ts timestamp with time zone NOT NULL,
    ts_ms text NOT NULL,
    CONSTRAINT pk_slackwatcher PRIMARY KEY (channel_id, ts, ts_ms)
);
```

----------------------------------------

TITLE: Defining Constants for Flutter Chat App with Supabase
DESCRIPTION: This snippet defines constants used throughout the application, including Supabase client initialization, UI elements, and theme data. It also includes an extension on BuildContext for displaying snackbars.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

/// Supabase client
final supabase = Supabase.instance.client;

/// Simple preloader inside a Center widget
const preloader =
    Center(child: CircularProgressIndicator(color: Colors.orange));

/// Simple sized box to space out form elements
const formSpacer = SizedBox(width: 16, height: 16);

/// Some padding for all the forms to use
const formPadding = EdgeInsets.symmetric(vertical: 20, horizontal: 16);

/// Error message to display the user when unexpected error occurs.
const unexpectedErrorMessage = 'Unexpected error occurred.';

/// Basic theme to change the look and feel of the app
final appTheme = ThemeData.light().copyWith(
  primaryColorDark: Colors.orange,
  appBarTheme: const AppBarTheme(
    elevation: 1,
    backgroundColor: Colors.white,
    iconTheme: IconThemeData(color: Colors.black),
    titleTextStyle: TextStyle(
      color: Colors.black,
      fontSize: 18,
    ),
  ),
  primaryColor: Colors.orange,
  textButtonTheme: TextButtonThemeData(
    style: TextButton.styleFrom(
      foregroundColor: Colors.orange,
    ),
  ),
  elevatedButtonTheme: ElevatedButtonThemeData(
    style: ElevatedButton.styleFrom(
      foregroundColor: Colors.white,
      backgroundColor: Colors.orange,
    ),
  ),
  inputDecorationTheme: InputDecorationTheme(
    floatingLabelStyle: const TextStyle(
      color: Colors.orange,
    ),
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(
        color: Colors.grey,
        width: 2,
      ),
    ),
    focusColor: Colors.orange,
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(
        color: Colors.orange,
        width: 2,
      ),
    ),
  ),
);

/// Set of extension methods to easily display a snackbar
extension ShowSnackBar on BuildContext {
  /// Displays a basic snackbar
  void showSnackBar({
    required String message,
    Color backgroundColor = Colors.white,
  }) {
    ScaffoldMessenger.of(this).showSnackBar(SnackBar(
      content: Text(message),
      backgroundColor: backgroundColor,
    ));
  }

  /// Displays a red snackbar indicating error
  void showErrorSnackBar({required String message}) {
    showSnackBar(message: message, backgroundColor: Colors.red);
  }
}
```

----------------------------------------

TITLE: Synchronizing Prisma Migrations with bun
DESCRIPTION: This snippet demonstrates how to synchronize Prisma migrations using bun. It includes commands for pulling the database schema, creating a migration file, and resolving the migration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_21

LANGUAGE: bash
CODE:
```
bunx prisma db pull
```

LANGUAGE: bash
CODE:
```
mkdir -p prisma/migrations/0_init_supabase
```

LANGUAGE: bash
CODE:
```
bunx prisma migrate diff \
--from-empty \
--to-schema-datamodel prisma/schema.prisma \
--script > prisma/migrations/0_init_supabase/migration.sql
```

LANGUAGE: bash
CODE:
```
bunx prisma migrate resolve --applied 0_init_supabase
```

----------------------------------------

TITLE: Uploading Generated Ticket Image to Supabase Storage (JavaScript)
DESCRIPTION: This code uploads the generated ticket image to Supabase Storage, ensuring fast response times and efficient resource usage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-07-designing-with-ai-midjourney.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
const type = golden ? 'golden' : 'regular'

// Upload image to storage.
const { error: storageError } = await supabaseAdminClient.storage
  .from('images')
  .upload(`lw7/tickets/${type}/${BUCKET_FOLDER_VERSION}/${username}.png`, generatedImage.body, {
    contentType: 'image/png',
    cacheControl: '31536000',
    upsert: false,
  })
```

----------------------------------------

TITLE: Deploying the Function with Supabase CLI
DESCRIPTION: Command for deploying the T-shirt competition function using the Supabase CLI without JWT verification.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/get-tshirt-competition/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase functions deploy --no-verify-jwt get-tshirt-competition
```

----------------------------------------

TITLE: Creating a Functional Index in SQL
DESCRIPTION: This example demonstrates how to create a functional index in Postgres, which allows indexing on the result of a function applied to a column.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create index test1_lower_col1_idx on test1 (lower(col1));
```

----------------------------------------

TITLE: Creating Computed Relationships in SQL
DESCRIPTION: Shows how to create computed relationships using SQL functions to define relationships between views or materialized views that cannot have traditional foreign keys.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
-- many-to-one relationship on scores -> players
create function player(scores)
returns setof players rows 1 -- rows 1 defines a "one" end
language sql stable
as $$
  select *
	from players
	where id = $1.player_id;
$$;

-- one-to-many relationship on players -> scores
create function scores(players)
returns setof scores -- there's an implicit rows 1000 here, which is assumed to be "many"
language sql stable
as $$
  select *
	from scores
	where player_id = $1.id;
$$;
```

----------------------------------------

TITLE: Video Embedding Generation and Storage
DESCRIPTION: Python function to process videos, generate embeddings using Mixpeek, and store them in Supabase Vector database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_6

LANGUAGE: python
CODE:
```
def seed():
    # Initialize Supabase and Mixpeek clients
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    mixpeek = Mixpeek(MIXPEEK_API_KEY)

    # Create a table for storing video chunk embeddings
    supabase.table("video_chunks").create({
        "id": "text",
        "start_time": "float8",
        "end_time": "float8",
        "embedding": "vector(768)",
        "metadata": "jsonb"
    })

    # Process and embed video
    video_url = "https://example.com/your_video.mp4"
    processed_chunks = mixpeek.tools.video.process(
        video_source=video_url,
        chunk_interval=1,  # 1 second intervals
        resolution=[720, 1280]
    )

    for chunk in processed_chunks:
        print(f"Processing video chunk: {chunk['start_time']}")

        # Generate embedding using Mixpeek
        embed_response = mixpeek.embed.video(
            model_id="vuse-generic-v1",
            input=chunk['base64_chunk'],
            input_type="base64"
        )

        # Insert into Supabase
        supabase.table("video_chunks").insert({
            "id": f"chunk_{chunk['start_time']}",
            "start_time": chunk["start_time"],
            "end_time": chunk["end_time"],
            "embedding": embed_response['embedding'],
            "metadata": {"video_url": video_url}
        }).execute()

    print("Video processed and embeddings inserted")

    # Create index for fast search performance
    supabase.query("CREATE INDEX ON video_chunks USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100)").execute()
    print("Created index")
```

----------------------------------------

TITLE: Archiving a Single Message in PGMQ with SQL
DESCRIPTION: The archive function removes a single message from a specified queue and inserts it into the queue's archive. It takes queue name and message ID as parameters and returns a boolean indicating success or failure.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_13

LANGUAGE: sql
CODE:
```
select * from pgmq.archive('my_queue', 1);
 archive
---------
       t
```

----------------------------------------

TITLE: Creating Triggers on Auth Schema
DESCRIPTION: SQL commands to create triggers that execute the appropriate functions for insert, update, and delete operations on auth.users table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

create trigger on_auth_user_updated
  after update on auth.users
  for each row execute procedure public.update_user();

create trigger on_auth_user_deleted
  after delete on auth.users
  for each row execute procedure public.delete_user();
```

----------------------------------------

TITLE: Scheduling an Edge Function to Run Every Minute with pg_cron
DESCRIPTION: SQL command that configures pg_cron to call an Edge Function every minute using pg_net. The function retrieves credentials from Vault and makes a POST request to the function endpoint with the current timestamp.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/schedule-functions.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
  cron.schedule(
    'invoke-function-every-minute',
    '* * * * *', -- every minute
    $$
    select
      net.http_post(
          url:= (select decrypted_secret from vault.decrypted_secrets where name = 'project_url') || '/functions/v1/function-name',
          headers:=jsonb_build_object(
            'Content-type', 'application/json',
            'Authorization', 'Bearer ' || (select decrypted_secret from vault.decrypted_secrets where name = 'anon_key')
          ),
          body:=concat('{"time": "', now(), '"}')::jsonb
      ) as request_id;
    $$
  );
```

----------------------------------------

TITLE: Supavisor Transaction Mode Connection String
DESCRIPTION: This snippet shows an example of a Supavisor transaction mode connection string to a Supabase Postgres database via a proxy which serves as a connection pooler.  This is ideal for serverless or edge functions, requiring many transient connections. Replace `[YOUR-PASSWORD]` and `[REGION]` with the actual values. Prepared statements are not supported in transaction mode.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres.mdx#_snippet_2

LANGUAGE: text
CODE:
```
postgres://postgres.apbkobhfnmcqqzqeeqss:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres
```

----------------------------------------

TITLE: Creating Utility Functions for Record Identification in PostgreSQL
DESCRIPTION: Defines two utility functions: one to lookup a record's primary key column names, and another to generate a unique UUID for each record based on its table and primary key values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create or replace function audit.primary_key_columns(entity_oid oid)
    returns text[]
    stable
    security definer
    language sql
as $$
    -- Looks up the names of a table's primary key columns
    select
        coalesce(
            array_agg(pa.attname::text order by pa.attnum),
            array[]::text[]
        ) column_names
    from
        pg_index pi
        join pg_attribute pa
            on pi.indrelid = pa.attrelid
            and pa.attnum = any(pi.indkey)
    where
        indrelid = $1
        and indisprimary
$$;
```

LANGUAGE: sql
CODE:
```
create or replace function audit.to_record_id(
		entity_oid oid,
		pkey_cols text[],
		rec jsonb
)
    returns uuid
    stable
    language sql
as $$
    select
        case
            when rec is null then null
						-- if no primary key exists, use a random uuid
            when pkey_cols = array[]::text[] then gen_random_uuid()
            else (
                select
                    uuid_generate_v5(
                        'fd62bc3d-8d6e-43c2-919c-802ba3762271',
                        (
										jsonb_build_array(to_jsonb($1))
										|| jsonb_agg($3 ->> key_)
									)::text
                    )
                from
                    unnest($2) x(key_)
            )
        end
$$;
```

----------------------------------------

TITLE: MFA Verification Hook Output Example
DESCRIPTION: Example JSON response structure for rejecting an MFA verification attempt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/mfa-verification-hook.mdx#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "decision": "reject",
  "message": "You have exceeded maximum number of MFA attempts."
}
```

----------------------------------------

TITLE: Initializing Keycloak OAuth in JavaScript
DESCRIPTION: Sign in with Keycloak provider using Supabase auth method, including the required openid scope for Keycloak version 22+
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
async function signInWithKeycloak() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'keycloak',
    options: {
      scopes: 'openid',
    },
  })
}
```

----------------------------------------

TITLE: Supabase Storage Upload Command Usage
DESCRIPTION: Command line syntax for uploading downloaded files to a Supabase Storage bucket, specifying prefix, source folder, and target bucket name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firebase-storage.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
node upload.js <prefix> <folder> <bucket>
```

----------------------------------------

TITLE: Configuring Specific Seed Files - TOML
DESCRIPTION: Configuration snippet for `supabase/config.toml` to enable database seeding and specify a list of individual SQL files to be executed as seeds. The paths are relative to the `supabase` directory.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#_snippet_1

LANGUAGE: toml
CODE:
```
[db.seed]
enabled = true
sql_paths = ['./countries.sql', './cities.sql']
```

----------------------------------------

TITLE: Creating a Custom Embedding Input Function in SQL
DESCRIPTION: This function customizes the input text for embedding generation by concatenating the title and content fields with markdown formatting. This allows for more meaningful embeddings that incorporate multiple text fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- Customize the input for embedding generation
-- e.g. Concatenate title and content with a markdown header
create or replace function embedding_input(doc documents)
returns text
language plpgsql
immutable
as $$
begin
  return '# ' || doc.title || E'\n\n' || doc.content;
end;
$$;
```

----------------------------------------

TITLE: Installing PostgreSQL Client on Linux
DESCRIPTION: Bash commands to install the PostgreSQL client on Linux (Debian) systems. This is needed for external connections to handle long-running index creation operations that exceed dashboard time limits.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
sudo apt-get update
sudo apt-get install postgresql-client
```

----------------------------------------

TITLE: Setting Up Supabase Functions for FCM Push Notifications
DESCRIPTION: Bash commands to initialize Supabase in your working directory and create a new edge function for handling push notifications. These commands prepare the environment for implementing FCM push notifications.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/push-notifications.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
# Initialize Supabase in your working directory
supabase init
# Create the push edge function
supabase functions new push
```

----------------------------------------

TITLE: Implementing Async Cache Updates with waitUntil in Cloudflare Worker
DESCRIPTION: Router implementation that handles POST requests to the revalidate endpoint. Uses waitUntil to update KV store cache asynchronously after sending an immediate response. Manages Supabase data synchronization for INSERT, UPDATE, and DELETE operations.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/caching/with-cloudflare-workers-kv/README.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
router.post(
  "/revalidate",
  withContent,
  async (request, { SUPABASE_URL, SUPABASE_ANON_KEY, ARTICLES }, context) => {
    const updateCache = async () => {
      const { type, record, old_record } = request.content;
      const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

      if (type === "INSERT" || type === "UPDATE") {
        await writeTo(ARTICLES, `/articles/${record.id}`, record);
      }

      if (type === "DELETE") {
        await ARTICLES.delete(`/articles/${old_record.id}`);
      }

      const { data: articles } = await supabase.from("articles").select("*");
      await writeTo(ARTICLES, "/articles", articles);
      console.log("updated cache");
    };

    context.waitUntil(updateCache());

    console.log("sending response");

    return json({ received: true });
  }
);
```

----------------------------------------

TITLE: Creating an Immutable Function for Better Optimization
DESCRIPTION: A PostgreSQL function marked as IMMUTABLE for better query optimization that concatenates first and last names to create a full name.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-functions.md#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create or replace function my_schema.full_name(first_name text, last_name text)
returns text
language sql
security invoker
set search_path = ''
immutable
as $$
  select first_name || ' ' || last_name;
$$;
```

----------------------------------------

TITLE: Inserting Array Data in SQL
DESCRIPTION: This SQL snippet inserts a record into the 'arraytest' table with an id of 1 and a text array containing three elements.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
INSERT INTO arraytest (id, textarray) VALUES (1, ARRAY['Harry', 'Larry', 'Moe']);
```

----------------------------------------

TITLE: FormField Example with React Hook Form
DESCRIPTION: Example of implementing a FormField component with React Hook Form, showing how to use FormLabel, FormControl with Input, FormDescription, and FormMessage together.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/form.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
const form = useForm()

<FormField
  control={form.control}
  name="username"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Username</FormLabel>
      <FormControl>
        <Input placeholder="shadcn" {...field} />
      </FormControl>
      <FormDescription>This is your public display name.</FormDescription>
      <FormMessage />
    </FormItem>
  )}
/>
```

----------------------------------------

TITLE: Disabling Prepared Statements in Prisma with Connection String Configuration
DESCRIPTION: Adds the pgbouncer=true parameter to the end of the Prisma connection string to disable prepared statements when using Supavisor in transaction mode.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/disabling-prepared-statements-qL8lEL.mdx#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
postgres://[db-user].[project-ref]:[db-password]@aws-0-[aws-region].pooler.supabase.com:6543/[db-name]?pgbouncer=true
```

----------------------------------------

TITLE: Creating Users in PostgreSQL
DESCRIPTION: SQL commands to create new users within a PostgreSQL instance. This shows how to create the default 'postgres' user and additional users with passwords.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-faq-YyP5tI.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE USER postgres WITH PASSWORD 'super-secret-password;
CREATE USER some_new_user WITH PASSWORD 'password';
```

----------------------------------------

TITLE: Ordering by Related Tables in PostgREST
DESCRIPTION: Demonstrates how to order query results based on a column from a related table. This feature is applicable for one-to-one and many-to-one relationships.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-postgrest-11-prerelease.mdx#2025-04-21_snippet_2

LANGUAGE: http
CODE:
```
GET /films?select=title,...technical_specs(duration)&order=technical_specs(duration).desc
```

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase
  .from('films')
  .select(`
    title,
    ...technical_specs (
      duration
    )
  `)
   .order('technical_specs(duration)', { descending: true }))
```

LANGUAGE: json
CODE:
```
[
  {
    "title": "Amra Ekta Cinema Banabo",
    "duration": "21:05:00"
  },
  {
    "title": "Resan",
    "duration": "14:33:00"
  },
  "..."
]
```

----------------------------------------

TITLE: Configuring the Supabase client in refine
DESCRIPTION: Code to configure the Supabase client with your Supabase URL and API key. This client is used in auth provider and data provider methods to connect the refine app to your Supabase backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/refine.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createClient } from "@refinedev/supabase";

const SUPABASE_URL = YOUR_SUPABASE_URL;
const SUPABASE_KEY = YOUR_SUPABASE_KEY

export const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY, {
  db: {
    schema: "public",
  },
  auth: {
    persistSession: true,
  },
});
```

----------------------------------------

TITLE: Integrating Avatar Component into Account Page
DESCRIPTION: Shows how to integrate the Avatar component into an Account page. The component is used with the user's existing avatar URL and an update profile function to handle uploads.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_11

LANGUAGE: jsx
CODE:
```
// Import the new component

import { Avatar } from '../components/Avatar';

// ...
return (
  <IonPage>
    <IonHeader>
      <IonToolbar>
        <IonTitle>Account</IonTitle>
      </IonToolbar>
    </IonHeader>

    <IonContent>
      <Avatar url={profile.avatar_url} onUpload={updateProfile}></Avatar>
```

----------------------------------------

TITLE: Querying JSONB Arrays with jsonb_array_elements in PostgreSQL
DESCRIPTION: Demonstrates how to convert JSONB arrays into tabular data using jsonb_array_elements(). The query extracts food log entries from the JSONB field and outputs them as rows with columns for title, calories, and meal type.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select
  user_id,
  date,
  jsonb_array_elements(food_log)->>'title' as title,
  jsonb_array_elements(food_log)->'calories' as calories,
  jsonb_array_elements(food_log)->'meal' as meal
from calendar
where user_id = 'xyz'
  and date between '2022-01-01' and '2022-01-31';
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase
DESCRIPTION: Environment variable configuration for Supabase URL and anonymous key authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/react-user-management/README.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Implementing OAuth Callback Route
DESCRIPTION: Flask route handler for processing OAuth callback and exchanging authorization code for session token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-21-oauth2-login-python-flask-apps.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
@app.route("/callback")
def callback():
    code = request.args.get("code")
    next = request.args.get("next", "/")

    if code:
        res = supabase.auth.exchange_code_for_session({"auth_code": code})

    return redirect(next)
```

----------------------------------------

TITLE: Calling PostgreSQL Function via RPC with Large Data
DESCRIPTION: JavaScript code demonstrating how to call the database function through RPC, passing a large array of UUIDs in the request payload rather than the URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.rpc('example', { id: ['e2f34fb9-bbf9-4649-9b2f-09ec56e67a42', ...900 more UUIDs] })
```

----------------------------------------

TITLE: Filtering Out Routine Postgres Log Events in SQL
DESCRIPTION: SQL WHERE clause to exclude common routine events like cron jobs, PgBouncer events, checkpoints, and successful connections when analyzing logs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
...query
where
  -- Excluding routine events related to cron, PgBouncer, checkpoints, and successful connections
  not regexp_contains(event_message, '^cron|PgBouncer|checkpoint|connection received|authenticated|authorized';
```

----------------------------------------

TITLE: Creating a SQL View to Expose Vector Data
DESCRIPTION: Shows how to create a SQL view that exposes vector data to make it accessible through the Supabase client libraries. The view selects relevant fields and can transform metadata into specific columns.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_7

LANGUAGE: sql
CODE:
```
create view public.docs as
    select
        id,
        embedding,
        metadata, # Expose the metadata as JSON
        (metadata->>'url')::text as url # Extract the URL as a string
    from
        vecs.docs
```

----------------------------------------

TITLE: Creating a Subscription on External Postgres Database
DESCRIPTION: Sets up a subscription on the external database that connects to the Supabase database and subscribes to the publication. This subscription will receive all changes published to example_pub.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/setup-replication-external.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
CREATE SUBSCRIPTION example_sub
CONNECTION 'host=db.oaguxblfdassqxvvwtfe.supabase.co user=postgres password=YOUR_PASS dbname=postgres'
PUBLICATION example_pub
WITH (copy_data = true, create_slot=false, slot_name=example_slot);
```

----------------------------------------

TITLE: Installing Supabase Dependencies
DESCRIPTION: Command to install required Supabase packages for authentication integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
cd my-app && npm install @supabase/supabase-js @supabase/auth-ui-react @supabase/auth-ui-shared
```

----------------------------------------

TITLE: Scheduling HTTP Requests with pg_cron in PostgreSQL
DESCRIPTION: Sets up a scheduled cron job to make HTTP POST requests to an Edge function endpoint every minute using pg_cron extension. Requires pg_cron and pg_net extensions to be installed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_18

LANGUAGE: sql
CODE:
```
select cron.schedule(
	'cron-job-name',
	'* * * * *', -- Executes every minute (cron syntax)
	$$
	    -- SQL query
	    select "net"."http_post"(
            -- URL of Edge function
            url:='https://project-ref.supabase.co/functions/v1/function-name',
            headers:='{"Authorization": "Bearer <YOUR_ANON_KEY>"}'::jsonb,
            body:='{"name": "pg_net"}'::jsonb
	    ) as "request_id";
	$$
);
```

----------------------------------------

TITLE: Interacting with Database through Rails Console
DESCRIPTION: Ruby code showing how to create and query Article records using the Rails console.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_4

LANGUAGE: ruby
CODE:
```
article = Article.new(title: "Hello Rails", body: "I am on Rails!")
article.save

Article.all
```

----------------------------------------

TITLE: Executing Hybrid Search Query
DESCRIPTION: Example SQL query demonstrating how to call the hybrid search function with query text and embedding vector.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
select
  *
from
  hybrid_search(
    'Italian recipes with tomato sauce', -- user query
    '[...]'::vector(512), -- embedding generated from user query
    10
  );
```

----------------------------------------

TITLE: Using Auth Admin Methods in TypeScript
DESCRIPTION: Demonstrates the new location of server-side Auth methods under the admin namespace in supabase-js v2.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
// v2
const { data: user, error } = await supabase.auth.admin.listUsers()

// v1
const { data: user, error } = await supabase.auth.api.listUsers()
```

----------------------------------------

TITLE: Updating PostgreSQL Max Connections with Supabase CLI
DESCRIPTION: Commands to update the maximum connection limit using Supabase CLI. Requires project reference and desired connection count.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-change-max-database-connections-_BQ8P5.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
npx supabase login

npx supabase --experimental --project-ref <PROJECT REF> postgres-config update --config max_connections=<INTEGER VALUE>
```

----------------------------------------

TITLE: Implementing Daily Partition Creation Cron Job in PostgreSQL
DESCRIPTION: Sets up an automated daily partition creation system using pg_cron to create new partitions one hour before midnight each day.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE PROCEDURE app.create_daily_partition(today date)
    LANGUAGE plpgsql AS
$$
BEGIN
    CALL app.create_chats_partition(today);
    CALL app.create_chat_messages_partition(today);
END;
$$;

SELECT cron.schedule('new-chat-partition', '0 23 * * *', 'CALL app.create_daily_partition(now()::date + "interval 1 day")');
COMMIT;
```

----------------------------------------

TITLE: Adding User-Defined Descriptions in SQL
DESCRIPTION: This SQL snippet demonstrates how to add user-defined descriptions to tables and columns using the comment directive system in pg_graphql v1.2. It creates a 'book' table and adds descriptions to both the table and its 'title' column.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create table public.book(
    id int primary key,
    title text not null
);

comment on table public.book
is e'@graphql({"description": "a library book"}';

comment on column public.book.title
is e'@graphql({"description": "the title of the book"}';
```

----------------------------------------

TITLE: Adding Jackson serializer dependency in Maven POM file
DESCRIPTION: This XML snippet shows how to add the Jackson serializer dependency in a Maven project. It's required for using Jackson as the serialization method in supabase-kt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_17

LANGUAGE: xml
CODE:
```
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>serializer-jackson</artifactId>
    <version>VERSION</version>
</dependency>
```

----------------------------------------

TITLE: Configuring Ktor Engines for Kotlin Multiplatform
DESCRIPTION: Sets up Ktor client engines for different platforms in a Kotlin Multiplatform project using Gradle Kotlin DSL. This includes configurations for JVM, Android, JavaScript, and iOS targets.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_6

LANGUAGE: kotlin
CODE:
```
val commonMain by getting {
    dependencies {
        //supabase modules
    }
}
val jvmMain by getting {
    dependencies {
        implementation("io.ktor:ktor-client-cio:KTOR_VERSION")
    }
}
val androidMain by getting {
    dependsOn(jvmMain)
}
val jsMain by getting {
    dependencies {
        implementation("io.ktor:ktor-client-js:KTOR_VERSION")
    }
}
val iosMain by getting {
    dependencies {
        implementation("io.ktor:ktor-client-darwin:KTOR_VERSION")
    }
}
```

----------------------------------------

TITLE: Initiating Apple Sign-In with Flutter and Supabase (Dart)
DESCRIPTION: This Dart function `signInWithApple` demonstrates how to start the Apple Sign-In process in a Flutter application using the `sign_in_with_apple` package. It generates a cryptographically secure nonce, hashes it, and requests the Apple ID credential with specified scopes (email, full name). The generated nonce and the obtained credential are prerequisites for completing the sign-in process with Supabase Auth.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-apple.mdx#_snippet_4

LANGUAGE: dart
CODE:
```
import 'package:sign_in_with_apple/sign_in_with_apple.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:crypto/crypto.dart';

/// Performs Apple sign in on iOS or macOS
Future<AuthResponse> signInWithApple() async {
  final rawNonce = supabase.auth.generateRawNonce();
  final hashedNonce = sha256.convert(utf8.encode(rawNonce)).toString();

  final credential = await SignInWithApple.getAppleIDCredential(
    scopes: [
      AppleIDAuthorizationScopes.email,
      AppleIDAuthorizationScopes.fullName,

```

----------------------------------------

TITLE: Creating React Query Client Provider Component in Next.js
DESCRIPTION: TypeScript React component that creates and provides a React Query client for the application, with default options for stale time to optimize SSR behavior.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
'use client'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { useState } from 'react'

export const ReactQueryClientProvider = ({ children }: { children: React.ReactNode }) => {
  const [queryClient] = useState(
    () =>
      new QueryClient({
        defaultOptions: {
          queries: {
            // With SSR, we usually want to set some default staleTime
            // above 0 to avoid refetching immediately on the client
            staleTime: 60 * 1000,
          },
        },
      })
  )
  return <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
}
```

----------------------------------------

TITLE: Configuring Supavisor Session Mode Connection String for Prisma
DESCRIPTION: Example of a Supavisor connection string in session mode for Prisma, suitable for IPv4-only environments and migrations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_9

LANGUAGE: markdown
CODE:
```
postgres://[DB-USER].[PROJECT REF]:[PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres
```

----------------------------------------

TITLE: Creating a Publication for Delete Events Only in SQL
DESCRIPTION: Creates a publication that only tracks delete operations on all tables, ignoring inserts and updates. This allows you to track only when data is removed from tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create publication publication_name
for all tables
with (publish = 'delete');
```

----------------------------------------

TITLE: Creating an Index for Vector Querying
DESCRIPTION: Creates an index on the collection for efficient querying. Should be done after populating the collection with records.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/vector_hello_world.ipynb#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
# index the collection to be queried by cosine distance
docs.create_index(measure=vecs.IndexMeasure.cosine_distance)
```

----------------------------------------

TITLE: Reading Multiple Queue Messages with Visibility Timeout
DESCRIPTION: Function to read multiple messages from a queue with a specified visibility timeout. Takes queue name, visibility timeout in seconds, and maximum number of messages to read as parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/api.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
pgmq_public.read(queue_name text, sleep_seconds integer, n integer)
```

----------------------------------------

TITLE: Starting Supabase Locally with CLI
DESCRIPTION: Command to start Supabase locally using the Supabase CLI, which sets up the necessary environment for the ChatGPT Retrieval Plugin.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/building-chatgpt-plugins.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase start
```

----------------------------------------

TITLE: Implementing User Invitation System with Supabase
DESCRIPTION: A function that handles inviting users to boards by finding a user by email and adding them to the board. It first checks if the user exists, and if so, creates an entry in the user_boards table to grant them access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
  // Invite others
  async addUserToBoard(boardId: string, email: string) {
    const user = await this.supabase
      .from(USERS_TABLE)
      .select('id')
      .match({ email })
      .single();

    if (user.data?.id) {
      const userId = user.data.id;
      const userBoard = await this.supabase.from(USER_BOARDS_TABLE).insert({
        user_id: userId,
        board_id: boardId,
      });
      return userBoard;
    } else {
      return null;
    }
  }
```

----------------------------------------

TITLE: Handling Deep Links in Supabase Flutter
DESCRIPTION: Demonstrates the simplified deep link handling in version 1.0 which no longer requires implementation of special auth state classes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-02-supabase-flutter-sdk-1-developer-preview.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
// Before
void onReceivedAuthDeeplink(Uri uri) {
  Supabase.instance.log('onReceivedAuthDeeplink uri: $uri');
}

// After
await Supabase.instance.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
);
```

----------------------------------------

TITLE: Basic Carousel Usage in React
DESCRIPTION: Example of basic carousel usage with content, items, and navigation buttons.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/carousel.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Carousel>
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
  <CarouselPrevious />
  <CarouselNext />
</Carousel>
```

----------------------------------------

TITLE: Integrating Avatar Component in Account Page
DESCRIPTION: Updates the Account page to include the Avatar component, enabling profile photo functionality. The snippet shows how to properly include the component and bind it to the user's profile data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_12

LANGUAGE: html
CODE:
```
<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-title>Account</ion-title>
      </ion-toolbar>
    </ion-header>

    <ion-content>
      <avatar v-model:path="profile.avatar_url" @upload="updateProfile"></avatar>
...
</template>
<script lang="ts">
import Avatar from '../components/Avatar.vue';
export default defineComponent({
  name: 'AccountPage',
  components: {
    Avatar,
    ....
  }

</script>
```

----------------------------------------

TITLE: Configuring Auth Redirect URLs in TOML
DESCRIPTION: This snippet demonstrates how to configure additional redirect URLs for the Auth service in Supabase, including support for Vercel preview URLs and local development.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-04-cli-v2-config-as-code.mdx#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[auth]
additional_redirect_urls = [
  "https://*-supabase.vercel.app/*/*",
  "https://supabase.com/*/*",
  "http://localhost:3000/*/*",
]
```

----------------------------------------

TITLE: Initializing Supabase Client with AWS Cognito in Swift
DESCRIPTION: This Swift code illustrates setting up a Supabase client with AWS Amplify for iOS. It uses AWSPluginsCore and requires the implementation of an access token retrieval strategy, utilizing 'Amplify.Auth.fetchAuthSession'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/aws-cognito.mdx#2025-04-21_snippet_1

LANGUAGE: swift
CODE:
```
import Supabase
import AWSPluginsCore

struct UnexpectedAuthSessionError: Error {}

let supabase = SupabaseClient(
  supabaseURL: URL(string: "https://<supabase-project>.supabase.co")!,
  supabaseKey: "SUPABASE_ANON_KEY",
  options: SupabaseClientOptions(
    auth: SupabaseClientOptions.AuthOptions(
      accessToken: {
        let session = try await Amplify.Auth.fetchAuthSession()

        guard let cognitoTokenProvider = session as? AuthCognitoTokensProvider else {
          throw UnexpectedAuthSessionError()
        }

        let tokens = try cognitoTokenProvider.getCognitoTokens().get()
        return tokens.idToken
      }
    )
  )
)
```

----------------------------------------

TITLE: Adding Kotlin Serialization Plugin
DESCRIPTION: Adds the Kotlin serialization plugin to handle JSON serialization/deserialization with Supabase responses.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_4

LANGUAGE: kotlin
CODE:
```
plugins {
    ...
    id 'org.jetbrains.kotlin.plugin.serialization' version '$kotlin_version'
    ...
}
```

----------------------------------------

TITLE: Creating Inherited Role in PostgreSQL
DESCRIPTION: Creates a new role that inherits permissions from a parent role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/roles.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create role "child_role_name" inherit "parent_role_name";
```

----------------------------------------

TITLE: Setting Global Database Timeout
DESCRIPTION: Sets a global statement timeout of 4 seconds for the postgres database that applies to all roles and sessions without explicit timeouts.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
alter database postgres set statement_timeout TO '4s';
```

----------------------------------------

TITLE: Enabling and Disabling the HTTP Extension in PostgreSQL
DESCRIPTION: SQL commands to enable the 'http' extension within a separate schema and to disable it if needed. Creating the extension in a separate schema helps keep the 'public' schema clean.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/http.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Example: enable the "http" extension
create extension http with schema extensions;

-- Example: disable the "http" extension
drop extension if exists http;
```

----------------------------------------

TITLE: Execute pgloader Migration Command
DESCRIPTION: Bash command to execute the database migration using pgloader with a configuration file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/mysql.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
pgloader config.load
```

----------------------------------------

TITLE: Creating Basic Arithmetic Function in SQL for GraphQL
DESCRIPTION: A simple SQL function that adds two numbers together. The function is immutable and will be exposed as a Query in the GraphQL schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create function "addNums"(a int, b int default 1)
returns int
immutable
language sql
as $$
	select a + b;
$$;
```

----------------------------------------

TITLE: Configuring Supabase Server for Windows
DESCRIPTION: JSON configuration for setting up Supabase server on Windows systems. Uses cmd.exe as the command shell and includes necessary environment setup.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_vscode_config.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "inputs": [
    {
      "type": "promptString",
      "id": "supabase-access-token",
      "description": "Supabase personal access token",
      "password": true
    }
  ],
  "servers": {
    "supabase": {
      "command": "cmd",
      "args": ["/c", "npx", "-y", "@supabase/mcp-server-supabase@latest"],
      "env": {
        "SUPABASE_ACCESS_TOKEN": "${input:supabase-access-token}"
      }
    }
  }
}
```

----------------------------------------

TITLE: Scheduling Periodic Database Function Call in Supabase
DESCRIPTION: This SQL snippet schedules a cron job to call a database function named hello_world() every 5 minutes. It demonstrates how to use cron.schedule to execute custom database functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
select cron.schedule('call-db-function', '*/5 * * * *', 'SELECT hello_world()');
```

----------------------------------------

TITLE: Defining Profile Data Model (Swift, Codable)
DESCRIPTION: This Swift struct (`Profile`) defines the data structure for user profile information. It conforms to the `Codable` protocol, allowing it to be easily encoded and decoded when interacting with the Supabase database. It includes properties for username, full name, website, and avatar URL, using `CodingKeys` to map snake_case database column names to camelCase Swift property names.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#_snippet_7

LANGUAGE: Swift
CODE:
```
struct Profile: Codable {
  let username: String?
  let fullName: String?
  let website: String?
  let avatarURL: String?

  enum CodingKeys: String, CodingKey {
    case username
    case fullName = "full_name"
    case website
    case avatarURL = "avatar_url"
  }
}
```

----------------------------------------

TITLE: API Request Using Environment Variable
DESCRIPTION: Improved cURL command using the stored environment variable for the API key, demonstrating a cleaner approach to making authenticated requests to the Supabase PostgREST API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
curl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/bulletins?select=*' \
 -H 'accept-profile: public' \
 -H "apikey: $ANON_KEY" \
 -H "authorization: Bearer $ANON_KEY"
```

----------------------------------------

TITLE: Implementing MapLibre GL Popup with Dynamic Supabase Data Loading
DESCRIPTION: Sets up a MapLibre GL popup handler that displays basic POI information and fetches additional metadata on demand from a Supabase 'places' table. The implementation includes click event handling on the map layer and a dynamic data loading function that updates the popup content.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-26-postgis-generate-vector-tiles.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const popup = new maplibregl.Popup({
  closeButton: true,
  closeOnClick: false,
  maxWidth: 'none',
})

function loadDetails(element, id) {
  element.innerHTML = 'loading...'
  client
    .from('places')
    .select(
      `
          websites,
          socials,
          phones,
          addresses,
          source:  sources->0->dataset
        `
    )
    .eq('id', id)
    .single()
    .then(({ data, error }) => {
      if (error) return console.error(error)
      element.parentElement.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`
    })
}

map.on('click', 'overture-pois-text', async (e) => {
  if (e.features.length > 0) {
    const feature = e.features[0]
    console.log(feature)
    popup.setHTML(
      `
        <table style="font-size:12px">
            <tr>
                <td>id:</td>
                <td>${feature.properties.id}</td>
            </tr>
            <tr>
                <td>name:</td>
                <td>${feature.properties.primary_name}</td>
            </tr>
            <tr>
                <td>main_category:</td>
                <td>${feature.properties.main_category}</td>
            </tr>
            <tr>
                <td>details:</td>
                <td>
                  <span onclick="loadDetails(this, '${feature.properties.id}')">
                    load details
                  </span>
                </td>
            </tr>
        </table>
      `
    )
    popup.setLngLat(e.lngLat)
    popup.addTo(map)
  }
})
```

----------------------------------------

TITLE: Initializing Supabase Client with Third-Party Auth Provider in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Supabase client using a third-party authentication provider (Auth0 in this example). It uses an async function to retrieve the access token from Auth0 and pass it to the Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-14-third-party-auth-mfa-phone-send-hooks.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  accessToken: async () => {
    const accessToken = await auth0.getTokenSilently()
    return accessToken
  },
})
```

----------------------------------------

TITLE: Creating Table with Generated SemVer Text Column in SQL
DESCRIPTION: Demonstrates how to use a generated column to store the text representation of a SemVer alongside its structured form.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-17-type-constraints-in-65-lines-of-sql.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create table package_version(
    id bigserial primary key,
    package_name text not null,
    package_semver semver not null,
  semver_text text generated always as (semver_to_text(package_semver)) stored
);
```

----------------------------------------

TITLE: Generating a JWT for Impersonating a Role with Node.js
DESCRIPTION: This JavaScript snippet creates a JWT token using the 'jsonwebtoken' library in Node.js for a user with the 'manager' role. The token is signed with a secret key, allowing role impersonation for API access. It requires 'jsonwebtoken' and stores the JWT secret securely, ensuring it is never publicly exposed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/custom-roles.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const jwt = require('jsonwebtoken')

const JWT_SECRET = 'your-jwt-secret' // You can find this in your Supabase project settings under API. Store this securely.
const USER_ID = '' // the user id that we want to give the manager role

const token = jwt.sign({ role: 'manager', sub: USER_ID }, JWT_SECRET, {
  expiresIn: '1h',
})
```

----------------------------------------

TITLE: Displaying Current User Avatar in React
DESCRIPTION: This code snippet demonstrates how to import and use the CurrentUserAvatar component within a React application. It showcases the component's integration within a header element, rendering the current user's avatar or a fallback. The component automatically fetches user data from Supabase Auth.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/current-user-avatar.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { CurrentUserAvatar } from '@/components/current-user-avatar'

const CurrentUserAvatarDemo = () => {
  return (
    <Header className="flex items-center justify-between">
      <h1>Lumon Industries</h1>
      <CurrentUserAvatar />
    </Header>
  )
}

export default CurrentUserAvatarDemo
```

----------------------------------------

TITLE: Implementing Twitch Sign-Out Code in Kotlin
DESCRIPTION: This snippet describes how to use the Supabase Kotlin client to sign out the user who has authenticated with Twitch OAuth, ensuring that session information is cleared.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {\n\tsupabase.auth.signOut()\n}
```

----------------------------------------

TITLE: Local Development of Supabase Location Function
DESCRIPTION: Command to serve the location function locally with environment variables loaded from a .env.local file. The --no-verify-jwt flag disables JWT verification for testing purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/location/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions serve --env-file ./supabase/.env.local --no-verify-jwt
```

----------------------------------------

TITLE: JavaScript Implementation of Bounding Box Search
DESCRIPTION: JavaScript example showing how to call the PostGIS bounding box search function using Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.rpc('restaurants_in_view', {
  min_lat: 40.807,
  min_long: -73.946,
  max_lat: 40.808,
  max_long: -73.945,
})
```

----------------------------------------

TITLE: Writing Short Queries in Postgres SQL
DESCRIPTION: Examples of concise SQL queries for selecting and updating data. Shows recommended formatting for simple queries that fit on a few lines with proper spacing for readability.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select *
from employees
where end_date is null;

update employees
set end_date = '2023-12-31'
where employee_id = 1001;
```

----------------------------------------

TITLE: Creating Auth Hook Function in JavaScript (PLV8)
DESCRIPTION: JavaScript function using PLV8 to implement a custom access token hook for adding user roles to JWT claims.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- Enable the "plv8" extension
create extension plv8;

-- Create the auth hook function
create or replace function custom_access_token_hook(event jsonb)
returns jsonb
language plv8
as $$
  var user_role;

  // Fetch the current user's user_role from the public user_roles table.
  var result = plv8.execute("select role from public.user_roles where user_id = $1", [event.user_id]);
  if (result.length > 0) {
    user_role = result[0].role;
  } else {
    // Assign null
    user_role = null;
  }

  // Check if 'claims' exists in the event object; if not, initialize it
  if (!event.claims) {
    event.claims = {};
  }

  // Update the level in the claims
  event.claims.user_role = user_role;

  return event;
$$;

grant usage on schema public to supabase_auth_admin;

grant execute
  on function public.custom_access_token_hook
  to supabase_auth_admin;

revoke execute
  on function public.custom_access_token_hook
  from authenticated, anon, public;

grant all
  on table public.user_roles
to supabase_auth_admin;

revoke all
  on table public.user_roles
  from authenticated, anon, public;

create policy "Allow auth admin to read user roles" ON public.user_roles
as permissive for select
to supabase_auth_admin
using (true)
```

----------------------------------------

TITLE: Creating Restrictive RLS Policy for Firebase Auth in SQL
DESCRIPTION: Defines a restrictive Row-Level Security policy in SQL to restrict access to only authenticated users from the specified Supabase and Firebase projects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create policy "Restrict access to Supabase Auth and Firebase Auth for project ID <firebase-project-id>"
  on table_name
  as restrictive
  to authenticated
  using (
    (auth.jwt()->>'iss' = 'https://<project-ref>.supabase.co/auth/v1')
    or
    (
        auth.jwt()->>'iss' = 'https://securetoken.google.com/<firebase-project-id>'
        and
        auth.jwt()->>'aud' = '<firebase-project-id>'
     )
  );
```

----------------------------------------

TITLE: Updating createClient configuration in TypeScript
DESCRIPTION: Example of how to update the createClient configuration when upgrading to supabase-js v2. The new version uses a more explicit options structure.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  db: {
    schema: 'custom',
  },
  auth: {
    persistSession: true,
  },
})
```

----------------------------------------

TITLE: Optimizing Image Quality with Supabase Storage in Python
DESCRIPTION: This snippet shows how to download an image from Supabase Storage with a quality transformation of 50% using the Python client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_26

LANGUAGE: Python
CODE:
```
response = supabase.storage.from_('bucket').download(
  'image.jpg',
  {
    'transform': {
      'quality': 50,
    },
  }
)
```

----------------------------------------

TITLE: PostgreSQL MERGE Operation Example
DESCRIPTION: Shows the new MERGE syntax introduced in PostgreSQL 15 for conditional data modification operations that can replace complex CTEs or procedural functions
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-new-in-postgres-15.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
MERGE
```

----------------------------------------

TITLE: Simulating Long-Running Query in PostgreSQL
DESCRIPTION: Example of an inefficient query that sleeps for 60 seconds, demonstrating how slow queries can create connection bottlenecks in Supavisor.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-faq-YyP5tI.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
-- do nothing for 60 seconds
select pg_sleep(60);
```

----------------------------------------

TITLE: Creating WebSocket Server with Deno in Edge Functions
DESCRIPTION: A basic example of setting up a WebSocket server using Deno's native WebSocket API. This code handles the WebSocket upgrade, manages connection events (open, message, error, close), and responds to client messages by sending back the current timestamp.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/websockets.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
Deno.serve((req) => {
  const upgrade = req.headers.get('upgrade') || ''

  if (upgrade.toLowerCase() != 'WebSocket') {
    return new Response("request isn't trying to upgrade to WebSocket.", { status: 400 })
  }

  const { socket, response } = Deno.upgradeWebSocket(req)

  socket.onopen = () => console.log('socket opened')
  socket.onmessage = (e) => {
    console.log('socket message:', e.data)
    socket.send(new Date().toString())
  }

  socket.onerror = (e) => console.log('socket errored:', e.message)
  socket.onclose = () => console.log('socket closed')

  return response
})
```

----------------------------------------

TITLE: Creating Searchable Column with PostgreSQL
DESCRIPTION: Creates a tsvector column 'fts' using PostgreSQL Generated Columns to store searchable index of title and description. Includes creating a GIN index for improved search performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_26

LANGUAGE: sql
CODE:
```
alter table
  books
add column
  fts tsvector generated always as (to_tsvector('english', description || ' ' || title)) stored;

create index books_fts on books using gin (fts);

select id, fts
from books;
```

----------------------------------------

TITLE: Installing Dependencies for Supabase and Fetch-Retry
DESCRIPTION: Command to install the required npm packages supabase-js and fetch-retry
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/automatic-retries-in-supabase-js.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js fetch-retry
```

----------------------------------------

TITLE: Decompressing Gzip Requests in TypeScript Edge Function
DESCRIPTION: Example showing how to decompress Gzip encoded request bodies using node:zlib's gunzipSync. The code checks for Gzip encoding, decompresses the body, converts it to a string, and parses it as JSON. Includes error handling and a warning about the 150MB memory limit.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/compression.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { gunzipSync } from 'node:zlib'

Deno.serve(async (req) => {
  try {
    // Check if the request body is gzip compressed
    const contentEncoding = req.headers.get('content-encoding')
    if (contentEncoding !== 'gzip') {
      return new Response('Request body is not gzip compressed', {
        status: 400,
      })
    }

    // Read the compressed body
    const compressedBody = await req.arrayBuffer()

    // Decompress the body
    const decompressedBody = gunzipSync(new Uint8Array(compressedBody))

    // Convert the decompressed body to a string
    const decompressedString = new TextDecoder().decode(decompressedBody)
    const data = JSON.parse(decompressedString)

    // Process the decompressed body as needed
    console.log(`Received: ${JSON.stringify(data)}`)

    return new Response('ok', {
      headers: { 'Content-Type': 'text/plain' },
    })
  } catch (error) {
    console.error('Error:', error)
    return new Response('Error processing request', { status: 500 })
  }
})
```

----------------------------------------

TITLE: Inserting Array Data with Python Supabase Client
DESCRIPTION: This Python snippet uses the Supabase client to insert a record into the 'arraytest' table with an id of 2 and a text array containing four elements.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
supabase.from_('arraytest').insert(
  [
    {
      id: 2,
      textarray: ["one", "two", "three", "four"]
    }
  ]
)
.execute()
```

----------------------------------------

TITLE: Querying Index Usage in PostgreSQL using michelp-adminpack
DESCRIPTION: This SQL snippet represents the structure of the index_usage view from the michelp-adminpack. It shows the columns available for identifying potentially unused indexes that can be dropped, including schema and table names, index details, and usage statistics.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_6

LANGUAGE: sql
CODE:
```
| Column          | Type   |
| --------------- | ------ |
| schemaname      | name   |
| tablename       | name   |
| num_rows        | bigint |
| table_size      | text   |
| index_name      | name   |
| index_size      | text   |
| unique          | text   |
| number_of_scans | bigint |
| tuples_read     | bigint |
| tuples_fetched  | bigint |
```

----------------------------------------

TITLE: Installing and Setting Up LangChain's Hybrid Search Extension with dbdev
DESCRIPTION: Demonstrates installing the langchain-hybrid_search package using dbdev. This extension provides a Supabase backend for LangChain's document search tool that combines document embeddings and full text search capabilities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_2

LANGUAGE: sql
CODE:
```
select
  dbdev.install ('langchain-hybrid_search');

create extension if not exists vector;

create extension "langchain-hybrid_search" schema public version '1.0.0';
```

----------------------------------------

TITLE: Inserting Data without Returning - Dart Supabase
DESCRIPTION: Demonstrates changes in data insertion method without returning inserted records between Supabase Dart library versions
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_13

LANGUAGE: dart
CODE:
```
await supabase
  .from('my_table')
  .insert(data, returning: ReturningOption.minimal)
  .execute();
```

LANGUAGE: dart
CODE:
```
await supabase.from('my_table').insert(data);
```

----------------------------------------

TITLE: Implementing Supabase Module with Hilt
DESCRIPTION: Creates a Hilt module to provide Supabase client instances and individual service components as singletons.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_9

LANGUAGE: kotlin
CODE:
```
@InstallIn(SingletonComponent::class)
@Module
object SupabaseModule {

    @Provides
    @Singleton
    fun provideSupabaseClient(): SupabaseClient {
        return createSupabaseClient(
            supabaseUrl = BuildConfig.SUPABASE_URL,
            supabaseKey = BuildConfig.SUPABASE_ANON_KEY
        ) {
            install(Postgrest)
            install(Auth) {
                flowType = FlowType.PKCE
                scheme = "app"
                host = "supabase.com"
            }
            install(Storage)
        }
    }

    @Provides
    @Singleton
    fun provideSupabaseDatabase(client: SupabaseClient): Postgrest {
        return client.postgrest
    }

    @Provides
    @Singleton
    fun provideSupabaseAuth(client: SupabaseClient): Auth {
        return client.auth
    }


    @Provides
    @Singleton
    fun provideSupabaseStorage(client: SupabaseClient): Storage {
        return client.storage
    }

}
```

----------------------------------------

TITLE: Inserting Secrets into Supabase Vault in SQL
DESCRIPTION: Demonstrates how to insert a secret into the Supabase Vault. This method encrypts the secret before storing it in the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-supabase-vault.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
insert into vault.secrets
  (secret, associated)
values
  ('s3kr3t_k3y', 'This is the secret API service key.');
```

----------------------------------------

TITLE: Implementing Main Component for Vector Search in React
DESCRIPTION: This React component sets up the web worker, handles communication with the worker, and performs the vector search. It manages state for input, search results, and model loading status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
import { getDB, initSchema, countRows, seedDb, search } from './utils/db'
import { useState, useEffect, useRef, useCallback } from 'react'

export default function App() {
  // Keep track of the classification result and the model loading status.
  const [input, setInput] = useState('')
  const [content, setContent] = useState([])
  const [result, setResult] = useState(null)
  const [ready, setReady] = useState(null)
  const initailizing = useRef(false)

  // [...]

  // We use the `useEffect` hook to set up the worker as soon as the `App` component is mounted.
  useEffect(() => {
    if (!worker.current) {
      // Create the worker if it does not yet exist.
      worker.current = new Worker(new URL('./worker.js', import.meta.url), {
        type: 'module',
      })
    }

    // Create a callback function for messages from the worker thread.
    const onMessageReceived = async (e) => {
      switch (e.data.status) {
        case 'initiate':
          setReady(false)
          break
        case 'ready':
          setReady(true)
          break
        case 'complete':
          // Inner product search
          const searchResults = await search(db.current, e.data.embedding)
          console.log({ searchResults })
          setResult(searchResults.map((x) => x.content))
          break
      }
    }

    // Attach the callback function as an event listener.
    worker.current.addEventListener('message', onMessageReceived)

    // Define a cleanup function for when the component is unmounted.
    return () => worker.current.removeEventListener('message', onMessageReceived)
  })

  const classify = useCallback((text) => {
    if (worker.current) {
      worker.current.postMessage({ text })
    }
  }, [])

  // [...]
}
```

----------------------------------------

TITLE: Implementing Task API with Route Parameters in Vanilla Deno
DESCRIPTION: A vanilla Deno implementation for a task management API without using any frameworks. This example uses a router map and manual URL parsing to handle different routes and HTTP methods, demonstrating how to extract and utilize route parameters directly from the URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
interface Task {
  id: string
  name: string
}

let tasks: Task[] = []

const router = new Map<string, (req: Request) => Promise<Response>>()

async function getAllTasks(): Promise<Response> {
  return new Response(JSON.stringify(tasks))
}

async function getTask(id: string): Promise<Response> {
  const task = tasks.find((t) => t.id === id)
  if (task) {
    return new Response(JSON.stringify(task))
  } else {
    return new Response('Task not found', { status: 404 })
  }
}

async function createTask(req: Request): Promise<Response> {
  const id = Math.random().toString(36).substring(7)
  const task = { id, name: '' }
  tasks.push(task)
  return new Response(JSON.stringify(task), { status: 201 })
}

async function updateTask(id: string, req: Request): Promise<Response> {
  const index = tasks.findIndex((t) => t.id === id)
  if (index !== -1) {
    tasks[index] = { ...tasks[index] }
    return new Response(JSON.stringify(tasks[index]))
  } else {
    return new Response('Task not found', { status: 404 })
  }
}

async function deleteTask(id: string): Promise<Response> {
  const index = tasks.findIndex((t) => t.id === id)
  if (index !== -1) {
    tasks.splice(index, 1)
    return new Response('Task deleted successfully')
  } else {
    return new Response('Task not found', { status: 404 })
  }
}

Deno.serve(async (req) => {
  const url = new URL(req.url)
  const method = req.method
  // Extract the last part of the path as the command
  const command = url.pathname.split('/').pop()
  // Assuming the last part of the path is the task ID
  const id = command
  try {
    switch (method) {
      case 'GET':
        if (id) {
          return getTask(id)
        } else {
          return getAllTasks()
        }
      case 'POST':
        return createTask(req)
      case 'PUT':
        if (id) {
          return updateTask(id, req)
        } else {
          return new Response('Bad Request', { status: 400 })
        }
      case 'DELETE':
        if (id) {
          return deleteTask(id)
        } else {
          return new Response('Bad Request', { status: 400 })
        }
      default:
        return new Response('Method Not Allowed', { status: 405 })
    }
  } catch (error) {
    return new Response(`Internal Server Error: ${error}`, { status: 500 })
  }
})
```

----------------------------------------

TITLE: Granting Postgres Ownership to Prisma User
DESCRIPTION: SQL command to grant the new Prisma user to the postgres role, allowing visibility of Prisma migration changes in the Supabase Dashboard.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
grant "prisma" to "postgres";
```

----------------------------------------

TITLE: Creating Tables for Orchestral Sections and Instruments in PostgreSQL
DESCRIPTION: SQL commands to create and populate sample tables representing orchestral sections and instruments with a one-to-many relationship.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table orchestral_sections (
  "id" serial primary key,
  "name" text
);

insert into orchestral_sections
  (id, name)
values
  (1, 'strings'),
  (2, 'woodwinds');

create table instruments (
  "id" serial primary key,
  "name" text,
  "section_id" int references "orchestral_sections"
);

insert into instruments
  (name, section_id)
values
  ('violin', 1),
  ('viola', 1),
  ('flute', 2),
  ('oboe', 2);
```

----------------------------------------

TITLE: Creating a Publication for Specific Tables in SQL
DESCRIPTION: Creates a publication that only tracks changes to the specified tables (table_one and table_two), allowing for more selective replication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create publication publication_name
for table table_one, table_two;
```

----------------------------------------

TITLE: Sign In with Zoom OAuth in Flutter
DESCRIPTION: This code snippet demonstrates how to sign in a user with Zoom OAuth using the Supabase Flutter client library. It calls the `signInWithOAuth` function, passing in `OAuthProvider.zoom` as the provider, and optionally setting the redirect link and authScreenLaunchMode. The function returns a Future that completes when the sign-in process is finished.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signInWithZoom() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.zoom,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}
```

----------------------------------------

TITLE: Next.js App Wrapper Setup
DESCRIPTION: Implementation of SessionContextProvider wrapper in _app.js/tsx for Supabase client initialization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createPagesBrowserClient } from '@supabase/auth-helpers-nextjs'
import { SessionContextProvider } from '@supabase/auth-helpers-react'
import { useState } from 'react'

function MyApp({ Component, pageProps }) {
  const [supabaseClient] = useState(() => createPagesBrowserClient())

  return (
    <SessionContextProvider
      supabaseClient={supabaseClient}
      initialSession={pageProps.initialSession}
    >
      <Component {...pageProps} />
    </SessionContextProvider>
  )
}
```

----------------------------------------

TITLE: Installing dependencies for React Native Expo project
DESCRIPTION: Command to install the necessary dependencies for the React Native application with Expo.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/expo-user-management/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Equality Search Using Kotlin Supabase Client
DESCRIPTION: Kotlin implementation using Supabase client to perform an equality search on the books table, filtering by the title column for exact matches of 'Harry'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_6

LANGUAGE: kotlin
CODE:
```
val data = supabase.from("books").select {
    filter {
        eq("title", "Harry")
    }
}
```

----------------------------------------

TITLE: Not Equal To Filter Implementation
DESCRIPTION: Shows how to listen for database changes when a column does not equal a specific value using the 'neq' filter. Uses Postgres's != operator to filter message inserts where body is not equal to 'bye'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_41

LANGUAGE: javascript
CODE:
```
const channel = supabase
  .channel('changes')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'messages',
      filter: 'body=neq.bye',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

LANGUAGE: dart
CODE:
```
supabase
    .channel('changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.insert,
        schema: 'public',
        table: 'messages',
        filter: PostgresChangeFilter(
          type: PostgresChangeFilterType.neq,
          column: 'body',
          value: 'bye',
        ),
        callback: (payload) => print(payload))
    .subscribe();
```

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("db-changes")

let changes = await myChannel.postgresChange(
  UpdateAction.self,
  schema: "public",
  table: "messages",
  filter: .neq("body", value: "hey")
)

await myChannel.subscribe()

for await change in changes {
  print(change.record)
}
```

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.realtime.createChannel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Update>(schema = "public") {
    table = "messages"
    filter = "body=neq.bye"
}

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

supabase.realtime.connect()
myChannel.join()
```

LANGUAGE: python
CODE:
```
changes = supabase.channel('db-changes').on_postgres_changes(
  "INSERT",
  schema="public",
  table="messages",
  filter="body=neq.bye",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Pushing Supabase Configuration in Bash
DESCRIPTION: Bash command for synchronizing the local configuration with the remote Supabase project. Uses the production environment setting.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/todo-list/nextjs-todo-list/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
SUPABASE_ENV=production npx supabase@latest config push
```

----------------------------------------

TITLE: Revoking Execute Permission
DESCRIPTION: Demonstrates revoking execute permission from junior_dev role, which doesn't affect function execution due to public role privileges.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_28

LANGUAGE: bash
CODE:
```
# as postgres
postgres=> revoke execute on function add(integer, integer) from junior_dev;
REVOKE
```

----------------------------------------

TITLE: Implementing Realtime Chat Service in TypeScript with Supabase
DESCRIPTION: This code snippet shows the implementation of a DataService class that handles realtime chat functionality using Supabase. It includes methods for retrieving group information, adding messages, and listening to realtime updates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_21

LANGUAGE: typescript
CODE:
```
/* eslint-disable @typescript-eslint/naming-convention */
import { Injectable } from '@angular/core'
import { SupabaseClient, createClient, RealtimeChannel } from '@supabase/supabase-js'
import { Subject } from 'rxjs'
import { environment } from 'src/environments/environment'

const GROUPS_DB = 'groups'
const MESSAGES_DB = 'messages'

export interface Message {
  created_at: string
  group_id: number
  id: number
  text: string
  user_id: string
}

@Injectable({
  providedIn: 'root',
})
export class DataService {
  private supabase: SupabaseClient
  // ADD
  private realtimeChannel: RealtimeChannel

  constructor() {
    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)
  }

  getGroups() {
    return this.supabase
      .from(GROUPS_DB)
      .select(`title,id, users:creator ( email )`)
      .then((result) => result.data)
  }

  async createGroup(title) {
    const newgroup = {
      creator: (await this.supabase.auth.getUser()).data.user.id,
      title,
    }

    return this.supabase.from(GROUPS_DB).insert(newgroup).select().single()
  }

  // ADD NEW FUNCTIONS
  getGroupById(id) {
    return this.supabase
      .from(GROUPS_DB)
      .select(`created_at, title, id, users:creator ( email, id )`)
      .match({ id })
      .single()
      .then((result) => result.data)
  }

  async addGroupMessage(groupId, message) {
    const newMessage = {
      text: message,
      user_id: (await this.supabase.auth.getUser()).data.user.id,
      group_id: groupId,
    }

    return this.supabase.from(MESSAGES_DB).insert(newMessage)
  }

  getGroupMessages(groupId) {
    return this.supabase
      .from(MESSAGES_DB)
      .select(`created_at, text, id, users:user_id ( email, id )`)
      .match({ group_id: groupId })
      .limit(25) // Limit to 25 messages for our app
      .then((result) => result.data)
  }

  listenToGroup(groupId) {
    const changes = new Subject()

    this.realtimeChannel = this.supabase
      .channel('public:messages')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'messages' },
        async (payload) => {
          console.log('DB CHANGE: ', payload)

          if (payload.new && (payload.new as Message).group_id === +groupId) {
            const msgId = (payload.new as any).id

            const msg = await this.supabase
              .from(MESSAGES_DB)
              .select(`created_at, text, id, users:user_id ( email, id )`)
              .match({ id: msgId })
              .single()
              .then((result) => result.data)
            changes.next(msg)
          }
        }
      )
      .subscribe()

    return changes.asObservable()
  }

  unsubscribeGroupChanges() {
    if (this.realtimeChannel) {
      this.supabase.removeChannel(this.realtimeChannel)
    }
  }
}
```

----------------------------------------

TITLE: Creating and seeding the Supabase Vector collection
DESCRIPTION: Python function to initialize a vector collection in Supabase, generate embeddings for sample images, and store them in the database with metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
def seed():
    # create vector store client
    vx = vecs.create_client(DB_CONNECTION)

    # get or create a collection of vectors with 1024 dimensions
    images = vx.get_or_create_collection(name="image_vectors", dimension=1024)

    # Generate image embeddings with Amazon Titan Model
    img_emb1 = encode_image('./images/one.jpg')
    img_emb2 = encode_image('./images/two.jpg')
    img_emb3 = encode_image('./images/three.jpg')
    img_emb4 = encode_image('./images/four.jpg')

    # add records to the *images* collection
    images.upsert(
        records=[
            (
                "one.jpg",       # the vector's identifier
                img_emb1,        # the vector. list or np.array
                {"type": "jpg"}  # associated  metadata
            ), (
                "two.jpg",
                img_emb2,
                {"type": "jpg"}
            ), (
                "three.jpg",
                img_emb3,
                {"type": "jpg"}
            ), (
                "four.jpg",
                img_emb4,
                {"type": "jpg"}
            )
        ]
    )
    print("Inserted images")

    # index the collection for fast search performance
    images.create_index()
    print("Created index")
```

----------------------------------------

TITLE: Implementing Encrypted Authentication Storage in React Native with Supabase
DESCRIPTION: Implementation of a secure storage solution that encrypts user session data using AES-256 encryption with Expo SecureStore and AsyncStorage for Supabase authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_3

LANGUAGE: typescript
CODE:
```
import 'react-native-url-polyfill/auto'
import { createClient } from '@supabase/supabase-js'
import AsyncStorage from '@react-native-async-storage/async-storage'
import * as SecureStore from 'expo-secure-store'
import * as aesjs from 'aes-js'
import 'react-native-get-random-values'

// As Expo's SecureStore does not support values larger than 2048
// bytes, an AES-256 key is generated and stored in SecureStore, while
// it is used to encrypt/decrypt values stored in AsyncStorage.
class LargeSecureStore {
  private async _encrypt(key: string, value: string) {
    const encryptionKey = crypto.getRandomValues(new Uint8Array(256 / 8))

    const cipher = new aesjs.ModeOfOperation.ctr(encryptionKey, new aesjs.Counter(1))
    const encryptedBytes = cipher.encrypt(aesjs.utils.utf8.toBytes(value))

    await SecureStore.setItemAsync(key, aesjs.utils.hex.fromBytes(encryptionKey))

    return aesjs.utils.hex.fromBytes(encryptedBytes)
  }

  private async _decrypt(key: string, value: string) {
    const encryptionKeyHex = await SecureStore.getItemAsync(key)
    if (!encryptionKeyHex) {
      return encryptionKeyHex
    }

    const cipher = new aesjs.ModeOfOperation.ctr(
      aesjs.utils.hex.toBytes(encryptionKeyHex),
      new aesjs.Counter(1)
    )
    const decryptedBytes = cipher.decrypt(aesjs.utils.hex.toBytes(value))

    return aesjs.utils.utf8.fromBytes(decryptedBytes)
  }

  async getItem(key: string) {
    const encrypted = await AsyncStorage.getItem(key)
    if (!encrypted) {
      return encrypted
    }

    return await this._decrypt(key, encrypted)
  }

  async removeItem(key: string) {
    await AsyncStorage.removeItem(key)
    await SecureStore.deleteItemAsync(key)
  }

  async setItem(key: string, value: string) {
    const encrypted = await this._encrypt(key, value)

    await AsyncStorage.setItem(key, encrypted)
  }
}

const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL
const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: new LargeSecureStore(),
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
})
```

----------------------------------------

TITLE: Setting up blocking authentication functions in Python for Supabase role assignment
DESCRIPTION: This Python code creates blocking Firebase Authentication functions that add a role custom claim to users when they sign up or sign in. This role will be used by Supabase to assign the authenticated Postgres role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
@identity_fn.before_user_created()
def set_supabase_role_sign_up(event: identity_fn.AuthBlockingEvent) -> identity_fn.BeforeCreateResponse | None:
  return identity_fn.BeforeCreateResponse(
    # The Supabase project will use this role to assign the `authenticated`
    # Postgres role.
    custom_claims={'role': 'authenticated'})

@identity_fn.before_user_signed_in()
def set_supabase_role_sign_in(event: identity_fn.AuthBlockingEvent) -> identity_fn.BeforeSignInResponse | None:
  return identity_fn.BeforeSignInResponse(
    # The Supabase project will use this role to assign the `authenticated`
    # Postgres role.
    custom_claims={'role': 'authenticated'})
```

----------------------------------------

TITLE: Querying Many-to-Many Relationships in Swift
DESCRIPTION: Swift example showing how to query teams with their related users and parse the response into strongly-typed Swift structs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_12

LANGUAGE: swift
CODE:
```
struct Team: Codable {
  let id: Int
  let name: String
  let users: [User]

  struct User: Codable {
    let id: Int
    let name: String
  }

  enum CodingKeys: String, CodingKey {
    case id, users
    case name = "team_name"
  }
}
let teams [Team] = try await supabase
  .from("teams")
  .select(
    """
      id,
      team_name,
      users ( id, name )
    """
  )
  .execute()
  .value
```

----------------------------------------

TITLE: Initiating Sign-In with SSO (Kotlin)
DESCRIPTION: This Kotlin snippet demonstrates how to initiate a sign-in process using a SAML 2.0 identity provider registered for a specific domain using Supabase Auth. It uses the `signInWith` method with `SSO` to start the SP Initiated Flow. The Supabase client must be initialized before using this function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_7

LANGUAGE: kotlin
CODE:
```
"supabase.auth.signInWith(SSO) {
    domain = \"company.com\"
}"
```

----------------------------------------

TITLE: Managing Group Admin Privileges
DESCRIPTION: Shows granting admin privileges to group members.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_25

LANGUAGE: bash
CODE:
```
# as postgres
postgres=> grant developers to junior_dev with admin option;
GRANT ROLE

# as junior_dev
postgres=> revoke developers from senior_dev;
REVOKE ROLE
```

----------------------------------------

TITLE: Reassigning Objects Owned by Role in SQL
DESCRIPTION: This SQL command reassigns all objects owned by the specified role to the 'postgres' user, preparing for role deletion.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-delete-a-role-in-postgres-8-AvxY.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
REASSIGN OWNED BY <role> TO postgres;
```

----------------------------------------

TITLE: Pulling storage schema from Supabase
DESCRIPTION: This command pulls RLS policies on storage buckets from your Supabase project to your local environment by specifying the storage schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
supabase db pull --schema storage
```

----------------------------------------

TITLE: Broadcasting Messages via REST API using cURL
DESCRIPTION: This snippet demonstrates how to send a broadcast message using cURL to make an HTTP request to Supabase Realtime servers. It includes the necessary headers and JSON payload structure.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
curl -v \
-H 'apikey: <SUPABASE_TOKEN>' \
-H 'Content-Type: application/json' \
--data-raw '{
  "messages": [
    {
      "topic": "test",
      "event": "event",
      "payload": { "test": "test" }
    }
  ]
}' \
'https://<PROJECT_REF>.supabase.co/realtime/v1/api/broadcast'
```

----------------------------------------

TITLE: Setting Bypass RLS Privilege
DESCRIPTION: Alters a database role to bypass Row Level Security, useful for system-level access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
alter role "role_name" with bypassrls;
```

----------------------------------------

TITLE: Updating Map Configuration to Use Edge Function
DESCRIPTION: JavaScript code showing how to update the MapLibre GL configuration to use the private map file via a Supabase Edge Function instead of the public storage URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-19-self-host-maps-storage-protomaps.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
// ...
const map = new maplibregl.Map({
  hash: true,
  container: 'map',
  style: {
    version: 8,
    glyphs: 'https://cdn.protomaps.com/fonts/pbf/{fontstack}/{range}.pbf',
    sources: {
      protomaps: {
        attribution:
          '<a href="https://github.com/protomaps/basemaps">Protomaps</a> © <a href="https://openstreetmap.org">OpenStreetMap</a>',
        type: 'vector',
        url: 'pmtiles://https://<project_ref>.supabase.co/functions/v1/maps-private/my_area.pmtiles',
      },
    },
    layers: protomaps_themes_base.default('protomaps', 'dark'),
  },
})
// ...
```

----------------------------------------

TITLE: Granting Access to Private Schemas in Supabase
DESCRIPTION: SQL command to grant SELECT permissions on tables in private schemas to authenticated roles, allowing Realtime monitoring of changes in those tables. It's recommended to enable RLS and create policies for these tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_48

LANGUAGE: sql
CODE:
```
grant select on "non_private_schema"."some_table" to authenticated;
```

----------------------------------------

TITLE: Applying Opacity to Tailwind Colors in JSX
DESCRIPTION: Demonstrates how to use opacity with Tailwind color classes, showcasing different levels of opacity for the same color.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/tailwind-classes.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
<div className="flex gap-3">
  <div className="w-4 h-4 rounded-full bg-surface-300"></div>
  <div className="w-4 h-4 rounded-full bg-surface-300/90"></div>
  <div className="w-4 h-4 rounded-full bg-surface-300/80"></div>
  <div className="w-4 h-4 rounded-full bg-surface-300/75"></div>
  <div className="w-4 h-4 rounded-full bg-surface-300/50"></div>
</div>
```

----------------------------------------

TITLE: Initializing Supabase Client with Clerk Token (Dart)
DESCRIPTION: Demonstrates how to initialize the Supabase client in a Flutter application using the `supabase_flutter` package, configuring it to retrieve the access token from Clerk's session token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/clerk.mdx#_snippet_1

LANGUAGE: dart
CODE:
```
import 'package:clerk_flutter/clerk_flutter.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
...

await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
  accessToken: () async {
    final token = await ClerkAuth.of(context).sessionToken();
    return token.jwt;
  },
);
```

----------------------------------------

TITLE: Creating and Populating Countries Table in Supabase
DESCRIPTION: SQL commands to create a countries table with row level security and populate it with sample data. Creates a table with id and name columns, inserts three country records, and enables row level security.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/hono/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create the table
create table countries (
  id bigint primary key generated always as identity,
  name text not null
);
-- Insert some sample data into the table
insert into countries (name)
values
  ('Canada'),
  ('United States'),
  ('Mexico');

alter table countries enable row level security;
```

----------------------------------------

TITLE: Creating a Restaurant Table with Geographic Point Location
DESCRIPTION: SQL command to create a table with a geographic point column for storing location data. This example creates a restaurants table with a location column using the PostGIS Point data type.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table if not exists public.restaurants (
	id int generated by default as identity primary key,
	name text not null,
	location gis.geography(POINT) not null
);
```

----------------------------------------

TITLE: Implementing a Sidebar Header with Dropdown Menu
DESCRIPTION: Shows how to implement a sticky header in the sidebar with a dropdown menu, which can be used for workspace selection or other contextual options.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_16

LANGUAGE: tsx
CODE:
```
<Sidebar>
  <SidebarHeader>
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton>
              Select Workspace
              <ChevronDown className="ml-auto" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent className="w-[--radix-popper-anchor-width]">
            <DropdownMenuItem>
              <span>Acme Inc</span>
            </DropdownMenuItem>
            <DropdownMenuItem>
              <span>Acme Corp.</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  </SidebarHeader>
</Sidebar>
```

----------------------------------------

TITLE: Configuring Angular Module for Login Page with ReactiveFormsModule
DESCRIPTION: This snippet shows how to set up the Angular module for the login page by importing and configuring ReactiveFormsModule, which is needed for creating reactive forms in the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'
import { FormsModule, ReactiveFormsModule } from '@angular/forms'

import { IonicModule } from '@ionic/angular'

import { LoginPageRoutingModule } from './login-routing.module'

import { LoginPage } from './login.page'

@NgModule({
  imports: [CommonModule, FormsModule, IonicModule, LoginPageRoutingModule, ReactiveFormsModule],
  declarations: [LoginPage],
})
export class LoginPageModule {}
```

----------------------------------------

TITLE: Querying One-to-Many Relationships with GraphQL
DESCRIPTION: GraphQL query example showing how to query orchestral sections with their related instruments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
const Query = `
  query {
    orchestral_sectionsCollection {
      edges {
        node {
          id
          name
          instruments {
            id,
            name
          }
        }
      }
    }
  }
`
```

----------------------------------------

TITLE: Enabling HTTP Extension in Postgres
DESCRIPTION: This SQL command enables the pgsql-http extension in the Postgres database, allowing HTTP requests to be made from within the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create extension if not exists http;
```

----------------------------------------

TITLE: Full Text Search Using Swift Supabase Client
DESCRIPTION: Swift implementation using Supabase client to perform a full text search on the books table, searching the title column for 'Harry'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_11

LANGUAGE: swift
CODE:
```
let response = try await supabase.from("books")
  .select()
  .textSearch("title", value: "'Harry'")
```

----------------------------------------

TITLE: Filtering Storage Logs by HTTP Method
DESCRIPTION: This SQL query retrieves storage logs and filters them based on the HTTP method used in the request. It extracts the ID, timestamp, event message, and request method from the storage logs' metadata, specifically targeting POST requests in this example.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/debugging/logs.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select id, storage_logs.timestamp, event_message, r.method
from
  storage_logs
  cross join unnest(metadata) as m
  cross join unnest(m.req) as r
where r.method in ("POST")
order by timestamp desc
limit 100;
```

----------------------------------------

TITLE: Filtering Audit Logs Query
DESCRIPTION: SQL query to filter and extract CREATE TABLE audit log events from postgres_logs
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
select
  cast(t.timestamp as datetime) as timestamp,
  event_message
from
  postgres_logs as t
  cross join unnest(metadata) as m
  cross join unnest(m.parsed) as p
where event_message like 'AUDIT%CREATE TABLE%'
order by timestamp desc
limit 100;
```

----------------------------------------

TITLE: Equality Search Using JavaScript Supabase Client
DESCRIPTION: JavaScript implementation using Supabase client to perform an equality search on the books table, filtering by the title column for exact matches of 'Harry'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('books').select().eq('title', 'Harry')
```

----------------------------------------

TITLE: SQL Schema for Countries and Cities Tables
DESCRIPTION: This SQL creates two related tables: 'countries' and 'cities', with a foreign key relationship between them.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create table countries (
  "id" serial primary key,
  "name" text
);

create table cities (
  "id" serial primary key,
  "name" text,
  "country_id" int references "countries"
);
```

----------------------------------------

TITLE: Full Text Search Using Dart Supabase Client
DESCRIPTION: Dart implementation using Supabase client to perform a full text search on the books table, searching the title column for 'Harry'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_10

LANGUAGE: dart
CODE:
```
final result = await client
  .from('books')
  .select()
  .textSearch('title', "'Harry'");
```

----------------------------------------

TITLE: Sign In Anonymously with Swift in Supabase
DESCRIPTION: Creates an anonymous user authentication session using the Supabase Swift SDK. Returns a session object for the anonymous user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_2

LANGUAGE: swift
CODE:
```
let session = try await supabase.auth.signInAnonymously()
```

----------------------------------------

TITLE: Querying Nearby Restaurants with Swift
DESCRIPTION: Swift code to call the nearby_restaurants function, including a response struct to properly type the returned data. The struct maps the database column names to Swift properties.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_13

LANGUAGE: swift
CODE:
```
struct Response: Codable {
  let id: Int
  let name: String
  let lat: Double
  let long: Double
  let distance: Double

  enum CodingKeys: String, CodingKey {
    case id, name, lat, long
    case distance = "dist_meters"
  }
}

let response: Response = try await supabase.rpc(
  "nearby_restaurants",
  params: [
    "lat": 40.807313,
    "long": -73.946713
  ]
)
.execute()
.value
```

----------------------------------------

TITLE: Define AvatarImage Struct in Swift
DESCRIPTION: Defines a Swift struct `AvatarImage` that conforms to the `Transferable` and `Equatable` protocols. It is designed to hold an `Image` and its raw `Data`, facilitating image transfer from sources like `PhotosPicker`. It includes a static `transferRepresentation` for importing image data and an initializer to create an `AvatarImage` from `Data`.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#_snippet_5

LANGUAGE: swift
CODE:
```
import SwiftUI

struct AvatarImage: Transferable, Equatable {
  let image: Image
  let data: Data

  static var transferRepresentation: some TransferRepresentation {
    DataRepresentation(importedContentType: .image) { data in
      guard let image = AvatarImage(data: data) else {
        throw TransferError.importFailed
      }

      return image
    }
  }
}

extension AvatarImage {
  init?(data: Data) {
    guard let uiImage = UIImage(data: data) else {
      return nil
    }

    let image = Image(uiImage: uiImage)
    self.init(image: image, data: data)
  }
}

enum TransferError: Error {
  case importFailed
}
```

----------------------------------------

TITLE: Handling Edge Function Errors with Type Checking in TypeScript
DESCRIPTION: Shows how to use the new error types for Edge Functions in supabase-js v2 to handle different error scenarios with type checking.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { FunctionsHttpError, FunctionsRelayError, FunctionsFetchError } from '@supabase/supabase-js'

const { data: user, error } = await supabase.functions.invoke('hello')

if (error instanceof FunctionsHttpError) {
  console.log('Function returned an error', error.message)
} else if (error instanceof FunctionsRelayError) {
  console.log('Relay error:', error.message)
} else if (error instanceof FunctionsFetchError) {
  console.log('Fetch error:', error.message)
}
```

----------------------------------------

TITLE: Request Routing with Edge Runtime
DESCRIPTION: Demonstrates how to use Edge Runtime as an API gateway to reroute requests to different endpoints, including error handling and request forwarding.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-11-edge-runtime-self-hosted-deno-functions.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
serve(async (req) => {
  try {
    if (req.url.endsWith('/rest/v1/old_table')) {
      return await fetch('http://rest:3000/rest/v1/new_table', {
        headers: req.headers,
        method: req.method,
        body: req.body,
      })
    }
  } catch (e) {
    const error = { msg: e.toString() }
    return new Response(JSON.stringify(error), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})
```

----------------------------------------

TITLE: Viewing Webhook Response in Postgres
DESCRIPTION: This SQL query retrieves the response details for a specific webhook request from the net._http_response table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/webhook-debugging-guide-M8sk47.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
select
*
from net._http_response
where id = <request_id>
```

----------------------------------------

TITLE: Deno Native Routing Implementation
DESCRIPTION: Example of implementing basic routing in Edge Functions using native Deno server without any framework.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
Deno.serve(async (req) => {
  if (req.method === 'GET') {
    return new Response('Hello World!')
  }
  const { name } = await req.json()
  if (name) {
    return new Response(`Hello ${name}!`)
  }
  return new Response('Hello World!')
});
```

----------------------------------------

TITLE: Connecting to Supabase Transaction Mode Pooler
DESCRIPTION: Example connection string format for connecting to Supabase's transaction mode pooler on port 6543.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/using-sqlalchemy-with-supabase-FUqebT.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
# Example transaction mode string:
postgres://[db-user].[project-ref]:[db-password]@aws-0-[aws-region].pooler.supabase.com:6543
```

----------------------------------------

TITLE: Redirecting to Supabase OAuth Authorization URL in TypeScript
DESCRIPTION: This code snippet demonstrates how to construct the authorization URL for Supabase OAuth and redirect the user. It uses PKCE flow for increased security and stores the code verifier in the user session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/integrations/build-a-supabase-integration.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
router.get('/connect-supabase/login', async (ctx) => {
  // Construct the URL for the authorization redirect and get a PKCE codeVerifier.
  const { uri, codeVerifier } = await oauth2Client.code.getAuthorizationUri()
  console.log(uri.toString())
  // console.log: https://api.supabase.com/v1/oauth/authorize?response_type=code&client_id=7673bde9-be72-4d75-bd5e-b0dba2c49b38&redirect_uri=http%3A%2F%2Flocalhost%3A54321%2Ffunctions%2Fv1%2Fconnect-supabase%2Foauth2%2Fcallback&scope=all&code_challenge=jk06R69S1bH9dD4td8mS5kAEFmEbMP5P0YrmGNAUVE0&code_challenge_method=S256

  // Store the codeVerifier in the user session (cookie).
  ctx.state.session.flash('codeVerifier', codeVerifier)

  // Redirect the user to the authorization endpoint.
  ctx.response.redirect(uri)
})
```

----------------------------------------

TITLE: Defining Supabase Swift Profile Models
DESCRIPTION: This Swift code defines the `Profile` and `UpdateProfileParams` structs used for deserializing profile data from Supabase and serializing profile updates to Supabase, respectively. Both structs conform to `Decodable` or `Encodable` and map database column names.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-swift.mdx#_snippet_3

LANGUAGE: Swift
CODE:
```
struct Profile: Decodable {
  let username: String?
  let fullName: String?
  let website: String?

  enum CodingKeys: String, CodingKey {
    case username
    case fullName = "full_name"
    case website
  }
}

struct UpdateProfileParams: Encodable {
  let username: String
  let fullName: String
  let website: String

  enum CodingKeys: String, CodingKey {
    case username
    case fullName = "full_name"
    case website
  }
}
```

----------------------------------------

TITLE: Creating Task Dependencies Graph Structure in SQL
DESCRIPTION: This code creates a graph structure for project task scheduling by setting up a tasks table for nodes and a dependencies table for directed edges with durations. This structure allows modeling project dependencies for critical path analysis.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create the tasks table with dependencies
create table tasks (
  id serial primary key,
  name text not null
);

-- insert tasks into the table
insert into tasks (name)
values
  ('Start Project'),
  ('Task A'),
  ('Task B'),
  ('Task C'),
  ('Task D'),
  ('End Project');

-- create the dependencies table
create table dependencies (
  id serial primary key,
  source integer not null, -- task id where the dependency starts
  target integer not null, -- task id where the dependency ends
  duration integer not null, -- duration of the task in days
  constraint fk_source foreign key (source) references tasks (id),
  constraint fk_target foreign key (target) references tasks (id)
);

-- insert dependencies with durations (directed edges)
insert into dependencies (source, target, duration)
values
  (1, 2, 3), -- start project -> task a (3 days)
  (2, 3, 4), -- task a -> task b (4 days)
  (3, 4, 5), -- task b -> task c (5 days)
  (4, 5, 2), -- task c -> task d (2 days)
  (5, 6, 6);
-- task d -> end project (6 days)
```

----------------------------------------

TITLE: Sign In with Zoom OAuth in Kotlin
DESCRIPTION: This code snippet demonstrates how to sign in a user with Zoom OAuth using the Supabase Kotlin client library. It calls the `signInWith` function, passing in `Zoom` as the Provider. The function suspends until the sign-in process is complete.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithZoom() {
	supabase.auth.signInWith(Zoom)
}
```

----------------------------------------

TITLE: Building Todo Components with Supabase Integration in React Native
DESCRIPTION: Demonstrates how to build the UI components for a todo application, including a text input for adding new todos and a component for displaying and toggling todos. Integrates with the Legend-State functions for data operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_10

LANGUAGE: tsx
CODE:
```
import { useState } from 'react'
import { FlatList, StyleSheet, Text, TextInput, TouchableOpacity } from 'react-native'
// [...]
import { observer } from '@legendapp/state/react'
import { addTodo, todos$ as _todos$, toggleDone } from './utils/SupaLegend'
// [...]

// Emojis to decorate each todo.
const NOT_DONE_ICON = String.fromCodePoint(0x1f7e0)
const DONE_ICON = String.fromCodePoint(0x2705)

// The text input component to add a new todo.
const NewTodo = () => {
  const [text, setText] = useState('')
  const handleSubmitEditing = ({ nativeEvent: { text } }) => {
    setText('')
    addTodo(text)
  }
  return (
    <TextInput
      value={text}
      onChangeText={(text) => setText(text)}
      onSubmitEditing={handleSubmitEditing}
      placeholder="What do you want to do today?"
      style={styles.input}
    />
  )
}

// A single todo component, either 'not done' or 'done': press to toggle.
const Todo = ({ todo }: { todo: Tables<'todos'> }) => {
  const handlePress = () => {
    toggleDone(todo.id)
  }
  return (
    <TouchableOpacity
      key={todo.id}
      onPress={handlePress}
      style={[styles.todo, todo.done ? styles.done : null]}
    >
      <Text style={styles.todoText}>
        {todo.done ? DONE_ICON : NOT_DONE_ICON} {todo.text}
      </Text>
    </TouchableOpacity>
  )
}
```

----------------------------------------

TITLE: Configuring Edge Function Timeout in Supabase Python Client
DESCRIPTION: This example demonstrates how to set a custom timeout for Edge Functions using the Supabase Python client. It creates a client with a 15-second function timeout and invokes a function named 'hello'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-python-support.mdx#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import os
from supabase import create_client
from supabase.lib.client_options import ClientOptions

url: str = os.environ.get("SUPABASE_URL")
key: str = os.environ.get("SUPABASE_KEY")

options = ClientOptions(function_client_timeout = 15)
client = create_client(url, key, options)

client.functions.url = "http://127.0.0.1:54321/functions/v1/hello-world"
print(client.functions.invoke("hello"))

```

----------------------------------------

TITLE: Pushing Supabase Configuration
DESCRIPTION: Command to sync the local Supabase configuration with the remote project.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
SUPABASE_ENV=production npx supabase@latest config push
```

----------------------------------------

TITLE: Granting Statistics Access
DESCRIPTION: SQL command to grant statistics access privileges to postgres user
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
grant pg_read_all_stats to postgres;
```

----------------------------------------

TITLE: Acknowledging Messages in Swift
DESCRIPTION: This Swift code demonstrates how to configure a Supabase Realtime channel to acknowledge received messages. It sets the 'acknowledgeBroadcasts' config to true and sends a broadcast message.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_12

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("room-3") {
  $0.broadcast.acknowledgeBroadcasts = true
}

await myChannel.subscribe()

await myChannel.broadcast(event: "acknowledge", message: [:])
```

----------------------------------------

TITLE: Initializing Sentry with Supabase Client instance
DESCRIPTION: Example of initializing Sentry with an already initialized Supabase Client instance. Configures tracing, breadcrumbs, and error tracking.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_4

LANGUAGE: ts
CODE:
```
import * as Sentry from '@sentry/browser'
import { createClient } from '@supabase/supabase-js'
import { supabaseIntegration } from '@supabase/sentry-js-integration'

const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY)

Sentry.init({
  dsn: SENTRY_DSN,
  integrations: [
    supabaseIntegration(supabaseClient, Sentry, {
      tracing: true,
      breadcrumbs: true,
      errors: true,
    }),
  ],
})
```

----------------------------------------

TITLE: Configuring Storage Bucket in Supabase
DESCRIPTION: TOML configuration for setting up a storage bucket in Supabase with specific file limitations and mime types for audio files.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[storage.buckets.audio]
public = false
file_size_limit = "50MiB"
allowed_mime_types = ["audio/mp3"]
objects_path = "./audio"
```

----------------------------------------

TITLE: Initializing Supabase Client in React Native
DESCRIPTION: TypeScript code for initializing the Supabase client with AsyncStorage integration for session management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-01-react-native-storage.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import AsyncStorage from '@react-native-async-storage/async-storage'
import 'react-native-url-polyfill/auto'

import { createClient } from '@supabase/supabase-js'

const url = process.env.EXPO_PUBLIC_SUPABASE_URL
const key = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY

// Initialize the Supabase client
export const supabase = createClient(url, key, {
  auth: {
    storage: AsyncStorage,
    detectSessionInUrl: false,
  },
})
```

----------------------------------------

TITLE: Installing Poetry for Python dependency management
DESCRIPTION: Command to install Poetry, a Python dependency and package management tool, using pip.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
pip install poetry
```

----------------------------------------

TITLE: Handling Dart Auth Errors
DESCRIPTION: This section describes how to handle errors originating from the `supabase.auth` namespace in Dart. All errors are wrapped by the `AuthException` class. Errors are categorized into `AuthApiException` which comes from Supabase Auth API. The `AuthApiException` exception always has a `code` and `statusCode` property to identify the error and HTTP status code, respectively.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/debugging/error-codes.mdx#2025-04-21_snippet_1



----------------------------------------

TITLE: Downloading Transformed Image in Dart
DESCRIPTION: This snippet shows how to download a transformed image using the Supabase Dart client, specifying transformation options.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_10

LANGUAGE: dart
CODE:
```
final data = await supabase.storage.from('bucket').download(
      'image.jpg',
      transform: const TransformOptions(
        width: 800,
        height: 300,
      ),
    );
```

----------------------------------------

TITLE: Creating and Populating Edge Tables for Video Relationships and User Interactions in SQL
DESCRIPTION: This snippet shows how to create tables for video relationships and user interactions, which represent edges in the recommendation graph. It includes sample data insertion and demonstrates how to assign weights to relationships.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create table video_relationships (
  source_video_id int references videos (id),
  target_video_id int references videos (id),
  relationship_type text, -- 'same_category', 'watched_by_same_users', etc.
  weight int default 1 -- strength of the relationship
);

insert into video_relationships (source_video_id, target_video_id, relationship_type, weight)
values
  (1, 2, 'same_category', 5), -- "Intro to Graph Theory" and "Advanced Graph Algorithms" are in the same category
  (2, 3, 'watched_by_same_users', 3), -- "Advanced Graph Algorithms" and "Graph Neural Networks" are often watched together
  (4, 5, 'same_category', 5); -- "Beginner Python Tutorial

create table interactions (
  user_id int references auth.users (id),
  video_id int references videos (id),
  interaction_type text, -- 'liked', 'viewed', etc.
  weight int default 1 -- strength of the interaction
);

insert into interactions (user_id, video_id, interaction_type, weight)
values
  ('user_01', 1, 'viewed', 5), -- "User 01" watched "Intro to Graph Theory" to the end (weight = 5)
  ('user_01', 2, 'liked', 5), -- "User 01" liked "Advanced Graph Algorithms"
  ('user_02', 3, 'viewed', 2), -- "User 02" watched "Graph Neural Networks" and bounced halfway through (weight = 2)
  ('user_03', 4, 'liked', 5), -- "User 03" liked "Beginner Python Tutorial"
  ('user_03', 5, 'viewed', 2);
-- "User 03" watched "Advanced Python Techniques" and bounced halfway through (weight = 2)
```

----------------------------------------

TITLE: Sending Session to Client in TypeScript
DESCRIPTION: This TypeScript code snippet demonstrates how to forward session information to the client side in SvelteKit, utilizing async load functions for session retrieval.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_8

LANGUAGE: TypeScript
CODE:
```
// src/routes/+layout.server.ts
export const load = async ({ locals: { safeGetSession } }) => {
  const { session, user } = await safeGetSession()

  return {
    session,
    user,
  }
}
```

----------------------------------------

TITLE: Editing a Cron Job using SQL in Supabase
DESCRIPTION: This SQL snippet shows how to edit an existing cron job in Supabase using the cron.alter_job function. It allows modification of the job schedule and other parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select cron.alter_job(
  job_id := (select jobid from cron.job where jobname = 'permanent-cron-job-name'),
  schedule := '*/5 * * * *'
);
```

----------------------------------------

TITLE: Optimizing Image Quality with Supabase Storage in Kotlin
DESCRIPTION: This code demonstrates two methods for downloading an image with reduced quality in Kotlin - one retrieving the data directly and another streaming to a file on JVM platforms.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_25

LANGUAGE: Kotlin
CODE:
```
val data = supabase.storage["bucket"].downloadAuthenticated("image.jpg") {
    transform {
        quality = 50
    }
}

//Or on JVM stream directly to a file
val file = File("image.jpg")
supabase.storage["bucket"].downloadAuthenticatedTo("image.jpg", file) {
    transform {
        quality = 50
    }
}
```

----------------------------------------

TITLE: Direct Connection String for Supabase PostgreSQL
DESCRIPTION: Example of a direct connection string to a Supabase PostgreSQL database. This string uses an IPv6 address by default.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-faq-YyP5tI.mdx#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
# Example connection string
postgresql://postgres:[YOUR-PASSWORD]@db.ajrbwkcuthywfihaarmflo.supabase.co:5432/postgres
```

----------------------------------------

TITLE: Filtering Postgres Logs by Timeframe in SQL
DESCRIPTION: SQL WHERE clause to filter logs by a specific time period, useful for investigating issues that occurred during a known timeframe.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- filtering by time period
...query
where
  timestamp between '2024-05-06 04:44:00' and '2024-05-06 04:45:00'
```

----------------------------------------

TITLE: Creating Cluster-wide Logical Backup in PostgreSQL
DESCRIPTION: Command to create a logical backup of an entire PostgreSQL cluster using pg_dumpall utility. Creates a comprehensive SQL file containing all databases and global objects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-17-postgresql-physical-logical-backups.mdx#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
pg_dumpall > file_name.sql
```

----------------------------------------

TITLE: Configuring Google OAuth with Email Scope
DESCRIPTION: Example of how to properly configure Google OAuth signin with explicit email scope for Google Suite users
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/google-auth-fails-for-some-users-XcFXEu.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.auth.signInWithOAuth({
  provider: 'google'
  options: {
    scopes: 'https://www.googleapis.com/auth/userinfo.email'
  }
})
```

----------------------------------------

TITLE: Advanced Metadata Filtering with Query Builder
DESCRIPTION: Advanced example using query builder-style filtering with complex metadata conditions and text search capabilities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/langchain.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { SupabaseFilterRPCCall, SupabaseVectorStore } from 'langchain/vectorstores/supabase'
import { OpenAIEmbeddings } from 'langchain/embeddings/openai'
import { createClient } from '@supabase/supabase-js'

const privateKey = process.env.SUPABASE_SERVICE_ROLE_KEY
if (!privateKey) throw new Error(`Expected env var SUPABASE_SERVICE_ROLE_KEY`)

const url = process.env.SUPABASE_URL
if (!url) throw new Error(`Expected env var SUPABASE_URL`)

export const run = async () => {
  const client = createClient(url, privateKey)

  const embeddings = new OpenAIEmbeddings()

  const store = new SupabaseVectorStore(embeddings, {
    client,
    tableName: 'documents',
  })

  const docs = [
    {
      pageContent:
        'This is a long text, but it actually means something because vector database does not understand Lorem Ipsum. So I would need to expand upon the notion of quantum fluff, a theoretical concept where subatomic particles coalesce to form transient multidimensional spaces. Yet, this abstraction holds no real-world application or comprehensible meaning, reflecting a cosmic puzzle.',
      metadata: { b: 1, c: 10, stuff: 'right' },
    },
    {
      pageContent:
        'This is a long text, but it actually means something because vector database does not understand Lorem Ipsum. So I would need to proceed by discussing the echo of virtual tweets in the binary corridors of the digital universe. Each tweet, like a pixelated canary, hums in an unseen frequency, a fascinatingly perplexing phenomenon that, while conjuring vivid imagery, lacks any concrete implication or real-world relevance, portraying a paradox of multidimensional spaces in the age of cyber folklore.',
      metadata: { b: 2, c: 9, stuff: 'right' },
    },
    { pageContent: 'hello', metadata: { b: 1, c: 9, stuff: 'right' } },
    { pageContent: 'hello', metadata: { b: 1, c: 9, stuff: 'wrong' } },
    { pageContent: 'hi', metadata: { b: 2, c: 8, stuff: 'right' } },
    { pageContent: 'bye', metadata: { b: 3, c: 7, stuff: 'right' } },
    { pageContent: "what's this", metadata: { b: 4, c: 6, stuff: 'right' } },
  ]

  await store.addDocuments(docs)

  const funcFilterA: SupabaseFilterRPCCall = (rpc) =>
    rpc
      .filter('metadata->b::int', 'lt', 3)
      .filter('metadata->c::int', 'gt', 7)
      .textSearch('content', `'multidimensional' & 'spaces'`, {
        config: 'english',
      })

  const resultA = await store.similaritySearch('quantum', 4, funcFilterA)

  const funcFilterB: SupabaseFilterRPCCall = (rpc) =>
    rpc
      .filter('metadata->b::int', 'lt', 3)
      .filter('metadata->c::int', 'gt', 7)
      .filter('metadata->>stuff', 'eq', 'right')

  const resultB = await store.similaritySearch('hello', 2, funcFilterB)

  console.log(resultA, resultB)
}
```

----------------------------------------

TITLE: Querying One-to-Many Relationships in Kotlin
DESCRIPTION: Kotlin example showing how to query orchestral sections with their related instruments using Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
val data = supabase.from("orchestral_sections").select(Columns.raw("id, name, instruments(id, name)"))
```

----------------------------------------

TITLE: Creating User Mapping for Foreign Server in Postgres
DESCRIPTION: SQL command to create a user mapping for the foreign server, setting the user credentials for accessing the remote database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create user mapping for "<dbname>"
server "<foreign_server_name>"
options (
    user '<db_user>',
    password '<password>'
);
```

----------------------------------------

TITLE: Configuring Self-Send Messages in Dart
DESCRIPTION: This Dart snippet shows how to set up a Supabase Realtime channel to receive its own broadcast messages. It configures the 'self' parameter, sets up event handling, and sends a broadcast message.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
final myChannel = supabase.channel(
  'room-2',
  opts: const RealtimeChannelConfig(
    self: true,
  ),
);

myChannel.onBroadcast(
  event: 'test-my-messages',
  callback: (payload) => print(payload),
);

myChannel.subscribe((status, error) {
  if (status != RealtimeSubscribeStatus.subscribed) return;
  // channelC.send({
  myChannel.sendBroadcastMessage(
    event: 'test-my-messages',
    payload: {'message': 'talking to myself'},
  );
});
```

----------------------------------------

TITLE: Configuring Supabase Postgres connection in Laravel .env file
DESCRIPTION: Sets up environment variables in the .env file to connect Laravel to a Supabase Postgres database using the connection string from Supabase's Session Pooler.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/laravel.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
DB_CONNECTION=pgsql
DB_URL=postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres
```

----------------------------------------

TITLE: Invoking Edge Functions with Regional Specification Using JavaScript
DESCRIPTION: This snippet shows how to use the Supabase JavaScript client to invoke an Edge Function with a specified region (eu-west-3). It creates a client connection and calls the function with custom headers and a body parameter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/regional-invocation.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// https://supabase.com/docs/reference/javascript/installing
import { createClient } from '@supabase/supabase-js'

// Create a single supabase client for interacting with your database
const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')

// https://supabase.com/docs/reference/javascript/functions-invoke
const { data, error } = await supabase.functions.invoke('hello-world', {
  body: { name: 'Functions' },
  headers: { 'x-region': 'eu-west-3' },
})
```

----------------------------------------

TITLE: Querying PostgreSQL Table and Index Sizes
DESCRIPTION: SQL query to analyze the size of tables, related indices, and total sizes in a PostgreSQL database. The query uses pg_catalog views and returns results in human-readable format using pg_size_pretty.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
select
  relname as table_name,
  pg_size_pretty(pg_total_relation_size(relid)) as "Table Size",
  pg_size_pretty(pg_indexes_size(relid)) as "Index Size",
  pg_size_pretty(pg_relation_size(relid)) as "Total Size"
from pg_catalog.pg_statio_user_tables
order by pg_total_relation_size(relid) desc;
```

----------------------------------------

TITLE: Adding SAML Connection with Metadata File (Supabase CLI)
DESCRIPTION: This command adds a SAML 2.0 Identity Provider connection to Supabase Auth using a local SAML metadata XML file with the Supabase CLI. It requires specifying the path to the metadata file. It also uses project reference and optionally, the email domains associated with the organization's IdP. The command registers a new identity provider with the project's Auth server.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
"supabase sso add --type saml --project-ref <your-project> \
  --metadata-file /path/to/saml/metadata.xml \
  --domains company.com"
```

----------------------------------------

TITLE: Viewing Updated Table Access Privileges in PostgreSQL
DESCRIPTION: This snippet shows how to view the updated access privileges after granting select privilege with grant option.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_17

LANGUAGE: sql
CODE:
```
postgres=> \dp public.apps
                                   Access privileges
┌────────┬──────┬───────┬───────────────────────────────┬───────────────────┬──────────┐
│ Schema │ Name │ Type  │       Access privileges       │ Column privileges │ Policies │
├────────┼──────┼───────┼───────────────────────────────┼───────────────────┼──────────┤
│ public │ apps │ table │ junior_dev=arwdDxt/junior_dev↵│                   │          │
│        │      │       │ postgres=r*/junior_dev        │                   │          │
└────────┴──────┴───────┴───────────────────────────────┴───────────────────┴──────────┘
(1 row)
```

----------------------------------------

TITLE: Creating Invited Users Table in Postgres
DESCRIPTION: SQL command to create a table for storing invited users in a Supabase organization with columns for ID, SSO provider ID, email, and name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-17-what-is-saml-authentication.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table invited_users (
  id uuid not null primary key,
  sso_provider_id uuid,
  email text,
  name text
);
```

----------------------------------------

TITLE: Basic Regular Expression Filtering with SQL
DESCRIPTION: A basic query that filters postgres_logs using regular expressions to find event messages containing a specific string. It uses the regexp_contains function from BigQuery to check if a string is present in the event_message column.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
  cast(timestamp as datetime) as timestamp,
  event_message,
  metadata
from postgres_logs
where regexp_contains(event_message, 'is present');
```

----------------------------------------

TITLE: Email Template Configuration for Redirect URLs
DESCRIPTION: Example of updating email templates to support custom redirect URLs by replacing SiteURL with RedirectTo variable.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/redirect-urls.mdx#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<!-- Old -->
<a href="{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email">Confirm your mail</a>

<!-- New -->
<a href="{{ .RedirectTo }}/auth/confirm?token_hash={{ .TokenHash }}&type=email">Confirm your mail</a>
```

----------------------------------------

TITLE: Filtering Storage Logs by 4XX Error Status Codes
DESCRIPTION: This SQL query retrieves storage logs and filters them to only include entries where the HTTP status code is a 4XX error (client-side error). It extracts the ID, timestamp, event message, status code, error message, and raw error details from the storage logs' metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/debugging/logs.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
  id,
  storage_logs.timestamp,
  event_message,
  r.statusCode,
  e.message as errorMessage,
  e.raw as rawError
from
  storage_logs
  cross join unnest(metadata) as m
  cross join unnest(m.res) as r
  cross join unnest(m.error) as e
where r.statusCode >= 400 and r.statusCode < 500
order by timestamp desc
limit 100;
```

----------------------------------------

TITLE: Configuring SQLAlchemy with NullPool
DESCRIPTION: Python code showing how to configure SQLAlchemy with NullPool for transaction mode connections, which is recommended for auto-scaling deployments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/using-sqlalchemy-with-supabase-FUqebT.mdx#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from sqlalchemy.pool import NullPool

con = sqlalchemy.create_engine(url, client_encoding='utf8', poolclass=NullPool)
```

----------------------------------------

TITLE: Initializing Supabase Auth UI in Flutter
DESCRIPTION: Basic setup code to initialize the Supabase client with environment variables for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:supabase_auth_ui/supabase_auth_ui.dart';

void main() async {
  await Supabase.initialize(
    url: dotenv.get('SUPABASE_URL'),
    anonKey: dotenv.get('SUPABASE_ANON_KEY'),
  );

  runApp(const MyApp());
}
```

----------------------------------------

TITLE: Acknowledging Messages in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to configure a Supabase Realtime channel to acknowledge received messages. It sets the 'ack' config to true and sends a broadcast message with acknowledgment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const myChannel = supabase.channel('room-3', {
  config: {
    broadcast: { ack: true },
  },
})

myChannel.subscribe(async (status) => {
  if (status !== 'SUBSCRIBED') { return }

  const serverResponse = await myChannel.send({
    type: 'broadcast',
    event: 'acknowledge',
    payload: {},
  })

  console.log('serverResponse', serverResponse)
})
```

----------------------------------------

TITLE: Basic Table Creation with JSON Column
DESCRIPTION: SQL code showing how to create a table with a JSON column without schema validation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-pg-jsonschema-a-postgres-extension-for-json-validation.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table some_table (
  id serial primary key,
  metadata json not null
);

insert into some_table (metadata)
values (<SQL Input>);
```

----------------------------------------

TITLE: Handling SSO Callback in SvelteKit
DESCRIPTION: SvelteKit code for handling the SSO callback. It exchanges the authorization code for a session and handles errors. This is necessary when redirecting to a URL other than the Site URL in cross-origin authentication scenarios.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
import { error, redirect } from '@sveltejs/kit'
import type { RequestHandler } from './$types'

export const GET: RequestHandler = async ({ url, locals }) => {
  const code = url.searchParams.get('code')

  if (!code) {
    error(400, 'No authorization code provided')
  }

  const { error: tokenExchangeError } = await locals.supabase.auth.exchangeCodeForSession(code)

  if (tokenExchangeError) {
    error(400, 'Failed to exchange authorization code for session')
  }

  redirect(303, '/')
}
```

----------------------------------------

TITLE: Managing Organizations and Projects with Supabase CLI
DESCRIPTION: Demonstrates how to use Supabase CLI to log in, list organizations, and create a new project. It shows the basic commands for project management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase login
supabase orgs list
supabase projects create my-project --org-id cool-green-pqdr0qc --db-password ******** --region us-east-1
```

----------------------------------------

TITLE: Updating Prisma Schema for Supabase Postgres
DESCRIPTION: Prisma schema configuration to use Supabase Postgres database connection environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_3

LANGUAGE: prisma
CODE:
```
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
```

----------------------------------------

TITLE: Error Page Display in Next.js
DESCRIPTION: This snippet renders a client-side error page with a simple message. Designed for use when redirections redirect users due to authentication errors. The page does not require any specific dependencies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
'use client'

export default function ErrorPage() {
  return <p>Sorry, something went wrong</p>
}
```

----------------------------------------

TITLE: Implementing GitHub OAuth Sign-Out in Kotlin with Supabase
DESCRIPTION: This Kotlin snippet provides the implementation of the sign-out procedure for users within a Supabase application. The `signOut` method is used to clear the session data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_6

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Supabase Environment Variables Configuration
DESCRIPTION: Environment variables setup for Supabase URL and anonymous key in the .env.local file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key
```

----------------------------------------

TITLE: Linking Local Supabase Project to Remote
DESCRIPTION: Command to link the local Supabase project to a remote Supabase project account.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
supabase link
```

----------------------------------------

TITLE: Generating Seed Data SQL (Bash)
DESCRIPTION: Command to run the Snaplet Seed script (`seed.ts`) and pipe the generated SQL output into the `supabase/seed.sql` file. This command is used both for basic generation and when AI features are enabled.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
npx tsx seed.ts > supabase/seed.sql
```

----------------------------------------

TITLE: Granting Permissions on Custom Schema in Supabase
DESCRIPTION: SQL commands to grant necessary permissions on a custom schema to Supabase's default roles (anon, authenticated, service_role). This enables access to the schema through Supabase's data APIs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/using-custom-schemas.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
GRANT USAGE ON SCHEMA myschema TO anon, authenticated, service_role;
GRANT ALL ON ALL TABLES IN SCHEMA myschema TO anon, authenticated, service_role;
GRANT ALL ON ALL ROUTINES IN SCHEMA myschema TO anon, authenticated, service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA myschema TO anon, authenticated, service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA myschema GRANT ALL ON TABLES TO anon, authenticated, service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA myschema GRANT ALL ON ROUTINES TO anon, authenticated, service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA myschema GRANT ALL ON SEQUENCES TO anon, authenticated, service_role;
```

----------------------------------------

TITLE: Main Application Component
DESCRIPTION: Root Vue component that conditionally renders Auth or Account components based on user state.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_5

LANGUAGE: vue
CODE:
```
<script setup>
const user = useSupabaseUser()
</script>

<template>
  <div class="container" style="padding: 50px 0 100px 0">
    <Account v-if="user" />
    <Auth v-else />
  </div>
</template>
```

----------------------------------------

TITLE: Querying Array Data with JavaScript Supabase Client
DESCRIPTION: This JavaScript snippet uses the Supabase client to select the entire 'textarray' column from the 'arraytest' table and logs the result.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('arraytest').select('textarray')
console.log(JSON.stringify(data, null, 2))
```

----------------------------------------

TITLE: Querying Nearby Restaurants with Kotlin
DESCRIPTION: Kotlin code to call the nearby_restaurants function using JSON objects to pass parameters. This demonstrates how to build a parameter object for RPC calls in Kotlin.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_14

LANGUAGE: kotlin
CODE:
```
val data = supabase.postgrest.rpc(
    function = "nearby_restaurants",
    parameters = buildJsonObject { //You can put here any serializable object including your own classes
        put("lat", 40.807313)
        put("lon", -73.946713)
    }
)
```

----------------------------------------

TITLE: Configuring Edge Functions in TOML
DESCRIPTION: This snippet shows how to configure an Edge Function named 'search-embeddings' with JWT verification disabled.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-04-cli-v2-config-as-code.mdx#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[functions.search-embeddings]
verify_jwt = false
```

----------------------------------------

TITLE: Implementing a Complete SignInScreen with Jetpack Compose
DESCRIPTION: A complete Jetpack Compose screen implementation for user authentication. It provides email and password fields, Google sign-in option, and navigation to sign-up screen. Uses Hilt for ViewModel injection and Material Design components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_26

LANGUAGE: kotlin
CODE:
```
@OptIn(ExperimentalMaterial3Api::class, ExperimentalComposeUiApi::class)
@Composable
fun SignInScreen(
    modifier: Modifier = Modifier,
    navController: NavController,
    viewModel: SignInViewModel = hiltViewModel()
) {
    val snackBarHostState = remember { SnackbarHostState() }
    val coroutineScope = rememberCoroutineScope()
    Scaffold(
        snackbarHost = { androidx.compose.material.SnackbarHost(snackBarHostState) },
        topBar = {
            TopAppBar(
                navigationIcon = {
                    IconButton(onClick = {
                        navController.navigateUp()
                    }) {
                        Icon(
                            imageVector = Icons.Filled.ArrowBack,
                            contentDescription = null,
                            tint = MaterialTheme.colorScheme.onPrimary
                        )
                    }
                },
                backgroundColor = MaterialTheme.colorScheme.primary,
                title = {
                    Text(
                        text = "Login",
                        color = MaterialTheme.colorScheme.onPrimary,
                    )
                },
            )
        }
    ) { paddingValues ->
        Column(
            modifier = modifier
                .padding(paddingValues)
                .padding(20.dp)
        ) {
            val email = viewModel.email.collectAsState(initial = "")
            val password = viewModel.password.collectAsState()
            androidx.compose.material.OutlinedTextField(
                label = {
                    Text(
                        text = "Email",
                        color = MaterialTheme.colorScheme.primary,
                        style = MaterialTheme.typography.titleMedium
                    )
                },
                maxLines = 1,
                shape = RoundedCornerShape(32),
                modifier = modifier.fillMaxWidth(),
                value = email.value,
                onValueChange = {
                    viewModel.onEmailChange(it)
                },
            )
            androidx.compose.material.OutlinedTextField(
                label = {
                    Text(
                        text = "Password",
                        color = MaterialTheme.colorScheme.primary,
                        style = MaterialTheme.typography.titleMedium
                    )
                },
                maxLines = 1,
                shape = RoundedCornerShape(32),
                modifier = modifier
                    .fillMaxWidth()
                    .padding(top = 12.dp),
                value = password.value,
                onValueChange = {
                    viewModel.onPasswordChange(it)
                },
            )
            val localSoftwareKeyboardController = LocalSoftwareKeyboardController.current
            Button(modifier = modifier
                .fillMaxWidth()
                .padding(top = 12.dp),
                onClick = {
                    localSoftwareKeyboardController?.hide()
                    viewModel.onGoogleSignIn()
                }) {
                Text("Sign in with Google")
            }
            Button(modifier = modifier
                .fillMaxWidth()
                .padding(top = 12.dp),
                onClick = {
                    localSoftwareKeyboardController?.hide()
                    viewModel.onSignIn()
                    coroutineScope.launch {
                        snackBarHostState.showSnackbar(
                            message = "Sign in successfully !",
                            duration = SnackbarDuration.Long
                        )
                    }
                }) {
                Text("Sign in")
            }
            OutlinedButton(modifier = modifier
                .fillMaxWidth()
                .padding(top = 12.dp), onClick = {
                navController.navigate(SignUpDestination.route)
            }) {
                Text("Sign up")
            }
        }
    }
}
```

----------------------------------------

TITLE: Defining Profile Data Model for Flutter Chat App
DESCRIPTION: This snippet defines a Profile class that represents a user profile in the chat application. It includes properties for user ID, username, and creation timestamp, with a factory constructor to create instances from map data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_7

LANGUAGE: dart
CODE:
```
class Profile {
  Profile({
    required this.id,
    required this.username,
    required this.createdAt,
  });

  /// User ID of the profile
  final String id;

  /// Username of the profile
  final String username;

  /// Date and time when the profile was created
  final DateTime createdAt;

  Profile.fromMap(Map<String, dynamic> map)
      : id = map['id'],
        username = map['username'],
        createdAt = DateTime.parse(map['created_at']);
}
```

----------------------------------------

TITLE: Initializing Storage Bucket for Product Images
DESCRIPTION: Creates a storage bucket specifically for storing product images in Supabase storage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/product_management_sql_template.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
insert into storage.buckets (id, name)
  values ('Product Image', 'Product Image');
```

----------------------------------------

TITLE: Identifying Dashboard Queries in SQL
DESCRIPTION: SQL query to find queries executed by the Supabase Dashboard. It filters for queries that include the comment '-- source: dashboard', which is specific to Dashboard requests.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
-- find queries executed by the Dashboard
...query
where
  regexp_contains(parsed.query, '-- source: dashboard')
```

----------------------------------------

TITLE: Creating Environment Loader for Supabase Client
DESCRIPTION: Exports environment variables for Supabase URL and anonymous key through a Remix loader function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
export const loader = () => {
  const env = {
    SUPABASE_URL: process.env.SUPABASE_URL,
    SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY,
  }

  return json({ env })
}
```

LANGUAGE: tsx
CODE:
```
export const loader = ({}: LoaderFunctionArgs) => {
  const env = {
    SUPABASE_URL: process.env.SUPABASE_URL!,
    SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY!,
  }

  return json({ env })
}
```

----------------------------------------

TITLE: Configuring Self-Send Messages in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to configure a Supabase Realtime channel to receive its own broadcast messages. It sets the 'self' parameter to true and includes event handling and message sending.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const myChannel = supabase.channel('room-2', {
  config: {
    broadcast: { self: true },
  },
})

myChannel.on(
  'broadcast',
  { event: 'test-my-messages' },
  (payload) => console.log(payload)
)

myChannel.subscribe((status) => {
  if (status !== 'SUBSCRIBED') { return }
  channelC.send({
    type: 'broadcast',
    event: 'test-my-messages',
    payload: { message: 'talking to myself' },
  })
})
```

----------------------------------------

TITLE: Using Aliases in SQL Queries
DESCRIPTION: Demonstrates proper alias usage in SQL queries with the explicit 'as' keyword. Shows how to create meaningful column aliases that reflect the operation being performed.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select count(*) as total_employees
from employees
where end_date is null;
```

----------------------------------------

TITLE: Inserting Time-Series Data
DESCRIPTION: Example of inserting temperature readings from multiple sensors with timestamps into the hypertable.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/timescaledb.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
insert into temperatures (time, sensor_id, temperature)
values
    ('2023-02-14 09:00:00', 1, 23.5),
    ('2023-02-14 09:00:00', 2, 21.2),
    ('2023-02-14 09:05:00', 1, 24.5),
    ('2023-02-14 09:05:00', 2, 22.3),
    ('2023-02-14 09:10:00', 1, 25.1),
    ('2023-02-14 09:10:00', 2, 23.9),
    ('2023-02-14 09:15:00', 1, 24.9),
    ('2023-02-14 09:15:00', 2, 22.7),
    ('2023-02-14 09:20:00', 1, 24.7),
    ('2023-02-14 09:20:00', 2, 23.5);
```

----------------------------------------

TITLE: Inserting Geographic Point Data with Dart
DESCRIPTION: Dart code using Supabase client to insert restaurant data with geographic points as WKT strings. The POINT format follows the same convention as in other languages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
await supabase.from('restaurants').insert([
  {
    'name': 'Supa Burger',
    'location': 'POINT(-73.946823 40.807416)',
  },
  {
    'name': 'Supa Pizza',
    'location': 'POINT(-73.94581 40.807475)',
  },
  {
    'name': 'Supa Taco',
    'location': 'POINT(-73.945826 40.80629)',
  },
]);
```

----------------------------------------

TITLE: Setting Parallel Maintenance Workers for Indexing
DESCRIPTION: SQL command to configure max_parallel_maintenance_workers, which controls how many CPU cores can be utilized during maintenance operations like index creation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
set max_parallel_maintenance_workers to <integer>;
```

----------------------------------------

TITLE: Downloading Transformed Image in Swift
DESCRIPTION: This snippet illustrates how to download a transformed image using the Supabase Swift client, specifying transformation options.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_11

LANGUAGE: swift
CODE:
```
let data = try await supabase.storage.from("bucket")
  .download(
    path: "image.jpg",
    options: TransformOptions(
      width: 800,
      height: 300
    )
  )
```

----------------------------------------

TITLE: Viewing Table Ownership in PostgreSQL
DESCRIPTION: This snippet shows how to view the owner of a specific table using the \dt command in PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
postgres=> \dt public.apps
          List of relations
┌────────┬──────┬───────┬────────────┐
│ Schema │ Name │ Type  │   Owner    │
├────────┼──────┼───────┼────────────┤
│ public │ apps │ table │ junior_dev │
└────────┴──────┴───────┴────────────┘
(1 row)
```

----------------------------------------

TITLE: Setting Up Environment Variables for Supabase
DESCRIPTION: Creating a .env file to store Supabase URL and anonymous key for connecting to the Supabase backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Environment Variables Setup for Supabase
DESCRIPTION: Instructions for configuring environment variables in a .env file for Supabase integration in a React application. These variables are essential for connecting to the Supabase backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/social-auth.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Detecting User Location in Edge Functions
DESCRIPTION: This code snippet shows how to detect a user's location from Edge Functions using the X-Forwarded-For header.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-02-supabase-beta-update-october-2022.mdx#2025-04-21_snippet_1

LANGUAGE: TypeScript
CODE:
```
// Example code mentioned but not provided in the text:
// https://github.com/supabase/supabase/tree/master/examples/edge-functions/supabase/functions/location
```

----------------------------------------

TITLE: Creating Foreign Table for Vector Collection
DESCRIPTION: SQL code to create a foreign table that connects to a remote vector collection
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/engineering-for-scale.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create foreign table docs (
  id text not null,
  embedding vector(384),
  metadata jsonb,
  url text
)
server docs_server
options (schema_name 'public', table_name 'docs');
```

----------------------------------------

TITLE: Setting up blocking authentication functions in Node.js for Supabase role assignment
DESCRIPTION: This TypeScript code creates blocking Firebase Authentication functions that add a role custom claim to users when they sign up or sign in. This role will be used by Supabase to assign the authenticated Postgres role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { beforeUserCreated, beforeUserSignedIn } from 'firebase-functions/v2/identity'

export const beforecreated = beforeUserCreated((event) => {
  return {
    customClaims: {
      // The Supabase project will use this role to assign the `authenticated`
      // Postgres role.
      role: 'authenticated',
    },
  }
})

export const beforesignedin = beforeUserSignedIn((event) => {
  return {
    customClaims: {
      // The Supabase project will use this role to assign the `authenticated`
      // Postgres role.
      role: 'authenticated',
    },
  }
})
```

----------------------------------------

TITLE: Querying Role Configuration Settings in PostgreSQL
DESCRIPTION: This SQL query retrieves the current configuration settings for all roles in the PostgreSQL database, showing both the role name and any specific configuration parameters set for that role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/canceling-statement-due-to-statement-timeout-581wFv.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT rolname, rolconfig FROM pg_roles;
```

----------------------------------------

TITLE: Creating and Populating Node Tables for Categories and Videos in SQL
DESCRIPTION: This snippet demonstrates how to create tables for categories and videos, which serve as nodes in the recommendation graph. It also includes sample data insertion.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create table categories (
  id serial primary key,
  name text
);

insert into categories (name)
values
  ('Graph Theory'),
  ('AI & Machine Learning'),
  ('Python Programming');

create table videos (
  id serial primary key,
  title text,
  category_id int references categories (id)
);

insert into videos (title, category_id)
values
  ('Intro to Graph Theory', 1),
  ('Advanced Graph Algorithms', 1),
  ('Graph Neural Networks', 2),
  ('Beginner Python Tutorial', 3),
  ('Advanced Python Techniques', 3);
```

----------------------------------------

TITLE: Dropping All Tables in PostgreSQL Schema using PL/pgSQL
DESCRIPTION: A PL/pgSQL script that iterates through all tables in a specified schema and drops them using CASCADE. The script uses pg_tables system catalog to identify tables and quote_ident for proper identifier escaping. Requires schema name as input parameter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/dropping-all-tables-in-schema.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
do $$ declare
    r record;
begin
    for r in (select tablename from pg_tables where schemaname = 'my-schema-name') loop
        execute 'drop table if exists ' || quote_ident(r.tablename) || ' cascade';
    end loop;
end $$;
```

----------------------------------------

TITLE: Storing Messages from Realtime Chat in TypeScript
DESCRIPTION: This snippet details how to handle and store chat messages from the `RealtimeChat` component. It uses the `onMessage` callback prop to process incoming messages, with the `storeMessages` function handling the persistence of these messages in a database. This approach ensures message synchronization and persistence.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/realtime-chat.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { RealtimeChat } from '@/components/realtime-chat'
import { useMessagesQuery } from '@/hooks/use-messages-query'
import { storeMessages } from '@/lib/store-messages'

export default function ChatPage() {
  const { data: messages } = useMessagesQuery()
  const handleMessage = (messages: ChatMessage[]) => {
    // Store messages in your database
    await storeMessages(messages)
  }

  return <RealtimeChat roomName="my-chat-room" username="john_doe" onMessage={handleMessage} />
}
```

----------------------------------------

TITLE: Exporting Database with pg_dump
DESCRIPTION: Command to export data from Vercel Postgres using pg_dump with flags for cleaning existing objects, handling if-exists conditions, properly quoting identifiers, and removing ownership and privileges information.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/vercel-postgres.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
pg_dump "$OLD_DB_URL" \
  --clean \
  --if-exists \
  --quote-all-identifiers \
  --no-owner \
  --no-privileges \
  > dump.sql
```

----------------------------------------

TITLE: Initializing Postgres Message Queue Extension
DESCRIPTION: Configures the pgmq extension for creating durable message queues in PostgreSQL, providing reliable message delivery and queue management capabilities
SOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/static-data/integrations/queues/overview.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE EXTENSION pgmq
```

----------------------------------------

TITLE: Implementing Twitch Sign-Out Code in JavaScript
DESCRIPTION: This snippet shows how to implement the sign-out functionality for a user logged in via Twitch OAuth using the Supabase JavaScript client. It utilizes the signOut method to remove the user session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}
```

----------------------------------------

TITLE: Querying Stripe Products Data in PostgreSQL
DESCRIPTION: SQL query to fetch Stripe products directly from the foreign table in PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- Fetch all your stripe products in Postgres
select *
from products
limit 10;
```

----------------------------------------

TITLE: Hiding Links in Supabase Auth Component - React - JavaScript
DESCRIPTION: This snippet illustrates how to hide authentication links by setting the 'showLinks' prop to false in the Supabase Auth component. This is useful for customizing the UI based on user requirements.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nimport { Auth } from '@supabase/auth-ui-react'\n\nconst supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')\n\nconst App = () => <Auth supabaseClient={supabase} showLinks={false} />
```

----------------------------------------

TITLE: Verifying Database Setting Change in Supabase Postgres
DESCRIPTION: This SQL command shows how to verify a change in a database setting, specifically checking the current value of statement_timeout.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
show "statement_timeout";
```

----------------------------------------

TITLE: Importing Foreign Schema in Postgres
DESCRIPTION: SQL commands to import tables from a foreign database. Includes examples for importing all tables from a schema and importing specific tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
Example: Import all tables from a schema
import foreign schema "<foreign_schema>"
from server "<foreign_server>"
into "<host_schema>";

Example: Import specific tables
import foreign schema "<foreign_schema>"
limit to (
    "<table_name1>",
    "<table_name2>"
)
from server "<foreign_server>"
into "<host_schema>";
```

----------------------------------------

TITLE: Getting Logged-in User in v0 vs v1
DESCRIPTION: Demonstrates the change in how to get the logged-in user. In v1, a property is used instead of a method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_11

LANGUAGE: dart
CODE:
```
final user = supabase.auth.user();
```

LANGUAGE: dart
CODE:
```
final User? user = supabase.auth.currentUser;
```

----------------------------------------

TITLE: Accessing Postgres Database
DESCRIPTION: Command to connect to the local Postgres database using psql client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_7

LANGUAGE: sh
CODE:
```
psql 'postgresql://postgres:postgres@localhost:54322/postgres'
```

----------------------------------------

TITLE: Creating Vector Collection in Python
DESCRIPTION: Creates a new collection called 'docs' with 3-dimensional vectors using the Vecs client
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vecs-python-client.mdx#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import vecs

# create vector store client
vx = vecs.create_client("postgresql://postgres:postgres@localhost:54322/postgres")

# create a collection of vectors with 3 dimensions
docs = vx.get_or_create_collection(name="docs", dimension=3)
```

----------------------------------------

TITLE: Retrieving Function Definition in SQL
DESCRIPTION: SQL query to get the definition of a specific function for debugging trigger-related issues.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-500-status-authentication-errors-7bU5U8.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select pg_get_functiondef(oid)
from pg_proc
where proname = '<FUNCTION NAME>';
```

----------------------------------------

TITLE: Testing PostgreSQL Table Existence
DESCRIPTION: Basic pgTAP test to verify the existence of a table in the database. Uses the has_table() function within a transaction block.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgtap.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
begin;
select plan( 1 );

select has_table( 'profiles' );

select * from finish();
rollback;
```

----------------------------------------

TITLE: Executing Basic SQL Operations with WHERE Clauses
DESCRIPTION: Demonstrates how to perform SELECT, UPDATE, and DELETE operations using WHERE clauses in SQL. These examples show the standard way of filtering rows in database operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-simplified-BJTcS8.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- select
select *
from some_table
where id = 5;

-- update
update some_table
set id = 6
where id = 5;

-- delete
delete from some_table
where id = 6;
```

----------------------------------------

TITLE: Unsubscribing from Realtime Channel - Dart Supabase
DESCRIPTION: Updated method for removing realtime subscriptions in Supabase Dart library
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_17

LANGUAGE: dart
CODE:
```
supabase.removeSubscription(subscription);
```

LANGUAGE: dart
CODE:
```
await supabase.removeChannel(channel);
```

----------------------------------------

TITLE: Setting Up RLS Testing Environment in SQL
DESCRIPTION: This SQL snippet sets up the environment for testing RLS performance. It sets the session role to authenticated and configures JWT claims for the test user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
set session role authenticated;
set request.jwt.claims to '{"role":"authenticated", "sub":"5950b438-b07c-4012-8190-6ce79e4bd8e5"}';

explain analyze SELECT count(*) FROM rlstest;
set session role postgres;
```

----------------------------------------

TITLE: Frontend Stream Processing Implementation
DESCRIPTION: Frontend handler for processing the OpenAI API event stream, managing state updates, and displaying responses to users in real-time.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/nextjs-vector-search.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
const handleConfirm = React.useCallback(
  async (query: string) => {
    setAnswer(undefined)
    setQuestion(query)
    setSearch('')
    dispatchPromptData({ index: promptIndex, answer: undefined, query })
    setHasError(false)
    setIsLoading(true)

    const eventSource = new SSE(`api/vector-search`, {
      headers: {
        apikey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ?? '',
        Authorization: `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json',
      },
      payload: JSON.stringify({ query }),
    })

    function handleError<T>(err: T) {
      setIsLoading(false)
      setHasError(true)
      console.error(err)
    }

    eventSource.addEventListener('error', handleError)
    eventSource.addEventListener('message', (e: any) => {
      try {
        setIsLoading(false)

        if (e.data === '[DONE]') {
          setPromptIndex((x) => {
            return x + 1
          })
          return
        }

        const completionResponse: CreateCompletionResponse = JSON.parse(e.data)
        const text = completionResponse.choices[0].text

        setAnswer((answer) => {
          const currentAnswer = answer ?? ''

          dispatchPromptData({
            index: promptIndex,
            answer: currentAnswer + text,
          })

          return (answer ?? '') + text
        })
      } catch (err) {
        handleError(err)
      }
    })

    eventSource.stream()

    eventSourceRef.current = eventSource

    setIsLoading(true)
  },
  [promptIndex, promptData]
)
```

----------------------------------------

TITLE: Revoking All Function Permissions
DESCRIPTION: Commands to revoke execution permissions for all functions in the public schema from multiple roles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
revoke execute on all functions in schema public from public;
revoke execute on all functions in schema public from anon, authenticated;
```

----------------------------------------

TITLE: Importing NPM Module in TypeScript
DESCRIPTION: Example of importing an npm module using the npm: specifier in Supabase Edge Functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from 'npm:@supabase/supabase-js@2'
```

----------------------------------------

TITLE: Sign In with Facebook using Supabase
DESCRIPTION: This Swift snippet demonstrates how to sign in a user with Facebook using Supabase's `signInWithOAuth` method. It calls the `signInWithOAuth` function with `.facebook` as the provider, and optionally sets a redirect URI and a closure to handle the OAuth flow.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_2

LANGUAGE: swift
CODE:
```
func signInWithFacebook() async throws {
  try await supabase.auth.signInWithOAuth(
    provider: .facebook,
    redirectTo: URL(string: "my.scheme://my-host")!, // Optionally set the redirect link to bring back the user via deeplink.
    launchFlow: { url in
      // use url to start OAuth flow
      // and return a result url that contains the OAuth token.
      // ...
      return resultURL
    }
  )
}
```

----------------------------------------

TITLE: Creating OG Image Handler with React and Deno
DESCRIPTION: A React component handler that generates an Open Graph image using the ImageResponse API from og_edge. The component creates a simple centered text display with a lavender background.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/og-image.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import React from 'https://esm.sh/react@18.2.0'
import { ImageResponse } from 'https://deno.land/x/og_edge@0.0.4/mod.ts'

export default function handler(req: Request) {
  return new ImageResponse(
    (
      <div
        style={{
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: 128,
          background: 'lavender',
        }}
      >
        Hello OG Image!
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Testing Row Level Security (RLS) across a schema in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to create a simple test to verify that Row Level Security (RLS) is enabled across an entire schema using the test helpers package.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
begin;
select plan(1);

-- Verify RLS is enabled on all tables in the public schema
select tests.rls_enabled('public');

select * from finish();
rollback;
```

----------------------------------------

TITLE: Benchmarking ID Generation Speed with pg_idkit
DESCRIPTION: A SQL query to benchmark the generation speed of various ID formats using the idkit_ksuid_generate() function with generate_series to create 1 million IDs and count them. This demonstrates how to measure performance for ID generation mechanisms.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
\timing -- enable psql timing mode

-- Generate IDs 1 million times with ksuid
SELECT COUNT(idkit_ksuid_generate()) FROM generate_series(1, 1000000);
```

----------------------------------------

TITLE: Disabling Role Inheritance in PostgreSQL
DESCRIPTION: Modifies an existing role to prevent inheritance of permissions from parent roles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/roles.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
alter role "child_role_name" noinherit;
```

----------------------------------------

TITLE: Importing MongoDB JSON Data into Supabase
DESCRIPTION: JavaScript script using the Supabase JavaScript client to import MongoDB JSON data into a Supabase table. It reads the JSON file and inserts each document as a row in the specified table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-20-migrating-mongodb-data-api-with-supabase.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
import { createClient } from '@supabase/supabase-js'
import fs from 'fs'

const supabaseUrl = 'YOUR_SUPABASE_URL'
const supabaseKey = 'YOUR_SUPABASE_API_KEY'
const tableName = 'YOUR_TABLE_NAME'
const jsonFilePath = './filename.json'

const supabase = createClient(supabaseUrl, supabaseKey)

async function loadDocumentsToSupabase() {
  try {
    // Read JSON file
    const rawData = fs.readFileSync(jsonFilePath)
    const dataArray = JSON.parse(rawData).map((data) => ({ data }))

    // Insert data into Supabase
    const { error } = await supabase.from(tableName).insert(dataArray)

    if (error) {
      console.error('Error inserting data:', error)
      return
    }

    console.log(`Successfully inserted ${dataArray.length} records into ${tableName}`)
  } catch (error) {
    console.error('Error in process:', error)
  }
}

loadDocumentsToSupabase()
```

----------------------------------------

TITLE: Signing in with OTP using Kotlin
DESCRIPTION: Provides direction for executing a sign-in using OTP with Kotlin in Supabase. Inputs involve the user's email for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_9

LANGUAGE: Kotlin
CODE:
```
suspend fun signInWithEmailOtp() {
	supabase.auth.signInWith(OTP) {
		email = "valid.email@supabase.io"
	}
}
```

----------------------------------------

TITLE: Creating HNSW Index with Inner Product Distance in SQL
DESCRIPTION: Creates an HNSW index on a vector column using inner product distance operator class. This index type is optimal for similarity search using dot product calculations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/hnsw-indexes.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create index on items using hnsw (column_name vector_ip_ops);
```

----------------------------------------

TITLE: Implementing Twitch Sign-Out Code in Flutter
DESCRIPTION: This snippet illustrates how to implement the sign-out functionality in the Supabase Flutter client, allowing the user to terminate their session when signed in via Twitch.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
Future<void> signOut() async {\n  await supabase.auth.signOut();\n}
```

----------------------------------------

TITLE: Dynamic URL Resolution for Vercel Deployments
DESCRIPTION: Function to dynamically determine the redirect URL based on environment variables for Vercel deployments, with OAuth sign-in implementation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/redirect-urls.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const getURL = () => {
  let url =
    process?.env?.NEXT_PUBLIC_SITE_URL ?? // Set this to your site URL in production env.
    process?.env?.NEXT_PUBLIC_VERCEL_URL ?? // Automatically set by Vercel.
    'http://localhost:3000/'
  // Make sure to include `https://` when not localhost.
  url = url.startsWith('http') ? url : `https://${url}`
  // Make sure to include a trailing `/`.
  url = url.endsWith('/') ? url : `${url}/`
  return url
}

const { data, error } = await supabase.auth.signInWithOAuth({
  provider: 'github',
  options: {
    redirectTo: getURL(),
  },
})
```

----------------------------------------

TITLE: Creating and Populating Sparse Vector Table
DESCRIPTION: Demonstrates creation and population of a table using sparse vectors to save storage space for vectors with many zero components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create embedding_sparse (
  id serial,
  vector sparsevec(1536),
  primary key (id)
)

insert into embedding_sparse (embedding) values ('{1:0.1,3:0.2,5:0.3}/1536'), ('{1:0.4,3:0.5,5:0.6}/1536');
```

----------------------------------------

TITLE: Configuring Supabase Project Link Command
DESCRIPTION: Command to link a local Supabase project with a remote project configuration using the project reference.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
SUPABASE_ENV=production npx supabase@latest link --project-ref <your-project-ref>
```

----------------------------------------

TITLE: Importing Dependencies and Environment Setup
DESCRIPTION: Python code to import necessary libraries and set up environment variables for Supabase and Mixpeek integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from supabase import create_client, Client
from mixpeek import Mixpeek
import os

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_API_KEY")
MIXPEEK_API_KEY = os.getenv("MIXPEEK_API_KEY")
```

----------------------------------------

TITLE: Creating Signed URL for Transformed Image in Dart
DESCRIPTION: This snippet demonstrates how to create a signed URL for a transformed image in a private bucket using the Supabase Dart client, specifying expiration time and transformation options.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
final url = await supabase.storage.from('bucket').createSignedUrl(
      'image.jpg',
      60000,
      transform: const TransformOptions(
        width: 200,
        height: 200,
      ),
    );
```

----------------------------------------

TITLE: Optimizing Image Quality with Supabase Storage in Dart
DESCRIPTION: This code shows how to download an image from Supabase Storage with quality transformation set to 50% using the Dart client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_23

LANGUAGE: Dart
CODE:
```
final data = await supabase.storage.from('bucket').download(
      'image.jpg',
      transform: const TransformOptions(
        quality: 50,
      ),
    );
```

----------------------------------------

TITLE: Realtime Multiplayer Channel Implementation
DESCRIPTION: Shows how to implement Realtime Multiplayer features including broadcast events, presence tracking, and channel subscription.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-21-supabase-flutter-sdk-v1-released.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
final channel = Supabase.instance.client.channel('my_channel');

// listen to `location` broadcast events
channel.on(
    RealtimeListenTypes.broadcast,
    ChannelFilter(
      event: 'location',
    ), (payload, [ref]) {
	// Do something exciting with the broadcast event
});

// send `location` broadcast events
channel.send(
  type: RealtimeListenTypes.broadcast,
  event: 'location',
  payload: {'lat': 1.3521, 'lng': 103.8198},
);

// listen to presence states
channel.on(RealtimeListenTypes.presence, ChannelFilter(event: 'sync'),
    (payload, [ref]) {
	// Do something exciting with the presence state
});

// subscribe to the above changes
channel.subscribe((status) async {
  if (status == 'SUBSCRIBED') {
    // if subscribed successfully, send presence event
    final status = await channel.track({'user_id': myUserId});
  }
});
```

----------------------------------------

TITLE: Acknowledging Messages in Dart
DESCRIPTION: This Dart snippet shows how to configure a Supabase Realtime channel to acknowledge received messages. It sets the 'ack' parameter to true and sends a broadcast message with acknowledgment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_11

LANGUAGE: dart
CODE:
```
final myChannel = supabase.channel('room-3',opts: const RealtimeChannelConfig(
  ack: true,
),

);

myChannel.subscribe( (status, error) async {
  if (status != RealtimeSubscribeStatus.subscribed) return;

  final serverResponse = await myChannel.sendBroadcastMessage(

    event: 'acknowledge',
    payload: {},
  );

  print('serverResponse: $serverResponse');
});
```

----------------------------------------

TITLE: SQL Schema for Movies Table
DESCRIPTION: This SQL snippet creates a 'movies' table with an auto-incrementing id, a required name field, and an optional JSON data field.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table public.movies (
  id bigint generated always as identity primary key,
  name text not null,
  data jsonb null
);
```

----------------------------------------

TITLE: Initializing and Starting Local Supabase Database from Backup
DESCRIPTION: Commands to initialize Supabase locally, set the Postgres version, and start a database from a backup file. Requires Supabase CLI and a backup file named db_cluster.backup.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/restoring-downloaded-backup.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
supabase init
echo '15.6.1.115' > supabase/.temp/postgres-version
supabase db start --from-backup db_cluster.backup
```

----------------------------------------

TITLE: Reset Supabase Database (CLI)
DESCRIPTION: This command resets the local Supabase database, reapplying all migrations and seeding data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
supabase db reset
```

----------------------------------------

TITLE: Specifying Content Type for Uploads in Supabase Storage with Dart
DESCRIPTION: This code shows how to specify the content type when uploading a file to Supabase Storage using Dart. It uses the 'contentType' option in FileOptions to set the MIME type.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_11

LANGUAGE: dart
CODE:
```
await supabase.storage.from('bucket_name').upload(
      'file_path',
      file,
      fileOptions: const FileOptions(contentType: 'image/jpeg'),
    );
```

----------------------------------------

TITLE: Revoking Function Execution Privileges
DESCRIPTION: Examples of revoking function execution permissions from specific roles and public access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
revoke execute on function public.hello_world from public;
revoke execute on function public.hello_world from anon;
```

----------------------------------------

TITLE: Creating Basic Users Table with Integer Primary Key
DESCRIPTION: Demonstrates creating a users table with an integer primary key and email uniqueness constraint using citext extension
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE EXTENSION IF NOT EXISTS citext;

CREATE TABLE users (
  id integer PRIMARY KEY,
  email citext NOT NULL CHECK (LENGTH(email) < 255),
  name text NOT NULL
);

CREATE UNIQUE INDEX users_email_uniq ON users USING BTREE (email);
```

----------------------------------------

TITLE: Implementing Next.js Image Loader for Supabase Storage
DESCRIPTION: Shows how to set up and use a custom Next.js image loader for serving images from Supabase Storage, including configuration and usage examples.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-12-storage-v3-resumable-uploads.mdx#2025-04-22_snippet_1

LANGUAGE: javascript
CODE:
```
// supabase-image-loader.js
const projectId = '<SUPABASE_PROJECT_ID>'
export default function supabaseLoader({ src, width, quality }) {
  return `https://${projectId}.supabase.co/storage/v1/render/image/public/${src}?width=${width}&quality=${
    quality || 75
  }`
}

// nextjs.config.js
module.exports = {
  images: {
    loader: 'custom',
    loaderFile: './supabase-image-loader.js',
  },
}

// Using Next Image
import Image from 'next/image'
const MyImage = (props) => {
  return <Image src="bucket/image.png" alt="Picture of the author" width={500} height={500} />
}
```

----------------------------------------

TITLE: Selecting Data as Senior Dev
DESCRIPTION: Shows data access from senior_dev role without explicit grants.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_21

LANGUAGE: bash
CODE:
```
# as senior_dev
postgres=> select * from public.users;
┌────┬──────────┐
│ id │   name   │
├────┼──────────┤
│  1 │ john doe │
└────┴──────────┘
(1 row)
```

----------------------------------------

TITLE: Building Angular Workspace Component Controller
DESCRIPTION: The TypeScript controller for the workspace component that handles loading boards, creating new boards, and user authentication. It includes logic to handle the special case where a database trigger causes a delay in authorization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_20

LANGUAGE: typescript
CODE:
```
import { AuthService } from './../../../services/auth.service'
import { Router } from '@angular/router'
import { DataService } from './../../../services/data.service'
import { Component, OnInit } from '@angular/core'

@Component({
  selector: 'app-workspace',
  templateUrl: './workspace.component.html',
  styleUrls: ['./workspace.component.scss'],
})
export class WorkspaceComponent implements OnInit {
  boards: any[] = []
  user = this.auth.currentUser

  constructor(
    private dataService: DataService,
    private router: Router,
    private auth: AuthService
  ) {}

  async ngOnInit() {
    this.boards = await this.dataService.getBoards()
  }

  async startBoard() {
    const data = await this.dataService.startBoard()

    // Load all boards because we only get back minimal data
    // Trigger needs to run first
    // Otherwise RLS would fail
    this.boards = await this.dataService.getBoards()

    if (this.boards.length > 0) {
      const newBoard = this.boards.pop()

      if (newBoard.boards) {
        this.router.navigateByUrl(`/workspace/${newBoard.boards.id}`)
      }
    }
  }

  signOut() {
    this.auth.logout()
  }
}
```

----------------------------------------

TITLE: Regional Invocation with JavaScript SDK
DESCRIPTION: Demonstrates how to invoke an Edge Function in a specific region using the Supabase JavaScript client. Uses the supabase.functions.invoke method with x-region header.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-edge-functions-node-npm.mdx#2025-04-21_snippet_2

LANGUAGE: js
CODE:
```
// https://supabase.com/docs/reference/javascript/installing
import { createClient } from '@supabase/supabase-js'

// Create a single supabase client for interacting with your database
const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')

// https://supabase.com/docs/reference/javascript/functions-invoke
const { data, error } = await supabase.functions.invoke('hello-world', {
  body: { name: 'Functions' },
  headers: { 'x-region': 'eu-west-3' },
})
```

----------------------------------------

TITLE: Connecting to Postgres with Vecs in Python
DESCRIPTION: Demonstrates how to create a client connection to a Postgres database and create a collection of vectors. This establishes the initial connection and sets up a table in the database to store vectors with a specified dimension.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
import vecs

DB_CONNECTION = "postgresql://<user>:<password>@<host>:<port>/<db_name>"

# create vector store client
vx = vecs.create_client(DB_CONNECTION)

# create a collection of vectors with 3 dimensions
docs = vx.get_or_create_collection(name="docs", dimension=3)
```

----------------------------------------

TITLE: Aggregate Functions with Embedded Resources in Supabase.js
DESCRIPTION: This snippet shows how to use aggregate functions with embedded resources to find the newest and oldest movie years for each director using the Supabase JavaScript client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_7

LANGUAGE: js
CODE:
```
const { data, error } = await supabase.from('directors').select(`name,
		movies(
			newest_movie_year:release_year.max(),
			oldest_movie_year:release_year.min()
		)`)
```

----------------------------------------

TITLE: Querying Many-to-Many Relationships with GraphQL
DESCRIPTION: GraphQL query example showing how to query teams with their related users through a many-to-many relationship.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
const Query = `
  query {
    teamsCollection {
      edges {
        node {
          id
          team_name
          users {
            id,
            name
          }
        }
      }
    }
  }
`
```

----------------------------------------

TITLE: Custom Theme Implementation
DESCRIPTION: Example of creating and implementing a custom theme for Auth UI with light and dark variations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'

const supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')

const customTheme = {
  default: {
    colors: {
      brand: 'hsl(153 60.0% 53.0%)',
      brandAccent: 'hsl(154 54.8% 45.1%)',
      brandButtonText: 'white',
      // ..
    },
  },
  dark: {
    colors: {
      brandButtonText: 'white',
      defaultButtonBackground: '#2e2e2e',
      defaultButtonBackgroundHover: '#3e3e3e',
      //..
    },
  },
  evenDarker: {
    colors: {
      brandButtonText: 'white',
      defaultButtonBackground: '#1e1e1e',
      defaultButtonBackgroundHover: '#2e2e2e',
      //..
    },
  },
}

const App = () => (
  <Auth
    supabaseClient={supabase}
    theme="default"
    appearance={{ theme: customTheme }}
  />
)
```

----------------------------------------

TITLE: Creating Supabase Client for Components in Next.js
DESCRIPTION: Utility function to create a Supabase client for use in client-side components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  const supabase = createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )

  return supabase
}
```

----------------------------------------

TITLE: Configuring OAuth Provider in TOML
DESCRIPTION: Example of enabling the Apple OAuth provider for local development by adding configuration to the config.toml file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/managing-config.mdx#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[auth.external.apple]
enabled = false
client_id = ""
secret = ""
redirect_uri = "" # Overrides the default auth redirectUrl.
```

----------------------------------------

TITLE: Integrating Sentry Error Tracking with Edge Functions
DESCRIPTION: Shows how to set up error tracking for Edge Functions using Sentry. This example configures the Sentry SDK, sets custom tags for region and execution ID, and captures exceptions within a request handler.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-edge-functions-node-npm.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import * as Sentry from 'https://deno.land/x/sentry/index.mjs'

Sentry.init({
  dsn: _DSN_,
  integrations: [],
  // Performance Monitoring
  tracesSampleRate: 1.0,
  // Set sampling rate for profiling - this is relative to tracesSampleRate
  profilesSampleRate: 1.0,
})

// Set region and execution_id as custom tags
Sentry.setTag('region', Deno.env.get('SB_REGION'))
Sentry.setTag('execution_id', Deno.env.get('SB_EXECUTION_ID'))

Deno.serve(async (req) => {
  try {
    const { name } = await req.json()
    const data = {
      message: `Hello ${name}!`,
    }

    return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } })
  } catch (e) {
    Sentry.captureException(e)
    return new Response(JSON.stringify({ msg: 'error' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    })
  }
})
```

----------------------------------------

TITLE: Running Edge Function Locally
DESCRIPTION: Commands to start the Supabase services and serve the edge function locally with environment variables. This allows testing the function at the specified local URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/upstash-redis.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase start
supabase functions serve --no-verify-jwt --env-file supabase/functions/upstash-redis-counter/.env
```

----------------------------------------

TITLE: Example Usage - Supabase RPC Call
DESCRIPTION: Example of executing a Postgres function through the Edge Function using Supabase client
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
SELECT edge.exec(
  $js$
  const { data, error } = await supabase.rpc('postgres_function', {'foo': 'bar'});
  if (error) {
    return new Response(JSON.stringify({ error: "An error occurred ->" + error.message }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    });
  }
  return data;
  $js$
);
```

----------------------------------------

TITLE: Creating HTML Email Template for User Sign-up Confirmation
DESCRIPTION: Defines an HTML email template for user sign-up confirmation. It includes a link for users to confirm their email address, utilizing Supabase variables for dynamic content.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/password-based-auth.mdx#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<h2>Confirm your signup</h2>

<p>Follow this link to confirm your user:</p>
<p>
  <a
    href="{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email&next={{ .RedirectTo }}"
    >Confirm your email</a
  >
</p>
```

----------------------------------------

TITLE: Revoking Permissions in PostgreSQL
DESCRIPTION: Removes specific permissions from a role for a database object.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/roles.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
REVOKE permission_type ON object_name FROM role_name;
```

----------------------------------------

TITLE: Using NOTIFY and LISTEN in Postgres SQL for event communication
DESCRIPTION: Example showing how to use Postgres' NOTIFY and LISTEN commands to send and receive messages on a specific channel via psql.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-09-elixir-clustering-using-postgres.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
postgres=# LISTEN channel;
LISTEN
postgres=# NOTIFY channel, 'payload';
NOTIFY
Asynchronous notification "channel" with payload "payload" received from server process with PID 326.
```

----------------------------------------

TITLE: Unnesting Edge Logs SQL Query
DESCRIPTION: SQL query demonstrating how to unnest metadata and response fields from edge_logs to access status codes and event messages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select
  -- the event message does not require unnesting
  event_message,
  -- unnested status_code column from metadata.response field
  status_code
from
  edge_logs
  -- Unpack data stored in the 'metadata' field
  cross join unnest(metadata) as metadata
  -- After unpacking the 'metadata' field, extract the 'response' field from it
  cross join unnest(response) as response;
```

----------------------------------------

TITLE: CSS Variables for Sidebar Theming
DESCRIPTION: Defines CSS variables for theming the sidebar component in both light and dark modes, with separate variables from the main application theme.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_38

LANGUAGE: css
CODE:
```
@layer base {
  :root {
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 0 0% 98%;
    --sidebar-primary-foreground: 240 5.9% 10%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}
```

----------------------------------------

TITLE: Seeding storage buckets to Supabase
DESCRIPTION: This command uploads files from the local directory specified in config.toml to the corresponding bucket in your Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
supabase seed buckets
```

----------------------------------------

TITLE: Using Tailwind Typography Plugin to Style Article Content - HTML
DESCRIPTION: This HTML snippet demonstrates the use of the 'prose' class from the Tailwind CSS Typography plugin to style article content, including headings, paragraphs, and other typographic elements for better readability and aesthetics. The 'prose' class provides a predefined set of styles that enhance the formatting of text elements.
SOURCE: https://github.com/supabase/supabase/blob/master/packages/ui/src/lib/MarkdownSample.md#2025-04-21_snippet_0

LANGUAGE: html
CODE:
```
<article class="prose">
  <h1>Garlic bread with cheese: What the science tells us</h1>
  <p>
    For years parents have espoused the health benefits of eating garlic bread with cheese to their
    children, with the food earning such an iconic status in our culture that kids will often dress
    up as warm, cheesy loaf for Halloween.
  </p>
  <p>
    But a recent study shows that the celebrated appetizer may be linked to a series of rabies cases
    springing up around the country.
  </p>
  <!-- ... -->
</article>
```

----------------------------------------

TITLE: Installing Supabase Vector Extension (vecs)
DESCRIPTION: Command to install the Supabase vecs Python package for working with vector embeddings in Supabase Postgres database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
pip install vecs
```

----------------------------------------

TITLE: Signing Out with Supabase Kotlin
DESCRIPTION: This Kotlin snippet demonstrates how to sign out a user using the Supabase authentication service by calling the `signOut` function. Ensure Supabase's Kotlin library is integrated properly for session management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_5

LANGUAGE: Kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Inspecting Cron Job Runs using SQL in Supabase
DESCRIPTION: This SQL query retrieves the run history of a specific cron job from the cron.job_run_details table, ordered by start time in descending order and limited to the last 10 runs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select
  *
from cron.job_run_details
where jobid = (select jobid from cron.job where jobname = 'permanent-cron-job-name')
order by start_time desc
limit 10;
```

----------------------------------------

TITLE: Initializing Supabase Client in RedwoodJS App.js
DESCRIPTION: Configuration for the Supabase client in the RedwoodJS app's main App component, setting up AuthProvider with the Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
// ... Redwood imports
import { AuthProvider } from '@redwoodjs/auth'
import { createClient } from '@supabase/supabase-js'

// ...

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY)

const App = () => (
  <FatalErrorBoundary page={FatalErrorPage}>
    <RedwoodProvider titleTemplate="%PageTitle | %AppTitle">
      <AuthProvider client={supabase} type="supabase">
        <RedwoodApolloProvider>
          <Routes />
        </RedwoodApolloProvider>
      </AuthProvider>
    </RedwoodProvider>
  </FatalErrorBoundary>
)

export default App
```

----------------------------------------

TITLE: Creating Basic PostgreSQL View
DESCRIPTION: Creates a view named 'transcripts' that joins students, courses, and grades tables to provide a consolidated view of student academic records.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-11-18-postgresql-views.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create view transcripts as
  select
    students.name,
    students.type,
    courses.title,
    courses.code,
    grades.result
  from
    grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;
```

----------------------------------------

TITLE: Updated setOpen Callback in SidebarProvider
DESCRIPTION: Shows the improved setOpen callback implementation in SidebarProvider that handles cookie storage for sidebar state persistence.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_41

LANGUAGE: tsx
CODE:
```
const setOpen = React.useCallback(
  (value: boolean | ((value: boolean) => boolean)) => {
    const openState = typeof value === 'function' ? value(open) : value
    if (setOpenProp) {
      setOpenProp(openState)
    } else {
      _setOpen(openState)
    }

    // This sets the cookie to keep the sidebar state.
    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
  },
  [setOpenProp, open]
)
```

----------------------------------------

TITLE: Configuring Supabase Client with KotlinX Serialization
DESCRIPTION: Creates a Supabase client using KotlinX Serialization, which is the default serializer. This example demonstrates how to provide a custom Json instance with custom configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_8

LANGUAGE: kotlin
CODE:
```
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    //Already the default serializer, but you can provide a custom Json instance (optional):
    defaultSerializer = KotlinXSerializer(Json {
        //apply your custom config
    })
}
```

----------------------------------------

TITLE: Creating Profiles Table in Public Schema
DESCRIPTION: SQL script to create a profiles table in the public schema with UUID primary key and email field.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create table public.profiles (
  id uuid primary key,             -- 'id' is a UUID and the primary key for the table
  email varchar(256)               -- 'email' is a variable character field with a maximum length of 256 characters
);
```

----------------------------------------

TITLE: NPM Installation of Supabase CLI
DESCRIPTION: Install Supabase CLI as a development dependency using NPM.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
npm install supabase --save-dev
```

----------------------------------------

TITLE: Scheduling Weekly Data Deletion in Supabase
DESCRIPTION: This SQL snippet schedules a cron job to delete old data every Saturday at 3:30 AM (GMT). It demonstrates how to use the cron.schedule function with a specific schedule and SQL command.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select cron.schedule (
  'saturday-cleanup', -- name of the cron job
  '30 3 * * 6', -- Saturday at 3:30AM (GMT)
  $$ delete from events where event_time < now() - interval '1 week' $$
);
```

----------------------------------------

TITLE: Configuring Per-Role Query Cost Limits
DESCRIPTION: SQL commands to set different query cost limits for anonymous and authenticated users, implementing role-based query restrictions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_14

LANGUAGE: sql
CODE:
```
-- anonymous users can only run cheap queries
ALTER
  USER anon
SET
  plan_filter.statement_cost_limit = 10000;

-- authenticated users can run more expensive queries
ALTER
  USER authenticated
SET
  plan_filter.statement_cost_limit = 1e6;
```

----------------------------------------

TITLE: Chrome Extension Google Sign-In Implementation
DESCRIPTION: Implementation of Google sign-in flow in Chrome extensions using chrome.identity API and Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
const manifest = chrome.runtime.getManifest()

const url = new URL('https://accounts.google.com/o/oauth2/auth')

url.searchParams.set('client_id', manifest.oauth2.client_id)
url.searchParams.set('response_type', 'id_token')
url.searchParams.set('access_type', 'offline')
url.searchParams.set('redirect_uri', `https://${chrome.runtime.id}.chromiumapp.org`)
url.searchParams.set('scope', manifest.oauth2.scopes.join(' '))

chrome.identity.launchWebAuthFlow(
  {
    url: url.href,
    interactive: true,
  },
  async (redirectedTo) => {
    if (chrome.runtime.lastError) {
      // auth was not successful
    } else {
      // auth was successful, extract the ID token from the redirectedTo URL
      const url = new URL(redirectedTo)
      const params = new URLSearchParams(url.hash)

      const { data, error } = await supabase.auth.signInWithIdToken({
        provider: 'google',
        token: params.get('id_token'),
      })
    }
  }
)
```

----------------------------------------

TITLE: Initializing Supabase Client with Moshi Serialization
DESCRIPTION: This Kotlin snippet demonstrates how to initialize the Supabase client with Moshi Serialization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_11

LANGUAGE: kotlin
CODE:
```
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    defaultSerializer = MoshiSerializer()
}
```

----------------------------------------

TITLE: Import Map Configuration for Drizzle ORM
DESCRIPTION: Import map configuration for using Drizzle ORM with Postgres.js in Edge Functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/connect-to-postgres.mdx#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "imports": {
    "drizzle-orm": "npm:drizzle-orm@0.29.1",
    "drizzle-orm/": "npm:/drizzle-orm@0.29.1/",
    "postgres": "npm:postgres@3.4.3"
  }
}
```

----------------------------------------

TITLE: Querying PostgreSQL View
DESCRIPTION: Shows how to query the created view to retrieve all records.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-11-18-postgresql-views.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select * from transcripts;
```

----------------------------------------

TITLE: Phone Number Sign In with Password
DESCRIPTION: Authenticates users using their phone number and password combination. Returns a session upon successful authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_41

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

const { data, error } = await supabase.auth.signInWithPassword({
  phone: '+13334445555',
  password: 'some-password',
})
```

LANGUAGE: swift
CODE:
```
try await supabase.auth.signIn(
  phone: "+13334445555",
  password: "some-password"
)
```

LANGUAGE: kotlin
CODE:
```
supabase.auth.signInWith(Phone) {
    phone = "+13334445555"
    password = "some-password"
}
```

LANGUAGE: python
CODE:
```
supabase.auth.sign_in_with_password({
  'phone': "+13334445555"
  'password': "some-password"
})
```

LANGUAGE: bash
CODE:
```
curl -X POST 'https://cvwawazfelidkloqmbma.supabase.co/auth/v1/token?grant_type=password' \
-H "apikey: SUPABASE_KEY" \
-H "Content-Type: application/json" \
-d '{
  "phone": "+13334445555",
  "password": "some-password"
}'
```

----------------------------------------

TITLE: Dropping Function and Trigger in SQL
DESCRIPTION: SQL commands to drop problematic functions and triggers that may be causing authentication errors.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-500-status-authentication-errors-7bU5U8.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
DROP FUNCTION <function name>() CASCADE;

-- If you'd prefer, you can drop the trigger alone with the following query:
-- DROP TRIGGER <trigger_name> on auth.<table_name>;
```

----------------------------------------

TITLE: Creating Table with KSUID and Timestamp Extraction
DESCRIPTION: Example of creating a table using pg_idkit's KSUID generation and demonstrating timestamp extraction from the ID. Shows how to implement virtual created_at columns using ID metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
-- At table creation
CREATE TABLE users (
  id text PRIMARY KEY DEFAULT idkit_ksuid_generate(),
  name text,
  email text,
);

-- An example query for a specific KSUID that uses created_at
SELECT *, idkit_ksuid_extract_timestamptz(id)
FROM users
WHERE id = '0F755149A55730412B0AEC0E3B5B089C14B5B58D';
```

----------------------------------------

TITLE: Stop Tracking Presence in JavaScript
DESCRIPTION: This snippet demonstrates how to stop tracking presence state in JavaScript using the untrack method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')
const roomOne = supabase.channel('room_01')

// ---cut---
const untrackPresence = async () => {
  const presenceUntrackStatus = await roomOne.untrack()
  console.log(presenceUntrackStatus)
}

untrackPresence()
```

----------------------------------------

TITLE: Querying ProjectOwner Collection in GraphQL
DESCRIPTION: This GraphQL query demonstrates how to retrieve data from the 'ProjectOwner' collection using the newly created view. It fetches the first two entries, including their nodeId and name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_3

LANGUAGE: graphql
CODE:
```
{
  projectOwnerCollection(first: 2) {
    edges {
      node {
        nodeId
        name
      }
    }
  }
}
```

----------------------------------------

TITLE: Acknowledging Messages in Kotlin
DESCRIPTION: This Kotlin snippet shows how to configure a Supabase Realtime channel to acknowledge received messages. It sets the 'acknowledgeBroadcasts' parameter to true and sends a broadcast message.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_13

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("room-2") {
    broadcast {
        acknowledgeBroadcasts = true
    }
}

myChannel.subscribe(blockUntilSubscribed = true) //You can also use the myChannel.status flow instead, but this parameter will block the coroutine until the status is joined.

myChannel.broadcast(event = "acknowledge", buildJsonObject {  })
```

----------------------------------------

TITLE: Extracting Authentication Method from JWT in JSON
DESCRIPTION: This example illustrates how to retrieve and parse the 'amr' (Authentication Methods Reference) claim from a Supabase Auth access token. It shows a JSON structure with methods and timestamps to log authentication events, useful for debugging or fine-grained security policies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa.mdx#2025-04-21_snippet_5

LANGUAGE: json
CODE:
```
{
  "amr": [
    {
      "method": "totp",
      "timestamp": 1666086056
    },
    {
      "method": "password",
      "timestamp": 1666085924
    }
  ]
}
```

----------------------------------------

TITLE: Creating Materialized View in PostgreSQL
DESCRIPTION: Demonstrates how to create a materialized view that stores query results on disk for faster subsequent access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
create materialized view transcripts as
  select
    students.name,
    students.type,
    courses.title,
    courses.code,
    grades.result
  from
    grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;
```

----------------------------------------

TITLE: Configuring Function-Level Statement Timeout
DESCRIPTION: Shows how to set a custom statement timeout for a specific PostgreSQL function using the new hoisted settings feature. The timeout is applied per transaction when the function is called.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgrest-12-2.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create or replace function special_function()
returns void as $$
  select pg_sleep(3); -- simulating some long-running process
$$
language sql
set statement_timeout to '4s';
```

----------------------------------------

TITLE: Executing GraphQL Query Using pg_graphql in PostgreSQL
DESCRIPTION: SQL command to execute a GraphQL query using the graphql.resolve function. This query retrieves the id and name of the first blog entry from the 'Blog' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_graphql.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select
  graphql.resolve($$
    {
      blogCollection(first: 1) {
        edges {
          node {
            id,
            name
          }
        }
      }
    }
  $$);
```

----------------------------------------

TITLE: Querying Information Schema Tables via PostgREST
DESCRIPTION: Shows how to query the information_schema to retrieve table information from the public schema using specific parameters
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
curl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/tables?select=table_name,table_schema&table_schema=eq.public' \
 -H 'accept-profile: information_schema' \
 -H "apikey: $ANON_KEY" \
 -H "authorization: Bearer $ANON_KEY"
```

----------------------------------------

TITLE: Implementing Slack Channel Monitor Bot with Python and Supabase
DESCRIPTION: A complete Python script that implements a Slack bot for monitoring and reposting messages across channels. The bot uses Supabase for storing message history and channel configurations, and implements an infinite loop pattern similar to Arduino/PIC processors. It includes channel setup, message posting, and continuous monitoring functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-09-slack-consolidate-slackbot-to-consolidate-messages.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import time
import logging
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from supabase import create_client, Client
from datetime import datetime
from dotenv import dotenv_values
logger = logging.getLogger(__name__)
config = dotenv_values(".env")
bot_client = WebClient(token=config['SLACK_BOT_TOKEN'])
client = WebClient(token=config['SLACK_TOKEN'])
SUPABASE_URL=config['SUPABASE_URL']
SUPABASE_KEY=config['SUPABASE_KEY']
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
SLACK_ORG = config['SLACK_ORG']
SLACK_ORG_LINK = f"https://{SLACK_ORG}.slack.com/archives/"
############
# Config:
############
# 1.4 seconds should be the minimum to avoid passing Slack API limits.
# https://api.slack.com/docs/rate-limits#tier_t3
POOLING_DELAY = 1.4
# Check if new channels were added each hour.
SCAN_CHANNELS_DELAY = 3600.0
BUFFER_SIZE = 20

class SlackChannel:
  def __init__(self, id, name, p_level, dest_channel_id, dest_channel, private):
    """
      Args:
          id (str): Slack channel ID from the source channel
          name (str): Name of the source channel (used in logging)
          p_level (str): (Optional message) added when posting
          dest_channel_id (str): Slack channel ID for the destination channel
          dest_channel (str): Name of the destination channel (used in logging)
          private (int): Integer to check if the channel is private (private==1) or public channel
      Returns:
          SlackChannel: object
    """
    self.id = id
    self.name = name
    self.p_level = p_level
    self.dest_channel = dest_channel
    self.dest_channel_id  = dest_channel_id
    self.private  = private

def setup():
    """
        Fetches the list of channels from Supabase and returns them in a dict()
    Returns:
        dict: Dictionary with SlackChannel objects.
    """
    channels = dict()
    data = supabase.from_("slack_channels").select("channel_id, channel, p_level, dest_channel, dest_channel_id, private").execute().data
    data_dic = data
    for row in data_dic:
        channels[row['channel_id']] = SlackChannel(id = row['channel_id'],
        name = row['channel'],
        p_level = row['p_level'],
        dest_channel = row['dest_channel'],
        dest_channel_id = row['dest_channel_id'],
        private = row['private'])
    return channels

def post(src_channel, link, message):
    """
        Post a message from a source channel into the destination channel
    Args:
        src_channel (SlackChannel): SlackChannel object
        link (_type_): The link of the message in slack
        message (_type_): _description_

    Returns:
        _type_: _description_
    """
    try:
        aux_text = ""
        if src_channel.private != 1:
            aux_text = ("Message on <#"+src_channel.id+
                ">. "+src_channel.p_level+" \n"+link)
        else:
            aux_text = ("Message on <#"+src_channel.id+
                ">."+src_channel.p_level+" \n"+message+" \n"+link)
        result = bot_client.chat_postMessage(
                channel= src_channel.dest_channel_id,
                text=aux_text
                )
        logger.info(result)
    except SlackApiError as e:
        logger.error(f"Error posting message: {e}")

def ts_to_strtime(ts):
    """
        Converts the UNIX time in timestamp to ISO format.
    Args:
        ts (int): TS datetime

    Returns:
        str: ISO format datetime string for compatibility with Postgres.
    """
    aux_ts = int(ts)
    return str(datetime.utcfromtimestamp(aux_ts).isoformat())

def loop_through_channels(channels):
    """
        Loop through the channels and post messages on postgres if they aren't cached.
    Args:
        channels (dict): dict() with SlackChannel objects
    """
    for channel_id in channels:
        channel = channels[channel_id]
        conversation_history = []
        try:
            result = client.conversations_history(channel=channel.id, limit = BUFFER_SIZE)
            conversation_history = result["messages"]
            logger.info("{} messages found in {}".format(len(conversation_history), id))
        except SlackApiError as e:
            logger.error("Error creating conversation: {}".format(e))
        for message in conversation_history:
            try:
                msg_dic = dict()
                msg_dic['channel_name'] = channel.name
                msg_dic['channel_id'] = channel.id
                aux_msg = "<@"+message['user']+"> wrote: \n"
                msg_dic['message'] = aux_msg + message['text']
                ts_aux  = message['ts'].split(".")
                msg_dic['ts'] = ts_to_strtime(ts_aux[0])
                msg_dic['ts_ms'] = ts_aux[1]
                supabase.table("slack_watcher").insert(msg_dic).execute()
                auxint = ts_aux[0]+ts_aux[1]
                auxint = auxint.replace(".","")
                link = SLACK_ORG_LINK+channel.id+"/p"+auxint
                post(channel, link, msg_dic['message'])
            except Exception as e:
                pass
        time.sleep(POOLING_DELAY)

def main():
    """
        Main loop to infinitely keep pooling data from channels and posting on Slack.
        It also checks for new channels every hour.
    """
    channels = setup()
    start = time.time()
    while True:
        end = time.time()
        if ((end - start) > SCAN_CHANNELS_DELAY):
            start = time.time()
            channels = setup()
        else:
            loop_through_channels(channels)

if __name__ == '__main__':
    main()
```

----------------------------------------

TITLE: Dumping Firestore Users to JSON File (Node.js)
DESCRIPTION: This command allows the user to export Firestore users to a JSON file. Optionally specify the filename and batch size.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firebase-auth.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
node firestoreusers2json.js [<filename.json>] [<batch_size>]
```

----------------------------------------

TITLE: Signing a JWT using pgjwt in PostgreSQL
DESCRIPTION: Example of using the sign function from the pgjwt extension to create a JWT. The function takes a JSON payload, a secret, and an optional algorithm as parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgjwt.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
  extensions.sign(
    payload   := '{"sub":"1234567890","name":"John Doe","iat":1516239022}',
    secret    := 'secret',
    algorithm := 'HS256'
  );
```

----------------------------------------

TITLE: Comparing Query Performance in Python
DESCRIPTION: Python script that compares the execution time of querying the test table using a direct Postgres connection (via psycopg) and the Supabase client. It demonstrates the latency difference between the two methods.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/high-latency-with-supabase-client-z0pZzR.mdx#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import time
from supabase import Client, create_client

import psycopg


def psycop_call(): #user_ids: list[str]):
    user="YOUR_SUPABASE_USER"
    password="YOUR_SUPABASE_PASSWORD"
    host="SUPABASE_HOST"
    port=5432
    database="postgres"

    with psycopg.connect(f"host={host} port={port} dbname={database} user={user} password={password}") as conn:
        # Open a cursor to perform database operations
        results = []
        with conn.cursor() as cur:
            start = time.time()
            # Execute a command: this creates a new table
            cur.execute("SELECT * FROM public.your_table_name")
            cur.fetchall()
            for record in cur:
                results.append(record)
            stop = time.time()
            return (stop - start)


def supabase_call():
    supabase: Client = create_client("SUPABASE_URL", "SUPBASE_SERVICE_ROLE_KEY")
    start = time.time()
    result = supabase.table("your_table_name").select("*").execute()
    stop = time.time()
    return (stop - start)


if __name__ == "__main__":
    ref = psycop_call()
    sup = supabase_call()
    print(f"postgres: {ref}, supabase: {sup}, ratio: {sup/ref}")
```

----------------------------------------

TITLE: Importing dependencies and configuring database connection
DESCRIPTION: Python code for importing required modules and setting up the database connection string for Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
import sys
import boto3
import vecs
import json
import base64
from matplotlib import pyplot as plt
from matplotlib import image as mpimg
from typing import Optional

DB_CONNECTION = "postgresql://postgres.[PROJECT-REF]:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres"
```

----------------------------------------

TITLE: Creating Posts Table with Row and Column-Level Security in PostgreSQL
DESCRIPTION: SQL commands to create a 'posts' table with row-level security policy and column-level privilege restrictions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/column-level-security.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create table
posts (
id bigint primary key generated always as identity,
user_id text,
title text,
content text,
created_at timestamptz default now()
updated_at timestamptz default now()
);

-- Add row-level security
create policy "Allow update for owners" on posts for
update
using ((select auth.uid()) = user_id);

-- Add column-level security
revoke
update
(title) on table public.posts
from
authenticated;
```

----------------------------------------

TITLE: Setting Up Database Schema for Semantic Search (JavaScript)
DESCRIPTION: Defines functions to create a PGlite database instance, initialize the schema with a vector extension, and perform basic database operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { PGlite } from '@electric-sql/pglite'
import { vector } from '@electric-sql/pglite/vector'

let dbInstance
// Implement a singleton pattern to make sure we only create one database instance.
export async function getDB() {
  if (dbInstance) {
    return dbInstance
  }
  const metaDb = new PGlite('idb://supa-semantic-search', {
    extensions: {
      vector,
    },
  })
  await metaDb.waitReady
  dbInstance = metaDb
  return metaDb
}

// Initialize the database schema.
export const initSchema = async (db) => {
  return await db.exec(`
    create extension if not exists vector;
    -- drop table if exists embeddings; -- Uncomment this line to reset the database
    create table if not exists embeddings (
      id bigint primary key generated always as identity,
      content text not null,
      embedding vector (384)
    );
    
    create index on embeddings using hnsw (embedding vector_ip_ops);
  `)
}

// Helper method to count the rows in a table.
export const countRows = async (db, table) => {
  const res = await db.query(`SELECT COUNT(*) FROM ${table};`)
  return res.rows[0].count
}

// [...]
```

----------------------------------------

TITLE: Dropping Table Constraints in SQL
DESCRIPTION: SQL commands to drop and optionally recreate foreign key constraints with less restrictive modifiers to resolve constraint-related authentication errors.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-500-status-authentication-errors-7bU5U8.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
ALTER TABLE <your table> DROP CONSTRAINT <constraint name>;
```

LANGUAGE: sql
CODE:
```
BEGIN;
ALTER TABLE <your table> DROP CONSTRAINT <constraint name>;

ALTER TABLE <your table> ADD CONSTRAINT <constraint name> FOREIGN KEY (<column name>)
          REFERENCES auth.users (<auth.users column>)
          ON DELETE SET NULL;
COMMIT;
```

----------------------------------------

TITLE: Signing Out from Supabase (Kotlin)
DESCRIPTION: This Kotlin snippet illustrates how to sign out a user from a Supabase application. It calls the `signOut` method to remove the user session from the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {
	supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Signing Out with Supabase Flutter
DESCRIPTION: This Dart code snippet shows how to sign out a user using Supabase's `signOut` method in a Flutter application. It removes the authentication session from the browser and localStorage. Make sure the necessary Supabase Dart package is included.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_4

LANGUAGE: Dart
CODE:
```
Future<void> signOut() async {
  await supabase.auth.signOut();
}
```

----------------------------------------

TITLE: Creating MFA Failed Verification Attempts Table
DESCRIPTION: SQL script to create a table for tracking failed MFA verification attempts with timestamps.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/mfa-verification-hook.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create table public.mfa_failed_verification_attempts (
  user_id uuid not null,
  factor_id uuid not null,
  last_failed_at timestamp not null default now(),
  primary key (user_id, factor_id)
);
```

----------------------------------------

TITLE: Sign Out Implementation in Flutter
DESCRIPTION: Logout method to remove user session and clear local storage in Supabase authentication for Flutter
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
Future<void> signOut() async {
  await supabase.auth.signOut();
}
```

----------------------------------------

TITLE: Setting Up Supabase Authentication in RedwoodJS
DESCRIPTION: Command to install and configure Supabase authentication in a RedwoodJS application using the built-in setup command.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
yarn redwood setup auth supabase
```

----------------------------------------

TITLE: Inserting Channel Data into Supabase
DESCRIPTION: SQL insert commands to add public and private channels to the 'slack_channels' table in Supabase, specifying source and destination channels.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-09-slack-consolidate-slackbot-to-consolidate-messages.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
insert into slack_channels
  (channel, channel_id, p_level, dest_channel, dest_channel_id, private)
values
  ('support-channel', 'C0000ABC02DE', 'Support msgs', 'all_them_messages', 'C0000ABC02DF', 0);
```

LANGUAGE: sql
CODE:
```
insert into slack_channels
  (channel, channel_id, p_level, dest_channel, dest_channel_id, private)
values
  (
    'support-enterprise',
    'C0000ABC02DC',
    'Enterprise Support msgs',
    'all_them_messages',
    'C0000ABC02DF',
    1
  );
```

----------------------------------------

TITLE: Defining TypeScript Types for Supabase in SvelteKit
DESCRIPTION: Extends the global App namespace with custom type definitions for Supabase client, session management, and user authentication in the SvelteKit application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
// src/app.d.ts

import { SupabaseClient, Session } from '@supabase/supabase-js'

declare global {
  namespace App {
    interface Locals {
      supabase: SupabaseClient
      safeGetSession(): Promise<{ session: Session | null; user: User | null }>
    }
    interface PageData {
      session: Session | null
      user: User | null
    }
    // interface Error {}
    // interface Platform {}
  }
}
```

----------------------------------------

TITLE: MS SQL to Postgres Migration with pgloader
DESCRIPTION: This SQL snippet configures pgloader to migrate an MS SQL database to a Postgres database. It defines the source MS SQL connection string, the target Supabase Postgres connection string, and modifies the schema ownership. Additionally, it configures WAL buffer and memory settings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/amazon-rds.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
LOAD DATABASE
    FROM mssql://USER:PASSWORD@HOST/SOURCE_DB
    INTO postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:6543/postgres
ALTER SCHEMA 'public' OWNER TO 'postgres';
set wal_buffers = '64MB', max_wal_senders = 0, statement_timeout = 0, work_mem to '2GB';
```

----------------------------------------

TITLE: Obtaining the Provider Refresh Token (Flutter)
DESCRIPTION: This Flutter snippet demonstrates how to obtain the provider refresh token when signing in with Azure OAuth by including the offline access scope in the request.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_7

LANGUAGE: dart
CODE:
```
Future<void> signInWithAzure() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.azure,
    scopes: 'offline_access',
  );
}
```

----------------------------------------

TITLE: Updating Seed Script for Instrument Data
DESCRIPTION: TypeScript seed script to populate the Instrument table with initial data using Prisma client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import type { Prisma } from '@prisma/client'
import { db } from 'api/src/lib/db'

export default async () => {
  try {
    const data: Prisma.InstrumentCreateArgs['data'][] = [
      { name: 'dulcimer' },
      { name: 'harp' },
      { name: 'guitar' },
    ]

    console.log('Seeding instruments ...')

    const instruments = await db.instrument.createMany({ data })

    console.log('Done.', instruments)
  } catch (error) {
    console.error(error)
  }
}
```

----------------------------------------

TITLE: Implementing RoomsPage Widget in Flutter
DESCRIPTION: This snippet implements the RoomsPage widget, which displays the list of chat rooms and recently added users. It uses BlocBuilder to react to state changes and renders the appropriate UI based on the current state.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_7

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:my_chat_app/cubits/profiles/profiles_cubit.dart';

import 'package:my_chat_app/cubits/rooms/rooms_cubit.dart';
import 'package:my_chat_app/models/profile.dart';
import 'package:my_chat_app/pages/chat_page.dart';
import 'package:my_chat_app/pages/register_page.dart';
import 'package:my_chat_app/utils/constants.dart';
import 'package:timeago/timeago.dart';

/// Displays the list of chat threads
class RoomsPage extends StatelessWidget {
  const RoomsPage({Key? key}) : super(key: key);

  static Route<void> route() {
    return MaterialPageRoute(
      builder: (context) => BlocProvider<RoomCubit>(
        create: (context) =>
            RoomCubit()..initializeRooms(context),
        child: const RoomsPage(),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Rooms'),
        actions: [
          TextButton(
            onPressed: () async {
              await supabase.auth.signOut();
              Navigator.of(context).pushAndRemoveUntil(
                RegisterPage.route(),
                (route) => false,
              );
            },
            child: const Text('Logout'),
          ),
        ],
      ),
      body: BlocBuilder<RoomCubit, RoomState>(
        builder: (context, state) {
          if (state is RoomsLoading) {
            return preloader;
          } else if (state is RoomsLoaded) {
            final newUsers = state.newUsers;
            final rooms = state.rooms;
            return BlocBuilder<ProfilesCubit,
                ProfilesState>(
              builder: (context, state) {
                if (state is ProfilesLoaded) {
                  final profiles = state.profiles;
                  return Column(
                    children: [
                      _NewUsers(newUsers: newUsers),
                      Expanded(
                        child: ListView.builder(
                          itemCount: rooms.length,
                          itemBuilder: (context, index) {
                            final room = rooms[index];
                            final otherUser =
                                profiles[room.otherUserId];

                            return ListTile(
                              onTap: () =>
                                  Navigator.of(context)
                                      .push(ChatPage.route(
                                          room.id)),
                            );
                          },
                        ),
                      ),
                    ],
                  );
                } else {
                  return preloader;
                }
              },
            );
          } else if (state is RoomsEmpty) {
            final newUsers = state.newUsers;
            return Column(
              children: [
                _NewUsers(newUsers: newUsers),
                const Expanded(
                  child: Center(
                    child: Text('No rooms yet'),
                  ),
                ),
              ],
            );
          } else {
            return const Center(
                child: Text('Error loading rooms'));
          }
        },
      ),
    );
  }
}
```

----------------------------------------

TITLE: Using ClickHouse Parameterized Views with Foreign Data Wrapper
DESCRIPTION: This code snippet shows how to create a foreign table in Postgres that supports ClickHouse Parameterized Views, allowing for passing query parameters directly to ClickHouse.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-10-30-supabase-clickhouse-partnership.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create foreign table user_analytics (
  id bigint,
  user_id bigint,
  _event text,
)
server clickhouse_server
options ( table '(select * from UserAnalytics(event=${_event}))' );

select * from user_analytics where _event='button_click';
```

----------------------------------------

TITLE: Filtering Array Columns in GraphQL
DESCRIPTION: Example of using contains operator to filter array columns in GraphQL queries
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-pg-graphql-1-5-7.mdx#2025-04-21_snippet_4

LANGUAGE: graphql
CODE:
```
{
  blogCollection(filter: { tags: { contains: ["tech", "innovation"] } }) {
    edges {
      cursor
      node {
        name
        tags
        createdAt
      }
    }
  }
}
```

----------------------------------------

TITLE: Enabling Table Audit Tracking in PostgreSQL
DESCRIPTION: SQL function call to enable audit tracking on a specified schema and table combination. Takes a regclass parameter representing the fully qualified table name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
select audit.enable_tracking('<schema>.<table>'::regclass);
```

----------------------------------------

TITLE: Creating a Foreign Table for Snowflake Data in PostgreSQL
DESCRIPTION: SQL command to create a foreign table that connects to Snowflake data warehouse, defining a table structure for order history data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create foreign table snowflake.order_history (
  id bigint,
  ts timestamptz,
  event text,
  user_id uuid
)
server my_snowflake_warehouse
options (table 'order_history', rowid_column 'id');
```

----------------------------------------

TITLE: Implementing Sign In with Apple in Supabase Flutter v2
DESCRIPTION: Demonstrates how to implement Apple sign-in after the built-in method was deprecated in v2. The new approach requires importing the sign_in_with_apple package separately and using the new auth.generateRawNonce() method to generate a secure nonce.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
await supabase.auth.signInWithApple();
```

LANGUAGE: dart
CODE:
```
Future<AuthResponse> signInWithApple() async {
  final rawNonce = supabase.auth.generateRawNonce();
  final hashedNonce = sha256.convert(utf8.encode(rawNonce)).toString();

  final credential = await SignInWithApple.getAppleIDCredential(
    scopes: [
      AppleIDAuthorizationScopes.email,
      AppleIDAuthorizationScopes.fullName,
    ],
    nonce: hashedNonce,
  );

  final idToken = credential.identityToken;
  if (idToken == null) {
    throw const AuthException(
        'Could not find ID Token from generated credential.',
    );
  }

  return signInWithIdToken(
    provider: OAuthProvider.apple,
    idToken: idToken,
    nonce: rawNonce,
  );
}
```

----------------------------------------

TITLE: Creating and Querying Stripe Products Table with Postgres FDW
DESCRIPTION: Example showing how to create a foreign table that connects to Stripe's products API and query it using SQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-wrappers-v02.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Connect Postgres to Stripe
create foreign table products (
  id text,
  name text,
  description text,
  default_price text
)
server my_stripe_server
options ( object 'products' );

-- Fetch all your Stripe products in Postgres
select * from products limit 10;
```

----------------------------------------

TITLE: Creating or Retrieving a Vector Collection
DESCRIPTION: Gets or creates a collection to store vectors, specifying the collection name and vector dimension.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/vector_hello_world.ipynb#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
docs = vx.get_or_create_collection(name="docs", dimension=3)
```

----------------------------------------

TITLE: Creating DBOS Workflow with Python Decorators
DESCRIPTION: Example demonstrating how to create a workflow using DBOS decorators in Python. The code shows the use of @DBOS.workflow() and @DBOS.step() decorators to define workflow steps.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-10-durable-workflows-in-postgres-dbos.mdx#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
@DBOS.workflow()
@DBOS.step()
def place_order():
    # Workflow logic here
    pass
```

----------------------------------------

TITLE: Flutter Home Page Implementation with Secure Content
DESCRIPTION: Dart code implementing a Flutter home page that displays MFA-protected content from Supabase with user management options.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_13

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:mfa_app/main.dart';
import 'package:mfa_app/pages/auth/register_page.dart';
import 'package:mfa_app/pages/list_mfa_page.dart';

class HomePage extends StatelessWidget {
  static const route = '/';

  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    final privatePostsFuture = supabase.from('private_posts').select();

    return Scaffold(
      appBar: AppBar(
        title: const Text('Home'),
        actions: [
          PopupMenuButton(
            itemBuilder: (context) {
              return [
                PopupMenuItem(
                  child: const Text('Unenroll MFA'),
                  onTap: () {
                    context.push(ListMFAPage.route);
                  },
                ),
                PopupMenuItem(
                  child: const Text('Logout'),
                  onTap: () {
                    supabase.auth.signOut();
                    context.go(RegisterPage.route);
                  },
                ),
              ];
            },
          )
        ],
      ),
      body: FutureBuilder<List<Map<String, dynamic>>>(
        future: privatePostsFuture,
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Center(child: Text(snapshot.error.toString()));
          }
          if (!snapshot.hasData) {
            return const Center(child: CircularProgressIndicator());
          }

          // Display the secure private content upon retrieval
          final data = snapshot.data!;
          return ListView.builder(
            itemCount: data.length,
            itemBuilder: (context, index) {
              return ListTile(title: Text(data[index]['content']));
            },
          );
        },
      ),
    );
  }
}
```

----------------------------------------

TITLE: Installing Supabase SSR Package Command
DESCRIPTION: Command to create a new Next.js project with Supabase integration using the official quickstart template
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-do-you-troubleshoot-nextjs---supabase-auth-issues-riMCZV.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app -e with-supabase
```

----------------------------------------

TITLE: Creating a pre-test hook for pgTAP in PostgreSQL
DESCRIPTION: This SQL snippet shows how to create a setup file that runs first in pgTAP tests. It installs shared extensions, dependencies, and common test utilities, and includes a simple test to verify the setup.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- install tests utilities
-- install pgtap extension for testing
create extension if not exists pgtap with schema extensions;
/*
---------------------
---- install dbdev ----
----------------------
Requires:
  - pg_tle: https://github.com/aws/pg_tle
  - pgsql-http: https://github.com/pramsey/pgsql-http
*/
create extension if not exists http with schema extensions;
create extension if not exists pg_tle;
drop extension if exists "supabase-dbdev";
select pgtle.uninstall_extension_if_exists('supabase-dbdev');
select
    pgtle.install_extension(
        'supabase-dbdev',
        resp.contents ->> 'version',
        'PostgreSQL package manager',
        resp.contents ->> 'sql'
    )
from http(
    (
        'GET',
        'https://api.database.dev/rest/v1/'
        || 'package_versions?select=sql,version'
        || '&package_name=eq.supabase-dbdev'
        || '&order=version.desc'
        || '&limit=1',
        array[
            ('apiKey', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhtdXB0cHBsZnZpaWZyYndtbXR2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODAxMDczNzIsImV4cCI6MTk5NTY4MzM3Mn0.z2CN0mvO2No8wSi46Gw59DFGCTJrzM0AQKsu_5k134s')::http_header
        ],
        null,
        null
    )
) x,
lateral (
    select
        ((row_to_json(x) -> 'content') #>> '{}')::json -> 0
) resp(contents);
create extension "supabase-dbdev";
select dbdev.install('supabase-dbdev');
drop extension if exists "supabase-dbdev";
create extension "supabase-dbdev";
-- Install test helpers
select dbdev.install('basejump-supabase_test_helpers');
create extension if not exists "basejump-supabase_test_helpers" version '0.0.6';

-- Verify setup with a no-op test
begin;
select plan(1);
select ok(true, 'Pre-test hook completed successfully');
select * from finish();
rollback;
```

----------------------------------------

TITLE: Session Mode Connection String Format
DESCRIPTION: Example connection string format for connecting to Supabase PostgreSQL using the connection pooler in session mode on port 5432.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-and-connection-terminology-explained-9pr_ZO.mdx#2025-04-21_snippet_3

LANGUAGE: markdown
CODE:
```
#example session mode string | uses port 5432
postgres://postgres.obfwhevidiamwdwki:[YPASSWORD]@aws-0-ca-central-1.pooler.supabase.com:5432/postgres
```

----------------------------------------

TITLE: Listening to Auth State Changes in v0 vs v1
DESCRIPTION: Demonstrates the change in listening to auth state changes. In v1, onAuthStateChange returns a Stream instead of a subscription object.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
final authSubscription = supabase.auth.onAuthStateChange((event, session) {
  // handle auth state change
});

// Unsubscribe when no longer needed
authSubscription.data?.unsubscribe();
```

LANGUAGE: dart
CODE:
```
final authSubscription = supabase.auth.onAuthStateChange.listen((data) {
      final AuthChangeEvent event = data.event;
      final Session? session = data.session;
      // handle auth state change
    });

// Unsubscribe when no longer needed
authSubscription.cancel();
```

----------------------------------------

TITLE: Enabling Realtime Connection Logging in JavaScript
DESCRIPTION: JavaScript code snippet demonstrating how to enable Realtime connection logging when instantiating the Supabase client. This allows logging of new WebSocket connections and Channel joins.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const options = {
  realtime: {
    params: {
      log_level: 'info',
    },
  },
}
const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key', options)
```

----------------------------------------

TITLE: Checking Current Role
DESCRIPTION: SQL query to verify the currently connected database role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
# as postgres
postgres=> select current_role;
┌──────────────┐
│ current_role │
├──────────────┤
│ portgres     │
└──────────────┘
(1 row)
```

----------------------------------------

TITLE: Implementing DataService for Supabase Interactions in Angular
DESCRIPTION: Creates a service to handle interactions with Supabase, including creating and retrieving groups.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
/* eslint-disable @typescript-eslint/naming-convention */
import { Injectable } from '@angular/core'
import { SupabaseClient, createClient } from '@supabase/supabase-js'
import { Subject } from 'rxjs'
import { environment } from 'src/environments/environment'

const GROUPS_DB = 'groups'
const MESSAGES_DB = 'messages'

export interface Message {
  created_at: string
  group_id: number
  id: number
  text: string
  user_id: string
}

@Injectable({
  providedIn: 'root',
})
export class DataService {
  private supabase: SupabaseClient

  constructor() {
    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)
  }

  getGroups() {
    return this.supabase
      .from(GROUPS_DB)
      .select(`title,id, users:creator ( email )`)
      .then((result) => result.data)
  }

  async createGroup(title) {
    const newgroup = {
      creator: (await this.supabase.auth.getUser()).data.user.id,
      title,
    }

    return this.supabase.from(GROUPS_DB).insert(newgroup).select().single()
  }
}
```

----------------------------------------

TITLE: Implementing ChatGPT Plugin API with Deno Oak Router in TypeScript
DESCRIPTION: This snippet demonstrates the implementation of a ChatGPT plugin API using the Deno Oak router. It includes route definitions, JSDoc annotations for OpenAPI, and serves the OpenAPI JSON file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { Application, Router } from 'https://deno.land/x/oak@v11.1.0/mod.ts'
import openapi from './openapi.json' with { type: 'json' }

console.log('Hello from `chatgpt-plugin` Function!')

const _TODOS: { [key: string]: Array<string> } = {
  user: ['Build your own ChatGPT Plugin!'],
}

/**
 * @openapi
 * components:
 *   schemas:
 *     getTodosResponse:
 *       type: object
 *       properties:
 *         todos:
 *           type: array
 *           items:
 *             type: string
 *           description: The list of todos.
 */

const router = new Router()
router
  .get('/chatgpt-plugin', (ctx) => {
    ctx.response.body = 'Building ChatGPT plugins with Deno!'
  })
  /**
   * @openapi
   * /chatgpt-plugin/todos/{username}:
   *   get:
   *     operationId: getTodos
   *     summary: Get the list of todos
   *     parameters:
   *     - in: path
   *       name: username
   *       schema:
   *         type: string
   *       required: true
   *       description: The name of the user.
   *     responses:
   *       200:
   *         description: OK
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/getTodosResponse'
   */
  .get('/chatgpt-plugin/todos/:username', (ctx) => {
    const username = ctx.params.username.toLowerCase()
    ctx.response.body = _TODOS[username] ?? []
  })
  .get('/chatgpt-plugin/openapi.json', (ctx) => {
    ctx.response.body = JSON.stringify(openapi)
    ctx.response.headers.set('Content-Type', 'application/json')
  })

const app = new Application()
app.use(router.routes())
app.use(router.allowedMethods())

await app.listen({ port: 8000 })
```

----------------------------------------

TITLE: Scheduling Webhook Cron Job in Postgres
DESCRIPTION: This SQL command schedules a cron job to send a POST request to a webhook URL every minute using the pg_cron and pgsql-http extensions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select
  cron.schedule(
    'webhook-every-minute', -- name of the cron job
    '* * * * *', -- every minute
    $$
    select status
    from
      http_post(
        'https://webhook.site/223c8a43-725b-4cbd-b1fe-d0da73353a6b', -- webhook URL, replace the ID(223c8..) with your own
        '{"hello": "world"}', -- payload
        'application/json'
      )
    $$
  );
```

----------------------------------------

TITLE: Setting Database as Template
DESCRIPTION: SQL command to modify an existing database to become a template database by setting is_template property.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-09-postgresql-templates.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
ALTER DATABASE template_db_name WITH is_template TRUE;
```

----------------------------------------

TITLE: Equality Search Using Swift Supabase Client
DESCRIPTION: Swift implementation using Supabase client to perform an equality search on the books table, filtering by the title column for exact matches of 'Harry'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_5

LANGUAGE: swift
CODE:
```
let response = try await supabase.from("books")
  .select()
  .eq("title", value: "Harry")
  .execute()
```

----------------------------------------

TITLE: Selecting All Fields from Logs Table
DESCRIPTION: A query that shows the recommended approach for selecting all fields from a log table, as the wildcard operator (*) is not supported. It explicitly selects timestamp, event_message, and the entire metadata object.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
select
  cast(postgres_logs.timestamp as datetime) as timestamp,
  event_message,
  metadata
from
  <log_table_name>
order by timestamp desc
limit 100;
```

----------------------------------------

TITLE: Setting Environment Variables
DESCRIPTION: Configuration of required Supabase environment variables for local development.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key
```

----------------------------------------

TITLE: Adding New Enum Values
DESCRIPTION: Demonstrates how to add a new value to an existing enum type using ALTER TYPE statement.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
alter type mood add value 'content';
```

----------------------------------------

TITLE: Aggregate Functions with Spread Embedded Resources in Supabase.js
DESCRIPTION: This snippet shows how to use aggregate functions with spread embedded resources to calculate average box office earnings grouped by director's country using the Supabase JavaScript client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_10

LANGUAGE: js
CODE:
```
const { data, error } = await supabase.from('movies').select(`
		avg_earnings:box_office_earnings.avg(),
    ...directors(country)
	`)
```

----------------------------------------

TITLE: Resetting Postgres Configuration to Default at Database Level
DESCRIPTION: This SQL snippet shows how to reset Postgres configuration settings to their default values at the database level. It includes commands for resetting a single setting and all settings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
-- reset a single setting at the database level
alter database "postgres" set "<setting_name>" to default;

-- reset all settings at the database level
alter database "postgres" reset all;
```

----------------------------------------

TITLE: Alternative Method for Setting Supabase Secrets
DESCRIPTION: Alternative command to directly set the OpenAI API key as a secret for the Edge Function using the Supabase CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
supabase secrets set OPENAI_API_KEY=<your-api-key>
```

----------------------------------------

TITLE: Inserting Data with JSONB Arrays in PostgreSQL
DESCRIPTION: Demonstrates how to insert data into a table with JSONB fields. This example shows inserting a single day's worth of data including weight, notes, and complex structured data for food, water, and exercise logs as JSON arrays.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
insert into calendar
  (date, user_id, weight, notes, food_log, water_log, exercise_log)
values
  (
    '2022-01-01',
    'xyz',
    172.6,
    'This new diet is awesome!',
    '[
      { "title": "Apple", "calories": 72, "meal": "Breakfast"},
      { "title": "Oatmeal", "calories": 146, "meal": "Breakfast"},
      { "title": "Sandwich", "calories": 445, "meal": "Lunch"},
      { "title": "Chips", "calories": 280, "meal": "Lunch"},
      { "title": "Cookie", "calories": 108, "meal": "Lunch"},
      { "title": "Mixed Nuts", "calories": 175, "meal": "Snack"},
      { "title": "Pasta/Sauce", "calories": 380, "meal": "Dinner"},
      { "title": "Garlic Bread", "calories": 200, "meal": "Dinner"},
      { "title": "Broccoli", "calories": 32, "meal": "Dinner"}
     ]',
    '[
      {"time": "08:15", "qty": 1},
      {"time": "09:31", "qty": 1},
      {"time": "10:42", "qty": 2},
      {"time": "10:42", "qty": 2},
      {"time": "12:07", "qty": 1},
      {"time": "14:58", "qty": 1},
      {"time": "17:15", "qty": 1},
      {"time": "18:40", "qty": 1},
      {"time": "19:05", "qty": 1}
    ]',
    '[
      {"time": "11:02", "duration": 0.5, "type": "Walking"}
    ]'
  );
```

----------------------------------------

TITLE: Setting Transaction to Read-Write Mode in Postgres
DESCRIPTION: This SQL command changes the current session's transaction characteristics to read-write mode, allowing data modification operations in a previously read-only environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/database-size.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
set session characteristics as transaction read write;
```

----------------------------------------

TITLE: Fixing Auth Migration Error with SQL Query
DESCRIPTION: SQL query to resolve the 'operator does not exist: uuid = text' error in Supabase Auth. This query inserts a specific migration record into the auth.schema_migrations table to prevent the system from repeatedly attempting to run the problematic migration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/an-invalid-response-was-received-from-the-upstream-server-error-when-querying-auth-RI4Vl-.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
insert into auth.schema_migrations values ('20221208132122');
```

----------------------------------------

TITLE: Implementing Flask Session Storage for Supabase
DESCRIPTION: Custom implementation of SyncSupportedStorage class to handle session management for Supabase authentication using Flask sessions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-21-oauth2-login-python-flask-apps.mdx#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
from gotrue import SyncSupportedStorage
from flask import session

class FlaskSessionStorage(SyncSupportedStorage):
    def __init__(self):
        self.storage = session

    def get_item(self, key: str) -> str | None:
        if key in self.storage:
            return self.storage[key]

    def set_item(self, key: str, value: str) -> None:
        self.storage[key] = value

    def remove_item(self, key: str) -> None:
        if key in self.storage:
            self.storage.pop(key, None)
```

----------------------------------------

TITLE: Configuring Legend-State with Supabase and AsyncStorage
DESCRIPTION: Set up Legend-State with Supabase for remote persistence and React Native Async Storage for local persistence.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { observable } from '@legendapp/state'
import { syncedSupabase } from '@legendapp/state/sync-plugins/supabase'
import { configureSynced } from '@legendapp/state/sync'
import { observablePersistAsyncStorage } from '@legendapp/state/persist-plugins/async-storage'
import AsyncStorage from '@react-native-async-storage/async-storage'

const supabase = createClient(
  process.env.EXPO_PUBLIC_SUPABASE_URL,
  process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY
)

// Create a configured sync function
const customSynced = configureSynced(syncedSupabase, {
  // Use React Native Async Storage
  persist: {
    plugin: observablePersistAsyncStorage({
      AsyncStorage,
    }),
  },
  generateId,
  supabase,
  changesSince: 'last-sync',
  fieldCreatedAt: 'created_at',
  fieldUpdatedAt: 'updated_at',
  // Optionally enable soft deletes
  fieldDeleted: 'deleted',
})

export const todos$ = observable(
  customSynced({
    supabase,
    collection: 'todos',
    select: (from) => from.select('id,counter,text,done,created_at,updated_at,deleted'),
    actions: ['read', 'create', 'update', 'delete'],
    realtime: true,
    // Persist data and pending changes locally
    persist: {
      name: 'todos',
      retrySync: true, // Persist pending changes and retry
    },
    retry: {
      infinite: true, // Retry changes with exponential backoff
    },
  })
)
```

----------------------------------------

TITLE: Configuring Deno 2 Runtime in Supabase
DESCRIPTION: Configuration settings in supabase/config.toml to enable Deno 2 runtime for edge functions
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deno2.mdx#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[edge_runtime]
deno_version = 2
```

----------------------------------------

TITLE: Querying Write Ahead Log (WAL) Size in Postgres
DESCRIPTION: This SQL query calculates and displays the total size of Write Ahead Log (WAL) files stored on disk using the pg_ls_waldir function and pg_size_pretty for human-readable output.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/database-size.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select pg_size_pretty(sum(size)) as wal_size from pg_ls_waldir();
```

----------------------------------------

TITLE: Link OAuth Identity to Anonymous User in JavaScript
DESCRIPTION: Links an OAuth provider (Google) to an anonymous user in Supabase. This converts an anonymous user to a permanent user by associating it with the OAuth identity.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.auth.linkIdentity({ provider: 'google' })
```

----------------------------------------

TITLE: Creating Persistent Supabase Branch
DESCRIPTION: CLI command to create a persistent branch in Supabase with interactive prompt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_12

LANGUAGE: bash
CODE:
```
supabase --experimental branches create --persistent
# Do you want to create a branch named develop? [Y/n]
```

----------------------------------------

TITLE: Auto-Generated Schema Migration
DESCRIPTION: Comprehensive auto-generated SQL migration script for creating employees table with all necessary permissions and constraints.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.employees
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text COLLATE pg_catalog."default",
    CONSTRAINT employees_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.employees
    OWNER to postgres;

GRANT ALL ON TABLE public.employees TO anon;

GRANT ALL ON TABLE public.employees TO authenticated;

GRANT ALL ON TABLE public.employees TO postgres;

GRANT ALL ON TABLE public.employees TO service_role;
```

----------------------------------------

TITLE: Setting Custom JWT for Realtime in Python
DESCRIPTION: This Python snippet demonstrates how to set a custom JWT token for Supabase Realtime authentication. The `set_auth` method is used to provide the token.  A Realtime channel is then set up to listen for Postgres changes on a specific table with a filter applied, and then subscribed to.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_53

LANGUAGE: python
CODE:
```
supabase.realtime.set_auth('your-custom-jwt')

changes = supabase.channel('db-changes').on_postgres_changes(
  "UPDATE",
  schema="public",
  table="products",
  filter="name=in.(red, blue, yellow)",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Setting Statement Cost Limits for Different Roles
DESCRIPTION: SQL commands to set different cost limits for database roles using pg_plan_filter extension.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
ALTER USER anon SET plan_filter.statement_cost_limit = 10000;

ALTER USER authenticated SET plan_filter.statement_cost_limit = 1e6;

ALTER USER service_role SET plan_filter.statement_cost_limit = 0;

NOTIFY pgrst, 'reload config';
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase and Google Maps
DESCRIPTION: This TypeScript code sets up environment variables for the Supabase URL, API key, and Google Maps API key in an Ionic Angular project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
export const environment = {
  production: false,
  mapsKey: 'YOUR-GOOGLE-MAPS-KEY',
  supabaseUrl: 'YOUR-URL',
  supabaseKey: 'YOUR-ANON-KEY',
}
```

----------------------------------------

TITLE: Adding Custom Claims to JWT using Auth0 Actions
DESCRIPTION: This JavaScript snippet utilizes an Auth0 Action to assign a custom role claim to JWTs upon login. It requires implementing the onExecutePostLogin Action in Auth0's dashboard to modify access tokens and include a 'role' claim.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/auth0.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
exports.onExecutePostLogin = async (event, api) => {
  api.accessToken.setCustomClaim('role', 'authenticated')
}
```

----------------------------------------

TITLE: Creating Email Sending JSON Schema - JSON
DESCRIPTION: Defines the schema for the JSON payload used in email sending, including the structure for user data, app metadata, and email data attributes. It ensures the data adheres to the specified types and constraints.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-email-hook.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "type": "object",
  "properties": {
    "user": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-faker": "random.uuid"
        },
        "aud": {
          "type": "string",
          "enum": ["authenticated"]
        },
        "role": {
          "type": "string",
          "enum": ["anon", "authenticated"]
        },
        "email": {
          "type": "string",
          "x-faker": "internet.email"
        },
        "phone": {
          "type": "string",
          "x-faker": {
            "fake": "{{phone.phoneNumber('+1##########')}}"
          }
        },
        "app_metadata": {
          "type": "object",
          "properties": {
            "provider": {
              "type": "string",
              "enum": ["email"]
            },
            "providers": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["email"]
              },
              "minItems": 1,
              "maxItems": 1
            }
          }
        },
        "user_metadata": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "x-faker": "internet.email"
            },
            "email_verified": {
              "type": "boolean",
              "x-faker": "random.boolean"
            },
            "phone_verified": {
              "type": "boolean",
              "x-faker": "random.boolean"
            },
            "sub": {
              "type": "string",
              "x-faker": "random.uuid"
            }
          }
        },
        "identities": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "identity_id": {
                "type": "string",
                "x-faker": "random.uuid"
              },
              "id": {
                "type": "string",
                "x-faker": "random.uuid"
              },
              "user_id": {
                "type": "string",
                "x-faker": "random.uuid"
              },
              "identity_data": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "x-faker": "internet.email"
                  },
                  "email_verified": {
                    "type": "boolean",
                    "x-faker": "random.boolean"
                  },
                  "phone_verified": {
                    "type": "boolean",
                    "x-faker": "random.boolean"
                  },
                  "sub": {
                    "type": "string",
                    "x-faker": "random.uuid"
                  }
                }
              },
              "provider": {
                "type": "string",
                "enum": ["email"]
              },
              "last_sign_in_at": {
                "type": "string",
                "format": "date-time",
                "x-faker": "date.recent"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "x-faker": "date.recent"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "x-faker": "date.recent"
              },
              "email": {
                "type": "string",
                "x-faker": "internet.email"
              }
            },
            "required": [
              "identity_id",
              "id",
              "user_id",
              "identity_data",
              "provider",
              "last_sign_in_at",
              "created_at",
              "updated_at",
              "email"
            ]
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-faker": "date.recent"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-faker": "date.recent"
        },
        "is_anonymous": {
          "type": "boolean",
          "x-faker": "random.boolean"
        }
      },
      "required": [
        "id",
        "aud",
        "role",
        "email",
        "phone",
        "app_metadata",
        "user_metadata",
        "identities",
        "created_at",
        "updated_at",
        "is_anonymous"
      ]
    },
    "email_data": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "pattern": "^[0-9]{6}$",
          "x-faker": {
            "fake": "{{helpers.replaceSymbols('######')}}"
          }
        },
        "token_hash": {
          "type": "string",
          "minLength": 16,
          "maxLength": 30,
          "x-faker": {
            "fake": "{{random.alphaNumeric(30)}}"
          }
        },
        "redirect_to": {
          "type": "string",
          "x-faker": "internet.url"
        },
        "email_action_type": {
          "type": "string",
          "enum": ["signup", "invite", "magiclink", "recovery", "email_change", "email"]
        },
        "site_url": {
          "type": "string",
          "x-faker": "internet.url"
        },
        "token_new": {
          "type": "string",
          "minLength": 16,
          "maxLength": 30,
          "x-faker": {
            "fake": "{{random.alphaNumeric(30)}}"
          }
        },
        "token_hash_new": {
          "type": "string",
          "minLength": 16,
          "maxLength": 30,
          "x-faker": {
            "fake": "{{random.alphaNumeric(30)}}"
          }
        }
      },
      "required": [
        "token",
        "token_hash",
        "redirect_to",
        "email_action_type",
        "site_url",
        "token_new",
        "token_hash_new"
      ]
    }
  },
  "required": ["user", "email_data"]
}
```

----------------------------------------

TITLE: Accessing BuildConfig Values in Kotlin
DESCRIPTION: Retrieves the Supabase URL and API key from the BuildConfig generated fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
val url = BuildConfig.SUPABASE_URL
val apiKey = BuildConfig.SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Configuring HTTP Auth Hook in config.toml
DESCRIPTION: TOML configuration for setting up an HTTP-based authentication hook with URI endpoint and secrets from environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_8

LANGUAGE: toml
CODE:
```
[auth.hook.send_sms]
enabled = true
uri = "http://host.docker.internal:54321/functions/v1/send_sms"
# Comma separated list of secrets
secrets = "env(SEND_SMS_HOOK_SECRETS)"
```

----------------------------------------

TITLE: Updating Postgres Configuration with Supabase CLI
DESCRIPTION: This snippet demonstrates how to update Postgres configurations using the Supabase CLI. It shows the basic command structure and an example of updating the shared_buffers parameter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
supabase --experimental \
--project-ref <project-ref> \
postgres-config update --config shared_buffers=250MB
```

----------------------------------------

TITLE: Creating a Supabase Project with Management API in TypeScript
DESCRIPTION: This code snippet demonstrates how to programmatically create a new Supabase project using the supabase-management-js library, which is a TypeScript wrapper for the Supabase Management API. It initializes a client with an access token and creates a new project with specified parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-10-supabase-integrations-marketplace.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { SupabaseManagementAPI } from "supabase-management-js";

const client = new SupabaseManagementAPI({
	accessToken: "<access token>"
})

const newProject = await client.createProject({
	  name: 'staging',
		db_pass: 'XXX',
    organization_id: 'XXX'
		plan: 'free',
    region: 'us-east-1'
})
```

----------------------------------------

TITLE: Querying Arrays with Distance Ordering Using RUM Index
DESCRIPTION: Example of a SELECT query that uses a RUM index on an array column, filtering with the && operator (array overlap) and ordering results by the distance between arrays using the <=> operator.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
SELECT * FROM test_array WHERE i && '{1}' ORDER BY i `<=>` '{1}' ASC;
```

----------------------------------------

TITLE: Creating Edge Wrapper SQL Function for Supabase Edge Functions
DESCRIPTION: This SQL function manages HTTP requests with advanced features like retries, custom headers, and region selection. It's a key component for executing dynamic JavaScript in Edge Functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION edge.edge_wrapper(
    url TEXT,
    method TEXT DEFAULT 'POST',
    headers JSONB DEFAULT '{"Content-Type": "application/json"}'::jsonb,
    params JSONB DEFAULT '{}'::jsonb,
    payload JSONB DEFAULT '{}'::jsonb, -- Payload as JSONB
    timeout_ms INTEGER DEFAULT 5000,
    max_retries INTEGER DEFAULT 0,
    allowed_regions TEXT[] DEFAULT NULL
) RETURNS jsonb AS $$
DECLARE
    retry_count INTEGER := 0;
    retry_delays DOUBLE PRECISION[] := ARRAY[0, 0.250, 0.500, 1.000, 2.500, 5.000];
    succeeded BOOLEAN := FALSE;
    current_region_index INTEGER := 1; -- Start index at 1 for PostgreSQL array
    combined_headers JSONB;
    response_json JSONB;
BEGIN
    -- Validate headers, params, and payload are JSON objects
    IF headers IS NULL OR NOT jsonb_typeof(headers) = 'object' THEN
        RAISE EXCEPTION 'Invalid headers parameter: %', headers;
    END IF;

    IF params IS NULL OR NOT jsonb_typeof(params) = 'object' THEN
        RAISE EXCEPTION 'Invalid params parameter: %', params;
    END IF;

    IF payload IS NULL OR NOT jsonb_typeof(payload) = 'object' THEN
        RAISE EXCEPTION 'Invalid payload parameter: %', payload;
    END IF;

    -- Validate allowed_regions if provided
    IF allowed_regions IS NOT NULL AND cardinality(allowed_regions) = 0 THEN
        RAISE EXCEPTION 'allowed_regions parameter cannot be an empty array';
    END IF;

    -- Check if retry_delays has enough elements
    IF cardinality(retry_delays) < max_retries + 1 THEN
        RAISE EXCEPTION 'retry_delays array must have at least % elements', max_retries + 1;
    END IF;

    -- Retry loop
    WHILE NOT succeeded AND retry_count <= max_retries LOOP
        combined_headers := headers;

        -- Set x-region header if allowed_regions is provided
        IF allowed_regions IS NOT NULL AND cardinality(allowed_regions) > 0 THEN
            combined_headers := combined_headers || jsonb_build_object('x-region', allowed_regions[current_region_index]);
        END IF;

        -- Sleep if not the first attempt
        IF retry_count > 0 THEN
            PERFORM pg_sleep(retry_delays[retry_count]);
        END IF;

        retry_count := retry_count + 1;

        -- Increment region index, wrapping around if necessary
        IF allowed_regions IS NOT NULL AND cardinality(allowed_regions) > 0 THEN
            current_region_index := current_region_index + 1;
            IF current_region_index > cardinality(allowed_regions) THEN
                current_region_index := 1;
            END IF;
        END IF;

        BEGIN
            RAISE WARNING 'headers:%s', combined_headers;

            -- Call the simplified HTTP request function
            response_json := edge.http_request(url, method, combined_headers, params, payload, timeout_ms);

            -- Check the status code
            IF (response_json->>'status_code')::INTEGER < 500 THEN
                succeeded := TRUE;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                IF retry_count > max_retries THEN
                    RAISE EXCEPTION 'HTTP request failed after % retries. SQL Error: { %, % }',
                        max_retries, SQLERRM, SQLSTATE;
                END IF;
        END;
    END LOOP;

    RETURN response_json;
END;
$$ LANGUAGE plpgsql;
```

----------------------------------------

TITLE: Configuring Supavisor Transaction Mode Connection String for Prisma
DESCRIPTION: Example of a Supavisor connection string in transaction mode for Prisma, recommended for horizontally auto-scaling servers and edge/serverless deployments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_10

LANGUAGE: markdown
CODE:
```
postgres://[DB-USER].[PROJECT REF]:[PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres
```

----------------------------------------

TITLE: Syncing and Tracking State in Kotlin
DESCRIPTION: This snippet outlines how to track presence state in Kotlin, with considerations for handling join and leave events.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_8

LANGUAGE: kotlin
CODE:
```
val roomOne = supabase.channel("room_01")
val presenceFlow: Flow<PresenceAction> = roomOne.presenceChangeFlow()
presenceFlow
    .onEach {
        println(it.joins) //You can also use it.decodeJoinsAs<YourType>()
        println(it.leaves) //You can also use it.decodeLeavesAs<YourType>()
    }
    .launchIn(yourCoroutineScope) //You can also use .collect { } here

roomOne.subscribe()
```

----------------------------------------

TITLE: Creating a Custom Loader for Next.js Image Optimization
DESCRIPTION: This snippet demonstrates how to create a custom loader function for Next.js to use Supabase Image Transformation for optimizing images.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```
const projectId = '' // your supabase project id

export default function supabaseLoader({ src, width, quality }) {
  return `https://${projectId}.supabase.co/storage/v1/render/image/public/${src}?width=${width}&quality=${quality || 75}`
}
```

----------------------------------------

TITLE: SvelteKit OAuth Callback Handler
DESCRIPTION: Implementation of OAuth callback handling in SvelteKit, managing code exchange and redirect flow.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { redirect } from '@sveltejs/kit';

export const GET = async (event) => {
	const {
		url,
		locals: { supabase }
	} = event;
	const code = url.searchParams.get('code') as string;
	const next = url.searchParams.get('next') ?? '/';

  if (code) {
    const { error } = await supabase.auth.exchangeCodeForSession(code)
    if (!error) {
      throw redirect(303, `/${next.slice(1)}`);
    }
  }

  // return the user to an error page with instructions
  throw redirect(303, '/auth/auth-code-error');
};
```

----------------------------------------

TITLE: Creating PostGIS Bounding Box Search Function in SQL
DESCRIPTION: SQL function that finds restaurants within a geographic bounding box using PostGIS. Takes minimum and maximum latitude/longitude coordinates as parameters and returns restaurant details including location coordinates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_15

LANGUAGE: sql
CODE:
```
create or replace function restaurants_in_view(min_lat float, min_long float, max_lat float, max_long float)
returns table (id public.restaurants.id%TYPE, name public.restaurants.name%TYPE, lat float, long float)
set search_path to ''
language sql
as $$
	select id, name, gis.st_y(location::gis.geometry) as lat, gis.st_x(location::gis.geometry) as long
	from public.restaurants
	where location operator(gis.&&) gis.ST_SetSRID(gis.ST_MakeBox2D(gis.ST_Point(min_long, min_lat), gis.ST_Point(max_long, max_lat)), 4326)
$$;
```

----------------------------------------

TITLE: Uploading Files to Supabase Storage in Kotlin
DESCRIPTION: This code demonstrates how to upload a file to Supabase Storage using the standard upload method in Kotlin. It provides two options: uploading bytes directly or streaming from a file on JVM/Android.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
supabase.storage.from("bucket_name").upload("file_path", bytes)

//Or on JVM/Android: (This will stream the data from the file to supabase)
supabase.storage.from("bucket_name").upload("file_path", file)
```

----------------------------------------

TITLE: Fetching Data with Legend-State Observables in React Native
DESCRIPTION: Demonstrates how to use the 'observer' pattern from Legend-State to fetch and automatically sync changes from Supabase. This component displays a list of todos that updates in realtime when data changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-23-local-first-expo-legend-state.mdx#2025-04-21_snippet_8

LANGUAGE: tsx
CODE:
```
import { observer } from '@legendapp/state/react'
import { todos$ as _todos$ } from './utils/SupaLegend'

const Todos = observer(({ todos$ }: { todos$: typeof _todos$ }) => {
  // Get the todos from the state and subscribe to updates
  const todos = todos$.get()
  const renderItem = ({ item: todo }: { item: Tables<'todos'> }) => <Todo todo={todo} />
  if (todos)
    return <FlatList data={Object.values(todos)} renderItem={renderItem} style={styles.todos} />

  return <></>
})
```

----------------------------------------

TITLE: Filtering Supabase Data: Renaming 'is' and 'in' Filters (Dart)
DESCRIPTION: Illustrates the renaming of the `is` and `in` filter functions in the Supabase client library due to conflicts with Dart's reserved keywords. Version 1 used `is_` and `in_`, while version 2 introduces `isFilter` and `inFilter` for improved clarity and to avoid confusion with the underscore naming convention.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_11

LANGUAGE: dart
CODE:
```
final data = await supabase
  .from('users')
  .select()
  .is_('status', null);

final data = await supabase
  .from('users')
  .select()
  .in_('status', ['ONLINE', 'OFFLINE']);
```

LANGUAGE: dart
CODE:
```
final data = await supabase
  .from('users')
  .select()
  .isFilter('status', null);

final data = await supabase
  .from('users')
  .select()
  .inFilter('status', ['ONLINE', 'OFFLINE']);
```

----------------------------------------

TITLE: Creating a PostgreSQL Function for Unnamed Parameters
DESCRIPTION: Shows how to create a PostgreSQL function that accepts a single unnamed JSON parameter. This function is designed to handle webhook payloads, specifically for storing email bounce data from Postmark.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-postgrest-9.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create function store_bounces(json)
returns json
language sql
as $$
  insert into bounces (webhook_id, email)
  values (
    ($1->>'ID')::bigint,
    ($1->>'Email')::text
  );

  select '{ "status": 200 }'::json;
$$;
```

----------------------------------------

TITLE: Initializing a RedwoodJS App with yarn create
DESCRIPTION: Command to create a new RedwoodJS application named 'supabase-redwoodjs' using the Create Redwood App command-line tool.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
yarn create redwood-app supabase-redwoodjs
cd supabase-redwoodjs
```

----------------------------------------

TITLE: Defining ProductRepository Interface in Kotlin
DESCRIPTION: This interface defines the contract for product data operations. It includes methods for creating, retrieving, updating, and deleting products from the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_12

LANGUAGE: kotlin
CODE:
```
interface ProductRepository {
    suspend fun createProduct(product: Product): Boolean
    suspend fun getProducts(): List<ProductDto>?
    suspend fun getProduct(id: String): ProductDto
    suspend fun deleteProduct(id: String)
    suspend fun updateProduct(
        id: String, name: String, price: Double, imageName: String, imageFile: ByteArray
    )
}
```

----------------------------------------

TITLE: Creating SignUpScreen Component in Jetpack Compose
DESCRIPTION: This code defines the 'SignUpScreen' composable function that provides a UI for user signup. It incorporates standard UI elements within a Scaffold, handling navigation with NavController, and uses SignUpViewModel for state management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_23

LANGUAGE: kotlin
CODE:
```
@Composable
fun SignUpScreen(
    modifier: Modifier = Modifier,
    navController: NavController,
    viewModel: SignUpViewModel = hiltViewModel()
) {
    val snackBarHostState = remember { SnackbarHostState() }
    val coroutineScope = rememberCoroutineScope()
    Scaffold(
        snackbarHost = { androidx.compose.material.SnackbarHost(snackBarHostState) },
        topBar = {
            TopAppBar(
                navigationIcon = {
                    IconButton(onClick = {
                        navController.navigateUp()
                    }) {
                        Icon(
                            imageVector = Icons.Filled.ArrowBack,
                            contentDescription = null,
                            tint = MaterialTheme.colorScheme.onPrimary
                        )
                    }
                },
                backgroundColor = MaterialTheme.colorScheme.primary,
                title = {
                    Text(
                        text = "Sign Up",
                        color = MaterialTheme.colorScheme.onPrimary,
                    )
                },
            )
        }
    ) { paddingValues ->
```

----------------------------------------

TITLE: Setting PostgreSQL Log Level to WARNING in SQL
DESCRIPTION: This SQL command sets the log_min_messages to WARNING for the postgres role, which is the recommended default level for most operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-logging-levels-and-how-they-impact-your-project-KXiJRm.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
ALTER ROLE postgres SET log_min_messages TO 'WARNING';
```

----------------------------------------

TITLE: SendGrid Email Request Body Construction
DESCRIPTION: Constructs the request body for SendGrid API with email content, recipient, and sender details. The body is formatted as JSON with HTML content type.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-email-hook.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
        body: JSON.stringify({
            personalizations: [{
                to: [{
                    email: user.email
                }],
                subject: subject
            }],
            from: {
                email: FROM_EMAIL
            },
            content: [{
                type: "text/html",
                value: htmlBody
            }]
        })
```

----------------------------------------

TITLE: Validating JSON Against Schema with pg_jsonschema
DESCRIPTION: Example of using the json_matches_schema function to validate a JSON object against a schema that requires the instance to be an object.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_jsonschema.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
  extensions.json_matches_schema(
    schema := '{"type": "object"}',
    instance := '{}'
  );
```

----------------------------------------

TITLE: Deploying Supabase Function for Open Graph Image Generation
DESCRIPTION: This command deploys the 'opengraph' Supabase function to the cloud environment. It also disables JWT verification, which should be carefully considered for production use.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/opengraph/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions deploy opengraph --no-verify-jwt
```

----------------------------------------

TITLE: Implementing Account Management Page Component
DESCRIPTION: Angular component for the account page that allows users to view and update their profile information, as well as sign out from the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { Component, OnInit } from '@angular/core'
import { Router } from '@angular/router'
import { Profile, SupabaseService } from '../supabase.service'

@Component({
  selector: 'app-account',
  template: `
    <ion-header>
      <ion-toolbar>
        <ion-title>Account</ion-title>
      </ion-toolbar>
    </ion-header>

    <ion-content>
      <form>
        <ion-item>
          <ion-label position="stacked">Email</ion-label>
          <ion-input type="email" name="email" [(ngModel)]="email" readonly></ion-input>
        </ion-item>

        <ion-item>
          <ion-label position="stacked">Name</ion-label>
          <ion-input type="text" name="username" [(ngModel)]="profile.username"></ion-input>
        </ion-item>

        <ion-item>
          <ion-label position="stacked">Website</ion-label>
          <ion-input type="url" name="website" [(ngModel)]="profile.website"></ion-input>
        </ion-item>
        <div class="ion-text-center">
          <ion-button fill="clear" (click)="updateProfile()">Update Profile</ion-button>
        </div>
      </form>

      <div class="ion-text-center">
        <ion-button fill="clear" (click)="signOut()">Log Out</ion-button>
      </div>
    </ion-content>
  `,
  styleUrls: ['./account.page.scss'],
})
export class AccountPage implements OnInit {
  profile: Profile = {
    username: '',
    avatar_url: '',
    website: '',
  }

  email = ''

  constructor(
    private readonly supabase: SupabaseService,
    private router: Router
  ) {}
  ngOnInit() {
    this.getEmail()
    this.getProfile()
  }

  async getEmail() {
    this.email = await this.supabase.user.then((user) => user?.email || '')
  }

  async getProfile() {
    try {
      const { data: profile, error, status } = await this.supabase.profile
      if (error && status !== 406) {
        throw error
      }
      if (profile) {
        this.profile = profile
      }
    } catch (error: any) {
      alert(error.message)
    }
  }

  async updateProfile(avatar_url: string = '') {
    const loader = await this.supabase.createLoader()
    await loader.present()
    try {
      const { error } = await this.supabase.updateProfile({ ...this.profile, avatar_url })
      if (error) {
        throw error
      }
      await loader.dismiss()
      await this.supabase.createNotice('Profile updated!')
    } catch (error: any) {
      await loader.dismiss()
      await this.supabase.createNotice(error.message)
    }
  }

  async signOut() {
    console.log('testing?')
    await this.supabase.signOut()
    this.router.navigate(['/'], { replaceUrl: true })
  }
}
```

----------------------------------------

TITLE: Configuring AppModule with ReactiveFormsModule in Angular
DESCRIPTION: This snippet shows how to set up the AppModule, including necessary component declarations and importing ReactiveFormsModule for form handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { NgModule } from '@angular/core'
import { BrowserModule } from '@angular/platform-browser'

import { AppComponent } from './app.component'
import { AuthComponent } from './auth/auth.component'
import { AccountComponent } from './account/account.component'
import { ReactiveFormsModule } from '@angular/forms'
import { AvatarComponent } from './avatar/avatar.component'

@NgModule({
  declarations: [AppComponent, AuthComponent, AccountComponent, AvatarComponent],
  imports: [BrowserModule, ReactiveFormsModule],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
```

----------------------------------------

TITLE: Creating Users for Passwordless Signin in Supabase Auth - TypeScript
DESCRIPTION: This TypeScript code snippet illustrates how to create users for passwordless authentication in Supabase Auth. It verifies users' email before creation using 'email_confirm', requiring the '@supabase/supabase-js' module for Supabase client creation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/auth0.mdx#2025-04-21_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('your_project_url', 'your_supabase_api_key')\n\n// ---cut---\nconst { data, error } = await supabase.auth.admin.createUser({\n  email: 'valid.email@supabase.io',\n  email_confirm: true,\n})
```

----------------------------------------

TITLE: Configuring S3 Storage Backend in Docker Compose
DESCRIPTION: Configuration for using S3 as the storage backend for Supabase Storage instead of the default local file storage, specifying bucket name and region.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_9

LANGUAGE: yaml
CODE:
```
storage:
  environment: STORAGE_BACKEND=s3
    GLOBAL_S3_BUCKET=name-of-your-s3-bucket
    REGION=region-of-your-s3-bucket
```

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Command to initialize Supabase in the project directory
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
supabase init
```

----------------------------------------

TITLE: Alternative GraphQL Query Using Collection Filtering
DESCRIPTION: A GraphQL query that achieves the same result as the UDF example but uses the built-in collection filtering instead of a custom function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_8

LANGUAGE: graphql
CODE:
```
query {
  accountCollection(filter: { email: { ilike: "%foo.com" } }, first: 2) {
    edges {
      node {
        id
        email
      }
    }
  }
}
```

----------------------------------------

TITLE: Updating signIn with phone OTP in TypeScript
DESCRIPTION: Example of how to update the signIn method for phone OTP authentication in supabase-js v2. The new version uses signInWithOtp and verifyOtp.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
const { data, error } = await supabase
  .auth
  .signInWithOtp({ phone })

// After receiving a SMS with a OTP.
const { data, error } = await supabase
.auth
.verifyOtp({ phone, token })
```

----------------------------------------

TITLE: Defining Database Schema Models with Drizzle ORM
DESCRIPTION: Creates a schema.ts file that defines a 'users' table model with id, fullName, and phone columns using Drizzle's pgTable function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/drizzle.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { pgTable, serial, text, varchar } from "drizzle-orm/pg-core";

export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  fullName: text('full_name'),
  phone: varchar('phone', { length: 256 }),
});
```

----------------------------------------

TITLE: Setting Custom JWT for Realtime in Dart
DESCRIPTION: This Dart snippet demonstrates setting a custom JWT token for Supabase Realtime authentication. The `setAuth` method is used to provide the token before subscribing to a Realtime channel.  It listens for Postgres changes on a specific table with a filter applied, and then subscribed to.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_50

LANGUAGE: dart
CODE:
```
supabase.realtime.setAuth('your-custom-jwt');

supabase
    .channel('db-changes')
    .onPostgresChanges(
      event: PostgresChangeEvent.all,
      schema: 'public',
      table: 'messages',
      filter: PostgresChangeFilter(
        type: PostgresChangeFilterType.eq,
        column: 'body',
        value: 'bye',
      ),
      callback: (payload) => print(payload),
    )
    .subscribe();
```

----------------------------------------

TITLE: Querying with Inner Joins in Supabase JavaScript Client
DESCRIPTION: Demonstrates how to use the new '!inner' keyword for resource embedding with inner joins in PostgREST 9 using the Supabase JavaScript client. This allows filtering rows of the top-level table based on a filter of the embedded table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-postgrest-9.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('messages')
  .select('*, users!inner(*)')
  .eq('users.username', 'Jane')
```

----------------------------------------

TITLE: Initializing Supabase Client with Auth0 in Kotlin
DESCRIPTION: This Kotlin snippet demonstrates how to initialize a Supabase client in conjunction with Auth0. Dependency includes the Auth0 library for Android, acquiring access tokens through Auth0's Credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/auth0.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
import com.auth0.android.result.Credentials

val supabase = createSupabaseClient(
    "https://<supabase-project>.supabase.co",
    "SUPABASE_ANON_KEY"
) {
    accessToken = {
        val credentials: Credentials = ...; // Get credentials from Auth0
        credentials.accessToken
    }
}
```

----------------------------------------

TITLE: Input OTP with Custom Pattern
DESCRIPTION: Implementation of the Input OTP component with a custom pattern that accepts both digits and characters. Utilizes the built-in REGEXP_ONLY_DIGITS_AND_CHARS pattern from the input-otp library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/input-otp.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import { REGEXP_ONLY_DIGITS_AND_CHARS } from "input-otp"

...

<InputOTP
  maxLength={6}
  pattern={REGEXP_ONLY_DIGITS_AND_CHARS}
>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    {/* ... */}
  </InputOTPGroup>
</InputOTP>
```

----------------------------------------

TITLE: Signing In with Notion in Kotlin using Supabase
DESCRIPTION: This Kotlin snippet shows the process of signing in with Notion via Supabase by using the signInWith() function with Notion as the provider. It assumes the presence of a properly configured Supabase client in the context.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_2

LANGUAGE: Kotlin
CODE:
```
suspend fun signInWithNotion() {
	supabase.auth.signInWith(Notion)
}

```

----------------------------------------

TITLE: Creating Database Migration with pnpm
DESCRIPTION: Command to create and apply a Prisma migration using pnpm. This initializes the database schema based on your Prisma models.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_13

LANGUAGE: bash
CODE:
```
pnpx prisma migrate dev --name first_prisma_migration
```

----------------------------------------

TITLE: Handling ZIP File Upload with Deno Edge Function
DESCRIPTION: Example showing how to write a user-uploaded ZIP file to temporary storage using Deno's file system APIs. The function checks the content type, generates a unique ID, and writes the file to the /tmp directory.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ephemeral-storage.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
Deno.serve(async (req) => {
  if (req.headers.get('content-type') !== 'application/zip') {
    return new Response('file must be a zip file', {
      status: 400,
    })
  }

  const uploadId = crypto.randomUUID()
  await Deno.writeFile('/tmp/' + uploadId, req.body)

  // do something with the written zip file

  return new Response('ok')
})
```

----------------------------------------

TITLE: Transaction Mode Connection String Format
DESCRIPTION: Example connection string format for connecting to Supabase PostgreSQL using the connection pooler in transaction mode on port 6543.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-and-connection-terminology-explained-9pr_ZO.mdx#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
#example transaction mode string
postgres://postgres.obfwhevidiamwdwki:[YPASSWORD]@aws-0-ca-central-1.pooler.supabase.com:6543/postgres
```

----------------------------------------

TITLE: Attempting Access Without Privileges
DESCRIPTION: Example showing permission error when attempting to access table without proper privileges.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
# as senior_dev
postgres=> select * from public.apps;
ERROR:  permission denied for table apps
```

----------------------------------------

TITLE: Resetting Database Version with Supabase CLI
DESCRIPTION: This bash command shows how to reset your local Supabase database to a specific migration version using the CLI. This is helpful during development to revert changes and regenerate migrations based on updated schema files.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_15

LANGUAGE: bash
CODE:
```
supabase db reset --version 20241005112233
```

----------------------------------------

TITLE: Overriding Generated TypeScript Types
DESCRIPTION: Shows how to override generated types using type-fest's MergeDeep utility type.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { MergeDeep } from 'type-fest'
import { Database as DatabaseGenerated } from './database-generated.types'
export { Json } from './database-generated.types'

// Override the type for a specific column in a view:
export type Database = MergeDeep<
  DatabaseGenerated,
  {
    public: {
      Views: {
        movies_view: {
          Row: {
            // id is a primary key in public.movies, so it must be `not null`
            id: number
          }
        }
      }
    }
  }
>
```

----------------------------------------

TITLE: Purging Messages from a Queue in PGMQ with SQL
DESCRIPTION: The purge_queue function permanently deletes all messages in a specified queue. It takes a queue name as a parameter and returns the number of messages deleted.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
select * from pgmq.purge_queue('my_queue');
 purge_queue
-------------
           8
```

----------------------------------------

TITLE: Creating Token Exchange Endpoint in SvelteKit for Supabase Auth
DESCRIPTION: Implementation of a SvelteKit server route to handle Supabase authentication token exchange for password reset flow. It verifies OTP tokens and manages redirects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_27

LANGUAGE: TypeScript
CODE:
```
import { redirect } from '@sveltejs/kit'
import { type EmailOtpType } from '@supabase/supabase-js'

export const GET = async (event) => {
  const {
    url,
    locals: { supabase },
  } = event
  const token_hash = url.searchParams.get('token_hash') as string
  const type = url.searchParams.get('type') as EmailOtpType | null
  const next = url.searchParams.get('next') ?? '/'

  /**
   * Clean up the redirect URL by deleting the Auth flow parameters.
   *
   * `next` is preserved for now, because it's needed in the error case.
   */
  const redirectTo = new URL(url)
  redirectTo.pathname = next
  redirectTo.searchParams.delete('token_hash')
  redirectTo.searchParams.delete('type')

  if (token_hash && type) {
    const { error } = await supabase.auth.verifyOtp({ token_hash, type })
    if (!error) {
      redirectTo.searchParams.delete('next')
      redirect(303, redirectTo)
    }
  }

  // return the user to an error page with some instructions
  redirectTo.pathname = '/auth/error'
  redirect(303, redirectTo)
}
```

----------------------------------------

TITLE: Private Package Import Example
DESCRIPTION: Example of importing a private npm package in a Supabase Edge Function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import MyPackage from 'npm:@myorg/private-package@v1.0.1'

// use MyPackage
```

----------------------------------------

TITLE: Static Single Post Component with Revalidation
DESCRIPTION: Implements a server component for individual post display with static parameter generation and revalidation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_13

LANGUAGE: tsx
CODE:
```
import supabase from '../../../utils/supabase'
import { notFound } from 'next/navigation'

export const revalidate = 60

export async function generateStaticParams() {
  const { data: posts } = await supabase.from('posts').select('id')

  return posts?.map(({ id }) => ({
    id,
  }))
}

export default async function Post({ params: { id } }: { params: { id: string } }) {
  const { data: post } = await supabase.from('posts').select().match({ id }).single()

  if (!post) {
    notFound()
  }

  return <pre>{JSON.stringify(post, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Reading Messages with Polling
DESCRIPTION: Reads messages with long-polling support for waiting on new messages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
select * from pgmq.read_with_poll('my_queue', 1, 1, 5, 100);
```

----------------------------------------

TITLE: Popping Messages
DESCRIPTION: Reads and immediately deletes a single message from the queue.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
select * from pgmq.pop('my_queue');
```

----------------------------------------

TITLE: Creating a View in SQL for pg_graphql
DESCRIPTION: This SQL snippet creates a view named 'ProjectOwner' that selects specific columns from the account and role tables. It demonstrates how to create a view that can be used with pg_graphql.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create view "ProjectOwner" as
  select
    acc.id,
    acc.name
  from
    account as acc
    join role as r on r.id = acc.role_id
  where acc.role = 'project_owner';
```

----------------------------------------

TITLE: Viewing Log-Related Settings in Postgres
DESCRIPTION: SQL query to view all log-related settings in Postgres. It filters the pg_settings table for categories related to logging and log configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
-- view all log related settings
select *
from pg_settings
where
  (
    category like 'Reporting and Logging / What to Log'
    or category like 'Reporting and Logging / When to Log'
    or category = 'Customized Options'
  )
  and name like '%log%';
```

----------------------------------------

TITLE: Creating Storage Bucket with Swift
DESCRIPTION: Creates a public storage bucket named 'avatars' using the Supabase Swift client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/creating-buckets.mdx#2025-04-21_snippet_3

LANGUAGE: swift
CODE:
```
try await supabase.storage.createBucket(
  "avatars",
  options: BucketOptions(public: true)
)
```

----------------------------------------

TITLE: Response Status Code Query
DESCRIPTION: SQL query showing how to access response status codes from edge logs by unnesting metadata and response fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select
  status_code
from
  edge_logs
  -- Unpack 'metadata' field
  cross join unnest(metadata) as metadata
  -- unpack 'response' from 'metadata'
  cross join unnest(response) as response;
```

----------------------------------------

TITLE: Creating a Vector Similarity Search Function in PostgreSQL
DESCRIPTION: This SQL function creates a Postgres function for similarity searching of image embeddings. It takes a query embedding vector, a similarity threshold, and a maximum result count as parameters. The function uses pgvector's cosine similarity operator (<=>), orders by similarity score, and returns matches above the specified threshold.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create function match_images (
    query_embedding vector(512),
    match_threshold float,
    match_count int
)
returns setof images
language sql stable
as $$
	select *, 1 - (image_embedding <=> query_embedding) as similarity
	from images
	where 1 - (image_embedding <=> query_embedding) > match_threshold
	order by similarity desc
	limit match_count;
$$;
```

----------------------------------------

TITLE: SQL Job Queue Table Creation
DESCRIPTION: Creates a table for storing SMS message jobs with properties for job management including retry logic and scheduling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table job_queue (
  job_id uuid primary key default gen_random_uuid(),
  job_data jsonb not null,
  created_at timestamp default now(),
  status text default 'pending',
  priority int default 0,
  retry_count int default 0,
  max_retries int default 2,
  scheduled_at timestamp default now()
);
```

----------------------------------------

TITLE: Creating Custom Access Token Hook in PLV8
DESCRIPTION: This function is used to create a custom access token hook that sets the user's role level in claims based on the user's ID retrieved from the profiles table. It initializes default claims if not present and requires the PLV8 language for execution.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_3

LANGUAGE: plv8
CODE:
```
create or replace function custom_access_token_hook(event jsonb)
returns jsonb
language plv8
as $$
  var user_level;

  -- Fetch the current user's level from the profiles table
  var result = plv8.execute("select level from public.profiles where user_id = $1", [event.user_id]);
  if (result.length > 0) {
    user_level = result[0].level;
  } else {
    -- Assign a default level of 0 if no level is found
    user_level = 0;
  }

  -- Check if 'claims' exists in the event object; if not, initialize it
  if (!event.claims) {
    event.claims = {};
  }

  -- Update the level in the claims
  event.claims.level = user_level;

  return event;
$$;

grant all
  on table public.profiles
  to supabase_auth_admin;

revoke all
  on table public.profiles
  from authenticated, anon, public;
```

----------------------------------------

TITLE: Installing Supabase SDK via NuGet Package Manager
DESCRIPTION: Command to install the Supabase package using the .NET CLI dotnet add package command. This adds the Supabase client library to a .NET project through NuGet package manager.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/csharp/installing.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
dotnet add package supabase
```

----------------------------------------

TITLE: Deleting Specific Postgres Configuration Overrides
DESCRIPTION: This snippet illustrates how to delete specific Postgres configuration overrides using the Supabase CLI. It shows the command structure for deleting multiple configuration parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
supabase --experimental \
--project-ref <project-ref> \
postgres-config delete --config shared_buffers,work_mem
```

----------------------------------------

TITLE: Querying Nested JSON Data using Supabase Kotlin Client
DESCRIPTION: This Kotlin snippet uses the Supabase Kotlin client to select data from the `books` table, including extracting nested values from the `metadata` JSON column. It utilizes `Columns.raw` to pass the select string with Postgres JSON operators.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#_snippet_4

LANGUAGE: Kotlin
CODE:
```
val data = supabase.from("books").select(Columns.raw("""
    title,
    description: metadata->>description,
    price: metadata->price,
    low_age: metadata->ages->0,
    high_age: metadata->ages->1
""".trimIndent()))
```

----------------------------------------

TITLE: Pre-Token Generation Trigger in Node.js for AWS Cognito
DESCRIPTION: This Node.js lambda function is a handler for AWS Cognito pre-token generation triggers, modifying the 'role' claim to 'authenticated'. It needs to be integrated with Cognito User Pool's Lambda Triggers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/aws-cognito.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
export const handler = async (event) => {
  event.response = {
    claimsOverrideDetails: {
      claimsToAddOrOverride: {
        role: 'authenticated',
      },
    },
  }

  return event
}
```

----------------------------------------

TITLE: Implementing SAML RLS Policy in Postgres
DESCRIPTION: SQL command to create a row-level security policy that restricts user invitations to developers within the same organization using SAML provider ID from JWT claims.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-17-what-is-saml-authentication.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "Can only invite developers in the same organization"
on invited_users
as restrictive
for insert
with check (
	sso_provider_id = (select auth.jwt()#>>'{amr,0,provider}')
);
```

----------------------------------------

TITLE: Setting Maintenance Work Memory for Indexing
DESCRIPTION: SQL command to increase the maintenance_work_mem parameter, which controls the maximum memory allocation for operations like indexing. This can significantly improve index creation performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
set maintenance_work_mem to <several Gb's>; -- '#GB'
```

----------------------------------------

TITLE: Creating Edge Function
DESCRIPTION: Command to create a new Edge Function for text-to-image conversion
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hugging-face.mdx#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
supabase functions new text-to-image
```

----------------------------------------

TITLE: Disabling Automatic Optimization in Python
DESCRIPTION: This snippet shows how to disable automatic image optimization and request the original format using the Supabase Python client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_18

LANGUAGE: python
CODE:
```
response = supabase.storage.from_('bucket').download(
  'image.jpeg',
  {
    'transform': {
      'width': 200,
      'height': 200,
      'format': 'origin',
    },
  }
)
```

----------------------------------------

TITLE: Inserting Data with Enum Values
DESCRIPTION: Example of inserting data into a table with an enum column, specifying one of the valid enum values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
insert into person
  (name, current_mood)
values
  ('Alice', 'happy');
```

----------------------------------------

TITLE: Implementing Deep Link Handler Activity
DESCRIPTION: Kotlin implementation of DeepLinkHandlerActivity that processes OAuth callbacks using Supabase client. Handles successful authentication and displays user information in a success screen.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_29

LANGUAGE: kotlin
CODE:
```
@AndroidEntryPoint
class DeepLinkHandlerActivity : ComponentActivity() {

    @Inject
    lateinit var supabaseClient: SupabaseClient

    private lateinit var callback: (String, String) -> Unit

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        supabaseClient.handleDeeplinks(intent = intent,
            onSessionSuccess = { userSession ->
                Log.d("LOGIN", "Log in successfully with user info: ${userSession.user}")
                userSession.user?.apply {
                    callback(email ?: "", createdAt.toString())
                }
            })
        setContent {
            val navController = rememberNavController()
            val emailState = remember { mutableStateOf("") }
            val createdAtState = remember { mutableStateOf("") }
            LaunchedEffect(Unit) {
                callback = { email, created ->
                    emailState.value = email
                    createdAtState.value = created
                }
            }
            ManageProductsTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    SignInSuccessScreen(
                        modifier = Modifier.padding(20.dp),
                        navController = navController,
                        email = emailState.value,
                        createdAt = createdAtState.value,
                        onClick = { navigateToMainApp() }
                    )
                }
            }
        }
    }

    private fun navigateToMainApp() {
        val intent = Intent(this, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_CLEAR_TOP
        }
        startActivity(intent)
    }
}
```

----------------------------------------

TITLE: Initializing Supabase client with a custom serializer
DESCRIPTION: This Kotlin snippet demonstrates how to create a Supabase client with a custom serializer. It shows how to set the default serializer to a custom implementation of SupabaseSerializer.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_20

LANGUAGE: kotlin
CODE:
```
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    defaultSerializer = CustomSerializer()
}
```

----------------------------------------

TITLE: Debugging HTTP Requests with Postman Echo API
DESCRIPTION: Example of using the Postman Echo API to debug HTTP requests by sending a POST request and then inspecting the response content to verify the request body.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
select
    net.http_post(
        url := 'https://postman-echo.com/post',
        body := '{"key1": "value", "key2": 5}'::jsonb
    ) as request_id;
```

----------------------------------------

TITLE: Signing Out - Kotlin
DESCRIPTION: This snippet details how to sign out a user from a Kotlin application using Supabase. It makes use of the `signOut` method to remove the user from the authentication context.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
suspend fun signOut() {\n\tsupabase.auth.signOut()\n}
```

----------------------------------------

TITLE: Create TypeScript definitions for event.locals
DESCRIPTION: This code snippet defines TypeScript interfaces to extend the `event.locals` object in SvelteKit with Supabase-related properties like `supabase`, `safeGetSession`, `session`, and `user`. This prevents TypeScript errors by providing type information for these properties.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import type { Session, SupabaseClient, User } from '@supabase/supabase-js'
import type { Database } from './database.types.ts' // import generated types

declare global {
  namespace App {
    // interface Error {}
    interface Locals {
      supabase: SupabaseClient<Database>
      safeGetSession: () => Promise<{ session: Session | null; user: User | null }>
      session: Session | null
      user: User | null
    }
    interface PageData {
      session: Session | null
    }
    // interface PageState {}
    // interface Platform {}
  }
}

export {}
```

----------------------------------------

TITLE: Enabling HypoPG Extension in PostgreSQL
DESCRIPTION: SQL commands to enable or disable the HypoPG extension in PostgreSQL. It's recommended to create the extension in a separate schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/hypopg.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the "hypopg" extension
create extension hypopg with schema extensions;

-- Disable the "hypopg" extension
drop extension if exists hypopg;
```

----------------------------------------

TITLE: Setting Up Ionic Angular Project with Supabase
DESCRIPTION: Bash commands to create a blank Ionic Angular application, install the Supabase JavaScript client, and generate necessary pages and services for the authentication system.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
ionic start supaAuth blank --type=angular
npm install @supabase/supabase-js

# Add some pages
ionic g page pages/login
ionic g page pages/register
ionic g page pages/groups
ionic g page pages/messages

# Generate services
ionic g service services/auth
ionic g service services/data
```

----------------------------------------

TITLE: Example Generated Seed Data SQL (SQL)
DESCRIPTION: Shows the SQL `INSERT` statements generated by running the Snaplet Seed script (`seed.ts`), illustrating how the defined data points are translated into database operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#_snippet_7

LANGUAGE: sql
CODE:
```
-- The \`Post.createdBy\` user with an email address ending in "@acme.org"
INSERT INTO "User" (name, email) VALUES ("John Snow", "snow@acme.org")

--- A \`Post\` with the title ""There is a lot of snow around here!""
INSERT INTO "Post" (title, content, createdBy) VALUES (
  "There is a lot of snow around here!",
  "Lorem ipsum dolar",
  1)

--- Three \`Post.Comment\` from three different users.
INSERT INTO "User" (name, email) VALUES ("Stephanie Shadow", "shadow@domain.com")
INSERT INTO "Comment" (text, userId, postId) VALUES ("I love cheese", 2, 1)

INSERT INTO "User" (name, email) VALUES ("John Rambo", "rambo@trymore.dev")
INSERT INTO "Comment" (text, userId, postId) VALUES ("Lorem ipsum dolar sit", 3, 1)

INSERT INTO "User" (name, email) VALUES ("Steven Plank", "s@plank.org")
INSERT INTO "Comment" (text, userId, postId) VALUES ("Actually, that's not correct...", 4, 1)
```

----------------------------------------

TITLE: Querying Nested JSON Data using Supabase Swift Client
DESCRIPTION: This Swift snippet demonstrates querying nested JSON data from the `books` table using the Supabase Swift client. It constructs the select statement containing Postgres JSON operators to extract the desired fields from the `metadata` column.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#_snippet_3

LANGUAGE: Swift
CODE:
```
try await supabase
  .from("books")
  .select(
    """
      title,
      description:  metadata->>description,
      price:        metadata->price,
      low_age:      metadata->ages->0,
      high_age:     metadata->ages->1
    """
  )
  .execute()
```

----------------------------------------

TITLE: Using SQL to Call List Objects Function
DESCRIPTION: Demonstrates executing the `list_objects` function using raw SQL. This requires a Supabase database connection and is primarily used for querying the database directly. It inputs the bucket identifier and pagination parameters for retrieving object listings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/production/scaling.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select * from list_objects('bucket_id', '', 100, 0);
```

----------------------------------------

TITLE: Starting Self-Hosted Supabase Stack with Docker Compose
DESCRIPTION: This command starts the self-hosted Supabase stack using Docker Compose. It should be run after configuring the docker-compose.yml file and other necessary settings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
docker compose up
```

----------------------------------------

TITLE: Signing In with Phone and Password in v0 vs v1
DESCRIPTION: Demonstrates the change in the method for signing in with a phone number and password. In v1, a more explicit method name is used.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_7

LANGUAGE: dart
CODE:
```
await supabase.auth.signIn(
  phone: '+13334445555',
  password: 'example-password',
);
```

LANGUAGE: dart
CODE:
```
await supabase.auth.signInWithPassword(
  phone: '+13334445555',
  password: 'example-password',
);
```

----------------------------------------

TITLE: Implementing Resumable Uploads in Kotlin
DESCRIPTION: This snippet demonstrates how to use Kotlin's native support for resumable uploads with Supabase Storage. It includes examples for uploading files and byte arrays with progress tracking.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/resumable-uploads.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
suspend fun uploadFile(file: File) {
    val upload: ResumableUpload = supabase.storage.from("bucket_name")
        .resumable.createOrContinueUpload("file_path", file)
    upload.stateFlow
        .onEach {
            println(it.progress)
        }
        .launchIn(yourCoroutineScope)
    upload.startOrResumeUploading()
}

// On other platforms you might have to give the bytes directly and specify a source if you want to continue it later:
suspend fun uploadData(bytes: ByteArray) {
    val upload: ResumableUpload = supabase.storage.from("bucket_name")
        .resumable.createOrContinueUpload(bytes, "source", "file_path")

    upload.stateFlow
        .onEach {
            println(it.progress)
        }
        .launchIn(yourCoroutineScope)
    upload.startOrResumeUploading()
}
```

----------------------------------------

TITLE: Querying Supabase Data with Immutable Query Builder (Dart)
DESCRIPTION: Demonstrates the change in the Supabase query builder from version 1 to version 2 regarding immutability. In v1, chained filters on a query object persisted across calls, while in v2, each filter is independent, requiring you to re-apply filters if needed. This example illustrates how to declare and reuse a query in both versions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_10

LANGUAGE: dart
CODE:
```
// If you declare a query and chain filters on it
final myQuery = supabase.from('my_table').select();

final foo = await myQuery.eq('some_col', 'foo');

// The `eq` filter above is applied in addition to the following filter
final bar = await myQuery.eq('another_col', 'bar');
```

LANGUAGE: dart
CODE:
```
// Now you can declare a query and reuse it.
final myQuery = supabase.from('my_table').select();

final foo = await myQuery.eq('some_col', 'foo');

// The `eq` filter above is not applied to the following result
final bar = await myQuery.eq('another_col', 'bar');
```

----------------------------------------

TITLE: Implementing Authentication Guard in Angular
DESCRIPTION: Authentication guard implementation that protects routes by checking user authentication status using RxJS operators. Shows handling of unauthorized access with toast messages and route redirection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_25

LANGUAGE: typescript
CODE:
```
import { AuthService } from './../services/auth.service'
import { Injectable } from '@angular/core'
import { ActivatedRouteSnapshot, CanActivate, Router, UrlTree } from '@angular/router'
import { Observable } from 'rxjs'
import { filter, map, take } from 'rxjs/operators'
import { ToastController } from '@ionic/angular'

@Injectable({
  providedIn: 'root',
})
export class AuthGuard implements CanActivate {
  constructor(
    private auth: AuthService,
    private router: Router,
    private toastController: ToastController
  ) {}

  canActivate(route: ActivatedRouteSnapshot): Observable<boolean | UrlTree> {
    return this.auth.getCurrentUser().pipe(
      filter((val) => val !== null),
      take(1),
      map((isAuthenticated) => {
        if (isAuthenticated) {
          return true
        } else {
          this.toastController
            .create({
              message: 'You are not allowed to access this!',
              duration: 2000,
            })
            .then((toast) => toast.present())

          return this.router.createUrlTree(['/groups'])
        }
      })
    )
  }
}
```

----------------------------------------

TITLE: Creating SignUpViewModel for User Registration
DESCRIPTION: The 'SignUpViewModel' manages the state for the signup process, using Hilt for dependency injection. It handles email and password changes and triggers the signup process through the authentication repository.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_22

LANGUAGE: kotlin
CODE:
```
@HiltViewModel
class SignUpViewModel @Inject constructor(
    private val authenticationRepository: AuthenticationRepository
) : ViewModel() {

    private val _email = MutableStateFlow("")
    val email: Flow<String> = _email

    private val _password = MutableStateFlow("")
    val password = _password

    fun onEmailChange(email: String) {
        _email.value = email
    }

    fun onPasswordChange(password: String) {
        _password.value = password
    }

    fun onSignUp() {
        viewModelScope.launch {
            authenticationRepository.signUp(
                email = _email.value,
                password = _password.value
            )
        }
    }
}
```

----------------------------------------

TITLE: Creating Data Structure for Geographic Data in Kotlin
DESCRIPTION: Kotlin data class definition for restaurant data with geographic points. This serializable class provides type safety when working with geo data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_7

LANGUAGE: kotlin
CODE:
```
@Serializable
data class Restaurant(
    val name: String,
    val location: String //you could also use a custom type with a custom serializer for more type safety
)
```

----------------------------------------

TITLE: Configuring KotlinX Serialization Plugin in Kotlin Build Script
DESCRIPTION: Adds the KotlinX Serialization plugin to a Kotlin project using Gradle with the Kotlin DSL. This is required to use the default serialization method in supabase-kt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
plugins {
    kotlin("plugin.serialization") version "KOTLIN_VERSION"
}
```

----------------------------------------

TITLE: Implementing Slack Bot Mention Handler in TypeScript
DESCRIPTION: TypeScript Edge Function that handles Slack events including URL verification challenges and app mentions. It imports the Slack Web API client, processes incoming requests, and responds to mentions with a greeting message.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/slack-bot-mention.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import { WebClient } from 'https://deno.land/x/slack_web_api@6.7.2/mod.js'

const slackBotToken = Deno.env.get('SLACK_TOKEN') ?? ''
const botClient = new WebClient(slackBotToken)

console.log(`Slack URL verification function up and running!`)
Deno.serve(async (req) => {
  try {
    const reqBody = await req.json()
    console.log(JSON.stringify(reqBody, null, 2))
    const { token, challenge, type, event } = reqBody

    if (type == 'url_verification') {
      return new Response(JSON.stringify({ challenge }), {
        headers: { 'Content-Type': 'application/json' },
        status: 200,
      })
    } else if (event.type == 'app_mention') {
      const { user, text, channel, ts } = event
      // Here you should process the text received and return a response:
      const response = await botClient.chat.postMessage({
        channel: channel,
        text: `Hello <@${user}>!`,
        thread_ts: ts,
      })
      return new Response('ok', { status: 200 })
    }
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500,
    })
  }
})
```

----------------------------------------

TITLE: PostgreSQL HStore Implementation Migration
DESCRIPTION: SQL migration script that adds HStore support for tracking post views, including adding a new column with HStore type and appropriate comments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
BEGIN;

CREATE EXTENSION IF NOT EXISTS hstore;

ALTER TABLE posts ADD COLUMN seen_count_hstore hstore
  NOT NULL DEFAULT ''::hstore;

COMMENT ON COLUMN posts.seen_count_hstore
  IS 'count of users that have seen the post, with hstore';

COMMIT;
```

----------------------------------------

TITLE: Listing Supabase Migration Versions
DESCRIPTION: This command lists the migration versions for both local and remote Supabase databases. It's used to verify that migrations have been successfully applied.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
supabase migration list
```

----------------------------------------

TITLE: Initializing Keycloak OAuth in Kotlin
DESCRIPTION: Sign in with Keycloak provider in Kotlin using Supabase auth method, including openid scope
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithKeycloak() {
	supabase.auth.signInWith(Keycloak) {
		scopes.add("openid")
	}
}
```

----------------------------------------

TITLE: Displaying JWT Structure with MFA Claims in JSX
DESCRIPTION: Example of a JWT payload containing MFA-related claims. The JWT includes 'aal' (Authenticator Assurance Level) and 'amr' (Authenticator Method Reference) claims which indicate the authentication methods used and their timestamps.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-14-mfa-auth-via-rls.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
{
  "sub": "8802c1d6-c555-46e3-aacd-b61198b058d9",
  "email": "j0@supacats.io",
  "aud": "authenticated",
  "exp": 1670929371,
  "aal": "aal2",
  "amr": [
    {
      "method": "password",
      "timestamp": 1670924394
    },
    {
      "method": "totp",
      "timestamp": 1670925771
    }
  ],
  // ...
}
```

----------------------------------------

TITLE: Implementing Column Visibility Controls in TanStack Table
DESCRIPTION: Adds column visibility management to the DataTable component with a dropdown menu for toggling column visibility. Integrates TanStack Table's visibility API with UI controls for column show/hide functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_13

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({})

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
    },
  })

  return (
    <div>
      <div className="flex items-center py-4">
        <Input
          placeholder="Filter emails..."
          value={table.getColumn("email")?.getFilterValue() as string}
          onChange={(event) =>
            table.getColumn("email")?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="ml-auto">
              Columns
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            {table
              .getAllColumns()
              .filter(
                (column) => column.getCanHide()
              )
              .map((column) => {
                return (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    className="capitalize"
                    checked={column.getIsVisible()}
                    onCheckedChange={(value) =>
                      column.toggleVisibility(!!value)
                    }
                  >
                    {column.id}
                  </DropdownMenuCheckboxItem>
                )
              })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <div className="rounded-md border">
        <Table>{ ... }</Table>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing Telegram Bot Logic in TypeScript with Supabase Edge Functions
DESCRIPTION: This TypeScript code implements the core functionality of the Telegram bot using the grammY framework. It handles incoming messages, processes audio and video files, interacts with the ElevenLabs API for transcription, and logs results to Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-transcribe-speech.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { Bot, webhookCallback } from 'https://deno.land/x/grammy@v1.34.0/mod.ts'
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'
import { createClient } from 'jsr:@supabase/supabase-js@2'
import { ElevenLabsClient } from 'npm:elevenlabs@1.50.5'

console.log(`Function "elevenlabs-scribe-bot" up and running!`)

const elevenLabsClient = new ElevenLabsClient({
  apiKey: Deno.env.get('ELEVENLABS_API_KEY') || '',
})

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') || '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || ''
)

async function scribe({
  fileURL,
  fileType,
  duration,
  chatId,
  messageId,
  username,
}: {
  fileURL: string
  fileType: string
  duration: number
  chatId: number
  messageId: number
  username: string
}) {
  let transcript: string | null = null
  let languageCode: string | null = null
  let errorMsg: string | null = null
  try {
    const sourceFileArrayBuffer = await fetch(fileURL).then((res) => res.arrayBuffer())
    const sourceBlob = new Blob([sourceFileArrayBuffer], {
      type: fileType,
    })

    const scribeResult = await elevenLabsClient.speechToText.convert({
      file: sourceBlob,
      model_id: 'scribe_v1',
      tag_audio_events: false,
    })

    transcript = scribeResult.text
    languageCode = scribeResult.language_code

    // Reply to the user with the transcript
    await bot.api.sendMessage(chatId, transcript, {
      reply_parameters: { message_id: messageId },
    })
  } catch (error) {
    errorMsg = error.message
    console.log(errorMsg)
    await bot.api.sendMessage(chatId, 'Sorry, there was an error. Please try again.', {
      reply_parameters: { message_id: messageId },
    })
  }
  // Write log to Supabase.
  const logLine = {
    file_type: fileType,
    duration,
    chat_id: chatId,
    message_id: messageId,
    username,
    language_code: languageCode,
    error: errorMsg,
  }
  console.log({ logLine })
  await supabase.from('transcription_logs').insert({ ...logLine, transcript })
}

const telegramBotToken = Deno.env.get('TELEGRAM_BOT_TOKEN')
const bot = new Bot(telegramBotToken || '')
const startMessage = `Welcome to the ElevenLabs Scribe Bot\! I can transcribe speech in 99 languages with super high accuracy\!
    \nTry it out by sending or forwarding me a voice message, video, or audio file\!
    \n[Learn more about Scribe](https://elevenlabs.io/speech-to-text) or [build your own bot](https://elevenlabs.io/docs/cookbooks/speech-to-text/telegram-bot)\!
  `
bot.command('start', (ctx) => ctx.reply(startMessage.trim(), { parse_mode: 'MarkdownV2' }))

bot.on([':voice', ':audio', ':video'], async (ctx) => {
  try {
    const file = await ctx.getFile()
    const fileURL = `https://api.telegram.org/file/bot${telegramBotToken}/${file.file_path}`
    const fileMeta = ctx.message?.video ?? ctx.message?.voice ?? ctx.message?.audio

    if (!fileMeta) {
      return ctx.reply('No video|audio|voice metadata found. Please try again.')
    }

    // Run the transcription in the background.
    EdgeRuntime.waitUntil(
      scribe({
        fileURL,
        fileType: fileMeta.mime_type!,
        duration: fileMeta.duration,
        chatId: ctx.chat.id,
        messageId: ctx.message?.message_id!,
        username: ctx.from?.username || '',
      })
    )

    // Reply to the user immediately to let them know we received their file.
    return ctx.reply('Received. Scribing...')
  } catch (error) {
    console.error(error)
    return ctx.reply(
      'Sorry, there was an error getting the file. Please try again with a smaller file!'
    )
  }
})

const handleUpdate = webhookCallback(bot, 'std/http')

Deno.serve(async (req) => {
  try {
    const url = new URL(req.url)
    if (url.searchParams.get('secret') !== Deno.env.get('FUNCTION_SECRET')) {
      return new Response('not allowed', { status: 405 })
    }

    return await handleUpdate(req)
  } catch (err) {
    console.error(err)
  }
})
```

----------------------------------------

TITLE: Incorrect Method for Logging Request Headers in Edge Functions
DESCRIPTION: Example demonstrating the incorrect way to log request headers in Edge Functions, which will result in empty objects due to how Headers objects work in JavaScript.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/logging.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
Deno.serve(async (req) => {
  const headers = JSON.stringify(req.headers)
  console.log(`Request headers: ${headers}`)
  // OR
  console.log(`Request headers: ${JSON.stringify(req.headers)}`)
  return new Response('ok', {
    headers: {
      'Content-Type': 'application/json',
    },
    status: 200,
  })
})
```

----------------------------------------

TITLE: Enabling and Disabling plpgsql_check Extension in SQL
DESCRIPTION: SQL commands to enable and disable the plpgsql_check extension in a Postgres database. Creating the extension is equivalent to enabling it, while dropping the extension disables it.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plpgsql_check.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the "plpgsql_check" extension
create extension plpgsql_check;

-- Disable the "plpgsql_check" extension
drop extension if exists plpgsql_check;
```

----------------------------------------

TITLE: Adding Jackson serializer dependency in Kotlin build file
DESCRIPTION: This snippet shows how to add the Jackson serializer dependency to a Kotlin project using Gradle Kotlin DSL. It's required for using Jackson as the serialization method in supabase-kt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_15

LANGUAGE: kotlin
CODE:
```
implementation("io.github.jan-tennert.supabase:serializer-jackson:VERSION")
```

----------------------------------------

TITLE: Creating and Pushing a New Git Branch for Supabase Migration
DESCRIPTION: This snippet demonstrates how to create a new Git branch for a Supabase migration, add the migration file, commit changes, and push to GitHub. It's part of the process for opening a pull request with a new migration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
git checkout -b feat/employee
git add supabase/migrations/<timestamp>_new_employee.sql
git commit -m "Add employee table"
git push --set-upstream origin feat/employee
```

----------------------------------------

TITLE: Link Generation Implementation in Supabase Auth
DESCRIPTION: Example of generating confirmation, invite, recovery, and magic links using the supabase-js service role admin key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-28-supabase-auth-passwordless-sms-login.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// Code reference for illustration - actual example not provided in text
```

----------------------------------------

TITLE: Configuring Self-Send Messages in Python
DESCRIPTION: This Python code demonstrates how to configure a Supabase Realtime channel to receive its own broadcast messages. It sets the 'self' parameter to True, sets up event handling, and sends a broadcast message.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
# Join a room/topic. Can be anything except for 'realtime'.
my_channel = supabase.channel('room-2', {"config": {"broadcast": {"self": True}}})

my_channel.on_broadcast(
  'test-my-messages',
  lambda payload: print(payload)
)

def on_subscribe(status, err):
  if status != RealtimeSubscribeStates.SUBSCRIBED:
    return

  # Send a message once the client is subscribed
  channel_b.send_broadcast(
    'test-my-messages',
    { "message": 'talking to myself' },
  )

my_channel.subscribe(on_subscribe)
```

----------------------------------------

TITLE: Deploying Metabase with Docker
DESCRIPTION: Commands to pull and run Metabase in a Docker container. This sets up a local Metabase server available at http://localhost:3000/setup.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/metabase.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
docker pull metabase/metabase:latest
```

LANGUAGE: sh
CODE:
```
docker run -d -p 3000:3000 --name metabase metabase/metabase
```

----------------------------------------

TITLE: Unlinking Identity with Dart
DESCRIPTION: Example showing how to fetch and unlink a Google OAuth identity using the Supabase Dart client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
final List<UserIdentity> identities = await supabase.auth.getUserIdentities();

final UserIdentity googleIdentity =
    identities.singleWhere((identity) => identity.provider == 'google');

await supabase.auth.unlinkIdentity(googleIdentity);
```

----------------------------------------

TITLE: Configuring Self-Send Messages in Swift
DESCRIPTION: This Swift code demonstrates how to configure a Supabase Realtime channel to receive its own broadcast messages. It sets the 'receiveOwnBroadcasts' parameter and includes subscription and broadcasting logic.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_7

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("room-2") {
  $0.broadcast.receiveOwnBroadcasts = true
}

let broadcastStream = await myChannel.broadcast(event: "test-my-messages")

await myChannel.subscribe()

try await myChannel.broadcast(
    event: "test-my-messages",
    payload: YourMessage(
        message: "talking to myself"
    )
)
```

----------------------------------------

TITLE: Example GraphQL Query for Book Collection
DESCRIPTION: A simple GraphQL query to fetch the ID of books from a book collection. This query demonstrates the structure of a basic GraphQL query with nested fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-24-how-pg-graphql-works.mdx#2025-04-21_snippet_0

LANGUAGE: graphql
CODE:
```
query {
  bookCollection {
    edges {
      node {
        id
      }
    }
  }
}
```

----------------------------------------

TITLE: Setting Up Supabase Mock Testing in Dart
DESCRIPTION: This code snippet illustrates how to set up mock testing for Supabase endpoints using Brick ORM. It demonstrates creating a mock server, handling requests and responses, and writing a test case for retrieving models.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-10-08-offline-first-flutter-apps.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
import 'package:brick_supabase/testing.dart';
import 'package:test/test.dart'

void main() {
  // Pass an instance of your model dictionary to the mock server.
  // This permits quick generation of fields and generated responses
  final mock = SupabaseMockServer(modelDictionary: supabaseModelDictionary);

  group('MyClass', () {
    setUp(mock.setUp);

    tearDown(mock.tearDown);

    test('#myMethod', () async {
      // If your request won't exactly match the columns of MyModel, provide
      // the query list to the `fields:` parameter
      final req = SupabaseRequest<MyModel>();
      final resp = SupabaseResponse([
        // mock.serialize converts models to expected Supabase payloads
        // but you don't need to use it - any jsonEncode-able object
        // can be passed to SupabaseRepsonse
        await mock.serialize(MyModel(name: 'Demo 1', id: '1')),
        await mock.serialize(MyModel(name: 'Demo 2', id: '2')),
      ]);
      // This method stubs the server based on the described requests
      // and their matched responses
      mock.handle({req: resp});
      final provider = SupabaseProvider(mock.client, modelDictionary: supabaseModelDictionary);
      final retrieved = await provider.get<MyModel>();
      expect(retrieved, hasLength(2));
    });
  });
}
```

----------------------------------------

TITLE: Integrating Realtime Cursors in React Application
DESCRIPTION: This snippet demonstrates how to integrate the Realtime Cursors component into a React application. It requires the Supabase Realtime service for low-latency updates. Props include 'roomName' for the room identifier and 'username' for labeling. The expected input is a React component that synchronizes cursor positions across sessions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/realtime-cursor.mdx#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { RealtimeCursors } from '@/components/realtime-cursors'

export default function Page() {
  return (
    <div className="w-full min-h-screen">
      <RealtimeCursors roomName="macrodata_refinement_office" username="Mark Scout" />
    </div>
  )
}
```

----------------------------------------

TITLE: Authenticating WebSocket Connections with JWT via Custom Protocol
DESCRIPTION: An example of authenticating WebSocket connections by extracting and validating a JWT from the Sec-WebSocket-Protocol header. This approach uses a custom protocol prefix 'jwt-' to embed the authentication token directly in the WebSocket protocol header.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/websockets.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createClient } from "jsr:@supabase/supabase-js@2";

const supabase = createClient(
Deno.env.get("SUPABASE_URL"),
Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"),
);
Deno.serve(req => {
const upgrade = req.headers.get("upgrade") || "";

    if (upgrade.toLowerCase() != "WebSocket") {
        return new Response("request isn't trying to upgrade to WebSocket.", { status: 400 });
    }

// Sec-WebScoket-Protocol may return multiple protocol values `jwt-TOKEN, value1, value 2`
const customProtocols = (req.headers.get("Sec-WebSocket-Protocol") ?? '').split(',').map(p => p.trim())
const jwt = customProtocols.find(p => p.startsWith('jwt')).replace('jwt-', '')
if (!jwt) {
console.error("Auth token not provided");
return new Response("Auth token not provided", { status: 403 });
}
const { error, data } = await supabase.auth.getUser(jwt);
if (error) {
console.error(error);
return new Response("Invalid token provided", { status: 403 });
}
if (!data.user) {
console.error("user is not authenticated");
return new Response("User is not authenticated", { status: 403 });
}

    const { socket, response } = Deno.upgradeWebSocket(req);

    socket.onopen = () => console.log("socket opened");
    socket.onmessage = (e) => {
        console.log("socket message:", e.data);
        socket.send(new Date().toString());
    };

    socket.onerror = e => console.log("socket errored:", e.message);
    socket.onclose = () => console.log("socket closed");

    return response;

});
```

----------------------------------------

TITLE: Configuring a Custom Storage Adapter for Supabase Auth - JavaScript
DESCRIPTION: This snippet defines a custom storage adapter for the Supabase Auth client that accommodates scenarios without localStorage availability. It implements methods to get, set, and remove items using an alternate storage solution, falling back on localStorage if supported.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/sessions/pkce-flow.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { type SupportedStorage } from '@supabase/supabase-js';
const supportsLocalStorage = () => true

// ---cut---
const customStorageAdapter: SupportedStorage = {
    getItem: (key) => {
    if (!supportsLocalStorage()) {
        // Configure alternate storage
        return null
    }
    return globalThis.localStorage.getItem(key)
    },
    setItem: (key, value) => {
    if (!supportsLocalStorage()) {
        // Configure alternate storage here
        return
    }
    globalThis.localStorage.setItem(key, value)
    },
    removeItem: (key) => {
    if (!supportsLocalStorage()) {
        // Configure alternate storage here
        return
    }
    globalThis.localStorage.removeItem(key)
    },
}
```

----------------------------------------

TITLE: Handling Spaces in Search Queries
DESCRIPTION: SQL example showing how to handle multi-word search terms using + as space placeholder
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_25

LANGUAGE: sql
CODE:
```
select * from search_books_by_title_prefix('Little+Puppy');
```

----------------------------------------

TITLE: Querying PostgreSQL Max Connections
DESCRIPTION: SQL query to check the configured maximum number of direct connections allowed by the PostgreSQL instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-and-connection-terminology-explained-9pr_ZO.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SHOW max_connections;
```

----------------------------------------

TITLE: Signing In with LinkedIn using Supabase Flutter
DESCRIPTION: This Dart snippet utilizes Supabase's `signInWithOAuth` function in Flutter to authenticate users via LinkedIn OAuth. It supports optional redirect URLs for deeplinking and can launch the auth screen in a new webview on mobile. Ensure Supabase Dart dependencies are included and configure `OAuthProvider.linkedinOidc` appropriately.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_1

LANGUAGE: Dart
CODE:
```
Future<void> signInWithLinkedIn() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.linkedinOidc,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host', // Optionally set the redirect link to bring back the user via deeplink.
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication, // Launch the auth screen in a new webview on mobile.
  );
}
```

----------------------------------------

TITLE: Batch Archiving Messages in PGMQ with SQL
DESCRIPTION: The batch archive function deletes multiple messages from a specified queue and inserts them into the queue's archive. It takes queue name and an array of message IDs as parameters and returns an array of successfully archived message IDs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_14

LANGUAGE: sql
CODE:
```
select * from pgmq.archive('my_queue', array[1, 2]);
 archive
---------
       1
       2
```

LANGUAGE: sql
CODE:
```
select * from pgmq.archive('my_queue', array[4, 999]);
 archive
---------
       4
```

----------------------------------------

TITLE: Environment Variables for Supabase-Vercel Integration
DESCRIPTION: List of essential environment variables that are automatically synchronized between Supabase and connected Vercel projects for database connection and API interactions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/integrations/vercel-marketplace.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
POSTGRES_URL
POSTGRES_PRISMA_URL
POSTGRES_URL_NON_POOLING
POSTGRES_USER
POSTGRES_HOST
POSTGRES_PASSWORD
POSTGRES_DATABASE
SUPABASE_SERVICE_ROLE_KEY
SUPABASE_ANON_KEY
SUPABASE_URL
SUPABASE_JWT_SECRET
NEXT_PUBLIC_SUPABASE_ANON_KEY
NEXT_PUBLIC_SUPABASE_URL
```

----------------------------------------

TITLE: Configuring Ktor Client Engine for Multiplatform
DESCRIPTION: Shows how to configure Ktor client engine dependencies for different platforms in a Kotlin Multiplatform project, including JVM, Android, JavaScript, and iOS targets.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
val commonMain by getting {
    dependencies {
        //supabase modules
    }
}
val jvmMain by getting {
    dependencies {
        implementation("io.ktor:ktor-client-cio:KTOR_VERSION")
    }
}
val androidMain by getting {
    dependsOn(jvmMain)
}
val jsMain by getting {
    dependencies {
        implementation("io.ktor:ktor-client-js:KTOR_VERSION")
    }
}
val iosMain by getting {
    dependencies {
        implementation("io.ktor:ktor-client-darwin:KTOR_VERSION")
    }
}
```

----------------------------------------

TITLE: Enabling PostGIS Extension in Supabase
DESCRIPTION: This SQL command enables the PostGIS extension in the Supabase project, allowing for advanced geospatial functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create extension postgis with schema extensions;
```

----------------------------------------

TITLE: Creating SemVer Components Composite Type in SQL
DESCRIPTION: Defines a composite type 'semver_components' to store individual components of a Semantic Version.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-17-type-constraints-in-65-lines-of-sql.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create type semver_components as (
    major int,
    minor int,
    patch int,
    pre_release text[],
    build_metadata text[]
);
```

----------------------------------------

TITLE: Server Hooks Setup for SvelteKit Auth - v0.7.x
DESCRIPTION: Configuration of server-side hooks for Supabase authentication in SvelteKit v0.7.x. Includes basic and sequence-based setup options.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
// make sure the supabase instance is initialized on the server
import '$lib/db'
import { dev } from '$app/environment'
import { auth } from '@supabase/auth-helpers-sveltekit/server'

export const handle = auth()
```

----------------------------------------

TITLE: Creating a Logical Replication Slot on Supabase Database
DESCRIPTION: Creates a logical replication slot named 'example_slot' using the 'pgoutput' plugin. This slot is used to track changes that will be sent to subscribers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/setup-replication-external.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select pg_create_logical_replication_slot('example_slot', 'pgoutput');
```

----------------------------------------

TITLE: Using the Supabase Client Library with FunctionRegion Enum
DESCRIPTION: This snippet demonstrates using the Supabase JavaScript client library with the FunctionRegion enum to specify a region. It imports the necessary components, creates a client, and invokes a function with the UsEast1 region specified.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/regional-invocation.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createClient, FunctionRegion } from '@supabase/supabase-js'
const supabase = createClient('SUPABASE_URL', 'SUPABASE_ANON_KEY')

const { data: ret, error } = await supabase.functions.invoke('my-function-name', {
  headers: { 'Content-Type': 'application/json' },
  method: 'GET',
  body: {},
  region: FunctionRegion.UsEast1,
})
```

----------------------------------------

TITLE: Initializing Supabase Client in SvelteKit Layout (v0.8.x)
DESCRIPTION: Sets up Supabase client initialization and auth state change listener in SvelteKit layout component for version 0.8.x. Handles authentication state changes and invalidates auth data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_20

LANGUAGE: svelte
CODE:
```
<script lang="ts">
  import { supabaseClient } from '$lib/db'
  import { invalidate } from '$app/navigation'
  import { onMount } from 'svelte'

  onMount(() => {
    const {
      data: { subscription },
    } = supabaseClient.auth.onAuthStateChange(() => {
      invalidate('supabase:auth')
    })

    return () => {
      subscription.unsubscribe()
    }
  })
</script>

<slot />
```

----------------------------------------

TITLE: Creating Migration File with Proper Naming Convention
DESCRIPTION: Example of the proper naming convention for Supabase migration files using the YYYYMMDDHHmmss_short_description.sql format. The timestamp uses UTC time with four-digit year, two-digit month, day, hour (24-hour format), minute, and second.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-create-migration.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
20240906123045_create_profiles.sql
```

----------------------------------------

TITLE: Configuring Auth Hook in config.toml
DESCRIPTION: TOML configuration for setting up an authentication hook locally by specifying the hook name, enabling it, and defining the URI path.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_3

LANGUAGE: toml
CODE:
```
[auth.hook.<hook_name>]
enabled = true
uri = "pg-functions://...."

```

----------------------------------------

TITLE: Querying Function Existence in PostgreSQL
DESCRIPTION: SQL query to check for existing functions across specified schemas.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/resolving-42p01-relation-does-not-exist-error-W4_9-V.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select
  p.proname as function_name,
  n.nspname as schema_name,
  pg_get_functiondef(p.oid) as function_definition
from
  pg_proc as p
  join pg_namespace as n on p.pronamespace = n.oid
where n.nspname in ('public', 'your custom schema')
order by n.nspname, p.proname;
```

----------------------------------------

TITLE: Formatting SQL Joins with Full Table Names
DESCRIPTION: Example of a join query using full table names for reference clarity. Shows proper alignment and formatting of join conditions with explicit table references.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
select
  employees.employee_name,
  departments.department_name
from
  employees
join
  departments on employees.department_id = departments.department_id
where
  employees.start_date > '2022-01-01';
```

----------------------------------------

TITLE: Configuring Supabase Client with Moshi Serializer
DESCRIPTION: Creates a Supabase client using Moshi as the serialization library. This example shows how to set MoshiSerializer as the default serializer for the client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_12

LANGUAGE: kotlin
CODE:
```
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    defaultSerializer = MoshiSerializer()
}
```

----------------------------------------

TITLE: Generating OpenAPI Definition with swagger-jsdoc in TypeScript
DESCRIPTION: This code snippet shows how to use swagger-jsdoc to generate an OpenAPI definition from JSDoc comments. It sets up the configuration options and writes the generated specification to a file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import swaggerJsdoc from 'npm:swagger-jsdoc@6.2.8'

const options = {
  definition: {
    openapi: '3.0.1',
    info: {
      title: 'TODO Plugin',
      description: `A plugin that allows the user to create and manage a TODO list using ChatGPT. If you do not know the user's username, ask them first before making queries to the plugin. Otherwise, use the username "global".`,
      version: '1.0.0',
    },
    servers: [{ url: 'http://localhost:8000' }],
  },
  apis: ['./functions/chatgpt-plugin/index.ts'], // files containing annotations as above
}

const openapiSpecification = swaggerJsdoc(options)
const openapiString = JSON.stringify(openapiSpecification, null, 2)
const encoder = new TextEncoder()
const data = encoder.encode(openapiString)
await Deno.writeFile('./functions/chatgpt-plugin/openapi.json', data)
console.log(openapiString)
```

----------------------------------------

TITLE: Using RealtimeCursors Component in Next.js
DESCRIPTION: This code snippet demonstrates how to import and use the `RealtimeCursors` component in a Next.js page. It sets the `roomName` and `username` props to define the shared room and user identity, respectively. The component renders real-time cursors from other users within the specified room.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-cursor.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
"use client'nimport { RealtimeCursors } from '@/components/realtime-cursors'n
export default function Page() {
  return (
    <div className=\"w-full min-h-screen\">
      <RealtimeCursors roomName=\"macrodata_refinement_office\" username=\"Mark Scout\" />
    </div>
  )
}"
```

----------------------------------------

TITLE: Creating Movies Table Schema in Postgres
DESCRIPTION: SQL schema definition for a movies table that will be used for full text search, including basic fields like title, original_title, and overview.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table movies (
	id bigint primary key generated by default as identity,
	title text not null,
	original_title text not null,
	overview text not null,
	created_at timestamptz not null default now()
);
```

----------------------------------------

TITLE: Using Theme Colors with Tailwind CSS in React/TSX
DESCRIPTION: Demonstrates how to use theme colors with Tailwind CSS by applying them through the className prop using arbitrary values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
<LabelList className="fill-[--color-desktop]" />
```

----------------------------------------

TITLE: Inspecting Failed Webhook Responses
DESCRIPTION: This SQL query retrieves all failed responses (status code >= 400 or with error messages) from the past 6 hours, ordered by creation time.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/webhook-debugging-guide-M8sk47.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select
  *
from net._http_response
where "status_code" >= 400 or "error_msg" is not null
order by created desc;
```

----------------------------------------

TITLE: Inserting Array Data with Swift Supabase Client
DESCRIPTION: This Swift snippet defines a struct and uses the Supabase client to insert a record into the 'arraytest' table with an id of 2 and a text array containing four elements.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/arrays.mdx#2025-04-21_snippet_3

LANGUAGE: swift
CODE:
```
struct ArrayTest: Encodable {
  let id: Int
  let textarray: [String]
}

try await supabase
  .from("arraytest")
  .insert(
    [
      ArrayTest(
        id: 2,
        textarray: ["one", "two", "three", "four"]
      )
    ]
  )
  .execute()
```

----------------------------------------

TITLE: Creating a Set-Returning Function with plv8
DESCRIPTION: Example of a set-returning function that queries and returns multiple rows from a table. The function executes a SQL query and returns the complete result set.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create or replace function get_messages()
returns setof messages as $$

    var json_result = plv8.execute(
        'select * from messages'
    );

    return json_result;
$$ language plv8;

select * from get_messages();
```

----------------------------------------

TITLE: Using Aggregate Functions in PostgREST 12
DESCRIPTION: Demonstrates the usage of the new aggregate functions feature in PostgREST 12. The examples show how to use the count() function and how to combine it with grouping.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-13-postgrest-12.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ curl 'http://postgrest/blog_post?select=id.count()'

[
  {
    "count": 51,
  }
]

$ curl 'http://postgrest/blog_post?select=title,id.count()'

[
  {
    "title": "Supabase Blog",
    "count": 40
  },
  {
    "title": "Contributors Blog",
    "count": 11
  },
  ...
```

----------------------------------------

TITLE: Initializing CanvasPage State and Supabase Realtime in Dart
DESCRIPTION: Sets up the initial state, generates a user ID, configures Supabase Realtime listener, and loads initial canvas data from the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_15

LANGUAGE: dart
CODE:
```
class _CanvasPageState extends State<CanvasPage> {
  // ...

  @override
  void initState() {
    super.initState();
    _initialize();
  }

  Future<void> _initialize() async {
    _myId = const Uuid().v4();

    _canvasChanel = supabase
        .channel(Constants.channelName)
        .onBroadcast(
            event: Constants.broadcastEventName,
            callback: (payload) {
              final cursor = UserCursor.fromJson(payload['cursor']);
              _userCursors[cursor.id] = cursor;

              if (payload['object'] != null) {
                final object = CanvasObject.fromJson(payload['object']);
                _canvasObjects[object.id] = object;
              }
              setState(() {});
            })
        .subscribe();

    final initialData = await supabase
        .from('canvas_objects')
        .select()
        .order('created_at', ascending: true);
    for (final canvasObjectData in initialData) {
      final canvasObject = CanvasObject.fromJson(canvasObjectData['object']);
      _canvasObjects[canvasObject.id] = canvasObject;
    }
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold();
  }
}
```

----------------------------------------

TITLE: Creating a Parent Partitioned Table in PostgreSQL
DESCRIPTION: This SQL command creates an empty parent partitioned table based on the structure of an existing source table. The LIKE clause copies column definitions and constraints, while PARTITION BY specifies the partitioning strategy.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/partitioning-an-existing-table-with-same-name-VEnbzK.mdx#2025-04-21_snippet_0

LANGUAGE: SQL
CODE:
```
CREATE TABLE parent_table LIKE source_table [ like_option ... ] PARTITION BY ...
```

----------------------------------------

TITLE: Using EXPLAIN with supabase-js in JavaScript
DESCRIPTION: Shows how to use the explain() transform in supabase-js to get the execution plan for a database query. This method works for all supabase-js operations, including select() and rpc().
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase
  .from('projects')
  .select('*')
  .eq('id', 1)
  .explain()

console.log(data)
```

----------------------------------------

TITLE: Computing Routes with Google Maps API using Deno Edge Function
DESCRIPTION: A Deno edge function that computes routes between two coordinates using Google Maps Directions API. Takes origin and destination coordinates as input and returns route details including duration, distance, and polyline data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_10

LANGUAGE: tsx
CODE:
```
type Coordinates = {
  latitude: number
  longitude: number
}

Deno.serve(async (req) => {
  const {
    origin,
    destination,
  }: {
    origin: Coordinates
    destination: Coordinates
  } = await req.json()

  const response = await fetch(
    `https://routes.googleapis.com/directions/v2:computeRoutes?key=${Deno.env.get(
      'GOOGLE_MAPS_API_KEY'
    )}`,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Goog-FieldMask':
          'routes.duration,routes.distanceMeters,routes.polyline,routes.legs.polyline',
      },
      body: JSON.stringify({
        origin: { location: { latLng: origin } },
        destination: { location: { latLng: destination } },
        travelMode: 'DRIVE',
        polylineEncoding: 'GEO_JSON_LINESTRING',
      }),
    }
  )

  if (!response.ok) {
    const error = await response.json()
    console.error({ error })
    throw new Error(`HTTP error! status: ${response.status}`)
  }

  const data = await response.json()

  const res = data.routes[0]

  return new Response(JSON.stringify(res), { headers: { 'Content-Type': 'application/json' } })
})
```

----------------------------------------

TITLE: PostgreSQL Job Scheduling with pg_cron
DESCRIPTION: Configures periodic job execution using pg_cron to run job processing function every minute
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
select
  cron.schedule(
    '* * * * *', -- this cron expression means every minute.
    'select dequeue_and_run_jobs();'
  );
```

----------------------------------------

TITLE: Updating Redirect URLs in Login Component
DESCRIPTION: This snippet provides instructions for updating the redirect paths in the `login-form.tsx` component for the application to correctly handle authentication redirects after the login process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/social-auth.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// Update redirect paths in login-form.tsx
const redirectPath = '/protected'; // Set this to your app’s protected routes.
```

----------------------------------------

TITLE: Deploying Supabase Function for Puppeteer Screenshot Generation
DESCRIPTION: This command deploys the Puppeteer screenshot function to Supabase, disabling JWT verification. It's used to make the function available in the production environment.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/puppeteer/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions deploy puppeteer --no-verify-jwt
```

----------------------------------------

TITLE: Defining Payment Data Structure for Table Example
DESCRIPTION: TypeScript type definition and sample data for a payment record to be used in the data table example.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
type Payment = {
  id: string
  amount: number
  status: 'pending' | 'processing' | 'success' | 'failed'
  email: string
}

export const payments: Payment[] = [
  {
    id: '728ed52f',
    amount: 100,
    status: 'pending',
    email: 'm@example.com',
  },
  {
    id: '489e1d42',
    amount: 125,
    status: 'processing',
    email: 'example@gmail.com',
  },
  // ...
]
```

----------------------------------------

TITLE: Getting User Metadata - Kotlin
DESCRIPTION: Fetches the current user's metadata using Kotlin.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_9

LANGUAGE: kotlin
CODE:
```
val user = supabase.auth.retrieveUserForCurrentSession()
//Or you can use the user from the current session:
val user = supabase.auth.currentUserOrNull()
val metadata = user?.userMetadata
```

----------------------------------------

TITLE: Creating Foreign Server Connection in Postgres
DESCRIPTION: SQL command to create a foreign server connection to a remote Postgres database, specifying the host, port, and database name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create server "<foreign_server_name>"
foreign data wrapper postgres_fdw
options (
    host '<host>',
    port '<port>',
    dbname '<dbname>'
);
```

----------------------------------------

TITLE: Generating an Authentication Component in RedwoodJS
DESCRIPTION: Command to generate a new authentication component in a RedwoodJS application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
yarn rw g component auth
```

----------------------------------------

TITLE: Creating Table with SemVer Column in SQL
DESCRIPTION: Demonstrates how to use the 'semver' domain in a table definition for a package version tracking system.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-17-type-constraints-in-65-lines-of-sql.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create table package_version(
    id bigserial primary key,
    package_name text not null,
    package_semver semver not null -- semver column
);
```

----------------------------------------

TITLE: Creating Hash Partitioned Products Table in PostgreSQL
DESCRIPTION: This snippet shows how to create a hash partitioned table for product data. It creates a parent table and two partitions using a hash function on the id column for even distribution of data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/partitions.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create table products (
    id bigint generated by default as identity,
    name text,
    category text,
    price bigint
)
partition by hash (id);

create table products_one
	partition of products
  for values with (modulus 2, remainder 1);

create table products_two
	partition of products
  for values with (modulus 2, remainder 0);
```

----------------------------------------

TITLE: Securing explain() in Production with Pre-request Function
DESCRIPTION: SQL function to protect the explain() feature in production by restricting access based on IP address using a pre-request function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/debugging-performance.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create or replace function filter_plan_requests()
returns void as $$
declare
  headers   json := current_setting('request.headers', true)::json;
  client_ip text := coalesce(headers->>'cf-connecting-ip', '');
  accept    text := coalesce(headers->>'accept', '');
  your_ip   text := '123.123.123.123'; -- replace this with your IP
begin
  if accept like 'application/vnd.pgrst.plan%' and client_ip != your_ip then
    raise insufficient_privilege using
      message = 'Not allowed to use application/vnd.pgrst.plan';
  end if;
end; $$ language plpgsql;
alter role authenticator set pgrst.db_pre_request to 'filter_plan_requests';
notify pgrst, 'reload config';
```

----------------------------------------

TITLE: Realtime Subscription - Dart Supabase
DESCRIPTION: Updated method for creating realtime subscriptions with more explicit channel and event handling
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_16

LANGUAGE: dart
CODE:
```
final subscription = supabase
  .from('countries')
  .on(SupabaseEventTypes.all, (payload) {
    // Handle realtime payload
  })
  .subscribe();
```

LANGUAGE: dart
CODE:
```
final channel = supabase.channel('*');
channel.on(
  RealtimeListenTypes.postgresChanges,
  ChannelFilter(event: '*', schema: '*'),
  (payload, [ref]) {
    // Handle realtime payload
  },
).subscribe();
```

----------------------------------------

TITLE: Creating SemVer Domain with Validation Rules in SQL
DESCRIPTION: Defines a domain 'semver' based on 'semver_components' with check constraints to enforce SemVer rules.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-17-type-constraints-in-65-lines-of-sql.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create domain semver
    as semver_components
    check (
        -- major: non-null positive integer
        (value).major is not null and (value).major >= 0
        -- minor: non-null positive integer
        and (value).minor is not null and (value).minor >= 0
        -- patch: non-null positive integer
        and (value).patch is not null and (value).patch >= 0
        and semver_elements_match_regex(
            (value).pre_release,
            '^[A-z0-9]{1,255}$'
        )
        and semver_elements_match_regex(
            (value).build_metadata,
            '^[A-z0-9\.]{1,255}$'
        )
    );
```

----------------------------------------

TITLE: Animating Tickets with Framer Motion
DESCRIPTION: Implements animations for the loaded tickets using Framer Motion, creating a staggered appearance effect as new tickets are loaded.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import { motion } from 'framer-motion'

// ...

{
  loadedTickets.map((ticket, index) => {
    // each ticket will be delayed based on it's index
    // but we need to subtract the delay from all the previously loaded tickets
    const recalculatedDelay = i >= PAGE_COUNT * 2 ? (i - PAGE_COUNT * (offset - 1)) / 15 : i / 15

    return (
      <motion.div
        key={ticket.id}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{
          duration: 0.4,
          ease: [0.25, 0.25, 0, 1],
          delay: recalculatedDelay,
        }}
      >
        {/* Actual ticket component */}
      </motion.div>
    )
  })
}
```

----------------------------------------

TITLE: Flutter Chat Page UI Implementation
DESCRIPTION: Implements the chat page UI with message bubbles, input field, and state management integration using BlocConsumer for real-time updates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_11

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:my_chat_app/components/user_avatar.dart';
import 'package:my_chat_app/cubits/chat/chat_cubit.dart';

import 'package:my_chat_app/models/message.dart';
import 'package:my_chat_app/utils/constants.dart';
import 'package:timeago/timeago.dart';

class ChatPage extends StatelessWidget {
  const ChatPage({Key? key}) : super(key: key);

  static Route<void> route(String roomId) {
    return MaterialPageRoute(
      builder: (context) => BlocProvider<ChatCubit>(
        create: (context) => ChatCubit()..setMessagesListener(roomId),
        child: const ChatPage(),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Chat')),
      body: BlocConsumer<ChatCubit, ChatState>(
        listener: (context, state) {
          if (state is ChatError) {
            context.showErrorSnackBar(message: state.message);
          }
        },
        builder: (context, state) {
          if (state is ChatInitial) {
            return preloader;
          } else if (state is ChatLoaded) {
            final messages = state.messages;
            return Column(
              children: [
                Expanded(
                  child: ListView.builder(
                    padding: const EdgeInsets.symmetric(vertical: 8),
                    reverse: true,
                    itemCount: messages.length,
                    itemBuilder: (context, index) {
                      final message = messages[index];
                      return _ChatBubble(message: message);
                    },
                  ),
                ),
                const _MessageBar(),
              ],
            );
          } else if (state is ChatEmpty) {
            return Column(
              children: const [
                Expanded(
                  child: Center(
                    child: Text('Start your conversation now :)'),
                  ),
                ),
                _MessageBar(),
              ],
            );
          } else if (state is ChatError) {
            return Center(child: Text(state.message));
          }
          throw UnimplementedError();
        },
      ),
    );
  }
}
```

----------------------------------------

TITLE: Creating an onCreate Cloud Function in Node.js for Supabase role assignment
DESCRIPTION: This JavaScript code creates an onCreate Firebase Cloud Function that sets a custom role claim for new users. Unlike blocking functions, this approach is asynchronous, and the role won't be available in the first ID token after signup.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
const functions = require('firebase-functions')
const { initializeApp } = require('firebase-admin/app')
const { getAuth } = require('firebase-admin/auth')
const { getDatabase } = require('firebase-admin/database')

initializeApp()

// On sign up.
exports.processSignUp = functions.auth.user().onCreate(async (user) => {
  try {
    // Set custom user claims on this newly created user.
    await getAuth().setCustomUserClaims(user.uid, {
      role: 'authenticated',
    })
  } catch (error) {
    console.log(error)
  }
})
```

----------------------------------------

TITLE: Direct Database Connection String Format
DESCRIPTION: Example of a direct connection string for Supabase database. Uses IPv6 by default unless IPv4 Add-On is enabled.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ipv4-address.mdx#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
postgresql://postgres:[YOUR-PASSWORD]@db.ajrbwkcuthywfihaarmflo.supabase.co:5432/postgres
```

----------------------------------------

TITLE: Creating a Descending Order Index in SQL
DESCRIPTION: This snippet shows how to create an index with a specific sort order (descending) and NULL placement, which can improve performance for certain ORDER BY queries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
CREATE INDEX test3_desc_index ON test3 (id DESC NULLS LAST);
```

----------------------------------------

TITLE: ANY Filter Modifier Example
DESCRIPTION: JavaScript example demonstrating the use of ANY filter modifier with LIKE operator.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_8

LANGUAGE: jsx
CODE:
```
const res = await postgrest
  .from('users')
  .select()
  .likeAnyOf('username', ['%supa%', '%kiwi%'])
```

----------------------------------------

TITLE: Configuring KotlinX Serialization in Kotlin build file
DESCRIPTION: This snippet shows how to add the KotlinX Serialization plugin to a Kotlin project using Gradle Kotlin DSL. It's required for using the default serialization method in supabase-kt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_7

LANGUAGE: kotlin
CODE:
```
plugins {
    kotlin("plugin.serialization") version "KOTLIN_VERSION"
}
```

----------------------------------------

TITLE: Updating insert and return data in TypeScript
DESCRIPTION: Example of how to update the insert method to return data in supabase-js v2. The new version requires an explicit select() call to return the inserted data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
const { data, error } = await supabase
  .from('my_table')
  .insert({ new_data })
  .select()
```

----------------------------------------

TITLE: Using Adaptive Retrieval Function with Supabase Client
DESCRIPTION: This TypeScript snippet shows how to use the match_documents_adaptive function from a Supabase client application to perform a similarity search.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_10

LANGUAGE: tsx
CODE:
```
// ... first initialize your supabase client
// and generate your query embedding

const { error: matchError, data: pageSections } = await supabase.rpc('match_documents_adaptive', {
  query_embedding: embedding,
  match_count: 10,
})
```

----------------------------------------

TITLE: Granting Execute Permission to Auth Admin Role
DESCRIPTION: SQL command to grant execution permission on a custom hook function to the supabase_auth_admin role, allowing the Auth service to access the hook.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
grant execute
  on function public.custom_access_token_hook
  to supabase_auth_admin;
```

----------------------------------------

TITLE: Creating Supabase Vector Index
DESCRIPTION: Initializes a Supabase vector store and creates an index from the loaded documents using PostgreSQL connection.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/llamaindex/llamaindex.ipynb#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
# Substitute your connection string here
DB_CONNECTION = "postgresql://postgres:password@localhost:5431/db"

vector_store = SupabaseVectorStore(
    postgres_connection_string=DB_CONNECTION, 
    collection_name='base_demo'
)
storage_context = StorageContext.from_defaults(vector_store=vector_store)
index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)
```

----------------------------------------

TITLE: Creating a custom Next.js Image loader for Supabase Storage in TypeScript
DESCRIPTION: This snippet defines a custom image loader for Next.js that works with Supabase Storage, allowing for easy image serving and transformations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-18-calcom-platform-starter-kit-nextjs-supabase.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { env } from '@/env'

export default function supabaseLoader({ src, width, quality }) {
  return `${env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/${src}?width=${width}&quality=${quality || 75}`
}
```

----------------------------------------

TITLE: Verifying OTP using Kotlin
DESCRIPTION: Describes authenticating a user session via OTP verification in Kotlin. Requires essential OTP info like email and token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_13

LANGUAGE: Kotlin
CODE:
```
supabase.auth.verifyEmailOtp(type = OtpType.Email.EMAIL, email = "email", token = "151345")
```

----------------------------------------

TITLE: Enabling pg_repack extension in Postgres SQL
DESCRIPTION: This SQL command enables the pg_repack extension in the Postgres database. It creates the extension in the 'extensions' schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_repack.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create extension pg_repack with schema extensions;
```

----------------------------------------

TITLE: Implementing Realtime Avatar Stack in React
DESCRIPTION: This code snippet demonstrates how to use the RealtimeAvatarStack component in a React application. It shows the component being used within a Header to display online users in a specific room.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/realtime-avatar-stack.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { RealtimeAvatarStack } from '@/components/realtime-avatar-stack'

export default function Page() {
  return (
    <Header className="flex items-center justify-between">
      <h1>Lumon Industries</h1>
      <RealtimeAvatarStack roomName="break_room" />
    </Header>
  )
}
```

----------------------------------------

TITLE: Querying FDW with Supabase Client
DESCRIPTION: JavaScript code showing how to query the secure FDW function using Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .rpc('get_stripe_products', { name_prefix: 'Test' })
  .select('*')
if (error) console.error(error)
else console.log(data)
```

----------------------------------------

TITLE: QETL Join Query with Foreign Data Wrapper
DESCRIPTION: SQL query showing how to join data between local users table and warehouse orders table using FDW.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
  auth.users.id as user_id,
  warehouse.orders.id as order_id
from
  warehouse.orders
join 
  auth.users on auth.users.id = warehouse.orders.user_id
where 
  auth.users.id = '<some_user_id>';
```

----------------------------------------

TITLE: Adding Supabase Dependencies with Kotlin Gradle DSL
DESCRIPTION: Adds Supabase module dependencies to a Kotlin project using Gradle Kotlin DSL. This includes the BOM (Bill of Materials) for version management and specific modules like postgrest-kt, gotrue-kt, and realtime-kt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_0

LANGUAGE: kotlin
CODE:
```
implementation(platform("io.github.jan-tennert.supabase:bom:VERSION"))
implementation("io.github.jan-tennert.supabase:postgrest-kt")
implementation("io.github.jan-tennert.supabase:gotrue-kt")
implementation("io.github.jan-tennert.supabase:realtime-kt")
```

----------------------------------------

TITLE: Revoking and Granting Column-Level Privileges in PostgreSQL
DESCRIPTION: SQL commands to revoke table-level UPDATE privilege and grant column-level UPDATE privilege on specific columns for the 'authenticated' role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/column-level-security.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
revoke
update
  on table public.posts
from
  authenticated;

grant
update
  (title, content) on table public.posts to authenticated;
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library as a dependency.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Defining TypedSupabaseClient Type for React Query
DESCRIPTION: TypeScript code to create a typed Supabase client type for use with React Query, ensuring proper typing across components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { SupabaseClient } from '@supabase/supabase-js'
import type { Database } from '@/utils/database.types'

export type TypedSupabaseClient = SupabaseClient<Database>
```

----------------------------------------

TITLE: Querying HTTP Responses for Failed Embedding Jobs
DESCRIPTION: This SQL snippet queries the `net._http_response` table to diagnose issues in the embedding generation process by checking for failed jobs and related HTTP responses. It is used to troubleshoot and identify errors in embedding jobs processing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_17

LANGUAGE: sql
CODE:
```
select
  *
from
  net._http_response
where
  (headers->>'x-failed-jobs')::int > 0;
```

----------------------------------------

TITLE: Defining Session Interface in TypeScript
DESCRIPTION: New TypeScript interface for the Session object in Supabase.js v2, which now guarantees the presence of access_token, refresh_token, and user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_7

LANGUAGE: ts
CODE:
```
interface Session {
  provider_token?: string | null
  access_token: string
  expires_in?: number
  expires_at?: number
  refresh_token: string
  token_type: string
  user: User
}
```

----------------------------------------

TITLE: Querying Multi-Range Data in PostgreSQL 14
DESCRIPTION: Shows how to query data from a table with a multi-range column. This demonstrates the retrieval of non-contiguous time ranges stored in a single column.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_4

LANGUAGE: sql
CODE:
```
select *
from sensor_range;
```

----------------------------------------

TITLE: Creating a Publication for Insert Events Only in SQL
DESCRIPTION: Creates a publication that only tracks insert operations on all tables, ignoring updates and deletes. This allows for more targeted replication of specific database events.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create publication publication_name
for all tables
with (publish = 'insert');
```

----------------------------------------

TITLE: Retrieving Local Supabase Database Connection String
DESCRIPTION: Shell commands to get the connection string for a local Supabase instance. This is used when configuring the Postgres MCP server for local development.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/mcp.mdx#2025-04-22_snippet_2

LANGUAGE: shell
CODE:
```
supabase status
```

LANGUAGE: shell
CODE:
```
npx supabase status
```

----------------------------------------

TITLE: MFA Verification Input JSON Schema
DESCRIPTION: JSON Schema definition for the MFA verification hook input payload structure.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/mfa-verification-hook.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "type": "object",
  "properties": {
    "user_id": {
      "type": "string",
      "x-faker": "random.uuid"
    },
    "valid": {
      "type": "boolean",
      "x-faker": "random.boolean"
    }
  },
  "required": ["user_id", "valid"]
}
```

----------------------------------------

TITLE: Calling List Objects Function via SDK
DESCRIPTION: Illustrates how to call the `list_objects` Postgres function using the Supabase JavaScript SDK. This example requires access to Supabase SDK and a correctly initialized Supabase client instance. Inputs are provided as parameters to the RPC call.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/production/scaling.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.rpc('list_objects', {\n  bucketid: 'yourbucket',\n  prefix: '',\n  limit: 100,\n  offset: 0,\n})
```

----------------------------------------

TITLE: Decoded Supabase Anon Key JWT
DESCRIPTION: This JavaScript code snippet shows the decoded payload of a Supabase `anon key` JWT. It contains claims about the role (`anon`), the issuer (`supabase`), the issued at time (`iat`), and the expiration time (`exp`). This token is used to access the Supabase API gateway.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
{
  "role": "anon",
  "iss": "supabase",
  "iat": 1614205174,
  "exp": 1929781174
}
```

----------------------------------------

TITLE: SQL Query for Calorie Analysis
DESCRIPTION: SQL query to calculate total daily calories over a month period for a specific user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
  date,
  sum(calories) as total_calories
from food_log
group by date
where user_id = 'xyz' and day between '2022-01-01' and '2022-01-31'
order by date;
```

----------------------------------------

TITLE: Using Supabase CLI for SSO Management
DESCRIPTION: Command-line interface usage for managing Single Sign-On (SSO) authentication providers in Supabase projects. Shows available commands for adding, listing, removing, and updating SSO providers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ supabase sso --help
Manage Single Sign-On (SSO) authentication for projects

Usage:
  supabase sso [command]

Available Commands:
  add         Add a new SSO identity provider
  info        Returns the SAML SSO settings required for the identity provider
  list        List all SSO identity providers for a project
  remove      Remove an existing SSO identity provider
  show        Show information about an SSO identity provider
  update      Update information about an SSO identity provider
```

----------------------------------------

TITLE: Supabase Realtime JSON Input Structure
DESCRIPTION: Example JSON input data structure from Supabase Realtime showing the format of database change events.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-04-02-supabase-workflows.mdx#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "changes": [
    {
      "columns": [
        {
          "flags": ["key"],
          "name": "id",
          "type": "int8",
          "type_modifier": 4294967295
        },
        {
          "flags": [],
          "name": "name",
          "type": "text",
          "type_modifier": 4294967295
        },
        {
          "flags": [],
          "name": "email",
          "type": "text",
          "type_modifier": 4294967295
        }
      ],
      "commit_timestamp": "2021-03-17T14:00:26Z",
      "record": {
        "id": "101492",
        "name": "Alfred",
        "email": "alfred@example.org"
      },
      "schema": "public",
      "table": "users",
      "type": "INSERT"
    }
  ],
  "commit_timestamp": "2021-03-17T14:00:26Z"
}
```

----------------------------------------

TITLE: Importing and Using Current User Avatar in React
DESCRIPTION: This snippet demonstrates how to import and use the `CurrentUserAvatar` component within a React functional component. It sets up a simple demonstration layout that includes the user's avatar in a header.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/current-user-avatar.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { CurrentUserAvatar } from '@/components/current-user-avatar'

const CurrentUserAvatarDemo = () => {
  return (
    <Header className="flex items-center justify-between">
      <h1>Lumon Industries</h1>
      <CurrentUserAvatar />
    </Header>
  )
}

export default CurrentUserAvatarDemo
```

----------------------------------------

TITLE: Creating Dynamic Chat Partition Procedure in PostgreSQL
DESCRIPTION: Stored procedure that creates a partition table for chats on a given date. Uses dynamic SQL execution with formatting to create child tables that inherit constraints and defaults from the parent table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE PROCEDURE app.create_chats_partition(partition_day date)
    LANGUAGE plpgsql AS
$$
BEGIN
    EXECUTE format(
    $i$
        CREATE TABLE IF NOT EXISTS app."chats_%1$s"
        (LIKE app.chats INCLUDING DEFAULTS INCLUDING CONSTRAINTS);
    $i$, partition_day);
END;
$$;
```

----------------------------------------

TITLE: Running pgloader for Data Import in Supabase
DESCRIPTION: Command to execute pgloader with a configuration file for importing data into Supabase. This initiates the data transfer process based on the specified configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/import-data.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
pgloader config.load
```

----------------------------------------

TITLE: Adding Jackson Serializer Dependency in Kotlin Build Script
DESCRIPTION: Adds the Jackson serializer dependency for supabase-kt to a Kotlin project using Gradle with the Kotlin DSL. This is required to use Jackson as the serialization library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_13

LANGUAGE: kotlin
CODE:
```
implementation("io.github.jan-tennert.supabase:serializer-jackson:VERSION")
```

----------------------------------------

TITLE: Deploying Supabase Functions
DESCRIPTION: This snippet provides a command to deploy Supabase Functions, bypassing JWT verification. It requires the Supabase CLI to be installed and configured properly. The command ensures the function is available remotely on the Supabase platform for production or wider testing.
SOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/lw12-ticket-og/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions deploy lw12-ticket-og --no-verify-jwt
```

----------------------------------------

TITLE: Querying PostgreSQL Database List
DESCRIPTION: SQL query to list all databases in a PostgreSQL cluster, including template databases.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-09-postgresql-templates.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select * from pg_database;
```

----------------------------------------

TITLE: Creating Email Sending JSON Payload - JSON
DESCRIPTION: Constructs a JSON payload containing user information and email metadata for email sending. It includes user identifiers, app and user metadata, as well as data related to the email action being performed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-email-hook.mdx#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "user": {
    "id": "8484b834-f29e-4af2-bf42-80644d154f76",
    "aud": "authenticated",
    "role": "authenticated",
    "email": "valid.email@supabase.io",
    "phone": "",
    "app_metadata": {
      "provider": "email",
      "providers": ["email"]
    },
    "user_metadata": {
      "email": "valid.email@supabase.io",
      "email_verified": false,
      "phone_verified": false,
      "sub": "8484b834-f29e-4af2-bf42-80644d154f76"
    },
    "identities": [
      {
        "identity_id": "bc26d70b-517d-4826-bce4-413a5ff257e7",
        "id": "8484b834-f29e-4af2-bf42-80644d154f76",
        "user_id": "8484b834-f29e-4af2-bf42-80644d154f76",
        "identity_data": {
          "email": "valid.email@supabase.io",
          "email_verified": false,
          "phone_verified": false,
          "sub": "8484b834-f29e-4af2-bf42-80644d154f76"
        },
        "provider": "email",
        "last_sign_in_at": "2024-05-14T12:56:33.824231484Z",
        "created_at": "2024-05-14T12:56:33.824261Z",
        "updated_at": "2024-05-14T12:56:33.824261Z",
        "email": "valid.email@supabase.io"
      }
    ],
    "created_at": "2024-05-14T12:56:33.821567Z",
    "updated_at": "2024-05-14T12:56:33.825595Z",
    "is_anonymous": false
  },
  "email_data": {
    "token": "305805",
    "token_hash": "7d5b7b1964cf5d388340a7f04f1dbb5eeb6c7b52ef8270e1737a58d0",
    "redirect_to": "http://localhost:3000/",
    "email_action_type": "signup",
    "site_url": "http://localhost:9999",
    "token_new": "",
    "token_hash_new": ""
  }
}
```

----------------------------------------

TITLE: Executing SQL within plv8 Functions
DESCRIPTION: Example of executing SQL commands from within a plv8 function using plv8.execute. This function updates a user's first name and returns the number of affected rows.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create or replace function update_user(id bigint, first_name text)
returns smallint as $$

    var num_affected = plv8.execute(
        'update profiles set first_name = $1 where id = $2',
        [first_name, id]
    );

    return num_affected;
$$ language plv8;
```

----------------------------------------

TITLE: Deploying Cloudflare Turnstile Edge Function in Supabase
DESCRIPTION: Commands to deploy the Cloudflare Turnstile server-side validation as a Supabase Edge Function and set the required secret key for API validation.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/cloudflare-turnstile/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions deploy cloudflare-turnstile
supabase secrets set CLOUDFLARE_TURNSTILE_SECRET_KEY=your_secret_key
```

----------------------------------------

TITLE: Implementing Account Management Component in Angular
DESCRIPTION: Creating an AccountComponent to handle user profile management, including updating profile details and signing out.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { Component, Input, OnInit } from '@angular/core'
import { FormBuilder } from '@angular/forms'
import { AuthSession } from '@supabase/supabase-js'
import { Profile, SupabaseService } from '../supabase.service'

@Component({
  selector: 'app-account',
  templateUrl: './account.component.html',
  styleUrls: ['./account.component.css'],
})
export class AccountComponent implements OnInit {
  loading = false
  profile!: Profile

  @Input()
  session!: AuthSession

  updateProfileForm = this.formBuilder.group({
    username: '',
    website: '',
    avatar_url: '',
  })

  constructor(
    private readonly supabase: SupabaseService,
    private formBuilder: FormBuilder
  ) {}

  async ngOnInit(): Promise<void> {
    await this.getProfile()

    const { username, website, avatar_url } = this.profile
    this.updateProfileForm.patchValue({
      username,
      website,
      avatar_url,
    })
  }

  async getProfile() {
    try {
      this.loading = true
      const { user } = this.session
      const { data: profile, error, status } = await this.supabase.profile(user)

      if (error && status !== 406) {
        throw error
      }

      if (profile) {
        this.profile = profile
      }
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      this.loading = false
    }
  }

  async updateProfile(): Promise<void> {
    try {
      this.loading = true
      const { user } = this.session

      const username = this.updateProfileForm.value.username as string
      const website = this.updateProfileForm.value.website as string
      const avatar_url = this.updateProfileForm.value.avatar_url as string

      const { error } = await this.supabase.updateProfile({
        id: user.id,
        username,
        website,
        avatar_url,
      })
      if (error) throw error
    } catch (error) {
      if (error instanceof Error) {
        alert(error.message)
      }
    } finally {
      this.loading = false
    }
  }

  async signOut() {
    await this.supabase.signOut()
  }
}
```

LANGUAGE: html
CODE:
```
<form [formGroup]="updateProfileForm" (ngSubmit)="updateProfile()" class="form-widget">
  <div>
    <label for="email">Email</label>
    <input id="email" type="text" [value]="session.user.email" disabled />
  </div>
  <div>
    <label for="username">Name</label>
    <input formControlName="username" id="username" type="text" />
  </div>
  <div>
    <label for="website">Website</label>
    <input formControlName="website" id="website" type="url" />
  </div>

  <div>
    <button type="submit" class="button primary block" [disabled]="loading">
      {{ loading ? 'Loading ...' : 'Update' }}
    </button>
  </div>

  <div>
    <button class="button block" (click)="signOut()">Sign Out</button>
  </div>
</form>
```

----------------------------------------

TITLE: Kotlin Multiplatform Supabase Client Initialization
DESCRIPTION: Configuration for initializing Supabase client with Google sign-in support in Kotlin Multiplatform applications.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_15

LANGUAGE: kotlin
CODE:
```
val supabaseClient = createSupabaseClient(
    supabaseUrl = "SUPABASE_URL",
    supabaseKey = "SUPABASE_KEY"
) {
    install(GoTrue)
    install(ComposeAuth) {
        nativeGoogleLogin("WEB_GOOGLE_CLIENT_ID") //Use the Web Client ID, not the Android one!
    }
}
```

----------------------------------------

TITLE: Configuring KotlinX Serialization Plugin in Groovy Build Script
DESCRIPTION: Adds the KotlinX Serialization plugin to a Kotlin project using Gradle with the Groovy DSL. This is required to use the default serialization method in supabase-kt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_6

LANGUAGE: groovy
CODE:
```
plugins {
    id 'org.jetbrains.kotlin.plugin.serialization' version 'KOTLIN_VERSION'
}
```

----------------------------------------

TITLE: Creating Blog Table with Array Column
DESCRIPTION: SQL definition for creating a blog table with array column type for tags
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-pg-graphql-1-5-7.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create table blog (
  id int primary key,
  name text not null,
  tags text[] not null,
  created_at timestamp not null
);
```

----------------------------------------

TITLE: Overriding Generated TypeScript Types
DESCRIPTION: This example shows how to override generated types using type-fest's MergeDeep utility type, useful for correcting unexpected nullability in view columns.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { MergeDeep } from 'type-fest'
import { Database as DatabaseGenerated } from './database-generated.types'
export { Json } from './database-generated.types'

// Override the type for a specific column in a view:
export type Database = MergeDeep<
  DatabaseGenerated,
  {
    public: {
      Views: {
        movies_view: {
          Row: {
            // id is a primary key in public.movies, so it must be `not null`
            id: number
          }
        }
      }
    }
  }
>
```

----------------------------------------

TITLE: Disabling Automatic Optimization in JavaScript
DESCRIPTION: This snippet demonstrates how to disable automatic image optimization and request the original format using the Supabase JavaScript client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

await supabase.storage.from('bucket').download('image.jpeg', {
  transform: {
    width: 200,
    height: 200,
    format: 'origin',
  },
})
```

----------------------------------------

TITLE: Unnesting Metadata Fields in Postgres Logs with SQL
DESCRIPTION: This query demonstrates how to unnest the metadata JSON objects in postgres_logs to access nested fields like error_severity and user_name. It uses cross join unnest operations to extract data from multiple layers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select
  event_message,
  parsed.error_severity,
  parsed.user_name
from
  postgres_logs
  -- extract first layer
  cross join unnest(postgres_logs.metadata) as metadata
  -- extract second layer
  cross join unnest(metadata.parsed) as parsed;
```

----------------------------------------

TITLE: Using Badge Component in React JSX
DESCRIPTION: Example of using the Badge component with an outline variant in React JSX.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/badge.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Badge variant="outline">Badge</Badge>
```

----------------------------------------

TITLE: Using Custom Keys for Chart Tooltip in React/TSX
DESCRIPTION: Demonstrates how to use custom keys for tooltip labels and names by providing labelKey and nameKey props to the ChartTooltipContent component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_13

LANGUAGE: tsx
CODE:
```
<ChartTooltip content={<ChartTooltipContent labelKey="visitors" nameKey="browser" />} />
```

----------------------------------------

TITLE: Creating Stores Table and Spatial Index with PostGIS
DESCRIPTION: This SQL snippet creates a 'stores' table with a geography column for location, adds a spatial index for improved query performance, and sets up a storage bucket for file uploads.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table if not exists public.stores (
	id int generated by default as identity primary key,
	name text not null,
  description text,
	location geography(POINT) not null
);

create index stores_geo_index
  on public.stores
  using GIST (location);

insert into storage.buckets (id, name)
values ('stores', 'stores');

CREATE POLICY "Select images" ON storage.objects FOR SELECT TO public USING (bucket_id = 'stores');
CREATE POLICY "Upload images" ON storage.objects FOR INSERT TO public WITH CHECK (bucket_id = 'stores');
```

----------------------------------------

TITLE: Setting up Foreign Data Wrapper Connection
DESCRIPTION: SQL commands to set up a foreign data wrapper connection to a remote vector database
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/engineering-for-scale.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create extension postgres_fdw;

create server docs_server
foreign data wrapper postgres_fdw
options (host 'db.xxx.supabase.co', port '5432', dbname 'postgres');

create user mapping for docs_user
server docs_server
options (user 'postgres', password 'password');
```

----------------------------------------

TITLE: Configuring AWS Credentials for S3 Access
DESCRIPTION: This snippet shows how to configure AWS credentials in the `~/.aws/credentials` file for accessing Supabase Storage via S3. It requires the AWS CLI to be installed and configured. Replace `your_access_key_id`, `your_secret_access_key`, `project_ref` and `project_region` with your actual Supabase project credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/s3/authentication.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
# ~/.aws/credentials

        [supabase]
        aws_access_key_id = your_access_key_id
        aws_secret_access_key = your_secret_access_key
        endpoint_url = https://project_ref.supabase.co/storage/v1/s3
        region = project_region
```

----------------------------------------

TITLE: Adding Supabase Dependencies with Maven
DESCRIPTION: Demonstrates how to add Supabase module dependencies using Maven build system. Includes BOM import and core module dependencies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_2

LANGUAGE: xml
CODE:
```
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>bom</artifactId>
    <version>VERSION</version>
    <type>pom</type>
    <scope>import</scope>
</dependency>
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>postgrest-kt</artifactId>
</dependency>
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>gotrue-kt</artifactId>
</dependency>
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>realtime-kt</artifactId>
</dependency>
```

----------------------------------------

TITLE: Customizing autovacuum scale factor for large PostgreSQL tables
DESCRIPTION: This SQL command modifies the autovacuum_vacuum_scale_factor for a specific table, making autovacuum run more frequently on large tables by reducing the threshold percentage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_8

LANGUAGE: jsx
CODE:
```
ALTER TABLE mytable SET autovacuum_vacuum_scale_factor to 0.05;
```

----------------------------------------

TITLE: Creating a Table with JSONB Column in Supabase
DESCRIPTION: SQL command to create a table in Supabase with a JSONB column to store raw Fauna documents. This allows preserving the original document structure while migrating.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-21-migrating-from-fauna-to-supabase.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table fauna_users_raw (
  id uuid primary key default gen_random_uuid(),
  data jsonb not null
);
```

----------------------------------------

TITLE: Creating a Dedicated Schema for Cal.com Foreign Tables
DESCRIPTION: Creates a schema to organize and contain all the Cal.com-related foreign tables. This helps maintain a clean database structure and separates Cal.com data from other database objects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create schema if not exists cal;
```

----------------------------------------

TITLE: Creating Utility Functions for Timestamp Conversion in Supabase
DESCRIPTION: Implements Postgres functions to convert between epoch timestamps used by WatermelonDB and Postgres timestamps.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create or replace function epoch_to_timestamp(epoch text) returns timestamp with time zone as $$ begin return timestamp with time zone 'epoch' + ((epoch::bigint) / 1000) * interval '1 second';
end;
$$ language plpgsql;

create or replace function timestamp_to_epoch(ts timestamp with time zone) returns bigint as $$ begin return (
        extract(
            epoch
            from ts
        ) * 1000
    )::bigint;
end;
$$ language plpgsql;
```

----------------------------------------

TITLE: Deploying OAuth Integration to Supabase Edge Functions
DESCRIPTION: Commands to deploy the connect-supabase function to Supabase Edge Functions and set the required environment secrets. This allows the OAuth integration to run in production.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/connect-supabase/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions deploy connect-supabase --no-verify-jwt
supabase secrets set --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Listening to Broadcast Events with `onBroadcast` (Dart)
DESCRIPTION: Illustrates the replacement of the generic `.on()` method with the dedicated `.onBroadcast()` method for listening to realtime broadcast events. This example demonstrates the simplified interface of `.onBroadcast()`, which requires fewer properties since it is specific to broadcast events.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_15

LANGUAGE: dart
CODE:
```
supabase.channel('my_channel').on(
  RealtimeListenTypes.broadcast,
  ChannelFilter(
    event: 'position',
  ),
  (dynamic payload, [ref]) {
    print(payload);
  },
).subscribe();
```

LANGUAGE: dart
CODE:
```
supabase
  .channel('my_channel')
  .onBroadcast(
    event: 'position',
    callback: (Map<String, dynamic> payload) {
      print(payload);
    })
  .subscribe();
```

----------------------------------------

TITLE: Creating HNSW Index with Float16 Vectors
DESCRIPTION: Shows how to create an HNSW index using float16 vectors for improved memory efficiency.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create index on embedding_half using hnsw (vector halfvec_l2_ops);
```

----------------------------------------

TITLE: Updating User Password in Swift with Supabase
DESCRIPTION: Swift implementation to update a user's password using Supabase authentication client after a successful password reset flow.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_36

LANGUAGE: Swift
CODE:
```
try await supabase.auth.updateUser(user: UserAttributes(password: newPassword))
```

----------------------------------------

TITLE: Deleting Multiple Messages
DESCRIPTION: Removes multiple messages from the queue by their message IDs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
select * from pgmq.delete('my_queue', array[2, 3]);
```

LANGUAGE: sql
CODE:
```
select * from pgmq.delete('my_queue', array[6, 999]);
```

----------------------------------------

TITLE: SQL Query to Clean Up Inactive Anonymous Users
DESCRIPTION: SQL query to delete anonymous users that were created more than 30 days ago, helping manage database growth until automatic cleanup is implemented.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
-- deletes anonymous users created more than 30 days ago
delete from auth.users
where is_anonymous is true and created_at < now() - interval '30 days';
```

----------------------------------------

TITLE: Reading Messages
DESCRIPTION: Reads messages from a queue with visibility timeout to prevent duplicate processing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
select * from pgmq.read('my_queue', 10, 2);
```

----------------------------------------

TITLE: Querying Overlapping Reservations Using Range Operator
DESCRIPTION: This SQL query demonstrates how to use the && operator to find reservations that overlap with a specified time range.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select *
	from reservations
	where duration && '[2024-07-04 16:00, 2024-07-04 19:00)';
```

----------------------------------------

TITLE: Creating a RUM Index with rum_tsvector_ops
DESCRIPTION: Example showing how to create a table with text search capabilities, set up a trigger for automatic tsvector updates, and create a RUM index using the rum_tsvector_ops operator class.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE TABLE test_rum(t text, a tsvector);

CREATE TRIGGER tsvectorupdate
BEFORE UPDATE OR INSERT ON test_rum
FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('a', 'pg_catalog.english', 't');

INSERT INTO test_rum(t) VALUES ('The situation is most beautiful');
INSERT INTO test_rum(t) VALUES ('It is a beautiful');
INSERT INTO test_rum(t) VALUES ('It looks like a beautiful place');

CREATE INDEX rumidx ON test_rum USING rum (a rum_tsvector_ops);
```

----------------------------------------

TITLE: Preserving Migration History with Supabase CLI - Bash
DESCRIPTION: This snippet provides commands for preserving migration history from an old Supabase database when restoring it into a new project. It involves dumping and restoring the migration records from the old database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/backup-restore.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase db dump --db-url "$OLD_DB_URL" -f history_schema.sql --schema supabase_migrations\nsupabase db dump --db-url "$OLD_DB_URL" -f history_data.sql --use-copy --data-only --schema supabase_migrations\npsql \
  --single-transaction \
  --variable ON_ERROR_STOP=1 \
  --file history_schema.sql \
  --file history_data.sql \
  --dbname "$NEW_DB_URL"
```

----------------------------------------

TITLE: Defining Constants for Supabase Realtime in Flutter
DESCRIPTION: Dart code defining constants for Supabase Realtime channel and event names to be used in the Flutter Figma clone app.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
abstract class Constants {
  /// Name of the Realtime channel
  static const String channelName = 'canvas';

  /// Name of the broadcast event
  static const String broadcastEventName = 'canvas';
}
```

----------------------------------------

TITLE: Implementing a Custom Serializer for Supabase-kt
DESCRIPTION: Creates a custom serializer by implementing the SupabaseSerializer interface. This requires implementing encode and decode methods to handle the conversion between Kotlin objects and JSON strings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_17

LANGUAGE: kotlin
CODE:
```
class CustomSerializer: SupabaseSerializer {

    override fun <T : Any> encode(type: KType, value: T): String {
        //encode value to string
    }

    override fun <T : Any> decode(type: KType, value: String): T {
        //decode value
    }

}
```

----------------------------------------

TITLE: Calculating CLIP Embeddings with Roboflow Inference API
DESCRIPTION: Python code for calculating CLIP embeddings for a directory of images using the Roboflow Inference HTTP API. It processes each image in a directory, converts it to base64, and sends it to the CLIP embedding endpoint.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
import cv2
import supervision as sv
import requests
import base64
import os

IMAGE_DIR = "images/train/images/"
API_KEY = ""
SERVER_URL = "http://localhost:9001"

results = []

for i, image in enumerate(os.listdir(IMAGE_DIR)):
    print(f"Processing image {image}")
    infer_clip_payload = {
        "image": {
            "type": "base64",
            "value": base64.b64encode(open(IMAGE_DIR + image, "rb").read()).decode("utf-8"),
        },
    }

    res = requests.post(
        f"{SERVER_URL}/clip/embed_image?api_key={API_KEY}",
        json=infer_clip_payload,
    )

    embeddings = res.json()['embeddings']

    results.append({
        "filename": image,
        "embeddings": embeddings
    })
```

----------------------------------------

TITLE: Defining Snaplet Seed Data Generation (TypeScript)
DESCRIPTION: Example `seed.ts` script demonstrating how to use the generated Snaplet Seed client to define specific data points and relationships to be generated, such as posts, users, and comments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/seeding-your-database.mdx#_snippet_5

LANGUAGE: ts
CODE:
```
import { createSeedClient } from '@snaplet/seed'
import { copycat } from '@snaplet/copycat'

async function main() {
  const seed = await createSeedClient({ dryRun: true })

  await seed.Post([
    {
      title: 'There is a lot of snow around here!',
      createdBy: {
        email: (ctx) =>
          copycat.email(ctx.seed, {
            domain: 'acme.org',
          }),
      },
      Comment: (x) => x(3),
    },
  ])

  process.exit()
}

main()
```

----------------------------------------

TITLE: Rendering Protomaps with MapLibre GL in HTML
DESCRIPTION: Complete HTML page that loads and displays a map from a PMTiles file stored in Supabase Storage. It uses MapLibre GL for rendering and Protomaps themes for styling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-19-self-host-maps-storage-protomaps.mdx#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<html>
  <head>
    <title>Overture Places</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://unpkg.com/maplibre-gl@4.1.2/dist/maplibre-gl.css"
      crossorigin="anonymous"
    />
    <script
      src="https://unpkg.com/maplibre-gl@4.1.2/dist/maplibre-gl.js"
      crossorigin="anonymous"
    ></script>
    <script src="https://unpkg.com/protomaps-themes-base@2.0.0-alpha.5/dist/index.js"></script>
    <script src="https://unpkg.com/pmtiles@3.0.6/dist/pmtiles.js"></script>
    <style>
      body {
        margin: 0;
      }
      #map {
        height: 100%;
        width: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script type="text/javascript">
      // Add the PMTiles Protocol:
      let protocol = new pmtiles.Protocol()
      maplibregl.addProtocol('pmtiles', protocol.tile)

      // Load the Map tiles directly from Supabase Storage:
      const map = new maplibregl.Map({
        hash: true,
        container: 'map',
        style: {
          version: 8,
          glyphs: 'https://cdn.protomaps.com/fonts/pbf/{fontstack}/{range}.pbf',
          sources: {
            protomaps: {
              attribution:
                '<a href="https://github.com/protomaps/basemaps">Protomaps</a> © <a href="https://openstreetmap.org">OpenStreetMap</a>',
              type: 'vector',
              url: 'pmtiles://https://<your-project-ref>.supabase.co/storage/v1/object/public/public-maps/my_area.pmtiles',
            },
          },
          layers: protomaps_themes_base.default('protomaps', 'dark'),
        },
      })
    </script>
  </body>
</html>
```

----------------------------------------

TITLE: Invoking the Cloudflare Turnstile Function from Client-Side
DESCRIPTION: JavaScript code example showing how to invoke the deployed Cloudflare Turnstile validation function from a client application using Supabase's function invocation API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/cloudflare-turnstile.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.functions.invoke('cloudflare-turnstile', {
  body: { token },
})
```

----------------------------------------

TITLE: Role-based Access Control Email Examples
DESCRIPTION: Example email formats for creating admin and moderator users using plus addressing for role assignment.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone/README.md#2025-04-21_snippet_3

LANGUAGE: plaintext
CODE:
```
// admin user
email+supaadmin@example.com

// moderator user
email+supamod@example.com
```

----------------------------------------

TITLE: Creating a Supabase Project with Management API
DESCRIPTION: Demonstrates how to use the Management API to create a new Supabase project programmatically using a curl command.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
curl 'https://api.supabase.com/v1/projects' \
  -H 'Authorization: Bearer <[your-access-token](https://supabase.com/dashboard/account/tokens)>' \
  -H "Content-Type: application/json" \
  -d '{"name": "my-project", "organization_id": "cool-green-pqdr0qc", "region": "us-east-1", "plan": "free", "db_pass": "********"}'
```

----------------------------------------

TITLE: Organizing Edge Function Tests Folder Structure
DESCRIPTION: Recommended folder structure for organizing Edge Function tests, placing test files in a separate 'tests' directory with consistent naming convention.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/unit-test.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
└── supabase
    ├── functions
    │   ├── function-one
    │   │   └── index.ts
    │   └── function-two
    │   │   └── index.ts
    │   └── tests
    │       └── function-one-test.ts  # Tests for function-one
    │       └── function-two-test.ts  # Tests for function-two
    └── config.toml
```

----------------------------------------

TITLE: Creating and Querying Bit Vector Index
DESCRIPTION: Shows how to create and query an HNSW index using binary quantization for efficient pre-selection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-05-01-pgvector-0-7-0.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create index on embedding
  using hnsw ((binary_quantize(vector)::bit(1000)) bit_hamming_ops);

select
  *
from
  embedding
order by
  binary_quantize(vector)::bit(3) <~> binary_quantize('[1,-2,3]')
limit 5;
```

----------------------------------------

TITLE: Monitoring Replication Lag Metric
DESCRIPTION: This metric, `physical_replication_lag_physical_replica_lag_seconds`, can be ingested into your own environment to monitor replication lag and set alarms accordingly.  Ingesting your project's metrics allows you to keep track of replication lag and set alarms accordingly.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/read-replicas.mdx#_snippet_0

LANGUAGE: text
CODE:
```
physical_replication_lag_physical_replica_lag_seconds
```

----------------------------------------

TITLE: Querying Top Cache Misses in Supabase Storage Logs (SQL)
DESCRIPTION: This SQL query retrieves the top cache misses from Supabase edge logs. It aggregates counts of requests that have a cache status indicating they missed the cache.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/cdn/metrics.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select
  r.path as path,
  r.search as search,
  count(id) as count
from
  edge_logs as f
  cross join unnest(f.metadata) as m
  cross join unnest(m.request) as r
  cross join unnest(m.response) as res
  cross join unnest(res.headers) as h
where
  starts_with(r.path, '/storage/v1/object')
  and r.method = 'GET'
  and h.cf_cache_status in ('MISS', 'NONE/UNKNOWN', 'EXPIRED', 'BYPASS', 'DYNAMIC')
group by path, search
order by count desc
limit 50;
```

----------------------------------------

TITLE: Querying Cal.com Event Types with JSON Parsing
DESCRIPTION: SQL query to extract and format event types from Cal.com. It uses JSON functions to extract nested values like profile name, event ID, and title from the JSON structure returned by Cal.com's API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
-- extract event types
select
  etg->'profile'->>'name' as profile,
  et->>'id' as id,
  et->>'title' as title
from cal.event_types t
  cross join json_array_elements((attrs->'eventTypeGroups')::json) etg
  cross join json_array_elements((etg->'eventTypes')::json) et;
```

----------------------------------------

TITLE: Creating plv8 Functions in PostgreSQL
DESCRIPTION: Template for creating PostgreSQL functions using the plv8 language. The function body contains JavaScript code that runs on the V8 engine.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create or replace function function_name()
returns void as $$
    // V8 JavaScript
    // code
    // here
$$ language plv8;
```

----------------------------------------

TITLE: FilterGroup Interface Definition
DESCRIPTION: Defines the `FilterGroup` interface, representing a group of filter conditions combined with a logical operator (`AND` or `OR`). The `conditions` array can contain either `FilterCondition` objects or nested `FilterGroup` objects, allowing for complex filter structures.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
interface FilterGroup {
  logicalOperator: 'AND' | 'OR'
  conditions: (FilterCondition | FilterGroup)[]
}
```

----------------------------------------

TITLE: Adding Supabase-KT Dependencies with Maven
DESCRIPTION: XML configuration for adding Supabase-KT dependencies in Maven projects using BOM for version management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_2

LANGUAGE: xml
CODE:
```
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>bom</artifactId>
    <version>VERSION</version>
    <type>pom</type>
    <scope>import</scope>
</dependency>
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>postgrest-kt</artifactId>
</dependency>
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>auth-kt</artifactId>
</dependency>
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>realtime-kt</artifactId>
</dependency>
```

----------------------------------------

TITLE: Reloading PostgREST Configuration
DESCRIPTION: SQL command to notify PostgREST to reload its configuration after making changes to the pre-request function setting.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
notify pgrst, 'reload config';
```

----------------------------------------

TITLE: Grouping Errors by Path and Code in Supabase Edge Logs (SQL)
DESCRIPTION: This query groups errors by path and status code, counting occurrences for each combination. It filters for status codes 400 and above in the Database API, ordering results by the number of occurrences.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
select
  status_code,
  path,
  count(path) as reoccurrence_per_path
from
  edge_logs
  cross join unnest(metadata) as metadata
  cross join unnest(response) as response
  cross join unnest(request) as request
where
  -- find all errors
  status_code >= 400
  and regexp_contains(path, '^/rest/v1/') -- only look at DB API
group by path, status_code
order by reoccurrence_per_path;
```

----------------------------------------

TITLE: Setting Up Environment Variables for Local Testing
DESCRIPTION: Commands to create and populate a .env file with the necessary Supabase configuration for local Edge Function testing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/unit-test.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
# creates the file
touch .env
# adds the SUPABASE_URL secret
echo "SUPABASE_URL=http://localhost:54321" >> .env
# adds the SUPABASE_ANON_KEY secret
echo "SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0" >> .env
# Alternatively, you can open it in your editor:
open .env
```

----------------------------------------

TITLE: Creating a Deno Postgres Driver for Kysely
DESCRIPTION: Implementation of a PostgresDriver that allows Kysely to connect to Postgres using the Deno Postgres library. Handles connection pooling, transactions, and query execution.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/kysely-postgres.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import {
  CompiledQuery,
  DatabaseConnection,
  Driver,
  PostgresCursorConstructor,
  QueryResult,
  TransactionSettings,
} from 'https://esm.sh/kysely@0.23.4'
import { freeze, isFunction } from 'https://esm.sh/kysely@0.23.4/dist/esm/util/object-utils.js'
import { extendStackTrace } from 'https://esm.sh/kysely@0.23.4/dist/esm/util/stack-trace-utils.js'
import { Pool, PoolClient } from 'https://deno.land/x/postgres@v0.17.0/mod.ts'

export interface PostgresDialectConfig {
  pool: Pool | (() => Promise<Pool>)
  cursor?: PostgresCursorConstructor
  onCreateConnection?: (connection: DatabaseConnection) => Promise<void>
}

const PRIVATE_RELEASE_METHOD = Symbol()

export class PostgresDriver implements Driver {
  readonly #config: PostgresDialectConfig
  readonly #connections = new WeakMap<PoolClient, DatabaseConnection>()
  #pool?: Pool

  constructor(config: PostgresDialectConfig) {
    this.#config = freeze({ ...config })
  }

  async init(): Promise<void> {
    this.#pool = isFunction(this.#config.pool) ? await this.#config.pool() : this.#config.pool
  }

  async acquireConnection(): Promise<DatabaseConnection> {
    const client = await this.#pool!.connect()
    let connection = this.#connections.get(client)

    if (!connection) {
      connection = new PostgresConnection(client, {
        cursor: this.#config.cursor ?? null,
      })
      this.#connections.set(client, connection)

      // The driver must take care of calling `onCreateConnection` when a new
      // connection is created. The `pg` module doesn't provide an async hook
      // for the connection creation. We need to call the method explicitly.
      if (this.#config?.onCreateConnection) {
        await this.#config.onCreateConnection(connection)
      }
    }

    return connection
  }

  async beginTransaction(
    connection: DatabaseConnection,
    settings: TransactionSettings
  ): Promise<void> {
    if (settings.isolationLevel) {
      await connection.executeQuery(
        CompiledQuery.raw(`start transaction isolation level ${settings.isolationLevel}`)
      )
    } else {
      await connection.executeQuery(CompiledQuery.raw('begin'))
    }
  }

  async commitTransaction(connection: DatabaseConnection): Promise<void> {
    await connection.executeQuery(CompiledQuery.raw('commit'))
  }

  async rollbackTransaction(connection: DatabaseConnection): Promise<void> {
    await connection.executeQuery(CompiledQuery.raw('rollback'))
  }

  async releaseConnection(connection: PostgresConnection): Promise<void> {
    connection[PRIVATE_RELEASE_METHOD]()
  }

  async destroy(): Promise<void> {
    if (this.#pool) {
      const pool = this.#pool
      this.#pool = undefined
      await pool.end()
    }
  }
}

interface PostgresConnectionOptions {
  cursor: PostgresCursorConstructor | null
}

class PostgresConnection implements DatabaseConnection {
  #client: PoolClient
  #options: PostgresConnectionOptions

  constructor(client: PoolClient, options: PostgresConnectionOptions) {
    this.#client = client
    this.#options = options
  }

  async executeQuery<O>(compiledQuery: CompiledQuery): Promise<QueryResult<O>> {
    try {
      const result = await this.#client.queryObject<O>(compiledQuery.sql, [
        ...compiledQuery.parameters,
      ])

      if (
        result.command === 'INSERT' ||
        result.command === 'UPDATE' ||
        result.command === 'DELETE'
      ) {
        const numAffectedRows = BigInt(result.rowCount || 0)

        return {
          numUpdatedOrDeletedRows: numAffectedRows,
          numAffectedRows,
          rows: result.rows ?? [],
        } as any
      }

      return {
        rows: result.rows ?? [],
      }
    } catch (err) {
      throw extendStackTrace(err, new Error())
    }
  }

  async *streamQuery<O>(
    _compiledQuery: CompiledQuery,
    chunkSize: number
  ): AsyncIterableIterator<QueryResult<O>> {
    if (!this.#options.cursor) {
      throw new Error(
        "'cursor' is not present in your postgres dialect config. It's required to make streaming work in postgres."
      )
    }

    if (!Number.isInteger(chunkSize) || chunkSize <= 0) {
      throw new Error('chunkSize must be a positive integer')
    }

    // stream not available
    return null
  }

  [PRIVATE_RELEASE_METHOD](): void {
    this.#client.release()
  }
}
```

----------------------------------------

TITLE: PostgreSQL Performance Metrics Table
DESCRIPTION: Latency measurements across different percentiles showing performance characteristics of the database operations. Data shows measurements from 60 samples with 21k requests over ~60 seconds.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_9

LANGUAGE: plaintext
CODE:
```
┌────────────┬──────────────┐
│ Percentile │ Latency (ms) │
├────────────┼──────────────┤
│ 0.001      │ 0            │
├────────────┼──────────────┤
│ 0.01       │ 0            │
├────────────┼──────────────┤
│ 0.1        │ 0            │
├────────────┼──────────────┤
│ 1          │ 0            │
├────────────┼──────────────┤
│ 2.5        │ 0            │
├────────────┼──────────────┤
│ 10         │ 0            │
├────────────┼──────────────┤
│ 25         │ 1            │
├────────────┼──────────────┤
│ 50         │ 2            │
├────────────┼──────────────┤
│ 75         │ 4            │
├────────────┼──────────────┤
│ 90         │ 6            │
├────────────┼──────────────┤
│ 97.5       │ 6            │
├────────────┼──────────────┤
│ 99         │ 6            │
├────────────┼──────────────┤
│ 99.9       │ 9            │
├────────────┼──────────────┤
│ 99.99      │ 28           │
├────────────┼──────────────┤
│ 99.999     │ 59           │
└────────────┴──────────────┘
```

----------------------------------------

TITLE: Chat Cubit Implementation for Real-time Message Handling
DESCRIPTION: Implements a Cubit for managing chat state and real-time message synchronization with Supabase, including message sending and stream subscription management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_10

LANGUAGE: dart
CODE:
```
import 'dart:async';

import 'package:bloc/bloc.dart';
import 'package:meta/meta.dart';
import 'package:my_chat_app/models/message.dart';
import 'package:my_chat_app/utils/constants.dart';

part 'chat_state.dart';

class ChatCubit extends Cubit<ChatState> {
  ChatCubit() : super(ChatInitial());

  StreamSubscription<List<Message>>? _messagesSubscription;
  List<Message> _messages = [];

  late final String _roomId;
  late final String _myUserId;

  void setMessagesListener(String roomId) {
    _roomId = roomId;

    _myUserId = supabase.auth.currentUser!.id;

    _messagesSubscription = supabase
        .from('messages')
        .stream(primaryKey: ['id'])
        .eq('room_id', roomId)
        .order('created_at')
        .map<List<Message>>(
          (data) => data
              .map<Message>(
                  (row) => Message.fromMap(map: row, myUserId: _myUserId))
              .toList(),
        )
        .listen((messages) {
          _messages = messages;
          if (_messages.isEmpty) {
            emit(ChatEmpty());
          } else {
            emit(ChatLoaded(_messages));
          }
        });
  }

  Future<void> sendMessage(String text) async {
    final message = Message(
      id: 'new',
      roomId: _roomId,
      profileId: _myUserId,
      content: text,
      createdAt: DateTime.now(),
      isMine: true,
    );
    _messages.insert(0, message);
    emit(ChatLoaded(_messages));

    try {
      await supabase.from('messages').insert(message.toMap());
    } catch (_) {
      emit(ChatError('Error submitting message.'));
      _messages.removeWhere((message) => message.id == 'new');
      emit(ChatLoaded(_messages));
    }
  }

  @override
  Future<void> close() {
    _messagesSubscription?.cancel();
    return super.close();
  }
}
```

----------------------------------------

TITLE: Adding Supabase-KT Dependencies with Gradle Groovy
DESCRIPTION: Shows how to add core Supabase-KT modules using Gradle Groovy build script syntax.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_1

LANGUAGE: groovy
CODE:
```
implementation platform("io.github.jan-tennert.supabase:bom:VERSION")
implementation 'io.github.jan-tennert.supabase:postgrest-kt'
implementation 'io.github.jan-tennert.supabase:auth-kt'
implementation 'io.github.jan-tennert.supabase:realtime-kt'
```

----------------------------------------

TITLE: Basic Text Search Using LIKE Operator
DESCRIPTION: Simple text search implementation using SQL LIKE operator to search across title and overview fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select
  *
from movies
where title like '%Avengers%' or overview like '%Avengers%';
```

----------------------------------------

TITLE: Disabling Automatic Optimization in Kotlin
DESCRIPTION: This snippet demonstrates how to disable automatic image optimization and request the original format using the Supabase Kotlin client. It includes examples for both in-memory download and direct file download.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_17

LANGUAGE: kotlin
CODE:
```
val data = supabase.storage.from("bucket").downloadAuthenticated("image.jpg") {
    transform {
        size(200, 200)
        format = ImageTransformation.Format.ORIGIN
    }
}

//Or on JVM stream directly to a file
val file = File("image.jpg")
supabase.storage.from("bucket").downloadAuthenticatedTo("image.jpg", file) {
    transform {
        size(200, 200)
        format = ImageTransformation.Format.ORIGIN
    }
}
```

----------------------------------------

TITLE: Removing a Publication in SQL
DESCRIPTION: Removes an existing publication if it exists. The 'if exists' clause prevents errors if the publication doesn't exist.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
drop publication if exists publication_name;
```

----------------------------------------

TITLE: Enabling PGroonga Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the PGroonga extension in PostgreSQL. This is necessary to use PGroonga's full-text search capabilities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the "pgroonga" extension
create extension pgroonga with schema extensions;

-- Disable the "pgroonga" extension
drop extension if exists pgroonga;
```

----------------------------------------

TITLE: Loading User Data from Supabase
DESCRIPTION: Fetching user data from Supabase database to populate the star constellation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
const [particles, setParticles] = useState([])

const loadUsers = async () => {
  return await supabase.from('lw8_tickets').select('*')
}

useEffect(() => {
  const { data: users } = loadUsers()
  setParticles(users)
}, [])
```

----------------------------------------

TITLE: Deploying Stripe Webhook Function to Supabase
DESCRIPTION: Deploys the stripe-webhooks function to Supabase without JWT verification.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/stripe-webhooks/README.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
supabase functions deploy --no-verify-jwt stripe-webhooks
```

----------------------------------------

TITLE: Sending State in Python
DESCRIPTION: This snippet shows how to track a user's status in Python after subscribing to a channel.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_14

LANGUAGE: python
CODE:
```
room_one = supabase.channel('room_01')

user_status = {
  "user": 'user-1',
  "online_at": datetime.datetime.now().isoformat(),
}

def on_subscribe(status, err):
  if status != RealtimeSubscribeStates.SUBSCRIBED:
    return

  room_one.track(user_status)

room_one.subscribe(on_subscribe)
```

----------------------------------------

TITLE: Installing Supabase Flutter SDK
DESCRIPTION: Shows how to add the Supabase Flutter SDK developer preview version to a project's dependencies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-02-supabase-flutter-sdk-1-developer-preview.mdx#2025-04-21_snippet_5

LANGUAGE: yaml
CODE:
```
supabase_flutter: ^1.0.0-dev.1
```

----------------------------------------

TITLE: Sample Table Creation for Bulk Insert
DESCRIPTION: SQL command to create a sample table with default values for demonstration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create table foo (
    id bigint generated by default as identity primary key,
    bar text,
    baz int default 100
  );
```

----------------------------------------

TITLE: User Signup - Kotlin
DESCRIPTION: Sends a signup request for a new user using Kotlin with email, password, and user data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_5

LANGUAGE: kotlin
CODE:
```
val data = supabase.auth.signUpWith(Email) {
    email = "valid.email@supabase.io"
    password = "example-password"
    data = buildJsonObject {
        put("first_name", "John")
        put("age", 27)
    }
}
```

----------------------------------------

TITLE: Creating Department Column Migration - Bash
DESCRIPTION: Command to generate a new migration file for adding department column
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase migration new add_department_to_employees_table
```

----------------------------------------

TITLE: Unnesting Postgres Log Metadata in SQL
DESCRIPTION: SQL query demonstrating how to access and unnest the metadata array in postgres_logs to extract detailed information about log events.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select
  event_message,
  parsed.<column name>
from
  postgres_logs
-- Unpack data stored in the 'metadata' field
cross join unnest(metadata) AS metadata
-- After unpacking the 'metadata' field, extract the 'parsed' field from it
cross join unnest(parsed) AS parsed;
```

----------------------------------------

TITLE: Conditional Email Template Based on User Language in HTML with Go Templates
DESCRIPTION: This code shows how to create multilingual email templates using Go Templating Language. The template uses conditional statements to display different greeting messages based on the user's language preference stored in metadata. It includes examples for English, Polish, and a default fallback.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/customizing-emails-by-language-KZ_38Q.mdx#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
{{if eq .Data.langauge "en" }}
<h1>Welcome!</h1>
{{ else if eq .Data.langauge "pl" }}
<h1>Witamy!</h1>
{{ else }}
<h1>chuS'ugh, tera' je (Klingon)</h1>
{{end}}
```

----------------------------------------

TITLE: Configuring SQLAlchemy Connection Pool
DESCRIPTION: Example of configuring SQLAlchemy engine with specific pool size and overflow settings for optimal connection management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/using-sqlalchemy-with-supabase-FUqebT.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
# Example configurations
engine = create_engine(
    "postgresql+psycopg2://me@localhost/mydb", pool_size=20, max_overflow=15
)
```

----------------------------------------

TITLE: Local GitHub Auth Environment Variables (dotenv)
DESCRIPTION: Shows the expected content of the `supabase/.env.local` file. This file is used during local development to store plaintext credentials for the GitHub OAuth app, which should not be committed to version control (`.gitignore`).
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#_snippet_2

LANGUAGE: dotenv
CODE:
```
SUPABASE_AUTH_EXTERNAL_GITHUB_CLIENT_ID=<client-id>
SUPABASE_AUTH_EXTERNAL_GITHUB_SECRET=<client-secret>
```

----------------------------------------

TITLE: Generating Explain Plan Without Index in PostgreSQL
DESCRIPTION: SQL command to generate an explain plan for a simple query without an index, showing a sequential scan.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/hypopg.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
explain select * from account where id=1;
```

----------------------------------------

TITLE: VSCode Multi-root Workspace Configuration for Edge Functions
DESCRIPTION: Example workspace configuration that separates a React app client and Supabase Edge Functions into distinct workspace folders with appropriate settings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/local-development.mdx#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "folders": [
    {
      "name": "project-root",
      "path": "./"
    },
    {
      "name": "client",
      "path": "app"
    },
    {
      "name": "supabase-functions",
      "path": "supabase/functions"
    }
  ],
  "settings": {
    "files.exclude": {
      "node_modules/": true,
      "app/": true,
      "supabase/functions/": true
    },
    "deno.importMap": "./supabase/functions/import_map.json"
  }
}
```

----------------------------------------

TITLE: Inspecting Unused Indexes with Supabase CLI
DESCRIPTION: Command sequence for using Supabase CLI to identify unused indexes that may be unnecessarily consuming space.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/steps-to-improve-query-performance-with-indexes-q8PoC9.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npx supabase login

npx supabase link

npx supabase inspect db unused-indexes
```

----------------------------------------

TITLE: Generating UUIDv1 with Random MAC Address in PostgreSQL
DESCRIPTION: Shows how to enable the uuid-ossp extension and generate a version 1 UUID with a randomized MAC address using the uuid_generate_v1mc() function. UUIDv1 contains a 60-bit date-time component and a randomized 48-bit MAC address component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION

SELECT uuid_generate_v1mc();

          uuid_generate_v1mc
--------------------------------------
 dd1bbf10-0b47-11ed-80de-db48f6faaf86

(1 row)
```

----------------------------------------

TITLE: Initializing React App for Semantic Search (JavaScript)
DESCRIPTION: Sets up the main React component to initialize the database, create the schema, and fetch content from the embeddings table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { getDB, initSchema, countRows } from './utils/db'
import { useState, useEffect, useRef, useCallback } from 'react'

export default function App() {
  const [content, setContent] = useState([])
  const initailizing = useRef(false)
  // Create a reference to the worker object.
  const worker = useRef(null)

  // Set up DB
  const db = useRef(null)
  useEffect(() => {
    const setup = async () => {
      initailizing.current = true
      db.current = await getDB()
      await initSchema(db.current)
      let count = await countRows(db.current, 'embeddings')

      if (count === 0) {
        // TODO: seed the database.
      }
      // Get Items
      const items = await db.current.query('SELECT content FROM embeddings')
      setContent(items.rows.map((x) => x.content))
    }
    if (!db.current && !initailizing.current) {
      setup()
    }
  }, [])

  // [...]

  return <pre>{JSON.stringify(content)}</pre>
}
```

----------------------------------------

TITLE: Unscheduling a Cron Job using SQL in Supabase
DESCRIPTION: This SQL snippet shows how to unschedule (delete) a cron job in Supabase using the cron.unschedule function. It permanently removes the job from the cron.job table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/quickstart.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
select cron.unschedule('permanent-cron-job-name');
```

----------------------------------------

TITLE: Querying Many-to-Many Relationships in Kotlin
DESCRIPTION: Kotlin example showing how to query teams with their related users through a many-to-many relationship.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_13

LANGUAGE: kotlin
CODE:
```
val data = supabase.from("teams").select(Columns.raw("id, team_name, users(id, name)"));
```

----------------------------------------

TITLE: Reflected GraphQL Schema from PostgreSQL Table
DESCRIPTION: This GraphQL schema is automatically generated by pg_graphql based on the 'account' table structure. It includes scalar types, PageInfo type, Query type with account and allAccounts fields, and related Account types.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-03-pg-graphql.mdx#2025-04-21_snippet_1

LANGUAGE: graphql
CODE:
```
scalar Cursor
scalar DateTime
scalar JSON
scalar UUID
scalar BigInt

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type Query {
  account(nodeId: ID!): Account
  allAccounts(after: Cursor, before: Cursor, first: Int, last: Int): AccountConnection
}

type Account {
  nodeId: ID!
  id: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccountEdge {
  cursor: String!
  node: Account
}

type AccountConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AccountEdge]
}
```

----------------------------------------

TITLE: Supavisor Transaction Mode Connection String
DESCRIPTION: Example of a connection string for Supavisor in transaction mode, which uses port 6543. In this mode, clients can make a single query before being returned to the waiting pool.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-faq-YyP5tI.mdx#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
# Example transaction string
postgresql://postgres.ajrbwkcuthywddfihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres
```

----------------------------------------

TITLE: Importing JSON Data into Supabase Using JavaScript
DESCRIPTION: A script that reads exported JSON data from Fauna and inserts it into a Supabase table. The script uses the Supabase JavaScript client to handle the data insertion process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-21-migrating-from-fauna-to-supabase.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
import { createClient } from '@supabase/supabase-js'
import fs from 'fs'

const supabaseUrl = 'YOUR_SUPABASE_URL'
const supabaseKey = 'YOUR_SUPABASE_API_KEY'
const tableName = 'YOUR_TABLE_NAME'
const jsonFilePath = './filename.json'

const supabase = createClient(supabaseUrl, supabaseKey)

async function loadDocumentsToSupabase() {
  try {
    // Read JSON file
    const rawData = fs.readFileSync(jsonFilePath)
    const dataArray = JSON.parse(rawData).map((data) => ({ data }))

    // Insert data into Supabase
    const { error } = await supabase.from(tableName).insert(dataArray)

    if (error) {
      console.error('Error inserting data:', error)
      return
    }

    console.log(`Successfully inserted ${dataArray.length} records into ${tableName}`)
  } catch (error) {
    console.error('Error in process:', error)
  }
}

loadDocumentsToSupabase()
```

----------------------------------------

TITLE: Copying Data to Chat Partitions in PostgreSQL
DESCRIPTION: Procedure that copies data from the original large table to the new partition tables. Orders data by created_at during copy to improve cache efficiency and block density.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-03-postgres-dynamic-table-partitioning.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE PROCEDURE app.copy_chats_partition(partition_day date)
    LANGUAGE plpgsql AS
$$
DECLARE
    num_copied bigint = 0;
BEGIN
    EXECUTE format(
    $i$
        INSERT INTO app."chats_%1$s" (id, created_at)
        SELECT id, created_at FROM chats
        WHERE created_at::date >= %1$L::date AND created_at::date < (%1$L::date + interval '1 day')
        ORDER BY created_at
    $i$, partition_day);
    GET DIAGNOSTICS num_copied = ROW_COUNT;
    RAISE NOTICE 'Copied % rows to %', num_copied, format('app."chats_%1$s"', partition_day);
END;
$$;
```

----------------------------------------

TITLE: Creating a Trigger for Parent Partitioned Table in PostgreSQL
DESCRIPTION: This SQL command creates a new trigger for the parent partitioned table. Triggers need to be recreated manually as they are not automatically copied when creating the partitioned table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/partitioning-an-existing-table-with-same-name-VEnbzK.mdx#2025-04-21_snippet_2

LANGUAGE: SQL
CODE:
```
CREATE TRIGGER ...
```

----------------------------------------

TITLE: Importing Dependencies
DESCRIPTION: Python code for importing required libraries and setting up database connection
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/image-search-openai-clip.mdx#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from PIL import Image
from sentence_transformers import SentenceTransformer
import vecs
from matplotlib import pyplot as plt
from matplotlib import image as mpimg

DB_CONNECTION = "postgresql://postgres:postgres@localhost:54322/postgres"
```

----------------------------------------

TITLE: Adding Ktor Client Engine with Groovy Gradle
DESCRIPTION: Adds a Ktor client engine dependency using Gradle with Groovy DSL. Ktor engines are required for HTTP communication and must be selected based on target platform and websocket support needs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_4

LANGUAGE: groovy
CODE:
```
implementation 'io.ktor:ktor-client-[engine]:KTOR_VERSION'
```

----------------------------------------

TITLE: Testing OpenAI Edge Function with cURL
DESCRIPTION: This cURL command sends a POST request to the locally served edge function to test the OpenAI integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/openai.mdx#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
curl -i --location --request POST http://localhost:54321/functions/v1/openai \
  --header 'Content-Type: application/json' \
  --data '{"query":"What is Supabase?"}'
```

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: Setup of Supabase client with PKCE flow type and custom session storage for Flask application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-21-oauth2-login-python-flask-apps.mdx#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import os
from flask import g
from werkzeug.local import LocalProxy
from supabase.client import Client, ClientOptions
from flask_storage import FlaskSessionStorage

url = os.environ.get("SUPABASE_URL", "")
key = os.environ.get("SUPABASE_KEY", "")

def get_supabase() -> Client:
    if "supabase" not in g:
        g.supabase = Client(
            url,
            key,
            options=ClientOptions(
                storage=FlaskSessionStorage(),
                flow_type="pkce"
            ),
        )
    return g.supabase

supabase: Client = LocalProxy(get_supabase)
```

----------------------------------------

TITLE: Supabase Query Example with Timeout
DESCRIPTION: JavaScript example showing a query that might trigger the statement timeout.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase.from('big_table').select().eq('unindexed_column', 'value')
```

----------------------------------------

TITLE: Querying Basic Function in GraphQL
DESCRIPTION: A simple GraphQL query that calls the addNums function with parameters a=2 and b=3.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_2

LANGUAGE: graphql
CODE:
```
query {
  addNums(a: 2, b: 3)
}
```

----------------------------------------

TITLE: Inspecting database bloat using Supabase CLI
DESCRIPTION: This command uses the Supabase CLI to check for table bloat in the database, helping identify tables that need vacuum maintenance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
$ supabase inspect db bloat
```

----------------------------------------

TITLE: API Gateway Access Example
DESCRIPTION: Example of accessing the Supabase API gateway using curl with authentication headers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_8

LANGUAGE: sh
CODE:
```
curl 'http://localhost:54321/rest/v1/' \
    -H "apikey: <anon key>" \
    -H "Authorization: Bearer <anon key>"
```

----------------------------------------

TITLE: Implementing Custom Media Type Handlers in PostgREST 12
DESCRIPTION: Shows how to use the new Media Type Handlers feature in PostgREST 12 to serve custom content types directly from the database. This example demonstrates serving HTML content.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-13-postgrest-12.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create domain "text/html" as text;

create or replace function api.index()
returns "text/html"
language sql
as $$
  select $html$
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <title>PostgREST + HTMX To-Do List</title>
      <!-- Tailwind for CSS styling -->
      <link href="https://unpkg.com/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    </head>
    <body class="bg-gray-900">
      <div class="flex justify-center">
        <div class="max-w-lg mt-5 p-6 bg-gray-800 border border-gray-800 rounded-lg shadow-xl">
          <h5 class="mb-3 text-2xl font-bold tracking-tight text-white">PostgREST + HTMX To-Do List</h5>
        </div>
      </div>
    </body>
    </html>
  $html$;
$$;
```

----------------------------------------

TITLE: Disabling Read-Only Mode in Postgres
DESCRIPTION: This SQL command disables the default read-only transaction mode, allowing write operations in the database. It should be used after reclaiming space to restore normal database operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/database-size.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
set default_transaction_read_only = 'off';
```

----------------------------------------

TITLE: Verifying Max Connections Setting in PostgreSQL
DESCRIPTION: SQL query to check the current max_connections setting in PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-change-max-database-connections-_BQ8P5.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SHOW max_connections;
```

----------------------------------------

TITLE: Configuring View Security in PostgreSQL
DESCRIPTION: Demonstrates how to modify view security settings using security_invoker and how to create a new view with security_invoker enabled.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
-- alter a security_definer view to be security_invoker
alter view <view name>
set (security_invoker = true);

-- create a view with the security_invoker modifier
create view <view name> with(security_invoker=true) as (
  select * from <some table>
);
```

----------------------------------------

TITLE: Setting Database Connection Environment Variable
DESCRIPTION: Command to set the Supabase PostgreSQL connection string as an environment variable for Rails.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
export DATABASE_URL=postgres://postgres.xxxx:password@xxxx.pooler.supabase.com:5432/postgres
```

----------------------------------------

TITLE: Using plpgsql_check to Identify Errors in a Function
DESCRIPTION: SQL command using plpgsql_check's plpgsql_check_function to identify the known error in the 'some_func' function. It detects and reports the invalid column reference.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plpgsql_check.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
select plpgsql_check_function('public.some_func()');

                   plpgsql_check_function
------------------------------------------------------------
 error:42703:8:RAISE:record "rec" has no field "created_at"
 Context: SQL expression "rec.created_at"
```

----------------------------------------

TITLE: Testing PostgreSQL Column Properties
DESCRIPTION: pgTAP tests to verify column existence and primary key constraints. Tests multiple column properties within a single transaction.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgtap.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
begin;
select plan( 2 );

select has_column( 'profiles', 'id' ); -- test that the "id" column exists in the "profiles" table
select col_is_pk( 'profiles', 'id' ); -- test that the "id" column is a primary key

select * from finish();
rollback;
```

----------------------------------------

TITLE: Querying Record Return Function in GraphQL
DESCRIPTION: A GraphQL query that calls the accountsByEmailDomain function to find accounts with a specific domain, limiting results to 2 records.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_6

LANGUAGE: graphql
CODE:
```
query {
  accountsByEmailDomain(domainToSearch: "foo.com", first: 2) {
    edges {
      node {
        id
        email
      }
    }
  }
}
```

----------------------------------------

TITLE: Implementing App Component URL Handling
DESCRIPTION: App component implementation for handling deep links and magic link authentication in native apps using Capacitor's App plugin.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_30

LANGUAGE: typescript
CODE:
```
import { AuthService } from 'src/app/services/auth.service'
import { Router } from '@angular/router'
import { Component, NgZone } from '@angular/core'
import { App, URLOpenListenerEvent } from '@capacitor/app'

@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html',
  styleUrls: ['app.component.scss'],
})
export class AppComponent {
  constructor(
    private zone: NgZone,
    private router: Router,
    private authService: AuthService
  ) {
    this.setupListener()
  }

  setupListener() {
    App.addListener('appUrlOpen', async (data: URLOpenListenerEvent) => {
      console.log('app opened with URL: ', data)

      const openUrl = data.url
      const access = openUrl.split('#access_token=').pop().split('&')[0]
      const refresh = openUrl.split('&refresh_token=').pop().split('&')[0]

      await this.authService.setSession(access, refresh)

      this.zone.run(() => {
        this.router.navigateByUrl('/groups', { replaceUrl: true })
      })
    })
  }
}
```

----------------------------------------

TITLE: Deploying and Testing Edge Function
DESCRIPTION: Commands for local testing and deployment of the Supabase Edge Function with Sentry integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/sentry-monitoring.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase start
supabase functions serve --no-verify-jwt
```

LANGUAGE: bash
CODE:
```
supabase functions deploy sentryfied --no-verify-jwt
```

----------------------------------------

TITLE: Listening to DELETE Events in Dart with Supabase Realtime
DESCRIPTION: Creates a channel to listen specifically for DELETE events in the public schema of a Supabase database using Dart. The code establishes a subscription that prints payload data whenever database deletions occur.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_21

LANGUAGE: dart
CODE:
```
supabase
    .channel('schema-db-changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.delete, // Listen only to DELETEs
        schema: 'public',
        callback: (payload) => print(payload))
    .subscribe();
```

----------------------------------------

TITLE: Cleaning Up Analytics Data for Upgrade
DESCRIPTION: Commands to clean up the Analytics server data when upgrading, which involves dropping the publication and schema before removing the analytics container. This will delete all data in analytics.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_13

LANGUAGE: sh
CODE:
```
### Destroy analytics to transition to postgres self hosted solution without other data loss

# Enter the container and use your .env POSTGRES_PASSWORD value to login
docker exec -it $(docker ps | grep supabase-db | awk '{print $1}') psql -U supabase_admin --password
# Drop all the data in the _analytics schema
DROP PUBLICATION logflare_pub; DROP SCHEMA _analytics CASCADE; CREATE SCHEMA _analytics;\q
# Drop the analytics container
docker rm supabase-analytics
```

----------------------------------------

TITLE: Creating Users Table with Serial Primary Key
DESCRIPTION: Demonstrates creating a users table using serial type for auto-incrementing primary key
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table users (
  id serial primary key,
  email citext not null check (length(email) < 255),
  name text not null
);
```

----------------------------------------

TITLE: Unlinking Identity with Python
DESCRIPTION: Example showing how to fetch and unlink a Google OAuth identity using the Supabase Python client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-identity-linking.mdx#2025-04-21_snippet_9

LANGUAGE: python
CODE:
```
response = supabase.auth.get_user_identities()

google_identity = next((identity for identity in response.identities if identity.provider == 'google'), None)

if google_identity:
    response = supabase.auth.unlink_identity(google_identity.identity_id)
```

----------------------------------------

TITLE: Accessing Custom Schema with Dart Supabase Client
DESCRIPTION: Dart code showing how to initialize the Supabase client with a custom schema in Flutter applications and query data from it. Includes both global and per-query schema configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/using-custom-schemas.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
// Initialize the Flutter client
await Supabase.initialize(
  url: supabaseUrl,
  anonKey: supabaseKey,
  postgrestOptions: const PostgrestClientOptions(schema: 'myschema'),
);
final supabase = Supabase.instance.client;

// Make a request
final data = await supabase.from('todos').select();

// You can also change the target schema on a per-query basis
final data = await supabase.schema('myschema').from('todos').select();
```

----------------------------------------

TITLE: Integrating Avatar Component into Account Component in RedwoodJS
DESCRIPTION: Code snippet showing how to import and add the Avatar component to the Account component. It handles the avatar upload callback to update the user's profile with the new avatar URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_15

LANGUAGE: jsx
CODE:
```
// Import the new component
import Avatar from 'src/components/Avatar'

// ...

return (
  <div className="form-widget">
    {/* Add to the body */}
    <Avatar
      url={avatar_url}
      size={150}
      onUpload={(url) => {
        setAvatarUrl(url)
        updateProfile({ username, website, avatar_url: url })
      }}
    />
    {/* ... */}
  </div>
)
```

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Embeddings Generation
DESCRIPTION: GitHub Actions workflow configuration for automatically generating and updating document embeddings in Supabase. Triggers on main branch changes and uses the embeddings-generator action.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/headless-vector-search.mdx#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
name: 'generate_embeddings'
on: # run on main branch changes
  push:
    branches:
      - main

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: supabase/embeddings-generator@v0.0.x # Update this to the latest version.
        with:
          supabase-url: 'https://your-project-ref.supabase.co' # Update this to your project URL.
          supabase-service-role-key: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          openai-key: ${{ secrets.OPENAI_API_KEY }}
          docs-root-path: 'docs' # the path to the root of your md(x) files
```

----------------------------------------

TITLE: Supabase Test and Lint Commands
DESCRIPTION: CLI commands for testing databases with pgTAP and linting using plpgsql_check extension
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_3

LANGUAGE: markdown
CODE:
```
supabase test
Run tests on local Supabase containers

Usage:
  supabase test [command]

Available Commands:
  db          Tests local database with pgTAP
  new         Create a new test file
```

LANGUAGE: markdown
CODE:
```
supabase db lint
Checks local database for typing error

Usage:
  supabase db lint [flags]

Flags:
  -h, --help                        help for lint
      --level [ warning | error ]   Error level to emit. (default warning)
      --linked                      Lints the linked project for schema errors.
  -s, --schema strings              List of schema to include. (default all)
```

----------------------------------------

TITLE: Initializing Supabase Client with Custom Serialization
DESCRIPTION: This Kotlin snippet demonstrates how to initialize the Supabase client with a custom serializer implementation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_17

LANGUAGE: kotlin
CODE:
```
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    defaultSerializer = CustomSerializer()
}
```

----------------------------------------

TITLE: Using IP Denylist Feature from pg_headerkit Extension in PostgreSQL
DESCRIPTION: Shows how to use the IP denylisting functionality from the burggraf-pg_headerkit extension. This example demonstrates using the in_deny_list() function in a WHERE clause to filter out requests from blocked IP addresses.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_4

LANGUAGE: sql
CODE:
```
select
  *
from app.memos
where not hdr.in_deny_list();
```

----------------------------------------

TITLE: Querying Partitioned Sales Table in PostgreSQL
DESCRIPTION: This snippet shows how to query a partitioned sales table. It includes examples of querying the parent table to retrieve data from multiple partitions and querying a specific partition directly.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/partitions.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select *
from sales
where order_date >= '2000-01-01' and order_date < '2000-03-01';
```

LANGUAGE: sql
CODE:
```
select *
from sales_2000_02;
```

----------------------------------------

TITLE: Stop Tracking Presence in Dart
DESCRIPTION: This snippet outlines how to stop tracking presence in Dart by calling the untrack method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_16

LANGUAGE: dart
CODE:
```
final roomOne = supabase.channel('room_01');

untrackPresence() async {
  final presenceUntrackStatus = await roomOne.untrack();
  print(presenceUntrackStatus);
}

untrackPresence();
```

----------------------------------------

TITLE: Performing Anti-Joins in PostgREST
DESCRIPTION: Shows how to perform anti-joins by filtering rows where the related table is null. This can be used to find records that don't have corresponding entries in related tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-postgrest-11-prerelease.mdx#2025-04-21_snippet_3

LANGUAGE: http
CODE:
```
GET /films?select=title,nominations()&nominations=is.null
```

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase
  .from('films')
  .select(`
    title,
    nominations()
  `)
   .is('nominations', null))
```

LANGUAGE: json
CODE:
```
[
  {
    "title": "Memories of Murder"
  },
  {
    "title": "Rush"
  },
  {
    "title": "Groundhog Day"
  },
  "..."
]
```

----------------------------------------

TITLE: Initializing Supabase Client in Swift
DESCRIPTION: This snippet outlines how to initialize a Supabase client in Swift, providing the necessary URL and API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_2

LANGUAGE: swift
CODE:
```
let supabaseURL = "https://<project>.supabase.co"
let supabaseKey = "<your-anon-key>"
let supabase = SupabaseClient(supabaseURL: URL(string: supabaseURL)!, supabaseKey: supabaseKey)

let realtime = supabase.realtime
```

----------------------------------------

TITLE: Embedding Dimension Comparison
DESCRIPTION: Demonstrates generation and comparison of full-size, shortened, and manually truncated embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
const {
  data: [{ embedding: fullEmbedding }],
} = await openai.embeddings.create({
  model: 'text-embedding-3-large',
  input: 'The cat chases the mouse',
})

const {
  data: [{ embedding: shortenedEmbedding }],
} = await openai.embeddings.create({
  model: 'text-embedding-3-large',
  input: 'The cat chases the mouse',
  dimensions: 1024,
})

const truncatedEmbedding = normalize(fullEmbedding.slice(0, 1024))
```

----------------------------------------

TITLE: Overwriting Files in Supabase Storage with Kotlin
DESCRIPTION: This snippet illustrates how to overwrite an existing file in Supabase Storage using Kotlin. It sets the 'upsert' option to true to enable file overwriting.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_8

LANGUAGE: kotlin
CODE:
```
supabase.storage.from("bucket_name").upload("file_path", bytes) {
    upsert = true
}
```

----------------------------------------

TITLE: Full Text Search on Description Using Dart
DESCRIPTION: Dart implementation using Supabase client to perform a full text search on the books table, searching the description column for the word 'big'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_15

LANGUAGE: dart
CODE:
```
final result = await client
  .from('books')
  .select()
  .textSearch('description', "'big'");
```

----------------------------------------

TITLE: Creating React Native Expo App
DESCRIPTION: Initializes a new React Native project using Expo CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
npx create-expo-app OfflineFirstWithSupabase
```

----------------------------------------

TITLE: Swift Implementation of Bounding Box Search
DESCRIPTION: Swift example showing how to call the PostGIS bounding box search function using Supabase client with type-safe response handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_18

LANGUAGE: swift
CODE:
```
struct Response: Codable {
  let id: Int
  let name: String
  let lat: Double
  let long: Double
}

let response: Response = try await supabase.rpc(
  "restaurants_in_view",
  params: [
    "min_lat": 40.807,
    "min_long": -73.946,
    "max_long": -73.945,
    "max_lat": 40.808,
  ]
)
.execute()
.value
```

----------------------------------------

TITLE: Implementing Authentication Layout in Svelte
DESCRIPTION: Svelte layout component for the authentication pages. Includes a navigation header and renders child components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_10

LANGUAGE: svelte
CODE:
```
<script>
  let { children } = $props()
</script>

<header>
  <nav>
    <a href="/">Home</a>
  </nav>
</header>

{@render children()}
```

----------------------------------------

TITLE: Dynamic Single Post Component
DESCRIPTION: Implements a dynamic server component for individual post display with no caching.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_15

LANGUAGE: tsx
CODE:
```
import supabase from '../../../utils/supabase'
import { notFound } from 'next/navigation'

export const revalidate = 0

export async function generateStaticParams() {
  const { data: posts } = await supabase.from('posts').select('id')

  return posts?.map(({ id }) => ({
    id,
  }))
}

export default async function Post({ params: { id } }: { params: { id: string } }) {
  const { data: post } = await supabase.from('posts').select().match({ id }).single()

  if (!post) {
    notFound()
  }

  return <pre>{JSON.stringify(post, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Inserting Geographic Point Data via SQL
DESCRIPTION: SQL command to insert restaurant data with geographic points using the ST_Point function. Note that the longitude is passed first, followed by latitude.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
insert into public.restaurants
  (name, location)
values
  ('Supa Burger', gis.st_point(-73.946823, 40.807416)),
  ('Supa Pizza', gis.st_point(-73.94581, 40.807475)),
  ('Supa Taco', gis.st_point(-73.945826, 40.80629));
```

----------------------------------------

TITLE: Running Edge Functions with Docker
DESCRIPTION: Commands to build and run the Edge Runtime using Docker. This containerizes the runtime environment and mounts your functions directory as a volume.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/self-hosting-functions/introduction.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
docker build -t edge-runtime .
docker run -it --rm -p 9000:9000 -v /path/to/supabase/functions:/usr/services supabase/edge-runtime start --main-service /usr/services
```

----------------------------------------

TITLE: Fetching Todos with cURL
DESCRIPTION: Makes an HTTP GET request to fetch todos data using cURL with required authentication headers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/quickstart.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
curl 'https://<PROJECT_REF>.supabase.co/rest/v1/todos' \
-H "apikey: <ANON_KEY>" \
-H "Authorization: Bearer <ANON_KEY>"
```

----------------------------------------

TITLE: Supabase Local Deployment Command
DESCRIPTION: Shell command to restart Supabase containers and apply template changes locally.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_7

LANGUAGE: sh
CODE:
```
supabase stop && supabase start
```

----------------------------------------

TITLE: Adding Complex Exclusion Constraint with Table ID
DESCRIPTION: These SQL statements enable the btree_gist extension and add an exclusion constraint that prevents overlapping reservations for the same table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
-- Enable the btree_gist index required for the constraint.
create extension btree_gist

-- Add a constraint to prevent overlaps with the same table_id
alter table reservations
  add constraint exclude_duration
  exclude using gist (table_id WITH =, duration WITH &&);
```

----------------------------------------

TITLE: Listing Supabase Projects
DESCRIPTION: Command to retrieve a list of Supabase projects and their IDs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase projects list
```

----------------------------------------

TITLE: Querying Live Connections in PostgreSQL
DESCRIPTION: This SQL query retrieves information about all live connections to the database, including connection ID, SSL usage, connected database, user role, application name, IP address, last query, query start time, connection state, and connection start time. It joins pg_stat_ssl and pg_stat_activity tables to provide comprehensive connection details.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connection-management.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT
  pg_stat_activity.pid as connection_id,
  ssl,
  datname as database,
  usename as connected_role,
  application_name,
  client_addr as IP,
  query,
  query_start,
  state,
  backend_start
FROM pg_stat_ssl
JOIN pg_stat_activity
ON pg_stat_ssl.pid = pg_stat_activity.pid;
```

----------------------------------------

TITLE: Setting Up Testing Environment with Supabase CLI
DESCRIPTION: Creates a new test file for RLS policies using Supabase CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/overview.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
# Create a new test for our policies using supabase cli
supabase test new todos_rls.test
```

----------------------------------------

TITLE: Querying User-Context Settings in Supabase Postgres
DESCRIPTION: This SQL query lists all user-context settings from the pg_settings view, which can be modified at the role or database level.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select * from pg_settings where context = 'user';
```

----------------------------------------

TITLE: Creating a Bucket using Swift in Supabase Storage
DESCRIPTION: This Swift snippet demonstrates how to create a new bucket in Supabase Storage using the Supabase client library. It calls the `createBucket` method on the `storage` property of the `supabase` object, creating a bucket named "avatars". The `try await` keywords are used to handle the asynchronous operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_3

LANGUAGE: swift
CODE:
```
try await supabase.storage.createBucket("avatars")
```

----------------------------------------

TITLE: Installing Supabase Auth Helpers for Next.js
DESCRIPTION: Command to install the next version of Supabase auth helpers package for Next.js implementation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
npm install @supabase/auth-helpers-nextjs@next
```

----------------------------------------

TITLE: Checking Webhook Activity in Postgres
DESCRIPTION: This SQL query checks if the pg_net background worker is active by querying the pg_stat_activity table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/webhook-debugging-guide-M8sk47.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select pid from pg_stat_activity where backend_type ilike '%pg_net%';
```

----------------------------------------

TITLE: Query with Long 'in' Clause That Causes 520 Error
DESCRIPTION: Example of a problematic query with a very long 'in' clause that would exceed the 16KB limit and trigger a Cloudflare 520 error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('countries')
  .select()
  .not('id', 'in', '(5,6,7,8,9,...10,000)')
```

----------------------------------------

TITLE: Resizing Images with Custom Mode in Supabase Storage in Python
DESCRIPTION: This snippet shows how to download an image with custom dimensions (800x300) and the 'contain' resize mode using the Python client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_31

LANGUAGE: Python
CODE:
```
response = supabase.storage.from_('bucket').download(
  'image.jpg',
  {
    'transform': {
      'width': 800,
      'height': 300,
      'resize': 'contain', # 'cover' | 'fill'
    }
  }
)
```

----------------------------------------

TITLE: Configuring Fetch-Retry Options
DESCRIPTION: Configuration of fetch-retry with custom retry options including retry attempts, delay, and conditions
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/automatic-retries-in-supabase-js.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const fetchWithRetry = fetchRetry(fetch, {
  retries: 3, // Number of retry attempts
  retryDelay: (attempt) => Math.min(1000 * 2 ** attempt, 30000), // Exponential backoff
  retryOn: [520], // Retry only on Cloudflare errors
})
```

----------------------------------------

TITLE: Installing Supabase Sentry integration with pnpm
DESCRIPTION: Command to install the Supabase Sentry integration package using pnpm package manager.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
pnpm add @supabase/sentry-js-integration
```

----------------------------------------

TITLE: Configuring LinkedIn OIDC in Supabase CLI
DESCRIPTION: Configuration snippet for enabling LinkedIn OIDC in a Supabase project using the Supabase CLI through the `config.toml` file. It requires setting the `client_id` and `secret` for LinkedIn OIDC under the `[auth.external.linkedin_oidc]` section. Ensure the configuration is consistent with the required key-value pairs for authenticating users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_6

LANGUAGE: TOML
CODE:
```
[auth.external.linkedin_oidc]
enabled = true
client_id = ...
secret = ...
```

----------------------------------------

TITLE: Creating Secure Content Table in Supabase
DESCRIPTION: SQL code to create a private_posts table and populate it with dummy secure content for demonstration purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
-- Dummy table that contains "secure" information
create table
  if not exists public.private_posts (
    id int generated by default as identity primary key,
    content text not null
  );

-- Dmmy "secure" data
insert into
  public.private_posts (content)
values
  ('Flutter is awesome!'),
  ('Supabase is awesome!'),
  ('Postgres is awesome!');
```

----------------------------------------

TITLE: Using custom access_token JWT with Supabase in TypeScript
DESCRIPTION: Example of how to use a custom access_token JWT with Supabase in supabase-js v2. The new version sets the Authorization header in the createClient options.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
const supabase = createClient(
  SUPABASE_URL,
  SUPABASE_ANON_KEY,
  {
    global: {
      headers: {
        Authorization: `Bearer ${access_token}`,
      },
    },
  }
)
```

----------------------------------------

TITLE: Handling Kotlin Auth Exceptions
DESCRIPTION: This section describes how to handle exceptions originating from the `supabase.auth` namespace in Kotlin. All exceptions are subclasses of `RestException` and are categorized into `AuthRestException` (from Supabase Auth API), `AuthWeakPasswordException`, and `AuthSessionMissingException`. All instances and subclasses of `AuthRestException` include an `errorCode` property.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/debugging/error-codes.mdx#2025-04-21_snippet_4



----------------------------------------

TITLE: Viewing global autovacuum settings in PostgreSQL
DESCRIPTION: This SQL query retrieves all autovacuum-related global settings from the PostgreSQL configuration system, showing current parameter values that affect vacuum behavior.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_9

LANGUAGE: jsx
CODE:
```
SELECT * from pg_settings where category like 'Autovacuum';
```

----------------------------------------

TITLE: Update Supabase Network Restrictions via CLI
DESCRIPTION: This command updates the network restrictions for a Supabase project using the Supabase CLI. It sets the allowed IPv4 and IPv6 CIDR ranges, replacing any existing restrictions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/network-restrictions.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
> supabase network-restrictions --project-ref {ref} update --db-allow-cidr 183.12.1.1/24 --db-allow-cidr 2001:db8:3333:4444:5555:6666:7777:8888/64 --experimental
DB Allowed IPv4 CIDRs: &[183.12.1.1/24]
DB Allowed IPv6 CIDRs: &[2001:db8:3333:4444:5555:6666:7777:8888/64]
Restrictions applied successfully: true
```

----------------------------------------

TITLE: Viewing Default Access Privileges in PostgreSQL
DESCRIPTION: This snippet demonstrates how to view the current default access privileges for a schema using the \ddp command.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_18

LANGUAGE: sql
CODE:
```
postgres=> \ddp public
                          Default access privileges
┌────────────────┬────────┬──────────┬──────────────────────────────────────┐
│     Owner      │ Schema │   Type   │          Access privileges           │
├────────────────┼────────┼──────────┼──────────────────────────────────────┤
│ postgres       │ public │ function │ postgres=X/postgres                 ↵│
│                │        │          │ anon=X/postgres                     ↵│
│                │        │          │ authenticated=X/postgres            ↵│
│                │        │          │ service_role=X/postgres              │
│ postgres       │ public │ sequence │ postgres=rwU/postgres               ↵│
│                │        │          │ anon=rwU/postgres                   ↵│
│                │        │          │ authenticated=rwU/postgres          ↵│
│                │        │          │ service_role=rwU/postgres            │
│ postgres       │ public │ table    │ postgres=arwdDxt/postgres           ↵│
│                │        │          │ anon=arwdDxt/postgres               ↵│
│                │        │          │ authenticated=arwdDxt/postgres      ↵│
│                │        │          │ service_role=arwdDxt/postgres        │
│ supabase_admin │ public │ function │ postgres=X/supabase_admin           ↵│
│                │        │          │ anon=X/supabase_admin               ↵│
│                │        │          │ authenticated=X/supabase_admin      ↵│
│                │        │          │ service_role=X/supabase_admin        │
│ supabase_admin │ public │ sequence │ postgres=rwU/supabase_admin         ↵│
│                │        │          │ anon=rwU/supabase_admin             ↵│
│                │        │          │ authenticated=rwU/supabase_admin    ↵│
│                │        │          │ service_role=rwU/supabase_admin      │
│ supabase_admin │ public │ table    │ postgres=arwdDxt/supabase_admin     ↵│
│                │        │          │ anon=arwdDxt/supabase_admin         ↵│
│                │        │          │ authenticated=arwdDxt/supabase_admin↵│
│                │        │          │ service_role=arwdDxt/supabase_admin  │
└────────────────┴────────┴──────────┴──────────────────────────────────────┘
(6 rows)
```

----------------------------------------

TITLE: Exporting Collections from Fauna to Amazon S3
DESCRIPTION: Uses the Fauna CLI to export collections to Amazon S3 in JSON format. This command specifies the database name, collection name, S3 bucket, and path for the export.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-21-migrating-from-fauna-to-supabase.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
fauna export create s3 \
  --database <database_name> \
  --collection <collection_name> \
  --bucket <s3_bucket_name> \
  --path <s3_bucket_path> \
  --format simple
```

----------------------------------------

TITLE: Enabling Wasm Wrappers Extension in Supabase SQL
DESCRIPTION: This SQL code enables the Wasm Wrapper feature in Supabase. It installs the Wrappers extension and creates a Wasm foreign data wrapper.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgres-foreign-data-wrappers-with-wasm.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- install Wrappers extension
create extension if not exists wrappers with schema extensions;

-- create Wasm foreign data wrapper
create foreign data wrapper wasm_wrapper
  handler wasm_fdw_handler
  validator wasm_fdw_validator;
```

----------------------------------------

TITLE: Enabling postgres_fdw Extension in SQL
DESCRIPTION: SQL commands to enable or disable the postgres_fdw extension in a Postgres database. The extension is automatically installed within pg_catalog.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Example: enable the "postgres_fdw" extension
create extension if not exists postgres_fdw;

-- Example: disable the "postgres_fdw" extension
drop extension if exists postgres_fdw;
```

----------------------------------------

TITLE: Reload PostgREST Configuration Cache
DESCRIPTION: SQL notification command to reload PostgREST configuration after making changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
NOTIFY pgrst, 'reload config';
```

----------------------------------------

TITLE: Adding Custom Illustrations to Empty State in InnerSideMenu
DESCRIPTION: Example demonstrating how to include a custom illustration in the empty state panel. The illustration prop accepts any React node, allowing for flexible customization of the empty state appearance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/inner-side-menu.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
<InnerSideBarEmptyPanel
  title="No functions found"
  description="Create your first serverless function to get started."
  illustration={
    <figure>
      <svg>../</svg>
    </figure>
  }
/>
```

----------------------------------------

TITLE: Configuring User-Specific Logging in PGAudit
DESCRIPTION: SQL commands to set up and remove PGAudit logging for a specific database user, using 'zapier' as an example.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create user "zapier" with password '<new password>';

alter role "zapier" set pgaudit.log to 'all';

-- disables role's log
alter role "zapier" set pgaudit.log to 'none';

-- check to make sure the changes are finalized:
select
  rolname,
  rolconfig
from pg_roles
where rolname = 'zapier';
-- should return a rolconfig path with "pgaudit.log=none" present
```

----------------------------------------

TITLE: Setting Environment Variables for Express
DESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env file for an Express application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key
```

----------------------------------------

TITLE: Specifying Content Type for Uploads in Supabase Storage with Swift
DESCRIPTION: This snippet illustrates how to specify the content type when uploading a file to Supabase Storage using Swift. It uses the 'contentType' option in FileOptions to set the MIME type.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_12

LANGUAGE: swift
CODE:
```
import Supabase

// Create Supabase client
let supabase = SupabaseClient(supabaseURL: URL(string: "your_project_url")!, supabaseKey: "your_supabase_api_key")

try await supabase.storage.from("bucket_name")
  .upload(
    path: "file_path",
    file: file,
    options: FileOptions(
      contentType: "image/jpeg"
    )
  )
```

----------------------------------------

TITLE: Granting Role Ownership to Postgres in SQL
DESCRIPTION: This SQL command grants ownership of the specified role to the 'postgres' superuser, which is a necessary step before deleting the role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-delete-a-role-in-postgres-8-AvxY.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
GRANT <role> TO "postgres";
```

----------------------------------------

TITLE: Creating Wasm Foreign Data Wrapper in Supabase
DESCRIPTION: SQL command to create the Wasm foreign data wrapper that will be used to connect to Cal.com services. This is the foundation for the Cal.com integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create foreign data wrapper wasm_wrapper
  handler wasm_fdw_handler
  validator wasm_fdw_validator;
```

----------------------------------------

TITLE: Querying Airtable Data with Postgres Foreign Data Wrapper
DESCRIPTION: Example showing how to query data from Airtable bases directly through Postgres using the new Airtable Foreign Data Wrapper integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-04-beta-update-september-2023.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select * from my_airtable_table;
```

----------------------------------------

TITLE: Configuring Supabase Client Auth Settings in Kotlin
DESCRIPTION: Kotlin code to configure the authentication settings in the Supabase client, specifying the scheme and host for deep linking.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_11

LANGUAGE: kotlin
CODE:
```
install(Auth) {
   host = "login-callback"
   scheme = "io.supabase.user-management"
}
```

----------------------------------------

TITLE: Broadcasting Messages via REST API using POST Request
DESCRIPTION: This snippet shows the structure of a POST request to broadcast messages through the Supabase Realtime API. It includes the required headers and JSON body format.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/broadcast.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
POST /realtime/v1/api/broadcast HTTP/1.1
Host: {PROJECT_REF}.supabase.co
Content-Type: application/json
apikey: {SUPABASE_TOKEN}
{
  "messages": [
    {
      "topic": "test",
      "event": "event",
      "payload": {
        "test": "test"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Creating a Foreign Table for Stripe Products in PostgreSQL
DESCRIPTION: SQL command to create a foreign table that maps to Stripe products data, defining the table structure with columns for product details.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a foreign table for your Stripe products
create foreign table products (
  id text,
  name text,
  description text,
  default_price text
)
server my_stripe_server
options ( object 'products' );
```

----------------------------------------

TITLE: Modeling Server Network with Latency for Resource Allocation
DESCRIPTION: This code creates a graph structure representing a network of servers with their spatial coordinates and the connections between them, including latency costs. This model can be used for resource allocation and routing in distributed systems.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- create the servers table representing the nodes
create table servers (
  id serial primary key,
  name text,
  x double precision, -- x coordinate for spatial data (latitude)
  y double precision -- y coordinate for spatial data (longitude)
);

-- insert some sample servers
insert into servers (name, x, y)
values
  ('server a', 0, 0),
  ('server b', 2, 1),
  ('server c', 4, 3),
  ('server d', 3, 5);

-- create the server_connections table representing the edges
create table server_latency (
  id serial primary key,
  source integer,
  target integer,
  cost double precision, -- cost could represent latency or bandwidth
  x1 double precision, -- x coordinate of source
  y1 double precision, -- y coordinate of source
  x2 double precision, -- x coordinate of target
  y2 double precision, -- y coordinate of target,
  constraint fk_source foreign key (source) references servers (id),
  constraint fk_target foreign key (target) references servers (id)
);

-- insert connections between servers
insert into server_latency (source, target, cost, x1, y1, x2, y2)
values
  (1, 2, 1.5, 0, 0, 2, 1), -- server a -> server b with a cost of 1.5 (could be latency)
  (2, 3, 2.0, 2, 1, 4, 3), -- server b -> server c with a cost of 2.0
  (2, 4, 1.8, 2, 1, 3, 5), -- server b -> server d with a cost of 1.8
  (4, 3, 1.0, 3, 5, 4, 3);
-- server d -> server c with a cost of 1.0
```

----------------------------------------

TITLE: Database Operation Permissions Matrix
DESCRIPTION: SQL operation permissions comparison between Primary and Read Replica databases, showing that Read Replicas only support SELECT operations while Primary databases support all CRUD operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-15-introducing-read-replicas.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
|              | `select` | `insert` | `update` | `delete` |
| ------------ | -------- | -------- | -------- | -------- |
| Primary      | ✅       | ✅       | ✅       | ✅       |
| Read Replica | ✅       | -        | -        | -        |
```

----------------------------------------

TITLE: Setting IVFFlat Probes for Transaction in SQL
DESCRIPTION: SQL commands to set the number of probes for IVFFlat index only for the current transaction. This example sets the number of probes to 10 within a transaction block.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/vector-indexes/ivf-indexes.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
begin;
set local ivfflat.probes = 10;
select ...
commit;
```

----------------------------------------

TITLE: Chrome Extension Manifest Configuration
DESCRIPTION: Manifest configuration for enabling Google sign-in in Chrome extensions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#2025-04-21_snippet_17

LANGUAGE: json
CODE:
```
{
  "permissions": ["identity"],
  "oauth2": {
    "client_id": "<client ID>",
    "scopes": ["openid", "email", "profile"]
  }
}
```

----------------------------------------

TITLE: Android Deep Link Configuration (Flutter)
DESCRIPTION: This XML snippet demonstrates how to configure deep linking in the AndroidManifest.xml file for a Flutter application.  It sets up an intent filter to handle URIs with a specific scheme and host, allowing the app to be opened via deep links.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_2

LANGUAGE: xml
CODE:
```
<manifest ...>
  <!-- ... other tags -->
  <application ...>
    <activity ...>
      <!-- ... other tags -->

      <!-- Deep Links -->
      <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <!-- Accepts URIs that begin with YOUR_SCHEME://YOUR_HOST -->
        <data
          android:scheme="YOUR_SCHEME"
          android:host="YOUR_HOSTNAME" />
      </intent-filter>
    </activity>
  </application>
</manifest>
```

----------------------------------------

TITLE: Implementing Chart Legend in React/TSX
DESCRIPTION: Demonstrates how to implement a chart legend using the ChartLegend component with ChartLegendContent as its content.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/chart.mdx#2025-04-21_snippet_15

LANGUAGE: tsx
CODE:
```
<ChartLegend content={<ChartLegendContent />} />
```

----------------------------------------

TITLE: Initializing Supabase in v0 vs v1
DESCRIPTION: Shows the change in Supabase initialization. In v1, SupabaseAuthState and SupabaseAuthRequiredState are deprecated, and token refresh happens automatically upon initialization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
);
...

class AuthState<T extends StatefulWidget> extends SupabaseAuthState<T> {
  ...
}

...

class AuthRequiredState<T extends StatefulWidget> extends SupabaseAuthState<T> {
  ...
}
```

LANGUAGE: dart
CODE:
```
await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
);
```

----------------------------------------

TITLE: Creating Initial Physical Backup with WAL-G
DESCRIPTION: Command to create the first physical backup of the PostgreSQL database using WAL-G, pushing it to the configured S3 bucket.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
$ sudo -su postgres envdir /etc/wal-g.d/env /usr/local/bin/wal-g backup-push /var/lib/postgresql/12/main
```

----------------------------------------

TITLE: Querying Data by Age in PostgreSQL
DESCRIPTION: A simple SQL query that selects name from the persons table where age equals 32. Without an index, this query would require a sequential scan of the entire table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select name from persons where age = 32;
```

----------------------------------------

TITLE: GitLab CI Pipeline for Edge Functions
DESCRIPTION: GitLab CI pipeline configuration that sets up Node.js environment and deploys Edge Functions. Includes stages for setup and deployment, with Docker service integration for function deployment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/cicd-workflow.mdx#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
image: node:20

stages:
  - setup
  - deploy

setup-npm:
  stage: setup
  script:
    - npm i supabase
  cache:
    paths:
      - node_modules/
  artifacts:
    paths:
      - node_modules/

deploy-function:
  stage: deploy
  script:
    - npx supabase init
    - npx supabase functions deploy --debug
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
```

----------------------------------------

TITLE: Adding Filtering Capability to TanStack Table in React
DESCRIPTION: Enhances the DataTable component with filtering functionality using column filters state. Implements a search input that filters the email column and updates the table's filtering state.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_12

LANGUAGE: tsx
CODE:
```
"use client"

import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      sorting,
      columnFilters,
    },
  })

  return (
    <div>
      <div className="flex items-center py-4">
        <Input
          placeholder="Filter emails..."
          value={(table.getColumn("email")?.getFilterValue() as string) ?? ""}
          onChange={(event) =>
            table.getColumn("email")?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
      </div>
      <div className="rounded-md border">
        <Table>{ ... }</Table>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Setting Slack Token Secret for Supabase Edge Function
DESCRIPTION: Command to set the SLACK_TOKEN secret in your Supabase project using the CLI. This token is required for authenticating with the Slack API.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/slack-bot-mention/slack-bot-mention.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase --project-ref nacho_slacker secrets \
set SLACK_TOKEN=<xoxb-0000000000-0000000000-01010101010nacho101010>
```

----------------------------------------

TITLE: Setting Up Foreign Data Wrapper for External Database Integration
DESCRIPTION: Creates external schema and configures PostgreSQL foreign data wrapper to connect with an external database storing user and document data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create schema external;
create extension postgres_fdw with schema extensions;

create server foreign_server
  foreign data wrapper postgres_fdw
  options (host '<db-host>', port '<db-port>', dbname '<db-name>');

create user mapping for authenticated
  server foreign_server
  options (user 'postgres', password '<user-password>');

import foreign schema public limit to (users, documents)
  from server foreign_server into external;
```

----------------------------------------

TITLE: Querying System Variables in Postgres
DESCRIPTION: SQL query to view all system variables in Postgres. This query retrieves all settings from the pg_settings table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
-- view system variables
select * from pg_settings;
```

----------------------------------------

TITLE: Creating Basic Table Example with SQL
DESCRIPTION: Example of a simple table creation that generates an audit log entry
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create table account (
  id int primary key,
  name text,
  description text
);
```

----------------------------------------

TITLE: Using Basic Aggregate Functions with cURL in PostgREST
DESCRIPTION: This snippet demonstrates how to use max() and min() aggregate functions on the release_year column from a movies table using a cURL request to the PostgREST API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ curl 'http://postgrest/movies?select=release_year.max(),release_year.min()'
```

----------------------------------------

TITLE: Batch Processing HTTP Requests for Multiple Table Rows
DESCRIPTION: Demonstrates how to aggregate multiple table rows into a single JSON payload and send them in one HTTP request using pg_net. Includes a recommended LIMIT practice for performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_20

LANGUAGE: sql
CODE:
```
with "selected_table_rows" as (
    select
        -- Converts all the rows into a JSONB array
        jsonb_agg(to_jsonb(<table_name>.*)) as JSON_payload
    from <table_name>
    -- good practice to LIMIT the max amount of rows
)
select
    net.http_post(
        url := 'https://postman-echo.com/post'::text,
        body := JSON_payload
    ) AS request_id
FROM "selected_table_rows";
```

----------------------------------------

TITLE: Setting OpenAI API Key in Python Environment
DESCRIPTION: Code to configure the OpenAI API key as an environment variable for LlamaIndex integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/llamaindex.mdx#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import os
os.environ['OPENAI_API_KEY'] = "[your_openai_api_key]"
```

----------------------------------------

TITLE: Synchronizing Existing Database Schema with npm
DESCRIPTION: Command to pull the existing database schema into your Prisma models for projects with an already populated database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_16

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Checking Replication Status
DESCRIPTION: Queries the pg_stat_replication system view to monitor the status of the replication process and ensure it's working correctly.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/setup-replication-external.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select * from pg_stat_replication;
```

----------------------------------------

TITLE: Initializing Flutter Project for Supabase Integration
DESCRIPTION: Commands to create a new Flutter project and add the Supabase Flutter dependency in the pubspec.yaml file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
flutter create supabase_quickstart
```

LANGUAGE: yaml
CODE:
```
supabase_flutter: ^2.0.0
```

----------------------------------------

TITLE: Altering view owner in PostgreSQL
DESCRIPTION: SQL command to change the owner of a view, which is critical for Row Level Security to work with views.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
ALTER VIEW my_view OWNER TO authenticated;
```

----------------------------------------

TITLE: Joining Remote Snowflake Data with Local PostgreSQL Tables
DESCRIPTION: SQL query demonstrating how to join remote Snowflake data with local PostgreSQL tables to enrich existing data and count user purchase events.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
select
  users.id,
  count(order_history.event)
from
  snowflake.order_history
  join auth.users on auth.users.id = snowflake.order_history.user_id
where order_history.event = 'purchase' and order_history.user_id = '<some_user_id>';
```

----------------------------------------

TITLE: Deploying Supabase Edge Function
DESCRIPTION: Commands for deploying the postgres-on-the-edge function and setting environment variables from a .env file
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/postgres-on-the-edge/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions deploy --no-verify-jwt postgres-on-the-edge
```

LANGUAGE: bash
CODE:
```
supabase secrets set --env-file supabase/functions/postgres-on-the-edge/.env
```

----------------------------------------

TITLE: Configuring Telegram Webhook URL
DESCRIPTION: URL format to set the webhook for your Telegram bot, connecting it to your Supabase Edge Function. This needs to be executed in a browser or with an HTTP client.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/telegram-bot/README.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
https://api.telegram.org/bot<TELEGRAM_BOT_TOKEN>/setWebhook?url=https://<PROJECT_REFERENCE>.supabase.co/functions/v1/telegram-bot?secret=<FUNCTION_SECRET>
```

----------------------------------------

TITLE: Basic Pagination Implementation Example
DESCRIPTION: Example showing how to use pagination components to create a pagination interface with previous/next buttons, numbered links, and ellipsis.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/pagination.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Pagination>
  <PaginationContent>
    <PaginationItem>
      <PaginationPrevious href="#" />
    </PaginationItem>
    <PaginationItem>
      <PaginationLink href="#">1</PaginationLink>
    </PaginationItem>
    <PaginationItem>
      <PaginationEllipsis />
    </PaginationItem>
    <PaginationItem>
      <PaginationNext href="#" />
    </PaginationItem>
  </PaginationContent>
</Pagination>
```

----------------------------------------

TITLE: Configuring Project URL for Geo-Routing
DESCRIPTION: Example format for the project URL endpoint that enables geo-routing functionality. Replace project_ref with your actual project reference.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-04-data-api-nearest-read-replica.mdx#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
<project_ref>-all.supabase.co
```

----------------------------------------

TITLE: Stop Tracking Presence in Python
DESCRIPTION: This snippet demonstrates how to untrack presence in Python with the untrack method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_19

LANGUAGE: python
CODE:
```
room_one.untrack()
```

----------------------------------------

TITLE: Creating Range Partitioned Sales Table in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a range partitioned table for sales data based on order date. It creates a parent table and two monthly partitions for January and February 2000.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/partitions.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table sales (
    id bigint generated by default as identity,
    order_date date not null,
    customer_id bigint,
    amount bigint,

    -- We need to include all the
    -- partitioning columns in constraints:
    primary key (order_date, id)
)
partition by range (order_date);

create table sales_2000_01
	partition of sales
  for values from ('2000-01-01') to ('2000-02-01');

create table sales_2000_02
	partition of sales
	for values from ('2000-02-01') to ('2000-03-01');
```

----------------------------------------

TITLE: Basic Breadcrumb Implementation
DESCRIPTION: Basic example showing how to structure a breadcrumb navigation with multiple levels.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/breadcrumb.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Breadcrumb>
  <BreadcrumbList>
    <BreadcrumbItem>
      <BreadcrumbLink href="/">Home</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbSeparator />
    <BreadcrumbItem>
      <BreadcrumbLink href="/components">Components</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbSeparator />
    <BreadcrumbItem>
      <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
    </BreadcrumbItem>
  </BreadcrumbList>
</Breadcrumb>
```

----------------------------------------

TITLE: ClickHouse Query Pushdown with Order and Limit
DESCRIPTION: Shows how to use query pushdown with ClickHouse FDW including order by and limit clauses.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-wrappers-v02.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select *
from clickhouse.people
order by name
limit 20;
```

----------------------------------------

TITLE: Configuring Next.js to Use Custom Image Loader
DESCRIPTION: This snippet shows how to configure Next.js to use a custom loader for image optimization in the nextjs.config.js file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_20

LANGUAGE: javascript
CODE:
```
module.exports = {
  images: {
    loader: 'custom',
    loaderFile: './supabase-image-loader.js',
  },
}
```

----------------------------------------

TITLE: Configuring Nuxt Application
DESCRIPTION: Nuxt configuration file setup with Supabase module and CSS styling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { defineNuxtConfig } from 'nuxt'

// https://v3.nuxtjs.org/api/configuration/nuxt.config
export default defineNuxtConfig({
  modules: ['@nuxtjs/supabase'],
  css: ['@/assets/main.css'],
})
```

----------------------------------------

TITLE: Generating Embeddings with OpenAI in TypeScript Edge Function
DESCRIPTION: This TypeScript function shows the implementation of embedding generation using OpenAI's API. It sends the text to OpenAI's embedding model and returns the resulting vector, which will be stored in the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
/**
 * Generates an embedding for the given text.
 */
async function generateEmbedding(text: string) {
  const response = await openai.embeddings.create({
    model: 'text-embedding-3-small',
    input: text,
  })
  const [data] = response.data
  if (!data) {
    throw new Error('failed to generate embedding')
  }
  return data.embedding
}
```

----------------------------------------

TITLE: IP and Browser Data Query
DESCRIPTION: SQL query for accessing IP and browser information from edge logs by unnesting metadata, request, and headers fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select
  cf_connecting_ip
from
  edge_logs
-- Unpack 'metadata' field
cross join unnest(metadata) AS metadata
-- unpack 'request' from 'metadata'
cross join unnest(request) AS request;
-- unpack 'headers' from 'request'
cross join unnest(headers) AS headers;
```

----------------------------------------

TITLE: Initializing Supabase Client with Firebase Auth in Kotlin (Multiplatform)
DESCRIPTION: Creates a Supabase client for Kotlin Multiplatform applications, using a community Firebase SDK to retrieve the Firebase Auth JWT of the current user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_4

LANGUAGE: kotlin
CODE:
```
import dev.gitlive.firebase.Firebase
import dev.gitlive.firebase.auth.auth

val supabase = createSupabaseClient(
    "https://<supabase-project>.supabase.co",
    "SUPABASE_ANON_KEY"
) {
    accessToken = {
        Firebase.auth.currentUser?.getIdToken(false)
    }
}
```

----------------------------------------

TITLE: Displaying Supabase OAuth Callback URL Format
DESCRIPTION: Shows the structure of the callback URL used for OAuth authentication in Supabase projects. The URL includes a project-specific reference.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/social_provider_setup.mdx#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
https://<project-ref>.supabase.co/auth/v1/callback
```

----------------------------------------

TITLE: Querying Storage Egress Requests in Supabase Logs Explorer
DESCRIPTION: This SQL query retrieves the number of GET requests for each object in the Supabase storage, helping to identify frequently accessed files for bandwidth calculation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/bandwidth.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select
  r.method as http_verb,
  r.path as filepath,
  count(*) as num_requests
from
  edge_logs
  cross join unnest(metadata) as m
  cross join unnest(m.request) as r
  cross join unnest(r.headers) as h
where (path like '%storage/v1/object/%' or path like '%storage/v1/render/%') and r.method = 'GET'
group by r.path, r.method
order by num_requests desc
limit 100;
```

----------------------------------------

TITLE: Listing Banned IPs with Supabase CLI
DESCRIPTION: Command to list all IP addresses that have been banned from connecting to your Supabase project database. This helps identify which IP addresses have been blocked by Fail2ban after failed login attempts.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/error-connection-refused-when-trying-to-connect-to-supabase-database-hwG0Dr.mdx#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
% supabase network-bans get --project-ref <project_reference_id> --experimental
```

----------------------------------------

TITLE: Adding Project URL to Vault for Local Development
DESCRIPTION: SQL command to add the project URL secret to vault for local Supabase development environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select
  vault.create_secret('http://api.supabase.internal:8000', 'project_url');
```

----------------------------------------

TITLE: Implementing Google Maps Component Logic
DESCRIPTION: TypeScript implementation for Google Maps initialization and marker management in the HomePage component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_19

LANGUAGE: typescript
CODE:
```
import { Component, ElementRef, ViewChild } from '@angular/core'
import { GoogleMap } from '@capacitor/google-maps'
import { LatLngBounds } from '@capacitor/google-maps/dist/typings/definitions'
import { ModalController } from '@ionic/angular'
import { BehaviorSubject } from 'rxjs'
import { environment } from 'src/environments/environment'
import { NearbyPage } from '../nearby/nearby.page'
import { StoreResult, StoresService } from '../services/stores.service'
import { StorePage } from '../store/store.page'

export interface StoreMarker {
  markerId: string
  storeId: number
}

@Component({
  selector: 'app-home',
  templateUrl: 'home.page.html',
  styleUrls: ['home.page.scss'],
})
export class HomePage {
  @ViewChild('map') mapRef!: ElementRef<HTMLElement>
  map!: GoogleMap
  mapBounds = new BehaviorSubject<LatLngBounds | null>(null)
  activeMarkers: StoreMarker[] = []
  selectedMarker: StoreMarker | null = null
  selectedStore: StoreResult | null = null

  constructor(
    private storesService: StoresService,
    private modalCtrl: ModalController
  ) {}

  ionViewDidEnter() {
    this.createMap()
  }

  async createMap() {
    this.map = await GoogleMap.create({
      forceCreate: true,
      id: 'my-map',
      element: this.mapRef.nativeElement,
      apiKey: environment.mapsKey,
      config: {
        center: {
          lat: 51.8,
          lng: 7.6,
        },
        zoom: 7,
      },
    })
    this.map.enableCurrentLocation(true)
  }

  async showNearby() {
    const modal = await this.modalCtrl.create({
      component: NearbyPage,
    })
    modal.present()
  }

  async addStore() {
    const modal = await this.modalCtrl.create({
      component: StorePage,
    })
    modal.present()
  }
}
```

----------------------------------------

TITLE: Signing Up New User using Supabase in Dart
DESCRIPTION: This Dart snippet shows how to sign up a new user with an email address and password using Supabase's Dart client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_12

LANGUAGE: dart
CODE:
```
Future<void> signUpNewUser() async {
  final AuthResponse res = await supabase.auth.signUp(
    email: 'valid.email@supabase.io',
    password: 'example-password'
  );
}
```

----------------------------------------

TITLE: Conditional Email Content with Go Templates
DESCRIPTION: A Go Template example that renders different email content based on the user's domain. This demonstrates how to personalize emails for different user segments like early access users versus regular users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-templates.mdx#2025-04-21_snippet_3

LANGUAGE: html
CODE:
```
{{ if eq .Data.Domain "https://www.example.com" }}
<h1>Welcome to Our Database Service!</h1>
  <p>Dear Developer,</p>
  <p>Welcome to Billy, the scalable developer platform!</p>
  <p>Best Regards,<br>
Billy Team</p>
{{ else if eq .Data.Domain "https://www.earlyaccess.trial.com" }}
<h1>Welcome to Our Database Service!</h1>
  <p>Dear Developer,</p>
  <p>Welcome Billy, the scalable developer platform!</p>
  <p> As an early access member, you have access to select features like Point To Space Restoration.</p>
  <p>Best Regards,<br>
Billy Team</p>
{{ end }}
```

----------------------------------------

TITLE: Configuring Toaster Position
DESCRIPTION: Demonstrates how to set the position property on the Toaster component to control toast placement.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sonner.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
<Toaster
  position={
    'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'top-center' | 'bottom-center'
  }
/>
```

----------------------------------------

TITLE: Exception Handling in Functions
DESCRIPTION: Example of capturing and modifying error messages using exception handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
create function error_example()
returns void
language plpgsql
as $$
begin
  -- fails: cannot read from nonexistent table
  select * from table_that_does_not_exist;

  exception
      when others then
          raise exception 'An error occurred in function <function name>: %', sqlerrm;
end;
$$;
```

----------------------------------------

TITLE: Initializing S3 Client with Access Keys in JavaScript
DESCRIPTION: This snippet shows how to initialize an S3 client using the AWS SDK for JavaScript, authenticating with S3 access keys. It requires the `@aws-sdk/client-s3` package. Replace `project_region`, `project_ref`, `your_access_key_id`, and `your_secret_access_key` with your actual Supabase project credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/s3/authentication.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { S3Client } from '@aws-sdk/client-s3';

        const client = new S3Client({
          forcePathStyle: true,
          region: 'project_region',
          endpoint: 'https://project_ref.supabase.co/storage/v1/s3',
          credentials: {
            accessKeyId: 'your_access_key_id',
            secretAccessKey: 'your_secret_access_key',
          }
        })
```

----------------------------------------

TITLE: Next.js Instrumentation Hook for Sentry with Supabase
DESCRIPTION: Next.js instrumentation file that imports the appropriate Sentry configuration based on the runtime environment. Handles both Node.js and edge runtimes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_9

LANGUAGE: js
CODE:
```
// https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation
export async function register() {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    await import('./sentry.server.config')
  }

  if (process.env.NEXT_RUNTIME === 'edge') {
    await import('./sentry.edge.config')
  }
}
```

----------------------------------------

TITLE: Querying Snowflake Data Through PostgreSQL
DESCRIPTION: SQL query to fetch data directly from Snowflake through the foreign data wrapper connection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select * from snowflake.order_history limit 1000;
```

----------------------------------------

TITLE: Adding Moshi serializer dependency in Maven POM file
DESCRIPTION: This XML snippet shows how to add the Moshi serializer dependency in a Maven project. It's required for using Moshi as the serialization method in supabase-kt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_13

LANGUAGE: xml
CODE:
```
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>serializer-moshi</artifactId>
    <version>VERSION</version>
</dependency>
```

----------------------------------------

TITLE: Setting Environment Variables for Supabase
DESCRIPTION: Environment variables configuration for Supabase URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
SUPABASE_URL=YOUR_SUPABASE_URL
SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Creating and Populating Test Table in SQL
DESCRIPTION: SQL commands to create a sample table named 'your_table_name' and insert 20 rows of test data. This setup is used to demonstrate the latency issue when querying via Supabase client vs. direct Postgres connection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/high-latency-with-supabase-client-z0pZzR.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create table
CREATE TABLE your_table_name (
    id UUID PRIMARY KEY,
    column1 TEXT,
    column2 INT,
    column3 BOOLEAN
);

-- Insert statements
INSERT INTO your_table_name (id, column1, column2, column3) VALUES
    (uuid_generate_v4(), 'value1', 10, TRUE),
    (uuid_generate_v4(), 'value2', 20, FALSE),
    (uuid_generate_v4(), 'value3', 15, TRUE),
    (uuid_generate_v4(), 'value4', 8, FALSE),
    (uuid_generate_v4(), 'value5', 25, TRUE),
    (uuid_generate_v4(), 'value6', 12, FALSE),
    (uuid_generate_v4(), 'value7', 18, TRUE),
    (uuid_generate_v4(), 'value8', 30, FALSE),
    (uuid_generate_v4(), 'value9', 22, TRUE),
    (uuid_generate_v4(), 'value10', 5, FALSE),
    (uuid_generate_v4(), 'value11', 17, TRUE),
    (uuid_generate_v4(), 'value12', 9, FALSE),
    (uuid_generate_v4(), 'value13', 14, TRUE),
    (uuid_generate_v4(), 'value14', 28, FALSE),
    (uuid_generate_v4(), 'value15', 11, TRUE),
    (uuid_generate_v4(), 'value16', 7, FALSE),
    (uuid_generate_v4(), 'value17', 19, TRUE),
    (uuid_generate_v4(), 'value18', 26, FALSE),
    (uuid_generate_v4(), 'value19', 16, TRUE),
    (uuid_generate_v4(), 'value20', 21, FALSE);
```

----------------------------------------

TITLE: Querying Star Wars API using Postgres HTTP Extension
DESCRIPTION: This SQL query demonstrates how to use the pgsql-http extension to make a GET request to the Star Wars API and retrieve a list of people.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select content::json->'results'
from http_get('https://swapi.dev/api/people');
```

----------------------------------------

TITLE: PostgreSQL Query Planning and Execution Time Example
DESCRIPTION: Shows the typical planning and execution time metrics for a simple PostgreSQL query, demonstrating why prepared statements are important for performance optimization in WALRUS.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-01-realtime-row-level-security-in-postgresql.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
"Planning Time: 0.099 ms"
"Execution Time: 0.051 ms"
```

----------------------------------------

TITLE: Checking last vacuum and autovacuum run times in PostgreSQL
DESCRIPTION: This SQL query retrieves the timestamps of the last manual vacuum and automatic vacuum runs for a specific table from system catalogs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
SELECT
	last_vacuum,
	last_autovacuum
FROM
	pg_stat_user_tables
WHERE
	relname = 'mytable';
```

----------------------------------------

TITLE: Deploying Supabase Function for OG Image Generation
DESCRIPTION: Command to deploy the 'lw11-og' Supabase function for Open Graph image generation. This deployment configuration disables JWT verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/supabase/functions/lw11-og/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions deploy lw11-og --no-verify-jwt
```

----------------------------------------

TITLE: Remix OAuth Callback Handler
DESCRIPTION: Implementation of OAuth callback handling in Remix, managing cookies and code exchange process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { redirect, type LoaderFunctionArgs } from '@remix-run/node'
import { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'

export async function loader({ request }: LoaderFunctionArgs) {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')
  const next = requestUrl.searchParams.get('next') || '/'
  const headers = new Headers()

  if (code) {
    const supabase = createServerClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {
      cookies: {
        getAll() {
          return parseCookieHeader(request.headers.get('Cookie') ?? '')
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) =>
            headers.append('Set-Cookie', serializeCookieHeader(name, value, options))
          )
        },
      },
    })

    const { error } = await supabase.auth.exchangeCodeForSession(code)

    if (!error) {
      return redirect(next, { headers })
    }
  }

  // return the user to an error page with instructions
  return redirect('/auth/auth-code-error', { headers })
}
```

----------------------------------------

TITLE: Installing Supabase CLI with npm
DESCRIPTION: Command to install the Supabase CLI globally using npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install -g supabase
```

----------------------------------------

TITLE: Spread Embedded Resources Aggregation Response in JSON
DESCRIPTION: This JSON response shows the result of using aggregate functions with spread embedded resources, displaying the average box office earnings grouped by director's country.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-29-postgrest-aggregate-functions.mdx#2025-04-21_snippet_11

LANGUAGE: json
CODE:
```
[
  {
    "avg_earnings": 10200000.38,
    "country": "Spain"
  },
  {
    "avg_earnings": 8933333.79,
    "country": "India"
  },
  {
    "avg_earnings": 8933333.84,
    "country": "United States"
  }
]
```

----------------------------------------

TITLE: Creating a Scalar Function with plv8
DESCRIPTION: Example of a scalar function that takes input and returns a text value. This simple function demonstrates string interpolation in JavaScript within PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create or replace function hello_world(name text)
returns text as $$

    let output = `Hello, ${name}!`;
    return output;

$$ language plv8;
```

----------------------------------------

TITLE: Deleting Queue Messages
DESCRIPTION: Function to permanently delete a specific message from a queue. Takes queue name and message ID as parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/api.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
pgmq_public.delete(queue_name text, message_id bigint)
```

----------------------------------------

TITLE: Uploading Postgres Documentation to the Datastore
DESCRIPTION: cURL command to upload Postgres documentation PDF to the ChatGPT Retrieval Plugin's datastore using the /upsert-file endpoint.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/building-chatgpt-plugins.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
curl -X POST -F "file=@./postgresql-15-US.pdf" http://localhost:3333/upsert-file
```

----------------------------------------

TITLE: Supavisor Transaction Mode Connection Example
DESCRIPTION: Connection string example for Supavisor in transaction mode using port 6543.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supabase--your-network-ipv4-and-ipv6-compatibility-cHe3BP.mdx#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
# Example transaction string
postgresql://postgres.ajrbwkcuthywddfihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres
```

----------------------------------------

TITLE: Deploying Discord Bot to Supabase Edge Functions
DESCRIPTION: This snippet demonstrates how to deploy the Discord bot to Supabase Edge Functions and set the required environment variable for Discord's public key authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/discord-bot.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase functions deploy discord-bot --no-verify-jwt
supabase secrets set DISCORD_PUBLIC_KEY=your_public_key
```

----------------------------------------

TITLE: Creating Secure Function for FDW Access
DESCRIPTION: SQL function creation with security definer to safely expose FDW data through the API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create function public.get_stripe_products(name_prefix text)
returns table (
  id text,
  name text,
  active boolean,
  default_price text,
  description text
)
language plpgsql
security definer set search_path = ''
as $$
begin
  return query
  select
    t.id,
    t.name,
    t.active,
    t.default_price,
    t.description
  from
    stripe.stripe_products t
  where
    t.name like name_prefix || '%'
  ;
end;
$$;
```

----------------------------------------

TITLE: Stop Tracking Presence in Swift
DESCRIPTION: This snippet demonstrates the untrack method in Swift for stopping presence tracking.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_17

LANGUAGE: swift
CODE:
```
await roomOne.untrack()
```

----------------------------------------

TITLE: JWT Payload Example
DESCRIPTION: This JavaScript code snippet shows the structure of a JWT payload. The payload contains claims about the user and the token itself.  This example shows claims such as `sub` (subject), `name`, `iat` (issued at), and `exp` (expiration time).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
{
  "sub": "0001",
  "name": "Sam Vimes",
  "iat": 1516239022,
  "exp": 1518239022
}
```

----------------------------------------

TITLE: Getting User Metadata - Dart
DESCRIPTION: Retrieves the current user's metadata in Dart after signing in.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_7

LANGUAGE: dart
CODE:
```
final User? user = supabase.auth.currentUser;
final Map<String, dynamic>? metadata = user?.userMetadata;
```

----------------------------------------

TITLE: Implementing Nearby Places Component with Geolocation
DESCRIPTION: A TypeScript component that fetches nearby store locations using Capacitor's geolocation and the StoresService. It displays a loading indicator while fetching the data and stores the results for display.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
import { Component, OnInit } from '@angular/core'
import { Geolocation } from '@capacitor/geolocation'
import { StoresService, StoreResult } from '../services/stores.service'
import { LoadingController, ModalController } from '@ionic/angular'

@Component({
  selector: 'app-nearby',
  templateUrl: './nearby.page.html',
  styleUrls: ['./nearby.page.scss'],
})
export class NearbyPage implements OnInit {
  stores: StoreResult[] = []

  constructor(
    private storesService: StoresService,
    public modalCtrl: ModalController,
    private loadingCtrl: LoadingController
  ) {}

  async ngOnInit() {
    // Show loading while getting data from Supabase
    const loading = await this.loadingCtrl.create({
      message: 'Loading nearby places...',
    })
    loading.present()

    const coordinates = await Geolocation.getCurrentPosition()

    if (coordinates) {
      // Get nearby places sorted by distance using PostGIS
      this.stores = await this.storesService.getNearbyStores(
        coordinates.coords.latitude,
        coordinates.coords.longitude
      )
      loading.dismiss()
    }
  }
}
```

----------------------------------------

TITLE: Configuring GraphQL Schema with Comment Directives in PostgreSQL
DESCRIPTION: Example of using the new pg_graphql v0.1.0 comment directives feature to rename a table in the GraphQL schema. This demonstrates how to create a table named 'account' and use a comment directive to rename it to 'AccountHolder' in the GraphQL schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-02-22-supabase-beta-january-2022.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table account(
    id serial primary key
);

comment on table public.account is
e'@graphql({ "name": "AccountHolder" })';
```

----------------------------------------

TITLE: Dropping Old Column in Postgres
DESCRIPTION: This SQL command removes the old column from the table after the data has been successfully migrated to the new column. It's the final step in the alternative approach.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/slow-execution-of-alter-table-on-large-table-when-changing-column-type-qmZRpZ.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
ALTER TABLE "table_name" DROP COLUMN "old_column_name";
```

----------------------------------------

TITLE: Loading dat.gui Asynchronously in React
DESCRIPTION: This code shows how to load the dat.gui library asynchronously to avoid 'window is not defined' errors in server-side rendering environments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-04-interactive-constellation-threejs-react-three-fiber.mdx#2025-04-21_snippet_13

LANGUAGE: jsx
CODE:
```
const init = async () => {
  const dat = await import('dat.gui')
  const gui = new dat.GUI()
}

useEffect(() => {
  init()
}, [])
```

----------------------------------------

TITLE: Creating a Postgres View for Public Ticket Data (SQL)
DESCRIPTION: This SQL query creates a view that publicizes selected ticket data and computes additional values, such as referral count and golden ticket status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-07-designing-with-ai-midjourney.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
drop view if exists lw7_tickets_golden;

create or replace view lw7_tickets_golden as
  with
    lw7_referrals as (
      select
        referred_by,
        count(*) as referrals
      from lw7_tickets
      where referred_by is not null
      group by referred_by
    )
  select
    lw7_tickets."id",
    lw7_tickets."name",
    lw7_tickets."username",
    lw7_tickets."ticketNumber",
    lw7_tickets."createdAt",
    lw7_tickets."sharedOnTwitter",
    lw7_tickets."sharedOnLinkedIn",
    lw7_tickets."bg_image_id",
    case
      when lw7_referrals.referrals is null then 0
      else lw7_referrals.referrals
    end as referrals,
    case
      when lw7_tickets."sharedOnTwitter" is not null
      and lw7_tickets."sharedOnLinkedIn" is not null then true
      else false
    end as golden
  from
    lw7_tickets
    left outer join lw7_referrals on lw7_tickets.username = lw7_referrals.referred_by;

select *
from lw7_tickets_golden;
```

----------------------------------------

TITLE: Downloading Supabase Storage Buckets using CLI
DESCRIPTION: Series of CLI commands to authenticate, link to a project, initialize Supabase, and download storage bucket contents to the current directory. Requires Supabase CLI installation and proper project credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pausing-pro-projects-vNL-2a.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
npx supabase login

# link to your project
npx supabase link

npx supabase init

# will download files to current folder
npx supabase storage cp -r ss://bucket . --experimental
```

----------------------------------------

TITLE: JSON Schema Definition for SMS Hook
DESCRIPTION: Comprehensive JSON schema defining the structure and validation rules for the SMS hook input data, including user and SMS properties.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "type": "object",
  "properties": {
    "user": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-faker": "random.uuid"
        },
        "aud": {
          "type": "string",
          "enum": ["authenticated"]
        },
        "role": {
          "type": "string",
          "enum": ["anon", "authenticated"]
        },
        "email": {
          "type": "string",
          "x-faker": "internet.email"
        },
        "phone": {
          "type": "string",
          "x-faker": {
            "fake": "{{phone.phoneNumber('+1##########')}}"
          }
        },
        "phone_confirmed_at": {
          "type": "string",
          "format": "date-time",
          "x-faker": "date.recent"
        },
        "confirmation_sent_at": {
          "type": "string",
          "format": "date-time",
          "x-faker": "date.recent"
        },
        "confirmed_at": {
          "type": "string",
          "format": "date-time",
          "x-faker": "date.recent"
        },
        "phone_change_sent_at": {
          "type": "string",
          "format": "date-time",
          "x-faker": "date.recent"
        },
        "last_sign_in_at": {
          "type": "string",
          "format": "date-time",
          "x-faker": "date.recent"
        },
        "app_metadata": {
          "type": "object",
          "properties": {
            "provider": {
              "type": "string",
              "enum": ["phone"]
            },
            "providers": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["phone"]
              }
            }
          }
        },
        "user_metadata": {
          "type": "object",
          "x-faker": "random.objectElement"
        },
        "identities": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "identity_id": {
                "type": "string",
                "x-faker": "random.uuid"
              },
              "id": {
                "type": "string",
                "x-faker": "random.uuid"
              },
              "user_id": {
                "type": "string",
                "x-faker": "random.uuid"
              },
              "identity_data": {
                "type": "object",
                "properties": {
                  "email_verified": {
                    "type": "boolean",
                    "x-faker": "random.boolean"
                  },
                  "phone": {
                    "type": "string",
                    "x-faker": {
                      "fake": "{{phone.phoneNumber('+1##########')}}"
                    }
                  },
                  "phone_verified": {
                    "type": "boolean",
                    "x-faker": "random.boolean"
                  },
                  "sub": {
                    "type": "string",
                    "x-faker": "random.uuid"
                  }
                }
              },
              "provider": {
                "type": "string",
                "enum": ["phone", "email", "google"]
              },
              "last_sign_in_at": {
                "type": "string",
                "format": "date-time",
                "x-faker": "date.recent"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "x-faker": "date.recent"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "x-faker": "date.recent"
              }
            },
            "required": [
              "identity_id",
              "id",
              "user_id",
              "identity_data",
              "provider",
              "last_sign_in_at",
              "created_at",
              "updated_at"
            ]
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-faker": "date.recent"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-faker": "date.recent"
        },
        "is_anonymous": {
          "type": "boolean",
          "x-faker": "random.boolean"
        }
      },
      "required": [
        "id",
        "aud",
        "role",
        "email",
        "phone",
        "phone_confirmed_at",
        "confirmation_sent_at",
        "confirmed_at",
        "phone_change_sent_at",
        "last_sign_in_at",
        "app_metadata",
        "user_metadata",
        "identities",
        "created_at",
        "updated_at",
        "is_anonymous"
      ]
    },
    "sms": {
      "type": "object",
      "properties": {
        "otp": {
          "type": "string",
          "pattern": "^[0-9]{6}$",
          "x-faker": {
            "fake": "{{helpers.replaceSymbols(######)}}"
          }
        }
      },
      "required": ["otp"]
    }
  },
  "required": ["user", "sms"]
}
```

----------------------------------------

TITLE: Optimizing Server Routing with pgRouting's A* Algorithm
DESCRIPTION: This code uses pgRouting's A* algorithm to find the most efficient path between servers in a network, optimizing for latency or other costs. The A* algorithm is especially effective for spatial data with coordinates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- Query to find the most efficient path (using pgr_astar)
select *
from
  extensions.pgr_astar(
    'select id, source, target, cost, x1, y1, x2, y2 from server_latency',
    1,
    3 -- Start from Server A (id=1) to Server C (id=3)
  );
```

----------------------------------------

TITLE: Signing In with Phone using OTP in v0 vs v1
DESCRIPTION: Shows the change in the process for signing in with a phone number using OTP. In v1, the process is split into two steps: requesting OTP and verifying OTP.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_8

LANGUAGE: dart
CODE:
```
final res = await supabase.auth.signIn(phone: phone);
```

LANGUAGE: dart
CODE:
```
await supabase.auth.signInWithOtp(
  phone: phone,
);

// After receiving a SMS with a OTP.
await supabase.auth.verifyOTP(
  type: OtpType.sms,
  token: token,
  phone: phone,
);
```

----------------------------------------

TITLE: Creating a RUM Index with rum_anyarray_ops for Array Types
DESCRIPTION: Example of creating a table with an array column and a RUM index using rum_anyarray_ops, which supports array operators and distance-based ordering for arrays.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
CREATE TABLE test_array (i int2[]);
INSERT INTO test_array VALUES ('{}'), ('{0}'), ('{1,2,3,4}'), ('{1,2,3}'), ('{1,2}'), ('{1}');
CREATE INDEX idx_array ON test_array USING rum (i rum_anyarray_ops);
```

----------------------------------------

TITLE: Running Vacuum Operation in Postgres
DESCRIPTION: This SQL command initiates a vacuum operation to reclaim storage occupied by dead tuples, updating statistics, and potentially reducing database size.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/database-size.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
vacuum;
```

----------------------------------------

TITLE: Deploying the Edge Function with Environment Variables
DESCRIPTION: Commands to deploy the Upstash Redis counter function to Supabase and set the required environment variables using secrets from the .env file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/upstash-redis.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
supabase functions deploy upstash-redis-counter --no-verify-jwt
supabase secrets set --env-file supabase/functions/upstash-redis-counter/.env
```

----------------------------------------

TITLE: Defining WatermelonDB Model for Profile
DESCRIPTION: Creates a WatermelonDB model for the 'Profile' entity, including table definition, field decorators, and associations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-10-08-react-native-offline-first-watermelon-db.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { Model, Q, Relation } from "@nozbe/watermelondb";
import { date, readonly, text } from "@nozbe/watermelondb/decorators";

import { Stack } from "./Stack";

export class Profile extends Model {
static table = "profiles";

@readonly @date("created_at") createdAt!: Date;
@readonly @date("updated_at") updatedAt!: Date;

static associations = {
	["stacks"]: {
		type: "has_many" as const,
		foreignKey: "profile_id",
	}
};

@text("name") name!: string;
@text("website") website!: string;
```

----------------------------------------

TITLE: Basic refine App component configuration with Supabase
DESCRIPTION: React component that sets up the refine framework with Supabase data provider, live provider, and auth provider.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
import { Refine, WelcomePage } from '@refinedev/core'
import { RefineKbar, RefineKbarProvider } from '@refinedev/kbar'
import routerBindings, {
  DocumentTitleHandler,
  UnsavedChangesNotifier,
} from '@refinedev/react-router-v6'
import { dataProvider, liveProvider } from '@refinedev/supabase'
import { BrowserRouter, Route, Routes } from 'react-router-dom'

import './App.css'
import authProvider from './authProvider'
import { supabaseClient } from './utility'

function App() {
  return (
    <BrowserRouter>
      <RefineKbarProvider>
        <Refine
          dataProvider={dataProvider(supabaseClient)}
          liveProvider={liveProvider(supabaseClient)}
          authProvider={authProvider}
          routerProvider={routerBindings}
          options={{
            syncWithLocation: true,
            warnWhenUnsavedChanges: true,
          }}
        >
          <Routes>
            <Route index element={<WelcomePage />} />
          </Routes>
          <RefineKbar />
          <UnsavedChangesNotifier />
          <DocumentTitleHandler />
        </Refine>
      </RefineKbarProvider>
    </BrowserRouter>
  )
}
```

----------------------------------------

TITLE: Creating and Using Oriole Storage Extension in Postgres
DESCRIPTION: Example of how to enable the orioledb extension and create a table using the orioledb storage engine. This demonstrates the drop-in replacement capability using Postgres' Table Access Method APIs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-15-supabase-acquires-oriole.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create extension orioledb; -- enable the extension

create table posts (
  id int8 not null,
  title text not null,
  body text not null,
  primary key (id)
) using orioledb;    -- Specify the storage format
```

----------------------------------------

TITLE: Querying Supabase Auth Users
DESCRIPTION: SQL query to select all users from the Supabase auth.users table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select * from auth.users;
```

----------------------------------------

TITLE: Creating Audit Schema in PostgreSQL
DESCRIPTION: Creates a separate schema named 'audit' to house the auditing entities, following the principle of using namespaces for better organization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create schema if not exists audit;
```

----------------------------------------

TITLE: Installing Required Dependencies for Data Table
DESCRIPTION: Commands to install the Table component from shadcn/ui and TanStack Table dependency for creating data tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn-ui@latest add table
```

LANGUAGE: bash
CODE:
```
npm install @tanstack/react-table
```

----------------------------------------

TITLE: Deleting Postgres Configuration Without Restarting
DESCRIPTION: This snippet demonstrates how to delete a Postgres configuration override without restarting the database using the Supabase CLI. It uses the --no-restart flag to prevent an automatic restart.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
supabase --experimental \
--project-ref <project-ref> \
postgres-config delete --config shared_buffers --no-restart
```

----------------------------------------

TITLE: Handling Swift Auth Errors
DESCRIPTION: This section describes how to handle errors originating from the `supabase.auth` namespace in Swift. All errors will be a case of the `AuthError` enum. The `api(message:errorCode:underlyingData:underlyingResponse:)` case is specifically for errors originating from the Supabase Auth API, which include an `errorCode` property.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/debugging/error-codes.mdx#2025-04-21_snippet_2



----------------------------------------

TITLE: Sign In with Figma OAuth - Kotlin
DESCRIPTION: This Kotlin snippet demonstrates how to sign in a user with Figma OAuth using the Supabase client library. It calls the signInWith method with Figma as the Provider.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-figma.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithFigma() {
	supabase.auth.signInWith(Figma)
}
```

----------------------------------------

TITLE: Creating a Loading Skeleton for Sidebar Menu
DESCRIPTION: Implements a skeleton loading state for sidebar menu items, showing placeholders while actual data is being fetched.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_32

LANGUAGE: tsx
CODE:
```
function NavProjectsSkeleton() {
  return (
    <SidebarMenu>
      {Array.from({ length: 5 }).map((_, index) => (
        <SidebarMenuItem key={index}>
          <SidebarMenuSkeleton showIcon />
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Configuring Anonymous Sign-ins in Supabase with TOML
DESCRIPTION: Configuration settings for enabling anonymous sign-ins in the Supabase CLI's config.toml file for local development.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[auth]
enable_anonymous_sign_ins = true
```

----------------------------------------

TITLE: Integrating Avatar Component with react-hook-form in Account Page
DESCRIPTION: This code snippet shows how to integrate the Avatar component into an account management form using react-hook-form's Controller component. It handles form submission and updates the avatar_url field when a new image is uploaded, providing immediate feedback to the user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_12

LANGUAGE: tsx
CODE:
```
// Import the new components
import { Controller } from 'react-hook-form'
import Avatar from './avatar'

// ...

return (
  <div className="container" style={{ padding: '50px 0 100px 0' }}>
    <form onSubmit={handleSubmit} className="form-widget">
      <Controller
        control={control}
        name="avatar_url"
        render={({ field }) => {
          return (
            <Avatar
              url={field.value}
              size={150}
              onUpload={(filePath) => {
                onFinish({
                  ...queryResult?.data?.data,
                  avatar_url: filePath,
                  onMutationError: (data: { message: string }) => alert(data?.message),
                })
                field.onChange({
                  target: {
                    value: filePath,
                  },
                })
              }}
            />
          )
        }}
      />
      {/* ... */}
    </form>
  </div>
)
```

----------------------------------------

TITLE: Initializing Prisma Project with pnpm
DESCRIPTION: Commands to initialize a new Node.js project, install Prisma and TypeScript dependencies, and set up the initial Prisma configuration using pnpm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
pnpm init -y
pnpm install prisma typescript ts-node @types/node --save-dev

pnpx tsc --init

pnpx prisma init
```

----------------------------------------

TITLE: Importing AI Commands for Edge Runtime in TypeScript
DESCRIPTION: This snippet demonstrates how to import a function from the ai-commands package specifically for use in an Edge runtime environment. The import path uses a special 'edge' subpath to access streaming functionalities that are exclusive to this runtime context. There are no external dependencies listed, and the code requires knowledge of available functions within the ai-commands package.
SOURCE: https://github.com/supabase/supabase/blob/master/packages/ai-commands/README.md#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { chatRlsPolicy } from 'ai-commands/edge'
```

----------------------------------------

TITLE: Activating Custom Domain with Supabase CLI
DESCRIPTION: Use the Supabase CLI to activate the custom domain for a project. This command finalizes the custom domain setup and makes it active for the Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase domains activate --project-ref abcdefghijklmnopqrst
```

----------------------------------------

TITLE: Configuring Angular App Module
DESCRIPTION: Angular module configuration importing necessary components and modules for the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { NgModule } from '@angular/core'
import { BrowserModule } from '@angular/platform-browser'

import { AppRoutingModule } from './app-routing.module'
import { AppComponent } from './app.component'
import { LoginComponent } from './components/login/login.component'
import { BoardComponent } from './components/inside/board/board.component'
import { WorkspaceComponent } from './components/inside/workspace/workspace.component'
import { BrowserAnimationsModule } from '@angular/platform-browser/animations'
import { NgxSpinnerModule } from 'ngx-spinner'
import { FormsModule } from '@angular/forms'
import { GravatarModule } from 'ngx-gravatar'

@NgModule({
  declarations: [AppComponent, LoginComponent, BoardComponent, WorkspaceComponent],
  imports: [
    FormsModule,
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    NgxSpinnerModule,
    GravatarModule,
  ],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
```

----------------------------------------

TITLE: Displaying JWT Token Structure for Postgres Roles in JavaScript
DESCRIPTION: This code snippet shows the structure of a JWT token used for Postgres roles in Supabase, including the role, issuer, and expiration time.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-11-studio-introducing-assistant.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  "role": "service_role", // the Postgres role
  "iss": "supabase"       // the issuer of the JWT
  "exp": 1445385600,      // the time the JWT will expire
}
```

----------------------------------------

TITLE: Finding Active pg_cron Jobs in PostgreSQL
DESCRIPTION: This SQL query identifies actively running pg_cron jobs by examining the pg_stat_activity table. It returns detailed information about each job process including the process ID, database user, application name, and the actual query being executed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pgcron-debugging-guide-n1KTaz.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
SELECT
  pid as process_id,
  usename as database_user,
  application_name,
  backend_start as when_process_began,
  wait_event_type,
  state,
  query,
  backend_type
FROM pg_stat_activity where application_name ilike 'pg_cron';
```

----------------------------------------

TITLE: Removing Custom Domain with Supabase CLI
DESCRIPTION: Use the Supabase CLI to remove an activated custom domain from a project. This command reverts the project back to using the default Supabase domain.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
supabase domains delete --project-ref abcdefghijklmnopqrst
```

----------------------------------------

TITLE: Creating a View for Monitoring Blocked Transactions in Postgres
DESCRIPTION: This SQL script creates a view named 'lock_monitor' that helps in monitoring currently blocked database transactions during the ALTER TABLE process. It provides detailed information about locked items, waiting duration, and the queries involved.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/slow-execution-of-alter-table-on-large-table-when-changing-column-type-qmZRpZ.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create view  public.lock_monitor as
select
  coalesce(
    blockingl.relation::regclass::text,
    blockingl.locktype
  ) as locked_item,
  now() - blockeda.query_start as waiting_duration,
  blockeda.pid as blocked_pid,
  blockeda.query as blocked_query,
  blockedl.mode as blocked_mode,
  blockinga.pid as blocking_pid,
  blockinga.query as blocking_query,
  blockingl.mode as blocking_mode
from
  pg_locks blockedl
  join pg_stat_activity blockeda on blockedl.pid = blockeda.pid
  join pg_locks blockingl on (
    blockingl.transactionid = blockedl.transactionid
    or blockingl.relation = blockedl.relation
    and blockingl.locktype = blockedl.locktype
  )
  and blockedl.pid <> blockingl.pid
  join pg_stat_activity blockinga on blockingl.pid = blockinga.pid
  and blockinga.datid = blockeda.datid
where
  not blockedl.granted
  and blockinga.datname = current_database();
```

----------------------------------------

TITLE: Defining Room Model in Dart
DESCRIPTION: This snippet defines the Room model class, which represents a chat room in the application. It includes properties like id, createdAt, otherUserId, and lastMessage, as well as methods for serialization and deserialization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
import 'package:my_chat_app/models/message.dart';

class Room {
  Room({
    required this.id,
    required this.createdAt,
    required this.otherUserId,
    this.lastMessage,
  });

  /// ID of the room
  final String id;

  /// Date and time when the room was created
  final DateTime createdAt;

  /// ID of the user who the user is talking to
  final String otherUserId;

  /// Latest message submitted in the room
  final Message? lastMessage;

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'createdAt': createdAt.millisecondsSinceEpoch,
    };
  }

  /// Creates a room object from room_participants table
  Room.fromRoomParticipants(Map<String, dynamic> map)
      : id = map['room_id'],
        otherUserId = map['profile_id'],
        createdAt = DateTime.parse(map['created_at']),
        lastMessage = null;

  Room copyWith({
    String? id,
    DateTime? createdAt,
    String? otherUserId,
    Message? lastMessage,
  }) {
    return Room(
      id: id ?? this.id,
      createdAt: createdAt ?? this.createdAt,
      otherUserId: otherUserId ?? this.otherUserId,
      lastMessage: lastMessage ?? this.lastMessage,
    );
  }
}
```

----------------------------------------

TITLE: Implementing Authentication Confirmation Endpoint in SvelteKit with Supabase
DESCRIPTION: A server-side endpoint that exchanges a token_hash for a session. It handles verification of one-time passwords, stores the session in cookies, and redirects users to the appropriate page based on the authentication result.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
// src/routes/auth/confirm/+server.ts
import type { EmailOtpType } from '@supabase/supabase-js'
import { redirect } from '@sveltejs/kit'

import type { RequestHandler } from './$types'

export const GET: RequestHandler = async ({ url, locals: { supabase } }) => {
  const token_hash = url.searchParams.get('token_hash')
  const type = url.searchParams.get('type') as EmailOtpType | null
  const next = url.searchParams.get('next') ?? '/account'

  /**
   * Clean up the redirect URL by deleting the Auth flow parameters.
   *
   * `next` is preserved for now, because it's needed in the error case.
   */
  const redirectTo = new URL(url)
  redirectTo.pathname = next
  redirectTo.searchParams.delete('token_hash')
  redirectTo.searchParams.delete('type')

  if (token_hash && type) {
    const { error } = await supabase.auth.verifyOtp({ type, token_hash })
    if (!error) {
      redirectTo.searchParams.delete('next')
      redirect(303, redirectTo)
    }
  }

  redirectTo.pathname = '/auth/error'
  redirect(303, redirectTo)
}
```

----------------------------------------

TITLE: Listening for Postgres Changes with Supabase Realtime JavaScript
DESCRIPTION: This snippet shows how to listen for Postgres database changes using Supabase Realtime.  It creates a channel and then uses the `on` method to subscribe to 'postgres_changes' events for a specific schema. The code requires a Supabase client initialized with the project URL and API key, and appropriate Row Level Security policies set up in the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/concepts.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const allChanges = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: '*',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Supavisor Connection String Format
DESCRIPTION: Example format of a Supavisor connection string for Supabase database connections, which includes the project reference in the username
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-do-i-update-connection-pool-settings-in-my-dashboard-wAxTJ_.mdx#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
postgres://postgres.xxxxxxxxx:[YOUR-PASSWORD]@aws-0-us-west-1.pooler.supabase.com:6543/postgres
```

----------------------------------------

TITLE: Implementing Task API with Route Parameters in Express.js
DESCRIPTION: An Express.js implementation for a task management API using route parameters. This code sets up endpoints for listing, creating, retrieving, updating, and deleting tasks, demonstrating how to access route parameters through the req.params object.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import express from 'npm:express@4.18.2'

const app = express();
app.use(express.json());

app.get('/tasks', async (req, res) => {
// return all tasks
});

app.post('/tasks', async (req, res) => {
// create a task
});

app.get('/tasks/:id', async (req, res) => {
const id = req.params.id
const task = {} // get task

res.json(task)
});

app.patch('/tasks/:id', async (req, res) => {
const id = req.params.id
// modify task
});

app.delete('/tasks/:id', async (req, res) => {
const id = req.params.id
// delete task
});
```

----------------------------------------

TITLE: Workaround for schema pull with empty migrations directory
DESCRIPTION: This command sequence demonstrates how to fix the issue where --schema parameter is ignored when the local migrations directory is empty. It first performs a general pull followed by a schema-specific pull.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_10

LANGUAGE: bash
CODE:
```
supabase db pull
supabase db pull --schema <schema_name>
```

----------------------------------------

TITLE: Deploying the og-images function to Supabase
DESCRIPTION: This command deploys the og-images function to the Supabase platform. The --no-verify-jwt flag disables JWT verification during the deployment process, which is necessary for this function.
SOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/og-images/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
"supabase functions deploy og-images --no-verify-jwt"
```

----------------------------------------

TITLE: Equivalent SQL for ANY Filter
DESCRIPTION: SQL equivalent of the ANY filter modifier example.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-12-postgrest-11-1-release.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
select *
from users
where username like ANY('{%supa%,%kiwi%}');
```

----------------------------------------

TITLE: Complex Query Execution Plan Structure
DESCRIPTION: Example showing the hierarchical structure of a complex query execution plan with multiple nodes including aggregation, sorting, and joins.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
Aggregate Node (Top Node)
│
└──> Sort Node
    │
    └──> Hash Join Node
        │
        ├──> Seq Scan on users (Filtered)
        │
        └──> Hash
            │
            └──> Seq Scan on activities
```

----------------------------------------

TITLE: Generating Rollback Migration
DESCRIPTION: Command to generate a rollback migration after manually updating schema files to reflect desired previous state.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/declarative-database-schema.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase db diff -f <rollback_migration_name>
```

----------------------------------------

TITLE: Using HTTP POST with pg_net
DESCRIPTION: Example of making an asynchronous HTTP POST request to httpbin.org with a JSON body using the net.http_post function. The function returns a request ID for tracking.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select
    net.http_post(
        url:='https://httpbin.org/post',
        body:='{"hello": "world"}'::jsonb
    ) as request_id;
request_id
----------
         1
(1 row)
```

----------------------------------------

TITLE: Revoking Public Function Execution in PostgreSQL
DESCRIPTION: SQL command to revoke execution permissions of a function named 'foo' from PUBLIC role. This removes the default access that allows any role to execute the function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-can-i-revoke-execution-of-a-postgresql-function-2GYb0A.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
revoke execute on function foo from public;
```

----------------------------------------

TITLE: Activating Custom Subdomain using Supabase CLI
DESCRIPTION: This command activates and claims a custom subdomain for a Supabase project using the CLI. It requires the project reference and the desired subdomain name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
supabase vanity-subdomains --project-ref abcdefghijklmnopqrst activate --desired-subdomain my-example-brand
```

----------------------------------------

TITLE: Initiating Sign-In with SSO (Swift)
DESCRIPTION: This Swift snippet demonstrates how to initiate a sign-in process using a SAML 2.0 identity provider registered for a specific domain using Supabase Auth. It uses the `signInWithSSO` method to start the SP Initiated Flow. The Supabase client must be initialized before using this function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_6

LANGUAGE: swift
CODE:
```
"try await supabase.auth.signInWithSSO(
  domain: \"company.com\"
)"
```

----------------------------------------

TITLE: SSL Configuration for Local Development
DESCRIPTION: Environment variables setup for enabling SSL connections during local development of Edge Functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/connect-to-postgres.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
SSL_CERT_FILE=/path/to/cert.crt # set the path to the downloaded cert
DENO_TLS_CA_STORE=mozilla,system
```

----------------------------------------

TITLE: Realtime Policies Structure in Elixir
DESCRIPTION: Elixir code showing the structure of policy permissions stored in memory for connected sockets.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_6

LANGUAGE: elixir
CODE:
```
%Policies{
  broadcast: %BroadcastPolicies{read: false, write: false},
  presence: %PresencePolicies{read: false, write: false}
}
```

----------------------------------------

TITLE: Summing Values from JSONB Arrays in PostgreSQL (Invalid Approach)
DESCRIPTION: This query attempts to sum calories from food log entries but fails due to PostgreSQL's limitation that aggregate functions cannot contain set-returning functions. This demonstrates a common pitfall when working with JSONB arrays.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select
  date,
  sum((jsonb_array_elements(food_log)->'calories')::integer) as total_calories
from calendar where user_id = 'xyz'
  and date between '2022-01-01' and '2022-01-31'
group by date;
```

----------------------------------------

TITLE: Static Remote Subquery with ClickHouse
DESCRIPTION: Example of creating a foreign table using a static subquery on a ClickHouse server.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-wrappers-v02.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create foreign table clickhouse.people (
  id bigint,
  name text,
  age bigint
)
server clickhouse_server
options (
  table '(select * from people where age < 25)'
);
```

----------------------------------------

TITLE: Handling JSON Error Response in SQL
DESCRIPTION: This snippet demonstrates the structure of a JSON error response for a SQL-based hook in Supabase. It specifies error details, including an HTTP status code and a message. There are no prerequisites other than understanding JSON structure. Inputs include the status code and message, while the output is a JSON object representing the error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_11

LANGUAGE: json
CODE:
```
{
  "error": {
    "http_code": 429,
    "message": "You can only verify a factor once every 10 seconds."
  }
}
```

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Command to create a new Supabase project locally using the Supabase CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase init
```

----------------------------------------

TITLE: Querying Supabase Storage Objects using cURL
DESCRIPTION: Makes an authenticated request to the Supabase storage API to list all objects in the storage buckets. Uses the storage profile and anonymous API key for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
curl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/objects?select=name' \
-H 'accept-profile: storage' \
-H "apikey: $ANON_KEY" \
-H "authorization: Bearer $ANON_KEY"
```

----------------------------------------

TITLE: pg_repack CLI command syntax
DESCRIPTION: This shows the basic syntax for using the pg_repack CLI. The -k flag is included to skip the client-side superuser check, which is necessary for users on the Supabase platform.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_repack.mdx#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
pg_repack -k [OPTION]... [DBNAME]
```

----------------------------------------

TITLE: Environment Configuration for AWS Credentials
DESCRIPTION: Configuration file containing AWS credentials and region settings for Amazon Bedrock integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/amazon-bedrock-image-generator.mdx#2025-04-21_snippet_0

LANGUAGE: txt
CODE:
```
AWS_DEFAULT_REGION="<your_region>"
AWS_ACCESS_KEY_ID="<replace_your_own_credentials>"
AWS_SECRET_ACCESS_KEY="<replace_your_own_credentials>"
AWS_SESSION_TOKEN="<replace_your_own_credentials>"

# Mocked config files
AWS_SHARED_CREDENTIALS_FILE="./aws/credentials"
AWS_CONFIG_FILE="./aws/config"
```

----------------------------------------

TITLE: Creating an Account Management Component with Refine and Supabase in TypeScript
DESCRIPTION: This snippet creates a React component for managing user accounts. It uses Refine's useGetIdentity, useLogout, and useForm hooks to handle user data and authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { BaseKey, useGetIdentity, useLogout } from '@refinedev/core'
import { useForm } from '@refinedev/react-hook-form'

interface IUserIdentity {
  id?: BaseKey
  username: string
  name: string
}

export interface IProfile {
  id?: string
  username?: string
  website?: string
  avatar_url?: string
}

export default function Account() {
  const { data: userIdentity } = useGetIdentity<IUserIdentity>()

  const { mutate: logOut } = useLogout()

  const {
    refineCore: { formLoading, queryResult, onFinish },
    register,
    control,
    handleSubmit,
  } = useForm<IProfile>({
    refineCoreProps: {
      resource: 'profiles',
      action: 'edit',
      id: userIdentity?.id,
      redirect: false,
      onMutationError: (data) => alert(data?.message),
    },
  })

  return (
    <div className="container" style={{ padding: '50px 0 100px 0' }}>
      <form onSubmit={handleSubmit(onFinish)} className="form-widget">
        <div>
          <label htmlFor="email">Email</label>
          <input id="email" name="email" type="text" value={userIdentity?.name} disabled />
        </div>
        <div>
          <label htmlFor="username">Name</label>
          <input id="username" type="text" {...register('username')} />
        </div>
        <div>
          <label htmlFor="website">Website</label>
          <input id="website" type="url" {...register('website')} />
        </div>

        <div>
          <button className="button block primary" type="submit" disabled={formLoading}>
            {formLoading ? 'Loading ...' : 'Update'}
          </button>
        </div>

        <div>
          <button className="button block" type="button" onClick={() => logOut()}>
            Sign Out
          </button>
        </div>
      </form>
    </div>
  )
}
```

----------------------------------------

TITLE: Viewing Role Configuration in Supabase Postgres
DESCRIPTION: This SQL query retrieves the role name and configuration for the 'postgres' role, useful for verifying changes to role-specific settings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select
  rolname,
  rolconfig
from pg_roles
where rolname = 'postgres';
```

----------------------------------------

TITLE: Basic PGroonga Full-Text Search Query
DESCRIPTION: SQL command demonstrating a basic full-text search query using PGroonga's &@~ operator, which performs case-insensitive matching.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
select * from memos where content &@~ 'groonga';
```

----------------------------------------

TITLE: Configuring PGAudit Logging Categories
DESCRIPTION: Examples of how to configure PGAudit to log specific categories of database operations using the pgaudit.log parameter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- log all CREATE, ALTER, and DROP events
... pgaudit.log = 'ddl';

-- log all CREATE, ALTER, DROP, and SELECT events
... pgaudit.log = 'read, ddl';

-- log nothing
... pgaudit.log = 'none';
```

----------------------------------------

TITLE: Simplified Supabase Initialization Without Auth Callback in v2
DESCRIPTION: Demonstrates how the authCallbackUrlHostname parameter has been removed from Supabase.initialize() in v2. The SDK now automatically detects auth callback URLs and handles them internally.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_8

LANGUAGE: dart
CODE:
```
await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
  authCallbackUrlHostname: 'auth-callback',
);
```

LANGUAGE: dart
CODE:
```
await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
);
```

----------------------------------------

TITLE: Initializing Supabase client with Jackson Serialization
DESCRIPTION: This Kotlin snippet demonstrates how to create a Supabase client with Jackson Serialization. It shows how to set the default serializer to JacksonSerializer.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_18

LANGUAGE: kotlin
CODE:
```
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    defaultSerializer = JacksonSerializer()
}
```

----------------------------------------

TITLE: Calling plv8 Functions in Kotlin with Supabase
DESCRIPTION: Example of calling a plv8 function from Kotlin using the Supabase client library's RPC method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_4

LANGUAGE: kotlin
CODE:
```
val data = supabase.postgrest.rpc("function_name")
```

----------------------------------------

TITLE: Scheduled ETL with pg_cron
DESCRIPTION: SQL query to schedule nightly ETL jobs using pg_cron to copy data from production to warehouse.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select cron.schedule(
  'nightly-etl',
  '0 3 * * *',
  $$
    insert into warehouse.analytics
    select * from public.analytics
    where ts > (now() - interval '1 DAY');
  $$
);
```

----------------------------------------

TITLE: Configuring Supabase Storage with Uppy in JavaScript
DESCRIPTION: Key configuration variables needed to connect Uppy to Supabase Storage for resumable uploads. Includes project credentials and storage bucket information.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/storage/resumable-upload-uppy/README.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const SUPABASE_ANON_KEY = '' // your project's anon key
const SUPABASE_PROJECT_ID = '' // your project ref
const STORAGE_BUCKET = '' // your storage bucket name
const BEARER_TOKEN = '' // your bearer token
```

----------------------------------------

TITLE: Displaying Log Messages for Different PostgreSQL Severity Levels
DESCRIPTION: This snippet demonstrates example log messages for various PostgreSQL severity levels, from DEBUG to PANIC. It illustrates the type of information captured at each log level.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-logging-levels-and-how-they-impact-your-project-KXiJRm.mdx#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
DEBUG:  server process (PID 12345) exited with exit code 0
INFO:  vacuuming "example_schema.public.example_table"
NOTICE:  identifier "very_very_very_long_table_name_exceeding_63_characters" will be truncated to "very_very_very_long_table_name_exceedin"
WARNING:  SET LOCAL can only be used in transaction blocks
LOG:  statement: UPDATE example_table SET column_name = 'Example Value' WHERE id = 10;
ERROR:  relation "exam" does not exist at character 7
FATAL:  role "admin" does not exist
PANIC: database system shutdown requested
```

----------------------------------------

TITLE: Testing PostgreSQL Functions
DESCRIPTION: pgTAP tests to verify function return types and results. Includes preparation of test data and multiple function tests.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgtap.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
prepare hello_expr as select 'hello'

begin;
select plan(3);
-- You'll need to create a hello_world and is_even function
select function_returns( 'hello_world', 'text' );                   -- test if the function "hello_world" returns text
select function_returns( 'is_even', ARRAY['integer'], 'boolean' );  -- test if the function "is_even" returns a boolean
select results_eq('select * from hello_world()', 'hello_expr');          -- test if the function "hello_world" returns "hello"

select * from finish();
rollback;
```

----------------------------------------

TITLE: Upgrading to Supabase-js v2 Using npm
DESCRIPTION: Shows the npm command to upgrade to supabase-js v2.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
npm i @supabase/supabase-js@2
```

----------------------------------------

TITLE: Kotlin Implementation of Bounding Box Search
DESCRIPTION: Kotlin example showing how to call the PostGIS bounding box search function using Supabase client with JSON parameter building.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_19

LANGUAGE: kotlin
CODE:
```
val data = supabase.postgrest.rpc(
    function = "restaurants_in_view",
    parameters = buildJsonObject { //You can put here any serializable object including your own classes
        put("min_lat", 40.807)
        put("min_lon", -73.946)
        put("max_lat", 40.808)
        put("max_lon", -73.945)
    }
)
```

----------------------------------------

TITLE: Accessing Stripe Products with Supabase JavaScript Client
DESCRIPTION: JavaScript code using the Supabase client library to query Stripe products data from a web application through the Supabase API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { createClient } from '@supabase/supabase-js'

const SUPABASE_URL = 'https://xyzcompany.supabase.co'
const SUPABASE_KEY = 'public-anon-key'

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY)

const { data: stripeCustomers, error } = supabase
  .from('products')
  .select('id, name, description, default_price')
  .limit(10)
```

----------------------------------------

TITLE: Simple Metadata Filtering in LangChain
DESCRIPTION: Demonstration of using metadata filtering with Supabase vector store for more targeted similarity searches.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/langchain.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { SupabaseVectorStore } from 'langchain/vectorstores/supabase'
import { OpenAIEmbeddings } from 'langchain/embeddings/openai'
import { createClient } from '@supabase/supabase-js'

const privateKey = process.env.SUPABASE_SERVICE_ROLE_KEY
if (!privateKey) throw new Error(`Expected env var SUPABASE_SERVICE_ROLE_KEY`)

const url = process.env.SUPABASE_URL
if (!url) throw new Error(`Expected env var SUPABASE_URL`)

export const run = async () => {
  const client = createClient(url, privateKey)

  const vectorStore = await SupabaseVectorStore.fromTexts(
    ['Hello world', 'Hello world', 'Hello world'],
    [{ user_id: 2 }, { user_id: 1 }, { user_id: 3 }],
    new OpenAIEmbeddings(),
    {
      client,
      tableName: 'documents',
      queryName: 'match_documents',
    }
  )

  const result = await vectorStore.similaritySearch('Hello world', 1, {
    user_id: 3,
  })

  console.log(result)
}
```

----------------------------------------

TITLE: Creating Stripe Products Foreign Table
DESCRIPTION: SQL command to create a foreign table that maps to Stripe products data using FDW.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create foreign table stripe.stripe_products (
  id text,
  name text,
  active bool,
  default_price text,
  description text,
  created timestamp,
  updated timestamp,
  attrs jsonb
)
  server stripe_fdw_server
  options (
    object 'products',
    rowid_column 'id'
  );
```

----------------------------------------

TITLE: Installing Laravel Breeze authentication package
DESCRIPTION: Installs Laravel Breeze, a lightweight authentication scaffold, and runs its installation command to set up authentication features.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/laravel.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
composer require laravel/breeze --dev
php artisan breeze:install
```

----------------------------------------

TITLE: Modifying Function Route Handler
DESCRIPTION: TypeScript code to update the URL pathname handling in the function's main entry point
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deno2.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
if (url.pathname === "/hello-world") {
```

----------------------------------------

TITLE: Installing Popover Dependencies via NPM
DESCRIPTION: Command to install the required Radix UI Popover dependency using npm package manager.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/popover.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-popover
```

----------------------------------------

TITLE: Check Supabase Network Restrictions (No Restrictions) via CLI
DESCRIPTION: This command retrieves network restrictions for a Supabase project, but indicates that no restrictions are currently applied. This means all IPs are allowed to connect to the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/network-restrictions.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
> supabase network-restrictions --project-ref {ref} get --experimental
DB Allowed IPv4 CIDRs: []
DB Allowed IPv6 CIDRs: []
Restrictions applied successfully: false
```

----------------------------------------

TITLE: Demonstrating Error When Altering Reserved PostgreSQL Roles
DESCRIPTION: Example showing the error message when attempting to modify a reserved PostgreSQL role. This demonstrates the built-in protection for predefined roles prefixed with 'pg_'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
alter role pg_monitor createdb;
ERROR:  role name "pg_monitor" is reserved
DETAIL:  Cannot alter reserved roles.
```

----------------------------------------

TITLE: Exposing Postgres Database Port in Docker Compose
DESCRIPTION: Configuration to expose the Postgres database port directly without going through Supavisor, which is less secure but provides direct access to the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_12

LANGUAGE: yaml
CODE:
```
# Comment or remove the supavisor section of the docker-compose file
#  supavisor:
#    ports:
# ...
db:
  ports:
    - ${POSTGRES_PORT}:${POSTGRES_PORT}
```

----------------------------------------

TITLE: Creating Standard Queue
DESCRIPTION: Creates a new message queue with standard logging. Returns void on success.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select from pgmq.create('my_queue');
```

----------------------------------------

TITLE: Environment Variable Configuration
DESCRIPTION: Setting up environment variable for Hugging Face access token
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hugging-face.mdx#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
HUGGING_FACE_ACCESS_TOKEN=<your-token-here>
```

----------------------------------------

TITLE: Installing Supabase Libraries in SvelteKit
DESCRIPTION: This code installs the Supabase auth helpers and the Supabase JS library needed for authentication in SvelteKit applications. Requires Node.js version ^16.15.0.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_0

LANGUAGE: Terminal
CODE:
```
npm install @supabase/auth-helpers-sveltekit @supabase/supabase-js
```

----------------------------------------

TITLE: Executing Logflare Endpoint Query via cURL
DESCRIPTION: cURL command to query a Logflare Endpoint API, demonstrating how to pass parameters (in this case, 'day') to the endpoint for flexible querying.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-10-supabase-logs-self-hosted.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
curl "https://logflare.app/endpoints/query/69425db0-1cfb-48b4-84c7-2a872b6f0a61" \
 -H 'Content-Type: application/json; charset=utf-8' \
 -G -d "day=30"
```

----------------------------------------

TITLE: Creating a Debugging Function for HTTP Requests
DESCRIPTION: Example of creating a PostgreSQL function that logs and returns row data for debugging purposes when making HTTP requests with pg_net.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
create or replace function debugging_example (row_id int)
returns jsonb as $$
declare
    -- Store payload data
    row_data_var jsonb;
begin
    -- Retrieve row data and convert to JSON
    select to_jsonb("<example_table>".*) into row_data_var
    from "<example_table>"
    where "<example_table>".id = row_id;

    -- Initiate HTTP POST request to URL
    perform
        net.http_post(
            url := 'https://postman-echo.com/post',
            -- Use row data as payload
            body := row_data_var
        ) as request_id;

    -- Optionally Log row data or other data for inspection in Supabase Dashboard's Postgres Logs
    raise log 'Logging an entire row as JSON (%)', row_data_var;

    -- return row data to inspect
    return row_data_var;

-- Handle exceptions here if needed
exception
    when others then
        raise exception 'An error occurred: %', SQLERRM;
end;
$$ language plpgsql;

-- calling function
select debugging_example(<row_id>);
```

----------------------------------------

TITLE: Creating Named Secrets in Vault
DESCRIPTION: Shows how to create a secret with a unique name and description using vault.create_secret(). This version includes all optional parameters for full secret configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/vault.mdx#2025-04-22_snippet_1

LANGUAGE: sql
CODE:
```
select vault.create_secret('another_s3kre3t', 'unique_name', 'This is the description');
```

----------------------------------------

TITLE: Checking Statement Timeout Configuration
DESCRIPTION: SQL command to verify that the statement timeout has been successfully disabled for the current session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
show statement_timeout;
```

----------------------------------------

TITLE: Updating User Data in v0 vs v1
DESCRIPTION: Shows the change in how to update user data for a logged-in user. In v1, the method name has changed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_12

LANGUAGE: dart
CODE:
```
await supabase.auth.update(
  UserAttributes(data: {'hello': 'world'})
);
```

LANGUAGE: dart
CODE:
```
await supabase.updateUser(
  UserAttributes(
    data: { 'hello': 'world' },
  ),
);
```

----------------------------------------

TITLE: Creating Helper Function for SemVer Validation in SQL
DESCRIPTION: Implements a helper function 'semver_elements_match_regex' to validate array elements against a regex pattern.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-17-type-constraints-in-65-lines-of-sql.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create or replace function semver_elements_match_regex(
    parts text[],
    regex text
)
returns bool
language sql
as $$
    -- validates that *parts* nullable array of non-empty strings
    -- where each element of *parts* matches *regex*
    select
        $1 is null
        or (
            (
                select (
                    bool_and(pr_arr.elem is not null)
                    and bool_and(pr_arr.elem ~ $2)
                )
                from
                    unnest($1) pr_arr(elem)
            )
            and array_length($1, 1) > 0
        )
$$;
```

----------------------------------------

TITLE: Enabling PGAudit Extension in PostgreSQL
DESCRIPTION: SQL commands to enable or disable the PGAudit extension in a Supabase PostgreSQL database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the "pgaudit" extension
create extension pgaudit;

-- Disable the "pgaudit" extension
drop extension if exists pgaudit;
```

----------------------------------------

TITLE: Query Plan Analysis with OrioleDB
DESCRIPTION: Examples of using EXPLAIN to analyze query execution plans in OrioleDB, showing index usage and performance metrics.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/orioledb.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
EXPLAIN SELECT * FROM blog_post ORDER BY published_at DESC LIMIT 10;
                                                 QUERY PLAN
────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Limit  (cost=0.15..1.67 rows=10 width=120)
   ->  Index Scan Backward using blog_post_published_at on blog_post  (cost=0.15..48.95 rows=320 width=120)

EXPLAIN SELECT * FROM blog_post WHERE id = 1;
                                    QUERY PLAN
──────────────────────────────────────────────────────────────────────────────────
 Index Scan using blog_post_pkey on blog_post  (cost=0.15..8.17 rows=1 width=120)
   Index Cond: (id = 1)

EXPLAIN (ANALYZE, BUFFERS) SELECT * FROM blog_post ORDER BY published_at DESC LIMIT 10;
                                                                      QUERY PLAN
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Limit  (cost=0.15..1.67 rows=10 width=120) (actual time=0.052..0.054 rows=1 loops=1)
   ->  Index Scan Backward using blog_post_published_at on blog_post  (cost=0.15..48.95 rows=320 width=120) (actual time=0.050..0.052 rows=1 loops=1)
 Planning Time: 0.186 ms
 Execution Time: 0.088 ms
```

----------------------------------------

TITLE: Querying the Embedding Status in SQL
DESCRIPTION: This SQL query demonstrates how to check if an embedding has been generated for a document. Initially after insertion, the embedding column will be empty until the asynchronous process completes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-automatic-embeddings.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
select id, embedding
from documents
where title = 'Understanding Vector Databases';
```

----------------------------------------

TITLE: Setting Authentication View - React - JavaScript
DESCRIPTION: This snippet demonstrates how to set the authentication view to either sign in or sign up using the 'view' prop in the Supabase Auth component. This allows for flexible user flow depending on the desired authentication method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
<Auth\n  supabaseClient={supabase}\n  view="sign_up"/\n/>
```

----------------------------------------

TITLE: Implementing GitHub OAuth Sign-Out in Flutter with Supabase
DESCRIPTION: This Flutter code snippet shows how to log out a user by calling the `signOut` method from the Supabase auth client, effectively terminating the user session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
Future<void> signOut() async {
  await supabase.auth.signOut();
}
```

----------------------------------------

TITLE: Disconnecting from Database in Python
DESCRIPTION: Demonstrates how to properly disconnect from the Postgres database when finished with operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
vx.disconnect()
```

----------------------------------------

TITLE: Querying Cal.com Bookings with JSON Parsing
DESCRIPTION: SQL query to extract booking details from Cal.com using JSON functions. It parses the booking ID, title, attendee name, and start time from the nested JSON structure returned by the Cal.com API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
-- extract bookings
select
  bk->>'id' as id,
  bk->>'title' as title,
  bk->'responses'->>'name' as name,
  bk->>'startTime' as start_time
from cal.bookings t
  cross join json_array_elements((attrs->'bookings')::json) bk;
```

----------------------------------------

TITLE: Serving the Function Locally with Supabase CLI
DESCRIPTION: Command for serving the competition function locally using the Supabase CLI without JWT verification.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/get-tshirt-competition/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions serve --no-verify-jwt
```

----------------------------------------

TITLE: Inserting Movie Data in Postgres
DESCRIPTION: Example of inserting a movie record into the movies table with title, original title and overview text.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-14-postgres-full-text-search-vs-the-rest.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
insert into movies (
	title,
	original_title,
	overview
)
values
(
	"Avengers: Age of Ultron",
	"Avengers: Age of Ultron",
	"When Tony Stark tries to jumpstart a dormant peacekeeping program, things go awry and Earth's Mightiest Heroes are put to the ultimate test as the fate of the planet hangs in the balance. As the villainous Ultron emerges, it is up to The Avengers to stop him from enacting his terrible plans, and soon uneasy alliances and unexpected action pave the way for an epic and unique global adventure.",
);
```

----------------------------------------

TITLE: Implementing Mutation with Success and Error Handling
DESCRIPTION: Example demonstrating how to implement a mutation with proper success and error handling using toast notifications. This pattern avoids silent failures and ensures users receive feedback when operations succeed or fail.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/data/__templates/README.md#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
const { mutate: someAction } = useMutation({
  onSuccess: (res) => {
    toast.success('Success')
  },
  onError: (error) => {
    toast.error(`Failed: ${error.message}`)
  },
})

const onConfirm = async () => {
  // Assuming that your mutation needs a URL param like project ref
  // This check is just to satisfy the linting - there's an implicit assumption that
  // projectRef here will definitely be available since its obtained from the URL
  if (!projectRef) return console.error('Project ref is required')

  // Any logic before calling the mutation
  someAction({ projectRef, otherParameters })
}
```

----------------------------------------

TITLE: Checking Webhook Queue Count in SQL
DESCRIPTION: SQL query to check if webhook reads are becoming expensive by counting rows in the net.http_request_queue table. A high count (>20,000) may indicate performance issues.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/interpreting-supabase-grafana-io-charts-MUynDR.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select count(*) as exact_count from net.http_request_queue;
-- the number should be relatively low <20,000
```

----------------------------------------

TITLE: Configuring Supabase Client with Scoped Options in TypeScript
DESCRIPTION: Demonstrates the new scoped configuration options when creating a Supabase client in v2, allowing for more explicit and modular setup.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
const supabase = createClient(apiURL, apiKey, {
  db: {
    schema: 'public',
  },
  auth: {
    autoRefreshToken: true,
    persistSession: true,
  },
  realtime: {
    channels,
    endpoint,
  },
  // common across all libraries
  global: {
    fetch: customFetch,
    headers: DEFAULT_HEADERS,
  },
})
```

----------------------------------------

TITLE: Vector Embeddings Data Values in SQL Format
DESCRIPTION: SQL insertion values containing 300-dimensional vector embeddings for the words 'Apple' and 'Boat'. These vectors represent semantic embeddings where each number captures some aspect of the word's meaning in a high-dimensional space.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
('Apple', '[-0.01854126,-0.015314187,0.008172714,-0.06233388,0.0151762,0.00095683464,0.046682406,0.036243673,0.014862187,-5.8190515e-05,-0.004585996,-0.061831452,0.0136447605,0.017847551,0.048936155,0.031905275,0.0249166,-0.01723699,-0.074055605,0.0044720536,0.009445661,-0.03197354,0.016330265,-0.05798763,-0.0005444175,0.03345155,-0.06665412,-0.031260885,-0.047729123,-0.15240389,-0.0369158,-0.061498255,0.056001555,-0.00027440977,-0.00062431605,-0.037229452,-0.049931858,0.040858846,-0.031204186,0.03931569,0.05703049,-0.009987068,-0.036490448,-0.018589024,-0.028742589,-0.016836036,-0.024929224,-0.024623353,0.058277316,-0.02126311,0.055800628,-0.016453594,0.023494028,0.011939725,0.006316923,0.05045838,0.052253675,0.0018598125,0.057757597,0.064271055,0.021462984,-0.00598809,-0.20524058,0.098078206,0.07923511,-0.0030400828,-0.0042570103,-0.048181806,-0.0057368493,0.028005809,-0.027782597,0.036583826,0.056569118,0.06672127,0.0072273863,-0.010364808,0.037651714,-0.058841214,-0.0156052,-0.007403201,0.004738195,-0.045108624,-0.043373324,-0.010229558,-0.015398024,-0.027500607,-0.013934623,-0.06390856,0.07244502,-0.03525932,-0.09858975,-0.017686404,0.032276656,0.013345139,-0.07269245,-0.0112332925,0.062022205,-0.0022355681,-0.067187116,0.25026688,-0.03435671,0.0287123,0.054986972,-0.059890773,0.027863948,-0.042722933,-0.01700282,-0.019195212,-0.025022611,0.019158779,0.031251986,-0.01125425,0.03872539,-0.020698383,0.030452145,0.014281089,0.029007183,0.047993574,0.01674457,-0.016619984,-0.017566299,0.061561186,0.029382374,-0.01851396,-0.0062958095,-0.09839809,0.020334389,0.1269149,0.0069205724,0.016504155,0.08306016,-0.060554363,-0.07056581,-0.021461489,0.049540065,0.047961283,-0.018516554,-0.022690471,0.044891648,-0.04310284,-0.078540124,-0.07875601,0.012700777,-0.09502175,-0.022846391,0.0629089,-0.015902612,0.046939265,-0.07262387,0.02601966,-0.005264863,0.04895392,-0.01572132,-0.0102630425,0.015897341,0.053458296,0.03574174,0.04539862,-0.035877213,0.03533559,-0.042159036,-0.0087875,-0.049615107,0.07554764,0.011191862,-0.113151096,-0.017492991,0.043413684,0.002327505,0.0073730038,0.02350307,0.035559066,-0.0059042843,0.05666708,0.044166975,-0.00055669114,-0.036611453,-0.0014730084,0.007564431,-0.011042368,0.05057629,-0.052485,-0.044374328,0.009869594,0.08320784,-0.023855116,0.015617343,-0.030314686,0.07130435,0.03665859,0.00899261,0.05550256,-0.054251857,0.0035008327,-0.046595573,-0.042936403,-0.011023383,0.018025259,0.026859136,-0.029143373,0.049876533,-0.0034112562,-0.041306548,0.055204038,0.019626688,-0.016427225,-0.04123679,0.0017773646,0.046740886,0.012245985,-0.033460714,0.021917453,0.07956837,-0.028794741,-0.08975127,-0.0037019434,-0.00012320856,0.03852602,0.053377513,0.040480774,0.0314433,-0.090866566,-0.081535764,-0.2508107,0.007842401,-0.0103528835,-0.017066024,0.031441532,-0.040664397,0.017248066,-0.034469314,0.016174091,0.04561676,0.05384791,-0.00558743,0.018127529,0.07188737,-0.029698055,0.04265685,0.06104204,0.012198512,-0.0036226169,0.044303454,-0.028414544,0.045141805,-0.028411133,-0.04631903,0.030073958,-0.0515857,0.220293,0.04642099,0.018873105,-0.011720311,0.032426845,0.046402935,-0.03572881,-0.09112599,-0.003913931,0.06326886,0.008865028,-0.041372094,-0.06256474,-0.028682407,-0.040730156,0.047156896,-0.0039689573,-0.05302654,-0.003632981,-0.07732629,-0.01206058,-0.019614374,-0.028614756,-0.011921634,0.05150594,-0.015722616,0.035769034,0.012905213,0.04353579,-0.038506903,-0.12106876,-0.009226098,-0.019487629,0.004457581,-0.014951816,-0.045989387,0.001073027,-0.009420541,0.02853069,0.0024750652,-0.028357819,-0.01819474,0.003554601,-0.090667546,0.004385141,0.08669419,0.017099937,-0.033926927,0.07534967,0.030821681,0.04540305,-0.018767703,-0.037650675,-0.05459591,0.038266014,0.024052124,0.047373742,0.037806187,0.017990775,0.026818357,0.07041108,-0.012912107,0.009049243,-0.06140867,0.026061615,-0.0029175973,-0.0034775157,-0.038097065,0.046520837,0.0017449996,-0.24222106,0.061534416,0.014094019,0.03329052,-0.05666281,-0.0035613445,0.005507172,0.044907637,-0.011295333,0.04069986,0.0023404267,-0.017250648,0.055625506,-0.040635873,0.01642882,0.03416647,0.06721072,-0.081086,0.04945331,-0.037871443,0.022263754,0.02852677,0.21389903,-0.088772774,0.0179931,-0.008538751,-0.02611542,0.043828104,0.0054317755,-0.009777816,0.035113182,-0.007311843,0.07082955,-0.021270387,0.0066470113,0.054239165,-0.06441797,0.038601365,0.0214487,-0.025159193,-0.03238237,0.02582966,-0.079627365,-0.011419387,0.0626605,-0.024815738,-0.03032111,-0.05392778,0.01915368,0.01430781,-0.015028325,-0.050955776,-0.0047285086,0.033127528,0.016017374,-0.016613198,-0.051912326,0.015621767,-0.06378826,-0.056303553,0.040947903,-0.033308335,-0.016811416,0.07314832,0.052192166]'),
('Boat', '[0.003451573,-0.03132442,0.041924234,-0.07151062,0.005656667,0.014033464,0.038280405,0.07405814,0.002665217,-0.020811431,0.02797703,-0.082384676,-0.021522641,0.049683884,0.0051554316,0.05113881,0.011191923,0.08603509,-0.04581075,0.027721966,0.06524101,-0.011254213,0.005719363,-0.06456224,-0.0067095314,0.027434144,-0.03998245,-0.018337745,-0.03024962,-0.12786528,-0.007468822,-0.07965858,0.002841196,-0.026761381,-0.002710397,-0.032941174,-0.01157222,0.01835951,0.025763508,0.017918503,0.01716959,0.04313931,-0.06198612,-0.019062353,-0.045892436,-0.047470637,-0.025586972,0.015134751,0.07648262,-0.04904084,0.013845007,-0.031671703,0.027743243,0.03567014,0.044218108,0.024208087,0.053735733,0.013186276,0.0055202967,0.042314656,0.05348394,0.024783261,-0.22115476,0.08963771,0.013096708,0.044419244,-0.017883042,-0.03910393,0.013514059,0.016817786,-0.052290566,0.017970363,0.042357013,0.10046304,0.027752733,-0.061662477,0.006513319,-0.037006002,0.027272867,0.027006257,0.0142964665,-0.06360955,-0.021836504,-0.029386729,0.003337552,-0.017336056,0.029699676,-0.026593758,0.03526048,0.0039346362,-0.057597876,-0.029524093,-0.01730882,0.014263184,-0.08440352,-0.00041559874,-0.004121953,-0.007147526,-0.066180535,0.21969096,-0.026675701,0.04207458,0.061170112,-0.024306577,0.044024996,-0.02159782,-0.052115727,-0.013863495,-0.04703005,-0.0007212677,0.004346511,-0.014467664,0.00843103,-0.013691538,-0.0072375066,-0.019222913,0.018029733,0.03152813,-0.030557722,-0.029202802,-0.014806717,-0.0122162895,0.05467705,-0.011990872,0.029487923,-0.057703514,0.08271271,0.105192035,0.007058811,-0.005331917,0.001044727,-0.027939413,-0.03841933,-0.039499894,-0.03354715,0.0008674375,0.0028215437,-0.0063504563,-0.0013052999,-0.01605963,-0.08247868,-0.12754385,-0.00035439446,-0.1135988,-0.043434717,0.038759027,0.002496258,0.03332463,-0.021302817,0.03943982,-0.017751513,0.04280311,0.0033914526,-0.023666987,0.018136116,-0.014481841,-0.019508364,0.07897855,-0.043303143,0.018218957,0.006419149,-0.03464293,-0.03316714,0.039618928,0.0014868038,-0.13087988,-0.0063449526,0.04696695,-0.030625926,-0.005813282,-0.01341627,0.05716793,-0.016758876,0.05393186,0.0777393,0.033460576,0.03254571,0.01969365,0.018621385,-0.009796354,0.050934583,-0.015461227,-0.054977313,0.071182206,0.06265597,-0.042554602,-0.02824994,-0.029791066,-0.0006974022,0.028558008,-0.0026959486,0.050376188,0.00981151,-0.026680889,-0.023037922,-0.030151734,-0.002973705,-0.055360682,0.0035032611,-0.049384903,0.075852595,-0.0074333963,-0.02718678,0.053259887,0.025845353,0.009015108,-0.017371554,-0.024869643,-0.013716606,0.07490163,-0.06361879,-0.0013744798,0.059992343,-0.015204999,-0.0040881964,-0.006926333,0.031526998,0.046630118,0.011222064,0.057870165,0.017545212,-0.118089885,-0.038867403,-0.21836688,0.017069299,0.013897999,-0.020572908,0.029985098,-0.011952629,0.015152697,-0.007566515,0.018216064,0.059099764,0.082925186,-0.041308656,-0.05755257,0.04316516,-0.03456597,0.04691071,0.03894865,-0.0013005713,0.0054288697,0.020903084,-0.0019502229,0.068574,-0.012678534,-0.023653781,0.05061183,-0.015460681,0.23320328,0.0540902,0.03415941,-0.03924938,0.0067807026,0.045057893,-0.026635995,-0.07698709,0.032159913,0.053191483,0.05704703,-0.021299265,-0.008298184,-0.03543195,-0.0070491335,0.04338257,-0.016497841,-0.073704265,-0.044688262,-0.040218312,-0.03207327,-0.0046671163,-0.023711322,0.0096596815,0.065637104,-0.02979161,0.033204455,0.026951917,-0.0056020273,-0.028967276,-0.07344016,0.009490252,-0.034891546,0.021181162,0.016997669,-0.01901137,3.6806174e-05,-0.05220573,0.03200216,-0.021272521,-0.030422227,-0.05363538,0.043928806,-0.08376253,-0.037302095,0.097358674,0.024045696,-0.017719422,0.081304744,0.047614243,0.06464407,-0.032756194,0.018565826,-0.044159252,0.040204857,-0.041234825,0.023949105,0.002779979,0.04253179,-0.015129703,0.022819744,-0.03602023,0.026503049,-0.03500936,0.021883395,-0.013415038,-0.025728086,-0.037960876,0.037986066,0.021162277,-0.31060043,0.031734128,-0.0022458911,0.042481646,-0.028866054,0.030208766,-0.0133145405,0.054347847,-0.073503956,0.062051143,0.005826847,0.049297802,0.030884407,-0.01688786,0.017160615,0.063027896,0.07313963,-0.09637417,0.051601037,-0.043145347,0.000817891,0.028763952,0.19526124,-0.041790325,0.0726707,-0.024687497,-0.0013156298,0.045472197,0.0010359284,0.015232671,-0.027874617,0.014591427,0.13244624,-0.039644428,0.020199,0.060292866,-0.05322153,0.03625645,0.017529424,-0.07401374,-0.036324993,0.025423175,-0.0046287975,0.0029855266,0.0834278,0.0056974366,-0.028152516,-0.091103025,-0.006525143,0.022312194,-0.03248805,-0.02484882,-0.049474973,0.010650054,0.08801606,9.901745e-05,-0.021977311,-0.03979849,-0.04118816,-0.019186275,-0.01652988,-0.068953894,-0.019286314,0.003947064,0.024725446]')
```

----------------------------------------

TITLE: Fetching Database Triggers Using SQL
DESCRIPTION: SQL query to retrieve information about triggers in the database. This query selects relevant columns from the information_schema.triggers table to display trigger details.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-04-mcp-server.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
    event_object_schema as schema,
    event_object_table as table,
    trigger_name,
    event_manipulation as event,
    action_statement as definition
from
	information_schema.triggers
order by
	event_object_schema, event_object_table;
```

----------------------------------------

TITLE: Installing vecs Python Client
DESCRIPTION: Installs the vecs Python client using pip. Requires Python 3.7+.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/vector_hello_world.ipynb#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
pip install vecs
```

----------------------------------------

TITLE: Email Template for Password Reset - HTML
DESCRIPTION: This HTML snippet is an email template for password reset instructions. It includes a link for users to reset their password securely.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/password-based-auth.mdx#2025-04-21_snippet_2

LANGUAGE: html
CODE:
```
<h2>Reset Password</h2>

<p>Follow this link to reset the password for your user:</p>
<p>
  <a
    href="{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=recovery&next={{ .RedirectTo }}"
    >Reset Password</a
  >
</p>
```

----------------------------------------

TITLE: Serving Edge Functions Locally
DESCRIPTION: Command to run Edge Functions locally using the Supabase CLI, enabling testing and debugging in a development environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/unit-test.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase functions serve
```

----------------------------------------

TITLE: Granting Permissions to Postgres Role in Supabase
DESCRIPTION: This SQL query grants all permissions on tables, functions, and sequences in the graphql schema to various roles. It's used to resolve permission errors when pulling the database schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
grant all on all tables in schema graphql to postgres, anon, authenticated, service_role;
grant all on all functions in schema graphql to postgres, anon, authenticated, service_role;
grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
```

----------------------------------------

TITLE: Querying Timeout Events in Logs
DESCRIPTION: Complex query to identify timed-out events and long-running queries using the Logs Explorer.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
select
  cast(postgres_logs.timestamp as datetime) as timestamp,
  event_message,
  parsed.error_severity,
  parsed.user_name,
  parsed.query,
  parsed.detail,
  parsed.hint,
  parsed.sql_state_code,
  parsed.backend_type
from
  postgres_logs
  cross join unnest(metadata) as metadata
  cross join unnest(metadata.parsed) as parsed
where
  regexp_contains(event_message, 'duration|statement timeout')
  -- (OPTIONAL) MODIFY OR REMOVE
  and parsed.user_name = 'authenticator' -- <--------CHANGE
order by timestamp desc
limit 100;
```

----------------------------------------

TITLE: Supavisor Session Mode Connection String
DESCRIPTION: Example of a Supavisor connection string in session mode using port 5432. Always uses IPv4 address.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ipv4-address.mdx#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
postgresql://postgres.ajrbwkcuthywfddihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:5432/postgres
```

----------------------------------------

TITLE: Sign In Anonymously with Python in Supabase
DESCRIPTION: Creates an anonymous user authentication session using the Supabase Python client. Returns a response containing session information for the anonymous user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
response = supabase.auth.sign_in_anonymously()
```

----------------------------------------

TITLE: Restarting Supabase Local Development Stack
DESCRIPTION: Commands to stop and restart the entire Supabase development stack to enable additional services like Auth and Storage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/restoring-downloaded-backup.mdx#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
supabase stop
supabase start
```

----------------------------------------

TITLE: Filtering User Data with Traditional Query in JavaScript
DESCRIPTION: Example showing how to query user data with explicit filtering using a logged-in user ID. This demonstrates the traditional approach before implementing Row Level Security policies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-05-supabase-auth.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const loggedInUserId = 'd0714948'
let user = await supabase.from('users').select('user_id, name').eq('user_id', loggedInUserId)
// Returns { id: 'd0714948', name: 'Jane'
```

----------------------------------------

TITLE: Querying Postgres Settings in Supabase
DESCRIPTION: This SQL query retrieves all Postgres settings and their descriptions from the pg_settings view.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select * from pg_settings;
```

----------------------------------------

TITLE: Creating a new Nuxt application using npx
DESCRIPTION: This command initializes a new Nuxt application using the latest version of Nuxt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nuxtjs.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx nuxi@latest init my-app
```

----------------------------------------

TITLE: Initializing Sentry with Supabase Client constructor
DESCRIPTION: Example of initializing Sentry with the Supabase Client constructor for error monitoring. Configures tracing, breadcrumbs, and error tracking functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_3

LANGUAGE: ts
CODE:
```
import * as Sentry from '@sentry/browser'
import { SupabaseClient } from '@supabase/supabase-js'
import { supabaseIntegration } from '@supabase/sentry-js-integration'

Sentry.init({
  dsn: SENTRY_DSN,
  integrations: [
    supabaseIntegration(SupabaseClient, Sentry, {
      tracing: true,
      breadcrumbs: true,
      errors: true,
    }),
  ],
})
```

----------------------------------------

TITLE: Creating Table and Inserting Data as Junior Dev
DESCRIPTION: Demonstrates creating a users table and inserting data as junior_dev role.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_20

LANGUAGE: bash
CODE:
```
# as junior_dev
postgres=> create table public.users(id serial primary key, name text);
CREATE TABLE
postgres=> insert into public.users(name) values ('john doe');
INSERT 0 1
```

----------------------------------------

TITLE: Sign-up Email Template HTML Configuration
DESCRIPTION: HTML template for user signup confirmation email, including dynamic variables for token and redirect handling
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/password-based-auth.mdx#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<h2>Confirm your signup</h2>

<p>Follow this link to confirm your user:</p>
<p>
  <a
    href="{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email&next={{ .RedirectTo }}"
    >Confirm your email</a
  >
</p>
```

----------------------------------------

TITLE: Displaying Supabase Inspect DB Help Command
DESCRIPTION: Shows the help command for the 'supabase inspect db' CLI tool, which provides various utilities for inspecting and debugging Postgres databases.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_0

LANGUAGE: markdown
CODE:
```
```markdown
supabase inspect db --help
Tools to inspect your Supabase database

Usage:
  supabase inspect db [command]

Available Commands:
  bloat                Estimates space allocated to a relation that is full of dead tuples
  blocking             Show queries that are holding locks and the queries that are waiting for them to be released
  cache-hit            Show cache hit rates for tables and indices
  calls                Show queries from pg_stat_statements ordered by total times called
  index-sizes          Show index sizes of individual indexes
  index-usage          Show information about the efficiency of indexes
  locks                Show queries which have taken out an exclusive lock on a relation
  long-running-queries Show currently running queries running for longer than 5 minutes
  outliers             Show queries from pg_stat_statements ordered by total execution time
  replication-slots    Show information about replication slots on the database
  role-connections     Show number of active connections for all database roles
  seq-scans            Show number of sequential scans recorded against all tables
  table-index-sizes    Show index sizes of individual tables
  table-record-counts  Show estimated number of rows per table
  table-sizes          Show table sizes of individual tables without their index sizes
  total-index-size     Show total size of all indexes
  total-table-sizes    Show total table sizes, including table index sizes
  unused-indexes       Show indexes with low usage
  vacuum-stats         Show statistics related to vacuum operations per table
```
```

----------------------------------------

TITLE: Configuring API Event Monitoring
DESCRIPTION: SQL commands to enable write logging for PostgREST API roles
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
alter role "authenticator" set pgaudit.log to 'write';

-- the above is the practical equivalent to:
-- alter role "anon" set pgaudit.log TO 'write';
-- alter role "authenticated" set pgaudit.log TO 'write';
-- alter role "service_role" set pgaudit.log TO 'write';
```

----------------------------------------

TITLE: Creating Unlogged Queue
DESCRIPTION: Creates an unlogged message queue for higher write throughput at the cost of durability.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select pgmq.create_unlogged('my_unlogged');
```

----------------------------------------

TITLE: Running Deno script with Supabase
DESCRIPTION: Command to execute a Deno script that uses Supabase. This runs the main.ts file with all permissions allowed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
deno run -A main.ts
```

----------------------------------------

TITLE: Embedding YouTube Video using iframe in HTML/JSX
DESCRIPTION: Code for embedding a YouTube video within a responsive container using an iframe element in what appears to be a React JSX component. The code includes proper styling and responsive design considerations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-06-02-supabase-beta-may-2021.mdx#2025-04-21_snippet_0

LANGUAGE: html
CODE:
```
<div className="video-container">
  <iframe
    className="video-with-border w-full"
    src="https://www.youtube-nocookie.com/embed/qETcl3SUfzU"
    frameBorder="1"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>
```

----------------------------------------

TITLE: Creating Indexes in OrioleDB
DESCRIPTION: Examples of creating B-tree indexes in OrioleDB, including a simple index on published_at and a conditional index on views.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/orioledb.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create index blog_post_published_at on blog_post (published_at);

create index blog_post_views on blog_post (views) where (views > 1000);
```

----------------------------------------

TITLE: Enabling and Disabling pgjwt Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the pgjwt extension in PostgreSQL. It's recommended to create the extension within a separate schema to keep the public schema clean.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgjwt.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the "pgjwt" extension
create extension pgjwt schema extensions;

-- Disable the "pgjwt" extension
drop extension if exists pgjwt;
```

----------------------------------------

TITLE: Enabling Query ID in PostgreSQL 14
DESCRIPTION: Demonstrates how to enable the query_id feature in PostgreSQL 14. This feature allows for better monitoring and troubleshooting of queries by providing a unique identifier for each query.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_5

LANGUAGE: sql
CODE:
```
alter system set compute_query_id = 'on';
```

----------------------------------------

TITLE: Creating the Application Class with Hilt
DESCRIPTION: Defines the custom Application class with the HiltAndroidApp annotation to enable dependency injection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_6

LANGUAGE: kotlin
CODE:
```
// ManageProductApplication.kt
@HiltAndroidApp
class ManageProductApplication: Application()
```

----------------------------------------

TITLE: Query Result Format in Python
DESCRIPTION: Shows the format of results returned by the query method, which includes the record ID, distance measure value, and metadata as a tuple.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
[("vec1", 0.000697, {"year": 1973})]
```

----------------------------------------

TITLE: Inserting Multi-Range Data in PostgreSQL 14
DESCRIPTION: Demonstrates how to insert data into a table with a multi-range column. This showcases the ability to insert non-contiguous time ranges in a single statement, a new feature in PostgreSQL 14.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_3

LANGUAGE: sql
CODE:
```
insert into sensor_range
  (metric_desc, metric_level, metric_ts)
values
  (
    'Temperature',
    'high',
    '{[2021-11-01 6:00, 2021-11-01 10:00],[2021-11-05 14:00, 2021-11-05 20:00]}'
  );

insert into sensor_range
  (metric_desc, metric_level, metric_ts)
values
  (
    'Temperature',
    'low',
    '{[2021-11-01 10:00, 2021-11-01 12:00],[2021-11-05 21:00, 2021-11-05 22:00]}'
  );
```

----------------------------------------

TITLE: Importing Sonner Toast Function
DESCRIPTION: Shows how to import the toast function from Sonner for use in React components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sonner.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
import { toast } from 'sonner'
```

----------------------------------------

TITLE: Implementing StoresService with Supabase Integration in Angular
DESCRIPTION: A TypeScript service that provides methods to interact with Supabase for store-related operations. It includes interfaces for store data structures and methods to fetch nearby stores using PostGIS spatial queries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@angular/core'
import { DomSanitizer, SafeUrl } from '@angular/platform-browser'
import { SupabaseClient, User, createClient } from '@supabase/supabase-js'
import { environment } from 'src/environments/environment'

export interface StoreEntry {
  lat?: number
  long?: number
  name: string
  description: string
  image?: File
}
export interface StoreResult {
  id: number
  lat: number
  long: number
  name: string
  description: string
  image?: SafeUrl
  dist_meters?: number
}
@Injectable({
  providedIn: 'root',
})
export class StoresService {
  private supabase: SupabaseClient

  constructor(private sanitizer: DomSanitizer) {
    this.supabase = createClient(environment.supabaseUrl, environment.supabaseKey)
  }

  // Get all places with calculated distance
  async getNearbyStores(lat: number, long: number) {
    const { data, error } = await this.supabase.rpc('nearby_stores', {
      lat,
      long,
    })
    return data
  }
}
```

----------------------------------------

TITLE: Uninstalling Supabase Cron Postgres Module
DESCRIPTION: SQL command to uninstall the Supabase Cron module by dropping the pg_cron extension. This action will permanently delete all Jobs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cron/install.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
drop extension if exists pg_cron;
```

----------------------------------------

TITLE: Creating a Sample SQL Table
DESCRIPTION: Creates a sample 'movies' table in the public schema with id, name, and data columns.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create table public.movies (
  id bigint generated always as identity primary key,
  name text not null,
  data jsonb null
);
```

----------------------------------------

TITLE: Running Supabase CLI Command
DESCRIPTION: Command to start Supabase locally using the CLI tool. Requires Docker to be running on the system.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/flutter-figma-clone/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase start
```

----------------------------------------

TITLE: Adding GitLab Sign-In in Supabase JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to utilize Supabase's `signInWithOAuth` method to authenticate users with GitLab. Dependencies include the Supabase JavaScript client, which should be initialized with the project's URL and anon key. The main parameter is `provider: 'gitlab'`, which specifies GitLab as the OAuth provider. Upon execution, it attempts to log in a user using GitLab credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

// ---cut---
async function signInWithGitLab() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'gitlab',
  })
}
```

----------------------------------------

TITLE: Vector Embeddings Data Rows
DESCRIPTION: Database records containing 384-dimensional vector embeddings for object classification. Each row contains an object label and its corresponding vector representation, likely generated from an embedding model.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
('Tomato', '[-0.029869203,0.015828134,...,0.03005724]'),
('Desk', '[-0.017075958,-0.010888746,...,0.039229322]')
```

----------------------------------------

TITLE: Configuring Edge Runtime Policy for WebSocket Testing
DESCRIPTION: TOML configuration to set the Edge Runtime policy to 'per_worker' in the config.toml file. This prevents automatic termination of Edge Functions after a request completes, allowing WebSocket connections to remain open during local testing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/websockets.mdx#2025-04-21_snippet_4

LANGUAGE: toml
CODE:
```
[edge_runtime]
policy = "per_worker"
```

----------------------------------------

TITLE: Installing Supabase via Deno
DESCRIPTION: Command to install Supabase using Deno's 'add' command. This adds the Supabase dependency to your Deno project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
deno add @supabase/supabase-js
```

----------------------------------------

TITLE: Installing pgloader for Bulk Data Import in Supabase
DESCRIPTION: Command to install pgloader, a tool for efficiently importing data into a Postgres database. This is typically run on a local machine or server to prepare for data import.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/import-data.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ apt-get install pgloader
```

----------------------------------------

TITLE: Reserved Role Check Implementation in C
DESCRIPTION: Function that checks if a utility statement is attempting to modify reserved roles. Handles both ALTER ROLE and DROP ROLE statements by comparing role names against a list of reserved roles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_9

LANGUAGE: c
CODE:
```
static char*
look_for_reserved_role(Node *utility_stmt, List *reserved_role_list)
{
  switch (utility_stmt->type)
  {
    case T_AlterRoleStmt:
    {
      AlterRoleStmt *stmt = (AlterRoleStmt *) utility_stmt;
      RoleSpec *role = stmt->role;
      ListCell *role_cell;

      foreach(role_cell, reserved_role_list)
      {
        char *reserved_role = (char *) lfirst(role_cell);
        if (strcmp(get_rolespec_name(role), reserved_role) == 0)
          return reserved_role;
      }
      break;
    }
    case T_DropRoleStmt:
    {
      DropRoleStmt *stmt = (DropRoleStmt *) utility_stmt;
      ListCell *item;
      foreach(item, stmt->roles)
      {
        RoleSpec *role = lfirst(item);
        ListCell *role_cell;
        foreach(role_cell, reserved_role_list)
        {
          char *reserved_role = (char *) lfirst(role_cell);
          if (strcmp(get_rolespec_name(role), reserved_role) == 0)
            return reserved_role;
        }
      }
      break;
    }
    default:
      break;
  }
  return NULL;
}
```

----------------------------------------

TITLE: Installing Pagination Component via CLI
DESCRIPTION: Command to install the pagination component using the shadcn-ui CLI tool.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/pagination.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn-ui@latest add pagination
```

----------------------------------------

TITLE: Updating getServerSideProps with createPagesServerClient in Next.js
DESCRIPTION: This snippet shows how to replace the deprecated withPageAuth function with createPagesServerClient in a Next.js page's getServerSideProps. It demonstrates creating an authenticated Supabase client, checking for an active session, and redirecting if no user is found.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
import { createPagesServerClient, User } from '@supabase/auth-helpers-nextjs'
import { GetServerSidePropsContext } from 'next'

export default function Profile({ user }: { user: User }) {
  return <pre>{JSON.stringify(user, null, 2)}</pre>
}

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  // Create authenticated Supabase Client
  const supabase = createPagesServerClient(ctx)
  // Check if we have a session
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!user)
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }

  return {
    props: {
      initialSession: session,
      user: session.user,
    },
  }
}
```

----------------------------------------

TITLE: Setting up Environment Variables for Supabase OpenAI Function
DESCRIPTION: Copies the example environment file to create a local configuration file for the OpenAI function.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/openai/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cp supabase/.env.local.example supabase/.env.local
```

----------------------------------------

TITLE: Running Supabase OpenAI Function Locally
DESCRIPTION: Starts the Supabase Functions server locally with environment variables and disabled JWT verification.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/openai/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions serve --env-file ./supabase/.env.local --no-verify-jwt
```

----------------------------------------

TITLE: PGroonga Full-Text Search with Negation
DESCRIPTION: SQL command showing how to perform a full-text search with PGroonga that includes one word but excludes another, using the negation operator.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
select * from memos where content &@~ 'postgres -pgroonga';
```

----------------------------------------

TITLE: Calling plv8 Functions in JavaScript with Supabase
DESCRIPTION: Example of calling a plv8 function from JavaScript using the Supabase client library's RPC method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
const { data, error } = supabase.rpc('function_name')
```

----------------------------------------

TITLE: Changing Table Ownership in Supabase
DESCRIPTION: This SQL command changes the ownership of a table to the postgres role. It's used to resolve permission issues when pushing migrations to staging or production databases.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
ALTER TABLE users OWNER TO postgres;
```

----------------------------------------

TITLE: Installing Supabase.js v2 via npm
DESCRIPTION: Command to install the latest version of @supabase/supabase-js using npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Querying Enum Range Values
DESCRIPTION: Shows how to retrieve all possible values of an enum type using the enum_range function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
select enum_range(null::mood);
```

----------------------------------------

TITLE: Configuring WAL-G restore_command for Recovery
DESCRIPTION: Command to modify the PostgreSQL configuration to set up the restore_command, which instructs PostgreSQL how to retrieve archived WAL files during recovery.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_10

LANGUAGE: shell
CODE:
```
$ echo "restore_command = '/usr/bin/envdir /etc/wal-g.d/env /usr/local/bin/wal-g wal-fetch \"%f\" \"%p\" >> /tmp/wal.log 2>&1'" >> /etc/postgresql/12/main/postgresql.conf
```

----------------------------------------

TITLE: Installing Supabase Client Library
DESCRIPTION: Command to navigate to the SvelteKit app directory and install the Supabase JavaScript client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/sveltekit.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cd my-app && npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Implementing Kakao OAuth Sign-In with Flutter
DESCRIPTION: Method to authenticate users using Kakao OAuth in a Flutter application, with support for web and mobile platforms and custom redirect handling
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-kakao.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signInWithKakao() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.kakao,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}
```

----------------------------------------

TITLE: Creating Storage Bucket with SQL
DESCRIPTION: Creates a public storage bucket named 'avatars' using direct SQL insertion into the storage.buckets table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/creating-buckets.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
insert into storage.buckets
  (id, name, public)
values
  ('avatars', 'avatars', true);
```

----------------------------------------

TITLE: Accessing Supabase Metrics Endpoint Using cURL
DESCRIPTION: Example of how to access the Prometheus-compatible metrics endpoint for a Supabase project using cURL with HTTP Basic Auth. The username is 'service_role' and the password is the service role JWT from the Supabase dashboard.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/metrics.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
> curl https://<project-ref>.supabase.co/customer/v1/privileged/metrics --user 'service_role:<service-role-jwt>'
```

----------------------------------------

TITLE: Updating JWT Token per Channel in Kotlin
DESCRIPTION: This Kotlin snippet shows how to update the JWT token for a specific Realtime channel. It uses the `updateAuth` method on the channel object to set the new token. This approach is necessary in Kotlin for refreshing tokens.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_57

LANGUAGE: kotlin
CODE:
```
myChannel.updateAuth("fresh-token")
```

----------------------------------------

TITLE: Filtering Null Values in GraphQL Query
DESCRIPTION: This GraphQL query demonstrates how to use the new 'is' filter to query for blog entries where the name is null. It showcases the new null filtering capability in pg_graphql v1.2.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-21-whats-new-in-pg-graphql-v1-2.mdx#2025-04-21_snippet_4

LANGUAGE: graphql
CODE:
```
{
  blogCollection(filter: { name: {is: NULL}}) {
    ...
  }
}
```

----------------------------------------

TITLE: Basic RLS Policy Without Role Specification
DESCRIPTION: Example of a basic RLS policy without role specification, which can lead to unnecessary policy evaluation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_17

LANGUAGE: sql
CODE:
```
create policy "rls_test_select" on rls_test
using ( auth.uid() = user_id );
```

----------------------------------------

TITLE: Configuring Supabase MCP Server for Windows (WSL)
DESCRIPTION: JSON configuration for running the Supabase MCP server on Windows using Windows Subsystem for Linux (WSL). It specifies 'wsl' as the command and includes arguments for installing and running the latest version of the server with a personal access token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_config.mdx#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "supabase": {
      "command": "wsl",
      "args": [
        "npx",
        "-y",
        "@supabase/mcp-server-supabase@latest",
        "--access-token",
        "<personal-access-token>"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring AppRoutingModule for Login and Account Pages in Angular
DESCRIPTION: This code sets up the routing configuration for the application, defining paths for the login and account pages using lazy loading.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { NgModule } from '@angular/core'
import { PreloadAllModules, RouterModule, Routes } from '@angular/router'

const routes: Routes = [
  {
    path: '',
    loadChildren: () => import('./login/login.module').then((m) => m.LoginPageModule),
  },
  {
    path: 'account',
    loadChildren: () => import('./account/account.module').then((m) => m.AccountPageModule),
  },
]

@NgModule({
  imports: [
    RouterModule.forRoot(routes, {
      preloadingStrategy: PreloadAllModules,
    }),
  ],
  exports: [RouterModule],
})
export class AppRoutingModule {}
```

----------------------------------------

TITLE: Creating ProductDetailsViewModel with Hilt and State Management - Kotlin
DESCRIPTION: Defines a ViewModel for managing detailed product data, using Hilt for dependency injection. It handles loading of specific product details based on a product ID and allows updating the product’s information.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_19

LANGUAGE: Kotlin
CODE:
```
@HiltViewModel
class ProductDetailsViewModel @Inject constructor(
    private val productRepository: ProductRepository,
    savedStateHandle: SavedStateHandle,
    ) : ViewModel() {

    private val _product = MutableStateFlow<Product?>(null)
    val product: Flow<Product?> = _product

    private val _name = MutableStateFlow("")
    val name: Flow<String> = _name

    private val _price = MutableStateFlow(0.0)
    val price: Flow<Double> = _price

    private val _imageUrl = MutableStateFlow("")
    val imageUrl: Flow<String> = _imageUrl

    init {
        val productId = savedStateHandle.get<String>(ProductDetailsDestination.productId)
        productId?.let {
            getProduct(productId = it)
        }
    }

    private fun getProduct(productId: String) {
        viewModelScope.launch {
           val result = productRepository.getProduct(productId).asDomainModel()
            _product.emit(result)
            _name.emit(result.name)
            _price.emit(result.price)
        }
    }

    fun onNameChange(name: String) {
        _name.value = name
    }

    fun onPriceChange(price: Double) {
        _price.value = price
    }

    fun onSaveProduct(image: ByteArray) {
        viewModelScope.launch {
            productRepository.updateProduct(
                id = _product.value?.id,
                price = _price.value,
                name = _name.value,
                imageFile = image,
                imageName = "image_${_product.value.id}",
            )
        }
    }

    fun onImageChange(url: String) {
        _imageUrl.value = url
    }

    private fun ProductDto.asDomainModel(): Product {
        return Product(
            id = this.id,
            name = this.name,
            price = this.price,
            image = this.image
        )
    }
}
```

----------------------------------------

TITLE: Querying Prediction Results from Supabase
DESCRIPTION: Python code for retrieving object detection predictions from a Supabase table based on the filename. It filters the 'predictions' table to find records matching the specified image.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
result = supabase.table('predictions') \
    .select("predictions") \
    .filter("filename", "eq", image) \
    .execute()

print(result)
```

----------------------------------------

TITLE: Creating Organization Settings Table in SQL
DESCRIPTION: SQL code to create a table for storing organization settings with SSO provider information and other metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table organization_settings (
  -- the organization's unique ID
  id uuid not null primary key,
  -- the organization's SSO identity provider
  sso_provider_id uuid unique,
  -- name of the organization
  name text,
  -- billing plan (paid, Free, Enterprise)
  billing_plan text
);
```

----------------------------------------

TITLE: Starting Supabase Local Development Environment for ChatGPT Retrieval Plugin
DESCRIPTION: Bash command to start a local Supabase development environment using the Supabase CLI, which includes pgvector for vector operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
supabase start
```

----------------------------------------

TITLE: Initializing Supabase Client with Clerk Token (Swift)
DESCRIPTION: Shows how to initialize the Supabase client in a Swift (iOS) application using the `Supabase` package, configuring it to fetch the access token from Clerk's shared session token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/clerk.mdx#_snippet_2

LANGUAGE: swift
CODE:
```
import Clerk
import Supabase

let supabase = SupabaseClient(
  supabaseURL: URL(string: "https://project-ref.supabase.io")!,
  supabaseKey: "supabase.anon.key",
  options: SupabaseClientOptions(
    auth: SupabaseClientOptions.AuthOptions(
      accessToken: {
        try await Clerk.shared.session?.getToken()?.jwt
      }
    )
  )
)
```

----------------------------------------

TITLE: Serving Supabase Function Locally for Puppeteer Screenshot Generation
DESCRIPTION: This command serves the Supabase function locally, using an environment file and disabling JWT verification. It's used for local development and testing of the Puppeteer screenshot function.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/puppeteer/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions serve --env-file ./supabase/.env.local --no-verify-jwt
```

----------------------------------------

TITLE: Self-hosting Supabase Image Transformations with imgproxy
DESCRIPTION: Docker configuration for self-hosting the image transformation service using imgproxy, which is used under the hood by Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_32

LANGUAGE: YAML
CODE:
```
imgproxy:
  image: darthsim/imgproxy
  environment:
    - IMGPROXY_ENABLE_WEBP_DETECTION=true
    - IMGPROXY_JPEG_PROGRESSIVE=true
```

----------------------------------------

TITLE: Generating Rails Scaffold and Running Migrations
DESCRIPTION: Commands to generate a scaffold for the Article model and run database migrations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
bin/rails generate scaffold Article title:string body:text
bin/rails db:migrate
```

----------------------------------------

TITLE: Using Supabase CLI with NPX
DESCRIPTION: Run Supabase CLI commands using NPX without installation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
npx supabase <command>
```

----------------------------------------

TITLE: Configuring MCP for Local Supabase Instance
DESCRIPTION: JSON configuration for connecting a local Supabase instance to MCP-compatible AI tools using the Postgres MCP server. This snippet is a placeholder for the actual configuration, which is included via a partial template.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/mcp.mdx#2025-04-22_snippet_3

LANGUAGE: json
CODE:
```
<$Partial path="mcp_postgres_config.mdx" variables={{ "app": "your MCP client" }} />
```

----------------------------------------

TITLE: JavaScript Entry Point Configuration - TOML
DESCRIPTION: TOML configuration for specifying a JavaScript file as the entry point for an Edge Function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/development-tips.mdx#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[functions.hello-world]
entrypoint = './functions/hello-world/index.js'
```

----------------------------------------

TITLE: Creating a Paddle Foreign Server using Wasm FDW in SQL
DESCRIPTION: This SQL snippet creates a Paddle foreign server using the Wasm FDW. It specifies the Wasm package URL, version, checksum, and Paddle API credentials.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgres-foreign-data-wrappers-with-wasm.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- create Paddle foreign server
create server paddle_server
  foreign data wrapper wasm_wrapper
  options (
    -- check all available versions at
    -- https://fdw.dev/catalog/paddle/#available-versions
    fdw_package_url 'https://github.com/supabase/wrappers/releases/download/wasm_paddle_fdw_v0.1.1/paddle_fdw.wasm',
    fdw_package_name 'supabase:paddle-fdw',
    fdw_package_version '0.1.1',
    fdw_package_checksum 'c5ac70bb2eef33693787b7d4efce9a83cde8d4fa40889d2037403a51263ba657',

    -- save your Paddle credentials
    api_url 'https://sandbox-api.paddle.com',
    api_key '<your Paddle sandbox API key>'
  );
```

----------------------------------------

TITLE: Configuring Postgres WAL Size using Supabase CLI
DESCRIPTION: This snippet demonstrates how to use the Supabase CLI to update Postgres configuration parameters, specifically increasing the default WAL size to 2GB.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-10-30-supabase-clickhouse-partnership.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase --experimental --project-ref xxxx-yyy \
postgres-config update --config max_slot_wal_keep_size=2GB
```

----------------------------------------

TITLE: Updating Enum Column Values
DESCRIPTION: Shows how to update an enum column value to a different valid enum value.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
update person
set current_mood = 'excited'
where name = 'Alice';
```

----------------------------------------

TITLE: Using Wildcards in Regular Expressions for Log Filtering
DESCRIPTION: Demonstrates the use of the period (.) wildcard operator to match any character in a pattern. This example will match strings like 'helloworld', 'hello-world', etc.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
-- find event_messages like "hello<anything>world"
regexp_contains(event_message, 'hello.world')
```

----------------------------------------

TITLE: Setting Long Query Timeout in PostgreSQL
DESCRIPTION: SQL command to set a long query timeout of 120 minutes for the current session in PostgreSQL, allowing for extended execution time of complex queries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/avoiding-timeouts-in-long-running-queries-6nmbdN.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
set statement_timeout = '120min';
```

----------------------------------------

TITLE: JSON Schema Definition Example
DESCRIPTION: JSON Schema definition specifying constraints for objects with a required string attribute named 'foo'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-pg-jsonschema-a-postgres-extension-for-json-validation.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
{
  "type": "object",
  "properties": {
    "foo": {
      "type": "string"
    }
  },
  "required": ["foo"],
  "additionalProperties": false
}
```

----------------------------------------

TITLE: Querying Foreign Table in Postgres
DESCRIPTION: SQL command to query a foreign table after it has been imported from the remote database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select * from "<foreign_table>"
```

----------------------------------------

TITLE: Seeding Employee Data - SQL
DESCRIPTION: SQL script to insert initial employee data into the employees table
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
insert into public.employees
  (name)
values
  ('Erlich Bachman'),
  ('Richard Hendricks'),
  ('Monica Hall');
```

----------------------------------------

TITLE: Creating a Cal.com Booking with Postgres INSERT
DESCRIPTION: SQL to create a booking in Cal.com by inserting a record into the foreign table. It demonstrates how to provide booking details like start time, event type ID, and attendee information as a JSON object.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
-- make a 15 minutes meeting with Elon Musk
insert into cal.bookings(attrs)
values (
  '{
     "start": "2025-01-01T23:30:00.000Z",
     "eventTypeId": 1398027,
     "attendee": {
       "name": "Elon Musk",
       "email": "elon.musk@x.com",
       "timeZone": "America/New_York"
     }
  }'::jsonb
);
```

----------------------------------------

TITLE: Importing and Using Current User Avatar Component in React
DESCRIPTION: This snippet demonstrates how to import and render the CurrentUserAvatar component within a React functional component. It displays the avatar of the current user based on Supabase Auth authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/current-user-avatar.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { CurrentUserAvatar } from '@/components/current-user-avatar'

const CurrentUserAvatarDemo = () => {
  return (
    <Header className="flex items-center justify-between">
      <h1>Lumon Industries</h1>
      <CurrentUserAvatar />
    </Header>
  )
}

export default CurrentUserAvatarDemo
```

----------------------------------------

TITLE: Creating a Traditional Reservations Table with Separate Date Columns
DESCRIPTION: This SQL snippet creates a table using separate columns for start and end times, demonstrating the traditional approach to storing time-based data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-11-range-columns.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table reservations (
  id serial primary key,
  title text,
  start_at timestamptz,
  end_at timestamptz
);
```

----------------------------------------

TITLE: Stop Supabase Local Database (Bash)
DESCRIPTION: Stops the local Supabase development environment before making schema changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
supabase stop
```

----------------------------------------

TITLE: TypeScript Type Generation Example
DESCRIPTION: Example showing improved TypeScript type generation with helper types for better developer experience
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-08-supabase-local-dev.mdx#2025-04-22_snippet_5

LANGUAGE: tsx
CODE:
```
// Before
let movie: Database['public']['Tables']['movies']['Row'] = // ...

// After
let movie: Tables<'movies'> = // ...
```

----------------------------------------

TITLE: Inserting Data with Returning - Dart Supabase
DESCRIPTION: Shows updated method for inserting data and retrieving inserted records in Supabase Dart library
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_14

LANGUAGE: dart
CODE:
```
final res = await supabase
  .from('my_table')
  .insert(data)
  .execute();
```

LANGUAGE: dart
CODE:
```
final insertedData = await supabase.from('my_table').insert(data).select();
```

----------------------------------------

TITLE: Creating a RUM Index with Attached Column using rum_tsvector_addon_ops
DESCRIPTION: Example of creating a table and RUM index with rum_tsvector_addon_ops, which allows attaching an additional column (timestamp in this case) to the index for combined text search and timestamp-based ordering.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
CREATE TABLE tsts (id int, t tsvector, d timestamp);
CREATE INDEX tsts_idx ON tsts USING rum (t rum_tsvector_addon_ops, d)
    WITH (attach = 'd', to = 't');
```

----------------------------------------

TITLE: Fetching Repositories with a Provider Token in TypeScript
DESCRIPTION: Similar to the JavaScript snippet, this TypeScript version demonstrates fetching repositories from GitHub using the provider token while ensuring type safety with proper annotations for user and repository data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
import { User, createPagesServerClient } from '@supabase/auth-helpers-nextjs'
import { GetServerSidePropsContext } from 'next'

export default function ProtectedPage({ user, allRepos }: { user: User; allRepos: any }) {
  return (
    <>
      <div>Protected content for {user.email}</div>
      <p>Data fetched with provider token:</p>
      <pre>{JSON.stringify(allRepos, null, 2)}</pre>
      <p>user:</p>
      <pre>{JSON.stringify(user, null, 2)}</pre>
    </>
  )
}

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  // Create authenticated Supabase Client
  const supabase = createPagesServerClient(ctx)
  // Check if we have a session
  const {
    data: { session },
  } = await supabase.auth.getSession()

  if (!session)
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }

  // Retrieve provider_token & logged in user's third-party id from metadata
  const { provider_token, user } = session
  const userId = user.user_metadata.user_name

  const allRepos = await (
    await fetch(`https://api.github.com/search/repositories?q=user:${userId}`, {
      method: 'GET',
      headers: {
        Authorization: `token ${provider_token}`,
      },
    })
  ).json()

  return { props: { user, allRepos } }
}
```

----------------------------------------

TITLE: Configuring Deno imports for Supabase
DESCRIPTION: JSON configuration in deno.json file to specify the Supabase import from JSR. This sets up the import map for using Supabase in a Deno project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "imports": {
    "@supabase/supabase-js": "jsr:@supabase/supabase-js@2"
  }
}
```

----------------------------------------

TITLE: Calling plv8 Functions in SQL
DESCRIPTION: Example of calling a plv8 function using standard SQL syntax. This is one way to execute JavaScript functions stored in the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select function_name();
```

----------------------------------------

TITLE: Database Linting CLI Command Help
DESCRIPTION: Displays the help output for the 'supabase db lint' command, showing available options for checking database typing errors including error levels and schema selection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/testing-and-linting.mdx#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
supabase db lint --help
Checks local database for typing error

Usage:
  supabase db lint [flags]

Flags:
  --level [ warning | error ] Error level to emit. (default warning)
  --linked Lints the linked project for schema errors.
  -s, --schema strings List of schema to include. (default all)
```

----------------------------------------

TITLE: Managing Database Objects and Privileges
DESCRIPTION: Series of commands showing table deletion and privilege revocation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_22

LANGUAGE: bash
CODE:
```
# as junior_dev
postgres=> drop table public.apps;
DROP TABLE

# as postgres
postgres=> revoke create on schema public from junior_dev;
REVOKE
```

----------------------------------------

TITLE: Complex Query Example in PostgreSQL
DESCRIPTION: Shows a complex query joining multiple tables with a WHERE clause to exclude specific courses.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
select
  students.name,
  students.type,
  courses.title,
  courses.code,
  grades.result
from
  grades
  left join students on grades.student_id = students.id
  left join courses on grades.course_id = courses.id
where courses.code != 'PG101';
```

----------------------------------------

TITLE: Loading Sample Dataset
DESCRIPTION: Loads Paul Graham essays from GitHub repository using SimpleWebPageReader for processing.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/llamaindex/llamaindex.ipynb#2025-04-21_snippet_3

LANGUAGE: python
CODE:
```
essays = [
    'paul_graham_essay.txt'
]
documents = SimpleWebPageReader().load_data([f'https://raw.githubusercontent.com/supabase/supabase/master/examples/ai/llamaindex/data/{essay}' for essay in essays])
print('Document ID:', documents[0].doc_id, 'Document Hash:', documents[0].hash)
```

----------------------------------------

TITLE: Integrating Avatar Component in Account Component Template
DESCRIPTION: This HTML snippet shows how to integrate the AvatarComponent within the AccountComponent's form, allowing users to update their profile picture.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_11

LANGUAGE: html
CODE:
```
<form [formGroup]="updateProfileForm" (ngSubmit)="updateProfile()" class="form-widget">
  <app-avatar [avatarUrl]="this.avatarUrl" (upload)="updateAvatar($event)"> </app-avatar>
  <!-- input fields -->
</form>
```

----------------------------------------

TITLE: Enabling pgTAP Extension in PostgreSQL
DESCRIPTION: SQL commands to enable and disable the pgTAP extension in PostgreSQL. The extension is created in a separate schema to keep the public schema clean.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgtap.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the "pgtap" extension
create extension pgtap with schema extensions;

-- Disable the "pgtap" extension
drop extension if exists pgtap;
```

----------------------------------------

TITLE: Integrating Avatar Component in Svelte Account Page
DESCRIPTION: Shows how to add an Avatar component to a form widget in a Svelte account page. The component is configured with Supabase integration, two-way URL binding, and a upload completion handler that triggers form submission.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_17

LANGUAGE: svelte
CODE:
```
<!-- src/routes/account/+page.svelte -->
<script lang="ts">
  // Import the new component
  import Avatar from './Avatar.svelte'
</script>

<div class="form-widget">
  <form
    class="form-widget"
    method="post"
    action="?/update"
    use:enhance={handleSubmit}
    bind:this={profileForm}
  >
    <!-- Add to body -->
    <Avatar
        {supabase}
        bind:url={avatarUrl}
        size={10}
        on:upload={() => {
          profileForm.requestSubmit();
        }}
      />

    <!-- Other form elements -->
  </form>
</div>
```

----------------------------------------

TITLE: Setting Function Permissions
DESCRIPTION: SQL commands to restrict function execution permissions for security.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/wrappers/overview.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
revoke execute on function public.get_stripe_products from public;
revoke execute on function public.get_stripe_products from anon;
grant execute on function public.get_stripe_products to authenticated;
```

----------------------------------------

TITLE: Writing pgTAP Test for Column Existence
DESCRIPTION: SQL test using pgTAP to verify the existence of an 'id' column in the auth.users table. The test is wrapped in a transaction and includes test planning and completion functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/testing.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
begin;
select plan(1); -- only one statement to run

SELECT has_column(
    'auth',
    'users',
    'id',
    'id should exist'
);

select * from finish();
rollback;
```

----------------------------------------

TITLE: Getting Public URL for Transformed Image in Dart
DESCRIPTION: This snippet shows how to use the Supabase Dart client to get a public URL for a transformed image, specifying width and height.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
final url = supabase.storage.from('bucket').getPublicUrl(
      'image.jpg',
      transform: const TransformOptions(
        width: 500,
        height: 600,
      ),
    );
```

----------------------------------------

TITLE: Deploying Supabase OG Image Function
DESCRIPTION: Command to deploy the lwx-og function to Supabase with JWT verification disabled. Used for production deployment of the Open Graph image generation service.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/supabase/functions/lwx-og/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions deploy lwx-og --no-verify-jwt
```

----------------------------------------

TITLE: Creating a new Laravel project with Composer
DESCRIPTION: Uses Composer to scaffold a new Laravel project. This command initializes a fresh Laravel installation in a directory named 'example-app'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/laravel.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
composer create-project laravel/laravel example-app
```

----------------------------------------

TITLE: Installing Dependencies for In-Browser Semantic Search (Bash)
DESCRIPTION: Commands to create a new Vite project and install the required dependencies for PGlite and Transformers.js.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm create vite@latest
npm install @electric-sql/pglite @huggingface/transformers
```

----------------------------------------

TITLE: Obtaining the Provider Refresh Token (Kotlin)
DESCRIPTION: This Kotlin snippet shows how to request a provider refresh token during the Azure OAuth sign-in process by adding the offline access scope.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-azure.mdx#2025-04-21_snippet_8

LANGUAGE: kotlin
CODE:
```
suspend fun signInWithAzure() {
    supabase.auth.signInWith(Azure) {
        scopes.add("offline_access")
    }
}
```

----------------------------------------

TITLE: Querying PGAudit Monitored Users
DESCRIPTION: SQL query to identify database users being monitored by PGAudit
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
select
  rolname,
  rolconfig
from pg_roles
where
  exists (
    select
      1
    from UNNEST(rolconfig) as c
    where c like '%pgaudit.role%' or c like '%pgaudit.log%'
  );
```

----------------------------------------

TITLE: Listing All Queues in PGMQ with SQL
DESCRIPTION: The list_queues function returns a table of all existing queues, including their names, creation timestamps, and partition/unlogged status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_16

LANGUAGE: sql
CODE:
```
select * from pgmq.list_queues();
      queue_name      |          created_at           | is_partitioned | is_unlogged
----------------------+-------------------------------+----------------+-------------
 my_queue             | 2023-10-28 14:13:17.092576-05 | f              | f
 my_partitioned_queue | 2023-10-28 19:47:37.098692-05 | t              | f
 my_unlogged          | 2023-10-28 20:02:30.976109-05 | f              | t
```

----------------------------------------

TITLE: Deploying OpenAI Edge Function to Supabase
DESCRIPTION: These commands deploy the OpenAI edge function to Supabase and set the environment variables from the .env.local file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/openai.mdx#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
supabase functions deploy --no-verify-jwt openai
supabase secrets set --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Setting up dbdev and installing prerequisites in PostgreSQL
DESCRIPTION: This SQL snippet sets up the database.dev package manager and installs necessary prerequisites for advanced testing in Supabase projects. It creates required extensions, installs the supabase-dbdev package, and ensures a clean installation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create extension if not exists http with schema extensions;
create extension if not exists pg_tle;
drop extension if exists "supabase-dbdev";
select pgtle.uninstall_extension_if_exists('supabase-dbdev');
select
    pgtle.install_extension(
        'supabase-dbdev',
        resp.contents ->> 'version',
        'PostgreSQL package manager',
        resp.contents ->> 'sql'
    )
from http(
    (
        'GET',
        'https://api.database.dev/rest/v1/'
        || 'package_versions?select=sql,version'
        || '&package_name=eq.supabase-dbdev'
        || '&order=version.desc'
        || '&limit=1',
        array[
            ('apiKey', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhtdXB0cHBsZnZpaWZyYndtbXR2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODAxMDczNzIsImV4cCI6MTk5NTY4MzM3Mn0.z2CN0mvO2No8wSi46Gw59DFGCTJrzM0AQKsu_5k134s')::http_header
        ],
        null,
        null
    )
) x,
lateral (
    select
        ((row_to_json(x) -> 'content') #>> '{}')::json -> 0
) resp(contents);
create extension "supabase-dbdev";
select dbdev.install('supabase-dbdev');

-- Drop and recreate the extension to ensure a clean installation
drop extension if exists "supabase-dbdev";
create extension "supabase-dbdev";
```

----------------------------------------

TITLE: Generating Static Paths for Dynamic Routes
DESCRIPTION: Function to pre-generate static paths for all posts at build time.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_9

LANGUAGE: tsx
CODE:
```
export async function generateStaticParams() {
  const { data: posts } = await supabase.from('posts').select('id')

  return posts?.map(({ id }) => ({
    id,
  }))
}
```

----------------------------------------

TITLE: Retrieving User IP Addresses from Edge Logs
DESCRIPTION: Example query that retrieves timestamps and real IP addresses from GET requests in edge logs by performing multiple unnesting operations to access deeply nested header values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
select datetime(timestamp), h.x_real_ip
from
  edge_logs
  cross join unnest(metadata) as m
  cross join unnest(m.request) as r
  cross join unnest(r.headers) as h
where h.x_real_ip is not null and r.method = "GET";
```

----------------------------------------

TITLE: Creating List Partitioned Customers Table in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a list partitioned table for customer data based on country. It creates a parent table and two partitions for customers in the Americas and Asia.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/partitions.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- Create the partitioned table
create table customers (
    id bigint generated by default as identity,
    name text,
    country text,

    -- We need to include all the
    -- partitioning columns in constraints:
    primary key (country, id)
)
partition by list(country);

create table customers_americas
	partition of customers
	for values in ('US', 'CANADA');

create table customers_asia
	partition of customers
  for values in ('INDIA', 'CHINA', 'JAPAN');
```

----------------------------------------

TITLE: Query Type Data Access
DESCRIPTION: SQL query demonstrating how to access query type and formatting data from edge logs by unnesting metadata, request, and sb fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
select
  method,
  url,
  auth_users
from
  edge_logs
-- Unpack 'metadata' field
cross join unnest(metadata) AS metadata
-- unpack 'request' from 'metadata'
cross join unnest(request) AS request;
-- unpack 'sb' from 'request'
cross join unnest(sb) AS sb;
```

----------------------------------------

TITLE: Executing pgloader Migration Command
DESCRIPTION: Command line instruction to run the pgloader migration using the configuration file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/mssql.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
pgloader config.load
```

----------------------------------------

TITLE: Comparing Supabase and Postgres Client Usage in JavaScript
DESCRIPTION: Demonstrates the parallel usage patterns between the Supabase client library and the direct Postgres client library, showing how Supabase-js wraps the underlying postgres-js functionality while maintaining similar syntax.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-15-client-libraries-v2.mdx#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
// supabase-js
const supabase = createClient('SUPABASE_URL', 'SUPABASE_KEY')
const { data } = supabase.from('countries').select('id, name')

// postgres-js
const postgrest = new PostgrestClient('POSTGREST_URL')
const { data } = postgrest.from('countries').select('id, name')
```

----------------------------------------

TITLE: Creating and Populating Example Instruments Table
DESCRIPTION: SQL commands to create an instruments table with id and name columns, and insert sample data for demonstrating the explain() functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/debugging-performance.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table instruments (
  id int8 primary key,
  name text
);

insert into books
  (id, name)
values
  (1, 'violin'),
  (2, 'viola'),
  (3, 'cello');
```

----------------------------------------

TITLE: Basic Supabase Query Without Filter
DESCRIPTION: Example of a basic Supabase query without filters (not recommended for performance).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
const { data } = supabase
  .from('table')
  .select()
```

----------------------------------------

TITLE: Initializing Supabase Client in Kotlin
DESCRIPTION: This snippet demonstrates the initialization of a Supabase client in Kotlin, using the project URL and anonymous API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
val supabaseUrl = "https://<project>.supabase.co"
val supabaseKey = "<your-anon-key>"
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    install(Realtime)
}
```

----------------------------------------

TITLE: Unauthorized Channel Access Example
DESCRIPTION: TypeScript example showing the behavior when an unauthorized user attempts to access a private channel.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-13-supabase-realtime-broadcast-and-presence-authorization.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
// With anon user
supabase.realtime
  .channel('locked', { config: { private: true } })
  .subscribe((status: string, err: any) => {
    if (status === 'SUBSCRIBED') {
      console.log('Connected!')
    } else {
      console.error(err.message)
    }
  })

// Outputs the following code:
// "You do not have permissions to read from this Topic"
```

----------------------------------------

TITLE: Inserting Geographic Point Data with Kotlin
DESCRIPTION: Kotlin code using Supabase client to insert restaurant data with geographic points. It uses the Restaurant data class defined earlier.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgis.mdx#2025-04-21_snippet_8

LANGUAGE: kotlin
CODE:
```
val data = supabase.from("restaurants").insert(listOf(
    Restaurant("Supa Burger", "POINT(-73.946823 40.807416)"),
    Restaurant("Supa Pizza", "POINT(-73.94581 40.807475)"),
    Restaurant("Supa Taco", "POINT(-73.945826 40.80629)"),
))
```

----------------------------------------

TITLE: Initializing a Supabase Project with CLI
DESCRIPTION: Command to create a new Supabase project locally using the Supabase CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase init
```

----------------------------------------

TITLE: Implementing React Suspense with Sidebar Components
DESCRIPTION: Shows how to use React Suspense with the sidebar components to handle async data loading with a fallback skeleton.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_34

LANGUAGE: tsx
CODE:
```
function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Projects</SidebarGroupLabel>
          <SidebarGroupContent>
            <React.Suspense fallback={<NavProjectsSkeleton />}>
              <NavProjects />
            </React.Suspense>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Flutter Model Definitions
DESCRIPTION: Dart classes defining the data models for the application including AppState enum and Ride/Driver classes
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
enum AppState {
  choosingLocation,
  confirmingFare,
  waitingForPickup,
  riding,
  postRide,
}

enum RideStatus {
  picking_up,
  riding,
  completed,
}

class Ride {
  final String id;
  final String driverId;
  final String passengerId;
  final int fare;
  final RideStatus status;

  Ride({
    required this.id,
    required this.driverId,
    required this.passengerId,
    required this.fare,
    required this.status,
  });

  factory Ride.fromJson(Map<String, dynamic> json) {
    return Ride(
      id: json['id'],
      driverId: json['driver_id'],
      passengerId: json['passenger_id'],
      fare: json['fare'],
      status: RideStatus.values
          .firstWhere((e) => e.toString().split('.').last == json['status']),
    );
  }
}

class Driver {
  final String id;
  final String model;
  final String number;
  final bool isAvailable;
  final LatLng location;

  Driver({
    required this.id,
    required this.model,
    required this.number,
    required this.isAvailable,
    required this.location,
  });

  factory Driver.fromJson(Map<String, dynamic> json) {
    return Driver(
      id: json['id'],
      model: json['model'],
      number: json['number'],
      isAvailable: json['is_available'],
      location: LatLng(json['latitude'], json['longitude']),
    );
  }
}
```

----------------------------------------

TITLE: OpenAI API Key Environment Variable for Supabase AI Assistant
DESCRIPTION: Example of storing the OpenAI API key in a .env file to be used by the Supabase Studio service for AI features, with a reminder not to check secrets into version control.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
## Never check your secrets into version control
`${OPENAI_API_KEY}`
```

----------------------------------------

TITLE: Defining a Supabase Model with Foreign Key in Dart
DESCRIPTION: This snippet demonstrates how to define a Dart model class for use with Supabase and Brick ORM, including a foreign key relationship. It shows the use of Supabase-specific annotations and UUID generation for the primary key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-10-08-offline-first-flutter-apps.mdx#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
import 'package:brick_offline_first_with_supabase/brick_offline_first_with_supabase.dart';
import 'package:brick_sqlite/brick_sqlite.dart';
import 'package:brick_supabase/brick_supabase.dart';
import 'package:my_app/lib/src/users/user.model.dart';
import 'package:uuid/uuid.dart';

@ConnectOfflineFirstWithSupabase(
  supabaseConfig: SupabaseSerializable(tableName: 'orders'),
)
class Order extends OfflineFirstWithSupabaseModel {
  // Like Supabase's client, specifying a foreign_key
  // is possible but only necessary if there are joins
  // with multiple foreign keys
  // @Supabase(foreignKey: 'user_id')
  final User user;

  @Supabase(unique: true)
  @Sqlite(index: true, unique: true)
  final String id;

  Order({
    String? id,
    required this.user,
  }) : this.id = id ?? const Uuid().v4();
}
```

----------------------------------------

TITLE: Setting Environment Variables for Supabase in Next.js
DESCRIPTION: Creates a .env.local file to store the Supabase project URL and anonymous key required for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#2025-04-21_snippet_1

LANGUAGE: txt
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=<your_supabase_project_url>
NEXT_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>
```

----------------------------------------

TITLE: Creating New Next.js Project with Supabase
DESCRIPTION: Command to create a new Next.js project using the Supabase template that includes sample migrations and seed files
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npx create-next-app -e with-supabase
```

----------------------------------------

TITLE: Creating a Function with a Known Error for plpgsql_check Demo
DESCRIPTION: SQL code to create a table 'place' and a function 'some_func' with a deliberate error. The function references a non-existent column 'created_at' in the 'place' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plpgsql_check.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table place(
  x float,
  y float
);

create or replace function public.some_func()
  returns void
  language plpgsql
as $$
declare
  rec record;
begin
  for rec in select * from place
  loop
    -- Bug: There is no column `created_at` on table `place`
    raise notice '%', rec.created_at;
  end loop;
end;
$$;
```

----------------------------------------

TITLE: Configuring PostgreSQL Schema Settings
DESCRIPTION: PHP configuration for changing the default PostgreSQL schema in Laravel's database config file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-22-laravel-postgres.mdx#2025-04-21_snippet_3

LANGUAGE: php
CODE:
```
'pgsql' => [
    'driver' => 'pgsql',
    'url' => env('DATABASE_URL'),
    'host' => env('DB_HOST', '127.0.0.1'),
    'port' => env('DB_PORT', '5432'),
    'database' => env('DB_DATABASE', 'forge'),
    'username' => env('DB_USERNAME', 'forge'),
    'password' => env('DB_PASSWORD', ''),
    'charset' => 'utf8',
    'prefix' => '',
    'prefix_indexes' => true,
    'search_path' => 'laravel',
    'sslmode' => 'prefer',
],
```

----------------------------------------

TITLE: Adding View Counter to Posts Table
DESCRIPTION: Simple SQL migration to add a basic view counter column to the posts table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
BEGIN;

ALTER TABLE posts ADD COLUMN seen_by_count;

COMMENT ON COLUMN posts.seen_by_count
  IS 'simple count of users who have seen the post';

COMMIT;
```

----------------------------------------

TITLE: Initializing an Ionic Angular App with CLI
DESCRIPTION: Commands to install the Ionic CLI, create a new blank Ionic Angular project, and navigate to the project directory.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install -g @ionic/cli
ionic start supabase-ionic-angular blank --type angular
cd supabase-ionic-angular
```

----------------------------------------

TITLE: Edge Function SQL Implementation
DESCRIPTION: SQL function implementation for executing JavaScript code through the Edge Function with region restrictions and authentication headers
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION edge.exec(data text) RETURNS JSONB LANGUAGE plpgsql
AS $function$
DECLARE
    custom_headers JSONB;
-- Example restricting regions available to Europe
    allowed_regions TEXT[] := ARRAY['eu-west-1', 'eu-west-2', 'eu-west-3', 'eu-north-1', 'eu-central-1'];
BEGIN
    -- Set headers with anon key and Content-Type
    custom_headers := jsonb_build_object(
        'Authorization', 'Bearer ' || edge.get_secret('service_role_key'),
        'Content-Type', 'application/json',
        'x-region', allowed_regions
    );
    -- Call edge_wrapper function with default values
    RETURN edge.edge_wrapper(
        url := ('https://<ref>.supabase.co/functions/v1/multi-purpose'),
        headers := custom_headers,
        payload := jsonb_build_object('code', data),
        max_retries := 5,
        allowed_regions := allowed_regions
    );
END;
$function$;
```

----------------------------------------

TITLE: Signing In with Magic Link in v0 vs v1
DESCRIPTION: Demonstrates the change in the method for signing in with a magic link. In v1, a more explicit method name is used.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
await supabase.auth.signIn(email: email);
```

LANGUAGE: dart
CODE:
```
await supabase.auth.signInWithOtp(email: email);
```

----------------------------------------

TITLE: iOS Deep Link Configuration (Flutter)
DESCRIPTION: This XML snippet shows how to configure custom URL schemes in the Info.plist file for an iOS Flutter application.  This configuration allows the application to be opened using a custom URL scheme.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_3

LANGUAGE: xml
CODE:
```
<!-- ... other tags -->
<plist>
<dict>
  <!-- ... other tags -->
  <key>CFBundleURLTypes</key>
  <array>
    <dict>
      <key>CFBundleTypeRole</key>
      <string>Editor</string>
      <key>CFBundleURLSchemes</key>
      <array>
        <string>[YOUR_SCHEME]</string>
      </array>
    </dict>
  </array>
  <!-- ... other tags -->
</dict>
</plist>
```

----------------------------------------

TITLE: Test Edge Function with cURL
DESCRIPTION: Command to test the deployed Edge Function by sending a POST request with an image generation prompt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/amazon-bedrock-image-generator.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
curl -i --location --request POST 'http://127.0.0.1:54321/functions/v1/amazon-bedrock' \
    --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \
    --header 'Content-Type: application/json' \
    --data '{"prompt":"A beautiful picture of a bird"}'
```

----------------------------------------

TITLE: Disabling SSL enforcement with Supabase CLI
DESCRIPTION: Command to disable SSL enforcement on your Supabase project database using the CLI. This allows clients to connect without SSL for maximum compatibility.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ssl-enforcement.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase ssl-enforcement --project-ref {ref} update --disable-db-ssl-enforcement --experimental
```

----------------------------------------

TITLE: Using Avatar Component in React JSX
DESCRIPTION: This example demonstrates how to use the Avatar component in a React application, including an image source and a fallback.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/avatar.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Avatar>
  <AvatarImage src="https://github.com/mildtomato.png" />
  <AvatarFallback>CN</AvatarFallback>
</Avatar>
```

----------------------------------------

TITLE: Failed Function Execution After Permission Revoke
DESCRIPTION: Demonstrates the error message when junior_dev attempts to execute the function after public execute permission has been revoked.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_31

LANGUAGE: bash
CODE:
```
# as junior_dev
postgres=> select add(1, 2);
ERROR:  permission denied for function add
```

----------------------------------------

TITLE: Configuring Email Template in TOML
DESCRIPTION: Example of configuring an invite email template using config.toml file. Defines the email subject and content path.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[auth.email.template.invite]
subject = "You are invited to Acme Inc"
content_path = "./supabase/templates/invite.html"
```

----------------------------------------

TITLE: Using Assert for Value Checking
DESCRIPTION: Example showing the assert keyword usage for condition checking in functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
create function assert_example(name text)
returns uuid
language plpgsql
as $$
declare
  student_id uuid;
begin
  -- save a user's id into the user_id variable
  select
    id into student_id
  from attendance_table
  where student = name;

  -- throw an error if the student_id is null
  assert student_id is not null, 'assert_example() ERROR: student not found';

  -- otherwise, return the user's id
  return student_id;
end;
$$;

select assert_example('Harry Potter');
```

----------------------------------------

TITLE: Defining AuthenticationRepository Interface in Kotlin
DESCRIPTION: This interface defines the authentication operations for user management. It includes methods for signing in with email and password, signing up new users, and signing in with Google OAuth.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_14

LANGUAGE: kotlin
CODE:
```
interface AuthenticationRepository {
    suspend fun signIn(email: String, password: String): Boolean
    suspend fun signUp(email: String, password: String): Boolean
    suspend fun signInWithGoogle(): Boolean
}
```

----------------------------------------

TITLE: Running Local Supabase Functions Server for Stripe Webhooks
DESCRIPTION: Starts the Supabase Functions server locally without JWT verification to test Stripe webhooks.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/stripe-webhooks/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions serve --no-verify-jwt --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: PostgreSQL Job Queue Processing Function
DESCRIPTION: Implements a robust job queue processing mechanism with retry logic and status tracking in PostgreSQL using PL/pgSQL
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-sms-hook.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
for update skip locked
    loop
        begin
            -- add job processing logic here.
            -- for demonstration, we'll just update the job status to 'completed'.
            update job_queue
            set status = 'completed'
            where job_id = job.job_id;

        exception when others then
            -- handle job failure and retry logic
            if job.retry_count < job.max_retries then
                update job_queue
                set retry_count = retry_count + 1,
                    scheduled_at = now() + interval '1 minute'  -- delay retry by 1 minute
                where job_id = job.job_id;
            else
                update job_queue
                set status = 'failed'
                where job_id = job.job_id;
            end if;
        end;
    end loop;
end;
$$ language plpgsql;
```

----------------------------------------

TITLE: Running the Development Server (Bash)
DESCRIPTION: This snippet shows the commands to start the Next.js development server using different package managers (npm, yarn, pnpm, or bun). The server will typically run on http://localhost:3000.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/clerk/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Querying Role Timeout Settings
DESCRIPTION: Query to check timeout settings for specific database roles by examining pg_roles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select
  rolname,
  rolconfig
from pg_roles
where
  rolname in (
    'anon',
    'authenticated',
    'postgres',
    'service_role'
    -- ,<ANY CUSTOM ROLES>
  );
```

----------------------------------------

TITLE: Running Next.js Development Server with Package Managers
DESCRIPTION: Commands to start the Next.js development server using npm, yarn, pnpm, or bun. After running any of these commands, you can access your application at http://localhost:3000.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/caching/with-react-query-nextjs-14/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Implementing MapLibre Map Component with PMTiles Support
DESCRIPTION: Creates a React map component using react-map-gl and maplibre-gl with PMTiles protocol support. Initializes a vector tile map showing US ZIP code boundaries. Uses the 'use dom' directive for Expo compatibility.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-19-self-host-maps-storage-protomaps.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
'use dom'

import 'text-encoding-polyfill'
import { useEffect } from 'react'
import Map from 'react-map-gl'
import maplibregl from 'maplibre-gl'
import 'maplibre-gl/dist/maplibre-gl.css'
import { Protocol } from 'pmtiles'

export default function MapBox(_) {
  useEffect(() => {
    let protocol = new Protocol()
    maplibregl.addProtocol('pmtiles', protocol.tile)
    return () => {
      maplibregl.removeProtocol('pmtiles')
    }
  }, [])

  return (
    <div style={{ width: '100%', height: '100%' }}>
      <Map
        style={{ width: '100%', height: 900 }}
        mapStyle={{
          version: 8,
          sources: {
            sample: {
              type: 'vector',
              url: 'pmtiles://https://r2-public.protomaps.com/protomaps-sample-datasets/cb_2018_us_zcta510_500k.pmtiles',
            },
          },
          layers: [
            {
              id: 'zcta',
              source: 'sample',
              'source-layer': 'zcta',
              type: 'line',
              paint: {
                'line-color': '#999',
              },
            },
          ],
        }}
        mapLib={maplibregl}
      />
    </div>
  )
```

----------------------------------------

TITLE: Creating a Foreign Table for Paddle Customers Data in SQL
DESCRIPTION: This SQL code creates a foreign table to store Paddle customer data. It defines the table structure and links it to the previously created Paddle foreign server.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgres-foreign-data-wrappers-with-wasm.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- create dedicated schema for Paddle foreign tables
create schema if not exists paddle;

-- create foreign table
create foreign table paddle.customers (
  id text,
  name text,
  email text,
  status text,
  custom_data jsonb,
  created_at timestamp,
  updated_at timestamp,
  attrs jsonb
)
server paddle_server
options (
  object 'customers',
  rowid_column 'id'
);
```

----------------------------------------

TITLE: Updating SAML Connection with Attribute Mapping (Supabase CLI)
DESCRIPTION: This command updates an existing SAML 2.0 Identity Provider connection in Supabase Auth using the Supabase CLI and applies attribute mapping using a JSON file. It requires specifying the provider UUID and a project reference, alongside the path to the attribute mapping JSON file. This allows custom mapping of SAML attributes to user properties.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
"supabase sso update <provider-uuid> --project-ref <your-project> \
  --attribute-mapping-file /path/to/attribute/mapping.json"
```

----------------------------------------

TITLE: Creating a Publication for Update Events Only in SQL
DESCRIPTION: Creates a publication that only tracks update operations on all tables, ignoring inserts and deletes. This focuses replication on data modifications only.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create publication publication_name
for all tables
with (publish = 'update');
```

----------------------------------------

TITLE: Adding Ktor Client Engine with Kotlin Gradle DSL
DESCRIPTION: Adds a Ktor client engine dependency using Gradle Kotlin DSL. Ktor engines are required for HTTP communication and must be selected based on target platform and websocket support needs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
implementation("io.ktor:ktor-client-[engine]:KTOR_VERSION")
```

----------------------------------------

TITLE: Querying PostgreSQL Replication Status
DESCRIPTION: SQL commands to check existing replication slots and subscriptions in the database. These queries help identify what needs to be dropped before a backup restoration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/failed-to-restore-from-backup-all-subscriptions-and-replication-slots-must-be-dropped-before-a-backup-can-be-restored-L-rCvt.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT * FROM pg_replication_slots;

SELECT * FROM pg_subscription;
```

----------------------------------------

TITLE: Querying Edge Logs Without Unnesting
DESCRIPTION: Simple query to retrieve timestamp and metadata from edge logs without unnesting arrays, which will return metadata as an array of objects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/logs.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select timestamp, metadata from edge_logs as t;
```

----------------------------------------

TITLE: Listing SAML Connections (Supabase CLI)
DESCRIPTION: This command lists all registered SAML 2.0 Identity Provider connections in Supabase Auth using the Supabase CLI. It requires specifying the project reference. The command displays a list of all identity providers configured for the project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_13

LANGUAGE: bash
CODE:
```
"supabase sso list --project-ref <your-project>"
```

----------------------------------------

TITLE: Direct Database Connection String Format in PostgreSQL
DESCRIPTION: Example connection string format for directly connecting to a Supabase PostgreSQL database without using the connection pooler.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-and-connection-terminology-explained-9pr_ZO.mdx#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
postgresql://postgres:[PASSWORD]@db.[PROJECT REF].supabase.co:5432/postgres
```

----------------------------------------

TITLE: Configuring Remote-Specific Settings in TOML
DESCRIPTION: This snippet shows how to configure settings specific to a staging remote, including project ID and a custom seed script path.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-04-cli-v2-config-as-code.mdx#2025-04-21_snippet_5

LANGUAGE: toml
CODE:
```
[remotes.staging]
project_id = "your-project-ref"

[remotes.staging.db.seed]
sql_paths = ["./seeds/staging.sql"]
```

----------------------------------------

TITLE: Vector Normalization Implementation
DESCRIPTION: Helper functions to calculate L2 norm and normalize vectors for embedding processing.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
/**
 * Calculates the L2 norm (Euclidean norm) of a vector.
 */
function norm(vector: number[]): number {
  return Math.sqrt(vector.reduce((sum, val) => sum + val * val, 0))
}

/**
 * Normalizes a vector into a unit vector.
 */
function normalize(vector: number[]): number[] {
  const magnitude = norm(vector)

  if (magnitude === 0) {
    throw new Error('Cannot normalize a zero vector.')
  }

  return vector.map((val) => val / magnitude)
}
```

----------------------------------------

TITLE: Running pgAdmin Schema Diff with Docker
DESCRIPTION: Docker command to run the pgAdmin Schema Diff tool, comparing two PostgreSQL databases and outputting the differences to a SQL file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
docker run supabase/pgadmin-schema-diff \
  'postgres://user:pass@local:5432/diff_source' \
  'postgres://user:pass@production:5432/diff_target' \
  > diff_demo.sql

Starting schema diff...
Comparison started......0%
Comparing Event Triggers...2%
Comparing Extensions...4%
Comparing Languages...8%
Comparing Foreign Servers...14%
Comparing Foreign Tables of schema 'public'...28%
Comparing Tables of schema 'public'...50%
Comparing Domains of schema 'test_schema_diff'...66%
Comparing Foreign Tables of schema 'test_schema_diff'...68%
Comparing FTS Templates of schema 'test_schema_diff'...76%
Comparing Functions of schema 'test_schema_diff'...78%
Comparing Procedures of schema 'test_schema_diff'...80%
Comparing Tables of schema 'test_schema_diff'...90%
Comparing Types of schema 'test_schema_diff'...92%
Comparing Materialized Views of schema 'test_schema_diff'...96%
Done.

## the diff is written to diff_demo.sql
```

----------------------------------------

TITLE: Implementing GitHub OAuth Sign-In in Swift with Supabase
DESCRIPTION: This code snippet provides the implementation of the GitHub sign-in process in a Swift application using Supabase. It employs the `signInWithOAuth` function while allowing for a custom redirect URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_2

LANGUAGE: swift
CODE:
```
func signInWithGithub() async throws {
  try await supabase.auth.signInWithOAuth(
    provider: .github,
    redirectTo: URL(string: "my-custom-scheme://my-app-host")
  )
}
```

----------------------------------------

TITLE: Setting Supabase Environment Variables
DESCRIPTION: Environment variable configuration for Supabase URL and anonymous key in a .env file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
REACT_APP_SUPABASE_URL=YOUR_SUPABASE_URL
REACT_APP_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Configuring MCP for Supabase in Visual Studio Code
DESCRIPTION: JSON configuration for connecting Supabase to Visual Studio Code using the Model Context Protocol (MCP). This snippet is a placeholder for the actual configuration, which is included via a partial template.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/mcp.mdx#2025-04-22_snippet_1

LANGUAGE: json
CODE:
```
<$Partial path="mcp_supabase_vscode_config.mdx" />
```

----------------------------------------

TITLE: Linking Supabase Project with CLI
DESCRIPTION: Links your local environment to your Supabase project using the project reference ID.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/quickstart.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase link --project-ref your-project-ref
```

----------------------------------------

TITLE: pg_net Response Collection
DESCRIPTION: SQL queries showing how to collect and process responses from pg_net HTTP requests, including JSON response handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-30-supabase-functions-updates.mdx#2025-04-22_snippet_3

LANGUAGE: sql
CODE:
```
select
  *
from
  net.http_collect_response(1);

select
    (response).body::json
from
    net.http_collect_response(request_id:=1);
```

----------------------------------------

TITLE: Configuring Wait State in Workflows YAML
DESCRIPTION: YAML configuration for implementing a wait state in the Workflow. Sets a delay of one day (86400 seconds) before proceeding to the next task.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-04-02-supabase-workflows.mdx#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
WaitOneDay:
  Type: Wait
  Next: SendEmail
  Seconds: 86400
```

----------------------------------------

TITLE: Deduplicating Sentry spans with Supabase
DESCRIPTION: Configuration to avoid duplicate spans when using both Supabase integration and other HTTP monitoring integrations in Sentry. Shows various approaches for different environments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_5

LANGUAGE: ts
CODE:
```
import * as Sentry from '@sentry/browser'
import { SupabaseClient } from '@supabase/supabase-js'
import { supabaseIntegration } from '@supabase/sentry-js-integration'

Sentry.init({
  dsn: SENTRY_DSN,
  integrations: [
    supabaseIntegration(SupabaseClient, Sentry, {
      tracing: true,
      breadcrumbs: true,
      errors: true,
    }),

    // @sentry/browser
    Sentry.browserTracingIntegration({
      shouldCreateSpanForRequest: (url) => {
        return !url.startsWith(`${SUPABASE_URL}/rest`)
      },
    }),

    // or @sentry/node
    Sentry.httpIntegration({
      tracing: {
        ignoreOutgoingRequests: (url) => {
          return url.startsWith(`${SUPABASE_URL}/rest`)
        },
      },
    }),

    // or @sentry/node with Fetch support
    Sentry.nativeNodeFetchIntegration({
      ignoreOutgoingRequests: (url) => {
        return url.startsWith(`${SUPABASE_URL}/rest`)
      },
    }),

    // or @sentry/WinterCGFetch for Next.js Middleware & Edge Functions
    Sentry.winterCGFetchIntegration({
      breadcrumbs: true,
      shouldCreateSpanForRequest: (url) => {
        return !url.startsWith(`${SUPABASE_URL}/rest`)
      },
    }),
  ],
})
```

----------------------------------------

TITLE: Connection Message Format in Realtime Protocol
DESCRIPTION: Initial connection message format where client specifies desired features including Broadcast, Presence, and Postgres Changes. Includes configuration options for each feature type.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/protocol.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
{
   "event": "phx_join",
   "topic": string,
   "payload": {
      "config": {
         "broadcast": {
            "self": boolean
         },
         "presence": {
            "key": string
         },
         "postgres_changes": [
            {
               "event": "*" | "INSERT" | "UPDATE" | "DELETE",
               "schema": string,
               "table": string,
               "filter": string + '=' + "eq" | "neq" | "gt" | "gte" | "lt" | "lte" | "in" +  '.' + string
            }
         ]
      }
   },
   "ref": string
}
```

----------------------------------------

TITLE: Creating Table with Multi-Range Column in PostgreSQL 14
DESCRIPTION: Creates a table to store sensor reading metric data, including a column using the new multi-range data type. This demonstrates the ability to store non-contiguous ranges in a single column.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_2

LANGUAGE: sql
CODE:
```
create table sensor_range (
  reading_id serial primary key,
  metric_desc varchar(100),
  metric_level valid_levels,
  metric_ts tsmultirange
);
```

----------------------------------------

TITLE: Creating Composite Types in PostgreSQL
DESCRIPTION: SQL code demonstrating how to create a composite type 'full_name' and a table using that type for storing person data with structured name fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-28-community-day-lw4.mdx#2025-04-21_snippet_0

LANGUAGE: SQL
CODE:
```
create type full_name as (
  first_name     text,
  middle_names   text[],
  first_surname  text,
  second_surname text,
  reign_name     text
);

create table famous_people (
  name full_name,
  occupation text
);
```

----------------------------------------

TITLE: Retrieving Query Identifier with EXPLAIN in JavaScript
DESCRIPTION: Demonstrates how to obtain the pg_stat_statements query identifier using the explain() transform with json format and verbose option. This identifier can be used in Supabase logs to find generated SQL queries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase
  .from('projects')
  .select('*')
  .eq('id', 1)
  .explain({ format: 'json', verbose: true })

console.log(data[0]['Query Identifier'])
// 2811722635570756600
```

----------------------------------------

TITLE: Specifying Content Type for Uploads in Supabase Storage with Kotlin
DESCRIPTION: This code demonstrates how to specify the content type when uploading a file to Supabase Storage using Kotlin. It uses the 'contentType' option to set the MIME type.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/standard-uploads.mdx#2025-04-21_snippet_13

LANGUAGE: kotlin
CODE:
```
supabase.storage.from("bucket_name").upload("file_path", bytes) {
    contentType = ContentType.Image.JPEG
}
```

----------------------------------------

TITLE: Creating ProductListViewModel with Hilt and Flow - Kotlin
DESCRIPTION: Defines a ViewModel class for managing a list of products, utilizing Hilt for dependency injection. It provides methods for fetching and managing the product list, including functionalities to load products and remove items.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_17

LANGUAGE: Kotlin
CODE:
```
@HiltViewModel
class ProductListViewModel @Inject constructor(
private val productRepository: ProductRepository,
) : ViewModel() {

    private val _productList = MutableStateFlow<List<Product>?>(listOf())
    val productList: Flow<List<Product>?> = _productList


    private val _isLoading = MutableStateFlow(false)
    val isLoading: Flow<Boolean> = _isLoading

    init {
        getProducts()
    }

    fun getProducts() {
        viewModelScope.launch {
            val products = productRepository.getProducts()
            _productList.emit(products?.map { it -> it.asDomainModel() })
        }
    }

    fun removeItem(product: Product) {
        viewModelScope.launch {
            val newList = mutableListOf<Product>().apply { _productList.value?.let { addAll(it) } }
            newList.remove(product)
            _productList.emit(newList.toList())
            // Call api to remove
            productRepository.deleteProduct(id = product.id)
            // Then fetch again
            getProducts()
        }
    }

    private fun ProductDto.asDomainModel(): Product {
        return Product(
            id = this.id,
            name = this.name,
            price = this.price,
            image = this.image
        )
    }

}
```

----------------------------------------

TITLE: Configuring Clerk Domain in Supabase
DESCRIPTION: TOML configuration for enabling Clerk as a third-party auth provider in Supabase and setting the Clerk domain.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-31-clerk-tpa-pricing.mdx#2025-04-21_snippet_0

LANGUAGE: toml
CODE:
```
[auth.third_party.clerk]
enabled = true
domain = "example.clerk.accounts.dev"
```

----------------------------------------

TITLE: Updating Prisma Database User Password in SQL
DESCRIPTION: SQL command to update the Prisma database user password if needed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- alter prisma password if needed
alter user "prisma" with password 'new_password';
```

----------------------------------------

TITLE: Querying Decrypted Secrets from Supabase Vault in SQL
DESCRIPTION: Demonstrates how to query and view decrypted secrets from the Supabase Vault using a special view that automatically decrypts the data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-supabase-vault.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
select * from vault.decrypted_secrets;
```

----------------------------------------

TITLE: Configuring KotlinX Serialization in Maven POM file
DESCRIPTION: This XML snippet shows how to configure the KotlinX Serialization plugin in a Maven project. It includes the necessary plugin configuration and dependencies for using the default serialization method in supabase-kt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_9

LANGUAGE: xml
CODE:
```
<build>
    <plugins>
        <plugin>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-plugin</artifactId>
            <version>${kotlin.version}</version>
            <executions>
                <execution>
                    <id>compile</id>
                    <phase>compile</phase>
                    <goals>
                        <goal>compile</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <compilerPlugins>
                    <plugin>kotlinx-serialization</plugin>
                </compilerPlugins>
            </configuration>
            <dependencies>
                <dependency>
                    <groupId>org.jetbrains.kotlin</groupId>
                    <artifactId>kotlin-maven-serialization</artifactId>
                    <version>${kotlin.version}</version>
                </dependency>
            </dependencies>
        </plugin>
    </plugins>
</build>
```

----------------------------------------

TITLE: Running MongoDB Shell with Docker
DESCRIPTION: Command to run MongoDB shell (mongosh) using Docker container
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-31-nosql-mongodb-compatibility-with-ferretdb-and-flydotio.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
docker run --rm -it --entrypoint=mongosh mongo \
 "$MONGODB_URL"
```

----------------------------------------

TITLE: Installing Prisma Client with pnpm
DESCRIPTION: This snippet demonstrates how to install the Prisma client and generate its model using pnpm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma.mdx#2025-04-21_snippet_23

LANGUAGE: bash
CODE:
```
pnpm install @prisma/client
pnpx prisma generate
```

----------------------------------------

TITLE: Checking pg_cron Scheduler Process Status in PostgreSQL
DESCRIPTION: This SQL query checks if the pg_cron scheduler process is active in the database. It returns information about the process including its ID, user, application name, and other details to help diagnose if the pg_cron scheduler is running properly.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/pgcron-debugging-guide-n1KTaz.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
SELECT
  pid as process_id,
  usename as database_user,
  application_name,
  backend_start as when_process_began,
  wait_event_type,
  state,
  query,
  backend_type
FROM pg_stat_activity where application_name ilike 'pg_cron scheduler';
```

----------------------------------------

TITLE: Configuring Android Manifest for Deep Links
DESCRIPTION: AndroidManifest.xml configuration that sets up deep link handling for OAuth and OTP sign-ins. Defines the necessary activities and intent filters for handling authentication callbacks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_28

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">
    <uses-permission android:name="android.permission.INTERNET" />
    <application
        android:name=".ManageProductApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:enableOnBackInvokedCallback="true"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.ManageProducts"
        tools:targetApi="31">
        <activity
            android:name=".DeepLinkHandlerActivity"
            android:exported="true"
            android:theme="@style/Theme.ManageProducts" >
            <intent-filter android:autoVerify="true">
                <action android:name="android.intent.action.VIEW" />
                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.BROWSABLE" />
                <data
                    android:host="supabase.com"
                    android:scheme="app" />
            </intent-filter>
        </activity>
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.ManageProducts">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>
```

----------------------------------------

TITLE: Resizing Images with Custom Mode in Supabase Storage in Dart
DESCRIPTION: This code shows how to download an image with custom dimensions (800x300) and the 'contain' resize mode using the Dart client library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_28

LANGUAGE: Dart
CODE:
```
final data = supabase.storage.from('bucket').download(
      'image.jpg',
      transform: const TransformOptions(
        width: 800,
        height: 300,
        resize: ResizeMode.contain, // 'cover' | 'fill'
      ),
    );
```

----------------------------------------

TITLE: Creating and querying database records using Rails models
DESCRIPTION: Demonstrates creating a new Article record and saving it to the database, then querying all Article records. This shows how Active Record models provide an object-oriented interface to the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/ruby-on-rails.mdx#2025-04-21_snippet_4

LANGUAGE: ruby
CODE:
```
article = Article.new(title: "Hello Rails", body: "I am on Rails!")
article.save # Saves the entry to the database

Article.all
```

----------------------------------------

TITLE: Increasing Pool Timeout for Prisma
DESCRIPTION: Demonstrates how to increase the pool_timeout to 30 seconds in the Prisma connection string.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/prisma-error-management-Cm5P_o.mdx#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
.../postgres?pool_timeout=30
```

----------------------------------------

TITLE: Modifying Constraint to NO ACTION
DESCRIPTION: Changes the foreign key constraint from RESTRICT to NO ACTION.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/cascade-deletes.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
alter table child
drop constraint child_father_fkey;

alter table child
add constraint child_father_fkey foreign key (father) references parent (id)
  on delete no action;
```

----------------------------------------

TITLE: Creating HTTP Request SQL Function for Supabase Edge Functions
DESCRIPTION: This SQL function handles HTTP requests with customizable parameters and ensures consistent response formatting. It's used as a helper function for dynamic JavaScript execution in Edge Functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION edge.http_request(
    url TEXT,
    method TEXT DEFAULT 'POST',
    headers JSONB DEFAULT '{"Content-Type": "application/json"}'::jsonb,
    params JSONB DEFAULT '{}'::jsonb,
    payload JSONB DEFAULT '{}'::jsonb,
    timeout_ms INTEGER DEFAULT 5000
) RETURNS jsonb AS $$
DECLARE
    http_response extensions.http_response;
    status_code integer := 0;
    response_json jsonb;
    response_text text;
    header_array extensions.http_header[];
    request extensions.http_request;
BEGIN
    -- Set the timeout option
    IF timeout_ms > 0 THEN
        PERFORM http_set_curlopt('CURLOPT_TIMEOUT_MS', timeout_ms::text);
    END IF;

    -- Convert headers JSONB to http_header array
    SELECT array_agg(extensions.http_header(key, value::text))
    FROM jsonb_each_text(headers)
    INTO header_array;

    -- Construct the http_request composite type
    request := ROW(method, url, header_array, 'application/json', payload::text)::extensions.http_request;

    -- Make the HTTP request
    http_response := http(request);
    status_code := http_response.status;

    -- Attempt to extract JSONB response content
    BEGIN
        response_json := http_response.content::jsonb;
    EXCEPTION
        WHEN others THEN
            response_text := http_response.content;
            response_json := jsonb_build_object('status_code', status_code, 'response', response_text);
    END;

    RETURN jsonb_build_object('status_code', status_code, 'response', response_json);
END;
$$ LANGUAGE plpgsql;
```

----------------------------------------

TITLE: Managing Database Branches with Supabase CLI
DESCRIPTION: Shows how to create, switch, and delete database branches for testing migrations without data loss.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-15-supabase-cli-v1-and-admin-api-beta.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase db branch new my_branch
supabase db branch switch my_branch
```

LANGUAGE: bash
CODE:
```
supabase db branch switch main
supabase db branch delete my_branch
```

----------------------------------------

TITLE: Adding Jackson Serializer Dependency in Maven POM
DESCRIPTION: This XML snippet shows how to add the Jackson serializer dependency in a Maven project's pom.xml file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_14

LANGUAGE: xml
CODE:
```
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>serializer-jackson</artifactId>
    <version>VERSION</version>
</dependency>
```

----------------------------------------

TITLE: Building CSS Styles from Tokens
DESCRIPTION: This Bash command triggers the process to compile design tokens from Figma into CSS variables, creating the necessary styles directory. Prerequisites include npm and the relevant setup in package.json.
SOURCE: https://github.com/supabase/supabase/blob/master/packages/ui/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run build-styles
```

----------------------------------------

TITLE: Creating Test Function for Timeout
DESCRIPTION: Creates a test function that sleeps for 601 seconds to verify timeout settings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
create or replace function myfunc()
returns void as $$
  select pg_sleep(601); -- simulating some long-running process
$$
language sql;
```

----------------------------------------

TITLE: HTTP POST Request Function Signature in pg_net
DESCRIPTION: Function signature for net.http_post which creates an asynchronous HTTP POST request with a JSON body. This is a SECURITY DEFINER function that returns a request ID reference.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
net.http_post(
    -- url for the request
    url text,
    -- body of the POST request
    body jsonb default '{}'::jsonb,
    -- key/value pairs to be url encoded and appended to the `url`
    params jsonb default '{}'::jsonb,
    -- key/values to be included in request headers
    headers jsonb default '{"Content-Type": "application/json"}'::jsonb,
    -- the maximum number of milliseconds the request may take before being canceled
    timeout_milliseconds int default 2000
)
    -- request_id reference
    returns bigint

    volatile
    parallel safe
    language plpgsql
```

----------------------------------------

TITLE: Initializing Kysely Query Builder with Vercel Postgres in TypeScript
DESCRIPTION: Configures Kysely query builder for Vercel Postgres, defining a users table interface and creating a database connection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres/serverless-drivers.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { Generated, ColumnType } from 'kysely'
import { createKysely } from '@vercel/postgres-kysely'

interface UserTable {
  id: Generated<number>
  name: string
  email: string
  image: string
  createdAt: ColumnType<Date, string | undefined, never>
}

export interface Database {
  users: UserTable
}

export const db = createKysely<Database>()
export { sql } from 'kysely'
```

----------------------------------------

TITLE: Installing Supabase Client Library
DESCRIPTION: Navigate to the Vue app directory and install the Supabase JavaScript client library for integrating with Supabase services.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/vue.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
cd my-app && npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Starting Supabase and Seeding Data
DESCRIPTION: Commands for starting the Supabase service and running the seed script to generate and store embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/aws_bedrock_image_search/README.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase start
poetry run seed
```

----------------------------------------

TITLE: Querying Prometheus Metrics in PostgREST
DESCRIPTION: Demonstrates how to fetch Prometheus-compatible metrics from PostgREST's monitoring endpoint. The metrics include information about schema cache and connection pool statistics.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgrest-12-2.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
curl localhost:3001/metrics

# HELP pgrst_db_pool_timeouts_total The total number of pool connection timeouts
# TYPE pgrst_db_pool_timeouts_total counter
pgrst_db_pool_timeouts_total 7.0

# ....
```

----------------------------------------

TITLE: Creating a Raw MongoDB Data Table in Supabase
DESCRIPTION: SQL command to create a table in Supabase with a JSONB column to temporarily store the raw MongoDB documents. This serves as an intermediate step before normalizing the data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-20-migrating-mongodb-data-api-with-supabase.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table mongo_users_raw (
  id uuid primary key default gen_random_uuid(),
  data jsonb not null
);
```

----------------------------------------

TITLE: Installing Table Component via CLI
DESCRIPTION: Command to install the table component using the shadcn-ui CLI tool.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/table.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn-ui@latest add table
```

----------------------------------------

TITLE: Adding Jackson Serializer Dependency in Maven POM
DESCRIPTION: Adds the Jackson serializer dependency for supabase-kt to a Kotlin project using Maven. This is required to use Jackson as the serialization library.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_15

LANGUAGE: xml
CODE:
```
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>serializer-jackson</artifactId>
    <version>VERSION</version>
</dependency>
```

----------------------------------------

TITLE: Checking Vanity Subdomain Availability with Supabase CLI
DESCRIPTION: Use the Supabase CLI to check the availability of a desired vanity subdomain. This command helps in verifying if a specific subdomain is available for use with a Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/custom-domains.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
supabase vanity-subdomains --project-ref abcdefghijklmnopqrst check-availability --desired-subdomain my-example-brand --experimental
```

----------------------------------------

TITLE: Registering a Discord Slash Command using cURL
DESCRIPTION: This snippet shows how to use cURL to register a 'hello' slash command for a Discord bot. It requires the bot token and client ID from the Discord Developer Portal.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/discord-bot.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
BOT_TOKEN='replace_me_with_bot_token'
CLIENT_ID='replace_me_with_client_id'
curl -X POST \
-H 'Content-Type: application/json' \
-H "Authorization: Bot $BOT_TOKEN" \
-d '{"name":"hello","description":"Greet a person","options":[{"name":"name","description":"The name of the person","type":3,"required":true}]}' \
"https://discord.com/api/v8/applications/$CLIENT_ID/commands"
```

----------------------------------------

TITLE: Building React Production Bundle with npm run build
DESCRIPTION: Creates a production-ready build in the build folder. This command optimizes the React application for deployment with minified bundles and hashed filenames for efficient caching.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/app/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Displaying RDS Preloaded Libraries
DESCRIPTION: SQL command to show preloaded libraries in an RDS PostgreSQL instance, which reveals the rdsutils extension responsible for protecting reserved roles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-01-roles-postgres-hooks.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
show shared_preload_libraries;

  shared_preload_libraries
-----------------------------
 rdsutils,pg_stat_statements
```

----------------------------------------

TITLE: Checking Session Timeout Value
DESCRIPTION: Query to display the current statement timeout setting for the session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SHOW statement_timeout;
```

----------------------------------------

TITLE: Starting Next.js Development Server - Bash
DESCRIPTION: Execute this command in your terminal from the project root to start the Next.js development server. The application will then be accessible in your browser, typically at `http://localhost:3000`, allowing you to test the setup.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/nextjs.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Resetting PostgreSQL Sequence Values
DESCRIPTION: These SQL commands show two methods to reset a sequence: using setval() to set the sequence to the maximum ID plus one, or using ALTER SEQUENCE to restart the sequence with a specific value. This is useful when fixing sequence misalignments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/why-are-there-gaps-in-my-postgres-id-sequence-Frifus.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
SELECT setval('{table}_{column}_seq', (SELECT max(id) FROM <table_name>) + 1);
```

LANGUAGE: sql
CODE:
```
ALTER SEQUENCE '{table}_{column}_seq' RESTART WITH new_value;
```

----------------------------------------

TITLE: Enabling Experimental Webhooks in TOML
DESCRIPTION: This snippet demonstrates how to enable experimental webhook features in the database configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-04-cli-v2-config-as-code.mdx#2025-04-21_snippet_4

LANGUAGE: toml
CODE:
```
[experimental.webhooks]
enabled = true
```

----------------------------------------

TITLE: Creating a Wasm-based Google Sheets Foreign Data Wrapper in SQL
DESCRIPTION: This SQL snippet demonstrates how to create a server for a Google Sheets Wasm wrapper. It specifies the wrapper location on GitHub, version information, and custom options like the base URL for Google Sheets.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-postgres-foreign-data-wrappers-with-wasm.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create server google_sheets
  foreign data wrapper wasm_wrapper
  options (
    -- Install from GitHub
    fdw_package_url 'https://github.com/<ORG>/<REPO>/releases/download/v0.2.0/google_sheets_fdw.wasm',
    fdw_package_name 'my-company:google-sheets-fdw',
    fdw_package_version '0.2.0',
    fdw_package_checksum '338674c4c983aa6dbc2b6e63659076fe86d847ca0da6d57a61372b44e0fe4ac9',

	-- Provide custom options
	base_url 'https://docs.google.com/spreadsheets/d'
  );
```

----------------------------------------

TITLE: Counting live rows in a PostgreSQL table
DESCRIPTION: This simple count query helps determine the number of live rows in a table, which can be compared with dead row counts to assess bloat levels.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- number of live rows
SELECT
	count(*)
FROM
	mytable;
```

----------------------------------------

TITLE: Using Aspect Ratio Component with Next.js Image
DESCRIPTION: This example demonstrates how to use the Aspect Ratio component with a Next.js Image. It sets a 16:9 aspect ratio for the image and applies some styling. This is a common use case for maintaining consistent image dimensions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/aspect-ratio.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<div className="w-[450px]">
  <AspectRatio ratio={16 / 9}>
    <Image src="..." alt="Image" className="rounded-md object-cover" />
  </AspectRatio>
</div>
```

----------------------------------------

TITLE: Deploying SMTP Email Function with Supabase CLI
DESCRIPTION: Commands to link your project, set required SMTP environment variables as secrets, and deploy the send-email-smtp function. Note that SMTP_PORT must be a port other than 25 and 587 due to Deno Deploy restrictions.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/send-email-smtp/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase link --project-ref your-project-ref
supabase secrets set SMTP_HOSTNAME="your.hostname.com" SMTP_PORT="2587" SMTP_USERNAME="your_username" SMTP_PASSWORD="your_password" SMTP_FROM="no-reply@example.com"
supabase functions deploy send-email-smtp
```

----------------------------------------

TITLE: Rendering Pre-fetched Data in a Client Component with React Query and Supabase
DESCRIPTION: This code shows how to use the pre-fetched data in a Next.js client component using React Query and Supabase. It uses the useQuery hook to access the data that was fetched on the server.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_10

LANGUAGE: tsx
CODE:
```
'use client'

import useSupabaseBrowser from '@/utils/supabase-browser'
import { getCountryById } from '@/queries/get-country-by-id'
import { useQuery } from '@supabase-cache-helpers/postgrest-react-query'

export default function Country({ id }: { id: number }) {
  const supabase = useSupabaseBrowser()
  // This useQuery could just as well happen in some deeper
  // child to <Posts>, data will be available immediately either way
  const { data: country } = useQuery(getCountryById(supabase, id))

  return (
    <div>
      <h1>SSR: {country?.name}</h1>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating Triggers for Automatic User and Board Management in Supabase
DESCRIPTION: This SQL script defines triggers to automatically add users to the users table upon registration and create user-board associations when a new board is created.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- inserts a row into user_boards
create function public.handle_board_added()
returns trigger
language plpgsql
security definer
as $$
begin
  insert into public.user_boards (board_id, user_id)
  values (new.id, auth.uid());
  return new;
end;
$$;

-- trigger the function every time a board is created
create trigger on_board_created
  after insert on boards
  for each row execute procedure public.handle_board_added();


create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.users (id, email)
  values (new.id, new.email);
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
```

----------------------------------------

TITLE: Flatten JSON into Separate Files in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates flattening a JSON document into separate files. It iterates through the `weapons` array, creating a new document for each weapon and using `writeRecord` to write it to a separate 'weapons' file. It also deletes the `weapons` array from the original document.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_8

LANGUAGE: js
CODE:
```
module.exports = (collectionName, doc, recordCounters, writeRecord) => {
  for (let i = 0; i < doc.weapons.length; i++) {
    const weapon = {
      uid: doc.uid,
      weapon: doc.weapons[i],
    }
    writeRecord('weapons', weapon, recordCounters)
  }
  delete doc.weapons // moved to separate file
  return doc
}
```

----------------------------------------

TITLE: Implementing Authentication Component
DESCRIPTION: React component that handles user authentication using Supabase magic link login.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { useState } from 'react'
import { supabase } from './supabaseClient'

export default function Auth() {
  const [loading, setLoading] = useState(false)
  const [email, setEmail] = useState('')

  const handleLogin = async (event) => {
    event.preventDefault()

    setLoading(true)
    const { error } = await supabase.auth.signInWithOtp({ email })

    if (error) {
      alert(error.error_description || error.message)
    } else {
      alert('Check your email for the login link!')
    }
    setLoading(false)
  }

  return (
    <div className="row flex flex-center">
      <div className="col-6 form-widget">
        <h1 className="header">Supabase + React</h1>
        <p className="description">Sign in via magic link with your email below</p>
        <form className="form-widget" onSubmit={handleLogin}>
          <div>
            <input
              className="inputField"
              type="email"
              placeholder="Your email"
              value={email}
              required={true}
              onChange={(e) => setEmail(e.target.value)}
            />
          </div>
          <div>
            <button className={'button block'} disabled={loading}>
              {loading ? <span>Loading</span> : <span>Send magic link</span>}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
```

----------------------------------------

TITLE: Dropping a Trigger in PostgreSQL
DESCRIPTION: This SQL command demonstrates how to remove an existing trigger from a table. It uses the 'DROP TRIGGER' statement to delete a trigger named 'trigger_name' from 'table_name'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/triggers.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
drop trigger "trigger_name" on "table_name";
```

----------------------------------------

TITLE: Executing pgbench Performance Test with Multiple Clients
DESCRIPTION: Benchmark command to test PostgreSQL performance with varying numbers of clients (2-128), using prepared statements over 300 seconds
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-07-26-supabase-postgres-13.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
pgbench -P 5 -c {num_clients} -j {num_clients} -T 300 -M prepared postgres
```

----------------------------------------

TITLE: Sending JSON Response from Cloudflare Worker
DESCRIPTION: JavaScript code to create a Response object with JSON data in a Cloudflare Worker. It stringifies the data and sets the appropriate Content-Type header to application/json.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/with-cloudflare-workers/README.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
return new Response(JSON.stringify(data), {
  headers: {
    "Content-Type": "application/json",
  },
});
```

----------------------------------------

TITLE: Running Postgres Tools CLI Check
DESCRIPTION: Command line example showing how to run a SQL file check using the postgres tools CLI
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
postgrestools check test.sql
```

----------------------------------------

TITLE: Initializing Next.js Application with TypeScript
DESCRIPTION: Commands to create a new TypeScript-based Next.js application using npm and navigate to the project directory.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app@latest --ts --use-npm supabase-nextjs
cd supabase-nextjs
```

----------------------------------------

TITLE: Running Flutter Application
DESCRIPTION: Command to start the Flutter application in development mode. This command can be used to run the game on any supported Flutter platform.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/flutter-multiplayer-shooting-game/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
flutter run
```

----------------------------------------

TITLE: Adding Function Configuration in Supabase
DESCRIPTION: Configuration entry in supabase/config.toml to specify the entrypoint for a new function
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deno2.mdx#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[functions.hello-world]
entrypoint = "./functions/hello-world/main.ts"
```

----------------------------------------

TITLE: Installing Supabase SSR Package
DESCRIPTION: This command installs the new Supabase SSR package, which consolidates functions for creating clients compatible with server languages or frameworks. It is the final step after uninstalling previous packages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/migrating-to-ssr-from-auth-helpers.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @supabase/ssr
```

----------------------------------------

TITLE: Signing In with OAuth Provider in v0 vs v1
DESCRIPTION: Shows the change in the method for signing in with a third-party OAuth provider. In v1, the method name and parameter structure have changed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
await supabase.auth.signInWithProvider(
  Provider.github,
  options: AuthOptions(
      redirectTo: kIsWeb
          ? null
          : 'io.supabase.flutter://reset-callback/'),
);
```

LANGUAGE: dart
CODE:
```
await supabase.auth.signInWithOAuth(
  Provider.github,
  redirectTo: kIsWeb ? null : 'io.supabase.flutter://reset-callback/',
);
```

----------------------------------------

TITLE: Showing Detailed SSO Provider Information in Supabase CLI
DESCRIPTION: Command to display all information about a specific SSO provider for a Supabase project using the CLI. The -o json flag can be used to output the information as JSON.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/enterprise-sso/auth-sso-saml.mdx#2025-04-21_snippet_16

LANGUAGE: bash
CODE:
```
supabase sso show <provider-id> --project-ref <your-project>
```

----------------------------------------

TITLE: Signing Out a User Kotlin
DESCRIPTION: The Kotlin function demonstrates using suspending functions to sign out a user via Supabase's client library. It terminates the user session client-side. Make sure the Supabase Kotlin library is set up.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_3

LANGUAGE: Kotlin
CODE:
```
suspend fun logout() {\n\tsupabase.auth.signOut()\n}
```

----------------------------------------

TITLE: Adding Project URL to Vault for Cloud Deployment
DESCRIPTION: SQL command to add the project URL secret to vault for cloud deployment environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
select
  vault.create_secret('<project-url>', 'project_url');
```

----------------------------------------

TITLE: Creating Database with Custom Encoding
DESCRIPTION: SQL commands demonstrating successful and unsuccessful attempts to create databases with custom encoding settings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-09-postgresql-templates.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
-- Will succeed
CREATE DATABASE new_db_name TEMPLATE template0 ENCODING 'SQL_ASCII';

-- Will return an error
CREATE DATABASE new_db_name ENCODING 'SQL_ASCII';
```

----------------------------------------

TITLE: Implementing Debug Handler for Realtime Client in C#
DESCRIPTION: Demonstrates how to set up a simple debug handler for the Realtime client using the new AddDebugHandler method. This allows for custom logging solutions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/csharp/v0/release-notes.mdx#2025-04-21_snippet_0

LANGUAGE: C#
CODE:
```
client.AddDebugHandler((sender, message, exception) => Debug.WriteLine(message));
```

----------------------------------------

TITLE: Installing Supabase Sentry integration with yarn
DESCRIPTION: Command to install the Supabase Sentry integration package using yarn package manager.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
yarn add @supabase/sentry-js-integration
```

----------------------------------------

TITLE: Installing Dependencies for SolidJS Supabase Project
DESCRIPTION: Command to install the necessary npm dependencies for the SolidJS Supabase user management project.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/solid-user-management/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ npm install
```

----------------------------------------

TITLE: Configuring Map State for Database Triggers
DESCRIPTION: YAML configuration for handling multiple database inserts using a Map state with a Choice condition to check for INSERT events.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-04-02-supabase-workflows.mdx#2025-04-21_snippet_2

LANGUAGE: yaml
CODE:
```
EmailUsers:
  Type: Map
  End: true
  InputPath: '$.changes'
  Iterator:
    StartAt: CheckInsert
    States:
      CheckInsert:
        Type: Choice
        Default: Complete
        Choices:
          - Variable: '$.type'
            StringEquals: INSERT
            Next: WaitOneDay
```

----------------------------------------

TITLE: Adding Moshi Serializer Dependency in Groovy Build File
DESCRIPTION: This snippet demonstrates how to add the Moshi serializer dependency to a Kotlin project using Gradle with the Groovy DSL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_9

LANGUAGE: groovy
CODE:
```
implementation 'io.github.jan-tennert.supabase:serializer-moshi:VERSION'
```

----------------------------------------

TITLE: Checking IPv6 Network Compatibility Using cURL
DESCRIPTION: Command to verify if the current network supports IPv6 connectivity by attempting to fetch the IP address using IPv6.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supabase--your-network-ipv4-and-ipv6-compatibility-cHe3BP.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
curl -6 https://ifconfig.co/ip
```

----------------------------------------

TITLE: Setting up Test Data with SQL
DESCRIPTION: Creates a simple 'book' table with an integer primary key and populates it with 10,000 rows using `generate_series` to provide data for testing the `pg_plan_filter` extension.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_plan_filter.mdx#_snippet_0

LANGUAGE: SQL
CODE:
```
create table book(
  id int primary key
);
-- CREATE TABLE

insert into book(id) select * from generate_series(1, 10000);
-- INSERT 0 10000
```

----------------------------------------

TITLE: Next.js Edge Runtime Sentry Configuration with Supabase
DESCRIPTION: Configuration for Sentry in a Next.js application's edge runtime environment. Uses winterCGFetch integration suitable for Middleware and Edge Functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_8

LANGUAGE: js
CODE:
```
import * as Sentry from '@sentry/nextjs'
import { SupabaseClient } from '@supabase/supabase-js'
import { supabaseIntegration } from '@supabase/sentry-js-integration'

Sentry.init({
  dsn: SENTRY_DSN,
  integrations: [
    supabaseIntegration(SupabaseClient, Sentry, {
      tracing: true,
      breadcrumbs: true,
      errors: true,
    }),
    Sentry.winterCGFetchIntegration({
      breadcrumbs: true,
      shouldCreateSpanForRequest: (url) => {
        return !url.startsWith(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest`)
      },
    }),
  ],
  // Adjust this value in production, or use tracesSampler for greater control
  tracesSampleRate: 1,

  // Setting this option to true will print useful information to the console while you're setting up Sentry.
  debug: true,
})
```

----------------------------------------

TITLE: Efficient Row Access Checking Query in PostgreSQL
DESCRIPTION: A SQL query example showing how WALRUS efficiently checks if a row is visible to a subscriber by querying using the table's primary key for optimal performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-01-realtime-row-level-security-in-postgresql.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select exists (select 1 from some_table where id = 806);
```

----------------------------------------

TITLE: Creating Cal.com Event Types Foreign Table
DESCRIPTION: SQL to create a foreign table that maps to Cal.com's event types. This allows querying available event types directly from Postgres using a JSON column to store all attributes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-20-calendars-in-postgres-using-foreign-data-wrappers.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create foreign table cal.event_types (
  attrs jsonb
)
  server cal_server
  options (
    object 'event-types'
  );
```

----------------------------------------

TITLE: Sending Batch Messages
DESCRIPTION: Sends multiple JSON messages to a queue in a single operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
select * from pgmq.send_batch(
    'my_queue',
    array[
      '{"hello": "world_0"}'::jsonb,
      '{"hello": "world_1"}'::jsonb
    ]
);
```

----------------------------------------

TITLE: Creating and Managing Developer Group
DESCRIPTION: Shows creation of developers group and granting privileges.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_23

LANGUAGE: bash
CODE:
```
# as postgres
postgres=> create role developers nologin;
CREATE ROLE
postgres=> grant create on schema public to developers;
GRANT
postgres=> grant developers to junior_dev;
GRANT ROLE
postgres=> grant developers to senior_dev;
GRANT ROLE
```

----------------------------------------

TITLE: Adding Row Actions with Dropdown Menu in TanStack Table
DESCRIPTION: Implementation of an actions column with a dropdown menu for row-specific operations like copying IDs or viewing details, using shadcn/ui components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'

import { ColumnDef } from '@tanstack/react-table'
import { MoreHorizontal } from 'lucide-react'

import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'

export const columns: ColumnDef<Payment>[] = [
  // ...
  {
    id: 'actions',
    cell: ({ row }) => {
      const payment = row.original

      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <span className="sr-only">Open menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem onClick={() => navigator.clipboard.writeText(payment.id)}>
              Copy payment ID
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem>View customer</DropdownMenuItem>
            <DropdownMenuItem>View payment details</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      )
    },
  },
  // ...
]
```

----------------------------------------

TITLE: Manual Installation of Form Dependencies
DESCRIPTION: NPM command to manually install all the required dependencies for the form components, including Radix UI components, React Hook Form, and Zod.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/form.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-label @radix-ui/react-slot react-hook-form @hookform/resolvers zod
```

----------------------------------------

TITLE: Supavisor Session Mode Connection Example
DESCRIPTION: Connection string example for Supavisor in session mode using port 5432.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supabase--your-network-ipv4-and-ipv6-compatibility-cHe3BP.mdx#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
# Example session string
postgresql://postgres.ajrbwkcuthywfddihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:5432/postgres
```

----------------------------------------

TITLE: Creating Table with OrioleDB Storage Engine
DESCRIPTION: Example of creating a blog post table using OrioleDB's default storage engine with primary key and timestamp fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/orioledb.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table blog_post (
  id int8 not null,
  title text not null,
  body text not null,
  author text not null,
  published_at timestamptz not null default CURRENT_TIMESTAMP,
  views bigint not null,
  primary key (id)
);
```

----------------------------------------

TITLE: Reindexing All Indexes on a Table Concurrently in PostgreSQL
DESCRIPTION: Rebuilds all indexes on the persons table without blocking concurrent operations. This is useful for maintaining overall query performance as the table data changes over time.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/indexes.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
reindex table concurrently persons;
```

----------------------------------------

TITLE: Configuring Fetch Size for Foreign Server in Postgres
DESCRIPTION: SQL command to set the fetch_size option for a foreign server, which determines the maximum number of rows fetched per operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
alter server "<foreign_server_name>"
options (fetch_size '10000');
```

----------------------------------------

TITLE: Creating PostgreSQL RPC for Location Data Insertion
DESCRIPTION: SQL function that validates user sessions and inserts location data into the locations table. Uses PostGIS st_point function to store geographical coordinates.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-04-postgres-realtime-location-sharing-with-maplibre.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION public.location_insert(_timestamp bigint, _lat double precision, _long double precision, _user_id bigint)
RETURNS void AS $$
declare active_event_id uuid;
begin
  select event_id into active_event_id from public.sessions where user_id = _user_id and status = 'ACTIVE'::session_status;

  INSERT INTO public.locations(event_id, user_id, created_at, lat, long, location)
  VALUES (active_event_id, _user_id, to_timestamp(_timestamp), _lat, _long, st_point(_long, _lat));
end;
$$ LANGUAGE plpgsql VOLATILE;
```

----------------------------------------

TITLE: Testing OpenAI Function with cURL
DESCRIPTION: Example cURL command to test the OpenAI function endpoint with a sample query.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/openai/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
curl -i --location --request POST http://localhost:54321/functions/v1/openai \
  --header 'Content-Type: application/json' \
  --data '{"query":"What is Supabase?"}'
```

----------------------------------------

TITLE: Executing the Function with Known Error
DESCRIPTION: SQL command to execute the 'some_func' function. This execution doesn't catch the invalid reference error because the loop doesn't execute if no rows are present in the table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plpgsql_check.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select public.some_func();
  some_func
 ───────────

 (1 row)
```

----------------------------------------

TITLE: Setting Up Realtime Chat in Next.js
DESCRIPTION: Imports the RealtimeChat component and demonstrates using it in a simple page with room and username specified. No external message sources or storage hooks are used here. Assumes necessary components are available from '@/components/realtime-chat'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-chat.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { RealtimeChat } from '@/components/realtime-chat'

export default function ChatPage() {
  return <RealtimeChat roomName="my-chat-room" username="john_doe" />
}
```

----------------------------------------

TITLE: Closing Realtime Socket Connection in Python
DESCRIPTION: This code snippet shows how to use the new close() method in the Supabase Realtime library to explicitly close socket connections. It sets up a Realtime client, connects, subscribes to a channel, and then closes the connection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-16-python-support.mdx#2025-04-21_snippet_1

LANGUAGE: python
CODE:
```
import os
from realtime import AsyncRealtimeClient

def callback1(payload):
    print("Callback 1: ", payload)

SUPABASE_ID: str = os.environ.get("SUPABASE_ID")
API_KEY: str = os.environ.get("SUPABASE_KEY")

URL: str = f"wss://{SUPABASE_ID}.supabase.co/realtime/v1/websocket"

client = AsyncRealtimeClient(URL, API_KEY)
await client.connect()

channel_1 = s.channel("realtime:public:sample")
channel_1.subscribe().on_postgres_changes("INSERT", callback1)

await client.listen()
await client.close()

```

----------------------------------------

TITLE: Adding SidebarRail Component for Toggle Functionality
DESCRIPTION: Shows how to incorporate a SidebarRail component within the Sidebar structure, which can be used to toggle the sidebar state.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_31

LANGUAGE: tsx
CODE:
```
<Sidebar>
  <SidebarHeader />
  <SidebarContent>
    <SidebarGroup />
  </SidebarContent>
  <SidebarFooter />
  <SidebarRail />
</Sidebar>
```

----------------------------------------

TITLE: Restoring Backup with psql Command in SQL
DESCRIPTION: This snippet shows how to use the psql command to restore a PostgreSQL database backup. The connection string must be replaced with the relevant database connection information, and the file path must be specified for the backup file. This command is intended for use within terminal or command-line interfaces when connected to the desired PostgreSQL instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/dashboard-restore.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
psql -d [CONNECTION_STRING] -f /file/path
```

----------------------------------------

TITLE: Deploying Edge Functions without Docker using Supabase CLI
DESCRIPTION: Command to deploy Edge Functions using the Supabase CLI with the --use-api flag, which enables deployment without requiring Docker installation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-01-supabase-edge-functions-deploy-dashboard-deno-2-1.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions deploy MY_FUNCTION --use-api
```

----------------------------------------

TITLE: Querying Custom Schema via PostgREST API
DESCRIPTION: Demonstrates how to query a specific schema using the PostgREST API by setting the accept-profile header to access schema information
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-19-how-to-hack-the-base.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
curl 'https://ubssibzsnwtwbbvbhbvb.supabase.co/rest/v1/bulletins?select=*' \
 -H 'accept-profile: other_schema' \
 -H "apikey: $ANON_KEY" \
 -H "authorization: Bearer $ANON_KEY"
```

----------------------------------------

TITLE: Testing PostgreSQL RLS Policies
DESCRIPTION: pgTAP test to verify the existence of specific RLS (Row Level Security) policies on a table. Tests policy names and configurations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgtap.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
begin;
select plan( 1 );

select policies_are(
  'public',
  'profiles',
  ARRAY [
    'Profiles are public', -- Test that there is a policy called  "Profiles are public" on the "profiles" table.
    'Profiles can only be updated by the owner'  -- Test that there is a policy called  "Profiles can only be updated by the owner" on the "profiles" table.
  ]
);

select * from finish();
rollback;
```

----------------------------------------

TITLE: Amazon Bedrock Image Generation Implementation
DESCRIPTION: TypeScript implementation of an Edge Function that generates images using Amazon Bedrock and stores them in Supabase Storage. Includes AWS SDK setup, image generation, and storage upload logic.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/amazon-bedrock-image-generator.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// We need to mock the file system for the AWS SDK to work.
import { prepareVirtualFile } from 'https://deno.land/x/mock_file@v1.1.2/mod.ts'

import { BedrockRuntimeClient, InvokeModelCommand } from 'npm:@aws-sdk/client-bedrock-runtime'
import { createClient } from 'npm:@supabase/supabase-js'
import { decode } from 'npm:base64-arraybuffer'

console.log('Hello from Amazon Bedrock!')

Deno.serve(async (req) => {
  prepareVirtualFile('./aws/config')
  prepareVirtualFile('./aws/credentials')

  const client = new BedrockRuntimeClient({
    region: Deno.env.get('AWS_DEFAULT_REGION') ?? 'us-west-2',
    credentials: {
      accessKeyId: Deno.env.get('AWS_ACCESS_KEY_ID') ?? '',
      secretAccessKey: Deno.env.get('AWS_SECRET_ACCESS_KEY') ?? '',
      sessionToken: Deno.env.get('AWS_SESSION_TOKEN') ?? '',
    },
  })

  const { prompt, seed } = await req.json()
  console.log(prompt)
  const input = {
    contentType: 'application/json',
    accept: '*/*',
    modelId: 'amazon.titan-image-generator-v1',
    body: JSON.stringify({
      taskType: 'TEXT_IMAGE',
      textToImageParams: { text: prompt },
      imageGenerationConfig: {
        numberOfImages: 1,
        quality: 'standard',
        cfgScale: 8.0,
        height: 512,
        width: 512,
        seed: seed ?? 0,
      },
    }),
  }

  const command = new InvokeModelCommand(input)
  const response = await client.send(command)
  console.log(response)

  if (response.$metadata.httpStatusCode === 200) {
    const { body, $metadata } = response

    const textDecoder = new TextDecoder('utf-8')
    const jsonString = textDecoder.decode(body.buffer)
    const parsedData = JSON.parse(jsonString)
    console.log(parsedData)
    const image = parsedData.images[0]

    const supabaseClient = createClient(
      // Supabase API URL - env var exported by default.
      Deno.env.get('SUPABASE_URL')!,
      // Supabase API ANON KEY - env var exported by default.
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    )

    const { data: upload, error: uploadError } = await supabaseClient.storage
      .from('images')
      .upload(`${$metadata.requestId ?? ''}.png`, decode(image), {
        contentType: 'image/png',
        cacheControl: '3600',
        upsert: false,
      })
    if (!upload) {
      return Response.json(uploadError)
    }
    const { data } = supabaseClient.storage.from('images').getPublicUrl(upload.path!)
    return Response.json(data)
  }

  return Response.json(response)
})
```

----------------------------------------

TITLE: Initializing Supabase Client with Firebase Auth in Flutter
DESCRIPTION: Creates a Supabase client for Flutter applications using Dart, passing an async function to retrieve the Firebase Auth JWT of the current user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/firebase-auth.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
await Supabase.initialize(
  url: supabaseUrl,
  anonKey: supabaseKey,
  debug: false,
  accessToken: () async {
    final token = await FirebaseAuth.instance.currentUser?.getIdToken();
    return token;
  },
);
```

----------------------------------------

TITLE: Simple GET Request Using the HTTP Extension
DESCRIPTION: Makes a GET request to retrieve a JSON object from an external API and casts the content to JSONB for easier manipulation within PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/http.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
  "status", "content"::jsonb
from
  http_get('https://jsonplaceholder.typicode.com/todos/1');
```

----------------------------------------

TITLE: PGroonga Full-Text Search with Multiple Words (AND)
DESCRIPTION: SQL command showing how to perform a full-text search for multiple words using PGroonga, where all specified words must be present in the result.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
select * from memos where content &@~ 'postgres pgroonga';
```

----------------------------------------

TITLE: Dynamic Remote Subquery with Parameters
DESCRIPTION: Demonstrates how to create and use a foreign table with parameterized queries in ClickHouse.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-wrappers-v02.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create foreign table clickhouse.my_table (
  id bigint,
  col1 text,
  col2 bigint,
  _param1 text,
  _param2 bigint
)
server clickhouse_server
options (
  table '(select * from my_view(column1=${_param1}, column2=${_param2}))'
);

select id, col1, col2
from clickhouse.my_table
where _param1 = 'abc' and _param2 = 42;
```

----------------------------------------

TITLE: Query Using MD5 Hashed Index
DESCRIPTION: SQL query example showing how to search using MD5 hashing to utilize the functional index.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/error-index-row-size-exceeds-btree-version-4-maximum-for-index-LMmoeU.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
select * from table_name where MD5(column_name) = MD5('search_value');
```

----------------------------------------

TITLE: Initializing Email Internationalization with Supabase Auth Hooks
DESCRIPTION: This snippet sets up the necessary imports, constants, and email templates for internationalized email sending using Supabase Auth Hooks and Postmark.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/send-email-hook.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'
import { readAll } from 'https://deno.land/std/io/read_all.ts'

const postmarkEndpoint = 'https://api.postmarkapp.com/email'
// Replace this with your email
const FROM_EMAIL = 'myemail@gmail.com'

// Email Subjects
const subjects = {
  en: {
    signup: 'Confirm Your Email',
    recovery: 'Reset Your Password',
    invite: 'You have been invited',
    magic_link: 'Your Magic Link',
    email_change: 'Confirm Email Change',
    email_change_new: 'Confirm New Email Address',
    reauthentication: 'Confirm Reauthentication',
  },
  es: {
    signup: 'Confirma tu correo electrónico',
    recovery: 'Restablece tu contraseña',
    invite: 'Has sido invitado',
    magic_link: 'Tu enlace mágico',
    email_change: 'Confirma el cambio de correo electrónico',
    email_change_new: 'Confirma la Nueva Dirección de Correo',
    reauthentication: 'Confirma la reautenticación',
  },
  fr: {
    signup: 'Confirmez votre adresse e-mail',
    recovery: 'Réinitialisez votre mot de passe',
    invite: 'Vous avez été invité',
    magic_link: 'Votre Lien Magique',
    email_change: 'Confirmez le changement d'adresse e-mail',
    email_change_new: 'Confirmez la nouvelle adresse e-mail',
    reauthentication: 'Confirmez la réauthentification',
  },
}

// HTML Body
const templates = {
  en: {
    signup: `<h2>Confirm your email</h2><p>Follow this link to confirm your email:</p><p><a href="{{confirmation_url}}">Confirm your email address</a></p><p>Alternatively, enter the code: {{token}}</p>`,
    recovery: `<h2>Reset password</h2><p>Follow this link to reset the password for your user:</p><p><a href="{{confirmation_url}}">Reset password</a></p><p>Alternatively, enter the code: {{token}}</p>`,
    invite: `<h2>You have been invited</h2><p>You have been invited to create a user on {{site_url}}. Follow this link to accept the invite:</p><p><a href="{{confirmation_url}}">Accept the invite</a></p><p>Alternatively, enter the code: {{token}}</p>`,
    magic_link: `<h2>Magic Link</h2><p>Follow this link to login:</p><p><a href="{{confirmation_url}}">Log In</a></p><p>Alternatively, enter the code: {{token}}</p>`,
    email_change: `<h2>Confirm email address change</h2><p>Follow this link to confirm the update of your email address from {{old_email}} to {{new_email}}:</p><p><a href="{{confirmation_url}}">Change email address</a></p><p>Alternatively, enter the codes: {{token}} and {{new_token}}</p>`,
    email_change_new: `<h2>Confirm New Email Address</h2><p>Follow this link to confirm your new email address:</p><p><a href="{{confirmation_url}}">Confirm new email address</a></p><p>Alternatively, enter the code: {{new_token}}</p>`,
    reauthentication: `<h2>Confirm reauthentication</h2><p>Enter the code: {{token}}</p>`,
  },
  es: {
    signup: `<h2>Confirma tu correo electrónico</h2><p>Sigue este enlace para confirmar tu correo electrónico:</p><p><a href="{{confirmation_url}}">Confirma tu correo electrónico</a></p><p>Alternativamente, ingresa el código: {{token}}</p>`,
    recovery: `<h2>Restablece tu contraseña</h2><p>Sigue este enlace para restablecer la contraseña de tu usuario:</p><p><a href="{{confirmation_url}}">Restablece tu contraseña</a></p><p>Alternativamente, ingresa el código: {{token}}</p>`,

```

----------------------------------------

TITLE: Link Email to Anonymous User in Kotlin
DESCRIPTION: Updates an anonymous user to add an email address in Supabase using Kotlin. This begins the process of converting an anonymous user to a permanent user by linking an email identity.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-anonymous.mdx#2025-04-21_snippet_8

LANGUAGE: kotlin
CODE:
```
supabase.auth.updateUser {
    email = "valid.email@supabase.io"
}
```

----------------------------------------

TITLE: Searching for Specific Timezones in Postgres SQL
DESCRIPTION: This SQL query demonstrates how to search for specific timezones using the 'ilike' operator for case-insensitive matching. It searches for timezones with 'york' in their name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/configuration.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select *
from pg_timezone_names()
where name ilike '%york%';
```

----------------------------------------

TITLE: Using Radio Group Component in React
DESCRIPTION: Example of implementing a Radio Group with two options in a React component. It demonstrates the usage of RadioGroup, RadioGroupItem, and Label components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/radio-group.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<RadioGroup defaultValue="option-one">
  <div className="flex items-center space-x-2">
    <RadioGroupItem value="option-one" id="option-one" />
    <Label htmlFor="option-one">Option One</Label>
  </div>
  <div className="flex items-center space-x-2">
    <RadioGroupItem value="option-two" id="option-two" />
    <Label htmlFor="option-two">Option Two</Label>
  </div>
</RadioGroup>
```

----------------------------------------

TITLE: Resulting REST API URL Example
DESCRIPTION: Shows how the JavaScript query gets translated into a REST API URL. Demonstrates the URL structure that Supabase uses for database requests.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
https://<project ref>.supabase.co/rest/v1/countries?select=name
```

----------------------------------------

TITLE: Updating Documents in FerretDB
DESCRIPTION: MongoDB update operation to modify a player's position in FerretDB
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-31-nosql-mongodb-compatibility-with-ferretdb-and-flydotio.mdx#2025-04-21_snippet_4

LANGUAGE: json5
CODE:
```
db.players.updateOne(
    { player_name: "Giggs" },
    { $set: { position: "CM" } }
);
```

----------------------------------------

TITLE: Disabling Prepared Statements with pgbouncer Parameter
DESCRIPTION: Shows how to disable prepared statements by adding the pgbouncer parameter to the connection string.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
.../postgres?pgbouncer=true
```

----------------------------------------

TITLE: Adding New Themes with Token Transformer
DESCRIPTION: This JSON snippet from package.json illustrates how to expand the CSS token setup by adding new themes. The npx command utilizes token-transformer to define new theme paths and integrate them into the build process.
SOURCE: https://github.com/supabase/supabase/blob/master/packages/ui/README.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
// package.json

//..
"build-transform-light": "npx token-transformer tokens.json styles/tokens/02_themes/light.json global,exported/light,theme global",
// add a new line like this:
"build-transform-new": "npx token-transformer tokens.json styles/tokens/02_themes/new.json global,new,theme global",
//..
// append the new theme/set command to end of the build-transform command
"build-transform": "npm run build-transform-global && npm run build-transform-typography && npm run build-transform-dark  && npm run build-transform-light && npm run build-transform-new",
```

----------------------------------------

TITLE: Example PostgreSQL Version Output
DESCRIPTION: Sample output from running the version query, showing the PostgreSQL version number, architecture, compiler information, and bit version.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/which-version-of-postgres.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
PostgreSQL 15.1 on aarch64-unknown-linux-gnu, compiled by gcc (Ubuntu 10.3.0-1ubuntu1~20.04) 10.3.0, 64-bit
```

----------------------------------------

TITLE: Adding Toaster Component to Root Layout in Next.js
DESCRIPTION: Demonstrates how to integrate the Toaster component into the root layout of a Next.js application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sonner.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { Toaster } from '@/components/ui/sonner'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Installing Sonner and Next-themes Dependencies
DESCRIPTION: Command to install the required dependencies for using Sonner in a React project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sonner.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install sonner next-themes
```

----------------------------------------

TITLE: Creating HTML Template for Avatar Upload Component in Angular
DESCRIPTION: This HTML template provides the structure for the AvatarComponent, including image display and file input for uploading new avatars.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_10

LANGUAGE: html
CODE:
```
<div>
  <img
    *ngIf="_avatarUrl"
    [src]="_avatarUrl"
    alt="Avatar"
    class="avatar image"
    style="height: 150px; width: 150px"
  />
</div>
<div *ngIf="!_avatarUrl" class="avatar no-image" style="height: 150px; width: 150px"></div>
<div style="width: 150px">
  <label class="button primary block" for="single">
    {{ uploading ? 'Uploading ...' : 'Upload' }}
  </label>
  <input
    style="visibility: hidden;position: absolute"
    type="file"
    id="single"
    accept="image/*"
    (change)="uploadAvatar($event)"
    [disabled]="uploading"
  />
</div>
```

----------------------------------------

TITLE: Configuring Database Settings in TOML
DESCRIPTION: This snippet shows how to configure a database setting to track commit timestamps.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-12-04-cli-v2-config-as-code.mdx#2025-04-21_snippet_3

LANGUAGE: toml
CODE:
```
[db.settings]
track_commit_timestamp = true
```

----------------------------------------

TITLE: Testing Hybrid Search with cURL
DESCRIPTION: Example cURL command to test the hybrid search endpoint with a sample query.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
curl -i --location --request POST \
  'http://127.0.0.1:54321/functions/v1/hybrid-search' \
  --header 'Authorization: Bearer <anonymous key>' \
  --header 'Content-Type: application/json' \
  --data '{"query":"Italian recipes with tomato sauce"}'
```

----------------------------------------

TITLE: Querying Data with Enum Filters
DESCRIPTION: Demonstrates how to query data using enum values in WHERE clause conditions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/enums.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
select * 
from person 
where current_mood = 'sad';
```

----------------------------------------

TITLE: Installing Supabase Auth Dependencies
DESCRIPTION: Commands to install required Supabase authentication helper libraries for Next.js integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @supabase/auth-helpers-nextjs @supabase/supabase-js
npm install @supabase/auth-helpers-react
```

----------------------------------------

TITLE: API Endpoint Format Example
DESCRIPTION: Example of how a Supabase API endpoint is formatted.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
https://<project ref>.supabase.co/rest/v1/countries?select=name
```

----------------------------------------

TITLE: Configuring Batch Size for Foreign Server in Postgres
DESCRIPTION: SQL command to set the batch_size option for a foreign server, which determines the maximum number of rows inserted per cycle.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
alter server "<foreign_server_name>"
options (batch_size '1000');
```

----------------------------------------

TITLE: Setting up FerretDB with Docker and Environment Variables
DESCRIPTION: Docker commands and environment variable setup for running FerretDB locally with Supabase database connection
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-31-nosql-mongodb-compatibility-with-ferretdb-and-flydotio.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
# Set the required environment variables
export DB_USER=postgres
export DB_PASSWORD=<your db password>
export SUPA_PROJECT_REF=<your Supabase project ref>
export SUPA_REGION=<your project region>
export DB_URL=postgres://$DB_USER.$SUPA_PROJECT_REF:$DB_PASSWORD@$SUPA_REGION.pooler.supabase.com:5432/postgres

# Run FerretDB in docker container
docker run -p 27017:27017 -p 8080:8080 -e FERRETDB_POSTGRESQL_URL=$DB_URL ghcr.io/ferretdb/ferretdb
```

----------------------------------------

TITLE: Executing EXPLAIN via HTTP in PostgREST v10
DESCRIPTION: Demonstrates how to obtain an execution plan for a PostgREST query using curl with a specific Accept header. This feature is enabled when the db-plan-enabled config is set to true.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-19-postgrest-v10.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ curl -H 'Accept: application/vnd.pgrst.plan' \
       'https://<project>.supabase.co/rest/v1/clients?select=*&id=eq.1'
```

----------------------------------------

TITLE: Initializing Supabase client with Moshi Serialization
DESCRIPTION: This Kotlin snippet demonstrates how to create a Supabase client with Moshi Serialization. It shows how to set the default serializer to MoshiSerializer.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v2/installing.mdx#2025-04-21_snippet_14

LANGUAGE: kotlin
CODE:
```
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    defaultSerializer = MoshiSerializer()
}
```

----------------------------------------

TITLE: Serving AI Plugin Manifest in TypeScript with Supabase Edge Runtime
DESCRIPTION: This snippet demonstrates how to serve the ai-plugin.json manifest file required for ChatGPT plugin identification. It imports the JSON file and serves it as a response when the appropriate endpoint is requested.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import aiPlugins from './ai-plugins.json' with { type: 'json' }

// [...]

// Serve /.well-known/ai-plugin.json
if (service_name === '.well-known') {
  return new Response(JSON.stringify(aiPlugins), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  })
}
```

----------------------------------------

TITLE: Setting up Ionic Angular Project with Capacitor and Supabase
DESCRIPTION: This bash script creates a new Ionic Angular project, generates necessary pages and services, adds iOS and Android platforms, and installs required dependencies including Capacitor plugins and Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
ionic start supaMap blank --type=angular
cd ./supaMap

ionic g page store
ionic g page nearby
ionic g service services/stores

ionic build
ionic cap add ios
ionic cap add android


# Add Maps and Geolocation plugins
npm install @capacitor/google-maps
npm install @capacitor/geolocation

# Install Supabase
npm install @supabase/supabase-js

# Ionic 7 wasn't released so I installed the next version
# not required if you are already on Ionic 7
npm install @ionic/core@next @ionic/angular@next
```

----------------------------------------

TITLE: Configuring Supabase Environment Variables in Ionic Angular
DESCRIPTION: Sets up the Supabase URL and API key in the environment configuration file for an Ionic Angular project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
export const environment = {
  production: false,
  supabaseUrl: 'https://YOUR-APP.supabase.co',
  supabaseKey: 'YOUR-ANON-KEY',
}
```

----------------------------------------

TITLE: Disabling Sequential Scans for Testing PGroonga Index
DESCRIPTION: SQL command to disable sequential scans, forcing the use of the PGroonga index for testing purposes. Not recommended for production use.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- For testing only. Don't do this in production
set enable_seqscan = off;
```

----------------------------------------

TITLE: Inserting Car Vector Embedding
DESCRIPTION: SQL insert statement containing a 300-dimensional vector embedding representing the semantic features of a 'Car' concept. The values are floating point numbers that capture various learned features.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-29-in-browser-semantic-search-pglite.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
('Car', '[-0.013675096,0.027324528,0.06942244,0.0013266953,-0.020453496,0.061512772,0.07301235,0.04290585,0.0023934839,-0.0186373,0.012499963,-0.093231946,0.028258853,0.07755444,0.025344418,-0.013358756,0.023283212,0.027902517,-0.032629456,-0.018587576,0.022121359,-0.01931578,-0.020892585,-0.07198824,0.0230901,0.058177892,-0.020588726,-0.020963376,-0.05223263,-0.13351677,-0.020541323,-0.034604687,0.05377937,0.015278223,-0.059128493,-0.054362193,-0.06885301,0.028906692,-0.052341137,0.01598179,0.027373223,0.015316855,-0.07678603,-0.053560868,-0.013568181,-0.0028432393,0.0071754334,0.020171847,0.07315126,-0.07514821,0.034036174,-0.017486328,0.014351431,0.004913182,-0.03727606,0.022707878,0.04719973,0.012032776,0.04482492,0.024352394,0.022039536,0.0637522,-0.22861159,0.055107087,0.07447692,0.0291307,-0.041218065,-0.040351745,0.047432993,0.054303292,-0.023342311,-0.016348358,0.0017851957,0.08988982,0.02769922,-0.049907178,-0.027979424,-0.042212185,-0.020770581,-0.021024825,0.029763328,-0.053642657,-0.066037476,-0.026011113,-0.010575339,-0.047937546,0.012322384,-0.056541797,0.029350977,0.014430247,-0.045942552,0.02386634,0.0029833463,0.0141003905,-0.05075455,-0.014572922,-0.008882929,-0.032623354,-0.050203778,0.26171875,-0.021519234,0.049280297,0.04079181,-0.028314121,-0.013227541,-0.012881829,-0.035419036,0.013379328,-0.030239435,0.04186359,0.017268283,-0.000105469044,0.0125124715,-0.082406625,0.034267884,-0.016504455,0.038922243,0.06633839,0.006251055,0.00037995656,-0.001207575,0.02512416,0.02109219,-0.02958561,0.0013164878,-0.103339866,0.04863308,0.11800187,0.034086462,0.037300617,0.056644727,-0.037418414,-0.061853807,-0.022136258,-0.019294702,0.017083716,0.012703508,0.015861439,-0.022639215,-0.007921711,-0.0544705,-0.12781276,-0.01872742,-0.123899914,-0.037989907,0.039830185,-0.05202418,0.05241696,-0.056093507,0.0136191305,-0.026056947,0.048660703,-0.0140545815,-0.0027107827,0.026319232,0.0021281333,0.04325188,0.058733158,-0.04723551,0.0404873,-0.034551904,-0.03205584,-0.053433474,0.06742306,-0.01232912,-0.08600591,-0.017429007,0.029419081,0.0026076722,0.013392961,0.03677887,0.031694457,-0.0720888,0.051425304,0.08350261,0.0315462,-0.004771196,0.034244526,-0.010683566,0.0025684177,0.028690292,0.010577877,-0.052667093,0.06373304,0.059627198,-0.019951789,-0.052819874,-0.0048726257,0.013962882,0.054299265,0.040887468,0.061755426,0.007373504,-0.0075591686,-0.062904865,-0.007323224,-0.016505266,-0.033703998,0.0016645732,-0.021243243,0.037611052,-0.020470953,-0.023737112,0.039098095,-0.0017488332,-0.038300857,-0.045891576,-0.016960371,0.022000503,0.043613117,-0.05976287,-0.0041191196,0.0744647,-0.0018894378,-0.03981402,0.012990376,-0.045962907,0.04994432,0.028742177,0.05744724,0.0009102008,-0.08285415,-0.03267054,-0.2337071,0.0072381077,-0.032779843,-0.024238953,0.041009203,-0.05101638,0.03943452,-0.02855554,0.04525813,0.046112273,0.05932983,-0.022565039,-0.009743857,0.061256465,-0.03037518,0.05372682,-0.010801566,0.01609313,-0.0061583905,0.042392224,-0.021107364,0.0141626885,-0.047603372,-0.057255138,0.040890433,-0.011722571,0.24564229,0.027296212,0.019367144,-0.016961388,0.06517703,0.043743007,-0.036653895,-0.055930916,0.013116146,-0.016756361,0.0140022235,-0.002970313,-0.070724085,-0.057791047,-0.013434504,0.029526964,-0.00938867,-0.05977423,0.00040445486,-0.014813439,-0.029890385,0.009259244,-0.027084075,0.041800242,0.06727153,-0.0014996758,-0.00021284568,0.016413646,0.0063286186,-0.019270584,-0.06787658,0.029184967,0.0017431147,0.0158079,-0.019558495,-0.04962892,0.017410701,-0.034534313,0.019038094,0.006610072,-0.04343159,-0.031567868,-0.009124138,-0.036709126,-0.015360762,0.10293102,-0.010821659,-0.015772903,0.07758905,-0.015194392,0.060196437,0.010410943,-0.021493688,-0.06867113,0.0474313,-0.017747577,0.042234425,0.05141044,0.057146773,0.006755126,0.049838375,-0.043111365,0.0029671746,-0.026369067,0.03549969,0.0017129052,-0.028317036,-0.05324385,0.039201375,-0.017168764,-0.2772981,0.04778095,-0.0069068763,0.06153518,-0.041531466,-0.0171643,0.013447191,0.03850731,-0.07578842,-0.029888023,0.012730036,0.03311835,0.059252515,0.040407978,-0.0048704417,0.043922015,0.05727722,-0.019122923,0.06540934,-0.008338455,0.010299639,0.053547956,0.20795242,-0.013018652,0.056953296,0.025129227,-0.018750485,0.008330987,0.02540996,-0.0045585097,0.038341187,0.035392124,0.0776931,-0.032675825,0.01839246,0.008414822,-0.07650357,0.07460887,0.015999481,-0.0143431565,-0.03775232,0.073541395,-0.029160045,-0.033645444,0.05769379,-0.037698034,-0.022761138,-0.066397525,0.013602807,0.005004625,-0.012167106,-0.0090219155,-0.07229144,-0.007818199,0.055839863,-0.023012608,-0.058479514,-0.023438398,0.007111039,-0.039270334,-0.007022913,-0.03873911,-0.016563078,0.015775386,0.025728563]')
```

----------------------------------------

TITLE: Remote-Specific Supabase Configuration
DESCRIPTION: TOML configuration example showing how to set up remote-specific settings for a staging environment, including custom seed script configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#2025-04-21_snippet_11

LANGUAGE: toml
CODE:
```
[remotes.staging]
project_id = "your-project-ref"

[remotes.staging.db.seed]
sql_paths = ["./seeds/staging.sql"]
```

----------------------------------------

TITLE: Installing PostgreSQL Client on Linux (Debian)
DESCRIPTION: Commands to install the PostgreSQL client on Debian-based Linux systems, which includes the psql command-line tool for connecting to Postgres databases.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/avoiding-timeouts-in-long-running-queries-6nmbdN.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
sudo apt-get update
sudo apt-get install postgresql-client
```

----------------------------------------

TITLE: Supabase Database Connection String Format
DESCRIPTION: Example format of a Supabase database connection string using connection pooling in session mode.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_2

LANGUAGE: txt
CODE:
```
postgresql://postgres.[PROJECT-REF]:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:5432/postgres
```

----------------------------------------

TITLE: Creating Table With Insufficient Privileges
DESCRIPTION: Example showing permission error when attempting to create table without proper schema privileges.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
# as junior_dev
postgres=> create table public.apps(id serial primary key, name text);
ERROR:  permission denied for schema public
LINE 1: create table public.apps(id serial primary key, name text);
                     ^
```

----------------------------------------

TITLE: Adding Internet Permission to Android Manifest
DESCRIPTION: XML configuration to add the INTERNET permission to the Android manifest file, which is required for the app to make network requests to the Supabase API.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/kotlin.mdx#2025-04-21_snippet_1

LANGUAGE: xml
CODE:
```
...
<uses-permission android:name="android.permission.INTERNET" />
...
```

----------------------------------------

TITLE: Configuring RedwoodJS Environment in redwood.toml
DESCRIPTION: RedwoodJS configuration file that includes environment variables to be exposed to the web side of the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
[web]
  title = "Supabase Redwood Tutorial"
  port = 8910
  apiProxyPath = "/.redwood/functions"
  includeEnvironmentVariables = ["SUPABASE_URL", "SUPABASE_KEY"]
[api]
  port = 8911
[browser]
  open = true
```

----------------------------------------

TITLE: Checking Supabase Studio Service Status in Docker
DESCRIPTION: Command to verify if the Supabase Studio service is running properly in Docker. This is useful for troubleshooting when the Dashboard is not accessible.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_14

LANGUAGE: bash
CODE:
```
docker compose ps
```

----------------------------------------

TITLE: Adding Jackson Serializer Dependency in Groovy Build File
DESCRIPTION: This snippet demonstrates how to add the Jackson serializer dependency to a Kotlin project using Gradle with the Groovy DSL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_13

LANGUAGE: groovy
CODE:
```
implementation 'io.github.jan-tennert.supabase:serializer-jackson:VERSION'
```

----------------------------------------

TITLE: Custom Link Component Integration
DESCRIPTION: Example demonstrating how to use a custom link component from a routing library using the asChild prop.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/breadcrumb.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
import { Link } from "next/link"

...

<Breadcrumb>
  <BreadcrumbList>
    <BreadcrumbItem>
      <BreadcrumbLink asChild>
        <Link href="/">Home</Link>
      </BreadcrumbLink>
    </BreadcrumbItem>
    {/* ... */}
  </BreadcrumbList>
</Breadcrumb>
```

----------------------------------------

TITLE: Querying Current PostgreSQL Log Level in SQL
DESCRIPTION: This SQL command retrieves the current log_min_messages setting, which determines the minimum severity of messages that will be logged.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-logging-levels-and-how-they-impact-your-project-KXiJRm.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
SHOW log_min_messages;
```

----------------------------------------

TITLE: Executing Vector Search Query via Supabase Edge Function
DESCRIPTION: cURL command to perform a semantic search request against a Supabase Edge Function endpoint. The request requires a Supabase anonymous key for authentication and accepts a JSON payload with a search term.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/edge-functions/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
curl -i --location --request POST 'https://<PROJECT-REF>.supabase.co/functions/v1/search' \
    --header 'Authorization: Bearer <SUPABASE_ANON_KEY>' \
    --header 'Content-Type: application/json' \
    --data '{"search":"vehicles"}'
```

----------------------------------------

TITLE: Performing Image Search
DESCRIPTION: Example command for performing a vector similarity search using a text query.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/ai/image_search/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
poetry run search "bike in front of red brick wall"
```

----------------------------------------

TITLE: Handling Map Marker Clicks in Ionic Angular
DESCRIPTION: Function to handle marker click events, load store information and images from Supabase, and update the UI state for selected markers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-03-01-geo-queries-with-postgis-in-ionic-angular.mdx#2025-04-21_snippet_23

LANGUAGE: typescript
CODE:
```
  addMarkerClicks() {
    this.map.setOnMarkerClickListener(async (marker) => {
      const info = this.activeMarkers.filter(
        (item) => item.markerId === marker.markerId.toString()
      );
      if (info.length) {
        this.selectedMarker = info[0];
        this.selectedStore = await this.storesService.loadStoreInformation(
          info[0].storeId
        );
        const img = await this.storesService.getStoreImage(
          this.selectedStore!.id
        );
        if (img) {
          this.selectedStore!.image = img;
        }
      }
    });
  }
```

----------------------------------------

TITLE: Implementing User Cursor Model in Dart
DESCRIPTION: Class representing user cursor positions with real-time synchronization capabilities and color assignment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_7

LANGUAGE: dart
CODE:
```
class UserCursor extends SyncedObject {
  static String type = 'cursor';

  final Offset position;
  final Color color;

  UserCursor({
    required super.id,
    required this.position,
  }) : color = RandomColor.getRandomFromId(id);

  UserCursor.fromJson(Map<String, dynamic> json)
      : position = Offset(json['position']['x'], json['position']['y']),
        color = RandomColor.getRandomFromId(json['id']),
        super(id: json['id']);

  @override
  Map<String, dynamic> toJson() {
    return {
      'object_type': type,
      'id': id,
      'position': {
        'x': position.dx,
        'y': position.dy,
      }
    };
  }
}
```

----------------------------------------

TITLE: Initializing Supabase Management API Client in TypeScript
DESCRIPTION: This code snippet demonstrates how to initialize the Supabase Management API client using the supabase-management-js library. It requires an access token obtained through the OAuth process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/integrations/build-a-supabase-integration.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { SupabaseManagementAPI } from 'supabase-management-js'

const client = new SupabaseManagementAPI({ accessToken: '<access token>' })
```

----------------------------------------

TITLE: Geographic Data Unnesting Query
DESCRIPTION: SQL query showing how to access Cloudflare geographic data from edge logs by unnesting metadata, request, and cf fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
  city
from
  edge_logs
-- Unpack 'metadata' field
cross join unnest(metadata) AS metadata
-- unpack 'request' from 'metadata'
cross join unnest(request) AS request;
-- unpack 'cf' from 'request'
cross join unnest(cf) AS cf;
```

----------------------------------------

TITLE: Adding CORS Headers to ChatGPT Plugin Routes in TypeScript
DESCRIPTION: This snippet shows how to add CORS headers to all routes in the ChatGPT plugin using Deno Oak middleware. It applies the previously defined CORS headers to each response.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { Application, Router } from 'https://deno.land/x/oak@v11.1.0/mod.ts'
import { corsHeaders } from '../_shared/cors.ts'

// [...]
const app = new Application()
// ChatGPT specific CORS headers
app.use(async (ctx, next) => {
  await next()
  let key: keyof typeof corsHeaders
  for (key in corsHeaders) {
    ctx.response.headers.set(key, corsHeaders[key])
  }
})
app.use(router.routes())
app.use(router.allowedMethods())

await app.listen({ port: 8000 })
```

----------------------------------------

TITLE: Testing POST Endpoint
DESCRIPTION: cURL command to test the POST endpoint of the deployed Edge Function with JSON payload
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
curl --request POST 'https://<project_ref>.supabase.co/functions/v1/hello-world' \
  --header 'Authorization: Bearer ANON_KEY' \
  --header 'Content-Type: application/json' \
  --data '{ "name":"Foo" }'
```

----------------------------------------

TITLE: Integrating the Avatar Component into an Account Page
DESCRIPTION: Code snippet showing how to add the Avatar component to an existing Account page. It demonstrates how to pass the required props including the current avatar URL, size, and the upload event handler that updates the profile.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_9

LANGUAGE: jsx
CODE:
```
// Import the new component
import Avatar from './Avatar'

// ...

return (
  <form onSubmit={updateProfile} class="form-widget">
    {/* Add to the body */}
    <Avatar
      url={avatarUrl()}
      size={150}
      onUpload={(e: Event, url: string) => {
        setAvatarUrl(url)
        updateProfile(e)
      }}
    />
    {/* ... */}
  </div>
)
```

----------------------------------------

TITLE: Creating and Populating Books Table in PostgreSQL
DESCRIPTION: SQL script to create a 'books' table with sample data for demonstrating full text search functionality. The table includes columns for id, title, author, and description.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table books (
  id serial primary key,
  title text,
  author text,
  description text
);

insert into books
  (title, author, description)
values
  (
    'The Poky Little Puppy',
    'Janette Sebring Lowrey',
    'Puppy is slower than other, bigger animals.'
  ),
  ('The Tale of Peter Rabbit', 'Beatrix Potter', 'Rabbit eats some vegetables.'),
  ('Tootle', 'Gertrude Crampton', 'Little toy train has big dreams.'),
  (
    'Green Eggs and Ham',
    'Dr. Seuss',
    'Sam has changing food preferences and eats unusually colored food.'
  ),
  (
    'Harry Potter and the Goblet of Fire',
    'J.K. Rowling',
    'Fourth year of school starts, big drama ensues.'
  );
```

----------------------------------------

TITLE: Finding Critical Path in Project Tasks using pgRouting's Dijkstra Algorithm
DESCRIPTION: This code demonstrates how to use pgRouting's implementation of Dijkstra's algorithm to find the longest path through task dependencies, which represents the critical path in project management. It shows how to set up the extension and execute the query.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create schema if not exists extensions;
create extension pgrouting schema extensions cascade;

-- find the longest path using pgr_dijkstra()
-- (as it calculates shortest path, use negative weights)
select * FROM extensions.pgr_dijkstra(
    'select id, source, target, duration as cost from dependencies',
    1,  -- Start Project (Task ID 1)
    6   -- End Project (Task ID 6)
);
```

----------------------------------------

TITLE: Enabling autovacuum logging for a PostgreSQL table
DESCRIPTION: This SQL command enables detailed logging of autovacuum operations for a specific table, which helps diagnose vacuum-related issues.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
ALTER TABLE mytable SET log_autovacuum_min_duration to 0;
```

----------------------------------------

TITLE: Disabling Table Audit Tracking in PostgreSQL
DESCRIPTION: SQL function call to disable audit tracking on a specified schema and table combination. Takes a regclass parameter representing the fully qualified table name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
select audit.disable_tracking('<schema>.<table>'::regclass);
```

----------------------------------------

TITLE: Data Manipulation with OrioleDB
DESCRIPTION: Example of inserting data and querying from an OrioleDB table with sample output formatting.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/orioledb.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
INSERT INTO blog_post (id, title, body, author, views)
VALUES (1, 'Hello, World!', 'This is my first blog post.', 'John Doe', 1000);

SELECT * FROM blog_post ORDER BY published_at DESC LIMIT 10;
 id │     title     │            body             │  author  │         published_at          │ views
────┼───────────────┼─────────────────────────────┼──────────┼───────────────────────────────┼───────
  1 │ Hello, World! │ This is my first blog post. │ John Doe │ 2024-11-15 12:04:18.756824+01 │  1000
```

----------------------------------------

TITLE: Edge Functions Configuration - TOML
DESCRIPTION: Configuration settings for Edge Functions in config.toml file, including JWT verification and import map settings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/development-tips.mdx#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[functions.hello-world]
verify_jwt = false
import_map = './import_map.json'
```

----------------------------------------

TITLE: Reset Password Email Template for PKCE Flow
DESCRIPTION: This HTML snippet shows the content of a reset password email template for the PKCE flow. It includes a link with a token hash for resetting the password securely.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_25

LANGUAGE: html
CODE:
```
<h2>Reset Password</h2>

<p>Follow this link to reset the password for your user:</p>
<p>
  <a
    href="{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=recovery&next=/account/update-password"
    >Reset Password</a
  >
</p>
```

----------------------------------------

TITLE: Generating Account Component with RedwoodJS CLI
DESCRIPTION: Shows how to generate a new Account component using the RedwoodJS generator CLI. The command creates the component file along with test and story files.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_9

LANGUAGE: bash
CODE:
```
yarn rw g component account

  ✔ Generating component files...
    ✔ Successfully wrote file `./web/src/components/Account/Account.test.js`
    ✔ Successfully wrote file `./web/src/components/Account/Account.stories.js`
    ✔ Successfully wrote file `./web/src/components/Account/Account.js`
```

----------------------------------------

TITLE: Finding All Errors in Supabase Edge Logs (SQL)
DESCRIPTION: This query selects error logs from the edge_logs table, focusing on the Database API. It filters for status codes 400 and above, and includes timestamp, status code, event message, and path information.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
select
  cast(timestamp as datetime) as timestamp,
  status_code,
  event_message,
  path
from
  edge_logs
  cross join unnest(metadata) as metadata
  cross join unnest(response) as response
  cross join unnest(request) as request
where
  -- find all errors
  status_code >= 400
  and regexp_contains(path, '^/rest/v1/');
-- only look at DB API
```

----------------------------------------

TITLE: Configuring Extensions for Foreign Server in Postgres
DESCRIPTION: SQL command to set the extensions option for a foreign server, listing shared extensions to ensure proper function and operator references.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/postgres_fdw.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
alter server "<foreign_server_name>"
options (extensions 'vector, postgis');
```

----------------------------------------

TITLE: Saving Roboflow Predictions to Supabase
DESCRIPTION: Python code for saving object detection prediction results to a Supabase table. It creates a Supabase client using environment variables and inserts the predictions with the filename into a 'predictions' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_2

LANGUAGE: python
CODE:
```
import os
from supabase import create_client, Client

url: str = os.environ.get("SUPABASE_URL")
key: str = os.environ.get("SUPABASE_KEY")
supabase: Client = create_client(url, key)

result = supabase.table('predictions') \
    .insert({"filename": image, "predictions": predictions}) \
    .execute()
```

----------------------------------------

TITLE: Sending POST Request to Function with Unnamed Parameter
DESCRIPTION: Illustrates how to send a POST request to a PostgreSQL function with an unnamed parameter using a webhook. This example shows the structure of the request and payload for storing email bounce data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-postgrest-9.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
POST https://<PROJECT_REF>.supabase.co/rest/v1/rpc/store_bounces HTTP/1.1
Content-Type: application/json

{
  "RecordType": "Bounce",
  "MessageStream": "outbound",
  "ID": 4323372036854775807,
  "Type": "HardBounce",
  "MessageID": "883953f4-6105-42a2-a16a-77a8eac79483",
  "Description": "The server was unable to deliver your message (ex: unknown user, mailbox not found).",
  "Details": "Test bounce details",
  "Email": "john@example.com",
  "From": "sender@example.com",
  "BouncedAt": "2019-11-05T16:33:54.9070259Z"
}
```

----------------------------------------

TITLE: Truncating Webhook Queue in SQL
DESCRIPTION: SQL command to truncate the net.http_request_queue table to clear the webhook queue when it becomes too large and causes IO strain.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/interpreting-supabase-grafana-io-charts-MUynDR.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
TRUNCATE net.http_request_queue;
```

----------------------------------------

TITLE: Implementing Schema Version Triggers in PostgreSQL
DESCRIPTION: SQL triggers that detect changes in database schema to maintain schema versioning for pg_graphql caching
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-24-how-pg-graphql-works.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION graphql.rebuild() RETURNS event_trigger
LANGUAGE plpgsql AS
$_$
BEGIN
  -- Note that this rebuilds the search path.
  -- Schema version is incremented implicitly by trigger.
  PERFORM graphql.resolve();
END;
$_$;
```

----------------------------------------

TITLE: Installing Menubar Dependencies Manually
DESCRIPTION: Command to install the required dependencies for the Menubar component manually using npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/menubar.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-menubar
```

----------------------------------------

TITLE: Setting Fly.io Database Secret
DESCRIPTION: Command to set the Supabase database URL as a secret in Fly.io deployment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-29-ruby-on-rails-postgres.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
fly secrets set DATABASE_URL=$DATABASE_URL
```

----------------------------------------

TITLE: Setup and Installation Commands
DESCRIPTION: Terminal commands for installing dependencies and starting the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_8

LANGUAGE: bash
CODE:
```
npm start
```

LANGUAGE: bash
CODE:
```
npx expo install expo-image-picker
```

LANGUAGE: bash
CODE:
```
npx expo prebuild
```

----------------------------------------

TITLE: Finalizing Canvas Object Drawing in Flutter
DESCRIPTION: This method handles the completion of a drawing operation. It syncs the final object position, clears the drawing state, and persists the drawn object to Supabase database using an upsert operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-26-flutter-figma-clone.mdx#2025-04-21_snippet_18

LANGUAGE: dart
CODE:
```
void onPanEnd(DragEndDetails _) async {
    if (_currentlyDrawingObjectId != null) {
      _syncCanvasObject(_cursorPosition);
    }

    final drawnObjectId = _currentlyDrawingObjectId;

    setState(() {
      _panStartPoint = null;
      _currentlyDrawingObjectId = null;
    });

    // Save whatever was drawn to Supabase DB
    if (drawnObjectId == null) {
      return;
    }
    await supabase.from('canvas_objects').upsert({
      'id': drawnObjectId,
      'object': _canvasObjects[drawnObjectId]!.toJson(),
    });
  }
```

----------------------------------------

TITLE: Uploading a file using Dart in Supabase Storage
DESCRIPTION: This Dart snippet demonstrates how to upload a file to Supabase Storage. It creates a file named `example.txt` with the content "File content", and then uploads it to the 'public' bucket with the same name using the `supabase.storage.from('public').upload()` method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_6

LANGUAGE: dart
CODE:
```
void main() async {
  final supabase = SupabaseClient('supabaseUrl', 'supabaseKey');

  // Create file `example.txt` and upload it in `public` bucket
  final file = File('example.txt');
  file.writeAsStringSync('File content');
  final storageResponse = await supabase
      .storage
      .from('public')
      .upload('example.txt', file);
}
```

----------------------------------------

TITLE: weapons.json after flattening
DESCRIPTION: This JSON snippet shows the contents of the `weapons.json` file after flattening, demonstrating the extraction of weapons data from the `users` collection into a separate file. This file contains the 'uid' and 'weapon' fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_10

LANGUAGE: json
CODE:
```
[
  { "uid": "abc123", "weapon": "toothpick" },
  { "uid": "abc123", "weapon": "needle" },
  { "uid": "abc123", "weapon": "rock" },
  { "uid": "xyz789", "weapon": "hand" },
  { "uid": "xyz789", "weapon": "foot" },
  { "uid": "xyz789", "weapon": "head" }
]
```

----------------------------------------

TITLE: Integrating Avatar Component into Account Form
DESCRIPTION: Code snippet showing how to integrate the Avatar component into the AccountForm. It adds the avatar upload functionality to the user profile form, allowing for profile picture management alongside other user information.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_18

LANGUAGE: jsx
CODE:
```
// Import the new component
import Avatar from './avatar'

// ...

return (
  <div className="form-widget">
    {/* Add to the body */}
    <Avatar
      uid={user?.id}
      url={avatar_url}
      size={150}
      onUpload={(url) => {
        setAvatarUrl(url)
        updateProfile({ fullname, username, website, avatar_url: url })
      }}
    />
    {/* ... */}
  </div>
)
```

----------------------------------------

TITLE: Implementing Trigger Functions for View Updates in SQL
DESCRIPTION: This snippet demonstrates how to create trigger functions to update views from PostgREST. It includes a function definition and a trigger creation for the 'projects' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-03-declarative-schemas.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create function public.public_projects_on_insert() returns trigger
as $$
begin
  insert into private.projects(
    name,
    organization_id,
    inserted_at,
    updated_at
  ) values (
    NEW.name,
    NEW.organization_id,
    coalesce(NEW.inserted_at, now()),
    coalesce(NEW.updated_at, now())
  ) returning * into NEW;
  return NEW;
end
$$ language plpgsql;

create trigger public_projects_on_insert
  instead of insert
  on public.projects
  for each row
execute function public.public_projects_on_insert();
```

----------------------------------------

TITLE: Configuring Object Logging in PGAudit
DESCRIPTION: SQL commands to set up object-specific logging in PGAudit using a custom audit role and granting specific privileges.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create role "some_audit_role" noinherit;

alter role "postgres" set pgaudit.role to 'some_audit_role';

grant select on random_table to "some_audit_role";

-- change pgaudit.role to no longer reference some_audit_role
alter role "postgres" set pgaudit.role to '';

-- view if pgaudit.role changed with the following command:
select
  rolname,
  rolconfig
from pg_roles
where rolname = 'postgres';
-- should return a rolconfig path with "pgaudit.role="
```

----------------------------------------

TITLE: Installing Poetry Package Manager
DESCRIPTION: Command to install Poetry, a Python dependency management tool, using pip.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
pip install poetry
```

----------------------------------------

TITLE: Setting Custom Presence Key in Python
DESCRIPTION: This snippet demonstrates how to set a custom presence key in Python during channel creation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_24

LANGUAGE: python
CODE:
```
channel_c = supabase.channel('test', {
  "config": {
    "presence": {
      "key": 'userId-123',
    },
  },
})
```

----------------------------------------

TITLE: Using Collapsible Component in React
DESCRIPTION: Example demonstrating how to use the Collapsible component in a React component. Shows the basic structure with a trigger element and content that can be expanded or collapsed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/collapsible.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<Collapsible>
  <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>
  <CollapsibleContent>
    Yes. Free to use for personal and commercial projects. No attribution required.
  </CollapsibleContent>
</Collapsible>
```

----------------------------------------

TITLE: Running Oak Server Functions Locally
DESCRIPTION: Command to serve Oak server functions locally without JWT verification for development and testing purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/oak-server/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions serve --no-verify-jwt
```

----------------------------------------

TITLE: Setting Message Visibility Timeout in PGMQ with SQL
DESCRIPTION: The set_vt function sets the visibility timeout of a message to a specified time duration in the future. It takes queue name, message ID, and visibility timeout offset as parameters and returns the updated message record.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/queues/pgmq.mdx#2025-04-21_snippet_15

LANGUAGE: sql
CODE:
```
select * from pgmq.set_vt('my_queue', 11, 30);
 msg_id | read_ct |          enqueued_at          |              vt               |       message
--------+---------+-------------------------------+-------------------------------+----------------------
     1 |       0 | 2023-10-28 19:42:21.778741-05 | 2023-10-28 19:59:34.286462-05 | {"hello": "world_0"}
```

----------------------------------------

TITLE: Setting Session-Level Timeout in Postgres
DESCRIPTION: Sets a statement timeout at the session level that persists for the duration of the connection. This command sets a 10-minute timeout.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
set statement_timeout = '10min';
```

----------------------------------------

TITLE: Integrating Avatar Component in Svelte Account Page
DESCRIPTION: Code snippet showing how to import and use an Avatar component within a Svelte Account page. The component is bound to an avatarUrl variable and set up with an upload event handler that triggers the updateProfile function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_8

LANGUAGE: html
CODE:
```
<script lang="ts">
  // Import the new component
  import Avatar from './Avatar.svelte'
</script>

<form on:submit|preventDefault="{updateProfile}" class="form-widget">
  <!-- Add to body -->
  <Avatar bind:url="{avatarUrl}" size="{150}" on:upload="{updateProfile}" />

  <!-- Other form elements -->
</form>
```

----------------------------------------

TITLE: Analyzing Authenticated User Query Paths in Supabase Edge Logs (SQL)
DESCRIPTION: This query identifies frequently accessed paths by authenticated users in the Database API. It groups results by authenticated user and path, providing insights into user behavior and popular endpoints.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/discovering-and-interpreting-api-errors-in-the-logs-7xREI9.mdx#2025-04-21_snippet_13

LANGUAGE: sql
CODE:
```
select
  -- only available for front-end clients
  auth_users,
  path,
  count(auth_users) as ip_count
from
  edge_logs
  cross join unnest(metadata) as metadata
  cross join unnest(request) as request
  cross join unnest(sb) as sb
where
  -- only look at DB API
  regexp_contains(path, '^/rest/v1/')
group by auth_users, path;
```

----------------------------------------

TITLE: Creating a Custom Role in Supabase Storage
DESCRIPTION: This SQL snippet demonstrates how to create a new role named 'manager' and grant role-based permissions for access control using Supabase Storage. It also shows granting the newly created role to existing roles, 'authenticator' and 'anon', to ensure proper access rights.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/custom-roles.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create role 'manager';

-- Important to grant the role to the authenticator and anon role
grant manager to authenticator;
grant anon to manager;
```

----------------------------------------

TITLE: Configuring Android Deep Links
DESCRIPTION: Add deep linking configuration to Android manifest file for handling authentication callbacks
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_5

LANGUAGE: xml
CODE:
```
<manifest ...>
    <!-- ... other tags -->
    <application ...>
      <activity ...>
        <!-- ... other tags -->

        <!-- Deep Links -->
				<meta-data android:name="flutter_deeplinking_enabled" android:value="true" />
        <intent-filter>
          <action android:name="android.intent.action.VIEW" />
          <category android:name="android.intent.category.DEFAULT" />
          <category android:name="android.intent.category.BROWSABLE" />
          <data
            android:scheme="mfa-app"
            android:host="callback" />
        </intent-filter>
        <!-- END Deep Links -->

      </activity>
    </application>
  </manifest>
```

----------------------------------------

TITLE: Normalizing JSONB Data in Postgres using SQL
DESCRIPTION: SQL commands to normalize JSONB data into structured relational tables. This example demonstrates extracting user data and nested order data from the raw JSONB structure.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-21-migrating-from-fauna-to-supabase.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
-- Example normalization for users
INSERT INTO users (name, email)
SELECT
  data->'data'->'name' AS name,
  data->'data'->'email' AS email
FROM fauna_users_raw;

-- Example normalization of nested orders
INSERT INTO orders (user_id, product, quantity)
SELECT
  u.id,
  order_data->>'product',
  (order_data->>'quantity')::INTEGER
FROM fauna_users_raw f
JOIN users u ON (f.data->'data'->>'email') = u.email,
LATERAL jsonb_array_elements(f.data->'data'->'orders') AS order_data;
```

----------------------------------------

TITLE: Filtering Postgres Error Logs with Severity Levels
DESCRIPTION: A comprehensive example showing how to filter Postgres logs by error severity level. It unnests the metadata to access the parsed error_severity field and filters for ERROR, FATAL, or PANIC severity levels.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
select
  cast(postgres_logs.timestamp as datetime) as timestamp,
  parsed.error_severity,
  parsed.user_name,
  event_message
from
  postgres_logs
  cross join unnest(metadata) as metadata
  cross join unnest(metadata.parsed) as parsed
where regexp_contains(parsed.error_severity, 'ERROR|FATAL|PANIC')
order by timestamp desc
limit 100;
```

----------------------------------------

TITLE: Angular Routing Configuration with Auth Guards
DESCRIPTION: Route configuration that implements the auth guard for protected routes in the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
import { AuthGuard } from './guards/auth.guard'
import { BoardComponent } from './components/inside/board/board.component'
import { WorkspaceComponent } from './components/inside/workspace/workspace.component'
import { LoginComponent } from './components/login/login.component'
import { NgModule } from '@angular/core'
import { RouterModule, Routes } from '@angular/router'

const routes: Routes = [
  {
    path: '',
    component: LoginComponent,
  },
  {
    path: 'workspace',
    component: WorkspaceComponent,
    canActivate: [AuthGuard],
  },
  {
    path: 'workspace/:id',
    component: BoardComponent,
    canActivate: [AuthGuard],
  },
  {
    path: '**',
    redirectTo: '/',
  },
]

@NgModule({
  imports: [RouterModule.forRoot(routes, {})],
  exports: [RouterModule],
})
export class AppRoutingModule {}
```

----------------------------------------

TITLE: Generated GraphQL Schema for Record Return Function
DESCRIPTION: The GraphQL schema automatically generated for the accountsByEmailDomain function, showing the Relay-style pagination support, filtering, and sorting capabilities.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-12-pg-graphql-postgres-functions.mdx#2025-04-21_snippet_5

LANGUAGE: graphql
CODE:
```
type Query {
  accountsByEmailDomain(
    domainToSearch: String!

    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: AccountFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [AccountOrderBy!]
  ): AccountConnection
}
```

----------------------------------------

TITLE: Offloading PostgreSQL Data to Snowflake with FDWs
DESCRIPTION: SQL query showing how to move data from PostgreSQL to Snowflake using foreign data wrappers, inserting recent analytics data into the data warehouse.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-15-postgres-foreign-data-wrappers-rust.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
insert into snowflake.analytics
select * from analytics
where ts > (now() - interval '1 DAY');
```

----------------------------------------

TITLE: Creating a Table for PGroonga Full-Text Search
DESCRIPTION: SQL command to create a table with a text column that will be used for full-text search indexing with PGroonga.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table memos (
  id serial primary key,
  content text
);
```

----------------------------------------

TITLE: Implementing Function Logging
DESCRIPTION: Example of implementing different logging severity levels in PostgreSQL functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/functions.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
create function logging_example(
  log_message text,
  warning_message text,
  error_message text
)
returns void
language plpgsql
as $$
begin
  raise log 'logging message: %', log_message;
  raise warning 'logging warning: %', warning_message;

  -- immediately ends function and reverts transaction
  raise exception 'logging error: %', error_message;
end;
$$;

select logging_example('LOGGED MESSAGE', 'WARNING MESSAGE', 'ERROR MESSAGE');
```

----------------------------------------

TITLE: Updating User Password in Kotlin with Supabase
DESCRIPTION: Kotlin implementation to update a user's password using Supabase authentication client with a builder pattern after a successful password reset flow.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_37

LANGUAGE: Kotlin
CODE:
```
supabase.auth.updateUser {
    password = "new_password"
}
```

----------------------------------------

TITLE: Adding Supabase-KT Dependencies with Gradle Kotlin DSL
DESCRIPTION: Demonstrates how to add core Supabase-KT modules (postgrest-kt, auth-kt, realtime-kt) using Gradle Kotlin DSL build script. Uses BOM for version management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/installing.mdx#2025-04-21_snippet_0

LANGUAGE: kotlin
CODE:
```
implementation(platform("io.github.jan-tennert.supabase:bom:VERSION"))
implementation("io.github.jan-tennert.supabase:postgrest-kt")
implementation("io.github.jan-tennert.supabase:auth-kt")
implementation("io.github.jan-tennert.supabase:realtime-kt")
```

----------------------------------------

TITLE: Detecting Social Media Shares in Edge Function (JavaScript)
DESCRIPTION: This code snippet checks the user agent to detect if the ticket was shared on Twitter or LinkedIn, and updates the corresponding fields in the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-07-designing-with-ai-midjourney.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
if (userAgent?.toLocaleLowerCase().includes('twitter')) {
  // Attendee shared on Twitter
  await supabaseAdminClient
    .from('lw7_tickets')
    .update({ sharedOnTwitter: 'now' })
    .eq('username', username)
    .is('sharedOnTwitter', null)
} else if (userAgent?.toLocaleLowerCase().includes('linkedin')) {
  // Attendee shared on LinkedIn
  await supabaseAdminClient
    .from('lw7_tickets')
    .update({ sharedOnLinkedIn: 'now' })
    .eq('username', username)
    .is('sharedOnLinkedIn', null)
}
```

----------------------------------------

TITLE: Updating Supabase Services
DESCRIPTION: This process outlines how to update the Supabase services by modifying the version number in the Docker compose file followed by pulling the latest images and restarting the services. Useful for applying patches and new features.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
docker compose pull
 docker compose up -d
```

----------------------------------------

TITLE: Installing Dependencies for Infinite Scroll Project
DESCRIPTION: Installs required npm packages for the infinite scroll project, including Supabase client, Lodash for debounce function, and Framer Motion for animations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js lodash framer-motion
```

----------------------------------------

TITLE: Configuring Edge Runtime Policy
DESCRIPTION: TOML configuration for setting up background tasks in Supabase Edge Functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/elevenlabs-generate-speech-stream.mdx#2025-04-21_snippet_2

LANGUAGE: toml
CODE:
```
[edge_runtime]
policy = "per_worker"
```

----------------------------------------

TITLE: Configuring Edge Functions with TOML Configuration
DESCRIPTION: A config.toml example showing how to configure individual Supabase Edge Functions. This example disables JWT verification for a function named 'hello-world'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/github-actions.mdx#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[functions.hello-world]
verify_jwt = false
```

----------------------------------------

TITLE: Implementing SidebarMenuSkeleton for Loading State in React
DESCRIPTION: This snippet demonstrates how to use the SidebarMenuSkeleton component to render a loading state for a SidebarMenu. It creates multiple skeleton items using Array.from.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/sidebar.mdx#2025-04-21_snippet_27

LANGUAGE: tsx
CODE:
```
function NavProjectsSkeleton() {
  return (
    <SidebarMenu>
      {Array.from({ length: 5 }).map((_, index) => (
        <SidebarMenuItem key={index}>
          <SidebarMenuSkeleton />
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Running Development Server for Next.js Project
DESCRIPTION: This snippet provides bash commands to run the Next.js development server using npm, yarn, pnpm, or bun. The server is accessible via http://localhost:3000. The project auto-updates during development.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Running the Angular Application
DESCRIPTION: This bash command starts the Angular development server, making the application accessible at localhost:4200.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-angular.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
npm run start
```

----------------------------------------

TITLE: Creating a Flutter App with Terminal Command
DESCRIPTION: This command creates a new Flutter application named 'my_app' using the Flutter CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/flutter.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
flutter create my_app
```

----------------------------------------

TITLE: Dependencies Configuration
DESCRIPTION: YAML configuration specifying required Flutter dependencies including Supabase, Google Maps, and utilities
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_1

LANGUAGE: yaml
CODE:
```
supabase_flutter: ^2.5.9
google_maps_flutter: ^2.7.0
geolocator: ^12.0.0
duration: ^3.0.13
intl: ^0.19.0
```

----------------------------------------

TITLE: Setting NEW_DB_URL Environment Variable in Bash
DESCRIPTION: Here, the snippet demonstrates how to set the NEW_DB_URL environment variable, which is required for connecting to the Supabase database. It emphasizes the need to replace [YOUR-PASSWORD] with the actual password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/neon.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
export NEW_DB_URL="postgresql://postgres.xxxxxxxxxxxxxxxxxxxx:[YOUR-PASSWORD]@aws-0-us-west-1.pooler.supabase.com:5432/postgres"
```

----------------------------------------

TITLE: Executing Llamafile Function Locally
DESCRIPTION: cURL command to test the Llamafile function locally with a sample prompt.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
curl --get "http://localhost:54321/functions/v1/llamafile" \
 --data-urlencode "prompt=write a short rap song about Supabase, the Postgres Developer platform, as sung by Nicki Minaj" \
 -H "Authorization: $ANON_KEY"
```

----------------------------------------

TITLE: Initializing a new Python project with Poetry
DESCRIPTION: Command to create a new Python project structure using Poetry, specifically for the AWS Bedrock image search example.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
poetry new aws_bedrock_image_search
```

----------------------------------------

TITLE: Scaffolding Instrument UI with RedwoodJS
DESCRIPTION: Command to generate a CRUD UI for the Instrument model using RedwoodJS scaffolding feature.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/redwoodjs.mdx#2025-04-21_snippet_7

LANGUAGE: bash
CODE:
```
yarn rw g scaffold instrument
```

----------------------------------------

TITLE: Defining ChatMessage Type with TypeScript
DESCRIPTION: Defines the structure of a chat message, including ID, content, user details, and creation timestamp, ensuring type safety across the application. Utilizes TypeScript for static type checking and interface definition.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-chat.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface ChatMessage {
  id: string
  content: string
  user: {
    name: string
  }
  createdAt: string
}
```

----------------------------------------

TITLE: Querying Timezone Information in Postgres SQL
DESCRIPTION: This SQL query retrieves a full list of timezones supported by the database. It returns the name, abbreviation, UTC offset, and daylight savings status for each timezone.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/configuration.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select name, abbrev, utc_offset, is_dst
from pg_timezone_names()
order by name;
```

----------------------------------------

TITLE: Basic Dropdown Menu Implementation in React
DESCRIPTION: Example of a basic dropdown menu implementation with a trigger, content, label, separator, and multiple menu items for account-related actions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/dropdown-menu.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<DropdownMenu>
  <DropdownMenuTrigger>Open</DropdownMenuTrigger>
  <DropdownMenuContent>
    <DropdownMenuLabel>My Account</DropdownMenuLabel>
    <DropdownMenuSeparator />
    <DropdownMenuItem>Profile</DropdownMenuItem>
    <DropdownMenuItem>Billing</DropdownMenuItem>
    <DropdownMenuItem>Team</DropdownMenuItem>
    <DropdownMenuItem>Subscription</DropdownMenuItem>
  </DropdownMenuContent>
</DropdownMenu>
```

----------------------------------------

TITLE: Generating Auth Guard in Ionic Angular
DESCRIPTION: Creates a new guard to protect routes in an Ionic Angular application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
ionic g guard guards/auth --implements=CanActivate
```

----------------------------------------

TITLE: Adding Moshi Serializer Dependency in Maven POM
DESCRIPTION: This XML snippet shows how to add the Moshi serializer dependency in a Maven project's pom.xml file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_10

LANGUAGE: xml
CODE:
```
<dependency>
    <groupId>io.github.jan-tennert.supabase</groupId>
    <artifactId>serializer-moshi</artifactId>
    <version>VERSION</version>
</dependency>
```

----------------------------------------

TITLE: Poetry Script Configuration in pyproject.toml
DESCRIPTION: Configuration in pyproject.toml to define Poetry scripts for the seed and search functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/semantic-image-search-amazon-titan.mdx#2025-04-22_snippet_8

LANGUAGE: toml
CODE:
```
[tool.poetry.scripts]
seed = "image_search.main:seed"
search = "image_search.main:search"
```

----------------------------------------

TITLE: Querying HTTP Request Queue in Supabase SQL
DESCRIPTION: This SQL query checks the contents of the net.http_request_queue table to ensure it's empty before attempting to resolve the permission error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/42501--permission-denied-for-table-httprequestqueue-KnozmQ.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select * from net.http_request_queue
```

----------------------------------------

TITLE: Creating Database from Custom Template
DESCRIPTION: SQL command to create a new database using a custom template database instead of the default template1.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-09-postgresql-templates.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
CREATE DATABASE new_db_name TEMPLATE template_db_name;
```

----------------------------------------

TITLE: Creating Supabase Function
DESCRIPTION: Command to create a new Supabase Edge Function for email handling
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/auth-send-email-hook-react-email-resend.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase functions new send-email
```

----------------------------------------

TITLE: Configuring Supabase with Encrypted Secret (TOML)
DESCRIPTION: Provides an alternative method to the `env()` syntax, showing how to directly embed encrypted values within the `config.toml` file for fields designated as 'secret'. This removes the need for an environment variable lookup but requires the value to be encrypted beforehand using dotenvx.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#_snippet_1

LANGUAGE: toml
CODE:
```
[auth.external.github]
enabled = true
secret = "encrypted:<encrypted-value>"
```

----------------------------------------

TITLE: Creating a Zod Form Schema
DESCRIPTION: Example of creating a form validation schema using Zod, defining constraints for a username field with minimum and maximum length requirements.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/form.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

import { z } from 'zod'

const formSchema = z.object({
  username: z.string().min(2).max(50),
})
```

----------------------------------------

TITLE: Querying with Timestamp Distance Ordering Using Attached Column
DESCRIPTION: Example of a SELECT query that performs text search using a RUM index with an attached timestamp column, ordering results by the distance between a query timestamp and the stored timestamps.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/rum.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
SELECT id, d, d `<=>` '2016-05-16 14:21:25' FROM tsts WHERE t @@ 'wr&qh' ORDER BY d `<=>` '2016-05-16 14:21:25' LIMIT 5;
```

----------------------------------------

TITLE: Setting OpenAI SDK Environment Variables for Llamafile
DESCRIPTION: Environment variable configuration for using the OpenAI Deno SDK with Llamafile in Supabase Edge Functions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_4

LANGUAGE: txt
CODE:
```
OPENAI_BASE_URL=http://host.docker.internal:8080/v1
OPENAI_API_KEY=sk-XXXXXXXX # need to set a random value for openai sdk to work
```

----------------------------------------

TITLE: Command Dialog Implementation with Keyboard Shortcut
DESCRIPTION: Function component that implements a Command Dialog with keyboard shortcut (Cmd/Ctrl+K) for opening and closing the dialog.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/command.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
export function CommandMenu() {
  const [open, setOpen] = React.useState(false)

  React.useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {
        e.preventDefault()
        setOpen((open) => !open)
      }
    }
    document.addEventListener('keydown', down)
    return () => document.removeEventListener('keydown', down)
  }, [])

  return (
    <CommandDialog open={open} onOpenChange={setOpen}>
      <CommandInput placeholder="Type a command or search..." />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>
        <CommandGroup heading="Suggestions">
          <CommandItem>Calendar</CommandItem>
          <CommandItem>Search Emoji</CommandItem>
          <CommandItem>Calculator</CommandItem>
        </CommandGroup>
      </CommandList>
    </CommandDialog>
  )
}
```

----------------------------------------

TITLE: Implementing RealtimeAvatarStack Component in React
DESCRIPTION: This snippet demonstrates how to use the RealtimeAvatarStack component in a React application. It shows the component being used within a Header to display online users in a specific room.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/realtime-avatar-stack.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { RealtimeAvatarStack } from '@/components/realtime-avatar-stack'

export default function Page() {
  return (
    <Header className="flex items-center justify-between">
      <h1>Lumon Industries</h1>
      <RealtimeAvatarStack roomName="break_room" />
    </Header>
  )
}
```

----------------------------------------

TITLE: Uninstalling Supabase and Removing Data
DESCRIPTION: Commands to completely uninstall Supabase by stopping Docker containers, removing volumes, and deleting Postgres data. This will destroy all data in the database and storage volumes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
# Stop docker and remove volumes:
docker compose down -v

# Remove Postgres data:
rm -rf volumes/db/data/
```

----------------------------------------

TITLE: Enabling WAL Archiving in PostgreSQL Configuration
DESCRIPTION: Commands to modify the PostgreSQL configuration file to enable WAL (Write-Ahead Log) archiving and configure it to use WAL-G for pushing archives to S3 storage.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
$ echo "archive_mode = yes" >> /etc/postgresql/12/main/postgresql.conf
$ echo "archive_command = 'envdir /etc/wal-g.d/env /usr/local/bin/wal-g wal-push %p'" >> /etc/postgresql/12/main/postgresql.conf
$ echo "archive_timeout = 60" >> /etc/postgresql/12/main/postgresql.conf
```

----------------------------------------

TITLE: Full Example for Finding Errors in Postgres Logs
DESCRIPTION: Comprehensive SQL query to find errors in Postgres logs. It filters by error severity, user name, event message content, and timestamp range. The query also excludes certain keywords and orders results by timestamp.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
select
  cast(postgres_logs.timestamp as datetime) as timestamp,
  event_message,
  parsed.error_severity,
  parsed.user_name,
  parsed.query,
  parsed.detail,
  parsed.hint,
  parsed.sql_state_code,
  parsed.backend_type
from
  postgres_logs
  cross join unnest(metadata) as metadata
  cross join unnest(metadata.parsed) as parsed
where
  regexp_contains(parsed.error_severity, 'ERROR|FATAL|PANIC')
  and parsed.user_name = 'postgres'
  and regexp_contains(event_message, 'duration|operator')
  and not regexp_contains(parsed.query, '<key words>')
  and postgres_logs.timestamp between '2024-04-15 10:50:00' and '2024-04-15 10:50:27'
order by timestamp desc
limit 100;
```

----------------------------------------

TITLE: Defining Supabase Types in SvelteKit (v0.8.x and v0.9.0)
DESCRIPTION: Type definitions for Supabase integration in SvelteKit, showing both v0.8.x and v0.9.0 approaches. Includes namespace declarations and interface definitions for app-wide types.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_22

LANGUAGE: typescript
CODE:
```
// v0.8.x
/// <reference types="@sveltejs/kit" />

declare namespace App {
  interface Supabase {
    Database: import('./DatabaseDefinitions').Database
    SchemaName: 'public'
  }

  interface PageData {
    session: import('@supabase/auth-helpers-sveltekit').SupabaseSession
  }
}
```

LANGUAGE: typescript
CODE:
```
// v0.9.0
import { SupabaseClient, Session, User } from '@supabase/supabase-js'
import { Database } from './DatabaseDefinitions'

declare global {
  namespace App {
    interface Locals {
      supabase: SupabaseClient<Database>
      safeGetSession(): Promise<{ session: Session | null; user: User | null }>
    }
    interface PageData {
      session: Session | null
      user: User | null
    }
  }
}
```

----------------------------------------

TITLE: React Component Organization Example Structure
DESCRIPTION: An example showing the recommended folder structure for organizing components, with components grouped into folders with supporting files when appropriate.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/studio/components/README.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
components/ui
- SampleComponentA
  - SampleComponentA.tsx
  - SampleComponentA.constants.ts
  - SampleComponentA.utils.ts
  - SampleComponentA.types.ts
  - index.ts
- SampleComponentB.tsx
```

----------------------------------------

TITLE: Creating SemVer to Text Conversion Function in SQL
DESCRIPTION: Implements a function 'semver_to_text' to convert the 'semver' type to a human-readable string format.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-17-type-constraints-in-65-lines-of-sql.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create or replace function semver_to_text(semver)
    returns text
    immutable
    language sql
as $$
    select
        format('%s.%s.%s', $1.major, $1.minor, $1.patch)
        || case
            when $1.pre_release is null then ''
            else format('-%s', array_to_string($1.pre_release, '.'))
        end
        || case
            when $1.build_metadata is null then ''
            else format('+%s', array_to_string($1.build_metadata, '.'))
        end
$$;
```

----------------------------------------

TITLE: Executing High-Cost Query and Encountering Limit (SQL)
DESCRIPTION: Executes the high-cost query (`select * from book;`) after the `plan_filter.statement_cost_limit` has been set to 50, demonstrating that the query is blocked by the extension because its estimated cost exceeds the configured limit.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_plan_filter.mdx#_snippet_3

LANGUAGE: SQL
CODE:
```
select * from book;

ERROR:  plan cost limit exceeded
HINT:  The plan for your query shows that it would probably have an excessive run time. This may be due to a logic error in the SQL, or it maybe just a very costly query. Rewrite your query or increase the configuration parameter "plan_filter.statement_cost_limit".
-- FAILURE
```

----------------------------------------

TITLE: Next.js Server Sentry Configuration with Supabase
DESCRIPTION: Configuration for Sentry in a Next.js application's server environment. Sets up Supabase integration with Node-specific fetch handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/sentry-monitoring.mdx#2025-04-21_snippet_7

LANGUAGE: ts
CODE:
```
import * as Sentry from '@sentry/nextjs'
import { SupabaseClient } from '@supabase/supabase-js'
import { supabaseIntegration } from '@supabase/sentry-js-integration'

Sentry.init({
  dsn: SENTRY_DSN,
  integrations: [
    supabaseIntegration(SupabaseClient, Sentry, {
      tracing: true,
      breadcrumbs: true,
      errors: true,
    }),
    Sentry.nativeNodeFetchIntegration({
      breadcrumbs: true,
      ignoreOutgoingRequests: (url) => {
        return url.startsWith(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest`)
      },
    }),
  ],
  // Adjust this value in production, or use tracesSampler for greater control
  tracesSampleRate: 1,

  // Setting this option to true will print useful information to the console while you're setting up Sentry.
  debug: true,
})
```

----------------------------------------

TITLE: Using the FilterBar with AI
DESCRIPTION: This example demonstrates how to enable AI-powered filtering by providing the `aiApiUrl` prop to the `FilterBar` component.  The `aiApiUrl` prop specifies the API endpoint that will handle natural language queries and return structured filters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/fragments/filter-bar.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
export function FilterDemoWithAI() {
  const [filters, setFilters] = useState<FilterGroup>(initialFilters)

  return (
    <FilterBar
      filterProperties={filterProperties}
      filters={filters}
      onFilterChange={setFilters}
      aiApiUrl="/api/filter-ai" // Enable AI filtering
    />
  )
}
```

----------------------------------------

TITLE: Add Department Column to Employees (SQL)
DESCRIPTION: This SQL code adds a `department` column to the existing `employees` table, setting the default value to 'Hooli'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_4

LANGUAGE: sql
CODE:
```
alter table if exists public.employees
add department text default 'Hooli';
```

----------------------------------------

TITLE: Generate Angular Auth Guard Command
DESCRIPTION: CLI command to generate a new auth guard in Angular project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_18

LANGUAGE: bash
CODE:
```
ng generate guard guards/auth --implements CanActivate
```

----------------------------------------

TITLE: PGroonga Full-Text Search with Multiple Words (OR)
DESCRIPTION: SQL command demonstrating a full-text search for multiple words using PGroonga, where any of the specified words can be present in the result.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
select * from memos where content &@~ 'postgres OR pgroonga';
```

----------------------------------------

TITLE: Checking vacuum statistics with Supabase CLI
DESCRIPTION: This command uses the Supabase CLI to retrieve information about vacuum statistics, showing when tables were last vacuumed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-26-postgres-bloat.mdx#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
$ supabase inspect db vacuum-stats
```

----------------------------------------

TITLE: Testing Webhook with Postman Echo API
DESCRIPTION: This SQL query sends a POST request to the Postman Echo API using pg_net to test if requests are being properly formatted and transmitted.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/webhook-debugging-guide-M8sk47.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
select
net.http_post(
url := 'https://postman-echo.com/post',
body := '{"key1": "value", "key2": 5}'::jsonb
) as request_id;
```

----------------------------------------

TITLE: Installing and Using the olirice-asciiplot Package with dbdev in PostgreSQL
DESCRIPTION: Demonstrates how to install the olirice-asciiplot package using dbdev and create an ASCII scatterplot. The example shows loading the package from the registry, enabling it as an extension, and using the scatter function to generate a visualization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-14-dbdev.mdx#2025-04-22_snippet_0

LANGUAGE: sql
CODE:
```
-- Load the package from the package index
select
  dbdev.install ('olirice-asciiplot');

-- Enable the extension
create extension "olirice-asciiplot" version '0.2.1';
```

----------------------------------------

TITLE: Implementing Audio Element with ElevenLabs Text-to-Speech API
DESCRIPTION: HTML code for an audio element that uses the deployed Supabase Function as its source to generate speech from text using ElevenLabs API.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/elevenlabs-text-to-speech/README.md#2025-04-21_snippet_8

LANGUAGE: html
CODE:
```
<audio
  src="https://${SUPABASE_PROJECT_REF}.supabase.co/functions/v1/elevenlabs-text-to-speech?text=Hello%2C%20world!&voiceId=JBFqnCBsd6RMkjVDRZzb"
  controls
/>
```

----------------------------------------

TITLE: Supabase Config with Import Map
DESCRIPTION: Configuration in config.toml for specifying import map location.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/dependencies.mdx#2025-04-21_snippet_6

LANGUAGE: toml
CODE:
```
[functions.my-function]
import_map = "./supabase/functions/my-function/import_map.json"
```

----------------------------------------

TITLE: Configuring KotlinX Serialization Plugin in Kotlin Build File
DESCRIPTION: This snippet shows how to add the KotlinX Serialization plugin to a Kotlin project using Gradle with the Kotlin DSL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_4

LANGUAGE: kotlin
CODE:
```
plugins {
    kotlin("plugin.serialization") version "KOTLIN_VERSION"
}
```

----------------------------------------

TITLE: Terminating Database Connections in PostgreSQL
DESCRIPTION: SQL query to terminate a specific database connection using its process ID (pid). Used when needing to forcefully close problematic connections.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/monitor-supavisor-postgres-connections.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select pg_terminate_backend(pid)
from pg_stat_activity
where pid = <connection_id>;
```

----------------------------------------

TITLE: Updating Supabase Flutter Dependency in pubspec.yaml
DESCRIPTION: Updates the supabase_flutter dependency version to 2.0.0 or higher in the project's pubspec.yaml file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
supabase_flutter: ^2.0.0
```

----------------------------------------

TITLE: Generating Random API Requests with Autocannon in JavaScript
DESCRIPTION: Script that generates randomized API requests for benchmarking post view tracking. Distributes requests across three operations: viewing posts (30%), getting view counts (60%), and retrieving viewer lists (10%). Uses environment variables for configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-07-18-seen-by-in-postgresql.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const process = require('process')

const POST_COUNT = process.env.TEST_POST_COUNT
  ? parseInt(process.env.TEST_POST_COUNT, 10)
  : undefined
const USER_COUNT = process.env.TEST_USER_COUNT
  ? parseInt(process.env.TEST_USER_COUNT, 10)
  : undefined

/**
 * Request setup function for use with autocannon
 *
 * @param {Request} request
 * @returns {Request}
 */
function setupRequest(request) {
  // ENsure we have counts to go off of
  if (!POST_COUNT || !USER_COUNT) {
    throw new Error('Cannot setup request without valid post/user count!')
  }

  // Pick a random post to do an operation on
  const postId = Math.floor(Math.random() * POST_COUNT)

  // Choose pseudo-randomly whether to register a seen by or read seenby status
  const operationChoice = Math.floor(Math.random() * 10)
  if (operationChoice < 1) {
    // 10% of the time, get *all* the users
    request.method = 'GET'
    request.path = `/posts/${postId}/seen-by/users`
  } else if (operationChoice < 7) {
    // 60% of the time, get the count of seenby on a post
    request.method = 'GET'
    request.path = `/posts/${postId}/seen-by/count`
  } else {
    // 30% of the time, add a new seen-by entry
    const userId = Math.floor(Math.random() * USER_COUNT)

    // Most of the time we'll be *setting* seen-by
    // And we'll get the count (so we can show it) later as well
    request.method = 'POST'
    request.path = `/posts/${postId}/seen-by/${userId}`
  }

  return request
}

module.exports = setupRequest
```

----------------------------------------

TITLE: Configuring Session Logging in PGAudit
DESCRIPTION: SQL commands to configure and check PGAudit logging settings within a database session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgaudit.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- returns 'none'
show pgaudit.log;

-- log CREATE, ALTER, and DROP events
set pgaudit.log = 'ddl';

-- log all CREATE, ALTER, DROP, and SELECT events
set pgaudit.log = 'read, ddl';

-- log nothing
set pgaudit.log = 'none';
```

----------------------------------------

TITLE: Initializing Supabase Client with Auth0 in Flutter
DESCRIPTION: This Dart code snippet for Flutter initializes a Supabase client integrated with Auth0. Required libraries include 'auth0_flutter', 'flutter', and 'supabase_flutter'. Auth0's credentials manager is used to acquire an access token asynchronously.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/auth0.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
import 'package:auth0_flutter/auth0_flutter.dart';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> main() async {
  final auth0 = Auth0('AUTH0_DOMAIN', 'AUTH0_CLIENT_ID');
  await Supabase.initialize(
    url: 'https://<supabase-project>.supabase.co',
    anonKey: 'SUPABASE_ANON_KEY',
    accessToken: () async {
      final credentials = await auth0.credentialsManager.credentials();
      return credentials.accessToken;
    },
  );
  runApp(const MyApp());
}
```

----------------------------------------

TITLE: Initializing Supabase Client with Auth0 in Swift
DESCRIPTION: This Swift snippet sets up the Supabase client with Auth0 integration for iOS. It uses 'Auth0' and 'Supabase' libraries, managing credentials with Auth0's credentials manager to retrieve the id token as an access token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/auth0.mdx#2025-04-21_snippet_1

LANGUAGE: swift
CODE:
```
import Auth0
import Supabase

extension CredentialsManager {
  static let shared = Auth0.CredentialsManager(authentication: Auth0.authentication())
}

let supabase = SupabaseClient(
  supabaseURL: URL(string: "https://<supabase-project>.supabase.co")!,
  supabaseKey: "SUPABASE_ANON_KEY",
  options: SupabaseClientOptions(
    auth: SupabaseClientOptions.AuthOptions(
      accessToken: {
        try await CredentialsManager.shared.credentials().idToken
      }
    )
  )
)
```

----------------------------------------

TITLE: Case-Insensitive Filtering with Regular Expressions
DESCRIPTION: Using the (?i) operator to perform case-insensitive matching in regular expressions. This pattern will match 'connection' regardless of capitalization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- find all event_messages with the word "connection"
regexp_contains(event_message, '(?i)COnnecTion')
```

----------------------------------------

TITLE: Enabling and Disabling plv8 Extension in PostgreSQL
DESCRIPTION: SQL commands to enable or disable the plv8 extension in PostgreSQL. Creating the extension enables JavaScript functionality, while dropping it removes the capability.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/plv8.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Example: enable the "plv8" extension
create extension plv8;

-- Example: disable the "plv8" extension
drop extension if exists plv8;
```

----------------------------------------

TITLE: Logging in to Supabase CLI
DESCRIPTION: Logs in to the Supabase CLI using a Personal Access Token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx supabase login
```

----------------------------------------

TITLE: Enhanced Authentication Methods in Dart
DESCRIPTION: Shows the new, more descriptive authentication method names for password and OAuth-based authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-21-supabase-flutter-sdk-v1-released.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
await supabase.auth.signInWithPassword(email: email, password: password);

await supabase.auth.signInWithOAuth(Provider.github)
```

----------------------------------------

TITLE: Querying Supabase Auth Users Table - SQL
DESCRIPTION: Run this SQL query in the Supabase SQL Editor to view the contents of the `auth.users` table. This table is where Supabase stores user information and will be empty initially after creating a new project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/nextjs.mdx#_snippet_0

LANGUAGE: SQL
CODE:
```
select * from auth.users;
```

----------------------------------------

TITLE: Inserting Documents into FerretDB Collection
DESCRIPTION: MongoDB commands to insert multiple player documents into a collection using FerretDB
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-31-nosql-mongodb-compatibility-with-ferretdb-and-flydotio.mdx#2025-04-21_snippet_3

LANGUAGE: json5
CODE:
```
db.players.insertMany([
   {
       futbin_id: 3,
       player_name: "Giggs",
       player_extended_name: "Ryan Giggs",
       quality: "Gold - Rare",
       overall: 92,
       nationality: "Wales",
       position: "LM",
       pace: 90,
       dribbling: 91,
       shooting: 80,
       passing: 90,
       defending: 44,
       physicality: 67
   },
   {
       futbin_id: 4,
       player_name: "Scholes",
       player_extended_name: "Paul Scholes",
       quality: "Gold - Rare",
       overall: 91,
       nationality: "England",
       position: "CM",
       pace: 72,
       dribbling: 80,
       shooting: 87,
       passing: 91,
       defending: 64,
       physicality: 82,
       base_id: 246
   }
]);
```

----------------------------------------

TITLE: Setting Cost Limit and Executing Low-Cost Query (SQL)
DESCRIPTION: Sets the `plan_filter.statement_cost_limit` to 50, a value between the estimated costs of the previous queries, and then executes the low-cost query (`select * from book where id = 1;`) to demonstrate that it successfully runs under the limit.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_plan_filter.mdx#_snippet_2

LANGUAGE: SQL
CODE:
```
set plan_filter.statement_cost_limit = 50; -- between 2.49 and 135.0

select * from book where id = 1;
 id
----
  1
(1 row)
-- SUCCESS
```

----------------------------------------

TITLE: Custom URL Construction with TokenHash
DESCRIPTION: Example of constructing a custom confirmation URL using TokenHash variable.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/customizing-email-templates.mdx#2025-04-21_snippet_3

LANGUAGE: html
CODE:
```
<p>Follow this link to confirm your user:</p>
<p>
  <a href="{{ .SiteURL }}/auth/confirm?token_hash={{ .TokenHash }}&type=email"
    >Confirm your email</a
  >
</p>
```

----------------------------------------

TITLE: Displaying Selected Row Count
DESCRIPTION: Component snippet showing how to display the count of selected rows using the table's filtered row model.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_16

LANGUAGE: tsx
CODE:
```
<div className="flex-1 text-sm text-muted-foreground">
  {table.getFilteredSelectedRowModel().rows.length} of {table.getFilteredRowModel().rows.length}{' '}
  row(s) selected.
</div>
```

----------------------------------------

TITLE: Modifying pg_net Configuration Settings
DESCRIPTION: Example of altering pg_net configuration settings to change the time-to-live (TTL) for responses and the batch size, followed by restarting the worker to apply changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_15

LANGUAGE: sql
CODE:
```
alter role "postgres" set pg_net.ttl to '24 hours';
alter role "postgres" set pg_net.batch_size to 500;
```

----------------------------------------

TITLE: Refreshing Materialized View in PostgreSQL
DESCRIPTION: Shows how to refresh a materialized view to update its stored data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
refresh materialized view transcripts;
```

----------------------------------------

TITLE: Disabling Automatic Optimization in Dart
DESCRIPTION: This snippet shows how to disable automatic image optimization and request the original format using the Supabase Dart client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/image-transformations.mdx#2025-04-21_snippet_15

LANGUAGE: dart
CODE:
```
final data = await supabase.storage.from('bucket').download(
      'image.jpeg',
      transform: const TransformOptions(
        width: 200,
        height: 200,
        format: RequestImageFormat.origin,
      ),
    );
```

----------------------------------------

TITLE: Type Definitions Setup for SvelteKit Auth - v0.7.x and v0.8.0
DESCRIPTION: TypeScript type definitions for Supabase integration with SvelteKit, showing both v0.7.x and v0.8.0 approaches.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_25

LANGUAGE: typescript
CODE:
```
/// <reference types="@sveltejs/kit" />

declare namespace App {
  interface Locals {
    session: import('@supabase/auth-helpers-sveltekit').SupabaseSession
  }

  interface PageData {
    session: import('@supabase/auth-helpers-sveltekit').SupabaseSession
  }

  // interface Error {}
  // interface Platform {}
}
```

LANGUAGE: typescript
CODE:
```
/// <reference types="@sveltejs/kit" />

declare namespace App {
  interface Supabase {
    Database: import('./DatabaseDefinitions').Database
    SchemaName: 'public'
  }

  // interface Locals {}
  interface PageData {
    session: import('@supabase/auth-helpers-sveltekit').SupabaseSession
  }
  // interface Error {}
  // interface Platform {}
}
```

----------------------------------------

TITLE: SQL Statement Processing Example
DESCRIPTION: Example SQL statements showing how changes are processed and statement ranges are updated in the IDE.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
select first from test;
select seond from test; -- a typo we want to fix
select third from test;
```

----------------------------------------

TITLE: Basic Usage of Resizable Components in React
DESCRIPTION: Example of basic usage of Resizable components to create a horizontal resizable panel group.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/resizable.mdx#2025-04-21_snippet_3

LANGUAGE: tsx
CODE:
```
<ResizablePanelGroup direction="horizontal">
  <ResizablePanel>One</ResizablePanel>
  <ResizableHandle />
  <ResizablePanel>Two</ResizablePanel>
</ResizablePanelGroup>
```

----------------------------------------

TITLE: Exporting Environment Variables for Postgres Integration
DESCRIPTION: Bash commands to export required environment variables for integrating Postgres with the ChatGPT Retrieval Plugin.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/building-chatgpt-plugins.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
export OPENAI_API_KEY=<open_ai_api_key>
export DATASTORE=postgres
export PG_HOST=<postgres_host_url>
export PG_PASSWORD=<postgres_password>
```

----------------------------------------

TITLE: Horizontal Scrolling Navigation Menu
DESCRIPTION: Implementation of a horizontally scrollable navigation menu with viewport positioning.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/navigation-menu.mdx#2025-04-21_snippet_5

LANGUAGE: tsx
CODE:
```
<NavigationMenu renderViewport={false}>
  <ScrollArea>
    <NavigationMenuList>
      <NavigationMenuItem>
        <NavigationMenuTrigger>Item One</NavigationMenuTrigger>
        <NavigationMenuContent>
          <NavigationMenuLink>Link</NavigationMenuLink>
        </NavigationMenuContent>
      </NavigationMenuItem>
    </NavigationMenuList>
    <ScrollBar />
  </ScrollArea>
  <NavigationMenuViewport containerProps={{ className: 'w-full' }} />
</NavigationMenu>
```

----------------------------------------

TITLE: Supavisor Transaction Mode Connection String
DESCRIPTION: Example of a Supavisor connection string in transaction mode using port 6543. Always uses IPv4 address.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ipv4-address.mdx#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
postgresql://postgres.ajrbwkcuthywddfihrmflo:[YOUR-PASSWORD]@aws-0-us-east-1.pooler.supabase.com:6543/postgres
```

----------------------------------------

TITLE: Querying FDW Usage Statistics
DESCRIPTION: Shows how to query the wrappers_fdw_stats table to get usage statistics for Foreign Data Wrappers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-12-14-supabase-wrappers-v02.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
select *
from extensions.wrappers_fdw_stats;
```

----------------------------------------

TITLE: Python Random ID Generation (Unsafe)
DESCRIPTION: Example of generating random IDs using Python's random module (not recommended for production)
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_5

LANGUAGE: python
CODE:
```
from random import randrange
from models import User
MAX_RANDOM_USER_ID = 1_000_000_000
def create_user():
    """
    Add new user to the database
    """
    user_id = randrange(1, MAX_RANDOM_USER_ID)
    user = User(id=user_id, email="new@example.com", name="new user")
    db.save(user)
```

----------------------------------------

TITLE: Setting Up MainActivity with Navigation in Jetpack Compose
DESCRIPTION: A MainActivity implementation that sets up navigation between different screens in a Jetpack Compose application. It uses NavHost to define navigation routes for product listing, authentication, signup, and product details screens with Hilt for dependency injection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_27

LANGUAGE: kotlin
CODE:
```
@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    @Inject
    lateinit var supabaseClient: SupabaseClient

    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            ManageProductsTheme {
                // A surface container using the 'background' color from the theme
                val navController = rememberNavController()
                val currentBackStack by navController.currentBackStackEntryAsState()
                val currentDestination = currentBackStack?.destination
                Scaffold { innerPadding ->
                    NavHost(
                        navController,
                        startDestination = ProductListDestination.route,
                        Modifier.padding(innerPadding)
                    ) {
                        composable(ProductListDestination.route) {
                            ProductListScreen(
                                navController = navController
                            )
                        }

                        composable(AuthenticationDestination.route) {
                            SignInScreen(
                                navController = navController
                            )
                        }

                        composable(SignUpDestination.route) {
                            SignUpScreen(
                                navController = navController
                            )
                        }

                        composable(AddProductDestination.route) {
                            AddProductScreen(
                                navController = navController
                            )
                        }

                        composable(
                            route = "${ProductDetailsDestination.route}/{${ProductDetailsDestination.productId}}",
                            arguments = ProductDetailsDestination.arguments
                        ) { navBackStackEntry ->
                            val productId =
                                navBackStackEntry.arguments?.getString(ProductDetailsDestination.productId)
                            ProductDetailsScreen(
                                productId = productId,
                                navController = navController,
                            )
                        }
                    }
                }
            }
        }
    }
}
```

----------------------------------------

TITLE: Starting the Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers. You can choose npm, yarn, pnpm, or bun depending on your preference.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: HTTP GET Request Function Signature in pg_net
DESCRIPTION: Function signature for net.http_get which creates an asynchronous HTTP GET request. This is a SECURITY DEFINER function that returns a request ID reference.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
net.http_get(
    -- url for the request
    url text,
    -- key/value pairs to be url encoded and appended to the `url`
    params jsonb default '{}'::jsonb,
    -- key/values to be included in request headers
    headers jsonb default '{}'::jsonb,
    -- the maximum number of milliseconds the request may take before being canceled
    timeout_milliseconds int default 2000
)
    -- request_id reference
    returns bigint

    strict
    volatile
    parallel safe
    language plpgsql
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library as a dependency for the Ionic Angular project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-angular.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Implementing Supabase data fetching in SolidJS
DESCRIPTION: Creates a Supabase client using project credentials and implements a function to fetch instrument data from the database. The component uses SolidJS's createResource to handle the async data fetching and renders a list of instruments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/solidjs.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
import { createClient } from "@supabase/supabase-js";
import { createResource, For } from "solid-js";

const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>');

async function getInstruments() {
  const { data } = await supabase.from("instruments").select();
  return data;
}

function App() {
  const [instruments] = createResource(getInstruments);

  return (
    <ul>
      <For each={instruments()}>{(instrument) => <li>{instrument.name}</li>}</For>
    </ul>
  );
}

export default App;
```

----------------------------------------

TITLE: Inspecting Echo API Response Content in pg_net
DESCRIPTION: Query to inspect the response content from the Postman Echo API to verify that the correct request body was sent in a previous HTTP request.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_11

LANGUAGE: sql
CODE:
```
select
    "content"
from net._http_response
where id = <request_id>
-- returns information about the request
-- including the body sent: {"key": "value", "key": 5}
```

----------------------------------------

TITLE: Setting up environment variables for Resend with Supabase
DESCRIPTION: Command to copy the example environment file to create a local .env file for storing the Resend API key.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/send-email-resend/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
cp .env.example .env
```

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Setting up required Supabase environment variables for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key
```

----------------------------------------

TITLE: Importing Turnstile React Component
DESCRIPTION: Import statement for the Cloudflare Turnstile React component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-captcha.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
import { Turnstile } from '@marsidev/react-turnstile'
```

----------------------------------------

TITLE: Generating Avatar Component with RedwoodJS CLI
DESCRIPTION: Terminal command to generate a new Avatar component using the RedwoodJS generator CLI, which creates component, test, and story files.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-redwoodjs.mdx#2025-04-21_snippet_13

LANGUAGE: bash
CODE:
```
yarn rw g component avatar
  ✔ Generating component files...
    ✔ Successfully wrote file `./web/src/components/Avatar/Avatar.test.js`
    ✔ Successfully wrote file `./web/src/components/Avatar/Avatar.stories.js`
    ✔ Successfully wrote file `./web/src/components/Avatar/Avatar.js`
```

----------------------------------------

TITLE: Supabase Auth Weak Password Error Code
DESCRIPTION: Error code returned when a user attempts to sign up or change password without meeting password strength requirements. The AuthWeakPasswordError class provides detailed information about password criteria that need to be met.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/auth_error_codes_table.mdx#2025-04-21_snippet_2

LANGUAGE: plaintext
CODE:
```
weak_password
```

----------------------------------------

TITLE: Importing to Supabase Using psql
DESCRIPTION: This snippet illustrates the command to import the exported Render database SQL file into a Supabase Postgres database. It uses the psql tool and requires the Supabase connection string to be provided.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/render.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
psql -d "$YOUR_CONNECTION_STRING" -f render_dump.sql
```

----------------------------------------

TITLE: Retrieving Ticket Data from Postgres View (JavaScript)
DESCRIPTION: This code snippet uses supabase-js to fetch ticket data from the lw7_tickets_golden view, including the golden ticket status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-07-designing-with-ai-midjourney.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
// Get ticket data
const { data, error } = await supabaseAdminClient
  .from('lw7_tickets_golden')
  .select('name, ticketNumber, golden, bg_image_id')
  .eq('username', username)
  .maybeSingle()
if (error) console.log(error.message)
if (!data) throw new Error('user not found')
const { name, ticketNumber, bg_image_id } = data
const golden = data?.golden ?? false
```

----------------------------------------

TITLE: Explaining PGroonga Index Usage in PostgreSQL
DESCRIPTION: SQL command to explain the query plan for a SELECT statement using LIKE with the PGroonga index, demonstrating how the index is used for full-text search.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgroonga.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
explain select * from memos where content like '%engine%';
```

----------------------------------------

TITLE: Initializing Keycloak OAuth in Flutter
DESCRIPTION: Sign in with Keycloak provider in Flutter using Supabase auth method, with optional redirect handling and launch mode configuration
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
Future<void> signInWithKeycloak() async {
  await supabase.auth.signInWithOAuth(
    OAuthProvider.keycloak,
    redirectTo: kIsWeb ? null : 'my.scheme://my-host',
    authScreenLaunchMode:
        kIsWeb ? LaunchMode.platformDefault : LaunchMode.externalApplication,
  );
}
```

----------------------------------------

TITLE: Querying HTTP Responses in pg_net
DESCRIPTION: Example query to retrieve all HTTP responses stored in the net._http_response table, which can be used to analyze the results of asynchronous requests.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_net.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
select * from net._http_response;
```

----------------------------------------

TITLE: Listing Cron Jobs in Postgres
DESCRIPTION: This SQL query retrieves a list of all scheduled cron jobs from the cron.job table in the Postgres database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-05-postgres-as-a-cron-server.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
select * from cron.job;
```

----------------------------------------

TITLE: Column Visibility Toggle Implementation
DESCRIPTION: Implementation of column visibility controls using the DataTableViewOptions component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/data-table.mdx#2025-04-21_snippet_19

LANGUAGE: tsx
CODE:
```
<DataTableViewOptions table={table} />
```

----------------------------------------

TITLE: Registering Discord Slash Command using cURL
DESCRIPTION: This bash script uses cURL to register a 'hello' slash command with Discord's API. It requires the bot token and client ID from the Discord Developer Portal.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/discord-bot/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
BOT_TOKEN='replace_me_with_bot_token'
CLIENT_ID='replace_me_with_client_id'
curl -X POST \
-H 'Content-Type: application/json' \
-H "Authorization: Bot $BOT_TOKEN" \
-d '{"name":"hello","description":"Greet a person","options":[{"name":"name","description":"The name of the person","type":3,"required":true}]}' \
"https://discord.com/api/v8/applications/$CLIENT_ID/commands"
```

----------------------------------------

TITLE: Installing Card Component via CLI
DESCRIPTION: Command to install the card component using the shadcn-ui CLI tool
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/card.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn-ui@latest add card
```

----------------------------------------

TITLE: Installing Supabase and UUID Dependencies in Flutter
DESCRIPTION: Command to add Supabase Flutter SDK and UUID package to the project for implementing real-time features and generating unique identifiers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-14-flutter-real-time-multiplayer-game.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
flutter pub add supabase_flutter uuid
```

----------------------------------------

TITLE: Checking SSL enforcement status with Supabase CLI
DESCRIPTION: Command to check whether SSL is currently being enforced on your Supabase project database using the CLI. Requires Supabase CLI version 1.37.0+ and appropriate project permissions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/ssl-enforcement.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase ssl-enforcement --project-ref {ref} get --experimental
```

----------------------------------------

TITLE: Changing Database Timezone in Postgres SQL
DESCRIPTION: This SQL command alters the timezone of the 'postgres' database to 'America/New_York'. It demonstrates how to change the default UTC timezone to a specific location.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/configuration.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
alter database postgres
set timezone to 'America/New_York';
```

----------------------------------------

TITLE: Creating recovery.signal File for PostgreSQL Recovery Mode
DESCRIPTION: Command to create the recovery.signal file, which instructs PostgreSQL to enter recovery mode when it starts up.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_13

LANGUAGE: shell
CODE:
```
$ touch /var/lib/postgresql/12/main/recovery.signal
```

----------------------------------------

TITLE: HTTP Hook Secret Configuration
DESCRIPTION: Environment variable configuration for HTTP hook secrets using the Standard Webhooks specification format.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks.mdx#2025-04-21_snippet_1

LANGUAGE: ini
CODE:
```
SEND_SMS_HOOK_SECRETS=v1,whsec_<base64-secret>
```

----------------------------------------

TITLE: Retrieving File Size Using cURL for Supabase Storage Objects
DESCRIPTION: This bash command uses cURL to fetch the size of a specific file stored in Supabase storage, which is crucial for calculating the total egress when combined with request count.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/bandwidth.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
curl -s -w "%{size_download}\n" -o /dev/null "https://my_project.supabase.co/storage/v1/object/large%20bucket/20230902_200037.gif"
```

----------------------------------------

TITLE: Configuring Drizzle ORM to Disable Prepared Statements
DESCRIPTION: Sets the prepare flag to false when initializing the Drizzle PostgreSQL client to disable prepared statements for Supavisor in transaction mode.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/disabling-prepared-statements-qL8lEL.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
export const client = postgres(connectionString, { prepare: false })
```

----------------------------------------

TITLE: Using Quantifiers in Regular Expressions for Log Filtering
DESCRIPTION: This example demonstrates how to match repeated patterns using quantifiers in regular expressions. It matches any sequence of exactly 3 digits in the event message.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
-- find event_messages that contains any sequence of 3 digits
regexp_contains(event_message, '[0-9]{3}')
```

----------------------------------------

TITLE: Setting Environment Variables for Supabase Datastore in ChatGPT Retrieval Plugin
DESCRIPTION: Bash commands to export the necessary environment variables for using Supabase as the datastore in the ChatGPT Retrieval Plugin.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-25-chatgpt-plugins-support-postgres.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
export OPENAI_API_KEY=<open_ai_api_key>
export DATASTORE=supabase
export SUPABASE_URL=<supabase_url>
export SUPABASE_SERVICE_ROLE_KEY=<supabase_key>
```

----------------------------------------

TITLE: Initializing a SvelteKit Application with npm
DESCRIPTION: Command to create a new SvelteKit project using the SvelteKit Skeleton Project template. This sets up the foundation for a TypeScript-based SvelteKit application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm create svelte@latest supabase-sveltekit
cd supabase-sveltekit
npm install
```

----------------------------------------

TITLE: Basic Textarea Usage
DESCRIPTION: Simple example demonstrating the basic usage of the Textarea component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/textarea.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
<Textarea />
```

----------------------------------------

TITLE: Configuring Cargo.toml for WebAssembly Module
DESCRIPTION: This Cargo.toml file sets up the project configuration for building a WebAssembly module. It specifies the package name, version, edition, and dependencies including wasm-bindgen for JavaScript interoperability.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/wasm.mdx#2025-04-21_snippet_1

LANGUAGE: toml
CODE:
```
[package]
name = "add-wasm"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
wasm-bindgen = "0.2.84"
```

----------------------------------------

TITLE: Parsing SQL Statements with Rust
DESCRIPTION: Example of an ALTER TABLE statement that demonstrates node location within the abstract syntax tree for precise diagnostic reporting.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-03-29-postgres-language-server.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
ALTER TABLE contact
	DROP COLUMN test,
	ALTER COLUMN another DROP NOT NULL;
```

----------------------------------------

TITLE: Adding Moshi Serializer Dependency in Kotlin Build File
DESCRIPTION: This snippet shows how to add the Moshi serializer dependency to a Kotlin project using Gradle with the Kotlin DSL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/kotlin/v1/installing.mdx#2025-04-21_snippet_8

LANGUAGE: kotlin
CODE:
```
implementation("io.github.jan-tennert.supabase:serializer-moshi:VERSION")
```

----------------------------------------

TITLE: PostgreSQL Host Parameter Example
DESCRIPTION: Simple example showing the host parameter used in the pg_dump command for connecting to a Supabase PostgreSQL database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
-h db.host.supabase.co \
```

----------------------------------------

TITLE: Listing Production Secrets
DESCRIPTION: Command to list all secrets set in the remote environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
supabase secrets list
```

----------------------------------------

TITLE: Defining CORS Headers for ChatGPT Plugin in TypeScript
DESCRIPTION: This code defines the CORS headers required for the ChatGPT plugin to work correctly. It sets the necessary headers to allow communication with the ChatGPT interface.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-15-building-chatgpt-plugins-template.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
export const corsHeaders = {
  'Access-Control-Allow-Origin': 'https://chat.openai.com',
  'Access-Control-Allow-Credentials': 'true',
  'Access-Control-Allow-Private-Network': 'true',
  'Access-Control-Allow-Headers': '*',
}
```

----------------------------------------

TITLE: Users table after Firestore migration
DESCRIPTION: This JSON snippet represents the `users` table after the migration.  It contains the 'user' and 'score' fields extracted from the Firestore document. This illustrates the result of flattening the original document, extracting only the user information.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/firestore-data.mdx#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
[{ "user": "mark", "score": 100 }]
```

----------------------------------------

TITLE: Using CurrentUserAvatar Component in React
DESCRIPTION: This code snippet demonstrates how to use the `CurrentUserAvatar` component within a React functional component. It showcases the integration of the avatar into a header layout and illustrates composition in a larger application context.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/current-user-avatar.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { CurrentUserAvatar } from '@/components/current-user-avatar'

const CurrentUserAvatarDemo = () => {
  return (
    <Header className="flex items-center justify-between">
      <h1>Lumon Industries</h1>
      <CurrentUserAvatar />
    </Header>
  )
}

export default CurrentUserAvatarDemo
```

----------------------------------------

TITLE: Deploying Discord Bot Function with Supabase CLI
DESCRIPTION: These Supabase CLI commands deploy the Discord bot function and set the required secret for the Discord public key.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/discord-bot/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions deploy discord-bot --no-verify-jwt
supabase secrets set DISCORD_PUBLIC_KEY=your_public_key
```

----------------------------------------

TITLE: Deploying Upstash Redis Counter Function
DESCRIPTION: Commands to deploy the Redis counter function to Supabase and set up environment secrets from local configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/upstash-redis-counter/README.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
supabase functions deploy upstash-redis-counter --no-verify-jwt
supabase secrets set --env-file supabase/.env.local
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library as a dependency for the Svelte application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Reading Environment Variables in build.gradle
DESCRIPTION: Configures the build script to read Supabase credentials from local.properties and expose them through BuildConfig for use in the app.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-kotlin.mdx#2025-04-21_snippet_1

LANGUAGE: kotlin
CODE:
```
defaultConfig {
   applicationId "com.example.manageproducts"
   minSdkVersion 22
   targetSdkVersion 33
   versionCode 5
   versionName "1.0"
   testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

   // Set value part
   Properties properties = new Properties()
   properties.load(project.rootProject.file("local.properties").newDataInputStream())
   buildConfigField("String", "SUPABASE_ANON_KEY", "\"${properties.getProperty("SUPABASE_ANON_KEY")}\"") 
   buildConfigField("String", "SECRET", "\"${properties.getProperty("SECRET")}\"") 
   buildConfigField("String", "SUPABASE_URL", "\"${properties.getProperty("SUPABASE_URL")}\"") 
}
```

----------------------------------------

TITLE: Edge Function for Uncompressed Log Drain (TypeScript)
DESCRIPTION: TypeScript code for an edge function that receives and logs uncompressed log drain data from Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/log-drains.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'

Deno.serve(async (req) => {
  const data = await req.json()

  console.log(`Received ${data.length} logs, first log:\n ${JSON.stringify(data[0])}`)
  return new Response(JSON.stringify({ message: 'ok' }), {
    headers: { 'Content-Type': 'application/json' },
  })
})
```

----------------------------------------

TITLE: Installing Switch Component via CLI
DESCRIPTION: Command to install the switch component using the shadcn-ui CLI tool.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/design-system/content/docs/components/switch.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn-ui@latest add switch
```

----------------------------------------

TITLE: Integrating Avatar Component into Account Page in React
DESCRIPTION: This snippet shows how to import and use the Avatar component within an existing Account page component. It passes necessary props including the avatar URL, size, and an update function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_7

LANGUAGE: jsx
CODE:
```
// Import the new component
import Avatar from './Avatar'

// ...

return (
  <form onSubmit={updateProfile} className="form-widget">
    {/* Add to the body */}
    <Avatar
      url={avatar_url}
      size={150}
      onUpload={(event, url) => {
        updateProfile(event, url)
      }}
    />
    {/* ... */}
  </form>
)
```

----------------------------------------

TITLE: Starting the Vue Development Server
DESCRIPTION: Launch the Vue development server to run the application locally, making it accessible at http://localhost:5173.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/vue.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Configuring Supabase Client
DESCRIPTION: TypeScript setup for Supabase client with React Native configuration including auth persistence and session management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { AppState } from 'react-native'
import 'react-native-url-polyfill/auto'
import AsyncStorage from '@react-native-async-storage/async-storage'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL
const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
})

AppState.addEventListener('change', (state) => {
  if (state === 'active') {
    supabase.auth.startAutoRefresh()
  } else {
    supabase.auth.stopAutoRefresh()
  }
})
```

----------------------------------------

TITLE: Filtering Postgres Logs by Query Content in SQL
DESCRIPTION: SQL WHERE clause using regex to find specific queries in the logs, with a case-insensitive search for queries targeting a specific table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-interpret-and-explore-the-postgres-logs-OuCIOj.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- find queries executed by the Dashboard
...query
where
  regexp_contains(parsed.query, '(?i)select . <some table>')
```

----------------------------------------

TITLE: Implementing Keyboard Event Handler
DESCRIPTION: HostListener implementation for handling ESC key press to close edit fields across the board component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-24-building-a-realtime-trello-board-with-supabase-and-angular.mdx#2025-04-21_snippet_26

LANGUAGE: typescript
CODE:
```
@HostListener('document:keydown', ['$event']) onKeydownHandler(
    event: KeyboardEvent
  ) {
    if (event.keyCode === 27) {
      // Close whatever needs to be closed!
      this.titleChanged = false;

      Object.keys(this.editCard).map((item) => {
        this.editCard[item] = false;
        return item;
      });

      Object.keys(this.editTitle).map((item) => {
        this.editTitle[item] = false;
        return item;
      });
    }
  }
```

----------------------------------------

TITLE: Combining Multiple Conditions in SQL Log Queries
DESCRIPTION: This query shows how to use SQL logical operators (AND, OR, NOT) in combination with regexp_contains for complex filtering. It finds logs containing both 'connection' and 'host', or logs that don't contain 'received'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/telemetry/advanced-log-filtering.mdx#2025-04-21_snippet_10

LANGUAGE: sql
CODE:
```
select
  cast(timestamp as datetime) as timestamp,
  event_message,
  metadata
from postgres_logs
where
  (regexp_contains(event_message, 'connection') and regexp_contains(event_message, 'host'))
  or not regexp_contains(event_message, 'received');
```

----------------------------------------

TITLE: Recreating pg_net Extension in Supabase SQL
DESCRIPTION: This SQL command drops and recreates the pg_net extension in the extensions schema, which can potentially resolve permission issues with the http_request_queue table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/42501--permission-denied-for-table-httprequestqueue-KnozmQ.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
drop extension pg_net; create extension pg_net schema extensions;
```

----------------------------------------

TITLE: Creating Enum Type for Sensor Readings in PostgreSQL
DESCRIPTION: Creates an enum data type to capture low, medium, and high sensor reading levels. This is part of the setup for demonstrating the new multi-range functionality in PostgreSQL 14.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-11-28-whats-new-in-postgres-14.mdx#2025-04-22_snippet_1

LANGUAGE: sql
CODE:
```
create type valid_levels as enum (
  'low', 'medium', 'high'
);
```

----------------------------------------

TITLE: Configuring Supabase MCP Server for Windows
DESCRIPTION: JSON configuration for running the Supabase MCP server on Windows. It uses 'cmd' as the command with '/c' flag to execute npx, and includes arguments for installing and running the latest version of the server with a personal access token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/mcp_supabase_config.mdx#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "supabase": {
      "command": "cmd",
      "args": [
        "/c",
        "npx",
        "-y",
        "@supabase/mcp-server-supabase@latest",
        "--access-token",
        "<personal-access-token>"
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring Supabase with AWS Cognito in Kotlin
DESCRIPTION: This Kotlin snippet demonstrates the Supabase client setup leveraging AWS Cognito through Amplify in Kotlin applications. It shows how to implement an access token fetch function using 'suspendCoroutine'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/third-party/aws-cognito.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
import com.amplifyframework.auth.AuthSession
import com.amplifyframework.auth.cognito.AWSCognitoAuthSession
import com.amplifyframework.core.Amplify

val supabase = createSupabaseClient(
    "https://<supabase-project>.supabase.co",
    "SUPABASE_ANON_KEY"
) {
    accessToken = {
        getAccessToken()
    }
}

suspend fun getAccessToken(): String? {
    return suspendCoroutine {
        Amplify.Auth.fetchAuthSession(
            { result: AuthSession ->
                val cognitoAuthSession = result as AWSCognitoAuthSession
                it.resume(cognitoAuthSession.userPoolTokensResult.value?.accessToken)
            },
            { _ ->
                // Handle error
            })
    }
}
```

----------------------------------------

TITLE: Creating Databases in PostgreSQL
DESCRIPTION: SQL commands to create new databases within a PostgreSQL instance. This demonstrates that PostgreSQL is a Relational Database Management System (RDBMS) that can manage multiple databases.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/supavisor-faq-YyP5tI.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE DATABASE postgres;
CREATE DATABASE another_database;
```

----------------------------------------

TITLE: Deploying Supabase Edge Function
DESCRIPTION: Command to deploy a Supabase edge function with JWT verification disabled for the specified function
SOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/lw13-meetup-og/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase functions deploy lw13-meetups-ogs --no-verify-jwt
```

----------------------------------------

TITLE: Creating Embeddings Table with pgvector Extension in SQL
DESCRIPTION: SQL migration that creates a vector extension, defines an embeddings table with a vector column, enables row level security, and adds an HNSW index for efficient vector similarity searches.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/semantic-search.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create extension if not exists vector with schema extensions;

create table embeddings (
  id bigint primary key generated always as identity,
  content text not null,
  embedding vector (384)
);
alter table embeddings enable row level security;

create index on embeddings using hnsw (embedding vector_ip_ops);
```

----------------------------------------

TITLE: Inserting Vector Records in Python
DESCRIPTION: Demonstrates how to insert vector records into a collection using the upsert method. Each record includes an identifier, the vector values, and optional metadata stored as a dictionary.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-31-vecs.mdx#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# add records to the collection
docs.upsert(
    vectors=[
        (
          "vec0",           # the records user defined identifier
          [0.1, 0.2, 0.3],  # the vector. A list or np.array
          {"year": 1973}    # associated metadata
        )
    ]
)
```

----------------------------------------

TITLE: Configuring Supabase client in React
DESCRIPTION: JavaScript code snippet to create and configure a Supabase client in a React application using environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-31-supabase-cli.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { createClient } from '@supabase/supabase-js'
const SUPABASE_URL = 'http://localhost:8000'
const SUPABASE_ANON_KEY =
  'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTYwMzk2ODgzNCwiZXhwIjoyNTUwNjUzNjM0LCJyb2xlIjoiYW5vbiJ9.36fUebxgx1mcBo4s19v0SzqmzunP--hm_hep0uLX0ew'
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)
```

----------------------------------------

TITLE: Configuring Android URL Scheme
DESCRIPTION: XML configurations for custom URL scheme in Android, including string resource and manifest intent filter.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_28

LANGUAGE: xml
CODE:
```
<string name="custom_url_scheme">supachat</string>
```

LANGUAGE: xml
CODE:
```
<intent-filter android:autoVerify="true">
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="@string/custom_url_scheme" />
</intent-filter>
```