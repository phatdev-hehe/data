TITLE: Preventing XSS with Proper HTML Attribute Quoting in Jinja Templates
DESCRIPTION: Demonstrates the correct way to use Jinja2 expressions in HTML attributes to prevent XSS attacks through attribute injection.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_0

LANGUAGE: html
CODE:
```
<input value="{{ value }}">
```

----------------------------------------

TITLE: Creating Authentication Decorator in Flask
DESCRIPTION: Implements a login_required decorator to protect views that require authentication.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
def login_required(view):
    @functools.wraps(view)
    def wrapped_view(**kwargs):
        if g.user is None:
            return redirect(url_for('auth.login'))

        return view(**kwargs)

    return wrapped_view
```

----------------------------------------

TITLE: Handling Form Data in Flask
DESCRIPTION: Example of handling form data in a login route that accepts both GET and POST methods. Shows how to access form data from request.form and handle different HTTP methods appropriately.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_17

LANGUAGE: python
CODE:
```
@app.route('/login', methods=['POST', 'GET'])
def login():
    error = None
    if request.method == 'POST':
        if valid_login(request.form['username'],
                       request.form['password']):
            return log_the_user_in(request.form['username'])
        else:
            error = 'Invalid username/password'
    # the code below is executed if the request method
    # was GET or the credentials were invalid
    return render_template('login.html', error=error)
```

----------------------------------------

TITLE: Minimal Flask Application
DESCRIPTION: This snippet demonstrates a minimal Flask application. It imports the Flask class, creates an instance of the Flask class, defines a route using the route decorator, and defines a function that returns a string to be displayed in the user's browser. It shows the basic structure of a Flask web application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello_world():
    return "<p>Hello, World!</p>"
```

----------------------------------------

TITLE: Returning JSON API Errors in Flask
DESCRIPTION: This snippet shows how to customize HTTP 404 error responses as JSON for a Flask API. It makes use of Flask's jsonify function to return a descriptive message and status code when resources are not found.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_15

LANGUAGE: python
CODE:
```
from flask import abort, jsonify

@app.errorhandler(404)
def resource_not_found(e):
    return jsonify(error=str(e)), 404

@app.route("/cheese")
def get_one_cheese():
    resource = get_resource()

    if resource is None:
        abort(404, description="Resource not found")

    return jsonify(resource)
```

----------------------------------------

TITLE: Defining a Registration Form with WTForms - Python
DESCRIPTION: This snippet demonstrates how to define a registration form using WTForms in Python. It includes fields for username, email, password, and terms of service acceptance. Dependencies include the WTForms package.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/wtforms.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from wtforms import Form, BooleanField, StringField, PasswordField, validators

class RegistrationForm(Form):
    username = StringField('Username', [validators.Length(min=4, max=25)])
    email = StringField('Email Address', [validators.Length(min=6, max=35)])
    password = PasswordField('New Password', [
        validators.DataRequired(),
        validators.EqualTo('confirm', message='Passwords must match')
    ])
    confirm = PasswordField('Repeat Password')
    accept_tos = BooleanField('I accept the TOS', [validators.DataRequired()])
```

----------------------------------------

TITLE: JSON API Endpoints in Flask
DESCRIPTION: Demonstrates creating JSON API endpoints by returning dictionaries and lists that Flask automatically converts to JSON responses.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_26

LANGUAGE: python
CODE:
```
@app.route("/me")
def me_api():
    user = get_current_user()
    return {
        "username": user.username,
        "theme": user.theme,
        "image": url_for("user_image", filename=user.image),
    }

@app.route("/users")
def users_api():
    users = get_all_users()
    return [user.to_json() for user in users]
```

----------------------------------------

TITLE: Flask HTTP Methods Handling
DESCRIPTION: This snippet demonstrates how to handle different HTTP methods in Flask routes using the `methods` argument of the `@app.route` decorator.  It shows how to define a route that handles both `GET` and `POST` requests, allowing for different logic based on the request method. The `request` object is used to determine the method.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_9

LANGUAGE: python
CODE:
```
from flask import request

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        return do_the_login()
    else:
```

----------------------------------------

TITLE: Handling File Uploads in Flask
DESCRIPTION: Defines a function to validate file extensions and a route to handle file uploads. The endpoint ensures that only files with allowed extensions are uploaded and stores them securely using `secure_filename`. Redirects users after successful upload. A HTML form is provided for users to select files for upload.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#2025-04-20_snippet_1

LANGUAGE: Python
CODE:
```
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        # If the user does not select a file, the browser submits an
        # empty file without a filename.
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            return redirect(url_for('download_file', name=filename))
    return '''
    <!doctype html>
    <title>Upload new File</title>
    <h1>Upload new File</h1>
    <form method=post enctype=multipart/form-data>
      <input type=file name=file>
      <input type=submit value=Upload>
    </form>
    '''
```

----------------------------------------

TITLE: Running Flask Application
DESCRIPTION: This snippet shows how to run a Flask application using the `flask` command.  It uses the `--app` option to specify the application file. The command starts a development server that listens for incoming requests. Use CTRL+C to stop the server.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_1

LANGUAGE: text
CODE:
```
$ flask --app hello run
 * Serving Flask app 'hello'
 * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: XSS Attack Vector Example Through HTML Attribute Injection
DESCRIPTION: Shows a potential XSS attack vector that could be injected if HTML attributes are not properly quoted.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_1

LANGUAGE: html
CODE:
```
onmouseover=alert(document.cookie)
```

----------------------------------------

TITLE: Flask URL Building with url_for
DESCRIPTION: This snippet demonstrates how to use the `url_for` function in Flask to build URLs to specific functions. The `test_request_context` method is used to simulate a request context, enabling the use of `url_for` outside of a request. It also shows how variable parts of the URL and query parameters are handled.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
from flask import url_for

@app.route('/')
def index():
    return 'index'

@app.route('/login')
def login():
    return 'login'

@app.route('/user/<username>')
def profile(username):
    return f'{username}\'s profile'

with app.test_request_context():
    print(url_for('index'))
    print(url_for('login'))
    print(url_for('login', next='/'))
    print(url_for('profile', username='John Doe'))
```

----------------------------------------

TITLE: HTML Escaping in Flask
DESCRIPTION: This snippet shows how to use `markupsafe.escape` to escape user-provided values when returning HTML in Flask. This prevents injection attacks by rendering potentially harmful HTML as text. It's essential for securing Flask applications against malicious input.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
from markupsafe import escape

@app.route("/<name>")
def hello(name):
    return f"Hello, {escape(name)}!"
```

----------------------------------------

TITLE: Secure File Upload with Filename Sanitization
DESCRIPTION: Shows how to securely handle file uploads by sanitizing filenames using Werkzeug's secure_filename utility.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_20

LANGUAGE: python
CODE:
```
from werkzeug.utils import secure_filename

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        file = request.files['the_file']
        file.save(f"/var/www/uploads/{secure_filename(file.filename)}")
    ...
```

----------------------------------------

TITLE: Returning JSON from Flask View (jsonify)
DESCRIPTION: This Python snippet shows how to return a JSON response from a Flask view using the `jsonify` function. This is useful when you need more control over the response object, such as setting headers or status codes.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_11

LANGUAGE: python
CODE:
```
from flask import jsonify

@app.route("/users")
def user_list():
    users = User.query.order_by(User.name).all()
    return jsonify([u.to_json() for u in users])
```

----------------------------------------

TITLE: Rendering Templates in Flask
DESCRIPTION: Example of using Flask's render_template function to render HTML templates with dynamic data. This example demonstrates how to pass variables to templates and handle optional parameters in route definitions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_12

LANGUAGE: python
CODE:
```
from flask import render_template

@app.route('/hello/')
@app.route('/hello/<name>')
def hello(name=None):
    return render_template('hello.html', person=name)
```

----------------------------------------

TITLE: Session Management in Flask
DESCRIPTION: Comprehensive example of session handling in Flask including login, logout, and session access.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_27

LANGUAGE: python
CODE:
```
from flask import session

# Set the secret key to some random bytes. Keep this really secret!
app.secret_key = b'_5#y2L"F4Q8z\n\xec]/'

@app.route('/')
def index():
    if 'username' in session:
        return f'Logged in as {session["username"]}'
    return 'You are not logged in'

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        session['username'] = request.form['username']
        return redirect(url_for('index'))
    return '''
        <form method="post">
            <p><input type=text name=username>
            <p><input type=submit value=Login>
        </form>
    '''

@app.route('/logout')
def logout():
    # remove the username from the session if it's there
    session.pop('username', None)
    return redirect(url_for('index'))
```

----------------------------------------

TITLE: Running a Flask Application from Command Line
DESCRIPTION: This command-line snippet shows how to run a Flask application using the 'flask run' command. It starts a development server that listens on http://127.0.0.1:5000/.
SOURCE: https://github.com/pallets/flask/blob/main/README.md#2025-04-20_snippet_1

LANGUAGE: shell
CODE:
```
$ flask run
  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Initializing SQLite Database in Flask Application
DESCRIPTION: This Python code defines functions to initialize the database using the SQL schema, register a CLI command for database initialization, and register a converter for timestamp values. It uses Flask's current_app and click for CLI integration.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
def init_db():
    db = get_db()

    with current_app.open_resource('schema.sql') as f:
        db.executescript(f.read().decode('utf8'))


@click.command('init-db')
def init_db_command():
    """Clear the existing data and create new tables."""
    init_db()
    click.echo('Initialized the database.')


sqlite3.register_converter(
    "timestamp", lambda v: datetime.fromisoformat(v.decode())
)
```

----------------------------------------

TITLE: Defining SQLite Database Schema for Flask Application
DESCRIPTION: This SQL script defines the schema for the application's database. It creates two tables: 'user' for storing user information and 'post' for storing blog posts. The script includes DROP TABLE statements to ensure clean table creation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#2025-04-20_snippet_1

LANGUAGE: sql
CODE:
```
DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS post;

CREATE TABLE user (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  username TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL
);

CREATE TABLE post (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  author_id INTEGER NOT NULL,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title TEXT NOT NULL,
  body TEXT NOT NULL,
  FOREIGN KEY (author_id) REFERENCES user (id)
);
```

----------------------------------------

TITLE: Creating a Simple Flask Application in Python
DESCRIPTION: This snippet demonstrates how to create a basic Flask application that responds with 'Hello, World!' when accessed at the root URL. It showcases the minimal setup required to get a Flask app running.
SOURCE: https://github.com/pallets/flask/blob/main/README.md#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
# save this as app.py
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello, World!"
```

----------------------------------------

TITLE: Implementing Method Dispatching for APIs using MethodView in Flask
DESCRIPTION: This comprehensive example demonstrates how to use MethodView to create a RESTful API with separate methods for different HTTP verbs, including get, patch, delete, and post operations.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
from flask.views import MethodView

class ItemAPI(MethodView):
    init_every_request = False

    def __init__(self, model):
        self.model = model
        self.validator = generate_validator(model)

    def _get_item(self, id):
        return self.model.query.get_or_404(id)

    def get(self, id):
        item = self._get_item(id)
        return jsonify(item.to_json())

    def patch(self, id):
        item = self._get_item(id)
        errors = self.validator.validate(item, request.json)

        if errors:
            return jsonify(errors), 400

        item.update_from_json(request.json)
        db.session.commit()
        return jsonify(item.to_json())

    def delete(self, id):
        item = self._get_item(id)
        db.session.delete(item)
        db.session.commit()
        return "", 204

class GroupAPI(MethodView):
    init_every_request = False

    def __init__(self, model):
        self.model = model
        self.validator = generate_validator(model, create=True)

    def get(self):
        items = self.model.query.all()
        return jsonify([item.to_json() for item in items])

    def post(self):
        errors = self.validator.validate(request.json)

        if errors:
            return jsonify(errors), 400

        db.session.add(self.model.from_json(request.json))
        db.session.commit()
        return jsonify(item.to_json())

def register_api(app, model, name):
    item = ItemAPI.as_view(f"{name}-item", model)
    group = GroupAPI.as_view(f"{name}-group", model)
    app.add_url_rule(f"/{name}/<int:id>", view_func=item)
    app.add_url_rule(f"/{name}/", view_func=group)

register_api(app, User, "users")
register_api(app, Story, "stories")
```

----------------------------------------

TITLE: Implementing a Basic Flask Application Factory
DESCRIPTION: A function that creates and configures a Flask application instance. It initializes the app with a configuration file, sets up the database, and registers blueprints before returning the application object.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
def create_app(config_filename):
    app = Flask(__name__)
    app.config.from_pyfile(config_filename)

    from yourapplication.model import db
    db.init_app(app)

    from yourapplication.views.admin import admin
    from yourapplication.views.frontend import frontend
    app.register_blueprint(admin)
    app.register_blueprint(frontend)

    return app
```

----------------------------------------

TITLE: Secure Filename Handling in Flask
DESCRIPTION: Demonstrates the importance of using `secure_filename` to sanitize uploaded filenames and prevent directory traversal attacks. Shows how a potentially dangerous filename is transformed into a safe format for storage on the server.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#2025-04-20_snippet_2

LANGUAGE: Python
CODE:
```
>>> secure_filename('../../../../home/username/.bashrc')
'home_username_.bashrc'
```

----------------------------------------

TITLE: Flask Variable Rules
DESCRIPTION: This snippet demonstrates how to use variable rules in Flask routes, using `<variable_name>` to capture parts of the URL and pass them as keyword arguments to the view function. It also shows how to use converters like `<int:post_id>` to specify the type of the argument.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
from markupsafe import escape

@app.route('/user/<username>')
def show_user_profile(username):
    # show the user profile for that user
    return f'User {escape(username)}'

@app.route('/post/<int:post_id>')
def show_post(post_id):
    # show the post with the given id, the id is an integer
    return f'Post {post_id}'

@app.route('/path/<path:subpath>')
def show_subpath(subpath):
    # show the subpath after /path/
    return f'Subpath {escape(subpath)}'
```

----------------------------------------

TITLE: Helper function for database queries
DESCRIPTION: Creates a utility function that simplifies database queries by handling cursor creation, query execution, and result fetching in one call. Supports both single-result and multiple-result queries.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
def query_db(query, args=(), one=False):
    cur = get_db().execute(query, args)
    rv = cur.fetchall()
    cur.close()
    return (rv[0] if rv else None) if one else rv
```

----------------------------------------

TITLE: Mapping Tables to Classes in Manual ORM
DESCRIPTION: Defines a User class and maps it to a SQLAlchemy Table, demonstrating how to manually bridge tables and classes in SQLAlchemy. It includes the model's constructor and a query property for facilitating database operations.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#2025-04-20_snippet_4

LANGUAGE: Python
CODE:
```
from sqlalchemy import Table, Column, Integer, String
from sqlalchemy.orm import mapper
from yourapplication.database import metadata, db_session

class User(object):
    query = db_session.query_property()

    def __init__(self, name=None, email=None):
        self.name = name
        self.email = email

    def __repr__(self):
        return f'<User {self.name!r}>'

users = Table('users', metadata,
    Column('id', Integer, primary_key=True),
    Column('name', String(50), unique=True),
    Column('email', String(120), unique=True)
)
mapper(User, users)
```

----------------------------------------

TITLE: File Upload Handler in Flask
DESCRIPTION: Demonstrates basic file upload handling using Flask's request.files object to save uploaded files to the server filesystem.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_19

LANGUAGE: python
CODE:
```
from flask import request

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        f = request.files['the_file']
        f.save('/var/www/uploads/uploaded_file.txt')
    ...
```

----------------------------------------

TITLE: Bootstrapping Flask Application for File Uploads
DESCRIPTION: Initializes a basic Flask application with necessary configurations for handling file uploads. The snippet shows how to import required modules, configure upload directories, and define allowed file extensions. Ensures that the server only accepts files with specified extensions to prevent security issues related to execution of malicious files.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#2025-04-20_snippet_0

LANGUAGE: Python
CODE:
```
import os
from flask import Flask, flash, request, redirect, url_for
from werkzeug.utils import secure_filename

UPLOAD_FOLDER = '/path/to/the/uploads'
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
```

----------------------------------------

TITLE: Minimal Flask Application
DESCRIPTION: This code defines a basic Flask application within a single Python file. It imports the Flask class, creates an instance of the application, defines a route for the root URL ('/'), and returns a "Hello, World!" message.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/layout.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
    from flask import Flask

    app = Flask(__name__)


    @app.route('/')
    def hello():
        return 'Hello, World!'
```

----------------------------------------

TITLE: Generating a Secure Secret Key for Flask
DESCRIPTION: Demonstrates how to generate a secure random secret key for use in Flask configuration using Python's secrets module.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_2

LANGUAGE: text
CODE:
```
$ python -c 'import secrets; print(secrets.token_hex())'
'192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'
```

----------------------------------------

TITLE: Implementing a Login Required Decorator in Flask
DESCRIPTION: A decorator that checks if a user is logged in before allowing access to a view function. If the user is not logged in, they are redirected to the login page. This implementation uses functools.wraps to preserve the original function's information.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from functools import wraps
from flask import g, request, redirect, url_for

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if g.user is None:
            return redirect(url_for('login', next=request.url))
        return f(*args, **kwargs)
    return decorated_function
```

----------------------------------------

TITLE: Custom 404 Error Handler in Flask
DESCRIPTION: Provides a custom 404 Error handler for a Flask application, rendering a custom '404.html' page. This handler can be registered to any Flask app, either directly or via an app factory pattern.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
from flask import render_template

@app.errorhandler(404)
def page_not_found(e):
    # note that we set the 404 status explicitly
    return render_template('404.html'), 404
```

----------------------------------------

TITLE: Receiving JSON in Flask View
DESCRIPTION: This Python snippet demonstrates how to receive JSON data in a Flask view using the `request.json` property. It assumes the request has a `Content-Type` header of `application/json` and a valid JSON body.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_12

LANGUAGE: python
CODE:
```
from flask import request

@app.post("/user/<int:id>")
def user_update(id):
    user = User.query.get_or_404(id)
    user.update_from_json(request.json)
    db.session.commit()
    return user.to_json()
```

----------------------------------------

TITLE: Initializing Flask Application in Python
DESCRIPTION: The code initializes a Flask application using the application factory pattern. It sets up default configurations, handles instance configuration, ensures the instance folder exists, and defines a basic route that returns a static response.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/factory.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
import os

from flask import Flask

def create_app(test_config=None):
    # create and configure the app
    app = Flask(__name__, instance_relative_config=True)
    app.config.from_mapping(
        SECRET_KEY='dev',
        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),
    )

    if test_config is None:
        # load the instance config, if it exists, when not testing
        app.config.from_pyfile('config.py', silent=True)
    else:
        # load the test config if passed in
        app.config.from_mapping(test_config)

    # ensure the instance folder exists
    try:
        os.makedirs(app.instance_path)
    except OSError:
        pass

    # a simple page that says hello
    @app.route('/hello')
    def hello():
        return 'Hello, World!'

    return app
```

----------------------------------------

TITLE: Handling Internal Server Errors in Flask
DESCRIPTION: Implements a handler for 500 Internal Server Errors, rendering a custom error page using Flask's errorhandler decorator. It can be used in both regular apps and those following the app factory pattern.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_11

LANGUAGE: python
CODE:
```
from flask import render_template

@app.errorhandler(500)
def internal_server_error(e):
    # note that we set the 500 status explicitly
    return render_template('500.html'), 500
```

----------------------------------------

TITLE: Limiting Upload File Size in Flask
DESCRIPTION: Configures a Flask application to enforce a maximum upload size limit. The example shows setting `MAX_CONTENT_LENGTH` to restrict uploads to a specified size, preventing the server from accepting overly large files that could exhaust memory.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#2025-04-20_snippet_5

LANGUAGE: Python
CODE:
```
from flask import Flask

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 16 * 1000 * 1000
```

----------------------------------------

TITLE: Base Layout Template
DESCRIPTION: This code defines the base HTML layout for a Flask application using Jinja templating. It includes common elements like the page title, navigation, and a section for displaying flashed messages. The template utilizes blocks for customization in child templates and uses `url_for` to generate URLs.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/templates.rst#2025-04-20_snippet_0

LANGUAGE: html+jinja
CODE:
```
"<!doctype html>\n<title>{% block title %}{% endblock %} - Flaskr</title>\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n<nav>\n  <h1>Flaskr</h1>\n  <ul>\n    {% if g.user %}\n      <li><span>{{ g.user['username'] }}</span>\n      <li><a href=\"{{ url_for('auth.logout') }}\">Log Out</a>\n    {% else %}\n      <li><a href=\"{{ url_for('auth.register') }}\">Register</a>\n      <li><a href=\"{{ url_for('auth.login') }}\">Log In</a>\n    {% endif %}\n  </ul>\n</nav>\n<section class=\"content\">\n  <header>\n    {% block header %}{% endblock %}\n  </header>\n  {% for message in get_flashed_messages() %}\n    <div class=\"flash\">{{ message }}</div>\n  {% endfor %}\n  {% block content %}{% endblock %}\n</section>\n"
```

----------------------------------------

TITLE: Downloading Uploaded Files in Flask
DESCRIPTION: Shows a Flask view function to serve uploaded files for download using a specific route template. The function uses `send_from_directory` to retrieve files from the upload folder, allowing users to download files securely.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#2025-04-20_snippet_3

LANGUAGE: Python
CODE:
```
from flask import send_from_directory

@app.route('/uploads/<name>')
def download_file(name):
    return send_from_directory(app.config["UPLOAD_FOLDER"], name)
```

----------------------------------------

TITLE: Setting up SQLite connection with Flask app context
DESCRIPTION: Demonstrates how to establish a SQLite connection within Flask and properly close it when the context ends. This pattern creates database connections on demand and ensures they are properly closed when the application context terminates.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
import sqlite3
from flask import g

DATABASE = '/path/to/database.db'

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()
```

----------------------------------------

TITLE: Flask Routing Examples
DESCRIPTION: This snippet provides examples of basic Flask routing using the `@app.route` decorator to bind functions to different URLs.  It illustrates how to define routes for the index page, a hello page, and how to handle static routes. These routes return simple string responses.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
@app.route('/')
def index():
    return 'Index Page'

@app.route('/hello')
def hello():
    return 'Hello, World'
```

----------------------------------------

TITLE: Generating URLs with url_for in Flask
DESCRIPTION: Demonstrates how to use the url_for function to generate URLs for views in Flask. It shows examples of generating URLs for simple views and views with arguments.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
url_for('hello')
```

LANGUAGE: python
CODE:
```
url_for('hello', who='World')
```

----------------------------------------

TITLE: Defining an Asynchronous Route in Flask
DESCRIPTION: This code snippet demonstrates how to define an asynchronous route in Flask using the `async` and `await` keywords. It shows a route decorator defining the `/get-data` endpoint, querying data asynchronously from a database using `async_db_query`, and returning the result as a JSON response. To use this feature, Flask must be installed with the `async` extra (`pip install flask[async]`).
SOURCE: https://github.com/pallets/flask/blob/main/docs/async-await.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
    @app.route("/get-data")
    async def get_data():
        data = await async_db_query(...)
        return jsonify(data)
```

----------------------------------------

TITLE: Accessing URL Query Parameters in Flask
DESCRIPTION: Example of safely accessing URL query parameters using request.args.get() method. This approach is recommended as it handles missing parameters gracefully without raising exceptions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_18

LANGUAGE: python
CODE:
```
searchword = request.args.get('key', '')
```

----------------------------------------

TITLE: Testing JSON API Requests
DESCRIPTION: Demonstrates sending and receiving JSON data in a test request, including GraphQL-style query with variables. Verifies response JSON content and structure.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
def test_json_data(client):
    response = client.post("/graphql", json={
        "query": """
            query User($id: String!) {
                user(id: $id) {
                    name
                    theme
                    picture_url
                }
            }
        """,
        variables={"id": 2},
    })
    assert response.json["data"]["user"]["name"] == "Flask"
```

----------------------------------------

TITLE: Rendering Template with Data in Python
DESCRIPTION: This Python code snippet demonstrates how to pass data to a Jinja template from a Flask view function. The `generate_report()` function presumably returns data that is then passed as the `chart_data` variable to the `report.html` template.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
data = generate_report()
return render_template("report.html", chart_data=data)
```

----------------------------------------

TITLE: Implementing User Login View in Flask
DESCRIPTION: Handles user authentication with password verification and session management. Validates credentials and establishes user sessions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
@bp.route('/login', methods=('GET', 'POST'))
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        error = None
        user = db.execute(
            'SELECT * FROM user WHERE username = ?', (username,)
        ).fetchone()

        if user is None:
            error = 'Incorrect username.'
        elif not check_password_hash(user['password'], password):
            error = 'Incorrect password.'

        if error is None:
            session.clear()
            session['user_id'] = user['id']
            return redirect(url_for('index'))

        flash(error)

    return render_template('auth/login.html')
```

----------------------------------------

TITLE: Custom API Exception Class in Flask
DESCRIPTION: Defines a custom exception class 'InvalidAPIUsage' in Flask, designed to handle API errors with customizable error messages, status codes, and additional contextual payload. The class includes a method for converting the exception to a dictionary format.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_16

LANGUAGE: python
CODE:
```
from flask import jsonify, request

class InvalidAPIUsage(Exception):
    status_code = 400

    def __init__(self, message, status_code=None, payload=None):
        super().__init__()
        self.message = message
        if status_code is not None:
            self.status_code = status_code
        self.payload = payload

    def to_dict(self):
        rv = dict(self.payload or ())
        rv['message'] = self.message
        return rv

@app.errorhandler(InvalidAPIUsage)
def invalid_api_usage(e):
    return jsonify(e.to_dict()), e.status_code

# an API app route for getting user information
# a correct request might be /api/user?user_id=420
@app.route("/api/user")
def user_api(user_id):
    user_id = request.arg.get("user_id")
    if not user_id:
        raise InvalidAPIUsage("No user id provided!")

    user = get_user(user_id=user_id)
    if not user:
        raise InvalidAPIUsage("No such user!", status_code=404)

    return jsonify(user.to_dict())
```

----------------------------------------

TITLE: Setting Up SQLAlchemy Declarative with Flask
DESCRIPTION: This snippet demonstrates how to set up SQLAlchemy using the declarative extension with Flask. It involves creating an engine and session, and defines an `init_db` function to initialize the database with models. Dependencies include SQLAlchemy and Flask. This setup removes the need for manual thread handling as SQLAlchemy abstracts this.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#2025-04-20_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy.orm import scoped_session, sessionmaker, declarative_base

engine = create_engine('sqlite:////tmp/test.db')
db_session = scoped_session(sessionmaker(autocommit=False,
                                         autoflush=False,
                                         bind=engine))
Base = declarative_base()
Base.query = db_session.query_property()

def init_db():
    import yourapplication.models
    Base.metadata.create_all(bind=engine)
```

----------------------------------------

TITLE: Implementing User Session Loader in Flask
DESCRIPTION: Creates a before_app_request handler to load the logged-in user's data from the session for each request.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
@bp.before_app_request
def load_logged_in_user():
    user_id = session.get('user_id')

    if user_id is None:
        g.user = None
    else:
        g.user = get_db().execute(
            'SELECT * FROM user WHERE id = ?', (user_id,)
        ).fetchone()
```

----------------------------------------

TITLE: Rendering Create Post Template with Jinja
DESCRIPTION: This snippet renders a form for creating a new post. It uses Jinja2 to embed dynamic content such as form fields for the post's title and body, which display previous form input if validation fails.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_4

LANGUAGE: html+jinja
CODE:
```
{% extends 'base.html' %}

{% block header %}
  <h1>{% block title %}New Post{% endblock %}</h1>
{% endblock %}

{% block content %}
  <form method="post">
    <label for="title">Title</label>
    <input name="title" id="title" value="{{ request.form['title'] }}" required>
    <label for="body">Body</label>
    <textarea name="body" id="body">{{ request.form['body'] }}</textarea>
    <input type="submit" value="Save">
  </form>
{% endblock %}

```

----------------------------------------

TITLE: Using Flask's Request Context in Tests
DESCRIPTION: Example of using Flask's test_request_context for testing code that depends on the request object. This allows simulating request contexts in test environments outside of an actual HTTP request.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_15

LANGUAGE: python
CODE:
```
from flask import request

with app.test_request_context('/hello', method='POST'):
    # now you can do something with the request until the
    # end of the with block, such as basic assertions:
    assert request.path == '/hello'
    assert request.method == 'POST'
```

----------------------------------------

TITLE: Configuring Flask Extension in Python
DESCRIPTION: Demonstrates how to configure and initialize a Flask extension using Python. It requires the extension to be installed and imported, along with an existing Flask application instance. The example updates the app configuration and initializes the extension with this instance.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensions.rst#2025-04-20_snippet_0

LANGUAGE: Python
CODE:
```
from flask_foo import Foo

foo = Foo()

app = Flask(__name__)
app.config.update(
    FOO_BAR='baz',
    FOO_SPAM='eggs',
)

foo.init_app(app)
```

----------------------------------------

TITLE: Testing Authentication Login and Session Handling in Flask with pytest
DESCRIPTION: Tests the login functionality of a Flask auth system, verifying successful login redirects to root, session contains the correct user ID, and validating incorrect login credentials generate appropriate error messages.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
def test_login(client, auth):
    assert client.get('/auth/login').status_code == 200
    response = auth.login()
    assert response.headers["Location"] == "/"

    with client:
        client.get('/')
        assert session['user_id'] == 1
        assert g.user['username'] == 'test'


@pytest.mark.parametrize(('username', 'password', 'message'), (
    ('a', 'test', b'Incorrect username.'),
    ('test', 'a', b'Incorrect password.'),
))
def test_login_validate_input(auth, username, password, message):
    response = auth.login(username, password)
    assert message in response.data
```

----------------------------------------

TITLE: Testing Authentication Requirements for Blog Actions in Flask
DESCRIPTION: Tests that login is required for create, update, and delete actions, and that only the post author can update or delete their posts. Also verifies 404 handling for non-existent posts.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_10

LANGUAGE: python
CODE:
```
@pytest.mark.parametrize('path', (
    '/create',
    '/1/update',
    '/1/delete',
))
def test_login_required(client, path):
    response = client.post(path)
    assert response.headers["Location"] == "/auth/login"


def test_author_required(app, client, auth):
    # change the post author to another user
    with app.app_context():
        db = get_db()
        db.execute('UPDATE post SET author_id = 2 WHERE id = 1')
        db.commit()

    auth.login()
    # current user can't modify other user's post
    assert client.post('/1/update').status_code == 403
    assert client.post('/1/delete').status_code == 403
    # current user doesn't see edit link
    assert b'href="/1/update"' not in client.get('/').data


@pytest.mark.parametrize('path', (
    '/2/update',
    '/2/delete',
))
def test_exists_required(client, auth, path):
    auth.login()
    assert client.post(path).status_code == 404
```

----------------------------------------

TITLE: Connecting to SQLite Database in Flask
DESCRIPTION: This snippet defines functions to connect to a SQLite database, create a connection, and close it. It uses Flask's g object for request-scoped storage and current_app for accessing the application context.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
import sqlite3
from datetime import datetime

import click
from flask import current_app, g


def get_db():
    if 'db' not in g:
        g.db = sqlite3.connect(
            current_app.config['DATABASE'],
            detect_types=sqlite3.PARSE_DECLTYPES
        )
        g.db.row_factory = sqlite3.Row

    return g.db


def close_db(e=None):
    db = g.pop('db', None)

    if db is not None:
        db.close()
```

----------------------------------------

TITLE: Using Jinja to pass data to JavaScript
DESCRIPTION: This Jinja template snippet demonstrates how to use the `tojson` filter to safely pass data from the server-side template to JavaScript running in the browser. The `chart_data` variable is converted to a valid JavaScript object, preventing syntax errors and ensuring HTML characters are properly escaped.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_1

LANGUAGE: jinja
CODE:
```
<script>
    const chart_data = {{ chart_data|tojson }}
    chartLib.makeChart(chart_data)
</script>
```

----------------------------------------

TITLE: Accessing Flask Application Config in Blueprints
DESCRIPTION: Blueprint implementation showing how to access the application configuration using Flask's current_app proxy when the application object isn't available at import time.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
from flask import current_app, Blueprint, render_template
admin = Blueprint('admin', __name__, url_prefix='/admin')

@admin.route('/')
def index():
    return render_template(current_app.config['INDEX_TEMPLATE'])
```

----------------------------------------

TITLE: Running Flask Development Server with Python
DESCRIPTION: Demonstrates how to start the Flask development server using the 'flask run' command. The server will run on http://127.0.0.1:5000/ by default.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_0

LANGUAGE: bash
CODE:
```
$ flask --app hello run
 * Serving Flask app "hello"
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Creating JSON Responses for HTTP Exceptions in Flask
DESCRIPTION: Error handler for HTTPException that converts the default HTML error pages into JSON responses, preserving the HTTP status code, name, and description.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
from flask import json
from werkzeug.exceptions import HTTPException

@app.errorhandler(HTTPException)
def handle_exception(e):
    """Return JSON instead of HTML for HTTP errors."""
    # start with the correct headers and status code from the error
    response = e.get_response()
    # replace the body with JSON
    response.data = json.dumps({
        "code": e.code,
        "name": e.name,
        "description": e.description,
    })
    response.content_type = "application/json"
    return response
```

----------------------------------------

TITLE: Defining a Model using SQLAlchemy Declarative
DESCRIPTION: Defines a User model using SQLAlchemy's declarative system. The model includes fields for the user ID, name, and email, and provides a constructor and a string representation method. This class needs SQLAlchemy's Base to be subclassed.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#2025-04-20_snippet_2

LANGUAGE: Python
CODE:
```
from sqlalchemy import Column, Integer, String
from yourapplication.database import Base

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String(50), unique=True)
    email = Column(String(120), unique=True)

    def __init__(self, name=None, email=None):
        self.name = name
        self.email = email

    def __repr__(self):
        return f'<User {self.name!r}>'
```

----------------------------------------

TITLE: Implementing User Language Detection with Deferred Callbacks in Flask
DESCRIPTION: This example demonstrates how to use Flask's after_this_request decorator to remember a user's language preference. The code detects the user's language in a before_request handler and sets a cookie in a deferred callback that will run after the request is processed but before the response is sent to the client.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/deferredcallbacks.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from flask import request, after_this_request

@app.before_request
def detect_user_language():
    language = request.cookies.get('user_lang')

    if language is None:
        language = guess_language_from_request()

        # when the response exists, set a cookie with the language
        @after_this_request
        def remember_language(response):
            response.set_cookie('user_lang', language)
            return response

    g.language = language
```

----------------------------------------

TITLE: Redirect and Error Handling in Flask
DESCRIPTION: Shows how to implement redirects and handle errors using Flask's redirect and abort functions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_23

LANGUAGE: python
CODE:
```
from flask import abort, redirect, url_for

@app.route('/')
def index():
    return redirect(url_for('login'))

@app.route('/login')
def login():
    abort(401)
    this_is_never_executed()
```

----------------------------------------

TITLE: Creating a Caching Decorator for Flask Views
DESCRIPTION: A decorator that caches the results of a view function for a specified amount of time. It generates a unique cache key based on the request path and uses an external cache object to store and retrieve cached values.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
from functools import wraps
from flask import request

def cached(timeout=5 * 60, key='view/{}'): 
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            cache_key = key.format(request.path)
            rv = cache.get(cache_key)
            if rv is not None:
                return rv
            rv = f(*args, **kwargs)
            cache.set(cache_key, rv, timeout=timeout)
            return rv
        return decorated_function
    return decorator
```

----------------------------------------

TITLE: Implementing Delete Route for Blog Posts in Flask
DESCRIPTION: This code defines a Flask route for deleting blog posts. It requires user login, retrieves the post first to verify it exists, executes a DELETE SQL query, and redirects back to the index page after successful deletion.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_8

LANGUAGE: python
CODE:
```
@bp.route('/<int:id>/delete', methods=('POST',))
@login_required
def delete(id):
    get_post(id)
    db = get_db()
    db.execute('DELETE FROM post WHERE id = ?', (id,))
    db.commit()
    return redirect(url_for('blog.index'))
```

----------------------------------------

TITLE: Using the PathDispatcher with a Flask Application Factory in Python
DESCRIPTION: Example showing how to use the PathDispatcher to create applications based on URL path prefixes. This implementation falls back to a default application when no specific application is found for a path prefix.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
from myapplication import create_app, default_app, get_user_for_prefix

def make_app(prefix):
    user = get_user_for_prefix(prefix)
    if user is not None:
        return create_app(user)

application = PathDispatcher(default_app, make_app)
```

----------------------------------------

TITLE: Example Flask Configuration File
DESCRIPTION: Shows an example of a Flask configuration file with a secret key. Only uppercase values are stored in the config object.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
# Example configuration
SECRET_KEY = '192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'
```

----------------------------------------

TITLE: Testing HTTP GET Request with Test Client
DESCRIPTION: Demonstrates how to use Flask's test client to make a GET request and assert response content. Verifies route behavior by checking the response data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
def test_request_example(client):
    response = client.get("/posts")
    assert b"<h2>Hello, World!</h2>" in response.data
```

----------------------------------------

TITLE: Creating Basic Flask Application in Python
DESCRIPTION: A simple Flask application example that serves as the starting point for the dispatching techniques. It defines a basic route that returns 'Hello World!' when the root URL is accessed.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello World!'
```

----------------------------------------

TITLE: Initializing Celery with Flask
DESCRIPTION: This Python code snippet demonstrates how to integrate a Celery application with a Flask application by creating a Celery app object and configuring it with Flask's settings. It sets the Celery app as the default to be used with each request, allowing task functions to run with an active Flask app context.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
from celery import Celery, Task

def celery_init_app(app: Flask) -> Celery:
    class FlaskTask(Task):
        def __call__(self, *args: object, **kwargs: object) -> object:
            with app.app_context():
                return self.run(*args, **kwargs)

    celery_app = Celery(app.name, task_cls=FlaskTask)
    celery_app.config_from_object(app.config["CELERY"])
    celery_app.set_default()
    app.extensions["celery"] = celery_app
    return celery_app
```

----------------------------------------

TITLE: Defining Method-Specific Route Handlers in Flask
DESCRIPTION: Example of using Flask's HTTP method decorators (@app.get and @app.post) to define separate handlers for different HTTP methods on the same route. This approach allows for cleaner separation of concerns compared to handling all methods in a single function.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_10

LANGUAGE: python
CODE:
```
@app.get('/login')
def login_get():
    return show_the_login_form()

@app.post('/login')
def login_post():
    return do_the_login()
```

----------------------------------------

TITLE: Logging Security Exception Signal in Flask
DESCRIPTION: Example of handling and logging a specific type of security exception using the got_request_exception signal
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
from flask import got_request_exception

def log_security_exception(sender, exception, **extra):
    if not isinstance(exception, SecurityException):
        return

    security_logger.exception(
        f"SecurityException at {request.url!r}",
        exc_info=exception,
    )

got_request_exception.connect(log_security_exception, app)
```

----------------------------------------

TITLE: Handling Session Modifications with Mutable Objects in Flask
DESCRIPTION: Example demonstrating how to properly handle modifications to mutable objects in a Flask session. Since Flask doesn't automatically detect changes to mutable structures like lists, you need to explicitly set session.modified to True after modifying such objects.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
# this change is not picked up because a mutable object (here
# a list) is changed.
session['objects'].append(42)
# so mark it as modified yourself
session.modified = True
```

----------------------------------------

TITLE: Implementing Logout View in Flask
DESCRIPTION: Handles user logout by clearing the session and redirecting to the index page.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
@bp.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('index'))
```

----------------------------------------

TITLE: Setting Flask Configuration Values in Python
DESCRIPTION: Demonstrates how to set and update configuration values in a Flask application using the config dictionary and update method.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
app = Flask(__name__)
app.config['TESTING'] = True

app.testing = True

app.config.update(
    TESTING=True,
    SECRET_KEY='192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'
)
```

----------------------------------------

TITLE: Managing Database Resources with Flask's g Object
DESCRIPTION: Implements a pattern for managing database connections using Flask's g object for storage during a request. Includes a get_db() function to retrieve or create connections and a teardown handler to close them when the context ends.
SOURCE: https://github.com/pallets/flask/blob/main/docs/appcontext.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
from flask import g

def get_db():
    if 'db' not in g:
        g.db = connect_to_database()

    return g.db

@app.teardown_appcontext
def teardown_db(exception):
    db = g.pop('db', None)

    if db is not None:
        db.close()
```

----------------------------------------

TITLE: Generating Large CSV Data Stream in Flask
DESCRIPTION: A basic Flask view function that generates a large CSV file on the fly using a generator function. Each yield statement sends data directly to the browser without storing the entire file in memory.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/streaming.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
@app.route('/large.csv')
def generate_large_csv():
    def generate():
        for row in iter_all_rows():
            yield f"{','.join(row)}\n"
    return generate(), {"Content-Type": "text/csv"}
```

----------------------------------------

TITLE: Testing Blog Post Creation and Update Functionality in Flask
DESCRIPTION: Tests creating and updating blog posts, verifying that the data is properly stored in the database. Also checks validation on required fields by trying to submit empty titles.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_11

LANGUAGE: python
CODE:
```
def test_create(client, auth, app):
    auth.login()
    assert client.get('/create').status_code == 200
    client.post('/create', data={'title': 'created', 'body': ''})

    with app.app_context():
        db = get_db()
        count = db.execute('SELECT COUNT(id) FROM post').fetchone()[0]
        assert count == 2


def test_update(client, auth, app):
    auth.login()
    assert client.get('/1/update').status_code == 200
    client.post('/1/update', data={'title': 'updated', 'body': ''})

    with app.app_context():
        db = get_db()
        post = db.execute('SELECT * FROM post WHERE id = 1').fetchone()
        assert post['title'] == 'updated'


@pytest.mark.parametrize('path', (
    '/create',
    '/1/update',
))
def test_create_update_validate(client, auth, path):
    auth.login()
    response = client.post(path, data={'title': '', 'body': ''})
    assert b'Title is required.' in response.data
```

----------------------------------------

TITLE: Handling Database Sessions in Flask
DESCRIPTION: This snippet explains how to manage database sessions in a Flask application when using SQLAlchemy. It shows the setup for automatically closing the database session after each request or when the application context shuts down. Dependencies include Flask and SQLAlchemy.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#2025-04-20_snippet_1

LANGUAGE: Python
CODE:
```
from yourapplication.database import db_session

@app.teardown_appcontext
def shutdown_session(exception=None):
    db_session.remove()
```

----------------------------------------

TITLE: Get Post Helper Function in Flask
DESCRIPTION: The 'get_post' function retrieves a post by ID from the database and optionally checks if the current user is the author. It raises exceptions via 'abort' for invalid access or missing posts. This is useful for reuse in view functions requiring post access and validation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
def get_post(id, check_author=True):
    post = get_db().execute(
        'SELECT p.id, title, body, created, author_id, username'
        ' FROM post p JOIN user u ON p.author_id = u.id'
        ' WHERE p.id = ?',
        (id,)
    ).fetchone()

    if post is None:
        abort(404, f"Post id {id} doesn't exist.")

    if check_author and post['author_id'] != g.user['id']:
        abort(403)

    return post

```

----------------------------------------

TITLE: Implementing a Templating Decorator in Flask
DESCRIPTION: A decorator that automatically renders a template with the return value of a view function. The function should return a dictionary to be passed to the template, or None for an empty dictionary. If no template name is provided, it uses the endpoint name.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
from functools import wraps
from flask import request, render_template

def templated(template=None):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            template_name = template
            if template_name is None:
                template_name = f"{request.endpoint.replace('.', '/')}.html"
            ctx = f(*args, **kwargs)
            if ctx is None:
                ctx = {}
            elif not isinstance(ctx, dict):
                return ctx
            return render_template(template_name, **ctx)
        return decorated_function
    return decorator
```

----------------------------------------

TITLE: Creating a Reusable ListView Class in Flask
DESCRIPTION: This snippet shows how to create a reusable ListView class that can be used for different models and templates. It demonstrates passing arguments to the view class to customize its behavior.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
class ListView(View):
    def __init__(self, model, template):
        self.model = model
        self.template = template

    def dispatch_request(self):
        items = self.model.query.all()
        return render_template(self.template, items=items)

app.add_url_rule(
    "/users/",
    view_func=ListView.as_view("user_list", User, "users.html"),
)
app.add_url_rule(
    "/stories/",
    view_func=ListView.as_view("story_list", Story, "stories.html"),
)
```

----------------------------------------

TITLE: Application-Level Error Handlers with Request Object
DESCRIPTION: Implements application-level error handlers that differentiate responses based on URL paths using the request proxy object in Flask, providing varied error pages for 404 and 405 status codes.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_14

LANGUAGE: python
CODE:
```
from flask import jsonify, render_template

# at the application level
# not the blueprint level
@app.errorhandler(404)
def page_not_found(e):
    # if a request is in our blog URL space
    if request.path.startswith('/blog/'):
        # we return a custom blog 404 page
        return render_template("blog/404.html"), 404
    else:
        # otherwise we return our generic site-wide 404 page
        return render_template("404.html"), 404

@app.errorhandler(405)
def method_not_allowed(e):
    # if a request has the wrong method to our API
    if request.path.startswith('/api/'):
        # we return a json saying so
        return jsonify(message="Method Not Allowed"), 405
    else:
        # otherwise we return a generic site-wide 405 page
        return render_template("405.html"), 405
```

----------------------------------------

TITLE: Creating a Basic Blueprint in Flask with Template Rendering
DESCRIPTION: Demonstrates how to create a simple blueprint that renders static templates. The blueprint handles routes for a default page and dynamic pages, with error handling for missing templates.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_0

LANGUAGE: Python
CODE:
```
from flask import Blueprint, render_template, abort
from jinja2 import TemplateNotFound

simple_page = Blueprint('simple_page', __name__,
                        template_folder='templates')

@simple_page.route('/', defaults={'page': 'index'})
@simple_page.route('/<page>')
def show(page):
    try:
        return render_template(f'pages/{page}.html')
    except TemplateNotFound:
        abort(404)
```

----------------------------------------

TITLE: Manual Object-Relational Mapping Setup
DESCRIPTION: This snippet shows how to manually setup ORM with SQLAlchemy in a Flask application by creating the engine, metadata, and database session. It contrasts the declarative approach by separately defining tables and mapping them to classes.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#2025-04-20_snippet_3

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine, MetaData
from sqlalchemy.orm import scoped_session, sessionmaker

engine = create_engine('sqlite:////tmp/test.db')
metadata = MetaData()
db_session = scoped_session(sessionmaker(autocommit=False,
                                         autoflush=False,
                                         bind=engine))

def init_db():
    metadata.create_all(bind=engine)
```

----------------------------------------

TITLE: Handling All Exceptions with Pass-through for HTTP Errors
DESCRIPTION: Generic exception handler that passes through HTTP exceptions unchanged while handling all other exceptions with a custom 500 error template.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
from werkzeug.exceptions import HTTPException

@app.errorhandler(Exception)
def handle_exception(e):
    # pass through HTTP errors
    if isinstance(e, HTTPException):
        return e

    # now you're handling non-HTTP exceptions only
    return render_template("500_generic.html", e=e), 500
```

----------------------------------------

TITLE: Example of querying multiple rows
DESCRIPTION: Demonstrates how to use the query_db helper function to retrieve and process multiple rows from a database query. The example iterates through all users in the database.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
for user in query_db('select * from users'):
    print(user['username'], 'has the id', user['user_id'])
```

----------------------------------------

TITLE: Subclassing Flask to Customize Request Parameter Handling
DESCRIPTION: This example demonstrates how to create custom Request and Flask subclasses to override the default parameter storage behavior. It uses ImmutableOrderedMultiDict to preserve the order of request parameters, which isn't done by Flask's default implementation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/subclassing.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from flask import Flask, Request
from werkzeug.datastructures import ImmutableOrderedMultiDict
class MyRequest(Request):
    """Request subclass to override request parameter storage"""
    parameter_storage_class = ImmutableOrderedMultiDict
class MyFlask(Flask):
    """Flask subclass using the custom request class"""
    request_class = MyRequest
```

----------------------------------------

TITLE: Injecting Request Information into Logs in Flask
DESCRIPTION: This snippet demonstrates how to inject request-specific information (URL, remote address) into log messages. It defines a custom formatter that adds the URL and remote address to the log record if a request context is available. The formatter is then set for both the default handler and the mail handler. Dependencies: flask.has_request_context, flask.request, flask.logging.default_handler, logging.Formatter, Flask.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
 "from flask import has_request_context, request
    from flask.logging import default_handler

    class RequestFormatter(logging.Formatter):
        def format(self, record):
            if has_request_context():
                record.url = request.url
                record.remote_addr = request.remote_addr
            else:
                record.url = None
                record.remote_addr = None

            return super().format(record)

    formatter = RequestFormatter(
        '[%(asctime)s] %(remote_addr)s requested %(url)s\n'
        '%(levelname)s in %(module)s: %(message)s'
    )
    default_handler.setFormatter(formatter)
    mail_handler.setFormatter(formatter)"
```

----------------------------------------

TITLE: Template Rendering with JSON Data in Flask using Jinja
DESCRIPTION: Example showing how to render JSON data within HTML script tags using Jinja's tojson filter. This filter ensures proper JSON encoding and marks the output as safe for inclusion in HTML.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_1

LANGUAGE: html+jinja
CODE:
```
<script>
    const names = {{ names|tojson }};
    renderChart(names, {{ axis_data|tojson }});
</script>
```

----------------------------------------

TITLE: Configuring Flask for MongoDB with MongoEngine
DESCRIPTION: Sets up a basic Flask application to use MongoDB through MongoEngine. Defines MongoDB database settings in app.config and initializes a MongoEngine instance with the Flask app. Required dependencies include flask and flask_mongoengine.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#2025-04-20_snippet_1

LANGUAGE: Python
CODE:
```
from flask import Flask
from flask_mongoengine import MongoEngine

app = Flask(__name__)
app.config['MONGODB_SETTINGS'] = {
    "db": "myapp",
}
db = MongoEngine(app)
```

----------------------------------------

TITLE: Configuring Build-Only URL Rules in Flask
DESCRIPTION: Illustrates how to add a URL rule in Flask that is only used for URL generation and not for routing to view functions. Useful for setups where the server or middleware handles the file serving, allowing `url_for` to generate download links without a defined view function.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#2025-04-20_snippet_4

LANGUAGE: Python
CODE:
```
app.add_url_rule(
    "/uploads/<name>", endpoint="download_file", build_only=True
)
```

----------------------------------------

TITLE: Configuring Security Headers in Flask
DESCRIPTION: Examples of setting various security headers in Flask responses to enhance application security.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'
response.headers['Content-Security-Policy'] = "default-src 'self'"
response.headers['X-Content-Type-Options'] = 'nosniff'
response.headers['X-Frame-Options'] = 'SAMEORIGIN'
```

----------------------------------------

TITLE: Configuring Logging with dictConfig in Flask
DESCRIPTION: This snippet demonstrates how to configure Python's logging using `dictConfig`. It sets up a basic configuration including a formatter, a stream handler, and the root logger. The handler logs to the WSGI errors stream, and the root logger is set to the INFO level. Dependencies: logging.config.dictConfig, Flask.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
 "from logging.config import dictConfig

    dictConfig({
        'version': 1,
        'formatters': {'default': {
            'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',
        }},
        'handlers': {'wsgi': {
            'class': 'logging.StreamHandler',
            'stream': 'ext://flask.logging.wsgi_errors_stream',
            'formatter': 'default'
        }},
        'root': {
            'level': 'INFO',
            'handlers': ['wsgi']
        }
    })

    app = Flask(__name__)"
```

----------------------------------------

TITLE: Handling User Profile Request Errors in Flask
DESCRIPTION: This snippet demonstrates how to handle errors for a user profile endpoint in a Flask application. It uses Flask's abort function to handle 400 and 404 errors when a username is absent or cannot be found, respectively. Dependencies include Flask, with routes and a request context established.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
from flask import abort, render_template, request

# a username needs to be supplied in the query args
# a successful request would be like /profile?username=jack
@app.route("/profile")
def user_profile():
    username = request.arg.get("username")
    # if a username isn't supplied in the request, return a 400 bad request
    if username is None:
        abort(400)

    user = get_user(username=username)
    # if a user can't be found by their username, return 404 not found
    if user is None:
        abort(404)

    return render_template("profile.html", user=user)
```

----------------------------------------

TITLE: Custom Error Handler in Flask
DESCRIPTION: Example of creating a custom error handler for 404 errors using Flask's errorhandler decorator.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_24

LANGUAGE: python
CODE:
```
from flask import render_template

@app.errorhandler(404)
def page_not_found(error):
    return render_template('page_not_found.html'), 404
```

----------------------------------------

TITLE: Configuring Celery in Flask Application
DESCRIPTION: This Python code example sets up a Flask app with Celery using Redis as a broker and result backend. It ignores task results by default, storing results only when necessary.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
from flask import Flask

app = Flask(__name__)
app.config.from_mapping(
    CELERY=dict(
        broker_url="redis://localhost",
        result_backend="redis://localhost",
        task_ignore_result=True,
    ),
)
celery_app = celery_init_app(app)
```

----------------------------------------

TITLE: Testing Blog Index View in Flask Application
DESCRIPTION: Tests the index view of a Flask blog application, verifying the presence of login/register links when not logged in, and post content and edit links when logged in as the author.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_9

LANGUAGE: python
CODE:
```
import pytest
from flaskr.db import get_db


def test_index(client, auth):
    response = client.get('/')
    assert b"Log In" in response.data
    assert b"Register" in response.data

    auth.login()
    response = client.get('/')
    assert b'Log Out' in response.data
    assert b'test title' in response.data
    assert b'by test on 2018-01-01' in response.data
    assert b'test\nbody' in response.data
    assert b'href="/1/update"' in response.data
```

----------------------------------------

TITLE: Logging with Flask Logger Example
DESCRIPTION: Demonstrates how to use Flask's built-in logger for different logging levels including debug, warning and error messages. Shows standard logging patterns using app.logger.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_28

LANGUAGE: python
CODE:
```
app.logger.debug('A value for debugging')
app.logger.warning('A warning occurred (%d apples)', 42)
app.logger.error('An error occurred')
```

----------------------------------------

TITLE: Configuring Secure Cookie Settings in Flask
DESCRIPTION: Shows how to configure secure cookie settings for both session cookies and custom cookies in Flask applications.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
app.config.update(
    SESSION_COOKIE_SECURE=True,
    SESSION_COOKIE_HTTPONLY=True,
    SESSION_COOKIE_SAMESITE='Lax',
)

response.set_cookie('username', 'flask', secure=True, httponly=True, samesite='Lax')
```

----------------------------------------

TITLE: Example of querying a single row
DESCRIPTION: Shows how to retrieve a single row from the database using the query_db helper function with parametrized queries. This pattern safely handles the case where no matching row is found.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
user = query_db('select * from users where username = ?',
                [the_username], one=True)
if user is None:
    print('No such user')
else:
    print(the_username, 'has the id', user['user_id'])
```

----------------------------------------

TITLE: Running Flask Applications with Waitress
DESCRIPTION: Examples of running a Flask application with Waitress, including direct application loading and using the app factory pattern with the --call option.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/waitress.rst#2025-04-20_snippet_1

LANGUAGE: text
CODE:
```
# equivalent to 'from hello import app'
$ waitress-serve --host 127.0.0.1 hello:app

# equivalent to 'from hello import create_app; create_app()'
$ waitress-serve --host 127.0.0.1 --call hello:create_app

Serving on http://127.0.0.1:8080
```

----------------------------------------

TITLE: Registering Flask Blueprints with an Application
DESCRIPTION: Shows how to register a blueprint with a Flask application. The example imports a blueprint and registers it with the main application instance.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_1

LANGUAGE: Python
CODE:
```
from flask import Flask
from yourapplication.simple_page import simple_page

app = Flask(__name__)
app.register_blueprint(simple_page)
```

----------------------------------------

TITLE: Returning JSON from Flask View (dict)
DESCRIPTION: This Python snippet demonstrates how to return a JSON response from a Flask view by directly returning a Python dictionary. Flask automatically serializes the dictionary to JSON.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_10

LANGUAGE: python
CODE:
```
@app.route("/user/<int:id>")
def user_detail(id):
    user = User.query.get_or_404(id)
    return {
        "username": User.username,
        "email": User.email,
        "picture": url_for("static", filename=f"users/{id}/profile.png"),
    }
```

----------------------------------------

TITLE: Running Flask Development Server in Debug Mode
DESCRIPTION: Shows how to start the Flask development server in debug mode, which enables the interactive debugger and reloader. The server will run on http://127.0.0.1:5000/.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_1

LANGUAGE: bash
CODE:
```
$ flask --app hello run --debug
 * Serving Flask app "hello"
 * Debug mode: on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with inotify reloader
 * Debugger is active!
 * Debugger PIN: 223-456-919
```

----------------------------------------

TITLE: Implementing Path-Based Dispatching for Flask Applications in Python
DESCRIPTION: A PathDispatcher class that creates and manages Flask applications based on the URL path. This implementation extracts the first path segment and uses it to determine which application should handle the request.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
from threading import Lock
from wsgiref.util import shift_path_info

class PathDispatcher:

    def __init__(self, default_app, create_app):
        self.default_app = default_app
        self.create_app = create_app
        self.lock = Lock()
        self.instances = {}

    def get_application(self, prefix):
        with self.lock:
            app = self.instances.get(prefix)
            if app is None:
                app = self.create_app(prefix)
                if app is not None:
                    self.instances[prefix] = app
            return app

    def __call__(self, environ, start_response):
        app = self.get_application(_peek_path_info(environ))
        if app is not None:
            shift_path_info(environ)
        else:
            app = self.default_app
        return app(environ, start_response)

def _peek_path_info(environ):
    segments = environ.get("PATH_INFO", "").lstrip("/").split("/", 1)
    if segments:
        return segments[0]

    return None
```

----------------------------------------

TITLE: Checksum Calculation Stream
DESCRIPTION: This Python code defines a `ChecksumCalcStream` class that wraps an input stream and calculates a SHA1 checksum of the data as it is read. The `read` and `readline` methods update the hash with the data read from the underlying stream. It uses hashlib for SHA1 hashing.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/requestchecksum.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
import hashlib

class ChecksumCalcStream(object):

    def __init__(self, stream):
        self._stream = stream
        self._hash = hashlib.sha1()

    def read(self, bytes):
        rv = self._stream.read(bytes)
        self._hash.update(rv)
        return rv

    def readline(self, size_hint):
        rv = self._stream.readline(size_hint)
        self._hash.update(rv)
        return rv
```

----------------------------------------

TITLE: Fetching Task Results
DESCRIPTION: In this Python code, a GET endpoint is set up to check the status of a background task initiated previously. It informs whether the task is ready, if it was successful, and fetches the result once available.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_9

LANGUAGE: python
CODE:
```
from celery.result import AsyncResult

@app.get("/result/<id>")
def task_result(id: str) -> dict[str, object]:
    result = AsyncResult(id)
    return {
        "ready": result.ready(),
        "successful": result.successful(),
        "value": result.result if result.ready() else None,
    }
```

----------------------------------------

TITLE: Calling a Task from a Flask Route
DESCRIPTION: This Python snippet shows how to call a Celery task in the background using Flask. A POST route is created to start an addition task, returning the task's result ID to the client for further querying.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_8

LANGUAGE: python
CODE:
```
from flask import request

@app.post("/add")
def start_add() -> dict[str, object]:
    a = request.form.get("a", type=int)
    b = request.form.get("b", type=int)
    result = add_together.delay(a, b)
    return {"result_id": result.id}
```

----------------------------------------

TITLE: Accessing and Modifying Session in Tests
DESCRIPTION: Demonstrates techniques for accessing and manipulating Flask session during testing, including setting session values before requests and checking session state.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
from flask import session

def test_modify_session(client):
    with client.session_transaction() as session:
        # set a user id without going through the login route
        session["user_id"] = 1

    # session is saved now

    response = client.get("/users/me")
    assert response.json["username"] == "flask"
```

----------------------------------------

TITLE: Login Template
DESCRIPTION: This Jinja template extends the `base.html` template and defines the content for the user login page. It includes a form with fields for username and password, both marked as required.  The template overrides the `header` and `content` blocks from the base template.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/templates.rst#2025-04-20_snippet_2

LANGUAGE: html+jinja
CODE:
```
"{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Log In{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"username\">Username</label>\n    <input name=\"username\" id=\"username\" required>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" required>\n    <input type=\"submit\" value=\"Log In\">\n  </form>\n{% endblock %}\n"
```

----------------------------------------

TITLE: Combining Flask Applications with DispatcherMiddleware in Python
DESCRIPTION: Example of using Werkzeug's DispatcherMiddleware to combine multiple Flask applications. This code shows how to mount a frontend application at the root URL and a backend application at the '/backend' path.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
from werkzeug.middleware.dispatcher import DispatcherMiddleware
from frontend_app import application as frontend
from backend_app import application as backend

application = DispatcherMiddleware(frontend, {
    '/backend': backend
})
```

----------------------------------------

TITLE: Flask Route Definitions with URL Parameters
DESCRIPTION: Examples of defining Flask routes with various URL parameter types and default values
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_9

LANGUAGE: python
CODE:
```
@app.route('/')
def index():
    pass

@app.route('/<username>')
def show_user(username):
    pass

@app.route('/post/<int:post_id>')
def show_post(post_id):
    pass

@app.route('/users/', defaults={'page': 1})
@app.route('/users/page/<int:page>')
def show_users(page):
    pass

@app.route('/region/', defaults={'id': 1})
@app.route('/region/<int:id>', methods=['GET', 'POST'])
def region(id):
    pass
```

----------------------------------------

TITLE: Implementing Subdomain Dispatching for Flask Applications in Python
DESCRIPTION: A SubdomainDispatcher class that dynamically creates and manages Flask applications based on subdomains. This implementation uses thread-safe instance caching to avoid recreating applications for the same subdomain.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
from threading import Lock

class SubdomainDispatcher:

    def __init__(self, domain, create_app):
        self.domain = domain
        self.create_app = create_app
        self.lock = Lock()
        self.instances = {}

    def get_application(self, host):
        host = host.split(':')[0]
        assert host.endswith(self.domain), 'Configuration error'
        subdomain = host[:-len(self.domain)].rstrip('.')
        with self.lock:
            app = self.instances.get(subdomain)
            if app is None:
                app = self.create_app(subdomain)
                self.instances[subdomain] = app
            return app

    def __call__(self, environ, start_response):
        app = self.get_application(environ['HTTP_HOST'])
        return app(environ, start_response)
```

----------------------------------------

TITLE: Converting Function-based View to Class-based View in Flask
DESCRIPTION: This snippet demonstrates how to convert a simple function-based view that renders a list of users into a class-based view using Flask's View class.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
@app.route("/users/")
def user_list():
    users = User.query.all()
    return render_template("users.html", users=users)
```

LANGUAGE: python
CODE:
```
from flask.views import View

class UserList(View):
    def dispatch_request(self):
        users = User.query.all()
        return render_template("users.html", objects=users)

app.add_url_rule("/users/", view_func=UserList.as_view("user_list"))
```

----------------------------------------

TITLE: Initializing Flask Application with Message Flashing
DESCRIPTION: Sets up a Flask application with a secret key and basic routing for login functionality. Demonstrates how to use flash() for user notifications.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from flask import Flask, flash, redirect, render_template, 
         request, url_for

app = Flask(__name__)
app.secret_key = b'_5#y2L"F4Q8z\n\xec]/'\n
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        if request.form['username'] != 'admin' or \
                request.form['password'] != 'secret':
            error = 'Invalid credentials'
        else:
            flash('You were successfully logged in')
            return redirect(url_for('index'))
    return render_template('login.html', error=error)
```

----------------------------------------

TITLE: Creating Data in MongoDB with MongoEngine
DESCRIPTION: This snippet demonstrates instantiating a MongoEngine document with field values and saving it to the database. Assigns values to field attributes before saving. 'doc.save()' must be called to persist the document.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#2025-04-20_snippet_4

LANGUAGE: Python
CODE:
```
bttf = Movie(title="Back To The Future", year=1985)
bttf.actors = [
    "Michael J. Fox",
    "Christopher Lloyd"
]
bttf.imdb = Imdb(imdb_id="tt0088763", rating=8.5)
bttf.save()
```

----------------------------------------

TITLE: Running Flask Applications with Gunicorn
DESCRIPTION: Examples of running Gunicorn with a Flask application, including both direct app import and application factory patterns. The -w flag specifies 4 workers for handling concurrent requests.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#2025-04-20_snippet_1

LANGUAGE: text
CODE:
```
# equivalent to 'from hello import app'
$ gunicorn -w 4 'hello:app'

# equivalent to 'from hello import create_app; create_app()'
$ gunicorn -w 4 'hello:create_app()'

Starting gunicorn 20.1.0
Listening at: http://127.0.0.1:8000 (x)
Using worker: sync
Booting worker with pid: x
Booting worker with pid: x
Booting worker with pid: x
Booting worker with pid: x
```

----------------------------------------

TITLE: Testing Authentication Views
DESCRIPTION: Tests for user registration including validation and error handling.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
import pytest
from flask import g, session
from flaskr.db import get_db


def test_register(client, app):
    assert client.get('/auth/register').status_code == 200
    response = client.post(
        '/auth/register', data={'username': 'a', 'password': 'a'}
    )
    assert response.headers["Location"] == "/auth/login"

    with app.app_context():
        assert get_db().execute(
            "SELECT * FROM user WHERE username = 'a'",
        ).fetchone() is not None


@pytest.mark.parametrize(('username', 'password', 'message'), (
    ('', '', b'Username is required.'),
    ('a', '', b'Password is required.'),
    ('test', 'test', b'already registered'),
))
def test_register_validate_input(client, username, password, message):
    response = client.post(
        '/auth/register',
        data={'username': username, 'password': password}
    )
    assert message in response.data
```

----------------------------------------

TITLE: Running Flask Development Server in Debug Mode (Command Line)
DESCRIPTION: Command to run a Flask application in debug mode using the command line interface. This enables the interactive debugger and auto-reloader for development purposes.
SOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
$ flask --app hello run --debug
```

----------------------------------------

TITLE: Running Flask Application with Waitress WSGI Server
DESCRIPTION: Illustrates how to run a Flask application using the Waitress WSGI server in a production environment. Waitress must be installed within the virtual environment. Input: application name; Output: Waitress serves the application on a specified address.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#2025-04-20_snippet_3

LANGUAGE: none
CODE:
```
$ pip install waitress
$ waitress-serve --call 'flaskr:create_app'

Serving on http://0.0.0.0:8080
```

----------------------------------------

TITLE: Implementing User Registration View in Flask
DESCRIPTION: Handles user registration with form validation, password hashing, and database operations. Supports both GET and POST methods.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
@bp.route('/register', methods=('GET', 'POST'))
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        error = None

        if not username:
            error = 'Username is required.'
        elif not password:
            error = 'Password is required.'

        if error is None:
            try:
                db.execute(
                    "INSERT INTO user (username, password) VALUES (?, ?)",
                    (username, generate_password_hash(password)),
                )
                db.commit()
            except db.IntegrityError:
                error = f"User {username} is already registered."
            else:
                return redirect(url_for("auth.login"))

        flash(error)

    return render_template('auth/register.html')
```

----------------------------------------

TITLE: Wrapping Flask App with WsgiToAsgi Adapter
DESCRIPTION: This Python code snippet demonstrates how to wrap a Flask application with the WsgiToAsgi adapter from the asgiref library. This allows a Flask app to be served using an ASGI server, facilitating Flask's async/await support. Dependencies include asgiref and Flask libraries. The input is a Flask app instance and the output is an ASGI-compatible app wrapped by WsgiToAsgi.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/asgi.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from asgiref.wsgi import WsgiToAsgi\nfrom flask import Flask\n\napp = Flask(__name__)\n\n...\n\nasgi_app = WsgiToAsgi(app)
```

----------------------------------------

TITLE: Creating Application Fixture in pytest
DESCRIPTION: Defines a pytest fixture for creating and configuring a Flask application instance with testing configuration. Supports application factory pattern and provides setup and teardown capabilities.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
import pytest
from my_project import create_app

@pytest.fixture()
def app():
    app = create_app()
    app.config.update({
        "TESTING": True,
    })

    # other setup can go here

    yield app

    # clean up / reset resources here
```

----------------------------------------

TITLE: Creating a dictionary row factory for SQLite results
DESCRIPTION: Implements a row factory function to convert SQLite query results into dictionaries. This makes the results more convenient to work with by providing named access to columns.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
def make_dicts(cursor, row):
    return dict((cursor.description[idx][0], value)
                for idx, value in enumerate(row))

db.row_factory = make_dicts
```

----------------------------------------

TITLE: Manually Pushing Flask Application Context
DESCRIPTION: Demonstrates how to manually push an application context using the app.app_context() method in a with block, allowing code within the block to access current_app. This example shows initializing a database during app creation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/appcontext.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
def create_app():
    app = Flask(__name__)

    with app.app_context():
        init_db()

    return app
```

----------------------------------------

TITLE: Generating URLs for Blueprint Views in Flask
DESCRIPTION: Shows how to generate URLs for views that are part of a blueprint in Flask. The blueprint name is prepended to the function name when using url_for.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_8

LANGUAGE: python
CODE:
```
url_for('auth.login')
```

----------------------------------------

TITLE: Testing Functions with Active Context
DESCRIPTION: Demonstrates creating application and request contexts for testing functions that depend on Flask context-local objects like current_app, request, and session.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
def test_db_post_model(app):
    with app.app_context():
        post = db.session.query(Post).get(1)

def test_validate_user_edit(app):
    with app.test_request_context(
        "/user/2/edit", method="POST", data={"name": ""}
    ):
        # call a function that accesses `request`
        messages = validate_edit_user()

    assert messages["name"][0] == "Name cannot be empty."
```

----------------------------------------

TITLE: Passing Data to Celery Tasks
DESCRIPTION: This Python code snippet defines a task that accepts a user ID and fetches the user object from the database to create an archive. It demonstrates passing simple data types to tasks to avoid serialization issues.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_10

LANGUAGE: python
CODE:
```
@shared_task
def generate_user_archive(user_id: str) -> None:
    user = db.session.get(User, user_id)
    ...

generate_user_archive.delay(current_user.id)
```

----------------------------------------

TITLE: Loading Flask Configuration from Environment Variables
DESCRIPTION: Demonstrates how to load Flask configuration from environment variables with a specific prefix using the from_prefixed_env method.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
app.config.from_prefixed_env()
app.config["SECRET_KEY"]  # Is "5f352379324c22463451387a0aec5d2f"
```

----------------------------------------

TITLE: Advanced Flask Configuration for External Debuggers with Error Passthrough
DESCRIPTION: Python code that configures Flask for external debuggers with error passthrough, allowing unhandled exceptions to propagate to the external debugger rather than being caught by the development server.
SOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
app.run(
    debug=True, passthrough_errors=True,
    use_debugger=False, use_reloader=False
)
```

----------------------------------------

TITLE: Implementing Form Validation in Flask View - Python
DESCRIPTION: This snippet shows how to integrate a WTForms-defined form into a Flask view function, handling POST requests for form submission and validating form data. Dependencies include Flask and WTForms.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/wtforms.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm(request.form)
    if request.method == 'POST' and form.validate():
        user = User(form.username.data, form.email.data,
                    form.password.data)
        db_session.add(user)
        flash('Thanks for registering')
        return redirect(url_for('login'))
    return render_template('register.html', form=form)
```

----------------------------------------

TITLE: Implementing ProxyFix Middleware for Flask Behind a Proxy
DESCRIPTION: This code snippet demonstrates how to wrap a Flask application with Werkzeug's ProxyFix middleware to handle X-Forwarded headers. It configures the middleware to trust one proxy for forwarded client IP, protocol, host, and path prefix information.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/proxy_fix.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from werkzeug.middleware.proxy_fix import ProxyFix

app.wsgi_app = ProxyFix(
    app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1
)
```

----------------------------------------

TITLE: Streaming with Request Context in Flask
DESCRIPTION: Example of using stream_with_context to maintain the request context while streaming data. This allows access to request data within the generator function that produces the streamed response.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/streaming.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
from flask import stream_with_context, request
from markupsafe import escape

@app.route('/stream')
def streamed_response():
    def generate():
        yield '<p>Hello '
        yield escape(request.args['name'])
        yield '!</p>'
    return stream_with_context(generate())
```

----------------------------------------

TITLE: Registering Error Handlers in Flask
DESCRIPTION: Two examples of registering an error handler for Bad Request (400) errors, using both decorator and direct registration approaches.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
@app.errorhandler(werkzeug.exceptions.BadRequest)
def handle_bad_request(e):
    return 'bad request!', 400

# or, without the decorator
app.register_error_handler(400, handle_bad_request)
```

----------------------------------------

TITLE: Layout Template with Flash Message Rendering
DESCRIPTION: Implements a Jinja2 layout template that retrieves and displays flash messages across all pages using get_flashed_messages() function.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#2025-04-20_snippet_1

LANGUAGE: html+jinja
CODE:
```
<!doctype html>
<title>My Application</title>
{% with messages = get_flashed_messages() %}
  {% if messages %}
    <ul class=flashes>
    {% for message in messages %}
      <li>{{ message }}</li>
    {% endfor %}
    </ul>
  {% endif %}
{% endwith %}
{% block body %}{% endblock %}
```

----------------------------------------

TITLE: Registering Internal Server Error Handler in App Factory
DESCRIPTION: Illustrates how to register a 500 error handler in a Flask app created via an app factory pattern. The 'internal_server_error' function is linked to 500 errors during the creation process.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_12

LANGUAGE: python
CODE:
```
from flask import Flask, render_template

def internal_server_error(e):
  return render_template('500.html'), 500

def create_app():
    app = Flask(__name__)
    app.register_error_handler(500, internal_server_error)
    return app
```

----------------------------------------

TITLE: Logging Before Template Rendering with Flask Signals
DESCRIPTION: Example of using Flask's before_render_template signal to log information before template rendering begins. This subscriber will be called just before any template rendering process starts.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
def log_template_renders(sender, template, context, **extra):
    sender.logger.debug('Rendering template "%s" with context %s',
                        template.name or 'string template',
                        context)

from flask import before_render_template
before_render_template.connect(log_template_renders, app)
```

----------------------------------------

TITLE: Using Embedded Documents in MongoEngine
DESCRIPTION: Demonstrates the use of embedded documents to represent nested data in MongoEngine. Declares fields within EmbeddedDocument and uses EmbeddedDocumentField in the main document.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#2025-04-20_snippet_3

LANGUAGE: Python
CODE:
```
class Imdb(me.EmbeddedDocument):
    imdb_id = me.StringField()
    rating = me.DecimalField()
    votes = me.IntField()

class Movie(me.Document):
    ...
    imdb = me.EmbeddedDocumentField(Imdb)
```

----------------------------------------

TITLE: Registering Database Functions with Flask Application
DESCRIPTION: This function registers the database close function and CLI command with the Flask application. It uses Flask's teardown_appcontext and cli.add_command methods for integration.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
def init_app(app):
    app.teardown_appcontext(close_db)
    app.cli.add_command(init_db_command)
```

----------------------------------------

TITLE: Emailing Errors to Admins with SMTPHandler in Flask
DESCRIPTION: This snippet demonstrates how to configure an SMTPHandler to send email notifications when errors or higher severity messages are logged.  It sets up the handler with the SMTP server details, the sender and recipient addresses, and the subject of the email. The handler is added to the application logger if the app is not in debug mode. Dependencies: logging, logging.handlers.SMTPHandler, Flask.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
 "import logging
    from logging.handlers import SMTPHandler

    mail_handler = SMTPHandler(
        mailhost='127.0.0.1',
        fromaddr='server-error@example.com',
        toaddrs=['admin@example.com'],
        subject='Application Error'
    )
    mail_handler.setLevel(logging.ERROR)
    mail_handler.setFormatter(logging.Formatter(
        '[%(asctime)s] %(levelname)s in %(module)s: %(message)s'
    ))

    if not app.debug:
        app.logger.addHandler(mail_handler)"
```

----------------------------------------

TITLE: Registering Flask Blueprints with a URL Prefix
DESCRIPTION: Demonstrates how to register a blueprint with a specific URL prefix. This allows mounting the blueprint at a different location in the URL hierarchy.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_2

LANGUAGE: Python
CODE:
```
app.register_blueprint(simple_page, url_prefix='/pages')
```

----------------------------------------

TITLE: Fetching JSON data with JavaScript
DESCRIPTION: This JavaScript snippet shows how to use the `fetch` API to make a GET request to a Flask endpoint that returns JSON data. It demonstrates how to parse the JSON response and use the data in a callback function.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_5

LANGUAGE: javascript
CODE:
```
const room_url = {{ url_for("room_detail", id=room.id)|tojson }}
fetch(room_url)
    .then(response => response.json())
    .then(data => {
        // data is a parsed JSON object
    })
```

----------------------------------------

TITLE: Enabling Debug Mode in Flask Application Code
DESCRIPTION: Python code to enable debug mode when running a Flask application programmatically. This is equivalent to using the --debug flag with the command line.
SOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
app.run(debug=True)
```

----------------------------------------

TITLE: Blueprint Error Handler for Internal Server Errors
DESCRIPTION: Demonstrates the use of a blueprint-specific error handler for 500 Internal Server Errors in a Flask app, where it can be applied using decorators or explicit registration.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_13

LANGUAGE: python
CODE:
```
from flask import Blueprint

blog = Blueprint('blog', __name__)

# as a decorator
@blog.errorhandler(500)
def internal_server_error(e):
    return render_template('500.html'), 500

# or with register_error_handler
blog.register_error_handler(500, internal_server_error)
```

----------------------------------------

TITLE: Externally Visible Flask Server
DESCRIPTION: This snippet shows how to make the Flask development server externally visible by adding `--host=0.0.0.0` to the `flask run` command.  This configures the server to listen on all public IPs. It makes the server accessible from other machines on the network, which is helpful for debugging and development.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_2

LANGUAGE: text
CODE:
```
$ flask run --host=0.0.0.0
```

----------------------------------------

TITLE: Creating a Base Template with Blocks in Jinja2
DESCRIPTION: This HTML+Jinja2 code defines a base template (layout.html) with block tags that child templates can override. It creates a skeleton HTML document with blocks for head content, title, main content, and footer that can be customized in child templates.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/templateinheritance.rst#2025-04-20_snippet_0

LANGUAGE: html+jinja
CODE:
```
<!doctype html>
<html>
  <head>
    {% block head %}
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <title>{% block title %}{% endblock %} - My Webpage</title>
    {% endblock %}
  </head>
  <body>
    <div id="content">{% block content %}{% endblock %}</div>
    <div id="footer">
      {% block footer %}
      &copy; Copyright 2010 by <a href="http://domain.invalid/">you</a>.
      {% endblock %}
    </div>
  </body>
</html>
```

----------------------------------------

TITLE: Logging User Activity in Flask
DESCRIPTION: This snippet demonstrates how to log user login attempts (both successful and failed) using Flask's built-in logger. It retrieves user information from the request, checks the password, and logs an informational message based on the authentication result.  Dependencies: Flask, url_for, redirect, abort, get_user, login_user.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
"@app.route('/login', methods=['POST'])
    def login():
        user = get_user(request.form['username'])

        if user.check_password(request.form['password']):
            login_user(user)
            app.logger.info('%s logged in successfully', user.username)
            return redirect(url_for('index'))
        else:
            app.logger.info('%s failed to log in', user.username)
            abort(401)"
```

----------------------------------------

TITLE: Sending Form Data with JavaScript Fetch
DESCRIPTION: This JavaScript snippet demonstrates how to send form data using the `fetch` API with the POST method.  A `FormData` object is created and populated with data, then passed as the `body` option to the `fetch` function.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_6

LANGUAGE: javascript
CODE:
```
let data = new FormData()
data.append("name", "Flask Room")
data.append("description", "Talk about Flask here.")
fetch(room_url, {
    "method": "POST",
    "body": data,
}).then(...)
```

----------------------------------------

TITLE: Creating a New Blog Post in Flask
DESCRIPTION: The 'create' function handles both GET and POST requests for creating a new blog post. It uses 'login_required' as a decorator to enforce authentication. It validates inputs and interacts with the database to insert new records, and flashes errors if validation fails.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
@bp.route('/create', methods=('GET', 'POST'))
@login_required
def create():
    if request.method == 'POST':
        title = request.form['title']
        body = request.form['body']
        error = None

        if not title:
            error = 'Title is required.'

        if error is not None:
            flash(error)
        else:
            db = get_db()
            db.execute(
                'INSERT INTO post (title, body, author_id)'
                ' VALUES (?, ?, ?)',
                (title, body, g.user['id'])
            )
            db.commit()
            return redirect(url_for('blog.index'))

    return render_template('blog/create.html')

```

----------------------------------------

TITLE: Creating Request Context in Flask Shell - Python
DESCRIPTION: This snippet demonstrates how to create and activate a RequestContext manually using Flask's test_request_context method. It shows how to push and pop the context in a Python shell, which enables access to request-specific variables while testing or programming interactively.
SOURCE: https://github.com/pallets/flask/blob/main/docs/shell.rst#2025-04-20_snippet_0

LANGUAGE: Python
CODE:
```
>>> ctx = app.test_request_context()
>>> ctx.push()
>>> ctx.pop()
```

----------------------------------------

TITLE: Initializing a Flask Extension with init_app
DESCRIPTION: This code snippet demonstrates the basic structure of a Flask extension class. It includes an `__init__` method that optionally accepts a Flask application instance and an `init_app` method to perform extension-specific initialization tasks. The `init_app` function configures the application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
class HelloExtension:
    def __init__(self, app=None):
        if app is not None:
            self.init_app(app)

    def init_app(self, app):
        app.before_request(...)
```

----------------------------------------

TITLE: Defining Template Folders for Blueprints
DESCRIPTION: Shows how to make a blueprint expose templates by providing the template_folder parameter. This allows blueprints to render their own templates.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_9

LANGUAGE: Python
CODE:
```
admin = Blueprint('admin', __name__, template_folder='templates')
```

----------------------------------------

TITLE: Supporting Async Functions in Flask Extensions
DESCRIPTION: This code snippet demonstrates how Flask extension authors can support async functions by utilizing the `flask.Flask.ensure_sync` method. The example shows a decorator (`extension`) that wraps a function (`func`), adds extension-specific logic, and then calls the decorated function using `current_app.ensure_sync`. This ensures that the extension logic works correctly with both synchronous and asynchronous view functions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/async-await.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
    def extension(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            ...  # Extension logic
            return current_app.ensure_sync(func)(*args, **kwargs)

        return wrapper
```

----------------------------------------

TITLE: Using the SQLAlchemy SQL Abstraction Layer
DESCRIPTION: This snippet illustrates the setup and basic usage of SQLAlchemy's SQL abstraction layer to interact with a database. It shows engine creation, metadata binding, and table interaction, including data insertion and querying.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#2025-04-20_snippet_5

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine, MetaData, Table

engine = create_engine('sqlite:////tmp/test.db')
metadata = MetaData(bind=engine)

from sqlalchemy import Table

users = Table('users', metadata, autoload=True)
```

----------------------------------------

TITLE: Initializing Authentication Blueprint in Flask
DESCRIPTION: Creates a Blueprint named 'auth' for handling authentication-related routes with a URL prefix of '/auth'. Imports necessary Flask components and security utilities.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
import functools

from flask import (
    Blueprint, flash, g, redirect, render_template, request, session, url_for
)
from werkzeug.security import check_password_hash, generate_password_hash

from flaskr.db import get_db

bp = Blueprint('auth', __name__, url_prefix='/auth')
```

----------------------------------------

TITLE: Sending JSON Data with JavaScript Fetch
DESCRIPTION: This JavaScript snippet shows how to send JSON data using the `fetch` API with the POST method. It demonstrates how to serialize the data using `JSON.stringify()` and set the `Content-Type` header to `application/json`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_7

LANGUAGE: javascript
CODE:
```
let data = {
    "name": "Flask Room",
    "description": "Talk about Flask here.",
}
fetch(room_url, {
    "method": "POST",
    "headers": {"Content-Type": "application/json"},
    "body": JSON.stringify(data),
}).then(...)
```

----------------------------------------

TITLE: Handling Redirects in JavaScript Fetch
DESCRIPTION: This JavaScript snippet demonstrates how to handle redirects in a `fetch` response. It checks the `response.redirected` property and, if true, redirects the page using `window.location = response.url`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_8

LANGUAGE: javascript
CODE:
```
fetch("/login", {"body": ...}).then(
    response => {
        if (response.redirected) {
            window.location = response.url
        } else {
            showLoginError()
        }
    }
)
```

----------------------------------------

TITLE: Implementing URL Value Preprocessor for Language Code Extraction
DESCRIPTION: This URL value preprocessor extracts the language code from URL values and stores it in the g object. This eliminates the need to manually assign the language code in each route function.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/urlprocessors.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
@app.url_value_preprocessor
def pull_lang_code(endpoint, values):
    g.lang_code = values.pop('lang_code', None)
```

----------------------------------------

TITLE: Generating URLs for Nested Blueprints
DESCRIPTION: Demonstrates how to generate URLs for views in nested blueprints using url_for. The endpoint name includes both parent and child blueprint names.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_4

LANGUAGE: Python
CODE:
```
url_for('parent.child.create')
/parent/child/create
```

----------------------------------------

TITLE: Loading Flask Configuration from TOML File
DESCRIPTION: Demonstrates how to load Flask configuration from a TOML file using the from_file method and the tomllib library.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
import tomllib
app.config.from_file("config.toml", load=tomllib.load, text=False)
```

----------------------------------------

TITLE: Creating Flask App with Celery using Factory Pattern
DESCRIPTION: This Python snippet demonstrates using the Flask application factory pattern to create and configure a Flask app instance with Celery. It assigns the Celery app as an extension, enabling background task handling.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
def create_app() -> Flask:
    app = Flask(__name__)
    app.config.from_mapping(
        CELERY=dict(
            broker_url="redis://localhost",
            result_backend="redis://localhost",
            task_ignore_result=True,
        ),
    )
    app.config.from_prefixed_env()
    celery_init_app(app)
    return app
```

----------------------------------------

TITLE: Stories API Endpoints
DESCRIPTION: REST API routes for managing stories. Provides endpoints for listing all stories, creating new stories, viewing individual stories, updating existing stories, and deleting stories. Uses standard HTTP methods GET, POST, PATCH and DELETE.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_7

LANGUAGE: rest
CODE:
```
/stories/     GET    List all stories
/stories/     POST   Create a new story
/stories/<id> GET    Show a single story
/stories/<id> PATCH  Update a story
/stories/<id> DELETE Delete a story
```

----------------------------------------

TITLE: Initializing database with schema
DESCRIPTION: Provides a function to initialize the database using a schema file. This pattern is useful for setting up the initial database structure from a SQL script.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_8

LANGUAGE: python
CODE:
```
def init_db():
    with app.app_context():
        db = get_db()
        with app.open_resource('schema.sql', mode='r') as f:
            db.cursor().executescript(f.read())
        db.commit()
```

----------------------------------------

TITLE: Applying Decorators to Class-based Views in Flask
DESCRIPTION: This example demonstrates how to apply decorators to class-based views using the decorators class attribute.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
class UserList(View):
    decorators = [cache(minutes=2), login_required]

app.add_url_rule('/users/', view_func=UserList.as_view())
```

----------------------------------------

TITLE: Configuring Flask to Serve a Single-Page Application with API Endpoints
DESCRIPTION: This code demonstrates how to set up a Flask application that serves both a Single-Page Application and API endpoints. It configures static file serving for the SPA assets, includes a sample API endpoint (/heartbeat), and creates a catch-all route to handle SPA navigation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/singlepageapplications.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from flask import Flask, jsonify

app = Flask(__name__, static_folder='app', static_url_path="/app")


@app.route("/heartbeat")
def heartbeat():
    return jsonify({"status": "healthy"})


@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def catch_all(path):
    return app.send_static_file("index.html")
```

----------------------------------------

TITLE: Testing Logout Functionality in Flask Authentication System
DESCRIPTION: Tests the logout functionality of a Flask authentication system by verifying that the user_id is removed from the session after logout.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_8

LANGUAGE: python
CODE:
```
def test_logout(client, auth):
    auth.login()

    with client:
        auth.logout()
        assert 'user_id' not in session
```

----------------------------------------

TITLE: Decorator Based Signal Subscription
DESCRIPTION: This snippet shows how to subscribe to a signal using the `connect_via` decorator. The decorated function will be called whenever the `template_rendered` signal is emitted by the specified sender (`app`).  The function receives the sender, template, context and extra arguments.
SOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
"from flask import template_rendered

@template_rendered.connect_via(app)
def when_template_rendered(sender, template, context, **extra):
    print(f'Template {template.name} is rendered with {context}')"
```

----------------------------------------

TITLE: Register Template
DESCRIPTION: This Jinja template extends the `base.html` template and defines the content for the user registration page. It includes a form with fields for username and password, both marked as required. The template overrides the `header` and `content` blocks from the base template.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/templates.rst#2025-04-20_snippet_1

LANGUAGE: html+jinja
CODE:
```
"{% extends 'base.html' %}\n\n{% block header %}\n  <h1>{% block title %}Register{% endblock %}</h1>\n{% endblock %}\n\n{% block content %}\n  <form method=\"post\">\n    <label for=\"username\">Username</label>\n    <input name=\"username\" id=\"username\" required>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" required>\n    <input type=\"submit\" value=\"Register\">\n  </form>\n{% endblock %}\n"
```

----------------------------------------

TITLE: Complete Flask Application with URL Processors for Internationalization
DESCRIPTION: This complete example shows a Flask application with both URL defaults and URL value preprocessors implemented. The route functions no longer need to handle the language code parameter directly, as it's automatically extracted and stored in g.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/urlprocessors.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
from flask import Flask, g

app = Flask(__name__)

@app.url_defaults
def add_language_code(endpoint, values):
    if 'lang_code' in values or not g.lang_code:
        return
    if app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):
        values['lang_code'] = g.lang_code

@app.url_value_preprocessor
def pull_lang_code(endpoint, values):
    g.lang_code = values.pop('lang_code', None)

@app.route('/<lang_code>/')
def index():
    ...

@app.route('/<lang_code>/about')
def about():
    ...
```

----------------------------------------

TITLE: Creating a Child Template that Extends a Base Template in Jinja2
DESCRIPTION: This HTML+Jinja2 code demonstrates a child template that extends the base layout.html template. It overrides the title, head, and content blocks while using super() to include the parent's head block content. The template adds custom CSS and welcome content.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/templateinheritance.rst#2025-04-20_snippet_1

LANGUAGE: html+jinja
CODE:
```
{% extends "layout.html" %}
{% block title %}Index{% endblock %}
{% block head %}
  {{ super() }}
  <style type="text/css">
    .important { color: #336699; }
  </style>
{% endblock %}
{% block content %}
  <h1>Index</h1>
  <p class="important">
    Welcome on my awesome homepage.
{% endblock %}
```

----------------------------------------

TITLE: Creating URL Defaults Function for Language Code Injection
DESCRIPTION: This snippet defines a url_defaults function that automatically injects language codes into URL generation. It checks if the endpoint expects a lang_code parameter and injects the value from g.lang_code when appropriate.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/urlprocessors.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
@app.url_defaults
def add_language_code(endpoint, values):
    if 'lang_code' in values or not g.lang_code:
        return
    if app.url_map.is_endpoint_expecting(endpoint, 'lang_code'):
        values['lang_code'] = g.lang_code
```

----------------------------------------

TITLE: Testing Blog Post Deletion in Flask Application
DESCRIPTION: Tests deleting a blog post, verifying that the user is redirected to the index page and that the post is removed from the database after deletion.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_12

LANGUAGE: python
CODE:
```
def test_delete(client, auth, app):
    auth.login()
    response = client.post('/1/delete')
    assert response.headers["Location"] == "/"

    with app.app_context():
        db = get_db()
        post = db.execute('SELECT * FROM post WHERE id = 1').fetchone()
        assert post is None
```

----------------------------------------

TITLE: Loading Flask Configuration from JSON File
DESCRIPTION: Shows how to load Flask configuration from a JSON file using the from_file method and the json library.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
import json
app.config.from_file("config.json", load=json.load)
```

----------------------------------------

TITLE: Loading Flask Configuration from Python Files
DESCRIPTION: Demonstrates how to load Flask configuration from a separate Python file and an environment variable. This allows for flexible configuration management across different deployments.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
app = Flask(__name__)
app.config.from_object('yourapplication.default_settings')
app.config.from_envvar('YOURAPPLICATION_SETTINGS')
```

----------------------------------------

TITLE: Generating URL with Jinja and Flask's url_for
DESCRIPTION: This JavaScript snippet shows how to generate a URL using Flask's `url_for` function within a Jinja template and pass it to Javascript.  The `tojson` filter is applied to ensure the generated URL is properly escaped for use in JavaScript.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_3

LANGUAGE: javascript
CODE:
```
const user_url = {{ url_for("user", id=current_user.id)|tojson }}
fetch(user_url).then(...)
```

----------------------------------------

TITLE: Implementing Internationalized URLs with Flask Blueprints
DESCRIPTION: This example shows how to implement internationalized URLs using Flask blueprints. Blueprints simplify the process by automatically prefixing all URLs with the language code and providing per-blueprint URL processors.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/urlprocessors.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
from flask import Blueprint, g

bp = Blueprint('frontend', __name__, url_prefix='/<lang_code>')

@bp.url_defaults
def add_language_code(endpoint, values):
    values.setdefault('lang_code', g.lang_code)

@bp.url_value_preprocessor
def pull_lang_code(endpoint, values):
    g.lang_code = values.pop('lang_code')

@bp.route('/')
def index():
    ...

@bp.route('/about')
def about():
    ...
```

----------------------------------------

TITLE: Simulating Requests with Flask Test Client Python
DESCRIPTION: This code snippet shows how to use Flask's test request context to simulate a request for testing purposes. It allows testing view functions with specified parameters inside a with block.
SOURCE: https://github.com/pallets/flask/blob/main/docs/reqcontext.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
def generate_report(year):
    format = request.args.get("format")
    ...

with app.test_request_context(
    "/make_report/2017", query_string={"format": "short"}
):
    generate_report()
```

----------------------------------------

TITLE: Generating URLs for Static Files in Flask
DESCRIPTION: Example of using Flask's url_for function to generate URLs for static files. The 'static' endpoint name is a special endpoint that Flask provides for serving static files from the static directory.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_11

LANGUAGE: python
CODE:
```
url_for('static', filename='style.css')
```

----------------------------------------

TITLE: Generating URL Dynamically in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to generate a URL dynamically within JavaScript code, using a global `SCRIPT_ROOT` variable passed from the template. This is useful when the URL depends on information only available in the browser.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_4

LANGUAGE: javascript
CODE:
```
const SCRIPT_ROOT = {{ request.script_root|tojson }}
let user_id = ...  // do something to get a user id from the page
let user_url = `${SCRIPT_ROOT}/user/${user_id}`
fetch(user_url).then(...)
```

----------------------------------------

TITLE: Querying Documents with MongoEngine
DESCRIPTION: Explains how to retrieve MongoDB documents using MongoEngine. Utilizes the 'objects' attribute on the document class to find records matching specified criteria, supports query operators like '__in' and '__gte'.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#2025-04-20_snippet_5

LANGUAGE: Python
CODE:
```
bttf = Movie.objects(title="Back To The Future").get_or_404()
```

LANGUAGE: Python
CODE:
```
some_theron_movie = Movie.objects(actors__in=["Charlize Theron"]).first()

for recents in Movie.objects(year__gte=2017):
    print(recents.title)
```

----------------------------------------

TITLE: Using MarkupSafe for HTML Escaping in Flask
DESCRIPTION: Examples of using the MarkupSafe library's Markup class to work with HTML content safely. This demonstrates how to mark content as safe HTML, escape HTML, and strip HTML tags when needed.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_14

LANGUAGE: python
CODE:
```
>>> from markupsafe import Markup
>>> Markup('<strong>Hello %s!</strong>') % '<blink>hacker</blink>'
Markup('<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>')
>>> Markup.escape('<blink>hacker</blink>')
Markup('&lt;blink&gt;hacker&lt;/blink&gt;')
>>> Markup('<em>Marked up</em> &raquo; HTML').striptags()
'Marked up » HTML'
```

----------------------------------------

TITLE: Configuring Flask Route Options and Methods
DESCRIPTION: Example demonstrating how to customize a Flask route's HTTP methods and automatic OPTIONS handling. Shows setting method attributes and disabling automatic OPTIONS response generation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_10

LANGUAGE: python
CODE:
```
def index():
    if request.method == 'OPTIONS':
        # custom options handling here
        ...
    return 'Hello World!'
index.provide_automatic_options = False
index.methods = ['GET', 'OPTIONS']

app.add_url_rule('/', index)
```

----------------------------------------

TITLE: Creating HTTP Method Override Middleware in Python
DESCRIPTION: This code defines a middleware class `HTTPMethodOverrideMiddleware` that enables the use of HTTP method overrides by intercepting requests and modifying the request method based on the `X-HTTP-Method-Override` header. It checks against allowed and bodyless methods and modifies the `CONTENT_LENGTH` accordingly.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/methodoverrides.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
class HTTPMethodOverrideMiddleware(object):
    allowed_methods = frozenset([
        'GET',
        'HEAD',
        'POST',
        'DELETE',
        'PUT',
        'PATCH',
        'OPTIONS'
    ])
    bodyless_methods = frozenset(['GET', 'HEAD', 'OPTIONS', 'DELETE'])

    def __init__(self, app):
        self.app = app

    def __call__(self, environ, start_response):
        method = environ.get('HTTP_X_HTTP_METHOD_OVERRIDE', '').upper()
        if method in self.allowed_methods:
            environ['REQUEST_METHOD'] = method
        if method in self.bodyless_methods:
            environ['CONTENT_LENGTH'] = '0'
        return self.app(environ, start_response)
```

----------------------------------------

TITLE: Proper Extension Initialization in Flask Model
DESCRIPTION: The recommended approach for initializing extensions where the extension object is created without binding to a specific app, allowing it to be used with multiple application instances.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
db = SQLAlchemy()
```

----------------------------------------

TITLE: Basic Flask Decorator Route Example
DESCRIPTION: Demonstrates the traditional Flask decorator-based routing approach with two route examples.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from flask import Flask
app = Flask(__name__)

@app.route('/')
def index():
    pass

@app.route('/user/<username>')
def user(username):
    pass
```

----------------------------------------

TITLE: Defining Static Files for Blueprints
DESCRIPTION: Demonstrates how to expose a folder with static files in a blueprint by providing the static_folder parameter. This allows blueprints to serve their own static files.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_7

LANGUAGE: Python
CODE:
```
admin = Blueprint('admin', __name__, static_folder='static')
```

----------------------------------------

TITLE: Importing Database Module in Flask Application Factory
DESCRIPTION: This code snippet shows how to import and initialize the database module within the Flask application factory function. It demonstrates the integration of the database setup with the main application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
def create_app():
    app = ...
    # existing code omitted

    from . import db
    db.init_app(app)

    return app
```

----------------------------------------

TITLE: Using stream_with_context as a Decorator in Flask
DESCRIPTION: Example of using stream_with_context as a decorator for a generator function. This is an alternative syntax for maintaining request context while streaming data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/streaming.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
@stream_with_context
def generate():
    ...

return generate()
```

----------------------------------------

TITLE: Creating Custom HTTP Exception Classes in Flask
DESCRIPTION: Example of defining a custom HTTP exception class (InsufficientStorage) with a non-standard HTTP code (507), registering a handler for it, and raising the exception.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
class InsufficientStorage(werkzeug.exceptions.HTTPException):
    code = 507
    description = 'Not enough storage space.'

app.register_error_handler(InsufficientStorage, handle_507)

raise InsufficientStorage()
```

----------------------------------------

TITLE: Implementing Basic Internationalized Routes in Flask
DESCRIPTION: This code demonstrates a basic Flask application with internationalized routes that manually handle language codes. Each route function must explicitly store the language code in the g object, showing the repetitive pattern that URL processors aim to solve.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/urlprocessors.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from flask import Flask, g

app = Flask(__name__)

@app.route('/<lang_code>/')
def index(lang_code):
    g.lang_code = lang_code
    ...

@app.route('/<lang_code>/about')
def about(lang_code):
    g.lang_code = lang_code
    ...
```

----------------------------------------

TITLE: Sending Form Data in Test Request
DESCRIPTION: Shows how to send form data including file uploads using the test client. Demonstrates using pathlib to reference test resource files and posting form data with file attachments.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
from pathlib import Path

# get the resources folder in the tests folder
resources = Path(__file__).parent / "resources"

def test_edit_user(client):
    response = client.post("/user/2/edit", data={
        "name": "Flask",
        "theme": "dark",
        "picture": (resources / "picture.png").open("rb"),
    })
    assert response.status_code == 200
```

----------------------------------------

TITLE: Using database connection outside request context
DESCRIPTION: Demonstrates how to use the database connection outside a request context by manually creating an application context. This is useful for scripts or shell interactions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
with app.app_context():
    # now you can use get_db()
```

----------------------------------------

TITLE: Rendering a Registration Form in a Template - HTML+Jinja2
DESCRIPTION: This HTML+Jinja2 snippet demonstrates how to utilize a defined macro to render a registration form within a template. It illustrates integrating WTForms and Jinja2 for streamlined HTML generation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/wtforms.rst#2025-04-20_snippet_3

LANGUAGE: html+jinja
CODE:
```
{% from "_formhelpers.html" import render_field %}
<form method=post>
  <dl>
    {{ render_field(form.username) }}
    {{ render_field(form.email) }}
    {{ render_field(form.password) }}
    {{ render_field(form.confirm) }}
    {{ render_field(form.accept_tos) }}
  </dl>
  <p><input type=submit value=Register>
</form>
```

----------------------------------------

TITLE: Adding App Context to Custom CLI Commands
DESCRIPTION: This snippet illustrates the use of app context with custom commands in Flask using the `with_appcontext` decorator. It allows access to the application context parameters when executing commands.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_8

LANGUAGE: python
CODE:
```
import click
from flask.cli import with_appcontext

@click.command()
@with_appcontext
def do_work():
    ...

app.cli.add_command(do_work)
```

----------------------------------------

TITLE: Configuring Test Fixtures in Flask
DESCRIPTION: Python code setting up test fixtures including app configuration, client setup, and CLI runner for testing.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
import os
import tempfile

import pytest
from flaskr import create_app
from flaskr.db import get_db, init_db

with open(os.path.join(os.path.dirname(__file__), 'data.sql'), 'rb') as f:
    _data_sql = f.read().decode('utf8')


@pytest.fixture
def app():
    db_fd, db_path = tempfile.mkstemp()

    app = create_app({
        'TESTING': True,
        'DATABASE': db_path,
    })

    with app.app_context():
        init_db()
        get_db().executescript(_data_sql)

    yield app

    os.close(db_fd)
    os.unlink(db_path)


@pytest.fixture
def client(app):
    return app.test_client()


@pytest.fixture
def runner(app):
    return app.test_cli_runner()
```

----------------------------------------

TITLE: Calling database initialization from shell
DESCRIPTION: Shows how to initialize the database by calling the init_db function from a Python shell. This is typically done during application setup or testing.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_9

LANGUAGE: python
CODE:
```
>>> from yourapplication import init_db
>>> init_db()
```

----------------------------------------

TITLE: Template Rendering Capture with Context Manager
DESCRIPTION: This code snippet demonstrates how to create a context manager in Python to capture template rendering events in a Flask application. It uses the `template_rendered` signal to record the template and context whenever a template is rendered within the context. The `captured_templates` context manager connects to the `template_rendered` signal when entering the `with` statement and disconnects when exiting. It yields a list of (template, context) tuples.
SOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
"from flask import template_rendered
from contextlib import contextmanager

@contextmanager
def captured_templates(app):
    recorded = []
    def record(sender, template, context, **extra):
        recorded.append((template, context))
    template_rendered.connect(record, app)
    try:
        yield recorded
    finally:
        template_rendered.disconnect(record, app)"
```

----------------------------------------

TITLE: Initializing Flask Application in Python
DESCRIPTION: Defines the Flask application object and imports view modules in `__init__.py`, ensuring proper import order to avoid circular dependencies.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
from flask import Flask
app = Flask(__name__)

import yourapplication.views
```

----------------------------------------

TITLE: Adding Context Processors to Flask Templates
DESCRIPTION: This snippet illustrates how to create a context processor to inject variables or functions into the Jinja2 template context. The example injects a user variable and a format_price function.
SOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
@app.context_processor
def inject_user():
    return dict(user=g.user)
```

LANGUAGE: python
CODE:
```
@app.context_processor
 def utility_processor():
    def format_price(amount, currency="€"):
        return f"{amount:.2f}{currency}"
    return dict(format_price=format_price)
```

----------------------------------------

TITLE: Adding data to HTML data attribute with Jinja
DESCRIPTION: This Jinja template snippet shows how to add data to a `data-` attribute on an HTML tag using the `tojson` filter.  Single quotes must be used around the value to avoid invalid or unsafe HTML.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_2

LANGUAGE: jinja
CODE:
```
<div data-chart='{{ chart_data|tojson }}'></div>
```

----------------------------------------

TITLE: Centralized URL Mapping Setup
DESCRIPTION: Example of setting up Flask application with centralized URL mapping using add_url_rule.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
from flask import Flask
from yourapplication import views
app = Flask(__name__)
app.add_url_rule('/', view_func=views.index)
app.add_url_rule('/user/<username>', view_func=views.user)
```

----------------------------------------

TITLE: WSGI Script for Flask Application Factory Pattern
DESCRIPTION: Example of a WSGI script file that uses the Flask application factory pattern. This approach calls a function that creates and returns the Flask application instance.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/mod_wsgi.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
from hello import create_app

application = create_app()
```

----------------------------------------

TITLE: Running Flask Factory Applications with CLI
DESCRIPTION: Command line examples showing how to run Flask applications that use the factory pattern, including how to pass arguments to the factory function.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#2025-04-20_snippet_5

LANGUAGE: bash
CODE:
```
$ flask --app hello run
```

LANGUAGE: bash
CODE:
```
$ flask --app 'hello:create_app(local_auth=True)' run
```

----------------------------------------

TITLE: Creating a Direct Favicon Serving Route in Flask
DESCRIPTION: This snippet shows how to create a Flask route that directly serves the favicon file using send_from_directory. It includes the optional mimetype specification to avoid content-type guessing by the server.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/favicon.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
import os
from flask import send_from_directory

@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                               'favicon.ico', mimetype='image/vnd.microsoft.icon')
```

----------------------------------------

TITLE: Cookie Setting in Flask
DESCRIPTION: Demonstrates how to set cookies in a Flask response object.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_22

LANGUAGE: python
CODE:
```
from flask import make_response

@app.route('/')
def index():
    resp = make_response(render_template(...))
    resp.set_cookie('username', 'the username')
    return resp
```

----------------------------------------

TITLE: Adding Command Create-User with Flask CLI using Click
DESCRIPTION: This snippet defines a Flask command named 'create-user', which takes an argument 'name' for creating a user. The command is integrated with Flask's CLI using the Click library, allowing for user creation through the command line.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
import click
from flask import Flask

app = Flask(__name__)

@app.cli.command("create-user")
@click.argument("name")
def create_user(name):
    ...
```

----------------------------------------

TITLE: Filtering Flash Messages by Category
DESCRIPTION: Shows how to filter and render flash messages of specific categories using the category_filter parameter.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#2025-04-20_snippet_3

LANGUAGE: html+jinja
CODE:
```
{% with errors = get_flashed_messages(category_filter=["error"]) %}
{% if errors %}
<div class="alert-message block-message error">
  <a class="close" href="#">×</a>
  <ul>
    {%- for msg in errors %}
    <li>{{ msg }}</li>
    {% endfor -%}
  </ul>
</div>
{% endif %}
{% endwith %}
```

----------------------------------------

TITLE: Disabling Autoescaping in Jinja2 Templates
DESCRIPTION: This snippet demonstrates how to disable autoescaping in Jinja2 templates by using a specific block. It highlights the need for caution with variables.
SOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#2025-04-20_snippet_0

LANGUAGE: html+jinja
CODE:
```
{% autoescape false %}
        <p>autoescaping is disabled here
        <p>{{ will_not_be_escaped }}
    {% endautoescape %}
```

----------------------------------------

TITLE: Defining Custom Click Scripts for Flask Applications
DESCRIPTION: This snippet outlines how to create a custom Click script for a Flask application to manage commands without using the built-in Flask command loader. It illustrates the setup for a management script via an entry point.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_9

LANGUAGE: python
CODE:
```
import click
from flask import Flask
from flask.cli import FlaskGroup

def create_app():
    app = Flask('wiki')
    # other setup
    return app

@click.group(cls=FlaskGroup, create_app=create_app)
def cli():
    """Management script for the Wiki application."""
```

----------------------------------------

TITLE: Updating an Existing Blog Post in Flask
DESCRIPTION: This snippet updates a post object based on form input. It requires a logged-in user, confirmed by the 'login_required' decorator, and uses a function 'get_post' to retrieve and validate post ownership. It commits changes to the database and redirects to the index page if successful.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
@bp.route('/<int:id>/update', methods=('GET', 'POST'))
@login_required
def update(id):
    post = get_post(id)

    if request.method == 'POST':
        title = request.form['title']
        body = request.form['body']
        error = None

        if not title:
            error = 'Title is required.'

        if error is not None:
            flash(error)
        else:
            db = get_db()
            db.execute(
                'UPDATE post SET title = ?, body = ?'
                ' WHERE id = ?',
                (title, body, id)
            )
            db.commit()
            return redirect(url_for('blog.index'))

    return render_template('blog/update.html', post=post)

```

----------------------------------------

TITLE: Registering CLI Commands with Flask Blueprints
DESCRIPTION: This snippet shows how to register CLI commands with Flask Blueprints, which allows related commands to be grouped under the blueprint's name. This helps to cleanly organize commands in larger applications.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
from flask import Blueprint

bp = Blueprint('students', __name__)

@bp.cli.command('create')
@click.argument('name')
def create(name):
    ...

app.register_blueprint(bp)
```

----------------------------------------

TITLE: Running Flask App with Gevent WSGIServer
DESCRIPTION: This Python code snippet demonstrates how to serve a Flask application using Gevent's WSGIServer. It imports the WSGIServer from gevent.pywsgi, creates a Flask app instance using a factory function, and then starts the server, listening on the specified host and port.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gevent.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
from gevent.pywsgi import WSGIServer
from hello import create_app

app = create_app()
http_server = WSGIServer(("127.0.0.1", 8000), app)
http_server.serve_forever()
```

----------------------------------------

TITLE: Initializing Flask Application
DESCRIPTION: This code snippet demonstrates how to initialize a basic Flask application. It imports the Flask class, creates an instance of it, configures a secret key, loads configurations from environment variables, and defines a simple route that returns "Hello, World!".
SOURCE: https://github.com/pallets/flask/blob/main/docs/lifecycle.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from flask import Flask

app = Flask(__name__)
app.config.from_mapping(
    SECRET_KEY="dev",
)
app.config.from_prefixed_env()

@app.route("/")
def index():
    return "Hello, World!"
```

----------------------------------------

TITLE: Testing Template Rendering
DESCRIPTION: This code snippet shows how to use the `captured_templates` context manager created in the previous snippet to test template rendering in a Flask application. It uses the `app.test_client()` to make a request and asserts that the correct template was rendered with the expected context.
SOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
"with captured_templates(app) as templates:
    rv = app.test_client().get('/')
    assert rv.status_code == 200
    assert len(templates) == 1
    template, context = templates[0]
    assert template.name == 'index.html'
    assert len(context['items']) == 10"
```

----------------------------------------

TITLE: Configuring Multiple Loggers Separately in Flask
DESCRIPTION: This snippet demonstrates how to configure multiple loggers separately by iterating through a list of loggers and adding handlers to each. This allows you to control the logging behavior of specific components of your application, e.g., app logger, sqlalchemy logger, other package logger. Dependencies: logging.getLogger, flask.logging.default_handler, Flask.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
 "for logger in (
        logging.getLogger(app.name),
        logging.getLogger('sqlalchemy'),
        logging.getLogger('other_package'),
    ):
        logger.addHandler(default_handler)
        logger.addHandler(mail_handler)"
```

----------------------------------------

TITLE: Accessing Blueprint Resource Folder
DESCRIPTION: Shows how to access resources from a blueprint's folder using the open_resource method, which is useful for reading files within the blueprint's directory.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_6

LANGUAGE: Python
CODE:
```
with simple_page.open_resource('static/style.css') as f:
    code = f.read()
```

----------------------------------------

TITLE: Flask API Endpoint Example
DESCRIPTION: This Flask route example demonstrates how to use the `generate_checksum` function within a Flask view function to calculate the checksum of the request data before accessing it. It calculates the checksum, then retrieves `request.files` to parse the input stream, and finally retrieves the hex digest representation of the calculated checksum.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/requestchecksum.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
@app.route('/special-api', methods=['POST'])
def special_api():
    hash = generate_checksum(request)
    # Accessing this parses the input stream
    files = request.files
    # At this point the hash is fully constructed.
    checksum = hash.hexdigest()
    return f"Hash was: {checksum}"
```

----------------------------------------

TITLE: Creating a Template Macro for WTForms Fields - HTML+Jinja2
DESCRIPTION: This HTML+Jinja2 snippet defines a macro to render form fields using WTForms within a template. It includes error handling and supports passing HTML attributes via keyword arguments. Prerequisite: Jinja2 and WTForms integration.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/wtforms.rst#2025-04-20_snippet_2

LANGUAGE: html+jinja
CODE:
```
{% macro render_field(field) %}
  <dt>{{ field.label }}
  <dd>{{ field(**kwargs)|safe }}
  {% if field.errors %}
    <ul class=errors>
    {% for error in field.errors %}
      <li>{{ error }}</li>
    {% endfor %}
    </ul>
  {% endif %}
  </dd>
{% endmacro %}
```

----------------------------------------

TITLE: Adding Handlers to Root Logger in Flask
DESCRIPTION: This snippet demonstrates how to add handlers to the root logger, allowing you to see messages from other libraries that use logging extensively. This is useful for capturing logs from dependencies.  Dependencies: flask.logging.default_handler, logging.getLogger, Flask.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
 "from flask.logging import default_handler

    root = logging.getLogger()
    root.addHandler(default_handler)
    root.addHandler(mail_handler)"
```

----------------------------------------

TITLE: Sending a Signal
DESCRIPTION: This code demonstrates how to send or emit a signal using the `send()` method of a `Signal` object.  The first argument should be the sender, and keyword arguments are passed to the signal subscribers. Here the `model_saved` signal is sent from within the `save` method of the `Model` class, passing `self` as the sender.
SOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
"class Model(object):
    ...

    def save(self):
        model_saved.send(self)"
```

----------------------------------------

TITLE: Displaying Posts with an Index View in Flask
DESCRIPTION: This function defines the index view for displaying posts, which fetches and orders posts by creation date using an SQL query. It requires 'get_db()' to interface with the database and returns a rendered HTML template with the query results.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
@bp.route('/')
def index():
    db = get_db()
    posts = db.execute(
        'SELECT p.id, title, body, created, author_id, username'
        ' FROM post p JOIN user u ON p.author_id = u.id'
        ' ORDER BY created DESC'
    ).fetchall()
    return render_template('blog/index.html', posts=posts)

```

----------------------------------------

TITLE: Creating a Template Rendering Logger with Flask Signals
DESCRIPTION: Example of using Flask's template_rendered signal to log template renderings. This subscriber function will be called whenever a template is rendered, providing access to the template instance and context dictionary.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
def log_template_renders(sender, template, context, **extra):
    sender.logger.debug('Rendering template "%s" with context %s',
                        template.name or 'string template',
                        context)

from flask import template_rendered
template_rendered.connect(log_template_renders, app)
```

----------------------------------------

TITLE: Setting Up Authentication Test Fixtures
DESCRIPTION: Authentication helper class and fixture for testing login functionality.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
class AuthActions(object):
    def __init__(self, client):
        self._client = client

    def login(self, username='test', password='test'):
        return self._client.post(
            '/auth/login',
            data={'username': username, 'password': password}
        )

    def logout(self):
        return self._client.get('/auth/logout')


@pytest.fixture
def auth(client):
    return AuthActions(client)
```

----------------------------------------

TITLE: Mapping Documents with MongoEngine
DESCRIPTION: This snippet shows how to define a MongoEngine document by inheriting from Document and specifying fields with types and constraints. Dependencies include the mongoengine module.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#2025-04-20_snippet_2

LANGUAGE: Python
CODE:
```
import mongoengine as me

class Movie(me.Document):
    title = me.StringField(required=True)
    year = me.IntField()
    rated = me.StringField()
    director = me.StringField()
    actors = me.ListField()
```

----------------------------------------

TITLE: Processing and Shutting Down Requests in Flask Shell - Python
DESCRIPTION: Demonstrates how to manually trigger Flask's response-processing and teardown mechanisms. This involves processing a dummy response object with process_response and ensures that teardown_request functions are called when the context is popped.
SOURCE: https://github.com/pallets/flask/blob/main/docs/shell.rst#2025-04-20_snippet_2

LANGUAGE: Python
CODE:
```
>>> app.process_response(app.response_class())
<Response 0 bytes [200 OK]>
>>> ctx.pop()
```

----------------------------------------

TITLE: Applying the Login Required Decorator to a Flask Route
DESCRIPTION: An example showing how to apply the login_required decorator to a Flask route. The decorator is applied as the innermost decorator, with the route decorator as the outermost.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
@app.route('/secret_page')
@login_required
def secret_page():
    pass
```

----------------------------------------

TITLE: Flask Debug Mode
DESCRIPTION: This snippet demonstrates how to enable debug mode in Flask using the `--debug` option. Debug mode provides automatic reloading on code changes and an interactive debugger in the browser if an error occurs during a request. This should only be used for development purposes.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_3

LANGUAGE: text
CODE:
```
$ flask --app hello run --debug
 * Serving Flask app 'hello'
 * Debug mode: on
 * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: nnn-nnn-nnn
```

----------------------------------------

TITLE: Flashing Messages with Categories
DESCRIPTION: Demonstrates how to flash messages with custom categories and render them with different styling or handling in templates.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
flash('Invalid password provided', 'error')
```

LANGUAGE: html+jinja
CODE:
```
{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    <ul class=flashes>
    {% for category, message in messages %}
      <li class="{{ category }}">{{ message }}</li>
    {% endfor %}
    </ul>
  {% endif %}
{% endwith %}
```

----------------------------------------

TITLE: Handling URL Variables in Class-based Views in Flask
DESCRIPTION: This example demonstrates how to handle URL variables in a class-based view. The variables are passed as arguments to the dispatch_request method.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
class DetailView(View):
    def __init__(self, model):
        self.model = model
        self.template = f"{model.__name__.lower()}/detail.html"

    def dispatch_request(self, id):
        item = self.model.query.get_or_404(id)
        return render_template(self.template, item=item)

app.add_url_rule(
    "/users/<int:id>",
    view_func=DetailView.as_view("user_detail", User)
)
```

----------------------------------------

TITLE: Teardown Callbacks Example in Flask
DESCRIPTION: This snippet demonstrates how to define a route and a teardown callback that executes after a request is processed. It highlights the context management in Flask and how teardown functions are called after the request context ends.
SOURCE: https://github.com/pallets/flask/blob/main/docs/reqcontext.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
from flask import Flask, request

app = Flask(__name__)

@app.route('/')
def hello():
    print('during view')
    return 'Hello, World!'

@app.teardown_request
def show_teardown(exception):
    print('after with block')

with app.test_request_context():
    print('during with block')

# teardown functions are called after the context with block exits

with app.test_client() as client:
    client.get('/')
    # the contexts are not popped even though the request ended
    print(request.path)

# the contexts are popped and teardown functions are called after
# the client with block exits
```

----------------------------------------

TITLE: Initializing Celery in Factory Pattern
DESCRIPTION: This code in Python shows how to create a module that instantiates the Flask and Celery apps using the Flask factory pattern, to be used when starting Celery commands.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
from example import create_app

flask_app = create_app()
celery_app = flask_app.extensions["celery"]
```

----------------------------------------

TITLE: Creating a LocalProxy for Flask Database Connection
DESCRIPTION: Shows how to use Werkzeug's LocalProxy to create a context-local proxy for the database connection. This allows direct access to the db variable which will internally call get_db() when accessed.
SOURCE: https://github.com/pallets/flask/blob/main/docs/appcontext.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
from werkzeug.local import LocalProxy
db = LocalProxy(get_db)
```

----------------------------------------

TITLE: Binding Gunicorn to External IPs
DESCRIPTION: Command to bind Gunicorn to all external IPs on a non-privileged port using the -b flag. This allows the server to accept connections from any network interface, not just localhost.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#2025-04-20_snippet_2

LANGUAGE: text
CODE:
```
$ gunicorn -w 4 -b 0.0.0.0 'hello:create_app()'
Listening at: http://0.0.0.0:8000 (x)
```

----------------------------------------

TITLE: Referencing Static Files in Jinja2 Templates
DESCRIPTION: This snippet demonstrates how to generate the URL for a static file within a Jinja2 template using the `url_for` function. This function is provided by Flask and simplifies the process of creating correct URLs for static assets.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/static.rst#2025-04-20_snippet_0

LANGUAGE: html+jinja
CODE:
```

    {{ url_for('static', filename='style.css') }}

```

----------------------------------------

TITLE: Testing Database Operations
DESCRIPTION: Tests for database operations including connection management and initialization commands.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
import sqlite3

import pytest
from flaskr.db import get_db


def test_get_close_db(app):
    with app.app_context():
        db = get_db()
        assert db is get_db()

    with pytest.raises(sqlite3.ProgrammingError) as e:
        db.execute('SELECT 1')

    assert 'closed' in str(e.value)

def test_init_db_command(runner, monkeypatch):
    class Recorder(object):
        called = False

    def fake_init_db():
        Recorder.called = True

    monkeypatch.setattr('flaskr.db.init_db', fake_init_db)
    result = runner.invoke(args=['init-db'])
    assert 'Initialized' in result.output
    assert Recorder.called
```

----------------------------------------

TITLE: Testing CLI Commands with FlaskCliRunner
DESCRIPTION: Shows how to test custom Flask CLI commands using the test CLI runner. Demonstrates invoking commands with and without arguments and asserting command output.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
import click

@app.cli.command("hello")
@click.option("--name", default="World")
def hello_command(name):
    click.echo(f"Hello, {name}!")

def test_hello_command(runner):
    result = runner.invoke(args="hello")
    assert "World" in result.output

    result = runner.invoke(args=["hello", "--name", "Flask"])
    assert "Flask" in result.output
```

----------------------------------------

TITLE: Generate Checksum
DESCRIPTION: This function `generate_checksum` takes a Flask request object, retrieves the WSGI input stream, wraps it with the `ChecksumCalcStream`, and updates the WSGI environment with the wrapped stream. It returns the hashlib object which has the checksum data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/requestchecksum.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
def generate_checksum(request):
    env = request.environ
    stream = ChecksumCalcStream(env['wsgi.input'])
    env['wsgi.input'] = stream
    return stream._hash
```

----------------------------------------

TITLE: Nesting Blueprints in Flask
DESCRIPTION: Shows how to register one blueprint on another blueprint, creating a hierarchy. The child blueprint inherits URL prefixes and naming from the parent.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_3

LANGUAGE: Python
CODE:
```
parent = Blueprint('parent', __name__, url_prefix='/parent')
child = Blueprint('child', __name__, url_prefix='/child')
parent.register_blueprint(child)
app.register_blueprint(parent)
```

----------------------------------------

TITLE: Generating and Configuring a Random Secret Key in Python
DESCRIPTION: Explains how to generate a random secret key using Python's `secrets` module and save it in a `config.py` file for securing a Flask application. Requires Python to be installed. Input: none; Output: random secret key string.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#2025-04-20_snippet_1

LANGUAGE: none
CODE:
```
$ python -c 'import secrets; print(secrets.token_hex())'

'192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'
```

----------------------------------------

TITLE: Response Modification in Flask
DESCRIPTION: Shows how to modify response objects using make_response function.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_25

LANGUAGE: python
CODE:
```
from flask import make_response

@app.errorhandler(404)
def not_found(error):
    resp = make_response(render_template('error.html'), 404)
    resp.headers['X-Something'] = 'A value'
    return resp
```

----------------------------------------

TITLE: Creating Test Request Context and Manual Preprocessing in Flask Python
DESCRIPTION: This code snippet demonstrates how to create a test request context for a Flask application, manually call the preprocessing function, and perform assertions. It simulates a request to edit a user with an authentication token.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_8

LANGUAGE: python
CODE:
```
def test_auth_token(app):
    with app.test_request_context("/user/2/edit", headers={"X-Auth-Token": "1"}):
        app.preprocess_request()
        assert g.user.name == "Flask"
```

----------------------------------------

TITLE: Creating Flask Application Instance - Python
DESCRIPTION: This code snippet demonstrates how to create an instance of the Flask application class. The instance is essential for defining routes and handling requests in the Flask web application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/design.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from flask import Flask
app = Flask(__name__)

@app.route('/')
def index():
    return 'Hello World!'
```

----------------------------------------

TITLE: Registering Blueprint in Flask Application Factory
DESCRIPTION: Demonstrates how to register the authentication blueprint within the Flask application factory function.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
def create_app():
    app = ...
    # existing code omitted

    from . import auth
    app.register_blueprint(auth.bp)

    return app
```

----------------------------------------

TITLE: Defining and Registering Blog Blueprint in Flask
DESCRIPTION: This snippet shows how to define a blog blueprint using Flask's Blueprint class, and then register it within the application's factory function. Necessary imports include 'Blueprint' from 'flask' and custom modules 'auth' and 'db'. The blueprint is associated with root URL endpoints using 'app.add_url_rule'.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
from flask import (
    Blueprint, flash, g, redirect, render_template, request, url_for
)
from werkzeug.exceptions import abort

from flaskr.auth import login_required
from flaskr.db import get_db

bp = Blueprint('blog', __name__)

```

LANGUAGE: python
CODE:
```
def create_app():
    app = ...
    # existing code omitted

    from . import blog
    app.register_blueprint(blog.bp)
    app.add_url_rule('/', endpoint='index')

    return app

```

----------------------------------------

TITLE: Running Flask Application in Debug Mode
DESCRIPTION: This command runs the Flask application located in the 'flaskr' directory in debug mode, providing an interactive debugger and auto-reloading when code changes.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/factory.rst#2025-04-20_snippet_2

LANGUAGE: text
CODE:
```
$ flask --app flaskr run --debug
```

----------------------------------------

TITLE: Adding Favicon Link in HTML Templates with Jinja2
DESCRIPTION: This snippet shows how to add a shortcut icon link in an HTML template using Jinja2 templating with Flask's url_for helper to reference the favicon stored in the static directory.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/favicon.rst#2025-04-20_snippet_0

LANGUAGE: html+jinja
CODE:
```
<link rel="shortcut icon" href="{{ url_for('static', filename='favicon.ico') }}">
```

----------------------------------------

TITLE: Setting Cookie Expiration in Flask
DESCRIPTION: This snippet demonstrates how to set a cookie with an expiration time of 10 minutes using the max_age parameter in Flask.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
# cookie expires after 10 minutes
response.set_cookie('snakes', '3', max_age=600)
```

----------------------------------------

TITLE: Following HTTP Redirects in Tests
DESCRIPTION: Shows how to test redirect behavior by using follow_redirects parameter in test client requests. Demonstrates checking redirect history and final request path.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
def test_logout_redirect(client):
    response = client.get("/logout", follow_redirects=True)
    # Check that there was one redirect response.
    assert len(response.history) == 1
    # Check that the second request was to the index page.
    assert response.request.path == "/index"
```

----------------------------------------

TITLE: Defining Project Metadata with pyproject.toml
DESCRIPTION: Sets up project metadata and dependencies for a Flask application using a `pyproject.toml` file, necessary for building and installing the application. Key dependencies include Flask and flit_core for the build system.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#2025-04-20_snippet_0

LANGUAGE: toml
CODE:
```
[project]
name = "yourapplication"
dependencies = [
    "flask",
]

[build-system]
requires = ["flit_core<4"]
build-backend = "flit_core.buildapi"
```

----------------------------------------

TITLE: Flask URL Building Output
DESCRIPTION: This snippet shows the output of using `url_for` function in Flask to build URLs to specific functions. It includes examples with and without variable arguments and query parameters. It demonstrates how Flask handles escaping special characters.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_8

LANGUAGE: text
CODE:
```
/
/login
/login?next=/
/user/John%20Doe
```

----------------------------------------

TITLE: LazyView Implementation
DESCRIPTION: Implementation of LazyView class that enables lazy loading of view functions on first use.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
from werkzeug.utils import import_string, cached_property

class LazyView(object):

    def __init__(self, import_name):
        self.__module__, self.__name__ = import_name.rsplit('.', 1)
        self.import_name = import_name

    @cached_property
    def view(self):
        return import_string(self.import_name)

    def __call__(self, *args, **kwargs):
        return self.view(*args, **kwargs)
```

----------------------------------------

TITLE: Setting Flask Command Options with Environment Variables
DESCRIPTION: Shows how to set Flask command options using environment variables in different shells (Bash, Fish, CMD, and Powershell). The example sets the port for the development server to 8000.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_3

LANGUAGE: bash
CODE:
```
$ export FLASK_RUN_PORT=8000
$ flask run
 * Running on http://127.0.0.1:8000/
```

LANGUAGE: fish
CODE:
```
$ set -x FLASK_RUN_PORT 8000
$ flask run
 * Running on http://127.0.0.1:8000/
```

LANGUAGE: cmd
CODE:
```
> set FLASK_RUN_PORT=8000
> flask run
 * Running on http://127.0.0.1:8000/
```

LANGUAGE: powershell
CODE:
```
> $env:FLASK_RUN_PORT = 8000
> flask run
 * Running on http://127.0.0.1:8000/
```

----------------------------------------

TITLE: Cookie Reading in Flask
DESCRIPTION: Example of reading cookies from a request using Flask's request.cookies dictionary.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_21

LANGUAGE: python
CODE:
```
from flask import request

@app.route('/')
def index():
    username = request.cookies.get('username')
    # use cookies.get(key) instead of cookies[key] to not get a
    # KeyError if the cookie is missing.
```

----------------------------------------

TITLE: Integrating Sentry with Flask Application
DESCRIPTION: Code to initialize Sentry SDK in a Flask application. The DSN value needs to be replaced with the actual DSN from your Sentry installation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
import sentry_sdk
from sentry_sdk.integrations.flask import FlaskIntegration

sentry_sdk.init('YOUR_DSN_HERE', integrations=[FlaskIntegration()])
```

----------------------------------------

TITLE: Configuring Permanent Session Lifetime in Flask
DESCRIPTION: This code shows how to configure the PERMANENT_SESSION_LIFETIME in Flask to set the expiration time for permanent sessions, which can help mitigate replay attacks.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
app.config.update(
    PERMANENT_SESSION_LIFETIME=600
)

@app.route('/login', methods=['POST'])
def login():
    ...
    session.clear()
    session['user_id'] = user.id
    session.permanent = True
    ...
```

----------------------------------------

TITLE: Nesting Blueprints with Subdomains
DESCRIPTION: Shows how subdomains are handled with nested blueprints. Child blueprints gain their parent's subdomain as a prefix to their own subdomain.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_5

LANGUAGE: Python
CODE:
```
parent = Blueprint('parent', __name__, subdomain='parent')
child = Blueprint('child', __name__, subdomain='child')
parent.register_blueprint(child)
app.register_blueprint(parent)

url_for('parent.child.create', _external=True)
"child.parent.domain.tld"
```

----------------------------------------

TITLE: Configuring Nginx as a Reverse Proxy for Flask WSGI Application
DESCRIPTION: This configuration sets up Nginx to forward requests to a WSGI server running locally. It includes essential proxy headers that maintain information about the original request, which is needed by the Flask application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/nginx.rst#2025-04-20_snippet_1

LANGUAGE: nginx
CODE:
```
server {
    listen 80;
    server_name _;

    location / {
        proxy_pass http://127.0.0.1:8000/;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Prefix /;
    }
}
```

----------------------------------------

TITLE: Creating and Activating Virtual Environment
DESCRIPTION: This code snippet demonstrates how to create a Python virtual environment, activate it, install the necessary dependencies using pip, and then install the current project in editable mode. This ensures a clean environment for running the Flask application and Celery worker.
SOURCE: https://github.com/pallets/flask/blob/main/examples/celery/README.md#2025-04-20_snippet_0

LANGUAGE: shell
CODE:
```
$ python3 -m venv .venv
$ . ./.venv/bin/activate
$ pip install -r requirements.txt && pip install -e .
$ celery -A make_celery worker --loglevel INFO
```

----------------------------------------

TITLE: Rendering Templates as Streams with Flask
DESCRIPTION: This code demonstrates how to use Flask's built-in streaming functionality to render a template piece by piece, which can optimize loading performance.
SOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
from flask import stream_template

@app.get("/timeline")
def timeline():
    return stream_template("timeline.html")
```

----------------------------------------

TITLE: Activating Virtual Environment and Running Flask Development Server
DESCRIPTION: This shell script activates the virtual environment created previously and then starts the Flask development server in debug mode.  The `flask -A task_app run --debug` command tells Flask to run the `task_app` application, enabling debugging features.
SOURCE: https://github.com/pallets/flask/blob/main/examples/celery/README.md#2025-04-20_snippet_1

LANGUAGE: shell
CODE:
```
$ . ./.venv/bin/activate
$ flask -A task_app run --debug
```

----------------------------------------

TITLE: Proper Extension Registration in Flask Factory
DESCRIPTION: The correct way to register extensions in a factory function by importing the extension instance and calling its init_app method with the application instance.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
def create_app(config_filename):
    app = Flask(__name__)
    app.config.from_pyfile(config_filename)

    from yourapplication.model import db
    db.init_app(app)

```

----------------------------------------

TITLE: Testing Flask Factory Configuration
DESCRIPTION: Tests for the Flask application factory, including configuration testing and basic route testing.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
from flaskr import create_app


def test_config():
    assert not create_app().testing
    assert create_app({'TESTING': True}).testing


def test_hello(client):
    response = client.get('/hello')
    assert response.data == b'Hello, World!'
```

----------------------------------------

TITLE: Creating a Signal within Namespace
DESCRIPTION: This code demonstrates how to create a new signal within a custom namespace. It uses the `signal()` method of the `Namespace` object to create a named signal. The signal name should be unique and descriptive.
SOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
"model_saved = my_signals.signal('model-saved')"
```

----------------------------------------

TITLE: Binding mod_wsgi to Privileged Ports with User/Group Configuration
DESCRIPTION: Command to run mod_wsgi as root to bind to port 80, while configuring worker processes to run as a non-privileged user. This setup ensures the application runs securely while still being able to use standard HTTP ports.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/mod_wsgi.rst#2025-04-20_snippet_4

LANGUAGE: text
CODE:
```
$ sudo /home/hello/.venv/bin/mod_wsgi-express start-server \
    /home/hello/wsgi.py \
    --user hello --group hello --port 80 --processes 4
```

----------------------------------------

TITLE: Adding Grouped Command User Create with Flask CLI using Click
DESCRIPTION: This snippet demonstrates adding a command called 'create' under a 'user' group in Flask's CLI. It allows organization of multiple commands related to user management under a single command group.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
import click
from flask import Flask
from flask.cli import AppGroup

app = Flask(__name__)
user_cli = AppGroup('user')

@user_cli.command('create')
@click.argument('name')
def create_user(name):
    ...

app.cli.add_command(user_cli)
```

----------------------------------------

TITLE: Installing Gunicorn for Flask Applications
DESCRIPTION: Steps to create a virtual environment and install both a Flask application and Gunicorn. This process creates an isolated environment for your dependencies and installs Gunicorn which doesn't require external dependencies.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
$ cd hello-app
$ python -m venv .venv
$ . .venv/bin/activate
$ pip install .  # install your application
$ pip install gunicorn
```

----------------------------------------

TITLE: Streaming Templates in Flask
DESCRIPTION: Example of using Flask's stream_template function to render a Jinja2 template piece by piece, returning an iterator of strings to the client without loading the entire rendered template in memory.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/streaming.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
from flask import stream_template

@app.get("/timeline")
def timeline():
    return stream_template("timeline.html")
```

----------------------------------------

TITLE: Defining a Shared Task with Celery
DESCRIPTION: The Python code snippet shows how to define a shared task with Celery using the @shared_task decorator. The task adds two numbers and returns the result, with the option to ignore the result set to False.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
from celery import shared_task

@shared_task(ignore_result=False)
def add_together(a: int, b: int) -> int:
    return a + b
```

----------------------------------------

TITLE: Custom 404 Error Handler Registration with App Factory
DESCRIPTION: Demonstrates how to register a custom 404 error handler in a Flask app using the app factory pattern, where the 'page_not_found' function is explicitly linked to 404 errors during app creation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_8

LANGUAGE: python
CODE:
```
from flask import Flask, render_template

def page_not_found(e):
  return render_template('404.html'), 404

def create_app(config_filename):
    app = Flask(__name__)
    app.register_error_handler(404, page_not_found)
    return app
```

----------------------------------------

TITLE: Creating a Named Signal Namespace
DESCRIPTION: This code shows how to create a namespace for custom signals using the Blinker library. It imports the `Namespace` class from `blinker` and instantiates it. This namespace will be used to create named signals within the application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
"from blinker import Namespace
my_signals = Namespace()"
```

----------------------------------------

TITLE: Adding Route Decorators for HTTP Methods
DESCRIPTION: Introduces shortcut route decorators for common HTTP methods, simplifying route definitions by providing concise method-specific decorators
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_0

LANGUAGE: Python
CODE:
```
@app.post("/login")
```

----------------------------------------

TITLE: Running uWSGI with Flask Application
DESCRIPTION: Command to run uWSGI with a Flask application. It starts an HTTP server on localhost:8000 with 4 worker processes.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#2025-04-20_snippet_1

LANGUAGE: text
CODE:
```
$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w hello:app
```

----------------------------------------

TITLE: Running Flask Shell for Interactive Exploration
DESCRIPTION: Demonstrates how to start an interactive Python shell with the Flask application context active, allowing for data exploration and debugging.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_2

LANGUAGE: bash
CODE:
```
$ flask shell
Python 3.10.0 (default, Oct 27 2021, 06:59:51) [GCC 11.1.0] on linux
App: example [production]
Instance: /home/david/Projects/pallets/flask/instance
>>>
```

----------------------------------------

TITLE: Installing Gevent
DESCRIPTION: This snippet demonstrates how to install Gevent using pip after creating and activating a virtual environment, along with installing your application's dependencies. This setup ensures a clean environment for your project and its dependencies.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gevent.rst#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
$ cd hello-app
$ python -m venv .venv
$ . .venv/bin/activate
$ pip install .  # install your application
$ pip install gevent
```

----------------------------------------

TITLE: Jinja2 Template Example with Conditional Rendering
DESCRIPTION: A basic Jinja2 template showing conditional content rendering based on provided variables. This example demonstrates the use of Jinja2's template syntax for conditional blocks and variable interpolation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_13

LANGUAGE: html+jinja
CODE:
```
<!doctype html>
<title>Hello from Flask</title>
{% if person %}
  <h1>Hello {{ person }}!</h1>
{% else %}
  <h1>Hello, World!</h1>
{% endif %}
```

----------------------------------------

TITLE: HTML Template for 404 Page Not Found
DESCRIPTION: An HTML template designed for rendering a 'Page Not Found' error, extending from a base layout template. It includes a title block and a body block with user navigation options.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_9

LANGUAGE: html+jinja
CODE:
```
{% extends "layout.html" %}
{% block title %}Page Not Found{% endblock %}
{% block body %}
  <h1>Page Not Found</h1>
  <p>What you were looking for is just not there.
  <p><a href="{{ url_for('index') }}">go somewhere nice</a>
{% endblock %}
```

----------------------------------------

TITLE: Replacing Content with HTML from Fetch
DESCRIPTION: This code shows how to replace the content of a div element with HTML retrieved from a fetch request. It uses the response.text() method to extract the HTML and sets the innerHTML of the div.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#2025-04-20_snippet_9

LANGUAGE: html
CODE:
```
<div id="geology-fact">
    {{ include "geology_fact.html" }}
</div>
<script>
    const geology_url = {{ url_for("geology_fact")|tojson }}
    const geology_div = getElementById("geology-fact")
    fetch(geology_url)
        .then(response => response.text)
        .then(text => geology_div.innerHTML = text)
</script>
```

----------------------------------------

TITLE: Alternative Template Capture with Context Manager
DESCRIPTION: This is an alternative approach to capture templates using `connected_to` context manager from blinker.  It subscribes a function to a signal with a context manager. The `captured_templates` function connects to the `template_rendered` signal for the duration of the `with` statement.
SOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
"from flask import template_rendered

def captured_templates(app, recorded, **extra):
    def record(sender, template, context):
        recorded.append((template, context))
    return template_rendered.connected_to(record, app)"
```

----------------------------------------

TITLE: Example of Flask URL Prefix Nesting
DESCRIPTION: Demonstrates the new feature of nesting blueprints with URL prefixes, allowing more complex and hierarchical routing configurations
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_1

LANGUAGE: Python
CODE:
```
blueprint.register_blueprint(nested_blueprint, url_prefix="/admin")
```

----------------------------------------

TITLE: Creating a Favicon Redirect Route in Flask
DESCRIPTION: This snippet demonstrates how to set up a URL rule that redirects requests for /favicon.ico to the static file location. This approach helps support older browsers that look for the favicon at the root path.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/favicon.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
app.add_url_rule(
    "/favicon.ico",
    endpoint="favicon",
    redirect_to=url_for("static", filename="favicon.ico"),
)
```

----------------------------------------

TITLE: Configuring pytest and Coverage Settings in pyproject.toml
DESCRIPTION: Configuration for pytest and coverage tools in pyproject.toml, specifying test directories and coverage measurement settings for a Flask application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_13

LANGUAGE: toml
CODE:
```
[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["flaskr"]
```

----------------------------------------

TITLE: Building and Installing Wheel File with Python and Pip
DESCRIPTION: Demonstrates how to use Python's build tool to create a `.whl` distribution file for the Flask application and how to install it using pip. Requires the 'build' package and pip to be installed. Input: command-line commands; Output: wheel file in `dist` folder.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#2025-04-20_snippet_0

LANGUAGE: none
CODE:
```
$ pip install build
$ python -m build --wheel
```

LANGUAGE: none
CODE:
```
$ pip install flaskr-1.0.0-py3-none-any.whl
```

LANGUAGE: text
CODE:
```
$ flask --app flaskr init-db
```

----------------------------------------

TITLE: Using database connection in a Flask route
DESCRIPTION: Shows how to use the database connection within a Flask route handler. This pattern accesses the database connection in a request context.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
@app.route('/')
def index():
    cur = get_db().cursor()
    ...
```

----------------------------------------

TITLE: Identifying Port Usage with lsof (macOS / Linux)
DESCRIPTION: This snippet illustrates how to check which process is using a specific port (e.g., 5000) on macOS or Linux using the `lsof` command. It requires `lsof` to be installed and shows the pid listening on the port, which can then be stopped if necessary.
SOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#2025-04-20_snippet_2

LANGUAGE: text
CODE:
```
$ lsof -P -i :5000
Python 6847 IPv4 TCP localhost:5000 (LISTEN)
```

----------------------------------------

TITLE: Running Flask Development Server with CLI
DESCRIPTION: This snippet shows how to start a Flask development server from the command line using the `flask run` command. The command includes options to specify the application module using `--app` and to enable debug mode with `--debug`. This starts the server on http://localhost:5000/ and includes an interactive debugger and reloader. It requires Flask to be installed and assumes `hello` is the name of the application module.
SOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
$ flask --app hello run --debug
```

----------------------------------------

TITLE: Registering Custom Filters in Jinja2
DESCRIPTION: This example shows two methods to register a custom filter in Jinja2: using a decorator and directly modifying the jinja_env filters. The filter reverses a string.
SOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
@app.template_filter('reverse')
def reverse_filter(s):
    return s[::-1]
```

LANGUAGE: python
CODE:
```
def reverse_filter(s):
    return s[::-1]
app.jinja_env.filters['reverse'] = reverse_filter
```

----------------------------------------

TITLE: Safely Joining Paths in Flask
DESCRIPTION: Using safe_join to securely join path components to prevent directory traversal attacks when constructing file paths.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_9

LANGUAGE: python
CODE:
```
safe_join
```

----------------------------------------

TITLE: Render Index Template with Jinja
DESCRIPTION: This template extends a base HTML template to render a list of posts. It includes functionality for logged-in users to create new posts and edit their own posts, with links generated by 'url_for'.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_2

LANGUAGE: html+jinja
CODE:
```
{% extends 'base.html' %}

{% block header %}
  <h1>{% block title %}Posts{% endblock %}</h1>
  {% if g.user %}
    <a class="action" href="{{ url_for('blog.create') }}">New</a>
  {% endif %}
{% endblock %}

{% block content %}
  {% for post in posts %}
    <article class="post">
      <header>
        <div>
          <h1>{{ post['title'] }}</h1>
          <div class="about">by {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }}</div>
        </div>
        {% if g.user['id'] == post['author_id'] %}
          <a class="action" href="{{ url_for('blog.update', id=post['id']) }}">Edit</a>
        {% endif %}
      </header>
      <p class="body">{{ post['body'] }}</p>
    </article>
    {% if not loop.last %}
      <hr>
    {% endif %}
  {% endfor %}
{% endblock %}

```

----------------------------------------

TITLE: Describing Flask Project with pyproject.toml
DESCRIPTION: This TOML configuration file defines the project metadata, including name, version, description, and dependencies.  It also specifies the build system to use `flit_core` for building the project.  The `dependencies` array lists the project's runtime dependencies which will be installed along with the project.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/install.rst#2025-04-20_snippet_0

LANGUAGE: toml
CODE:
```

[project]
name = "flaskr"
version = "1.0.0"
description = "The basic blog app built in the Flask tutorial."
dependencies = [
    "flask",
]

[build-system]
requires = ["flit_core<4"]
build-backend = "flit_core.buildapi"

```

----------------------------------------

TITLE: Create Virtual Environment (macOS/Linux)
DESCRIPTION: This command creates a virtual environment named '.venv' within the current directory (myproject).  The 'python3 -m venv' command uses the venv module to set up an isolated environment for Python packages, ensuring that project dependencies are managed separately from the system-wide Python installation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_1

LANGUAGE: Text
CODE:
```
$ python3 -m venv .venv
```

----------------------------------------

TITLE: Integrating Flask Extensions with Views and Models
DESCRIPTION: This code illustrates how to integrate a Flask extension with views and models, particularly when dealing with dependencies like Flask-SQLAlchemy. It demonstrates a method of creating the model within the extension and then passing the model to the view class's `as_view` method.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
class PostAPI(MethodView):
    def __init__(self, model):
        self.model = model

    def get(self, id):
        post = self.model.query.get(id)
        return jsonify(post.to_json())

class BlogExtension:
    def __init__(self, db):
        class Post(db.Model):
            id = db.Column(primary_key=True)
            title = db.Column(db.String, nullable=False)

        self.post_model = Post

    def init_app(self, app):
        api_view = PostAPI.as_view(model=self.post_model)

db = SQLAlchemy()
blog = BlogExtension(db)
db.init_app(app)
blog.init_app(app)
```

----------------------------------------

TITLE: Starting Flask Server in Python Script
DESCRIPTION: This Python snippet shows how to start a Flask development server from within a Python script using the `Flask.run` method. It demonstrates enabling debug mode by passing `debug=True` as an argument, which provides an interactive debugging environment. This method is typically placed inside the `main` block to prevent interference with production server imports.
SOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
if __name__ == "__main__":
    app.run(debug=True)
```

----------------------------------------

TITLE: Using an Endpoint Decorator with Werkzeug Routing in Flask
DESCRIPTION: An example showing how to use the endpoint decorator to map a Werkzeug routing endpoint to a view function. This provides more flexibility in routing compared to the standard Flask route decorator.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
from flask import Flask
from werkzeug.routing import Rule

app = Flask(__name__)
app.url_map.add(Rule('/', endpoint='index'))

@app.endpoint('index')
def my_index():
    return "Hello world"
```

----------------------------------------

TITLE: Setting Secret Key in Flask Configuration File
DESCRIPTION: Describes updating the `config.py` file with the generated secret key to enhance security for the Flask application. The `config.py` file should be placed in the instance folder to be read by the application factory. Input: secret key; Output: updated configuration file.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
SECRET_KEY = '192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'
```

----------------------------------------

TITLE: Custom 500 Error Page in HTML
DESCRIPTION: Defines an HTML template for a custom internal server error page in Flask, offering users a message when a 500 error occurs and redirect options.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_10

LANGUAGE: html+jinja
CODE:
```
{% extends "layout.html" %}
{% block title %}Internal Server Error{% endblock %}
{% block body %}
  <h1>Internal Server Error</h1>
  <p>Oops... we seem to have made a mistake, sorry!</p>
  <p><a href="{{ url_for('index') }}">Go somewhere nice instead</a>
{% endblock %}
```

----------------------------------------

TITLE: Running mod_wsgi-express Server with Process Configuration
DESCRIPTION: Command to start the mod_wsgi-express server with the specified WSGI script and number of worker processes. The --processes flag defines how many worker processes to use for handling requests.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/mod_wsgi.rst#2025-04-20_snippet_3

LANGUAGE: text
CODE:
```
$ mod_wsgi-express start-server wsgi.py --processes 4
```

----------------------------------------

TITLE: Creating WSGI File for Flask App Factory
DESCRIPTION: Python code to create a WSGI file when using the Flask app factory pattern. This file imports the create_app function and instantiates the app.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
from hello import create_app

app = create_app()
```

----------------------------------------

TITLE: Applying HTTP Method Override Middleware to a Flask Application
DESCRIPTION: This snippet demonstrates how to integrate the `HTTPMethodOverrideMiddleware` into a Flask application by wrapping the Flask app's WSGI application with the middleware, allowing it to process overridden HTTP methods seamlessly.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/methodoverrides.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
from flask import Flask

app = Flask(__name__)
app.wsgi_app = HTTPMethodOverrideMiddleware(app.wsgi_app)
```

----------------------------------------

TITLE: Running Flask with External Debugger Support (Command Line)
DESCRIPTION: Command to run Flask in debug mode while disabling the built-in debugger and reloader to prevent interference with external debuggers like those in IDEs.
SOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#2025-04-20_snippet_2

LANGUAGE: text
CODE:
```
$ flask --app hello run --debug --no-debugger --no-reload
```

----------------------------------------

TITLE: Logging Response Finish Signal in Flask
DESCRIPTION: Demonstrates connecting a subscriber function to the request_finished signal to log details before response is sent
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
def log_response(sender, response, **extra):
    sender.logger.debug('Request context is about to close down. '
                        'Response: %s', response)

from flask import request_finished
request_finished.connect(log_response, app)
```

----------------------------------------

TITLE: Optimized URL Registration Helper
DESCRIPTION: Helper function to simplify URL registration with LazyView and support multiple routes per view.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
def url(import_name, url_rules=[], **options):
    view = LazyView(f"yourapplication.{import_name}")
    for url_rule in url_rules:
        app.add_url_rule(url_rule, view_func=view, **options)

# add a single route to the index view
url('views.index', ['/'])

# add two routes to a single function endpoint
url_rules = ['/user/','/user/<username>']
url('views.user', url_rules)
```

----------------------------------------

TITLE: Demonstrating RuntimeError Outside Application Context in Python
DESCRIPTION: This shows the error message that occurs when attempting to access Flask's current_app outside an application context. The error provides guidance on how to solve the issue using app.app_context().
SOURCE: https://github.com/pallets/flask/blob/main/docs/appcontext.rst#2025-04-20_snippet_0

LANGUAGE: pytb
CODE:
```
RuntimeError: Working outside of application context.

This typically means that you attempted to use functionality that
needed to interface with the current application object in some way.
To solve this, set up an application context with app.app_context().
```

----------------------------------------

TITLE: Installing Waitress for a Flask Application
DESCRIPTION: Commands to create a virtual environment, install a Flask application, and install the Waitress WSGI server.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/waitress.rst#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
$ cd hello-app
$ python -m venv .venv
$ . .venv/bin/activate
$ pip install .  # install your application
$ pip install waitress
```

----------------------------------------

TITLE: Running Celery Worker and Beat
DESCRIPTION: These commands start a Celery worker and beat instance to process tasks and run tasks on a schedule, respectively, for the Flask application configured with Celery.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_3

LANGUAGE: text
CODE:
```
$ celery -A example worker --loglevel INFO
$ celery -A example beat --loglevel INFO
```

----------------------------------------

TITLE: Running ASGI App with Hypercorn
DESCRIPTION: This text command illustrates how to serve a wrapped ASGI application using the Hypercorn server, which is capable of handling ASGI applications. The prerequisite is to have Hypercorn installed and the ASGI app properly configured. The command expects a module name and the ASGI app callable name as inputs, and it initiates the server process.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/asgi.rst#2025-04-20_snippet_1

LANGUAGE: text
CODE:
```
$ hypercorn module:asgi_app
```

----------------------------------------

TITLE: Using Flask's Request Context with WSGI Environment
DESCRIPTION: Example of using Flask's request_context method with a WSGI environment to create a request context. This is useful for testing or when working with WSGI environments directly.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_16

LANGUAGE: python
CODE:
```
with app.request_context(environ):
    assert request.method == 'POST'
```

----------------------------------------

TITLE: Using sqlite3.Row as row factory
DESCRIPTION: Shows how to use SQLite's built-in Row factory which provides both dictionary-like and tuple-like access to query results. This approach is simpler than creating a custom row factory.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
db.row_factory = sqlite3.Row
```

----------------------------------------

TITLE: Alternative Template Capture Testing
DESCRIPTION: This code tests the alternative template capture with context manager. The `captured_templates` function connects to the `template_rendered` signal for the duration of the `with` statement, recording template and context.
SOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
"templates = []
with captured_templates(app, templates, **extra):
    ...
    template, context = templates[0]"
```

----------------------------------------

TITLE: Install Flask with pip
DESCRIPTION: This command installs the Flask package using pip, the Python package installer. It assumes that a virtual environment has already been activated to isolate the project's dependencies. Flask and its dependencies are downloaded and installed into the active virtual environment.
SOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_6

LANGUAGE: Shell
CODE:
```
    $ pip install Flask
```

----------------------------------------

TITLE: Running Gunicorn with Gevent Async Worker
DESCRIPTION: Command to run Gunicorn with the gevent worker using the -k flag. This enables asynchronous processing with gevent, which is beneficial for applications that use gevent in their code.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#2025-04-20_snippet_3

LANGUAGE: text
CODE:
```
$ gunicorn -k gevent 'hello:create_app()'
Starting gunicorn 20.1.0
Listening at: http://127.0.0.1:8000 (x)
Using worker: gevent
Booting worker with pid: x
```

----------------------------------------

TITLE: Generating URLs for Blueprint Static Files
DESCRIPTION: Shows how to generate URLs to static files provided by a blueprint using the url_for function with the blueprint's static endpoint.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#2025-04-20_snippet_8

LANGUAGE: Python
CODE:
```
url_for('admin.static', filename='style.css')
```

----------------------------------------

TITLE: Running uWSGI with Gevent for Async Support
DESCRIPTION: Command to run uWSGI with gevent for asynchronous support. This requires using gevent in the application code to see benefits.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#2025-04-20_snippet_5

LANGUAGE: text
CODE:
```
$ uwsgi --http 127.0.0.1:8000 --master --gevent 100 -w wsgi:app
```

----------------------------------------

TITLE: Closing Database Connection on Request Teardown
DESCRIPTION: Demonstrates connecting a subscriber function to request_tearing_down signal to close database session
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
def close_db_connection(sender, **extra):
    session.close()

from flask import request_tearing_down
request_tearing_down.connect(close_db_connection, app)
```

----------------------------------------

TITLE: Application Context User Setup for Testing
DESCRIPTION: Context manager for setting a user in application context during unit testing using appcontext_pushed signal
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_8

LANGUAGE: python
CODE:
```
from contextlib import contextmanager
from flask import appcontext_pushed

@contextmanager
def user_set(app, user):
    def handler(sender, **kwargs):
        g.user = user
    with appcontext_pushed.connected_to(handler, app):
        yield

def test_user_me(self):
    with user_set(app, 'john'):
        c = app.test_client()
        resp = c.get('/users/me')
        assert resp.data == 'username=john'
```

----------------------------------------

TITLE: Defining Flask View Function in Python
DESCRIPTION: Example of a Flask view function defined in `views.py` with the route decorator, responding with a 'Hello World!' message.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
from yourapplication import app

@app.route('/')
def index():
    return 'Hello World!'
```

----------------------------------------

TITLE: Filtering Backspace Characters for Copy-Paste Safety
DESCRIPTION: This snippet demonstrates how to remove backspace characters from a body of text to prevent potential security issues when users copy and paste code from a webpage to a terminal.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
body = body.replace("\b", "")
```

----------------------------------------

TITLE: Installing Flask Project in Editable Mode with pip
DESCRIPTION: This command installs the Flask project in editable mode, linking the project source code to the Python environment. Changes to the code are immediately reflected without re-installation. It reads the `pyproject.toml` file in the current directory to install the project and its dependencies.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/install.rst#2025-04-20_snippet_1

LANGUAGE: none
CODE:
```
$ pip install -e .

```

----------------------------------------

TITLE: Configuring Local Domain Name in hosts File for Flask Development
DESCRIPTION: This snippet shows how to edit the hosts file on Linux to associate a domain name with the local IP address. This allows for local testing of domain-based applications without registering an actual domain.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/nginx.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
127.0.0.1 hello.localhost
```

----------------------------------------

TITLE: Running Flask Application with Command-Line
DESCRIPTION: Describes the command to run the Flask application using Flask’s CLI, specifying the application path with the `--app` option.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#2025-04-20_snippet_2

LANGUAGE: text
CODE:
```
$ flask --app yourapplication run
```

----------------------------------------

TITLE: Binding uWSGI to All External IPs
DESCRIPTION: Command to bind uWSGI to all external IPs on a non-privileged port. This should not be used with a reverse proxy setup.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#2025-04-20_snippet_4

LANGUAGE: text
CODE:
```
$ uwsgi --http 0.0.0.0:8000 --master -p 4 -w wsgi:app
```

----------------------------------------

TITLE: Using Method Hints in Flask Class-based Views
DESCRIPTION: This snippet shows how to use method hints in a class-based view to specify which HTTP methods are allowed for the view.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
class MyView(View):
    methods = ["GET", "POST"]

    def dispatch_request(self):
        if request.method == "POST":
            ...
        ...

app.add_url_rule('/my-view', view_func=MyView.as_view('my-view'))
```

----------------------------------------

TITLE: Logging Request Start Signal in Flask
DESCRIPTION: Example of connecting a subscriber function to the request_started signal to log when a request context is set up
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
def log_request(sender, **extra):
    sender.logger.debug('Request context is set up')

from flask import request_started
request_started.connect(log_request, app)
```

----------------------------------------

TITLE: Render Update Post Template with Jinja
DESCRIPTION: This template provides a form for editing a blog post's details. The current values of the post being edited populate the form's input fields, and it features a secondary form for delete operations, guarded by a confirmation dialog.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#2025-04-20_snippet_7

LANGUAGE: html+jinja
CODE:
```
{% extends 'base.html' %}

{% block header %}
  <h1>{% block title %}Edit "{{ post['title'] }}"{% endblock %}</h1>
{% endblock %}

{% block content %}
  <form method="post">
    <label for="title">Title</label>
    <input name="title" id="title"
      value="{{ request.form['title'] or post['title'] }}" required>
    <label for="body">Body</label>
    <textarea name="body" id="body">{{ request.form['body'] or post['body'] }}</textarea>
    <input type="submit" value="Save">
  </form>
  <hr>
  <form action="{{ url_for('blog.delete', id=post['id']) }}" method="post">
    <input class="danger" type="submit" value="Delete" onclick="return confirm('Are you sure?');">
  </form>
{% endblock %}

```

----------------------------------------

TITLE: Running Gunicorn with Eventlet Async Worker
DESCRIPTION: Command to run Gunicorn with the eventlet worker using the -k flag. This enables asynchronous processing with eventlet, which is beneficial for applications that use eventlet in their code.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#2025-04-20_snippet_4

LANGUAGE: text
CODE:
```
$ gunicorn -k eventlet 'hello:create_app()'
Starting gunicorn 20.1.0
Listening at: http://127.0.0.1:8000 (x)
Using worker: eventlet
Booting worker with pid: x
```

----------------------------------------

TITLE: Running uWSGI with WSGI File
DESCRIPTION: Command to run uWSGI using the WSGI file created for the app factory pattern.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#2025-04-20_snippet_3

LANGUAGE: text
CODE:
```
$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w wsgi:app
```

----------------------------------------

TITLE: Disabling Flask dotenv Support
DESCRIPTION: Demonstrates how to disable Flask's dotenv support by setting the FLASK_SKIP_DOTENV environment variable in different shells (Bash, Fish, CMD, and Powershell).
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#2025-04-20_snippet_4

LANGUAGE: bash
CODE:
```
$ export FLASK_SKIP_DOTENV=1
$ flask run
```

LANGUAGE: fish
CODE:
```
$ set -x FLASK_SKIP_DOTENV 1
$ flask run
```

LANGUAGE: cmd
CODE:
```
> set FLASK_SKIP_DOTENV=1
> flask run
```

LANGUAGE: powershell
CODE:
```
> $env:FLASK_SKIP_DOTENV = 1
> flask run
```

----------------------------------------

TITLE: Listing Installed Packages with pip
DESCRIPTION: This command lists all installed packages in the current Python environment. This output is useful to verify that the project and its dependencies have been installed correctly. The output shows package names, versions, and installation locations.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/install.rst#2025-04-20_snippet_2

LANGUAGE: none
CODE:
```
$ pip list

```

----------------------------------------

TITLE: CSS Styling for Flask Application
DESCRIPTION: This CSS code provides basic styling for the Flask application, including font, background, colors, and layout. It targets HTML elements such as body, header, navigation, content, forms, and flash messages.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/static.rst#2025-04-20_snippet_1

LANGUAGE: css
CODE:
```
html { font-family: sans-serif; background: #eee; padding: 1rem; }
body { max-width: 960px; margin: 0 auto; background: white; }
h1 { font-family: serif; color: #377ba8; margin: 1rem 0; }
a { color: #377ba8; }
hr { border: none; border-top: 1px solid lightgray; }
nav { background: lightgray; display: flex; align-items: center; padding: 0 0.5rem; }
nav h1 { flex: auto; margin: 0; }
nav h1 a { text-decoration: none; padding: 0.25rem 0.5rem; }
nav ul  { display: flex; list-style: none; margin: 0; padding: 0; }
nav ul li a, nav ul li span, header .action { display: block; padding: 0.5rem; }
.content { padding: 0 1rem 1rem; }
.content > header { border-bottom: 1px solid lightgray; display: flex; align-items: flex-end; }
.content > header h1 { flex: auto; margin: 1rem 0 0.25rem 0; }
.flash { margin: 1em 0; padding: 1em; background: #cae6f6; border: 1px solid #377ba8; }
.post > header { display: flex; align-items: flex-end; font-size: 0.85em; }
.post > header > div:first-of-type { flex: auto; }
.post > header h1 { font-size: 1.5em; margin-bottom: 0; }
.post .about { color: slategray; font-style: italic; }
.post .body { white-space: pre-line; }
.content:last-child { margin-bottom: 0; }
.content form { margin: 1em 0; display: flex; flex-direction: column; }
.content label { font-weight: bold; margin-bottom: 0.5em; }
.content input, .content textarea { margin-bottom: 1em; }
.content textarea { min-height: 12em; resize: vertical; }
input.danger { color: #cc2f2e; }
input[type=submit] { align-self: start; min-width: 10em; }

```

----------------------------------------

TITLE: Optimizing View Lifetime in Flask Class-based Views
DESCRIPTION: This snippet shows how to optimize the view lifetime by setting init_every_request to False, creating only one instance of the class for all requests.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
class ListView(View):
    init_every_request = False

    def __init__(self, model, template):
        self.model = model
        self.template = template

    def dispatch_request(self):
        items = self.model.query.all()
        return render_template(self.template, items=items)
```

----------------------------------------

TITLE: Removing Default Logging Handler in Flask
DESCRIPTION: This snippet shows how to remove the default logging handler that Flask automatically adds to the application logger. This is useful if you configure logging after the logger has been accessed.  Dependencies: flask.logging.default_handler, Flask.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
 "from flask.logging import default_handler

    app.logger.removeHandler(default_handler)"
```

----------------------------------------

TITLE: Running Celery Commands with Factory Pattern
DESCRIPTION: These text commands demonstrate how to start the Celery worker and beat using a make_celery.py module, which retrieves the Celery app from a Flask app using the factory pattern.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_6

LANGUAGE: text
CODE:
```
$ celery -A make_celery worker --loglevel INFO
$ celery -A make_celery beat --loglevel INFO
```

----------------------------------------

TITLE: Configuring Hosts File for Local Domain Testing with Python
DESCRIPTION: A sample hosts file configuration that maps a local domain name to the loopback IP address (127.0.0.1). This allows for testing domain-based applications locally without an actual DNS entry.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/apache-httpd.rst#2025-04-20_snippet_0

LANGUAGE: python
CODE:
```
127.0.0.1 hello.localhost
```

----------------------------------------

TITLE: Registering Teardown Request Handlers in Flask
DESCRIPTION: Using teardown_request decorator to register functions that should run at the end of a request regardless of whether an exception occurred.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
teardown_request
```

----------------------------------------

TITLE: Activate Virtual Environment (Windows)
DESCRIPTION: This command activates the virtual environment on Windows. It executes the 'activate' script located in the '.venv\Scripts' directory, modifying the shell's environment to use the virtual environment's Python interpreter and installed packages.
SOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_5

LANGUAGE: Text
CODE:
```
> .venv\Scripts\activate
```

----------------------------------------

TITLE: Creating Project Directory
DESCRIPTION: These commands create the project directory and navigate into it using shell commands. This sets up the initial workspace for the Flask application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/layout.rst#2025-04-20_snippet_0

LANGUAGE: none
CODE:
```
    $ mkdir flask-tutorial
    $ cd flask-tutorial
```

----------------------------------------

TITLE: Preprocessing Requests in Flask Shell - Python
DESCRIPTION: This snippet shows how to manually call Flask's preprocess_request within an interactive shell to simulate before-request actions, such as database connections. It warns that preprocess_request might return a response object, which should be ignored.
SOURCE: https://github.com/pallets/flask/blob/main/docs/shell.rst#2025-04-20_snippet_1

LANGUAGE: Python
CODE:
```
>>> ctx = app.test_request_context()
>>> ctx.push()
>>> app.preprocess_request()
```

----------------------------------------

TITLE: Configuring Apache httpd as a Reverse Proxy for WSGI Applications
DESCRIPTION: Essential Apache httpd configuration to set up a reverse proxy that forwards requests to a WSGI server running locally. Includes loading proxy modules and setting necessary headers for proper forwarding.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/apache-httpd.rst#2025-04-20_snippet_1

LANGUAGE: apache
CODE:
```
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
ProxyPass / http://127.0.0.1:8000/
RequestHeader set X-Forwarded-Proto http
RequestHeader set X-Forwarded-Prefix /
```

----------------------------------------

TITLE: Checking for Request Context in Flask
DESCRIPTION: Using has_request_context to determine if a request context is active, useful for code that might run both during requests and outside of requests.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_8

LANGUAGE: python
CODE:
```
has_request_context
```

----------------------------------------

TITLE: Create Virtual Environment (Windows)
DESCRIPTION: This command creates a virtual environment named '.venv' within the current directory on Windows. It leverages the 'py -3 -m venv' command, specifying Python 3, to initialize an isolated environment for the project's dependencies.
SOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_3

LANGUAGE: Text
CODE:
```
> py -3 -m venv .venv
```

----------------------------------------

TITLE: Creating URL Adapters in Flask
DESCRIPTION: Using Flask.create_url_adapter method to customize the way URL adapters are created, providing more flexibility in URL routing.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_11

LANGUAGE: python
CODE:
```
Flask.create_url_adapter
```

----------------------------------------

TITLE: Flask Project Structure Directory Listing
DESCRIPTION: This shows the directory structure of a complete Flask project including the application package, tests, templates, static files, and other configuration files.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/layout.rst#2025-04-20_snippet_2

LANGUAGE: none
CODE:
```
    /home/user/Projects/flask-tutorial
    ├── flaskr/
    │   ├── __init__.py
    │   ├── db.py
    │   ├── schema.sql
    │   ├── auth.py
    │   ├── blog.py
    │   ├── templates/
    │   │   ├── base.html
    │   │   ├── auth/
    │   │   │   ├── login.html
    │   │   │   └── register.html
    │   │   └── blog/
    │   │       ├── create.html
    │   │       ├── index.html
    │   │       └── update.html
    │   └── static/
    │       └── style.css
    ├── tests/
    │   ├── conftest.py
    │   ├── data.sql
    │   ├── test_factory.py
    │   ├── test_db.py
    │   ├── test_auth.py
    │   └── test_blog.py
    ├── .venv/
    ├── pyproject.toml
    └── MANIFEST.in
```

----------------------------------------

TITLE: Running Tests with Coverage
DESCRIPTION: Commands for running tests with coverage reporting and generating HTML report
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_7

LANGUAGE: bash
CODE:
```
$ coverage run -m pytest
$ coverage report
$ coverage html  # open htmlcov/index.html in a browser
```

----------------------------------------

TITLE: Registering First Request Callbacks in Flask
DESCRIPTION: Using the Flask.before_first_request decorator to register callbacks that are only triggered once at the beginning of the first request.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
Flask.before_first_request
```

----------------------------------------

TITLE: Running Python Script for Flask Application
DESCRIPTION: A simple command snippet illustrating how to execute a Python file (`hello.py`) which internally runs the Flask application with a development server. This assumes `hello.py` is structured to run a Flask app from its `main` section.
SOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#2025-04-20_snippet_5

LANGUAGE: text
CODE:
```
$ python hello.py
```

----------------------------------------

TITLE: Disabled Autoescaping Block
DESCRIPTION: Demonstrates explicitly disabling autoescaping for a block of template content using autoescape false directive
SOURCE: https://github.com/pallets/flask/blob/main/tests/templates/non_escaping_template.txt#2025-04-20_snippet_1

LANGUAGE: jinja2
CODE:
```
{% autoescape false %}{{ text }}
{{ html }}{% endautoescape %}
```

----------------------------------------

TITLE: Installing Flask-MongoEngine
DESCRIPTION: This snippet provides the command to install Flask-MongoEngine, a library that facilitates interaction between Flask and MongoDB using MongoEngine. Ensure you have a running MongoDB server before proceeding.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#2025-04-20_snippet_0

LANGUAGE: bash
CODE:
```
pip install flask-mongoengine
```

----------------------------------------

TITLE: Installing Flaskr Package
DESCRIPTION: Commands for installing the Flaskr package in development mode
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_3

LANGUAGE: bash
CODE:
```
$ pip install -e .
```

----------------------------------------

TITLE: Installing uWSGI and Flask Application
DESCRIPTION: Commands to create a virtual environment, install the Flask application, and install uWSGI. Two options are provided: using pyuwsgi for precompiled wheels, or uwsgi for full SSL support.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
$ cd hello-app
$ python -m venv .venv
$ . .venv/bin/activate
$ pip install .  # install your application
$ pip install pyuwsgi
```

LANGUAGE: text
CODE:
```
$ pip install uwsgi

# or
$ pip install --no-binary pyuwsgi pyuwsgi
```

----------------------------------------

TITLE: Defining Flask Test Dependencies with pip-compile
DESCRIPTION: Specifies the minimum required package versions for Flask's test environment. Generated automatically by pip-compile from tests-min.in source file. Lists core dependencies including Blinker 1.9.0, Click 8.1.3, ItsDangerous 2.2.0, Jinja2 3.1.2, MarkupSafe 2.1.1, and Werkzeug 3.1.0.
SOURCE: https://github.com/pallets/flask/blob/main/requirements/tests-min.txt#2025-04-20_snippet_0

LANGUAGE: pip
CODE:
```
blinker==1.9.0
    # via -r tests-min.in
click==8.1.3
    # via -r tests-min.in
itsdangerous==2.2.0
    # via -r tests-min.in
jinja2==3.1.2
    # via -r tests-min.in
markupsafe==2.1.1
    # via
    #   -r tests-min.in
    #   jinja2
    #   werkzeug
werkzeug==3.1.0
    # via -r tests-min.in
```

----------------------------------------

TITLE: Identifying Port Usage with netstat (Windows)
DESCRIPTION: This snippet demonstrates how to use the `netstat` command on Windows to identify the process occupying a specific port (e.g., 5000). The `findstr` command helps quickly locate the relevant line, and the pid can be used to terminate the process if needed. Requires `netstat` accessible within the command line environment.
SOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#2025-04-20_snippet_3

LANGUAGE: text
CODE:
```
> netstat -ano | findstr 5000
TCP 127.0.0.1:5000 0.0.0.0:0 LISTENING 6847
```

----------------------------------------

TITLE: Installing Sentry SDK for Flask Error Tracking
DESCRIPTION: Command to install the Sentry SDK client with Flask dependencies for error tracking and monitoring.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
$ pip install sentry-sdk[flask]
```

----------------------------------------

TITLE: Creating Virtual Environment (Windows)
DESCRIPTION: Commands for creating and activating a Python virtual environment on Windows command prompt
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_2

LANGUAGE: bash
CODE:
```
$ py -3 -m venv .venv
$ .venv\Scripts\activate.bat
```

----------------------------------------

TITLE: Generating Dependencies with pip-compile for Flask Project
DESCRIPTION: This code snippet shows the command used to generate the requirements file using pip-compile. It uses the backtracking resolver and reads from the pyproject.toml file.
SOURCE: https://github.com/pallets/flask/blob/main/examples/celery/requirements.txt#2025-04-20_snippet_0

LANGUAGE: Shell
CODE:
```
pip-compile --resolver=backtracking pyproject.toml
```

----------------------------------------

TITLE: Running Flask in Debug Mode via Command Line
DESCRIPTION: Shows how to enable debug mode when running a Flask application using the command line interface.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#2025-04-20_snippet_1

LANGUAGE: text
CODE:
```
$ flask --app hello run --debug
```

----------------------------------------

TITLE: Installing mod_wsgi in a Virtual Environment for Flask Applications
DESCRIPTION: Command sequence for setting up a virtual environment, installing a Flask application and mod_wsgi. This shows the standard process of activating a virtual environment and installing the necessary packages.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/mod_wsgi.rst#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
$ cd hello-app
$ python -m venv .venv
$ . .venv/bin/activate
$ pip install .  # install your application
$ pip install mod_wsgi
```

----------------------------------------

TITLE: LazyView URL Registration
DESCRIPTION: Example of registering URLs using LazyView for deferred view loading.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
from flask import Flask
from yourapplication.helpers import LazyView
app = Flask(__name__)
app.add_url_rule('/',
                 view_func=LazyView('yourapplication.views.index'))
app.add_url_rule('/user/<username>',
                 view_func=LazyView('yourapplication.views.user'))
```

----------------------------------------

TITLE: Creating Flask App Directory
DESCRIPTION: This command creates a directory named 'flaskr' which will contain the Flask application package.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/factory.rst#2025-04-20_snippet_0

LANGUAGE: none
CODE:
```
$ mkdir flaskr
```

----------------------------------------

TITLE: Running Flaskr Application
DESCRIPTION: Commands for initializing the database and running the Flask application in debug mode
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_5

LANGUAGE: text
CODE:
```
$ flask --app flaskr init-db
$ flask --app flaskr run --debug
```

----------------------------------------

TITLE: Testing the Flask Ajax Example
DESCRIPTION: Commands to install test dependencies, run tests with pytest, and generate coverage report
SOURCE: https://github.com/pallets/flask/blob/main/examples/javascript/README.rst#2025-04-20_snippet_2

LANGUAGE: text
CODE:
```
$ pip install -e '.[test]'
$ coverage run -m pytest
$ coverage report
```

----------------------------------------

TITLE: Cloning and Setting Up Flask Repository
DESCRIPTION: Commands for cloning the Flask repository and checking out the correct version for the tutorial
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_0

LANGUAGE: bash
CODE:
```
# clone the repository
$ git clone https://github.com/pallets/flask
$ cd flask
# checkout the correct version
$ git tag  # shows the tagged versions
$ git checkout latest-tag-found-above
$ cd examples/tutorial
```

----------------------------------------

TITLE: Defining Flask Build Requirements with pip-compile
DESCRIPTION: Requirements file specifying exact versions of Python packages needed for building Flask. Lists build, packaging, and pyproject-hooks as primary dependencies with their specific versions.
SOURCE: https://github.com/pallets/flask/blob/main/requirements/build.txt#2025-04-20_snippet_0

LANGUAGE: pip
CODE:
```
build==1.2.2.post1
    # via -r build.in
packaging==24.2
    # via build
pyproject-hooks==1.2.0
    # via build
```

----------------------------------------

TITLE: Identifying Port Usage with netstat (Linux)
DESCRIPTION: This snippet shows how to identify the process using a specific port (e.g., 5000) on Linux using the `netstat` command. The process id (pid) is displayed, which can be used to stop the process if necessary. The command assumes you have `netstat` installed and accessible in your PATH.
SOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#2025-04-20_snippet_1

LANGUAGE: text
CODE:
```
$ netstat -nlp | grep 5000
tcp 0 0 127.0.0.1:5000 0.0.0.0:* LISTEN 6847/python
```

----------------------------------------

TITLE: Executing Gevent Server Script
DESCRIPTION: This command executes the Python script (`wsgi.py`) that initializes and runs the Gevent WSGI server for serving the Flask application. It assumes that the `wsgi.py` file contains the necessary code to import and configure the Flask app with Gevent.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gevent.rst#2025-04-20_snippet_2

LANGUAGE: text
CODE:
```
$ python wsgi.py
```

----------------------------------------

TITLE: Centralized View Functions Definition
DESCRIPTION: Shows view function definitions without decorators for use with centralized URL mapping.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
def index():
    pass

def user(username):
    pass
```

----------------------------------------

TITLE: Installing Flask from Source
DESCRIPTION: Commands for installing Flask from source and Flaskr when using the main branch
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_4

LANGUAGE: bash
CODE:
```
$ pip install -e ../..
$ pip install -e .
```

----------------------------------------

TITLE: Generating Flask Project Dependencies with pip-compile
DESCRIPTION: This code snippet shows the command used to generate the requirements file using pip-compile. It specifies the input file 'dev.in' and uses Python 3.13 for compilation.
SOURCE: https://github.com/pallets/flask/blob/main/requirements/dev.txt#2025-04-20_snippet_0

LANGUAGE: Shell
CODE:
```
#    pip-compile dev.in
```

----------------------------------------

TITLE: Unsafe HTML Anchor Tag Example with JavaScript URI
DESCRIPTION: Demonstrates unsafe HTML anchor tags that could execute JavaScript through the href attribute if not properly secured.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#2025-04-20_snippet_2

LANGUAGE: html
CODE:
```
<a href="{{ value }}">click here</a>
<a href="javascript:alert('unsafe');">click here</a>
```

----------------------------------------

TITLE: Python Package Requirements Configuration
DESCRIPTION: Auto-generated pip requirements file listing package dependencies with exact versions. Contains testing tools like pytest, type checking tools like mypy and pyright, and other dependencies like cryptography and python-dotenv.
SOURCE: https://github.com/pallets/flask/blob/main/requirements/typing.txt#2025-04-20_snippet_0

LANGUAGE: pip
CODE:
```
asgiref==3.8.1
    # via -r typing.in
cffi==1.17.1
    # via cryptography
cryptography==44.0.2
    # via -r typing.in
iniconfig==2.1.0
    # via pytest
mypy==1.15.0
    # via -r typing.in
mypy-extensions==1.0.0
    # via mypy
nodeenv==1.9.1
    # via pyright
packaging==24.2
    # via pytest
plugin==1.5.0
    # via pytest
pycparser==2.22
    # via cffi
pyright==1.1.398
    # via -r typing.in
pytest==8.3.5
    # via -r typing.in
python-dotenv==1.1.0
    # via -r typing.in
types-contextvars==2.4.7.3
    # via -r typing.in
types-dataclasses==0.6.6
    # via -r typing.in
typing-extensions==4.13.0
    # via
    #   mypy
    #   pyright
```

----------------------------------------

TITLE: Specifying Python Dependencies for Flask Extension
DESCRIPTION: Examples of specifying dependency requirements with lower bounds for Flask extensions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
sqlalchemy>=1.4
python_requires=">=version"
```

----------------------------------------

TITLE: Configuring Eventlet WSGI Server
DESCRIPTION: Python script demonstrating how to set up an Eventlet WSGI server for a Flask application. Creates a server listening on localhost port 8000.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/eventlet.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
import eventlet
from eventlet import wsgi
from hello import create_app

app = create_app()
wsgi.server(eventlet.listen(("127.0.0.1", 8000)), app)
```

----------------------------------------

TITLE: Creating Responses in Flask Views
DESCRIPTION: Using make_response function to simplify creating response object instances in views, allowing easier manipulation of the response before returning.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_10

LANGUAGE: python
CODE:
```
make_response
```

----------------------------------------

TITLE: Running the Flask Ajax Example Application
DESCRIPTION: Command to start the Flask development server
SOURCE: https://github.com/pallets/flask/blob/main/examples/javascript/README.rst#2025-04-20_snippet_1

LANGUAGE: text
CODE:
```
$ flask --app js_example run
```

----------------------------------------

TITLE: Implementing Custom Options Response in Flask
DESCRIPTION: Using Flask.make_default_options_response which can be used by subclasses to alter the default behavior for OPTIONS responses.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
Flask.make_default_options_response
```

----------------------------------------

TITLE: Enabled Autoescaping Block
DESCRIPTION: Shows explicitly enabling autoescaping for a block of template content using autoescape true directive
SOURCE: https://github.com/pallets/flask/blob/main/tests/templates/non_escaping_template.txt#2025-04-20_snippet_2

LANGUAGE: jinja2
CODE:
```
{% autoescape true %}{{ text }}
{{ html }}{% endautoescape %}
```

----------------------------------------

TITLE: Running Tests
DESCRIPTION: Commands for installing test dependencies and running tests
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_6

LANGUAGE: bash
CODE:
```
$ pip install '.[test]'
$ pytest
```

----------------------------------------

TITLE: Setting Up Test Data in SQL
DESCRIPTION: SQL script to initialize test data including user accounts and sample posts for testing.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_1

LANGUAGE: sql
CODE:
```
INSERT INTO user (username, password)
VALUES
  ('test', 'pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f'),
  ('other', 'pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79');

INSERT INTO post (title, body, author_id, created)
VALUES
  ('test title', 'test' || x'0a' || 'body', 1, '2018-01-01 00:00:00');
```

----------------------------------------

TITLE: Defining Python Package Dependencies with pip-compile
DESCRIPTION: Requirements file specifying exact versions of Python packages needed for testing. Generated automatically by pip-compile from tests.in. Includes packages like pytest, python-dotenv, and asgiref with their pinned versions.
SOURCE: https://github.com/pallets/flask/blob/main/requirements/tests.txt#2025-04-20_snippet_0

LANGUAGE: pip
CODE:
```
asgiref==3.8.1
    # via -r tests.in
iniconfig==2.1.0
    # via pytest
packaging==24.2
    # via pytest
pluggy==1.5.0
    # via pytest
pytest==8.3.5
    # via -r tests.in
python-dotenv==1.1.0
    # via -r tests.in
```

----------------------------------------

TITLE: Including CHANGES.rst File in reStructuredText Documentation
DESCRIPTION: This directive includes the content of CHANGES.rst from the parent directory into the current document. This is a common pattern in documentation systems to maintain a single source of truth for changelog information.
SOURCE: https://github.com/pallets/flask/blob/main/docs/changes.rst#2025-04-20_snippet_0

LANGUAGE: rst
CODE:
```
.. include:: ../CHANGES.rst
```

----------------------------------------

TITLE: Flask Version 0.3 Release Notes
DESCRIPTION: Release notes for Flask 0.3 (Schnaps) from 2010-05-28, including new features like message categories, logging handler support, and context binding improvements.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_12

LANGUAGE: markdown
CODE:
```
Version 0.3
-----------

Released 2010-05-28, codename Schnaps

-   Added support for categories for flashed messages.
-   The application now configures a ``logging.Handler`` and will log
    request handling exceptions to that logger when not in debug mode.
-   Added support for context binding that does not require the use of
    the with statement for playing in the console.
-   The request context is now available within the with statement
    making it possible to further push the request context or pop it.
-   Added support for configurations.
```

----------------------------------------

TITLE: Create Project Directory (macOS/Linux)
DESCRIPTION: This command creates a new project directory named 'myproject' and navigates into it.  This is the first step in setting up a new Flask project within a virtual environment. It prepares the file system for subsequent environment creation and package installation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_0

LANGUAGE: Text
CODE:
```
$ mkdir myproject
$ cd myproject
```

----------------------------------------

TITLE: Incorrect Extension Initialization in Flask Factory
DESCRIPTION: An anti-pattern showing how not to initialize Flask extensions in a factory function. This approach binds the extension to a specific app instance, limiting reusability.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
def create_app(config_filename):
    app = Flask(__name__)
    app.config.from_pyfile(config_filename)

    db = SQLAlchemy(app)
```

----------------------------------------

TITLE: Installing Celery using pip
DESCRIPTION: This command installs the Celery library from PyPI using the pip package manager. It prepares the environment to run Celery tasks in a Flask application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
$ pip install celery
```

----------------------------------------

TITLE: Silent Configuration Loading in Flask
DESCRIPTION: Using config.from_pyfile with a silent flag to load configuration from Python files without raising errors if the file doesn't exist.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_6

LANGUAGE: python
CODE:
```
config.from_pyfile
```

----------------------------------------

TITLE: Flask Version 0.1 Release Notes
DESCRIPTION: Initial public preview release of Flask from 2010-04-16.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_14

LANGUAGE: markdown
CODE:
```
Version 0.1
-----------

Released 2010-04-16

-   First public preview release.
```

----------------------------------------

TITLE: Running Eventlet Server
DESCRIPTION: Command to start the Eventlet WSGI server using the configuration script.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/eventlet.rst#2025-04-20_snippet_2

LANGUAGE: text
CODE:
```
$ python wsgi.py
(x) wsgi starting up on http://127.0.0.1:8000
```

----------------------------------------

TITLE: Gitignore Configuration
DESCRIPTION: This configuration file specifies files and directories that should be ignored by Git version control, such as virtual environment directories, compiled Python files, instance folders, and other temporary or build-related files.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/layout.rst#2025-04-20_snippet_3

LANGUAGE: none
CODE:
```
    .venv/

    *.pyc
    __pycache__/

    instance/

    .pytest_cache/
    .coverage
    htmlcov/

    dist/
    build/
    *.egg-info/
```

----------------------------------------

TITLE: Creating Custom Jinja Loaders in Flask
DESCRIPTION: Using create_jinja_loader to override the Jinja template loader creation process in Flask applications.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_5

LANGUAGE: python
CODE:
```
create_jinja_loader
```

----------------------------------------

TITLE: Activate Virtual Environment (macOS/Linux)
DESCRIPTION: This command activates the virtual environment located in the '.venv' directory on macOS or Linux. Activating the environment modifies the shell's PATH so that the project's Python interpreter and installed packages are used instead of the system-wide versions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_4

LANGUAGE: Text
CODE:
```
$ . .venv/bin/activate
```

----------------------------------------

TITLE: Registering Endpoint Callbacks with Decorators
DESCRIPTION: Using the endpoint method on Flask application objects to register callbacks to arbitrary endpoints with decorators.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_4

LANGUAGE: python
CODE:
```
endpoint
```

----------------------------------------

TITLE: Create Project Directory (Windows)
DESCRIPTION: This command creates a new project directory named 'myproject' and navigates into it on Windows. It's the initial step in isolating project dependencies within a virtual environment, preventing conflicts with system-level packages.
SOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#2025-04-20_snippet_2

LANGUAGE: Text
CODE:
```
> mkdir myproject
> cd myproject
```

----------------------------------------

TITLE: Installing Eventlet with Virtual Environment
DESCRIPTION: Commands for creating a virtual environment and installing the application with Eventlet dependencies. Requires Python and pip to be installed.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/eventlet.rst#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
$ cd hello-app
$ python -m venv .venv
$ . .venv/bin/activate
$ pip install .  # install your application
$ pip install eventlet
```

----------------------------------------

TITLE: Basic Jinja Variable Output
DESCRIPTION: Shows basic variable output syntax in Jinja templates for text and HTML variables
SOURCE: https://github.com/pallets/flask/blob/main/tests/templates/non_escaping_template.txt#2025-04-20_snippet_0

LANGUAGE: jinja2
CODE:
```
{{ text }}
{{ html }}
```

----------------------------------------

TITLE: Installing Flask Ajax Example Dependencies
DESCRIPTION: Commands to set up a Python virtual environment and install the project dependencies
SOURCE: https://github.com/pallets/flask/blob/main/examples/javascript/README.rst#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
$ python3 -m venv .venv
$ . .venv/bin/activate
$ pip install -e .
```

----------------------------------------

TITLE: Creating Virtual Environment (Unix)
DESCRIPTION: Commands for creating and activating a Python virtual environment on Unix-like systems
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#2025-04-20_snippet_1

LANGUAGE: bash
CODE:
```
$ python3 -m venv .venv
$ . .venv/bin/activate
```

----------------------------------------

TITLE: Pip Requirements List for Flask Documentation
DESCRIPTION: Auto-generated requirements file created by pip-compile from docs.in. Lists all required Python packages with their exact versions and dependency relationships for building Flask documentation.
SOURCE: https://github.com/pallets/flask/blob/main/requirements/docs.txt#2025-04-20_snippet_0

LANGUAGE: plaintext
CODE:
```
#
# This file is autogenerated by pip-compile with Python 3.13
# by the following command:
#
#    pip-compile docs.in
#
alabaster==1.0.0
    # via sphinx
babel==2.17.0
    # via sphinx
certifi==2025.1.31
    # via requests
charset-normalizer==3.4.1
    # via requests
docutils==0.21.2
    # via
    #   sphinx
    #   sphinx-tabs
idna==3.10
    # via requests
imagesize==1.4.1
    # via sphinx
jinja2==3.1.6
    # via sphinx
markupsafe==3.0.2
    # via jinja2
packaging==24.2
    # via
    #   pallets-sphinx-themes
    #   sphinx
pallets-sphinx-themes==2.3.0
    # via -r docs.in
pygments==2.19.1
    # via
    #   sphinx
    #   sphinx-tabs
requests==2.32.3
    # via sphinx
roman-numerals-py==3.1.0
    # via sphinx
snowballstemmer==2.2.0
    # via sphinx
sphinx==8.2.3
    # via
    #   -r docs.in
    #   pallets-sphinx-themes
    #   sphinx-notfound-page
    #   sphinx-tabs
    #   sphinxcontrib-log-cabinet
sphinx-notfound-page==1.1.0
    # via pallets-sphinx-themes
sphinx-tabs==3.4.7
    # via -r docs.in
sphinxcontrib-applehelp==2.0.0
    # via sphinx
sphinxcontrib-devhelp==2.0.0
    # via sphinx
sphinxcontrib-htmlhelp==2.1.0
    # via sphinx
sphinxcontrib-jsmath==1.0.1
    # via sphinx
sphinxcontrib-log-cabinet==1.0.1
    # via -r docs.in
sphinxcontrib-qthelp==2.0.0
    # via sphinx
sphinxcontrib-serializinghtml==2.0.0
    # via sphinx
urllib3==2.3.0
    # via requests
```

----------------------------------------

TITLE: Configuring WSGI Middleware in Flask
DESCRIPTION: Shows how to add WSGI middleware to a Flask application by wrapping the wsgi_app attribute. Uses ProxyFix middleware from Werkzeug as an example for running behind Nginx.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#2025-04-20_snippet_29

LANGUAGE: python
CODE:
```
from werkzeug.middleware.proxy_fix import ProxyFix
app.wsgi_app = ProxyFix(app.wsgi_app)
```

----------------------------------------

TITLE: Using the SubdomainDispatcher with a Flask Application Factory in Python
DESCRIPTION: Example showing how to use the SubdomainDispatcher to create applications based on subdomains. This implementation handles cases where no user exists for a subdomain by returning a 404 response.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
from myapplication import create_app, get_user_for_subdomain
from werkzeug.exceptions import NotFound

def make_app(subdomain):
    user = get_user_for_subdomain(subdomain)
    if user is None:
        # if there is no user for that subdomain we still have
        # to return a WSGI application that handles that request.
        # We can then just return the NotFound() exception as
        # application which will render a default 404 page.
        # You might also redirect the user to the main page then
        return NotFound()

    # otherwise create the application for the specific user
    return create_app(user)

application = SubdomainDispatcher('example.com', make_app)
```

----------------------------------------

TITLE: Accessing Request Data Using Flask's g Object
DESCRIPTION: This example demonstrates how to use Flask's `g` object to store data during a request. It shows two methods: using an internal prefix with the extension name and using an internal prefix as a namespace. The g object stores data for the lifetime of an application context.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_2

LANGUAGE: python
CODE:
```
# an internal prefix with the extension name
g._hello_user_id = 2

# or an internal prefix as a namespace
from types import SimpleNamespace
g._hello = SimpleNamespace()
g._hello.user_id = 2
```

----------------------------------------

TITLE: Creating and Initializing a Flask Extension Instance
DESCRIPTION: This snippet shows how to create an instance of a Flask extension and then initialize it with a Flask application instance within an application factory function. This allows the extension to exist independently of the app, supporting the application factory pattern.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
hello = HelloExtension()

def create_app():
    app = Flask(__name__)
    hello.init_app(app)
    return app
```

----------------------------------------

TITLE: WSGI Script for Direct Flask Application Import
DESCRIPTION: Example of a WSGI script file that imports a Flask application directly. This approach works when the app is already instantiated in the imported module.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/mod_wsgi.rst#2025-04-20_snippet_1

LANGUAGE: python
CODE:
```
from hello import app

application = app
```

----------------------------------------

TITLE: Flask Version 0.2 Release Notes
DESCRIPTION: Release notes for Flask 0.2 (Jägermeister) from 2010-05-12, detailing various improvements including JSON support, template helpers, and Google App Engine support.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#2025-04-20_snippet_13

LANGUAGE: markdown
CODE:
```
Version 0.2
-----------

Released 2010-05-12, codename J?germeister

-   Various bugfixes
-   Integrated JSON support
-   Added ``get_template_attribute`` helper function.
-   ``Flask.add_url_rule`` can now also register a view function.
-   Refactored internal request dispatching.
-   Server listens on 127.0.0.1 by default now to fix issues with
    chrome.
-   Added external URL support.
-   Added support for ``send_file``.
-   Module support and internal request handling refactoring to better
    support pluggable applications.
-   Sessions can be set to be permanent now on a per-session basis.
-   Better error reporting on missing secret keys.
-   Added support for Google Appengine.
```

----------------------------------------

TITLE: Installing Flask Application Locally
DESCRIPTION: Illustrates the command to install a Flask application locally for development, allowing it to be importable as a module and enables the use of Flask command-line tools.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#2025-04-20_snippet_1

LANGUAGE: text
CODE:
```
$ pip install -e .
```

----------------------------------------

TITLE: Configuring Flask for External Debugger in Code
DESCRIPTION: Python code to configure Flask for use with an external debugger by disabling the built-in debugger and auto-reloader while maintaining debug mode.
SOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#2025-04-20_snippet_3

LANGUAGE: python
CODE:
```
app.run(debug=True, use_debugger=False, use_reloader=False)
```

----------------------------------------

TITLE: Installing Testing Dependencies with pip
DESCRIPTION: Commands to install pytest and coverage packages for testing Flask applications.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#2025-04-20_snippet_0

LANGUAGE: shell
CODE:
```
$ pip install pytest coverage
```

----------------------------------------

TITLE: Running Flask Extension Tests
DESCRIPTION: Common commands for running Flask extension test suites using different test runners.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_5

LANGUAGE: bash
CODE:
```
tox -e py
nox -s test
pytest
```

----------------------------------------

TITLE: Installing Flask Extension in Editable Mode
DESCRIPTION: Command for installing a Flask extension in editable mode from a local repository clone.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_4

LANGUAGE: bash
CODE:
```
pip install -e .
```

----------------------------------------

TITLE: Flask Extension Module Naming
DESCRIPTION: Required Python module naming pattern for Flask extensions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#2025-04-20_snippet_7

LANGUAGE: python
CODE:
```
flask_extension_name
```

----------------------------------------

TITLE: Including License File
DESCRIPTION: This snippet includes the content of the LICENSE.txt file directly into the document. The `:language: text` directive specifies that the included file should be treated as plain text.
SOURCE: https://github.com/pallets/flask/blob/main/docs/license.rst#2025-04-20_snippet_0

LANGUAGE: text
CODE:
```
.. literalinclude:: ../LICENSE.txt
    :language: text
```