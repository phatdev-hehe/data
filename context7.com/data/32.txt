TITLE: Appending Elements Using D3 Enter Selection (JavaScript)
DESCRIPTION: This snippet demonstrates the classic D3 data binding pattern using the `enter()` selection. It selects non-existent `div` elements in the body, binds an array of numbers as data, retrieves the `enter` selection (representing data points without corresponding elements), appends a new `div` for each, and sets the text content based on the bound datum.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_5

LANGUAGE: js
CODE:
```
const div = d3.select("body")
  .selectAll("div")
  .data([4, 8, 15, 16, 23, 42])
  .enter().append("div")
    .text(d => d);
```

----------------------------------------

TITLE: Creating Basic Format Function Javascript
DESCRIPTION: Shows the fundamental way to obtain a formatting function from `d3.format` by providing a format specifier string. This function can then be reused to format multiple numbers consistently. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const f = d3.format(".2f");
```

----------------------------------------

TITLE: Setting Selection Attribute D3.js JavaScript
DESCRIPTION: Sets a specific attribute ("color") to a constant value ("red") for all elements in the selection. If a function is provided as the value, it's evaluated for each element. A null value removes the attribute.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
selection.attr("color", "red")
```

----------------------------------------

TITLE: Chaining Selection Modifications D3.js JavaScript
DESCRIPTION: Demonstrates applying multiple modifications (setting attribute and style) to a selection using method chaining. This is a common pattern as selection methods typically return the selection itself.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
d3.selectAll("p")
    .attr("class", "graf")
    .style("color", "red");
```

----------------------------------------

TITLE: Importing Entire D3 Library (npm/ESM)
DESCRIPTION: This JavaScript snippet shows the standard way to import the entire D3.js library using an ES module import statement after installing it via a package manager like npm. The library is imported as the namespace `d3`.
SOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import * as d3 from "d3";
```

----------------------------------------

TITLE: Selecting All Descendants by Selector String - D3 - JavaScript
DESCRIPTION: This snippet demonstrates the standard way to select all descendant elements matching a CSS selector string ("div") for each element in a D3.js selection. It uses the public `.selectAll()` method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_23

LANGUAGE: javascript
CODE:
```
const div = selection.selectAll("div");
```

----------------------------------------

TITLE: Formatting Decimals with d3.format Javascript
DESCRIPTION: Uses `d3.format(".1f")` to create a formatter function that rounds numbers to one decimal place, demonstrating how d3-format can address floating-point precision issues for display. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const f = d3.format(".1f");
for (let i = 0; i < 10; ++i) {
  console.log(f(0.1 * i));
}
```

----------------------------------------

TITLE: Loading CSV Data with D3 in Vue.js
DESCRIPTION: This snippet demonstrates loading data from a CSV file using D3's csv and autoType functions within a Vue.js component's onMounted hook. The loaded data is stored in a shallowRef variable for reactivity.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {ref, shallowRef, onMounted} from "vue";
import PlotRender from "../components/PlotRender.js";

const riaa = shallowRef([]);

onMounted(() => {
  d3.csv("../data/riaa-us-revenue.csv", d3.autoType).then((data) => (riaa.value = data));
});
```

----------------------------------------

TITLE: Mapping Domain Value to Range in D3 Ordinal Scale
DESCRIPTION: Demonstrates how to use an initialized ordinal scale function. Calling the scale with a value from its domain returns the corresponding mapped value from its range. Requires an existing D3 ordinal scale with a configured domain and range.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#_snippet_1

LANGUAGE: javascript
CODE:
```
color("a") // "red"
```

----------------------------------------

TITLE: Selecting Clicked Element and Styling D3.js JavaScript
DESCRIPTION: This snippet selects all paragraph elements (`<p>`), attaches a click event listener, and within the listener, selects the specific paragraph that was clicked (`event.currentTarget`) to change its text color to red.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_7

LANGUAGE: javascript
CODE:
```
d3.selectAll("p").on("click", (event) => d3.select(event.currentTarget).style("color", "red"));
```

----------------------------------------

TITLE: Initializing Transverse Mercator Projection and Fitting Extent - JavaScript
DESCRIPTION: Initializes a D3 Transverse Mercator geo projection with a specific rotation and immediately fits it to a defined pixel extent ([[x₀, y₀], [x₁, y₁]]) centered around a given GeoJSON object. This sets the projection's scale and translate properties.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/projection.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
var projection = d3.geoTransverseMercator()
    .rotate([74 + 30 / 60, -38 - 50 / 60])
    .fitExtent([[20, 20], [940, 480]], nj);
```

----------------------------------------

TITLE: Applying Line Generator to SVG Path in D3.js
DESCRIPTION: This snippet demonstrates applying a configured line generator (`line`) to an SVG path element. It binds the data to the path using `.datum(data)` and then sets the `d` attribute of the path to the output of the `line` generator when applied to the bound data. This renders the line shape on the SVG canvas.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape.md#_snippet_1

LANGUAGE: js
CODE:
```
path.datum(data).attr("d", line);
```

----------------------------------------

TITLE: Explicit Data Join with Enter, Update, and Exit Functions in D3 (JavaScript)
DESCRIPTION: This snippet expands on the basic `join` method by providing explicit functions for the enter, update, and exit selections. This allows for fine-grained control over each stage. The `enter` function appends a `circle`, the `update` function is the identity, and the `exit` function removes elements. The result of the `enter` and `update` functions are merged.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_3

LANGUAGE: js
CODE:
```
svg.selectAll("circle")
  .data(data)
  .join(
    enter => enter.append("circle"),
    update => update,
    exit => exit.remove()
  )
    .attr("fill", "none")
    .attr("stroke", "black");
```

----------------------------------------

TITLE: Loading and Parsing CSV with d3-fetch in JavaScript
DESCRIPTION: This snippet shows how to fetch and automatically parse a CSV file from a URL using the `d3.csv` function. It returns a promise that resolves to an array of objects representing the parsed data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_1

LANGUAGE: js
CODE:
```
const data = await d3.csv("hello-world.csv"); // [{"Hello": "world"}, …]
```

----------------------------------------

TITLE: Creating HTML Table with D3 Selection and Data Join (JavaScript)
DESCRIPTION: This snippet demonstrates how to create an HTML table structure from a nested array (matrix) using D3's data binding and the `join` method. It first binds the outer array to create rows (`<tr>`) and then, for each row, binds the inner array (using an identity function `d => d`) to create cells (`<td>`), setting their text content.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_0

LANGUAGE: js
CODE:
```
const matrix = [
  [11975,  5871, 8916, 2868],
  [ 1951, 10048, 2060, 6171],
  [ 8010, 16145, 8090, 8045],
  [ 1013,   990,  940, 6907]
];

d3.select("body")
  .append("table")
  .selectAll("tr")
  .data(matrix)
  .join("tr")
  .selectAll("td")
  .data(d => d)
  .join("td")
    .text(d => d);
```

----------------------------------------

TITLE: Rendering D3 Axis on SVG Selection
DESCRIPTION: This JavaScript snippet demonstrates how to append a group element to an SVG selection, apply a CSS transform to position it, and then call a D3 axis generator (`d3.axisBottom`) with a scale (`x`) to render the axis within the group.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const gx = svg.append("g")
    .attr("transform", `translate(0,${height - marginBottom})`)
    .call(d3.axisBottom(x));
```

----------------------------------------

TITLE: Mapping Domain Values to Range (JS)
DESCRIPTION: Demonstrates how to use an initialized band scale `x` as a function. When called with a domain value (e.g., "a", "b", "c"), it returns the starting position of the corresponding band within the output range. If the value is not in the domain, it returns `undefined`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const x = d3.scaleBand(["a", "b", "c"], [0, 960]);
x("a"); // 0
x("b"); // 320
x("c"); // 640
x("d"); // undefined
```

----------------------------------------

TITLE: Selecting Document Body Node D3.js JavaScript
DESCRIPTION: This snippet demonstrates using `d3.select` with a direct node reference, `document.body`. It selects the body element and then applies a style to set its background color to red.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_6

LANGUAGE: javascript
CODE:
```
d3.select(document.body).style("background", "red");
```

----------------------------------------

TITLE: Applying Transition to Change Style in D3/JavaScript
DESCRIPTION: This snippet demonstrates how to initiate a transition on a selection to animate a CSS style. It selects the `<body>` element, calls `.transition()` to create a transition object, and then applies the `.style()` method to animate the `background-color` property to 'red' over the default duration and easing. This requires the D3 library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition.md#_snippet_0

LANGUAGE: javascript
CODE:
```
d3.select("body")
  .transition()
    .style("background-color", "red");
```

----------------------------------------

TITLE: Appending New Elements (D3.js Selection) - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to handle the "enter" selection obtained after binding data with `selection.data()`. It accesses the `enter()` selection, appends new `div` elements for each new datum, and sets the text content of these new elements to the corresponding datum value (`d`). This adds elements to the DOM for data points that didn't have a matching element initially.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_7

LANGUAGE: js
CODE:
```
div.enter().append("div").text(d => d);
```

----------------------------------------

TITLE: Implementing D3 v4 General Update Pattern with Merge (JavaScript)
DESCRIPTION: Illustrates the updated D3 version 4 data join and update pattern. Selections are immutable, so `enter().append()` returns a new selection. The `.merge(circle)` method is used to explicitly combine the enter selection with the original update selection for subsequent operations like styling. This replaces the implicit merging behavior of v3.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_46

LANGUAGE: javascript
CODE:
```
var circle = svg.selectAll("circle").data(data) // UPDATE
    .style("fill", "blue");

circle.exit().remove(); // EXIT

circle.enter().append("circle") // ENTER
    .style("fill", "green")
  .merge(circle) // ENTER + UPDATE
    .style("stroke", "black");
```

----------------------------------------

TITLE: Setting Ticks and Format D3.js JavaScript
DESCRIPTION: A more common approach using the `ticks()` method to specify the desired number of ticks (or a step) and an optional format specifier. D3 automatically determines the tick values and sets the format function, often with appropriate precision, based on the provided arguments. This simplifies setting both the tick count and format simultaneously.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_18

LANGUAGE: javascript
CODE:
```
axis.ticks(10, ",f");
```

----------------------------------------

TITLE: Integrating D3 in HTML via ESM CDN
DESCRIPTION: This HTML snippet shows how to include D3.js in a standard web page using an ES module import from a CDN. It then executes JavaScript code within a script tag with type="module" to create a basic chart and append it to a div element.
SOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#_snippet_1

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<div id="container"></div>
<script type="module">

import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

// Declare the chart dimensions and margins.
const width = 640;
const height = 400;
const marginTop = 20;
const marginRight = 20;
const marginBottom = 30;
const marginLeft = 40;

// Declare the x (horizontal position) scale.
const x = d3.scaleUtc()
    .domain([new Date("2023-01-01"), new Date("2024-01-01")])
    .range([marginLeft, width - marginRight]);

// Declare the y (vertical position) scale.
const y = d3.scaleLinear()
    .domain([0, 100])
    .range([height - marginBottom, marginTop]);

// Create the SVG container.
const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height);

// Add the x-axis.
svg.append("g")
    .attr("transform", `translate(0,${height - marginBottom})`)
    .call(d3.axisBottom(x));

// Add the y-axis.
svg.append("g")
    .attr("transform", `translate(${marginLeft},0)`)
    .call(d3.axisLeft(y));

// Append the SVG element.
container.append(svg.node());

</script>
```

----------------------------------------

TITLE: Create Linear Scale with Domain and Range - D3.js JavaScript
DESCRIPTION: Constructs a new linear scale with the specified domain and range arrays. The first argument is the domain, and the second is the range.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_0

LANGUAGE: javascript
CODE:
```
d3.scaleLinear([0, 100], ["red", "blue"])
```

----------------------------------------

TITLE: Loading and Parsing JSON with d3-fetch in JavaScript
DESCRIPTION: This snippet fetches a JSON file from a URL and parses it into a JavaScript object using `d3.json`. It returns a promise that resolves to the parsed data or `undefined` if the server returns a 204 or 205 status code.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_10

LANGUAGE: js
CODE:
```
const data = await d3.json("example.json");
```

----------------------------------------

TITLE: Applying D3 Transform to HTML Element (CSS/JavaScript)
DESCRIPTION: This snippet demonstrates how to use a D3 `ZoomTransform` object to set the CSS `transform` property on an HTML element (represented by `div`). It constructs a CSS `transform` string combining `translate` and `scale` based on the transform's `x`, `y`, and `k` properties. It also sets `transform-origin` to `0 0` to ensure transformations are applied relative to the top-left corner of the element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_15

LANGUAGE: CSS
CODE:
```
div.style("transform", "translate(" + transform.x + "px," + transform.y + "px) scale(" + transform.k + ")");
div.style("transform-origin", "0 0");
```

----------------------------------------

TITLE: Removing Exiting Elements (D3.js Selection) - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to handle the "exit" selection, which contains elements that existed in the selection before the `data()` join but have no corresponding data in the new dataset. It accesses the `exit()` selection and calls the `remove()` method, which deletes these elements from the DOM. This cleans up elements that are no longer needed based on the updated data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_8

LANGUAGE: js
CODE:
```
div.exit().remove();
```

----------------------------------------

TITLE: Rolling Up Data by Key and Counting with D3.js (JavaScript)
DESCRIPTION: This snippet uses `d3.rollup` to group the `penguins` dataset by `species` and then apply a reduction function `(D) => D.length` to each group. The reducer counts the number of elements in each group. The result is an InternMap where keys are species and values are the counts for each species.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const speciesCount = d3.rollup(penguins, (D) => D.length, (d) => d.species);
```

----------------------------------------

TITLE: Applying D3.js Quantile Scale to Map Values (JavaScript)
DESCRIPTION: Uses a configured quantile scale (e.g., 'color') as a function to map an input numeric value from the domain to its corresponding discrete value in the output range based on quantile thresholds. The examples show mapping different body mass values to colors.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#_snippet_1

LANGUAGE: javascript
CODE:
```
color(3000); // "#eff3ff"
color(4000); // "#6baed6"
color(5000); // "#08519c"
```

----------------------------------------

TITLE: Applying D3 Zoom Behavior with Event Listener (JavaScript)
DESCRIPTION: This snippet creates a new d3-zoom behavior, attaches a listener for the "zoom" event that calls the `zoomed` function, and then applies this behavior to a D3 selection using `selection.call()`. This binds the necessary event listeners to the selected elements, enabling user interaction for panning and zooming.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_0

LANGUAGE: javascript
CODE:
```
selection.call(d3.zoom().on("zoom", zoomed));
```

----------------------------------------

TITLE: Transitioning from Categorical Color Shortcuts (v3) to scaleOrdinal with Schemes (v4)
DESCRIPTION: Compares the D3 v3.x method using predefined categorical color scale constructors (e.g., d3.scale.category10) to the D3 v4.0 approach which involves creating a standard d3.scaleOrdinal and passing a color scheme array (e.g., d3.schemeCategory10) to its constructor or .range() method.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_44

LANGUAGE: JavaScript
CODE:
```
var color = d3.scale.category10();
```

LANGUAGE: JavaScript
CODE:
```
var color = d3.scaleOrdinal(d3.schemeCategory10);
```

----------------------------------------

TITLE: Setting Custom Tick Format D3.js JavaScript
DESCRIPTION: Sets a custom format function for axis ticks using `tickFormat()`. The example uses `d3.format(",.0f")` from the d3-format module to display integers with comma-grouping for thousands. This method replaces the scale's default tick formatter, although tick arguments can still be passed to the custom format function if not also set by `tickFormat` itself.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_17

LANGUAGE: javascript
CODE:
```
axis.tickFormat(d3.format(",.0f"));
```

----------------------------------------

TITLE: Loading CSV Data with D3 v5 Promise (JavaScript)
DESCRIPTION: Illustrates the recommended approach for loading a CSV file in D3 version 5 using Promises. The d3.csv method now returns a Promise, simplifying asynchronous code flow. Errors are handled by the Promise's implicit rejection or a `.catch()` method.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
d3.csv("file.csv").then(function(data) {
  console.log(data);
});
```

----------------------------------------

TITLE: Applying D3 Transform to Canvas 2D Context (JavaScript)
DESCRIPTION: This snippet shows how to render content using a Canvas 2D context that is transformed according to a D3 `ZoomTransform` object. It calls the context's `.translate()` method using the transform's `x` and `y` properties, followed by the context's `.scale()` method using the transform's `k` property for both dimensions. This correctly sets up the context's coordinate system for subsequent drawing operations relative to the applied transform.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
context.translate(transform.x, transform.y);
context.scale(transform.k, transform.k);
```

----------------------------------------

TITLE: Rendering D3 Top Axis Example
DESCRIPTION: This snippet demonstrates rendering a top-oriented D3 axis using the `d3.axisTop` generator with a linear scale and positioning it using a custom Vue component.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_5

LANGUAGE: html
CODE:
```
<ExampleAxis :axis="d3.axisTop(d3.scaleLinear([0, 100], range))" :y="23" />
```

----------------------------------------

TITLE: Constructing D3 Hierarchy from Data (JavaScript)
DESCRIPTION: Uses the `d3.hierarchy` function to convert a standard JavaScript object representing the root node into a D3 hierarchy node structure. This function initializes properties like `depth`, `height`, `parent`, `children`, and retains the original `data`. It requires the D3.js library and a valid hierarchical data object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const root = d3.hierarchy(data);
```

----------------------------------------

TITLE: Simple Data Join with D3 Selection (JavaScript)
DESCRIPTION: This snippet shows the basic usage of the `selection.join` method as a convenient shortcut. It binds `data` to a selection of `circle` elements within an `svg`. The `join("circle")` call automatically handles appending new circles (enter), updating existing ones (update), and removing surplus ones (exit), returning the merged enter and update selection, to which attributes can be applied.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_2

LANGUAGE: js
CODE:
```
svg.selectAll("circle")
  .data(data)
  .join("circle")
    .attr("fill", "none")
    .attr("stroke", "black");
```

----------------------------------------

TITLE: Integrating D3 in HTML via UMD Local File
DESCRIPTION: This HTML snippet shows how to include D3.js in a standard web page using a UMD bundle loaded from a local file (`d3.js`). It then executes JavaScript code to create a basic chart, accessing D3 via the global 'd3' object, and appends it to a div element.
SOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#_snippet_3

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<div id="container"></div>
<script src="d3.js"></script>
<script type="module">

// Declare the chart dimensions and margins.
const width = 640;
const height = 400;
const marginTop = 20;
const marginRight = 20;
const marginBottom = 30;
const marginLeft = 40;

// Declare the x (horizontal position) scale.
const x = d3.scaleUtc()
    .domain([new Date("2023-01-01"), new Date("2024-01-01")])
    .range([marginLeft, width - marginRight]);

// Declare the y (vertical position) scale.
const y = d3.scaleLinear()
    .domain([0, 100])
    .range([height - marginBottom, marginTop]);

// Create the SVG container.
const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height);

// Add the x-axis.
svg.append("g")
    .attr("transform", `translate(0,${height - marginBottom})`)
    .call(d3.axisBottom(x));

// Add the y-axis.
svg.append("g")
    .attr("transform", `translate(${marginLeft},0)`)
    .call(d3.axisLeft(y));

// Append the SVG element.
container.append(svg.node());

</script>
```

----------------------------------------

TITLE: Creating Hierarchy with d3.stratify id/parentId JavaScript
DESCRIPTION: Illustrates the primary use case of d3.stratify to convert tabular data into a hierarchy. It configures the operator to use the 'name' property as the node ID and the 'parent' property as the parent ID for establishing relationships.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const root = d3.stratify()
    .id((d) => d.name)
    .parentId((d) => d.parent)
  (table);
```

----------------------------------------

TITLE: Generating D3 Area Path Data - Javascript
DESCRIPTION: Generates an SVG path data string for the configured area based on the provided data array. This string can then be assigned to the 'd' attribute of an SVG <path> element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_2

LANGUAGE: javascript
CODE:
```
svg.append("path").attr("d", area(data));
```

----------------------------------------

TITLE: Getting Pointer Coordinates using D3.js pointer (JavaScript)
DESCRIPTION: Illustrates how to use the `d3.pointer` utility function to get the [x, y] coordinates of a given event relative to a target element. By default, the coordinates are relative to the event's `currentTarget`. It's useful for transforming raw event coordinates into a local coordinate system within an element. Requires D3.js.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/events.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const [x, y] = d3.pointer(event);
```

----------------------------------------

TITLE: D3 v4 Append/Insert Behavior Demo (JavaScript)
DESCRIPTION: Shows how `d3.select("body").selectAll("div").data(...)` is used to join data to existing and potential `div` elements. The `enter().append("div")` call in D3 v4 inserts new elements (`c`, `d`, `e`) before the element (`f`) that follows them in the data-bound sequence, maintaining the order derived from the data array.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_48

LANGUAGE: javascript
CODE:
```
var div = d3.select("body").selectAll("div")
  .data(["a", "b", "c", "d", "e", "f"], function(d) { return d || this.textContent; });

div.enter().append("div")
    .text(function(d) { return d; });
```

----------------------------------------

TITLE: Generating D3 Stack Layout (JavaScript)
DESCRIPTION: This snippet demonstrates how to create a stack generator using d3.stack, specify the data keys for stacking, and apply it to the tabular input data. The result is an array of series, where each series contains points with lower and upper values defining the stacked segments. Dependencies include the d3-shape module.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_55

LANGUAGE: javascript
CODE:
```
var stack = d3.stack()
    .keys(["apples", "bananas", "cherries", "dates"])
    .order(d3.stackOrderNone)
    .offset(d3.stackOffsetNone);

var series = stack(data);
```

----------------------------------------

TITLE: Drawing D3 Arc in SVG with Constant Data
DESCRIPTION: Demonstrates how to create an SVG path element and set its 'd' attribute using a D3 arc generator configured with fixed inner radius, outer radius, start angle, and end angle. The arc is translated to a specific position.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
svg.append("path")
    .attr("transform", "translate(100,100)")
    .attr("d", d3.arc()({
      innerRadius: 100,
      outerRadius: 200,
      startAngle: -Math.PI / 2,
      endAngle: Math.PI / 2
    }));
```

----------------------------------------

TITLE: Updating D3 Axis with Transition
DESCRIPTION: This JavaScript snippet shows how to update a previously rendered D3 axis by selecting its container group (`gx`), applying a transition (`transition().duration(750)`), and then calling the axis generator again within the transition to smoothly animate the axis changes.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_3

LANGUAGE: javascript
CODE:
```
gx.transition()
    .duration(750)
    .call(d3.axisBottom(x));
```

----------------------------------------

TITLE: Loading and Transforming DSV Data with d3-fetch in JavaScript
DESCRIPTION: This snippet demonstrates fetching and parsing a DSV file with `d3.dsv` while applying a custom row conversion function. This function allows mapping, transforming, and filtering data for each row during the parsing process, such as converting string values to dates or numbers.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_6

LANGUAGE: js
CODE:
```
const data = await d3.dsv(",", "example.csv", (d) => {
  return {
    year: new Date(+d.Year, 0, 1), // convert "Year" column to Date
    make: d.Make,
    model: d.Model,
    length: +d.Length // convert "Length" column to number
  };
});
```

----------------------------------------

TITLE: Initializing D3 GeoPath for SVG
DESCRIPTION: Creates a new D3 geographic path generator. When used with a `projection` argument and without a `context`, it is configured to output SVG path data strings. This is the typical setup for rendering maps to SVG.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const path = d3.geoPath(projection); // for SVG
```

----------------------------------------

TITLE: Parsing CSV String into Objects JavaScript
DESCRIPTION: Uses `d3.csvParse` to parse a CSV string where the first line contains headers. It returns an array of objects, with properties derived from headers, and includes a `columns` property listing headers in order. Fields are initially strings.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_0

LANGUAGE: javascript
CODE:
```
d3.csvParse("foo,bar\n1,2") // [{foo: "1", bar: "2"}, columns: ["foo", "bar"]]
```

----------------------------------------

TITLE: Generating Numeric Ticks - d3.ticks - JavaScript
DESCRIPTION: This code snippet demonstrates the usage of the `d3.ticks` method from the `d3-array` module in D3 v4.0. It generates an array of human-readable numeric tick values between a specified start (0) and end (10) value, aiming for a desired number of ticks (5).
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
var ticks = d3.ticks(0, 10, 5); // [0, 2, 4, 6, 8, 10]
```

----------------------------------------

TITLE: Loading DSV Data with d3-fetch in JavaScript
DESCRIPTION: This snippet fetches and parses a Delimiter-Separated Value (DSV) file using `d3.dsv`. It requires specifying the delimiter character (here, a comma) and the file URL, returning a promise resolving to the parsed data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_5

LANGUAGE: js
CODE:
```
const data = await d3.dsv(",", "example.csv");
```

----------------------------------------

TITLE: Loading CSV Data with d3-fetch in JavaScript
DESCRIPTION: This snippet uses `d3.csv` to fetch and parse a CSV file from a URL. It's a convenient shorthand for `d3.dsv` specifically for comma-separated values and returns a promise resolving to the parsed data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_4

LANGUAGE: js
CODE:
```
const data = await d3.csv("example.csv");
```

----------------------------------------

TITLE: Setting Selection Text Content D3.js JavaScript
DESCRIPTION: Sets the text content of all selected elements to the specified constant value ("Hello, world!"), replacing any existing child elements. A function can provide dynamic text content, and null clears the content.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
selection.text("Hello, world!")
```

----------------------------------------

TITLE: Selecting First Element by ID D3.js JavaScript
DESCRIPTION: This snippet uses `d3.select` with a CSS ID selector to select the first element in the document that has the ID 'chart'. It returns a selection containing this element or an empty selection if no match is found.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const svg = d3.select("#chart");
```

----------------------------------------

TITLE: Setting Scale for D3 Axis Generator
DESCRIPTION: This JavaScript snippet shows how to create a D3 axis generator (here, bottom-oriented) and explicitly set the scale it should use for generating ticks and positions via the `.scale()` method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const xAxis = d3.axisBottom().scale(x);
```

----------------------------------------

TITLE: Setting Projection for GeoPath
DESCRIPTION: Creates a new `d3.geoPath()` generator and configures it to use a specific geographic projection, `d3.geoAlbers()` in this case, using the `.projection()` method. All subsequent rendering or calculations using this generator will apply this projection.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const path = d3.geoPath().projection(d3.geoAlbers());
```

----------------------------------------

TITLE: Creating UTC Time Scale in D3.js
DESCRIPTION: This snippet demonstrates creating a D3.js time scale (`scaleUtc`) which maps a date domain to a numerical pixel range using UTC time. It shows how to use the scale function to convert dates to numbers and the `invert` method to convert numbers back to dates in the UTC timezone. Requires the D3.js library, specifically the d3-scale module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/time.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const x = d3.scaleUtc([new Date("2000-01-01"), new Date("2000-01-02")], [0, 960]);
x(new Date("2000-01-01T05:00Z")); // 200
x(new Date("2000-01-01T16:00Z")); // 640
x.invert(200); // 2000-01-01T05:00Z
x.invert(640); // 2000-01-01T16:00Z
```

----------------------------------------

TITLE: Setting Functional Delay D3 Transition JavaScript
DESCRIPTION: Sets the delay of a D3 transition using a function that is evaluated for each selected element. The function receives the datum (d), index (i), and group (nodes), with 'this' as the current DOM element, and should return the delay in milliseconds. This allows for varying delays, such as staggering based on index.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#_snippet_2

LANGUAGE: javascript
CODE:
```
transition.delay((d, i) => i * 10);
```

----------------------------------------

TITLE: Loading CSV Data with D3 v5 Async/Await (JavaScript)
DESCRIPTION: Shows a more modern and concise way to load data in D3 version 5 using the `async` and `await` keywords with Promises. This syntax makes asynchronous operations look synchronous and simplifies variable assignment, requiring an `async` function context.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const data = await d3.csv("file.csv");
console.log(data);
```

----------------------------------------

TITLE: Configuring D3 geoConicConformal Projection JavaScript
DESCRIPTION: This snippet demonstrates configuring a D3 conic conformal projection. It sets the standard parallels, rotation, scale based on defined width, center, translation to center the map, clipping extent slightly beyond the viewbox, and precision.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/conic.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
d3.geoConicConformal().parallels([35, 65]).rotate([-20, 0]).scale(width * 0.55).center([0, 52]).translate([width / 2, height / 2]).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)
```

----------------------------------------

TITLE: Getting Filtered Date Range with D3 timeDay and every - JavaScript
DESCRIPTION: Demonstrates using the `every` method on `d3.timeDay` to filter the interval to every second day, and then using `range` to generate an array of dates within a specified start and end date using the filtered interval. The start date is inclusive, and the end date is exclusive.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_14

LANGUAGE: javascript
CODE:
```
d3.timeDay.every(2).range(new Date(2015, 0, 1), new Date(2015, 0, 7)) // [2015-01-01T00:00, 2015-01-03T00:00, 2015-01-05T00:00]
```

----------------------------------------

TITLE: Preparing Hierarchy for Treemap Layout (JavaScript)
DESCRIPTION: Demonstrates the typical steps to prepare a D3 hierarchy node for use with a treemap layout. It involves configuring the treemap, summing node values using `node.sum`, sorting nodes using `node.sort`, applying the layout, and retrieving the positioned descendant nodes. This workflow is essential for hierarchical visualizations.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
// Construct the treemap layout.
const treemap = d3.treemap();
treemap.size([width, height]);
treemap.padding(2);

// Sum and sort the data.
root.sum((d) => d.value);
root.sort((a, b) => b.height - a.height || b.value - a.value);

// Compute the treemap layout.
treemap(root);

// Retrieve all descendant nodes.
const nodes = root.descendants();
```

----------------------------------------

TITLE: Selecting First Descendant for Each Element D3.js JavaScript
DESCRIPTION: This snippet applies `selection.select` to a selection of all `<p>` elements. For each paragraph, it selects the first descendant `<b>` element it finds. The resulting selection maintains the original grouping and propagates data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const b = d3.selectAll("p").select("b"); // the first <b> in every <p>
```

----------------------------------------

TITLE: Unbinding D3 Drag Event Listeners
DESCRIPTION: This snippet shows how to remove the event listeners bound by the drag behavior from a selection. The drag behavior registers listeners under the namespaced name ".drag", allowing them to be specifically removed by setting the listener to null.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
selection.on(".drag", null);
```

----------------------------------------

TITLE: Nicing Linear Scale Domain Bounds D3.js JavaScript
DESCRIPTION: Creates a d3.scaleLinear with an arbitrary domain and then calls the `.nice()` method without arguments. This method extends the scale's domain so that it starts and ends on 'nice' round values, which is useful for improving the readability of axes derived from data extents. Requires the d3-scale module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_19

LANGUAGE: javascript
CODE:
```
const x = d3.scaleLinear([0.241079, 0.969679], [0, 960]).nice();
x.domain(); // [0.2, 1]
```

----------------------------------------

TITLE: Parsing CSV with Row Conversion Function JavaScript
DESCRIPTION: Parses a CSV string into objects while applying a custom function to each data row. This function receives the row object (`d`) and can transform or convert field values (e.g., string to Date/Number) or filter rows by returning `null`/`undefined`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const data = d3.csvParse(string, (d) => {
  return {
    year: new Date(+d.Year, 0, 1), // lowercase and convert "Year" to Date
    make: d.Make, // lowercase
    model: d.Model, // lowercase
    length: +d.Length // lowercase and convert "Length" to number
  };
});
```

----------------------------------------

TITLE: Creating Sequential Color Scale with d3.interpolateRainbow - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to create a continuous sequential color scale using the D3.js library. It initializes a `d3.scaleSequential` using the `d3.interpolateRainbow` color interpolator. This scale maps numerical input values (typically in the domain [0,1]) to corresponding colors from the 'less-angry rainbow' cyclical color scheme, suitable for visualizing data that wraps around.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/cyclical.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const color = d3.scaleSequential(d3.interpolateRainbow);
```

----------------------------------------

TITLE: Grouping Data by Key with D3.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `d3.group` to group an iterable dataset, like the `penguins` array, based on a single key function. The function `(d) => d.species` extracts the species from each data point. It returns an InternMap where keys are species names and values are arrays of corresponding penguin objects.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const species = d3.group(penguins, (d) => d.species);
```

----------------------------------------

TITLE: Formatting Data to CSV using d3.csvFormat in JavaScript
DESCRIPTION: Formats an array of data objects into a CSV string using `d3.csvFormat`. An optional array of column names specifies which properties to include and their order in the output CSV. Requires the `d3-dsv` or full D3 library.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_16

LANGUAGE: javascript
CODE:
```
var string = d3.csvFormat(data, ["Year", "Model", "Length"]);
```

----------------------------------------

TITLE: Applying d3-brush to SVG Group - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to apply a d3 brush instance to an SVG group element using `selection.call()`. It appends a new group, sets its class, and then calls the brush instance on it, attaching a listener for the 'brush' event to a function named `brushed`. This is the standard way to render and activate a brush.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-brush.md#_snippet_0

LANGUAGE: javascript
CODE:
```
svg.append("g")
    .attr("class", "brush")
    .call(d3.brush().on("brush", brushed));
```

----------------------------------------

TITLE: Defining Reusable Function for D3 Call - JavaScript
DESCRIPTION: Defines a standard JavaScript function designed to accept a D3 selection as its first argument, followed by additional parameters. This function sets `first-name` and `last-name` attributes on all elements in the passed selection. It is intended to be used with the `selection.call` method for method chaining.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function name(selection, first, last) {
  selection
      .attr("first-name", first)
      .attr("last-name", last);
}
```

----------------------------------------

TITLE: Interpolating Numbers with d3.interpolateNumber (JavaScript)
DESCRIPTION: Demonstrates how to use d3.interpolateNumber to create an interpolator between two numeric values. The returned function is called with a parameter t (typically 0 to 1) to get the corresponding interpolated value, showing outputs for different t values.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const i = d3.interpolateNumber(10, 20);
i(0.0); // 10
i(0.2); // 12
i(0.5); // 15
i(1.0); // 20
```

----------------------------------------

TITLE: Applying Custom D3.js Easing
DESCRIPTION: Demonstrates applying a pre-configured easing function (like one created with `.period()` or `.amplitude()`) to a normalized time `t` to get the eased time `te`. Requires a pre-configured D3.js easing function. Input is a normalized time `t` (usually [0,1]), output is an eased time `te`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const te = ease(t);
```

----------------------------------------

TITLE: Grouping Data by Multiple Keys with D3.js (JavaScript)
DESCRIPTION: This example shows how to use `d3.group` with multiple key functions. It groups the `penguins` dataset first by `species` and then, within each species group, by `sex`. The result is a nested InternMap where the first level keys are species and the second level keys are sex values, mapping to arrays of corresponding penguin objects.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const speciesSex = d3.group(penguins, (d) => d.species, (d) => d.sex)
```

----------------------------------------

TITLE: Summing and Sorting Hierarchy by Height/Value (JavaScript)
DESCRIPTION: Calculates aggregated node values via `node.sum` and subsequently sorts nodes using `node.sort`. The sorting prioritizes descending `height` (distance to leaf) and secondarily uses descending `value`. This combined sorting strategy is commonly advised for D3 treemap and icicle layouts to influence node placement.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
root
    .sum((d) => d.value)
    .sort((a, b) => b.height - a.height || b.value - a.value);
```

----------------------------------------

TITLE: Registering Callbacks with dispatch.on in JavaScript
DESCRIPTION: This snippet shows how to attach callback functions to specific event types on a dispatch object using `dispatch.on()`. It illustrates using plain types (`"start"`, `"end"`) and types with names (`"start.foo"`) to allow multiple listeners for the same event type.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dispatch.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
dispatch.on("start", callback1);
dispatch.on("start.foo", callback2);
dispatch.on("end", callback3);
```

----------------------------------------

TITLE: Applying D3 Transform to SVG Element using toString (SVG/JavaScript)
DESCRIPTION: This snippet provides a simpler, recommended way to apply a D3 `ZoomTransform` to an SVG element. By passing the `transform` object directly to the `attr("transform", ...)` method, D3 implicitly calls the transform object's `toString()` method, which generates the correctly formatted SVG transform string (e.g., `translate(tx,ty)scale(k)`). This is the preferred method for setting SVG transforms.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_17

LANGUAGE: SVG
CODE:
```
g.attr("transform", transform);
```

----------------------------------------

TITLE: Rendering Bottom Axis (D3 v4.0) - d3.axisBottom - HTML/JavaScript
DESCRIPTION: This snippet demonstrates the simplified syntax for rendering a bottom axis in D3 v4.0 using the new constructor-based API. It selects a DOM element with the class "axis" and directly calls `d3.axisBottom(x)` to generate and apply the axis elements with default styling.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_9

LANGUAGE: HTML
CODE:
```
<script>

d3.select(".axis")
    .call(d3.axisBottom(x));

</script>
```

----------------------------------------

TITLE: Setting Constant Duration D3 Transition JavaScript
DESCRIPTION: Sets the duration of a D3 transition for all elements to a constant value in milliseconds. This makes all selected elements transition over the same period. Requires a D3 transition object. The default duration is 250ms if not explicitly set.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#_snippet_3

LANGUAGE: javascript
CODE:
```
transition.duration(750);
```

----------------------------------------

TITLE: Integrating D3 in HTML via UMD CDN
DESCRIPTION: This HTML snippet shows how to include D3.js in a standard web page using a UMD bundle loaded from a CDN via a simple script tag. It then executes JavaScript code to create a basic chart, accessing D3 via the global 'd3' object, and appends it to a div element.
SOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#_snippet_2

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<div id="container"></div>
<script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
<script type="module">

// Declare the chart dimensions and margins.
const width = 640;
const height = 400;
const marginTop = 20;
const marginRight = 20;
const marginBottom = 30;
const marginLeft = 40;

// Declare the x (horizontal position) scale.
const x = d3.scaleUtc()
    .domain([new Date("2023-01-01"), new Date("2024-01-01")])
    .range([marginLeft, width - marginRight]);

// Declare the y (vertical position) scale.
const y = d3.scaleLinear()
    .domain([0, 100])
    .range([height - marginBottom, marginTop]);

// Create the SVG container.
const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height);

// Add the x-axis.
svg.append("g")
    .attr("transform", `translate(0,${height - marginBottom})`)
    .call(d3.axisBottom(x));

// Add the y-axis.
svg.append("g")
    .attr("transform", `translate(${marginLeft},0)`)
    .call(d3.axisLeft(y));

// Append the SVG element.
container.append(svg.node());

</script>
```

----------------------------------------

TITLE: Parsing CSV String with Automatic Type Inference (D3.js)
DESCRIPTION: Shows how to use d3.csvParse with the d3.autoType row accessor function. d3.autoType attempts to infer the data type of each value (like numbers, booleans, dates, or null) based on its content and coerce it accordingly.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_17

LANGUAGE: javascript
CODE:
```
d3.csvParse(string, d3.autoType)
```

----------------------------------------

TITLE: Initializing D3 Force Simulation with Forces (JS)
DESCRIPTION: Demonstrates how to create a new force simulation using `d3.forceSimulation` with an array of nodes and assign standard forces like charge, link, and center using the `simulation.force()` method chaining. Requires the D3.js library and initial data for nodes and links.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/simulation.md#_snippet_1

LANGUAGE: js
CODE:
```
const simulation = d3.forceSimulation(nodes)
    .force("charge", d3.forceManyBody())
    .force("link", d3.forceLink(links))
    .force("center", d3.forceCenter());
```

----------------------------------------

TITLE: Transitioning from Ordinal rangeBands (v3) to Band Scales (v4)
DESCRIPTION: Compares the D3 v3.x method for creating an ordinal scale with range bands (.rangeBands) to the D3 v4.0 approach using the new d3.scaleBand() constructor. Band scales are a specialized subclass for creating discrete bands.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_42

LANGUAGE: JavaScript
CODE:
```
var x = d3.scale.ordinal()
    .domain(["a", "b", "c"])
    .rangeBands([0, width]);
```

LANGUAGE: JavaScript
CODE:
```
var x = d3.scaleBand()
    .domain(["a", "b", "c"])
    .range([0, width]);
```

----------------------------------------

TITLE: Invoking D3 Arc Generator with Data Object
DESCRIPTION: Calls an arc generator (created with default accessors) by passing an object containing the necessary data properties: innerRadius, outerRadius, startAngle, and endAngle. Returns the generated SVG path data string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const arc = d3.arc();

arc({
  innerRadius: 0,
  outerRadius: 100,
  startAngle: 0,
  endAngle: Math.PI / 2
}); // "M0,-100A100,100,0,0,1,100,0L0,0Z"
```

----------------------------------------

TITLE: Rendering Stacked Bars with D3 Selections (JavaScript)
DESCRIPTION: This snippet illustrates how to render a stacked bar chart using D3 selections after applying the stack layout. It binds the generated series data to groups and then the individual points within each series to rectangles, setting their position, height, and width based on the stack results.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
svg.append("g")
  .selectAll("g")
  .data(series)
  .join("g")
    .attr("fill", d => color(d.key))
  .selectAll("rect")
  .data(D => D)
  .join("rect")
    .attr("x", d => x(d.data[0]))
    .attr("y", d => y(d[1]))
    .attr("height", d => y(d[0]) - y(d[1]))
    .attr("width", x.bandwidth());
```

----------------------------------------

TITLE: Rendering FeatureCollection to Single SVG Path
DESCRIPTION: Appends an SVG `path` element, binds a GeoJSON FeatureCollection object as its data using `.datum()`, and sets the `d` attribute using the default `d3.geoPath()` generator. This renders all features within the collection into a single SVG path element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_2

LANGUAGE: javascript
CODE:
```
svg.append("path")
    .datum({type: "FeatureCollection", features: features})
    .attr("d", d3.geoPath());
```

----------------------------------------

TITLE: Applying D3 Drag Behavior to a Selection
DESCRIPTION: This example demonstrates how to apply a newly created drag behavior to elements matched by a CSS selector (.node) using selection.call(). It also shows how to chain an event listener (.on("start", started)) to react when a drag gesture begins.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
d3.selectAll(".node").call(d3.drag().on("start", started));
```

----------------------------------------

TITLE: Sorting Data using d3.sort with Accessor - JavaScript
DESCRIPTION: This snippet shows how to use d3.sort with an accessor function to sort an iterable of objects based on a specific property (d.value). The accessor is called once per element, and sorting is performed based on the natural order of the values returned by the accessor.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
d3.sort(data, (d) => d.value)
```

----------------------------------------

TITLE: Calculating Sum with Accessor - D3.js JavaScript
DESCRIPTION: Illustrates using `d3.sum` with an optional accessor function to sum values from a specific property (`body_mass_g`) of objects in an array (`penguins`). The accessor extracts the numeric value from each element, allowing the function to sum complex data structures. The output is the total sum of the extracted values.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
d3.sum(penguins, (d) => d.body_mass_g) // 1437000
```

----------------------------------------

TITLE: Constructing RGB Color with d3.rgb JavaScript
DESCRIPTION: Constructs a new RGB color object using the d3.rgb function. It can accept individual channel values, a CSS specifier string, or another color instance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_16

LANGUAGE: javascript
CODE:
```
d3.rgb("hsl(60, 100%, 50%)") // {r: 255, g: 255, b: 0, opacity: 1}
```

----------------------------------------

TITLE: Configuring D3 Arc Generator with Constant Properties
DESCRIPTION: Creates an arc generator and configures its inner radius, outer radius, start angle, and end angle using constant numeric values via chained method calls.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const arc = d3.arc()
    .innerRadius(0)
    .outerRadius(100)
    .startAngle(0)
    .endAngle(Math.PI / 2);
```

----------------------------------------

TITLE: Instantly Resetting D3 Zoom Transform (JavaScript)
DESCRIPTION: This snippet uses `selection.call()` to invoke the `zoom.transform()` method on a D3 selection, passing `d3.zoomIdentity` as the target transform. This instantaneously resets the zoom state of the selected elements to the default state, which is no translation or scaling, and emits the corresponding zoom events.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_3

LANGUAGE: javascript
CODE:
```
selection.call(zoom.transform, d3.zoomIdentity);
```

----------------------------------------

TITLE: Setting Data with Key Function (D3.js Selection) - JavaScript
DESCRIPTION: This JavaScript snippet uses the `selection.data()` method to bind a new array of numbers (`[1, 2, 4, 8, 16, 32]`) to a D3 selection named `div`. It specifies a key function (`d => d`) which uses the datum value itself as the key, allowing D3 to match existing elements to new data based on their values. This operation updates the data bound to elements and creates the necessary enter, update, and exit selections.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_6

LANGUAGE: js
CODE:
```
div = div.data([1, 2, 4, 8, 16, 32], d => d);
```

----------------------------------------

TITLE: Selecting All Elements by Tag D3.js JavaScript
DESCRIPTION: This snippet uses `d3.selectAll` with a CSS tag selector to select all `<p>` elements present in the document. It returns a selection containing all matching elements in document order.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const p = d3.selectAll("p");
```

----------------------------------------

TITLE: Calculating Quantiles - D3.js JavaScript
DESCRIPTION: Demonstrates calculating different quantiles of a simple array using `d3.quantile` for various probability values (`p`). The examples show how to find the minimum (p=0), median (p=0.5), maximum (p=1), and quartiles (p=0.25, p=0.75). The function uses the R-7 method to estimate quantiles.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
const numbers = [0, 10, 30];
d3.quantile(numbers, 0); // 0
d3.quantile(numbers, 0.5); // 10
d3.quantile(numbers, 1); // 30
d3.quantile(numbers, 0.25); // 5
d3.quantile(numbers, 0.75); // 20
d3.quantile(numbers, 0.1); // 2
```

----------------------------------------

TITLE: Creating D3 Ordinal Scale with Categorical Scheme (JavaScript)
DESCRIPTION: This snippet demonstrates how to create a D3 ordinal color scale. It uses `d3.scaleOrdinal` and passes one of the categorical color scheme arrays (e.g., `d3.schemeAccent`) as the range, allowing the scale to map discrete input values to the colors in the scheme sequentially.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/categorical.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const color = d3.scaleOrdinal(d3.schemeAccent);
```

----------------------------------------

TITLE: Generating Log Scale Ticks D3 JavaScript
DESCRIPTION: Creates a D3 logarithmic scale and then uses the `.ticks()` method to generate an array of representative tick values for the scale's domain. The number of ticks is determined automatically or by an optional count parameter. The comment shows an example output array `T` for a scale from 1 to 100.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/log.md#_snippet_2

LANGUAGE: js
CODE:
```
const x = d3.scaleLog([1, 100], [0, 960]);
const T = x.ticks(); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
```

----------------------------------------

TITLE: Using d3.path for SVG Path Generation (JavaScript)
DESCRIPTION: Demonstrates how to use d3.path() to create a path serializer context. This context implements the CanvasPathMethods API. A function designed for Canvas can then draw to this context, and the resulting path data can be retrieved using context.toString() and set as the d attribute of an SVG <path> element.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_35

LANGUAGE: JavaScript
CODE:
```
var context = d3.path();
drawCircle(context, 40);
pathElement.setAttribute("d", context.toString());
```

----------------------------------------

TITLE: Using d3.interpolateZoom Javascript
DESCRIPTION: Demonstrates the basic usage of the `d3.interpolateZoom` function to create and use an interpolator for smoothly transitioning between two 2D views. Requires the D3.js `d3-interpolate` module. The function takes two view arrays `[cx, cy, width]` and returns an interpolator; the interpolator itself is then called with a parameter `t` (from 0 to 1) to get an interpolated view.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/zoom.md#_snippet_0

LANGUAGE: javascript
CODE:
```
d3.interpolateZoom([30, 30, 40], [135, 85, 60])(0.5) // [72, 52, 126.04761005270991]
```

----------------------------------------

TITLE: Parsing CSV Data with d3.csvParse JavaScript
DESCRIPTION: Demonstrates how to parse the input CSV text into a JavaScript array of objects using D3's csvParse function. This is a necessary step to prepare the data for d3.stratify. The output is an array of flat objects.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const table = d3.csvParse(text);
```

----------------------------------------

TITLE: Adding D3 Axes to React Plot using useEffect
DESCRIPTION: This React component shows how to use D3 modules that manipulate the DOM, specifically for rendering axes. It utilizes `useRef` to get references to SVG group elements and `useEffect` hooks to call D3's `d3.select(...).call(d3.axis...)` methods, allowing D3 to handle the axis drawing within the specified elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#_snippet_12

LANGUAGE: jsx
CODE:
```
import * as d3 from "d3";
import {useRef, useEffect} from "react";

export default function LinePlot({
  data,
  width = 640,
  height = 400,
  marginTop = 20,
  marginRight = 20,
  marginBottom = 30,
  marginLeft = 40
}) {
  const gx = useRef();
  const gy = useRef();
  const x = d3.scaleLinear([0, data.length - 1], [marginLeft, width - marginRight]);
  const y = d3.scaleLinear(d3.extent(data), [height - marginBottom, marginTop]);
  const line = d3.line((d, i) => x(i), y);
  useEffect(() => void d3.select(gx.current).call(d3.axisBottom(x)), [gx, x]);
  useEffect(() => void d3.select(gy.current).call(d3.axisLeft(y)), [gy, y]);
  return (
    <svg width={width} height={height}>
      <g ref={gx} transform={`translate(0,${height - marginBottom})`} />
      <g ref={gy} transform={`translate(${marginLeft},0)`} />
      <path fill="none" stroke="currentColor" strokeWidth="1.5" d={line(data)} />
      <g fill="white" stroke="currentColor" strokeWidth="1.5">
        {data.map((d, i) => (<circle key={i} cx={x(i)} cy={y(d)} r="2.5" />))}
      </g>
    </svg>
  );
}
```

----------------------------------------

TITLE: Indexing Data by Key with D3.js (JavaScript)
DESCRIPTION: This snippet uses `d3.index` to create an index for the `aapl` dataset based on the `Date` property of each item. `d3.index` is specifically for creating an index where each key is expected to map to a single value, typically the first value in its group. It returns an InternMap for efficient lookup by date.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const aaplDate = d3.index(aapl, (d) => d.Date);
```

----------------------------------------

TITLE: Custom D3 Drag Subject Accessor for Closest Circle on Canvas
DESCRIPTION: This custom subject accessor is designed for scenarios like dragging circles on a Canvas. It iterates through a list of circles ('circles'), calculates the distance from the initiating event coordinates (event.x, event.y), and returns the closest circle within a defined search radius ('radius') as the drag subject.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
function subject(event) {
  let n = circles.length,
      i,
      dx,
      dy,
      d2,
      s2 = radius * radius,
      circle,
      subject;

  for (i = 0; i < n; ++i) {
    circle = circles[i];
    dx = event.x - circle.x;
    dy = event.y - circle.y;
    d2 = dx * dx + dy * dy;
    if (d2 < s2) subject = circle, s2 = d2;
  }

  return subject;
}
```

----------------------------------------

TITLE: Summing and Sorting Hierarchy by Value (JavaScript)
DESCRIPTION: First computes the aggregated value for each node and its descendants using `node.sum`. Then, it sorts the child nodes at each level based on this computed `value` in descending order using `node.sort`. This sorting approach is particularly recommended when preparing data for D3 circle-packing layouts.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
root
    .sum((d) => d.value)
    .sort((a, b) => b.value - a.value);
```

----------------------------------------

TITLE: Implementing Multi-Scale Time Format in D3 JavaScript
DESCRIPTION: Presents a complex example of a multi-scale formatter function that selects an appropriate format based on the date's time interval (millisecond, second, minute, etc.), using various UTC formatters.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const formatMillisecond = d3.utcFormat(".%L"),
    formatSecond = d3.utcFormat(":%S"),
    formatMinute = d3.utcFormat("%I:%M"),
    formatHour = d3.utcFormat("%I %p"),
    formatDay = d3.utcFormat("%a %d"),
    formatWeek = d3.utcFormat("%b %d"),
    formatMonth = d3.utcFormat("%B"),
    formatYear = d3.utcFormat("%Y");

function multiFormat(date) {
  return (d3.utcSecond(date) < date ? formatMillisecond
      : d3.utcMinute(date) < date ? formatSecond
      : d3.utcHour(date) < date ? formatMinute
      : d3.utcDay(date) < date ? formatHour
      : d3.utcMonth(date) < date ? (d3.utcWeek(date) < date ? formatDay : formatWeek)
      : d3.utcYear(date) < date ? formatMonth
      : formatYear)(date);
}
```

----------------------------------------

TITLE: Rendering Multiple Features to Separate SVG Paths
DESCRIPTION: Uses D3's data join pattern to create separate SVG `path` elements for each feature in the `features` array. Each path element's `d` attribute is set using the default `d3.geoPath()` generator, resulting in individual, styleable path elements for each feature.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_3

LANGUAGE: javascript
CODE:
```
svg.selectAll()
  .data(features)
  .join("path")
    .attr("d", d3.geoPath());
```

----------------------------------------

TITLE: Mapping Domain Values with D3 point(value) - JavaScript
DESCRIPTION: Demonstrates how to create a D3 point scale with a specified domain and range and how to use the scale function to map domain values to their corresponding positions in the range. Shows the result for values in the domain ("a", "b", "c") and a value not in the domain ("d").
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const x = d3.scalePoint(["a", "b", "c"], [0, 960]);
x("a"); // 0
x("b"); // 480
x("c"); // 960
x("d"); // undefined
```

----------------------------------------

TITLE: Mapping Domain to Range (JavaScript)
DESCRIPTION: Creates a quantize scale mapping [0, 1] to ["brown", "steelblue"] and demonstrates how calling the scale function with input values returns the corresponding value from the discrete range. Values less than 0.5 map to "brown", and values greater than or equal to 0.5 map to "steelblue". This illustrates the core mapping functionality of the scale.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const color = d3.scaleQuantize([0, 1], ["brown", "steelblue"]);
color(0.49); // "brown"
color(0.51); // "steelblue"
```

----------------------------------------

TITLE: Creating Local Time Scale in D3.js
DESCRIPTION: This snippet demonstrates creating a D3.js time scale (`scaleTime`) which maps a date domain to a numerical pixel range using local time. It shows how to use the scale function to convert dates to numbers and the `invert` method to convert numbers back to dates. Requires the D3.js library, specifically the d3-scale module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/time.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const x = d3.scaleTime([new Date(2000, 0, 1), new Date(2000, 0, 2)], [0, 960]);
x(new Date(2000, 0, 1, 5)); // 200
x(new Date(2000, 0, 1, 16)); // 640
x.invert(200); // Sat Jan 01 2000 05:00:00 GMT-0800 (PST)
x.invert(640); // Sat Jan 01 2000 16:00:00 GMT-0800 (PST)
```

----------------------------------------

TITLE: Applying Cubic Easing in D3.js
DESCRIPTION: Demonstrates how to apply the built-in `easeCubic` function from the d3-ease module to a normalized time `t` to get the eased time `te`. Requires the D3.js ease module. Input is a normalized time `t` (usually [0,1]), output is an eased time `te`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const te = d3.easeCubic(t);
```

----------------------------------------

TITLE: Applying D3 Stack Layout to Tidy Data (JavaScript)
DESCRIPTION: This snippet demonstrates how to apply the D3 stack layout to tidy data. It uses d3.union to find unique keys (fruits), d3.index to group data by date and fruit, and a custom value accessor to retrieve sales values from the grouped data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const series = d3.stack()
    .keys(d3.union(data.map(d => d.fruit))) // apples, bananas, cherries, …
    .value(([, group], key) => group.get(key).sales)
  (d3.index(data, d => d.date, d => d.fruit));
```

----------------------------------------

TITLE: Creating Locale-Specific Time Format in JavaScript
DESCRIPTION: Demonstrates the basic usage of `d3.timeFormat` to create a locale-specific date formatter using a standard specifier. This is an alias for the default locale's format method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.timeFormat("%b %d")
```

----------------------------------------

TITLE: Generating Weekly Date Ranges with d3-time (JavaScript)
DESCRIPTION: This snippet shows how to generate an array of dates representing specific time interval boundaries within a given range using d3-time. It first uses `d3.timeMonth.floor` and `d3.timeMonth.ceil` to determine the start and end boundaries covering a specific month based on a date within that month. Then, it uses `d3.timeWeek.range` to find all Sunday boundaries (the default start of the week for `timeWeek`) that fall within that month range.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const start = d3.timeMonth.floor(new Date(2015, 0, 15)); // 2015-01-01T00:00
const stop = d3.timeMonth.ceil(new Date(2015, 0, 15)); // 2015-02-01T00:00
const weeks = d3.timeWeek.range(start, stop); // [2015-01-04T00:00, 2015-01-11T00:00, 2015-01-18T00:00, 2015-01-25T00:00]
```

----------------------------------------

TITLE: Styling Enter and Update Selections Separately with D3 Join (JavaScript)
DESCRIPTION: Building upon the explicit `join` function pattern, this example demonstrates applying different styles (specifically, fill colors) to elements based on whether they are entering the selection or are being updated. Entering circles get a "green" fill, while updating circles get a "blue" fill. A common attribute (`stroke`) is applied to the merged enter/update selection.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_4

LANGUAGE: js
CODE:
```
svg.selectAll("circle")
  .data(data)
  .join(
    enter => enter.append("circle").attr("fill", "green"),
    update => update.attr("fill", "blue")
  )
    .attr("stroke", "black");
```

----------------------------------------

TITLE: Formatting as Localized Currency Javascript
DESCRIPTION: Shows formatting a number as a fixed-point currency string using `d3.format("($.2f")`. The specifier formats to two decimal places, includes a currency symbol (which can be locale-defined), and encloses negative values in parentheses. Requires d3-format.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.format("($.2f")(-3.5) // localized fixed-point currency, "(£3.50)"
```

----------------------------------------

TITLE: Creating Delaunay Triangulation with Accessor Functions JavaScript
DESCRIPTION: This snippet shows how to use `d3.Delaunay.from()` with accessor functions (`fx`, `fy`) to extract x and y coordinates from a general array or iterable of point objects. The accessors are called for each element in the input array.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const delaunay = d3.Delaunay.from([{x: 0, y: 0}, {x: 0, y: 1}, {x: 1, y: 0}, {x: 1, y: 1}], (d) => d.x, (d) => d.y);
```

----------------------------------------

TITLE: Parsing TSV String into Objects JavaScript
DESCRIPTION: Uses `d3.tsvParse` to parse a TSV string assuming the first line is headers. It returns an array of objects with properties matching headers and a `columns` property. Field values are initially strings.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_1

LANGUAGE: javascript
CODE:
```
d3.tsvParse("foo\tbar\n1\t2") // [{foo: "1", bar: "2"}, columns: ["foo", "bar"]]
```

----------------------------------------

TITLE: Conditionally Adding CSS Class to Selection D3.js JavaScript
DESCRIPTION: Adds the CSS class "foo" to each element in the selection based on the boolean return value of the provided function. The function is evaluated for each element with access to datum, index, and element reference.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
selection.classed("foo", () => Math.random() > 0.5)
```

----------------------------------------

TITLE: Rolling Up Data by Multiple Keys and Counting with D3.js (JavaScript)
DESCRIPTION: This example uses `d3.rollup` with multiple key functions (`species` and `sex`) and a reduction function (`(D) => D.length`). It groups the `penguins` dataset first by species, then by sex, and counts the number of items in each resulting nested group. The output is a nested InternMap.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const speciesSexCount = d3.rollup(penguins, (D) => D.length, (d) => d.species, (d) => d.sex);
```

----------------------------------------

TITLE: Adding Multiple CSS Classes to Selection D3.js JavaScript
DESCRIPTION: Adds multiple space-separated CSS classes ("foo bar") to all elements in the selection. The second argument determines whether the classes are added or removed.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
selection.classed("foo bar", true)
```

----------------------------------------

TITLE: Formatting with Grouped Thousands and Significant Digits Javascript
DESCRIPTION: Illustrates formatting a number with a thousands separator (,) and rounding to two significant digits (r) using `d3.format(",.2r")`. The input 4223 is formatted to "4,200". Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_8

LANGUAGE: javascript
CODE:
```
d3.format(",.2r")(4223) // grouped thousands with two significant digits, "4,200"
```

----------------------------------------

TITLE: Adding CSS Class to Selection D3.js JavaScript
DESCRIPTION: Adds the CSS class "foo" to all elements in the selection by modifying the class attribute or classList. The second argument is a boolean value or function indicating whether to add or remove the class.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
selection.classed("foo", true)
```

----------------------------------------

TITLE: Sorting Data using d3.sort with Multiple Accessors - JavaScript
DESCRIPTION: This snippet demonstrates using d3.sort with multiple accessor functions for sorting objects (presumably points). It sorts primarily by the value returned by the first accessor (x property) and uses the second accessor (y property) to break ties.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
d3.sort(points, ({x}) => x, ({y}) => y)
```

----------------------------------------

TITLE: Defining Nodes and Links (String IDs) - JavaScript
DESCRIPTION: Provides an example of how to define nodes and links for a D3.js force simulation when the link force is configured with a custom node ID accessor that uses the node's `id` property. Nodes and links use matching string identifiers for sources and targets.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const nodes = [
  {"id": "Alice"},
  {"id": "Bob"},
  {"id": "Carol"}
];

const links = [
  {"source": "Alice", "target": "Bob"},
  {"source": "Bob", "target": "Carol"}
];
```

----------------------------------------

TITLE: Adding D3 Axes to Svelte Plot using Reactivity
DESCRIPTION: This Svelte component demonstrates integrating D3's DOM-manipulating modules (for axes) using Svelte's reactivity. It uses `bind:this` to get references to SVG group elements and reactive declarations (`$:`) to call D3's `d3.select(...).call(d3.axis...)` methods, enabling D3 to draw and update the axes whenever the relevant dependencies like scales change.
SOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#_snippet_14

LANGUAGE: svelte
CODE:
```
<script>
  import * as d3 from 'd3';

  export let data;
  export let width = 640;
  export let height = 400;
  export let marginTop = 20;
  export let marginRight = 20;
  export let marginBottom = 30;
  export let marginLeft = 40;

  let gx;
  let gy;

  $: x = d3.scaleLinear([0, data.length - 1], [marginLeft, width - marginRight]);
  $: y = d3.scaleLinear(d3.extent(data), [height - marginBottom, marginTop]);
  $: line = d3.line((d, i) => x(i), y);
  $: d3.select(gy).call(d3.axisLeft(y));
  $: d3.select(gx).call(d3.axisBottom(x));
</script>
<svg width={width} height={height}>
  <g bind:this={gx} transform="translate(0,{height - marginBottom})" />
  <g bind:this={gy} transform="translate({marginLeft},0)" />
  <path fill="none" stroke="currentColor" stroke-width="1.5" d={line(data)} />
  <g fill="white" stroke="currentColor" stroke-width="1.5">
    {#each data as d, i}
      <circle key={i} cx={x(i)} cy={y(d)} r="2.5" />
    {/each}
  </g>
</svg>
```

----------------------------------------

TITLE: Chaining Sequential D3 Transitions with Relative Delay - JavaScript
DESCRIPTION: Illustrates how to chain multiple transitions on the same selection by calling `.transition()` consecutively. The `delay()` method on subsequent transitions is now relative to the *previous* transition in the chain, allowing for easier insertion of interstitial pauses between animation steps.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_73

LANGUAGE: JavaScript
CODE:
```
d3.selectAll(".apple")
  .transition() // First fade to green.
    .style("fill", "green")
  .transition() // Then red.
    .style("fill", "red")
  .transition() // Wait one second. Then brown, and remove.
    .delay(1000)
    .style("fill", "brown")
    .remove();
```

----------------------------------------

TITLE: Parsing CSV String into Arrays (No Header) JavaScript
DESCRIPTION: Uses `d3.csvParseRows` to parse a CSV string that does not necessarily have a header row. It returns an array of arrays, where each inner array represents a row's field values as strings.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_7

LANGUAGE: javascript
CODE:
```
d3.csvParseRows("foo,bar\n1,2") // [["foo", "bar"], ["1", "2"]]
```

----------------------------------------

TITLE: Sorting Group Keys by Accessor with D3.js (JavaScript)
DESCRIPTION: This snippet uses `d3.groupSort` to group the `penguins` dataset by `species`, calculates the median `body_mass_g` for each species group using `d3.median` as the accessor, and then returns an array of species keys sorted based on these median values in ascending order. The comment shows the resulting sorted array of species names.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_12

LANGUAGE: javascript
CODE:
```
d3.groupSort(penguins, (D) => d3.median(D, (d) => d.body_mass_g), (d) => d.species) // ["Adelie", "Chinstrap", "Gentoo"]
```

----------------------------------------

TITLE: Creating Global Tick Format Function D3.js JavaScript
DESCRIPTION: Uses the global `d3.tickFormat()` function to create a number format function suitable for displaying values between a specified start and stop value. It automatically computes appropriate precision based on a target tick count (20) and the interval `stop - start`. Requires the d3-format module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_22

LANGUAGE: javascript
CODE:
```
const f = d3.tickFormat(0, 1, 20);
f(1); // "1.00"
```

----------------------------------------

TITLE: Create Continuous Sequential Scale with d3.interpolateBlues JavaScript
DESCRIPTION: This snippet shows how to create a sequential scale using a continuous color interpolator function from D3. It uses `d3.scaleSequential` and takes an interpolator function (like `d3.interpolateBlues`) as the range. The resulting scale maps a domain (defaults to [0,1]) to the color range defined by the interpolator. Requires the `d3` library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const color = d3.scaleSequential(d3.interpolateBlues);
```

----------------------------------------

TITLE: Creating Hierarchy Root from Tabular Data using d3.stratify (JavaScript)
DESCRIPTION: This snippet demonstrates how to use d3.stratify to create a hierarchical root node from an array of flat data objects (represented here as `nodes`). It requires specifying accessor functions for the unique identifier (`id`) and the parent identifier (`parentId`) in the tabular data. The result is a root `node` object suitable for D3's hierarchy layouts. Requires the D3 library.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_27

LANGUAGE: JavaScript
CODE:
```
var root = d3.stratify()
    .id(function(d) { return d.name; })
    .parentId(function(d) { return d.parent; })
    (nodes);
```

----------------------------------------

TITLE: Enable and Demonstrate Linear Scale Clamping - D3.js JavaScript
DESCRIPTION: The `clamp()` method enables or disables clamping. When enabled (true), values outside the domain are clamped to the nearest domain extent, ensuring the output is always within the range. When disabled (default), extrapolation may occur.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const x = d3.scaleLinear([0, 960]).clamp(true);
```

LANGUAGE: javascript
CODE:
```
const x = d3.scaleLinear([10, 130], [0, 960]); // clamping disabled by default
x(-10); // -160, outside range
x.invert(-160); // -10, outside domain
x.clamp(true); // enable clamping
x(-10); // 0, clamped to range
x.invert(-160); // 10, clamped to domain
```

----------------------------------------

TITLE: Setting Range in D3 Ordinal Scale
DESCRIPTION: Creates an ordinal scale and explicitly sets its range of output values using the `.range()` method. If the domain is not set, it defaults to an empty array, allowing for implicit domain construction upon usage. Requires the D3 library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const color = d3.scaleOrdinal().range(["red", "green", "blue"]);
```

----------------------------------------

TITLE: Creating Basic D3 Line Plot in Svelte
DESCRIPTION: This Svelte component illustrates using D3's computational modules (`d3.scaleLinear`, `d3.line`) within Svelte's reactive framework. Scales and path data are calculated using reactive declarations (`$:`), and the SVG elements are rendered declaratively in the Svelte template based on these reactive values, without using D3's DOM manipulation methods.
SOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#_snippet_13

LANGUAGE: svelte
CODE:
```
<script>
  import * as d3 from 'd3';

  export let data;
  export let width = 640;
  export let height = 400;
  export let marginTop = 20;
  export let marginRight = 20;
  export let marginBottom = 20;
  export let marginLeft = 20;

  $: x = d3.scaleLinear([0, data.length - 1], [marginLeft, width - marginRight]);
  $: y = d3.scaleLinear(d3.extent(data), [height - marginBottom, marginTop]);
  $: line = d3.line((d, i) => x(i), y);
</script>
<svg width={width} height={height}>
  <path fill="none" stroke="currentColor" stroke-width="1.5" d={line(data)} />
  <g fill="white" stroke="currentColor" stroke-width="1.5">
    {#each data as d, i}
      <circle key={i} cx={x(i)} cy={y(d)} r="2.5" />
    {/each}
  </g>
</svg>
```

----------------------------------------

TITLE: Setting D3.js Symbol Type Based on Data (JavaScript)
DESCRIPTION: Creates an ordinal scale (symbolType) mapping data categories to different symbol types from d3.symbolsFill. It then configures a d3.symbol() generator to use an accessor function that retrieves the symbol type based on the 'category' property of input data ('d').
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const symbolType = d3.scaleOrdinal(d3.symbolsFill);
const symbol = d3.symbol().type((d) => symbolType(d.category));
```

----------------------------------------

TITLE: Custom D3 Drag Container Accessor for Canvas
DESCRIPTION: This function provides an alternative container accessor suitable for dragging elements within a Canvas. It returns the element that received the initiating input event itself, using the element's coordinate system for drag events.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
function container() {
  return this;
}
```

----------------------------------------

TITLE: Using Locale Format Function in JavaScript
DESCRIPTION: Demonstrates how to use the formatter function returned by `locale.format` to convert a given Date object into a locale-specific string based on the formatter's specifier.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const formatMonth = d3.timeFormat("%B"),
    formatDay = d3.timeFormat("%A"),
    date = new Date(2014, 4, 1); // Thu May 01 2014 00:00:00 GMT-0700 (PDT)

formatMonth(date); // "May"
formatDay(date); // "Thursday"
```

----------------------------------------

TITLE: Creating SVG Group Element - D3.js - JavaScript
DESCRIPTION: Shows how to create a detached SVG group (`g`) element using the `d3.create()` method with the explicit "svg:g" namespace prefix. Returns a single-element selection containing the new element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
d3.create("svg:g") // an SVG G element
```

----------------------------------------

TITLE: Interpolating Objects (D3.js)
DESCRIPTION: This snippet uses d3.interpolateObject to interpolate properties between two objects. It creates a new object with properties found in the second object (b). For each property, if it exists in the first object (a), the values are interpolated using the generic interpolate function; otherwise, the value from b is used. Evaluating at t = 0.5 between {x: 0, y: 1} and {x: 1, y: 10, z: 100} results in {x: 0.5, y: 5.5, z: 100}.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_7

LANGUAGE: js
CODE:
```
d3.interpolateObject({x: 0, y: 1}, {x: 1, y: 10, z: 100})(0.5) // {x: 0.5, y: 5.5, z: 100}
```

----------------------------------------

TITLE: Finding Closest Value Index with D3 Bisector (JavaScript)
DESCRIPTION: Uses a bisector created with an accessor for the `Date` property to find the index of the element closest to the search value in the `aapl` dataset. This is useful for finding the nearest data point to a given date.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#_snippet_4

LANGUAGE: javascript
CODE:
```
d3.bisector((d) => d.Date).center(aapl, new Date("2013-12-31")) // 161
```

----------------------------------------

TITLE: Sorting Group Keys Descending by Accessor with D3.js (JavaScript)
DESCRIPTION: This code uses `d3.groupSort` to group penguins by `species` and sorts the resulting species keys in descending order based on the median `body_mass_g`. This is achieved by negating the result of the median calculation within the accessor function. The comment shows the resulting array of species names sorted from highest to lowest median body mass.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_13

LANGUAGE: javascript
CODE:
```
d3.groupSort(penguins, (D) => -d3.median(D, (d) => d.body_mass_g), (d) => d.species) // ["Gentoo", "Adelie", "Chinstrap"]
```

----------------------------------------

TITLE: Selecting All Descendants for Each Element D3.js JavaScript
DESCRIPTION: This snippet applies `selection.selectAll` to a selection of all `<p>` elements. For each paragraph, it selects *all* descendant `<b>` elements. The resulting selection is grouped by the original paragraph parent.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const b = d3.selectAll("p").selectAll("b"); // every <b> in every <p>
```

----------------------------------------

TITLE: Setting Explicit Tick Values D3.js JavaScript
DESCRIPTION: Demonstrates how to override the scale's automatic tick generator by providing a specific array of values using the `tickValues()` method when creating or configuring a D3.js axis. This method is called on the axis object after initializing it with `d3.axisBottom()` (or other axis orientations) and providing a scale (`x`). Explicit values take precedence over tick arguments.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_16

LANGUAGE: javascript
CODE:
```
const axis = d3.axisBottom(x).tickValues([1, 2, 3, 5, 8, 13, 21]);
```

----------------------------------------

TITLE: Using d3.descending with Array.prototype.sort - JavaScript
DESCRIPTION: This snippet demonstrates how to use the d3.descending comparator function with the native JavaScript Array.prototype.sort method to sort an array of numbers in descending order. It takes an array of numbers and applies the sort method with the descending comparator, resulting in the numbers being ordered from largest to smallest.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
[39, 21, 1, 104, 22].sort(d3.descending)
```

----------------------------------------

TITLE: Creating D3 Center Force (JavaScript)
DESCRIPTION: Initializes a new D3 center force instance. This force translates nodes uniformly so their mean position aligns with the specified coordinates (x, y), helping to keep the simulation centered without distorting relative node positions. If x and y are not provided, they default to 0,0.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/center.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const center = d3.forceCenter(width / 2, height / 2);
```

----------------------------------------

TITLE: Using Transition Call Method with Reusable Function in D3 JavaScript
DESCRIPTION: Illustrates how to use the `transition.call()` method to invoke a previously defined reusable function (`color`) on a D3 transition. A selection of 'div' elements is transitioned, and then `.call(color, "red", "blue")` is used to execute the `color` function, passing the transition object, "red", and "blue" as arguments, setting the fill and stroke styles during the transition.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/control-flow.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.selectAll("div").transition().call(color, "red", "blue");
```

----------------------------------------

TITLE: Formatting as Rounded Percentage Javascript
DESCRIPTION: Demonstrates how to format a number as a rounded percentage string using the `d3.format(".0%")` specifier. It multiplies the input by 100 and rounds to zero decimal places, returning a string with a percent sign. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_2

LANGUAGE: javascript
CODE:
```
d3.format(".0%")(0.123) // rounded percentage, "12%"
```

----------------------------------------

TITLE: Custom D3 Link Force Node ID Accessor (String IDs) - JavaScript
DESCRIPTION: Shows a custom function for the D3.js link force node ID accessor that returns the `id` property of the node object. This configuration allows links to be specified using string identifiers that match node `id` properties, which is useful for JSON representations.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#_snippet_3

LANGUAGE: javascript
CODE:
```
function id(d) {
  return d.id;
}
```

----------------------------------------

TITLE: Generating Ticks with d3.ticks - Basic
DESCRIPTION: Demonstrates the basic usage of d3.ticks to generate an array of approximately count + 1 nicely-rounded, uniformly-spaced values between start and stop. This example uses a small count.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_0

LANGUAGE: javascript
CODE:
```
d3.ticks(1, 9, 5) // [2, 4, 6, 8]
```

----------------------------------------

TITLE: Rolling Up Data as Array Entries and Counting with D3.js (JavaScript)
DESCRIPTION: This code uses `d3.rollups` to group the `penguins` dataset by `species` and count elements in each group using the `(D) => D.length` reducer. Similar to `d3.rollup`, but it returns an array of `[key, value]` pairs instead of an InternMap. The comment shows the structure of the resulting array.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const speciesCounts = d3.rollups(penguins, (D) => D.length, (d) => d.species); // [["Adelie", 152], …]
```

----------------------------------------

TITLE: Creating Discrete Diverging Scale in D3.js (JS)
DESCRIPTION: This JavaScript snippet illustrates how to create a discrete ordinal color scale using d3.scaleOrdinal with a specific size array from a D3.js discrete diverging color scheme, specifically the 9-color array from d3.schemePiYG. This scale maps discrete values to colors from the provided array of hexadecimal strings.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/diverging.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const color = d3.scaleOrdinal(d3.schemePiYG[9]);
```

----------------------------------------

TITLE: Calculating Mean with Accessor - D3.js JavaScript
DESCRIPTION: Demonstrates using `d3.mean` with an accessor function to compute the average value of a specific property (`body_mass_g`) from objects within an array (`penguins`). The accessor provides the numerical data points for the mean calculation. The output is the average of the extracted values.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
d3.mean(penguins, (d) => d.body_mass_g) // 4201.754385964912
```

----------------------------------------

TITLE: Creating Ordinal Scale with Domain and Range in D3
DESCRIPTION: Initializes a D3 ordinal scale by providing both the discrete domain values and the discrete range values during construction. It maps the first domain value to the first range value, the second to the second, and so on. Requires the D3 library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const color = d3.scaleOrdinal(["a", "b", "c"], ["red", "green", "blue"]);
```

----------------------------------------

TITLE: Loading TSV Data with d3-fetch in JavaScript
DESCRIPTION: This snippet uses `d3.tsv` to fetch and parse a Tab-Separated Value (TSV) file from a URL. It's a convenient shorthand for `d3.dsv` specifically for tab-separated values and returns a promise resolving to the parsed data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_13

LANGUAGE: js
CODE:
```
const data = await d3.tsv("example.tsv");
```

----------------------------------------

TITLE: Getting D3 Zoom Transform in Event Listener (JavaScript)
DESCRIPTION: Within a D3 event listener (like those attached via `selection.on`), the `this` context typically refers to the DOM element that received the event. This snippet shows how to pass this element directly to `d3.zoomTransform()` to retrieve the current zoom transform applied to that specific element. This is useful for accessing the transform relevant to the event source.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
var transform = d3.zoomTransform(this);
```

----------------------------------------

TITLE: Setting Quantize Scale Domain (JavaScript)
DESCRIPTION: Shows how to set the domain of an existing quantize scale using the domain() method. This replaces the scale's current domain with the specified two-element array of numbers. The domain values must be in ascending order for the scale to behave correctly.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const color = d3.scaleQuantize(d3.schemeBlues[9]);
color.domain([0, 100]);
```

----------------------------------------

TITLE: Creating Logarithmic Scale D3 JavaScript
DESCRIPTION: Constructs a new D3 logarithmic scale with the specified domain and range. It maps the input domain `[1, 10]` to the output range `[0, 960]` using a base-10 logarithm by default. This scale can then be used to transform data values for visualization.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/log.md#_snippet_0

LANGUAGE: js
CODE:
```
const x = d3.scaleLog([1, 10], [0, 960]);
```

----------------------------------------

TITLE: Interpolating Numbers (D3.js)
DESCRIPTION: This snippet uses d3.interpolateNumber to create an interpolator between the numbers 20 and 620. Evaluating the interpolator at t = 0.8 returns the value 500, which is 80% of the way from 20 to 620. This function is specifically designed for numerical interpolation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_1

LANGUAGE: js
CODE:
```
d3.interpolateNumber(20, 620)(0.8) // 500
```

----------------------------------------

TITLE: Creating Locale-Specific Time Parser in JavaScript
DESCRIPTION: Demonstrates the basic usage of `d3.timeParse` to create a locale-specific date parser using a standard specifier. This is an alias for the default locale's parse method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_4

LANGUAGE: javascript
CODE:
```
d3.timeParse("%b %d")
```

----------------------------------------

TITLE: Getting D3 Zoom Transform from Selection Node (JavaScript)
DESCRIPTION: This snippet demonstrates how to obtain the current zoom transform applied to a D3 selection. It uses `selection.node()` to get the first DOM element in the selection and then passes that element to `d3.zoomTransform()`, which returns the `ZoomTransform` object for that specific node. This is the recommended way to get a transform from a selection if you cannot access the `this` context.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
var transform = d3.zoomTransform(selection.node());
```

----------------------------------------

TITLE: Setting Range and Enabling Rounding with D3 point.rangeRound() - JavaScript
DESCRIPTION: Illustrates the use of the `rangeRound()` method, which sets the scale's range and automatically enables rounding of the output values. This is a convenience method for `range().round(true)`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const x = d3.scalePoint().rangeRound([0, 960]);
```

----------------------------------------

TITLE: Joining Data to Existing Elements by Key with D3 (JavaScript)
DESCRIPTION: This example illustrates how to join data to pre-existing DOM elements (`<div>`) using a key function. The key function (`function(d) { return d ? d.name : this.id; }`) determines the correspondence between data objects (keyed by `name`) and elements (keyed by `id`). Elements are updated to display the `number` property from the matching data object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_1

LANGUAGE: js
CODE:
```
const data = [
  {name: "Locke", number: 4},
  {name: "Reyes", number: 8},
  {name: "Ford", number: 15},
  {name: "Jarrah", number: 16},
  {name: "Shephard", number: 23},
  {name: "Kwon", number: 42}
];

d3.selectAll("div")
  .data(data, function(d) { return d ? d.name : this.id; })
    .text(d => d.number);
```

----------------------------------------

TITLE: Calculating Sum of Array Numbers - D3.js JavaScript
DESCRIPTION: Demonstrates the basic use of `d3.sum` to calculate the sum of numbers in a simple array. It shows that the function correctly ignores non-numeric values like `NaN` and `null`. The input is an array of numbers, and the output is their sum.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
d3.sum([1, 2, 2, 2, NaN, 3, null]) // 10
```

----------------------------------------

TITLE: Creating D3 Link Force and Setting ID - JavaScript
DESCRIPTION: Demonstrates the creation of a D3.js link force using `d3.forceLink` with an initial set of links. It immediately chains the `.id()` method to configure the node ID accessor to use the `id` property of each node object, overriding the default index-based accessor.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const link = d3.forceLink(links).id((d) => d.id);
```

----------------------------------------

TITLE: Calculating Cumulative Sum with Accessor - D3.js JavaScript
DESCRIPTION: Shows how to use `d3.cumsum` with an accessor function to compute the cumulative sum of a specific property (`body_mass_g`) for objects in an array (`penguins`). The accessor extracts the numeric value used for the cumulative sum calculation. The output is an array of cumulative sums of the extracted values.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
d3.cumsum(penguins, (d) => d.body_mass_g) // [3750, 7550, 10800, 10800, …]
```

----------------------------------------

TITLE: Generating Link Path String - JavaScript
DESCRIPTION: Calls a D3 link generator with source and target points to produce an SVG path data string for rendering a cubic Bézier curve.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_3

LANGUAGE: js
CODE:
```
link({source: [100, 100], target: [300, 300]}) // "M100,100C200,100,200,300,300,300"
```

----------------------------------------

TITLE: Rendering D3 Bottom Axis Example
DESCRIPTION: This snippet demonstrates rendering a bottom-oriented D3 axis using the `d3.axisBottom` generator with a linear scale and positioning it using a custom Vue component.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_7

LANGUAGE: html
CODE:
```
<ExampleAxis :axis="d3.axisBottom(d3.scaleLinear([0, 100], range))" :y="7" />
```

----------------------------------------

TITLE: Creating Cubehelix Gamma Interpolator in D3.js
DESCRIPTION: Returns an interpolator factory for the Cubehelix color space configured with a specific gamma value (e.g., 3.0). Calling the factory with start and end colors (e.g., "purple", "orange") produces an interpolator that uses this gamma setting, returning an RGB string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_9

LANGUAGE: javascript
CODE:
```
d3.interpolateCubehelix.gamma(3)("purple", "orange")
```

----------------------------------------

TITLE: Default D3 Drag Container Accessor
DESCRIPTION: This function is the default accessor used by drag.container(). It determines the coordinate system for drag events by returning the parent node of the element that received the initiating input event. This is suitable for SVG/HTML elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
function container() {
  return this.parentNode;
}
```

----------------------------------------

TITLE: Using d3.interval with D3 Transitions (D3v4 - GOOD) - JavaScript
DESCRIPTION: The recommended pattern in D3 v4 for scheduling recurring tasks like transitions using `d3.interval`. This method benefits from D3's background time freezing, preventing large queues of timers and transitions from building up while the page is inactive.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_71

LANGUAGE: js
CODE:
```
d3.interval(function() {
  d3.selectAll("div").transition().call(someAnimation); // GOOD
}, 1000);
```

----------------------------------------

TITLE: Apply D3 Bin Generator to Data (JS)
DESCRIPTION: Applies the configured `d3.bin` generator function to an iterable dataset. It processes the data based on the set value accessor, domain, and thresholds, returning an array of bin objects. Each bin object contains the data elements within its range and properties for its lower (`x0`) and upper (`x1`) bounds.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const bins = d3.bin().value((d) => d.culmen_length_mm)(penguins);
```

LANGUAGE: javascript
CODE:
```
const bins = bin(numbers);
```

----------------------------------------

TITLE: Setting D3 Band Scale Domain Dynamically (JS-Vue)
DESCRIPTION: Shows how to set the domain of a D3 band scale within a Vue template context. It demonstrates calling the `.domain()` method with a dynamically generated array derived from a Vue reactive variable `domain`, parsed and formatted for the D3 domain array.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const x = d3.scaleBand([0, 960]).domain([{{d3.csvParseRows(domain).flat().map(JSON.stringify).join(", ")}}]);
```

----------------------------------------

TITLE: Configuring D3 Equal Earth Projection (JS)
DESCRIPTION: Creates and configures a D3 Equal Earth geographic projection. It sets the rotation to `[0, 0]`, fits the projection to a specific extent based on the component's width, and sets the precision to `0.2`. This is an equal-area pseudocylindrical projection.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/cylindrical.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
d3.geoEqualEarth().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width * 0.49 - 1]], {type: "Sphere"}).precision(0.2)
```

----------------------------------------

TITLE: Accessing Rolled-Up Count from D3.js InternMap (JavaScript)
DESCRIPTION: This code accesses the reduced value (the count) for the key "Adelie" from the InternMap generated by `d3.rollup`. It uses the `get` method to retrieve the specific count associated with the "Adelie" species. The comment indicates the expected output is the number 152.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_6

LANGUAGE: javascript
CODE:
```
speciesCount.get("Adelie") // 152
```

----------------------------------------

TITLE: Constructing a new d3.stratify Operator JavaScript
DESCRIPTION: Shows how to create a new, configurable instance of the d3.stratify operator. This instance can then be configured with specific id, parentId, or path accessors before being invoked with data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const stratify = d3.stratify();
```

----------------------------------------

TITLE: Parsing CSV Rows with Row Conversion Function JavaScript
DESCRIPTION: Parses a CSV string without headers into arrays while applying a custom function to each row. This function receives the row array (`d`) and its index (`i`) and can transform elements or filter rows by returning `null`/`undefined`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const data = d3.csvParseRows(string, (d, i) => {
  return {
    year: new Date(+d[0], 0, 1), // convert first column to Date
    make: d[1],
    model: d[2],
    length: +d[3] // convert fourth column to number
  };
});
```

----------------------------------------

TITLE: Creating HSL Color Interpolator in D3.js
DESCRIPTION: Creates an interpolator for transitioning between two colors (e.g., "purple" and "orange") in the HSL color space. Input colors are converted to HSL. It uses the shortest path between hues and returns an interpolated RGB color string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.interpolateHsl("purple", "orange")
```

----------------------------------------

TITLE: Setting Combined Tick Size D3.js JavaScript
DESCRIPTION: Sets both the inner and outer tick sizes of a D3.js axis to a single specified value (in pixels) using the `tickSize()` method. The example sets the size to 0, effectively hiding the tick lines and domain path ends. This method is chained during axis creation or called on an existing axis, returning the axis instance for further chaining.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_19

LANGUAGE: javascript
CODE:
```
const axis = d3.axisBottom(x).tickSize(0);
```

----------------------------------------

TITLE: Setting the Range of a D3.js Quantile Scale (JavaScript)
DESCRIPTION: Sets the discrete array of output values for the quantile scale. The cardinality (length) of this array determines the number of quantiles that the domain will be divided into. This method allows configuring the range separately from instantiation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const color = d3.scaleQuantile();
color.range(d3.schemeBlues[5]);
```

----------------------------------------

TITLE: Generating Ticks with d3.ticks - More Ticks
DESCRIPTION: Shows how d3.ticks generates more values within the same interval when a larger count is specified, providing a finer granularity of ticks.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_1

LANGUAGE: javascript
CODE:
```
d3.ticks(1, 9, 20) // [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9]
```

----------------------------------------

TITLE: Rescaling X-axis Scale using D3 Transform (JavaScript)
DESCRIPTION: Demonstrates the implementation of the `transform.rescaleX` method. It takes a linear scale `x`, applies the inverse x-transform (`transform.invertX`) to its range, then applies the inverse scale (`x.invert`) to get the new domain, and finally returns a copy of the original scale with the transformed domain. Requires the input scale `x` to use `interpolateNumber` for accuracy.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
function rescaleX(x) {
  var range = x.range().map(transform.invertX, transform),
      domain = range.map(x.invert, x);
  return x.copy().domain(domain);
}
```

----------------------------------------

TITLE: Creating D3 Zoom Transform with Identity (JavaScript)
DESCRIPTION: This snippet illustrates how to create a new `ZoomTransform` object with a desired scale `k` and translation (`x`, `y`). It starts with the `d3.zoomIdentity` (scale 1, translation 0,0) and then chains the `.translate(x, y)` and `.scale(k)` methods to apply the desired transformations, returning the final transform object. Note that translate should typically be applied before scale for consistency with D3's internal representation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
var t = d3.zoomIdentity.translate(x, y).scale(k);
```

----------------------------------------

TITLE: Setting D3.js Symbol Size Based on Data (JavaScript)
DESCRIPTION: Creates a linear scale (symbolSize) mapping numerical data values to symbol sizes. It then configures a d3.symbol() generator to use an accessor function that retrieves the size based on the 'value' property of input data ('d'), allowing quantitative size encoding.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const symbolSize = d3.scaleLinear([0, 100]);
const symbol = d3.symbol().size((d) => symbolSize(d.value));
```

----------------------------------------

TITLE: Finding Right Insertion Point with D3 Bisector (JavaScript)
DESCRIPTION: Uses a bisector created with an accessor for the `Date` property to find the right insertion point for a specific date in the `aapl` dataset. This returns the index *after* any elements equal to the search value, equivalent to `bisectRight`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#_snippet_2

LANGUAGE: javascript
CODE:
```
d3.bisector((d) => d.Date).right(aapl, new Date("2014-01-02")) // 163
```

----------------------------------------

TITLE: Calculating Mean of Array Numbers - D3.js JavaScript
DESCRIPTION: Shows how to use `d3.mean` to compute the arithmetic mean of numbers in a simple array. Similar to `d3.sum`, it automatically ignores `NaN` and `null` values in the input array. The input is an array of numbers, and the output is their average.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
d3.mean([1, 2, 2, 2, NaN, 3, null]) // 2
```

----------------------------------------

TITLE: Converting Color to RGB with rgb() Method D3 JavaScript
DESCRIPTION: Uses the rgb() method available on any d3 color instance to convert it to the RGB color space, returning a new RGB color object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_6

LANGUAGE: javascript
CODE:
```
d3.color("hsl(120, 50%, 20%)").rgb() // {r: 25.5, g: 76.5, b: 25.5, opacity: 1}
```

----------------------------------------

TITLE: Creating Sequential Scale with Domain and Interpolator in D3.js (JS)
DESCRIPTION: Constructs a new sequential scale with a specified two-element numeric input domain and a D3 interpolator function for the output range. Requires the d3-scale and potentially d3-interpolate modules.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#_snippet_0

LANGUAGE: js
CODE:
```
const color = d3.scaleSequential([0, 100], d3.interpolateBlues);
```

----------------------------------------

TITLE: Calculating Median with Accessor - D3.js JavaScript
DESCRIPTION: Illustrates calculating the median of a specific property (`body_mass_g`) from an array of objects (`penguins`) using `d3.median` with an accessor function. The accessor extracts the numeric value from each object for the median calculation. The output is the median of the extracted values.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
d3.median(penguins, (d) => d.body_mass_g) // 4050
```

----------------------------------------

TITLE: Rendering D3 Left Axis Example
DESCRIPTION: This snippet demonstrates rendering a left-oriented D3 axis using the `d3.axisLeft` generator with a linear scale and positioning it using a custom Vue component, specifying custom width, height, and x-coordinate.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_8

LANGUAGE: html
CODE:
```
<ExampleAxis :axis="d3.axisLeft(d3.scaleLinear([0, 100], [10, 190]))" :width="60" :height="200" :x="40" />
```

----------------------------------------

TITLE: Calling D3 Axis Generator on Context
DESCRIPTION: This JavaScript snippet demonstrates the primary method of rendering an axis by calling the axis generator function on a D3 selection (or transition) representing an SVG container element, typically a `g` element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_9

LANGUAGE: javascript
CODE:
```
svg.append("g")
    .attr("transform", `translate(0,${height - marginBottom})`)
    .call(d3.axisBottom(x));
```

----------------------------------------

TITLE: Loading CSV Data with d3.csv in JavaScript
DESCRIPTION: Demonstrates loading a CSV file asynchronously using `d3.csv`. It includes error handling and logs the column names found in the parsed data to the console. Requires the `d3-request` or full D3 library.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_15

LANGUAGE: javascript
CODE:
```
d3.csv("cars.csv", function(error, data) {
  if (error) throw error;
  console.log(data.columns); // ["Year", "Make", "Model", "Length"]
});
```

----------------------------------------

TITLE: Set D3 Bin Generator Domain (JS)
DESCRIPTION: Sets the domain of the bin generator, which defines the inclusive minimum and maximum bounds for values considered during binning. Values outside this domain are ignored. The domain can be specified as a fixed two-element array or a function that computes the domain from the array of values.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const bin = d3.bin().domain([0, 1]);
```

LANGUAGE: javascript
CODE:
```
const bin = d3.bin().domain(x.domain()).thresholds(x.ticks(20));
```

----------------------------------------

TITLE: Initializing D3 Bin Generator with Value Accessor (JS)
DESCRIPTION: Constructs a new `d3.bin` generator with default settings and sets the value accessor using `.value()`. The accessor function determines which quantitative property of each data element is used for binning.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const bin = d3.bin().value((d) => d.culmen_length_mm);
```

----------------------------------------

TITLE: Filtering Selection by Selector String - D3 - JavaScript
DESCRIPTION: This snippet demonstrates the standard way to filter a D3.js selection to include only elements that match a given CSS selector string ("div"). It uses the public `.filter()` method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_19

LANGUAGE: javascript
CODE:
```
const div = selection.filter("div");
```

----------------------------------------

TITLE: Creating Hierarchy with d3.stratify path JavaScript
DESCRIPTION: Shows how to use d3.stratify with the .path() accessor to create a hierarchy from an array of path strings. This method automatically infers the hierarchy structure and node IDs from the delimited paths.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const root = d3.stratify().path((d) => d)(paths);
```

----------------------------------------

TITLE: Generating Range with d3.range - Recommended Approach for Fixed Length
DESCRIPTION: Provides a recommended alternative for generating a fixed number of floating-point values by mapping over an integer range, ensuring the correct number of elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_12

LANGUAGE: javascript
CODE:
```
d3.range(49).map((d) => d / 49) // 👍 returns 49 elements
```

----------------------------------------

TITLE: Defining Data Matrix for d3-chord Diagram (JavaScript)
DESCRIPTION: This JavaScript snippet defines a 4x4 matrix representing the flow data for the hair color transition example. Each element matrix[i][j] represents the number of people transitioning from hair color i to hair color j. The matrix is used as input for the D3 chord layout.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const matrix = [
  // to black, blond, brown, red
  [11975,  5871, 8916, 2868], // from black
  [ 1951, 10048, 2060, 6171], // from blond
  [ 8010, 16145, 8090, 8045], // from brown
  [ 1013,   990,  940, 6907]  // from red
];
```

----------------------------------------

TITLE: Configuring D3 Equirectangular Projection (JS)
DESCRIPTION: Creates and configures a D3 Equirectangular (plate carrée) geographic projection. It sets the rotation to `[0, 0]`, fits the projection to a specific extent based on the component's width and height, and sets the precision to `0.2`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/cylindrical.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
d3.geoEquirectangular().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width / 2 - 1]], {type: "Sphere"}).precision(0.2)
```

----------------------------------------

TITLE: Invoking a d3.stratify Operator with Data JavaScript
DESCRIPTION: Demonstrates how to invoke a configured d3.stratify operator instance with input tabular data. This execution performs the conversion from flat data to a hierarchical structure, returning the root node of the generated tree.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const root = stratify(data);
```

----------------------------------------

TITLE: Interpolating Arrays (D3.js)
DESCRIPTION: This snippet uses d3.interpolateArray to interpolate element-wise between two arrays [0, 0, 0] and [1, 2, 3]. It creates a new array where each element is the result of interpolating the corresponding elements from the input arrays using the generic interpolate function. Evaluating at t = 0.5 results in the array [0.5, 1, 1.5].
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_5

LANGUAGE: js
CODE:
```
d3.interpolateArray([0, 0, 0], [1, 2, 3])(0.5) // [0.5, 1, 1.5]
```

----------------------------------------

TITLE: Calculating Ranks in Descending Order - D3.js JavaScript
DESCRIPTION: Illustrates calculating ranks of numbers in descending order by providing the `d3.descending` comparator to the `d3.rank` function. This changes the sorting basis for ranking, assigning rank 0 to the largest value. The input is an array of numbers, and the output is an array of ranks based on descending order.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
d3.rank([1, 2, 3], d3.descending); // [2, 1, 0]
```

----------------------------------------

TITLE: Finding Closest Value Index with D3 bisectCenter (JavaScript)
DESCRIPTION: Finds the index of the value closest to the search value in a sorted array of numbers. This function is used for primitive arrays and helps locate the element nearest to a specific target value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#_snippet_8

LANGUAGE: javascript
CODE:
```
d3.bisectCenter(aapl.map((d) => d.Date), new Date("2013-12-31")) // 161
```

----------------------------------------

TITLE: Merge Array of Arrays with D3.js
DESCRIPTION: Shows `d3.merge` flattening an array of arrays into a single-level array. It takes an iterable (like an array) where each element is itself an iterable, and concatenates all inner iterables.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#_snippet_2

LANGUAGE: javascript
CODE:
```
d3.merge([[1], [2, 3]]) // [1, 2, 3]
```

----------------------------------------

TITLE: Making Color Darker with darker() Method D3 JavaScript
DESCRIPTION: Returns a new color object that is a darker version of the original color instance using the darker() method. An optional parameter 'k' controls the degree of darkening.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_9

LANGUAGE: javascript
CODE:
```
d3.color("steelblue").darker(1) // {r: 49, g: 91, b: 126, opacity: 1}
```

----------------------------------------

TITLE: Creating Parameterized Easing in D3 4.0 JavaScript
DESCRIPTION: Shows the D3 4.0 approach to creating a parameterized easing function. It accesses the easing function symbol (`d3.easeElastic`) and then uses a named parameter method (`amplitude(1.2)`) to configure its behavior. This replaces the old string and argument approach.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_18

LANGUAGE: javascript
CODE:
```
var e = d3.easeElastic.amplitude(1.2);
```

----------------------------------------

TITLE: Constructing HCL Color in D3.js (JavaScript)
DESCRIPTION: Constructs a new CIELChₐₐ color instance from a CSS Color Module Level 3 specifier string. The returned object exposes the H, C, and L channel values (hue, chroma, lightness) and opacity as properties. HCL is a cylindrical representation of CIELAB, often preferred for sequential and diverging colormaps due to its perceptual uniformity.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_22

LANGUAGE: js
CODE:
```
d3.hcl("yellow") // {h: 99.57458688693687, c: 94.70776566727464, l: 97.60712516622824, opacity: 1}
```

----------------------------------------

TITLE: Grouping Data as Array Entries with D3.js (JavaScript)
DESCRIPTION: This code uses `d3.groups` to group the `penguins` dataset by `species`. Unlike `d3.group`, it returns an array of `[key, value]` pairs, where the key is the species and the value is the array of corresponding penguin objects. The comment shows the structure of the resulting array.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const species = d3.groups(penguins, (d) => d.species); // [["Adelie", Array(152)], …]
```

----------------------------------------

TITLE: Formatting Color as Hexadecimal String D3 JavaScript
DESCRIPTION: Formats the color instance as a hexadecimal RGB string representation using the formatHex() method. Returns a displayable color's hex code if the original color was not displayable.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_11

LANGUAGE: javascript
CODE:
```
d3.color("steelblue").formatHex() // "#4682b4"
```

----------------------------------------

TITLE: Finding Left Insertion Point with D3 Bisector (JavaScript)
DESCRIPTION: Uses a bisector created with an accessor for the `Date` property to find the left insertion point for a specific date in the `aapl` dataset. This returns the index *before* any elements equal to the search value, equivalent to `bisectLeft`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.bisector((d) => d.Date).left(aapl, new Date("2014-01-02")) // 162
```

----------------------------------------

TITLE: Creating D3 Azimuthal Equidistant Projection (JavaScript)
DESCRIPTION: Configures a D3 azimuthal equidistant projection. It sets the rotation to [110, -40], fits the projection extent to the defined width and height minus borders, specifying the source object as a 'Sphere', and sets the precision to 0.2 degrees. This projection preserves true distances from a central point.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/azimuthal.md#_snippet_2

LANGUAGE: javascript
CODE:
```
d3.geoAzimuthalEquidistant().rotate([110, -40]).fitExtent([[1, 1], [width - 1, height - 1]], {type: "Sphere"}).precision(0.2)
```

----------------------------------------

TITLE: Creating Delaunay Triangulation from Flat Array JavaScript
DESCRIPTION: This snippet demonstrates how to create a Delaunay triangulation object using the `new d3.Delaunay()` constructor from a flat array of point coordinates `[x0, y0, x1, y1, ...]`. The input is typically a `Float64Array` for performance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const delaunay = new d3.Delaunay(Float64Array.of(0, 0, 0, 1, 1, 0, 1, 1));
```

----------------------------------------

TITLE: Defining JSON Hierarchical Data (JavaScript)
DESCRIPTION: Defines a sample JavaScript object representing hierarchical data using nested 'children' arrays. This common structure is the basic input format for the `d3.hierarchy` function. It requires standard JavaScript object and array syntax.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const data = {
  name: "Eve",
  children: [
    {name: "Cain"},
    {name: "Seth", children: [{name: "Enos"}, {name: "Noam"}]},
    {name: "Abel"},
    {name: "Awan", children: [{name: "Enoch"}]},
    {name: "Azura"}
  ]
};
```

----------------------------------------

TITLE: Initializing D3 Area Generator (Direct Accessors) - Javascript
DESCRIPTION: Constructs a new area generator using direct arguments for the x, y0, and y1 accessors. This is a shorthand for setting the accessors immediately upon creation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const area = d3.area((d) => x(d.Date), y(0), (d) => y(d.Close));
```

----------------------------------------

TITLE: Setting D3 Area Defined Accessor - Javascript
DESCRIPTION: Sets the defined accessor function or boolean. This accessor is invoked for each data element; if it returns false, the point is skipped, ending the current area segment.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_18

LANGUAGE: javascript
CODE:
```
const area = d3.area().defined((d) => !isNaN(d.Close));
```

----------------------------------------

TITLE: Expanding Interval with d3.nice
DESCRIPTION: Illustrates d3.nice, which returns a new interval [niceStart, niceStop] that covers the original interval and aligns with the corresponding tick step, useful for scales.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_6

LANGUAGE: javascript
CODE:
```
d3.nice(1, 9, 5) // [0, 10]
```

----------------------------------------

TITLE: Creating Locale Format Function Javascript
DESCRIPTION: Shows how to create a formatting function bound to a specific locale (or the default locale, as shown here, since `d3.format` is an alias for the default locale's format). The specifier ".2f" formats the number to two decimal places. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_13

LANGUAGE: javascript
CODE:
```
const f = d3.format(".2f");
```

----------------------------------------

TITLE: Formatting Data into CSV String JavaScript
DESCRIPTION: Converts an array of objects into a CSV formatted string using `d3.csvFormat`. It automatically generates a header row from the object keys and formats the data rows accordingly, escaping values containing special characters.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_2

LANGUAGE: javascript
CODE:
```
d3.csvFormat([{foo: "1", bar: "2"}]) // "foo,bar\n1,2"
```

----------------------------------------

TITLE: Interpolating Complex Objects with d3.interpolate (JavaScript)
DESCRIPTION: Illustrates the general-purpose d3.interpolate function which can handle nested objects and arrays. It demonstrates interpolation between two objects containing color arrays, showing outputs at different t values and highlighting type inference.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const i = d3.interpolate({colors: ["red", "blue"]}, {colors: ["white", "black"]});
i(0.0); // {colors: ["rgb(255, 0, 0)", "rgb(0, 0, 255)"]}
i(0.5); // {colors: ["rgb(255, 128, 128)", "rgb(0, 0, 128)"]}
i(1.0); // {colors: ["rgb(255, 255, 255)", "rgb(0, 0, 0)"]}
```

----------------------------------------

TITLE: Chaining Sequential D3 Transitions - JavaScript
DESCRIPTION: This snippet demonstrates how to create a sequence of chained transitions using the `transition().transition()` method in D3.js. Each subsequent transition is scheduled to start after the previous one ends, allowing for sequential styling changes and actions like removal on selected elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#_snippet_1

LANGUAGE: javascript
CODE:
```
d3.selectAll(".apple")
  .transition() // First fade to green.
    .style("fill", "green")
  .transition() // Then red.
    .style("fill", "red")
  .transition() // Wait one second. Then brown, and remove.
    .delay(1000)
    .style("fill", "brown")
    .remove();
```

----------------------------------------

TITLE: Getting Multiple Pointer Coordinates using D3.js pointers (JavaScript)
DESCRIPTION: Shows how to use the `d3.pointers` utility function to get an array of [x, y] coordinate pairs for all active pointers associated with an event. This is particularly useful for multi-touch events (`event.touches`). For other event types, it typically returns a single-element array. Requires D3.js.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/events.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const points = d3.pointers(event);
```

----------------------------------------

TITLE: Setting Constant Delay D3 Transition JavaScript
DESCRIPTION: Sets the delay of a D3 transition for all elements to a constant value in milliseconds. This applies the same delay to every selected element in the transition. Requires a D3 transition object. The default delay is zero if not explicitly set.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#_snippet_0

LANGUAGE: javascript
CODE:
```
transition.delay(250);
```

----------------------------------------

TITLE: Setting D3 Radial Line Defined Accessor (JavaScript)
DESCRIPTION: This snippet creates a radial line generator and sets its defined accessor using the .defined() method. The accessor function receives a data point (d) and should return true if the point is defined and should be included in the line, false otherwise.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const line = d3.lineRadial().defined((d) => !isNaN(d.temperature));
```

----------------------------------------

TITLE: Scheduling a delayed d3.timer in JavaScript
DESCRIPTION: Illustrates scheduling a timer using `d3.timer` with a 150ms delay. The callback receives the elapsed time and logs it, stopping the timer when the elapsed time exceeds 200ms. This demonstrates basic timer creation and control.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-timer.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const t = d3.timer((elapsed) => {
  console.log(elapsed);
  if (elapsed > 200) t.stop();
}, 150);
```

----------------------------------------

TITLE: Creating UTC Time Parser in JavaScript
DESCRIPTION: Demonstrates the basic usage of `d3.utcParse` to create a UTC date parser using a standard specifier. This is an alias for the default locale's utcParse method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_6

LANGUAGE: javascript
CODE:
```
d3.utcParse("%b %d")
```

----------------------------------------

TITLE: Setting D3 Arc Inner Radius Property
DESCRIPTION: Configures the arc generator to use a constant value (40) for its inner radius. Subsequent calls to the generator will use this value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const arc = d3.arc().innerRadius(40);
```

----------------------------------------

TITLE: Applying Bundle Curve with Beta to D3 Line Generator
DESCRIPTION: This snippet shows how to configure a D3 line generator to use a Bundle curve with a specified beta parameter. The `d3.line()` creates the generator, and `.curve(d3.curveBundle.beta(0.5))` applies the Bundle curve with a beta value of 0.5, controlling the straightening effect.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const line = d3.line().curve(d3.curveBundle.beta(0.5));
```

----------------------------------------

TITLE: Creating Linear Scale Tick Format Function D3.js JavaScript
DESCRIPTION: Creates a d3.scaleLinear and obtains a number format function suitable for displaying its tick values using `.tickFormat()`. The resulting function automatically computes the appropriate precision based on the fixed interval between generated tick values. Requires the d3-scale and d3-format modules.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_17

LANGUAGE: javascript
CODE:
```
const x = d3.scaleLinear([0.1, 1], ["red", "blue"]);
const f = x.tickFormat();
f(0.1); // "0.1"
f(1); // "1.0"
```

----------------------------------------

TITLE: Setting D3.js Symbol Type (JavaScript)
DESCRIPTION: Creates a new d3.symbol() generator instance and sets its symbol type to d3.symbolCross using the .type() method. The generator will now produce cross shapes when invoked.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const symbol = d3.symbol().type(d3.symbolCross);
```

----------------------------------------

TITLE: Formatting Date with ISO 8601 Standard in JavaScript
DESCRIPTION: Shows how to use the built-in `d3.isoFormat` function to format a Date object into a string following the ISO 8601 UTC standard. It leverages `Date.toISOString` where available.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_7

LANGUAGE: javascript
CODE:
```
d3.isoFormat(new Date()) // "2023-05-31T18:17:36.788Z"
```

----------------------------------------

TITLE: Representing a Polygon using GeoJSON
DESCRIPTION: This JSON snippet shows the standard GeoJSON representation for a simple square polygon with five coordinates, where the first and last coordinates are the same to close the ring.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/stream.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "type": "Polygon",
  "coordinates": [[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]]
}
```

----------------------------------------

TITLE: Rendering D3 Axes with Vue Component
DESCRIPTION: These snippets show how to use a custom Vue component (`ExampleAxis`) to render different types of D3 axes configured with various scales (linear, log, band, UTC time) and specific options like `tickSizeOuter`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_1

LANGUAGE: html
CODE:
```
<ExampleAxis :axis="d3.axisBottom(d3.scaleLinear([0, 100], range))" :y="7" />

<ExampleAxis :axis="d3.axisBottom(d3.scaleLog([1, 1000], range))" :y="7" />

<ExampleAxis :axis="d3.axisBottom(d3.scaleBand([...'ABCDEFGHIJKL'], range)).tickSizeOuter(0)" :y="7" />

<ExampleAxis :axis="d3.axisBottom(d3.scaleUtc([new Date('2011-01-01'), new Date('2013-01-01')], range))" :y="7" />
```

----------------------------------------

TITLE: Creating D3 Many-Body Force with Strength | JavaScript
DESCRIPTION: Creates a new instance of the D3 many-body force. This force simulates attraction or repulsion among all nodes. The example immediately sets the force strength to -100, configuring it for repulsion between nodes.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/many-body.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const manyBody = d3.forceManyBody().strength(-100);
```

----------------------------------------

TITLE: Promoting Constant to Function Using Helper (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to convert a variable `x` into a function (`fx`). If `x` is already a function, `fx` becomes `x`. If `x` is a constant value, `fx` becomes a new function that always returns `x`, using a helper like the `constant` function shown previously. This is a common pattern in D3 and JavaScript libraries to handle both function and constant inputs gracefully. Requires the `constant` helper function or equivalent logic.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_30

LANGUAGE: JavaScript
CODE:
```
var fx = typeof x === "function" ? x : constant(x);
```

----------------------------------------

TITLE: Synchronizing D3 Transitions with Shared Instance - JavaScript
DESCRIPTION: Demonstrates how to create a base transition configuration using `d3.transition` and apply it to multiple selections using `selection.transition(t)`. This ensures that elements in different selections animate simultaneously with the same duration and easing, inheriting timing properties.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_72

LANGUAGE: JavaScript
CODE:
```
var t = d3.transition()
    .duration(750)
    .ease(d3.easeLinear);

d3.selectAll(".apple").transition(t)
    .style("fill", "red");

d3.selectAll(".orange").transition(t)
    .style("fill", "orange");
```

----------------------------------------

TITLE: Setting Tick Arguments for Linear Scale
DESCRIPTION: This JavaScript snippet demonstrates using the `.ticks()` method on a D3 axis generator to suggest the number of ticks and specify a format specifier for a linear scale.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_11

LANGUAGE: javascript
CODE:
```
axis.ticks(20, "s");
```

----------------------------------------

TITLE: Setting Inner Tick Size D3.js JavaScript
DESCRIPTION: Sets the size (length) of the inner tick lines of a D3.js axis in pixels using the `tickSizeInner()` method. The example sets the size to 0, hiding the inner tick marks. This method only affects the ticks located along the axis line, not the ends of the domain path, and returns the axis instance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_21

LANGUAGE: javascript
CODE:
```
const axis = d3.axisBottom(x).tickSizeInner(0);
```

----------------------------------------

TITLE: Defining Nodes and Links (Numeric IDs) - JavaScript
DESCRIPTION: Provides an example of how to define nodes and links for a D3.js force simulation when the link force is configured to use the default numeric node ID accessor (`d.index`). Nodes are simple objects, and links specify source and target using zero-based indices corresponding to the node array positions.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const nodes = [
  {"id": "Alice"},
  {"id": "Bob"},
  {"id": "Carol"}
];

const links = [
  {"source": 0, "target": 1}, // Alice → Bob
  {"source": 1, "target": 2} // Bob → Carol
];
```

----------------------------------------

TITLE: Accessing Grouped Data from D3.js InternMap (JavaScript)
DESCRIPTION: This code accesses a specific group from the InternMap created by `d3.group`. It uses the `get` method with the key "Adelie" to retrieve the array containing all penguin objects belonging to the "Adelie" species. The comment indicates the expected output is an array of 152 elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_1

LANGUAGE: javascript
CODE:
```
species.get("Adelie") // Array(152)
```

----------------------------------------

TITLE: Formatting with SI Prefix Javascript
DESCRIPTION: Demonstrates formatting a large number (42e6) using an SI prefix ('M' for mega) and rounding to two significant digits with `d3.format(".2s")`. The output is "42M". Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_6

LANGUAGE: javascript
CODE:
```
d3.format(".2s")(42e6) // SI-prefix with two significant digits, "42M"
```

----------------------------------------

TITLE: Creating a new D3 Drag Behavior
DESCRIPTION: This snippet shows how to instantiate a new drag behavior object using the d3.drag() factory function. The returned object is typically applied to a selection using the .call() method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const drag = d3.drag();
```

----------------------------------------

TITLE: Setting Selection Style Property D3.js JavaScript
DESCRIPTION: Sets a specific CSS style property ("color") to a constant value ("red") for all elements in the selection. A function can be used for dynamic values, and an optional priority ("important") can be specified. A null value removes the style property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
selection.style("color", "red")
```

----------------------------------------

TITLE: Setting Domain and Mapping Values in D3 Ordinal Scale
DESCRIPTION: Creates an ordinal scale with an initial range and then explicitly sets its domain using the `.domain()` method. It then shows how calling the scale with different domain values maps them to their corresponding range values. Requires the D3 library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const color = d3.scaleOrdinal(["red", "green", "blue"]).domain(["a", "b", "c"]);
color("a"); // "red"
color("b"); // "green"
color("c"); // "blue"
```

----------------------------------------

TITLE: Setting Range with D3 point.range() - JavaScript
DESCRIPTION: Demonstrates how to create a D3 point scale and then set its output range using the `range()` method. The range is specified as a two-element array [0, 960].
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const x = d3.scalePoint().range([0, 960]);
```

----------------------------------------

TITLE: Selecting Single Descendant by Selector String - D3 - JavaScript
DESCRIPTION: This snippet demonstrates the standard way to select the first descendant element matching a CSS selector string ("div") for each element in a D3.js selection. It uses the public `.select()` method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_21

LANGUAGE: javascript
CODE:
```
const div = selection.select("div");
```

----------------------------------------

TITLE: Set and Get Linear Scale Range - D3.js JavaScript
DESCRIPTION: The `range()` method sets the scale's range to the specified array of values (two or more elements required) when an argument is provided. Values need not be numbers if supported by the interpolator. If no argument is given, it returns a copy of the current range array.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const x = d3.scaleLinear().range([0, 960]);
```

LANGUAGE: javascript
CODE:
```
x.range() // [0, 960]
```

----------------------------------------

TITLE: Set D3 Bin Thresholds (Number) (JS)
DESCRIPTION: Configures the bin generator's thresholds by specifying the desired number of bins. D3 will automatically calculate threshold values that divide the domain into approximately this many uniform intervals using tick generation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const bin = d3.bin().thresholds(20);
```

----------------------------------------

TITLE: Stop D3 Timer Externally (D3v4 .timeout) - JavaScript
DESCRIPTION: Illustrates stopping a D3 v4 timer externally using `d3.timeout`. This separates the timer's callback logic from its termination condition, allowing for external control and disposal of resources.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_69

LANGUAGE: js
CODE:
```
var t = d3.timer(function(elapsed) {
  console.log(elapsed);
});

d3.timeout(function() {
  t.stop();
}, 1000);
```

----------------------------------------

TITLE: Configuring D3 geoConicEqualArea Projection JavaScript
DESCRIPTION: This snippet shows the configuration for a D3 conic equal-area projection (like Albers). It sets standard parallels, rotation, scale, center, translation, clipping extent, and precision, similar to the conic conformal example.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/conic.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
d3.geoConicEqualArea().parallels([35, 65]).rotate([-20, 0]).scale(width * 0.55).center([0, 52]).translate([width / 2, height / 2]).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)
```

----------------------------------------

TITLE: Creating a Force Simulation with D3.js
DESCRIPTION: This snippet demonstrates how to create a new force simulation using D3.js. It calls the `d3.forceSimulation()` function, passing an array of `nodes` (which are objects). The function returns a simulation object, assigned to `simulation`, that can be further configured and run. Note that this function mutates the input `nodes` array by adding properties like `index`, `x`, `y`, `vx`, `vy`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/simulation.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const simulation = d3.forceSimulation(nodes);
```

----------------------------------------

TITLE: Creating Linear Scale with Three-Value Range D3.js JavaScript
DESCRIPTION: Initializes a d3.scaleLinear instance with a domain and a range containing more than two values. The scale will automatically create interpolators for each adjacent pair of values in the range using the default interpolator. Requires the d3-scale module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const color = d3.scaleLinear([-100, 0, +100], ["red", "white", "green"]);
```

----------------------------------------

TITLE: Finding Closest Point in Delaunay Triangulation JS/Vue
DESCRIPTION: This snippet demonstrates calling the `delaunay.find(x, y)` method to find the index of the input point closest to the specified coordinates `(x, y)`. It also shows how to use a reactive variable (`findState.i`) to display the result in a Vue template.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#_snippet_5

LANGUAGE: js-vue
CODE:
```
delaunay.find({{findState.x}}, {{findState.y}}) // {{findState.i}}
```

----------------------------------------

TITLE: Generating Time Scale Ticks in D3.js
DESCRIPTION: This snippet demonstrates how to generate a default set of tick values for a time scale using the `ticks()` method. It shows the expected output of an array of `Date` objects representing representative points across the scale's domain. Requires the D3.js library, specifically the d3-scale module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/time.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const x = d3.scaleTime();
x.ticks(10);
// [Sat Jan 01 2000 00:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 03:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 06:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 09:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 12:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 15:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 18:00:00 GMT-0800 (PST),
//  Sat Jan 01 2000 21:00:00 GMT-0800 (PST),
//  Sun Jan 02 2000 00:00:00 GMT-0800 (PST)]
```

----------------------------------------

TITLE: Parsing HSL Color with d3.color in JavaScript
DESCRIPTION: Demonstrates the usage of the new d3.color method to parse a CSS HSL color string. This method returns a d3.color instance, providing access to color properties like hue, saturation, lightness, and opacity.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
var red = d3.color("hsl(0, 80%, 50%)"); // {h: 0, l: 0.5, s: 0.8, opacity: 1}
```

----------------------------------------

TITLE: Mapping Values with Threshold Scale - D3 - JavaScript
DESCRIPTION: Shows how to apply a configured threshold scale to various input values. Based on the domain `[0, 1]` and range `["red", "white", "green"]`, values below 0 map to "red", values from 0 up to (but not including) 1 map to "white", and values 1 or greater map to "green". Requires a D3 threshold scale instance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const color = d3.scaleThreshold([0, 1], ["red", "white", "green"]);
color(-1); // "red"
color(0); // "white"
color(0.5); // "white"
color(1); // "green"
color(1000); // "green"
```

----------------------------------------

TITLE: Defining Reusable Function for Transition Styling in D3 JavaScript
DESCRIPTION: Defines a JavaScript function named `color` that takes a D3 transition object, a fill color string, and a stroke color string as arguments. Inside the function, it uses the `transition.style()` method to apply the provided fill and stroke styles to the elements managed by the transition. This function is designed to be invoked via `transition.call()` for code reusability.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/control-flow.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function color(transition, fill, stroke) {
  transition
      .style("fill", fill)
      .style("stroke", stroke);
}
```

----------------------------------------

TITLE: Interpolating Dates (D3.js)
DESCRIPTION: This snippet demonstrates d3.interpolateDate for interpolating between two JavaScript Date objects. The function performs linear interpolation on the underlying timestamp values. Evaluating at t = 0.5 returns a Date object representing the date halfway between January 1, 2014, and January 1, 2024, which is January 1, 2019.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_4

LANGUAGE: js
CODE:
```
d3.interpolateDate(new Date("2014-01-01"), new Date("2024-01-01"))(0.5) // 2019-01-01
```

----------------------------------------

TITLE: Using D3.js piecewise with a Custom Interpolator - JavaScript
DESCRIPTION: Returns a piecewise interpolator composed of interpolators for each adjacent pair of values in the input array. This example uses the d3.interpolateRgb.gamma(2.2) interpolator to create smooth color transitions between "red", "green", and "blue".
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
d3.piecewise(d3.interpolateRgb.gamma(2.2), ["red", "green", "blue"])
```

----------------------------------------

TITLE: Default SI Prefix Formatting Javascript
DESCRIPTION: Shows the default behavior of the 's' format type, which uses SI prefixes (like 'k' for kilo) and rounds to significant digits, including trailing zeros up to the precision if not trimmed. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_14

LANGUAGE: javascript
CODE:
```
d3.format("s")(1500) // "1.50000k"
```

----------------------------------------

TITLE: Iterating Hierarchy Descendants (JavaScript)
DESCRIPTION: Demonstrates the use of the hierarchy node's built-in iterator (`node[Symbol.iterator]`). This allows for easy traversal of all descendant nodes in breadth-first order using a `for...of` loop. Each iteration yields a descendant node object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
for (const descendant of node) {
  console.log(descendant);
}
```

----------------------------------------

TITLE: Set D3 Bin Thresholds (Array) (JS)
DESCRIPTION: Sets the bin generator's thresholds using an explicit array of numeric values. These values define the boundaries between bins; a value falls into a bin if it is greater than or equal to the lower threshold and less than the upper threshold (with the last bin inclusive of the upper domain boundary).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const bin = d3.bin().thresholds([0.25, 0.5, 0.75]);
```

----------------------------------------

TITLE: Creating D3 Power Scale - JavaScript
DESCRIPTION: Constructs a new D3 power scale using `d3.scalePow`. This example sets the input domain to [0, 100] and the output range to ['red', 'blue'], then chains the `exponent(2)` method to set the scale's exponent to 2.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/pow.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const x = d3.scalePow([0, 100], ["red", "blue"]).exponent(2);
```

----------------------------------------

TITLE: Setting D3 Area Curve Factory - Javascript
DESCRIPTION: Sets the curve factory for the area generator, controlling how the points are interpolated. The factory determines the shape of the lines connecting data points.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_21

LANGUAGE: javascript
CODE:
```
const area = d3.area().curve(d3.curveStep);
```

----------------------------------------

TITLE: Setting Outer Tick Size D3.js JavaScript
DESCRIPTION: Sets the size (length) of the "outer ticks," which are the square ends of the domain path at the axis's extent, using the `tickSizeOuter()` method. Setting the size to 0, as in the example, suppresses these end markers, resulting in a straight domain path. This method affects the path ends, not the inner tick lines, and returns the axis instance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_23

LANGUAGE: javascript
CODE:
```
const axis = d3.axisBottom(x).tickSizeOuter(0);
```

----------------------------------------

TITLE: Setting D3 Area Y1 Accessor - Javascript
DESCRIPTION: Sets the y1 accessor for the area generator to the specified function or number. When generated, this accessor is invoked for each data element to determine the y-coordinate for the topline.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_15

LANGUAGE: javascript
CODE:
```
const area = d3.area().y1((d) => y(d.Close));
```

----------------------------------------

TITLE: Nicing Linear Scale Domain with Tick Count Hint D3.js JavaScript
DESCRIPTION: Demonstrates using the `.nice()` method with a specified tick count argument (40). This tells D3 to extend the domain bounds to align with a tick interval suitable for generating approximately that many ticks, offering finer control over the 'niced' domain. Requires the d3-scale module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_20

LANGUAGE: javascript
CODE:
```
const x = d3.scaleLinear([0.241079, 0.969679], [0, 960]).nice(40);
x.domain(); // [0.24, 0.98]
```

----------------------------------------

TITLE: Formatting Global Ticks with Specifier D3.js JavaScript
DESCRIPTION: Demonstrates using the global `d3.tickFormat()` function with a format specifier ("+%") in addition to start, stop, and count arguments. It creates a format function that applies the custom format specifier while automatically setting precision based on the interval and count. Requires the d3-format module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_23

LANGUAGE: javascript
CODE:
```
const f = d3.tickFormat(-1, 1, 5, "+%");
f(-0.5); // "-50%"
```

----------------------------------------

TITLE: Defining D3 Stack Input Data Structure (JavaScript)
DESCRIPTION: This snippet defines an array of objects representing the tabular data format expected by the updated d3.stack generator in D3 4.0. Each object represents a point in time (month), and its properties ("apples", "bananas", etc.) represent the values for different series at that point. This structure simplifies data input compared to older versions.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_54

LANGUAGE: javascript
CODE:
```
var data = [
  {month: new Date(2015, 0, 1), apples: 3840, bananas: 1920, cherries: 960, dates: 400},
  {month: new Date(2015, 1, 1), apples: 1600, bananas: 1440, cherries: 960, dates: 400},
  {month: new Date(2015, 2, 1), apples:  640, bananas:  960, cherries: 640, dates: 400},
  {month: new Date(2015, 3, 1), apples:  320, bananas:  480, cherries: 640, dates: 400}
];
```

----------------------------------------

TITLE: Invoking Configured D3 Arc Generator
DESCRIPTION: Constructs an arc generator and immediately invokes it. This is possible because all necessary properties (radii, angles) are set as constants on the generator itself, not expected from an argument object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
d3.arc()
    .innerRadius(0)
    .outerRadius(100)
    .startAngle(0)
    .endAngle(Math.PI / 2)
  (); // "M0,-100A100,100,0,0,1,100,0L0,0Z"
```

----------------------------------------

TITLE: Summing and Sorting Hierarchy by Height/Id (JavaScript)
DESCRIPTION: Performs value aggregation using `node.sum` and then sorts nodes via `node.sort`. The sorting rule prioritizes descending `height` and falls back to ascending `id` using `d3.ascending`. This specific sort order is often recommended for tree and dendrogram layouts in D3 to achieve a consistent visual hierarchy.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
root
    .sum((d) => d.value)
    .sort((a, b) => b.height - a.height || d3.ascending(a.id, b.id));
```

----------------------------------------

TITLE: Creating RGB Color Interpolator in D3.js
DESCRIPTION: Creates an interpolator for transitioning between two colors (e.g., "purple" and "orange") in the RGB color space. Input colors are converted to RGB if necessary. The resulting interpolator function, when called with a value `t` between 0 and 1, returns an interpolated RGB color string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_0

LANGUAGE: javascript
CODE:
```
d3.interpolateRgb("purple", "orange")
```

----------------------------------------

TITLE: Creating Quadtree then Adding All Data (d3.quadtree/addAll) - JavaScript
DESCRIPTION: Demonstrates creating an empty quadtree instance and then adding an iterable collection of data points using the addAll method. This is equivalent to passing data directly to the constructor.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const tree = d3.quadtree().addAll(data);
```

----------------------------------------

TITLE: Using D3.js quantize to Sample an Interpolator - JavaScript
DESCRIPTION: Returns a fixed number (n) of uniformly-spaced samples from a specified interpolator. This is useful for generating a range of values for scales from a continuous interpolator. This example samples the interpolation between "red" and "blue" 4 times, resulting in an array of colors.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
d3.quantize(d3.interpolate("red", "blue"), 4) // ["rgb(255, 0, 0)", "rgb(170, 0, 85)", "rgb(85, 0, 170)", "rgb(0, 0, 255)"]
```

----------------------------------------

TITLE: Reduce Iterable with D3.js (Set Example)
DESCRIPTION: Shows how `d3.reduce` can apply a reducer function to an iterable (not just arrays) to accumulate a single result. It takes a reducer function and an optional initial value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#_snippet_11

LANGUAGE: javascript
CODE:
```
d3.reduce(new Set([0, 2, 3, 4]), (p, v) => p + v, 0) // 9
```

----------------------------------------

TITLE: Parsing Color Specifier d3.color JavaScript
DESCRIPTION: Demonstrates using the d3.color function to parse a CSS color specifier string, such as a named color, returning a color object (typically RGB or HSL initially).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_4

LANGUAGE: javascript
CODE:
```
d3.color("steelblue") // {r: 70, g: 130, b: 180, opacity: 1}
```

----------------------------------------

TITLE: Generating Range with d3.range - Stop Only
DESCRIPTION: Demonstrates the basic usage of d3.range, which generates an arithmetic progression. When only the stop value is provided, start defaults to 0 and step defaults to 1. The stop value is exclusive.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_7

LANGUAGE: javascript
CODE:
```
d3.range(6) // [0, 1, 2, 3, 4, 5]
```

----------------------------------------

TITLE: Rendering Line Generator to Canvas in D3.js
DESCRIPTION: This snippet shows how to render the shape generated by the configured line generator (`line`) directly onto a Canvas 2D rendering context (`context`). By setting the context using `.context(context)`, the generator outputs path commands suitable for Canvas drawing instead of SVG path strings. The shape is then drawn using the provided data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape.md#_snippet_2

LANGUAGE: js
CODE:
```
line.context(context)(data);
```

----------------------------------------

TITLE: Calculating Set Intersection - D3.js - JavaScript
DESCRIPTION: This snippet demonstrates the `d3.intersection` function, which calculates the common elements present in all input iterables. It returns a new `InternSet` containing only these shared values. The example shows the intersection of `[0, 2, 1, 0]` and `[1, 3]`, resulting in `{1}`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sets.md#_snippet_2

LANGUAGE: javascript
CODE:
```
d3.intersection([0, 2, 1, 0], [1, 3]) // Set {1}
```

----------------------------------------

TITLE: Count Hours Since Start of Week (D3 4.x) JavaScript
DESCRIPTION: Provides an example of a more general application of the `interval.count` method in D3 4.x. It counts the number of `timeHour` intervals between the start of the current week (`d3.timeWeek(now)`) and the current date (`now`), which can be useful for calculating values like the hour of the week for data visualization like heatmaps. It takes two `Date` objects (start and end) for the count.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_66

LANGUAGE: javascript
CODE:
```
d3.timeHour.count(d3.timeWeek(now), now); // 64
```

----------------------------------------

TITLE: Dispatching Custom Event with dispatch.call in JavaScript
DESCRIPTION: Shows the updated method for dispatching an event in D3 v4 using the dispatcher.call method. The event type is now passed as the first argument, followed by the 'this' context and any arguments for the listener.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
dispatcher.call("foo", that, "Hello, Foo!");
```

----------------------------------------

TITLE: Creating D3 Square Root Scale - JavaScript
DESCRIPTION: Constructs a new D3 square root scale using `d3.scaleSqrt`. This is a convenience function equivalent to `d3.scalePow(...).exponent(0.5)`. The example sets the input domain to [0, 100] and the output range to ['red', 'blue'].
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/pow.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const x = d3.scaleSqrt([0, 100], ["red", "blue"]);
```

----------------------------------------

TITLE: Setting D3 Arc End Angle Property
DESCRIPTION: Configures the arc generator to use a constant value (Math.PI radians) for its end angle. Subsequent calls to the generator will use this value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
const arc = d3.arc().endAngle(Math.PI);
```

----------------------------------------

TITLE: Count Days Since Start of Year (D3 4.x) JavaScript
DESCRIPTION: Shows the D3 4.x equivalent for calculating the day of the year using the general `interval.count` method. It counts the number of `timeDay` intervals between the start of the year (`d3.timeYear(now)`) and the current date (`now`). This method is more general than the 3.x version. It takes two `Date` objects (start and end) for the count.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_64

LANGUAGE: javascript
CODE:
```
var now = new Date;
d3.timeDay.count(d3.timeYear(now), now); // 165
```

----------------------------------------

TITLE: Configuring D3 Mercator Projection (JS)
DESCRIPTION: Creates and configures a D3 spherical Mercator geographic projection. It sets the rotation to `[0, 0]`, fits the projection to a square extent based on the component's width, and sets the precision to `0.2`. This projection has a default clip extent.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/cylindrical.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
d3.geoMercator().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width - 1]], {type: "Sphere"}).precision(0.2)
```

----------------------------------------

TITLE: Parsing Named Color String d3.color JavaScript
DESCRIPTION: Uses the d3.color function to parse a named CSS color string and create a color object. This demonstrates the basic creation of a color instance from a common format.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_0

LANGUAGE: javascript
CODE:
```
let c = d3.color("steelblue"); // {r: 70, g: 130, b: 180, opacity: 1}
```

----------------------------------------

TITLE: Calculating Median of Array Numbers - D3.js JavaScript
DESCRIPTION: Shows how to use `d3.median` to find the median value in an array of numbers. It uses the R-7 method and ignores non-numeric values like `NaN` and `null`. The input is an array of numbers, and the output is the calculated median.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
d3.median([1, 2, 2, 2, NaN, 3, null]) // 2
```

----------------------------------------

TITLE: Loading Text File with d3-fetch in JavaScript
DESCRIPTION: This snippet demonstrates loading a plain text file from a specified URL using the `d3.text` function. It returns a promise that resolves to the text content of the file.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_0

LANGUAGE: js
CODE:
```
const text = await d3.text("hello-world.txt"); // "Hello, world!"
```

----------------------------------------

TITLE: Rescaling Y-axis Scale using D3 Transform (JavaScript)
DESCRIPTION: Demonstrates the implementation of the `transform.rescaleY` method. It takes a linear scale `y`, applies the inverse y-transform (`transform.invertY`) to its range, then applies the inverse scale (`y.invert`) to get the new domain, and finally returns a copy of the original scale with the transformed domain. Requires the input scale `y` to use `interpolateNumber` for accuracy.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
function rescaleY(y) {
  var range = y.range().map(transform.invertY, transform),
      domain = range.map(y.invert, y);
  return y.copy().domain(domain);
}
```

----------------------------------------

TITLE: Disabling D3 Zoom Wheel Listener (JavaScript)
DESCRIPTION: This snippet applies a d3-zoom behavior to a D3 selection using `selection.call()`, and then immediately removes the specific `wheel.zoom` event listener. This allows the selection to respond to other zoom inputs (like drag or touch) but prevents wheel scrolling from triggering the zoom behavior, useful to avoid conflicts with native scrolling.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_2

LANGUAGE: javascript
CODE:
```
selection
    .call(zoom)
    .on("wheel.zoom", null);
```

----------------------------------------

TITLE: Enabling/Disabling Rounding with D3 point.round() - JavaScript/Vue
DESCRIPTION: Demonstrates setting the rounding property of a D3 point scale using the `round()` method. The boolean value for rounding is dynamically provided using Vue interpolation from a ref named `round`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#_snippet_5

LANGUAGE: javascript-vue
CODE:
```
const x = d3.scalePoint(["a", "b", "c"], [0, 960]).round({{round}});
```

----------------------------------------

TITLE: Setting D3 Arc Corner Radius Property (Vue Context)
DESCRIPTION: Configures the arc generator to use a dynamic value (cornerRadius) for its corner radius. This example shows usage within a context like Vue.js where values can be reactive.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
const arc = d3.arc().cornerRadius({{cornerRadius}});
```

----------------------------------------

TITLE: Configuring D3 Stack Order Descending - JavaScript
DESCRIPTION: This snippet shows how to set the stack order to descending using `d3.stackOrderDescending`. This order places the largest series (by sum of values) at the bottom of the stack, the opposite of the ascending order. It is applied via the `.order()` method on the stack generator.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_16

LANGUAGE: javascript
CODE:
```
const stack = d3.stack().order(d3.stackOrderDescending);
```

----------------------------------------

TITLE: Configuring D3 Stack Order Inside-Out - JavaScript
DESCRIPTION: This snippet shows how to apply the `d3.stackOrderInsideOut` order to a D3 stack. This order arranges series with smaller maximum values towards the center and larger maximum values towards the outside, often used for streamgraphs in combination with the wiggle offset. The order is set using the `.order()` method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_17

LANGUAGE: javascript
CODE:
```
const stack = d3.stack().order(d3.stackOrderInsideOut);
```

----------------------------------------

TITLE: Default D3 Link Force Node ID Accessor - JavaScript
DESCRIPTION: Shows the default function used by the D3.js link force to access a node's identifier. This function uses the node's zero-based index in the simulation's node array, allowing links to be specified using numeric indices for the source and target properties.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function id(d) {
  return d.index;
}
```

----------------------------------------

TITLE: Formatting Log Scale Ticks D3 JavaScript
DESCRIPTION: Creates a D3 logarithmic scale, generates tick values, and obtains a default tick formatting function using `.tickFormat()`. This function can be mapped over the tick values to produce strings suitable for display as axis labels. The formatter may return empty strings for some ticks to avoid clutter.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/log.md#_snippet_3

LANGUAGE: js
CODE:
```
const x = d3.scaleLog([1, 100], [0, 960]);
const T = x.ticks(); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, …]
const f = x.tickFormat();
T.map(f); // ["1", "2", "3", "4", "5", "", "", "", "", "10", …]
```

----------------------------------------

TITLE: Setting Easing Function D3 Transition JavaScript
DESCRIPTION: Specifies the easing function to be used for interpolating the values during a D3 transition for all selected elements. The easing function transforms the normalized time (0 to 1) to an eased time. Requires a D3 transition object and a valid D3 easing function. Defaults to `d3.easeCubic` if not specified.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#_snippet_5

LANGUAGE: javascript
CODE:
```
transition.ease(d3.easeCubic);
```

----------------------------------------

TITLE: Setting Quantize Scale Range (JavaScript)
DESCRIPTION: Shows how to set the range of an existing quantize scale using the range() method. It replaces the scale's current range with a new discrete array of values. The array can contain any number of values of any type.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const color = d3.scaleQuantize();
color.range(d3.schemeBlues[5]);
```

----------------------------------------

TITLE: Installing D3 with npm
DESCRIPTION: This bash command shows how to install the D3.js library into a project using the npm package manager. This is typically done in the terminal within the project's root directory.
SOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm install d3
```

----------------------------------------

TITLE: Setting Domain with D3 point.domain() - JavaScript/Vue
DESCRIPTION: Shows how to create a D3 point scale and then set its domain using the `domain()` method. The domain values are dynamically injected using Vue interpolation, parsing a comma-separated string from a Vue ref (`domain`).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#_snippet_1

LANGUAGE: javascript-vue
CODE:
```
const x = d3.scalePoint([0, 960]).domain([{{d3.csvParseRows(domain).flat().map(JSON.stringify).join(", ")}}]);
```

----------------------------------------

TITLE: Initializing D3 GeoPath for Canvas
DESCRIPTION: Creates a new D3 geographic path generator. When provided with both a `projection` and a `context` (typically a Canvas 2D rendering context), the generator will render geometry directly onto the canvas instead of returning an SVG path string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const path = d3.geoPath(projection, context); // for canvas
```

----------------------------------------

TITLE: Checking if Every Element Satisfies Condition - D3.js JavaScript
DESCRIPTION: Shows how to use `d3.every` to test if all elements in an iterable (here, a Set) pass a given test function. The test `x => x & 1` checks if each number is odd. Since all numbers in the Set are odd, the function returns `true`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
d3.every(new Set([1, 3, 5, 7]), x => x & 1) // true
```

----------------------------------------

TITLE: Appending Element with Function - D3.js Selection - JavaScript
DESCRIPTION: Illustrates using a function with `selection.append()` to create the element dynamically. The function is evaluated for each selected element and should return the DOM element to be appended. This example creates a `p` element using `document.createElement`. Returns a new selection of the appended elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
d3.selectAll("div").append(() => document.createElement("p"));
```

----------------------------------------

TITLE: Configuring D3 Line Generator Curve JavaScript
DESCRIPTION: This snippet demonstrates creating a D3 line generator (`d3.line`) and setting its curve interpolation method. It uses the new `.curve()` method with `d3.curveCatmullRom.alpha(0)` to specify a uniform Catmull-Rom spline, replacing the older string-based `.interpolate()` method.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_53

LANGUAGE: JavaScript
CODE:
```
var line = d3.line()
    .curve(d3.curveCatmullRom.alpha(0));
```

----------------------------------------

TITLE: Setting Tick Arguments for Time Scale
DESCRIPTION: This JavaScript snippet demonstrates using the `.ticks()` method on a D3 axis generator to specify a time interval (e.g., every 15 minutes) for generating ticks on a time scale.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_12

LANGUAGE: javascript
CODE:
```
axis.ticks(d3.timeMinute.every(15));
```

----------------------------------------

TITLE: Creating Lab Color Interpolator in D3.js
DESCRIPTION: Creates an interpolator for transitioning between two colors (e.g., "purple" and "orange") in the CIELAB color space. Input colors are converted to CIELAB. The resulting interpolator function returns an interpolated RGB color string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_5

LANGUAGE: javascript
CODE:
```
d3.interpolateLab("purple", "orange")
```

----------------------------------------

TITLE: Interrupting Selection and Descendant Transitions in D3 JavaScript
DESCRIPTION: Shows how to first interrupt the active transition on the selected element itself, and then proceed to interrupt transitions on all its descendant elements. This ensures that both the parent element and its children have their transitions cleared.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/control-flow.md#_snippet_1

LANGUAGE: javascript
CODE:
```
selection.interrupt().selectAll("*").interrupt();
```

----------------------------------------

TITLE: Loading Image with Cross-Origin Configuration in JavaScript
DESCRIPTION: This snippet fetches an image file using `d3.image` and provides an optional `init` object to configure the underlying fetch request. This is useful for setting properties like `crossOrigin` to enable CORS requests for images from different origins.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_9

LANGUAGE: js
CODE:
```
const image = await d3.image("https://example.com/image.png", {crossOrigin: "anonymous"});
```

----------------------------------------

TITLE: Creating HCL Long Path Color Interpolator in D3.js
DESCRIPTION: Creates an interpolator for transitioning between two colors (e.g., "purple" and "orange") in the CIELCh₊b color space. Similar to interpolateHcl, but explicitly does *not* use the shortest path between hues. It returns an interpolated RGB color string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_7

LANGUAGE: javascript
CODE:
```
d3.interpolateHclLong("purple", "orange")
```

----------------------------------------

TITLE: Applying Rounding Precision to Format D3.js JavaScript
DESCRIPTION: Shows how to use `precisionRound` to determine the precision for a significant-digit format string (`r`). It calculates precision based on step and max value, then applies it to the format.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_32

LANGUAGE: javascript
CODE:
```
const p = d3.precisionRound(0.01, 1.01);
const f = d3.format("." + p + "r");
f(0.99); // "0.990"
f(1.0);  // "1.00"
f(1.01); // "1.01"
```

----------------------------------------

TITLE: Creating HSL Long Path Color Interpolator in D3.js
DESCRIPTION: Creates an interpolator for transitioning between two colors (e.g., "purple" and "orange") in the HSL color space. Unlike interpolateHsl, it does *not* use the shortest path between hues, potentially resulting in a longer hue rotation. It returns an interpolated RGB color string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_4

LANGUAGE: javascript
CODE:
```
d3.interpolateHslLong("purple", "orange")
```

----------------------------------------

TITLE: Illustrating fitSize as Convenience for fitExtent - JavaScript
DESCRIPTION: Shows that calling `projection.fitSize([width, height], object)` is equivalent to calling `projection.fitExtent([[0, 0], [width, height]], object)`. Both methods fit a GeoJSON object into a bounding box starting at the origin [0, 0].
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/projection.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
projection.fitExtent([[0, 0], [width, height]], object);
projection.fitSize([width, height], object);
```

----------------------------------------

TITLE: Animating D3 Zoom Transform Reset (JavaScript)
DESCRIPTION: This snippet initiates a D3 transition on a selection, sets the duration to 750 milliseconds, and then uses `transition.call()` to invoke the `zoom.transform()` method with `d3.zoomIdentity`. This creates a smooth animation from the current zoom state to the identity transform, interpolating the transformation over the specified duration and emitting zoom events throughout the animation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_4

LANGUAGE: javascript
CODE:
```
selection.transition().duration(750).call(zoom.transform, d3.zoomIdentity);
```

----------------------------------------

TITLE: Transpose Nx2 Matrix with D3.js
DESCRIPTION: Another example of `d3.transpose`, showing the reverse operation from the previous snippet. It takes an array of arrays where each inner array represents a row and produces an array where each inner array represents a column.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#_snippet_7

LANGUAGE: javascript
CODE:
```
d3.transpose([["Alice", 32], ["Bob", 13], ["Carol", 14]]) // [["Alice", "Bob", "Carol"], [32, 13, 14]]
```

----------------------------------------

TITLE: Creating Sequential Scale with Range Array in D3.js (JS)
DESCRIPTION: Constructs a new sequential scale using the default [0, 1] domain and a two-element array representing the output range. D3 automatically creates an interpolator using d3.interpolate from the array elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#_snippet_4

LANGUAGE: js
CODE:
```
const color = d3.scaleSequential(["red", "blue"]);
```

----------------------------------------

TITLE: Creating D3 Stereographic Projection (JavaScript)
DESCRIPTION: Configures a D3 stereographic projection, which is conformal and maps the sphere to a plane from a point on the surface opposite the center. It sets the scale, translation, rotation, clip angle, clip extent, and precision. The clip angle defines the boundary of the projected hemisphere.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/azimuthal.md#_snippet_5

LANGUAGE: javascript
CODE:
```
d3.geoStereographic().scale(width / 4).translate([width / 2, height / 2]).rotate([-27, 0]).clipAngle(135 - 1e-4).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)
```

----------------------------------------

TITLE: Setting D3 Stack Order (Appearance) (JavaScript)
DESCRIPTION: This snippet shows how to set the stack order accessor to d3.stackOrderAppearance, a built-in order that places series with the earliest maximum value at the bottom of the stack.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
const stack = d3.stack().order(d3.stackOrderAppearance);
```

----------------------------------------

TITLE: Applying Reusable D3.js Transition to Multiple Selections - JavaScript
DESCRIPTION: This snippet demonstrates creating a D3.js transition instance with specific duration and easing, and then applying this exact transition to two separate selections (.apple and .orange) using the .transition() method. This ensures both sets of elements animate simultaneously with the same timing characteristics.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const t = d3.transition()
    .duration(750)
    .ease(d3.easeLinear);

d3.selectAll(".apple").transition(t)
    .style("fill", "red");

d3.selectAll(".orange").transition(t)
    .style("fill", "orange");
```

----------------------------------------

TITLE: Using tickArguments with Time Scale
DESCRIPTION: This JavaScript snippet demonstrates using the `.tickArguments()` method with an array to specify a time interval for generating ticks on a time scale.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_15

LANGUAGE: javascript
CODE:
```
axis.tickArguments([d3.timeMinute.every(15)]);
```

----------------------------------------

TITLE: Parsing String with d3.utcParse in JavaScript
DESCRIPTION: Shows how to create a UTC date parser using a specifier string and use it to convert a formatted string back into a Date object. Parsing is strict based on the specifier.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const parseTime = d3.utcParse("%B %d, %Y");
parseTime("June 30, 2015"); // 2023-05-31
```

----------------------------------------

TITLE: Using D3.js piecewise with Default Interpolator - JavaScript
DESCRIPTION: Returns a piecewise interpolator composed of interpolators for each adjacent pair of values. When no specific interpolator is provided as the first argument, it defaults to using d3.interpolate. This example shows the simpler syntax when using the default interpolator between the colors "red", "green", and "blue".
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
d3.piecewise(["red", "green", "blue"])
```

----------------------------------------

TITLE: Creating HCL Color Interpolator in D3.js
DESCRIPTION: Creates an interpolator for transitioning between two colors (e.g., "purple" and "orange") in the CIELCh₊b color space. Input colors are converted to CIELCh₊b. It uses the shortest path between hues and returns an interpolated RGB color string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_6

LANGUAGE: javascript
CODE:
```
d3.interpolateHcl("purple", "orange")
```

----------------------------------------

TITLE: Calling path.toString Method - d3-path JavaScript
DESCRIPTION: Demonstrates calling the `toString` method on a d3-path instance to get the accumulated path data as a standard SVG path string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#_snippet_10

LANGUAGE: javascript
CODE:
```
path.toString() // "M40,0A40,40,0,1,1,-40,0A40,40,0,1,1,40,0"
```

----------------------------------------

TITLE: Creating Format from Specifier and Precision D3.js JavaScript
DESCRIPTION: Demonstrates how to parse a base format specifier, modify its precision using a function like `precisionFixed`, and then create a new D3 format function from the modified specifier object. This allows for dynamic precision based on data characteristics.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_23

LANGUAGE: javascript
CODE:
```
const s = d3.formatSpecifier("f");
s.precision = d3.precisionFixed(0.01);
const f = d3.format(s);
f(42); // "42.00";
```

----------------------------------------

TITLE: Checking if Any Element Satisfies Condition - D3.js JavaScript
DESCRIPTION: Demonstrates using `d3.some` to check if at least one element in an iterable (a Set) passes a given test function. The test `x => x & 1` checks if a number is odd. Since the number 3 in the Set is odd, the function returns `true`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
d3.some(new Set([0, 2, 3, 4]), x => x & 1) // true
```

----------------------------------------

TITLE: Applying Catmull-Rom Curve with Alpha to D3 Line Generator
DESCRIPTION: This snippet demonstrates how to configure a D3 line generator to use a Catmull-Rom curve with a specific alpha parameter. The `d3.line()` creates the generator, `.x()` and `.y()` configure accessors for data points, and `.curve(d3.curveCatmullRom.alpha(0.5))` sets the curve type and its parameter.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const line = d3.line()
    .x((d) => x(d.date))
    .y((d) => y(d.value))
    .curve(d3.curveCatmullRom.alpha(0.5));
```

----------------------------------------

TITLE: Setting D3 Stack Offset (Expand) (JavaScript)
DESCRIPTION: This snippet shows how to set the stack offset accessor to a built-in function like d3.stackOffsetExpand, which normalizes the stack totals to 1 and centers the baseline.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
const stack = d3.stack().offset(d3.stackOffsetExpand);
```

----------------------------------------

TITLE: Setting Link X Accessor - JavaScript
DESCRIPTION: Configures the x-coordinate accessor for a link generator, using an external `x` function to process the data object's `x` property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_10

LANGUAGE: js
CODE:
```
const link = d3.linkHorizontal().x((d) => x(d.x));
```

----------------------------------------

TITLE: Creating D3 Gnomonic Projection (JavaScript)
DESCRIPTION: Configures a D3 gnomonic projection, commonly used for small areas like navigational charts. It sets the scale relative to the width, translates the center, defines a clip angle and extent to limit the visible area, and sets the precision. The clip angle determines the maximum distance from the center that is projected.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/azimuthal.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.geoGnomonic().scale(width / 6).translate([width / 2, height / 2]).clipAngle(74 - 1e-4).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)
```

----------------------------------------

TITLE: Creating Sequential Quantile Scale and Setting Domain/Interpolator in D3.js (JS)
DESCRIPTION: Constructs a new sequential scale with a quantile transform. The domain is typically set from an array of input data, and an interpolator is specified for the output range.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#_snippet_9

LANGUAGE: js
CODE:
```
const color = d3.scaleSequentialQuantile()
    .domain(penguins.map((d) => d.body_mass_g))
    .interpolator(d3.interpolateBlues);
```

----------------------------------------

TITLE: Selecting Sibling with Function D3.js JavaScript
DESCRIPTION: This snippet uses `selection.select` with a function. For each selected paragraph, the function is evaluated to find its previous sibling element. The result is a selection containing the previous sibling for each original paragraph, or null if none exists.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const previous = d3.selectAll("p").select(function() {
  return this.previousElementSibling;
});
```

----------------------------------------

TITLE: Creating Link Generator with Accessors - JavaScript
DESCRIPTION: Initializes a D3 link generator using the `curveBumpY` curve and custom accessors for x and y coordinates, expecting the data object `d` to have `x` and `y` properties.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_0

LANGUAGE: js
CODE:
```
const link = d3.link(d3.curveBumpY)
    .x((d) => d.x)
    .y((d) => d.y);
```

----------------------------------------

TITLE: Formatting Number with Adaptive SI Prefix - D3.js - JavaScript
DESCRIPTION: Shows formatting numbers using the `s` directive in `d3.format`. Unlike `d3.formatPrefix`, this directive automatically selects the most appropriate SI prefix (k, M, etc.) for each individual number to keep the formatted value concise.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_22

LANGUAGE: JavaScript
CODE:
```
var f = d3.format(".0s");
f(1e3); // "1k"
f(1e4); // "10k"
f(1e5); // "100k"
f(1e6); // "1M"
```

----------------------------------------

TITLE: Setting Diverging Scale Range in D3.js
DESCRIPTION: Sets the three-element output range for the diverging scale using an array. D3 converts this array into a piecewise interpolator internally. This method provides a convenient way to define the output values corresponding to the scale's domain extremes and midpoint.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const color = d3.scaleDiverging().range(["blue", "white", "red"]);
```

----------------------------------------

TITLE: Configuring D3 geoAlbers Projection JavaScript
DESCRIPTION: This snippet provides the configuration for the D3 Albers projection, which is a U.S.-centric conic equal-area projection. It sets the scale relative to the defined width and translates the map to the center of the container.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/conic.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
d3.geoAlbers().scale(1300 / 975 * width * 0.8).translate([width / 2, height / 2])
```

----------------------------------------

TITLE: Configuring D3 Arc Generator for Canvas JavaScript
DESCRIPTION: This snippet demonstrates how to create a D3 arc generator (`d3.arc`) and configure its radii and rendering context. By setting the `context` property to a `CanvasRenderingContext2D`, the generator will render the arc path directly to the canvas instead of returning an SVG path string.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_51

LANGUAGE: JavaScript
CODE:
```
var arc = d3.arc()
    .outerRadius(radius - 10)
    .innerRadius(0)
    .context(context);
```

----------------------------------------

TITLE: Creating Ordinal Scale for Fill Symbols (JavaScript)
DESCRIPTION: Creates a D3 ordinal scale with a range populated by the array of symbol types intended for filling, d3.symbolsFill. This scale can be used to map categorical data to different symbol shapes for visualizations.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_14

LANGUAGE: javascript
CODE:
```
const symbolType = d3.scaleOrdinal(d3.symbolsFill);
```

----------------------------------------

TITLE: Configuring D3 geoAlbersUsa Projection JavaScript
DESCRIPTION: This snippet shows the configuration for the D3 Albers USA composite projection, specifically designed for the United States including Alaska and Hawaii. It sets the scale and translation for the combined projection, noting that some standard projection methods are not available.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/conic.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
d3.geoAlbersUsa().scale(1300 / 975 * width * 0.8).translate([width / 2, height / 2])
```

----------------------------------------

TITLE: Creating D3 Bisector with Accessor (JavaScript)
DESCRIPTION: Creates a new bisector function using an accessor. This bisector will use the `Date` property of objects within the array for comparison during bisection. It's used for arrays of objects where the sorting key is a property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const bisector = d3.bisector((d) => d.Date);
```

----------------------------------------

TITLE: Finding Minimum Element Index - d3.scan - JavaScript
DESCRIPTION: This snippet initializes an array of objects and then uses the new `d3.scan` method with a custom comparator function to find the index of the element with the minimum 'value'. It demonstrates how the returned index can be used to access the corresponding element from the original array.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
var data = [
  {name: "Alice", value: 2},
  {name: "Bob", value: 3},
  {name: "Carol", value: 1},
  {name: "Dwayne", value: 5}
];

var i = d3.scan(data, function(a, b) { return a.value - b.value; }); // 2
data[i]; // {name: "Carol", value: 1}
```

----------------------------------------

TITLE: Set D3 Bin Thresholds (Freedman-Diaconis) (JS)
DESCRIPTION: Configures the bin generator to use the Freedman-Diaconis rule (`d3.thresholdFreedmanDiaconis`) to automatically calculate the number of bins based on the input values' interquartile range. This method is suitable for numerical data and helps mitigate the influence of outliers.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const bin = d3.bin().thresholds(d3.thresholdFreedmanDiaconis);
```

----------------------------------------

TITLE: Rounding Decimal with Precision Javascript
DESCRIPTION: Illustrates formatting a decimal number (4.2) using `d3.format(".1")` (shorthand for `~g` with precision 1). The number is rounded to one significant digit ("4"). Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_19

LANGUAGE: javascript
CODE:
```
d3.format(".1")(4.2) // "4"
```

----------------------------------------

TITLE: Modifying Opacity and Formatting as RGBA String D3 JavaScript
DESCRIPTION: Sets the opacity property of a color object. Like the previous snippet, it then uses string concatenation to implicitly call toString and get the RGBA string representation including the new opacity.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_3

LANGUAGE: javascript
CODE:
```
c.opacity = 0.8;\nc + ""; // rgba(198, 45, 205, 0.8)
```

----------------------------------------

TITLE: Creating Time Parser (D3 v4.x JavaScript)
DESCRIPTION: This snippet demonstrates the recommended way to create a time parsing function in D3 version 4.0 using the new d3.timeParse constructor. It takes a format string as an argument and returns a function that can parse strings into Date objects according to the specified format. This replaces the deprecated '.parse' method from v3.x. Dependencies include the d3-time-format module.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_58

LANGUAGE: javascript
CODE:
```
var parseTime = d3.timeParse("%c");
```

----------------------------------------

TITLE: Adding Multiple Event Listeners with D3 v4 selection.on (JavaScript)
DESCRIPTION: Demonstrates the use of the D3 v4 `selection.on` method to attach multiple event listeners simultaneously to the selected elements. Event type names (like "mousedown" and "touchstart") can be provided as a single whitespace-separated string, simplifying the binding of common interaction events. The callback function receives the event type via `d3.event.type`.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_50

LANGUAGE: javascript
CODE:
```
selection.on("mousedown touchstart", function() {
  console.log(d3.event.type);
});
```

----------------------------------------

TITLE: Calculating Set Difference - D3.js - JavaScript
DESCRIPTION: This snippet demonstrates how to use the `d3.difference` function to find the set difference between iterables. It returns a new `InternSet` containing elements from the first iterable that are not present in any subsequent iterables. The example shows finding the difference between `[0, 1, 2, 0]` and `[1]`, resulting in a set `{0, 2}`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sets.md#_snippet_0

LANGUAGE: javascript
CODE:
```
d3.difference([0, 1, 2, 0], [1]) // Set {0, 2}
```

----------------------------------------

TITLE: Creating Format Prefix Function Javascript
DESCRIPTION: Demonstrates how to use `d3.formatPrefix` to create a formatter that applies a consistent SI prefix based on a reference value (here, 1e-6 for micro) and formats the number in fixed-point notation. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const f = d3.formatPrefix(",.0", 1e-6);
```

----------------------------------------

TITLE: Iterating Over D3 Selection Elements - JavaScript
DESCRIPTION: Demonstrates using a standard JavaScript `for...of` loop to iterate directly over the elements within a D3 selection. This is possible because D3 selections implement the iterable protocol. Requires a D3 selection object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#_snippet_7

LANGUAGE: javascript
CODE:
```
for (const element of selection) {
  console.log(element);
}
```

----------------------------------------

TITLE: Formatting Negative Numbers with Parentheses - D3.js - JavaScript
DESCRIPTION: Illustrates the new `(` sign option within `d3.format` specifiers for formatting negative numbers using parentheses instead of a minus sign. It also demonstrates how this option combines with the explicit plus sign (`+`) and currency symbols (`$`).
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_23

LANGUAGE: JavaScript
CODE:
```
d3.format("-.0f")(-42);  // "-42"
d3.format("(.0f")(-42);  // "(42)"
d3.format("+$.0f")(-42); // "-$42"
d3.format("($.0f")(-42); // "($42)"
```

----------------------------------------

TITLE: Parsing Custom Delimited String into Objects JavaScript
DESCRIPTION: Demonstrates parsing a string with a custom delimiter by creating a specific parser instance using `d3.dsvFormat`. The `parse` method is then used, assuming a header row and returning an array of objects and a `columns` property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_4

LANGUAGE: javascript
CODE:
```
d3.dsvFormat("|").parse("foo|bar\n1|2")) // [{foo: "1", bar: "2"}, columns: ["foo", "bar"]]
```

----------------------------------------

TITLE: Map Iterable with D3.js (Set Example)
DESCRIPTION: Shows how `d3.map` can transform elements from any iterable (not just arrays) by applying a mapper function to each element. It returns a new array containing the transformed values.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#_snippet_10

LANGUAGE: javascript
CODE:
```
d3.map(new Set([0, 2, 3, 4]), (d) => d & 1) // [0, 0, 1, 0]
```

----------------------------------------

TITLE: Aligning Sign and Symbol with Padding - D3.js - JavaScript
DESCRIPTION: Demonstrates the new `=` alignment option in `d3.format`. Unlike standard right alignment (`>`), which includes the sign or parentheses within the padded width, the `=` option places the sign or symbol outside the padding, right-aligning only the numeric value within the specified width.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_24

LANGUAGE: JavaScript
CODE:
```
d3.format(">6d")(-42);  // "   -42"
d3.format("=6d")(-42);  // "-   42"
d3.format(">(6d")(-42); // "  (42)"
d3.format("=(6d")(-42); // "(  42)"
```

----------------------------------------

TITLE: Filter Iterable with D3.js (Set Example)
DESCRIPTION: Shows how `d3.filter` can filter elements from any iterable (not just arrays) based on a test function. It returns a new array containing only the elements that pass the test.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#_snippet_9

LANGUAGE: javascript
CODE:
```
d3.filter(new Set([0, 2, 3, 4]), (d) => d & 1) // [3]
```

----------------------------------------

TITLE: Applying Fixed Precision to Format D3.js JavaScript
DESCRIPTION: Shows how to use `precisionFixed` to determine the precision for a fixed-point format string dynamically. It calculates the precision based on a step value and constructs the format string using the result.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_26

LANGUAGE: javascript
CODE:
```
const p = d3.precisionFixed(0.5);
const f = d3.format("." + p + "f");
f(1);   // "1.0"
f(1.5); // "1.5"
f(2);   // "2.0"
```

----------------------------------------

TITLE: Interpolating Objects in D3 v4.0 (JavaScript)
DESCRIPTION: Shows the updated behavior of d3.interpolateObject in D3 version 4.0. Properties present in the start object 'a' but not in the end object 'b' are now ignored, resulting in the interpolated object matching the structure of 'b' at t=1.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_32

LANGUAGE: JavaScript
CODE:
```
d3.interpolateObject({foo: 2, bar: 1}, {foo: 3})(0.5); // {foo: 2.5} in 4.0
```

----------------------------------------

TITLE: Creating RGB Basis Spline Interpolator in D3.js
DESCRIPTION: Returns a uniform nonrational B-spline interpolator that transitions smoothly through the specified array of colors (e.g., ["purple", "green", "orange"]) in the RGB color space. Colors are converted to RGB. The interpolator returns the first color at t=0 and the last at t=1, providing smooth interpolation over t in [0,1].
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_1

LANGUAGE: javascript
CODE:
```
d3.interpolateRgbBasis(["purple", "green", "orange"])
```

----------------------------------------

TITLE: Initializing D3 forceRadial Position Force
DESCRIPTION: Creates a new position force towards a circle. This force pushes nodes towards the closest point on a circle defined by the specified radius and center coordinates. It is typically added to a D3 force simulation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/position.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const radial = d3.forceRadial(r, width / 2, height / 2);
```

----------------------------------------

TITLE: Removing Force from D3 Simulation (JS)
DESCRIPTION: Shows how to remove a previously added force from a D3 force simulation. This is achieved by calling `simulation.force()` with the name of the force to remove and passing `null` as the second argument.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/simulation.md#_snippet_2

LANGUAGE: js
CODE:
```
simulation.force("charge", null);
```

----------------------------------------

TITLE: Formatting with Custom Fill and Centering Javascript
DESCRIPTION: Shows how to format a number centered within a field of width 20, using '.' as the fill character, via the `d3.format(".^20")` specifier. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_5

LANGUAGE: javascript
CODE:
```
d3.format(".^20")(42) // dot-filled and centered, ".........42........."
```

----------------------------------------

TITLE: Configuring D3 Stack Offset Silhouette - JavaScript
DESCRIPTION: This snippet applies the `d3.stackOffsetSilhouette` offset to a D3 stack. This offset centers the streamgraph around the zero baseline, shifting the entire stack vertically so its visual center is aligned with zero. It is set using the `.offset()` method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_23

LANGUAGE: javascript
CODE:
```
const stack = d3.stack().offset(d3.stackOffsetSilhouette);
```

----------------------------------------

TITLE: Invoking dispatch Callbacks from Native Event with dispatch.apply in JavaScript
DESCRIPTION: This snippet shows how to use `dispatch.apply()` within a native DOM event handler (`selection.on("click", ...)`). It invokes the "custom" event callbacks, preserving the `this` context (`this`) and arguments (`arguments`) from the native event handler, mimicking `Function.prototype.apply`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dispatch.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
selection.on("click", function() {
  dispatch.apply("custom", this, arguments);
});
```

----------------------------------------

TITLE: Generate UTC Time Ticks with D3.js
DESCRIPTION: Uses d3.utcTicks to generate an array of Date objects at approximately 'count' regular UTC intervals between 'start' and 'stop'. It considers various standard UTC intervals to find the best fit.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_19

LANGUAGE: javascript
CODE:
```
const start = new Date("1970-03-01");
const stop = new Date("1996-03-19");
const count = 4;
const ticks = d3.utcTicks(start, stop, count); // [1975-01-01, 1980-01-01, 1985-01-01, 1990-01-01, 1995-01-01]
```

----------------------------------------

TITLE: Setting D3.js Symbol Size (JavaScript)
DESCRIPTION: Creates a new d3.symbol() generator instance and sets its size to a fixed value of 100 square pixels using the .size() method. The size determines the area of the generated symbol.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const symbol = d3.symbol().size(100);
```

----------------------------------------

TITLE: Formatting Date with d3.utcFormat in JavaScript
DESCRIPTION: Demonstrates how to create a UTC date formatter using a specifier string and apply it to a Date object to get a human-readable string representation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const formatTime = d3.utcFormat("%B %d, %Y");
formatTime(new Date()); // "May 31, 2023"
```

----------------------------------------

TITLE: Sorting an Iterable using d3.sort (Default) - JavaScript
DESCRIPTION: This snippet demonstrates using the d3.sort function with a Set iterable and the default ascending comparator. It returns a new array containing the elements from the iterable sorted in natural ascending order without modifying the original iterable.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
d3.sort(new Set([0, 2, 3, 1]))
```

----------------------------------------

TITLE: Formatting Color as Hexadecimal RGBA String D3 JavaScript
DESCRIPTION: Formats the color instance as a hexadecimal RGBA string representation (including alpha channel) using the formatHex8() method. Returns a displayable color's hex8 code if the original color was not displayable.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_12

LANGUAGE: javascript
CODE:
```
d3.color("steelblue").formatHex8() // "#4682b4ff"
```

----------------------------------------

TITLE: Defining Custom Locale Javascript
DESCRIPTION: Shows how to define a custom locale object using `d3.formatLocale` by providing configuration for thousands separators, grouping, and currency symbols. This locale object can then be used to create locale-specific formatters. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const enUs = d3.formatLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
```

----------------------------------------

TITLE: Manipulating HSL and Formatting as RGB String D3 JavaScript
DESCRIPTION: Modifies the hue and saturation channels of an HSL color object directly. It then implicitly calls the toString method (which defaults to formatRgb) to get the color's RGB string representation after manipulation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_2

LANGUAGE: javascript
CODE:
```
c.h += 90;\nc.s += 0.2;\nc + ""; // rgb(198, 45, 205)
```

----------------------------------------

TITLE: Formatting Color as HSL/HSLA String D3 JavaScript
DESCRIPTION: Formats the color instance as a CSS HSL or HSLA string representation using the formatHsl() method. If the color is not displayable, S and L values are clamped.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_13

LANGUAGE: javascript
CODE:
```
d3.color("yellow").formatHsl() // "hsl(60, 100%, 50%)"
```

----------------------------------------

TITLE: Setting Y-coordinate Accessor (quadtree.y) - JavaScript
DESCRIPTION: Sets the function used to derive the y-coordinate from a data point when adding or removing data. The function takes a data point as input and should return its y-coordinate.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const tree = d3.quadtree().y((d) => d.y);
```

----------------------------------------

TITLE: Setting Outer Radius Accessor for D3 Radial Area (JavaScript)
DESCRIPTION: Sets the outer radius accessor function. This function is invoked for each data point to determine the radius for the outer edge of the area, commonly used with `innerRadius` to create annular areas.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const area = d3.areaRadial().radius((d) => r(d.high));
```

----------------------------------------

TITLE: Expanding Quadtree Extent to Cover Points (quadtree.cover) - JavaScript
DESCRIPTION: Expands the quadtree's bounding box to ensure it includes the specified point (x, y). The extent is repeatedly doubled if necessary to contain the point.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
const tree = d3.quadtree().cover(0, 0).cover(1, 1);
```

----------------------------------------

TITLE: Setting Radius Accessor for D3 Radial Area (JavaScript)
DESCRIPTION: Sets the radius accessor function for the radial area generator. This function is invoked for each data point to determine its radius (distance from the origin). It replaces the y-accessor used in Cartesian area generators.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const area = d3.areaRadial().radius((d) => r(d.temperature));
```

----------------------------------------

TITLE: Setting D3 Radial Line Angle Accessor (JavaScript)
DESCRIPTION: This snippet creates a radial line generator and sets its angle accessor using the .angle() method. The accessor function receives a data point (d) and should return the angle in radians, similar to the x-accessor for a Cartesian line.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const line = d3.lineRadial().angle((d) => a(d.Date));
```

----------------------------------------

TITLE: Interpolating Generic Values with Colors (D3.js)
DESCRIPTION: This snippet demonstrates using the generic d3.interpolate function to interpolate between two string values representing colors ("red" and "blue"). The function returns an interpolator that, when evaluated at a parameter t (here 0.5), returns the interpolated color value. The result is the RGB representation of the color halfway between red and blue.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_0

LANGUAGE: js
CODE:
```
d3.interpolate("red", "blue")(0.5) // "rgb(128, 0, 128)"
```

----------------------------------------

TITLE: Initializing D3 and Dimensions (JavaScript)
DESCRIPTION: Imports the D3 library for data visualization and geographic projections, imports a custom Vue component for rendering the map, and defines constants for the width and height of the visualization container. This setup is typical for using D3 within a Vue component.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/azimuthal.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import * as d3 from "d3";
import WorldMap from "../components/WorldMap.vue";

const width = 688;
const height = 400;
```

----------------------------------------

TITLE: Default D3 Hierarchy Children Accessor (JavaScript)
DESCRIPTION: This is the default function used by `d3.hierarchy` to identify the children of a node's data object. It simply returns the array found in the `children` property of the data object. This function is used automatically if a custom children accessor is not provided.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
function children(d) {
  return d.children;
}
```

----------------------------------------

TITLE: Setting Canvas Context for GeoPath
DESCRIPTION: Obtains a 2D rendering context from a HTML `<canvas>` element and then sets this context on a new `d3.geoPath()` generator using the `.context()` method. When this generator is used with a GeoJSON object, it will render the geometry directly onto the canvas instead of generating an SVG path string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const context = canvas.getContext("2d");
const path = d3.geoPath().context(context);
```

----------------------------------------

TITLE: Formatting Data to CSV with Specified Columns JavaScript
DESCRIPTION: Formats an array of objects into a CSV string using `d3.csvFormat`, specifying the exact list of column names to include in the output. Only the data for the specified columns will be present in the output string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_9

LANGUAGE: javascript
CODE:
```
d3.csvFormat([{foo: "1", bar: "2"}], ["foo"]) // "foo\n1"
```

----------------------------------------

TITLE: Set Piecewise Linear Scale Domain and Range - D3.js JavaScript
DESCRIPTION: Specifying more than two values for the domain and range creates a piecewise scale. D3 performs a binary search to find the correct segment for interpolation. The domain must be in ascending or descending order.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const color = d3.scaleLinear([-1, 0, 1], ["red", "white", "green"]);
color(-0.5); // "rgb(255, 128, 128)"
color(+0.5); // "rgb(128, 192, 128)"
```

----------------------------------------

TITLE: Setting D3 Stack Value Accessor (JavaScript)
DESCRIPTION: This snippet shows how to set the value accessor for a D3 stack generator. The value accessor is a function that determines the numeric value for each data point within a specific key's series.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const stack = d3.stack().value((d, key) => d[key]);
```

----------------------------------------

TITLE: Nicing Log Scale Domain D3 JavaScript
DESCRIPTION: Creates a D3 logarithmic scale and applies the `.nice()` method to extend its domain to the nearest integer powers of the base. For an initial domain like `[0.201479, 0.996679]`, `.nice()` adjusts it to a cleaner domain like `[0.1, 1]`. This makes axis labels more readable.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/log.md#_snippet_4

LANGUAGE: js
CODE:
```
const x = d3.scaleLog([0.201479, 0.996679], [0, 960]).nice();
x.domain(); // [0.1, 1]
```

----------------------------------------

TITLE: Setting D3 Area Y Accessor - Javascript
DESCRIPTION: Sets the y accessor for the area generator. This method sets both y0 to the specified value/function and y1 to null, typically used for vertically-oriented areas.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const area = d3.area().y((d) => y(d.Date));
```

----------------------------------------

TITLE: Calculating Set Union - D3.js - JavaScript
DESCRIPTION: This snippet illustrates the use of the `d3.union` function to compute the set union of multiple iterables. It returns a new `InternSet` containing all unique elements found across the input iterables. The example shows the union of `[0, 2, 1, 0]` and `[1, 3]`, yielding `{0, 2, 1, 3}`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sets.md#_snippet_1

LANGUAGE: javascript
CODE:
```
d3.union([0, 2, 1, 0], [1, 3]) // Set {0, 2, 1, 3}
```

----------------------------------------

TITLE: Creating Ordinal Scale for Stroke Symbols (JavaScript)
DESCRIPTION: Creates a D3 ordinal scale with a range populated by the array of symbol types intended for stroking, d3.symbolsStroke. This scale can be used to map categorical data to different symbol shapes for visualizations where only the outline is drawn.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_15

LANGUAGE: javascript
CODE:
```
const symbolType = d3.scaleOrdinal(d3.symbolsStroke);
```

----------------------------------------

TITLE: Accessing Indexed Data by Key with D3.js (JavaScript)
DESCRIPTION: This code demonstrates how to retrieve a data point from the InternMap created by `d3.index` using a specific date as the key. It gets the object associated with the date "2013-12-31" and then accesses its `Close` property. The comment indicates the expected closing price value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_11

LANGUAGE: javascript
CODE:
```
aaplDate.get(new Date("2013-12-31")).Close // 80.145714
```

----------------------------------------

TITLE: Accessing Nested Rolled-Up Count from D3.js InternMap (JavaScript)
DESCRIPTION: This snippet demonstrates how to access a reduced value from a nested InternMap created by `d3.rollup` with multiple keys. It retrieves the nested map for the "Adelie" species and then accesses the count associated with the "FEMALE" sex within that nested map. The comment indicates the expected output is the number 73.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_8

LANGUAGE: javascript
CODE:
```
speciesSexCount.get("Adelie").get("FEMALE") // 73
```

----------------------------------------

TITLE: Calculating Projected Planar Bounding Box
DESCRIPTION: Calls the `.bounds()` method on a geographic path generator with a GeoJSON object. It returns a 2D array `[[x₀, y₀], [x₁, y₁]]` representing the minimum and maximum projected coordinates of the object, useful for tasks like zooming.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_5

LANGUAGE: javascript
CODE:
```
path.bounds(california) // [[18.48513821663947, 159.95146883594333], [162.7651668852596, 407.09641570706725]]
```

----------------------------------------

TITLE: Constructing HSL Color in D3.js (JavaScript)
DESCRIPTION: Constructs a new HSL color instance from a CSS Color Module Level 3 specifier string. The returned object exposes the HSL channel values (h, s, l) and opacity as properties. This is a common way to create a color object for further manipulation or conversion.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_18

LANGUAGE: js
CODE:
```
d3.hsl("yellow") // {h: 60, s: 1, l: 0.5, opacity: 1}
```

----------------------------------------

TITLE: Interpolating CSS Transforms with D3.js - Javascript
DESCRIPTION: This snippet demonstrates how to use `d3.interpolateTransformCss` to create an interpolator between two CSS 2D transform strings. It then evaluates the interpolator at `0.5` to get the intermediate transform string. This function requires the D3.js library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/transform.md#_snippet_0

LANGUAGE: javascript
CODE:
```
d3.interpolateTransformCss("translateY(12px) scale(2)", "translateX(30px) rotate(5deg)")(0.5) // "translate(15px,6px) rotate(2.5deg) scale(1.5,1.5)"
```

----------------------------------------

TITLE: Interpolating SVG Transforms with D3.js - Javascript
DESCRIPTION: This snippet illustrates the use of `d3.interpolateTransformSvg` to generate an interpolator between two SVG 2D transform strings. The interpolator calculates intermediate transform states by decomposing the start and end transforms. This function requires the D3.js library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/transform.md#_snippet_1

LANGUAGE: javascript
CODE:
```
d3.interpolateTransformSvg("skewX(-60)", "skewX(60) translate(280,0)") // "translate(140,0) skewX(0)"
```

----------------------------------------

TITLE: Setting Interpolator for Sequential Scale in D3.js (JS)
DESCRIPTION: Sets the output interpolator function for an existing sequential scale. This function will be invoked with normalized domain values (typically 0-1) to produce the output.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#_snippet_5

LANGUAGE: js
CODE:
```
const color = d3.scaleSequential().interpolator(d3.interpolateBlues);
```

----------------------------------------

TITLE: Counting Days Accurately with d3.timeDay.count (JavaScript)
DESCRIPTION: This snippet demonstrates how to correctly count the number of full days between two date objects (`start` and `end`) using the `d3.timeDay.count()` method from the d3-time library. Unlike simple subtraction, this method properly accounts for calendar boundaries and irregularities, yielding the accurate integer count of 31 days.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_1

LANGUAGE: javascript
CODE:
```
d3.timeDay.count(start, end) // 31 😌
```

----------------------------------------

TITLE: Creating Fixed SI Prefix Formatter - D3.js - JavaScript
DESCRIPTION: Demonstrates the usage of `d3.formatPrefix` to generate a formatting function. This function applies a single, consistent SI prefix ('k' for thousands in this example), determined by a reference value (1e3), across different input numbers for uniform scaling representation.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_21

LANGUAGE: JavaScript
CODE:
```
var f = d3.formatPrefix(",.0", 1e3);
f(1e3); // "1k"
f(1e4); // "10k"
f(1e5); // "100k"
f(1e6); // "1,000k"
```

----------------------------------------

TITLE: Drawing Circle using CanvasPathMethods Context (JavaScript)
DESCRIPTION: A generic JavaScript function designed to draw a circle. It accepts a context object that implements the CanvasPathMethods API, allowing it to be used with either a standard Canvas 2D context or a D3 path serializer.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_34

LANGUAGE: JavaScript
CODE:
```
function drawCircle(context, radius) {
  context.moveTo(radius, 0);
  context.arc(0, 0, radius, 0, 2 * Math.PI);
}
```

----------------------------------------

TITLE: Calculating Ranks with Accessor - D3.js JavaScript
DESCRIPTION: Shows how to use `d3.rank` with an accessor to determine the rank of each object based on its `x` property. It illustrates how missing or non-numeric values (like the empty object `{}`) result in a rank of `NaN`. The output is an array of ranks corresponding to the input array elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
d3.rank([{x: 1}, {}, {x: 2}, {x: 0}], d => d.x); // [1, NaN, 2, 0]
```

----------------------------------------

TITLE: Setting Rounded D3 Band Scale Range (JS)
DESCRIPTION: A convenience method, `.rangeRound()`, that sets the output range and simultaneously enables rounding. Rounding ensures that the start and stop positions of bands are integers, which can help prevent antialiasing artifacts.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const x = d3.scaleBand().rangeRound([0, 960]);
```

----------------------------------------

TITLE: Interpolating and Rounding Numbers (D3.js)
DESCRIPTION: This snippet demonstrates d3.interpolateRound, which interpolates between two numbers (20 and 620) similarly to interpolateNumber but rounds the result to the nearest integer. Evaluating the interpolator at t = 0.821 yields approximately 513.06, which is rounded to 513.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_2

LANGUAGE: js
CODE:
```
d3.interpolateRound(20, 620)(0.821) // 513
```

----------------------------------------

TITLE: Creating D3 Orthographic Projection (JavaScript)
DESCRIPTION: Configures a D3 orthographic projection, simulating the view of a globe from a distant point in space. It sets the rotation to [110, -40], fits the projection extent to the defined width and height minus borders, specifying the source object as a 'Sphere', and sets the precision to 0.2 degrees.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/azimuthal.md#_snippet_4

LANGUAGE: javascript
CODE:
```
d3.geoOrthographic().rotate([110, -40]).fitExtent([[1, 1], [width - 1, height - 1]], {type: "Sphere"}).precision(0.2)
```

----------------------------------------

TITLE: Setting D3 Radial Line Curve Interpolation (JavaScript)
DESCRIPTION: This snippet creates a radial line generator and sets its curve interpolation method using the .curve() method. The example uses d3.curveBasis for a B-spline curve. Note that monotonic curve types are not suitable for radial lines.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const line = d3.lineRadial().curve(d3.curveBasis);
```

----------------------------------------

TITLE: Setting Axis Pixel Offset D3.js JavaScript
DESCRIPTION: Sets a pixel offset for the D3.js axis using the `offset()` method. This offset is added to the computed pixel location of the axis based on the scale's range and alignment. The example sets the offset to 0. This is sometimes used for fine-tuning alignment or ensuring crisp edges on certain displays, and returns the axis instance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_27

LANGUAGE: javascript
CODE:
```
const axis = d3.axisBottom(x).offset(0);
```

----------------------------------------

TITLE: Getting Domain Extent for Range Value (JavaScript)
DESCRIPTION: Demonstrates using the invertExtent method on a quantize scale. For a given value from the range (e.g., 2), it returns the continuous domain extent [x0, x1] that maps to that specific range value. This method is useful for interactive applications where you need to determine the input domain corresponding to an output value or screen position.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const width = d3.scaleQuantize([10, 100], [1, 2, 4]);
width.invertExtent(2); // [40, 70]
```

----------------------------------------

TITLE: Creating HTML Element - D3.js - JavaScript
DESCRIPTION: Shows how `d3.create()` defaults to the HTML namespace if no prefix is given and the name is not a known shorthand. This creates a detached HTML element with the tag name "g", which is typically treated as an unknown element by browsers. Returns a single-element selection containing the new element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_26

LANGUAGE: JavaScript
CODE:
```
d3.create("g") // an HTML G (unknown) element
```

----------------------------------------

TITLE: Getting Neighbor Points in Delaunay Triangulation JS/Vue
DESCRIPTION: This snippet shows how to use the `delaunay.neighbors(i)` method to get an iterable of indexes for points neighboring the point at index `i`. It also demonstrates displaying the result, converted to an array (`neighborsState.N`), in a Vue template.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#_snippet_6

LANGUAGE: js-vue
CODE:
```
delaunay.neighbors({{neighborsState.i}}) // [{{neighborsState.N.join(", ")}}]
```

----------------------------------------

TITLE: Using tickArguments with Linear Scale
DESCRIPTION: This JavaScript snippet demonstrates using the `.tickArguments()` method with an array to specify both the suggested tick count and a format specifier for a linear scale.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_14

LANGUAGE: javascript
CODE:
```
axis.tickArguments([20, "s"]);
```

----------------------------------------

TITLE: Applying Fixed Precision Example 2 D3.js JavaScript
DESCRIPTION: Another example illustrating how `precisionFixed` determines precision based on the input step size, resulting in zero decimal places when the step is 1.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_27

LANGUAGE: javascript
CODE:
```
const p = d3.precisionFixed(1);
const f = d3.format("." + p + "f");
f(1); // "1"
f(2); // "2"
f(3); // "3"
```

----------------------------------------

TITLE: Using d3.ascending with Array.prototype.sort - JavaScript
DESCRIPTION: This snippet demonstrates how to use the d3.ascending comparator function with the native JavaScript Array.prototype.sort method to sort an array of numbers in ascending order. It takes an array of numbers and applies the sort method, resulting in the numbers being ordered from smallest to largest.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
[39, 21, 1, 104, 22].sort(d3.ascending)
```

----------------------------------------

TITLE: Default d3.stratify id Accessor JavaScript
DESCRIPTION: Provides the default implementation of the id accessor used by d3.stratify if a custom accessor is not specified. It simply returns the value of the 'id' property from the input datum (d).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#_snippet_5

LANGUAGE: javascript
CODE:
```
function id(d) {
  return d.id;
}
```

----------------------------------------

TITLE: Generate Adjacent Pairs with D3.js
DESCRIPTION: Shows `d3.pairs` creating an array of adjacent element pairs from the input iterable. It iterates through the iterable, generating a pair for each element with its subsequent element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#_snippet_4

LANGUAGE: javascript
CODE:
```
d3.pairs([1, 2, 3, 4]) // [[1, 2], [2, 3], [3, 4]]
```

----------------------------------------

TITLE: Generating a Specific D3.js Symbol in SVG (JavaScript)
DESCRIPTION: Appends an SVG <path> element to the document and sets its 'd' attribute to the path data generated by a d3.symbol() instance configured with the d3.symbolCross type. This requires an existing 'svg' selection to append the path to.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_0

LANGUAGE: javascript
CODE:
```
svg.append("path").attr("d", d3.symbol(d3.symbolCross));
```

----------------------------------------

TITLE: Calculating Polygon Area JavaScript
DESCRIPTION: Demonstrates calculating the signed area of a given polygon using `d3.polygonArea`. The sign indicates the polygon's winding order (counterclockwise is positive assuming a top-left origin). It takes a polygon (array of points) as input and returns the area as a number.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-polygon.md#_snippet_1

LANGUAGE: javascript
CODE:
```
d3.polygonArea([[1, 1], [1.5, 0], [2, 1]]) // -0.5
```

----------------------------------------

TITLE: Creating Strict ISO 8601 UTC Parser in JavaScript
DESCRIPTION: Illustrates how to create a strict parser for the ISO 8601 UTC format using `d3.utcParse` with a specific specifier. This provides more stringent validation than the default `d3.isoParse`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const strictIsoParse = d3.utcParse("%Y-%m-%dT%H:%M:%S.%LZ");
```

----------------------------------------

TITLE: Initializing Quantize Scale with Range (JavaScript)
DESCRIPTION: Creates a D3 quantize scale using the default domain [0, 1] and a specified discrete range of 9 colors from d3.schemeBlues. If the domain is not provided, it defaults to [0, 1]; providing just the range is a shortcut for this specific default case. Requires the d3-scale and d3-scale-chromatic modules.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const color = d3.scaleQuantize(d3.schemeBlues[9]);
```

----------------------------------------

TITLE: Calling path.arc Method - d3-path JavaScript
DESCRIPTION: Demonstrates the `arc` method, drawing a circular arc segment with the specified center (80, 80), radius 70, start angle 0, and end angle 2*PI (a full circle). If the current point isn't the arc start, a line is drawn first. Corresponds to SVG "A" commands.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#_snippet_8

LANGUAGE: javascript
CODE:
```
path.arc(80, 80, 70, 0, Math.PI * 2);
```

----------------------------------------

TITLE: Setting Diverging Scale Interpolator in D3.js
DESCRIPTION: Sets the interpolator function for an existing diverging scale. The interpolator is a function that accepts a value, typically in the normalized range [0, 1], and returns the corresponding output value (e.g., a color). This method allows dynamic updates to the scale's output mapping.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const color = d3.scaleDiverging().interpolator(d3.interpolateRdBu);
```

----------------------------------------

TITLE: Creating Threshold Scale with Domain/Range - D3 - JavaScript
DESCRIPTION: Initializes a D3 threshold scale named `color`. It maps values less than 0 to "red", values between 0 and 1 (inclusive of 0, exclusive of 1) to "white", and values 1 and greater to "blue". Requires the D3 library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const color = d3.scaleThreshold([0, 1], ["red", "white", "blue"]);
```

----------------------------------------

TITLE: Permuting Object Properties using d3.permute - JavaScript
DESCRIPTION: This snippet demonstrates using d3.permute with an object as the source and an array of property names as keys. It extracts the values corresponding to the specified keys from the object and returns them as a new array in the order of the keys.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
d3.permute(object, ["site", "variety", "yield"])
```

----------------------------------------

TITLE: Formatting to Exponent Notation Javascript
DESCRIPTION: Shows that when using `d3.format(".1")` (shorthand for `~g` with precision 1), an integer like 42 is formatted using exponent notation ("4e+1") because the result would otherwise exceed the specified precision in decimal form. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_18

LANGUAGE: javascript
CODE:
```
d3.format(".1")(42) // "4e+1"
```

----------------------------------------

TITLE: Converting Color to HSL d3.hsl JavaScript
DESCRIPTION: Converts an existing color object (in this case, an RGB color obtained previously) into the HSL color space using the d3.hsl constructor function.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_1

LANGUAGE: javascript
CODE:
```
c = d3.hsl(c); // {h: 207.27…, s: 0.44, l: 0.4902…, opacity: 1}
```

----------------------------------------

TITLE: Preparing Hierarchy with Treemap (Chaining) (JavaScript)
DESCRIPTION: Shows an alternative method-chaining approach for configuring a treemap layout and preparing the hierarchy node. It combines setting layout parameters, summing and sorting the node, applying the layout, and getting descendants into a single fluent expression. This requires the D3.js and D3-Hierarchy libraries.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
d3.treemap()
    .size([width, height])
    .padding(2)
  (root
      .sum((d) => d.value)
      .sort((a, b) => b.height - a.height || b.value - a.value))
  .descendants()
```

----------------------------------------

TITLE: Shuffling an Array using d3.shuffle - JavaScript
DESCRIPTION: This snippet shows how to use d3.shuffle to randomly reorder the elements of an array in-place using the Fisher–Yates shuffle algorithm. The function modifies the original array and returns it.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
d3.shuffle([..."abcdefg"])
```

----------------------------------------

TITLE: Creating SVG Element - D3.js - JavaScript
DESCRIPTION: Shows how to create a detached SVG element using the `d3.create()` method with the "svg" name. D3 automatically infers the "svg" namespace for this name. Returns a single-element selection containing the new element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_23

LANGUAGE: JavaScript
CODE:
```
d3.create("svg") // equivalent to svg:svg
```

----------------------------------------

TITLE: Constructing LAB Color in D3.js (JavaScript)
DESCRIPTION: Constructs a new CIELAB color instance from a CSS Color Module Level 3 specifier string. The returned object exposes the L, a, and b channel values and opacity as properties. CIELAB is a perceptually uniform color space often used for color comparisons and manipulations.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_20

LANGUAGE: js
CODE:
```
d3.lab("red") // {l: 54.29173376861782, a: 80.8124553179771, b: 69.88504032350531, opacity: 1}
```

----------------------------------------

TITLE: Configuring D3 geoConicEquidistant Projection JavaScript
DESCRIPTION: This snippet illustrates how to configure a D3 conic equidistant projection. It includes setting parallels, rotation, scale, center, translation, clipping extent, and precision, providing an example configuration for this projection type.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/conic.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
d3.geoConicEquidistant().parallels([35, 65]).rotate([-20, 0]).scale(width * 0.55).center([0, 52]).translate([width / 2, height / 2]).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)
```

----------------------------------------

TITLE: Formatting Decimal with Precision Javascript
DESCRIPTION: Illustrates formatting a decimal number (4.2) using `d3.format(".2")` (shorthand for `~g` with precision 2). The number is displayed using decimal notation, preserving the required significant digits ("4.2"). Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_17

LANGUAGE: javascript
CODE:
```
d3.format(".2")(4.2) // "4.2"
```

----------------------------------------

TITLE: Getting D3 Band Scale Step (JavaScript)
DESCRIPTION: Returns the distance, in pixels, between the start of one band and the start of the next adjacent band using the `step()` method. This value includes the bandwidth plus the inner padding between bands.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
x.step() // 63.529411764705884
```

----------------------------------------

TITLE: Output Structure of D3 Stack Generation (JavaScript)
DESCRIPTION: This snippet illustrates the data structure returned by applying the d3.stack generator to the input data. It's an array of series, where each series is an array of points. Each point is a two-element array [lower, upper] representing the baseline and topline of the stacked segment for that series at a specific data point.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_56

LANGUAGE: javascript
CODE:
```
[
  [[   0, 3840], [   0, 1600], [   0,  640], [   0,  320]], // apples
  [[3840, 5760], [1600, 3040], [ 640, 1600], [ 320,  800]], // bananas
  [[5760, 6720], [3040, 4000], [1600, 2240], [ 800, 1440]], // cherries
  [[6720, 7120], [4000, 4400], [2240, 2640], [1440, 1840]], // dates
]
```

----------------------------------------

TITLE: Generating Filtered Date Range with Different Start using D3 timeDay every - JS
DESCRIPTION: Shows how the start date influences the result when using `every` and `range` on a time interval like `d3.timeDay`. This example starts the range from January 2, 2015, demonstrating that the resulting dates are still every second day relative to the interval's definition but starting from the first boundary after the specified start date.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_15

LANGUAGE: javascript
CODE:
```
d3.timeDay.every(2).range(new Date(2015, 0, 2), new Date(2015, 0, 8)) // [2015-01-03T00:00, 2015-01-05T00:00, 2015-01-07T00:00]
```

----------------------------------------

TITLE: Calling path.bezierCurveTo Method - d3-path JavaScript
DESCRIPTION: Demonstrates the `bezierCurveTo` method, drawing a cubic Bézier curve from the current point to (200, 200) using (200, 0) and (0, 200) as control points. Corresponds to SVG "C" commands.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#_snippet_6

LANGUAGE: javascript
CODE:
```
path.bezierCurveTo(200, 0, 0, 200, 200, 200);
```

----------------------------------------

TITLE: Configuring D3 Natural Earth 1 Projection (JS)
DESCRIPTION: Creates and configures a D3 Natural Earth 1 geographic projection. It sets the rotation to `[0, 0]`, fits the projection to a specific extent based on the component's width, and sets the precision to `0.2`. This is a pseudocylindrical projection appealing for whole-world maps.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/cylindrical.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
d3.geoNaturalEarth1().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width * 0.5 - 1]], {type: "Sphere"}).precision(0.2)
```

----------------------------------------

TITLE: Transpose Matrix with D3.js
DESCRIPTION: Shows how `d3.transpose` flips the rows and columns of a matrix (represented as an array of arrays). It essentially uses the `zip` function to group elements by their index across the inner arrays.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#_snippet_6

LANGUAGE: javascript
CODE:
```
d3.transpose([["Alice", "Bob", "Carol"], [32, 13, 14]]) // [["Alice", 32], ["Bob", 13], ["Carol", 14]]
```

----------------------------------------

TITLE: Interpolating Number Arrays (D3.js)
DESCRIPTION: This snippet demonstrates d3.interpolateNumberArray, which is specialized for interpolating between arrays containing only numbers, including typed arrays like Float64Array. It performs element-wise numeric interpolation. Evaluating at t = 0.5 between [0, 1] and Float64Array.of(1, 3) results in the array [0.5, 2].
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_6

LANGUAGE: js
CODE:
```
d3.interpolateNumberArray([0, 1], Float64Array.of(1, 3))(0.5) // [0.5, 2]
```

----------------------------------------

TITLE: Creating D3 forceCollide with Radius Accessor (JavaScript)
DESCRIPTION: Demonstrates how to create a new forceCollide instance using the d3.forceCollide() factory function and specifying a function as the radius accessor. This function is invoked for each node (d) to determine its collision radius, here using a property r on the node object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/collide.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const collide = d3.forceCollide((d) => d.r);
```

----------------------------------------

TITLE: Generating Range with d3.range - Descending
DESCRIPTION: Shows how to use d3.range with a negative step to generate a descending sequence of numbers.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_8

LANGUAGE: javascript
CODE:
```
d3.range(5, -1, -1) // [5, 4, 3, 2, 1, 0]
```

----------------------------------------

TITLE: Finding Median Index in Array - D3.js JavaScript
DESCRIPTION: Shows how to use `d3.medianIndex` to get the index corresponding to the element just left of the median in a given array. It operates similarly to `d3.median` but returns an index instead of the value. The input is an array, and the output is the zero-based index.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
d3.medianIndex([1, 2, 2, 2, NaN, 3, null]) // 2
```

----------------------------------------

TITLE: Zip Multiple Arrays with D3.js
DESCRIPTION: Shows `d3.zip` combining multiple input arrays into a single array of arrays. The i-th array in the output contains the i-th element from each of the input arrays.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#_snippet_8

LANGUAGE: javascript
CODE:
```
d3.zip(["Alice", "Bob", "Carol"], [32, 13, 14]) // [["Alice", 32], ["Bob", 13], ["Carol", 14]]
```

----------------------------------------

TITLE: Checking for Disjoint Sets - D3.js - JavaScript
DESCRIPTION: This snippet shows how to use the `d3.disjoint` function to check if two iterables share no common elements. It returns `true` if the sets are disjoint, and `false` otherwise. The example confirms that `[1, 3]` and `[2, 4]` are disjoint.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sets.md#_snippet_5

LANGUAGE: javascript
CODE:
```
d3.disjoint([1, 3], [2, 4]) // true
```

----------------------------------------

TITLE: Computing D3 Contours for Grid Data
DESCRIPTION: Shows how to use a configured contour generator (`contours`) by passing an array of input `values` (representing a grid). The generator computes the contours based on its configured size and thresholds and returns an array of GeoJSON MultiPolygon objects, which can then be used for visualization.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/contour.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const polygons = contours(grid);
```

----------------------------------------

TITLE: Formatting Non-Integers with Integer Directives - D3.js - JavaScript
DESCRIPTION: Illustrates that integer formatting directives (`b` for binary, `o` for octal, `d` for decimal, `x` for hexadecimal) in `d3.format` now round non-integer input values to the nearest integer before formatting. Previously, they would return an empty string for non-integer inputs.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
d3.format("b")(41.9); // "101010"
d3.format("o")(41.9); // "52"
d3.format("d")(41.9); // "42"
d3.format("x")(41.9); // "2a"
```

----------------------------------------

TITLE: Initializing InternMap with Date Keys in JavaScript
DESCRIPTION: Shows how to create an instance of d3.InternMap populated with initial entries. It uses Date objects as keys, which InternMap handles correctly unlike native Map due to its interning mechanism. Requires the D3 library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/intern.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const valueByDate = new d3.InternMap([
  [new Date("2021-01-01"), 42],
  [new Date("2022-01-01"), 12],
  [new Date("2023-01-01"), 45]
]);
```

----------------------------------------

TITLE: Formatting Number with Precision and Trimming - D3.js - JavaScript
DESCRIPTION: Illustrates using `d3.format` with a specified precision (here, 3). It shows how the default directive trims insignificant trailing zeros after formatting, resulting in concise string representations of numbers. The example includes formatting exact decimals and floating-point arithmetic results.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
var f = d3.format(".3");
f(0.12345);   // "0.123"
f(0.10000);   // "0.1"
f(0.1 + 0.2); // "0.3"
```

----------------------------------------

TITLE: Defining Custom D3 Force Function (JS)
DESCRIPTION: Provides an example of a basic custom force function named `force` that takes the `alpha` parameter. This specific force iterates through nodes and applies a force to their velocity (`vx`, `vy`) to pull them towards the origin (0,0), proportional to their distance and the simulation's `alpha` value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/simulation.md#_snippet_3

LANGUAGE: js
CODE:
```
function force(alpha) {
  for (let i = 0, n = nodes.length, node, k = alpha * 0.1; i < n; ++i) {
    node = nodes[i];
    node.vx -= node.x * k;
    node.vy -= node.y * k;
  }
}
```

----------------------------------------

TITLE: Importing Specific D3 Modules via ESM CDN
DESCRIPTION: This HTML snippet demonstrates how to use ES module imports to load specific D3 modules, such as those from `d3-force`, directly from a CDN. This allows developers to import only the necessary parts of the library, reducing load times.
SOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#_snippet_4

LANGUAGE: html
CODE:
```
<script type="module">

import {forceSimulation, forceCollide, forceX} from "https://cdn.jsdelivr.net/npm/d3-force@3/+esm";

const nodes = [{}, {}];
const simulation = forceSimulation(nodes)
    .force("x", forceX())
    .force("collide", forceCollide(5))
    .on("tick", () => console.log(nodes[0].x));

</script>
```

----------------------------------------

TITLE: Formatting Integer with Precision Javascript
DESCRIPTION: Shows the behavior of formatting an integer (42) using `d3.format(".2")` (shorthand for `~g` with precision 2). Since the integer itself has fewer than 2 digits before the decimal, it is displayed as is ("42"). Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_16

LANGUAGE: javascript
CODE:
```
d3.format(".2")(42) // "42"
```

----------------------------------------

TITLE: Clamping RGB Color Values with clamp() Method D3 JavaScript
DESCRIPTION: Returns a new RGB color object where the r, g, and b channel values are clamped to the valid range [0, 255] and opacity to [0, 1], and RGB values are rounded.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_17

LANGUAGE: javascript
CODE:
```
d3.rgb(300, 200, 100).clamp() // {r: 255, g: 200, b: 100, opacity: 1}
```

----------------------------------------

TITLE: Creating SVG Element Explicitly - D3.js - JavaScript
DESCRIPTION: Shows how to create a detached SVG element using `d3.create()` with the explicit "svg:svg" namespace prefix. This is a more verbose but potentially clearer way to specify the element type and namespace. Returns a single-element selection containing the new element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_24

LANGUAGE: JavaScript
CODE:
```
d3.create("svg:svg") // more explicitly
```

----------------------------------------

TITLE: Interrupting All Descendants Transitions in D3 JavaScript
DESCRIPTION: Demonstrates how to interrupt the active transition and cancel pending transitions on all descendant elements within a D3 selection. This is often necessary when interrupting transitions on complex parent elements like SVG groups (G elements) that contain multiple animating children.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/control-flow.md#_snippet_0

LANGUAGE: javascript
CODE:
```
selection.selectAll("*").interrupt();
```

----------------------------------------

TITLE: Configuring D3 Stack Order Reverse - JavaScript
DESCRIPTION: This snippet applies the `d3.stackOrderReverse` order to a D3 stack generator. This order reverses the default order of the series, stacking the last series first and the first series last. It is set using the `.order()` method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_19

LANGUAGE: javascript
CODE:
```
const stack = d3.stack().order(d3.stackOrderReverse);
```

----------------------------------------

TITLE: Calculating Projected Planar Centroid
DESCRIPTION: Invokes the `.centroid()` method on a geographic path generator, providing a GeoJSON object. The method returns the projected planar coordinates `[x, y]` of the object's centroid, useful for placing labels or symbols at the center of geographic features.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_6

LANGUAGE: javascript
CODE:
```
path.centroid(california) // [82.08679434495191, 288.14204870673404]
```

----------------------------------------

TITLE: Accessing Color Opacity Property D3 JavaScript
DESCRIPTION: Shows how to access the 'opacity' property of a d3 color object instance. The opacity is typically a value between 0 and 1.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_5

LANGUAGE: javascript
CODE:
```
d3.color("steelblue").opacity // 1
```

----------------------------------------

TITLE: Finding Left Insertion Point with D3 bisectLeft (JavaScript)
DESCRIPTION: Performs a binary search on a sorted array of primitive values (dates in this case) to find the insertion point to the left of any existing equivalent values. It returns the index `i` where all elements before `i` are strictly less than the search value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#_snippet_7

LANGUAGE: javascript
CODE:
```
d3.bisectLeft(aapl.map((d) => d.Date), new Date("2014-01-02")) // 162
```

----------------------------------------

TITLE: Finding Right Insertion Point with D3 bisectRight (JavaScript)
DESCRIPTION: Performs a binary search on a sorted array of primitive values (dates in this case) to find the insertion point to the right of any existing equivalent values. It returns the index `i` where all elements before `i` are less than or equal to the search value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#_snippet_6

LANGUAGE: javascript
CODE:
```
d3.bisectRight(aapl.map((d) => d.Date), new Date("2014-01-02")) // 163
```

----------------------------------------

TITLE: Generating Default 10° Graticule (JavaScript)
DESCRIPTION: This function demonstrates the implementation of `d3.geoGraticule10()`, a convenience method that generates a GeoJSON MultiLineString representing the default 10° global graticule. It is equivalent to creating a new graticule generator and immediately invoking it.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/shape.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function geoGraticule10() {
  return d3.geoGraticule()();
}
```

----------------------------------------

TITLE: Creating Threshold Scale with Default Domain - D3 - JavaScript
DESCRIPTION: Initializes a D3 threshold scale with a range of ["red", "blue"]. With the default domain [0.5], it maps values less than 0.5 to "red" and values 0.5 or greater to "blue". The example shows mapping 0 to "red" and 1 to "blue". Requires the D3 library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const color = d3.scaleThreshold(["red", "blue"]);
color(0); // "red"
color(1); // "blue"
```

----------------------------------------

TITLE: Creating a d3.dispatch Object in JavaScript
DESCRIPTION: This snippet demonstrates how to instantiate a new dispatch object using `d3.dispatch()`, specifying the allowed event types ("start", "end") as arguments. This object is then used to register and invoke callbacks for these named events.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dispatch.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const dispatch = d3.dispatch("start", "end");
```

----------------------------------------

TITLE: Formatting Object Data to CSV with Header (D3.js)
DESCRIPTION: Illustrates how to format object data into CSV rows, including a header row. It uses Array.prototype.map to transform the data and Array.prototype.concat to prepend an array representing the column headers.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_14

LANGUAGE: javascript
CODE:
```
const string = d3.csvFormatRows([[
    "year",
    "make",
    "model",
    "length"
  ]].concat(data.map((d, i) => {
  return [
    d.year.getUTCFullYear(), // Assuming d.year is a Date object.
    d.make,
    d.model,
    d.length
  ];
})));
```

----------------------------------------

TITLE: Initializing D3 forceX Position Force
DESCRIPTION: Creates a new position force along the x-axis. This force pushes nodes towards the specified x-coordinate, which is typically added to a D3 force simulation to influence node positioning.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/position.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const x = d3.forceX(width / 2);
```

----------------------------------------

TITLE: Formatting Color with toString() Method D3 JavaScript
DESCRIPTION: Calls the toString() method on a color instance, which is an alias for formatRgb(), returning the color as a CSS RGB or RGBA string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_15

LANGUAGE: javascript
CODE:
```
d3.color("yellow").toString() // "rgb(255, 255, 0)"
```

----------------------------------------

TITLE: Accessing Nested Grouped Data from D3.js InternMap (JavaScript)
DESCRIPTION: This snippet demonstrates how to navigate a nested InternMap produced by `d3.group` with multiple keys. It first retrieves the group for "Adelie" species and then from that result, retrieves the sub-group for "FEMALE" sex. The comment indicates the result is an array of 73 elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#_snippet_3

LANGUAGE: javascript
CODE:
```
speciesSex.get("Adelie").get("FEMALE") // Array(73)
```

----------------------------------------

TITLE: Rendering a Single Delaunay Triangle Manually JavaScript
DESCRIPTION: This snippet illustrates how to access the vertex indexes of a specific triangle from the `triangles` array and use them to draw the triangle onto a drawing context. Each triangle is represented by three consecutive indexes in the `triangles` array.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const {points, triangles} = delaunay;
const t0 = triangles[i * 3 + 0];
const t1 = triangles[i * 3 + 1];
const t2 = triangles[i * 3 + 2];
context.moveTo(points[t0 * 2], points[t0 * 2 + 1]);
context.lineTo(points[t1 * 2], points[t1 * 2 + 1]);
context.lineTo(points[t2 * 2], points[t2 * 2 + 1]);
context.closePath();
```

----------------------------------------

TITLE: Creating Continuous Repeating D3 Transition using d3.active - JavaScript
DESCRIPTION: Shows how to create an infinitely repeating animation using the `d3.active()` method within a transition's `on('start', ...)` event listener. The `d3.active(this)` call gets the currently running transition on the element, allowing a new transition to be scheduled from its state, creating a loop.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_74

LANGUAGE: JavaScript
CODE:
```
d3.select("circle")
  .transition()
    .on("start", function repeat() {
        d3.active(this)
            .style("fill", "red")
          .transition()
            .style("fill", "blue")
          .transition()
            .on("start", repeat);
      });
```

----------------------------------------

TITLE: Loading Text Data with d3-fetch in JavaScript
DESCRIPTION: This snippet fetches a plain text file from a URL using `d3.text`. It returns a promise that resolves to the raw string content of the file.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_12

LANGUAGE: js
CODE:
```
const text = await d3.text("example.txt");
```

----------------------------------------

TITLE: Using D3 Bisect Alias (JavaScript)
DESCRIPTION: Demonstrates the `d3.bisect` alias, which is equivalent to `d3.bisectRight`. It finds the right insertion point for a date value in an array of dates derived from the `aapl` dataset. This function is typically used with arrays of primitive values.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#_snippet_5

LANGUAGE: javascript
CODE:
```
d3.bisect(aapl.map((d) => d.Date), new Date("2014-01-02")) // 163
```

----------------------------------------

TITLE: Formatting Color as RGB/RGBA String D3 JavaScript
DESCRIPTION: Formats the color instance as a CSS RGB or RGBA string representation using the formatRgb() method. If the color is not displayable, RGB values are clamped.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_14

LANGUAGE: javascript
CODE:
```
d3.color("yellow").formatRgb() // "rgb(255, 255, 0)"
```

----------------------------------------

TITLE: Ordinal Scale Explicit Unknown Value Handling
DESCRIPTION: Illustrates how to control the behavior for unknown inputs on an ordinal scale by setting the .unknown() method. This prevents the domain from being implicitly extended and allows assigning a specific output value (e.g., undefined) for unknown inputs.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_41

LANGUAGE: JavaScript
CODE:
```
var x = d3.scaleOrdinal()
    .domain([0, 1])
    .range(["red", "green", "blue"])
    .unknown(undefined);

x.domain(); // [0, 1]
x(2); // undefined
x.domain(); // [0, 1]
```

----------------------------------------

TITLE: Setting Link Target Accessor - JavaScript
DESCRIPTION: Configures the target accessor for a link generator to extract the target coordinates from the second element of an array `d`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_7

LANGUAGE: js
CODE:
```
const link = d3.linkHorizontal().target((d) => d[1]);
```

----------------------------------------

TITLE: Setting D3 Stack Order (None) (JavaScript)
DESCRIPTION: This snippet shows how to set the stack order accessor to the default order (none), which uses the order specified by the keys accessor.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
const stack = d3.stack().order(d3.stackOrderNone);
```

----------------------------------------

TITLE: Setting Outer Padding with D3 point.padding() - JavaScript/Vue
DESCRIPTION: Shows how to set the outer padding (space before the first point and after the last point) of a D3 point scale using the `padding()` method. The padding value, typically between 0 and 1, is dynamically provided using Vue interpolation from a ref named `padding`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#_snippet_7

LANGUAGE: javascript-vue
CODE:
```
const x = d3.scalePoint(["a", "b", "c"], [0, 960]).padding({{padding}});
```

----------------------------------------

TITLE: Constructing Default D3 Arc Generator
DESCRIPTION: Creates a new arc generator with default settings. This generator requires an argument object containing innerRadius, outerRadius, startAngle, and endAngle when invoked.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const arc = d3.arc();
```

----------------------------------------

TITLE: Setting the Domain of a D3.js Quantile Scale (JavaScript)
DESCRIPTION: Sets the discrete array of sample values that define the input domain for the quantile scale. D3 sorts this array internally to calculate the quantile thresholds. This method allows configuring the domain separately from instantiation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const color = d3.scaleQuantile(d3.schemeBlues[5]);
color.domain(penguins.map((d) => d.body_mass_g));
```

----------------------------------------

TITLE: Generating Another Stepped Day Range with d3.timeDay.range (JavaScript)
DESCRIPTION: This snippet further illustrates the `range()` method with a step. It generates an array of local time day boundaries starting from 2015-01-02 up to (but not including) 2015-01-08, returning every 2nd day boundary ([2015-01-02, 2015-01-04, 2015-01-06]). This example complements the previous one to show how different start dates with the same step can produce potentially disjoint sets of dates.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_11

LANGUAGE: javascript
CODE:
```
d3.timeDay.range(new Date(2015, 0, 2), new Date(2015, 0, 8), 2) // [2015-01-02T00:00, 2015-01-04T00:00, 2015-01-06T00:00]
```

----------------------------------------

TITLE: Reversing an Iterable using d3.reverse - JavaScript
DESCRIPTION: This snippet demonstrates using d3.reverse to create a new array containing the elements of a given iterable in reverse order. Unlike Array.prototype.reverse, d3.reverse works on any iterable and does not modify the original input.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
d3.reverse(new Set([0, 2, 3, 1]))
```

----------------------------------------

TITLE: Getting Domain Extent for Range Value - D3 - JavaScript
DESCRIPTION: Uses the `invertExtent` method on a threshold scale to find the domain boundaries corresponding to range values. For range value "red", it returns the domain extent `[undefined, 0]`; for "white", `[0, 1]`; and for "green", `[1, undefined]`. Requires a D3 threshold scale instance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const color = d3.scaleThreshold([0, 1], ["red", "white", "green"]);
color.invertExtent("red"); // [undefined, 0]
color.invertExtent("white"); // [0, 1]
color.invertExtent("green"); // [1, undefined]
```

----------------------------------------

TITLE: Initializing D3 forceY Position Force
DESCRIPTION: Creates a new position force along the y-axis. This force pushes nodes towards the specified y-coordinate, which is typically added to a D3 force simulation to influence node positioning.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/position.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const y = d3.forceY(height / 2);
```

----------------------------------------

TITLE: Setting Fractional Digits for SVG Paths
DESCRIPTION: Creates a new `d3.geoPath()` generator and immediately sets the number of fractional digits to use when formatting coordinates in SVG path data strings to 3 using the `.digits()` method. This affects the precision of the output SVG `d` attribute.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const path = d3.geoPath().digits(3);
```

----------------------------------------

TITLE: Getting Quantize Scale Thresholds (JavaScript)
DESCRIPTION: Returns the array of threshold values computed by the quantize scale based on its domain and range. These thresholds define the boundaries in the domain that separate the discrete range values. The number of thresholds is always one less than the number of values in the range.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#_snippet_9

LANGUAGE: javascript
CODE:
```
color.thresholds() // [0.2, 0.4, 0.6, 0.8]
```

----------------------------------------

TITLE: Creating Sequential Scale with Custom Interpolator Function in D3.js (JS)
DESCRIPTION: Constructs a new sequential scale using the default [0, 1] domain and a custom interpolator function. The custom function takes a parameter `t` (typically 0-1) and returns an output value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#_snippet_3

LANGUAGE: js
CODE:
```
const rainbow = d3.scaleSequential((t) => d3.hsl(t * 360, 1, 0.5) + "");
```

----------------------------------------

TITLE: Formatting with Sign and Space Padding Javascript
DESCRIPTION: Illustrates using `d3.format("+20")` to format a number with a sign (+ or -) and ensuring a minimum width of 20 characters by padding with spaces on the left. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_4

LANGUAGE: javascript
CODE:
```
d3.format("+20")(42) // space-filled and signed, "                 +42"
```

----------------------------------------

TITLE: Determine UTC Time Tick Interval with D3.js
DESCRIPTION: Uses d3.utcTickInterval to determine the specific UTC time interval that would be used by d3.utcTicks for the given start and stop dates and the approximate count. Returns the interval object or null if no suitable interval is found.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_20

LANGUAGE: javascript
CODE:
```
const start = new Date("1970-03-01");
const stop = new Date("1996-03-19");
const count = 4;
const interval = d3.utcTickInterval(start, stop, count); // d3.utcYear.every(5)
```

----------------------------------------

TITLE: Setting Curve Interpolation for D3 Radial Area (JavaScript)
DESCRIPTION: Sets the curve interpolation factory or function for the radial area. This determines how the points are interpolated between defined data points. Avoid monotonic curves like `curveMonotoneX`/`Y` as they are not suited for radial data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const area = d3.areaRadial().curve(d3.curveBasisClosed);
```

----------------------------------------

TITLE: Registering Temporary Drag Event Listeners (JavaScript)
DESCRIPTION: This JavaScript function demonstrates how to use the 'event.on' method within a 'start' drag event listener to attach temporary 'drag' and 'end' listeners. These temporary listeners are scoped only to the current drag gesture. The 'drag' listener updates the position and raises the dragged element, while the 'end' listener removes a CSS class.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
function started(event) {
  const circle = d3.select(this).classed("dragging", true);
  const dragged = (event, d) => circle.raise().attr("cx", d.x = event.x).attr("cy", d.y = event.y);
  const ended = () => circle.classed("dragging", false);
  event.on("drag", dragged).on("end", ended);
}
```

----------------------------------------

TITLE: Setting Tick Label Padding D3.js JavaScript
DESCRIPTION: Sets the padding between the tick marks and their corresponding text labels in pixels using the `tickPadding()` method. The example sets the padding to 0, positioning the labels directly next to the ticks. This controls the spacing for readability and returns the axis instance for chaining.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_25

LANGUAGE: javascript
CODE:
```
const axis = d3.axisBottom(x).tickPadding(0);
```

----------------------------------------

TITLE: Formatting Data to CSV String (No Header) JavaScript
DESCRIPTION: Uses `d3.csvFormatBody` to format an array of objects into a CSV string, similar to `d3.csvFormat` but intentionally omitting the header row. This is useful for appending data to existing files.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_10

LANGUAGE: javascript
CODE:
```
d3.csvFormatBody([{foo: "1", bar: "2"}]) // "1,2"
```

----------------------------------------

TITLE: Calculating Tick Increment with d3.tickIncrement - Step >= 1
DESCRIPTION: Demonstrates d3.tickIncrement, which returns an integer representing the difference between adjacent tick values or the negative inverse if the step is less than one. This example shows a step greater than or equal to 1.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_2

LANGUAGE: javascript
CODE:
```
d3.tickIncrement(1, 9, 5) // 2
```

----------------------------------------

TITLE: Calling path.rect Method - d3-path JavaScript
DESCRIPTION: Demonstrates the `rect` method, creating a new closed subpath representing a rectangle starting at (10, 10) with a width and height of 140. Corresponds to SVG "M" and "L" commands.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#_snippet_9

LANGUAGE: javascript
CODE:
```
path.rect(10, 10, 140, 140);
```

----------------------------------------

TITLE: Invoking Callbacks with dispatch.call in JavaScript
DESCRIPTION: This snippet demonstrates how to trigger the execution of all callbacks registered for the "start" event type using `dispatch.call()`. Callbacks are invoked without a specific `this` context or arguments by default.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dispatch.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
dispatch.call("start");
```

----------------------------------------

TITLE: Calling path.arcTo Method - d3-path JavaScript
DESCRIPTION: Demonstrates the `arcTo` method, drawing a circular arc with radius 40 tangent to the lines formed by the current point to (150, 150) and (150, 150) to (300, 10). Corresponds to SVG "A" commands.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#_snippet_7

LANGUAGE: javascript
CODE:
```
path.arcTo(150, 150, 300, 10, 40);
```

----------------------------------------

TITLE: Creating Delaunay Triangulation from Array of Pairs JavaScript
DESCRIPTION: This snippet demonstrates using the static `d3.Delaunay.from()` method with an array of two-element arrays `[[x0, y0], [x1, y1], ...]`. This is a convenience method that is typically slower than using the constructor with a flat array.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const delaunay = d3.Delaunay.from([[0, 0], [0, 1], [1, 0], [1, 1]]);
```

----------------------------------------

TITLE: Loading and Parsing XML with d3-fetch in JavaScript
DESCRIPTION: This snippet fetches an XML file from a URL using `d3.xml`, parses it, and returns the resulting XML Document object. It returns a promise that resolves once the file is fetched and parsed.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_14

LANGUAGE: js
CODE:
```
const document = await d3.xml("example.xml");
```

----------------------------------------

TITLE: Configuring D3 Stack Offset Expand - JavaScript
DESCRIPTION: This snippet demonstrates how to use `d3.stackOffsetExpand` with a D3 stack. This offset method sets a zero baseline and normalizes stack layers so that the total height at each point is always 1 (or 100%), suitable for showing proportions. It is applied using the `.offset()` method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_20

LANGUAGE: javascript
CODE:
```
const stack = d3.stack().offset(d3.stackOffsetExpand);
```

----------------------------------------

TITLE: Creating Sequential Scale with Explicit Interpolator in D3.js (JS)
DESCRIPTION: Constructs a sequential scale using an interpolator explicitly created from an array using d3.interpolate. This is functionally equivalent to using the .range method with an array.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#_snippet_8

LANGUAGE: js
CODE:
```
const color = d3.scaleSequential(d3.interpolate("red", "blue"));
```

----------------------------------------

TITLE: Setting D3.js Symbol Canvas Context (JavaScript)
DESCRIPTION: Obtains a 2D rendering context from an HTML canvas element and sets it as the drawing context for a d3.symbol() generator using the .context() method. When the generator is invoked, it will draw the symbol directly onto this canvas context.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const context = canvas.getContext("2d");
const symbol = d3.symbol().context(context);
```

----------------------------------------

TITLE: Formatting Object Data to CSV Rows (D3.js)
DESCRIPTION: Shows how to use d3.csvFormatRows with Array.prototype.map to convert an array of objects (data) into the required array of arrays format for formatting into a CSV string. It extracts specific properties and transforms a Date object's year.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_13

LANGUAGE: javascript
CODE:
```
const string = d3.csvFormatRows(data.map((d, i) => {
  return [
    d.year.getUTCFullYear(), // Assuming d.year is a Date object.
    d.make,
    d.model,
    d.length
  ];
}));
```

----------------------------------------

TITLE: Generating Ribbon Path Data in D3.js
DESCRIPTION: Demonstrates how to generate an SVG path data string for a ribbon using a configured ribbon generator. The generator expects an object with `source` and `target` properties, each containing `startAngle`, `endAngle`, and `radius`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_1

LANGUAGE: javascript
CODE:
```
ribbon({
  source: {startAngle: 0.7524114, endAngle: 1.1212972, radius: 240},
  target: {startAngle: 1.8617078, endAngle: 1.9842927, radius: 240}
})
```

----------------------------------------

TITLE: Creating Diverging Scale with Domain and Interpolator in D3.js
DESCRIPTION: Constructs a new diverging scale with a specified three-element numeric domain and an interpolator function. The interpolator maps a normalized value (typically 0 to 1) to the output range, where 0 is the negative extreme, 0.5 is the neutral point, and 1 is the positive extreme.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const color = d3.scaleDiverging([-1, 0, 1], d3.interpolateRdBu);
```

----------------------------------------

TITLE: Creating Horizontal Link Generator - JavaScript
DESCRIPTION: Initializes a D3 link generator suitable for tree diagrams rooted on the left. This is a shorthand for `d3.link(d3.curveBumpX)`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_2

LANGUAGE: js
CODE:
```
const link = d3.link(d3.curveBumpX);
```

----------------------------------------

TITLE: Creating Custom D3.js Elastic Easing
DESCRIPTION: Shows how to configure the `easeElastic` function with a custom period of 0.4 before applying it. This creates a new easing function instance. Requires the D3.js ease module. Output is a configurable elastic easing function.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const ease = d3.easeElastic.period(0.4);
```

----------------------------------------

TITLE: Calculating Tick Step with d3.tickStep - Positive Step
DESCRIPTION: Shows d3.tickStep, which returns the nicely-rounded difference between adjacent tick values for a given interval and count. This example shows a positive step for an ascending interval.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_4

LANGUAGE: javascript
CODE:
```
d3.tickStep(1, 9, 5) // 2
```

----------------------------------------

TITLE: Rendering D3 Arc to Canvas Context JavaScript
DESCRIPTION: This code shows how to use a D3 arc generator (previously configured with a canvas context) to draw an arc on the canvas. It starts a new path, calls the arc generator with data (`d`) to add the arc segment to the path, and then fills the path.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_52

LANGUAGE: JavaScript
CODE:
```
context.beginPath();
arc(d);
context.fill();
```

----------------------------------------

TITLE: Generate Date Range with Step (D3 4.x) JavaScript
DESCRIPTION: Illustrates the updated behavior of `d3.timeDays` in D3 4.x when using a step greater than 1. Unlike 3.x, it now simply skips every *step*th date boundary, behaving similarly to `d3.range`. This provides a more predictable range of dates starting from the specified start date. It takes start date, end date, and step as input.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_61

LANGUAGE: javascript
CODE:
```
d3.timeDays(new Date(2016, 4, 28), new Date(2016, 5, 5), 2);
// [Sat May 28 2016 00:00:00 GMT-0700 (PDT),
//  Mon May 30 2016 00:00:00 GMT-0700 (PDT),
//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),
//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]
```

----------------------------------------

TITLE: Getting Range of Threshold Scale - D3 - JavaScript
DESCRIPTION: Retrieves the current range array from a threshold scale instance using the `.range()` method without arguments. This returns the array of output values assigned to the domain intervals. Requires a D3 threshold scale instance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#_snippet_7

LANGUAGE: javascript
CODE:
```
color.range() // ["red", "white", "green"]
```

----------------------------------------

TITLE: Generating Stepped Day Range with d3.timeDay.range (JavaScript)
DESCRIPTION: This snippet demonstrates using the `range()` method with a `step` parameter. It generates an array of local time day boundaries starting from 2015-01-01 up to (but not including) 2015-01-07, returning every 2nd day boundary ([2015-01-01, 2015-01-03, 2015-01-05]). Note that the start date is included if it is a boundary, and the step is applied from that point.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_10

LANGUAGE: javascript
CODE:
```
d3.timeDay.range(new Date(2015, 0, 1), new Date(2015, 0, 7), 2) // [2015-01-01T00:00, 2015-01-03T00:00, 2015-01-05T00:00]
```

----------------------------------------

TITLE: Getting Quantize Scale Domain (JavaScript)
DESCRIPTION: Demonstrates how to retrieve the current domain of a quantize scale using the domain() method without arguments. It returns the scale's current domain as a two-element array. This is useful for inspecting the scale's configuration.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#_snippet_6

LANGUAGE: javascript
CODE:
```
color.domain() // [0, 100]
```

----------------------------------------

TITLE: Getting Link Y Accessor - JavaScript
DESCRIPTION: Retrieves the currently configured y-coordinate accessor function from a link generator.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_14

LANGUAGE: js
CODE:
```
link.y() // (d) => y(d.y)
```

----------------------------------------

TITLE: Rendering D3 Right Axis Example
DESCRIPTION: This snippet demonstrates rendering a right-oriented D3 axis using the `d3.axisRight` generator with a linear scale and positioning it using a custom Vue component, specifying custom width, height, and x-coordinate.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_6

LANGUAGE: html
CODE:
```
<ExampleAxis :axis="d3.axisRight(d3.scaleLinear([0, 100], [10, 190]))" :width="60" :height="200" :x="20" />
```

----------------------------------------

TITLE: Initializing D3 Symlog Scale with Default Domain (JavaScript)
DESCRIPTION: Creates a new symlog scale instance using `d3.scaleSymlog`. When only one argument is provided, it is interpreted as the range (["red", "blue"]). The domain defaults to [0, 1], and the scale maps values from this default domain to the specified range, typically using an appropriate interpolator (like `interpolateRgb` for colors).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/symlog.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const color = d3.scaleSymlog(["red", "blue"]) // default domain of [0, 1]
```

----------------------------------------

TITLE: Setting Linear Scale Interpolator D3.js JavaScript
DESCRIPTION: Demonstrates how to set a custom interpolator factory for a d3.scaleLinear instance using the `.interpolate()` method. This example uses d3.interpolateHcl to perform color interpolation in the HCL color space between the range values. Requires the d3-scale and d3-interpolate modules.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const color = d3.scaleLinear(["red", "blue"]).interpolate(d3.interpolateHcl);
```

----------------------------------------

TITLE: Inserting Element Manually - D3.js Selection - JavaScript
DESCRIPTION: Provides an equivalent implementation of inserting an element using the `selection.select` method and native DOM manipulation (`insertBefore`). The function is called for each selected element (`this` refers to the element) and returns the inserted element, which `select` then includes in the new selection.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
d3.selectAll("div").select(function() {
  return this.insertBefore(document.createElement("p"), null);
});
```

----------------------------------------

TITLE: Creating Repeating D3 Transitions with d3.active - JavaScript
DESCRIPTION: This example illustrates the use of `d3.active(this)` within a transition's 'start' event listener to retrieve the current transition and initiate a new one, creating a repeating animation cycle. It applies a delay based on the element index and cycles through a sequence of fill colors on selected circles.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#_snippet_2

LANGUAGE: javascript
CODE:
```
d3.selectAll("circle").transition()
    .delay((d, i) => i * 50)
    .on("start", function repeat() {
        d3.active(this)
            .style("fill", "red")
          .transition()
            .style("fill", "green")
          .transition()
            .style("fill", "blue")
          .transition()
            .on("start", repeat);
      });
```

----------------------------------------

TITLE: Creating Diverging Scale with only Interpolator in D3.js
DESCRIPTION: Constructs a new diverging scale specifying only the interpolator function. When the domain is not provided, it defaults to `[0, 0.5, 1]`. The interpolator is used to map the domain values to the output range.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const color = d3.scaleDiverging(d3.interpolateRdBu);
```

----------------------------------------

TITLE: Selecting NodeList D3.js JavaScript
DESCRIPTION: This snippet demonstrates using `d3.selectAll` with a NodeList, specifically `document.links`, which is a collection of all `<a>` elements with an href attribute. It selects all these links and sets their text color style to red.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_9

LANGUAGE: javascript
CODE:
```
d3.selectAll(document.links).style("color", "red");
```

----------------------------------------

TITLE: Initializing D3 Chord Layout (JavaScript)
DESCRIPTION: This snippet initializes a new D3 chord layout generator using the `d3.chord()` function. It creates a configurable object (`chord`) that can be used to compute chord diagrams from a matrix of flow values with default settings. The resulting object can be further configured with methods like `padAngle`, `sortGroups`, etc.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/chord.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const chord = d3.chord();
```

----------------------------------------

TITLE: Generating Descending Ticks with d3.scaleLinear
DESCRIPTION: Demonstrates that linear scales in D3 v4.0 generate ticks in the same order as the domain. If the domain is descending, the generated ticks will also be descending.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_39

LANGUAGE: JavaScript
CODE:
```
d3.scaleLinear().domain([10, 0]).ticks(5); // [10, 8, 6, 4, 2, 0]
```

----------------------------------------

TITLE: Initializing Rounded Path Serializer - d3-path JavaScript
DESCRIPTION: Demonstrates using the `d3.pathRound` function to create a path serializer that limits the number of decimal places in the output SVG path data to the specified number of digits (3 in this example), useful for file size reduction.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const path = d3.pathRound(3);
```

----------------------------------------

TITLE: Applying Consistent SI Prefix Javascript
DESCRIPTION: Provides examples demonstrating that `d3.formatPrefix` uses a consistent SI prefix ('µ' for micro) determined by the reference value (1e-6), unlike the 's' format type which can change prefixes. It formats values in fixed-point notation. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_21

LANGUAGE: javascript
CODE:
```
const f = d3.formatPrefix(",.0", 1e-6);
f(0.00042); // "420µ"
f(0.0042); // "4,200µ"
```

----------------------------------------

TITLE: Calculating Projected Planar Area
DESCRIPTION: Calls the `.area()` method on a configured geographic path generator, passing a GeoJSON object (e.g., representing California). The method returns the projected planar area of the object, typically in square pixels, respecting any clipping defined by the projection.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_4

LANGUAGE: javascript
CODE:
```
path.area(california) // 17063.1671837991 px²
```

----------------------------------------

TITLE: Creating HTML Element within SVG ForeignObject in D3
DESCRIPTION: Demonstrates how to create an SVG element, append a `foreignObject`, and then append an HTML `div` element within it using the `xhtml:` prefix to explicitly specify the HTML namespace. This is necessary when embedding content from a different namespace.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/namespaces.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
d3.create("svg")
  .append("foreignObject")
    .attr("width", 300)
    .attr("height", 100)
  .append("xhtml:div")
    .text("Hello, HTML!");
```

----------------------------------------

TITLE: Setting D3 Band Scale Combined Padding Dynamically (JS-Vue)
DESCRIPTION: A convenience method, `.padding()`, that sets both the inner and outer padding simultaneously to the same value, controlled by a Vue reactive variable `padding`. The padding value is typically between 0 and 1.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
const x = d3.scaleBand(["a", "b", "c"], [0, 960]).padding({{padding}});
```

----------------------------------------

TITLE: Setting Tick Arguments using Array
DESCRIPTION: This JavaScript snippet shows that calling `.ticks()` with a number is a convenience method equivalent to calling `.tickArguments()` with an array containing that number as the first element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_13

LANGUAGE: javascript
CODE:
```
axis.tickArguments([10]);
```

----------------------------------------

TITLE: SI Prefix Formatting with Trimming Javascript
DESCRIPTION: Illustrates the effect of the `~` option when used with the 's' format type. It formats the number with an SI prefix ('k') and removes insignificant trailing zeros, resulting in "1.5k". Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_15

LANGUAGE: javascript
CODE:
```
d3.format("~s")(1500) // "1.5k"
```

----------------------------------------

TITLE: Setting Varying Easing Factory D3 Transition JavaScript
DESCRIPTION: Specifies a factory function that returns an easing function for each selected element in a D3 transition. The factory is evaluated per element with datum (d), index (i), and group (nodes), and 'this' as the current DOM element. This allows for per-element easing based on data or index. Requires a D3 transition object and a function that returns an easing function.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#_snippet_7

LANGUAGE: javascript
CODE:
```
transition.easeVarying((d) => d3.easePolyIn.exponent(d.exponent));
```

----------------------------------------

TITLE: Setting Link Y Accessor - JavaScript
DESCRIPTION: Configures the y-coordinate accessor for a link generator, using an external `y` function to process the data object's `y` property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_13

LANGUAGE: js
CODE:
```
const link = d3.linkHorizontal().y((d) => y(d.y));
```

----------------------------------------

TITLE: Creating Uniform Random Integer Generator - D3.js JavaScript
DESCRIPTION: This snippet shows how to use d3.randomInt to create a function generating random integers with a uniform distribution. The function will return integers greater than or equal to the minimum (defaulting to 0) and less than the specified maximum.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
d3.randomInt(100)
```

----------------------------------------

TITLE: Setting D3 Band Scale Outer Padding Dynamically (JS-Vue)
DESCRIPTION: Sets the outer padding before the first band and after the last band using the `.paddingOuter()` method, controlled by a Vue reactive variable `paddingOuter`. The padding value is typically between 0 and 1, representing a multiple of the step size.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
const x = d3.scaleBand(["a", "b", "c"], [0, 960]).paddingOuter({{paddingOuter}});
```

----------------------------------------

TITLE: Calculating Cumulative Sum of Array - D3.js JavaScript
DESCRIPTION: Demonstrates the use of `d3.cumsum` to compute the cumulative sum of elements in an array. It returns a new array (specifically a Float64Array) where each element is the sum of all preceding elements plus the current element. The input is an array, and the output is the array of cumulative sums.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
d3.cumsum([1, 1, 2, 3, 5]) // [1, 2, 4, 7, 12]
```

----------------------------------------

TITLE: Calculating Tick Step with d3.tickStep - Negative Step
DESCRIPTION: Demonstrates d3.tickStep returning a negative value when the stop value is less than the start value, indicating a descending sequence of ticks.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_5

LANGUAGE: javascript
CODE:
```
d3.tickStep(9, 1, 5) // -2
```

----------------------------------------

TITLE: Set and Get Linear Scale Unknown Value - D3.js JavaScript
DESCRIPTION: The `unknown()` method sets the output value returned by the scale for undefined or NaN input values. If no argument is provided, it returns the current unknown value, which defaults to undefined. Useful for handling missing data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const color = d3.scaleLinear([0, 100], ["red", "blue"]).unknown("#ccc");
color(NaN); // "#ccc"
```

LANGUAGE: javascript
CODE:
```
color.unknown() // "#ccc"
```

----------------------------------------

TITLE: Using D3.js interpolateDiscrete for Step Interpolation - JavaScript
DESCRIPTION: Returns a discrete interpolator for an array of values. This interpolator acts like a lightweight quantize scale, mapping intervals of the domain [0, 1] to elements of the input array. This example shows evaluating an interpolator for colors ["red", "blue", "green"] at t = 0.5, which falls into the second interval.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
d3.interpolateDiscrete(["red", "blue", "green"])(0.5) // "blue"
```

----------------------------------------

TITLE: Formatting Data into TSV String JavaScript
DESCRIPTION: Formats an array of objects into a TSV string using `d3.tsvFormat`. Headers are derived from object keys. Values are formatted and escaped if necessary, using tab as the delimiter.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.tsvFormat([{foo: "1", bar: "2"}]) // "foo\tbar\n1\t2"
```

----------------------------------------

TITLE: Formatting Single Value to CSV String (D3.js)
DESCRIPTION: Demonstrates the use of d3.csvFormatValue to format a single string value according to CSV rules (handling quotes, delimiters, newlines). This is useful for formatting individual cells.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_16

LANGUAGE: javascript
CODE:
```
d3.csvFormatValue("foo") // "foo"
```

----------------------------------------

TITLE: Calling path.quadraticCurveTo Method - d3-path JavaScript
DESCRIPTION: Demonstrates the `quadraticCurveTo` method, drawing a quadratic Bézier curve from the current point to (200, 200) using (200, 0) as the control point. Corresponds to SVG "Q" commands.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#_snippet_5

LANGUAGE: javascript
CODE:
```
path.quadraticCurveTo(200, 0, 200, 200);
```

----------------------------------------

TITLE: Creating UTC Time Format in JavaScript
DESCRIPTION: Demonstrates the basic usage of `d3.utcFormat` to create a UTC date formatter using a standard specifier. This is an alias for the default locale's utcFormat method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_5

LANGUAGE: javascript
CODE:
```
d3.utcFormat("%b %d")
```

----------------------------------------

TITLE: Defining Affine Matrix Transform Factory with geoTransform - JavaScript
DESCRIPTION: Creates a factory function (`matrix`) that returns a D3 geo transform object. This transform applies a general 2D affine matrix transformation defined by parameters (a, b, c, d, tx, ty) to the x and y coordinates of points in its stream.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/projection.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
function matrix(a, b, c, d, tx, ty) {
  return d3.geoTransform({
    point(x, y) {
      this.stream.point(a * x + b * y + tx, c * x + d * y + ty);
    }
  });
}
```

----------------------------------------

TITLE: Configuring D3 Transverse Mercator Projection (JS)
DESCRIPTION: Creates and configures a D3 transverse spherical Mercator geographic projection. It sets the rotation to `[0, 0]`, fits the projection to a square extent based on the component's width, and sets the precision to `0.2`. This projection also has a default clip extent.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/cylindrical.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
d3.geoTransverseMercator().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width - 1]], {type: "Sphere"}).precision(0.2)
```

----------------------------------------

TITLE: Calling path.closePath Method - d3-path JavaScript
DESCRIPTION: Demonstrates the `closePath` method on a d3-path instance. This ends the current subpath and draws a straight line back to its starting point, corresponding to the SVG "Z" command.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#_snippet_3

LANGUAGE: javascript
CODE:
```
path.closePath();
```

----------------------------------------

TITLE: Creating D3 Azimuthal Equal-Area Projection (JavaScript)
DESCRIPTION: Configures a D3 azimuthal equal-area projection. It sets the rotation to [110, -40], fits the projection extent to the defined width and height minus borders, specifying the source object as a 'Sphere', and sets the precision to 0.2 degrees. This configuration is intended to be used for rendering a world map.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/azimuthal.md#_snippet_1

LANGUAGE: javascript
CODE:
```
d3.geoAzimuthalEqualArea().rotate([110, -40]).fitExtent([[1, 1], [width - 1, height - 1]], {type: "Sphere"}).precision(0.2)
```

----------------------------------------

TITLE: Using Seeded Random Source with D3 Distribution - JavaScript
DESCRIPTION: Shows how to use a custom, seeded random number generator (here, a Linear Congruential Generator created with d3.randomLcg) as the source for a D3 distribution function (here, d3.randomNormal). This allows for reproducible sequences of random numbers. The resulting function is then called to generate a number.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
const seed = 0.44871573888282423; // any number in [0, 1)
const random = d3.randomNormal.source(d3.randomLcg(seed))(0, 1);
random(); // -0.6253955998897069
```

----------------------------------------

TITLE: Creating Cubehelix Long Path Gamma Interpolator in D3.js
DESCRIPTION: Returns an interpolator factory for the Cubehelix color space configured for long path hue interpolation and a specific gamma value (e.g., 3.0). Calling the factory with start and end colors (e.g., "purple", "orange") produces the configured interpolator, returning an RGB string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_11

LANGUAGE: javascript
CODE:
```
d3.interpolateCubehelixLong.gamma(3)("purple", "orange")
```

----------------------------------------

TITLE: Generating SVG Path from Canvas Code - d3-path JavaScript
DESCRIPTION: Creates a new d3-path serializer instance, uses the `drawCircle` function (defined previously) with the path instance as the context, and then calls `toString()` to get the serialized SVG path data string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const path = d3.path();
drawCircle(path, 40);
path.toString(); // "M40,0A40,40,0,1,1,-40,0A40,40,0,1,1,40,0"
```

----------------------------------------

TITLE: Removing Default Brush Listeners - JavaScript
DESCRIPTION: This JavaScript snippet shows how to remove the event listeners automatically bound by the d3 brush using `selection.on()`. By specifying the `.brush` name (which d3-brush uses internally for its listeners) and `null` as the listener function, all brush-related event handlers attached by the `brush.call()` method on the target group element are removed.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-brush.md#_snippet_1

LANGUAGE: javascript
CODE:
```
group.on(".brush", null);
```

----------------------------------------

TITLE: Setting Log Scale Base D3 JavaScript
DESCRIPTION: Creates a D3 logarithmic scale and explicitly sets its base to the specified value (2 in this case) using the `.base()` method. The scale maps the domain `[1, 1024]` to the range `[0, 960]`. The base primarily influences tick generation, not the core mapping function.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/log.md#_snippet_1

LANGUAGE: js
CODE:
```
const x = d3.scaleLog([1, 1024], [0, 960]).base(2);
```

----------------------------------------

TITLE: D3 Hierarchy Children Accessor for Map Data (JavaScript)
DESCRIPTION: This default function is employed by `d3.hierarchy` when the input data is interpreted as a Map entry, typically originating from functions like `d3.group` or `d3.rollup`. It expects the data `d` to be an array `[key, value]` and treats the second element (`d[1]`) as the collection of children. It requires the D3.js library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
function children(d) {
  return Array.isArray(d) ? d[1] : null;
}
```

----------------------------------------

TITLE: Rounding Date to Nearest UTC Monday Boundary with d3.utcMonday.round (JavaScript)
DESCRIPTION: This snippet illustrates using the `round()` method of a d3-time interval (`d3.utcMonday`) to find the boundary date closest to a given date (the current date). It returns a new Date object representing the Monday in UTC time that is nearest to the specified date, choosing the earlier boundary if the date is exactly halfway between two boundaries.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_6

LANGUAGE: javascript
CODE:
```
d3.utcMonday.round(new Date()) // the previous or following Monday, whichever is closer
```

----------------------------------------

TITLE: Creating Uniform Random Number Generator - D3.js JavaScript
DESCRIPTION: This snippet demonstrates how to create a function that generates random numbers with a uniform distribution using d3.randomUniform. The function returned will generate numbers greater than or equal to the minimum (defaulting to 0) and less than the specified maximum.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
d3.randomUniform(6)
```

----------------------------------------

TITLE: Creating Diverging Scale with default settings in D3.js
DESCRIPTION: Constructs a new diverging scale without specifying a domain or an interpolator. The domain defaults to `[0, 0.5, 1]`, and the interpolator defaults to the identity function, which simply returns the input value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const identity = d3.scaleDiverging();
```

----------------------------------------

TITLE: Adding Multiple Data Points to Quadtree (quadtree.addAll) - JavaScript
DESCRIPTION: Adds an iterable collection of data points to the quadtree efficiently. The extent is computed for all data first, potentially resulting in a more compact tree than adding points individually.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
const tree = d3.quadtree().addAll([[0, 0], [1, 2]]);
```

----------------------------------------

TITLE: Creating Diverging Scale with Range Array in D3.js
DESCRIPTION: Constructs a new diverging scale specifying a three-element output range array. D3 automatically converts this array into a piecewise interpolator using `d3.interpolate` and `d3.piecewise` to map domain values to colors or values within the specified range.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const color = d3.scaleDiverging(["blue", "white", "red"]);
```

----------------------------------------

TITLE: Rendering Observable Plot Tree Visualization - HTML/Vue
DESCRIPTION: Renders an Observable Plot visualization using a custom Vue component, passing configuration options via the `:options` prop. The options define the plot's appearance (axis, height, margins) and specify the use of `Plot.tree` with the `gods` data to generate the tree structure marks.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/tree.md#_snippet_1

LANGUAGE: html
CODE:
```
<PlotRender :options='{
  axis: null,
  height: 100,
  margin: 20,
  marginRight: 120,
  marks: [
    Plot.tree(gods, {textStroke: "var(--vp-c-bg)"})
  ]
}' />
```

----------------------------------------

TITLE: Initializing D3 Contour Generator
DESCRIPTION: Demonstrates creating a new contour generator instance using `d3.contours()`. It then chains method calls to configure the generator, setting the `size` (grid dimensions) and `thresholds` (an array of values for contour levels). This is a common setup step before computing contours.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/contour.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const contours = d3.contours()
    .size([width, height])
    .thresholds([0, 1, 2, 3, 4]);
```

----------------------------------------

TITLE: Implementing Rebind Pattern for Getter-Setter Methods (JavaScript)
DESCRIPTION: This code provides a recommended JavaScript pattern to manually rebind or wrap a method that acts as a getter-setter (e.g., `dispatch.on`) without using the removed `d3.rebind`. It calls the original method (`dispatch.on.apply`), checks if the returned value is the original object (indicating a setter call), and returns the wrapper object (`component`) in that case, otherwise returns the value from the getter call. Useful for creating chainable component APIs. Requires the `dispatch` object to have a `.on` method.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_28

LANGUAGE: JavaScript
CODE:
```
component.on = function() {
  var value = dispatch.on.apply(dispatch, arguments);
  return value === dispatch ? component : value;
};
```

----------------------------------------

TITLE: Setting Point Radius for GeoPath
DESCRIPTION: Calls the `.pointRadius()` method on a geographic path generator with a numerical argument (e.g., 10). This sets the fixed radius in pixels that will be used when rendering GeoJSON Point or MultiPoint geometries using this generator.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_13

LANGUAGE: javascript
CODE:
```
path.pointRadius(10);
```

----------------------------------------

TITLE: Creating Custom DSV Parser/Formatter Instance JavaScript
DESCRIPTION: Shows how to initialize a reusable DSV parser and formatter object configured with a specific single-character delimiter (here, comma) using `d3.dsvFormat`. The returned object includes methods like `parse`, `parseRows`, `format`, etc., for that delimiter.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const csv = d3.dsvFormat(",");
```

----------------------------------------

TITLE: Ceiling Date to Next UTC Monday Boundary with d3.utcMonday.ceil (JavaScript)
DESCRIPTION: This snippet demonstrates using the `ceil()` method of a d3-time interval (`d3.utcMonday`) to find the earliest interval boundary date after or equal to a given date (the current date). It returns a new Date object representing the beginning of the next Monday in UTC time that is greater than or equal to the specified date.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_7

LANGUAGE: javascript
CODE:
```
d3.utcMonday.ceil(new Date()) // the following Monday
```

----------------------------------------

TITLE: Filtering D3 unixDay Interval using every - JavaScript
DESCRIPTION: Filters the `d3.unixDay` time interval to include only every third day. This method returns a new interval that represents dates at regular `step` intervals, relative to the parent interval's field function. Requires the D3.js time module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_13

LANGUAGE: javascript
CODE:
```
d3.unixDay.every(3)
```

----------------------------------------

TITLE: Counting D3 timeDay Boundaries (Day of Year) - JavaScript
DESCRIPTION: Uses the `count` method on the `d3.timeDay` interval to calculate the number of days between the start of the current year (floored to the year interval by `d3.timeYear(now)`) and the current date (`now`). This provides the zero-based day-of-year number. Requires a `now` Date object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_16

LANGUAGE: javascript
CODE:
```
d3.timeDay.count(d3.timeYear(now), now) // 177
```

----------------------------------------

TITLE: Generate Filtered Date Range (D3 4.x) JavaScript
DESCRIPTION: Shows how to replicate the filtered date range behavior of D3 3.x's `range` using the new `every` method in D3 4.x. It first specifies the base interval (`timeDay`), then applies `every(2)` to filter for every second day, and finally calls `range` to generate the dates between the start and end dates that match the filter. It takes a base interval, step for filtering, and start/end dates for the range.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_62

LANGUAGE: javascript
CODE:
```
d3.timeDay.every(2).range(new Date(2016, 4, 28), new Date(2016, 5, 5));
// [Sun May 29 2016 00:00:00 GMT-0700 (PDT),
//  Tue May 31 2016 00:00:00 GMT-0700 (PDT),
//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),
//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]
```

----------------------------------------

TITLE: Formatting Rows to CSV String (D3.js)
DESCRIPTION: Demonstrates the basic usage of d3.csvFormatRows to format an array of arrays into a CSV string. It shows how simple string data is converted with comma separators and newline characters for rows.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_12

LANGUAGE: javascript
CODE:
```
d3.csvFormatRows([["foo", "bar"], ["1", "2"]]) // "foo,bar\n1,2"
```

----------------------------------------

TITLE: Calculating Ranks of Strings - D3.js JavaScript
DESCRIPTION: Demonstrates calculating the ranks of string elements in an array using `d3.rank` with the default ascending comparator. It shows how duplicate values ("b") receive the same rank, which is the rank of their first occurrence. The input is an array of strings, and the output is an array of ranks.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
d3.rank(["b", "c", "b", "a"]); // [1, 3, 1, 0]
```

----------------------------------------

TITLE: Making Color Brighter with brighter() Method D3 JavaScript
DESCRIPTION: Returns a new color object that is a brighter version of the original color instance using the brighter() method. An optional parameter 'k' controls the degree of brightening.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_8

LANGUAGE: javascript
CODE:
```
d3.color("steelblue").brighter(1) // {r: 100, g: 185.71428571428572, b: 257.14285714285717, opacity: 1}
```

----------------------------------------

TITLE: Calling path.moveTo Method - d3-path JavaScript
DESCRIPTION: Demonstrates the `moveTo` method on a d3-path instance, moving the current point to the specified coordinates (100, 100). This corresponds to the SVG "M" command.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#_snippet_2

LANGUAGE: javascript
CODE:
```
path.moveTo(100, 100);
```

----------------------------------------

TITLE: Sequential Selection Modifications D3.js JavaScript
DESCRIPTION: Shows the equivalent of method chaining by storing the selection in a variable and applying methods sequentially. This illustrates that selection methods return the selection object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const p = d3.selectAll("p");
p.attr("class", "graf");
p.style("color", "red");
```

----------------------------------------

TITLE: Creating Locale UTC Format Function with Specifier in JavaScript
DESCRIPTION: Shows the usage of the `locale.utcFormat` method to return a function that formats dates as UTC strings according to the specified pattern, interpreting directives in UTC.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_13

LANGUAGE: javascript
CODE:
```
d3.utcFormat("%b %d")
```

----------------------------------------

TITLE: Setting Link Context for Canvas - JavaScript
DESCRIPTION: Sets the rendering context of the link generator to a Canvas 2D context. When a context is set, the generator renders paths by calling context methods instead of returning an SVG path string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_16

LANGUAGE: js
CODE:
```
const context = canvas.getContext("2d");
const link = d3.link().context(context);
```

----------------------------------------

TITLE: Setting Pad Angle on D3 Pie Generator (JS/Vue)
DESCRIPTION: This snippet demonstrates how to create a D3 pie generator and set its pad angle using the `padAngle()` method. The value is shown as a dynamic variable `{{padAngle}}`, suggesting usage within a framework like Vue.js where the value is reactive.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/pie.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const pie = d3.pie().padAngle({{padAngle}});
```

----------------------------------------

TITLE: Selecting Siblings with Function Returning Array D3.js JavaScript
DESCRIPTION: This snippet uses `selection.selectAll` with a function that returns an array of elements. For each selected paragraph, the function returns an array containing both its previous and next siblings, selecting both for each paragraph.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_13

LANGUAGE: javascript
CODE:
```
const sibling = d3.selectAll("p").selectAll(function() {
  return [
    this.previousElementSibling,
    this.nextElementSibling
  ];
});
```

----------------------------------------

TITLE: Setting Pad Angle on D3 Arc Generator (JavaScript)
DESCRIPTION: Sets the padding angle for the arc generator. When specified with a number or function, it configures the spacing between adjacent arcs and returns the arc generator for method chaining. This value, multiplied by `padRadius`, determines the fixed linear separation distance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
const arc = d3.arc().padAngle(0);
```

----------------------------------------

TITLE: Calculating Polygon Centroid JavaScript
DESCRIPTION: Shows how to compute the centroid (geometric center) of a polygon using `d3.polygonCentroid`. It takes a polygon (an array of two-element point arrays) as input and returns the coordinates `[x, y]` of the centroid as a two-element array.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-polygon.md#_snippet_2

LANGUAGE: javascript
CODE:
```
d3.polygonCentroid([[1, 1], [1.5, 0], [2, 1]]) // [1.5, 0.6666666666666666]
```

----------------------------------------

TITLE: Inverting D3.js Quantile Scale to Get Domain Extent (JavaScript)
DESCRIPTION: Retrieves the continuous input domain extent [x0, x1] that maps to a specific discrete output range value. This is the inverse operation of applying the scale and is useful for identifying the range of input values associated with a particular output category.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#_snippet_2

LANGUAGE: javascript
CODE:
```
color.invertExtent("#eff3ff"); // [2700, 3475]
color.invertExtent("#6baed6"); // [3800, 4300]
color.invertExtent("#08519c"); // [4950, 6300]
```

----------------------------------------

TITLE: Calculating Projected Planar Length
DESCRIPTION: Uses the `.measure()` method on a geographic path generator with a GeoJSON object. It calculates and returns the projected planar length of the object, typically in pixels. For polygons, this is the sum of all ring lengths.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_9

LANGUAGE: javascript
CODE:
```
path.measure(california) // 825.7124297512761
```

----------------------------------------

TITLE: Creating a D3 Time Format Locale Object (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `d3.timeFormatLocale` to create a new locale object for time formatting and parsing. It takes a `definition` object specifying locale-specific strings and formats (like weekday/month names, AM/PM periods, and standard date/time formats) and returns an object with methods (`format`, `parse`, `utcFormat`, `utcParse`) bound to that locale.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_15

LANGUAGE: javascript
CODE:
```
const enUs = d3.timeFormatLocale({
  dateTime: "%x, %X",
  date: "%m/%d/%Y",
  time: "%I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
```

----------------------------------------

TITLE: Setting D3 Area X1 Accessor - Javascript
DESCRIPTION: Sets the x1 accessor for the area generator to the specified function or number. When generated, this accessor is invoked for each data element to determine the x-coordinate for the topline.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const area = d3.area().x1((d) => x(d.Close));
```

----------------------------------------

TITLE: Setting Unknown Value and Mapping in D3 Ordinal Scale
DESCRIPTION: Configures an ordinal scale to return a specific value (`null` in this case) when an input value is not found in its domain, using the `.unknown()` method. Calling the scale with a domain value returns the mapped range value; calling with an unknown value returns the configured unknown value. Requires the D3 library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const color = d3.scaleOrdinal(["a", "b", "c"], d3.schemeTableau10).unknown(null);
color("a"); // "#4e79a7"
color("b"); // "#f28e2c"
color("c"); // "#e15759"
color("d"); // null
```

----------------------------------------

TITLE: Creating D3 Voronoi Diagram
DESCRIPTION: Demonstrates how to create a Voronoi diagram from an existing D3 Delaunay triangulation instance. It shows the process of instantiating Delaunay from a set of points and then generating the Voronoi diagram, specifying optional rendering bounds.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/voronoi.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const delaunay = d3.Delaunay.from([[0, 0], [0, 100], [100, 0], [100, 100]]);
const voronoi = delaunay.voronoi([0, 0, 640, 480]);
```

----------------------------------------

TITLE: Defining Sample Data for D3 Stacking (JavaScript)
DESCRIPTION: This snippet shows an example of data formatted as a tidy array of objects, suitable for use with the D3 stack layout. Each object represents a single data point with properties for date, fruit type, and sales value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const data = [
  {date: new Date("2015-01-01"), fruit: "apples", sales: 3840},
  {date: new Date("2015-01-01"), fruit: "bananas", sales: 1920},
  {date: new Date("2015-01-01"), fruit: "cherries", sales: 960},
  {date: new Date("2015-01-01"), fruit: "durians", sales: 400},
  {date: new Date("2015-02-01"), fruit: "apples", sales: 1600},
  {date: new Date("2015-02-01"), fruit: "bananas", sales: 1440},
  {date: new Date("2015-02-01"), fruit: "cherries", sales: 960},
  {date: new Date("2015-02-01"), fruit: "durians", sales: 400},
  {date: new Date("2015-03-01"), fruit: "apples", sales: 640},
  {date: new Date("2015-03-01"), fruit: "bananas", sales: 960},
  {date: new Date("2015-03-01"), fruit: "cherries", sales: 640},
  {date: new Date("2015-03-01"), fruit: "durians", sales: 400},
  {date: new Date("2015-04-01"), fruit: "apples", sales: 320},
  {date: new Date("2015-04-01"), fruit: "bananas", sales: 480},
  {date: new Date("2015-04-01"), fruit: "cherries", sales: 640},
  {date: new Date("2015-04-01"), fruit: "durians", sales: 400}
];
```

----------------------------------------

TITLE: Copying Color with Modified Properties D3 JavaScript
DESCRIPTION: Creates a copy of an existing color object using the copy() method. Optional properties can be passed as an object to override values in the new copy.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_7

LANGUAGE: javascript
CODE:
```
d3.color("steelblue").copy({opacity: 0.5}) // {r: 70, g: 130, b: 180, opacity: 0.5}
```

----------------------------------------

TITLE: Getting Default Time Tick Formatter in D3.js
DESCRIPTION: This snippet demonstrates obtaining a default time format function using the `tickFormat()` method of a time scale. It shows how this formatter automatically selects a human-readable representation for dates based on the scale's domain and the specific tick values, providing both local and global context. Requires the D3.js library, including the d3-scale and d3-time-format modules.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/time.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const x = d3.scaleUtc().domain([new Date("2000-01-01T00:00Z"), new Date("2000-01-01T02:00Z")]);
const T = x.ticks(); // [2000-01-01T00:00Z, 2000-01-01T00:15Z, 2000-01-01T00:30Z, …]
const f = x.tickFormat();
T.map(f); // ["2000", "12:15", "12:30", "12:45", "01 AM", "01:15", "01:30", "01:45", "02 AM"]
```

----------------------------------------

TITLE: Getting Domain of D3 Ordinal Scale
DESCRIPTION: Retrieves the current domain array of an existing D3 ordinal scale by calling the `.domain()` method without any arguments. The method returns the array of domain values currently configured for the scale. Requires an initialized D3 ordinal scale.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#_snippet_3

LANGUAGE: javascript
CODE:
```
color.domain() // ["a", "b", "c"]
```

----------------------------------------

TITLE: Creating Poly Easing Variations in D3.js
DESCRIPTION: Illustrates how to use the `easePoly.exponent()` method to create equivalent easing functions for linear (exponent 1), quadratic (exponent 2), and cubic (exponent 3) easing. Requires the D3.js ease module. Outputs are specific polynomial easing functions configured with different exponents.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const linear = d3.easePoly.exponent(1);
const quad = d3.easePoly.exponent(2);
const cubic = d3.easePoly.exponent(3);
```

----------------------------------------

TITLE: Count Weeks Since Start of Year (D3 4.x) JavaScript
DESCRIPTION: Demonstrates using the `interval.count` method in D3 4.x to calculate the number of weeks since the start of the year. It counts the number of `timeWeek` intervals between the start of the year (`d3.timeYear(now)`) and the current date (`now`). This generalizes the 3.x `d3.time.weekOfYear` functionality. It takes two `Date` objects (start and end) for the count.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_65

LANGUAGE: javascript
CODE:
```
d3.timeWeek.count(d3.timeYear(now), now); // 24
```

----------------------------------------

TITLE: Setting D3 Radial Line Radius Accessor (JavaScript)
DESCRIPTION: This snippet creates a radial line generator and sets its radius accessor using the .radius() method. The accessor function receives a data point (d) and should return the radius (distance from the origin), similar to the y-accessor for a Cartesian line.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const line = d3.lineRadial().radius((d) => r(d.temperature));
```

----------------------------------------

TITLE: Initializing Random Points Data JavaScript
DESCRIPTION: Initializes a seeded random number generator using D3 and generates an array of 1000 random 2D points. This data is typically used for demonstrations or visualizations, such as calculating a convex hull. It depends on D3's random number generation utilities.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-polygon.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import PlotRender from "./components/PlotRender.js";

const random = d3.randomNormal.source(d3.randomLcg(42))();
const points = Array.from({length: 1000}, () => [random(), random()]);
```

----------------------------------------

TITLE: Selecting First Child by Selector D3.js JavaScript
DESCRIPTION: This snippet uses `selection.selectChild` to select the first direct child element of each selected paragraph (`<p>`) that matches the selector `<b>`. It returns a new selection containing the first bold child for each paragraph, propagating parent data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_18

LANGUAGE: javascript
CODE:
```
d3.selectAll("p").selectChild("b") // the first <b> child of every <p>
```

----------------------------------------

TITLE: Adding Single Data Point to Quadtree (quadtree.add) - JavaScript
DESCRIPTION: Adds a single data point to the quadtree. The point's coordinates are derived using the current x and y accessors, and the quadtree's extent is automatically expanded if the point falls outside.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
const tree = d3.quadtree().add([0, 0]);
```

----------------------------------------

TITLE: Formatting Strings with Padding and Alignment - D3.js - JavaScript
DESCRIPTION: Explains the usage of the new `c` directive in `d3.format` for handling character data (literal strings). This directive allows applying padding and alignment rules (right `>`, center `^`, left `<`) to strings, providing a convenient way to implement padding similar to other libraries.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_26

LANGUAGE: JavaScript
CODE:
```
d3.format(">10c")("foo"); // "       foo"
d3.format("^10c")("foo"); // "   foo    "
d3.format("<10c")("foo"); // "foo       "
```

----------------------------------------

TITLE: Constructing Format Specifier Object D3.js JavaScript
DESCRIPTION: Creates a `FormatSpecifier` object directly from a configuration object instead of parsing a string. This provides an alternative way to define format specifiers programmatically by setting properties like `type` and `precision`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_24

LANGUAGE: javascript
CODE:
```
new d3.FormatSpecifier({type: "f", precision: 1})
```

----------------------------------------

TITLE: Initializing D3.js Radial Link Generator - JavaScript
DESCRIPTION: This snippet demonstrates how to create a new radial link generator instance using `d3.linkRadial()`. It configures the generator by setting the `angle` accessor to use the 'x' property of the data object and the `radius` accessor to use the 'y' property. This configuration is common for visualizing links in a radial tree layout.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-link.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const link = d3.linkRadial()
    .angle((d) => d.x)
    .radius((d) => d.y);
```

----------------------------------------

TITLE: Drawing D3 Symbol to Path Context - JavaScript
DESCRIPTION: Demonstrates how to use the .draw() method of a D3 symbol type (d3.symbolCircle) to render it onto a d3.pathRound context. The snippet shows creating a path context, drawing the symbol onto it with a specified size, and then converting the path to its string representation. Requires the d3-path and d3-shape modules.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_16

LANGUAGE: js
CODE:
```
const path = d3.pathRound(3);
const circle = d3.symbolCircle.draw(path, 64);
path.toString(); // "M4.514,0A4.514,4.514,0,1,1,-4.514,0A4.514,4.514,0,1,1,4.514,0"
```

----------------------------------------

TITLE: Setting Rendering Context on D3 Arc Generator (JavaScript)
DESCRIPTION: Configures the arc generator to draw directly onto a specified Canvas 2D rendering context. When a context is set, the generator produces path method calls on that context instead of returning an SVG path data string. The specified `context` must be a valid CanvasRenderingContext2D instance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_23

LANGUAGE: JavaScript
CODE:
```
const context = canvas.getContext("2d");
const arc = d3.arc().context(context);
```

----------------------------------------

TITLE: d3-brush Generated SVG Structure - HTML
DESCRIPTION: This HTML snippet illustrates the typical SVG structure that the d3-brush module generates within the target group element it is applied to. It includes the main `<g class="brush">` container, an `<rect class="overlay">` for capturing interaction events over the brushable area, a `<rect class="selection">` representing the currently selected region, and multiple `<rect class="handle">` elements for interactive resizing of the selection.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-brush.md#_snippet_2

LANGUAGE: html
CODE:
```
<g class="brush" fill="none" pointer-events="all" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);">
  <rect class="overlay" pointer-events="all" cursor="crosshair" x="0" y="0" width="960" height="500"></rect>
  <rect class="selection" cursor="move" fill="#777" fill-opacity="0.3" stroke="#fff" shape-rendering="crispEdges" x="112" y="194" width="182" height="83"></rect>
  <rect class="handle handle--n" cursor="ns-resize" x="107" y="189" width="192" height="10"></rect>
  <rect class="handle handle--e" cursor="ew-resize" x="289" y="189" width="10" height="93"></rect>
  <rect class="handle handle--s" cursor="ns-resize" x="107" y="272" width="192" height="10"></rect>
  <rect class="handle handle--w" cursor="ew-resize" x="107" y="189" width="10" height="93"></rect>
  <rect class="handle handle--nw" cursor="nwse-resize" x="107" y="189" width="10" height="10"></rect>
  <rect class="handle handle--ne" cursor="nesw-resize" x="289" y="189" width="10" height="10"></rect>
  <rect class="handle handle--se" cursor="nwse-resize" x="289" y="272" width="10" height="10"></rect>
  <rect class="handle handle--sw" cursor="nesw-resize" x="107" y="272" width="10" height="10"></rect>
</g>
```

----------------------------------------

TITLE: Merging Selections (D3.js Selection) - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates splitting an initial `selection` into `odd` and `even` selections using `selection.select()` with functions that preserve index. The `selection.select()` function returns the current element (`this`) or `null` based on the index (`i`). Finally, it uses `odd.merge(even)` to combine these two selections back into a single `merged` selection, illustrating `selection.merge()`'s behavior based on element index.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_12

LANGUAGE: js
CODE:
```
const odd = selection.select(function(d, i) { return i & 1 ? this : null; ));
const even = selection.select(function(d, i) { return i & 1 ? null : this; ));
const merged = odd.merge(even);
```

----------------------------------------

TITLE: Setting Quadtree Extent (quadtree.extent) - JavaScript
DESCRIPTION: Explicitly sets or expands the bounding box (extent) of the quadtree to cover the specified rectangle defined by the points [[x0, y0], [x1, y1]].
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
const tree = d3.quadtree().extent([[0, 0], [1, 1]]);
```

----------------------------------------

TITLE: Calculating D3 Tree Layout Width (JS)
DESCRIPTION: This JavaScript function calculates the horizontal width required to render a D3 tree layout based on a given set of path data. It utilizes `d3.stratify` to convert the flat path data into a hierarchy and `d3.tree` with a fixed node size to compute node positions, then finds the total horizontal extent. This is used to determine the size needed for the visualization container.
SOURCE: https://github.com/d3/d3/blob/main/docs/what-is-d3.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
// https://github.com/observablehq/plot/issues/1703
function computeTreeWidth(paths) {
  const root = d3.tree().nodeSize([1, 1])(d3.stratify().path((d) => d.path)(paths));
  const [x1, x2] = d3.extent(root, (d) => d.x);
  return x2 - x1;
}
```

----------------------------------------

TITLE: Creating a Copy of a D3.js Quantile Scale (JavaScript)
DESCRIPTION: Creates an independent duplicate of the quantile scale. The copied scale inherits all configurations (domain, range, etc.) at the time of copying, but subsequent changes to either the original or the copy do not affect the other.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const c1 = d3.scaleQuantile(d3.schemeBlues[5]);
const c2 = c1.copy();
```

----------------------------------------

TITLE: Setting D3 Band Scale Rounding Dynamically (JS-Vue)
DESCRIPTION: Demonstrates enabling or disabling rounding for the band scale using the `.round()` method, controlled by a Vue reactive variable `round`. The argument should be a boolean value (`true` to enable, `false` to disable).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const x = d3.scaleBand(["a", "b", "c"], [0, 960]).round({{round}});
```

----------------------------------------

TITLE: Creating Value Grid Array for D3 Contours
DESCRIPTION: Provides an example of how to populate a 1D array (`values`) to represent a 2D grid of size `n`x`m`. It iterates through the grid cells (i, j) and calculates a value for each cell using a mathematical function (`goldsteinPrice`), storing the result in the `values` array at the linear index `i + jn`. This array is suitable for input to the `contours` generator.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/contour.md#_snippet_2

LANGUAGE: javascript
CODE:
```
var n = 256, m = 256, values = new Array(n * m);
for (var j = 0.5, k = 0; j < m; ++j) {
  for (var i = 0.5; i < n; ++i, ++k) {
    values[k] = goldsteinPrice(i / n * 4 - 2, 1 - j / m * 3);
  }
}
```

----------------------------------------

TITLE: Setting Render Context for D3 Radial Area (JavaScript)
DESCRIPTION: Sets the rendering context for the radial area generator, typically a Canvas 2D rendering context. If a context is set, the generator will render the area directly to the canvas instead of returning an SVG path string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const context = canvas.getContext("2d");
const area = d3.areaRadial().context(context);
```

----------------------------------------

TITLE: Setting Alignment with D3 point.align() - JavaScript/Vue
DESCRIPTION: Shows how to set the alignment (distribution of leftover space) of a D3 point scale using the `align()` method. The alignment value, between 0 and 1, is dynamically provided using Vue interpolation from a ref named `align`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#_snippet_9

LANGUAGE: javascript-vue
CODE:
```
const x = d3.scalePoint(["a", "b", "c"], [0, 960]).align({{align}});
```

----------------------------------------

TITLE: Fetching ArrayBuffer Data with d3-fetch in JavaScript
DESCRIPTION: This snippet shows how to fetch a binary file from a URL and get its content as an ArrayBuffer using `d3.buffer`. It returns a promise that resolves to the ArrayBuffer.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_3

LANGUAGE: js
CODE:
```
const buffer = await d3.buffer("example.db");
```

----------------------------------------

TITLE: Creating Quadtree with Accessors and Data (d3.quadtree/x/y/addAll) - JavaScript
DESCRIPTION: Illustrates creating a quadtree, setting custom x and y coordinate accessors using chaining, and then adding an iterable collection of data points. This configures how coordinates are extracted from each data item before adding.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const tree = d3.quadtree().x(x).y(y).addAll(data);
```

----------------------------------------

TITLE: Calling path.lineTo Method - d3-path JavaScript
DESCRIPTION: Demonstrates the `lineTo` method on a d3-path instance, drawing a straight line from the current point to the specified coordinates (200, 200). This corresponds to the SVG "L" command.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#_snippet_4

LANGUAGE: javascript
CODE:
```
path.lineTo(200, 200);
```

----------------------------------------

TITLE: Setting Default Locale Javascript
DESCRIPTION: Illustrates how to set the global default locale for d3-format using `d3.formatDefaultLocale`. This affects subsequent calls to `d3.format` and `d3.formatPrefix` unless a specific locale object is used. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const enUs = d3.formatDefaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
```

----------------------------------------

TITLE: Creating Filtered Day Interval with d3.timeDay.filter (JavaScript)
DESCRIPTION: This snippet demonstrates creating a new custom time interval by applying a filter function to an existing interval (`d3.timeDay`). The provided test function `(d) => (d.getDate() - 1) % 10 === 0` keeps only the date boundaries where the day of the month (1-based) minus one is a multiple of 10, effectively defining an interval that includes the 1st, 11th, 21st, and potentially 31st of each month.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_12

LANGUAGE: javascript
CODE:
```
d3.timeDay.filter((d) => (d.getDate() - 1) % 10 === 0)
```

----------------------------------------

TITLE: Getting the Domain of a D3.js Quantile Scale (JavaScript)
DESCRIPTION: Returns the current input domain array of sampled numeric values that is configured for the quantile scale. This array is a sorted copy of the values previously provided to the domain setter.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#_snippet_4

LANGUAGE: javascript
CODE:
```
color.domain() // [2700, 2850, 2850, 2900, 2900, 2900, 2900, …]
```

----------------------------------------

TITLE: Blurring ImageData D3.js JavaScript
DESCRIPTION: This snippet illustrates how to blur an HTML Canvas `ImageData` object using `d3.blurImage`. It assumes `context.getImageData` has retrieved image data and then applies a blur with a radius of 5 to the RGBA layers independently. The `d3.blurImage` function modifies the input `imageData` object in-place.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/blur.md#_snippet_2

LANGUAGE: js
CODE:
```
const imageData = context.getImageData(0, 0, width, height);
d3.blurImage(imageData, 5);
```

----------------------------------------

TITLE: Interpolating Hue Angle in D3.js
DESCRIPTION: Creates an interpolator specifically for numeric hue angles (e.g., from 20 to 340 degrees). It uses the shortest path between hues. The interpolator function returns a number in the range [0, 360) for a given input `t` between 0 and 1. The example evaluates the interpolator at t=0.5.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_13

LANGUAGE: javascript
CODE:
```
d3.interpolateHue(20, 340)(0.5)
```

----------------------------------------

TITLE: Loading and Parsing SVG with d3-fetch in JavaScript
DESCRIPTION: This snippet fetches an SVG file from a URL using `d3.svg`, parses it, and returns the resulting SVG Document object. It returns a promise that resolves once the file is fetched and parsed.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_11

LANGUAGE: js
CODE:
```
const document = await d3.svg("example.svg");
```

----------------------------------------

TITLE: Loading and Parsing HTML with d3-fetch in JavaScript
DESCRIPTION: This snippet fetches an HTML file from a URL using `d3.html`, parses its content, and returns the resulting HTML Document object. It returns a promise that resolves once the file is fetched and parsed.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_7

LANGUAGE: js
CODE:
```
const document = await d3.html("example.html");
```

----------------------------------------

TITLE: Formatting Date/Time with Default Locale (D3 v4.x JavaScript)
DESCRIPTION: This snippet shows examples of using the d3.timeFormat function with standard format specifiers (%c, %x, %X) and the default U.S. English locale in D3 version 4.0. It demonstrates the resulting 12-hour time and concise date representations, aligning with common conventions and browser behavior for `toLocaleString`. Dependencies include the d3-time-format module.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_59

LANGUAGE: javascript
CODE:
```
var now = new Date;
d3.timeFormat("%c")(new Date); // "6/23/2016, 2:01:33 PM"
d3.timeFormat("%x")(new Date); // "6/23/2016"
d3.timeFormat("%X")(new Date); // "2:01:38 PM"
```

----------------------------------------

TITLE: Default Brush Extent Accessor Function - JavaScript
DESCRIPTION: This JavaScript function provides the default implementation used by `brush.extent()` to determine the brushable area if no extent is explicitly set. It calculates the extent based on the owner SVG element's `viewBox` attribute if present, or its `width` and `height` attributes, returning the top-left and bottom-right corners as `[[x0, y0], [x1, y1]]`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-brush.md#_snippet_3

LANGUAGE: javascript
CODE:
```
function defaultExtent() {
  var svg = this.ownerSVGElement || this;
  if (svg.hasAttribute("viewBox")) {
    svg = svg.viewBox.baseVal;
    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
  }
  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
}
```

----------------------------------------

TITLE: Rendering Internal Delaunay Edges Manually JavaScript
DESCRIPTION: This snippet shows how to iterate through the `halfedges` array to draw the internal edges of the Delaunay triangulation onto a specified drawing context. It skips halfedges where `j >= i` to avoid drawing each edge twice.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const {points, halfedges, triangles} = delaunay;
for (let i = 0, n = halfedges.length; i < n; ++i) {
  const j = halfedges[i];
  if (j < i) continue;
  const ti = triangles[i];
  const tj = triangles[j];
  context.moveTo(points[ti * 2], points[ti * 2 + 1]);
  context.lineTo(points[tj * 2], points[tj * 2 + 1]);
}
```

----------------------------------------

TITLE: Copying Quantize Scale (JavaScript)
DESCRIPTION: Creates a shallow copy of an existing quantize scale using the copy() method. The copy is independent of the original scale, meaning changes to one do not affect the other. This is useful for creating variations of a scale without modifying the original.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const c1 = d3.scaleQuantize(d3.schemeBlues[5]);
const c2 = c1.copy();
```

----------------------------------------

TITLE: Getting Fractional Digits Setting
DESCRIPTION: Calls the `.digits()` method on a geographic path generator without any arguments. This method returns the current number of fractional digits configured for formatting coordinates in generated SVG path strings.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_8

LANGUAGE: javascript
CODE:
```
path.digits() // 3
```

----------------------------------------

TITLE: Adding Number to D3 Adder JavaScript
DESCRIPTION: Adds the specified numeric value to the current sum maintained by the D3 Adder instance. This method modifies the adder's internal state and returns the adder instance for chaining.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#_snippet_1

LANGUAGE: js
CODE:
```
adder.add(42)
```

----------------------------------------

TITLE: Clamping HSL Color Channels in D3.js (JavaScript)
DESCRIPTION: Returns a new HSL color instance with its channel values clamped to their standard ranges. The hue (h) is clamped to [0, 360), and saturation (s), lightness (l), and opacity are clamped to [0, 1]. This is useful for ensuring color values remain within valid bounds.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_19

LANGUAGE: js
CODE:
```
d3.hsl(400, 2, 0.5).clamp() // {h: 40, s: 1, l: 0.5, opacity: 1}
```

----------------------------------------

TITLE: Example Path Data Input JavaScript
DESCRIPTION: Presents an example of tabular data represented as an array of strings, where each string represents a path using a delimiter (like '/'). This format is suitable for use with the d3.stratify().path() method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const paths = [
  "axes.js",
  "channel.js",
  "context.js",
  "legends.js",
  "legends/ramp.js",
  "marks/density.js",
  "marks/dot.js",
  "marks/frame.js",
  "scales/diverging.js",
  "scales/index.js",
  "scales/ordinal.js",
  "stats.js",
  "style.js",
  "transforms/basic.js",
  "transforms/bin.js",
  "transforms/centroid.js",
  "warnings.js",
];
```

----------------------------------------

TITLE: Executing d3.quickselect on an Array - JavaScript
DESCRIPTION: This snippet demonstrates calling d3.quickselect on the previously defined 'numbers' array with k=8. The function rearranges the array in-place such that the element at index 8 is the 9th smallest value, with smaller elements preceding it and larger elements following it.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
d3.quickselect(numbers, 8)
```

----------------------------------------

TITLE: Reduce Adjacent Pairs with D3.js Reducer
DESCRIPTION: Illustrates using a reducer function with `d3.pairs`. The reducer is applied to each adjacent pair, transforming the output from pairs into a single value per pair.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#_snippet_5

LANGUAGE: javascript
CODE:
```
d3.pairs([1, 1, 2, 3, 5], (a, b) => b - a) // [0, 1, 1, 2]
```

----------------------------------------

TITLE: Generating Range with d3.range - Floating Point Step
DESCRIPTION: Demonstrates using d3.range with a floating-point step, highlighting potential precision issues due to IEEE 754 floating-point representation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_10

LANGUAGE: javascript
CODE:
```
d3.range(0, 1, 0.2) // [0, 0.2, 0.4, 0.6000000000000001, 0.8]
```

----------------------------------------

TITLE: Getting Current Projection
DESCRIPTION: Calls the `.projection()` method on a geographic path generator without arguments. This returns the currently configured geographic projection object that the generator uses to transform geographic coordinates into planar coordinates before rendering or calculation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_11

LANGUAGE: javascript
CODE:
```
path.projection() // a d3.geoAlbers instance
```

----------------------------------------

TITLE: Offsetting Date by One UTC Day with d3.utcDay.offset (JavaScript)
DESCRIPTION: This snippet shows how to add a specified number of time intervals (`step`) to a date without first flooring the date to the interval boundary. Using `d3.utcDay.offset(new Date(), 1)` adds one UTC day to the current date, returning a new Date object that maintains the original time components but is exactly 24 hours later in UTC time.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_8

LANGUAGE: javascript
CODE:
```
d3.utcDay.offset(new Date(), 1) // the same time tomorrow
```

----------------------------------------

TITLE: Fetching Blob Data with d3-fetch in JavaScript
DESCRIPTION: This snippet demonstrates fetching a binary file from a URL and obtaining its content as a Blob object using `d3.blob`. It returns a promise that resolves to the Blob.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_2

LANGUAGE: js
CODE:
```
const blob = await d3.blob("example.db");
```

----------------------------------------

TITLE: Checking Color Displayability with displayable() Method D3 JavaScript
DESCRIPTION: Uses the displayable() method to check if the color can be displayed on standard hardware, returning true if all channel values and opacity are within their valid ranges.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_10

LANGUAGE: javascript
CODE:
```
d3.color("steelblue").displayable() // true
```

----------------------------------------

TITLE: Using transition.tween for Custom Attribute Interpolation in D3.js
DESCRIPTION: This snippet demonstrates how to use `transition.tween()` to perform custom attribute interpolation, similar to `transition.attr`. It defines a tween named `"attr.fill"` that interpolates the element's `fill` attribute from its current value to `"blue"` using `d3.interpolateRgb`. The function returned by the tween factory is called on each transition frame with the eased time `t`, updating the `fill` attribute.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/modifying.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
transition.tween("attr.fill", function() {
  const i = d3.interpolateRgb(this.getAttribute("fill"), "blue");
  return function(t) {
    this.setAttribute("fill", i(t));
  };
});
```

----------------------------------------

TITLE: Checking Polygon Containment JavaScript
DESCRIPTION: Demonstrates checking if a given point lies inside a specified polygon using `d3.polygonContains`. It takes a polygon (array of points) and a single point `[x, y]` as inputs and returns a boolean value (`true` if the point is inside, `false` otherwise).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-polygon.md#_snippet_4

LANGUAGE: javascript
CODE:
```
d3.polygonContains([[1, 1], [1.5, 0], [2, 1]], [1.5, 0.667]) // true
```

----------------------------------------

TITLE: Filtering Using Selection.select and Function D3.js JavaScript
DESCRIPTION: This snippet demonstrates achieving a filtering effect using `selection.select` with a function. The function checks the index (`i`) and returns the current element (`this`) if the index is odd (`i & 1`), otherwise it returns `null`. This preserves the original selection's index structure.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_17

LANGUAGE: javascript
CODE:
```
const even = d3.selectAll("tr").select(function(d, i) { return i & 1 ? this : null; });
```

----------------------------------------

TITLE: Configuring D3 Symlog Scale Constant (JavaScript)
DESCRIPTION: Creates a new symlog scale instance with a specified domain and range and immediately sets its `constant` property to 2 using method chaining. The constant influences the transformation's behavior, especially near zero, and can be adjusted to suit the data distribution.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/symlog.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const x = d3.scaleSymlog([0, 100], [0, 960]).constant(2);
```

----------------------------------------

TITLE: Set D3 Bin Thresholds (Sturges) (JS)
DESCRIPTION: Configures the bin generator to use Sturges' formula (`d3.thresholdSturges`) to automatically calculate the number of bins based on the number of data points. This is the default method for `d3.bin()` and assumes numerical data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const bin = d3.bin().thresholds(d3.thresholdSturges);
```

----------------------------------------

TITLE: Set D3 Bin Thresholds (Function) (JS)
DESCRIPTION: Sets the bin generator's thresholds using a function. This function is invoked with the array of extracted values, the minimum domain value, and the maximum domain value. It should return either an array of threshold values or the desired number of bins.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const bin = d3.bin().thresholds((values) => [d3.median(values)]);
```

----------------------------------------

TITLE: Creating Locale Format Prefix Function Javascript
DESCRIPTION: Shows how to use the `formatPrefix` method of a locale object (or the default locale as shown here via the alias) to create a formatter. The formatter applies an SI prefix based on the reference value (1e-6, micro) and formats the numbers using fixed-point notation. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_20

LANGUAGE: javascript
CODE:
```
const f = d3.formatPrefix(",.0", 1e-6);
```

----------------------------------------

TITLE: Calculating Fixed Precision D3.js JavaScript
DESCRIPTION: Calculates a suggested decimal precision for fixed-point number notation (`f` format type) based on the minimum difference (`step`) between values to be formatted. This function is useful for ensuring consistent decimal places based on data granularity.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_25

LANGUAGE: javascript
CODE:
```
d3.precisionFixed(0.01) // 2
```

----------------------------------------

TITLE: Loading Image with d3-fetch in JavaScript
DESCRIPTION: This snippet fetches an image file from a URL using `d3.image`. It returns a promise that resolves to the Image object once the image data is loaded.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#_snippet_8

LANGUAGE: js
CODE:
```
const image = await d3.image("example.png");
```

----------------------------------------

TITLE: Implicit Domain Construction in D3 Ordinal Scale
DESCRIPTION: Shows how the domain can be inferred implicitly when not explicitly set and the unknown value is default (`d3.scaleImplicit`). Each unique value passed to the scale is added to the domain in call order, mapping it to the next available range value. Retrieving the domain shows the inferred order. Requires the D3 library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const color = d3.scaleOrdinal(["red", "green", "blue"]);
color("b"); // "red"
color("a"); // "green"
color("c"); // "blue"
color.domain(); // inferred ["b", "a", "c"]
```

----------------------------------------

TITLE: Configuring D3 Stack Offset None - JavaScript
DESCRIPTION: This snippet demonstrates setting the stack offset to `d3.stackOffsetNone`. This is the default offset, which simply applies a zero baseline, stacking all series positively from the x-axis. It is configured via the `.offset()` method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_22

LANGUAGE: javascript
CODE:
```
const stack = d3.stack().offset(d3.stackOffsetNone);
```

----------------------------------------

TITLE: Creating Constant Return Function Helper (JavaScript)
DESCRIPTION: This JavaScript function `constant` takes a value `x` and returns a new function. When the returned function is invoked, it simply returns the original value `x`. This pattern replaces the functionality of the removed `d3.functor` for easily creating functions that always return a specific constant. No external dependencies required beyond standard JavaScript.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_29

LANGUAGE: JavaScript
CODE:
```
function constant(x) {
  return function() {
    return x;
  };
}
```

----------------------------------------

TITLE: Merge Iterables with D3.js (Set Example)
DESCRIPTION: Demonstrates that `d3.merge` works with any iterable of iterables, not just arrays. This example shows merging Sets nested within a Set, producing a flattened array.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.merge(new Set([new Set([1]), new Set([2, 3])])) // [1, 2, 3]
```

----------------------------------------

TITLE: Setting Angle Accessor for D3 Radial Area (JavaScript)
DESCRIPTION: Sets the angle accessor function for the radial area generator. This function is invoked for each data point to determine its angle in radians (0 at 12 o'clock). It replaces the x-accessor used in Cartesian area generators.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const area = d3.areaRadial().angle((d) => a(d.Date));
```

----------------------------------------

TITLE: Drawing Radial Line with D3 (JavaScript)
DESCRIPTION: This code applies a configured D3 radial line generator (line) to data to generate SVG path data and sets it as the 'd' attribute of an SVG path element. It assumes 'svg' is an SVG selection and 'line' is a d3.lineRadial instance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
svg.append("path").attr("d", line(data)).attr("stroke", "currentColor");
```

----------------------------------------

TITLE: Equivalent of point.rangeRound() - JavaScript
DESCRIPTION: Provides the equivalent method chaining call (`range(range).round(true)`) that achieves the same result as using the `rangeRound(range)` method on a D3 point scale.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#_snippet_4

LANGUAGE: javascript
CODE:
```
point.range(range).round(true)
```

----------------------------------------

TITLE: Selecting Directly with Filtered Selector D3.js JavaScript
DESCRIPTION: This snippet shows an alternative way to achieve the filtering shown previously by using `d3.selectAll` directly with the `:nth-child(even)` selector. This selects the even table rows in a single step, although element indices may differ from the chained filter approach.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_15

LANGUAGE: javascript
CODE:
```
const even = d3.selectAll("tr:nth-child(even)");
```

----------------------------------------

TITLE: Setting Link Source Accessor - JavaScript
DESCRIPTION: Configures the source accessor for a link generator to extract the source coordinates from the first element of an array `d`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_4

LANGUAGE: js
CODE:
```
const link = d3.linkHorizontal().source((d) => d[0]);
```

----------------------------------------

TITLE: Creating Identity Scale with Range D3.js JavaScript
DESCRIPTION: Constructs a new `d3.scaleIdentity()` instance with a specified range (which also defines its domain). Identity scales map input values directly to output values and are often used for mapping pixel coordinates or when no transformation is needed. Requires the d3-scale module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_24

LANGUAGE: javascript
CODE:
```
const x = d3.scaleIdentity([0, 960]);
```

----------------------------------------

TITLE: Setting D3 Arc Start Angle Property
DESCRIPTION: Configures the arc generator to use a constant value (Math.PI / 4 radians) for its start angle. Subsequent calls to the generator will use this value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
const arc = d3.arc().startAngle(Math.PI / 4);
```

----------------------------------------

TITLE: Extending Selection Prototype D3.js JavaScript
DESCRIPTION: This snippet demonstrates how to extend the D3.js selection prototype by adding a custom method named `checked`. This method can then be called on any D3 selection to get or set the `checked` property of the selected elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_2

LANGUAGE: javascript
CODE:
```
d3.selection.prototype.checked = function(value) {
  return arguments.length < 1
      ? this.property("checked")
      : this.property("checked", !!value);
};
```

----------------------------------------

TITLE: Default D3 Cluster Separation Function JavaScript
DESCRIPTION: This JavaScript function serves as the default accessor for the `cluster.separation` method. It calculates the separation between two neighboring leaf nodes (`a` and `b`), returning 1 if they share the same parent (are siblings) and 2 otherwise, influencing the horizontal spacing in the dendrogram.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/cluster.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function separation(a, b) {
  return a.parent == b.parent ? 1 : 2;
}
```

----------------------------------------

TITLE: Constructing Cubehelix Color in D3.js (JavaScript)
DESCRIPTION: Constructs a new Cubehelix color instance from a CSS Color Module Level 3 specifier string. The returned object exposes the h, s, and l channel values (hue, saturation, lightness) and opacity as properties. Cubehelix is a color space designed to be perceptually uniform and suitable for generating smooth color gradients.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_24

LANGUAGE: js
CODE:
```
d3.cubehelix("yellow") // {h: 56.942171677321085, s: 4.614386868039714, l: 0.8900004504279901, opacity: 1}
```

----------------------------------------

TITLE: Generating UTC Day Range with d3.utcDay.range (JavaScript)
DESCRIPTION: This snippet demonstrates using the `range()` method of the `d3.utcDay` interval to generate an array of date objects representing interval boundaries. It returns all UTC day boundaries (typically midnight UTC) starting from the beginning of "2014-01-01" up to, but not including, the beginning of "2015-01-01", effectively listing every day boundary in 2014 in UTC time.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_9

LANGUAGE: javascript
CODE:
```
d3.utcDay.range(new Date("2014-01-01"), new Date("2015-01-01")) // every day in 2014
```

----------------------------------------

TITLE: Calculating Prefix Precision D3.js JavaScript
DESCRIPTION: Calculates a suggested decimal precision for number formats using SI prefixes (`s` format type), considering both the step size between values and a reference value to determine the appropriate prefix. Useful for formatting large numbers with units.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_29

LANGUAGE: javascript
CODE:
```
d3.precisionPrefix(1e5, 1.3e6) // 1
```

----------------------------------------

TITLE: Calculating Full-Precision Sum D3 fsum JavaScript
DESCRIPTION: Computes the full-precision sum of an array of numeric values, providing greater accuracy compared to standard d3.sum for values where floating-point precision issues might arise. It takes an array of numbers as input.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#_snippet_3

LANGUAGE: js
CODE:
```
d3.fsum([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]) // 1
```

----------------------------------------

TITLE: Calculating Convex Hull JavaScript
DESCRIPTION: Illustrates finding the convex hull of a set of input points using `d3.polygonHull`, typically via Andrew’s monotone chain algorithm. It takes an array of points and returns a new array containing the points that form the convex hull in counterclockwise order, or null if there are fewer than three input points.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-polygon.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.polygonHull(points) // [[3.0872864263338777, -1.300100095019402], [1.6559368816733773, -2.5092525689499605], …]
```

----------------------------------------

TITLE: Example HTML with Custom Data Attributes - HTML
DESCRIPTION: This HTML snippet provides an example structure containing an unordered list (`<ul>`) with list items (`<li>`). Each list item includes an HTML5 custom data attribute (`data-username`). This structure is used in the surrounding text to illustrate how the D3 `selection.datum()` method can be used to access or set data on individual elements, particularly demonstrating access to the `dataset` property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_10

LANGUAGE: html
CODE:
```
<ul id="list">
  <li data-username="shawnbot">Shawn Allen</li>
  <li data-username="mbostock">Mike Bostock</li>
</ul>
```

----------------------------------------

TITLE: Removing Single Data Point from Quadtree (quadtree.remove) - JavaScript
DESCRIPTION: Removes a specific data point from the quadtree. The data point must be strictly equal (===) to an existing datum in the tree for removal to occur.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
tree.remove(data[0]);
```

----------------------------------------

TITLE: Default Start Angle Accessor Function in D3.js Ribbons
DESCRIPTION: This is the default accessor function used by a D3.js ribbon generator to get the start angle for a ribbon segment from the input data object. It returns the value of the 'startAngle' property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_9

LANGUAGE: javascript
CODE:
```
function startAngle(d) {
  return d.startAngle;
}
```

----------------------------------------

TITLE: Default End Angle Accessor Function in D3.js Ribbons
DESCRIPTION: This is the default accessor function used by a D3.js ribbon generator to get the end angle for a ribbon segment from the input data object. It returns the value of the 'endAngle' property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_10

LANGUAGE: javascript
CODE:
```
function endAngle(d) {
  return d.endAngle;
}
```

----------------------------------------

TITLE: Defining Reflective Transform with geoTransform - JavaScript
DESCRIPTION: Shows how to use `d3.geoTransform` to define a simple geometric transformation. This specific transform (`reflectY`) applies a reflection across the x-axis by negating the y-coordinate of points as they pass through the transform's stream.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/projection.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const reflectY = d3.geoTransform({
  point(x, y) {
    this.stream.point(x, -y);
  }
});
```

----------------------------------------

TITLE: Applying D3 Transform to SVG Element (SVG/JavaScript)
DESCRIPTION: This snippet shows how to apply a D3 `ZoomTransform` to an SVG element (represented by `g`) by explicitly constructing the SVG `transform` attribute string. It uses the transform object's `x`, `y`, and `k` properties to build a string with SVG transform functions (`translate` and `scale`). This method works but is less idiomatic in D3 compared to using the object's `toString` method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_16

LANGUAGE: SVG
CODE:
```
g.attr("transform", "translate(" + transform.x + "," + transform.y + ") scale(" + transform.k + ")");
```

----------------------------------------

TITLE: Computing Voronoi Diagram with Bounds (JavaScript, D3)
DESCRIPTION: This snippet demonstrates how to create a Delaunay triangulation from a set of points and then compute its associated Voronoi diagram. The `voronoi` method is called with a `bounds` array `[xmin, ymin, xmax, ymax]` to clip the resulting diagram. It requires the D3 library, specifically `d3.Delaunay`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const delaunay = d3.Delaunay.from(points);
const voronoi = delaunay.voronoi([0, 0, 640, 480]);
```

----------------------------------------

TITLE: Nicing Time Scale Domain in D3.js
DESCRIPTION: This snippet demonstrates using the `nice()` method on a time scale to extend its domain to start and end on visually appealing, rounded calendar values. It shows how a domain covering minutes within an hour is extended to cover half-hour boundaries. Requires the D3.js library, specifically the d3-scale module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/time.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const x = d3.scaleUtc().domain([new Date("2000-01-01T12:34Z"), new Date("2000-01-01T12:59Z")]).nice();
x.domain(); // [2000-01-01T12:30Z, 2000-01-01T13:00Z]
```

----------------------------------------

TITLE: Creating Cubehelix Color Interpolator in D3.js
DESCRIPTION: Creates a Cubehelix color space interpolator between two colors (e.g., "purple" and "orange") using a default gamma of 1.0. Input colors are converted to Cubehelix, and the shortest path between hues is used. The interpolator returns an RGB string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_8

LANGUAGE: javascript
CODE:
```
d3.interpolateCubehelix("purple", "orange")
```

----------------------------------------

TITLE: Equivalent Non-Chained Function Call for Transition Styling in D3 JavaScript
DESCRIPTION: Shows the direct, non-chained way of invoking the `color` function with a D3 transition object. This code achieves the same result as the `transition.call()` example but without using the method chaining facilitated by `.call()`. It explicitly creates the transition and passes it as the first argument to the `color` function.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/control-flow.md#_snippet_4

LANGUAGE: javascript
CODE:
```
color(d3.selectAll("div").transition(), "red", "blue");
```

----------------------------------------

TITLE: Parsing Format Specifier String D3.js JavaScript
DESCRIPTION: Parses a D3 format specification string into a structured object. This function helps deconstruct a format string to understand its components (fill, align, sign, etc.). It takes a format specifier string as input and returns a `FormatSpecifier` object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_22

LANGUAGE: javascript
CODE:
```
d3.formatSpecifier(".1f")
```

----------------------------------------

TITLE: Creating RGB Gamma Interpolator in D3.js
DESCRIPTION: Returns an interpolator factory for the RGB color space configured with a specific gamma value (e.g., 2.2). Calling the factory with start and end colors (e.g., "purple", "orange") produces an interpolator that applies gamma correction during interpolation, returning an RGB string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_12

LANGUAGE: javascript
CODE:
```
d3.interpolateRgb.gamma(2.2)("purple", "orange")
```

----------------------------------------

TITLE: Creating Gamma Random Number Generator - D3.js JavaScript
DESCRIPTION: This snippet illustrates creating a function for generating random numbers from a gamma distribution using d3.randomGamma. The distribution is defined by shape (k) and scale (theta) parameters and is often used for modeling waiting times.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
d3.randomGamma(2, 1)
```

----------------------------------------

TITLE: Getting Current Tick Label Padding D3.js JavaScript
DESCRIPTION: Retrieves the current padding value (in pixels) between the axis tick marks and their labels when called without any arguments. The return value is the pixel padding that was previously set using `tickPadding()`, or the default value (typically 3) if not explicitly set. This method allows checking the current label spacing configuration.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_26

LANGUAGE: javascript
CODE:
```
axis.tickPadding() // 0, as specified above
```

----------------------------------------

TITLE: Calculating Polygon Length JavaScript
DESCRIPTION: Shows how to calculate the total length of the perimeter of a polygon using `d3.polygonLength`. It takes a polygon (array of two-element point arrays) as input and returns a number representing the sum of the lengths of all its edges.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-polygon.md#_snippet_5

LANGUAGE: javascript
CODE:
```
d3.polygonLength([[1, 1], [1.5, 0], [2, 1]]) // 3.23606797749979
```

----------------------------------------

TITLE: Getting Latest Preceding UTC Monday with d3.utcMonday (JavaScript)
DESCRIPTION: This snippet demonstrates calling a specific UTC time interval function, `d3.utcMonday()`, without any arguments. When called in this manner, it defaults to using the current date and returns a new Date object representing the latest Monday boundary in UTC time that is less than or equal to the current time. This is equivalent to calling `d3.utcMonday.floor(new Date())`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.utcMonday() // the latest preceding Monday, UTC time
```

----------------------------------------

TITLE: Getting Selection Attribute D3.js JavaScript
DESCRIPTION: Retrieves the value of the specified attribute ("color") for the first non-null element in the selection. This is most useful when the selection is known to contain only one element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
selection.attr("color") // "red"
```

----------------------------------------

TITLE: Creating D3 Bisector with Comparator (JavaScript)
DESCRIPTION: Creates a new bisector function using a custom comparator. The comparator receives the data element `d` and the search value `x` and should return a signed distance. This is useful for custom sorting orders, such as descending order, when bisecting arrays of objects.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const bisector = d3.bisector((d, x) => d.Date - x);
```

----------------------------------------

TITLE: Blurring 1D Array D3.js JavaScript
DESCRIPTION: This snippet demonstrates applying a box blur to a 1D array of numbers using `d3.blur`. It first generates a random walk using `d3.cumsum` and then applies the blur with a radius of 5, smoothing the data. The `d3.blur` function modifies the input array in-place.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/blur.md#_snippet_0

LANGUAGE: js
CODE:
```
const numbers = d3.cumsum({length: 1000}, () => Math.random() - 0.5);
d3.blur(numbers, 5); // a smoothed random walk
```

----------------------------------------

TITLE: Generating Range with d3.range - Floating Point Division Issue
DESCRIPTION: Shows a potential pitfall when using floating-point division for the step in d3.range, which can lead to an unexpected number of elements due to precision errors (marked as not recommended).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_11

LANGUAGE: javascript
CODE:
```
d3.range(0, 1, 1 / 49) // 👎 returns 50 elements!
```

----------------------------------------

TITLE: Appending Element via Creator - D3.js Selection - JavaScript
DESCRIPTION: Illustrates how `selection.append()` can accept a function returned by `d3.creator()`. `d3.creator("div")` returns a function that, when called, creates a `div` element. `selection.append()` calls this function for each selected element. Returns a new selection containing the appended `div` elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_28

LANGUAGE: JavaScript
CODE:
```
selection.append(d3.creator("div"));
```

----------------------------------------

TITLE: Setting Diverging Scale Range using Piecewise Interpolator in D3.js
DESCRIPTION: An alternative way to set the range, explicitly creating a piecewise interpolator from a three-element array and passing it to the scale constructor. This demonstrates the internal mechanism used by the `.range()` method when given an array.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const color = d3.scaleDiverging(d3.piecewise(["blue", "white", "red"]));
```

----------------------------------------

TITLE: Checking for Subset Relationship - D3.js - JavaScript
DESCRIPTION: This snippet demonstrates the `d3.subset` function, used to determine if one iterable (*a*) is a subset of another (*b*). It returns `true` if every element in *a* is also present in *b`. The example verifies that `[1, 3]` is a subset of `[0, 2, 1, 3, 0]`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sets.md#_snippet_4

LANGUAGE: javascript
CODE:
```
d3.subset([1, 3], [0, 2, 1, 3, 0]) // true
```

----------------------------------------

TITLE: Getting Selection Style Property D3.js JavaScript
DESCRIPTION: Retrieves the current value of the specified style property ("color") for the first non-null element in the selection. It returns the inline value if present, otherwise the computed value. Most useful for single-element selections. Requires care with units.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
selection.style("color") // "red"
```

----------------------------------------

TITLE: Setting Element Datum from Dataset (D3.js Selection) - JavaScript
DESCRIPTION: This JavaScript snippet uses the `selection.datum()` method with a function argument. The function is evaluated for each selected element (`this` refers to the current DOM element) and returns the element's `dataset` property, which is an object containing HTML5 custom data attributes. This effectively binds the `dataset` object as the datum for each element in the selection.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_11

LANGUAGE: js
CODE:
```
selection.datum(function() { return this.dataset; })
```

----------------------------------------

TITLE: Converting D3 Selection to Array using Array From - JavaScript
DESCRIPTION: Provides an alternative method using the standard JavaScript `Array.from()` function to convert a D3 selection into an array of its elements. This achieves the same result as the `selection.nodes()` method. Requires a D3 selection object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#_snippet_6

LANGUAGE: javascript
CODE:
```
Array.from(selection)
```

----------------------------------------

TITLE: Configuring D3 Stack Order None - JavaScript
DESCRIPTION: This snippet sets the stack order to `d3.stackOrderNone`. This function maintains the original order of the series data as provided, effectively using the order defined by the key accessor. It is configured through the `.order()` method of the stack generator.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_18

LANGUAGE: javascript
CODE:
```
const stack = d3.stack().order(d3.stackOrderNone);
```

----------------------------------------

TITLE: Default Wheel Delta Calculation Function - D3 Zoom - JavaScript
DESCRIPTION: This JavaScript function is the default implementation for calculating the scaling factor from a WheelEvent for the D3 zoom behavior. It processes the event's deltaY and deltaMode properties, applying different multipliers based on the mode and whether the control key is pressed. The returned value determines the exponent for the scale factor change (2^delta).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
function wheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);
}
```

----------------------------------------

TITLE: Default Many-Body Strength Accessor | JavaScript
DESCRIPTION: This is the default function used by the D3 many-body force to determine the strength for each node when a custom strength is not specified. It returns a constant value of -30, causing a default repulsive force. It receives the node and its index as arguments, although they are unused in this default implementation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/many-body.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
function strength() {
  return -30;
}
```

----------------------------------------

TITLE: Default D3 Area Y0 Accessor Function - Javascript
DESCRIPTION: This is the default y0 accessor function. It always returns 0, which corresponds to the top of the SVG coordinate system by default, resulting in a 'hanging' area.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_14

LANGUAGE: javascript
CODE:
```
function y() {
  return 0;
}
```

----------------------------------------

TITLE: Checking Selection CSS Class D3.js JavaScript
DESCRIPTION: Checks if the first non-null element in the selection has the specified CSS class ("foo"). Returns true if present, false otherwise. Most useful for single-element selections.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
selection.classed("foo") // true, perhaps
```

----------------------------------------

TITLE: Summing Nodes Based on Data Value (JavaScript)
DESCRIPTION: Applies a custom function to each node's data to calculate a value, which is then summed up the hierarchy chain to the root. This example counts nodes whose data has a truthy `value` property. It requires a D3 hierarchy node and is often a prerequisite for layout algorithms like treemap or pack.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
root.sum((d) => d.value ? 1 : 0);
```

----------------------------------------

TITLE: Interpolating Numbers within Strings (D3.js)
DESCRIPTION: This snippet uses d3.interpolateString to interpolate between two strings containing numerical values and static text ("20px" and "32px"). The function identifies the numbers (20 and 32) and interpolates them numerically, while keeping the static parts ("px") constant. Evaluating at t = 0.5 results in "26px".
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_3

LANGUAGE: js
CODE:
```
d3.interpolateString("20px", "32px")(0.5) // "26px"
```

----------------------------------------

TITLE: Default D3 Pie Pad Angle Accessor Function (JS)
DESCRIPTION: This snippet illustrates the default function used by the D3 pie generator for the pad angle accessor when no custom function or number is specified. It simply returns a constant value of 0, meaning no padding is applied by default.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/pie.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function padAngle() {
  return 0;
}
```

----------------------------------------

TITLE: Loading D3 v4 Bundle and Plugin (HTML)
DESCRIPTION: Shows how to load the default D3 v4 bundle followed by an optional plugin (d3-scale-chromatic) using separate script tags with CDN links. Plugins extend the functionality of the main D3 object.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_4

LANGUAGE: HTML
CODE:
```
<script src="https://d3js.org/d3.v4.js"></script>
<script src="https://d3js.org/d3-scale-chromatic.v0.3.js"></script>
```

----------------------------------------

TITLE: Iterating with D3 Selection Each Method - JavaScript
DESCRIPTION: Demonstrates using the `selection.each` method to iterate over selected parent elements. Inside the loop, it selects child elements within the current parent and updates their text content based on parent and child data. Requires a D3 selection object (`parent`) and child elements with the class `.child`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#_snippet_0

LANGUAGE: javascript
CODE:
```
parent.each(function(p, j) {
  d3.select(this)
    .selectAll(".child")
      .text(d => `child ${d.name} of ${p.name}`);
});
```

----------------------------------------

TITLE: Creating Pareto Random Number Generator - D3.js JavaScript
DESCRIPTION: This snippet shows how to use d3.randomPareto to create a function that generates random numbers following a Pareto distribution. This distribution is characterized by a shape parameter (alpha) and is commonly used for modeling phenomena where a few items account for a large proportion of the total.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
d3.randomPareto(6)
```

----------------------------------------

TITLE: Setting Selection Inner HTML D3.js JavaScript
DESCRIPTION: Sets the inner HTML of all selected elements to the specified constant value ("Hello, <i>world</i>!"), replacing any existing child elements. A function can provide dynamic HTML content, and null clears the content. Intended for small bits of HTML, not complex data-driven content.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
selection.html("Hello, <i>world</i>!")
```

----------------------------------------

TITLE: Getting Selection Property D3.js JavaScript
DESCRIPTION: Retrieves the value of the specified DOM element property ("checked") for the first non-null element in the selection. This is used for properties like value or checked. Most useful for single-element selections.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
selection.property("checked") // true, perhaps
```

----------------------------------------

TITLE: Appending Element Manually - D3.js Selection - JavaScript
DESCRIPTION: Provides an equivalent implementation of appending an element using the `selection.select` method and native DOM manipulation (`appendChild`). The function is called for each selected element (`this` refers to the element) and returns the appended element, which `select` then includes in the new selection.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
d3.selectAll("div").select(function() {
  return this.appendChild(document.createElement("p"));
});
```

----------------------------------------

TITLE: Set D3 Bin Thresholds (Scott) (JS)
DESCRIPTION: Configures the bin generator to use Scott's normal reference rule (`d3.thresholdScott`) to automatically calculate the number of bins. This method is suitable for numerical data and assumes a normal distribution.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const bin = d3.bin().thresholds(d3.thresholdScott);
```

----------------------------------------

TITLE: Ordinal Scale Default Implicit Domain Extension
DESCRIPTION: Shows the default behavior of d3.scaleOrdinal where accessing the scale with an unknown value implicitly adds that value to the scale's domain and assigns it the next available value in the range.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_40

LANGUAGE: JavaScript
CODE:
```
var x = d3.scaleOrdinal()
    .domain([0, 1])
    .range(["red", "green", "blue"]);

x.domain(); // [0, 1]
x(2); // "blue"
x.domain(); // [0, 1, 2]
```

----------------------------------------

TITLE: Adding Click Listener using D3.js selection.on (JavaScript)
DESCRIPTION: Demonstrates how to attach a 'click' event listener to all `<p>` elements selected by `d3.selectAll`. When a paragraph is clicked, the listener function executes, logging the event object to the console. Requires D3.js selection module. The listener receives the DOM event object as the first argument.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/events.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
d3.selectAll("p").on("click", (event) => console.log(event))
```

----------------------------------------

TITLE: Calculating Full-Precision Cumulative Sum D3 fcumsum JavaScript
DESCRIPTION: Computes the full-precision cumulative sum of an array of numeric values, returning a Float64Array where each element is the sum of the preceding elements and the current one. This provides higher precision for cumulative calculations than standard d3.cumsum.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#_snippet_5

LANGUAGE: js
CODE:
```
d3.fcumsum([1, 1e-14, -1]) // [1, 1.00000000000001, 1e-14]
```

----------------------------------------

TITLE: Configuring Linear Scale with Cubehelix Interpolation D3.js JavaScript
DESCRIPTION: Configures a d3.scaleLinear with a custom interpolator from the d3-interpolate module, specifically using d3.interpolateCubehelix with a specified gamma value. It sets the domain and range and then applies the modified interpolator factory. Requires the d3-scale and d3-interpolate modules.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_15

LANGUAGE: javascript
CODE:
```
const color = d3.scaleLinear()
    .domain([10, 100])
    .range(["brown", "steelblue"])
    .interpolate(d3.interpolateCubehelix.gamma(3));
```

----------------------------------------

TITLE: Constructing Gray Color in D3.js (JavaScript)
DESCRIPTION: Constructs a new CIELAB color instance representing a shade of gray. It takes a single lightness value (l) and sets the a and b channels to 0, with an optional opacity. This provides a convenient way to create achromatic colors within the LAB space.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_21

LANGUAGE: js
CODE:
```
d3.gray(50) // {l: 50, a: 0, b: 0, opacity: 1}
```

----------------------------------------

TITLE: Default Target Y Accessor for D3 forceY
DESCRIPTION: This is the default function used by the `forceY` force to determine the target y-coordinate for each node. It returns a constant value of 0, pushing nodes towards the origin along the y-axis. The function is invoked once per node upon initialization or when the y-coordinate accessor is set.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/position.md#_snippet_4

LANGUAGE: javascript
CODE:
```
function y() {
  return 0;
}
```

----------------------------------------

TITLE: Creating Custom Mercator Projection with geoProjection - JavaScript
DESCRIPTION: Demonstrates how to create a custom spherical Mercator projection using `d3.geoProjection`. It takes a raw projection function that transforms spherical coordinates [lambda, phi] in radians to planar coordinates [x, y]. D3 handles scaling, translation, and rotation externally.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/projection.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
var mercator = d3.geoProjection(function(x, y) {
  return [x, Math.log(Math.tan(Math.PI / 4 + y / 2))];
});
```

----------------------------------------

TITLE: Configuring D3 Request MIME Type (v4.0) JavaScript
DESCRIPTION: Illustrates how to set a custom MIME type for a request in D3 v4.0. Unlike v3.x where it was an argument, v4.0 requires using the `.mimeType()` method on the request object before initiating the request with `.get()`. This example fetches an SVG file.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_38

LANGUAGE: javascript
CODE:
```
d3.xml("file.svg").mimeType("image/svg+xml").get(function(error, svg) {
  …
});
```

----------------------------------------

TITLE: Constructing LCh Color in D3.js (JavaScript)
DESCRIPTION: Constructs a new CIELChₐₐ color instance from a CSS Color Module Level 3 specifier string. This constructor is equivalent to d3.hcl but specifies the channel values as L, C, and H (lightness, chroma, hue). The returned object exposes the l, c, and h properties.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#_snippet_23

LANGUAGE: js
CODE:
```
d3.lch("yellow") // {h: 99.57458688693687, c: 94.70776566727464, l: 97.60712516622824, opacity: 1}
```

----------------------------------------

TITLE: Setting d3.interpolateZoom Curvature Javascript
DESCRIPTION: Shows how to set a custom curvature (`rho`) for the zoom interpolation path using the `.rho()` method before creating and using the interpolator. Requires the D3.js `d3-interpolate` module. The `.rho()` method modifies the interpolator factory, which is then called with the start and end view arrays to produce the interpolator; this interpolator is finally called with `t` to get the interpolated view.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/zoom.md#_snippet_1

LANGUAGE: javascript
CODE:
```
d3.interpolateZoom.rho(0.5)([30, 30, 40], [135, 85, 60])(0.5) // [72, 52, 51.09549882328188]
```

----------------------------------------

TITLE: Initializing D3 Axis Examples in Vue
DESCRIPTION: This JavaScript snippet within a Vue 3 setup script imports D3 and Vue reactivity features, defines a domain and range for scales, sets up an interval timer using `d3.interval` to periodically update the domain of a scale, and cleans up the timer on component unmount.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import * as d3 from "d3";
import {shallowRef, onMounted, onUnmounted} from "vue";
import ExampleAxis from "./components/ExampleAxis.vue";

const domain = shallowRef([0, 100]);
const range = [20, 668];

let timer;

onMounted(() => {
  timer = d3.interval(() => {
    const x = Math.random() * 100;
    const l = Math.random() * 100;
    domain.value = [x, x + l];
  }, 5000);
});

onUnmounted(() => {
  timer?.stop();
});
```

----------------------------------------

TITLE: Calculating Tick Increment with d3.tickIncrement - Step < 1
DESCRIPTION: Illustrates d3.tickIncrement returning the negative inverse when the tick step is less than one. This helps ensure tick values are represented precisely.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.tickIncrement(1, 9, 20) // -2, meaning a tick step 0.5
```

----------------------------------------

TITLE: Default D3 Arc Corner Radius Accessor Function
DESCRIPTION: Shows the default function used by the arc generator to access the corner radius. By default, it returns 0, meaning no rounded corners.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
function cornerRadius() {
  return 0;
}
```

----------------------------------------

TITLE: Loading D3 v4 Default Bundle (HTML)
DESCRIPTION: Provides the HTML script tag necessary to include the complete default bundle of D3 version 4 into a web page using a CDN link. This makes the entire library accessible under the global `d3` object.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_3

LANGUAGE: HTML
CODE:
```
<script src="https://d3js.org/d3.v4.js"></script>
```

----------------------------------------

TITLE: Calculating Rounding Precision D3.js JavaScript
DESCRIPTION: Calculates a suggested decimal precision for format types that round to significant digits (`r` format type), based on the step size and the maximum absolute value expected. Helps maintain significant figures appropriately.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_31

LANGUAGE: javascript
CODE:
```
d3.precisionRound(0.01, 1.01) // 3
```

----------------------------------------

TITLE: Initializing D3 Poisson Distribution Function - JavaScript
DESCRIPTION: Creates a function to generate random numbers from a Poisson distribution with a mean (lambda) of 400. The returned function can be called to get random integer values distributed according to the Poisson distribution.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
d3.randomPoisson(400)
```

----------------------------------------

TITLE: Preventing Default Wheel Behavior - D3 Zoom - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to prevent the default browser behavior for wheel events on an element where the D3 zoom behavior is applied. This is useful to prevent page scrolling when zooming via the mouse wheel, especially if you always want to consume the wheel events for zooming regardless of the scale extent.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
selection
    .call(zoom)
    .on("wheel", event => event.preventDefault());
```

----------------------------------------

TITLE: Getting D3 Stack Order Accessor (JavaScript)
DESCRIPTION: This snippet demonstrates how to retrieve the current stack order accessor function or value from a D3 stack generator using the order() method without arguments.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
stack.order() // d3.stackOrderNone
```

----------------------------------------

TITLE: Invoking Callbacks with Custom Context and Arguments using dispatch.call in JavaScript
DESCRIPTION: This snippet illustrates using `dispatch.call()` to invoke "start" event callbacks while explicitly setting the `this` context (an object `{about: "I am a context object"}`) and passing arguments ("I am an argument") to the callback functions, similar to `Function.prototype.call`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dispatch.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
dispatch.call("start", {about: "I am a context object"}, "I am an argument");
```

----------------------------------------

TITLE: Creating and Using a Deterministic Shuffler with d3.shuffler - JavaScript
DESCRIPTION: This snippet demonstrates using d3.shuffler with a deterministic random number generator (d3.randomLcg) to create a predictable shuffle function. It then applies this shuffler function to an array, resulting in a consistent randomized order each time the code is executed with the same seed.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
d3.shuffler(d3.randomLcg(42))([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
```

----------------------------------------

TITLE: Interpolating Basis Spline (D3.js)
DESCRIPTION: This snippet demonstrates d3.interpolateBasis, which creates a B-spline interpolator for a set of numerical control points. This is different from linear interpolation. The interpolator smoothly curves through the values. Evaluating the interpolator at t = 0.5 for the values [0, 0.1, 0.4, 1] returns approximately 0.26.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_8

LANGUAGE: js
CODE:
```
d3.interpolateBasis([0, 0.1, 0.4, 1])(0.5) // 0.2604166666666667
```

----------------------------------------

TITLE: Using D3.js interpolateBasisClosed for Spline Interpolation - JavaScript
DESCRIPTION: Returns a uniform nonrational B-spline interpolator through the specified array of numbers. The interpolator provides cyclical C² continuity when evaluated over [0,1]. This example demonstrates evaluating the interpolator returned for the values [0, 0.1, 0.4, 1] at t = 0.5.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
d3.interpolateBasisClosed([0, 0.1, 0.4, 1])(0.5) // 0.45
```

----------------------------------------

TITLE: Creating Custom D3 UTC Day Interval with timeInterval - JavaScript
DESCRIPTION: Illustrates the use of the `d3.timeInterval` constructor to define a custom time interval. This specific example replicates the behavior of `d3.utcDay` by providing custom implementations for the `floor`, `offset`, `count`, and `field` functions, which handle UTC date manipulation and calculation. Requires the D3.js time module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#_snippet_18

LANGUAGE: javascript
CODE:
```
const utcDay = d3.timeInterval(
  (date) => date.setUTCHours(0, 0, 0, 0), // floor
  (date, step) => date.setUTCDate(date.getUTCDate() + step), // offset
  (start, end) => (end - start) / 864e5, // count
  (date) => date.getUTCDate() - 1 // field
);
```

----------------------------------------

TITLE: Permuting Array Elements using d3.permute - JavaScript
DESCRIPTION: This snippet shows how to use d3.permute to reorder elements of a source array based on an array of key indices. The function returns a new array where elements from the source are placed according to the specified indices in the keys array.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
d3.permute(["a", "b", "c"], [1, 2, 0])
```

----------------------------------------

TITLE: Listening to Multiple Dispatch Events in JavaScript
DESCRIPTION: Illustrates how the dispatcher.on method can now accept multiple event typenames separated by spaces. This allows a single listener function to be registered for multiple event types simultaneously.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
dispatcher.on("foo bar", function(message) {
  console.log(message);
});
```

----------------------------------------

TITLE: Formatting Single Row to CSV String (D3.js)
DESCRIPTION: Shows the use of d3.csvFormatRow to format a single array of strings into a CSV string. Unlike csvFormatRows, this function does not append a newline character at the end.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_15

LANGUAGE: javascript
CODE:
```
d3.csvFormatRow(["foo", "bar"]) // "foo,bar"
```

----------------------------------------

TITLE: Default Link Y Accessor - JavaScript
DESCRIPTION: Shows the default function used by the link generator to access the y-coordinate, assuming the data point is an array `d` and the y-coordinate is the second element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_15

LANGUAGE: js
CODE:
```
function y(d) {
  return d[1];
}
```

----------------------------------------

TITLE: Creating Sequential Scale with Default Domain and Interpolator in D3.js (JS)
DESCRIPTION: Constructs a new sequential scale using the default input domain of [0, 1] and the default identity interpolator function for the output range. Useful as a starting point before configuring.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#_snippet_2

LANGUAGE: js
CODE:
```
const identity = d3.scaleSequential();
```

----------------------------------------

TITLE: Dispatching Custom Event using D3.js selection.dispatch (JavaScript)
DESCRIPTION: Shows how to programmatically trigger a custom event named 'click' on the first `<p>` element selected by `d3.select`. This can be used to simulate user interaction or communicate between components. Requires D3.js selection module. Optional parameters can be provided to configure the dispatched event.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/events.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
d3.select("p").dispatch("click")
```

----------------------------------------

TITLE: Getting current time with d3.now() in JavaScript
DESCRIPTION: Demonstrates how to get the current time using `d3.now()`. This function provides a time value synchronized with the animation frame, suitable for timing animations and other time-sensitive operations within D3.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-timer.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
d3.now() // 1236.3000000715256
```

----------------------------------------

TITLE: Configuring D3 Stack Offset Wiggle - JavaScript
DESCRIPTION: This snippet shows how to configure a D3 stack with `d3.stackOffsetWiggle`. This offset is specifically designed for streamgraphs, minimizing the "wiggle" or change in slope between layers to create a smoother visual appearance. It is often used with the inside-out order and is set via the `.offset()` method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_24

LANGUAGE: javascript
CODE:
```
const stack = d3.stack().offset(d3.stackOffsetWiggle);
```

----------------------------------------

TITLE: Default Event Filter Function - D3 Zoom - JavaScript
DESCRIPTION: This JavaScript function serves as the default filter for the D3 zoom behavior, determining which input events should initiate a zoom gesture. It returns true for events unless they have the control key pressed (except for wheel events) or are initiated by a secondary mouse button (event.button is non-zero). Events returning falsey are ignored.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
function filter(event) {
  return (!event.ctrlKey || event.type === 'wheel') && !event.button;
}
```

----------------------------------------

TITLE: Initializing D3 Weibull Distribution Function - JavaScript
DESCRIPTION: Creates a function to generate random numbers from a Weibull distribution with a shape parameter (k) of 10. The location (a) defaults to 0 and scale (b) defaults to 1. The returned function can then be called repeatedly to generate random numbers.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
d3.randomWeibull(10)
```

----------------------------------------

TITLE: Lowering Element Manually - D3.js Selection - JavaScript
DESCRIPTION: Shows the DOM operation equivalent to `selection.lower()`. It uses `selection.each()` to iterate through selected elements. For each element (`this`), `parentNode.insertBefore(this, this.parentNode.firstChild)` removes the element from its current position and re-inserts it as the first child of its parent.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_22

LANGUAGE: JavaScript
CODE:
```
selection.each(function() {
  this.parentNode.insertBefore(this, this.parentNode.firstChild);
});
```

----------------------------------------

TITLE: Internal Interpolators for Multi-Value Range D3.js JavaScript
DESCRIPTION: Shows the equivalent d3-interpolate calls that a d3.scaleLinear internally performs when provided with a range array containing more than two values. Separate interpolators are created for each pair of adjacent values in the range. Requires the d3-interpolate module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_13

LANGUAGE: javascript
CODE:
```
const i0 = d3.interpolate("red", "white");
const i1 = d3.interpolate("white", "green");
```

----------------------------------------

TITLE: Converting D3 Transform to SVG String (JavaScript)
DESCRIPTION: Shows the implementation of the `transform.toString` method for a D3 transform object. It constructs an SVG transform attribute string in the format "translate(x,y) scale(k)" using the transform's internal `x`, `y`, and `k` properties. This method is useful for directly applying the D3 transform to SVG elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
function toString() {
  return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
}
```

----------------------------------------

TITLE: Initializing D3 Band Scale with Alignment (JavaScript)
DESCRIPTION: Creates a D3 band scale with a specified domain and range, and then sets the alignment using the `align()` method. The alignment value, typically between 0 and 1, controls how outer padding is distributed. This snippet shows setting alignment upon scale creation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
const x = d3.scaleBand(["a", "b", "c"], [0, 960]).align({{align}});
```

----------------------------------------

TITLE: Applying Prefix Precision to Format D3.js JavaScript
DESCRIPTION: Illustrates how to use `precisionPrefix` to determine the precision for an SI-prefix format string (`s`). It calculates precision based on step and value, then uses `d3.formatPrefix` to create the formatting function.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_30

LANGUAGE: javascript
CODE:
```
const p = d3.precisionPrefix(1e5, 1.3e6);
const f = d3.formatPrefix("." + p, 1.3e6);
f(1.1e6); // "1.1M"
f(1.2e6); // "1.2M"
f(1.3e6); // "1.3M"
```

----------------------------------------

TITLE: Create Discrete Sequential Scale with d3.schemeBlues JavaScript
DESCRIPTION: This snippet demonstrates how to create an ordinal scale using a discrete sequential color scheme from D3. It uses `d3.scaleOrdinal` and takes the array of colors for a specific size (e.g., 9 colors from `d3.schemeBlues`) as the range. Requires the `d3` library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const color = d3.scaleOrdinal(d3.schemeBlues[9]);
```

----------------------------------------

TITLE: Copying D3 Band Scale (JavaScript)
DESCRIPTION: Creates an exact, independent copy of an existing D3 band scale using the `copy()` method. The returned scale has the same configuration (domain, range, padding, etc.) as the original, but changes made to one will not affect the other.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
const x1 = d3.scaleBand(["a", "b", "c"], [0, 960]);
const x2 = x1.copy();
```

----------------------------------------

TITLE: Configuring D3 Stack Offset Diverging - JavaScript
DESCRIPTION: This snippet shows how to configure a D3 stack with `d3.stackOffsetDiverging`. This offset separates positive and negative values, stacking positive values upwards from zero and negative values downwards from zero, suitable for visualizing diverging data. It is set using the `.offset()` method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_21

LANGUAGE: javascript
CODE:
```
const stack = d3.stack().offset(d3.stackOffsetDiverging);
```

----------------------------------------

TITLE: Default D3 Area Defined Accessor Function - Javascript
DESCRIPTION: This is the default defined accessor function. It always returns true, assuming all input data points are valid and should be included in the area.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_20

LANGUAGE: javascript
CODE:
```
function defined() {
  return true;
}
```

----------------------------------------

TITLE: Creating Bernoulli Random Number Generator - D3.js JavaScript
DESCRIPTION: This snippet illustrates creating a function for generating random numbers (0 or 1) from a Bernoulli distribution using d3.randomBernoulli. The function is parameterized by the probability (p) of returning 1 (success).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
d3.randomBernoulli(0.5)
```

----------------------------------------

TITLE: Interpolating Colors with d3.interpolateLab (JavaScript)
DESCRIPTION: Shows how to interpolate between two color strings ("steelblue" and "brown") using the Lab color space with d3.interpolateLab. The resulting interpolator function is called immediately with t = 0.5 to find the midpoint color in RGB format.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate.md#_snippet_1

LANGUAGE: javascript
CODE:
```
d3.interpolateLab("steelblue", "brown")(0.5); // "rgb(142, 92, 109)"
```

----------------------------------------

TITLE: Retrieving Quantile Thresholds from D3.js Scale (JavaScript)
DESCRIPTION: Returns an array containing the numeric thresholds that divide the sorted input domain into quantiles. If the range has 'n' values, there will be 'n-1' thresholds, defining the boundaries between the output categories.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#_snippet_7

LANGUAGE: javascript
CODE:
```
color.quantiles() // [3475, 3800, 4300, 4950]
```

----------------------------------------

TITLE: Invert Linear Scale to Map Range to Domain - D3.js JavaScript
DESCRIPTION: Given a value from the scale's range, returns the corresponding value from the domain. This is useful for interactive features, such as determining the data value at a specific mouse position. Supported only for numeric ranges.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const x = d3.scaleLinear([10, 130], [0, 960]);
x.invert(80); // 20
x.invert(320); // 50
```

----------------------------------------

TITLE: Configuring D3 Stack Order Ascending - JavaScript
DESCRIPTION: This snippet demonstrates configuring a D3 stack generator to use the ascending order. The `d3.stackOrderAscending` function sorts series such that the smallest series (by sum of values) appears at the bottom of the stack. It is set using the `.order()` method of the `d3.stack()` instance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_15

LANGUAGE: javascript
CODE:
```
const stack = d3.stack().order(d3.stackOrderAscending);
```

----------------------------------------

TITLE: Initializing D3.js Quantile Scale with Domain and Range (JavaScript)
DESCRIPTION: Creates a new quantile scale instance. The domain is specified as a sampled array of numeric values (e.g., body mass from a 'penguins' dataset), and the range is set using a discrete array of values (e.g., a d3 color scheme).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const color = d3.scaleQuantile(penguins.map((d) => d.body_mass_g), d3.schemeBlues[5]);
```

----------------------------------------

TITLE: Spreading D3 Selection into Array - JavaScript
DESCRIPTION: Shows how to use the JavaScript spread syntax (`...`) to convert a D3 selection into a new array containing all its elements. This is another concise way to flatten a selection into a standard array, leveraging the selection's iterable nature. Requires a D3 selection object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const elements = [...selection];
```

----------------------------------------

TITLE: Getting Elements Array from D3 Selection - JavaScript
DESCRIPTION: Shows how to use the `selection.nodes` method to retrieve an array containing all non-null DOM elements within a D3 selection. The example selects all paragraph elements (`<p>`) and converts the selection into a standard JavaScript array of elements. Requires a D3 selection.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#_snippet_5

LANGUAGE: javascript
CODE:
```
d3.selectAll("p").nodes() // [p, p, p, …]
```

----------------------------------------

TITLE: Setting Domain of Threshold Scale - D3 - JavaScript
DESCRIPTION: Sets the domain of an already initialized threshold scale using the `.domain()` method. The provided array `[0, 1]` specifies the thresholds. The domain values must be in ascending order and match the number of range values minus one. Requires a D3 threshold scale instance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const color = d3.scaleThreshold(["red", "white", "green"]).domain([0, 1]);
```

----------------------------------------

TITLE: Setting D3 Band Scale Range (JS)
DESCRIPTION: Sets the output range of the band scale using the `.range()` method. It takes a two-element array specifying the continuous numeric range (e.g., `[0, 960]`) where the bands will be positioned. Values are coerced to numbers if necessary.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const x = d3.scaleBand().range([0, 960]);
```

----------------------------------------

TITLE: Getting Unknown Value from D3 Ordinal Scale
DESCRIPTION: Retrieves the current unknown value configured for an existing D3 ordinal scale by calling the `.unknown()` method without arguments. This example shows the default value, `d3.scaleImplicit`, which enables implicit domain construction. Requires an initialized D3 ordinal scale.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#_snippet_8

LANGUAGE: javascript
CODE:
```
color.unknown(); // d3.scaleImplicit
```

----------------------------------------

TITLE: Setting D3 Radial Line Canvas Context (JavaScript)
DESCRIPTION: This snippet obtains a 2D rendering context from a Canvas element and sets it as the context for a D3 radial line generator using the .context() method. The generator will draw directly onto this canvas instead of generating SVG path data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const context = canvas.getContext("2d");
const line = d3.lineRadial().context(context);
```

----------------------------------------

TITLE: Creating Normal Random Number Generator - D3.js JavaScript
DESCRIPTION: This snippet illustrates creating a function for generating random numbers from a normal (Gaussian) distribution using d3.randomNormal. It takes the mean and standard deviation as parameters to define the distribution's characteristics.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
d3.randomNormal(0, 1)
```

----------------------------------------

TITLE: Default Link Target Accessor - JavaScript
DESCRIPTION: Shows the default function used by the link generator to access the target data point, assuming the input object has a `target` property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_9

LANGUAGE: js
CODE:
```
function target(d) {
  return d.target;
}
```

----------------------------------------

TITLE: Removing Multiple Data Points from Quadtree (quadtree.removeAll) - JavaScript
DESCRIPTION: Removes an iterable collection of data points from the quadtree. Only points strictly equal to those provided in the collection are removed; others are ignored.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
tree.removeAll(data);
```

----------------------------------------

TITLE: Getting Inner Tick Size D3.js JavaScript
DESCRIPTION: Retrieves the current inner tick size of the D3.js axis when called without any arguments. The return value is the pixel size that was previously set for the inner ticks using either `tickSize()` or `tickSizeInner()`, or the default value (typically 6) if not explicitly set. Note that this specifically returns the inner size, even if `tickSize()` was used.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_20

LANGUAGE: javascript
CODE:
```
axis.tickSize() // 0, as specified above
```

----------------------------------------

TITLE: Getting Link Target Accessor - JavaScript
DESCRIPTION: Retrieves the currently configured target accessor function from a link generator.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_8

LANGUAGE: js
CODE:
```
link.target() // (d) => d[1]
```

----------------------------------------

TITLE: Example Tabular Data Input CSV
DESCRIPTION: Shows the required tabular format for input data when using d3.stratify. It includes 'name' and 'parent' columns representing the relationship structure. The root node has an empty parent value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#_snippet_0

LANGUAGE: csv
CODE:
```
name,parent
Eve,
Cain,Eve
Seth,Eve
Enos,Seth
Noam,Seth
Abel,Eve
Awan,Eve
Enoch,Awan
Azura,Eve
```

----------------------------------------

TITLE: Creating D3 Band Scale with Domain and Range (JS)
DESCRIPTION: Constructs a new band scale using `d3.scaleBand`. It takes an array for the domain (input values) and an array for the range (output pixel values) as arguments. This is the basic way to initialize a band scale.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const x = d3.scaleBand(["a", "b", "c"], [0, 960]);
```

----------------------------------------

TITLE: Getting D3 Band Scale Alignment (JavaScript)
DESCRIPTION: Retrieves the current alignment value of an existing D3 band scale by calling the `align()` method without any arguments. The returned value is in the range [0, 1], representing the scale's current alignment setting, which defaults to 0.5.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
x.align() // {{align}}
```

----------------------------------------

TITLE: Creating Binomial Random Number Generator - D3.js JavaScript
DESCRIPTION: This snippet shows how to create a function for generating random non-negative integers from a binomial distribution using d3.randomBinomial. The distribution models the number of successes in a fixed number of independent Bernoulli trials (n), each with a specific success probability (p).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
d3.randomBinomial(40, 0.5)
```

----------------------------------------

TITLE: Getting Selection Inner HTML D3.js JavaScript
DESCRIPTION: Retrieves the inner HTML content of the first non-null element in the selection. This includes HTML tags within the element. Most useful for single-element selections. Note that this method is generally not supported on SVG elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
selection.html() // "Hello, <i>world</i>!"
```

----------------------------------------

TITLE: Creating Irwin-Hall Random Number Generator - D3.js JavaScript
DESCRIPTION: This snippet illustrates creating a function for generating random numbers with an Irwin-Hall distribution using d3.randomIrwinHall. This distribution represents the sum of a specified number (n) of independent random variables uniformly distributed between 0 and 1.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
d3.randomIrwinHall(3)
```

----------------------------------------

TITLE: Getting the Range of a D3.js Quantile Scale (JavaScript)
DESCRIPTION: Returns the current array of discrete output values configured for the quantile scale. This array represents the possible output categories that input domain values are mapped to.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#_snippet_6

LANGUAGE: javascript
CODE:
```
color.range() // ["#eff3ff", "#bdd7e7", "#6baed6", "#3182bd", "#08519c"]
```

----------------------------------------

TITLE: Radial Tree Node Separation Function Variation - JavaScript
DESCRIPTION: Provides an alternative separation function suitable for radial tree layouts. It scales the standard sibling/non-sibling separation value by the depth of the nodes, resulting in reduced separation as nodes get further from the root.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/tree.md#_snippet_3

LANGUAGE: javascript
CODE:
```
function separation(a, b) {
  return (a.parent == b.parent ? 1 : 2) / a.depth;
}
```

----------------------------------------

TITLE: Getting D3 Area X Accessor - Javascript
DESCRIPTION: Returns the current x0 accessor function or value used by the area generator. This accessor determines the x-coordinate of the area's baseline.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_4

LANGUAGE: javascript
CODE:
```
area.x() // (d) => x(d.Date)
```

----------------------------------------

TITLE: Unbinding D3 Zoom Behavior Event Listeners (JavaScript)
DESCRIPTION: This snippet removes all event listeners that were bound by the d3-zoom behavior to a D3 selection. By setting the listener for the `.zoom` namespace to `null`, it effectively unbinds the zoom behavior from the selection, preventing further zoom interactions driven by the default listeners.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_1

LANGUAGE: javascript
CODE:
```
selection.on(".zoom", null);
```

----------------------------------------

TITLE: Copying D3 Ordinal Scale
DESCRIPTION: Creates an independent copy of an existing D3 ordinal scale using the `.copy()` method. Changes made to the original scale will not affect the copy, and vice versa. Requires an initialized D3 ordinal scale.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const c1 = d3.scaleOrdinal(["a", "b", "c"], d3.schemeTableau10);
const c2 = c1.copy();
```

----------------------------------------

TITLE: Copying Threshold Scale - D3 - JavaScript
DESCRIPTION: Creates an independent copy of an existing threshold scale instance using the `.copy()` method. Changes made to the original scale (`c1`) or the copied scale (`c2`) will not affect the other. Requires a D3 threshold scale instance.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const c1 = d3.scaleThreshold(d3.schemeBlues[5]);
const c2 = c1.copy();
```

----------------------------------------

TITLE: Setting D3 Area Y0 Accessor - Javascript
DESCRIPTION: Sets the y0 accessor for the area generator to the specified function or number. When generated, this accessor is invoked for each data element to determine the y-coordinate for the baseline, commonly set to the y-scale's output for zero.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const area = d3.area().y0(y(0));
```

----------------------------------------

TITLE: Initializing D3 Logistic Distribution Function - JavaScript
DESCRIPTION: Creates a function to generate random numbers from a Logistic distribution with a location parameter (a) of 0 and a scale parameter (b) of 1. The returned function can be invoked repeatedly to produce random numbers following this distribution.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
d3.randomLogistic(0, 1)
```

----------------------------------------

TITLE: Creating Locale UTC Parse Function with Specifier in JavaScript
DESCRIPTION: Shows the usage of the `locale.utcParse` method to return a function that parses strings into UTC Date objects according to the specified pattern, interpreting directives in UTC.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_14

LANGUAGE: javascript
CODE:
```
d3.utcParse("%b %d")
```

----------------------------------------

TITLE: Generating SVG Path from Radial Area Data (JavaScript)
DESCRIPTION: Applies the configured radial area generator to a data array to generate an SVG path data string. This string can then be used as the 'd' attribute of an SVG path element to render the radial area.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#_snippet_1

LANGUAGE: javascript
CODE:
```
svg.append("path").attr("d", area(data));
```

----------------------------------------

TITLE: Appending DIV Element - D3.js Selection - JavaScript
DESCRIPTION: Shows a simple example of appending a `div` element using `selection.append()`. This is the common way to add a new HTML element to selected elements. Returns a new selection containing the appended `div` elements.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_27

LANGUAGE: JavaScript
CODE:
```
selection.append("div");
```

----------------------------------------

TITLE: Setting Fixed Radius for D3.js Ribbons
DESCRIPTION: Configures a D3.js ribbon generator to use a fixed radius (e.g., 240 pixels) for both source and target points, rather than accessing it from the input data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const ribbon = d3.ribbon().radius(240);
```

----------------------------------------

TITLE: Setting D3 Stack Keys (JavaScript)
DESCRIPTION: This snippet shows how to set the keys accessor for a D3 stack generator. The keys determine the series (layers) in the stack layout. An array of key values is provided to the keys() method.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const stack = d3.stack().keys(["apples", "bananas", "cherries", "durians"]);
```

----------------------------------------

TITLE: Creating Locale Parse Function with Specifier in JavaScript
DESCRIPTION: Shows the fundamental usage of the `locale.parse` method to return a function that can parse strings into Date objects according to the specified pattern and the locale's conventions.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_12

LANGUAGE: javascript
CODE:
```
d3.timeParse("%b %d")
```

----------------------------------------

TITLE: Getting Current Quadtree Extent (quadtree.extent) - JavaScript
DESCRIPTION: Retrieves the current bounding box [[x0, y0], [x1, y1]] of the quadtree. Returns undefined if the tree has no extent (is empty and hasn't had extent set or points added).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
tree.extent() // [[0, 0], [2, 2]]
```

----------------------------------------

TITLE: Parsing ISO 8601 String in JavaScript
DESCRIPTION: Demonstrates using the built-in `d3.isoParse` function to parse a string formatted according to the ISO 8601 UTC standard into a Date object. It uses the Date constructor for parsing.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#_snippet_8

LANGUAGE: javascript
CODE:
```
d3.isoParse("2023-05-31T18:17:36.788Z")
```

----------------------------------------

TITLE: Creating Default Ribbon Generator in D3.js
DESCRIPTION: This snippet shows how to create a new ribbon generator with the default settings using the d3.ribbon() function.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const ribbon = d3.ribbon();
```

----------------------------------------

TITLE: Getting D3 Area Y Accessor - Javascript
DESCRIPTION: Returns the current y0 accessor function or value used by the area generator. This accessor determines the y-coordinate of the area's baseline.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_11

LANGUAGE: javascript
CODE:
```
area.y() // (d) => y(d.Date)
```

----------------------------------------

TITLE: Getting Selection Text Content D3.js JavaScript
DESCRIPTION: Retrieves the text content of the first non-null element in the selection. This returns the plain text content, stripping any HTML. Most useful for single-element selections.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
selection.text() // "Hello, world!"
```

----------------------------------------

TITLE: Creating D3 Radial Line Generator (JavaScript)
DESCRIPTION: This snippet demonstrates how to create a new D3.js radial line generator using the d3.lineRadial() constructor with default settings. The generator can then be configured and applied to data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const line = d3.lineRadial();
```

----------------------------------------

TITLE: Getting D3.js Symbol Path Data Precision (JavaScript)
DESCRIPTION: Retrieves the current setting for the maximum number of digits after the decimal separator used when generating SVG path data strings. Calling .digits() without arguments returns the configured precision.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_13

LANGUAGE: javascript
CODE:
```
symbol.digits()
```

----------------------------------------

TITLE: Installing D3 with pnpm
DESCRIPTION: This bash command shows how to install the D3.js library into a project using the pnpm package manager. This is typically done in the terminal within the project's root directory.
SOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#_snippet_7

LANGUAGE: bash
CODE:
```
pnpm add d3
```

----------------------------------------

TITLE: Creating Log-Normal Random Number Generator - D3.js JavaScript
DESCRIPTION: This snippet demonstrates creating a function that generates random numbers following a log-normal distribution via d3.randomLogNormal. The distribution is parameterized by the mean and standard deviation of the random variable's natural logarithm.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
d3.randomLogNormal(0, 1)
```

----------------------------------------

TITLE: Default D3 collide.radius Accessor (JavaScript)
DESCRIPTION: Shows the default function used by the collide.radius() method when no radius is explicitly set. This function simply returns a constant value of 1, indicating that all nodes will have a collision radius of 1 by default.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/collide.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
function radius() {
  return 1;
}
```

----------------------------------------

TITLE: Creating Beta Random Number Generator - D3.js JavaScript
DESCRIPTION: This snippet demonstrates how to use d3.randomBeta to create a function generating random numbers from a beta distribution. The distribution is defined by two positive shape parameters (alpha and beta) and is typically used to model probabilities or values constrained between 0 and 1.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
d3.randomBeta(3, 1.5)
```

----------------------------------------

TITLE: Setting D3 Area Context (Canvas) - Javascript
DESCRIPTION: Sets the rendering context for the area generator, typically a Canvas 2D context. If set, the generator will render directly to the context instead of returning an SVG path string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_23

LANGUAGE: javascript
CODE:
```
const context = canvas.getContext("2d");
const area = d3.area().context(context);
```

----------------------------------------

TITLE: Getting Current Axis Pixel Offset D3.js JavaScript
DESCRIPTION: Retrieves the current pixel offset value that has been applied to the D3.js axis when called without any arguments. The return value is the previously set offset value, or the default value (which is 0 on high-resolution devices and 0.5 on low-resolution devices) if not explicitly set. This method allows inspecting the current pixel offset configuration.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_28

LANGUAGE: javascript
CODE:
```
axis.offset() // 0
```

----------------------------------------

TITLE: Getting Current Outer Tick Size D3.js JavaScript
DESCRIPTION: Retrieves the current outer tick size of the D3.js axis when called without any arguments. The return value is the pixel size that was previously set specifically for the outer ticks (domain path ends) using `tickSizeOuter()`, or the default value (typically 6) if not explicitly set. This allows inspecting the configuration of the domain path ends.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_24

LANGUAGE: javascript
CODE:
```
axis.tickSizeOuter() // 0, as specified above
```

----------------------------------------

TITLE: Getting Alignment with D3 point.align() - JavaScript/Vue
DESCRIPTION: Shows how to retrieve the current alignment value of a D3 point scale using the `align()` method without arguments. The returned numeric value is displayed using Vue interpolation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#_snippet_10

LANGUAGE: javascript-vue
CODE:
```
x.align() // {{align}}
```

----------------------------------------

TITLE: Installing D3 with Yarn
DESCRIPTION: This bash command shows how to install the D3.js library into a project using the Yarn package manager. This is typically done in the terminal within the project's root directory.
SOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn add d3
```

----------------------------------------

TITLE: Formatting Number with Exponential Directive - D3.js - JavaScript
DESCRIPTION: Shows the default behavior of `d3.format` using the "e" directive without specifying a precision. It demonstrates that a default precision of 6 is used, resulting in consistent output strings for given numeric inputs, including results of floating-point arithmetic.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
var f = d3.format("e");
f(42);        // "4.200000e+1"
f(0.1 + 0.2); // "3.000000e-1"
```

----------------------------------------

TITLE: Default Y-coordinate Accessor (D3 Density Estimation, JavaScript)
DESCRIPTION: This is the default function used by the D3 density estimator to extract the y-coordinate from a data point. It assumes the data point is an array or tuple where the y-value is the second element (index 1). Users can specify a custom function using `density.y()` to handle different data structures.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/density.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
function y(d) {
  return d[1];
}
```

----------------------------------------

TITLE: Formatting Data to CSV (No Header, Specified Columns) JavaScript
DESCRIPTION: Formats an array of objects into a CSV string using `d3.csvFormatBody`, omitting the header row and including only the data for a specified list of columns.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#_snippet_11

LANGUAGE: javascript
CODE:
```
d3.csvFormatBody([{foo: "1", bar: "2"}], ["foo"]) // "1"
```

----------------------------------------

TITLE: Iterating D3 Quadtree Data with visit (v4.0) JavaScript
DESCRIPTION: Demonstrates how to iterate over all data points within a D3 v4.0 quadtree using the `visit` method. It checks `node.length` to identify leaf nodes and then iterates through data points linked via the `node.next` property.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_37

LANGUAGE: javascript
CODE:
```
quadtree.visit(function(node) {
  if (!node.length) {
    do {
      console.log(node.data);
    } while (node = node.next)
  }
});
```

----------------------------------------

TITLE: Adjusting Rounding Precision for Exponential D3.js JavaScript
DESCRIPTION: Demonstrates how to calculate precision using `precisionRound` for exponential formats (`e`), noting that an adjustment (subtracting 1) is often needed for this format type.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_34

LANGUAGE: javascript
CODE:
```
const p = Math.max(0, d3.precisionRound(0.01, 1.01) - 1);
const f = d3.format("." + p + "e");
f(0.01); // "1.00e-2"
f(1.01); // "1.01e+0"
```

----------------------------------------

TITLE: Blurring 2D Matrix D3.js JavaScript
DESCRIPTION: This snippet shows how to blur a 2D matrix using `d3.blur2`. It defines a matrix object with `width`, `height`, and a flat `data` array, then applies a blur with a radius of 1 horizontally and vertically (since `ry` defaults to `rx`). The function modifies the `data` array within the input matrix object in-place.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/blur.md#_snippet_1

LANGUAGE: js
CODE:
```
const matrix = {
  width: 4,
  height: 3,
  data: [
    1, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 1
  ]
};

d3.blur2(matrix, 1);
```

----------------------------------------

TITLE: Default Source Radius Accessor Function in D3.js Ribbons
DESCRIPTION: This is the default accessor function specifically for the source radius, used when a global radius is not set. It retrieves the radius from the input data object's 'radius' property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_7

LANGUAGE: javascript
CODE:
```
function radius(d) {
  return d.radius;
}
```

----------------------------------------

TITLE: Initializing Vue Component with D3 and Constants (Vue/JS)
DESCRIPTION: Sets up a Vue component script using `<script setup>`. It imports the D3 library, a custom `WorldMap` component, and defines `width` and `height` constants that are likely used for rendering the map.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/cylindrical.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import * as d3 from "d3";
import WorldMap from "../components/WorldMap.vue";

const width = 688;
const height = 400;
```

----------------------------------------

TITLE: Default Radius Accessor Function in D3.js Ribbons
DESCRIPTION: This is the default accessor function used by a D3.js ribbon generator to get the radius from the input data object. It is used for both source and target radius unless specified separately.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_6

LANGUAGE: javascript
CODE:
```
function radius(d) {
  return d.radius;
}
```

----------------------------------------

TITLE: Default Circle Precision Accessor (JavaScript)
DESCRIPTION: This function represents the default accessor used by `circle.precision()` when no explicit precision is set. It specifies the default precision for approximating the circle polygon as 2 degrees.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/shape.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
function precision() {
  return 2;
}
```

----------------------------------------

TITLE: Copying a Linear Scale Instance D3.js JavaScript
DESCRIPTION: Creates a d3.scaleLinear instance and then uses the `.copy()` method to produce an exact, independent duplicate of the scale. Changes made to the original scale (like setting a new domain or range) will not affect the copied scale, and vice-versa. Requires the d3-scale module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_21

LANGUAGE: javascript
CODE:
```
const x1 = d3.scaleLinear([0, 100], ["red", "blue"]);
const x2 = x1.copy();
```

----------------------------------------

TITLE: Creating a D3 Quadtree (v3.x vs v4.0) JavaScript
DESCRIPTION: Shows the change in API for creating a quadtree in D3 v4.0 compared to v3.x. V3 used a generator pattern, while v4.0 creates the quadtree directly and uses `addAll` to populate it. Both set the spatial extent using the `extent` method.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_36

LANGUAGE: javascript
CODE:
```
var quadtree = d3.geom.quadtree()
    .extent([[0, 0], [width, height]])
    (data);
```

LANGUAGE: javascript
CODE:
```
var quadtree = d3.quadtree()
    .extent([[0, 0], [width, height]])
    .addAll(data);
```

----------------------------------------

TITLE: Default d3.stratify parentId Accessor JavaScript
DESCRIPTION: Provides the default implementation of the parent id accessor used by d3.stratify if a custom accessor is not specified. It simply returns the value of the 'parentId' property from the input datum (d).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#_snippet_6

LANGUAGE: javascript
CODE:
```
function parentId(d) {
  return d.parentId;
}
```

----------------------------------------

TITLE: Default D3 Drag Event Filter
DESCRIPTION: This function is the default filter used by drag.filter(). It determines whether an initiating event should start a drag gesture. The default implementation ignores events if the Control key is pressed or if the button is not the primary mouse button (button 0).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
function filter(event) {
  return !event.ctrlKey && !event.button;
}
```

----------------------------------------

TITLE: Default Brush Filter Function - JavaScript
DESCRIPTION: This JavaScript function serves as the default filter for `brush.filter()`, determining which input events are allowed to initiate a brush gesture. It returns `true` (allowing the gesture) only if the control key (`event.ctrlKey`) is not pressed and the mouse button (`event.button`) is the primary button (typically 0). This prevents brushes from starting on right-clicks or control-clicks by default.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-brush.md#_snippet_4

LANGUAGE: javascript
CODE:
```
function filter(event) {
  return !event.ctrlKey && !event.button;
}
```

----------------------------------------

TITLE: Getting Pad Angle from D3 Arc Generator (JavaScript)
DESCRIPTION: Retrieves the current pad angle accessor function or value configured for the arc generator. If no angle was previously set, it returns the default accessor function. This method is called without any arguments.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_21

LANGUAGE: JavaScript
CODE:
```
arc.padAngle() // () => 0
```

----------------------------------------

TITLE: Looping to Add Data Points (quadtree.add) - JavaScript
DESCRIPTION: Shows the equivalent procedural code for adding multiple data points using individual calls to add, illustrating that quadtree.addAll is generally more efficient.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
for (let i = 0, n = data.length; i < n; ++i) {
  quadtree.add(data[i]);
}
```

----------------------------------------

TITLE: Setting Link Digits Precision - JavaScript
DESCRIPTION: Sets the maximum number of digits after the decimal point when the link generator outputs an SVG path data string (i.e., when the context is null).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_18

LANGUAGE: js
CODE:
```
const link = d3.link().digits(3);
```

----------------------------------------

TITLE: Default Link Source Accessor - JavaScript
DESCRIPTION: Shows the default function used by the link generator to access the source data point, assuming the input object has a `source` property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_6

LANGUAGE: js
CODE:
```
function source(d) {
  return d.source;
}
```

----------------------------------------

TITLE: Checking Existence in InternSet with Date Value in JavaScript
DESCRIPTION: Illustrates how to check if a Date value exists in an InternSet using the has() method. This works because InternSet correctly identifies the value even if it's a new Date instance representing the same date. Requires an initialized d3.InternSet.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/intern.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
dates.has(new Date("2022-01-01")) // true
```

----------------------------------------

TITLE: Initializing D3 Delaunay and Vue Data
DESCRIPTION: Imports necessary libraries (D3, Observable Plot, Vue) and initializes data points using a random normal distribution source derived from a LCG seed. It sets up a shallowRef for tracking neighbor state reactively within a Vue component.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/voronoi.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {shallowRef} from "vue";
import PlotRender from "../components/PlotRender.js";

const random = d3.randomNormal.source(d3.randomLcg(42))();
const points = Array.from({length: 1000}, () => [random(), random()]);
const neighborsState = shallowRef({i: -1, N: []});
```

----------------------------------------

TITLE: Adjusting Fixed Precision for Percentages D3.js JavaScript
DESCRIPTION: Demonstrates how to calculate precision using `precisionFixed` for percentage formats (`%`), noting that an adjustment (subtracting 2) is often needed for this format type.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_28

LANGUAGE: javascript
CODE:
```
const p = Math.max(0, d3.precisionFixed(0.05) - 2);
const f = d3.format("." + p + "%");
f(0.45); // "45%"
f(0.50); // "50%"
f(0.55); // "55%"
```

----------------------------------------

TITLE: Getting D3.js Symbol Context (JavaScript)
DESCRIPTION: Retrieves the current rendering context configured on a d3.symbol() generator instance. Calling .context() without arguments returns the Canvas 2D context or null if none is set.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_11

LANGUAGE: javascript
CODE:
```
symbol.context()
```

----------------------------------------

TITLE: Creating D3 Set with Accessor JavaScript
DESCRIPTION: Demonstrates creating a d3.set from an array of objects using an accessor function. The function extracts a specific property (site) from each object, resulting in a set of unique site values. This showcases how to use accessors with d3.set for transforming array data into a set.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_11

LANGUAGE: javascript
CODE:
```
var yields = [
  {yield: 22.13333, variety: "Manchuria", year: 1932, site: "Grand Rapids"},
  {yield: 26.76667, variety: "Peatland", year: 1932, site: "Grand Rapids"},
  {yield: 28.10000, variety: "No. 462", year: 1931, site: "Duluth"},
  {yield: 38.50000, variety: "Svansota", year: 1932, site: "Waseca"},
  {yield: 40.46667, variety: "Svansota", year: 1931, site: "Crookston"},
  {yield: 36.03333, variety: "Peatland", year: 1932, site: "Waseca"},
  {yield: 34.46667, variety: "Wisconsin No. 38", year: 1931, site: "Grand Rapids"}
];

var sites = d3.set(yields, function(d) { return d.site; }); // Grand Rapids, Duluth, Waseca, Crookston
```

----------------------------------------

TITLE: Checking for Superset Relationship - D3.js - JavaScript
DESCRIPTION: This snippet shows how to use the `d3.superset` function to check if one iterable (*a*) is a superset of another (*b*). It returns `true` if every element in *b* is also present in *a*, and `false` otherwise. The example confirms that `[0, 2, 1, 3, 0]` is a superset of `[1, 3]`.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sets.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.superset([0, 2, 1, 3, 0], [1, 3]) // true
```

----------------------------------------

TITLE: Generating Ribbon Path Data with Fixed Radius in D3.js
DESCRIPTION: Demonstrates generating an SVG path string for a ribbon using a generator configured with a fixed radius. The input data object no longer needs to include a 'radius' property on source/target.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_5

LANGUAGE: javascript
CODE:
```
ribbon({
  source: {startAngle: 0.7524114, endAngle: 1.1212972},
  target: {startAngle: 1.8617078, endAngle: 1.9842927}
})
```

----------------------------------------

TITLE: Getting D3 Band Scale Inner Padding (JS-Vue)
DESCRIPTION: Retrieves the current inner padding value by calling the `.paddingInner()` method without arguments. It returns the numeric value (typically between 0 and 1) representing the inner padding proportion.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
x.paddingInner() // {{paddingInner}}
```

----------------------------------------

TITLE: Getting All Data Points from Quadtree (quadtree.data) - JavaScript
DESCRIPTION: Returns an array containing all the original data objects that have been added to the quadtree.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
tree.data() // [[0, 0], [1, 2]]
```

----------------------------------------

TITLE: Creating Radial Scale with Domain and Range D3.js JavaScript
DESCRIPTION: Constructs a new `d3.scaleRadial()` instance with specified domain and range arrays. Radial scales are a variant of linear scales where the range is internally squared, making them suitable for mappings where the input corresponds linearly to the area of a radial mark. Requires the d3-scale module.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#_snippet_25

LANGUAGE: javascript
CODE:
```
const r = d3.scaleRadial([100, 200], [0, 480]);
```

----------------------------------------

TITLE: Resolving Namespace Prefix in D3
DESCRIPTION: Shows how the `d3.namespace(name)` function is used to qualify a name that may have a namespace prefix. If a colon is present, it looks up the prefix in `d3.namespaces` and returns an object with the full `space` URL and `local` name. Otherwise, it returns the original name.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/namespaces.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
d3.namespace("svg:text") // {space: "http://www.w3.org/2000/svg", local: "text"}
```

----------------------------------------

TITLE: Initializing InternSet with Date Values in JavaScript
DESCRIPTION: Shows how to create an instance of d3.InternSet populated with initial values. It stores Date objects, which InternSet handles correctly unlike native Set due to its interning mechanism. Requires the D3 library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/intern.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const dates = new d3.InternSet([
  new Date("2021-01-01"),
  new Date("2022-01-01"),
  new Date("2023-01-01")
]);
```

----------------------------------------

TITLE: Getting D3 Stack Value Accessor (JavaScript)
DESCRIPTION: This snippet demonstrates how to retrieve the current value accessor function from a D3 stack generator using the value() method without arguments.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
stack.value() // (d, key) => d[key]
```

----------------------------------------

TITLE: Getting D3 Area X0 Accessor - Javascript
DESCRIPTION: Returns the current x0 accessor function or value used by the area generator. This accessor determines the x-coordinate of the area's baseline.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_6

LANGUAGE: javascript
CODE:
```
area.x0() // () => 20
```

----------------------------------------

TITLE: Setting D3 Area X Accessor - Javascript
DESCRIPTION: Sets the x accessor for the area generator. This method sets both x0 to the specified value/function and x1 to null, typically used for horizontally-oriented areas.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const area = d3.area().x((d) => x(d.Date));
```

----------------------------------------

TITLE: Setting D3 Arc Outer Radius Property
DESCRIPTION: Configures the arc generator to use a constant value (240) for its outer radius. Subsequent calls to the generator will use this value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
const arc = d3.arc().outerRadius(240);
```

----------------------------------------

TITLE: Selecting Root Element D3.js JavaScript
DESCRIPTION: This snippet uses the d3.selection() function to select the root element of the document, typically `document.documentElement`. It returns a selection containing this single element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const root = d3.selection();
```

----------------------------------------

TITLE: Default D3 Arc Inner Radius Accessor Function
DESCRIPTION: Shows the default function used by the arc generator to access the inner radius. It expects the data argument 'd' to have an 'innerRadius' property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
function innerRadius(d) {
  return d.innerRadius;
}
```

----------------------------------------

TITLE: Getting D3 Area Y1 Accessor - Javascript
DESCRIPTION: Returns the current y1 accessor function or value used by the area generator. This accessor determines the y-coordinate of the area's topline.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_16

LANGUAGE: javascript
CODE:
```
area.y1() // (d) => y(d.Close)
```

----------------------------------------

TITLE: Creating Mutable Projection with geoProjectionMutator - JavaScript
DESCRIPTION: Illustrates using `d3.geoProjectionMutator` and a factory function to create a custom projection (`conicCustom`) with parameters that can be changed after creation. A custom `.parallels()` method is added to update the internal raw projection via the `mutate` function.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/projection.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
function conicCustom() {
  var phi0 = 29.5,
      phi1 = 45.5,
      mutate = d3.geoProjectionMutator(conicFactory),
      projection = mutate(phi0, phi1);

  projection.parallels = function(_) {
    return arguments.length ? mutate(phi0 = +_[0], phi1 = +_[1]) : [phi0, phi1];
  };

  return projection;
}
```

----------------------------------------

TITLE: Getting Rounding Status with D3 point.round() - JavaScript/Vue
DESCRIPTION: Shows how to retrieve the current rounding setting of a D3 point scale using the `round()` method without arguments. The returned boolean value is displayed using Vue interpolation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#_snippet_6

LANGUAGE: javascript-vue
CODE:
```
x.round() // {{round}}
```

----------------------------------------

TITLE: Importing D3 and Components Vue Setup
DESCRIPTION: This code snippet initializes a Vue component using the Composition API's `<script setup>`. It imports the D3 library and two custom Vue components, UsMap and WorldMap, which are likely used to render maps using the D3 projections. It also defines constants for map dimensions.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/conic.md#_snippet_0

LANGUAGE: Vue
CODE:
```
import * as d3 from "d3";
import UsMap from "../components/UsMap.vue";
import WorldMap from "../components/WorldMap.vue";

const width = 688;
const height = 400;
```

----------------------------------------

TITLE: Getting Diverging Scale Interpolator in D3.js
DESCRIPTION: Retrieves the current interpolator function being used by the diverging scale. This allows inspection or reuse of the scale's output mapping logic, which is typically a function mapping a normalized value to an output value (like a color).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#_snippet_5

LANGUAGE: javascript
CODE:
```
color.interpolator() // d3.interpolateRdBu
```

----------------------------------------

TITLE: Default D3 Area X0 Accessor Function - Javascript
DESCRIPTION: This is the default x0 accessor function. It assumes input data elements are two-element arrays and extracts the first element ([0]) as the x-value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_7

LANGUAGE: javascript
CODE:
```
function x(d) {
  return d[0];
}
```

----------------------------------------

TITLE: Importing Dependencies and Defining Tree Data - JavaScript
DESCRIPTION: Imports the necessary libraries, Observable Plot and a custom Vue component for rendering. Defines the `gods` array containing hierarchical data represented as slash-separated strings, which will be used as input for the tree layout visualization.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/tree.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import * as Plot from "@observablehq/plot";
import PlotRender from "../components/PlotRender.js";

const gods = [
  "Chaos/Gaia/Mountains",
  "Chaos/Gaia/Pontus",
  "Chaos/Gaia/Uranus",
  "Chaos/Eros",
  "Chaos/Erebus",
  "Chaos/Tartarus"
];
```

----------------------------------------

TITLE: Getting D3 Area Curve Factory - Javascript
DESCRIPTION: Returns the current curve factory used by the area generator. This factory defines the method for interpolating between data points.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_22

LANGUAGE: javascript
CODE:
```
area.curve() // d3.curveStep
```

----------------------------------------

TITLE: Getting D3 Area Defined Accessor - Javascript
DESCRIPTION: Returns the current defined accessor function or value. This accessor determines whether a data point should be included in the area generation.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_19

LANGUAGE: javascript
CODE:
```
area.defined() // (d) => !isNaN(d.Close)
```

----------------------------------------

TITLE: Getting D3 Arc Outer Radius Accessor
DESCRIPTION: Retrieves the currently configured accessor function or constant value for the outer radius property of the arc generator.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
arc.outerRadius() // () => 240
```

----------------------------------------

TITLE: Retrieving D3 Symlog Scale Constant (JavaScript)
DESCRIPTION: Calls the `.constant()` method on an existing symlog scale instance (`x`) without any arguments. This method retrieves and returns the current value of the constant property that was previously set for the scale. The comment indicates the expected return value based on the previous configuration.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/symlog.md#_snippet_3

LANGUAGE: javascript
CODE:
```
x.constant() // 2
```

----------------------------------------

TITLE: Getting D3 Area X1 Accessor - Javascript
DESCRIPTION: Returns the current x1 accessor function or value used by the area generator. This accessor determines the x-coordinate of the area's topline.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_9

LANGUAGE: javascript
CODE:
```
area.x1() // (d) => x(d.Close)
```

----------------------------------------

TITLE: Getting D3 Area Y0 Accessor - Javascript
DESCRIPTION: Returns the current y0 accessor function or value used by the area generator. This accessor determines the y-coordinate of the area's baseline.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_13

LANGUAGE: javascript
CODE:
```
area.y0() // () => 360
```

----------------------------------------

TITLE: Getting Link X Accessor - JavaScript
DESCRIPTION: Retrieves the currently configured x-coordinate accessor function from a link generator.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_11

LANGUAGE: js
CODE:
```
link.x() // (d) => x(d.x)
```

----------------------------------------

TITLE: Raising Element Manually - D3.js Selection - JavaScript
DESCRIPTION: Demonstrates the DOM operation equivalent to `selection.raise()`. It uses `selection.each()` to iterate through selected elements. For each element (`this`), `parentNode.appendChild(this)` removes the element from its current position and re-inserts it as the last child of its parent.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_21

LANGUAGE: JavaScript
CODE:
```
selection.each(function() {
  this.parentNode.appendChild(this);
});
```

----------------------------------------

TITLE: Get D3 Bin Generator Property (JS)
DESCRIPTION: Retrieves the currently configured function or value for a specific property of the `d3.bin` generator, such as the value accessor, domain accessor, or threshold generator function. Calling a method without arguments returns its current setting.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#_snippet_2

LANGUAGE: javascript
CODE:
```
bin.value()
```

LANGUAGE: javascript
CODE:
```
bin.domain()
```

LANGUAGE: javascript
CODE:
```
bin.thresholds()
```

----------------------------------------

TITLE: Default Circle Center Accessor (JavaScript)
DESCRIPTION: This function represents the default accessor used by `circle.center()` when no explicit center is set. It specifies the default center of the circle at coordinates [0, 0], corresponding to 0° longitude and 0° latitude.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/shape.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
function center() {
  return [0, 0];
}
```

----------------------------------------

TITLE: Getting Point Radius Setting
DESCRIPTION: Calls the `.pointRadius()` method on a geographic path generator without any arguments. This returns the current value or function that is used to determine the radius when rendering GeoJSON Point or MultiPoint geometries. The default is 4.5.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#_snippet_14

LANGUAGE: javascript
CODE:
```
path.pointRadius() // 10
```

----------------------------------------

TITLE: Default Head Radius Accessor Function for D3.js Arrow Ribbons
DESCRIPTION: This is the default accessor function used by a D3.js ribbonArrow generator to determine the radius of the arrowhead. By default, it returns a fixed value of 10.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_12

LANGUAGE: javascript
CODE:
```
function headRadius() {
  return 10;
}
```

----------------------------------------

TITLE: Default Tree Node Separation Function - JavaScript
DESCRIPTION: Defines the default function used by the D3 tree layout to calculate the horizontal separation between adjacent nodes. It provides a greater separation (2) for nodes that are not siblings compared to nodes that share the same parent (1).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/tree.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function separation(a, b) {
  return a.parent == b.parent ? 1 : 2;
}
```

----------------------------------------

TITLE: Getting D3 Band Scale Outer Padding (JS-Vue)
DESCRIPTION: Retrieves the current outer padding value by calling the `.paddingOuter()` method without arguments. It returns the numeric value representing the outer padding multiple of the step size.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
x.paddingOuter() // {{paddingOuter}}
```

----------------------------------------

TITLE: Configuring Observable Plot with Delaunay/Voronoi Meshes
DESCRIPTION: This JavaScript object literal configures an Observable Plot visualization. It sets the plot dimensions and axis domains. Crucially, it defines three 'marks': a Delaunay mesh, a Voronoi mesh, and a set of dots representing the generated points. The meshes are computed internally by Observable Plot using libraries like d3-delaunay based on the provided 'points' data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay.md#_snippet_1

LANGUAGE: javascript
CODE:
```
{
  axis: null,
  width: 688,
  height: 688,
  x: {domain: [-4, 3.5]},
  y: {domain: [-3, 3.5]},
  marks: [
    Plot.delaunayMesh(points, {stroke: "currentColor", strokeOpacity: 0.3}),
    Plot.voronoiMesh(points, {stroke: "var(--vp-c-brand)", strokeOpacity: 1}),
    Plot.dot(points, {r: 2, fill: "currentColor"}),
  ]
}
```

----------------------------------------

TITLE: Getting Rendering Context from D3 Arc Generator (JavaScript)
DESCRIPTION: Returns the current Canvas 2D rendering context associated with the arc generator. If no context has been set using `arc.context(context)`, this method returns `null`, indicating the generator will output SVG path data strings. It allows checking the current rendering mode.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_24

LANGUAGE: JavaScript
CODE:
```
arc.context() // context
```

----------------------------------------

TITLE: Cloning Element Manually - D3.js Selection - JavaScript
DESCRIPTION: Shows the underlying DOM manipulation performed by `selection.clone()`. It uses `selection.select()` to iterate through selected elements. Inside the callback, `cloneNode(deep)` creates a copy, and `parentNode.insertBefore(clone, nextSibling)` inserts it into the DOM right after the original element (`this`). Returns a selection of the newly created clones.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
selection.select(function() {
  return this.parentNode.insertBefore(this.cloneNode(deep), this.nextSibling);
});
```

----------------------------------------

TITLE: Retrieving Value from InternMap with Date Key in JavaScript
DESCRIPTION: Illustrates how to access an entry in an InternMap using the get() method with a Date object. This works because InternMap correctly identifies the key even if it's a new Date instance representing the same date. Requires an initialized d3.InternMap.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/intern.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
valueByDate.get(new Date("2022-01-01")) // 12
```

----------------------------------------

TITLE: Initializing Imports and Data Generation with D3/Vue
DESCRIPTION: This JavaScript code block, intended for a Vue setup script, imports necessary libraries for plotting and data handling. It then sets up a seeded D3 random number generator and generates an array of 1000 2D points with coordinates drawn from this generator. The seeding ensures reproducibility of the random points.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {shallowRef} from "vue";
import PlotRender from "./components/PlotRender.js";

const random = d3.randomNormal.source(d3.randomLcg(42))();
const points = Array.from({length: 1000}, () => [random(), random()]);
```

----------------------------------------

TITLE: Initializing D3 Cauchy Distribution Function - JavaScript
DESCRIPTION: Creates a function to generate random numbers from a Cauchy distribution with a location parameter (a) of 0 and a scale parameter (b) of 1. The description notes that the example plot is clipped due to the distribution's "fat tails". The returned function generates random numbers.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
d3.randomCauchy(0, 1) // above, clipped to [-5, 5] because “fat tails”
```

----------------------------------------

TITLE: Initializing D3 Radial Area Generator (JavaScript)
DESCRIPTION: Constructs a new radial area generator with the default settings. This is the starting point for configuring the generator before applying data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const area = d3.areaRadial();
```

----------------------------------------

TITLE: Enabling D3 Band Scale Rounding Explicitly (JS)
DESCRIPTION: Shows the equivalent operation to `rangeRound(range)` by explicitly chaining the `.range(range)` and `.round(true)` methods. This demonstrates that `rangeRound` is a shortcut for setting the range and enabling rounding.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
band.range(range).round(true)
```

----------------------------------------

TITLE: Initializing D3 Area Generator with Digits - JavaScript
DESCRIPTION: Creates a new D3 area generator instance and configures it to output path data coordinates with a maximum of 3 digits after the decimal point. This setting is only applied when the context is null, typically when generating SVG path strings.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
const area = d3.area().digits(3);
```

----------------------------------------

TITLE: Initializing Imports in Vue/JavaScript
DESCRIPTION: Imports the Observable Plot library, volcano data, and a custom component `PlotRender` for rendering plots. These imports are prerequisites for displaying the contour plot.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport {data as volcano} from \"./data/volcano.data.js\";\nimport PlotRender from \"./components/PlotRender.js\";\n\n<\/script>
```

----------------------------------------

TITLE: Getting Link Source Accessor - JavaScript
DESCRIPTION: Retrieves the currently configured source accessor function from a link generator.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_5

LANGUAGE: js
CODE:
```
link.source() // (d) => d[0]
```

----------------------------------------

TITLE: Getting the Root Node of Quadtree (quadtree.root) - JavaScript
DESCRIPTION: Returns the root node of the quadtree's internal structure. This node represents the entire extent of the tree and is the starting point for traversal.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
tree.root() // [{…}, empty × 2, {…}]
```

----------------------------------------

TITLE: Getting Current Interpolator from Sequential Scale in D3.js (JS)
DESCRIPTION: Retrieves the currently set interpolator function from a sequential scale. Returns the function that generates output values based on normalized input.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#_snippet_6

LANGUAGE: js
CODE:
```
color.interpolator() // d3.interpolateBlues
```

----------------------------------------

TITLE: Creating Exponential Random Number Generator - D3.js JavaScript
DESCRIPTION: This snippet demonstrates how to create a function generating random numbers from an exponential distribution using d3.randomExponential. The distribution is defined by the rate parameter (lambda), often used to model the time between events in a Poisson process.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
d3.randomExponential(1 / 40)
```

----------------------------------------

TITLE: Getting D3 Band Scale Inner Padding via Padding Method (JS-Vue)
DESCRIPTION: Retrieves the current inner padding value by calling the `.padding()` method without arguments. Note that calling `padding()` without arguments returns the *inner* padding, not a combined value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
x.padding() // {{padding}}
```

----------------------------------------

TITLE: Creating a Copy of the Quadtree (quadtree.copy) - JavaScript
DESCRIPTION: Returns a shallow copy of the quadtree. The internal node structure is duplicated, but the data objects stored within the nodes are referenced by the copy, not cloned.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
const t1 = d3.quadtree(data);
const t2 = t1.copy();
```

----------------------------------------

TITLE: Creating Geometric Random Number Generator - D3.js JavaScript
DESCRIPTION: This snippet demonstrates how to use d3.randomGeometric to create a function generating random non-negative integers from a geometric distribution. This distribution models the number of Bernoulli trials needed to get one success, based on a given success probability (p).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
d3.randomGeometric(0.1)
```

----------------------------------------

TITLE: Getting D3 Band Scale Rounding State (JS-Vue)
DESCRIPTION: Shows how to retrieve the current rounding state of the band scale by calling the `.round()` method without any arguments. It will return `true` if rounding is enabled, and `false` otherwise.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
x.round() // {{round}}
```

----------------------------------------

TITLE: Creating Bates Random Number Generator - D3.js JavaScript
DESCRIPTION: This snippet shows how to use d3.randomBates to create a function for generating random numbers with a Bates distribution. This distribution is the mean of a specified number (n) of independent random variables uniformly distributed between 0 and 1.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
d3.randomBates(3)
```

----------------------------------------

TITLE: Implementing Spherical Mercator Projection (Point) - JavaScript
DESCRIPTION: This JavaScript function implements the spherical Mercator projection for a single point. It takes longitude (`lambda`) and latitude (`phi`) in radians as input and returns an array containing the projected planar coordinates `[x, y]`. This demonstrates a basic point-transformation approach to projections, suitable primarily for point geometry.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function mercator(lambda, phi) {
  const x = lambda;
  const y = Math.log(Math.tan(Math.PI / 4 + phi / 2));
  return [x, y];
}
```

----------------------------------------

TITLE: Getting Value from D3 Adder JavaScript
DESCRIPTION: Returns the current sum accumulated by the D3 Adder instance as a standard IEEE 754 double-precision floating-point number. This is often used implicitly when coercing the adder to a number (e.g., using +adder or Number(adder)).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#_snippet_2

LANGUAGE: js
CODE:
```
adder.valueOf() // 42
```

----------------------------------------

TITLE: Getting Easing Function D3 Transition JavaScript
DESCRIPTION: Returns the current easing function for the first non-null element in a D3 transition. This is generally useful only if you know the transition contains exactly one element. Requires a D3 transition object.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#_snippet_6

LANGUAGE: javascript
CODE:
```
transition.ease() // d3.easeCubic
```

----------------------------------------

TITLE: Default D3 Drag Touchable Detector
DESCRIPTION: This function is the default detector used by drag.touchable(). It determines whether touch event listeners should be registered for a specific element. It checks for navigator.maxTouchPoints or the presence of the 'ontouchstart' property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
function touchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}
```

----------------------------------------

TITLE: Default Strength Accessor for D3 Position Forces
DESCRIPTION: This is the default function used by D3 position forces (like `forceX`, `forceY`, `forceRadial`) to determine the strength applied to each node. It returns a constant value of 0.1, indicating a gentle pull towards the target position. This function is invoked once per node upon initialization or when the strength accessor is set.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/position.md#_snippet_1

LANGUAGE: javascript
CODE:
```
function strength() {
  return 0.1;
}
```

----------------------------------------

TITLE: Default D3 Link Force Distance Accessor - JavaScript
DESCRIPTION: Shows the default function used by the D3.js link force to determine the target distance between linked nodes. This default function returns a fixed value of 30 pixels for all links, acting as a constant target length for the spring force.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#_snippet_5

LANGUAGE: javascript
CODE:
```
function distance() {
  return 30;
}
```

----------------------------------------

TITLE: Default Touch Detection Function - D3 Zoom - JavaScript
DESCRIPTION: This JavaScript function is the default detector used by the D3 zoom behavior to check if a given element supports touch input. It returns true if navigator.maxTouchPoints is truthy or if 'ontouchstart' is present in the element's properties, indicating potential touch capabilities. Touch event listeners are only registered if this function returns truthy for an element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
function touchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}
```

----------------------------------------

TITLE: Selecting Single Descendant using d3.selector - D3 - JavaScript
DESCRIPTION: This snippet shows an alternative way to select the first descendant element matching a selector. It uses the internal `d3.selector` utility function, demonstrating its equivalence to passing a string directly to the `.select()` method. It requires the `d3` object to be available.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_22

LANGUAGE: javascript
CODE:
```
const div = selection.select(d3.selector("div"));
```

----------------------------------------

TITLE: SVG Structure Generated by D3 Axis
DESCRIPTION: This HTML snippet shows the typical SVG structure generated by a D3 bottom-oriented axis. It consists of a parent group element, a `path` for the domain line, and multiple child `g` elements, each representing a tick with a `line` and `text` element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_4

LANGUAGE: html
CODE:
```
<g fill="none" font-size="10" font-family="sans-serif" text-anchor="middle">
  <path class="domain" stroke="currentColor" d="M0.5,6V0.5H880.5V6"></path>
  <g class="tick" opacity="1" transform="translate(0.5,0)">
    <line stroke="currentColor" y2="6"></line>
    <text fill="currentColor" y="9" dy="0.71em">0.0</text>
  </g>
  <g class="tick" opacity="1" transform="translate(176.5,0)">
    <line stroke="currentColor" y2="6"></line>
    <text fill="currentColor" y="9" dy="0.71em">0.2</text>
  </g>
  <g class="tick" opacity="1" transform="translate(352.5,0)">
    <line stroke="currentColor" y2="6"></line>
    <text fill="currentColor" y="9" dy="0.71em">0.4</text>
  </g>
  <g class="tick" opacity="1" transform="translate(528.5,0)">
    <line stroke="currentColor" y2="6"></line>
    <text fill="currentColor" y="9" dy="0.71em">0.6</text>
  </g>
  <g class="tick" opacity="1" transform="translate(704.5,0)">
    <line stroke="currentColor" y2="6"></line>
    <text fill="currentColor" y="9" dy="0.71em">0.8</text>
  </g>
  <g class="tick" opacity="1" transform="translate(880.5,0)">
    <line stroke="currentColor" y2="6"></line>
    <text fill="currentColor" y="9" dy="0.71em">1.0</text>
  </g>
</g>
```

----------------------------------------

TITLE: Default Link X Accessor - JavaScript
DESCRIPTION: Shows the default function used by the link generator to access the x-coordinate, assuming the data point is an array `d` and the x-coordinate is the first element.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_12

LANGUAGE: js
CODE:
```
function x(d) {
  return d[0];
}
```

----------------------------------------

TITLE: Default Pad Angle Accessor for D3 Arc (JavaScript)
DESCRIPTION: This is the default function used by the arc generator to access the pad angle if none is explicitly set via `arc.padAngle()`. It attempts to read a `padAngle` property from the input data object `d`. This function is part of D3's internal defaults.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_22

LANGUAGE: JavaScript
CODE:
```
function padAngle() {
  return d && d.padAngle;
}
```

----------------------------------------

TITLE: Default D3.js Symbol Size Accessor (JavaScript)
DESCRIPTION: Shows the default implementation of the symbol size accessor function used by a d3.symbol() generator when no custom size accessor is set. This function simply returns the default size of 64 square pixels.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_9

LANGUAGE: javascript
CODE:
```
function size() {
  return 64;
}
```

----------------------------------------

TITLE: Default D3 Arc End Angle Accessor Function
DESCRIPTION: Shows the default function used by the arc generator to access the end angle. It expects the data argument 'd' to have an 'endAngle' property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
function endAngle(d) {
  return d.endAngle;
}
```

----------------------------------------

TITLE: Creating Closed RGB Basis Spline Interpolator in D3.js
DESCRIPTION: Returns a cyclical uniform nonrational B-spline interpolator that transitions smoothly through the specified array of colors (e.g., ["purple", "green", "orange"]) in the RGB color space. This type of interpolator provides cyclical C² continuity, suitable for creating continuous color cycles.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_2

LANGUAGE: javascript
CODE:
```
d3.interpolateRgbBasisClosed(["purple", "green", "orange"])
```

----------------------------------------

TITLE: Applying Gamma Correction to D3 RGB Interpolation (JavaScript)
DESCRIPTION: Demonstrates how to apply gamma correction to the d3.interpolateRgb function using the .gamma() method. This creates a new interpolator that interpolates colors in the RGB color space with the specified gamma value (e.g., 2.2 for sRGB).
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_33

LANGUAGE: JavaScript
CODE:
```
var interpolate = d3.interpolateRgb.gamma(2.2)("purple", "orange");
```

----------------------------------------

TITLE: Default Source Accessor Function in D3.js Ribbons
DESCRIPTION: This is the default accessor function used by a D3.js ribbon generator to get the source data from the input data object. It simply returns the value of the 'source' property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function source(d) {
  return d.source;
}
```

----------------------------------------

TITLE: Creating Cubehelix Long Path Interpolator in D3.js
DESCRIPTION: Creates a Cubehelix color space interpolator between two colors (e.g., "purple" and "orange"). Similar to interpolateCubehelix, but explicitly does *not* use the shortest path between hues, resulting in a potentially longer hue rotation. It returns an RGB string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#_snippet_10

LANGUAGE: javascript
CODE:
```
d3.interpolateCubehelixLong("purple", "orange")
```

----------------------------------------

TITLE: Formatting as Prefixed Lowercase Hexadecimal Javascript
DESCRIPTION: Shows converting an integer to its hexadecimal representation using `d3.format("#x")`. The '#' symbol adds the "0x" prefix, and 'x' specifies lowercase hexadecimal output. Requires the d3-format library.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_7

LANGUAGE: javascript
CODE:
```
d3.format("#x")(48879) // prefixed lowercase hexadecimal, "0xbeef"
```

----------------------------------------

TITLE: Stop D3 Timer (D3v4 .stop) - JavaScript
DESCRIPTION: Shows the D3 v4 method for stopping a timer using the `.stop()` method on the timer instance itself. The timer is stopped immediately when the `.stop()` method is called within the callback or externally.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_68

LANGUAGE: js
CODE:
```
var t = d3.timer(function(elapsed) {
  console.log(elapsed);
  if (elapsed >= 1000) {
    t.stop();
  }
});
```

----------------------------------------

TITLE: Getting Current X-coordinate Accessor (quadtree.x) - JavaScript
DESCRIPTION: Retrieves the currently configured function that the quadtree uses to derive the x-coordinate from data points.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
tree.x() // (d) => d.x
```

----------------------------------------

TITLE: Getting D3.js Symbol Size Accessor (JavaScript)
DESCRIPTION: Retrieves the current symbol size accessor function configured on a d3.symbol() generator instance. Calling .size() without arguments returns the function currently used to determine the symbol size.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_8

LANGUAGE: javascript
CODE:
```
symbol.size()
```

----------------------------------------

TITLE: Defining Array for d3.quickselect Example - JavaScript
DESCRIPTION: This snippet initializes an array of numbers that will be used as input for the d3.quickselect function demonstration. This array is populated with various integer values to showcase the partitioning behavior of quickselect.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const numbers = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];
```

----------------------------------------

TITLE: Default D3 Link Force Strength Accessor - JavaScript
DESCRIPTION: Shows the default function used by the D3.js link force to calculate the strength of the spring force for each link. This function computes the reciprocal of the minimum link count (degree) of the source and target nodes, making links connected to high-degree nodes weaker for better stability.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#_snippet_6

LANGUAGE: javascript
CODE:
```
function strength(link) {
  return 1 / Math.min(count(link.source), count(link.target));
}
```

----------------------------------------

TITLE: Default D3 Drag Subject Accessor
DESCRIPTION: This function is the default accessor used by drag.subject(). It determines the 'subject' being dragged. By default, it returns the datum associated with the element receiving the event, or creates a point object ({x, y}) if the datum is null or undefined.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
function subject(event, d) {
  return d == null ? {x: event.x, y: event.y} : d;
}
```

----------------------------------------

TITLE: Default Y-coordinate Accessor Function (d3.quadtree) - JavaScript
DESCRIPTION: Shows the default JavaScript function used by the D3 quadtree module to extract the y-coordinate, assuming data points are arrays where the y-coordinate is the second element (index 1).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
function y(d) {
  return d[1];
}
```

----------------------------------------

TITLE: Accessing Voronoi Neighbors in Vue
DESCRIPTION: Shows how to access the neighbors of a specific cell in the Voronoi diagram using the voronoi.neighbors(i) method. The example is presented within a Vue context, demonstrating how to integrate D3 method calls with Vue's reactive state.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/voronoi.md#_snippet_2

LANGUAGE: vue
CODE:
```
voronoi.neighbors({{neighborsState.i}}) // [{{neighborsState.N.join(", ")}}]
```

----------------------------------------

TITLE: Default D3 Area Y1 Accessor Function - Javascript
DESCRIPTION: This is the default y1 accessor function. It assumes input data elements are two-element arrays and extracts the second element ([1]) as the y-value.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_17

LANGUAGE: javascript
CODE:
```
function y(d) {
  return d[1];
}
```

----------------------------------------

TITLE: Result of d3.quickselect Partitioning - JavaScript
DESCRIPTION: This snippet shows the state of the 'numbers' array after being processed by d3.quickselect(numbers, 8). It illustrates how the array is partitioned in-place, with elements less than or equal to the element at index 8 appearing before it, and elements greater than or equal appearing after it.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
[39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]
//                               ^^ numbers[k]
```

----------------------------------------

TITLE: Reduce Cartesian Product with D3.js Reducer
DESCRIPTION: Illustrates using a reducer function with `d3.cross`. The reducer is applied to each element combination from the input iterables, transforming the output from pairs into a single value per combination.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#_snippet_1

LANGUAGE: javascript
CODE:
```
d3.cross([1, 2], ["x", "y"], (a, b) => a + b) // ["1x", "1y", "2x", "2y"]
```

----------------------------------------

TITLE: Streaming a Polygon using D3 Geo Streams - Javascript
DESCRIPTION: This Javascript snippet demonstrates the sequence of method calls made on a D3 geo stream object when processing the example GeoJSON Polygon. It shows the progression through polygon start, line start, points, line end, and polygon end.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/stream.md#_snippet_1

LANGUAGE: javascript
CODE:
```
stream.polygonStart();
stream.lineStart();
stream.point(0, 0);
stream.point(0, 1);
stream.point(1, 1);
stream.point(1, 0);
stream.lineEnd();
stream.polygonEnd();
```

----------------------------------------

TITLE: Using Extended Selection Method D3.js JavaScript
DESCRIPTION: This snippet shows how to use the custom `checked` method added to the selection prototype. It selects all checkbox input elements and sets their `checked` property to true.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#_snippet_3

LANGUAGE: javascript
CODE:
```
d3.selectAll("input[type=checkbox]").checked(true);
```

----------------------------------------

TITLE: Creating Seeded Linear Congruential Generator with D3 - JavaScript
DESCRIPTION: Creates a Linear Congruential Generator (LCG) function using D3 with a specific integer seed (42). The returned function will generate a reproducible sequence of pseudorandom numbers in the range [0, 1). This is useful for experiments requiring stable random sequences.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
d3.randomLcg(42)
```

----------------------------------------

TITLE: Getting D3 Stack Keys Accessor (JavaScript)
DESCRIPTION: This snippet demonstrates how to retrieve the current keys accessor function or array from a D3 stack generator using the keys() method without arguments.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
stack.keys() // () => ["apples", "bananas", "cherries", "durians"]
```

----------------------------------------

TITLE: Retrieving D3 Power Scale Exponent - JavaScript
DESCRIPTION: Retrieves the current exponent value from a D3 power scale instance. When the `exponent()` method is called without any arguments, it returns the scale's current exponent, which defaults to 1 if not explicitly set.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/pow.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
x.exponent() // 2
```

----------------------------------------

TITLE: Getting D3 Arc Corner Radius Accessor (Vue Context)
DESCRIPTION: Retrieves the currently configured accessor function or constant value for the corner radius property of the arc generator, showing its dynamic nature in a reactive context like Vue.js.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
arc.cornerRadius() // () => {{cornerRadius}}
```

----------------------------------------

TITLE: Default Point Weight Accessor (D3 Density Estimation, JavaScript)
DESCRIPTION: This is the default function used by the D3 density estimator to determine the weight of a data point. By default, every point has a weight of 1, giving each point equal contribution to the density estimation. Users can specify a custom function using `density.weight()` to assign different weights.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/density.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
function weight() {
  return 1;
}
```

----------------------------------------

TITLE: Calculating Full-Precision Cumulative Sum with Accessor D3 fcumsum JavaScript
DESCRIPTION: Computes the full-precision cumulative sum of values derived from an array of objects using an accessor function. The accessor extracts the numeric value from each object, and the function returns a Float64Array of the cumulative sums.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#_snippet_6

LANGUAGE: js
CODE:
```
d3.fcumsum(penguins, (d) => d.body_mass_g) // [3750, 7550, 10800, 10800, 14250, …]
```

----------------------------------------

TITLE: Calculating Full-Precision Sum with Accessor D3 fsum JavaScript
DESCRIPTION: Computes the full-precision sum of values derived from an array of objects using an accessor function. The accessor is applied to each element to extract the numeric value to be included in the sum.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#_snippet_4

LANGUAGE: js
CODE:
```
d3.fsum(penguins, (d) => d.body_mass_g) // 1437000
```

----------------------------------------

TITLE: Importing Vue Component in Script Setup
DESCRIPTION: This snippet shows how to import a custom Vue component, `ExampleDisjointForce`, using the `<script setup>` syntax available in Vue 3. This component is likely used below in the template to display a specific example of d3-force usage.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup>\n\nimport ExampleDisjointForce from \"./components/ExampleDisjointForce.vue\";\n\n</script>
```

----------------------------------------

TITLE: Getting D3 Area Context - Javascript
DESCRIPTION: Returns the current rendering context associated with the area generator. This context is used for rendering if it is not null.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_24

LANGUAGE: javascript
CODE:
```
area.context() // context
```

----------------------------------------

TITLE: Initializing Component Variables in Vue.js
DESCRIPTION: This snippet initializes reactive variables using Vue's `ref` function and defines a static array. These variables (`alpha`, `beta`, `tension`, `ticks`) are likely used by the component (`ExampleCurve`) to demonstrate different curve configurations interactively.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import {ref} from "vue";
import ExampleCurve from "../components/ExampleCurve.vue";

const alpha = ref(0.5);
const beta = ref(0.85);
const tension = ref(0);
const ticks = [0, 0.25, 0.5, 0.75, 1];
```

----------------------------------------

TITLE: Loading CSV Data with D3 v4 Callback (JavaScript)
DESCRIPTION: Demonstrates the method for loading a CSV file using d3.csv in D3 version 4. This approach utilizes a traditional callback function structure, requiring manual error handling via an `if (error)` check.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
d3.csv("file.csv", function(error, data) {
  if (error) throw error;
  console.log(data);
});
```

----------------------------------------

TITLE: Drawing Point Step Representation in Observable Plot - JavaScript
DESCRIPTION: This snippet is from a custom `draw` function for an Observable Plot mark. It draws a line segment with arrows representing the `step` distance between adjacent points on a point scale (`x.step`).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#_snippet_11

LANGUAGE: javascript
CODE:
```
context.moveTo(6, -22 - 3); context.lineTo(0, -22); context.lineTo(6, -22 + 3); context.moveTo(0, -22); context.lineTo(x.step, -22); context.moveTo(x.step - 6, -22 - 3); context.lineTo(x.step, -22); context.lineTo(x.step - 6, -22 + 3);
```

----------------------------------------

TITLE: Resulting HTML Structure after Data Join - HTML
DESCRIPTION: This HTML snippet shows the expected state of the DOM after performing a D3 data join using `selection.data()`, handling the `enter()` selection by appending new elements, and handling the `exit()` selection by removing old elements. It illustrates that the elements now correspond to the new dataset `[1, 2, 4, 8, 16, 32]` in the order specified by the data.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#_snippet_9

LANGUAGE: html
CODE:
```
<div>1</div>
<div>2</div>
<div>4</div>
<div>8</div>
<div>16</div>
<div>32</div>
```

----------------------------------------

TITLE: Initializing Data for Vue Plot Component
DESCRIPTION: This snippet imports the necessary Plot library from Observablehq and a custom Vue component `PlotRender`. It defines a JavaScript array `gods` containing strings representing hierarchical paths, which serves as the data source for a plot visualization.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/cluster.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script setup>

import * as Plot from "@observablehq/plot";
import PlotRender from "../components/PlotRender.js";

const gods = [
  "Chaos/Gaia/Mountains",
  "Chaos/Gaia/Pontus",
  "Chaos/Gaia/Uranus",
  "Chaos/Eros",
  "Chaos/Erebus",
  "Chaos/Tartarus"
];

</script>
```

----------------------------------------

TITLE: Default Target Accessor Function in D3.js Ribbons
DESCRIPTION: This is the default accessor function used by a D3.js ribbon generator to get the target data from the input data object. It simply returns the value of the 'target' property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_3

LANGUAGE: javascript
CODE:
```
function target(d) {
  return d.target;
}
```

----------------------------------------

TITLE: Default Target X Accessor for D3 forceX
DESCRIPTION: This is the default function used by the `forceX` force to determine the target x-coordinate for each node. It returns a constant value of 0, pushing nodes towards the origin along the x-axis. The function is invoked once per node upon initialization or when the x-coordinate accessor is set.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/position.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function x() {
  return 0;
}
```

----------------------------------------

TITLE: Setting Up Vue Component and Transforming Sidebar Data (JS)
DESCRIPTION: This script block imports necessary libraries for visualization and frontend integration, fetches site data including the sidebar structure from Vitepress using `useData`, and processes the hierarchical sidebar data into a flat array of paths suitable for D3's layout functions. It prepares the data structure for subsequent visualization.
SOURCE: https://github.com/d3/d3/blob/main/docs/what-is-d3.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import * as Plot from "@observablehq/plot";
import * as d3 from "d3";
import {useData} from "vitepress";
import {computed} from "vue";
import LogoDiagram from "./components/LogoDiagram.vue";
import PlotRender from "./components/PlotRender.js";

const {site: {value: {themeConfig: {sidebar}}}} = useData();

const paths = computed(() => {
  const paths = [];
  (function visit(node, path) {
    paths.push({path, link: node.link && `.${node.link}`});
    if (node.items) {
      for (const item of node.items) {
        visit(item, (path === "/" ? path : path + "/") + item.text);
      }
    }
  })({items: sidebar}, "/D3");
  return paths;
});
```

----------------------------------------

TITLE: Getting Current Inner Tick Size D3.js JavaScript
DESCRIPTION: Retrieves the current inner tick size of the D3.js axis when called without any arguments. The return value is the pixel size that was previously set specifically for the inner ticks using `tickSizeInner()`, or the default value (typically 6) if not explicitly set. This is useful for checking the current configuration.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#_snippet_22

LANGUAGE: javascript
CODE:
```
axis.tickSizeInner() // 0, as specified above
```

----------------------------------------

TITLE: Default Circle Radius Accessor (JavaScript)
DESCRIPTION: This function represents the default accessor used by `circle.radius()` when no explicit radius is set. It specifies the default radius of the circle as 90 degrees, creating a hemisphere.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/shape.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
function radius() {
  return 90;
}
```

----------------------------------------

TITLE: Applying Rounding Precision Example 2 D3.js JavaScript
DESCRIPTION: Another example using `precisionRound` demonstrating how different step and max values influence the calculated precision for significant-digit rounding.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_33

LANGUAGE: javascript
CODE:
```
const p = d3.precisionRound(0.1, 1.1);
const f = d3.format("." + p + "r");
f(0.9); // "0.90"
f(1.0); // "1.0"
f(1.1); // "1.1"
```

----------------------------------------

TITLE: Initializing D3 Adder JavaScript
DESCRIPTION: Creates a new instance of the D3 Adder class, which is used for adding numbers with higher precision than standard floating-point arithmetic. The adder is initialized with a value of 0.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#_snippet_0

LANGUAGE: js
CODE:
```
const adder = new d3.Adder();
```

----------------------------------------

TITLE: Getting D3 Area Generator Digits - JavaScript
DESCRIPTION: Calls the `digits()` method on an existing D3 area generator instance without any arguments to retrieve the currently configured maximum number of digits for path data output. The default value is 3.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#_snippet_26

LANGUAGE: JavaScript
CODE:
```
area.digits() // 3
```

----------------------------------------

TITLE: Getting Link Context - JavaScript
DESCRIPTION: Retrieves the current rendering context set on the link generator.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_17

LANGUAGE: js
CODE:
```
link.context() // context
```

----------------------------------------

TITLE: Default Transform Constraint Function - D3 Zoom - JavaScript
DESCRIPTION: This JavaScript function is the default constraint used by the D3 zoom behavior. It takes the current transform, viewport extent, and translate extent as input and returns a new transform that keeps the viewport within the translate extent boundaries. It calculates the necessary translation adjustments based on how far the viewport corners are outside the allowed area.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
function constrain(transform, extent, translateExtent) {
  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
  return transform.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}
```

----------------------------------------

TITLE: Getting Quantiles from Sequential Quantile Scale in D3.js (JS)
DESCRIPTION: Returns an array containing `n + 1` quantile boundary values from a sequential quantile scale. The first value is the minimum, the last is the maximum, and the values in between are the quantiles.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#_snippet_10

LANGUAGE: js
CODE:
```
color.quantiles(4); // [2700, 3550, 4050, 4750, 6300]
```

----------------------------------------

TITLE: Default D3 Arc Outer Radius Accessor Function
DESCRIPTION: Shows the default function used by the arc generator to access the outer radius. It expects the data argument 'd' to have an 'outerRadius' property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
function outerRadius(d) {
  return d.outerRadius;
}
```

----------------------------------------

TITLE: Getting Current Y-coordinate Accessor (quadtree.y) - JavaScript
DESCRIPTION: Retrieves the currently configured function that the quadtree uses to derive the y-coordinate from data points.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
tree.y() // (d) => d.y
```

----------------------------------------

TITLE: Default D3 Arc Start Angle Accessor Function
DESCRIPTION: Shows the default function used by the arc generator to access the start angle. It expects the data argument 'd' to have a 'startAngle' property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
function startAngle(d) {
  return d.startAngle;
}
```

----------------------------------------

TITLE: Default X-coordinate Accessor Function (d3.quadtree) - JavaScript
DESCRIPTION: Shows the default JavaScript function used by the D3 quadtree module to extract the x-coordinate, assuming data points are arrays where the x-coordinate is the first element (index 0).
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
function x(d) {
  return d[0];
}
```

----------------------------------------

TITLE: Getting Number of Data Points in Quadtree (quadtree.size) - JavaScript
DESCRIPTION: Returns the total count of data points currently stored within the quadtree.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
tree.size() // 2
```

----------------------------------------

TITLE: Default Target Radius Accessor Function in D3.js Ribbons
DESCRIPTION: This is the default accessor function specifically for the target radius, used when a global radius is not set. It retrieves the radius from the input data object's 'radius' property.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_8

LANGUAGE: javascript
CODE:
```
function radius(d) {
  return d.radius;
}
```

----------------------------------------

TITLE: Getting D3 Stack Offset Accessor (JavaScript)
DESCRIPTION: This snippet demonstrates how to retrieve the current stack offset accessor function from a D3 stack generator using the offset() method without arguments.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
stack.offset() // d3.stackOffsetExpand
```

----------------------------------------

TITLE: Generating Range with d3.range - Infinite
DESCRIPTION: Illustrates that d3.range returns an empty array if the specified arguments would result in an infinite sequence.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#_snippet_9

LANGUAGE: javascript
CODE:
```
d3.range(Infinity) // []
```

----------------------------------------

TITLE: Default D3 Stack Value Accessor (JavaScript)
DESCRIPTION: This snippet shows the default implementation of the value accessor in D3 stack. It assumes the input data is an object or array where the value can be accessed using the provided key.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
function value(d, key) {
  return d[key];
}
```

----------------------------------------

TITLE: Getting Link Digits Precision - JavaScript
DESCRIPTION: Retrieves the current maximum number of fraction digits used when generating an SVG path data string.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#_snippet_19

LANGUAGE: js
CODE:
```
link.digits() // 3
```

----------------------------------------

TITLE: Defining Canvas Draw Function - JavaScript
DESCRIPTION: Defines a standard JavaScript function that uses CanvasPathMethods (`moveTo`, `arc`) to draw a circle. It takes a context object (which can be a CanvasRenderingContext2D or a d3-path instance) and a radius.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#_snippet_0

LANGUAGE: javascript
CODE:
```
function drawCircle(context, radius) {
  context.moveTo(radius, 0);
  context.arc(0, 0, radius, 0, 2 * Math.PI);
}
```

----------------------------------------

TITLE: Implementing D3 v3 General Update Pattern (JavaScript)
DESCRIPTION: Demonstrates the standard D3 version 3 data join and update pattern. It selects elements, binds data, styles the update selection, removes exiting elements, appends entering elements, and then styles the combined enter and update selection. Note that in v3, `enter().append()` modifies the original update selection.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_45

LANGUAGE: javascript
CODE:
```
var circle = svg.selectAll("circle").data(data) // UPDATE
    .style("fill", "blue");

circle.exit().remove(); // EXIT

circle.enter().append("circle") // ENTER; modifies UPDATE! 🌶
    .style("fill", "green");

circle // ENTER + UPDATE
    .style("stroke", "black");
```

----------------------------------------

TITLE: Initial HTML Structure for D3 Append/Insert Demo (HTML)
DESCRIPTION: Represents the initial state of the DOM containing three `div` elements. This structure serves as the starting point to illustrate how D3's data join and element insertion methods, particularly in version 4, modify the child order within the parent element.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_47

LANGUAGE: html
CODE:
```
<div>a</div>
<div>b</div>
<div>f</div>
```

----------------------------------------

TITLE: Using setInterval with D3 Transitions (D3v3 - BAD) - JavaScript
DESCRIPTION: An example of using the standard `setInterval` with D3 transitions in D3 v3. This pattern is problematic because `setInterval` timers continue accumulating in the background, potentially causing a hang when the page is foregrounded.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_70

LANGUAGE: js
CODE:
```
setInterval(function() {
  d3.selectAll("div").transition().call(someAnimation); // BAD
}, 1000);
```

----------------------------------------

TITLE: Defining Default Touch Detector - D3 Brush - JavaScript
DESCRIPTION: This function represents the default behavior for detecting touch support on an element. It checks if the navigator has `maxTouchPoints` or if 'ontouchstart' is present in the element's properties, returning true if either is detected. This determines whether touch event listeners are registered for the brush.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-brush.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
function touchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}
```

----------------------------------------

TITLE: Transitioning from Ordinal rangePoints (v3) to Point Scales (v4)
DESCRIPTION: Compares the D3 v3.x method for creating an ordinal scale with range points (.rangePoints) to the D3 v4.0 approach using the new d3.scalePoint() constructor. Point scales are a specialized subclass for positioning discrete points at intervals.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_43

LANGUAGE: JavaScript
CODE:
```
var x = d3.scale.ordinal()
    .domain(["a", "b", "c"])
    .rangePoints([0, width]);
```

LANGUAGE: JavaScript
CODE:
```
var x = d3.scalePoint()
    .domain(["a", "b", "c"])
    .range([0, width]);
```

----------------------------------------

TITLE: Default D3.js Symbol Type Accessor (JavaScript)
DESCRIPTION: Shows the default implementation of the symbol type accessor function used by a d3.symbol() generator when no custom type accessor is set. This function simply returns the built-in circle symbol type.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#_snippet_5

LANGUAGE: javascript
CODE:
```
function type() {
  return circle;
}
```

----------------------------------------

TITLE: Loading D3 v4 Standalone Module (HTML)
DESCRIPTION: Demonstrates how to include a specific D3 version 4 microlibrary (d3-selection) as a standalone script via a CDN link. This is useful for applications that only need a subset of D3's features, reducing the overall script size.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_5

LANGUAGE: HTML
CODE:
```
<script src="https://d3js.org/d3-selection.v1.js"></script>
```

----------------------------------------

TITLE: Rendering D3 Plot Cluster Layout in Vue
DESCRIPTION: This Vue template snippet uses the `PlotRender` component to display a visualization. It passes an options object to the component that configures the plot, specifically defining a `Plot.cluster` mark using the `gods` data and setting various layout properties like axes, height, and margins.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/cluster.md#_snippet_1

LANGUAGE: vue
CODE:
```
<PlotRender :options='{
  axis: null,
  height: 130,
  margin: 20,
  marginRight: 120,
  marks: [
    Plot.cluster(gods, {textStroke: "var(--vp-c-bg)"})
  ]
}' />
```

----------------------------------------

TITLE: Get Day of Year (D3 3.x) JavaScript
DESCRIPTION: Demonstrates how to calculate the day of the year for a given date using the `d3.time.dayOfYear` method in D3 3.x. This was a dedicated function for this specific calculation. It takes a `Date` object as input.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_63

LANGUAGE: javascript
CODE:
```
var now = new Date;
d3.time.dayOfYear(now); // 165
```

----------------------------------------

TITLE: Creating Time Parser (D3 v3.x JavaScript)
DESCRIPTION: This snippet demonstrates the method used in D3 version 3.x to create a time parsing function. It accessed the '.parse' method directly on the time format object obtained from d3.time.format. This approach has been replaced in D3 version 4.0 by dedicated parser constructors.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_57

LANGUAGE: javascript
CODE:
```
var parseTime = d3.time.format("%c").parse;
```

----------------------------------------

TITLE: Stop D3 Timer (D3v3) - JavaScript
DESCRIPTION: Demonstrates how to stop a D3 v3 timer by returning `true` from its callback function. The timer continues to run, invoking the callback with the elapsed time, until the return value is `true`.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_67

LANGUAGE: js
CODE:
```
d3.timer(function(elapsed) {
  console.log(elapsed);
  return elapsed >= 1000;
});
```

----------------------------------------

TITLE: Configuring Observable Plot Contour in JavaScript
DESCRIPTION: Defines the configuration object for the `PlotRender` component. It specifies no axis, a 1:1 aspect ratio, margin styling, and includes a `Plot.contour` mark using `volcano` data with specific width, height, fill, stroke, and contour interval.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour.md#_snippet_1

LANGUAGE: javascript
CODE:
```
{\n  axis: null,\n  aspectRatio: 1,\n  style: \"margin: 0;\",\n  marks: [\n    Plot.contour(volcano.values, {\n      width: volcano.width,\n      height: volcano.height,\n      fill: Plot.identity,\n      stroke: \"black\",\n      interval: 5\n    })\n  ]\n}
```

----------------------------------------

TITLE: Default Pad Angle Accessor Function in D3.js Ribbons
DESCRIPTION: This is the default accessor function used by a D3.js ribbon generator to get the pad angle (gap) between adjacent ribbons. By default, it returns 0, meaning no gap.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#_snippet_11

LANGUAGE: javascript
CODE:
```
function padAngle() {
  return 0;
}
```

----------------------------------------

TITLE: Default X-coordinate Accessor (D3 Density Estimation, JavaScript)
DESCRIPTION: This is the default function used by the D3 density estimator to extract the x-coordinate from a data point. It assumes the data point is an array or tuple where the x-value is the first element (index 0). Users can specify a custom function using `density.x()` to handle different data structures.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/density.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function x(d) {
  return d[0];
}
```

----------------------------------------

TITLE: Interpolating Objects in D3 v3.x (JavaScript)
DESCRIPTION: Demonstrates the behavior of d3.interpolateObject in D3 version 3.x when the start object 'a' has properties not present in the end object 'b'. In v3.x, these extra properties from 'a' were included in the interpolated result.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_31

LANGUAGE: JavaScript
CODE:
```
d3.interpolateObject({foo: 2, bar: 1}, {foo: 3})(0.5); // {bar: 1, foo: 2.5} in 3.x
```

----------------------------------------

TITLE: Styling D3 Brush Extent CSS
DESCRIPTION: Shows the default CSS styles previously applied to the brush extent element in older D3 versions. These styles define the appearance, including stroke color, fill opacity, and shape rendering. In D3 4.0, these are now applied as attributes by default.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_10

LANGUAGE: css
CODE:
```
.brush .extent {
  stroke: #fff;
  fill-opacity: .125;
  shape-rendering: crispEdges;
}
```

----------------------------------------

TITLE: Generate Date Range with Step (D3 3.x) JavaScript
DESCRIPTION: Demonstrates how the `d3.time.days` method worked in D3 3.x when a step greater than 1 was provided. It generated a range of dates by filtering based on the interval's field number (day of month), which could lead to unexpected results like skipping the start date or having inconsistent intervals. It takes start date, end date, and step as input.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_60

LANGUAGE: javascript
CODE:
```
d3.time.days(new Date(2016, 4, 28), new Date(2016, 5, 5), 2);
// [Sun May 29 2016 00:00:00 GMT-0700 (PDT),
//  Tue May 31 2016 00:00:00 GMT-0700 (PDT),
//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),
//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]
```

----------------------------------------

TITLE: Resulting HTML Structure After D3 v4 Append/Insert (HTML)
DESCRIPTION: Displays the HTML structure of the `div` elements after the D3 v4 code snippet that appends new elements based on data. It demonstrates that the new elements ('c', 'd', 'e') have been inserted in the correct order between the existing elements ('b' and 'f'), illustrating the v4 default behavior of `append` preserving data order.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_49

LANGUAGE: html
CODE:
```
<div>a</div>
<div>b</div>
<div>c</div>
<div>d</div>
<div>e</div>
<div>f</div>
```

----------------------------------------

TITLE: Demonstrating JavaScript Floating Point Issues
DESCRIPTION: Shows how standard JavaScript multiplication can lead to unexpected floating-point errors when dealing with decimals, illustrating the need for dedicated formatting tools.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#_snippet_0

LANGUAGE: javascript
CODE:
```
for (let i = 0; i < 10; ++i) {
  console.log(0.1 * i);
}
```

----------------------------------------

TITLE: Creating Parameterized Easing in D3 3.x JavaScript
DESCRIPTION: Illustrates the D3 3.x method for creating a parameterized easing function. It uses `d3.ease` with a string identifier ("elastic-out-in") and a second argument (1.2) to configure the easing behavior. This syntax is deprecated in D3 4.0.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_17

LANGUAGE: javascript
CODE:
```
var e = d3.ease("elastic-out-in", 1.2);
```

----------------------------------------

TITLE: Defining Goldstein-Price Test Function
DESCRIPTION: Implements the Goldstein-Price mathematical test function, commonly used in optimization problems. It takes two arguments, `x` and `y`, and returns a single numerical value. This function is used in the example (Snippet 3) to generate a grid of values for contouring.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/contour.md#_snippet_3

LANGUAGE: javascript
CODE:
```
function goldsteinPrice(x, y) {
  return (1 + Math.pow(x + y + 1, 2) * (19 - 14 * x + 3 * x * x - 14 * y + 6 * x * x + 3 * y * y))
      * (30 + Math.pow(2 * x - 3 * y, 2) * (18 - 32 * x + 12 * x * x + 48 * y - 36 * x * y + 27 * y * y));
}
```

----------------------------------------

TITLE: Defining Object for d3.permute Example - JavaScript
DESCRIPTION: This snippet defines a simple JavaScript object containing several key-value pairs. This object serves as the source data for the subsequent example demonstrating how d3.permute can extract specific properties.
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const object = {yield: 27, variety: "Manchuria", year: 1931, site: "University Farm"};
```

----------------------------------------

TITLE: Defining Raw Projection Factory for Mutator - JavaScript
DESCRIPTION: Provides the function signature for a raw projection factory intended for use with `d3.geoProjectionMutator`. The outer function `conicFactory` takes parameters (like parallels `phi0`, `phi1`) and returns the inner raw projection function `conicRaw`, which performs the core point transformation from spherical radians [lambda, phi] to planar [x, y].
SOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/projection.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// y0 and y1 represent two parallels
function conicFactory(phi0, phi1) {
  return function conicRaw(lambda, phi) {
    return […, …];
  };
}
```

----------------------------------------

TITLE: Rendering Axis (D3 v3.x) - d3.svg.axis - HTML/CSS/JavaScript
DESCRIPTION: This snippet illustrates the D3 v3.x approach for rendering an SVG axis. It includes both the required CSS rules to define the appearance of axis paths, lines, and text, and the JavaScript code using `d3.svg.axis().orient("bottom")` to create and append a bottom-oriented axis to a selected element.
SOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#_snippet_8

LANGUAGE: HTML
CODE:
```
<style>

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.axis text {
  font: 10px sans-serif;
}

</style>
<script>

d3.select(".axis")
    .call(d3.svg.axis()
        .scale(x)
        .orient("bottom"));

</script>
```