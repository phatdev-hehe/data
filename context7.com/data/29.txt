TITLE: Creating and Loading BrowserWindow in Electron JavaScript
DESCRIPTION: Creates a new BrowserWindow instance with specified dimensions and demonstrates how to load content. It shows examples for loading both a remote URL using loadURL and a local HTML file using loadFile. This must be done in the main process after the Electron app's 'ready' event.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// In the main process.
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ width: 800, height: 600 })

// Load a remote URL
win.loadURL('https://github.com')

// Or load a local HTML file
win.loadFile('index.html')
```

----------------------------------------

TITLE: Safely Exposing ipcRenderer over contextBridge - JavaScript
DESCRIPTION: Demonstrates the recommended pattern for exposing ipcRenderer methods over the contextBridge following the behavior change in Electron 29. Instead of exposing the whole module, a wrapper function is used to provide controlled access to specific events or methods, mitigating security risks.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
contextBridge.exposeInMainWorld('app', {
  onEvent: (cb) => ipcRenderer.on('foo', (e, ...args) => cb(args))
})
```

----------------------------------------

TITLE: Accessing Properly Exposed API in Renderer
DESCRIPTION: This snippet shows how to access an API that was properly exposed from a preload script using contextBridge. The API is now available on the window object in the renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
console.log(window.myAPI)
// => { desktop: true }
```

----------------------------------------

TITLE: Using ipcRenderer.invoke with Promise in Electron
DESCRIPTION: Example showing how to use ipcRenderer.invoke in the renderer process to communicate with the main process and receive a Promise-based response. The main process handles the request using ipcMain.handle.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-renderer.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Renderer process
ipcRenderer.invoke('some-name', someArgument).then((result) => {
  // ...
})

// Main process
ipcMain.handle('some-name', async (event, someArgument) => {
  const result = await doSomeWork(someArgument)
  return result
})
```

----------------------------------------

TITLE: Installing Electron with npm
DESCRIPTION: Commands to install Electron as a development dependency in your application using npm package manager.
SOURCE: https://github.com/electron/electron/blob/main/README.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
npm install electron --save-dev
```

----------------------------------------

TITLE: Exposing APIs with Context Isolation using contextBridge in JavaScript
DESCRIPTION: Demonstrates how to safely expose APIs from the preload script to the renderer process using contextBridge when context isolation is enabled.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// preload with contextIsolation enabled
const { contextBridge } = require('electron')

contextBridge.exposeInMainWorld('myAPI', {
  doAThing: () => {}
})
```

LANGUAGE: javascript
CODE:
```
// use the exposed API in the renderer
window.myAPI.doAThing()
```

----------------------------------------

TITLE: Configuring Main Process with Preload Script in Electron
DESCRIPTION: Shows how to configure the main process to use a preload script by setting it in the BrowserWindow constructor options.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')
const path = require('node:path')

const createWindow = () => {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js')
    }
  })

  win.loadFile('index.html')
}

app.whenReady().then(() => {
  createWindow()
})
```

----------------------------------------

TITLE: Installing Electron as a Development Dependency
DESCRIPTION: Command to install Electron as a development dependency. Electron is added to devDependencies as production apps will be bundled with the Electron binary.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
npm install electron --save-dev
```

----------------------------------------

TITLE: Using Updated webContents.printToPDF (JavaScript)
DESCRIPTION: Provides an example demonstrating the use of `webContents.printToPDF` with the updated arguments introduced to conform to the Chrome DevTools Protocol `Page.printToPDF`. This includes new parameters like `headerTemplate`, `footerTemplate`, `displayHeaderFooter`, `margins`, `scale`, and `preferCSSPageSize`, while removing others.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_53

LANGUAGE: JavaScript
CODE:
```
// Main process
const { webContents } = require('electron')

webContents.printToPDF({
  landscape: true,
  displayHeaderFooter: true,
  printBackground: true,
  scale: 2,
  pageSize: 'Ledger',
  margins: {
    top: 2,
    bottom: 2,
    left: 2,
    right: 2
  },
  pageRanges: '1-5, 8, 11-13',
  headerTemplate: '<h1>Title</h1>',
  footerTemplate: '<div><span class="pageNumber"></span></div>',
  preferCSSPageSize: true
}).then(data => {
  fs.writeFile(pdfPath, data, (error) => {
    if (error) throw error
    console.log(`Wrote PDF successfully to ${pdfPath}`)
  })
}).catch(error => {
  console.log(`Failed to write PDF to ${pdfPath}: `, error)
})
```

----------------------------------------

TITLE: Quick Start Electron Project Setup
DESCRIPTION: Commands to clone and run the electron-quick-start repository, which demonstrates a minimal Electron application setup.
SOURCE: https://github.com/electron/electron/blob/main/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
git clone https://github.com/electron/electron-quick-start
cd electron-quick-start
npm install
npm start
```

----------------------------------------

TITLE: Exposing Node APIs through contextBridge
DESCRIPTION: Example demonstrating how to expose Node.js functionality (crypto in this case) to the renderer process using contextBridge, with caution about security implications.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
const { contextBridge } = require('electron')
const crypto = require('node:crypto')
contextBridge.exposeInMainWorld('nodeCrypto', {
  sha256sum (data) {
    const hash = crypto.createHash('sha256')
    hash.update(data)
    return hash.digest('hex')
  }
})
```

----------------------------------------

TITLE: Exposing desktopCapturer via IPC (Main Process JavaScript)
DESCRIPTION: Shows how to securely expose the `desktopCapturer.getSources` API from the main process to renderer processes using `ipcMain.handle`. This is the recommended pattern after `desktopCapturer.getSources` was removed from the renderer.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_55

LANGUAGE: JavaScript
CODE:
```
// Main process
const { ipcMain, desktopCapturer } = require('electron')

ipcMain.handle(
  'DESKTOP_CAPTURER_GET_SOURCES',
  (event, opts) => desktopCapturer.getSources(opts)
)
```

----------------------------------------

TITLE: Complete main.js with BrowserWindow Implementation
DESCRIPTION: Full main.js file that creates a browser window and loads the HTML file. It imports necessary Electron modules, defines a window creation function, and executes it when the app is ready.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_7

LANGUAGE: js
CODE:
```
const { app, BrowserWindow } = require('electron')

const createWindow = () => {
  const win = new BrowserWindow({
    width: 800,
    height: 600
  })

  win.loadFile('index.html')
}

app.whenReady().then(() => {
  createWindow()
})
```

----------------------------------------

TITLE: Implementing Two-Way IPC with ipcMain.handle for File Dialog
DESCRIPTION: Sets up a two-way IPC handler in the main process using ipcMain.handle. When invoked, it opens a native file dialog and returns the selected file path to the renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, dialog, ipcMain } = require('electron')
const path = require('node:path')

// ...

async function handleFileOpen () {
  const { canceled, filePaths } = await dialog.showOpenDialog({})
  if (!canceled) {
    return filePaths[0]
  }
}

function createWindow () {
  const mainWindow = new BrowserWindow({
    webPreferences: {
      preload: path.join(__dirname, 'preload.js')
    }
  })
  mainWindow.loadFile('index.html')
}

app.whenReady().then(() => {
  ipcMain.handle('dialog:openFile', handleFileOpen)
  createWindow()
})
// ...
```

----------------------------------------

TITLE: Replacing app gpu-process-crashed Event (Deprecated) - JavaScript
DESCRIPTION: Illustrates the deprecation of the `gpu-process-crashed` event from the Electron `app` module in Electron 28. Provides the replacement code using the new `child-process-gone` event, which is a more general event for child process termination.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
// Deprecated
app.on('gpu-process-crashed', (event, killed) => { /* ... */ })

// Replace with
app.on('child-process-gone', (event, details) => { /* ... */ })
```

----------------------------------------

TITLE: Secure BrowserWindow Configuration with Default Settings
DESCRIPTION: Recommended way to create a BrowserWindow with default security settings that maintain web security features.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
// Good
const mainWindow = new BrowserWindow()
```

----------------------------------------

TITLE: Main Process: Creating the Browser Window
DESCRIPTION: This JavaScript code runs in the Main process and creates the Electron browser window. It uses the `electron` module to create a `BrowserWindow` instance, loads the `index.html` file into it, and handles window activation and closing events. It requires the electron module.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/online-offline-events.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

const createWindow = () => {
  const onlineStatusWindow = new BrowserWindow()

  onlineStatusWindow.loadFile('index.html')
}

app.whenReady().then(() => {
  createWindow()

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow()
    }
  })
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})
```

----------------------------------------

TITLE: Creating a BrowserWindow Function in Electron
DESCRIPTION: Function that creates a new BrowserWindow instance with specified dimensions and loads the index.html file. This defines the appearance and content of the application window.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_9

LANGUAGE: js
CODE:
```
const createWindow = () => {
  const win = new BrowserWindow({
    width: 800,
    height: 600
  })

  win.loadFile('index.html')
}
```

----------------------------------------

TITLE: IPC Implementation in Preload Script
DESCRIPTION: Shows how to implement secure IPC communication by exposing a ping function through the context bridge.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInMainWorld('versions', {
  node: () => process.versions.node,
  chrome: () => process.versions.chrome,
  electron: () => process.versions.electron,
  ping: () => ipcRenderer.invoke('ping')
  // we can also expose variables, not just functions
})
```

----------------------------------------

TITLE: Creating Browser Windows in Electron Main Process
DESCRIPTION: This snippet demonstrates how to create a browser window in the main process using the BrowserWindow module. It initializes a window with specified dimensions, loads a URL, and accesses the window's webContents object.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ width: 800, height: 1500 })
win.loadURL('https://github.com')

const contents = win.webContents
console.log(contents)
```

----------------------------------------

TITLE: Invoking IPC Calls from Renderer Process
DESCRIPTION: This snippet shows how to invoke an IPC call from a renderer process using ipcRenderer.invoke(). The function returns a Promise that resolves with the result from the main process handler.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
async () => {
  const result = await ipcRenderer.invoke('my-invokable-ipc', arg1, arg2)
  // ...
}
```

----------------------------------------

TITLE: Handling Window Open with setWindowOpenHandler - Electron JavaScript
DESCRIPTION: Shows how to handle `window.open` requests using the recommended `webContents.setWindowOpenHandler()`, demonstrating how to deny opening a new window. This replaces the deprecated `new-window` event.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_81

LANGUAGE: javascript
CODE:
```
// Replace with
webContents.setWindowOpenHandler((details) => {
  return { action: 'deny' }
})
```

----------------------------------------

TITLE: Accessing WebContents from BrowserWindow in Electron
DESCRIPTION: This code snippet demonstrates how to access the WebContents object from a BrowserWindow in Electron. It creates a new BrowserWindow instance, loads a URL, and then logs the WebContents object to the console.  This allows interaction and control over the rendered web page.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ width: 800, height: 1500 })
win.loadURL('https://github.com')

const contents = win.webContents
console.log(contents)
```

----------------------------------------

TITLE: Setting up Main Process Communication with Context-Isolated Page
DESCRIPTION: Configures a BrowserWindow with context isolation and establishes a MessageChannel for direct communication with the main world of the renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
const { BrowserWindow, app, MessageChannelMain } = require('electron')
const path = require('node:path')

app.whenReady().then(async () => {
  // Create a BrowserWindow with contextIsolation enabled.
  const bw = new BrowserWindow({
    webPreferences: {
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js')
    }
  })
  bw.loadURL('index.html')

  // We'll be sending one end of this channel to the main world of the
  // context-isolated page.
  const { port1, port2 } = new MessageChannelMain()

  // It's OK to send a message on the channel before the other end has
  // registered a listener. Messages will be queued until a listener is
  // registered.
  port2.postMessage({ test: 21 })

  // We can also receive messages from the main world of the renderer.
  port2.on('message', (event) => {
    console.log('from renderer main world:', event.data)
  })
  port2.start()

  // The preload script will receive this IPC message and transfer the port
  // over to the main world.
  bw.webContents.postMessage('main-world-port', null, [port1])
})
```

----------------------------------------

TITLE: Exposing API from Preload Script to Renderer
DESCRIPTION: Example of exposing an API from an isolated preload script to a renderer, creating a bridge between the isolated context and main world using the contextBridge module.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Preload (Isolated World)
const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInMainWorld(
  'electron',
  {
    doThing: () => ipcRenderer.send('do-a-thing')
  }
)
```

----------------------------------------

TITLE: Loading Secure Content in Main Process with Electron BrowserWindow
DESCRIPTION: Demonstrates the correct way to load content using HTTPS instead of HTTP in the main process. The example shows both insecure and secure approaches to loading URLs in a BrowserWindow.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Bad
browserWindow.loadURL('http://example.com')

// Good
browserWindow.loadURL('https://example.com')
```

----------------------------------------

TITLE: Properly Exposing APIs from Preload to Renderer using contextBridge
DESCRIPTION: This snippet demonstrates the correct way to expose APIs from a preload script to a renderer process using the contextBridge module. This safely exposes functionality across contextIsolation boundaries.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { contextBridge } = require('electron')

contextBridge.exposeInMainWorld('myAPI', {
  desktop: true
})
```

----------------------------------------

TITLE: Accessing File Path using webUtils (New Preload/Main) - Electron JavaScript
DESCRIPTION: Shows the recommended replacement for accessing a file path, using `webUtils.getPathForFile` in the main or preload process. This approach is safer as it avoids exposing the full path directly to the web content.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
// After (renderer)

const file = document.querySelector('input[type=file]').files[0]
electron.showFilePath(file)

// (preload)
const { contextBridge, webUtils } = require('electron')

contextBridge.exposeInMainWorld('electron', {
  showFilePath (file) {
    // It's best not to expose the full file path to the web content if
    // possible.
    const path = webUtils.getPathForFile(file)
    alert(`Uploaded file path was: ${path}`)
  }
})
```

----------------------------------------

TITLE: Updated package.json with Start Script for Electron
DESCRIPTION: Modified package.json that includes a start script to run the Electron application. The script uses the electron command to execute the main.js file in development mode.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "name": "my-electron-app",
  "version": "1.0.0",
  "description": "Hello World!",
  "main": "main.js",
  "scripts": {
    "start": "electron .",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Jane Doe",
  "license": "MIT",
  "devDependencies": {
    "electron": "23.1.3"
  }
}
```

----------------------------------------

TITLE: Windows and Linux Application Structure
DESCRIPTION: Illustrates the file structure required for a Windows and Linux Electron application. It shows where to place the `package.json`, `main.js`, and `index.html` files within the Electron application directory. These files form the core of the Electron application and are essential for the application to function.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-21_snippet_1

LANGUAGE: plain
CODE:
```
"electron/resources/app
├── package.json
├── main.js
└── index.html"
```

----------------------------------------

TITLE: Configuring BrowserWindow with Secure Web Preferences Using Preload Script
DESCRIPTION: Recommended secure configuration for a BrowserWindow using a preload script instead of enabling Node.js integration directly in the renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
// Good
const mainWindow = new BrowserWindow({
  webPreferences: {
    preload: path.join(app.getAppPath(), 'preload.js')
  }
})

mainWindow.loadURL('https://example.com')
```

----------------------------------------

TITLE: Importing Electron Modules
DESCRIPTION: Code snippet showing how to import the app and BrowserWindow modules from Electron using CommonJS syntax. These modules are essential for controlling the application lifecycle and creating windows.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_8

LANGUAGE: js
CODE:
```
const { app, BrowserWindow } = require('electron')
```

----------------------------------------

TITLE: Setting Window Open Handler - Electron JavaScript
DESCRIPTION: Configures a handler for `window.open` calls to control new window creation and override default browser window options. This replaces inheriting options from the parent window and the deprecated `new-window` event.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_61

LANGUAGE: javascript
CODE:
```
webContents.setWindowOpenHandler((details) => {
  return {
    action: 'allow',
    overrideBrowserWindowOptions: {
      // ...
    }
  }
})
```

----------------------------------------

TITLE: Opening DevTools in Electron Renderer Process - JavaScript
DESCRIPTION: This snippet demonstrates how to programmatically open Chromium Developer Tools for a renderer process in an Electron application using the `openDevTools()` API on a `BrowserWindow` instance's webContents. This requires Electron as a dependency. Ensure that Electron is installed and correctly set up in your project. The main input is the `BrowserWindow` instance, and there are no specific outputs, but the Developer Tools will be opened.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/application-debugging.md#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow()
win.webContents.openDevTools()
```

----------------------------------------

TITLE: Invoking desktopCapturer via IPC (Renderer Process JavaScript)
DESCRIPTION: Demonstrates how a renderer process can access the `desktopCapturer.getSources` functionality exposed by the main process. It uses `ipcRenderer.invoke` to call the handler registered in the main process.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_56

LANGUAGE: JavaScript
CODE:
```
// Renderer process
const { ipcRenderer } = require('electron')

const desktopCapturer = {
  getSources: (opts) => ipcRenderer.invoke('DESKTOP_CAPTURER_GET_SOURCES', opts)
}
```

----------------------------------------

TITLE: Sample package.json Configuration for Electron App
DESCRIPTION: Example package.json file after initializing the project and installing Electron. It defines the main entry point as main.js and includes basic metadata for the application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "name": "my-electron-app",
  "version": "1.0.0",
  "description": "Hello World!",
  "main": "main.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Jane Doe",
  "license": "MIT",
  "devDependencies": {
    "electron": "23.1.3"
  }
}
```

----------------------------------------

TITLE: Incorrect Direct API Exposure in Preload Script
DESCRIPTION: This example demonstrates an incorrect approach to exposing APIs from a preload script to a renderer due to contextIsolation. Directly attaching properties to the window object won't work with contextIsolation enabled.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
window.myAPI = {
  desktop: true
}
```

----------------------------------------

TITLE: Basic Menu Template in JavaScript
DESCRIPTION: A simple menu template array defining four menu items with IDs and labels. This creates a straightforward linear menu structure.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
[
  { id: '1', label: 'one' },
  { id: '2', label: 'two' },
  { id: '3', label: 'three' },
  { id: '4', label: 'four' }
]
```

----------------------------------------

TITLE: Content Security Policy Examples
DESCRIPTION: Examples of bad and good Content Security Policy (CSP) headers that help protect against cross-site scripting and data injection attacks.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_9

LANGUAGE: plaintext
CODE:
```
// Bad
Content-Security-Policy: '*'

// Good
Content-Security-Policy: script-src 'self' https://apis.example.com
```

----------------------------------------

TITLE: Replacing <webview> new-window with IPC and Handler (Modern JavaScript)
DESCRIPTION: Provides a multi-part replacement strategy for the removed `<webview>` `new-window` event. It involves setting a `setWindowOpenHandler` on the attached webContents in the main process and communicating the event details via IPC to the renderer process where the webview resides.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_50

LANGUAGE: JavaScript
CODE:
```
// Replace with

// main.js
mainWindow.webContents.on('did-attach-webview', (event, wc) => {
  wc.setWindowOpenHandler((details) => {
    mainWindow.webContents.send('webview-new-window', wc.id, details)
    return { action: 'deny' }
  })
})

// preload.js
const { ipcRenderer } = require('electron')
ipcRenderer.on('webview-new-window', (e, webContentsId, details) => {
  console.log('webview-new-window', webContentsId, details)
  document.getElementById('webview').dispatchEvent(new Event('new-window'))
})

// renderer.js
document.getElementById('webview').addEventListener('new-window', () => {
  console.log('got new-window event')
})
```

----------------------------------------

TITLE: Creating Preload Script with Context Bridge in Electron
DESCRIPTION: Demonstrates how to expose selected Node.js process versions to the renderer process using contextBridge in a preload script.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { contextBridge } = require('electron')

contextBridge.exposeInMainWorld('versions', {
  node: () => process.versions.node,
  chrome: () => process.versions.chrome,
  electron: () => process.versions.electron
  // we can also expose variables, not just functions
})
```

----------------------------------------

TITLE: Safe ipcRenderer Exposure Pattern
DESCRIPTION: Security-focused example showing how to safely expose specific ipcRenderer functionality through contextBridge rather than sending the entire module.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
// Preload (Isolated World)
contextBridge.exposeInMainWorld('electron', {
  onMyEventName: (callback) => ipcRenderer.on('MyEventName', (e, ...args) => callback(args))
})
```

----------------------------------------

TITLE: Getting desktopCapturer Sources in Renderer (Deprecated JavaScript)
DESCRIPTION: Refers to the deprecated usage of `desktopCapturer.getSources` directly within the renderer process. This functionality has been removed from the renderer to improve application security.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_54

LANGUAGE: JavaScript
CODE:
```
// Deprecated: Usage in the renderer process
```

----------------------------------------

TITLE: Basic main.js Entry Point for Testing
DESCRIPTION: A simple main.js file that logs a message to verify the Electron setup is working properly. This script runs in the main process when the application starts.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
console.log('Hello from Electron 👋')
```

----------------------------------------

TITLE: Using Safe ipcRenderer Bridge in Renderer
DESCRIPTION: Example showing how to use a safely exposed ipcRenderer event handler in the main world renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
// Renderer (Main World)
window.electron.onMyEventName(data => { /* ... */ })
```

----------------------------------------

TITLE: Configuring Window Creation in Main Process
DESCRIPTION: Example showing how to use setWindowOpenHandler in the main process to control window creation. Demonstrates filtering URLs and setting custom window options.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/window-open.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// main.js
const mainWindow = new BrowserWindow()

// In this example, only windows with the `about:blank` url will be created.
// All other urls will be blocked.
mainWindow.webContents.setWindowOpenHandler(({ url }) => {
  if (url === 'about:blank') {
    return {
      action: 'allow',
      overrideBrowserWindowOptions: {
        frame: false,
        fullscreenable: false,
        backgroundColor: 'black',
        webPreferences: {
          preload: 'my-child-window-preload-script.js'
        }
      }
    }
  }
  return { action: 'deny' }
})
```

----------------------------------------

TITLE: Exposing APIs with Context Isolation using contextBridge in TypeScript
DESCRIPTION: Example of exposing APIs using contextBridge in a TypeScript preload script, demonstrating type-safe API exposure.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
contextBridge.exposeInMainWorld('electronAPI', {
  loadPreferences: () => ipcRenderer.invoke('load-prefs')
})
```

----------------------------------------

TITLE: Quitting Electron Application When Last Window Closes
DESCRIPTION: This code snippet demonstrates how to quit an Electron application automatically when all windows are closed. It imports the app module from Electron and listens for the 'window-all-closed' event to trigger app.quit().
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
app.on('window-all-closed', () => {
  app.quit()
})
```

----------------------------------------

TITLE: Retrieving Application File Paths in Electron
DESCRIPTION: The app.getPath(name) method retrieves paths to special directories or files based on the provided name parameter. It returns a string path or throws an Error on failure.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
app.getPath(name)
```

----------------------------------------

TITLE: Implementing Chrome DevTools Debugging in Electron
DESCRIPTION: Example showing how to attach a debugger to an Electron BrowserWindow, handle debugger events, and send debugging commands. Demonstrates attaching the debugger, listening for detach and message events, and enabling network monitoring.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/debugger.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

try {
  win.webContents.debugger.attach('1.1')
} catch (err) {
  console.log('Debugger attach failed : ', err)
}

win.webContents.debugger.on('detach', (event, reason) => {
  console.log('Debugger detached due to : ', reason)
})

win.webContents.debugger.on('message', (event, method, params) => {
  if (method === 'Network.requestWillBeSent') {
    if (params.request.url === 'https://www.github.com') {
      win.webContents.debugger.detach()
    }
  }
})

win.webContents.debugger.sendCommand('Network.enable')
```

----------------------------------------

TITLE: Using webContents.setWindowOpenHandler (Modern JavaScript)
DESCRIPTION: Shows the modern approach using `webContents.setWindowOpenHandler` to intercept window open requests and handle them, such as denying the request. This method replaces the deprecated `webContents` `new-window` event.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_48

LANGUAGE: JavaScript
CODE:
```
// Replace with
webContents.setWindowOpenHandler((details) => {
  return { action: 'deny' }
})
```

----------------------------------------

TITLE: Implementing Basic Auto-Update in Electron
DESCRIPTION: JavaScript code snippet showing how to implement basic auto-update functionality using the update-electron-app module in an Electron application's main process.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
require('update-electron-app')()
```

----------------------------------------

TITLE: Updating webFrame.setSpellCheckProvider Callback to Asynchronous
DESCRIPTION: The callback signature for `webFrame.setSpellCheckProvider` has changed from synchronous to asynchronous. The new callback receives an array of words and a `callback` function that should be called with an array of misspelled words.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_106

LANGUAGE: javascript
CODE:
```
// Deprecated
webFrame.setSpellCheckProvider('en-US', true, {
  spellCheck: (text) => {
    return !spellchecker.isMisspelled(text)
  }
})
```

LANGUAGE: javascript
CODE:
```
// Replace with
webFrame.setSpellCheckProvider('en-US', {
  spellCheck: (words, callback) => {
    callback(words.filter(text => spellchecker.isMisspelled(text)))
  }
})
```

----------------------------------------

TITLE: Replacing Remote Module Require (JS)
DESCRIPTION: Shows the recommended way to import and initialize the `@electron/remote` module as a replacement for the deprecated `electron.remote` module.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_85

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('@electron/remote')
```

LANGUAGE: javascript
CODE:
```
require('@electron/remote/main').initialize()
```

----------------------------------------

TITLE: Handle Drag Events in renderer.js (Electron)
DESCRIPTION: This JavaScript code sets up an event listener for the 'dragstart' event on the element with id 'drag'.  When the drag starts, it calls the `startDrag` function (exposed via `contextBridge`) with a filename and prevents the default drag behavior.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-file-drag-drop.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
document.getElementById('drag').ondragstart = (event) => {
  event.preventDefault()
  window.electron.startDrag('drag-and-drop.md')
}
```

----------------------------------------

TITLE: Checking for Updates in Electron
DESCRIPTION: Queries the server to determine if an update is available. Requires setFeedURL to be called first. Will download updates automatically if available.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/auto-updater.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
### `autoUpdater.checkForUpdates()`

Asks the server whether there is an update. You must call `setFeedURL` before
using this API.

**Note:** If an update is available it will be downloaded automatically.
Calling `autoUpdater.checkForUpdates()` twice will download the update two times.
```

----------------------------------------

TITLE: Preventing keydown/keyup events with before-input-event in Electron
DESCRIPTION: This code snippet demonstrates how to prevent default keydown/keyup events and menu shortcuts in an Electron application using the 'before-input-event' event. The code checks for Ctrl/Cmd key presses and selectively ignores menu shortcuts based on these modifier keys.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ width: 800, height: 600 })

win.webContents.on('before-input-event', (event, input) => {
  // For example, only enable application menu keyboard shortcuts when
  // Ctrl/Cmd are down.
  win.webContents.setIgnoreMenuShortcuts(!input.control && !input.meta)
})
```

----------------------------------------

TITLE: Executing Window Creation When App is Ready
DESCRIPTION: Code that waits for the Electron app to be ready before creating a window. It uses app.whenReady() which returns a promise that resolves when the app is initialized.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_10

LANGUAGE: js
CODE:
```
app.whenReady().then(() => {
  createWindow()
})
```

----------------------------------------

TITLE: Exposing IPC Communication via Preload Script for Window Title Setting
DESCRIPTION: Uses contextBridge to safely expose the ipcRenderer.send API to the renderer process. Creates an electronAPI object with a setTitle method that can be called from the renderer.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInMainWorld('electronAPI', {
  setTitle: (title) => ipcRenderer.send('set-title', title)
})
```

----------------------------------------

TITLE: Handling Application Closure in Electron
DESCRIPTION: Event listener for window closure that implements the platform-specific behavior of quitting the app when all windows are closed (except on macOS).
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit()
})
```

----------------------------------------

TITLE: File Filter Configuration Example
DESCRIPTION: Demonstrates how to configure file type filters for dialog windows to limit selectable file types
SOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
{
  filters: [
    { name: 'Images', extensions: ['jpg', 'png', 'gif'] },
    { name: 'Movies', extensions: ['mkv', 'avi', 'mp4'] },
    { name: 'Custom File Type', extensions: ['as'] },
    { name: 'All Files', extensions: ['*'] }
  ]
}
```

----------------------------------------

TITLE: Implementing Renderer Process Logic for Window Title Setting
DESCRIPTION: Adds event handling logic to the renderer process that captures input field values and sends them to the main process via the exposed electronAPI.setTitle method.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const setButton = document.getElementById('btn')
const titleInput = document.getElementById('title')
setButton.addEventListener('click', () => {
  const title = titleInput.value
  window.electronAPI.setTitle(title)
})
```

----------------------------------------

TITLE: Creating Context Menu in Electron Renderer Process
DESCRIPTION: Example showing how to create and display a context menu initiated by the renderer process. This pattern uses IPC to communicate between renderer and main processes to show a context menu when a user right-clicks the page.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// renderer
window.addEventListener('contextmenu', (e) => {
  e.preventDefault()
  ipcRenderer.send('show-context-menu')
})

ipcRenderer.on('context-menu-command', (e, command) => {
  // ...
})

// main
ipcMain.on('show-context-menu', (event) => {
  const template = [
    {
      label: 'Menu Item 1',
      click: () => { event.sender.send('context-menu-command', 'menu-item-1') }
    },
    { type: 'separator' },
    { label: 'Menu Item 2', type: 'checkbox', checked: true }
  ]
  const menu = Menu.buildFromTemplate(template)
  menu.popup({ window: BrowserWindow.fromWebContents(event.sender) })
})
```

----------------------------------------

TITLE: Implementing Preload Script for Context-Isolated Communication
DESCRIPTION: Preload script that bridges communication between the isolated world and main world, handling port transfer for direct main process communication.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
const { ipcRenderer } = require('electron')

// We need to wait until the main world is ready to receive the message before
// sending the port. We create this promise in the preload so it's guaranteed
// to register the onload listener before the load event is fired.
const windowLoaded = new Promise(resolve => {
  window.onload = resolve
})

ipcRenderer.on('main-world-port', async (event) => {
  await windowLoaded
  // We use regular window.postMessage to transfer the port from the isolated
  // world to the main world.
  window.postMessage('main-world-port', '*', event.ports)
})
```

----------------------------------------

TITLE: Handling Certificate Errors in Electron
DESCRIPTION: This code demonstrates how to handle SSL certificate errors in an Electron application. It listens for the 'certificate-error' event and implements custom verification logic, allowing trusted certificates for specific URLs while rejecting others.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.on('certificate-error', (event, webContents, url, error, certificate, callback) => {
  if (url === 'https://github.com') {
    // Verification logic.
    event.preventDefault()
    callback(true)
  } else {
    callback(false)
  }
})
```

----------------------------------------

TITLE: Accessing API in Custom Isolated World
DESCRIPTION: Example of accessing an API exposed through contextBridge.exposeInIsolatedWorld in a renderer process running in that specific isolated world.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
// Renderer (In isolated world id1004)

window.electron.doThing()
```

----------------------------------------

TITLE: Accessing Exposed API in Renderer
DESCRIPTION: Example of how to access an API that was exposed through contextBridge from the main world renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Renderer (Main World)

window.electron.doThing()
```

----------------------------------------

TITLE: Insecure BrowserWindow Configuration with WebSecurity Disabled
DESCRIPTION: Example showing how not to configure a BrowserWindow by disabling webSecurity, which would compromise same-origin policy and allow insecure content execution.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
// Bad
const mainWindow = new BrowserWindow({
  webPreferences: {
    webSecurity: false
  }
})
```

----------------------------------------

TITLE: Running the Electron Application
DESCRIPTION: Command to start the Electron application using the npm script defined in package.json. This executes the main.js file in the Electron environment.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
npm run start
```

----------------------------------------

TITLE: Opening URL with Electron Shell Module
DESCRIPTION: Demonstrates how to use the shell module to open a URL in the system's default browser.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/shell.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { shell } = require('electron')

shell.openExternal('https://github.com')
```

----------------------------------------

TITLE: Creating a Window that Fills the Screen in Electron
DESCRIPTION: This example demonstrates how to create an Electron window that fills the entire available work area of the primary display. It retrieves the primary display's workAreaSize and creates a window with those dimensions.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/screen.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Retrieve information about screen size, displays, cursor position, etc.
//
// For more info, see:
// https://www.electronjs.org/docs/latest/api/screen

const { app, BrowserWindow, screen } = require('electron/main')

let mainWindow = null

app.whenReady().then(() => {
  // Create a window that fills the screen's available work area.
  const primaryDisplay = screen.getPrimaryDisplay()
  const { width, height } = primaryDisplay.workAreaSize

  mainWindow = new BrowserWindow({ width, height })
  mainWindow.loadURL('https://electronjs.org')
})
```

----------------------------------------

TITLE: Creating a BrowserWindow with Preload Script in Electron
DESCRIPTION: This snippet shows how to attach a preload script to a BrowserWindow in the main process. The preload script is specified in the webPreferences option of the BrowserWindow constructor.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
// ...
const win = new BrowserWindow({
  webPreferences: {
    preload: 'path/to/preload.js'
  }
})
// ...
```

----------------------------------------

TITLE: Preload Script for Handling MessagePorts in Renderer Processes
DESCRIPTION: A preload script that receives a MessagePort from the main process and makes it globally available in the renderer. It sets up a message handler for incoming messages from the other end of the channel.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { ipcRenderer } = require('electron')

ipcRenderer.on('port', e => {
  // port received, make it globally available.
  window.electronMessagePort = e.ports[0]

  window.electronMessagePort.onmessage = messageEvent => {
    // handle message
  }
})
```

----------------------------------------

TITLE: Configuring Auto-Updater in Electron
DESCRIPTION: JavaScript code snippet demonstrating how to import required modules, construct the update server URL, and set up the auto-updater in an Electron application's main process.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { app, autoUpdater, dialog } = require('electron')

const server = 'https://your-deployment-url.com'
const url = `${server}/update/${process.platform}/${app.getVersion()}`

autoUpdater.setFeedURL({ url })

setInterval(() => {
  autoUpdater.checkForUpdates()
}, 60000)
```

----------------------------------------

TITLE: Registering Preload Script in Electron Session
DESCRIPTION: Registers a preload script that will be executed in its associated context type in the session. For 'frame' contexts, this runs prior to any preload defined in the web preferences of a WebContents.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_23

LANGUAGE: JavaScript
CODE:
```
ses.registerPreloadScript(script)
```

----------------------------------------

TITLE: Expose startDrag function in preload.js (Electron)
DESCRIPTION: This code snippet uses Electron's contextBridge to expose a function named `startDrag` to the renderer process. The `startDrag` function sends an IPC message to the main process with the specified filename.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-file-drag-drop.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInMainWorld('electron', {
  startDrag: (fileName) => ipcRenderer.send('ondragstart', fileName)
})
```

----------------------------------------

TITLE: Validating IPC Message Senders
DESCRIPTION: Demonstrates how to properly validate IPC message senders to prevent unauthorized access.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_20

LANGUAGE: javascript
CODE:
```
// Bad
ipcMain.handle('get-secrets', () => {
  return getSecrets()
})

// Good
ipcMain.handle('get-secrets', (e) => {
  if (!validateSender(e.senderFrame)) return null
  return getSecrets()
})

function validateSender (frame) {
  // Value the host of the URL using an actual URL parser and an allowlist
  if ((new URL(frame.url)).host === 'electronjs.org') return true
  return false
}
```

----------------------------------------

TITLE: Sending Messages to Utility Process - JavaScript
DESCRIPTION: The `child.postMessage` method allows sending messages and transferring `MessagePortMain` objects to a child process. This facilitates asynchronous communication between the main process and utility processes, enabling complex interactions and data exchanges across process boundaries.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/utility-process.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
"const { port1, port2 } = new MessageChannelMain()\nconst child = utilityProcess.fork(path.join(__dirname, 'test.js'))\nchild.postMessage({ message: 'hello' }, [port1])"
```

----------------------------------------

TITLE: Creating Multiple WebContentsViews in Electron Window
DESCRIPTION: Demonstrates how to create two WebContentsViews within a BaseWindow, set their bounds, and load different URLs into each view. Shows the basic setup for creating a split-view interface.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents-view.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { BaseWindow, WebContentsView } = require('electron')
const win = new BaseWindow({ width: 800, height: 400 })

const view1 = new WebContentsView()
win.contentView.addChildView(view1)
view1.webContents.loadURL('https://electronjs.org')
view1.setBounds({ x: 0, y: 0, width: 400, height: 400 })

const view2 = new WebContentsView()
win.contentView.addChildView(view2)
view2.webContents.loadURL('https://github.com/electron/electron')
view2.setBounds({ x: 400, y: 0, width: 400, height: 400 })
```

----------------------------------------

TITLE: Initializing Crash Reporter in Electron
DESCRIPTION: Basic example of setting up the crash reporter in Electron to submit crash reports to a remote server. The crashReporter.start() method must be called before using any other crashReporter APIs.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/crash-reporter.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { crashReporter } = require('electron')

crashReporter.start({ submitURL: 'https://your-domain.com/url-to-submit' })
```

----------------------------------------

TITLE: Enabling Global Sandbox in Electron
DESCRIPTION: Shows how to force sandbox mode for all renderer processes using app.enableSandbox() API before the app's ready event.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/sandbox.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
app.enableSandbox()
app.whenReady().then(() => {
  // any sandbox:false calls are overridden since `app.enableSandbox()` was called.
  const win = new BrowserWindow()
  win.loadURL('https://google.com')
})
```

----------------------------------------

TITLE: Handling Invokable IPC Messages with ipcMainServiceWorker.handle()
DESCRIPTION: Registers a handler for invokable IPC messages on a specific channel. The handler can return a value or a Promise that resolves to a value.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
ipcMainServiceWorker.handle(channel, listener)
```

----------------------------------------

TITLE: Installing Updates in Electron
DESCRIPTION: Restarts the application and installs the downloaded update. Should only be called after the update-downloaded event has been emitted. Closes all application windows and quits the app.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/auto-updater.md#2025-04-21_snippet_3

LANGUAGE: markdown
CODE:
```
### `autoUpdater.quitAndInstall()`

Restarts the app and installs the update after it has been downloaded. It
should only be called after `update-downloaded` has been emitted.

Under the hood calling `autoUpdater.quitAndInstall()` will close all application
windows first, and automatically call `app.quit()` after all windows have been
closed.

**Note:** It is not strictly necessary to call this function to apply an update,
as a successfully downloaded update will always be applied the next time the
application starts.
```

----------------------------------------

TITLE: Creating a GET request to GitHub.com using net.request in Electron
DESCRIPTION: This example demonstrates how to create an HTTP request to GitHub.com by specifying the protocol, hostname, port, and path. The request uses the HTTPS protocol on port 443 with a GET method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const request = net.request({
  method: 'GET',
  protocol: 'https:',
  hostname: 'github.com',
  port: 443,
  path: '/'
})
```

----------------------------------------

TITLE: Exposing APIs without Context Isolation in JavaScript
DESCRIPTION: Example of how APIs were exposed from the preload script to the renderer process when context isolation was disabled. This method is no longer recommended.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// preload with contextIsolation disabled
window.myAPI = {
  doAThing: () => {}
}
```

LANGUAGE: javascript
CODE:
```
// use the exposed API in the renderer
window.myAPI.doAThing()
```

----------------------------------------

TITLE: Creating and Using a BrowserView in Electron's Main Process
DESCRIPTION: This example demonstrates how to create a BrowserWindow and a BrowserView, set the BrowserView's bounds, and load a URL into its web contents.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-view.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// In the main process.
const { app, BrowserView, BrowserWindow } = require('electron')

app.whenReady().then(() => {
  const win = new BrowserWindow({ width: 800, height: 600 })

  const view = new BrowserView()
  win.setBrowserView(view)
  view.setBounds({ x: 0, y: 0, width: 300, height: 300 })
  view.webContents.loadURL('https://electronjs.org')
})
```

----------------------------------------

TITLE: Making HTTP Request with Electron Net Module
DESCRIPTION: Example showing how to make an HTTP request using Electron's net module. The code demonstrates creating a request to GitHub, handling the response including status code, headers and body data.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/net.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
app.whenReady().then(() => {
  const { net } = require('electron')
  const request = net.request('https://github.com')
  request.on('response', (response) => {
    console.log(`STATUS: ${response.statusCode}`)
    console.log(`HEADERS: ${JSON.stringify(response.headers)}`)
    response.on('data', (chunk) => {
      console.log(`BODY: ${chunk}`)
    })
    response.on('end', () => {
      console.log('No more data in response.')
    })
  })
  request.end()
})
```

----------------------------------------

TITLE: Creating Application Menu with Template API in Electron
DESCRIPTION: Example demonstrating how to create an application menu in Electron using the template API. This snippet shows platform-specific menu structures for macOS and Windows/Linux with predefined roles for common menu functions.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, Menu } = require('electron')

const isMac = process.platform === 'darwin'

const template = [
  // { role: 'appMenu' }
  ...(isMac
    ? [{
        label: app.name,
        submenu: [
          { role: 'about' },
          { type: 'separator' },
          { role: 'services' },
          { type: 'separator' },
          { role: 'hide' },
          { role: 'hideOthers' },
          { role: 'unhide' },
          { type: 'separator' },
          { role: 'quit' }
        ]
      }]
    : []),
  // { role: 'fileMenu' }
  {
    label: 'File',
    submenu: [
      isMac ? { role: 'close' } : { role: 'quit' }
    ]
  },
  // { role: 'editMenu' }
  {
    label: 'Edit',
    submenu: [
      { role: 'undo' },
      { role: 'redo' },
      { type: 'separator' },
      { role: 'cut' },
      { role: 'copy' },
      { role: 'paste' },
      ...(isMac
        ? [
            { role: 'pasteAndMatchStyle' },
            { role: 'delete' },
            { role: 'selectAll' },
            { type: 'separator' },
            {
              label: 'Speech',
              submenu: [
                { role: 'startSpeaking' },
                { role: 'stopSpeaking' }
              ]
            }
          ]
        : [
            { role: 'delete' },
            { type: 'separator' },
            { role: 'selectAll' }
          ])
    ]
  },
  // { role: 'viewMenu' }
  {
    label: 'View',
    submenu: [
      { role: 'reload' },
      { role: 'forceReload' },
      { role: 'toggleDevTools' },
      { type: 'separator' },
      { role: 'resetZoom' },
      { role: 'zoomIn' },
      { role: 'zoomOut' },
      { type: 'separator' },
      { role: 'togglefullscreen' }
    ]
  },
  // { role: 'windowMenu' }
  {
    label: 'Window',
    submenu: [
      { role: 'minimize' },
      { role: 'zoom' },
      ...(isMac
        ? [
            { type: 'separator' },
            { role: 'front' },
            { type: 'separator' },
            { role: 'window' }
          ]
        : [
            { role: 'close' }
          ])
    ]
  },
  {
    role: 'help',
    submenu: [
      {
        label: 'Learn More',
        click: async () => {
          const { shell } = require('electron')
          await shell.openExternal('https://electronjs.org')
        }
      }
    ]
  }
]

const menu = Menu.buildFromTemplate(template)
Menu.setApplicationMenu(menu)
```

----------------------------------------

TITLE: Reading a File from ASAR Archive using Node.js
DESCRIPTION: This JavaScript code snippet demonstrates how to read a specific file from an ASAR archive using Node's fs module.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
const fs = require('node:fs')
fs.readFileSync('/path/to/example.asar/file.txt')
```

----------------------------------------

TITLE: Preventing Unload with dialog in Electron
DESCRIPTION: This code snippet demonstrates how to use the 'will-prevent-unload' event to display a dialog box asking the user if they want to leave the site when a `beforeunload` event is triggered. Calling `event.preventDefault()` will prevent the unload if the user chooses to stay.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { BrowserWindow, dialog } = require('electron')
const win = new BrowserWindow({ width: 800, height: 600 })
win.webContents.on('will-prevent-unload', (event) => {
  const choice = dialog.showMessageBoxSync(win, {
    type: 'question',
    buttons: ['Leave', 'Stay'],
    title: 'Do you want to leave this site?',
    message: 'Changes you made may not be saved.',
    defaultId: 0,
    cancelId: 1
  })
  const leave = (choice === 0)
  if (leave) {
    event.preventDefault()
  }
})
```

----------------------------------------

TITLE: Managing Application Lifecycle in Electron Main Process
DESCRIPTION: This snippet shows how to handle the application lifecycle using Electron's app module. It specifically demonstrates implementing the window-all-closed event to quit the application when all windows are closed, except on macOS.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// quitting the app when no windows are open on non-macOS platforms
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit()
})
```

----------------------------------------

TITLE: Basic MessagePort Usage Between Renderer and Main Process in Electron
DESCRIPTION: Demonstrates the fundamental usage of MessagePort in Electron, showing how to create a channel in the renderer process and pass one end to the main process. The main process receives the port and can communicate with the renderer through this direct channel.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// MessagePorts are created in pairs. A connected pair of message ports is
// called a channel.
const channel = new MessageChannel()

// The only difference between port1 and port2 is in how you use them. Messages
// sent to port1 will be received by port2 and vice-versa.
const port1 = channel.port1
const port2 = channel.port2

// It's OK to send a message on the channel before the other end has registered
// a listener. Messages will be queued until a listener is registered.
port2.postMessage({ answer: 42 })

// Here we send the other end of the channel, port1, to the main process. It's
// also possible to send MessagePorts to other frames, or to Web Workers, etc.
ipcRenderer.postMessage('port', null, [port1])
```

LANGUAGE: javascript
CODE:
```
// In the main process, we receive the port.
ipcMain.on('port', (event) => {
  // When we receive a MessagePort in the main process, it becomes a
  // MessagePortMain.
  const port = event.ports[0]

  // MessagePortMain uses the Node.js-style events API, rather than the
  // web-style events API. So .on('message', ...) instead of .onmessage = ...
  port.on('message', (event) => {
    // data is { answer: 42 }
    const data = event.data
  })

  // MessagePortMain queues messages until the .start() method has been called.
  port.start()
})
```

----------------------------------------

TITLE: Creating Modal BaseWindow | Electron | js
DESCRIPTION: This snippet shows how to create a modal child window that blocks interaction with its parent. This is achieved by setting both the `parent` and `modal` options in the child's constructor. Requires the `ready` event of the `app` module and the `BaseWindow` module from 'electron'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#_snippet_2

LANGUAGE: js
CODE:
```
const { BaseWindow } = require('electron')

const parent = new BaseWindow()
const child = new BaseWindow({ parent, modal: true })
```

----------------------------------------

TITLE: Loading Local File URL into BrowserWindow Electron JavaScript
DESCRIPTION: Demonstrates how to load a local HTML file (like index.html) into an Electron BrowserWindow using the file:// protocol. It uses Node's url.format and path.join to construct the correct file URL format, ensuring proper handling of paths across different operating systems. Requires the 'electron', 'url', and 'path' modules.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

const url = require('url').format({
  protocol: 'file',
  slashes: true,
  pathname: require('node:path').join(__dirname, 'index.html')
})

win.loadURL(url)
```

----------------------------------------

TITLE: Loading URL in WebContentsView
DESCRIPTION: Shows how to create a WebContentsView instance and load a URL into its WebContents. Demonstrates basic usage of the webContents property.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents-view.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { WebContentsView } = require('electron')
const view = new WebContentsView()
view.webContents.loadURL('https://electronjs.org/')
```

----------------------------------------

TITLE: Exposing IPC Communication via Preload Script for File Dialog
DESCRIPTION: Uses contextBridge to safely expose the ipcRenderer.invoke API to the renderer process. Creates an electronAPI object with an openFile method that returns a Promise with the selected file path.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInMainWorld('electronAPI', {
  openFile: () => ipcRenderer.invoke('dialog:openFile')
})
```

----------------------------------------

TITLE: Configuring Update Server URL in Electron
DESCRIPTION: JavaScript code snippet showing how to construct and set the update server URL for both Windows and macOS platforms in an Electron application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
const { app, autoUpdater } = require('electron')

const server = 'https://your-deployment-url.com'
// e.g. for Windows and app version 1.2.3
// https://your-deployment-url.com/update/win32/1.2.3
const url = `${server}/update/${process.platform}/${app.getVersion()}`

autoUpdater.setFeedURL({ url })
```

----------------------------------------

TITLE: Registering Local Keyboard Shortcuts in Electron
DESCRIPTION: This snippet demonstrates how to register local keyboard shortcuts using the Menu and MenuItem modules in Electron. The accelerator property is used to define the shortcut, which is triggered only when the application is focused. The accelerator is set differently depending on the operating system.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, Menu, MenuItem } = require('electron/main')

function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600
  })

  win.loadFile('index.html')
}

const menu = new Menu()
menu.append(new MenuItem({
  label: 'Electron',
  submenu: [{
    role: 'help',
    accelerator: process.platform === 'darwin' ? 'Alt+Cmd+I' : 'Alt+Shift+I',
    click: () => { console.log('Electron rocks!') }
  }]
}))

Menu.setApplicationMenu(menu)

app.whenReady().then(createWindow)

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})
```

----------------------------------------

TITLE: Code Signing with Electron Packager (Windows)
DESCRIPTION: This snippet shows how to configure Electron Packager to sign a Windows application. It includes parameters for customizing the signing process, such as `signWithParams` and `signToolPath`.  It uses the `@electron/packager` package and needs the path to the application and the signing tool.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/code-signing.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const packager = require('@electron/packager')

packager({
  dir: '/path/to/my/app',
  windowsSign: {
    signWithParams: '--my=custom --parameters',
    // If signtool.exe does not work for you, customize!
    signToolPath: 'C:\\Path\\To\\my-custom-tool.exe'
  }
})
```

----------------------------------------

TITLE: IPC Communication in Renderer Process
DESCRIPTION: Shows how to use the exposed ping function to communicate with the main process from the renderer.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
const func = async () => {
  const response = await window.versions.ping()
  console.log(response) // prints out 'pong'
}

func()
```

----------------------------------------

TITLE: Single Instance Lock Management in Electron
DESCRIPTION: Example showing how to handle single instance application behavior in Electron. The code demonstrates requesting a single instance lock and handling secondary instance launches by focusing the primary window.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_21

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')
let myWindow = null

const additionalData = { myKey: 'myValue' }
const gotTheLock = app.requestSingleInstanceLock(additionalData)

if (!gotTheLock) {
  app.quit()
} else {
  app.on('second-instance', (event, commandLine, workingDirectory, additionalData) => {
    // Print out data received from the second instance.
    console.log(additionalData)

    // Someone tried to run a second instance, we should focus our window.
    if (myWindow) {
      if (myWindow.isMinimized()) myWindow.restore()
      myWindow.focus()
    }
  })

  app.whenReady().then(() => {
    myWindow = new BrowserWindow({})
    myWindow.loadURL('https://electronjs.org')
  })
}
```

----------------------------------------

TITLE: Creating Parent-Child BaseWindow | Electron | js
DESCRIPTION: This code illustrates how to establish a parent-child relationship between two `BaseWindow` instances. By passing the parent window object in the options, the child window is linked and will always display above the parent. Requires the `ready` event of the `app` module and the `BaseWindow` module from 'electron'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#_snippet_1

LANGUAGE: js
CODE:
```
const { BaseWindow } = require('electron')

const parent = new BaseWindow()
const child = new BaseWindow({ parent })
```

----------------------------------------

TITLE: Implementing Custom File Protocol Handler in Electron
DESCRIPTION: Example of implementing a custom 'atom://' protocol that behaves similar to the file:// protocol. Uses app.whenReady() to ensure protocol registration happens after app initialization.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, protocol, net } = require('electron')
const path = require('node:path')
const url = require('node:url')

app.whenReady().then(() => {
  protocol.handle('atom', (request) => {
    const filePath = request.url.slice('atom://'.length)
    return net.fetch(url.pathToFileURL(path.join(__dirname, filePath)).toString())
  })
})
```

----------------------------------------

TITLE: Decrypting an Encrypted String in Electron
DESCRIPTION: This method decrypts a previously encrypted buffer back into a string. It throws an error if decryption fails.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
safeStorage.decryptString(encrypted)
```

----------------------------------------

TITLE: Checking Dark Mode with nativeTheme - Electron JavaScript
DESCRIPTION: Shows checking if dark mode is enabled using the recommended `nativeTheme.shouldUseDarkColors` property. This replaces the deprecated `systemPreferences.isDarkMode()` method.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_75

LANGUAGE: javascript
CODE:
```
// Replace with
nativeTheme.shouldUseDarkColors
```

----------------------------------------

TITLE: Transferring MessagePort from Renderer to Main Process in Electron
DESCRIPTION: Example demonstrating how to transfer MessagePort objects from the renderer process to the main process using ipcRenderer.postMessage. The main process receives the ports through the event object.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-renderer.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Renderer process
const { port1, port2 } = new MessageChannel()
ipcRenderer.postMessage('port', { message: 'hello' }, [port1])

// Main process
ipcMain.on('port', (e, msg) => {
  const [port] = e.ports
  // ...
})
```

----------------------------------------

TITLE: Exposing Dark Mode API in Electron Preload Script
DESCRIPTION: This JavaScript snippet is a preload script for Electron that exposes a darkMode API to the renderer process. It uses contextBridge to securely expose methods for toggling dark mode and resetting to system theme.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInMainWorld('darkMode', {
  toggle: () => ipcRenderer.invoke('dark-mode:toggle'),
  system: () => ipcRenderer.invoke('dark-mode:system')
})
```

----------------------------------------

TITLE: Using MessageChannelMain for Inter-Process Communication in Electron
DESCRIPTION: Example demonstrating how to create a MessageChannel in the main process and send one of its ports to a renderer process. The main process creates the channel and sends port2 to the renderer, while using port1 to post messages. The renderer process receives the port and sets up a message handler.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/message-channel-main.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Main process
const { BrowserWindow, MessageChannelMain } = require('electron')
const w = new BrowserWindow()
const { port1, port2 } = new MessageChannelMain()
w.webContents.postMessage('port', null, [port2])
port1.postMessage({ some: 'message' })

// Renderer process
const { ipcRenderer } = require('electron')
ipcRenderer.on('port', (e) => {
  // e.ports is a list of ports sent along with this message
  e.ports[0].onmessage = (messageEvent) => {
    console.log(messageEvent.data)
  }
})
```

----------------------------------------

TITLE: Loading a Web Page from ASAR Archive using Electron
DESCRIPTION: This code snippet illustrates how to load a web page contained in an ASAR archive into an Electron BrowserWindow.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

win.loadURL('file:///path/to/example.asar/static/index.html')
```

----------------------------------------

TITLE: Replace webContents setZoomLevelLimits with setVisualZoomLevelLimits (JS)
DESCRIPTION: Replaces the deprecated `webContents.setZoomLevelLimits()` method with `webContents.setVisualZoomLevelLimits()`. This updates how zoom level constraints are applied.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_138

LANGUAGE: js
CODE:
```
// Removed
webContents.setZoomLevelLimits(1, 2)
```

LANGUAGE: js
CODE:
```
// Replaced with
webContents.setVisualZoomLevelLimits(1, 2)
```

----------------------------------------

TITLE: Handling Window Closure in Electron (Windows & Linux)
DESCRIPTION: Event handler to quit the application when all windows are closed on Windows and Linux platforms. Uses the window-all-closed event to check the platform and quit appropriately.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit()
})
```

----------------------------------------

TITLE: Basic Webview Implementation in HTML
DESCRIPTION: Simple example showing how to embed a webpage using the webview tag with basic styling.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_0

LANGUAGE: html
CODE:
```
<webview id="foo" src="https://www.github.com/" style="display:inline-flex; width:640px; height:480px"></webview>
```

----------------------------------------

TITLE: Handling Invokable IPC Calls in Main Process with ipcMain
DESCRIPTION: This snippet demonstrates how to use ipcMain.handle() to process invokable IPC calls from renderer processes. The handler returns a Promise whose result will be sent back to the caller.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
ipcMain.handle('my-invokable-ipc', async (event, ...args) => {
  const result = await somePromise(...args)
  return result
})
```

----------------------------------------

TITLE: Implementing Dark Mode Control in Electron Main Process
DESCRIPTION: This JavaScript snippet shows the main process implementation of dark mode control in Electron. It sets up IPC handlers for toggling dark mode and resetting to system theme, utilizing the nativeTheme API to manage the application's appearance.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, ipcMain, nativeTheme } = require('electron')
const path = require('node:path')

const createWindow = () => {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js')
    }
  })

  win.loadFile('index.html')

  ipcMain.handle('dark-mode:toggle', () => {
    if (nativeTheme.shouldUseDarkColors) {
      nativeTheme.themeSource = 'light'
    } else {
      nativeTheme.themeSource = 'dark'
    }
    return nativeTheme.shouldUseDarkColors
  })

  ipcMain.handle('dark-mode:system', () => {
    nativeTheme.themeSource = 'system'
  })
}

app.whenReady().then(() => {
  createWindow()

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow()
    }
  })
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})
```

----------------------------------------

TITLE: Handling Dark Mode Toggle in Electron Renderer Process
DESCRIPTION: This JavaScript snippet adds event listeners to the dark mode toggle and reset buttons in the renderer process. It uses the exposed darkMode API to communicate with the main process and update the UI accordingly.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
document.getElementById('toggle-dark-mode').addEventListener('click', async () => {
  const isDarkMode = await window.darkMode.toggle()
  document.getElementById('theme-source').innerHTML = isDarkMode ? 'Dark' : 'Light'
})

document.getElementById('reset-to-system').addEventListener('click', async () => {
  await window.darkMode.system()
  document.getElementById('theme-source').innerHTML = 'System'
})
```

----------------------------------------

TITLE: Creating Complex API with contextBridge
DESCRIPTION: Example of creating a complex API with nested objects, promises, async functions, and data structures using contextBridge.exposeInMainWorld.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInMainWorld(
  'electron',
  {
    doThing: () => ipcRenderer.send('do-a-thing'),
    myPromises: [Promise.resolve(), Promise.reject(new Error('whoops'))],
    anAsyncFunction: async () => 123,
    data: {
      myFlags: ['a', 'b', 'c'],
      bootTime: 1234
    },
    nestedAPI: {
      evenDeeper: {
        youCanDoThisAsMuchAsYouWant: {
          fn: () => ({
            returnData: 123
          })
        }
      }
    }
  }
)
```

----------------------------------------

TITLE: Adding Content Security Policy via Meta Tag in HTML
DESCRIPTION: Example showing how to set a Content Security Policy directly in HTML using a meta tag, useful for file:// protocol where HTTP headers aren't available.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_11

LANGUAGE: html
CODE:
```
<meta http-equiv="Content-Security-Policy" content="default-src 'none'">
```

----------------------------------------

TITLE: Main to Renderer Communication with WebContents
DESCRIPTION: Implements a counter application demonstrating main-to-renderer process communication using WebContents.send. Includes menu integration and bidirectional messaging.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, Menu, ipcMain } = require('electron')
const path = require('node:path')

function createWindow () {
  const mainWindow = new BrowserWindow({
    webPreferences: {
      preload: path.join(__dirname, 'preload.js')
    }
  })

  const menu = Menu.buildFromTemplate([
    {
      label: app.name,
      submenu: [
        {
          click: () => mainWindow.webContents.send('update-counter', 1),
          label: 'Increment'
        },
        {
          click: () => mainWindow.webContents.send('update-counter', -1),
          label: 'Decrement'
        }
      ]
    }
  ])
  Menu.setApplicationMenu(menu)

  mainWindow.loadFile('index.html')
}
```

LANGUAGE: javascript
CODE:
```
const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInMainWorld('electronAPI', {
  onUpdateCounter: (callback) => ipcRenderer.on('update-counter', (_event, value) => callback(value)),
  counterValue: (value) => ipcRenderer.send('counter-value', value)
})
```

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self'">
    <title>Menu Counter</title>
  </head>
  <body>
    Current value: <strong id="counter">0</strong>
    <script src="./renderer.js"></script>
  </body>
</html>
```

LANGUAGE: javascript
CODE:
```
const counter = document.getElementById('counter')

window.electronAPI.onUpdateCounter((value) => {
  const oldValue = Number(counter.innerText)
  const newValue = oldValue + value
  counter.innerText = newValue.toString()
  window.electronAPI.counterValue(newValue)
})
```

----------------------------------------

TITLE: Handling BrowserWindow Close with beforeunload in Electron JavaScript
DESCRIPTION: Explains and shows how to use the window.onbeforeunload event handler to intercept the window closing process. By setting event.returnValue = false, the default close action can be cancelled, commonly used to prompt users about unsaved data.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_6

LANGUAGE: javascript
CODE:
```
window.onbeforeunload = (e) => {
  console.log('I do not want to be closed')

  // Unlike usual browsers that a message box will be prompted to users, returning
  // a non-void value will silently cancel the close.
  // It is recommended to use the dialog API to let the user confirm closing the
  // application.
  e.returnValue = false
}
```

----------------------------------------

TITLE: Lazy Loading Dependencies in Node.js
DESCRIPTION: This snippet shows an optimized version of the previous example, using lazy loading and asynchronous operations to defer work until it's actually needed, improving performance and resource allocation.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/performance.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs')

class Parser {
  async getFiles () {
    this.files = this.files || await fs.promises.readdir('.')

    return this.files
  }

  async getParsedFiles () {
    const fooParser = require('foo-parser')
    const files = await this.getFiles()

    return fooParser.parse(files)
  }
}

const parser = new Parser()

module.exports = { parser }
```

----------------------------------------

TITLE: Installing update-electron-app Module
DESCRIPTION: Installs the update-electron-app module as a runtime dependency for easy autoUpdater configuration.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
npm install update-electron-app
```

----------------------------------------

TITLE: Handling Update Notifications in Electron
DESCRIPTION: JavaScript code snippet showing how to handle the 'update-downloaded' event and display a dialog to the user when an update is available in an Electron application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
autoUpdater.on('update-downloaded', (event, releaseNotes, releaseName) => {
  const dialogOpts = {
    type: 'info',
    buttons: ['Restart', 'Later'],
    title: 'Application Update',
    message: process.platform === 'win32' ? releaseNotes : releaseName,
    detail:
      'A new version has been downloaded. Restart the application to apply the updates.'
  }

  dialog.showMessageBox(dialogOpts).then((returnValue) => {
    if (returnValue.response === 0) autoUpdater.quitAndInstall()
  })
})
```

----------------------------------------

TITLE: Terminating Utility Process - JavaScript
DESCRIPTION: The `child.kill` method is designed to terminate a spawned child process gracefully. It uses SIGTERM on POSIX systems and returns a boolean indicating the success of the termination. This is crucial for resource cleanup and ensures the process exits correctly.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/utility-process.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
"const success = child.kill() // Terminates the child process"
```

----------------------------------------

TITLE: Defining Types for Exposed APIs in TypeScript
DESCRIPTION: Shows how to create a declaration file to extend the Window interface with types for the exposed API, ensuring type safety in the renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
export interface IElectronAPI {
  loadPreferences: () => Promise<void>,
}

declare global {
  interface Window {
    electronAPI: IElectronAPI
  }
}
```

----------------------------------------

TITLE: Adding Forge Scripts to package.json
DESCRIPTION: Scripts added to package.json by Electron Forge for starting, packaging, and making the application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "start": "electron-forge start",
    "package": "electron-forge package",
    "make": "electron-forge make"
  }
}
```

----------------------------------------

TITLE: Logging Network Activity in Electron
DESCRIPTION: Demonstrates how to use the session.netLog API to start and stop logging network activity in an Electron app. It shows capturing net logs to a file and retrieving the log file path.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_29

LANGUAGE: javascript
CODE:
```
const { app, session } = require('electron')

app.whenReady().then(async () => {
  const netLog = session.fromPartition('some-partition').netLog
  netLog.startLogging('/path/to/net-log')
  // After some network events
  const path = await netLog.stopLogging()
  console.log('Net-logs written to', path)
})
```

----------------------------------------

TITLE: Accessing electron.screen via Remote in Renderer Process
DESCRIPTION: To access the `electron.screen` module from the renderer process, it is now required to use the `remote` module. Direct requiring of `electron.screen` in the renderer is deprecated.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_98

LANGUAGE: javascript
CODE:
```
// Deprecated
require('electron').screen
```

LANGUAGE: javascript
CODE:
```
// Replace with
require('electron').remote.screen
```

----------------------------------------

TITLE: Code Signing with electron-winstaller (Squirrel.Windows)
DESCRIPTION: This snippet demonstrates how to use `electron-winstaller` to create a Windows installer and configure code signing. It specifies the application directory, output directory, authors, executable name, and signing parameters. It uses the `electron-winstaller` package and needs the appropriate application and signing details.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/code-signing.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const electronInstaller = require('electron-winstaller')
// NB: Use this syntax within an async function, Node does not have support for
//     top-level await as of Node 12.
try {
  await electronInstaller.createWindowsInstaller({
    appDirectory: '/tmp/build/my-app-64',
    outputDirectory: '/tmp/build/installer64',
    authors: 'My App Inc.',
    exe: 'myapp.exe',
    windowsSign: {
      signWithParams: '--my=custom --parameters',
      // If signtool.exe does not work for you, customize!
      signToolPath: 'C:\\Path\\To\\my-custom-tool.exe'
    }
  })
  console.log('It worked!')
} catch (e) {
  console.log(`No dice: ${e.message}`)
}
```

----------------------------------------

TITLE: Permission Request Handling in Electron
DESCRIPTION: Demonstrates how to implement a permission request handler for various web API permissions like notifications, media access, and geolocation.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')
session.fromPartition('some-partition').setPermissionRequestHandler((webContents, permission, callback) => {
  if (webContents.getURL() === 'some-host' && permission === 'notifications') {
    return callback(false) // denied.
  }

  callback(true)
})
```

----------------------------------------

TITLE: Configuring Static Storage Updates in Electron
DESCRIPTION: JavaScript code snippet demonstrating how to configure the update-electron-app module for static storage updates. It sets the base URL for the update metadata files.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { updateElectronApp, UpdateSourceType } = require('update-electron-app')

updateElectronApp({
  updateSource: {
    type: UpdateSourceType.StaticStorage,
    baseUrl: `https://my-bucket.s3.amazonaws.com/my-app-updates/${process.platform}/${process.arch}`
  }
})
```

----------------------------------------

TITLE: Accessing Electron App Properties
DESCRIPTION: This snippet demonstrates how to access various properties of the Electron app module. These properties provide information about the application's state, allow manipulation of the app's appearance, and offer system-level information.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_28

LANGUAGE: JavaScript
CODE:
```
app.badgeCount = 5; // Set badge count (Linux, macOS)
const cmdLine = app.commandLine; // Access command line arguments
const dock = app.dock; // Access dock object (macOS)
const isPackaged = app.isPackaged; // Check if app is packaged
const appName = app.name; // Get application name
app.userAgentFallback = 'Custom User Agent'; // Set fallback user agent
const isARM64Translated = app.runningUnderARM64Translation; // Check if running under ARM64 translation
```

----------------------------------------

TITLE: Replacing systemPreferences Get App Level Appearance in Electron
DESCRIPTION: Demonstrates how to replace the removed `systemPreferences.getAppLevelAppearance` method with the `nativeTheme.shouldUseDarkColors` property.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_28

LANGUAGE: javascript
CODE:
```
// Removed
systemPreferences.getAppLevelAppearance()
```

LANGUAGE: javascript
CODE:
```
// Replace with
nativeTheme.shouldUseDarkColors
```

----------------------------------------

TITLE: Comprehensive TestDriver Class Implementation
DESCRIPTION: A complete implementation of a TestDriver class that wraps the child process IPC communication with RPC-style method calls. This provides a higher-level API for test suites to interact with the Electron application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_17

LANGUAGE: javascript
CODE:
```
class TestDriver {
  constructor ({ path, args, env }) {
    this.rpcCalls = []

    // start child process
    env.APP_TEST_DRIVER = 1 // let the app know it should listen for messages
    this.process = childProcess.spawn(path, args, { stdio: ['inherit', 'inherit', 'inherit', 'ipc'], env })

    // handle rpc responses
    this.process.on('message', (message) => {
      // pop the handler
      const rpcCall = this.rpcCalls[message.msgId]
      if (!rpcCall) return
      this.rpcCalls[message.msgId] = null
      // reject/resolve
      if (message.reject) rpcCall.reject(message.reject)
      else rpcCall.resolve(message.resolve)
    })

    // wait for ready
    this.isReady = this.rpc('isReady').catch((err) => {
      console.error('Application failed to start', err)
      this.stop()
      process.exit(1)
    })
  }

  // simple RPC call
  // to use: driver.rpc('method', 1, 2, 3).then(...)
  async rpc (cmd, ...args) {
    // send rpc request
    const msgId = this.rpcCalls.length
    this.process.send({ msgId, cmd, args })
    return new Promise((resolve, reject) => this.rpcCalls.push({ resolve, reject }))
  }

  stop () {
    this.process.kill()
  }
}

module.exports = { TestDriver }
```

----------------------------------------

TITLE: Full Renderer Process Notification Example
DESCRIPTION: This example shows a complete snippet that displays a notification from the renderer process using the web Notifications API. It creates a new Notification object and assigns an onclick handler to update the text content of an HTML element with id 'output' when the notification is clicked. This code requires a corresponding HTML element with id 'output'.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/notifications.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const NOTIFICATION_TITLE = 'Title'
const NOTIFICATION_BODY = 'Notification from the Renderer process. Click to log to console.'
const CLICK_MESSAGE = 'Notification clicked!'

new window.Notification(NOTIFICATION_TITLE, { body: NOTIFICATION_BODY })
  .onclick = () => { document.getElementById('output').innerText = CLICK_MESSAGE }
```

----------------------------------------

TITLE: Replacing app gpu-process-crashed Event (Removed) - JavaScript
DESCRIPTION: Illustrates the removal of the `gpu-process-crashed` event from the Electron `app` module in Electron 29. Provides the replacement code using the new `child-process-gone` event, which is a more general event for child process termination.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
// Removed
app.on('gpu-process-crashed', (event, killed) => { /* ... */ })

// Replace with
app.on('child-process-gone', (event, details) => { /* ... */ })
```

----------------------------------------

TITLE: Creating Browser Window in Electron
DESCRIPTION: Function to create a new browser window and load the app's HTML file. Sets up window dimensions and preload script configuration.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
let mainWindow

const createWindow = () => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js')
    }
  })

  mainWindow.loadFile('index.html')
}
```

----------------------------------------

TITLE: Setting Permission Check Handler (New Signature) - Electron JavaScript
DESCRIPTION: Illustrates the correct usage of `session.setPermissionCheckHandler` using the new signature, accessing `requestingOrigin` instead of relying on `webContents.getURL()` which may be null.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_65

LANGUAGE: javascript
CODE:
```
// Replace with
session.setPermissionCheckHandler((webContents, permission, requestingOrigin) => {
  if (new URL(requestingOrigin).hostname === 'google.com' && permission === 'notification') {
    return true
  }
  return false
})
```

----------------------------------------

TITLE: Creating Basic Tray Icon with Context Menu in Electron
DESCRIPTION: Demonstrates how to create a basic system tray icon with a context menu containing radio menu items. Shows initialization of tray icon when the app is ready and setting up a context menu.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, Menu, Tray } = require('electron')

let tray = null
app.whenReady().then(() => {
  tray = new Tray('/path/to/my/icon')
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Item1', type: 'radio' },
    { label: 'Item2', type: 'radio' },
    { label: 'Item3', type: 'radio', checked: true },
    { label: 'Item4', type: 'radio' }
  ])
  tray.setToolTip('This is my application.')
  tray.setContextMenu(contextMenu)
})
```

----------------------------------------

TITLE: Safe Usage of shell.openExternal
DESCRIPTION: Examples showing unsafe and safe ways to use shell.openExternal to open external URLs.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```
//  Bad
const { shell } = require('electron')
shell.openExternal(USER_CONTROLLED_DATA_HERE)
```

LANGUAGE: javascript
CODE:
```
//  Good
const { shell } = require('electron')
shell.openExternal('https://example.com/index.html')
```

----------------------------------------

TITLE: Handling Download Events in Electron's Main Process
DESCRIPTION: This snippet demonstrates how to use the DownloadItem class to control and monitor file downloads in Electron's main process. It shows how to set a save path, handle download state changes, and log download progress and completion.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/download-item.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// In the main process.
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()
win.webContents.session.on('will-download', (event, item, webContents) => {
  // Set the save path, making Electron not to prompt a save dialog.
  item.setSavePath('/tmp/save.pdf')

  item.on('updated', (event, state) => {
    if (state === 'interrupted') {
      console.log('Download is interrupted but can be resumed')
    } else if (state === 'progressing') {
      if (item.isPaused()) {
        console.log('Download is paused')
      } else {
        console.log(`Received bytes: ${item.getReceivedBytes()}`)
      }
    }
  })
  item.once('done', (event, state) => {
    if (state === 'completed') {
      console.log('Download successfully')
    } else {
      console.log(`Download failed: ${state}`)
    }
  })
})
```

----------------------------------------

TITLE: Accessing WebContents Session in Electron
DESCRIPTION: Demonstrates how to create a BrowserWindow, load a URL, and access the session of its WebContents to log the user agent.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ width: 800, height: 600 })
win.loadURL('https://github.com')

const ses = win.webContents.session
console.log(ses.getUserAgent())
```

----------------------------------------

TITLE: Registering Custom Protocol Handler in Electron
DESCRIPTION: Code to register the application as the default handler for the 'electron-fiddle://' protocol, with different handling for default app mode.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
if (process.defaultApp) {
  if (process.argv.length >= 2) {
    app.setAsDefaultProtocolClient('electron-fiddle', process.execPath, [path.resolve(process.argv[1])])
  }
} else {
  app.setAsDefaultProtocolClient('electron-fiddle')
}
```

----------------------------------------

TITLE: Fixing Tray Object Garbage Collection in Electron
DESCRIPTION: Shows how to prevent Electron tray icons from disappearing due to garbage collection by using global variables instead of local ones.
SOURCE: https://github.com/electron/electron/blob/main/docs/faq.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, Tray } = require('electron')
app.whenReady().then(() => {
  const tray = new Tray('/path/to/icon.png')
  tray.setTitle('hello world')
})
```

LANGUAGE: javascript
CODE:
```
const { app, Tray } = require('electron')
let tray = null
app.whenReady().then(() => {
  tray = new Tray('/path/to/icon.png')
  tray.setTitle('hello world')
})
```

----------------------------------------

TITLE: Controlling Window Creation in Electron
DESCRIPTION: Shows how to handle window creation requests and safely handle external URL opening.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_18

LANGUAGE: javascript
CODE:
```
const { app, shell } = require('electron')

app.on('web-contents-created', (event, contents) => {
  contents.setWindowOpenHandler(({ url }) => {
    if (isSafeForExternalOpen(url)) {
      setImmediate(() => {
        shell.openExternal(url)
      })
    }

    return { action: 'deny' }
  })
})
```

----------------------------------------

TITLE: Using Fetch API with Electron Net Module
DESCRIPTION: Example demonstrating how to use the fetch API with Electron's net module for making HTTP requests. Shows handling of response with async/await pattern.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/net.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
async function example () {
  const response = await net.fetch('https://my.app')
  if (response.ok) {
    const body = await response.json()
    // ... use the result.
  }
}
```

----------------------------------------

TITLE: Creating HTML UI for Window Title Setting in Electron
DESCRIPTION: Builds a simple HTML interface with an input field and button for setting the window title. Includes proper Content Security Policy headers and loads the renderer.js script.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_2

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self'">
    <title>Hello World!</title>
  </head>
  <body>
    Title: <input id="title"/>
    <button id="btn" type="button">Set</button>
    <script src="./renderer.js"></script>
  </body>
</html>
```

----------------------------------------

TITLE: File Path Concatenation Example
DESCRIPTION: Demonstrates platform-independent file path handling using Node.js path module.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/coding-style.md#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
path.join()
```

----------------------------------------

TITLE: Creating a Session from Partition in Electron
DESCRIPTION: Shows how to create a Session object from a partition string using the session module and log the user agent.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')
const ses = session.fromPartition('persist:name')
console.log(ses.getUserAgent())
```

----------------------------------------

TITLE: Accessing NavigationHistory in Electron
DESCRIPTION: This snippet demonstrates how to access the NavigationHistory instance via the WebContents object of a BrowserWindow. NavigationHistory provides methods to interact with the browsing history of a specific window.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const mainWindow = new BrowserWindow()
const { navigationHistory } = mainWindow.webContents
```

----------------------------------------

TITLE: Setting Permission Check Handler in Electron's Session API
DESCRIPTION: Configures a handler function to respond to permission checks for an Electron session. The example shows how to allow notifications for specific hosts while denying all other permission requests.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')
const url = require('url')
session.fromPartition('some-partition').setPermissionCheckHandler((webContents, permission, requestingOrigin) => {
  if (new URL(requestingOrigin).hostname === 'some-host' && permission === 'notifications') {
    return true // granted
  }

  return false // denied
})
```

----------------------------------------

TITLE: Showing BrowserWindow Gracefully with ready-to-show in Electron JavaScript
DESCRIPTION: Creates a hidden BrowserWindow (show: false) and uses the 'ready-to-show' event to display it only after the initial render is complete. This technique helps prevent a visual flash when loading content by ensuring the window appears fully painted.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({ show: false })
win.once('ready-to-show', () => {
  win.show()
})
```

----------------------------------------

TITLE: Implementing Custom Permission Handler for Electron Sessions
DESCRIPTION: Code sample demonstrating how to implement a custom permission request handler for Electron sessions, which allows control over which websites can request specific permissions.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')
const { URL } = require('url')

session
  .fromPartition('some-partition')
  .setPermissionRequestHandler((webContents, permission, callback) => {
    const parsedUrl = new URL(webContents.getURL())

    if (permission === 'notifications') {
      // Approves the permissions request
      callback(true)
    }

    // Verify URL
    if (parsedUrl.protocol !== 'https:' || parsedUrl.host !== 'example.com') {
      // Denies the permissions request
      return callback(false)
    }
  })
```

----------------------------------------

TITLE: Creating a Tray Icon with NativeImage in Electron
DESCRIPTION: This code demonstrates how to create a Tray icon using a NativeImage when the Electron app is ready. It uses app.whenReady() to ensure the app is initialized before creating the Tray.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tray.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
let tray

app.whenReady().then(() => {
  const icon = nativeImage.createFromPath('path/to/asset.png')
  tray = new Tray(icon)

  // note: your contextMenu, Tooltip and Title code will go here!
})
```

----------------------------------------

TITLE: Handling Message Events with MessagePortMain
DESCRIPTION: Event listener for receiving messages on a MessagePortMain object. Unlike DOM MessagePort, MessagePortMain uses Node.js EventEmitter pattern.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
port.on('message', (messageEvent) => {
  // messageEvent contains:
  // data - the message content
  // ports - array of MessagePortMain objects
})
```

----------------------------------------

TITLE: IPC Communication between Embedder and Guest Page in JavaScript
DESCRIPTION: Demonstrates how to set up bidirectional communication between the embedder page and guest page using the send method and ipc-message event.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_23

LANGUAGE: javascript
CODE:
```
// In embedder page.
const webview = document.querySelector('webview')
webview.addEventListener('ipc-message', (event) => {
  console.log(event.channel)
  // Prints "pong"
})
webview.send('ping')
```

----------------------------------------

TITLE: Update Electron WebRequestFilter for Explicit All URLs Pattern - Javascript
DESCRIPTION: Demonstrates the change in interpreting the `urls` property of a `WebRequestFilter`. The deprecated empty array `[]` (which previously matched all URLs) should now be replaced with the explicit `<all_urls>` pattern for clarity and predictable behavior.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_6

LANGUAGE: javascript
CODE:
```
// Deprecated
const deprecatedFilter = {
  urls: []
}
```

LANGUAGE: javascript
CODE:
```
// Replace with
const newFilter = {
  urls: ['<all_urls>']
}
```

----------------------------------------

TITLE: Configuring Code Signing for Windows in Forge
DESCRIPTION: Configuration for code signing Windows installers in the Forge config file, specifying certificate file and password.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
module.exports = {
  // ...
  makers: [
    {
      name: '@electron-forge/maker-squirrel',
      config: {
        certificateFile: './cert.pfx',
        certificatePassword: process.env.CERTIFICATE_PASSWORD
      }
    }
  ]
  // ...
}
```

----------------------------------------

TITLE: Initializing npm Project for Electron App
DESCRIPTION: Commands to create a new folder for the Electron application and initialize an npm project within it. This creates the initial package.json file that serves as the entry point for the application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
mkdir my-electron-app && cd my-electron-app
npm init
```

----------------------------------------

TITLE: Setting Window Bounds using Electron BaseWindow Javascript
DESCRIPTION: This snippet demonstrates how to set the position and size of an Electron `BaseWindow` using the `setBounds` method. It shows setting all properties (`x`, `y`, `width`, `height`) at once and setting a single property. It also includes getting the window's current bounds using `getBounds`.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const { BaseWindow } = require('electron')
const win = new BaseWindow()

// set all bounds properties
win.setBounds({ x: 440, y: 225, width: 800, height: 600 })

// set a single bounds property
win.setBounds({ width: 100 })

// { x: 440, y: 225, width: 100, height: 600 }
console.log(win.getBounds())
```

----------------------------------------

TITLE: Registering Global Keyboard Shortcut in Electron
DESCRIPTION: Example showing how to register a global keyboard shortcut using the globalShortcut module in Electron. The code demonstrates registering a 'CommandOrControl+Y' accelerator that executes a callback function when triggered.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/accelerator.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, globalShortcut } = require('electron')

app.whenReady().then(() => {
  // Register a 'CommandOrControl+Y' shortcut listener.
  globalShortcut.register('CommandOrControl+Y', () => {
    // Do stuff when Y and either Command/Control is pressed.
  })
})
```

----------------------------------------

TITLE: Using autoUpdater.setFeedURL Method in Electron
DESCRIPTION: Sets the URL for updates and initializes the auto updater with optional configuration parameters. For macOS, allows setting HTTP headers and server type.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/auto-updater.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
### `autoUpdater.setFeedURL(options)`

* `options` Object
  * `url` string
  * `headers` Record\<string, string\> (optional) _macOS_ - HTTP request headers.
  * `serverType` string (optional) _macOS_ - Can be `json` or `default`, see the [Squirrel.Mac][squirrel-mac]
    README for more information.
```

----------------------------------------

TITLE: Registering Global Shortcuts in Electron
DESCRIPTION: Demonstrates how to register, check, and unregister global keyboard shortcuts in an Electron application. The example shows enabling Wayland support, registering a CommandOrControl+X shortcut, checking its registration status, and proper cleanup when the app quits.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/global-shortcut.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, globalShortcut } = require('electron')

// Enable usage of Portal's globalShortcuts. This is essential for cases when
// the app runs in a Wayland session.
app.commandLine.appendSwitch('enable-features', 'GlobalShortcutsPortal')

app.whenReady().then(() => {
  // Register a 'CommandOrControl+X' shortcut listener.
  const ret = globalShortcut.register('CommandOrControl+X', () => {
    console.log('CommandOrControl+X is pressed')
  })

  if (!ret) {
    console.log('registration failed')
  }

  // Check whether a shortcut is registered.
  console.log(globalShortcut.isRegistered('CommandOrControl+X'))
})

app.on('will-quit', () => {
  // Unregister a shortcut.
  globalShortcut.unregister('CommandOrControl+X')

  // Unregister all shortcuts.
  globalShortcut.unregisterAll()
})
```

----------------------------------------

TITLE: Loading Secure Content in Renderer Process HTML
DESCRIPTION: Shows the proper way to include external resources like scripts and stylesheets using HTTPS in the renderer process HTML. Demonstrates both incorrect (HTTP) and correct (HTTPS) approaches.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<!-- Bad -->
<script crossorigin src="http://example.com/react.js"></script>
<link rel="stylesheet" href="http://example.com/style.css">

<!-- Good -->
<script crossorigin src="https://example.com/react.js"></script>
<link rel="stylesheet" href="https://example.com/style.css">
```

----------------------------------------

TITLE: Writing Text to Clipboard in Electron
DESCRIPTION: Shows how to write plain text content to the system clipboard using the clipboard.writeText() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

const text = 'hello i am a bit of text!'
clipboard.writeText(text)
```

----------------------------------------

TITLE: Disabling Node Integration in Electron BrowserWindow
DESCRIPTION: Demonstrates how to disable Node.js integration in Electron's BrowserWindow to avoid conflicts with libraries that use similar global symbols.
SOURCE: https://github.com/electron/electron/blob/main/docs/faq.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({
  webPreferences: {
    nodeIntegration: false
  }
})
win.show()
```

----------------------------------------

TITLE: Handling Auto-Update Errors in Electron
DESCRIPTION: JavaScript code snippet demonstrating how to handle and log errors that occur during the auto-update process in an Electron application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
autoUpdater.on('error', (message) => {
  console.error('There was a problem updating the application')
  console.error(message)
})
```

----------------------------------------

TITLE: Asynchronous Open Dialog with Promise
DESCRIPTION: Demonstrates using the asynchronous dialog API with promises to handle file selection results
SOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
dialog.showOpenDialog(mainWindow, {
  properties: ['openFile', 'openDirectory']
}).then(result => {
  console.log(result.canceled)
  console.log(result.filePaths)
}).catch(err => {
  console.log(err)
})
```

----------------------------------------

TITLE: Implementing Progress Bars in Electron Applications with JavaScript
DESCRIPTION: This example creates an Electron application with a progress bar that increments over time using Node.js timers. It demonstrates how to create a window, set up a timer to update the progress bar value, and properly clean up timers before the application quits.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/progress-bar.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron/main')

let progressInterval

function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600
  })

  win.loadFile('index.html')

  const INCREMENT = 0.03
  const INTERVAL_DELAY = 100 // ms

  let c = 0
  progressInterval = setInterval(() => {
    // update progress bar to next value
    // values between 0 and 1 will show progress, >1 will show indeterminate or stick at 100%
    win.setProgressBar(c)

    // increment or reset progress bar
    if (c < 2) {
      c += INCREMENT
    } else {
      c = (-INCREMENT * 5) // reset to a bit less than 0 to show reset state
    }
  }, INTERVAL_DELAY)
}

app.whenReady().then(createWindow)

// before the app is terminated, clear both timers
app.on('before-quit', () => {
  clearInterval(progressInterval)
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})
```

----------------------------------------

TITLE: Creating a MenuItem Instance in Electron
DESCRIPTION: Demonstrates how to create a new MenuItem instance with various options including click handler, role, type, label, and other properties.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/menu-item.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
new MenuItem({
  click: (menuItem, window, event) => {
    // Handle click event
  },
  role: 'copy',
  type: 'normal',
  label: 'Copy',
  sublabel: 'Copy selected text',
  accelerator: 'CommandOrControl+C',
  enabled: true,
  visible: true
})
```

----------------------------------------

TITLE: JavaScript Execution in Webview
DESCRIPTION: Method to execute JavaScript code in the context of the webview's page, with optional user gesture context creation.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
<webview>.executeJavaScript(code[, userGesture])
```

----------------------------------------

TITLE: Requiring BrowserWindow from @electron/remote Module - Electron JavaScript
DESCRIPTION: Shows the recommended way to require `BrowserWindow` using the `@electron/remote` module and how to initialize the module in the main process. This replaces the deprecated `electron.remote`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_60

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('@electron/remote')

// In the main process:
require('@electron/remote/main').initialize()
```

----------------------------------------

TITLE: Listening for IPC Events with ipcMain.on in Electron's Main Process
DESCRIPTION: Sets up an IPC listener in the main process that handles 'set-title' messages sent from renderer processes. When a message is received, it retrieves the sender's BrowserWindow and updates its title.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, ipcMain } = require('electron')
const path = require('node:path')

// ...

function handleSetTitle (event, title) {
  const webContents = event.sender
  const win = BrowserWindow.fromWebContents(webContents)
  win.setTitle(title)
}

function createWindow () {
  const mainWindow = new BrowserWindow({
    webPreferences: {
      preload: path.join(__dirname, 'preload.js')
    }
  })
  mainWindow.loadFile('index.html')
}

app.whenReady().then(() => {
  ipcMain.on('set-title', handleSetTitle)
  createWindow()
})
// ...
```

----------------------------------------

TITLE: Replacing app renderer-process-crashed Event (Removed) - JavaScript
DESCRIPTION: Illustrates the removal of the `renderer-process-crashed` event from the Electron `app` module in version 29. Provides the replacement code using the new `render-process-gone` event, which should be used to handle renderer process termination.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
// Removed
app.on('renderer-process-crashed', (event, webContents, killed) => { /* ... */ })

// Replace with
app.on('render-process-gone', (event, webContents, details) => { /* ... */ })
```

----------------------------------------

TITLE: Menu Template with Before/After Item Positioning
DESCRIPTION: A menu template that demonstrates the use of 'before' and 'after' positioning properties to control the specific ordering of menu items relative to each other.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
[
  { id: '1', label: 'one', after: ['3'] },
  { id: '2', label: 'two', before: ['1'] },
  { id: '3', label: 'three' }
]
```

----------------------------------------

TITLE: Set Window Open Handler - JavaScript
DESCRIPTION: This JavaScript code demonstrates how to intercept and customize the creation of new windows requested by the renderer process in Electron.  It overrides the default window creation by attaching a BrowserView to the main window instead of creating a new BrowserWindow. It uses `setWindowOpenHandler` to handle the `window.open()` calls and related actions. Requires the BrowserView and BrowserWindow modules.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
const { BrowserView, BrowserWindow } = require('electron')

const mainWindow = new BrowserWindow()

mainWindow.webContents.setWindowOpenHandler((details) => {
  return {
    action: 'allow',
    createWindow: (options) => {
      const browserView = new BrowserView(options)
      mainWindow.addBrowserView(browserView)
      browserView.setBounds({ x: 0, y: 0, width: 640, height: 480 })
      return browserView.webContents
    }
  }
})
```

----------------------------------------

TITLE: Replacing WebContents/webview crashed Event (Removed) - JavaScript
DESCRIPTION: Shows the removal of the `crashed` event from `WebContents` and `<webview>` elements in Electron 29. Provides the replacement code using the new `render-process-gone` event, which standardizes handling of process termination.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
// Removed
win.webContents.on('crashed', (event, killed) => { /* ... */ })
webview.addEventListener('crashed', (event) => { /* ... */ })

// Replace with
win.webContents.on('render-process-gone', (event, details) => { /* ... */ })
webview.addEventListener('render-process-gone', (event, details) => { /* ... */ })
```

----------------------------------------

TITLE: Notifying JavaScript of New Todos in Objective-C
DESCRIPTION: This code extends the `addTodo:` method in Objective-C to notify the JavaScript world when a new todo is added. It converts the todo data to JSON format, including converting the date to milliseconds since the epoch, and then calls a JavaScript callback function (g_todoAddedCallback) with the JSON string as an argument.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_10

LANGUAGE: objc
CODE:
```
// Previous code...

// Action method for the Add button
- (void)addTodo:(id)sender {
    NSString *text = [_textField stringValue];
    if ([text length] > 0) {
        // Previous addTodo() code...

        // Call the callback if it exists
        if (g_todoAddedCallback) {
            // Convert the todo to JSON
            NSError *error;
            NSData *jsonData = [NSJSONSerialization dataWithJSONObject:@{
                @"id": [uuid UUIDString],
                @"text": text,
                @"date": @((NSTimeInterval)[date timeIntervalSince1970] * 1000)
            } options:0 error:&error];

            if (!error) {
                NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                std::string cppJsonString = [jsonString UTF8String];
                g_todoAddedCallback(cppJsonString);
            }
        }
    }
}

// More code to follow later...
```

----------------------------------------

TITLE: Excluding BrowserWindow from Windows Menu & Setting App Menu (JavaScript)
DESCRIPTION: Shows how to create a new BrowserWindow with specific dimensions and set its excludedFromShownWindowsMenu property to true. It also demonstrates creating a basic application menu template with a windowmenu role and applying it using Menu.buildFromTemplate and Menu.setApplicationMenu. This snippet requires the BrowserWindow and Menu modules from Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
const win = new BrowserWindow({ height: 600, width: 600 })

const template = [
  {
    role: 'windowmenu'
  }
]

win.excludedFromShownWindowsMenu = true

const menu = Menu.buildFromTemplate(template)
Menu.setApplicationMenu(menu)
```

----------------------------------------

TITLE: Accessing System Theme Properties Example
DESCRIPTION: Example showing the three main theme source options available in the nativeTheme API for controlling dark/light mode.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/native-theme.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Follow OS
nativeTheme.themeSource = 'system'

// Dark Mode
nativeTheme.themeSource = 'dark'

// Light Mode
nativeTheme.themeSource = 'light'
```

----------------------------------------

TITLE: Handling a Single Invokable IPC Message with ipcMainServiceWorker.handleOnce()
DESCRIPTION: Registers a one-time handler for an invokable IPC message on a specific channel. After handling a single invocation, the handler is automatically removed.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
ipcMainServiceWorker.handleOnce(channel, listener)
```

----------------------------------------

TITLE: Setting Up a MessageChannel Between Two Renderers in Electron
DESCRIPTION: Shows how the main process can set up a MessageChannel and send each port to different renderer processes, enabling direct communication between renderer processes without using the main process as an intermediary.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { BrowserWindow, app, MessageChannelMain } = require('electron')

app.whenReady().then(async () => {
  // create the windows.
  const mainWindow = new BrowserWindow({
    show: false,
    webPreferences: {
      contextIsolation: false,
      preload: 'preloadMain.js'
    }
  })

  const secondaryWindow = new BrowserWindow({
    show: false,
    webPreferences: {
      contextIsolation: false,
      preload: 'preloadSecondary.js'
    }
  })

  // set up the channel.
  const { port1, port2 } = new MessageChannelMain()

  // once the webContents are ready, send a port to each webContents with postMessage.
  mainWindow.once('ready-to-show', () => {
    mainWindow.webContents.postMessage('port', null, [port1])
  })

  secondaryWindow.once('ready-to-show', () => {
    secondaryWindow.webContents.postMessage('port', null, [port2])
  })
})
```

----------------------------------------

TITLE: Working with External Libraries in Electron
DESCRIPTION: Shows how to properly include external libraries like jQuery while maintaining Node.js and Electron API access by renaming conflicting symbols.
SOURCE: https://github.com/electron/electron/blob/main/docs/faq.md#2025-04-21_snippet_2

LANGUAGE: html
CODE:
```
<head>
<script>
window.nodeRequire = require;
delete window.require;
delete window.exports;
delete window.module;
</script>
<script type="text/javascript" src="jquery.js"></script>
</head>
```

----------------------------------------

TITLE: Relaunching an Electron Application with Arguments
DESCRIPTION: This snippet demonstrates how to restart the current Electron application instance with additional command line arguments. It calls relaunch() with the current arguments plus a '--relaunch' flag, then immediately exits the application.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.relaunch({ args: process.argv.slice(1).concat(['--relaunch']) })
app.exit(0)
```

----------------------------------------

TITLE: WebView Configuration Examples in Electron
DESCRIPTION: Examples showing insecure and secure ways to configure WebView elements in HTML, demonstrating why Node.js integration should be disabled.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_4

LANGUAGE: html
CODE:
```
<!-- Bad -->
<webview nodeIntegration src="page.html"></webview>

<!-- Good -->
<webview src="page.html"></webview>
```

----------------------------------------

TITLE: Intercepting Keyboard Events in Electron Main Process
DESCRIPTION: This snippet shows how to intercept keyboard events in the main process before they are dispatched to the page, using the 'before-input-event' event of the webContents. This allows for catching and handling custom shortcuts that are not visible in the menu. It prevents the default behavior of the intercepted keys.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron/main')

app.whenReady().then(() => {
  const win = new BrowserWindow({ width: 800, height: 600 })

  win.loadFile('index.html')
  win.webContents.on('before-input-event', (event, input) => {
    if (input.control && input.key.toLowerCase() === 'i') {
      console.log('Pressed Control+I')
      event.preventDefault()
    }
  })
})
```

----------------------------------------

TITLE: Handling Custom Protocols with File Paths (New) - Electron JavaScript
DESCRIPTION: Demonstrates the new method for handling custom protocol URLs that map to file paths, replacing `protocol.registerFileProtocol` with `protocol.handle`. This approach uses `net.fetch` with `node:url.pathToFileURL` to correctly resolve the file path from the custom URL.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
// Replace with
const path = require('node:path')
const nodeUrl = require('node:url')
protocol.handle('other', (req) => {
  const srcPath = 'C:\\myapp\\'
  const reqURL = new URL(req.url)
  return net.fetch(nodeUrl.pathToFileURL(path.join(srcPath, reqURL.pathname)).toString())
})

mainWindow.loadURL('data:text/html,<script src="loaded-from-dataurl.js"><\/script>', { baseURLForDataURL: 'other://' })
mainWindow.loadURL('other://index.html')
```

----------------------------------------

TITLE: Disabling Default Menu in Electron Application
DESCRIPTION: Shows how to disable Electron's default menu before app initialization for better startup performance. This should be called when using a custom menu or frameless window.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/performance.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
Menu.setApplicationMenu(null)
```

----------------------------------------

TITLE: Creating Modal Browser Window in Electron JavaScript
DESCRIPTION: Demonstrates how to create a modal child window by setting both the 'parent' and 'modal: true' options. Modal windows disable interaction with their parent until they are closed and the example includes using 'ready-to-show' for graceful display.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const top = new BrowserWindow()
const child = new BrowserWindow({ parent: top, modal: true, show: false })
child.loadURL('https://github.com')
child.once('ready-to-show', () => {
  child.show()
})
```

----------------------------------------

TITLE: Registering Global Keyboard Shortcuts in Electron
DESCRIPTION: This snippet shows how to register global keyboard shortcuts using the globalShortcut module in Electron. Global shortcuts are triggered even when the application does not have keyboard focus. The CommandOrControl combination handles the difference between macOS (Command) and Windows/Linux (Control).
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, globalShortcut } = require('electron/main')

function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600
  })

  win.loadFile('index.html')
}

app.whenReady().then(() => {
  globalShortcut.register('Alt+CommandOrControl+I', () => {
    console.log('Electron loves global shortcuts!')
  })
}).then(createWindow)

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})
```

----------------------------------------

TITLE: Printing to PDF with webContents.printToPDF in Electron
DESCRIPTION: This code snippet demonstrates how to print the content of a BrowserWindow to a PDF file using the `webContents.printToPDF` method. It sets up a basic Electron application, loads a webpage, and then prints it to a PDF file in the user's Desktop directory.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_24

LANGUAGE: JavaScript
CODE:
```
const { app, BrowserWindow } = require('electron')
const fs = require('node:fs')
const path = require('node:path')
const os = require('node:os')

app.whenReady().then(() => {
  const win = new BrowserWindow()
  win.loadURL('https://github.com')

  win.webContents.on('did-finish-load', () => {
    // Use default printing options
    const pdfPath = path.join(os.homedir(), 'Desktop', 'temp.pdf')
    win.webContents.printToPDF({}).then(data => {
      fs.writeFile(pdfPath, data, (error) => {
        if (error) throw error
        console.log(`Wrote PDF successfully to ${pdfPath}`)
      })
    }).catch(error => {
      console.log(`Failed to write PDF to ${pdfPath}: `, error)
    })
  })
})
```

----------------------------------------

TITLE: Setting BrowserWindow Bounds JavaScript
DESCRIPTION: This snippet demonstrates how to use the `win.setBounds` method to resize and move an Electron `BrowserWindow`. It shows examples of setting all bounds properties simultaneously and setting a single property, followed by using `win.getBounds` to retrieve the window's current dimensions and position.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

// set all bounds properties
win.setBounds({ x: 440, y: 225, width: 800, height: 600 })

// set a single bounds property
win.setBounds({ width: 100 })

// { x: 440, y: 225, width: 100, height: 600 }
console.log(win.getBounds())
```

----------------------------------------

TITLE: Custom Protocol Handling with Fetch
DESCRIPTION: Shows how to implement custom protocol handling with the fetch API, including the ability to bypass custom protocol handlers using the bypassCustomProtocolHandlers option.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
protocol.handle('https', (req) => {
  if (req.url === 'https://my-app.com') {
    return new Response('<body>my app</body>')
  } else {
    return net.fetch(req, { bypassCustomProtocolHandlers: true })
  }
})
```

----------------------------------------

TITLE: Code Patch for Electron contextBridge Usage
DESCRIPTION: A patch example showing how to modify code to handle the breaking change where ipcRenderer can no longer be directly exposed through contextBridge, requiring a wrapper function instead.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_9

LANGUAGE: patch
CODE:
```
  contextBridge.exposeInMainWorld('app', {
-   ipcRenderer,
+   onEvent: (cb) => ipcRenderer.on('foo', (e, ...args) => cb(args))
  })
```

----------------------------------------

TITLE: Load URL with Extra Headers in Electron
DESCRIPTION: This code snippet demonstrates how to load a URL in an Electron BrowserWindow with custom HTTP headers, specifically to bypass the HTTP cache using the 'pragma: no-cache' header. The `extraHeaders` option allows setting additional headers for the request.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
const win = new BrowserWindow()
const options = { extraHeaders: 'pragma: no-cache\n' }
win.webContents.loadURL('https://github.com', options)
```

----------------------------------------

TITLE: Show Notification in Renderer Process
DESCRIPTION: This snippet demonstrates how to display a notification from the renderer process using the web Notifications API. It creates a new Notification object with a title and body, and attaches an onclick handler to log a message to the console when the notification is clicked.  This code snippet can be directly used in HTML page inside a <script> tag.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/notifications.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const NOTIFICATION_TITLE = 'Title'
const NOTIFICATION_BODY =
  'Notification from the Renderer process. Click to log to console.'
const CLICK_MESSAGE = 'Notification clicked'

new Notification(NOTIFICATION_TITLE, { body: NOTIFICATION_BODY }).onclick =
  () => console.log(CLICK_MESSAGE)
```

----------------------------------------

TITLE: Handling Scroll Gestures via webContents input-event (Modern JavaScript)
DESCRIPTION: Shows the recommended way to handle scroll gestures by listening for the `input-event` on the `webContents` associated with a window. Gesture type is determined by checking the `event.type` property (e.g., 'gestureScrollBegin', 'gestureScrollUpdate', 'gestureScrollEnd').
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_52

LANGUAGE: JavaScript
CODE:
```
// Replace with
win.webContents.on('input-event', (_, event) => {
  if (event.type === 'gestureScrollBegin') {
    scrollTouchBegin()
  } else if (event.type === 'gestureScrollUpdate') {
    scrollTouchEdge()
  } else if (event.type === 'gestureScrollEnd') {
    scrollTouchEnd()
  }
})
```

----------------------------------------

TITLE: Replace screen getMenuBarHeight with getPrimaryDisplay workArea (JS)
DESCRIPTION: Replaces the deprecated `screen.getMenuBarHeight()` method with accessing the `workArea` property of the primary display obtained via `screen.getPrimaryDisplay()`. The `workArea` provides the bounds excluding the menu bar and docks.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_123

LANGUAGE: js
CODE:
```
// Deprecated
screen.getMenuBarHeight()
```

LANGUAGE: js
CODE:
```
// Replace with
screen.getPrimaryDisplay().workArea
```

----------------------------------------

TITLE: Post Message to Renderer Process with Port Transfer
DESCRIPTION: This example illustrates how to send a message to the renderer process from the main process, along with transferring ownership of MessagePortMain objects. The transferred ports are then accessible in the renderer process via the `e.ports` array, allowing for direct communication between ports.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_31

LANGUAGE: JavaScript
CODE:
```
// Main process
const win = new BrowserWindow()
const { port1, port2 } = new MessageChannelMain()
win.webContents.postMessage('port', { message: 'hello' }, [port1])

// Renderer process
ipcRenderer.on('port', (e, msg) => {
  const [port] = e.ports
  // ...
})
```

----------------------------------------

TITLE: Running Publish Command
DESCRIPTION: Executes the publish command to create distributables and publish them to GitHub releases.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
npm run publish
```

----------------------------------------

TITLE: Certificate Verification in Electron Session
DESCRIPTION: Example of implementing custom certificate verification logic for an Electron session, demonstrating how to accept or reject certificates based on hostname.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

win.webContents.session.setCertificateVerifyProc((request, callback) => {
  const { hostname } = request
  if (hostname === 'github.com') {
    callback(0)
  } else {
    callback(-2)
  }
})
```

----------------------------------------

TITLE: Renderer Process Script in Electron
DESCRIPTION: Renderer script that uses the exposed versions API to display Chrome, Node.js, and Electron version information.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const information = document.getElementById('info')
information.innerText = `This app is using Chrome (v${versions.chrome()}), Node.js (v${versions.node()}), and Electron (v${versions.electron()})`
```

----------------------------------------

TITLE: Replacing app.makeSingleInstance with requestSingleInstanceLock and 'second-instance'
DESCRIPTION: The deprecated `app.makeSingleInstance` method has been replaced by `app.requestSingleInstanceLock()`. Handling subsequent instances now requires listening for the 'second-instance' event on the `app` object.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_109

LANGUAGE: javascript
CODE:
```
// Deprecated
app.makeSingleInstance((argv, cwd) => {
  /* ... */
})
```

LANGUAGE: javascript
CODE:
```
// Replace with
app.requestSingleInstanceLock()
app.on('second-instance', (event, argv, cwd) => {
  /* ... */
})
```

----------------------------------------

TITLE: Setting BrowserWindow Background Color in Electron JavaScript
DESCRIPTION: Creates a BrowserWindow with a specified background color. Setting a background color close to the app's expected background allows the window to be shown immediately without waiting for the content to render, improving perceived performance for complex applications.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ backgroundColor: '#2e2c29' })
win.loadURL('https://github.com')
```

----------------------------------------

TITLE: Setting Content Security Policy via HTTP Headers in Electron
DESCRIPTION: Example showing how to set a Content Security Policy via HTTP headers by intercepting and modifying response headers in the main process.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')

session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
  callback({
    responseHeaders: {
      ...details.responseHeaders,
      'Content-Security-Policy': ['default-src \'none\'']
    }
  })
})
```

----------------------------------------

TITLE: Loading React Developer Tools Extension in Electron
DESCRIPTION: This code snippet demonstrates how to load the React Developer Tools extension in an Electron application using the session.loadExtension API. It includes setting up the path to the extension and loading it when the app is ready.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/devtools-extension.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, session } = require('electron')
const path = require('node:path')
const os = require('node:os')

// on macOS
const reactDevToolsPath = path.join(
  os.homedir(),
  '/Library/Application Support/Google/Chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/4.9.0_0'
)

app.whenReady().then(async () => {
  await session.defaultSession.loadExtension(reactDevToolsPath)
})
```

----------------------------------------

TITLE: Deprecating systemPreferences Get App Level Appearance in Electron
DESCRIPTION: Illustrates the deprecation of `systemPreferences.getAppLevelAppearance` and its replacement with the `nativeTheme.shouldUseDarkColors` property.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_33

LANGUAGE: javascript
CODE:
```
// Deprecated
systemPreferences.getAppLevelAppearance()
```

LANGUAGE: javascript
CODE:
```
// Replace with
nativeTheme.shouldUseDarkColors
```

----------------------------------------

TITLE: Importing Electron Modules for Tray Creation
DESCRIPTION: This snippet shows how to import the required modules from Electron to create a Tray icon.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tray.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, Tray, Menu, nativeImage } = require('electron')
```

----------------------------------------

TITLE: Replacing Electron Protocol Register Buffer Protocol
DESCRIPTION: Demonstrates replacing the deprecated `protocol.registerBufferProtocol` with the new `protocol.handle` for handling protocol requests with buffer responses.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_37

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 25
protocol.registerBufferProtocol('some-protocol', () => {
  callback({ mimeType: 'text/html', data: Buffer.from('<h5>Response</h5>') })
})
```

LANGUAGE: javascript
CODE:
```
// Replace with
protocol.handle('some-protocol', () => {
  return new Response(
    Buffer.from('<h5>Response</h5>'), // Could also be a string or ReadableStream.
    { headers: { 'content-type': 'text/html' } }
  )
})
```

----------------------------------------

TITLE: Showing Save Dialog in Electron
DESCRIPTION: This function displays a save dialog in Electron. It accepts optional window and options parameters, and returns a Promise with information about the selected file path and whether the dialog was canceled.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
dialog.showSaveDialog([window, ]options)
```

----------------------------------------

TITLE: Querying and Setting Cookies in Electron
DESCRIPTION: This example demonstrates how to access the Cookies API through a Session object, query all cookies, query cookies for a specific URL, and set a new cookie. Each operation returns a Promise that must be handled properly.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/cookies.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')

// Query all cookies.
session.defaultSession.cookies.get({})
  .then((cookies) => {
    console.log(cookies)
  }).catch((error) => {
    console.log(error)
  })

// Query all cookies associated with a specific url.
session.defaultSession.cookies.get({ url: 'https://www.github.com' })
  .then((cookies) => {
    console.log(cookies)
  }).catch((error) => {
    console.log(error)
  })

// Set a cookie with the given cookie data;
// may overwrite equivalent cookies if they exist.
const cookie = { url: 'https://www.github.com', name: 'dummy_name', value: 'dummy' }
session.defaultSession.cookies.set(cookie)
  .then(() => {
    // success
  }, (error) => {
    console.error(error)
  })
```

----------------------------------------

TITLE: Replacing webContents Get Printers API in Electron
DESCRIPTION: Demonstrates replacing the deprecated synchronous `webContents.getPrinters` method with the new asynchronous `webContents.getPrintersAsync`, showing how to handle the promise result.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_32

LANGUAGE: javascript
CODE:
```
const w = new BrowserWindow({ show: false })

// Deprecated
console.log(w.webContents.getPrinters())
```

LANGUAGE: javascript
CODE:
```
// Replace with
w.webContents.getPrintersAsync().then((printers) => {
  console.log(printers)
})
```

----------------------------------------

TITLE: Get Effective Appearance JavaScript
DESCRIPTION: This snippet demonstrates how to retrieve the effective appearance (light or dark mode) of the system using `systemPreferences.getEffectiveAppearance()`. This is a simple example showing the basic usage of the `systemPreferences` module.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { systemPreferences } = require('electron')
console.log(systemPreferences.getEffectiveAppearance())
```

----------------------------------------

TITLE: Registering File Stream Protocol in Electron
DESCRIPTION: Example of registering a custom 'atom' protocol that returns a file stream as a response. It demonstrates using fs.createReadStream to return a file.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
protocol.registerStreamProtocol('atom', (request, callback) => {
  callback(fs.createReadStream('index.html'))
})
```

----------------------------------------

TITLE: Creating Basic Window with window.open()
DESCRIPTION: Basic example of using window.open() to create a new window with custom positioning, frame settings, and Node integration options.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/window-open.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
window.open('https://github.com', '_blank', 'top=500,left=200,frame=false,nodeIntegration=no')
```

----------------------------------------

TITLE: Checking High Contrast with nativeTheme - Electron JavaScript
DESCRIPTION: Shows checking if high contrast mode is enabled using the recommended `nativeTheme.shouldUseHighContrastColors` property. This replaces the deprecated `systemPreferences.isHighContrastColorScheme()` method.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_79

LANGUAGE: javascript
CODE:
```
// Replace with
nativeTheme.shouldUseHighContrastColors
```

----------------------------------------

TITLE: Renderer to Renderer Communication Patterns in Electron
DESCRIPTION: Documentation explaining two methods for enabling communication between renderer processes: using the main process as a message broker, or utilizing MessagePort for direct communication after initial setup.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_11

LANGUAGE: markdown
CODE:
```
* Use the main process as a message broker between renderers. This would involve sending a message\nfrom one renderer to the main process, which would forward the message to the other renderer.\n* Pass a [MessagePort][] from the main process to both renderers. This will allow direct communication\nbetween renderers after the initial setup.
```

----------------------------------------

TITLE: Checking Inverted Color Scheme with nativeTheme - Electron JavaScript
DESCRIPTION: Shows checking if the inverted color scheme is enabled using the recommended `nativeTheme.shouldUseInvertedColorScheme` property. This replaces the deprecated `systemPreferences.isInvertedColorScheme()` method.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_77

LANGUAGE: javascript
CODE:
```
// Replace with
nativeTheme.shouldUseInvertedColorScheme
```

----------------------------------------

TITLE: Deprecating systemPreferences Set App Level Appearance in Electron
DESCRIPTION: Illustrates the deprecation of `systemPreferences.setAppLevelAppearance` and its replacement with the `nativeTheme.themeSource` property.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_35

LANGUAGE: javascript
CODE:
```
// Deprecated
systemPreferences.setAppLevelAppearance('dark')
```

LANGUAGE: javascript
CODE:
```
// Replace with
nativeTheme.themeSource = 'dark'
```

----------------------------------------

TITLE: Show Notification in Main Process
DESCRIPTION: This snippet demonstrates how to display a basic notification from the main process using Electron's Notification module. It requires the electron module and displays a notification when executed. The title and body of the notification are defined as constants and passed to the Notification constructor. The `show()` method displays the notification to the user.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/notifications.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { Notification } = require('electron')

const NOTIFICATION_TITLE = 'Basic Notification'
const NOTIFICATION_BODY = 'Notification from the Main process'

new Notification({
  title: NOTIFICATION_TITLE,
  body: NOTIFICATION_BODY
}).show()
```

----------------------------------------

TITLE: Creating a Window on an External Display in Electron
DESCRIPTION: This example shows how to detect an external display and create a window on it. It finds a display that is not at position (0,0) and positions a new window on that external display.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/screen.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, screen } = require('electron')

let win

app.whenReady().then(() => {
  const displays = screen.getAllDisplays()
  const externalDisplay = displays.find((display) => {
    return display.bounds.x !== 0 || display.bounds.y !== 0
  })

  if (externalDisplay) {
    win = new BrowserWindow({
      x: externalDisplay.bounds.x + 50,
      y: externalDisplay.bounds.y + 50
    })
    win.loadURL('https://github.com')
  }
})
```

----------------------------------------

TITLE: Setting Background Color for Better Font Rendering
DESCRIPTION: Shows how to improve font rendering on LCD screens by setting a background color in the BrowserWindow constructor to enable sub-pixel anti-aliasing.
SOURCE: https://github.com/electron/electron/blob/main/docs/faq.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({
  backgroundColor: '#fff'
})
```

----------------------------------------

TITLE: Using shell.trashItem - Electron JavaScript
DESCRIPTION: Shows the recommended usage of the asynchronous `shell.trashItem()` API. This replaces the deprecated `shell.moveItemToTrash()` method.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_67

LANGUAGE: javascript
CODE:
```
// Replace with
shell.trashItem(path).then(/* ... */)
```

----------------------------------------

TITLE: Insert CSS - JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to insert CSS into a BrowserWindow's WebContents after the page has finished loading. It listens for the 'did-finish-load' event and then injects CSS to change the background color of the HTML and body elements. It requires the BrowserWindow module.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
const win = new BrowserWindow()
win.webContents.on('did-finish-load', () => {
  win.webContents.insertCSS('html, body { background-color: #f00; }')
})
```

----------------------------------------

TITLE: Replacing BrowserWindow Scroll Touch Events in Electron
DESCRIPTION: Shows how to replace the removed `scroll-touch-begin`, `scroll-touch-edge`, and `scroll-touch-end` events by listening for the `input-event` on `WebContents` and checking the event type.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_43

LANGUAGE: javascript
CODE:
```
// Removed in Electron 23.0
win.on('scroll-touch-begin', scrollTouchBegin)
win.on('scroll-touch-edge', scrollTouchEdge)
win.on('scroll-touch-end', scrollTouchEnd)
```

LANGUAGE: javascript
CODE:
```
// Replace with
win.webContents.on('input-event', (_, event) => {
  if (event.type === 'gestureScrollBegin') {
    scrollTouchBegin()
  } else if (event.type === 'gestureScrollUpdate') {
    scrollTouchEdge()
  } else if (event.type === 'gestureScrollEnd') {
    scrollTouchEnd()
  }
})
```

----------------------------------------

TITLE: Full Main Process Notification Example
DESCRIPTION: This example shows a complete Electron application that displays a notification from the main process. It initializes a BrowserWindow and then shows a notification when the app is ready. It also includes standard window management event handlers. The example requires the electron/main module.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/notifications.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, Notification } = require('electron/main')

function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600
  })

  win.loadFile('index.html')
}

const NOTIFICATION_TITLE = 'Basic Notification'
const NOTIFICATION_BODY = 'Notification from the Main process'

function showNotification () {
  new Notification({ title: NOTIFICATION_TITLE, body: NOTIFICATION_BODY }).show()
}

app.whenReady().then(createWindow).then(showNotification)

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})
```

----------------------------------------

TITLE: Creating Tray and BrowserWindow Icons from File Paths (Main Process)
DESCRIPTION: This code demonstrates how to create a Tray and a BrowserWindow in Electron, setting their icons by providing the file paths to the icon images.  It uses the `require('electron')` method to import the necessary modules.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/native-image.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow, Tray } = require('electron')

const tray = new Tray('/Users/somebody/images/icon.png')
const win = new BrowserWindow({ icon: '/Users/somebody/images/window.png' })
```

----------------------------------------

TITLE: Handle IPC and Start Drag in main.js (Electron)
DESCRIPTION: This JavaScript code in the main process sets up an IPC listener for the 'ondragstart' event. When the event is received, it retrieves the file path, constructs the full file path, sets the icon, and calls `event.sender.startDrag` to initiate the native drag and drop operation.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-file-drag-drop.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const { app, BrowserWindow, ipcMain } = require('electron/main')
const path = require('node:path')
const fs = require('node:fs')
const https = require('node:https')

function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js')
    }
  })

  win.loadFile('index.html')
}

const iconName = path.join(__dirname, 'iconForDragAndDrop.png')
const icon = fs.createWriteStream(iconName)

// Create a new file to copy - you can also copy existing files.
fs.writeFileSync(path.join(__dirname, 'drag-and-drop-1.md'), '# First file to test drag and drop')
fs.writeFileSync(path.join(__dirname, 'drag-and-drop-2.md'), '# Second file to test drag and drop')

https.get('https://img.icons8.com/ios/452/drag-and-drop.png', (response) => {
  response.pipe(icon)
})

app.whenReady().then(createWindow)

ipcMain.on('ondragstart', (event, filePath) => {
  event.sender.startDrag({
    file: path.join(__dirname, filePath),
    icon: iconName
  })
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})
```

----------------------------------------

TITLE: WebView Element Configuration for Web Security
DESCRIPTION: HTML examples showing insecure configuration with disabled web security and the recommended secure configuration.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_8

LANGUAGE: html
CODE:
```
<!-- Bad -->
<webview disablewebsecurity src="page.html"></webview>

<!-- Good -->
<webview src="page.html"></webview>
```

----------------------------------------

TITLE: Synchronous Open Dialog with Window
DESCRIPTION: Example showing how to open a synchronous file/directory selection dialog attached to a window
SOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
dialog.showOpenDialogSync(mainWindow, {
  properties: ['openFile', 'openDirectory']
})
```

----------------------------------------

TITLE: Preventing Window Close with beforeunload | Electron | js
DESCRIPTION: This code snippet, typically used within the renderer process (`window`), demonstrates how to use the `beforeunload` event to potentially cancel a window closing operation. Setting `e.returnValue = false` prevents the close, although Electron's behavior differs from traditional browsers (no prompt box). Requires the `beforeunload` event support on the window's `webContents`.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#_snippet_4

LANGUAGE: js
CODE:
```
window.onbeforeunload = (e) => {
  console.log('I do not want to be closed')

  // Unlike usual browsers that a message box will be prompted to users, returning
  // a non-void value will silently cancel the close.
  // It is recommended to use the dialog API to let the user confirm closing the
  // application.
  e.returnValue = false
}
```

----------------------------------------

TITLE: Reading Text from Clipboard in Electron
DESCRIPTION: Demonstrates how to read plain text content from the system clipboard using the clipboard.readText() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.writeText('hello i am a bit of text!')

const text = clipboard.readText()
console.log(text)
// hello i am a bit of text!'
```

----------------------------------------

TITLE: Writing Multiple Data Types to Clipboard in Electron
DESCRIPTION: Shows how to write multiple data types (text, HTML, RTF, and bookmark) to the clipboard simultaneously using the clipboard.write() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.write({
  text: 'test',
  html: '<b>Hi</b>',
  rtf: '{\\rtf1\\utf8 text}',
  bookmark: 'a title'
})

console.log(clipboard.readText())
// 'test'

console.log(clipboard.readHTML())
// <meta charset='utf-8'><b>Hi</b>

console.log(clipboard.readRTF())
// '{\\rtf1\\utf8 text}'

console.log(clipboard.readBookmark())
// { title: 'a title', url: 'test' }
```

----------------------------------------

TITLE: Managing Window Creation on macOS Activation
DESCRIPTION: Implementation of macOS-specific window management that creates a new window when the app is activated with no windows open. Handles the activate event within the app.whenReady() callback.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
app.whenReady().then(() => {
  createWindow()

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})
```

----------------------------------------

TITLE: Displaying Synchronous Message Box in Electron
DESCRIPTION: This function shows a synchronous message box in Electron. It accepts optional window and options parameters, and returns the index of the clicked button. It blocks the process until the message box is closed.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_5

LANGUAGE: JavaScript
CODE:
```
dialog.showMessageBoxSync([window, ]options)
```

----------------------------------------

TITLE: Code Signing with electron-wix-msi (WiX MSI)
DESCRIPTION: This snippet illustrates how to use `electron-wix-msi` to create an MSI installer and configure code signing. It defines metadata about the application, such as its name, description, and version, and specifies the signing parameters. It utilizes the `electron-wix-msi` package, and needs application metadata and signing configuration.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/code-signing.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { MSICreator } from 'electron-wix-msi'

// Step 1: Instantiate the MSICreator
const msiCreator = new MSICreator({
  appDirectory: '/path/to/built/app',
  description: 'My amazing Kitten simulator',
  exe: 'kittens',
  name: 'Kittens',
  manufacturer: 'Kitten Technologies',
  version: '1.1.2',
  outputDirectory: '/path/to/output/folder',
  windowsSign: {
    signWithParams: '--my=custom --parameters',
    // If signtool.exe does not work for you, customize!
    signToolPath: 'C:\\Path\\To\\my-custom-tool.exe'
  }
})

// Step 2: Create a .wxs template file
const supportBinaries = await msiCreator.create()

// 🆕 Step 2a: optionally sign support binaries if you
// sign you binaries as part of of your packaging script
for (const binary of supportBinaries) {
  // Binaries are the new stub executable and optionally
  // the Squirrel auto updater.
  await signFile(binary)
}

// Step 3: Compile the template to a .msi file
await msiCreator.compile()
```

----------------------------------------

TITLE: Replacing app.getAppMemoryInfo() with app.getAppMetrics()
DESCRIPTION: The deprecated `app.getAppMemoryInfo()` method has been replaced by `app.getAppMetrics()`. This new method returns a more comprehensive set of process metrics.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_112

LANGUAGE: javascript
CODE:
```
// Deprecated
app.getAppMemoryInfo()
```

LANGUAGE: javascript
CODE:
```
// Replace with
app.getAppMetrics()
```

----------------------------------------

TITLE: Removing Default Title Bar in Electron
DESCRIPTION: Configures an Electron BrowserWindow with a hidden title bar by setting the titleBarStyle parameter to 'hidden' in the constructor. This removes the default OS chrome while keeping functionality.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')
app.whenReady().then(() => {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    titleBarStyle: 'hidden'
  })
  win.loadFile('index.html')
})
```

----------------------------------------

TITLE: Replacing webContents.getPrinters - JavaScript
DESCRIPTION: Illustrates the removal of the synchronous `webContents.getPrinters` method in Electron 27. Provides the replacement code using the new asynchronous `webContents.getPrintersAsync` method, which returns a Promise.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_27

LANGUAGE: JavaScript
CODE:
```
const w = new BrowserWindow({ show: false })

// Removed
console.log(w.webContents.getPrinters())
// Replace with
w.webContents.getPrintersAsync().then((printers) => {
  console.log(printers)
})
```

----------------------------------------

TITLE: Printing WebContents - JavaScript
DESCRIPTION: This snippet demonstrates how to print the contents of a BrowserWindow using `webContents.print` with specified options. The `silent` option is set to true, the `deviceName` is specified, and a page range is defined.  A callback function handles the success or failure of the print operation.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_23

LANGUAGE: javascript
CODE:
```
const win = new BrowserWindow()
const options = {
  silent: true,
  deviceName: 'My-Printer',
  pageRanges: [{
    from: 0,
    to: 1
  }]
}
win.webContents.print(options, (success, errorType) => {
  if (!success) console.log(errorType)
})
```

----------------------------------------

TITLE: Handling 'app-command' Event in Electron BrowserWindow (JavaScript)
DESCRIPTION: Demonstrates how to attach a listener to the 'app-command' event of a BrowserWindow instance. It specifically checks for the 'browser-backward' command and uses win.webContents.goBack() to navigate the window's content back if possible. This snippet requires an initialized Electron application and a valid BrowserWindow instance.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()
win.on('app-command', (e, cmd) => {
  // Navigate the window back when the user hits their mouse back button
  if (cmd === 'browser-backward' && win.webContents.canGoBack()) {
    win.webContents.goBack()
  }
})
```

----------------------------------------

TITLE: Using Mousetrap Library for Advanced Key Detection in Electron
DESCRIPTION: This snippet demonstrates how to use the Mousetrap library for advanced key detection in an Electron renderer process. It showcases binding single keys, combinations, sequences, and preventing default behavior. Mousetrap provides a convenient way to manage keyboard shortcuts.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_4

LANGUAGE: javascript
CODE:
```
Mousetrap.bind('4', () => { console.log('4') })
Mousetrap.bind('?', () => { console.log('show shortcuts!') })
Mousetrap.bind('esc', () => { console.log('escape') }, 'keyup')

// combinations
Mousetrap.bind('command+shift+k', () => { console.log('command shift k') })

// map multiple combinations to the same callback
Mousetrap.bind(['command+k', 'ctrl+k'], () => {
  console.log('command k or control k')

  // return false to prevent default behavior and stop event from bubbling
  return false
})

// gmail style sequences
Mousetrap.bind('g i', () => { console.log('go to inbox') })
Mousetrap.bind('* a', () => { console.log('select all') })

// konami code!
Mousetrap.bind('up up down down left right left right b a enter', () => {
  console.log('konami code')
})
```

----------------------------------------

TITLE: Setting DevTools WebContents with BrowserWindow
DESCRIPTION: This snippet shows how to use a BrowserWindow to host DevTools.  It creates two BrowserWindows, one for the main content and the other for the DevTools. The `setDevToolsWebContents` method associates the DevTools with the main window's webContents.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_28

LANGUAGE: JavaScript
CODE:
```
const { app, BrowserWindow } = require('electron')

let win = null
let devtools = null

app.whenReady().then(() => {
  win = new BrowserWindow()
  devtools = new BrowserWindow()
  win.loadURL('https://github.com')
  win.webContents.setDevToolsWebContents(devtools.webContents)
  win.webContents.openDevTools({ mode: 'detach' })
})
```

----------------------------------------

TITLE: Creating a Tray Icon with High DPI Support (Main Process)
DESCRIPTION: This code demonstrates how to create a Tray icon in Electron, specifying an image path with support for different DPI densities.  The Electron framework will automatically select the appropriate image based on the screen's DPI. It depends on the existence of `icon.png`, `icon@2x.png`, and `icon@3x.png` in the specified directory.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/native-image.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const { Tray } = require('electron')
const appTray = new Tray('/Users/somebody/images/icon.png')
```

----------------------------------------

TITLE: Installing Playwright for Electron Testing
DESCRIPTION: Command to install Microsoft Playwright, an end-to-end testing framework with experimental Electron support. It uses Electron's support for the Chrome DevTools Protocol.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_9

LANGUAGE: shell
CODE:
```
npm install --save-dev @playwright/test
```

----------------------------------------

TITLE: Using powerSaveBlocker in Electron
DESCRIPTION: Example of how to use the powerSaveBlocker module to prevent display sleep, check the blocker's status, and then stop the blocker when done.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/power-save-blocker.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { powerSaveBlocker } = require('electron')

const id = powerSaveBlocker.start('prevent-display-sleep')
console.log(powerSaveBlocker.isStarted(id))

powerSaveBlocker.stop(id)
```

----------------------------------------

TITLE: Creating a Basic Notification in Electron
DESCRIPTION: Example demonstrating how to create a new Notification instance in Electron's main process. This shows the basic pattern of creating and showing a notification.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { Notification } = require('electron');

// Check if notifications are supported
if (Notification.isSupported()) {
  // Create a new notification
  const notification = new Notification({
    title: 'Notification Title',
    body: 'Notification Body Text',
    silent: false,
    icon: '/path/to/icon.png'
  });

  // Show the notification
  notification.show();

  // Listen for events
  notification.on('show', () => console.log('Notification shown'));
  notification.on('click', () => console.log('Notification clicked'));
  notification.on('close', () => console.log('Notification closed'));
}
```

----------------------------------------

TITLE: Basic File Selection Dialog Example
DESCRIPTION: Shows how to display a basic file selection dialog that allows multiple file selection
SOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { dialog } = require('electron')
console.log(dialog.showOpenDialog({ properties: ['openFile', 'multiSelections'] }))
```

----------------------------------------

TITLE: Replacing BrowserWindow Add Extension (JS)
DESCRIPTION: Replaces the deprecated `BrowserWindow.addExtension` and `BrowserWindow.addDevToolsExtension` methods with the recommended `session.defaultSession.loadExtension`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_93

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 9
BrowserWindow.addExtension(path)
BrowserWindow.addDevToolsExtension(path)
```

LANGUAGE: javascript
CODE:
```
// Replace with
session.defaultSession.loadExtension(path)
```

----------------------------------------

TITLE: Configuring Windows Login Items with Squirrel
DESCRIPTION: Example demonstrating how to set up login item settings for an Electron app using Squirrel on Windows, including path configuration and arguments.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_24

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
const path = require('node:path')

const appFolder = path.dirname(process.execPath)
const ourExeName = path.basename(process.execPath)
const stubLauncher = path.resolve(appFolder, '..', ourExeName)

app.setLoginItemSettings({
  openAtLogin: true,
  path: stubLauncher,
  args: [
    // You might want to pass a parameter here indicating that this
    // app was launched via login, but you don't have to
  ]
})
```

----------------------------------------

TITLE: Importing Required Modules in Electron Main Process
DESCRIPTION: Initial setup code for the main process that imports necessary Electron modules for application lifecycle management and window creation.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, shell } = require('electron')
const path = require('node:path')
```

----------------------------------------

TITLE: Implementing Renderer Process Logic for File Dialog
DESCRIPTION: Adds event handling logic to the renderer process that triggers the file dialog via the exposed electronAPI.openFile method and displays the selected file path in the UI when resolved.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
const btn = document.getElementById('btn')
const filePathElement = document.getElementById('filePath')

btn.addEventListener('click', async () => {
  const filePath = await window.electronAPI.openFile()
  filePathElement.innerText = filePath
})
```

----------------------------------------

TITLE: Replacing systemPreferences Color Scheme Events - JavaScript
DESCRIPTION: Demonstrates the removal of the `inverted-color-scheme-changed` and `high-contrast-color-scheme-changed` events from the `systemPreferences` module in Electron 27. Provides the replacement code using the single `updated` event on the `nativeTheme` module, which centralizes theme change notifications.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_26

LANGUAGE: JavaScript
CODE:
```
// Removed
systemPreferences.on('inverted-color-scheme-changed', () => { /* ... */ })
systemPreferences.on('high-contrast-color-scheme-changed', () => { /* ... */ })

// Replace with
nativeTheme.on('updated', () => { /* ... */ })
```

----------------------------------------

TITLE: Using Session Get All Extensions API - Electron JavaScript
DESCRIPTION: Shows the recommended way to get all extensions using the `session.defaultSession.getAllExtensions()` API. This replaces the deprecated `BrowserWindow.getExtensions` and `getDevToolsExtensions` methods.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_73

LANGUAGE: javascript
CODE:
```
// Replace with
session.defaultSession.getAllExtensions()
```

----------------------------------------

TITLE: Configuring Spell Checker in Electron Session
DESCRIPTION: Sets whether to enable the built-in spell checker and configures the languages for spell checking. These methods allow enabling/disabling the spell checker and setting specific languages.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_26

LANGUAGE: JavaScript
CODE:
```
ses.setSpellCheckerEnabled(enable)
```

LANGUAGE: JavaScript
CODE:
```
ses.setSpellCheckerLanguages(languages)
```

----------------------------------------

TITLE: Loading Chrome Extension in Electron
DESCRIPTION: Demonstrates how to load an unpacked Chrome extension into an Electron app using the session.defaultSession.loadExtension method. It includes options for allowing file access and notes on extension compatibility.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_27

LANGUAGE: javascript
CODE:
```
const { app, session } = require('electron')
const path = require('node:path')

app.whenReady().then(async () => {
  await session.defaultSession.loadExtension(
    path.join(__dirname, 'react-devtools'),
    // allowFileAccess is required to load the devtools extension on file:// URLs.
    { allowFileAccess: true }
  )
  // Note that in order to use the React DevTools extension, you'll need to
  // download and unzip a copy of the extension.
})
```

----------------------------------------

TITLE: Appending Command Line Switches in Electron Main Script
DESCRIPTION: Example demonstrating how to use app.commandLine.appendSwitch to add command line switches to an Electron application before the app's ready event is emitted.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
app.commandLine.appendSwitch('remote-debugging-port', '8315')
app.commandLine.appendSwitch('host-rules', 'MAP * 127.0.0.1')

app.whenReady().then(() => {
  // Your code here
})
```

----------------------------------------

TITLE: Setting Tray Context Menu Electron JavaScript
DESCRIPTION: This snippet sets a new context menu for the tray icon. The `menu` parameter accepts a `Menu` object or `null`. The functionality has no specific dependencies beyond the Electron framework itself.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
tray.setContextMenu(menu)
```

----------------------------------------

TITLE: Accessing WebFrameMain on IPC Event - Electron JavaScript
DESCRIPTION: Illustrates the changed behavior when accessing `event.senderFrame` during a cross-origin navigation. Accessing it immediately upon receiving the IPC event is reliable, while accessing it asynchronously after a potential navigation resolves may result in `null` because the frame might have been detached or destroyed.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
ipcMain.on('unload-event', (event) => {
  event.senderFrame // ✅ accessed immediately
})
```

LANGUAGE: JavaScript
CODE:
```
ipcMain.on('unload-event', async (event) => {
  await crossOriginNavigationPromise
  event.senderFrame // ❌ returns `null` due to late access
})
```

----------------------------------------

TITLE: Objective-C TodoWindowController Implementation
DESCRIPTION: This code implements an Objective-C `TodoWindowController` class that manages a window containing a text field, date picker, add button, and table view for displaying todo items. It includes methods for initializing the window, setting up the UI elements with auto layout, handling user input through the "Add" button, and managing the table view data source and delegate. It also converts data to JSON to send it to the callback.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_13

LANGUAGE: objective-c
CODE:
```
#import <Foundation/Foundation.h>
#import <AppKit/AppKit.h>
#import <string>
#import <functional>
#import "../include/objc_code.h"

using TodoCallback = std::function<void(const std::string&)>;

static TodoCallback g_todoAddedCallback;

// Forward declaration of our custom classes
@interface TodoWindowController : NSWindowController
@property (strong) NSTextField *textField;
@property (strong) NSDatePicker *datePicker;
@property (strong) NSButton *addButton;
@property (strong) NSTableView *tableView;
@property (strong) NSMutableArray<NSDictionary*> *todos;
@end

// Controller for the main window
@implementation TodoWindowController

- (instancetype)init {
    self = [super initWithWindowNibName:""];
    if (self) {
        // Create an array to store todos
        _todos = [NSMutableArray array];
        [self setupWindow];
    }
    return self;
}

- (void)setupWindow {
    // Create a window
    NSRect frame = NSMakeRect(0, 0, 400, 300);
    NSWindow *window = [[NSWindow alloc] initWithContentRect:frame
                                         styleMask:NSWindowStyleMaskTitled | NSWindowStyleMaskClosable | NSWindowStyleMaskResizable
                                         backing:NSBackingStoreBuffered
                                         defer:NO];
    [window setTitle:@"Todo List"];
    [window center];
    self.window = window;

    // Set up the content view with auto layout
    NSView *contentView = [window contentView];

    // Create text field
    _textField = [[NSTextField alloc] initWithFrame:NSMakeRect(20, 260, 200, 24)];
    [_textField setPlaceholderString:@"Enter a todo..."];
    [contentView addSubview:_textField];

    // Create date picker
    _datePicker = [[NSDatePicker alloc] initWithFrame:NSMakeRect(230, 260, 100, 24)];
    [_datePicker setDatePickerStyle:NSDatePickerStyleTextField];
    [_datePicker setDatePickerElements:NSDatePickerElementFlagYearMonthDay];
    [contentView addSubview:_datePicker];

    // Create add button
    _addButton = [[NSButton alloc] initWithFrame:NSMakeRect(340, 260, 40, 24)];
    [_addButton setTitle:@"Add"];
    [_addButton setBezelStyle:NSBezelStyleRounded];
    [_addButton setTarget:self];
    [_addButton setAction:@selector(addTodo:)];
    [contentView addSubview:_addButton];

    // Create a scroll view for the table
    NSScrollView *scrollView = [[NSScrollView alloc] initWithFrame:NSMakeRect(20, 20, 360, 230)];
    [scrollView setBorderType:NSBezelBorder];
    [scrollView setHasVerticalScroller:YES];
    [contentView addSubview:scrollView];

    // Create table view
    _tableView = [[NSTableView alloc] initWithFrame:NSMakeRect(0, 0, 360, 230)];

    // Add a column for the todo text
    NSTableColumn *textColumn = [[NSTableColumn alloc] initWithIdentifier:@"text"];
    [textColumn setWidth:240];
    [textColumn setTitle:@"Todo"];
    [_tableView addTableColumn:textColumn];

    // Add a column for the date
    NSTableColumn *dateColumn = [[NSTableColumn alloc] initWithIdentifier:@"date"];
    [dateColumn setWidth:100];
    [dateColumn setTitle:@"Date"];
    [_tableView addTableColumn:dateColumn];

    // Set the table's delegate and data source
    [_tableView setDataSource:self];
    [_tableView setDelegate:self];

    // Add the table to the scroll view
    [scrollView setDocumentView:_tableView];
}

// Action method for the Add button
- (void)addTodo:(id)sender {
    NSString *text = [_textField stringValue];
    if ([text length] > 0) {
        NSDate *date = [_datePicker dateValue];

        // Create a unique ID
        NSUUID *uuid = [NSUUID UUID];

        // Create a dictionary to store the todo
        NSDictionary *todo = @{
            @"id": [uuid UUIDString],
            @"text": text,
            @"date": date
        };

        // Add to our array
        [_todos addObject:todo];

        // Reload the table
        [_tableView reloadData];

        // Reset the text field
        [_textField setStringValue:@""];

        // Call the callback if it exists
        if (g_todoAddedCallback) {
            // Convert the todo to JSON
            NSError *error;
            NSData *jsonData = [NSJSONSerialization dataWithJSONObject:@{
                @"id": [uuid UUIDString],
                @"text": text,
                @"date": @((NSTimeInterval)[date timeIntervalSince1970] * 1000)
            } options:0 error:&error;

            if (!error) {
                NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
                std::string cppJsonString = [jsonString UTF8String];
                g_todoAddedCallback(cppJsonString);
            }
        }
    }
}

// NSTableViewDataSource methods
- (NSInteger)numberOfRowsInTableView:(NSTableView *)tableView {
    return [_todos count];
}

- (id)tableView:(NSTableView *)tableView objectValueForTableColumn:(NSTableColumn *)tableColumn row:(NSInteger)row {
    NSDictionary *todo = _todos[row];
    NSString *identifier = [tableColumn identifier];

    if ([identifier isEqualToString:@"text"]) {
        return todo[@"text"];
    } else if ([identifier isEqualToString:@"date"]) {
        NSDate *date = todo[@"date"];
        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        [formatter setDateStyle:NSDateFormatterShortStyle];
        return [formatter stringFromDate:date];
    }

    return nil;
}

@end
```

----------------------------------------

TITLE: Handling Authentication in ClientRequest with the 'login' Event
DESCRIPTION: This example shows how to handle authentication requests by listening for the 'login' event on a ClientRequest object. The callback provides credentials when an authenticating proxy asks for them.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
request.on('login', (authInfo, callback) => {
  callback('username', 'password')
})
```

----------------------------------------

TITLE: Migrate from Electron session.setPreloads() to registerPreloadScript() - Javascript
DESCRIPTION: Compares the deprecated `session.setPreloads()` method with the new recommended approach using `session.registerPreloadScript()`. The new APIs offer greater flexibility, allowing multiple scripts to be registered independently and supporting different preload types.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_4

LANGUAGE: javascript
CODE:
```
// Deprecated
session.setPreloads([path.join(__dirname, 'preload.js')])
```

LANGUAGE: javascript
CODE:
```
// Replace with:
session.registerPreloadScript({
  type: 'frame',
  id: 'app-preload',
  filePath: path.join(__dirname, 'preload.js')
})
```

----------------------------------------

TITLE: Checking for Command Line Switch Presence in Electron (JavaScript)
DESCRIPTION: This example shows how to check if a specific command line switch is present using the CommandLine class in Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.commandLine.appendSwitch('remote-debugging-port', '8315')
const hasPort = app.commandLine.hasSwitch('remote-debugging-port')
console.log(hasPort) // true
```

----------------------------------------

TITLE: Load Local HTML File in Electron
DESCRIPTION: This code shows how to load a local HTML file into an Electron BrowserWindow. The `loadFile` method expects a file path relative to the application's root directory.  This example assumes a directory structure with an 'src' folder containing 'index.html'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
const win = new BrowserWindow()
win.loadFile('src/index.html')
```

----------------------------------------

TITLE: Creating a Custom Title Bar in Electron
DESCRIPTION: Implements a simple custom title bar using HTML and CSS in an Electron application, replacing the native title bar with a custom UI element.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')
app.whenReady().then(() => {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    titleBarStyle: 'hidden',
    titleBarOverlay: true
  })
  win.loadFile('index.html')
})
```

----------------------------------------

TITLE: Enabling Remote Module Web Preference (JS)
DESCRIPTION: Explicitly enables the `remote` module for a `BrowserWindow` by setting `enableRemoteModule: true` in the `webPreferences`. This is necessary as it defaults to `false` in Electron 10+.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_89

LANGUAGE: javascript
CODE:
```
const w = new BrowserWindow({
  webPreferences: {
    enableRemoteModule: true
  }
})
```

----------------------------------------

TITLE: Checking Encryption Availability in Electron
DESCRIPTION: This method checks if encryption is available on the current platform. It returns true if the necessary conditions are met for the respective operating system.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
safeStorage.isEncryptionAvailable()
```

----------------------------------------

TITLE: Replacing Electron Protocol Register Http Protocol
DESCRIPTION: Demonstrates replacing the deprecated `protocol.registerHttpProtocol` with the new `protocol.handle` using `net.fetch` to handle HTTP requests.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_38

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 25
protocol.registerHttpProtocol('some-protocol', () => {
  callback({ url: 'https://electronjs.org' })})
})
```

LANGUAGE: javascript
CODE:
```
// Replace with
protocol.handle('some-protocol', () => {
  return net.fetch('https://electronjs.org')
})
```

----------------------------------------

TITLE: Disabling Text Selection in Draggable Regions using CSS
DESCRIPTION: This CSS snippet prevents text selection within a draggable title bar to avoid conflicts with the dragging behavior.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-21_snippet_2

LANGUAGE: css
CODE:
```
.titlebar {
  user-select: none;
  app-region: drag;
}
```

----------------------------------------

TITLE: Replacing Electron Protocol Register File Protocol
DESCRIPTION: Demonstrates replacing the deprecated `protocol.registerFileProtocol` with the new `protocol.handle` using `net.fetch` to handle file requests.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_39

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 25
protocol.registerFileProtocol('some-protocol', () => {
  callback({ filePath: '/path/to/my/file' })
})
```

LANGUAGE: javascript
CODE:
```
// Replace with
protocol.handle('some-protocol', () => {
  return net.fetch('file:///path/to/my/file')
})
```

----------------------------------------

TITLE: Installing Electron ChromeDriver for Selenium Testing
DESCRIPTION: Commands to install and run electron-chromedriver, which is needed to test Electron applications with Selenium. It starts a ChromeDriver server on port 9515.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
npm install --save-dev electron-chromedriver
./node_modules/.bin/chromedriver
Starting ChromeDriver (v2.10.291558) on port 9515
Only local connections are allowed.
```

----------------------------------------

TITLE: Code Signing and Notarizing with Electron Packager (macOS)
DESCRIPTION: This snippet demonstrates how to configure Electron Packager to sign and notarize a macOS application. It specifies the `appleId` and `appleIdPassword` for notarization.  It uses the `@electron/packager` package and requires the application's directory path.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/code-signing.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const packager = require('@electron/packager')

packager({
  dir: '/path/to/my/app',
  osxSign: {},
  osxNotarize: {
    appleId: 'felix@felix.fun',
    appleIdPassword: 'my-apple-id-password'
  }
})
```

----------------------------------------

TITLE: Handling Protocol URLs in Windows and Linux
DESCRIPTION: Implementation for Windows and Linux to handle protocol URLs using the single instance lock pattern. When a second instance is launched with a protocol URL, it brings the existing window to focus and displays the URL.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const gotTheLock = app.requestSingleInstanceLock()

if (!gotTheLock) {
  app.quit()
} else {
  app.on('second-instance', (event, commandLine, workingDirectory) => {
    // Someone tried to run a second instance, we should focus our window.
    if (mainWindow) {
      if (mainWindow.isMinimized()) mainWindow.restore()
      mainWindow.focus()
    }
    // the commandLine is array of strings in which last element is deep link url
    dialog.showErrorBox('Welcome Back', `You arrived from: ${commandLine.pop()}`)
  })

  // Create mainWindow, load the rest of the app, etc...
  app.whenReady().then(() => {
    createWindow()
  })
}
```

----------------------------------------

TITLE: Get Current URL of WebContents
DESCRIPTION: This code snippet demonstrates how to retrieve the current URL of a WebContents after loading a URL.  The `getURL()` method is used to obtain the URL after the page has finished loading. The code also shows that `loadURL` returns a Promise.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({ width: 800, height: 600 })
win.loadURL('https://github.com').then(() => {
  const currentURL = win.webContents.getURL()
  console.log(currentURL)
})
```

----------------------------------------

TITLE: Retrieving Application Name in Electron
DESCRIPTION: The app.getName method returns the current application's name from the package.json file, with preference given to the productName field if available.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
app.getName()
```

----------------------------------------

TITLE: Handling Protocol URLs in macOS
DESCRIPTION: Implementation for macOS to handle protocol URLs using the 'open-url' event. Creates the main window when the app is ready and shows a dialog when a URL with the custom protocol is opened.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createWindow()
})

// Handle the protocol. In this case, we choose to show an Error Box.
app.on('open-url', (event, url) => {
  dialog.showErrorBox('Welcome Back', `You arrived from: ${url}`)
})
```

----------------------------------------

TITLE: Unpacking Files in ASAR Archive using Shell
DESCRIPTION: This shell command demonstrates how to pack an application directory into an ASAR archive while leaving native Node.js modules unpacked.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_7

LANGUAGE: Shell
CODE:
```
$ asar pack app app.asar --unpack *.node
```

----------------------------------------

TITLE: Replacing win.setMenu(null) with win.removeMenu() in Electron
DESCRIPTION: The method for removing a window's menu has changed. The deprecated `win.setMenu(null)` should be replaced with the dedicated `win.removeMenu()` method.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_97

LANGUAGE: javascript
CODE:
```
// Deprecated
win.setMenu(null)
```

LANGUAGE: javascript
CODE:
```
// Replace with
win.removeMenu()
```

----------------------------------------

TITLE: Handling BaseWindow Closed Event & Resource Cleanup | Electron | js
DESCRIPTION: This example demonstrates attaching an event listener to the `closed` event of a `BaseWindow`. When the window is closed, the callback function is executed, explicitly calling `view.webContents.close()` to release resources associated with the `WebContentsView`. This is crucial to avoid memory leaks when using `BaseWindow` with `WebContentsView`. Requires the `ready` event of the `app` module and the `BaseWindow`, `WebContentsView` modules from 'electron'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#_snippet_3

LANGUAGE: js
CODE:
```
const { BaseWindow, WebContentsView } = require('electron')

const win = new BaseWindow({ width: 800, height: 600 })

const view = new WebContentsView()
win.contentView.addChildView(view)

win.on('closed', () => {
  view.webContents.close()
})
```

----------------------------------------

TITLE: Replacing powerMonitor.querySystemIdleState with getSystemIdleState (Synchronous)
DESCRIPTION: The callback-based `powerMonitor.querySystemIdleState` has been replaced by the synchronous `powerMonitor.getSystemIdleState`. The new method directly returns the idle state string.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_100

LANGUAGE: javascript
CODE:
```
// Deprecated
powerMonitor.querySystemIdleState(threshold, callback)
```

LANGUAGE: javascript
CODE:
```
// Replace with synchronous API
const idleState = powerMonitor.getSystemIdleState(threshold)
```

----------------------------------------

TITLE: Checking Reduced Transparency Preference - Electron JavaScript
DESCRIPTION: Shows the deprecation of `systemPreferences.accessibilityDisplayShouldReduceTransparency` and its replacement with the cross-platform `nativeTheme.prefersReducedTransparency` for checking the user's preference for reduced transparency.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
// Deprecated
const shouldReduceTransparency = systemPreferences.accessibilityDisplayShouldReduceTransparency
```

LANGUAGE: JavaScript
CODE:
```
// Replace with:
const prefersReducedTransparency = nativeTheme.prefersReducedTransparency
```

----------------------------------------

TITLE: Sending Messages Using GlobalMessagePort in Renderer
DESCRIPTION: Shows how to send a message using a globally available MessagePort in a renderer process, which will be received by another renderer that has the other end of the channel.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
// elsewhere in your code to send a message to the other renderers message handler
window.electronMessagePort.postMessage('ping')
```

----------------------------------------

TITLE: In-App Purchase Integration in Electron JS
DESCRIPTION: This JavaScript code snippet demonstrates how to use the `inAppPurchase` module in Electron to implement in-app purchases. It initializes the module, listens for transaction updates, handles different transaction states (purchasing, purchased, failed, restored, deferred), retrieves product information, and initiates a purchase. Replace the `PRODUCT_IDS` with your actual product identifiers defined in iTunes Connect.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/in-app-purchases.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// Main process
const { inAppPurchase } = require('electron')
const PRODUCT_IDS = ['id1', 'id2']

// Listen for transactions as soon as possible.
inAppPurchase.on('transactions-updated', (event, transactions) => {
  if (!Array.isArray(transactions)) {
    return
  }

  // Check each transaction.
  for (const transaction of transactions) {
    const payment = transaction.payment

    switch (transaction.transactionState) {
      case 'purchasing':
        console.log(`Purchasing ${payment.productIdentifier}...`)
        break

      case 'purchased': {
        console.log(`${payment.productIdentifier} purchased.`)

        // Get the receipt url.
        const receiptURL = inAppPurchase.getReceiptURL()

        console.log(`Receipt URL: ${receiptURL}`)

        // Submit the receipt file to the server and check if it is valid.
        // @see https://developer.apple.com/library/content/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateRemotely.html
        // ...
        // If the receipt is valid, the product is purchased
        // ...

        // Finish the transaction.
        inAppPurchase.finishTransactionByDate(transaction.transactionDate)

        break
      }

      case 'failed':

        console.log(`Failed to purchase ${payment.productIdentifier}.`)

        // Finish the transaction.
        inAppPurchase.finishTransactionByDate(transaction.transactionDate)

        break
      case 'restored':

        console.log(`The purchase of ${payment.productIdentifier} has been restored.`)

        break
      case 'deferred':

        console.log(`The purchase of ${payment.productIdentifier} has been deferred.`)

        break
      default:
        break
    }
  }
})

// Check if the user is allowed to make in-app purchase.
if (!inAppPurchase.canMakePayments()) {
  console.log('The user is not allowed to make in-app purchase.')
}

// Retrieve and display the product descriptions.
inAppPurchase.getProducts(PRODUCT_IDS).then(products => {
  // Check the parameters.
  if (!Array.isArray(products) || products.length <= 0) {
    console.log('Unable to retrieve the product information.')
    return
  }

  // Display the name and price of each product.
  for (const product of products) {
    console.log(`The price of ${product.localizedTitle} is ${product.formattedPrice}.`)
  }

  // Ask the user which product they want to purchase.
  const selectedProduct = products[0]
  const selectedQuantity = 1

  // Purchase the selected product.
  inAppPurchase.purchaseProduct(selectedProduct.productIdentifier, selectedQuantity).then(isProductValid => {
    if (!isProductValid) {
      console.log('The product is not valid.')
      return
    }

    console.log('The payment has been added to the payment queue.')
  })
})
```

----------------------------------------

TITLE: Getting Crashes Directory with app.getPath - Electron JavaScript
DESCRIPTION: Shows the recommended way to retrieve the crashes directory using the `app.getPath('crashDumps')` method. This replaces the deprecated `crashReporter.getCrashesDirectory()` method.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_83

LANGUAGE: javascript
CODE:
```
// Replace with
app.getPath('crashDumps')
```

----------------------------------------

TITLE: Adding Draggable Regions for Custom Title Bar
DESCRIPTION: Shows how to make a custom title bar draggable by adding the CSS style 'app-region: drag', which allows repositioning the application window by dragging the custom title bar.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')
app.whenReady().then(() => {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    titleBarStyle: 'hidden',
    titleBarOverlay: true
  })
  win.loadFile('index.html')
})
```

----------------------------------------

TITLE: Implementing a Worker Process with MessagePorts in Electron
DESCRIPTION: An example of using MessagePorts to set up a worker process implemented as a hidden window. This pattern allows the main application to communicate directly with the worker process without going through the main process.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { BrowserWindow, app, ipcMain, MessageChannelMain } = require('electron')

app.whenReady().then(async () => {
  // The worker process is a hidden BrowserWindow, so that it will have access
  // to a full Blink context (including e.g. <canvas>, audio, fetch(), etc.)
  const worker = new BrowserWindow({
    show: false,
    webPreferences: { nodeIntegration: true }
  })
  await worker.loadFile('worker.html')

  // The main window will send work to the worker process and receive results
  // over a MessagePort.
  const mainWindow = new BrowserWindow({
    webPreferences: { nodeIntegration: true }
  })
  mainWindow.loadFile('app.html')

  // We can't use ipcMain.handle() here, because the reply needs to transfer a
  // MessagePort.
  // Listen for message sent from the top-level frame
  mainWindow.webContents.mainFrame.ipc.on('request-worker-channel', (event) => {
    // Create a new channel ...
    const { port1, port2 } = new MessageChannelMain()
    // ... send one end to the worker ...
    worker.webContents.postMessage('new-client', null, [port1])
    // ... and the other end to the main window.
    event.senderFrame.postMessage('provide-worker-channel', null, [port2])
    // Now the main window and the worker can communicate with each other
    // without going through the main process!
  })
})
```

----------------------------------------

TITLE: Implementing Inter-Process Communication with parentPort in Electron
DESCRIPTION: Example of bidirectional communication between a main process and a utility process using parentPort. The main process sends a message to the child process, which then processes the message and sends a response back to the parent.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/parent-port.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Main process
const child = utilityProcess.fork(path.join(__dirname, 'test.js'))
child.postMessage({ message: 'hello' })
child.on('message', (data) => {
  console.log(data) // hello world!
})

// Child process
process.parentPort.on('message', (e) => {
  process.parentPort.postMessage(`${e.data} world!`)
})
```

----------------------------------------

TITLE: Creating Parent and Child Browser Windows in Electron JavaScript
DESCRIPTION: Shows how to establish a parent-child relationship between BrowserWindows by passing the parent instance in the 'parent' option of the child window. Child windows are typically always displayed on top of their parent window.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const top = new BrowserWindow()
const child = new BrowserWindow({ parent: top })
child.show()
top.show()
```

----------------------------------------

TITLE: Handling Close Events with MessagePortMain
DESCRIPTION: Event listener for detecting when the remote end of a MessagePortMain object becomes disconnected.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
port.on('close', () => {
  // Handle port closing
})
```

----------------------------------------

TITLE: Using Session Remove Extension API - Electron JavaScript
DESCRIPTION: Shows the recommended way to remove extensions using the `session.defaultSession.removeExtension()` API. This replaces the deprecated `BrowserWindow.removeExtension` and `removeDevToolsExtension` methods.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_71

LANGUAGE: javascript
CODE:
```
// Replace with
session.defaultSession.removeExtension(extension_id)
```

----------------------------------------

TITLE: Creating Tray and BrowserWindow Icons from NativeImage Instances (Main Process)
DESCRIPTION: This code demonstrates how to create a Tray and a BrowserWindow in Electron, setting their icons by first creating `NativeImage` instances from file paths using `nativeImage.createFromPath`. It showcases the alternative method of using `NativeImage` objects instead of direct file paths for setting icons.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/native-image.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow, nativeImage, Tray } = require('electron')

const trayIcon = nativeImage.createFromPath('/Users/somebody/images/icon.png')
const appIcon = nativeImage.createFromPath('/Users/somebody/images/window.png')
const tray = new Tray(trayIcon)
const win = new BrowserWindow({ icon: appIcon })
```

----------------------------------------

TITLE: Handling Authentication Errors in ClientRequest
DESCRIPTION: This example demonstrates how to cancel authentication by providing empty credentials, which will result in an authentication error. It includes handling both the response and error events.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
request.on('response', (response) => {
  console.log(`STATUS: ${response.statusCode}`)
  response.on('error', (error) => {
    console.log(`ERROR: ${JSON.stringify(error)}`)
  })
})
request.on('login', (authInfo, callback) => {
  callback()
})
```

----------------------------------------

TITLE: Execute JavaScript - JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to execute JavaScript within a BrowserWindow's WebContents to fetch data from a URL. It utilizes the 'executeJavaScript' method with the 'userGesture' flag set to true. It requires the BrowserWindow module and makes an HTTP request to 'https://jsonplaceholder.typicode.com/users/1'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
const win = new BrowserWindow()

win.webContents.executeJavaScript('fetch("https://jsonplaceholder.typicode.com/users/1").then(resp => resp.json())', true)
  .then((result) => {
    console.log(result) // Will be the JSON object from the fetch call
  })
```

----------------------------------------

TITLE: Updating Existing Project to Latest Stable Electron (npm/yarn)
DESCRIPTION: Command to update an existing project to use the latest stable version of Electron as a dev dependency using npm or yarn.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/electron-versioning.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
npm install --save-dev electron@latest
```

----------------------------------------

TITLE: Replace webFrame setZoomLevelLimits with setVisualZoomLevelLimits (JS)
DESCRIPTION: Replaces the deprecated `webFrame.setZoomLevelLimits()` method with `webFrame.setVisualZoomLevelLimits()`. This updates how zoom level constraints are applied within the renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_139

LANGUAGE: js
CODE:
```
// Removed
webFrame.setZoomLevelLimits(1, 2)
```

LANGUAGE: js
CODE:
```
// Replaced with
webFrame.setVisualZoomLevelLimits(1, 2)
```

----------------------------------------

TITLE: Forcefully Crash Renderer - JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to forcefully crash the renderer process associated with a BrowserWindow's WebContents. It includes a dialog to prompt the user before crashing and reloading the page, which is useful for handling unresponsive applications. It relies on the 'unresponsive' event and the BrowserWindow and dialog modules.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
const win = new BrowserWindow()

win.webContents.on('unresponsive', async () => {
  const { response } = await dialog.showMessageBox({
    message: 'App X has become unresponsive',
    title: 'Do you want to try forcefully reloading the app?',
    buttons: ['OK', 'Cancel'],
    cancelId: 1
  })
  if (response === 0) {
    win.webContents.forcefullyCrashRenderer()
    win.webContents.reload()
  }
})
```

----------------------------------------

TITLE: Accessing ServiceWorkers through Session in Electron
DESCRIPTION: Example demonstrating how to access the ServiceWorkers class through a Session object, get all running service workers, and handle console messages from service workers.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/service-workers.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')

// Get all service workers.
console.log(session.defaultSession.serviceWorkers.getAllRunning())

// Handle logs and get service worker info
session.defaultSession.serviceWorkers.on('console-message', (event, messageDetails) => {
  console.log(
    'Got service worker message',
    messageDetails,
    'from',
    session.defaultSession.serviceWorkers.getFromVersionID(messageDetails.versionId)
  )
})
```

----------------------------------------

TITLE: Replacing webview.getWebContents (JS)
DESCRIPTION: Provides a replacement for the removed `<webview>.getWebContents` method using `remote.webContents.fromId` with the web contents ID.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_96

LANGUAGE: javascript
CODE:
```
// Removed in Electron 9.0
webview.getWebContents()
```

LANGUAGE: javascript
CODE:
```
// Replace with
const { remote } = require('electron')
remote.webContents.fromId(webview.getWebContentsId())
```

----------------------------------------

TITLE: Replace webFrame registerURLSchemeAsPrivileged with protocol registerStandardSchemes (JS)
DESCRIPTION: Replaces the deprecated `webFrame.registerURLSchemeAsPrivileged()` method with the `protocol.registerStandardSchemes()` method, specifying the appropriate options like `secure: true`. This changes how custom URL schemes are registered as privileged.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_130

LANGUAGE: js
CODE:
```
// Deprecated
webFrame.registerURLSchemeAsPrivileged('app', { secure: true })
```

LANGUAGE: js
CODE:
```
// Replace with
protocol.registerStandardSchemes(['app'], { secure: true })
```

----------------------------------------

TITLE: Managing Navigation History (New navigationHistory) - Electron JavaScript
DESCRIPTION: Shows the new location for navigation history methods. They are now accessed via the `navigationHistory` property of `WebContents` (`navigationHistory.clear`, `navigationHistory.canGoBack`, etc.), providing a more structured interface.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
// Replace with
win.webContents.navigationHistory.clear()
win.webContents.navigationHistory.canGoBack()
win.webContents.navigationHistory.goBack()
win.webContents.navigationHistory.canGoForward()
win.webContents.navigationHistory.goForward()
win.webContents.navigationHistory.canGoToOffset()
win.webContents.navigationHistory.goToOffset(index)
```

----------------------------------------

TITLE: Converting File Object to Filesystem Path in Electron
DESCRIPTION: Demonstrates the transition from using the deprecated File.path property to the new webUtils.getPathForFile() method for obtaining filesystem paths from File objects in Electron's renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-utils.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Before
const oldPath = document.querySelector('input').files[0].path

// After
const { webUtils } = require('electron')
const newPath = webUtils.getPathForFile(document.querySelector('input').files[0])
```

----------------------------------------

TITLE: Getting Preferred System Languages in Electron
DESCRIPTION: The app.getPreferredSystemLanguages method returns an array of the user's preferred system languages from most to least preferred, including country codes if applicable.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
app.getPreferredSystemLanguages()
```

----------------------------------------

TITLE: Modifying Request Headers in Electron
DESCRIPTION: This code snippet demonstrates how to modify the User-Agent header for specific URLs using the `webRequest.onBeforeSendHeaders` method in Electron. It shows how to define a filter to target specific URLs and a listener function to modify the request headers before they are sent.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-request.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')

// Modify the user agent for all requests to the following urls.
const filter = {
  urls: ['https://*.github.com/*', '*://electron.github.io/*']
}

session.defaultSession.webRequest.onBeforeSendHeaders(filter, (details, callback) => {
  details.requestHeaders['User-Agent'] = 'MyAgent'
  callback({ requestHeaders: details.requestHeaders })
})
```

----------------------------------------

TITLE: Displaying Error Box in Electron
DESCRIPTION: This function shows a modal error dialog in Electron. It accepts title and content parameters, and can be called safely before the app's 'ready' event.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_7

LANGUAGE: JavaScript
CODE:
```
dialog.showErrorBox(title, content)
```

----------------------------------------

TITLE: Using Fetch API in Electron Session
DESCRIPTION: Demonstrates how to use the session's fetch API to make network requests using Chrome's network stack. Includes error handling and response processing.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
async function example () {
  const response = await net.fetch('https://my.app')
  if (response.ok) {
    const body = await response.json()
    // ... use the result.
  }
}
```

----------------------------------------

TITLE: Using exposeInIsolatedWorld for Custom Worlds
DESCRIPTION: Example of using contextBridge.exposeInIsolatedWorld to expose an API to a specific isolated world ID rather than the main world.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInIsolatedWorld(
  1004,
  'electron',
  {
    doThing: () => ipcRenderer.send('do-a-thing')
  }
)
```

----------------------------------------

TITLE: Launching Electron App with Playwright
DESCRIPTION: Basic example of launching an Electron application using Playwright's electron.launch API and closing it after initialization. This demonstrates the minimal setup required to start testing an Electron app.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
const { test, _electron: electron } = require('@playwright/test')

test('launch app', async () => {
  const electronApp = await electron.launch({ args: ['main.js'] })
  // close app
  await electronApp.close()
})
```

----------------------------------------

TITLE: Getting File Icons in Electron
DESCRIPTION: The app.getFileIcon method fetches a file's associated icon as a NativeImage. It accepts a file path and optional options for specifying icon size.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
app.getFileIcon(path[, options])
```

----------------------------------------

TITLE: Popping Up Tray Context Menu Electron JavaScript
DESCRIPTION: This snippet pops up the context menu of the tray icon. If a `menu` is provided, it overrides the tray icon's default context menu. The `position` parameter is optional and only applicable on Windows, defaulting to (0, 0). No external dependencies are required.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
tray.popUpContextMenu([menu, position])
```

----------------------------------------

TITLE: Registering Custom File Protocol in Electron
DESCRIPTION: Shows how to register a custom file protocol ('atom://') using the session.protocol API. This example demonstrates handling requests and mapping them to local file paths.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_28

LANGUAGE: javascript
CODE:
```
const { app, session } = require('electron')
const path = require('node:path')

app.whenReady().then(() => {
  const protocol = session.fromPartition('some-partition').protocol
  if (!protocol.registerFileProtocol('atom', (request, callback) => {
    const url = request.url.substr(7)
    callback({ path: path.normalize(path.join(__dirname, url)) })
  })) {
    console.error('Failed to register protocol')
  }
})
```

----------------------------------------

TITLE: Adding Native Window Controls in Electron for Windows and Linux
DESCRIPTION: Demonstrates how to add native window controls back into an Electron BrowserWindow on Windows and Linux after removing the title bar by using the titleBarOverlay parameter.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')
app.whenReady().then(() => {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    titleBarStyle: 'hidden',
    titleBarOverlay: true
  })
  win.loadFile('index.html')
})
```

----------------------------------------

TITLE: Using Session Load Extension API - Electron JavaScript
DESCRIPTION: Shows the recommended way to load extensions using the `session.defaultSession.loadExtension()` API. This replaces the deprecated `BrowserWindow.addExtension` and `addDevToolsExtension` methods.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_69

LANGUAGE: javascript
CODE:
```
// Replace with
session.defaultSession.loadExtension(path)
```

----------------------------------------

TITLE: Save Page to HTMLComplete
DESCRIPTION: This snippet shows how to save the current web page content using `webContents.savePage` to a local file in HTMLComplete format. It captures the 'did-finish-load' event, triggers the save operation, and then handles the promise resolution to log success or any error during the save process.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_32

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

win.loadURL('https://github.com')

win.webContents.on('did-finish-load', async () => {
  win.webContents.savePage('/tmp/test.html', 'HTMLComplete').then(() => {
    console.log('Page was saved successfully.')
  }).catch(err => {
    console.log(err)
  })
})
```

----------------------------------------

TITLE: Using a Module from ASAR Archive in Node.js
DESCRIPTION: This snippet demonstrates how to require a JavaScript module located in an ASAR archive.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
require('./path/to/example.asar/dir/module.js')
```

----------------------------------------

TITLE: Implementing Forwarding Mouse Events in Electron Main Process
DESCRIPTION: This JavaScript code for the main process sets up an IPC listener to toggle mouse event ignoring with optional forwarding.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { BrowserWindow, ipcMain } = require('electron')
const path = require('node:path')

const win = new BrowserWindow({
  webPreferences: {
    preload: path.join(__dirname, 'preload.js')
  }
})

ipcMain.on('set-ignore-mouse-events', (event, ignore, options) => {
  const win = BrowserWindow.fromWebContents(event.sender)
  win.setIgnoreMouseEvents(ignore, options)
})
```

----------------------------------------

TITLE: Getting Application Version in Electron
DESCRIPTION: The app.getVersion method returns the version of the loaded application from package.json, or falls back to the current bundle or executable version.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
app.getVersion()
```

----------------------------------------

TITLE: Navigating Through History in Electron
DESCRIPTION: This code demonstrates how to implement back and forward navigation functionality using the NavigationHistory API. It checks if navigation is possible before attempting to navigate.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Go back
if (navigationHistory.canGoBack()) {
  navigationHistory.goBack()
}

// Go forward
if (navigationHistory.canGoForward()) {
  navigationHistory.goForward()
}
```

----------------------------------------

TITLE: Running WebdriverIO Tests for Electron
DESCRIPTION: Command to execute WebdriverIO tests against an Electron application. WebdriverIO handles launching and shutting down the application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
$ npx wdio run wdio.conf.js
```

----------------------------------------

TITLE: Replacing BrowserWindow Remove Extension (JS)
DESCRIPTION: Replaces the deprecated `BrowserWindow.removeExtension` and `BrowserWindow.removeDevToolsExtension` methods with the recommended `session.defaultSession.removeExtension`, which uses the extension ID.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_94

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 9
BrowserWindow.removeExtension(name)
BrowserWindow.removeDevToolsExtension(name)
```

LANGUAGE: javascript
CODE:
```
// Replace with
session.defaultSession.removeExtension(extension_id)
```

----------------------------------------

TITLE: Getting System Locale in Electron
DESCRIPTION: The app.getSystemLocale method returns the current system locale, which is used for formatting numbers, dates, and times. This API must be called after the ready event is emitted.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
app.getSystemLocale()
```

----------------------------------------

TITLE: Adding Context Menu to Tray in Electron
DESCRIPTION: This snippet shows how to create a context menu for the Tray using Menu.buildFromTemplate() and attach it to the Tray using setContextMenu(). It creates four radio-type menu items.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tray.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const contextMenu = Menu.buildFromTemplate([
  { label: 'Item1', type: 'radio' },
  { label: 'Item2', type: 'radio' },
  { label: 'Item3', type: 'radio', checked: true },
  { label: 'Item4', type: 'radio' }
])

tray.setContextMenu(contextMenu)
```

----------------------------------------

TITLE: Handling did-create-window with options - Electron JavaScript
DESCRIPTION: Shows the recommended way to access window features via the `details.options` property in the `did-create-window` event handler. This replaces the removed `details.additionalFeatures` property.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_63

LANGUAGE: javascript
CODE:
```
// Replace with
webContents.on('did-create-window', (window, details) => {
  if (details.options['my-key']) {
    // ...
  }
})
```

----------------------------------------

TITLE: Loading URLs in Electron Webview
DESCRIPTION: Methods for loading and downloading content in a webview element. Includes loadURL for navigation and downloadURL for initiating downloads without navigation.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
<webview>.loadURL(url[, options])
```

LANGUAGE: javascript
CODE:
```
<webview>.downloadURL(url[, options])
```

----------------------------------------

TITLE: Handling Mouse Events in Electron Preload Script
DESCRIPTION: This JavaScript preload script adds event listeners to toggle mouse event ignoring based on mouse enter and leave events on a specific element.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
window.addEventListener('DOMContentLoaded', () => {
  const el = document.getElementById('clickThroughElement')
  el.addEventListener('mouseenter', () => {
    ipcRenderer.send('set-ignore-mouse-events', true, { forward: true })
  })
  el.addEventListener('mouseleave', () => {
    ipcRenderer.send('set-ignore-mouse-events', false)
  })
})
```

----------------------------------------

TITLE: Using Modern webContents.capturePage (JavaScript)
DESCRIPTION: Shows the recommended way to capture a page using `webContents.capturePage`. The internal handling of capturer counts is now automatic, making manual calls to `incrementCapturerCount` and `decrementCapturerCount` unnecessary and deprecated.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_46

LANGUAGE: JavaScript
CODE:
```
const w = new BrowserWindow({ show: false })

// Replace with
w.capturePage().then(image => {
  console.log(image.toDataURL())
})
```

----------------------------------------

TITLE: Using Typed APIs in Renderer Process with TypeScript
DESCRIPTION: Demonstrates how to use the typed API in the renderer process, benefiting from TypeScript's type checking.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
window.electronAPI.loadPreferences()
```

----------------------------------------

TITLE: Creating a NativeImage instance from a file path
DESCRIPTION: This code demonstrates how to create a `NativeImage` instance from a file path using the `nativeImage.createFromPath` method. It logs the created image object to the console.  The image path must be valid and the file must be a supported image format for the operation to succeed.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/native-image.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const { nativeImage } = require('electron')

const image = nativeImage.createFromPath('/Users/somebody/images/icon.png')
console.log(image)
```

----------------------------------------

TITLE: Handling App Command Event on BaseWindow | Electron | js
DESCRIPTION: This snippet shows how to register a listener for the `app-command` event on a `BaseWindow`. This event is emitted on Windows and Linux when system commands (often from media keys or mouse buttons like 'Back') are invoked. The example checks for the 'browser-backward' command. Requires the `ready` event of the `app` module and the `BaseWindow` module from 'electron'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#_snippet_5

LANGUAGE: js
CODE:
```
const { BaseWindow } = require('electron')
const win = new BaseWindow()
win.on('app-command', (e, cmd) => {
  // Navigate the window back when the user hits their mouse back button
  if (cmd === 'browser-backward') {
    // Find the appropriate WebContents to navigate.
  }
})
```

----------------------------------------

TITLE: Getting Locale Country Code in Electron
DESCRIPTION: The app.getLocaleCountryCode method returns the user's operating system locale as a two-letter ISO 3166 country code, taken from native OS APIs.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
app.getLocaleCountryCode()
```

----------------------------------------

TITLE: Eager Loading Dependencies in Node.js
DESCRIPTION: This snippet demonstrates traditional Node.js development with eager loading of dependencies, which can lead to unnecessary work being executed as soon as the file is loaded.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/performance.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const fs = require('node:fs')
const fooParser = require('foo-parser')

class Parser {
  constructor () {
    this.files = fs.readdirSync('.')
  }

  getParsedFiles () {
    return fooParser.parse(this.files)
  }
}

const parser = new Parser()

module.exports = { parser }
```

----------------------------------------

TITLE: Installing Electron as a development dependency with npm
DESCRIPTION: Command to install Electron as a development dependency in your application using npm. This is the preferred method for including Electron in your projects.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
npm install electron --save-dev
```

----------------------------------------

TITLE: Writing HTML to Clipboard in Electron
DESCRIPTION: Shows how to write HTML markup to the system clipboard using the clipboard.writeHTML() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.writeHTML('<b>Hi</b>')
```

----------------------------------------

TITLE: Insecure BrowserWindow Configuration with AllowRunningInsecureContent
DESCRIPTION: Example of insecure BrowserWindow configuration that allows HTTPS pages to load resources via HTTP, which creates mixed content vulnerabilities.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
// Bad
const mainWindow = new BrowserWindow({
  webPreferences: {
    allowRunningInsecureContent: true
  }
})
```

----------------------------------------

TITLE: Set Background Throttling for WebContents - Electron
DESCRIPTION: This method controls whether a WebContents instance will throttle animations and timers when the page is backgrounded. It also affects the Page Visibility API. Setting `allowed` to `true` enables throttling, while `false` disables it.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_33

LANGUAGE: javascript
CODE:
```
contents.setBackgroundThrottling(allowed)
```

----------------------------------------

TITLE: Sync protocol Register/Intercept (JS)
DESCRIPTION: Illustrates the new synchronous usage for protocol registration and interception methods (e.g., `protocol.registerFileProtocol`), removing the optional callback.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_91

LANGUAGE: javascript
CODE:
```
// Deprecated
protocol.registerFileProtocol(scheme, handler, () => { /* ... */ })
```

LANGUAGE: javascript
CODE:
```
// Replace with
protocol.registerFileProtocol(scheme, handler)
```

----------------------------------------

TITLE: Logging Resource Usage
DESCRIPTION: Example showing how to log memory usage information for various resource types like images, scripts, and stylesheets.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { webFrame } = require('electron')
console.log(webFrame.getResourceUsage())
```

----------------------------------------

TITLE: Accessing Electron App Metadata in WebdriverIO Tests
DESCRIPTION: Example test that retrieves application metadata through Electron APIs. It compares app name and version with values from package.json and verifies command-line arguments.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
import fs from 'node:fs'
import path from 'node:path'
import { browser, expect } from '@wdio/globals'

const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), { encoding: 'utf-8' }))
const { name, version } = packageJson

describe('electron APIs', () => {
  it('should retrieve app metadata through the electron API', async () => {
    const appName = await browser.electron.app('getName')
    expect(appName).toEqual(name)
    const appVersion = await browser.electron.app('getVersion')
    expect(appVersion).toEqual(version)
  })

  it('should pass args through to the launched application', async () => {
    // custom args are set in the wdio.conf.js file as they need to be set before WDIO starts
    const argv = await browser.electron.mainProcess('argv')
    expect(argv).toContain('--foo')
    expect(argv).toContain('--bar=baz')
  })
})
```

----------------------------------------

TITLE: Replacing app runningUnderRosettaTranslation - JavaScript
DESCRIPTION: Illustrates the removal of the `app.runningUnderRosettaTranslation` property in Electron 28. Provides the replacement code using `app.runningUnderARM64Translation`, which provides the same information using a more general term.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_22

LANGUAGE: JavaScript
CODE:
```
// Removed
console.log(app.runningUnderRosettaTranslation)
// Replace with
console.log(app.runningUnderARM64Translation)
```

----------------------------------------

TITLE: Creating HTML UI for File Dialog in Electron
DESCRIPTION: Builds a simple HTML interface with a button to trigger the file dialog and an element to display the selected file path. Includes proper Content Security Policy headers.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_6

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self'">
    <title>Dialog</title>
  </head>
  <body>
    <button type="button" id="btn">Open a File</button>
    File path: <strong id="filePath"></strong>
    <script src='./renderer.js'></script>
  </body>
</html>
```

----------------------------------------

TITLE: Setting up Main World Message Handler in HTML
DESCRIPTION: HTML script that sets up the message handler in the main world to receive and handle the MessagePort for direct communication with the main process.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_11

LANGUAGE: html
CODE:
```
<script>
window.onmessage = (event) => {
  // event.source === window means the message is coming from the preload
  // script, as opposed to from an <iframe> or other source.
  if (event.source === window && event.data === 'main-world-port') {
    const [ port ] = event.ports
    // Once we have the port, we can communicate directly with the main
    // process.
    port.onmessage = (event) => {
      console.log('from main process:', event.data)
      port.postMessage(event.data.test * 2)
    }
  }
}
</script>
```

----------------------------------------

TITLE: Tracking Upload Progress in Electron HTTP Requests
DESCRIPTION: The getUploadProgress() method returns an object with information about the current upload progress. It includes boolean flags for activity and start status, as well as integers for current and total bytes uploaded. This method is useful for monitoring file uploads or other data transfers in POST requests.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
request.getUploadProgress()
```

----------------------------------------

TITLE: Testing Electron Window Behavior with WebdriverIO
DESCRIPTION: Example test that interacts with Electron's BrowserWindow API to verify window resizing functionality. It captures window bounds before and after clicking a button.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { browser, $, expect } from '@wdio/globals'

describe('when the make smaller button is clicked', () => {
  it('should decrease the window height and width by 10 pixels', async () => {
    const boundsBefore = await browser.electron.browserWindow('getBounds')
    expect(boundsBefore.width).toEqual(210)
    expect(boundsBefore.height).toEqual(310)

    await $('.make-smaller').click()
    const boundsAfter = await browser.electron.browserWindow('getBounds')
    expect(boundsAfter.width).toEqual(200)
    expect(boundsAfter.height).toEqual(300)
  })
})
```

----------------------------------------

TITLE: DevTools Management for Webview
DESCRIPTION: Methods to control the DevTools window for the webview, including opening, closing, checking status, and inspecting elements or workers.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
<webview>.openDevTools()
```

LANGUAGE: javascript
CODE:
```
<webview>.closeDevTools()
```

LANGUAGE: javascript
CODE:
```
<webview>.isDevToolsOpened()
```

LANGUAGE: javascript
CODE:
```
<webview>.isDevToolsFocused()
```

LANGUAGE: javascript
CODE:
```
<webview>.inspectElement(x, y)
```

LANGUAGE: javascript
CODE:
```
<webview>.inspectSharedWorker()
```

LANGUAGE: javascript
CODE:
```
<webview>.inspectServiceWorker()
```

----------------------------------------

TITLE: Configuring binding.gyp for Native Addon Build
DESCRIPTION: Node-gyp configuration file that defines how to build the native addon. Includes target name, source files, include directories, dependencies, and platform-specific compiler settings for handling C++ exceptions.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
{
  "targets": [
    {
      "target_name": "my_addon",
      "sources": [
        "src/my_addon.cc",
        "src/cpp_code.cc"
      ],
      "include_dirs": [
        "<!@(node -p \"require('node-addon-api').include\")",
        "include"
      ],
      "dependencies": [
        "<!(node -p \"require('node-addon-api').gyp\")"
      ],
      "defines": [
        "NODE_ADDON_API_CPP_EXCEPTIONS"
      ],
      "cflags!": ["-fno-exceptions"],
      "cflags_cc!": ["-fno-exceptions"],
      "xcode_settings": {
        "GCC_ENABLE_CPP_EXCEPTIONS": "YES",
        "CLANG_CXX_LIBRARY": "libc++",
        "MACOSX_DEPLOYMENT_TARGET": "10.14"
      },
      "msvs_settings": {
        "VCCLCompilerTool": {
          "ExceptionHandling": 1
        }
      }
    }
  ]
}
```

----------------------------------------

TITLE: Replace BrowserWindow webPreferences blinkFeatures with enableBlinkFeatures (JS)
DESCRIPTION: Replaces the deprecated `webPreferences.blinkFeatures` option in the BrowserWindow constructor with the recommended `webPreferences.enableBlinkFeatures`. This updates the configuration for controlling Blink runtime features.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_114

LANGUAGE: js
CODE:
```
// Deprecated
const optionsA = { webPreferences: { blinkFeatures: '' } }
const windowA = new BrowserWindow(optionsA)
```

LANGUAGE: js
CODE:
```
// Replace with
const optionsB = { webPreferences: { enableBlinkFeatures: '' } }
const windowB = new BrowserWindow(optionsB)
```

----------------------------------------

TITLE: Replacing powerMonitor.querySystemIdleTime with getSystemIdleTime (Synchronous)
DESCRIPTION: The callback-based `powerMonitor.querySystemIdleTime` has been replaced by the synchronous `powerMonitor.getSystemIdleTime`. The new method directly returns the idle time number.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_101

LANGUAGE: javascript
CODE:
```
// Deprecated
powerMonitor.querySystemIdleTime(callback)
```

LANGUAGE: javascript
CODE:
```
// Replace with synchronous API
const idleTime = powerMonitor.getSystemIdleTime()
```

----------------------------------------

TITLE: Implementing Spellchecker Context Menu in Electron
DESCRIPTION: Example of creating a context menu with spelling suggestions and dictionary management options using the context-menu event.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/spellchecker.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { Menu, MenuItem } = require('electron')

myWindow.webContents.on('context-menu', (event, params) => {
  const menu = new Menu()

  // Add each spelling suggestion
  for (const suggestion of params.dictionarySuggestions) {
    menu.append(new MenuItem({
      label: suggestion,
      click: () => myWindow.webContents.replaceMisspelling(suggestion)
    }))
  }

  // Allow users to add the misspelled word to the dictionary
  if (params.misspelledWord) {
    menu.append(
      new MenuItem({
        label: 'Add to dictionary',
        click: () => myWindow.webContents.session.addWordToSpellCheckerDictionary(params.misspelledWord)
      })
    )
  }

  menu.popup()
})
```

----------------------------------------

TITLE: Thread-safe Function Implementation for C++/Node.js Communication
DESCRIPTION: Sets up thread-safe function handling for cross-thread communication between C++ and Node.js, including callback management and event system setup.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_17

LANGUAGE: cpp
CODE:
```
CppAddon(const Napi::CallbackInfo& info)
    : Napi::ObjectWrap<CppAddon>(info)
    , env_(info.Env())
    , emitter(Napi::Persistent(Napi::Object::New(info.Env())))
    , callbacks(Napi::Persistent(Napi::Object::New(info.Env())))
    , tsfn_(nullptr) {

    napi_status status = napi_create_threadsafe_function(
        env_,
        nullptr,
        nullptr,
        Napi::String::New(env_, "CppCallback"),
        0,
        1,
        nullptr,
        nullptr,
        this,
        [](napi_env env, napi_value js_callback, void* context, void* data) {
            auto* callbackData = static_cast<CallbackData*>(data);
            if (!callbackData) return;

            Napi::Env napi_env(env);
            Napi::HandleScope scope(napi_env);

            auto addon = static_cast<CppAddon*>(context);
            if (!addon) {
                delete callbackData;
                return;
            }

            try {
                auto callback = addon->callbacks.Value().Get(callbackData->eventType).As<Napi::Function>();
                if (callback.IsFunction()) {
                    callback.Call(addon->emitter.Value(), {Napi::String::New(napi_env, callbackData->payload)});
                }
            } catch (...) {}

            delete callbackData;
        },
        &tsfn_
    );
```

----------------------------------------

TITLE: Managing Recent Documents in Electron Application
DESCRIPTION: This code demonstrates how to add a document to the recent files list and clear it when the application closes. It creates a Markdown file, adds it to the recent documents, and sets up event handlers to manage the application lifecycle.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/recent-documents.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron/main')
const fs = require('node:fs')
const path = require('node:path')

function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600
  })

  win.loadFile('index.html')
}

const fileName = 'recently-used.md'
fs.writeFile(fileName, 'Lorem Ipsum', () => {
  app.addRecentDocument(path.join(__dirname, fileName))
})

app.whenReady().then(createWindow)

app.on('window-all-closed', () => {
  app.clearRecentDocuments()
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})
```

----------------------------------------

TITLE: Adding Recent Documents in Electron (macOS and Windows)
DESCRIPTION: The app.addRecentDocument method adds a file path to the operating system's recent documents list, accessible from the Windows task bar or macOS dock menu.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_18

LANGUAGE: javascript
CODE:
```
app.addRecentDocument(path)
```

----------------------------------------

TITLE: Navigation Control in Webview
DESCRIPTION: Methods to control page navigation within a webview, including stop, reload, and history manipulation.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
<webview>.stop()
```

LANGUAGE: javascript
CODE:
```
<webview>.reload()
```

LANGUAGE: javascript
CODE:
```
<webview>.reloadIgnoringCache()
```

LANGUAGE: javascript
CODE:
```
<webview>.canGoBack()
```

LANGUAGE: javascript
CODE:
```
<webview>.canGoForward()
```

LANGUAGE: javascript
CODE:
```
<webview>.canGoToOffset(offset)
```

LANGUAGE: javascript
CODE:
```
<webview>.clearHistory()
```

LANGUAGE: javascript
CODE:
```
<webview>.goBack()
```

LANGUAGE: javascript
CODE:
```
<webview>.goForward()
```

LANGUAGE: javascript
CODE:
```
<webview>.goToIndex(index)
```

LANGUAGE: javascript
CODE:
```
<webview>.goToOffset(offset)
```

----------------------------------------

TITLE: Setting USB Protected Classes Handler in Electron
DESCRIPTION: This code snippet shows how to set a USB protected classes handler for a session in Electron. It allows customization of which USB classes are considered protected and not available in the renderer.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

let win = null

app.whenReady().then(() => {
  win = new BrowserWindow()

  win.webContents.session.setUSBProtectedClassesHandler((details) => {
    // Allow all classes:
    // return []
    // Keep the current set of protected classes:
    // return details.protectedClasses
    // Selectively remove classes:
    return details.protectedClasses.filter((usbClass) => {
      // Exclude classes except for audio classes
      return usbClass.indexOf('audio') === -1
    })
  })
})
```

----------------------------------------

TITLE: Replace menu popup arguments with options object (JS)
DESCRIPTION: Replaces the deprecated method signature for `menu.popup()`, which accepted `x`, `y`, and `positioningItem` as separate arguments. The new signature requires an options object containing these properties.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_135

LANGUAGE: js
CODE:
```
// Removed
menu.popup(browserWindow, 100, 200, 2)
```

LANGUAGE: js
CODE:
```
// Replaced with
menu.popup(browserWindow, { x: 100, y: 200, positioningItem: 2 })
```

----------------------------------------

TITLE: Implementing Reply Stream Pattern in Electron Main Process
DESCRIPTION: Shows the main process implementation of the streaming response pattern. Handles incoming requests by sending multiple messages through the MessagePort and properly closing the connection.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
ipcMain.on('give-me-a-stream', (event, msg) => {
  // The renderer has sent us a MessagePort that it wants us to send our
  // response over.
  const [replyPort] = event.ports

  // Here we send the messages synchronously, but we could just as easily store
  // the port somewhere and send messages asynchronously.
  for (let i = 0; i < msg.count; i++) {
    replyPort.postMessage(msg.element)
  }

  // We close the port when we're done to indicate to the other end that we
  // won't be sending any more messages. This isn't strictly necessary--if we
  // didn't explicitly close the port, it would eventually be garbage
  // collected, which would also trigger the 'close' event in the renderer.
  replyPort.close()
})
```

----------------------------------------

TITLE: Replacing systemPreferences App Level Appearance Property in Electron
DESCRIPTION: Demonstrates how to replace the removed `systemPreferences.appLevelAppearance` property with the `nativeTheme.shouldUseDarkColors` property.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_29

LANGUAGE: javascript
CODE:
```
// Removed
systemPreferences.appLevelAppearance
```

LANGUAGE: javascript
CODE:
```
// Replace with
nativeTheme.shouldUseDarkColors
```

----------------------------------------

TITLE: Replacing systemPreferences Set App Level Appearance in Electron
DESCRIPTION: Demonstrates how to replace the removed `systemPreferences.setAppLevelAppearance` method with the `nativeTheme.themeSource` property.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_30

LANGUAGE: javascript
CODE:
```
// Removed
systemPreferences.setAppLevelAppearance('dark')
```

LANGUAGE: javascript
CODE:
```
// Replace with
nativeTheme.themeSource = 'dark'
```

----------------------------------------

TITLE: Showing Certificate Trust Dialog in Electron (macOS and Windows)
DESCRIPTION: This function displays a certificate trust dialog on macOS and Windows. It accepts optional window and options parameters, and returns a Promise that resolves when the dialog is shown.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_8

LANGUAGE: JavaScript
CODE:
```
dialog.showCertificateTrustDialog([window, ]options)
```

----------------------------------------

TITLE: Replacing systemPreferences Get Color Value in Electron
DESCRIPTION: Shows how to replace the removed 'alternate-selected-control-text' value used with `systemPreferences.getColor` by using 'selected-content-background' instead.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_31

LANGUAGE: javascript
CODE:
```
// Removed
systemPreferences.getColor('alternate-selected-control-text')
```

LANGUAGE: javascript
CODE:
```
// Replace with
systemPreferences.getColor('selected-content-background')
```

----------------------------------------

TITLE: Replace webFrame registerURLSchemeAsSecure with protocol registerStandardSchemes (JS)
DESCRIPTION: Replaces the deprecated `webFrame.registerURLSchemeAsSecure()` method with the `protocol.registerStandardSchemes()` method, specifying the `secure: true` option. This changes how custom URL schemes are registered as secure.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_129

LANGUAGE: js
CODE:
```
// Deprecated
webFrame.registerURLSchemeAsSecure('app')
```

LANGUAGE: js
CODE:
```
// Replace with
protocol.registerStandardSchemes(['app'], { secure: true })
```

----------------------------------------

TITLE: Replace crashReporter autoSubmit with uploadToServer (JS)
DESCRIPTION: Replaces the deprecated `autoSubmit` option in `crashReporter.start()` configuration with the new `uploadToServer` option. Both options control whether crash reports are automatically sent to the submit URL.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_120

LANGUAGE: js
CODE:
```
// Deprecated
crashReporter.start({
  companyName: 'Crashly',
  submitURL: 'https://crash.server.com',
  autoSubmit: true
})
```

LANGUAGE: js
CODE:
```
// Replace with
crashReporter.start({
  companyName: 'Crashly',
  submitURL: 'https://crash.server.com',
  uploadToServer: true
})
```

----------------------------------------

TITLE: Handling Application Move Conflicts in Electron (JavaScript)
DESCRIPTION: Shows how to use the moveToApplicationsFolder method with a custom conflict handler. The handler allows for user confirmation when moving the app to the Applications folder if an app with the same name already exists.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_26

LANGUAGE: javascript
CODE:
```
const { app, dialog } = require('electron')

app.moveToApplicationsFolder({
  conflictHandler: (conflictType) => {
    if (conflictType === 'exists') {
      return dialog.showMessageBoxSync({
        type: 'question',
        buttons: ['Halt Move', 'Continue Move'],
        defaultId: 0,
        message: 'An app of this name already exists'
      }) === 1
    }
  }
})
```

----------------------------------------

TITLE: Requiring Node Builtins in Sandboxed Renderers via Remote
DESCRIPTION: When using sandboxed renderers, requiring Node.js built-in modules (like `child_process`, `fs`, `os`, `path`) no longer implicitly loads the `remote` version. You must explicitly require them via `electron.remote.require()`. This applies to all Node builtins when `sandbox` is enabled.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_99

LANGUAGE: javascript
CODE:
```
// Deprecated
require('child_process')
```

LANGUAGE: javascript
CODE:
```
// Replace with
require('electron').remote.require('child_process')
```

LANGUAGE: javascript
CODE:
```
// Deprecated
require('fs')
```

LANGUAGE: javascript
CODE:
```
// Replace with
require('electron').remote.require('fs')
```

LANGUAGE: javascript
CODE:
```
// Deprecated
require('os')
```

LANGUAGE: javascript
CODE:
```
// Replace with
require('electron').remote.require('os')
```

LANGUAGE: javascript
CODE:
```
// Deprecated
require('path')
```

LANGUAGE: javascript
CODE:
```
// Replace with
require('electron').remote.require('path')
```

----------------------------------------

TITLE: Setting Device Permission Handler in Electron
DESCRIPTION: This snippet demonstrates how to set a device permission handler for a session in Electron. It includes logic for handling HID, serial, and USB device permissions, as well as persisting granted devices.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

let win = null

app.whenReady().then(() => {
  win = new BrowserWindow()

  win.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {
    if (permission === 'hid') {
      // Add logic here to determine if permission should be given to allow HID selection
      return true
    } else if (permission === 'serial') {
      // Add logic here to determine if permission should be given to allow serial port selection
    } else if (permission === 'usb') {
      // Add logic here to determine if permission should be given to allow USB device selection
    }
    return false
  })

  // Optionally, retrieve previously persisted devices from a persistent store
  const grantedDevices = fetchGrantedDevices()

  win.webContents.session.setDevicePermissionHandler((details) => {
    if (new URL(details.origin).hostname === 'some-host' && details.deviceType === 'hid') {
      if (details.device.vendorId === 123 && details.device.productId === 345) {
        // Always allow this type of device (this allows skipping the call to `navigator.hid.requestDevice` first)
        return true
      }

      // Search through the list of devices that have previously been granted permission
      return grantedDevices.some((grantedDevice) => {
        return grantedDevice.vendorId === details.device.vendorId &&
              grantedDevice.productId === details.device.productId &&
              grantedDevice.serialNumber && grantedDevice.serialNumber === details.device.serialNumber
      })
    } else if (details.deviceType === 'serial') {
      if (details.device.vendorId === 123 && details.device.productId === 345) {
        // Always allow this type of device (this allows skipping the call to `navigator.hid.requestDevice` first)
        return true
      }
    }
    return false
  })

  win.webContents.session.on('select-hid-device', (event, details, callback) => {
    event.preventDefault()
    const selectedDevice = details.deviceList.find((device) => {
      return device.vendorId === 9025 && device.productId === 67
    })
    callback(selectedDevice?.deviceId)
  })
})
```

----------------------------------------

TITLE: Handling File System Access Restrictions in Electron
DESCRIPTION: Illustrates how to create a BrowserWindow, load a URL, and handle file system access restrictions by listening to the 'file-system-access-restricted' event on the default session.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { app, dialog, BrowserWindow, session } = require('electron')

async function createWindow () {
  const mainWindow = new BrowserWindow()

  await mainWindow.loadURL('https://buzzfeed.com')

  session.defaultSession.on('file-system-access-restricted', async (e, details, callback) => {
    const { origin, path } = details
    const { response } = await dialog.showMessageBox({
      message: `Are you sure you want ${origin} to open restricted path ${path}?`,
      title: 'File System Access Restricted',
      buttons: ['Choose a different folder', 'Allow', 'Cancel'],
      cancelId: 2
    })

    if (response === 0) {
      callback('tryAgain')
    } else if (response === 1) {
      callback('allow')
    } else {
      callback('deny')
    }
  })

  mainWindow.webContents.executeJavaScript(`
    window.showDirectoryPicker({
      id: 'electron-demo',
      mode: 'readwrite',
      startIn: 'downloads',
    }).catch(e => {
      console.log(e)
    })`, true
  )
}

app.whenReady().then(() => {
  createWindow()

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

app.on('window-all-closed', function () {
  if (process.platform !== 'darwin') app.quit()
})
```

----------------------------------------

TITLE: Configuring Desktop Capture in Electron Main Process
DESCRIPTION: This snippet shows how to set up the main process to handle display media requests using desktopCapturer. It configures a request handler to programmatically provide access to screen capture sources.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/desktop-capturer.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// main.js
const { app, BrowserWindow, desktopCapturer, session } = require('electron')

app.whenReady().then(() => {
  const mainWindow = new BrowserWindow()

  session.defaultSession.setDisplayMediaRequestHandler((request, callback) => {
    desktopCapturer.getSources({ types: ['screen'] }).then((sources) => {
      // Grant access to the first screen found.
      callback({ video: sources[0], audio: 'loopback' })
    })
    // If true, use the system picker if available.
    // Note: this is currently experimental. If the system picker
    // is available, it will be used and the media request handler
    // will not be invoked.
  }, { useSystemPicker: true })

  mainWindow.loadFile('index.html')
})
```

----------------------------------------

TITLE: Handling Session Creation in Electron
DESCRIPTION: This snippet demonstrates how to listen for the 'session-created' event in an Electron application. It logs the newly created session object to the console whenever Electron creates a new session.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.on('session-created', (session) => {
  console.log(session)
})
```

----------------------------------------

TITLE: Implementing C++ Function for Native Addon in Electron
DESCRIPTION: Implements the 'hello_world' function defined in the header file. This function concatenates a greeting message with the input string and returns the result.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_7

LANGUAGE: cpp
CODE:
```
#include <string>
#include "../include/cpp_code.h"

namespace cpp_code {
    std::string hello_world(const std::string& input) {
        // Simply concatenate strings and return
        return "Hello from C++! You said: " + input;
    }
} // namespace cpp_code
```

----------------------------------------

TITLE: Replace webContents openDevTools detach option with mode 'detach' (JS)
DESCRIPTION: Replaces the deprecated boolean `detach` option in `webContents.openDevTools()` with an options object specifying `mode: 'detach'`. This updates how the DevTools docking mode is set.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_127

LANGUAGE: js
CODE:
```
// Deprecated
webContents.openDevTools({ detach: true })
```

LANGUAGE: js
CODE:
```
// Replace with
webContents.openDevTools({ mode: 'detach' })
```

----------------------------------------

TITLE: Asynchronous ESM Import in Electron Main Process
DESCRIPTION: Demonstrates the need to use 'await' for dynamic ESM imports in the main process to ensure code execution before the app's 'ready' event.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/esm.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// add an await call here to guarantee that path setup will finish before `ready`
import('./set-up-paths.mjs')

app.whenReady().then(() => {
  console.log('This code may execute before the above import')
})
```

----------------------------------------

TITLE: Handling WebView Close Events in JavaScript
DESCRIPTION: Shows how to respond when a guest page attempts to close itself. The example navigates the WebView to about:blank when the close event is triggered.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_22

LANGUAGE: javascript
CODE:
```
const webview = document.querySelector('webview')
webview.addEventListener('close', () => {
  webview.src = 'about:blank'
})
```

----------------------------------------

TITLE: Advanced Menu Template with Group Positioning
DESCRIPTION: A menu template that uses 'beforeGroupContaining' and 'afterGroupContaining' positioning properties along with separators to create a more complex menu structure with grouped items.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
[
  { id: '1', label: 'one' },
  { type: 'separator' },
  { id: '3', label: 'three', beforeGroupContaining: ['1'] },
  { id: '4', label: 'four', afterGroupContaining: ['2'] },
  { type: 'separator' },
  { id: '2', label: 'two' }
]
```

----------------------------------------

TITLE: Windows ASAR Archive Structure
DESCRIPTION: Demonstrates the file structure required when using an ASAR archive in a Windows Electron application.  The `app.asar` archive, containing the application's source code, is placed within the `resources` directory of the Electron application directory.  Electron will then load the application from this archive.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-21_snippet_3

LANGUAGE: plain
CODE:
```
"electron/resources/
└── app.asar"
```

----------------------------------------

TITLE: Basic Node.js Addon Structure in C++
DESCRIPTION: Creates the basic skeleton for a Node.js addon using node-addon-api, setting up the initialization function and module exports.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_15

LANGUAGE: cpp
CODE:
```
#include <napi.h>
#include <string>
#include "cpp_code.h"

Napi::Object Init(Napi::Env env, Napi::Object exports) {
    // We'll add code here later
    return exports;
}

NODE_API_MODULE(cpp_addon, Init)
```

----------------------------------------

TITLE: Starting Service Workers for Specific Scopes in Electron
DESCRIPTION: Example showing how to start service workers for specific scopes when a browser window is created, and sending messages to the service workers.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/service-workers.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { app, session } = require('electron')
const { serviceWorkers } = session.defaultSession

// Collect service workers scopes
const workerScopes = Object.values(serviceWorkers.getAllRunning()).map((info) => info.scope)

app.on('browser-window-created', async (event, window) => {
  for (const scope of workerScopes) {
    try {
      // Ensure worker is started
      const serviceWorker = await serviceWorkers.startWorkerForScope(scope)
      serviceWorker.send('window-created', { windowId: window.id })
    } catch (error) {
      console.error(`Failed to start service worker for ${scope}`)
      console.error(error)
    }
  }
})
```

----------------------------------------

TITLE: Getting Command Line Switch Value in Electron (JavaScript)
DESCRIPTION: This snippet demonstrates how to obtain the value of a command line switch using the CommandLine class in Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.commandLine.appendSwitch('remote-debugging-port', '8315')
const portValue = app.commandLine.getSwitchValue('remote-debugging-port')
console.log(portValue) // '8315'
```

----------------------------------------

TITLE: Electron Forge Configuration for Protocol Handlers
DESCRIPTION: JSON configuration for Electron Forge that specifies the custom protocol handler for both macOS (via packagerConfig) and Linux (via maker-deb configuration).
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_6

LANGUAGE: json
CODE:
```
{
  "config": {
    "forge": {
      "packagerConfig": {
        "protocols": [
          {
            "name": "Electron Fiddle",
            "schemes": ["electron-fiddle"]
          }
        ]
      },
      "makers": [
        {
          "name": "@electron-forge/maker-deb",
          "config": {
            "mimeType": ["x-scheme-handler/electron-fiddle"]
          }
        }
      ]
    }
  }
}
```

----------------------------------------

TITLE: Capturing Webview Screenshot in Electron
DESCRIPTION: The capturePage method takes a snapshot of the webview content, optionally within a specified rectangle, and returns a Promise resolving with a NativeImage.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_17

LANGUAGE: javascript
CODE:
```
<webview>.capturePage([rect])
```

----------------------------------------

TITLE: Custom Electron Test Driver using Node.js IPC
DESCRIPTION: Implementation of a custom test driver using Node.js child_process to spawn an Electron application and communicate via IPC. This shows the basic setup for establishing communication between test and app.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
const childProcess = require('node:child_process')
const electronPath = require('electron')

// spawn the process
const env = { /* ... */ }
const stdio = ['inherit', 'inherit', 'inherit', 'ipc']
const appProcess = childProcess.spawn(electronPath, ['./app'], { stdio, env })

// listen for IPC messages from the app
appProcess.on('message', (msg) => {
  // ...
})

// send an IPC message to the app
appProcess.send({ my: 'message' })
```

----------------------------------------

TITLE: Replace BrowserWindow app-command media-play_pause with media-play-pause (JS)
DESCRIPTION: Updates the event name used in the `app-command` event listener for media controls. The deprecated `media-play_pause` command is replaced with the standard `media-play-pause` command.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_115

LANGUAGE: js
CODE:
```
// Deprecated
window.on('app-command', (e, cmd) => {
  if (cmd === 'media-play_pause') {
    // do something
  }
})
```

LANGUAGE: js
CODE:
```
// Replace with
window.on('app-command', (e, cmd) => {
  if (cmd === 'media-play-pause') {
    // do something
  }
})
```

----------------------------------------

TITLE: Finding Text in Webview
DESCRIPTION: Methods to search for text within the webview's page and control the search process, including options for case sensitivity and navigation direction.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
<webview>.findInPage(text[, options])
```

LANGUAGE: javascript
CODE:
```
<webview>.stopFindInPage(action)
```

----------------------------------------

TITLE: Encrypting a String in Electron
DESCRIPTION: This method encrypts a plaintext string and returns a Buffer containing the encrypted bytes. It throws an error if encryption fails.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
safeStorage.encryptString(plainText)
```

----------------------------------------

TITLE: Clearing Recent Documents in Electron (macOS and Windows)
DESCRIPTION: The app.clearRecentDocuments method clears the operating system's recent documents list on macOS and Windows platforms.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```
app.clearRecentDocuments()
```

----------------------------------------

TITLE: Capturing Frame Updates with the Paint Event
DESCRIPTION: This snippet shows how to listen for the 'paint' event on a WebContents object to capture frame updates. It creates a new BrowserWindow with offscreen rendering enabled, attaches a listener to the 'paint' event, and loads a URL. The event provides the dirty rectangle and the image data of the frame.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ webPreferences: { offscreen: true } })
win.webContents.on('paint', (event, dirty, image) => {
  // updateBitmap(dirty, image.toBitmap())
})
win.loadURL('https://github.com')
```

----------------------------------------

TITLE: Defining CustomScheme Object Structure in Markdown
DESCRIPTION: This snippet outlines the structure of the CustomScheme object, including its properties and optional privileges. It specifies the 'scheme' string and various boolean options that can be set for the custom scheme.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/custom-scheme.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# CustomScheme Object

* `scheme` string - Custom schemes to be registered with options.
* `privileges` Object (optional)
  * `standard` boolean (optional) - Default false.
  * `secure` boolean (optional) - Default false.
  * `bypassCSP` boolean (optional) - Default false.
  * `allowServiceWorkers` boolean (optional) - Default false.
  * `supportFetchAPI` boolean (optional) - Default false.
  * `corsEnabled` boolean (optional) - Default false.
  * `stream` boolean (optional) - Default false.
  * `codeCache` boolean (optional) - Enable V8 code cache for the scheme, only
    works when `standard` is also set to true. Default false.
```

----------------------------------------

TITLE: Advanced Protocol Handler with Security Checks in Electron
DESCRIPTION: Comprehensive example of handling custom app:// protocol with security checks, HTML responses, and API proxying. Includes path traversal protection and content-type handling.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { app, net, protocol } = require('electron')
const path = require('node:path')
const { pathToFileURL } = require('url')

protocol.registerSchemesAsPrivileged([
  {
    scheme: 'app',
    privileges: {
      standard: true,
      secure: true,
      supportFetchAPI: true
    }
  }
])

app.whenReady().then(() => {
  protocol.handle('app', (req) => {
    const { host, pathname } = new URL(req.url)
    if (host === 'bundle') {
      if (pathname === '/') {
        return new Response('<h1>hello, world</h1>', {
          headers: { 'content-type': 'text/html' }
        })
      }
      // NB, this checks for paths that escape the bundle, e.g.
      // app://bundle/../../secret_file.txt
      const pathToServe = path.resolve(__dirname, pathname)
      const relativePath = path.relative(__dirname, pathToServe)
      const isSafe = relativePath && !relativePath.startsWith('..') && !path.isAbsolute(relativePath)
      if (!isSafe) {
        return new Response('bad', {
          status: 400,
          headers: { 'content-type': 'text/html' }
        })
      }

      return net.fetch(pathToFileURL(pathToServe).toString())
    } else if (host === 'api') {
      return net.fetch('https://api.my-server.com/' + pathname, {
        method: req.method,
        headers: req.headers,
        body: req.body
      })
    }
  })
})
```

----------------------------------------

TITLE: Signing Electron App with Apple Distribution Certificate in JavaScript
DESCRIPTION: This code snippet shows how to sign an Electron app with the Apple Distribution certificate using the @electron/osx-sign module. This is necessary for submitting the app to the Mac App Store.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { signAsync } = require('@electron/osx-sign')

signAsync({
  app: 'path/to/your.app',
  identity: 'Apple Distribution'
})
```

----------------------------------------

TITLE: Registering Stream Protocol in Electron
DESCRIPTION: Example of registering a custom 'atom' protocol that sends a stream as a response. It demonstrates creating a PassThrough stream and returning it with custom headers.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { protocol } = require('electron')
const { PassThrough } = require('stream')

function createStream (text) {
  const rv = new PassThrough() // PassThrough is also a Readable stream
  rv.push(text)
  rv.push(null)
  return rv
}

protocol.registerStreamProtocol('atom', (request, callback) => {
  callback({
    statusCode: 200,
    headers: {
      'content-type': 'text/html'
    },
    data: createStream('<h5>Response</h5>')
  })
})
```

----------------------------------------

TITLE: Handling Shared Texture with the Paint Event
DESCRIPTION: This snippet demonstrates how to use shared textures with the 'paint' event in Electron. It creates a BrowserWindow with `offscreen.useSharedTexture` enabled. The event handler retrieves the texture and its information, which can be passed to other processes using IPC. It also demonstrates calling `texture.release()` to manage the texture lifecycle.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ webPreferences: { offscreen: { useSharedTexture: true } } })
win.webContents.on('paint', async (e, dirty, image) => {
  if (e.texture) {
    // By managing lifecycle yourself, you can handle the event in async handler or pass the `e.texture.textureInfo`
    // to other processes (not `e.texture`, the `e.texture.release` function is not passable through IPC).
    await new Promise(resolve => setTimeout(resolve, 50))

    // You can send the native texture handle to native code for importing into your rendering pipeline.
    // Read more at https://github.com/electron/electron/blob/main/shell/browser/osr/README.md
    // importTextureHandle(dirty, e.texture.textureInfo)

    // You must call `e.texture.release()` as soon as possible, before the underlying frame pool is drained.
    e.texture.release()
  }
})
win.loadURL('https://github.com')
```

----------------------------------------

TITLE: Getting all WebContents instances in Electron
DESCRIPTION: This code shows how to retrieve an array containing all WebContents instances in the Electron application. This includes web contents for windows, webviews, opened devtools, and devtools extension background pages. It requires the electron module.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const { webContents } = require('electron')
console.log(webContents)
```

----------------------------------------

TITLE: Using MessagePortMain postMessage Method in Electron
DESCRIPTION: Sends a message from the port, optionally transferring ownership of objects to other browsing contexts. This is the main process equivalent of DOM MessagePort's postMessage.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
port.postMessage(message, [transfer])
```

----------------------------------------

TITLE: Navigation Actions - Electron NavigationHistory
DESCRIPTION: Methods to perform navigation actions like going back, forward, or to a specific index in history.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
navigationHistory.goBack()
navigationHistory.goForward()
navigationHistory.goToIndex(index)
navigationHistory.goToOffset(offset)
```

----------------------------------------

TITLE: Replacing BrowserWindow setTrafficLightPosition - JavaScript
DESCRIPTION: Demonstrates the removal of the `BrowserWindow.setTrafficLightPosition` method in Electron 28. Provides the replacement code using `BrowserWindow.setWindowButtonPosition`, noting the change in how to reset the position (using `null` instead of `{ x: 0, y: 0 }`).
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
// Removed in Electron 28
win.setTrafficLightPosition({ x: 10, y: 10 })
win.setTrafficLightPosition({ x: 0, y: 0 })

// Replace with
win.setWindowButtonPosition({ x: 10, y: 10 })
win.setWindowButtonPosition(null)
```

----------------------------------------

TITLE: Implementing Media Capture Controls in Electron Renderer Process
DESCRIPTION: This renderer.js file contains the JavaScript code that handles the UI interactions for starting and stopping screen capture. It uses the navigator.mediaDevices.getDisplayMedia API to request screen sharing access.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/desktop-capturer.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// renderer.js
const startButton = document.getElementById('startButton')
const stopButton = document.getElementById('stopButton')
const video = document.querySelector('video')

startButton.addEventListener('click', () => {
  navigator.mediaDevices.getDisplayMedia({
    audio: true,
    video: {
      width: 320,
      height: 240,
      frameRate: 30
    }
  }).then(stream => {
    video.srcObject = stream
    video.onloadedmetadata = (e) => video.play()
  }).catch(e => console.log(e))
})

stopButton.addEventListener('click', () => {
  video.pause()
})
```

----------------------------------------

TITLE: Defining NotificationAction Object Structure in Markdown
DESCRIPTION: This snippet outlines the properties of the NotificationAction object, including the 'type' and 'text' fields. It specifies that the 'type' must be 'button' and 'text' is optional.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/notification-action.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# NotificationAction Object

* `type` string - The type of action, can be `button`.
* `text` string (optional) - The label for the given action.
```

----------------------------------------

TITLE: Configuring WebdriverIO for Electron Testing
DESCRIPTION: Example configuration file for WebdriverIO that sets up Electron service and capabilities. This configuration allows WebdriverIO to find and interact with your Electron application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
export const config = {
  // ...
  services: ['electron'],
  capabilities: [{
    browserName: 'electron',
    'wdio:electronServiceOptions': {
      // WebdriverIO can automatically find your bundled application
      // if you use Electron Forge or electron-builder, otherwise you
      // can define it here, e.g.:
      // appBinaryPath: './path/to/bundled/application.exe',
      appArgs: ['foo', 'bar=baz']
    }
  }]
  // ...
}
```

----------------------------------------

TITLE: Creating Notifications with Action Buttons on macOS
DESCRIPTION: Example showing how to create notifications with custom action buttons on macOS. This demonstrates how to define interactive actions and handle action selection events.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { Notification } = require('electron');

// Create a macOS notification with custom actions
const notification = new Notification({
  title: 'New Update Available',
  body: 'Version 2.0 is ready to install',
  actions: [
    {
      type: 'button',
      text: 'Install Now'
    },
    {
      type: 'button',
      text: 'Remind Later'
    }
  ]
});

// Show the notification
notification.show();

// Handle action selection
notification.on('action', (event, index) => {
  if (index === 0) {
    console.log('User chose to install now');
    // Perform installation
  } else if (index === 1) {
    console.log('User chose to be reminded later');
    // Schedule a reminder
  }
});
```

----------------------------------------

TITLE: Setting Up Application Menu in Electron for Recent Documents
DESCRIPTION: This code shows how to create an application menu from a template and set it as the application menu after the app is ready. This is important for the Recent Documents menu to work properly.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/recent-documents.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { app, Menu } = require('electron')

const template = [
  // Menu template here
]
const menu = Menu.buildFromTemplate(template)

app.whenReady().then(() => {
  Menu.setApplicationMenu(menu)
})
```

----------------------------------------

TITLE: Replacing WebContents/webview crashed Event (Deprecated) - JavaScript
DESCRIPTION: Shows the deprecation of the `crashed` event from `WebContents` and `<webview>` elements in Electron 28. Provides the replacement code using the new `render-process-gone` event, which standardizes handling of process termination.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_24

LANGUAGE: JavaScript
CODE:
```
// Deprecated
win.webContents.on('crashed', (event, killed) => { /* ... */ })
webview.addEventListener('crashed', (event) => { /* ... */ })

// Replace with
win.webContents.on('render-process-gone', (event, details) => { /* ... */ })
webview.addEventListener('render-process-gone', (event, details) => { /* ... */ })
```

----------------------------------------

TITLE: Handling Deprecated new-window Event - Electron JavaScript
DESCRIPTION: Demonstrates handling the deprecated `new-window` event on `webContents`. This event has been replaced by `webContents.setWindowOpenHandler()`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_80

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 13
webContents.on('new-window', (event) => {
  event.preventDefault()
})
```

----------------------------------------

TITLE: Generating PDF from Webview in Electron
DESCRIPTION: The printToPDF method converts webview content to PDF format with customizable options such as orientation, headers/footers, background, scale, page size, and margins.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
<webview>.printToPDF(options)
```

----------------------------------------

TITLE: Printing Webview Content in Electron
DESCRIPTION: The print method allows printing of webview content with various options like silent printing, background printing, device selection, color mode, margins, and more.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
<webview>.print([options])
```

----------------------------------------

TITLE: Replacing BrowserWindow Get Traffic Light Position in Electron
DESCRIPTION: Demonstrates replacing the deprecated `BrowserWindow.getTrafficLightPosition` with `BrowserWindow.getWindowButtonPosition` and checking for the default position using `null`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_41

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 25
const pos = win.getTrafficLightPosition()
if (pos.x === 0 && pos.y === 0) {
  // No custom position.
}
```

LANGUAGE: javascript
CODE:
```
// Replace with
const ret = win.getWindowButtonPosition()
if (ret === null) {
  // No custom position.
}
```

----------------------------------------

TITLE: Setting Custom Traffic Light Position on macOS
DESCRIPTION: Provides granular control over the positioning of macOS window controls (traffic lights) by specifying exact coordinates using the trafficLightPosition option in the BrowserWindow constructor.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({
  titleBarStyle: 'hidden',
  trafficLightPosition: { x: 10, y: 10 }
})
```

----------------------------------------

TITLE: Registering and Handling APNS Notifications in Electron
DESCRIPTION: This snippet demonstrates how to register for APNS notifications and handle received notifications using the pushNotifications module in Electron. It shows the registration process and setting up an event listener for received notifications.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/push-notifications.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { pushNotifications, Notification } = require('electron')

pushNotifications.registerForAPNSNotifications().then((token) => {
  // forward token to your remote notification server
})

pushNotifications.on('received-apns-notification', (event, userInfo) => {
  // generate a new Notification object with the relevant userInfo fields
})
```

----------------------------------------

TITLE: Replacing BrowserWindow Set Traffic Light Position in Electron
DESCRIPTION: Shows replacing the deprecated `BrowserWindow.setTrafficLightPosition` API with `BrowserWindow.setWindowButtonPosition`, demonstrating setting a position and resetting to default.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_40

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 25
win.setTrafficLightPosition({ x: 10, y: 10 })
win.setTrafficLightPosition({ x: 0, y: 0 })
```

LANGUAGE: javascript
CODE:
```
// Replace with
win.setWindowButtonPosition({ x: 10, y: 10 })
win.setWindowButtonPosition(null)
```

----------------------------------------

TITLE: Setting Overlay Icon for Windows Taskbar in Electron
DESCRIPTION: This example demonstrates how to set an overlay icon for a BrowserWindow's taskbar button using the setOverlayIcon API in Electron. It sets an image as the overlay with a description.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { BrowserWindow, nativeImage } = require('electron')

const win = new BrowserWindow()

win.setOverlayIcon(nativeImage.createFromPath('path/to/overlay.png'), 'Description for overlay')
```

----------------------------------------

TITLE: Capturing WebFrame Content in Display Media Request Handler
DESCRIPTION: Demonstrates how to implement a display media request handler that allows a tab to capture itself by returning the requesting frame as the video source.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')

session.defaultSession.setDisplayMediaRequestHandler((request, callback) => {
  // Allow the tab to capture itself.
  callback({ video: request.frame })
})
```

----------------------------------------

TITLE: Handling Keypress Events within a BrowserWindow using Web APIs
DESCRIPTION: This snippet demonstrates how to handle keypress events within a BrowserWindow using web APIs. It adds an event listener to the window that listens for the keyup event. The event handler function can then process the key press.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function handleKeyPress (event) {
  // You can put code here to handle the keypress.
  document.getElementById('last-keypress').innerText = event.key
  console.log(`You pressed ${event.key}`)
}

window.addEventListener('keyup', handleKeyPress, true)
```

----------------------------------------

TITLE: Signing Electron App with Apple Development Certificate in JavaScript
DESCRIPTION: This code snippet demonstrates how to sign an Electron app with the Apple Development certificate using the @electron/osx-sign module. It includes specifying the app path, identity, and provisioning profile.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { signAsync } = require('@electron/osx-sign')

signAsync({
  app: '/path/to/your.app',
  identity: 'Apple Development',
  provisioningProfile: '/path/to/your.provisionprofile'
})
```

----------------------------------------

TITLE: Package Configuration (package.json)
DESCRIPTION: This JSON configuration file defines the metadata for the Node.js package, including its name, version, description, entry point, author, scripts, license, and dependencies. The scripts define commands for cleaning, building for Electron, and building using node-gyp. It specifies dependencies on 'bindings' and 'node-addon-api'.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "objc-macos",
  "version": "1.0.0",
  "description": "A demo module that exposes Objective-C code to Electron",
  "main": "js/index.js",
  "author": "Your Name",
  "scripts": {
    "clean": "rm -rf build",
    "build-electron": "electron-rebuild",
    "build": "node-gyp configure && node-gyp build"
  },
  "license": "MIT",
  "dependencies": {
    "bindings": "^1.5.0",
    "node-addon-api": "^8.3.0"
  }
}
```

----------------------------------------

TITLE: Accessing Child Process PID - JavaScript
DESCRIPTION: The `child.pid` property provides access to the process identifier of the child process. It is `undefined` until the process is successfully spawned, useful for monitoring process state and ensuring the process is active.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/utility-process.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
"const child = utilityProcess.fork(path.join(__dirname, 'test.js'))\nchild.on('spawn', () => {\n  console.log(child.pid) // Integer\n})"
```

----------------------------------------

TITLE: Installing Electron with unsafe permissions
DESCRIPTION: Command to install Electron with the unsafe-perm flag set to true, which may be necessary if you encounter EACCESS errors during installation.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_8

LANGUAGE: sh
CODE:
```
sudo npm install electron --unsafe-perm=true
```

----------------------------------------

TITLE: Creating a Distributable with Electron Forge
DESCRIPTION: Command to create a distributable using the 'make' script added by Electron Forge.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npm run make
```

----------------------------------------

TITLE: Registering Privileged Protocol Schemes in Electron
DESCRIPTION: Shows how to register a custom protocol scheme with specific privileges, such as bypassing Content Security Policy. Must be called before app ready event.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { protocol } = require('electron')
protocol.registerSchemesAsPrivileged([
  { scheme: 'foo', privileges: { bypassCSP: true } }
])
```

----------------------------------------

TITLE: Creating Interrupted Download in Electron Session
DESCRIPTION: Allows resuming cancelled or interrupted downloads from previous sessions. It generates a DownloadItem that can be accessed with the 'will-download' event. The download starts when the 'resume' API is called on the DownloadItem.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_21

LANGUAGE: JavaScript
CODE:
```
ses.createInterruptedDownload(options)
```

----------------------------------------

TITLE: Getting Tray Bounds Electron JavaScript
DESCRIPTION: This snippet retrieves the `bounds` of the tray icon as a `Rectangle` object on macOS and Windows. It provides the dimensions and position of the tray icon on the screen. The method returns an object type. No external dependencies are required.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_5

LANGUAGE: JavaScript
CODE:
```
tray.getBounds()
```

----------------------------------------

TITLE: Initializing Offscreen BrowserWindow in Electron
DESCRIPTION: Creates a BrowserWindow instance with offscreen rendering enabled using shared texture mode
SOURCE: https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
webPreferences: {
  offscreen: true,
  useSharedTexture: true
}
```

----------------------------------------

TITLE: Deprecating Remote Module Require (JS)
DESCRIPTION: Shows the old, deprecated way to import modules from the `electron.remote` module, which has been replaced by the `@electron/remote` package.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_84

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron').remote
```

----------------------------------------

TITLE: Adding ElectronTeamID to Info.plist in XML
DESCRIPTION: This XML snippet shows how to add the ElectronTeamID key to the Info.plist file of an Electron app bundle. This is required for app sandboxing and should contain the Apple Developer account's Team ID.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_5

LANGUAGE: xml
CODE:
```
<plist version="1.0">
<dict>
  ...
  <key>ElectronTeamID</key>
  <string>TEAM_ID</string>
</dict>
</plist>
```

----------------------------------------

TITLE: Complete Playwright Test for Electron Applications
DESCRIPTION: A complete test example combining main process evaluation and window interaction with assertions. This shows a practical test that verifies if the app is in development mode and captures a screenshot.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
const { test, expect, _electron: electron } = require('@playwright/test')

test('example test', async () => {
  const electronApp = await electron.launch({ args: ['.'] })
  const isPackaged = await electronApp.evaluate(async ({ app }) => {
    // This runs in Electron's main process, parameter here is always
    // the result of the require('electron') in the main app script.
    return app.isPackaged
  })

  expect(isPackaged).toBe(false)

  // Wait for the first BrowserWindow to open
  // and return its Page object
  const window = await electronApp.firstWindow()
  await window.screenshot({ path: 'intro.png' })

  // close app
  await electronApp.close()
})
```

----------------------------------------

TITLE: Accessing Electron Main Process with Playwright
DESCRIPTION: Example of accessing and evaluating code in Electron's main process using Playwright. This snippet shows how to check if the app is packaged by accessing the app object from the main process.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
const { test, _electron: electron } = require('@playwright/test')

test('get isPackaged', async () => {
  const electronApp = await electron.launch({ args: ['main.js'] })
  const isPackaged = await electronApp.evaluate(async ({ app }) => {
    // This runs in Electron's main process, parameter here is always
    // the result of the require('electron') in the main app script.
    return app.isPackaged
  })
  console.log(isPackaged) // false (because we're in development mode)
  // close app
  await electronApp.close()
})
```

----------------------------------------

TITLE: Handling Redirects in Electron HTTP Requests
DESCRIPTION: The followRedirect() method continues any pending redirection. It can only be called during a 'redirect' event, allowing for programmatic control over HTTP redirects.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
request.followRedirect()
```

----------------------------------------

TITLE: Deprecating systemPreferences Get Color Value in Electron
DESCRIPTION: Shows the deprecation of the 'alternate-selected-control-text' value for `systemPreferences.getColor` and its replacement with 'selected-content-background'.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_36

LANGUAGE: javascript
CODE:
```
// Deprecated
systemPreferences.getColor('alternate-selected-control-text')
```

LANGUAGE: javascript
CODE:
```
// Replace with
systemPreferences.getColor('selected-content-background')
```

----------------------------------------

TITLE: Migrate from Electron NativeImage.getBitmap() to toBitmap() - Javascript
DESCRIPTION: Shows the deprecated usage of `NativeImage.getBitmap()` and its recommended replacement `NativeImage.toBitmap()`. Due to changes (likely related to sandboxing), both methods now return a copy of the bitmap, making `toBitmap()` the preferred API.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// Deprecated
bitmap = image.getBitmap()
```

LANGUAGE: javascript
CODE:
```
// Use this instead
bitmap = image.toBitmap()
```

----------------------------------------

TITLE: Replacing crashReporter.getCrashesDirectory (JS)
DESCRIPTION: Replaces the deprecated `crashReporter.getCrashesDirectory` method with the recommended `app.getPath('crashDumps')` to retrieve the crash dumps directory.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_88

LANGUAGE: javascript
CODE:
```
crashReporter.getCrashesDirectory()
```

LANGUAGE: javascript
CODE:
```
app.getPath('crashDumps')
```

----------------------------------------

TITLE: Stopping Find In Page Request - JavaScript
DESCRIPTION: This code snippet illustrates how to use `webContents.stopFindInPage` to stop a `findInPage` request.  It listens for the `found-in-page` event and calls `stopFindInPage` with the 'clearSelection' action when the final update is received.  A request id is generated when `findInPage` is invoked.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_22

LANGUAGE: javascript
CODE:
```
const win = new BrowserWindow()
win.webContents.on('found-in-page', (event, result) => {
  if (result.finalUpdate) win.webContents.stopFindInPage('clearSelection')
})

const requestId = win.webContents.findInPage('api')
console.log(requestId)
```

----------------------------------------

TITLE: Log Frame ID in Main Process on IPC Message
DESCRIPTION: This snippet shows how to access the frame ID from an incoming IPC message in the main process. The `event.frameId` property of the event object provides the ID of the frame that sent the message. This allows the main process to identify the origin of the message.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_30

LANGUAGE: JavaScript
CODE:
```
// In the main process
ipcMain.on('ping', (event) => {
  console.info('Message came from frameId:', event.frameId)
})
```

----------------------------------------

TITLE: Main Application HTML with MessagePort Communication
DESCRIPTION: HTML file for the main application that requests a MessagePort channel from the main process to communicate with the worker. It sends work to the worker and handles the results.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_6

LANGUAGE: html
CODE:
```
<script>
const { ipcRenderer } = require('electron')

// We request that the main process sends us a channel we can use to
// communicate with the worker.
ipcRenderer.send('request-worker-channel')

ipcRenderer.once('provide-worker-channel', (event) => {
  // Once we receive the reply, we can take the port...
  const [ port ] = event.ports
  // ... register a handler to receive results ...
  port.onmessage = (event) => {
    console.log('received result:', event.data)
  }
  // ... and start sending it work!
  port.postMessage(21)
})
</script>
```

----------------------------------------

TITLE: Setting Spellchecker Languages in Electron
DESCRIPTION: Demonstrates how to set specific languages for the spellchecker and retrieve available language codes using session APIs.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/spellchecker.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Sets the spellchecker to check English US and French
myWindow.webContents.session.setSpellCheckerLanguages(['en-US', 'fr'])

// An array of all available language codes
const possibleLanguages = myWindow.webContents.session.availableSpellCheckerLanguages
```

----------------------------------------

TITLE: Setting Sheet Offset from HTML Element Height - Electron/JS
DESCRIPTION: This snippet demonstrates how to calculate the height of an HTML element (e.g., a custom toolbar) using `getBoundingClientRect` and use that height to set the Y-offset for sheets attached to the window on macOS. This allows sheets to appear correctly positioned below custom UI elements.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

const toolbarRect = document.getElementById('toolbar').getBoundingClientRect()
win.setSheetOffset(toolbarRect.height)
```

----------------------------------------

TITLE: Creating a macOS Notification with Reply Feature
DESCRIPTION: Example showing how to create a notification with inline reply functionality on macOS. This demonstrates platform-specific features including reply capability and custom sounds.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { Notification } = require('electron');

// Create a macOS notification with reply functionality
const notification = new Notification({
  title: 'Message Received',
  subtitle: 'From: User',
  body: 'Would you like to respond?',
  hasReply: true,
  replyPlaceholder: 'Type your reply here...',
  sound: 'Basso',  // Using a built-in macOS sound
  closeButtonText: 'Dismiss'
});

// Show the notification
notification.show();

// Handle reply event
notification.on('reply', (event, reply) => {
  console.log(`User replied: ${reply}`);
});
```

----------------------------------------

TITLE: Electron Packager API Configuration for Protocol Handlers
DESCRIPTION: JavaScript code showing how to configure protocol handlers when using Electron Packager's programmatic API, establishing 'electron-fiddle://' as a custom protocol.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
const packager = require('@electron/packager')

packager({
  // ...other options...
  protocols: [
    {
      name: 'Electron Fiddle',
      schemes: ['electron-fiddle']
    }
  ]

}).then(paths => console.log(`SUCCESS: Created ${paths.join(', ')}`)) 
  .catch(err => console.error(`ERROR: ${err.message}`))
```

----------------------------------------

TITLE: Capturing Screenshots of Electron Windows with Playwright
DESCRIPTION: Example of accessing the first BrowserWindow in an Electron application and taking a screenshot. This demonstrates how to interact with renderer processes using Playwright's Page API.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
const { test, _electron: electron } = require('@playwright/test')

test('save screenshot', async () => {
  const electronApp = await electron.launch({ args: ['main.js'] })
  const window = await electronApp.firstWindow()
  await window.screenshot({ path: 'intro.png' })
  // close app
  await electronApp.close()
})
```

----------------------------------------

TITLE: Configuring Custom Buttons on Hover for macOS Title Bar
DESCRIPTION: Sets up a macOS-specific title bar style that hides traffic lights (window controls) until hovered over, useful for creating custom traffic lights while still using native UI controls.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({ titleBarStyle: 'customButtonsOnHover' })
```

----------------------------------------

TITLE: Replacing BrowserWindow Get Extensions (JS)
DESCRIPTION: Replaces the deprecated `BrowserWindow.getExtensions` and `BrowserWindow.getDevToolsExtensions` methods with the recommended `session.defaultSession.getAllExtensions`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_95

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 9
BrowserWindow.getExtensions()
BrowserWindow.getDevToolsExtensions()
```

LANGUAGE: javascript
CODE:
```
// Replace with
session.defaultSession.getAllExtensions()
```

----------------------------------------

TITLE: Accessing Raw HTTP Headers in Electron IncomingMessage
DESCRIPTION: Demonstrates how to access and log raw HTTP headers from an IncomingMessage response object. The rawHeaders property returns an array where even indices contain header names and odd indices contain corresponding values, preserving the original case and duplicate headers.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/incoming-message.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
console.log(response.rawHeaders)
```

----------------------------------------

TITLE: Creating BaseWindow with Multiple WebContentsViews | Electron | js
DESCRIPTION: This snippet shows how to instantiate a `BaseWindow` and add multiple `WebContentsView` instances to its `contentView`. It then loads URLs into each view and sets their bounds to arrange them side-by-side within the window. Requires the `ready` event of the `app` module to be emitted and the `BaseWindow`, `WebContentsView` modules from 'electron'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#_snippet_0

LANGUAGE: js
CODE:
```
const { BaseWindow, WebContentsView } = require('electron')

const win = new BaseWindow({ width: 800, height: 600 })

const leftView = new WebContentsView()
leftView.webContents.loadURL('https://electronjs.org')
win.contentView.addChildView(leftView)

const rightView = new WebContentsView()
rightView.webContents.loadURL('https://github.com/electron/electron')
win.contentView.addChildView(rightView)

leftView.setBounds({ x: 0, y: 0, width: 400, height: 600 })
rightView.setBounds({ x: 400, y: 0, width: 400, height: 600 })
```

----------------------------------------

TITLE: Log Frame ID in Renderer Process
DESCRIPTION: This snippet demonstrates how to retrieve and log the frame ID (routingId) within a renderer process using Electron's webFrame module. The frame ID can be used to identify the specific frame when sending messages or handling events.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_29

LANGUAGE: JavaScript
CODE:
```
// In a renderer process
console.log('My frameId is:', require('electron').webFrame.routingId)
```

----------------------------------------

TITLE: Setting Visual Zoom Level Limits - JavaScript
DESCRIPTION: This code snippet demonstrates how to set the minimum and maximum pinch-to-zoom level for a BrowserWindow's web contents.  It initializes a new BrowserWindow and then calls setVisualZoomLevelLimits to configure the zoom range. This functionality is disabled by default and must be explicitly enabled.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_20

LANGUAGE: javascript
CODE:
```
const win = new BrowserWindow()
win.webContents.setVisualZoomLevelLimits(1, 3)
```

----------------------------------------

TITLE: Worker HTML Implementation with MessagePort Handling
DESCRIPTION: HTML file for the worker process that handles incoming client connections via MessagePorts. It receives work requests, processes them, and sends results back through the MessagePort.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_5

LANGUAGE: html
CODE:
```
<script>
const { ipcRenderer } = require('electron')

const doWork = (input) => {
  // Something cpu-intensive.
  return input * 2
}

// We might get multiple clients, for instance if there are multiple windows,
// or if the main window reloads.
ipcRenderer.on('new-client', (event) => {
  const [ port ] = event.ports
  port.onmessage = (event) => {
    // The event data can be any serializable object (and the event could even
    // carry other MessagePorts with it!)
    const result = doWork(event.data)
    port.postMessage(result)
  }
})
</script>
```

----------------------------------------

TITLE: Editing Commands in Webview
DESCRIPTION: Methods to execute standard editing commands in the webview's page, such as undo, redo, cut, copy, paste, and selection operations.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
<webview>.undo()
```

LANGUAGE: javascript
CODE:
```
<webview>.redo()
```

LANGUAGE: javascript
CODE:
```
<webview>.cut()
```

LANGUAGE: javascript
CODE:
```
<webview>.copy()
```

LANGUAGE: javascript
CODE:
```
<webview>.centerSelection()
```

LANGUAGE: javascript
CODE:
```
<webview>.paste()
```

LANGUAGE: javascript
CODE:
```
<webview>.pasteAndMatchStyle()
```

LANGUAGE: javascript
CODE:
```
<webview>.delete()
```

LANGUAGE: javascript
CODE:
```
<webview>.selectAll()
```

LANGUAGE: javascript
CODE:
```
<webview>.unselect()
```

----------------------------------------

TITLE: Updating Tray Context Menu Items in Linux
DESCRIPTION: Shows how to properly update individual menu items in the tray context menu on Linux platforms. Demonstrates the need to reset the context menu after making changes to menu items.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { app, Menu, Tray } = require('electron')

let appIcon = null
app.whenReady().then(() => {
  appIcon = new Tray('/path/to/my/icon')
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Item1', type: 'radio' },
    { label: 'Item2', type: 'radio' }
  ])

  // Make a change to the context menu
  contextMenu.items[1].checked = false

  // Call this again for Linux because we modified the context menu
  appIcon.setContextMenu(contextMenu)
})
```

----------------------------------------

TITLE: Creating Linux Notifications with Custom Urgency
DESCRIPTION: Example demonstrating Linux-specific notification options including urgency levels. This code shows how to set notification priority on Linux systems.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { Notification } = require('electron');

// Create a Linux notification with critical urgency
const notification = new Notification({
  title: 'System Alert',
  body: 'Critical system update required',
  urgency: 'critical',  // Can be 'normal', 'critical', or 'low'
  timeoutType: 'never'  // Won't time out automatically
});

// Show the notification
notification.show();

// Close the notification programmatically after 10 seconds
setTimeout(() => {
  notification.close();
}, 10000);
```

----------------------------------------

TITLE: Creating a Custom macOS Dock Menu in Electron
DESCRIPTION: This example demonstrates how to create a custom dock menu for a macOS Electron application. It shows how to build a menu with various options including nested submenus, then set it using app.dock.setMenu. The code also includes standard Electron application lifecycle handling.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/macos-dock.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, Menu } = require('electron/main')

function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600
  })

  win.loadFile('index.html')
}

const dockMenu = Menu.buildFromTemplate([
  {
    label: 'New Window',
    click () { console.log('New Window') }
  }, {
    label: 'New Window with Settings',
    submenu: [
      { label: 'Basic' },
      { label: 'Pro' }
    ]
  },
  { label: 'New Command...' }
])

app.whenReady().then(() => {
  app.dock?.setMenu(dockMenu)
}).then(createWindow)

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})
```

----------------------------------------

TITLE: IPC Message Handling in Electron Main Process
DESCRIPTION: Code for the Electron main process to handle IPC messages from a test driver. This shows how to set up communication handlers in the application being tested.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
// listen for messages from the test suite
process.on('message', (msg) => {
  // ...
})

// send a message to the test suite
process.send({ my: 'message' })
```

----------------------------------------

TITLE: Configuring Custom Spell Check Provider
DESCRIPTION: Example demonstrating how to disable the built-in spellchecker and configure a custom spell check provider using node-spellchecker.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const mainWindow = new BrowserWindow({
  webPreferences: {
    spellcheck: false
  }
})
```

----------------------------------------

TITLE: Handle Electron WebContents 'console-message' Event with Updated Parameters - Javascript
DESCRIPTION: Shows the change in the parameters provided to the handler for the `WebContents` 'console-message' event. The deprecated signature had individual parameters, while the new signature passes details within a single event object using destructuring.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_5

LANGUAGE: javascript
CODE:
```
// Deprecated
webContents.on('console-message', (event, level, message, line, sourceId) => {})
```

LANGUAGE: javascript
CODE:
```
// Replace with:
webContents.on('console-message', ({ level, message, lineNumber, sourceId, frame }) => {})
```

----------------------------------------

TITLE: Removing a Specific Listener with ipcMainServiceWorker.removeListener()
DESCRIPTION: Removes a specified listener function from the listener array for a particular channel, maintaining other listeners that might be registered for the same channel.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
ipcMainServiceWorker.removeListener(channel, listener)
```

----------------------------------------

TITLE: Installing WebdriverIO Test Runner for Electron Testing
DESCRIPTION: Command to initialize WebdriverIO in your project. This starter toolkit helps set up the right configuration for Electron application testing.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
npm init wdio@latest ./
```

----------------------------------------

TITLE: Offscreen Rendering Example in Electron
DESCRIPTION: This example demonstrates how to use offscreen rendering in Electron to capture a screenshot of a webpage. It disables hardware acceleration and sets up a BrowserWindow with offscreen rendering enabled. It then loads a URL, listens for the 'paint' event, saves the rendered image to a file, and sets the frame rate.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/offscreen-rendering.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { app, BrowserWindow } = require('electron/main')
const fs = require('node:fs')
const path = require('node:path')

app.disableHardwareAcceleration()

function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      offscreen: true
    }
  })

  win.loadURL('https://github.com')
  win.webContents.on('paint', (event, dirty, image) => {
    fs.writeFileSync('ex.png', image.toPNG())
  })
  win.webContents.setFrameRate(60)
  console.log(`The screenshot has been successfully saved to ${path.join(process.cwd(), 'ex.png')}`)
}

app.whenReady().then(() => {
  createWindow()

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow()
    }
  })
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})
```

----------------------------------------

TITLE: Setting Tooltip and Title for Tray in Electron
DESCRIPTION: This code demonstrates how to set a tooltip and title for the Tray icon using setToolTip() and setTitle() methods.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tray.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
tray.setToolTip('This is my application')
tray.setTitle('This is my title')
```

----------------------------------------

TITLE: Replacing app renderer-process-crashed Event (Deprecated) - JavaScript
DESCRIPTION: Illustrates the deprecation of the `renderer-process-crashed` event from the Electron `app` module in version 28. Provides the replacement code using the new `render-process-gone` event, which should be used to handle renderer process termination.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_23

LANGUAGE: JavaScript
CODE:
```
// Deprecated
app.on('renderer-process-crashed', (event, webContents, killed) => { /* ... */ })

// Replace with
app.on('render-process-gone', (event, webContents, details) => { /* ... */ })
```

----------------------------------------

TITLE: Testing Keyboard Input with WebdriverIO in Electron
DESCRIPTION: Example test that detects keyboard input in an Electron application using WebdriverIO. It simulates key presses and verifies the application's response.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { browser, $, expect } from '@wdio/globals'

describe('keyboard input', () => {
  it('should detect keyboard input', async () => {
    await browser.keys(['y', 'o'])
    await expect($('keypress-count')).toHaveText('YO')
  })
})
```

----------------------------------------

TITLE: Clearing Code Caches in Electron Session
DESCRIPTION: Clears the code caches for specified URLs or all entries if no URLs are provided. Returns a Promise that resolves when the clear operation is complete.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_25

LANGUAGE: JavaScript
CODE:
```
ses.clearCodeCaches(options)
```

----------------------------------------

TITLE: Reading ASAR Archive as a Normal File using original-fs
DESCRIPTION: This snippet showcases how to read the content of an ASAR archive as a regular file using the original-fs module.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_5

LANGUAGE: JavaScript
CODE:
```
const originalFs = require('original-fs')
originalFs.readFileSync('/path/to/example.asar')
```

----------------------------------------

TITLE: Using Linux Selection Clipboard in Electron
DESCRIPTION: Example showing how to read and write text to the Linux selection clipboard by passing the 'selection' argument to clipboard methods.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.writeText('Example string', 'selection')
console.log(clipboard.readText('selection'))
```

----------------------------------------

TITLE: Remove Inserted CSS - JavaScript
DESCRIPTION: This JavaScript code demonstrates how to insert and then remove CSS from a BrowserWindow's WebContents. It listens for the 'did-finish-load' event, inserts CSS to change the background color, stores the key returned by `insertCSS`, and then removes the CSS using that key. This requires the BrowserWindow module.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
const win = new BrowserWindow()

win.webContents.on('did-finish-load', async () => {
  const key = await win.webContents.insertCSS('html, body { background-color: #f00; }')
  win.webContents.removeInsertedCSS(key)
})
```

----------------------------------------

TITLE: Creating and Configuring Electron View
DESCRIPTION: Demonstrates basic usage of the View class including creation, styling, and adding to a window. Shows how to set background color, define bounds, and add the view to a BaseWindow's content view.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/view.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { BaseWindow, View } = require('electron')
const win = new BaseWindow()
const view = new View()

view.setBackgroundColor('red')
view.setBounds({ x: 0, y: 0, width: 100, height: 100 })
win.contentView.addChildView(view)
```

----------------------------------------

TITLE: PowerMonitor getSystemIdleTime Method
DESCRIPTION: Method that calculates and returns the system idle time in seconds as an integer value.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
powerMonitor.getSystemIdleTime()
```

----------------------------------------

TITLE: Listing All Files in ASAR Archive using Node.js
DESCRIPTION: This JavaScript code snippet shows how to list all files in the root directory of an ASAR archive.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
const fs = require('node:fs')
fs.readdirSync('/path/to/example.asar')
```

----------------------------------------

TITLE: Accessing History Entries in Electron
DESCRIPTION: This snippet shows how to retrieve and display all entries in the browsing history. Each entry contains information such as the page title and URL.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const entries = navigationHistory.getAllEntries()

entries.forEach((entry) => {
  console.log(`${entry.title}: ${entry.url}`)
})
```

----------------------------------------

TITLE: Handling Client Certificate Selection in Electron
DESCRIPTION: This snippet demonstrates how to handle the 'select-client-certificate' event in an Electron application. It prevents the default behavior of using the first certificate and explicitly selects the first certificate from the provided list.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.on('select-client-certificate', (event, webContents, url, list, callback) => {
  event.preventDefault()
  callback(list[0])
})
```

----------------------------------------

TITLE: Creating Windows Notifications with Custom Toast XML
DESCRIPTION: Example showing how to create a Windows notification using custom Toast XML for full control over notification appearance and behavior. This allows for advanced customization specific to Windows.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { Notification } = require('electron');

// Create a Windows notification with custom Toast XML
const notification = new Notification({
  toastXml: `
    <toast>
      <visual>
        <binding template="ToastGeneric">
          <text>Custom Windows Notification</text>
          <text>This notification uses custom Toast XML</text>
          <image placement="appLogoOverride" src="file:///C:/path/to/image.png"/>
        </binding>
      </visual>
      <actions>
        <action content="View" arguments="view-action"/>
        <action content="Dismiss" arguments="dismiss-action"/>
      </actions>
    </toast>
  `,
  timeoutType: 'never'  // Notification won't expire automatically
});

// Show the notification
notification.show();

// Handle failure event
notification.on('failed', (event, error) => {
  console.error(`Notification failed: ${error}`);
});
```

----------------------------------------

TITLE: Setting Zoom Factor in Electron WebFrame
DESCRIPTION: Example showing how to zoom the current page to 200% using webFrame's setZoomFactor method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { webFrame } = require('electron')

webFrame.setZoomFactor(2)
```

----------------------------------------

TITLE: Setting Display Media Request Handler in Electron
DESCRIPTION: Implements a handler for display media access requests via navigator.mediaDevices.getDisplayMedia API. This example shows how to grant access to the first available screen source using desktopCapturer API.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
const { session, desktopCapturer } = require('electron')

session.defaultSession.setDisplayMediaRequestHandler((request, callback) => {
  desktopCapturer.getSources({ types: ['screen'] }).then((sources) => {
    // Grant access to the first screen found.
    callback({ video: sources[0] })
  })
  // Use the system picker if available.
  // Note: this is currently experimental. If the system picker
  // is available, it will be used and the media request handler
  // will not be invoked.
}, { useSystemPicker: true })
```

----------------------------------------

TITLE: Checking Available Clipboard Formats in Electron
DESCRIPTION: Shows how to check the available formats in the system clipboard using the clipboard.availableFormats() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

const formats = clipboard.availableFormats()
console.log(formats)
// [ 'text/plain', 'text/html' ]
```

----------------------------------------

TITLE: Defining JumpListCategory Object Structure in Markdown
DESCRIPTION: This snippet outlines the structure of the JumpListCategory object, including its properties and their possible values. It also provides important notes about property assumptions and limitations.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/jump-list-category.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# JumpListCategory Object

* `type` string (optional) - One of the following:
  * `tasks` - Items in this category will be placed into the standard `Tasks`
    category. There can be only one such category, and it will always be
    displayed at the bottom of the Jump List.
  * `frequent` - Displays a list of files frequently opened by the app, the
    name of the category and its items are set by Windows.
  * `recent` - Displays a list of files recently opened by the app, the name
    of the category and its items are set by Windows. Items may be added to
    this category indirectly using `app.addRecentDocument(path)`.
  * `custom` - Displays tasks or file links, `name` must be set by the app.
* `name` string (optional) - Must be set if `type` is `custom`, otherwise it should be
  omitted.
* `items` JumpListItem[] (optional) - Array of [`JumpListItem`](jump-list-item.md) objects if `type` is `tasks` or
  `custom`, otherwise it should be omitted.

**Note:** If a `JumpListCategory` object has neither the `type` nor the `name`
property set then its `type` is assumed to be `tasks`. If the `name` property
is set but the `type` property is omitted then the `type` is assumed to be
`custom`.

**Note:** The maximum length of a Jump List item's `description` property is
260 characters. Beyond this limit, the item will not be added to the Jump
List, nor will it be displayed.
```

----------------------------------------

TITLE: Canceling HTTP Transactions in Electron
DESCRIPTION: The abort() method cancels an ongoing HTTP transaction. If the request has already emitted the close event, the abort operation will have no effect. Otherwise, it will emit abort and close events. If there's an ongoing response object, it will emit the aborted event.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
request.abort()
```

----------------------------------------

TITLE: Reading RTF from Clipboard in Electron
DESCRIPTION: Demonstrates how to read Rich Text Format (RTF) content from the system clipboard using the clipboard.readRTF() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.writeRTF('{\\rtf1\\ansi{\\fonttbl\\f0\\fswiss Helvetica;}\\f0\\pard\nThis is some {\\b bold} text.\\par\n}')

const rtf = clipboard.readRTF()
console.log(rtf)
// {\\rtf1\\ansi{\\fonttbl\\f0\\fswiss Helvetica;}\\f0\\pard\nThis is some {\\b bold} text.\\par\n}
```

----------------------------------------

TITLE: Setting NODE_OPTIONS Environment Variable for Electron
DESCRIPTION: Example of setting Node.js options to disable warnings and set the maximum old space size to 2048 MB.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
export NODE_OPTIONS="--no-warnings --max-old-space-size=2048"
```

----------------------------------------

TITLE: Checking Tray Icon Destruction State Electron JavaScript
DESCRIPTION: This snippet checks if the tray icon is destroyed, returning a boolean value. It simply evaluates the existence of the tray icon. No additional parameters are required, and it has no dependencies.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_6

LANGUAGE: JavaScript
CODE:
```
tray.isDestroyed()
```

----------------------------------------

TITLE: Clearing Authentication Cache in Electron Session
DESCRIPTION: Clears the session's HTTP authentication cache. It returns a Promise that resolves when the cache has been cleared.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_22

LANGUAGE: JavaScript
CODE:
```
ses.clearAuthCache()
```

----------------------------------------

TITLE: Replace webview setZoomLevelLimits with setVisualZoomLevelLimits (JS)
DESCRIPTION: Replaces the deprecated `webview.setZoomLevelLimits()` method with `webview.setVisualZoomLevelLimits()`. This updates how zoom level constraints are applied to a specific webview tag.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_140

LANGUAGE: js
CODE:
```
// Removed
webview.setZoomLevelLimits(1, 2)
```

LANGUAGE: js
CODE:
```
// Replaced with
webview.setVisualZoomLevelLimits(1, 2)
```

----------------------------------------

TITLE: Deprecating systemPreferences App Level Appearance Property in Electron
DESCRIPTION: Illustrates the deprecation of `systemPreferences.appLevelAppearance` property and its replacement with the `nativeTheme.shouldUseDarkColors` property.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_34

LANGUAGE: javascript
CODE:
```
// Deprecated
systemPreferences.appLevelAppearance
```

LANGUAGE: javascript
CODE:
```
// Replace with
nativeTheme.shouldUseDarkColors
```

----------------------------------------

TITLE: Setting Represented File in Electron BrowserWindow on macOS
DESCRIPTION: This code demonstrates how to set a represented filename and document edited state for an Electron window on macOS. It creates a window, sets the current user's home directory as the represented file, marks it as edited, and handles basic application lifecycle events.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/represented-file.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron/main')
const os = require('node:os')

function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600
  })

  win.setRepresentedFilename(os.homedir())
  win.setDocumentEdited(true)

  win.loadFile('index.html')
}

app.whenReady().then(() => {
  createWindow()

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow()
    }
  })
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})
```

----------------------------------------

TITLE: Enabling Outgoing Network Connections in Electron Apps (XML)
DESCRIPTION: This XML snippet enables outgoing network connections for an Electron app, allowing it to connect to a server. It sets the 'com.apple.security.network.client' key to true in the app's entitlements.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_6

LANGUAGE: xml
CODE:
```
<key>com.apple.security.network.client</key>
<true/>
```

----------------------------------------

TITLE: Custom Protocol with Session Handling in Electron
DESCRIPTION: Demonstrates how to register a custom protocol with a specific session partition. Shows proper session handling for custom protocols in combination with BrowserWindow creation.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, net, protocol, session } = require('electron')
const path = require('node:path')
const url = require('url')

app.whenReady().then(() => {
  const partition = 'persist:example'
  const ses = session.fromPartition(partition)

  ses.protocol.handle('atom', (request) => {
    const filePath = request.url.slice('atom://'.length)
    return net.fetch(url.pathToFileURL(path.resolve(__dirname, filePath)).toString())
  })

  const mainWindow = new BrowserWindow({ webPreferences: { partition } })
})
```

----------------------------------------

TITLE: Sync protocol.unregisterProtocol (JS)
DESCRIPTION: Shows the new synchronous usage for `protocol.unregisterProtocol`, which no longer requires or accepts an optional callback function.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_90

LANGUAGE: javascript
CODE:
```
// Deprecated
protocol.unregisterProtocol(scheme, () => { /* ... */ })
```

LANGUAGE: javascript
CODE:
```
// Replace with
protocol.unregisterProtocol(scheme)
```

----------------------------------------

TITLE: Closing Tray Context Menu Electron JavaScript
DESCRIPTION: This snippet closes the currently open context menu for the tray icon. It requires that a context menu has been previously set using `tray.setContextMenu()`. No external dependencies are required.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
tray.closeContextMenu()
```

----------------------------------------

TITLE: Audio Control in Webview
DESCRIPTION: Methods to manage audio state in the webview, including muting and checking the current audio state.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
<webview>.setAudioMuted(muted)
```

LANGUAGE: javascript
CODE:
```
<webview>.isAudioMuted()
```

LANGUAGE: javascript
CODE:
```
<webview>.isCurrentlyAudible()
```

----------------------------------------

TITLE: Installing GitHub Publisher for Electron Forge
DESCRIPTION: Installs the GitHub Publisher plugin for Electron Forge as a dev dependency.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save-dev @electron-forge/publisher-github
```

----------------------------------------

TITLE: Adjusting Text Selection - JavaScript
DESCRIPTION: This example demonstrates how to adjust the current text selection in a BrowserWindow's web contents. It adjusts both the starting and ending points of the selection by specified amounts.  A positive amount moves the selection towards the end of the document, while a negative amount moves it towards the beginning.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_21

LANGUAGE: javascript
CODE:
```
const win = new BrowserWindow()

// Adjusts the beginning of the selection 1 letter forward,
// and the end of the selection 5 letters forward.
win.webContents.adjustSelection({ start: 1, end: 5 })

// Adjusts the beginning of the selection 2 letters forward,
// and the end of the selection 3 letters backward.
win.webContents.adjustSelection({ start: 2, end: -3 })
```

----------------------------------------

TITLE: Replace BrowserWindow titleBarStyle 'hidden-inset' string with 'hiddenInset' (JS)
DESCRIPTION: Replaces the deprecated string value `'hidden-inset'` for the `titleBarStyle` option in the BrowserWindow constructor with the corrected casing `'hiddenInset'`. This affects the appearance of the window frame.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_134

LANGUAGE: js
CODE:
```
// Deprecated
const optionsA = { titleBarStyle: 'hidden-inset' }
const windowA = new BrowserWindow(optionsA)
```

LANGUAGE: js
CODE:
```
// Replace with
const optionsB = { titleBarStyle: 'hiddenInset' }
const windowB = new BrowserWindow(optionsB)
```

----------------------------------------

TITLE: Getting Update Feed URL in Electron
DESCRIPTION: Returns the current update feed URL that was previously set with setFeedURL.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/auto-updater.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
### `autoUpdater.getFeedURL()`

Returns `string` - The current update feed URL.
```

----------------------------------------

TITLE: Test Suite Setup with Custom TestDriver
DESCRIPTION: Example of setting up a test suite using the custom TestDriver with the AVA testing framework. This shows how to initialize the test driver, wait for app readiness, and handle cleanup.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```
const test = require('ava')
const electronPath = require('electron')
const { TestDriver } = require('./testDriver')

const app = new TestDriver({
  path: electronPath,
  args: ['./app'],
  env: {
    NODE_ENV: 'test'
  }
})
test.before(async t => {
  await app.isReady
})
test.after.always('cleanup', async t => {
  await app.stop()
})
```

----------------------------------------

TITLE: Configuring Custom Dictionary Download URL in Electron
DESCRIPTION: Shows how to configure a custom URL for downloading spellchecker dictionary files instead of using the default Google CDN.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/spellchecker.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
myWindow.webContents.session.setSpellCheckerDictionaryDownloadURL('https://example.com/dictionaries/')
```

----------------------------------------

TITLE: Writing Bookmarks to Clipboard in Electron
DESCRIPTION: Demonstrates how to write a bookmark with title and URL to the clipboard on macOS and Windows using the clipboard.writeBookmark() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.writeBookmark('Electron Homepage', 'https://electronjs.org')
```

----------------------------------------

TITLE: Creating Click-Through Window in Electron
DESCRIPTION: This JavaScript snippet demonstrates how to create a click-through window in Electron by ignoring mouse events.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()
win.setIgnoreMouseEvents(true)
```

----------------------------------------

TITLE: Skipping Electron binary download with npm
DESCRIPTION: Command to install project dependencies without downloading the Electron binary. Useful in CI environments or when you only need to use mocked Electron functionality.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_7

LANGUAGE: sh
CODE:
```
ELECTRON_SKIP_BINARY_DOWNLOAD=1 npm install
```

----------------------------------------

TITLE: Replace Tray setHighlightMode boolean with string 'on' (JS)
DESCRIPTION: Replaces the deprecated boolean argument `true` for `tray.setHighlightMode()` with the string literal `'on'`. This changes how the highlight mode is activated.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_125

LANGUAGE: js
CODE:
```
// Deprecated
tray.setHighlightMode(true)
```

LANGUAGE: js
CODE:
```
// Replace with
tray.setHighlightMode('on')
```

----------------------------------------

TITLE: Implementing Reply Stream Pattern in Electron Renderer
DESCRIPTION: Demonstrates how to create a streaming request from the renderer process using MessageChannel. Sets up a communication channel that can receive multiple responses from a single request.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/message-ports.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
const makeStreamingRequest = (element, callback) => {
  // MessageChannels are lightweight--it's cheap to create a new one for each
  // request.
  const { port1, port2 } = new MessageChannel()

  // We send one end of the port to the main process ...
  ipcRenderer.postMessage(
    'give-me-a-stream',
    { element, count: 10 },
    [port2]
  )

  // ... and we hang on to the other end. The main process will send messages
  // to its end of the port, and close it when it's finished.
  port1.onmessage = (event) => {
    callback(event.data)
  }
  port1.onclose = () => {
    console.log('stream ended')
  }
}

makeStreamingRequest(42, (data) => {
  console.log('got response data:', data)
})
// We will see "got response data: 42" 10 times.
```

----------------------------------------

TITLE: Enabling Spellchecker in Electron BrowserWindow
DESCRIPTION: Shows how to enable the spellchecker in Electron 8 through webPreferences configuration when creating a new BrowserWindow instance.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/spellchecker.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const myWindow = new BrowserWindow({
  webPreferences: {
    spellcheck: true
  }
})
```

----------------------------------------

TITLE: Writing Binary Data to Clipboard in Electron
DESCRIPTION: Demonstrates how to write binary data to the clipboard as a Buffer using the experimental clipboard.writeBuffer() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

const buffer = Buffer.from('writeBuffer', 'utf8')
clipboard.writeBuffer('public/utf8-plain-text', buffer)
```

----------------------------------------

TITLE: Accessing Node.js REPL in Electron's Main Process
DESCRIPTION: Demonstrates how to start an interactive REPL session for Electron's main process using the --interactive CLI flag. This command assumes Electron is installed as a local project dependency.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/repl.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
./node_modules/.bin/electron --interactive
```

----------------------------------------

TITLE: Enabling Accessibility via Swift in Electron
DESCRIPTION: This Swift code snippet demonstrates how to enable accessibility features in an Electron application on macOS by setting the `AXManualAccessibility` attribute. It retrieves the process identifier of the Electron application and uses the Accessibility API to set the attribute to `true`.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/accessibility.md#_snippet_1

LANGUAGE: Swift
CODE:
```
import Cocoa
let name = CommandLine.arguments.count >= 2 ? CommandLine.arguments[1] : "Electron"
let pid = NSWorkspace.shared.runningApplications.first(where: {$0.localizedName == name})!.processIdentifier
let axApp = AXUIElementCreateApplication(pid)
let result = AXUIElementSetAttributeValue(axApp, "AXManualAccessibility" as CFString, true as CFTypeRef)
print("Setting 'AXManualAccessibility' \(error.rawValue == 0 ? \"succeeded\" : \"failed\")")
```

----------------------------------------

TITLE: Reading Binary Data from Clipboard in Electron
DESCRIPTION: Shows how to read binary data from the clipboard as a Buffer using the experimental clipboard.readBuffer() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

const buffer = Buffer.from('this is binary', 'utf8')
clipboard.writeBuffer('public/utf8-plain-text', buffer)

const ret = clipboard.readBuffer('public/utf8-plain-text')

console.log(buffer.equals(ret))
// true
```

----------------------------------------

TITLE: Displaying a ShareMenu as a Context Menu in Electron
DESCRIPTION: Displays the share menu as a context menu in a BrowserWindow with optional positioning and callback parameters.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/share-menu.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
#### `shareMenu.popup([options])`

* `options` PopupOptions (optional)
  * `browserWindow` [BrowserWindow](browser-window.md) (optional) - Default is the focused window.
  * `x` number (optional) - Default is the current mouse cursor position.
    Must be declared if `y` is declared.
  * `y` number (optional) - Default is the current mouse cursor position.
    Must be declared if `x` is declared.
  * `positioningItem` number (optional) _macOS_ - The index of the menu item to
    be positioned under the mouse cursor at the specified coordinates. Default
    is -1.
  * `callback` Function (optional) - Called when menu is closed.
```

----------------------------------------

TITLE: Proxy Bypass List Configuration in Electron
DESCRIPTION: Example showing how to configure proxy bypass lists programmatically using app.commandLine.appendSwitch. This allows specifying hosts that should bypass the configured proxy server.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
app.commandLine.appendSwitch('proxy-bypass-list', '<local>;*.google.com;*foo.com;1.2.3.4:5678')
```

----------------------------------------

TITLE: Loading a Chrome Extension in Electron
DESCRIPTION: Example of loading a React DevTools extension in Electron using the Extensions API. The code demonstrates how to load an unpacked extension from a directory path, with the allowFileAccess option enabled to permit access to file:// URLs.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/extensions-api.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, session } = require('electron')
const path = require('node:path')

app.whenReady().then(async () => {
  await session.defaultSession.extensions.loadExtension(
    path.join(__dirname, 'react-devtools'),
    // allowFileAccess is required to load the devtools extension on file:// URLs.
    { allowFileAccess: true }
  )
  // Note that in order to use the React DevTools extension, you'll need to
  // download and unzip a copy of the extension.
})
```

----------------------------------------

TITLE: Enabling ASAR Integrity in Electron Build
DESCRIPTION: This JavaScript code snippet demonstrates how to enable ASAR integrity validation during the build process by flipping the necessary fuses using Electron's fuses package.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { flipFuses, FuseVersion, FuseV1Options } = require('@electron/fuses')

flipFuses(
  // E.g. /a/b/Foo.app
  pathToPackagedApp,
  {
    version: FuseVersion.V1,
    [FuseV1Options.EnableEmbeddedAsarIntegrityValidation]: true,
    [FuseV1Options.OnlyLoadAppFromAsar]: true
  }
)
```

----------------------------------------

TITLE: Prompt Touch ID for Authentication JavaScript
DESCRIPTION: This snippet demonstrates how to use the `systemPreferences.promptTouchID` method to request Touch ID authentication from the user.  It requires the `electron` module. Upon successful authentication, a success message is logged. If authentication fails, an error message is logged.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const { systemPreferences } = require('electron')

systemPreferences.promptTouchID('To get consent for a Security-Gated Thing').then(success => {
  console.log('You have successfully authenticated with Touch ID!')
}).catch(err => {
  console.log(err)
})
```

----------------------------------------

TITLE: macOS Info.plist Configuration for ASAR Integrity
DESCRIPTION: This XML snippet shows how to configure the ASAR integrity settings in the Info.plist file for a macOS application, including the algorithm and hash values.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md#2025-04-21_snippet_2

LANGUAGE: xml
CODE:
```
<key>ElectronAsarIntegrity</key>
<dict>
  <key>Resources/app.asar</key>
  <dict>
    <key>algorithm</key>
    <string>SHA256</string>
    <key>hash</key>
    <string>9d1f61ea03c4bb62b4416387a521101b81151da0cfbe18c9f8c8b818c5cebfac</string>
  </dict>
</dict>
```

----------------------------------------

TITLE: Logging ARM64 Translation Status - Electron JavaScript
DESCRIPTION: Logs the status of whether the Electron app is running under ARM64 translation using the recommended property. This replaces the deprecated `runningUnderRosettaTranslation` property.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_58

LANGUAGE: javascript
CODE:
```
console.log(app.runningUnderARM64Translation)
```

----------------------------------------

TITLE: Temporary Directory Reference Example
DESCRIPTION: Shows platform-independent way to reference temporary directory using Node.js os module.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/coding-style.md#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
os.tmpdir()
```

----------------------------------------

TITLE: Adding Publish Command to npm Scripts
DESCRIPTION: Adds the Electron Forge publish command to the package.json scripts for easy execution.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "start": "electron-forge start",
    "package": "electron-forge package",
    "make": "electron-forge make",
    "publish": "electron-forge publish"
  }
}
```

----------------------------------------

TITLE: Custom Protocol Handling with Net Fetch
DESCRIPTION: Example showing how to handle custom protocols with net.fetch, including the ability to bypass custom protocol handlers for specific requests.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/net.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
protocol.handle('https', (req) => {
  if (req.url === 'https://my-app.com') {
    return new Response('<body>my app</body>')
  } else {
    return net.fetch(req, { bypassCustomProtocolHandlers: true })
  }
})
```

----------------------------------------

TITLE: Removing Command Line Switch in Electron (JavaScript)
DESCRIPTION: This example shows how to remove a specified command line switch using the CommandLine class in Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.commandLine.appendSwitch('remote-debugging-port', '8315')
console.log(app.commandLine.hasSwitch('remote-debugging-port')) // true

app.commandLine.removeSwitch('remote-debugging-port')
console.log(app.commandLine.hasSwitch('remote-debugging-port')) // false
```

----------------------------------------

TITLE: Accessing webContents.getZoomFactor Synchronously
DESCRIPTION: Similar to `getZoomLevel`, the `webContents.getZoomFactor` method is now synchronous. It no longer accepts a callback but directly returns the zoom factor number.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_108

LANGUAGE: javascript
CODE:
```
// Deprecated
webContents.getZoomFactor((factor) => {
  console.log(factor)
})
```

LANGUAGE: javascript
CODE:
```
// Replace with
const factor = webContents.getZoomFactor()
console.log(factor)
```

----------------------------------------

TITLE: Checking Navigation State - Electron NavigationHistory
DESCRIPTION: Methods to check if navigation actions are possible in the browser history.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
navigationHistory.canGoBack()
navigationHistory.canGoForward()
navigationHistory.canGoToOffset(offset)
```

----------------------------------------

TITLE: Using found-in-page Event for Search Functionality in JavaScript
DESCRIPTION: Demonstrates how to handle search results from the findInPage method in a WebView. The example shows initiating a search and handling the found-in-page event.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_21

LANGUAGE: javascript
CODE:
```
const webview = document.querySelector('webview')
webview.addEventListener('found-in-page', (e) => {
  webview.stopFindInPage('keepSelection')
})

const requestId = webview.findInPage('test')
console.log(requestId)
```

----------------------------------------

TITLE: Verifying WebView Options in Main Process
DESCRIPTION: Shows how to control WebView creation by validating webPreferences and URL parameters before attachment.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
app.on('web-contents-created', (event, contents) => {
  contents.on('will-attach-webview', (event, webPreferences, params) => {
    // Strip away preload scripts if unused or verify their location is legitimate
    delete webPreferences.preload

    // Disable Node.js integration
    webPreferences.nodeIntegration = false

    // Verify URL being loaded
    if (!params.src.startsWith('https://example.com/')) {
      event.preventDefault()
    }
  })
})
```

----------------------------------------

TITLE: Handling Bluetooth Device Selection in Electron
DESCRIPTION: This snippet demonstrates how to listen for the 'select-bluetooth-device' event on a WebContents object and handle Bluetooth device selection.  It prevents the default selection behavior, finds a device named 'test' in the device list, and calls the callback with either the device ID or an empty string to cancel the request.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const { app, BrowserWindow } = require('electron')

let win = null

app.whenReady().then(() => {
  win = new BrowserWindow({ width: 800, height: 600 })
  win.webContents.on('select-bluetooth-device', (event, deviceList, callback) => {
    event.preventDefault()
    const result = deviceList.find((device) => {
      return device.deviceName === 'test'
    })
    if (!result) {
      // The device wasn't found so we need to either wait longer (eg until the
      // device is turned on) or cancel the request by calling the callback
      // with an empty string.
      callback('')
    } else {
      callback(result.deviceId)
    }
  })
})
```

----------------------------------------

TITLE: Implementing C++ Node.js Addon Class
DESCRIPTION: Core C++ implementation of the Node.js addon class that bridges native Win32 functionality with JavaScript. Includes thread-safe function handling, event emission, and method definitions for GUI interactions.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_18

LANGUAGE: cpp
CODE:
```
#include <napi.h>
#include <string>
#include "cpp_code.h"

class CppAddon : public Napi::ObjectWrap<CppAddon> {
public:
    static Napi::Object Init(Napi::Env env, Napi::Object exports) {
        Napi::Function func = DefineClass(env, "CppWin32Addon", {
            InstanceMethod("helloWorld", &CppAddon::HelloWorld),
            InstanceMethod("helloGui", &CppAddon::HelloGui),
            InstanceMethod("on", &CppAddon::On)
        });

        Napi::FunctionReference* constructor = new Napi::FunctionReference();
        *constructor = Napi::Persistent(func);
        env.SetInstanceData(constructor);

        exports.Set("CppWin32Addon", func);
        return exports;
    }

    struct CallbackData {
        std::string eventType;
        std::string payload;
        CppAddon* addon;
    };

    CppAddon(const Napi::CallbackInfo& info)
        : Napi::ObjectWrap<CppAddon>(info)
        , env_(info.Env())
        , emitter(Napi::Persistent(Napi::Object::New(info.Env())))
        , callbacks(Napi::Persistent(Napi::Object::New(info.Env())))
        , tsfn_(nullptr) {

        napi_status status = napi_create_threadsafe_function(
            env_,
            nullptr,
            nullptr,
            Napi::String::New(env_, "CppCallback"),
            0,
            1,
            nullptr,
            nullptr,
            this,
            [](napi_env env, napi_value js_callback, void* context, void* data) {
                auto* callbackData = static_cast<CallbackData*>(data);
                if (!callbackData) return;

                Napi::Env napi_env(env);
                Napi::HandleScope scope(napi_env);

                auto addon = static_cast<CppAddon*>(context);
                if (!addon) {
                    delete callbackData;
                    return;
                }

                try {
                    auto callback = addon->callbacks.Value().Get(callbackData->eventType).As<Napi::Function>();
                    if (callback.IsFunction()) {
                        callback.Call(addon->emitter.Value(), {Napi::String::New(napi_env, callbackData->payload)});
                    }
                } catch (...) {}

                delete callbackData;
            },
            &tsfn_
        );

        if (status != napi_ok) {
            Napi::Error::New(env_, "Failed to create threadsafe function").ThrowAsJavaScriptException();
            return;
        }

        // Set up the callbacks here
        auto makeCallback = [this](const std::string& eventType) {
            return [this, eventType](const std::string& payload) {
                if (tsfn_ != nullptr) {
                    auto* data = new CallbackData{
                        eventType,
                        payload,
                        this
                    };
                    napi_call_threadsafe_function(tsfn_, data, napi_tsfn_blocking);
                }
            };
        };

        cpp_code::setTodoAddedCallback(makeCallback("todoAdded"));
    }

    ~CppAddon() {
        if (tsfn_ != nullptr) {
            napi_release_threadsafe_function(tsfn_, napi_tsfn_release);
            tsfn_ = nullptr;
        }
    }

private:
    Napi::Env env_;
    Napi::ObjectReference emitter;
    Napi::ObjectReference callbacks;
    napi_threadsafe_function tsfn_;

    Napi::Value HelloWorld(const Napi::CallbackInfo& info) {
        Napi::Env env = info.Env();

        if (info.Length() < 1 || !info[0].IsString()) {
            Napi::TypeError::New(env, "Expected string argument").ThrowAsJavaScriptException();
            return env.Null();
        }

        std::string input = info[0].As<Napi::String>();
        std::string result = cpp_code::hello_world(input);

        return Napi::String::New(env, result);
    }

    void HelloGui(const Napi::CallbackInfo& info) {
        cpp_code::hello_gui();
    }

    Napi::Value On(const Napi::CallbackInfo& info) {
        Napi::Env env = info.Env();

        if (info.Length() < 2 || !info[0].IsString() || !info[1].IsFunction()) {
            Napi::TypeError::New(env, "Expected (string, function) arguments").ThrowAsJavaScriptException();
            return env.Undefined();
        }

        callbacks.Value().Set(info[0].As<Napi::String>(), info[1].As<Napi::Function>());
        return env.Undefined();
    }
};

Napi::Object Init(Napi::Env env, Napi::Object exports) {
    return CppAddon::Init(env, exports);
}

NODE_API_MODULE(cpp_addon, Init)
```

----------------------------------------

TITLE: Insecure BrowserWindow Configuration with Experimental Features
DESCRIPTION: Example showing how not to configure a BrowserWindow by enabling experimental Chromium features, which may have unknown security implications.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
// Bad
const mainWindow = new BrowserWindow({
  webPreferences: {
    experimentalFeatures: true
  }
})
```

----------------------------------------

TITLE: Starting Message Queue in MessagePortMain
DESCRIPTION: Starts the sending of messages queued on the port. Messages will be queued until this method is called.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
port.start()
```

----------------------------------------

TITLE: Configuring RELEASES Response for Squirrel.Windows Update Server
DESCRIPTION: Example of the RELEASES artifact content that should be returned by the update server for Windows Electron applications. This response includes the hash, download URL, and file size of the latest update package.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_8

LANGUAGE: plaintext
CODE:
```
B0892F3C7AC91D72A6271FF36905FEF8FE993520 https://your-static.storage/your-app-1.2.3-full.nupkg 103298365
```

----------------------------------------

TITLE: Getting Receipt URL
DESCRIPTION: Method to retrieve the path to the purchase receipt.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
inAppPurchase.getReceiptURL()
```

----------------------------------------

TITLE: Finishing Transaction by Date
DESCRIPTION: Method to complete specific pending transactions by their ISO formatted date.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
inAppPurchase.finishTransactionByDate(date)
```

----------------------------------------

TITLE: Initializing TouchBarGroup Constructor in Electron
DESCRIPTION: Constructor signature for creating a new TouchBarGroup instance in the main process. Takes an options object with a TouchBar items array to display as a grouped unit in the macOS touch bar.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-group.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
new TouchBarGroup(options: {
  items: TouchBar
})
```

----------------------------------------

TITLE: Defining App Sandbox Entitlements in XML
DESCRIPTION: This XML snippet shows the structure of an entitlements.plist file for enabling App Sandbox in an Electron app. It includes the necessary keys for app sandboxing and application groups.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_3

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>com.apple.security.app-sandbox</key>
    <true/>
    <key>com.apple.security.application-groups</key>
    <array>
      <string>TEAM_ID.your.bundle.id</string>
    </array>
  </dict>
</plist>
```

----------------------------------------

TITLE: Starting and Stopping Tracing in Electron
DESCRIPTION: Code example demonstrating how to start recording tracing data, wait for a duration, and then stop recording. The example initializes tracing with all categories enabled, waits for 5 seconds, then stops the recording and logs the path where trace data is saved.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/content-tracing.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, contentTracing } = require('electron')

app.whenReady().then(() => {
  (async () => {
    await contentTracing.startRecording({
      included_categories: ['*']
    })
    console.log('Tracing started')
    await new Promise(resolve => setTimeout(resolve, 5000))
    const path = await contentTracing.stopRecording()
    console.log('Tracing data recorded to ' + path)
  })()
})
```

----------------------------------------

TITLE: Setting Diagnostic Directory in Electron Command Line
DESCRIPTION: The '--diagnostic-dir' flag specifies the directory where Node.js diagnostic output files will be written. By default, it uses the current working directory.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_6

LANGUAGE: markdown
CODE:
```
--diagnostic-dir=directory
```

----------------------------------------

TITLE: Installing electron-installer-snap Package
DESCRIPTION: Command to install the electron-installer-snap package as a development dependency using npm.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
npm install --save-dev electron-installer-snap
```

----------------------------------------

TITLE: Removing WebContents Capturer Count Manual Management in Electron
DESCRIPTION: Illustrates the removal of `webContents.incrementCapturerCount` and `webContents.decrementCapturerCount`, as the capture count is now automatically managed when using `webContents.capturePage`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_44

LANGUAGE: javascript
CODE:
```
const w = new BrowserWindow({ show: false })

// Removed in Electron 23
w.webContents.incrementCapturerCount()
w.capturePage().then(image => {
  console.log(image.toDataURL())
  w.webContents.decrementCapturerCount()
})
```

LANGUAGE: javascript
CODE:
```
// Replace with
w.capturePage().then(image => {
  console.log(image.toDataURL())
})
```

----------------------------------------

TITLE: Enabling Node.js Integration in Web Workers for Electron
DESCRIPTION: This code snippet demonstrates how to create a new BrowserWindow in Electron with Node.js integration enabled for Web Workers. It sets the 'nodeIntegrationInWorker' option to true in the webPreferences.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/multithreading.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const win = new BrowserWindow({
  webPreferences: {
    nodeIntegrationInWorker: true
  }
})
```

----------------------------------------

TITLE: Setting NODE_EXTRA_CA_CERTS Environment Variable for Electron
DESCRIPTION: Example of setting the path to additional certificate authority certificates for Node.js in Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
export NODE_EXTRA_CA_CERTS=/path/to/cert.pem 
```

----------------------------------------

TITLE: Replacing protocol.isProtocolHandled (JS)
DESCRIPTION: Replaces the deprecated asynchronous `protocol.isProtocolHandled` with the new synchronous methods `protocol.isProtocolRegistered` and `protocol.isProtocolIntercepted`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_92

LANGUAGE: javascript
CODE:
```
// Deprecated
protocol.isProtocolHandled(scheme).then(() => { /* ... */ })
```

LANGUAGE: javascript
CODE:
```
// Replace with
const isRegistered = protocol.isProtocolRegistered(scheme)
const isIntercepted = protocol.isProtocolIntercepted(scheme)
```

----------------------------------------

TITLE: Retrieving System Version in Electron
DESCRIPTION: Demonstrates how to get the host operating system version using process.getSystemVersion(). Returns actual OS version on macOS and differs from os.release().
SOURCE: https://github.com/electron/electron/blob/main/docs/api/process.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const version = process.getSystemVersion()
console.log(version)
// On macOS -> '10.13.6'
// On Windows -> '10.0.17763'
// On Linux -> '4.15.0-45-generic'
```

----------------------------------------

TITLE: Webview Event Handling Implementation
DESCRIPTION: JavaScript code demonstrating how to handle loading events in a webview element with loading indicator functionality.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<script>
  onload = () => {
    const webview = document.querySelector('webview')
    const indicator = document.querySelector('.indicator')

    const loadstart = () => {
      indicator.innerText = 'loading...'
    }

    const loadstop = () => {
      indicator.innerText = ''
    }

    webview.addEventListener('did-start-loading', loadstart)
    webview.addEventListener('did-stop-loading', loadstop)
  }
</script>
```

----------------------------------------

TITLE: Starting LLDB with Electron
DESCRIPTION: Command to launch LLDB debugger with a testing build of Electron application.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
$ lldb ./out/Testing/Electron.app
(lldb) target create "./out/Testing/Electron.app"
Current executable set to './out/Testing/Electron.app' (x86_64).
```

----------------------------------------

TITLE: Bouncing an App Icon in the macOS Dock with Electron
DESCRIPTION: Example showing how to bounce your application's icon in the macOS dock using Electron's API. The optional chaining operator ensures the code works even if the dock API is not available on the current platform.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/dock.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
app.dock?.bounce()
```

----------------------------------------

TITLE: Using ipcMainServiceWorker.on() to Listen for Messages
DESCRIPTION: Sets up a listener for incoming messages on a specified channel from service workers. When a message arrives, the listener function is called with the event object and any additional arguments.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
ipcMainServiceWorker.on(channel, listener)
```

----------------------------------------

TITLE: Replacing shell.moveItemToTrash (JS)
DESCRIPTION: Replaces the deprecated synchronous `shell.moveItemToTrash` method with the new asynchronous `shell.trashItem` for moving items to the trash.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_86

LANGUAGE: javascript
CODE:
```
shell.moveItemToTrash(path)
```

LANGUAGE: javascript
CODE:
```
shell.trashItem(path).then(/* ... */)
```

----------------------------------------

TITLE: Programmatic Usage of electron-installer-snap
DESCRIPTION: JavaScript example showing how to use electron-installer-snap programmatically in a build pipeline.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const snap = require('electron-installer-snap')

snap(options)
  .then(snapPath => console.log(`Created snap at ${snapPath}!`))
```

----------------------------------------

TITLE: Configuring WebView Tags in HTML
DESCRIPTION: Demonstrates proper usage of WebView tags by avoiding the allowpopups attribute for better security.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_15

LANGUAGE: html
CODE:
```
<!-- Bad -->
<webview allowpopups src="page.html"></webview>

<!-- Good -->
<webview src="page.html"></webview>
```

----------------------------------------

TITLE: Get Accent Color JavaScript
DESCRIPTION: This snippet retrieves the system's accent color in RGBA hexadecimal format using `systemPreferences.getAccentColor()` and then extracts the red, green, blue, and alpha components. This API is available on macOS 10.14 Mojave or newer.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const color = systemPreferences.getAccentColor() // \"aabbccdd\"
const red = color.substr(0, 2) // \"aa\"
const green = color.substr(2, 2) // \"bb\"
const blue = color.substr(4, 2) // \"cc\"
const alpha = color.substr(6, 2) // \"dd\"
```

----------------------------------------

TITLE: Adding a workspace to DevTools
DESCRIPTION: This code snippet demonstrates how to add a workspace to the DevTools using `webContents.addWorkSpace`. It creates a BrowserWindow and adds the current directory (__dirname) to the DevTools workspace when DevTools is opened.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()
win.webContents.on('devtools-opened', () => {
  win.webContents.addWorkSpace(__dirname)
})
```

----------------------------------------

TITLE: Configuring package.json for Native Addon Build
DESCRIPTION: Package.json configuration with build scripts for a native Node.js addon. Includes clean and build scripts, dependencies (bindings, node-addon-api), and devDependencies (node-gyp).
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
{
  "name": "my-native-addon",
  "version": "1.0.0",
  "description": "A native addon for Electron",
  "main": "js/index.js",
  "scripts": {
    "clean": "node -e \"require('fs').rmSync('build', { recursive: true, force: true })\"",
    "build": "node-gyp configure && node-gyp build"
  },
  "dependencies": {
    "bindings": "^1.5.0",
    "node-addon-api": "^8.3.0"
  },
  "devDependencies": {
    "node-gyp": "^11.1.0"
  }
}
```

----------------------------------------

TITLE: Setting Client Certificate Request Password Handler in Electron (JavaScript)
DESCRIPTION: Demonstrates how to set a handler for client certificate password requests in an Electron app. The handler prompts the user for a password when a client certificate needs to be unlocked for authentication.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_27

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

async function passwordPromptUI (text) {
  return new Promise((resolve, reject) => {
    // display UI to prompt user for password
    // ...
    // ...
    resolve('the password')
  })
}

app.setClientCertRequestPasswordHandler(async ({ hostname, tokenName, isRetry }) => {
  const text = `Please sign in to ${tokenName} to authenticate to ${hostname} with your certificate`
  const password = await passwordPromptUI(text)
  return password
})
```

----------------------------------------

TITLE: Writing RTF to Clipboard in Electron
DESCRIPTION: Shows how to write Rich Text Format (RTF) content to the system clipboard using the clipboard.writeRTF() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

const rtf = '{\\rtf1\\ansi{\\fonttbl\\f0\\fswiss Helvetica;}\\f0\\pard\nThis is some {\\b bold} text.\\par\n}'
clipboard.writeRTF(rtf)
```

----------------------------------------

TITLE: Frame Navigation Event Handling in Electron
DESCRIPTION: Example showing how to listen for frame navigation events and execute JavaScript in specific frames. Uses webFrameMain.fromId() to locate frames and modify their content.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame-main.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { BrowserWindow, webFrameMain } = require('electron')

const win = new BrowserWindow({ width: 800, height: 1500 })
win.loadURL('https://twitter.com')

win.webContents.on(
  'did-frame-navigate',
  (event, url, httpResponseCode, httpStatusText, isMainFrame, frameProcessId, frameRoutingId) => {
    const frame = webFrameMain.fromId(frameProcessId, frameRoutingId)
    if (frame) {
      const code = 'document.body.innerHTML = document.body.innerHTML.replaceAll("heck", "h*ck")'
      frame.executeJavaScript(code)
    }
  }
)
```

----------------------------------------

TITLE: Constructing TouchBarPopover Instance in Electron
DESCRIPTION: Creates a new TouchBarPopover instance with configurable options including label, icon, items, and close button visibility. Used to display interactive popovers in the MacOS Touch Bar.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-popover.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
new TouchBarPopover({
  label: 'Optional Button Text',
  icon: nativeImage,
  items: touchBarInstance,
  showCloseButton: true
})
```

----------------------------------------

TITLE: Reading HTML from Clipboard in Electron
DESCRIPTION: Demonstrates how to read HTML markup from the system clipboard using the clipboard.readHTML() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.writeHTML('<b>Hi</b>')
const html = clipboard.readHTML()

console.log(html)
// <meta charset='utf-8'><b>Hi</b>
```

----------------------------------------

TITLE: Handling IPC Messages in Guest Page with Electron
DESCRIPTION: Shows how to receive messages from the embedder page and send responses back using the Electron IPC renderer.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_24

LANGUAGE: javascript
CODE:
```
// In guest page.
const { ipcRenderer } = require('electron')
ipcRenderer.on('ping', () => {
  ipcRenderer.sendToHost('pong')
})
```

----------------------------------------

TITLE: History Management - Electron NavigationHistory
DESCRIPTION: Methods for managing navigation history entries including clearing, getting entries, and removing specific entries.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
navigationHistory.clear()
navigationHistory.getActiveIndex()
navigationHistory.getEntryAtIndex(index)
navigationHistory.length()
navigationHistory.removeEntryAtIndex(index)
navigationHistory.getAllEntries()
```

----------------------------------------

TITLE: NPM Environment Configuration for Electron
DESCRIPTION: Environment variable configuration for installing native modules directly with npm for Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
# Electron's version.
export npm_config_target=1.2.3
# The architecture of your machine
export npm_config_arch=x64
export npm_config_target_arch=x64
# Download headers for Electron.
export npm_config_disturl=https://electronjs.org/headers
# Tell node-pre-gyp that we are building for Electron.
export npm_config_runtime=electron
# Tell node-pre-gyp to build module from source code.
export npm_config_build_from_source=true
# Install all dependencies, and store cache to ~/.electron-gyp.
HOME=~/.electron-gyp npm install
```

----------------------------------------

TITLE: Restoring Navigation History in Electron
DESCRIPTION: This snippet shows how to implement an "undo close tab" feature by restoring navigation history from one window to another. It captures the history entries and active index from the first window and applies them to a second window.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const firstWindow = new BrowserWindow()

// Later, you want a second window to have the same history and navigation position
async function restore () {
  const entries = firstWindow.webContents.navigationHistory.getAllEntries()
  const index = firstWindow.webContents.navigationHistory.getActiveIndex()

  const secondWindow = new BrowserWindow()
  await secondWindow.webContents.navigationHistory.restore({ index, entries })
}
```

----------------------------------------

TITLE: Running electron-installer-snap CLI
DESCRIPTION: Command to run electron-installer-snap with the required source parameter pointing to the packaged Electron application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
npx electron-installer-snap --src=out/myappname-linux-x64
```

----------------------------------------

TITLE: Exposing Electron APIs Securely in Preload Scripts
DESCRIPTION: This snippet demonstrates the correct way to expose Electron APIs to web content using contextBridge. It shows bad practices of directly exposing IPC methods, and a good practice of wrapping the IPC call to limit exposure of the event object.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_21

LANGUAGE: javascript
CODE:
```
// Bad
contextBridge.exposeInMainWorld('electronAPI', {
  on: ipcRenderer.on
})

// Also bad
contextBridge.exposeInMainWorld('electronAPI', {
  onUpdateCounter: (callback) => ipcRenderer.on('update-counter', callback)
})

// Good
contextBridge.exposeInMainWorld('electronAPI', {
  onUpdateCounter: (callback) => ipcRenderer.on('update-counter', (_event, value) => callback(value))
})
```

----------------------------------------

TITLE: Restoring Completed Transactions
DESCRIPTION: Method to restore previously completed transactions for reinstalled apps or additional devices.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
inAppPurchase.restoreCompletedTransactions()
```

----------------------------------------

TITLE: Replacing BrowserWindow getTrafficLightPosition - JavaScript
DESCRIPTION: Demonstrates the removal of the `BrowserWindow.getTrafficLightPosition` method in Electron 28. Provides the replacement code using `BrowserWindow.getWindowButtonPosition`, noting that it returns `null` instead of `{ x: 0, y: 0 }` when there is no custom position.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_21

LANGUAGE: JavaScript
CODE:
```
// Removed in Electron 28
const pos = win.getTrafficLightPosition()
if (pos.x === 0 && pos.y === 0) {
  // No custom position.
}

// Replace with
const ret = win.getWindowButtonPosition()
if (ret === null) {
  // No custom position.
}
```

----------------------------------------

TITLE: Creating Node.js Addon Bridge for C++ in Electron
DESCRIPTION: Defines the addon code that bridges the C++ implementation with Node.js. It creates a class that wraps the C++ function and exposes it to JavaScript, handling type conversions and argument validation.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_8

LANGUAGE: cpp
CODE:
```
#include <napi.h>
#include <string>
#include "../include/cpp_code.h"

// Create a class that will be exposed to JavaScript
class MyAddon : public Napi::ObjectWrap<MyAddon> {
public:
    // This static method defines the class for JavaScript
    static Napi::Object Init(Napi::Env env, Napi::Object exports) {
        // Define the JavaScript class with method(s)
        Napi::Function func = DefineClass(env, "MyAddon", {
            InstanceMethod("helloWorld", &MyAddon::HelloWorld)
        });

        // Create a persistent reference to the constructor
        Napi::FunctionReference* constructor = new Napi::FunctionReference();
        *constructor = Napi::Persistent(func);
        env.SetInstanceData(constructor);

        // Set the constructor on the exports object
        exports.Set("MyAddon", func);
        return exports;
    }

    // Constructor
    MyAddon(const Napi::CallbackInfo& info)
        : Napi::ObjectWrap<MyAddon>(info) {}

private:
    // Method that will be exposed to JavaScript
    Napi::Value HelloWorld(const Napi::CallbackInfo& info) {
        Napi::Env env = info.Env();

        // Validate arguments (expecting one string)
        if (info.Length() < 1 || !info[0].IsString()) {
            Napi::TypeError::New(env, "Expected string argument").ThrowAsJavaScriptException();
            return env.Null();
        }

        // Convert JavaScript string to C++ string
        std::string input = info[0].As<Napi::String>();

        // Call our C++ function
        std::string result = cpp_code::hello_world(input);

        // Convert C++ string back to JavaScript string and return
        return Napi::String::New(env, result);
    }
};

// Initialize the addon
Napi::Object Init(Napi::Env env, Napi::Object exports) {
    return MyAddon::Init(env, exports);
}

// Register the initialization function
NODE_API_MODULE(my_addon, Init)
```

----------------------------------------

TITLE: Build Configuration for Windows-Specific Native Addon
DESCRIPTION: The binding.gyp configuration file for building a Windows-specific native addon, including compiler settings, linker options, library dependencies (comctl32.lib and shcore.lib), and Windows version definitions.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "targets": [
    {
      "target_name": "cpp_addon",
      "conditions": [
        ['OS=="win"', {
          "sources": [
            "src/cpp_addon.cc",
            "src/cpp_code.cc"
          ],
          "include_dirs": [
            "<!@(node -p \"require('node-addon-api').include\")",
            "include"
          ],
          "libraries": [
            "comctl32.lib",
            "shcore.lib"
          ],
          "dependencies": [
            "<!(node -p \"require('node-addon-api').gyp\")"
          ],
          "msvs_settings": {
            "VCCLCompilerTool": {
              "ExceptionHandling": 1,
              "DebugInformationFormat": "OldStyle",
              "AdditionalOptions": [
                "/FS"
              ]
            },
            "VCLinkerTool": {
              "GenerateDebugInformation": "true"
            }
          },
          "defines": [
            "NODE_ADDON_API_CPP_EXCEPTIONS",
            "WINVER=0x0A00",
            "_WIN32_WINNT=0x0A00"
          ]
        }]
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Implementing Todo Storage and JavaScript Callback Notification
DESCRIPTION: Defines a global vector to store Todo items and provides a function to notify JavaScript callbacks when todos are added or modified, ensuring proper message processing.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_10

LANGUAGE: cpp
CODE:
```
  // Global vector to store todos
  static std::vector<TodoItem> g_todos;

  void NotifyCallback(const TodoCallback &callback, const std::string &json)
  {
    if (callback)
    {
      callback(json);
      // Process pending messages
      MSG msg;
      while (PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE))
      {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
      }
    }
  }
```

----------------------------------------

TITLE: Objective-C++ Namespace Functions Implementation
DESCRIPTION: This code snippet implements functions within the `objc_code` namespace, providing functionality to display a native GUI, set a callback for todo additions, and return a greeting string.  It leverages Grand Central Dispatch (GCD) to ensure UI operations are executed on the main thread. It takes a string input for hello_world and a callback function pointer.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_12

LANGUAGE: objective-c++
CODE:
```
namespace objc_code {

std::string hello_world(const std::string& input) {
    return "Hello from Objective-C! You said: " + input;
}

void setTodoAddedCallback(TodoCallback callback) {
    g_todoAddedCallback = callback;
}

void hello_gui() {
    // Create and run the GUI on the main thread
    dispatch_async(dispatch_get_main_queue(), ^{
        // Create our window controller
        TodoWindowController *windowController = [[TodoWindowController alloc] init];

        // Show the window
        [windowController showWindow:nil];

        // Keep a reference to prevent it from being deallocated
        // Note: in a real app, you'd store this reference more carefully
        static TodoWindowController *staticController = nil;
        staticController = windowController;
    });
}

} // namespace objc_code
```

----------------------------------------

TITLE: Initiating URL Download in Electron Session
DESCRIPTION: Initiates a download of a resource at the specified URL. It generates a DownloadItem that can be accessed with the 'will-download' event. Optional HTTP request headers can be specified.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_20

LANGUAGE: JavaScript
CODE:
```
ses.downloadURL(url[, options])
```

----------------------------------------

TITLE: Get WebContents Type - Electron
DESCRIPTION: This method returns a string indicating the type of the WebContents. The possible values are 'backgroundPage', 'window', 'browserView', 'remote', 'webview', or 'offscreen'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_34

LANGUAGE: javascript
CODE:
```
contents.getType()
```

----------------------------------------

TITLE: Getting Crashes Directory with Deprecated crashReporter - Electron JavaScript
DESCRIPTION: Shows retrieving the crashes directory using the deprecated `crashReporter.getCrashesDirectory()` method. This method has been removed and replaced by `app.getPath('crashDumps')`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_82

LANGUAGE: javascript
CODE:
```
// Removed in Electron 12
crashReporter.getCrashesDirectory()
```

----------------------------------------

TITLE: Handling Custom Protocols with File Paths (Deprecated) - Electron JavaScript
DESCRIPTION: Shows the deprecated method for handling custom protocol URLs that map to Windows file paths using `protocol.registerFileProtocol`. This approach no longer works correctly due to upstream Chromium changes.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
// No longer works
protocol.registerFileProtocol('other', () => {
  callback({ filePath: '/path/to/my/file' })
})

const mainWindow = new BrowserWindow()
mainWindow.loadURL('data:text/html,<script src="loaded-from-dataurl.js"><\/script>', { baseURLForDataURL: 'other://C:\\myapp' })
mainWindow.loadURL('other://C:\\myapp\\index.html')
```

----------------------------------------

TITLE: Setting Custom Entitlements for Electron App Files in JavaScript
DESCRIPTION: This code snippet demonstrates how to set custom entitlements for different files in an Electron app during the signing process using @electron/osx-sign. It includes a function to determine the entitlements file based on the file path.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { signAsync } = require('@electron/osx-sign')

function getEntitlementsForFile (filePath) {
  if (filePath.startsWith('my-path-1')) {
    return './my-path-1.plist'
  } else {
    return './alternate.plist'
  }
}

signAsync({
  optionsForFile: (filePath) => ({
    // Ensure you return the right entitlements path here based on the file being signed.
    entitlements: getEntitlementsForFile(filePath)
  })
})
```

----------------------------------------

TITLE: Running Example in Electron Fiddle
DESCRIPTION: This code snippet demonstrates how to include a Fiddle example in the documentation. It uses a custom 'fiddle' language identifier to reference an external Fiddle file.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/examples.md#2025-04-21_snippet_0

LANGUAGE: fiddle
CODE:
```
docs/fiddles/quick-start
```

----------------------------------------

TITLE: Removing a Handler with ipcMainServiceWorker.removeHandler()
DESCRIPTION: Removes any handler for the specified channel if one is present. This is useful for cleaning up handlers that are no longer needed.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
ipcMainServiceWorker.removeHandler(channel)
```

----------------------------------------

TITLE: Implementing -electron-corner-smoothing CSS Rule in Electron
DESCRIPTION: Example CSS that applies corner smoothing to a blue box with rounded corners. The smoothing percentage is controlled by a CSS variable.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/corner-smoothing-css.md#2025-04-21_snippet_0

LANGUAGE: css
CODE:
```
.box {
  width: 128px;
  height: 128px;
  background-color: cornflowerblue;
  border-radius: 24px;
  -electron-corner-smoothing: var(--percent);  /* Column header in table below. */
}
```

----------------------------------------

TITLE: Defining Referrer Object Properties in Markdown
DESCRIPTION: This snippet defines the properties of the Referrer object in Electron. It specifies the 'url' property as a string representing the HTTP Referrer URL, and the 'policy' property as a string with possible values and their meanings.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/referrer.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* `url` string - HTTP Referrer URL.
* `policy` string - Can be `default`, `unsafe-url`,
  `no-referrer-when-downgrade`, `no-referrer`, `origin`,
  `strict-origin-when-cross-origin`, `same-origin` or `strict-origin`.
  See the [Referrer-Policy spec][1] for more details on the
  meaning of these values.
```

----------------------------------------

TITLE: Querying GPU Information in Electron
DESCRIPTION: Example of basic GPU information response object structure showing device details, machine model and auxiliary attributes.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_23

LANGUAGE: javascript
CODE:
```
{
  auxAttributes:
   {
     amdSwitchable: true,
     canSupportThreadedTextureMailbox: false,
     directComposition: false,
     directRendering: true,
     glResetNotificationStrategy: 0,
     inProcessGpu: true,
     initializationTime: 0,
     jpegDecodeAcceleratorSupported: false,
     optimus: false,
     passthroughCmdDecoder: false,
     sandboxed: false,
     softwareRendering: false,
     supportsOverlays: false,
     videoDecodeAcceleratorFlags: 0
   },
  gpuDevice:
   [{ active: true, deviceId: 26657, vendorId: 4098 },
     { active: false, deviceId: 3366, vendorId: 32902 }],
  machineModelName: 'MacBookPro',
  machineModelVersion: '11.5'
}
```

----------------------------------------

TITLE: Complete Objective-C++ Addon Implementation
DESCRIPTION: This snippet showcases the complete implementation of the Objective-C++ addon, including the class definition, initialization, method bindings, and callback handling. It establishes a thread-safe communication mechanism between Objective-C and JavaScript using Napi and threadsafe functions.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_18

LANGUAGE: objectivec
CODE:
```
#include <napi.h>
#include <string>
#include "../include/objc_code.h"

class ObjcAddon : public Napi::ObjectWrap<ObjcAddon> {
public:
    static Napi::Object Init(Napi::Env env, Napi::Object exports) {
        Napi::Function func = DefineClass(env, "ObjcMacosAddon", {
            InstanceMethod("helloWorld", &ObjcAddon::HelloWorld),
            InstanceMethod("helloGui", &ObjcAddon::HelloGui),
            InstanceMethod("on", &ObjcAddon::On)
        });

        Napi::FunctionReference* constructor = new Napi::FunctionReference();
        *constructor = Napi::Persistent(func);
        env.SetInstanceData(constructor);

        exports.Set("ObjcMacosAddon", func);
        return exports;
    }

    struct CallbackData {
        std::string eventType;
        std::string payload;
        ObjcAddon* addon;
    };

    ObjcAddon(const Napi::CallbackInfo& info)
        : Napi::ObjectWrap<ObjcAddon>(info)
        , env_(info.Env())
        , emitter(Napi::Persistent(Napi::Object::New(info.Env())))
        , callbacks(Napi::Persistent(Napi::Object::New(info.Env())))
        , tsfn_(nullptr) {

        napi_status status = napi_create_threadsafe_function(
            env_,
            nullptr,
            nullptr,
            Napi::String::New(env_, "ObjcCallback"),
            0,
            1,
            nullptr,
            nullptr,
            this,
            [](napi_env env, napi_value js_callback, void* context, void* data) {
                auto* callbackData = static_cast<CallbackData*>(data);
                if (!callbackData) return;

                Napi::Env napi_env(env);
                Napi::HandleScope scope(napi_env);

                auto addon = static_cast<ObjcAddon*>(context);
                if (!addon) {
                    delete callbackData;
                    return;
                }

                try {
                    auto callback = addon->callbacks.Value().Get(callbackData->eventType).As<Napi::Function>();
                    if (callback.IsFunction()) {
                        callback.Call(addon->emitter.Value(), {Napi::String::New(napi_env, callbackData->payload)});
                    }
                } catch (...) {}

                delete callbackData;
            },
            &tsfn_
        );

        if (status != napi_ok) {
            Napi::Error::New(env_, "Failed to create threadsafe function").ThrowAsJavaScriptException();
            return;
        }

        // Set up the callbacks
        auto makeCallback = [this](const std::string& eventType) {
            return [this, eventType](const std::string& payload) {
                if (tsfn_ != nullptr) {
                    auto* data = new CallbackData{
                        eventType,
                        payload,
                        this
                    };
                    napi_call_threadsafe_function(tsfn_, data, napi_tsfn_blocking);
                }
            };
        };

        objc_code::setTodoAddedCallback(makeCallback("todoAdded"));
    }

    ~ObjcAddon() {
        if (tsfn_ != nullptr) {
            napi_release_threadsafe_function(tsfn_, napi_tsfn_release);
            tsfn_ = nullptr;
        }
    }

private:
    Napi::Env env_;
    Napi::ObjectReference emitter;
    Napi::ObjectReference callbacks;
    napi_threadsafe_function tsfn_;

    Napi::Value HelloWorld(const Napi::CallbackInfo& info) {
        Napi::Env env = info.Env();

        if (info.Length() < 1 || !info[0].IsString()) {
            Napi::TypeError::New(env, "Expected string argument").ThrowAsJavaScriptException();
            return env.Null();
        }

        std::string input = info[0].As<Napi::String>();
        std::string result = objc_code::hello_world(input);

        return Napi::String::New(env, result);
    }

    void HelloGui(const Napi::CallbackInfo& info) {
        objc_code::hello_gui();
    }

    Napi::Value On(const Napi::CallbackInfo& info) {
        Napi::Env env = info.Env();

        if (info.Length() < 2 || !info[0].IsString() || !info[1].IsFunction()) {
            Napi::TypeError::New(env, "Expected (string, function) arguments").ThrowAsJavaScriptException();
            return env.Undefined();
        }

        callbacks.Value().Set(info[0].As<Napi::String>(), info[1].As<Napi::Function>());
        return env.Undefined();
    }
};

Napi::Object Init(Napi::Env env, Napi::Object exports) {
    return ObjcAddon::Init(env, exports);
}

NODE_API_MODULE(objc_addon, Init)
```

----------------------------------------

TITLE: Replacing crashReporter companyName Arg (JS)
DESCRIPTION: Replaces the deprecated `companyName` argument in `crashReporter.start` with the recommended approach of including it as `_companyName` within the `globalExtra` object.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_87

LANGUAGE: javascript
CODE:
```
crashReporter.start({ companyName: 'Umbrella Corporation' })
```

LANGUAGE: javascript
CODE:
```
crashReporter.start({ globalExtra: { _companyName: 'Umbrella Corporation' } })
```

----------------------------------------

TITLE: Defining IpcMainEvent Object Properties in Markdown
DESCRIPTION: This snippet lists the properties of the IpcMainEvent object, including their types and descriptions. It covers important attributes like processId, frameId, sender, and methods like reply for handling IPC communication.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/ipc-main-event.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# IpcMainEvent Object extends `Event`

* `type` String - Possible values include `frame`
* `processId` Integer - The internal ID of the renderer process that sent this message
* `frameId` Integer - The ID of the renderer frame that sent this message
* `returnValue` any - Set this to the value to be returned in a synchronous message
* `sender` [WebContents](../web-contents.md) - Returns the `webContents` that sent the message
* `senderFrame` [WebFrameMain](../web-frame-main.md) | null _Readonly_ - The frame that sent this message. May be `null` if accessed after the frame has either navigated or been destroyed.
* `ports` [MessagePortMain](../message-port-main.md)[] - A list of MessagePorts that were transferred with this message
* `reply` Function - A function that will send an IPC message to the renderer frame that sent the original message that you are currently handling.  You should use this method to "reply" to the sent message in order to guarantee the reply will go to the correct process and frame.
  * `channel` string
  * `...args` any[]
```

----------------------------------------

TITLE: Webview State and User Agent Management
DESCRIPTION: Methods to check the webview's crashed state and manage the user agent string used for requests.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
<webview>.isCrashed()
```

LANGUAGE: javascript
CODE:
```
<webview>.setUserAgent(userAgent)
```

LANGUAGE: javascript
CODE:
```
<webview>.getUserAgent()
```

----------------------------------------

TITLE: Removing All Listeners with ipcMainServiceWorker.removeAllListeners()
DESCRIPTION: Removes all listeners for a specified channel. If no channel is provided, it can remove listeners from all channels.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
ipcMainServiceWorker.removeAllListeners([channel])
```

----------------------------------------

TITLE: Programmatic Usage of Electron in Node.js
DESCRIPTION: JavaScript code demonstrating how to programmatically spawn Electron from Node.js scripts by requiring the electron module and using child_process.
SOURCE: https://github.com/electron/electron/blob/main/README.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const electron = require('electron')
const proc = require('node:child_process')

// will print something similar to /Users/maf/.../Electron
console.log(electron)

// spawn Electron
const child = proc.spawn(electron)
```

----------------------------------------

TITLE: Build Configuration (binding.gyp)
DESCRIPTION: This JSON configuration file defines the build settings for the native addon. It specifies the target name, source files, include directories, libraries, dependencies, Xcode settings, and defines. It includes macOS-specific settings like compiler flags for Objective-C/C++ support and framework dependencies on Foundation and AppKit. The condition ensures compilation only on macOS.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "targets": [
    {
      "target_name": "objc_addon",
      "conditions": [
        ['OS=="mac"', {
          "sources": [
            "src/objc_addon.mm",
            "src/objc_code.mm"
          ],
          "include_dirs": [
            "<!@(node -p \"require('node-addon-api').include\")",
            "include"
          ],
          "libraries": [
            "-framework Foundation",
            "-framework AppKit"
          ],
          "dependencies": [
            "<!(node -p \"require('node-addon-api').gyp\")"
          ],
          "xcode_settings": {
            "GCC_ENABLE_CPP_EXCEPTIONS": "YES",
            "CLANG_CXX_LIBRARY": "libc++",
            "MACOSX_DEPLOYMENT_TARGET": "11.0",
            "CLANG_ENABLE_OBJC_ARC": "YES",
            "OTHER_CFLAGS": [
              "-ObjC++",
              "-std=c++17"
            ]
          },
          "defines": [
            "NODE_ADDON_API_CPP_EXCEPTIONS"
          ]
        }]
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Replace clipboard readHtml with readHTML (JS)
DESCRIPTION: Replaces the deprecated `clipboard.readHtml()` method with the updated `clipboard.readHTML()`. The capitalization of the 'HTML' part has been standardized.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_118

LANGUAGE: js
CODE:
```
// Deprecated
clipboard.readHtml()
```

LANGUAGE: js
CODE:
```
// Replace with
clipboard.readHTML()
```

----------------------------------------

TITLE: Replace nativeImage createFromBuffer scale parameter with options object (JS)
DESCRIPTION: Replaces the deprecated method signature for `nativeImage.createFromBuffer()` which accepted `buffer` and `scaleFactor` as separate arguments. The new signature requires an options object with a `scaleFactor` property.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_121

LANGUAGE: js
CODE:
```
// Deprecated
nativeImage.createFromBuffer(buffer, 1.0)
```

LANGUAGE: js
CODE:
```
// Replace with
nativeImage.createFromBuffer(buffer, {
  scaleFactor: 1.0
})
```

----------------------------------------

TITLE: Replace clipboard readRtf with readRTF (JS)
DESCRIPTION: Replaces the deprecated `clipboard.readRtf()` method with the updated `clipboard.readRTF()`. The capitalization of the 'RTF' part has been standardized.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_116

LANGUAGE: js
CODE:
```
// Deprecated
clipboard.readRtf()
```

LANGUAGE: js
CODE:
```
// Replace with
clipboard.readRTF()
```

----------------------------------------

TITLE: Replace session setCertificateVerifyProc signature (JS)
DESCRIPTION: Replaces the deprecated signature of `ses.setCertificateVerifyProc()`. The old signature passed `hostname` and `certificate` directly, while the new one passes a single `request` object.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_124

LANGUAGE: js
CODE:
```
// Deprecated
ses.setCertificateVerifyProc((hostname, certificate, callback) => {
  callback(true)
})
```

LANGUAGE: js
CODE:
```
// Replace with
ses.setCertificateVerifyProc((request, callback) => {
  callback(0)
})
```

----------------------------------------

TITLE: Creating a Basic Package for Native Addon
DESCRIPTION: Shell commands to create a new directory, initialize a Node.js package with npm, and install the required dependencies (node-addon-api and bindings) for building a native addon.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
mkdir my-native-addon
cd my-native-addon
npm init -y
```

----------------------------------------

TITLE: Checking Architecture in JavaScript for Electron on Windows
DESCRIPTION: This code snippet demonstrates how to check the processor architecture in an Electron app running on Windows. It shows a common pattern that needs to be updated to properly handle ARM64 architecture.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-arm.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
if (process.arch === 'x64') {
  // Do 64-bit thing...
} else {
  // Do 32-bit thing...
}
```

----------------------------------------

TITLE: Configuring Desktop Actions in Linux .desktop File
DESCRIPTION: This snippet demonstrates how to add custom shortcut menu entries to a Linux .desktop file. It defines three actions (PlayPause, Next, Previous) for an audio player, specifying the action name, executable command, and display environment.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/linux-desktop-actions.md#2025-04-21_snippet_0

LANGUAGE: plaintext
CODE:
```
Actions=PlayPause;Next;Previous

[Desktop Action PlayPause]
Name=Play-Pause
Exec=audacious -t
OnlyShowIn=Unity;

[Desktop Action Next]
Name=Next
Exec=audacious -f
OnlyShowIn=Unity;

[Desktop Action Previous]
Name=Previous
Exec=audacious -r
OnlyShowIn=Unity;
```

----------------------------------------

TITLE: Electron Main Process RPC Handler Implementation
DESCRIPTION: Implementation of an RPC handler in the Electron main process to respond to test driver requests. This code sets up method dispatching and error handling for communication with the test suite.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_18

LANGUAGE: javascript
CODE:
```
const METHODS = {
  isReady () {
    // do any setup needed
    return true
  }
  // define your RPC-able methods here
}

const onMessage = async ({ msgId, cmd, args }) => {
  let method = METHODS[cmd]
  if (!method) method = () => new Error('Invalid method: ' + cmd)
  try {
    const resolve = await method(...args)
    process.send({ msgId, resolve })
  } catch (err) {
    const reject = {
      message: err.message,
      stack: err.stack,
      name: err.name
    }
    process.send({ msgId, reject })
  }
}

if (process.env.APP_TEST_DRIVER) {
  process.on('message', onMessage)
}
```

----------------------------------------

TITLE: Setting Application Name in Electron
DESCRIPTION: The app.setName method overrides the current application's name used internally by Electron, without affecting the name used by the operating system.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
app.setName(name)
```

----------------------------------------

TITLE: Replace nativeImage toPng with toPNG (JS)
DESCRIPTION: Replaces the deprecated `nativeImage.toPng()` method with the updated `nativeImage.toPNG()`. The capitalization of 'PNG' has been standardized.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_136

LANGUAGE: js
CODE:
```
// Removed
nativeImage.toPng()
```

LANGUAGE: js
CODE:
```
// Replaced with
nativeImage.toPNG()
```

----------------------------------------

TITLE: Defining Task Object Properties in Markdown
DESCRIPTION: This snippet describes the properties of a Task object in Electron. It includes fields for program execution, command line arguments, display information, icon settings, and working directory.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/task.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Task Object

* `program` string - Path of the program to execute, usually you should
  specify `process.execPath` which opens the current program.
* `arguments` string - The command line arguments when `program` is
  executed.
* `title` string - The string to be displayed in a JumpList.
* `description` string - Description of this task.
* `iconPath` string - The absolute path to an icon to be displayed in a
  JumpList, which can be an arbitrary resource file that contains an icon. You
  can usually specify `process.execPath` to show the icon of the program.
* `iconIndex` number - The icon index in the icon file. If an icon file
  consists of two or more icons, set this value to identify the icon. If an
  icon file consists of one icon, this value is 0.
* `workingDirectory` string (optional) - The working directory. Default is empty.
```

----------------------------------------

TITLE: C++ Header Interface for Win32 Native Addon
DESCRIPTION: The C++ header file defining the interface between JavaScript and native code, including functions for basic string manipulation, GUI creation, and callback mechanisms for Todo operations.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_5

LANGUAGE: cpp
CODE:
```
#pragma once
#include <string>
#include <functional>

namespace cpp_code {

std::string hello_world(const std::string& input);
void hello_gui();

// Callback function types
using TodoCallback = std::function<void(const std::string&)>;

// Callback setters
void setTodoAddedCallback(TodoCallback callback);

} // namespace cpp_code
```

----------------------------------------

TITLE: Manual Module Building with node-gyp
DESCRIPTION: Command to manually rebuild a native module for Electron using node-gyp with specific target version and architecture.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
cd /path-to-module/
HOME=~/.electron-gyp node-gyp rebuild --target=1.2.3 --arch=x64 --dist-url=https://electronjs.org/headers
```

----------------------------------------

TITLE: Listing Files in ASAR Archive using Shell
DESCRIPTION: This shell command lists all files within the specified ASAR archive, showcasing its contents.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_0

LANGUAGE: Shell
CODE:
```
$ asar list /path/to/example.asar
/app.js
/file.txt
/dir/module.js
/static/index.html
/static/main.css
/static/jquery.min.js
```

----------------------------------------

TITLE: Setting DevTools WebContents with webview
DESCRIPTION: This code shows how to use a `<webview>` tag to display DevTools. It involves setting up two `<webview>` elements, one for the browser content and another for DevTools. The `ipcRenderer` is used to communicate with the main process to associate the DevTools with the browser content.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_26

LANGUAGE: HTML
CODE:
```
<html>
<head>
  <style type="text/css">
    * { margin: 0; }
    #browser { height: 70%; }
    #devtools { height: 30%; }
  </style>
</head>
<body>
  <webview id="browser" src="https://github.com"></webview>
  <webview id="devtools" src="about:blank"></webview>
  <script>
    const { ipcRenderer } = require('electron')
    const emittedOnce = (element, eventName) => new Promise(resolve => {
      element.addEventListener(eventName, event => resolve(event), { once: true })
    })
    const browserView = document.getElementById('browser')
    const devtoolsView = document.getElementById('devtools')
    const browserReady = emittedOnce(browserView, 'dom-ready')
    const devtoolsReady = emittedOnce(devtoolsView, 'dom-ready')
    Promise.all([browserReady, devtoolsReady]).then(() => {
      const targetId = browserView.getWebContentsId()
      const devtoolsId = devtoolsView.getWebContentsId()
      ipcRenderer.send('open-devtools', targetId, devtoolsId)
    })
  </script>
</body>
</html>
```

----------------------------------------

TITLE: Extension Object Properties in Electron
DESCRIPTION: The properties available on the Extension object in Electron, which represents a Chrome extension. It includes identifiers, path information, metadata from the manifest, and the chrome-extension URL.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/extension.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* `id` string
* `manifest` any - Copy of the [extension's manifest data](https://developer.chrome.com/extensions/manifest).
* `name` string
* `path` string - The extension's file path.
* `version` string
* `url` string - The extension's `chrome-extension://` URL.
```

----------------------------------------

TITLE: Loading Unpacked Extensions in Electron
DESCRIPTION: Demonstrates how to load an unpacked Chrome extension in Electron using the session API. This code snippet shows the process of loading an extension and handling the returned promise with the extension ID.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/extensions.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')

session.defaultSession.loadExtension('path/to/unpacked/extension').then(({ id }) => {
  // ...
})
```

----------------------------------------

TITLE: Handling USB Device Selection and Permissions in Electron
DESCRIPTION: This snippet demonstrates how to handle USB device selection and permissions in an Electron application. It sets up permission handlers for USB devices and manages the selection process when a USB device needs to be chosen.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

let win = null

app.whenReady().then(() => {
  win = new BrowserWindow()

  win.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {
    if (permission === 'usb') {
      // Add logic here to determine if permission should be given to allow USB selection
      return true
    }
    return false
  })

  // Optionally, retrieve previously persisted devices from a persistent store (fetchGrantedDevices needs to be implemented by developer to fetch persisted permissions)
  const grantedDevices = fetchGrantedDevices()

  win.webContents.session.setDevicePermissionHandler((details) => {
    if (new URL(details.origin).hostname === 'some-host' && details.deviceType === 'usb') {
      if (details.device.vendorId === 123 && details.device.productId === 345) {
        // Always allow this type of device (this allows skipping the call to `navigator.usb.requestDevice` first)
        return true
      }

      // Search through the list of devices that have previously been granted permission
      return grantedDevices.some((grantedDevice) => {
        return grantedDevice.vendorId === details.device.vendorId &&
              grantedDevice.productId === details.device.productId &&
              grantedDevice.serialNumber && grantedDevice.serialNumber === details.device.serialNumber
      })
    }
    return false
  })

  win.webContents.session.on('select-usb-device', (event, details, callback) => {
    event.preventDefault()
    const selectedDevice = details.deviceList.find((device) => {
      return device.vendorId === 9025 && device.productId === 67
    })
    if (selectedDevice) {
      // Optionally, add this to the persisted devices (updateGrantedDevices needs to be implemented by developer to persist permissions)
      grantedDevices.push(selectedDevice)
      updateGrantedDevices(grantedDevices)
    }
    callback(selectedDevice?.deviceId)
  })
})
```

----------------------------------------

TITLE: Complete Objective-C File Snippet (objc_code.mm)
DESCRIPTION: This is a complete code snippet showing the basic file structure and implementation for the TodoWindowController in Objective-C. It imports necessary frameworks, declares the controller interface, and initializes it by setting up the window and creating the todos array.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_6

LANGUAGE: objc
CODE:
```
#import <Foundation/Foundation.h>
#import <AppKit/AppKit.h>
#import <string>
#import <functional>
#import "../include/objc_code.h"

using TodoCallback = std::function<void(const std::string&)>;

static TodoCallback g_todoAddedCallback;

// Forward declaration of our custom classes
@interface TodoWindowController : NSWindowController
@property (strong) NSTextField *textField;
@property (strong) NSDatePicker *datePicker;
@property (strong) NSButton *addButton;
@property (strong) NSTableView *tableView;
@property (strong) NSMutableArray<NSDictionary*> *todos;
@end

// Controller for the main window
@implementation TodoWindowController

- (instancetype)init {
    self = [super initWithWindowNibName:@""];
    if (self) {
        // Create an array to store todos
        _todos = [NSMutableArray array];
        [self setupWindow];
    }
    return self;
}

// More code to follow later...
```

----------------------------------------

TITLE: Testing Native Addon in Electron
DESCRIPTION: Creates a simple test script to verify the functionality of the native addon. It loads the addon, calls the 'helloWorld' function, and logs the result to the console.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
// Load our addon
const myAddon = require('./js')

// Try the helloWorld function
const result = myAddon.helloWorld('This is a test')

// Should print: "Hello from C++! You said: This is a test"
console.log(result)
```

----------------------------------------

TITLE: Setting Google API Key for Geolocation in Electron
DESCRIPTION: Example of setting a Google API key in the main process to enable geolocation support in Electron. This should be done before opening any browser windows that will make geolocation requests.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
process.env.GOOGLE_API_KEY = 'YOUR_KEY_HERE'
```

----------------------------------------

TITLE: Demonstrating BrowserWindow setBackgroundColor Formats in Electron JavaScript
DESCRIPTION: Illustrates various valid string formats for specifying colors when using the setBackgroundColor instance method on a BrowserWindow. Examples include HSL, RGB, hex codes, and named color strings, providing flexibility in defining the window's background.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const win = new BrowserWindow()
win.setBackgroundColor('hsl(230, 100%, 50%)')
win.setBackgroundColor('rgb(255, 145, 145)')
win.setBackgroundColor('#ff00a3')
win.setBackgroundColor('blueviolet')
```

----------------------------------------

TITLE: Managing Navigation History (Deprecated WebContents) - Electron JavaScript
DESCRIPTION: Details the deprecated navigation history methods directly on the `WebContents` instance (`clearHistory`, `canGoBack`, `goBack`, etc.). These methods have been moved.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
// Deprecated
win.webContents.clearHistory()
win.webContents.canGoBack()
win.webContents.goBack()
win.webContents.canGoForward()
win.webContents.goForward()
win.webContents.goToIndex(index)
win.webContents.canGoToOffset()
win.webContents.goToOffset(index)
```

----------------------------------------

TITLE: Profiling Module Loading Performance with Node.js
DESCRIPTION: Command to generate CPU and heap profiles when loading a module, which can be analyzed using Chrome Developer Tools. The example demonstrates profiling the 'request' module.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/performance.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
node --cpu-prof --heap-prof -e "require('request')"
```

----------------------------------------

TITLE: Configuring GitHub Publisher in Forge Config
DESCRIPTION: Sets up the GitHub Publisher in the Forge configuration file, specifying the repository details and release settings.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
module.exports = {
  publishers: [
    {
      name: '@electron-forge/publisher-github',
      config: {
        repository: {
          owner: 'github-user-name',
          name: 'github-repo-name'
        },
        prerelease: false,
        draft: true
      }
    }
  ]
}
```

----------------------------------------

TITLE: Defining FilePathWithHeaders Object Structure in Markdown
DESCRIPTION: Documentation for the FilePathWithHeaders object with its properties. It consists of a required 'path' string for specifying file path and an optional 'headers' object for additional HTTP headers.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/file-path-with-headers.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# FilePathWithHeaders Object

* `path` string - The path to the file to send.
* `headers` Record\<string, string\> (optional) - Additional headers to be sent.
```

----------------------------------------

TITLE: Making Buttons Non-Draggable in CSS
DESCRIPTION: This CSS snippet ensures buttons remain clickable by setting them as non-draggable regions within a draggable window.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-21_snippet_1

LANGUAGE: css
CODE:
```
button {
  app-region: no-drag;
}
```

----------------------------------------

TITLE: Configuring Code Signing for macOS in Forge
DESCRIPTION: Configuration for code signing macOS apps in the Forge config file, including notarization settings.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
module.exports = {
  packagerConfig: {
    osxSign: {},
    // ...
    osxNotarize: {
      tool: 'notarytool',
      appleId: process.env.APPLE_ID,
      appleIdPassword: process.env.APPLE_PASSWORD,
      teamId: process.env.APPLE_TEAM_ID
    }
    // ...
  }
}
```

----------------------------------------

TITLE: Checking High Contrast with Deprecated systemPreferences - Electron JavaScript
DESCRIPTION: Shows checking if high contrast mode is enabled using the deprecated `systemPreferences.isHighContrastColorScheme()` method. This method has been removed and replaced by `nativeTheme.shouldUseHighContrastColors`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_78

LANGUAGE: javascript
CODE:
```
// Removed in Electron 13
systemPreferences.isHighContrastColorScheme()
```

----------------------------------------

TITLE: Publishing Release Metadata for macOS in JSON
DESCRIPTION: Example of the releases.json file format for Squirrel.Mac to receive updates. It includes version information, release notes, and download URLs for different versions of the application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "currentRelease": "1.2.3",
  "releases": [
    {
      "version": "1.2.1",
      "updateTo": {
        "version": "1.2.1",
        "pub_date": "2023-09-18T12:29:53+01:00",
        "notes": "Theses are some release notes innit",
        "name": "1.2.1",
        "url": "https://mycompany.example.com/myapp/releases/myrelease"
      }
    },
    {
      "version": "1.2.3",
      "updateTo": {
        "version": "1.2.3",
        "pub_date": "2024-09-18T12:29:53+01:00",
        "notes": "Theses are some more release notes innit",
        "name": "1.2.3",
        "url": "https://mycompany.example.com/myapp/releases/myrelease3"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Objective-C Interface Definition (objc_code.h)
DESCRIPTION: This C++ header file defines the interface for the Objective-C code. It includes a basic hello_world function, a hello_gui function for creating a native macOS GUI, callback types for Todo operations, and setter functions for these callbacks. It also uses include guards to prevent multiple inclusions.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_2

LANGUAGE: cpp
CODE:
```
#pragma once
#include <string>
#include <functional>

namespace objc_code {

std::string hello_world(const std::string& input);
void hello_gui();

// Callback function types
using TodoCallback = std::function<void(const std::string&)>;

// Callback setters
void setTodoAddedCallback(TodoCallback callback);

} // namespace objc_code
```

----------------------------------------

TITLE: Enabling Read-Write Access for User-Selected Files in Electron Apps (XML)
DESCRIPTION: This XML snippet enables read-write access to user-selected files for an Electron app, typically used with dialog.showSaveDialog. It sets the 'com.apple.security.files.user-selected.read-write' key to true in the app's entitlements.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_9

LANGUAGE: xml
CODE:
```
<key>com.apple.security.files.user-selected.read-write</key>
<true/>
```

----------------------------------------

TITLE: Sending Messages to Webview Renderer in Electron
DESCRIPTION: The send and sendToFrame methods allow asynchronous communication with the webview's renderer process through specified channels.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_18

LANGUAGE: javascript
CODE:
```
<webview>.send(channel, ...args)
```

LANGUAGE: javascript
CODE:
```
<webview>.sendToFrame(frameId, channel, ...args)
```

----------------------------------------

TITLE: Enabling Incoming Network Connections in Electron Apps (XML)
DESCRIPTION: This XML snippet enables incoming network connections for an Electron app, allowing it to open a network listening socket. It sets the 'com.apple.security.network.server' key to true in the app's entitlements.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_7

LANGUAGE: xml
CODE:
```
<key>com.apple.security.network.server</key>
<true/>
```

----------------------------------------

TITLE: Programmatically Showing and Hiding Traffic Lights on macOS
DESCRIPTION: Demonstrates how to programmatically control the visibility of macOS window controls (traffic lights) from the main process using the win.setWindowButtonVisibility method.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()
// hides the traffic lights
win.setWindowButtonVisibility(false)
```

----------------------------------------

TITLE: Deprecated API - Go to Offset
DESCRIPTION: This YAML snippet provides deprecation details for the `contents.goToOffset(offset)` API in Electron, including the pull request URL and breaking changes header.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_19

LANGUAGE: YAML
CODE:
```
deprecated:
  - pr-url: https://github.com/electron/electron/pull/41752
    breaking-changes-header: deprecated-clearhistory-cangoback-goback-cangoforward-goforward-gotoindex-cangotooffset-gotooffset-on-webcontents
```

----------------------------------------

TITLE: Using Electron process-specific module aliases in JavaScript
DESCRIPTION: Demonstrates how to import process-specific modules using Electron's subpath exports. This example shows importing 'app' from the main process and 'shell' from the common modules.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
const { app } = require('electron/main')
const { shell } = require('electron/common')
```

----------------------------------------

TITLE: Instantiating Electron BaseWindow (JavaScript)
DESCRIPTION: This snippet demonstrates how to import the `BaseWindow` class from the Electron module and create a new window instance. It shows the basic usage of the constructor with options for setting window dimensions.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const { BaseWindow } = require('electron')
// In this example `win` is our instance
const win = new BaseWindow({ width: 800, height: 600 })
```

----------------------------------------

TITLE: Appending Command Line Argument in Electron (JavaScript)
DESCRIPTION: This snippet demonstrates how to append a command line argument to Chromium's command line using the CommandLine class in Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.commandLine.appendArgument('--enable-experimental-web-platform-features')
```

----------------------------------------

TITLE: Accessing File Path on File Object (Deprecated Renderer) - Electron JavaScript
DESCRIPTION: Illustrates the deprecated and non-standard `File.path` property usage in the renderer process to get the native path of an uploaded file. This property has been removed in Electron 32.0 due to security concerns.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
// Before (renderer)

const file = document.querySelector('input[type=file]').files[0]
alert(`Uploaded file path was: ${file.path}`)
```

----------------------------------------

TITLE: HTML Structure for Connection Status Indicator
DESCRIPTION: This HTML file creates the basic structure for the Electron application, including a title, a meta tag for Content Security Policy, and a heading to display the connection status. The status is updated by the renderer.js script. The `Content-Security-Policy` allows inline scripts for simplicity of this example.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/online-offline-events.md#_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Hello World!</title>
    <meta http-equiv="Content-Security-Policy" content="script-src 'self' 'unsafe-inline';" />
</head>
<body>
    <h1>Connection status: <strong id='status'></strong></h1>
    <script src="renderer.js"></script>
</body>
</html>
```

----------------------------------------

TITLE: Configuring launch.json for Electron Main Process Debugging
DESCRIPTION: JSON configuration for debugging the main process of an Electron application in Visual Studio Code. It specifies the runtime executable and arguments for launching the app.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/debugging-vscode.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug Main Process",
      "type": "node",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron",
      "windows": {
        "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron.cmd"
      },
      "args" : ["."],
      "outputCapture": "std"
    }
  ]
}
```

----------------------------------------

TITLE: Setting Environment Variables in POSIX Shell for Electron
DESCRIPTION: Example of setting the ELECTRON_ENABLE_LOGGING environment variable to true in a POSIX shell before launching Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ export ELECTRON_ENABLE_LOGGING=true
$ electron
```

----------------------------------------

TITLE: Closing MessagePortMain Connection
DESCRIPTION: Disconnects the port, so it is no longer active.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
port.close()
```

----------------------------------------

TITLE: macOS ASAR Archive Structure
DESCRIPTION: Demonstrates the file structure required when using an ASAR archive in a macOS Electron application.  The `app.asar` archive, containing the application's source code, is placed within the `Resources` directory of the Electron application bundle.  Electron will then load the application from this archive.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-21_snippet_2

LANGUAGE: plain
CODE:
```
"electron/Electron.app/Contents/Resources/
└── app.asar"
```

----------------------------------------

TITLE: Handling did-create-window with Deprecated additionalFeatures - Electron JavaScript
DESCRIPTION: Illustrates accessing deprecated `additionalFeatures` in the `did-create-window` event details to check for window features. This property has been removed and replaced by `details.options`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_62

LANGUAGE: javascript
CODE:
```
// Removed in Electron 14
// Triggered by window.open('...', '', 'my-key')
webContents.on('did-create-window', (window, details) => {
  if (details.additionalFeatures.includes('my-key')) {
    // ...
  }
})
```

----------------------------------------

TITLE: Initiating Task to Keep Service Worker Alive in Electron
DESCRIPTION: This method starts a task to keep the service worker alive until explicitly ended. It returns an object with an 'end' function that should be called when the task is complete.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/service-worker-main.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
serviceWorker.startTask()
```

----------------------------------------

TITLE: Defining GPUFeatureStatus Object Properties in Markdown
DESCRIPTION: This snippet lists the properties of the GPUFeatureStatus object, each representing a specific GPU feature. The properties are of type string and include various aspects of GPU functionality such as canvas, flash, compositing, and video processing.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/gpu-feature-status.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* `2d_canvas` string - Canvas.
* `flash_3d` string - Flash.
* `flash_stage3d` string - Flash Stage3D.
* `flash_stage3d_baseline` string - Flash Stage3D Baseline profile.
* `gpu_compositing` string - Compositing.
* `multiple_raster_threads` string - Multiple Raster Threads.
* `native_gpu_memory_buffers` string - Native GpuMemoryBuffers.
* `rasterization` string - Rasterization.
* `video_decode` string - Video Decode.
* `video_encode` string - Video Encode.
* `vpx_decode` string - VPx Video Decode.
* `webgl` string - WebGL.
* `webgl2` string - WebGL2.
```

----------------------------------------

TITLE: Structuring HTML for Dark Mode Toggle in Electron
DESCRIPTION: This HTML snippet sets up the basic structure for a dark mode toggle interface in an Electron application. It includes buttons for toggling dark mode and resetting to system theme, along with a display for the current theme source.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-21_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Hello World!</title>
    <meta http-equiv="Content-Security-Policy" content="script-src 'self' 'unsafe-inline';" />
    <link rel="stylesheet" type="text/css" href="./styles.css">
</head>
<body>
    <h1>Hello World!</h1>
    <p>Current theme source: <strong id="theme-source">System</strong></p>

    <button id="toggle-dark-mode">Toggle Dark Mode</button>
    <button id="reset-to-system">Reset to System Theme</button>

    <script src="renderer.js"></script>
</body>
</html>
```

----------------------------------------

TITLE: Replacing Multiple webFrame.setIsolatedWorld* Setters with setIsolatedWorldInfo
DESCRIPTION: Multiple individual setters for isolated world properties (`setIsolatedWorldContentSecurityPolicy`, `setIsolatedWorldHumanReadableName`, `setIsolatedWorldSecurityOrigin`) have been replaced by a single unified method, `webFrame.setIsolatedWorldInfo`, which takes an object containing all desired properties.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_105

LANGUAGE: javascript
CODE:
```
// Deprecated
webFrame.setIsolatedWorldContentSecurityPolicy(worldId, csp)
webFrame.setIsolatedWorldHumanReadableName(worldId, name)
webFrame.setIsolatedWorldSecurityOrigin(worldId, securityOrigin)
```

LANGUAGE: javascript
CODE:
```
// Replace with
webFrame.setIsolatedWorldInfo(
  worldId,
  {
    securityOrigin: 'some_origin',
    name: 'human_readable_name',
    csp: 'content_security_policy'
  })
```

----------------------------------------

TITLE: Defining ResolvedHost Object Structure in Markdown
DESCRIPTION: Describes the structure of the ResolvedHost object, which has a single property 'endpoints' that is an array of ResolvedEndpoint objects. The endpoints represent resolved DNS entries for a given hostname.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/resolved-host.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# ResolvedHost Object

* `endpoints` [ResolvedEndpoint[]](resolved-endpoint.md) - resolved DNS entries for the hostname
```

----------------------------------------

TITLE: Accessing webContents.getZoomLevel Synchronously
DESCRIPTION: The `webContents.getZoomLevel` method no longer uses a callback to return the value. It is now synchronous and directly returns the zoom level number.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_107

LANGUAGE: javascript
CODE:
```
// Deprecated
webContents.getZoomLevel((level) => {
  console.log(level)
})
```

LANGUAGE: javascript
CODE:
```
// Replace with
const level = webContents.getZoomLevel()
console.log(level)
```

----------------------------------------

TITLE: Retrieving Page Information from Webview
DESCRIPTION: Methods to get current page information from a webview element, including URL, title, and various loading states.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
<webview>.getURL()
```

LANGUAGE: javascript
CODE:
```
<webview>.getTitle()
```

LANGUAGE: javascript
CODE:
```
<webview>.isLoading()
```

LANGUAGE: javascript
CODE:
```
<webview>.isLoadingMainFrame()
```

LANGUAGE: javascript
CODE:
```
<webview>.isWaitingForResponse()
```

----------------------------------------

TITLE: Using Deprecated BrowserWindow Extension APIs (Remove) - Electron JavaScript
DESCRIPTION: Shows the usage of the deprecated `BrowserWindow.removeExtension()` and `BrowserWindow.removeDevToolsExtension()` methods. These APIs have been removed and replaced by `session.removeExtension()`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_70

LANGUAGE: javascript
CODE:
```
// Removed in Electron 13
BrowserWindow.removeExtension(name)
BrowserWindow.removeDevToolsExtension(name)
```

----------------------------------------

TITLE: Replace clipboard writeHtml with writeHTML (JS)
DESCRIPTION: Replaces the deprecated `clipboard.writeHtml()` method with the updated `clipboard.writeHTML()`. The capitalization of the 'HTML' part has been standardized.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_119

LANGUAGE: js
CODE:
```
// Deprecated
clipboard.writeHtml()
```

LANGUAGE: js
CODE:
```
// Replace with
clipboard.writeHTML()
```

----------------------------------------

TITLE: Objective-C++ Namespace Functions Implementation (Repetition)
DESCRIPTION: This code snippet implements functions within the `objc_code` namespace, providing functionality to display a native GUI, set a callback for todo additions, and return a greeting string.  It leverages Grand Central Dispatch (GCD) to ensure UI operations are executed on the main thread. It takes a string input for hello_world and a callback function pointer. This is a repetition of the first code snippet.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_14

LANGUAGE: objective-c++
CODE:
```
namespace objc_code {

std::string hello_world(const std::string& input) {
    return "Hello from Objective-C! You said: " + input;
}

void setTodoAddedCallback(TodoCallback callback) {
    g_todoAddedCallback = callback;
}

void hello_gui() {
    // Create and run the GUI on the main thread
    dispatch_async(dispatch_get_main_queue(), ^{
        // Create our window controller
        TodoWindowController *windowController = [[TodoWindowController alloc] init];

        // Show the window
        [windowController showWindow:nil];

        // Keep a reference to prevent it from being deallocated
        // Note: in a real app, you'd store this reference more carefully
        static TodoWindowController *staticController = nil;
        staticController = windowController;
    });
}

} // namespace objc_code
```

----------------------------------------

TITLE: Accessing Incorrectly Exposed API in Renderer
DESCRIPTION: This snippet shows what happens when trying to access an API that was incorrectly exposed from a preload script in the renderer process. Due to contextIsolation, the API is undefined.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
console.log(window.myAPI)
// => undefined
```

----------------------------------------

TITLE: Appending Command Line Switch in Electron (JavaScript)
DESCRIPTION: This example shows how to append a command line switch with a value to Chromium's command line using the CommandLine class in Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.commandLine.appendSwitch('remote-debugging-port', '8315')
```

----------------------------------------

TITLE: Installing Electron Forge CLI and Importing Project
DESCRIPTION: Commands to install Electron Forge's CLI as a dev dependency and import an existing project using the conversion script.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install --save-dev @electron-forge/cli
npx electron-forge import
```

----------------------------------------

TITLE: Replace nativeImage toJpeg with toJPEG (JS)
DESCRIPTION: Replaces the deprecated `nativeImage.toJpeg()` method with the updated `nativeImage.toJPEG()`. The capitalization of 'JPEG' has been standardized.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_137

LANGUAGE: js
CODE:
```
// Removed
nativeImage.toJpeg()
```

LANGUAGE: js
CODE:
```
// Replaced with
nativeImage.toJPEG()
```

----------------------------------------

TITLE: Enabling Read-Only Access for User-Selected Files in Electron Apps (XML)
DESCRIPTION: This XML snippet enables read-only access to user-selected files for an Electron app, typically used with dialog.showOpenDialog. It sets the 'com.apple.security.files.user-selected.read-only' key to true in the app's entitlements.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_8

LANGUAGE: xml
CODE:
```
<key>com.apple.security.files.user-selected.read-only</key>
<true/>
```

----------------------------------------

TITLE: Adjusting Traffic Light Position with hiddenInset Style on macOS
DESCRIPTION: Modifies the position of macOS window controls (traffic lights) by applying the 'hiddenInset' title bar style, which shifts the vertical inset of the controls by a fixed amount.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({ titleBarStyle: 'hiddenInset' })
```

----------------------------------------

TITLE: Rebuilding for Custom Electron Build
DESCRIPTION: Command to rebuild native modules against a custom build of Electron using local Node headers.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
npm rebuild --nodedir=/path/to/src/out/Default/gen/node_headers
```

----------------------------------------

TITLE: Running Basic Clang-Tidy Check
DESCRIPTION: Command to run clang-tidy analysis on all C++ files in the Electron project. Requires specifying the build output directory to access compilation information.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/clang-tidy.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run lint:clang-tidy --out-dir ../out/Testing
```

----------------------------------------

TITLE: Basic Snapcraft Configuration
DESCRIPTION: Sample Snapcraft YAML configuration for a basic Electron application showing required fields, permissions, and build settings.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-21_snippet_3

LANGUAGE: yaml
CODE:
```
name: electron-packager-hello-world
version: '0.1'
summary: Hello World Electron app
description: |
  Simple Hello World Electron app as an example
base: core22
confinement: strict
grade: stable

apps:
  electron-packager-hello-world:
    command: electron-quick-start/electron-quick-start --no-sandbox
    extensions: [gnome]
    plugs:
    - browser-support
    - network
    - network-bind
    environment:
      TMPDIR: $XDG_RUNTIME_DIR

parts:
  electron-quick-start:
    plugin: nil
    source: https://github.com/electron/electron-quick-start.git
    override-build: |
        npm install electron @electron/packager
        npx electron-packager . --overwrite --platform=linux --output=release-build --prune=true
        cp -rv ./electron-quick-start-linux-* $SNAPCRAFT_PART_INSTALL/electron-quick-start
    build-snaps:
    - node/14/stable
    build-packages:
    - unzip
    stage-packages:
    - libnss3
    - libnspr4
```

----------------------------------------

TITLE: Running Electron ad-hoc using npx
DESCRIPTION: Command to run Electron in the current working directory without installing it as a dependency. Note that this method won't install any dependencies your app might need.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
npx electron .
```

----------------------------------------

TITLE: Windows JSON Resource Configuration for ASAR Integrity
DESCRIPTION: This JSON snippet illustrates how to define a resource of type Integrity for ASAR validation in a Windows application, specifying the file, algorithm, and hash.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
[
  {
    "file": "resources\\app.asar",
    "alg": "sha256",
    "value": "9d1f61ea03c4bb62b4416387a521101b81151da0cfbe18c9f8c8b818c5cebfac"
  }
]
```

----------------------------------------

TITLE: Setting User Tasks for Windows JumpList in Electron
DESCRIPTION: This snippet demonstrates how to set user tasks for the application's JumpList using the app.setUserTasks API in Electron. It creates a task for opening a new window.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.setUserTasks([
  {
    program: process.execPath,
    arguments: '--new-window',
    iconPath: process.execPath,
    iconIndex: 0,
    title: 'New Window',
    description: 'Create a new window'
  }
])
```

----------------------------------------

TITLE: Deprecated API - History
DESCRIPTION: This YAML snippet documents the deprecation of the `contents.goBack()` API in Electron, indicating the pull request that introduced the change and the breaking changes header associated with it.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_16

LANGUAGE: YAML
CODE:
```
deprecated:
  - pr-url: https://github.com/electron/electron/pull/41752
    breaking-changes-header: deprecated-clearhistory-cangoback-goback-cangoforward-goforward-gotoindex-cangotooffset-gotooffset-on-webcontents
```

----------------------------------------

TITLE: Visual Studio Linker Tool Settings for Native Addon
DESCRIPTION: Configuration for Visual Studio's linker tool within the binding.gyp file, enabling generation of debug information for better debugging experience and human-readable stack traces.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_4

LANGUAGE: json
CODE:
```
"VCLinkerTool": {
  "GenerateDebugInformation": "true"
}
```

----------------------------------------

TITLE: Running Electron Tests with xvfb-maybe
DESCRIPTION: Command demonstrating how to run Electron-Mocha tests using xvfb-maybe, which automatically configures Xvfb on Linux systems while doing nothing on Windows/macOS
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/testing-on-headless-ci.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
## On Windows or macOS, this invokes electron-mocha
## On Linux, if we are in a headless environment, this will be equivalent
## to xvfb-run electron-mocha ./test/*.js
xvfb-maybe electron-mocha ./test/*.js
```

----------------------------------------

TITLE: Renamed macOS App Structure
DESCRIPTION: Shows the file and directory structure after rebranding an Electron application on macOS. This includes renaming the application bundle (`MyApp.app`) and the helper app bundle (`MyApp Helper.app`). It highlights the location of the main executable and helper executable files, as well as the `Info.plist` files which need to be updated.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-21_snippet_4

LANGUAGE: plain
CODE:
```
"MyApp.app/Contents
├── Info.plist
├── MacOS/
│   └── MyApp
└── Frameworks/
    └── MyApp Helper.app
        ├── Info.plist
        └── MacOS/
            └── MyApp Helper"
```

----------------------------------------

TITLE: Handling Serial Port Revocation in Electron
DESCRIPTION: This snippet demonstrates how to handle the 'serial-port-revoked' event in an Electron application. It shows both the main process and renderer process code for revoking access to a serial port.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
// Browser Process
const { app, BrowserWindow } = require('electron')

app.whenReady().then(() => {
  const win = new BrowserWindow({
    width: 800,
    height: 600
  })

  win.webContents.session.on('serial-port-revoked', (event, details) => {
    console.log(`Access revoked for serial device from origin ${details.origin}`)
  })
})

// Renderer Process

const portConnect = async () => {
  // Request a port.
  const port = await navigator.serial.requestPort()

  // Wait for the serial port to open.
  await port.open({ baudRate: 9600 })

  // ...later, revoke access to the serial port.
  await port.forget()
}
```

----------------------------------------

TITLE: Handling HID Device Selection and Permission in Electron
DESCRIPTION: This snippet demonstrates how to handle HID device selection, set permission checks, and manage device permissions in an Electron application. It includes event listeners for 'select-hid-device' and uses session methods to control access.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

let win = null

app.whenReady().then(() => {
  win = new BrowserWindow()

  win.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {
    if (permission === 'hid') {
      // Add logic here to determine if permission should be given to allow HID selection
      return true
    }
    return false
  })

  // Optionally, retrieve previously persisted devices from a persistent store
  const grantedDevices = fetchGrantedDevices()

  win.webContents.session.setDevicePermissionHandler((details) => {
    if (new URL(details.origin).hostname === 'some-host' && details.deviceType === 'hid') {
      if (details.device.vendorId === 123 && details.device.productId === 345) {
        // Always allow this type of device (this allows skipping the call to `navigator.hid.requestDevice` first)
        return true
      }

      // Search through the list of devices that have previously been granted permission
      return grantedDevices.some((grantedDevice) => {
        return grantedDevice.vendorId === details.device.vendorId &&
              grantedDevice.productId === details.device.productId &&
              grantedDevice.serialNumber && grantedDevice.serialNumber === details.device.serialNumber
      })
    }
    return false
  })

  win.webContents.session.on('select-hid-device', (event, details, callback) => {
    event.preventDefault()
    const selectedDevice = details.deviceList.find((device) => {
      return device.vendorId === 9025 && device.productId === 67
    })
    callback(selectedDevice?.deviceId)
  })
})
```

----------------------------------------

TITLE: Installing and Using @electron/rebuild
DESCRIPTION: Commands to install @electron/rebuild package and use it to rebuild native modules for Electron compatibility.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
npm install --save-dev @electron/rebuild

# Every time you run "npm install", run this:
./node_modules/.bin/electron-rebuild

# If you have trouble on Windows, try:
.\node_modules\.bin\electron-rebuild.cmd
```

----------------------------------------

TITLE: Composing custom download URL in @electron/get
DESCRIPTION: JavaScript code showing how @electron/get composes the URL for downloading Electron binaries. This demonstrates how environment variables like ELECTRON_MIRROR, ELECTRON_CUSTOM_DIR, and ELECTRON_CUSTOM_FILENAME affect the download URL.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_4

LANGUAGE: js
CODE:
```
url = ELECTRON_MIRROR + ELECTRON_CUSTOM_DIR + '/' + ELECTRON_CUSTOM_FILENAME
```

----------------------------------------

TITLE: Retrieving Blob Data in Electron Session
DESCRIPTION: Retrieves blob data for a given identifier. It returns a Promise that resolves with the blob data as a Buffer.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_19

LANGUAGE: JavaScript
CODE:
```
ses.getBlobData(identifier)
```

----------------------------------------

TITLE: Defining KeyboardEvent Object Properties in Markdown
DESCRIPTION: This snippet defines the properties of the KeyboardEvent object used in Electron. It includes boolean flags for control, meta, shift, and alt keys, as well as a flag indicating if the event was triggered by an accelerator.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/keyboard-event.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# KeyboardEvent Object

* `ctrlKey` boolean (optional) - whether the Control key was used in an accelerator to trigger the Event
* `metaKey` boolean (optional) - whether a meta key was used in an accelerator to trigger the Event
* `shiftKey` boolean (optional) - whether a Shift key was used in an accelerator to trigger the Event
* `altKey` boolean (optional) - whether an Alt key was used in an accelerator to trigger the Event
* `triggeredByAccelerator` boolean (optional) - whether an accelerator was used to trigger the event as opposed to another user gesture like mouse click
```

----------------------------------------

TITLE: Installing Electron for specific platform
DESCRIPTION: Command to install Electron for a specific platform (e.g., Windows) using the --platform flag with npm.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
npm install --platform=win32 electron
```

----------------------------------------

TITLE: Using Deprecated shell.moveItemToTrash - Electron JavaScript
DESCRIPTION: Shows the usage of the deprecated synchronous `shell.moveItemToTrash()` API. This method has been removed and replaced by the asynchronous `shell.trashItem()`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_66

LANGUAGE: javascript
CODE:
```
// Removed in Electron 13
shell.moveItemToTrash(path)
```

----------------------------------------

TITLE: Running electron-windows-store to package Electron app
DESCRIPTION: PowerShell command to run electron-windows-store with required parameters. This command packages the Electron app into an AppX format, specifying input and output directories, package version, and name.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-store-guide.md#2025-04-21_snippet_1

LANGUAGE: powershell
CODE:
```
electron-windows-store `
    --input-directory C:\myelectronapp `
    --output-directory C:\output\myelectronapp `
    --package-version 1.0.0.0 `
    --package-name myelectronapp
```

----------------------------------------

TITLE: Retrieving Product Information
DESCRIPTION: Method to fetch product descriptions from the Mac App Store using product identifiers. Returns a Promise resolving to an array of Product objects.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
inAppPurchase.getProducts(productIDs)
```

----------------------------------------

TITLE: Defining Inherited App Sandbox Entitlements in XML
DESCRIPTION: This XML snippet demonstrates the structure of an entitlements file for binaries and helpers in an Electron app bundle. It includes keys for app sandboxing and inheritance of entitlements.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-21_snippet_4

LANGUAGE: xml
CODE:
```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>com.apple.security.app-sandbox</key>
    <true/>
    <key>com.apple.security.inherit</key>
    <true/>
  </dict>
</plist>
```

----------------------------------------

TITLE: Creating a ShareMenu Instance in Electron
DESCRIPTION: Initializes a new ShareMenu instance with a sharing item that defines the content to be shared.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/share-menu.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
### `new ShareMenu(sharingItem)`

* `sharingItem` SharingItem - The item to share.
```

----------------------------------------

TITLE: Controlling Webview Zoom in Electron
DESCRIPTION: Methods for adjusting and retrieving zoom factor and level, as well as setting zoom limits for the webview content.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```
<webview>.setZoomFactor(factor)
```

LANGUAGE: javascript
CODE:
```
<webview>.setZoomLevel(level)
```

LANGUAGE: javascript
CODE:
```
<webview>.getZoomFactor()
```

LANGUAGE: javascript
CODE:
```
<webview>.getZoomLevel()
```

LANGUAGE: javascript
CODE:
```
<webview>.setVisualZoomLevelLimits(minimumLevel, maximumLevel)
```

----------------------------------------

TITLE: Configuring JSON Response for Squirrel.Mac Update Server
DESCRIPTION: Example of the JSON response expected by Squirrel.Mac clients when an update is available. The response includes the download URL, version name, release notes, and publication date of the update.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_9

LANGUAGE: json
CODE:
```
{
    "url": "https://your-static.storage/your-app-1.2.3-darwin.zip",
    "name": "1.2.3",
    "notes": "Theses are some release notes innit",
    "pub_date": "2024-09-18T12:29:53+01:00"
}
```

----------------------------------------

TITLE: Excluding Window from macOS Windows Menu (JavaScript)
DESCRIPTION: This snippet shows how to create a `BaseWindow` instance and configure it to be excluded from the standard macOS "Windows" menu using the `excludedFromShownWindowsMenu` property. It also includes boilerplate for creating and setting a basic application menu.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
const { Menu, BaseWindow } = require('electron')
const win = new BaseWindow({ height: 600, width: 600 })

const template = [
  {
    role: 'windowmenu'
  }
]

win.excludedFromShownWindowsMenu = true

const menu = Menu.buildFromTemplate(template)
Menu.setApplicationMenu(menu)
```

----------------------------------------

TITLE: Modify CFBundleIdentifier for IAP Testing XML
DESCRIPTION: This XML snippet shows how to modify the CFBundleIdentifier in the Electron application's Info.plist file. This is required for testing In-App Purchases (IAP) in development. Replace `com.github.electron` with the bundle identifier of your application created in iTunes Connect.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/in-app-purchases.md#_snippet_0

LANGUAGE: xml
CODE:
```
<key>CFBundleIdentifier</key>
<string>com.example.app</string>
```

----------------------------------------

TITLE: Publishing Release Metadata for Windows
DESCRIPTION: Example of the RELEASES file format for Squirrel.Windows to receive updates. It contains a hash, the full package name, and the package size.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
B0892F3C7AC91D72A6271FF36905FEF8FE993520 electron-fiddle-0.36.3-full.nupkg 103298365
```

----------------------------------------

TITLE: Defining ProtocolResponseUploadData Object Structure in Markdown
DESCRIPTION: This snippet outlines the structure of the ProtocolResponseUploadData object, which is used in Electron for handling protocol responses that include upload data. It specifies two properties: contentType for the MIME type, and data for the actual content to be sent.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/protocol-response-upload-data.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# ProtocolResponseUploadData Object

* `contentType` string - MIME type of the content.
* `data` string | Buffer - Content to be sent.
```

----------------------------------------

TITLE: Installing Latest Stable Electron (npm/yarn)
DESCRIPTION: Command to install the most recent stable build of Electron as a dev dependency using npm or yarn.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/electron-versioning.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
npm install --save-dev electron
```

----------------------------------------

TITLE: Checking Inverted Color Scheme with Deprecated systemPreferences - Electron JavaScript
DESCRIPTION: Shows checking if the inverted color scheme is enabled using the deprecated `systemPreferences.isInvertedColorScheme()` method. This method has been removed and replaced by `nativeTheme.shouldUseInvertedColorScheme`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_76

LANGUAGE: javascript
CODE:
```
// Removed in Electron 13
systemPreferences.isInvertedColorScheme()
```

----------------------------------------

TITLE: Set Sheet Offset Based on Element Height - Electron - JavaScript
DESCRIPTION: This snippet shows how to use the `setSheetOffset` method on macOS to control where sheets are attached relative to the window frame. It demonstrates setting the offset based on the height of a specific HTML element, like a toolbar, ensuring sheets appear below it. Requires an Electron application running on macOS with an HTML element having the ID 'toolbar'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/base-window.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const { BaseWindow } = require('electron')
const win = new BaseWindow()

const toolbarRect = document.getElementById('toolbar').getBoundingClientRect()
win.setSheetOffset(toolbarRect.height)
```

----------------------------------------

TITLE: Auth Server Whitelist Example in Electron
DESCRIPTION: Example showing how to use the --auth-server-whitelist flag to specify a comma-separated list of servers for which integrated authentication is enabled.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
--auth-server-whitelist='*example.com, *foobar.com, *baz'
```

----------------------------------------

TITLE: CSS Manipulation in Webview
DESCRIPTION: Methods to inject and remove CSS from the page loaded in the webview. Provides promise-based interfaces for tracking insertion and removal operations.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_7

LANGUAGE: javascript
CODE:
```
<webview>.insertCSS(css)
```

LANGUAGE: javascript
CODE:
```
<webview>.removeInsertedCSS(key)
```

----------------------------------------

TITLE: Defining SharingItem Object Properties in Markdown
DESCRIPTION: This snippet outlines the properties of the SharingItem object used in Electron for sharing content. It includes optional arrays for texts, file paths, and URLs to be shared.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/sharing-item.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# SharingItem Object

* `texts` string[] (optional) - An array of text to share.
* `filePaths` string[] (optional) - An array of files to share.
* `urls` string[] (optional) - An array of URLs to share.
```

----------------------------------------

TITLE: Defining NavigationEntry Object Structure in Markdown
DESCRIPTION: This snippet outlines the structure of the NavigationEntry object, including its properties: url, title, and an optional pageState. The pageState is a base64 encoded string containing Chromium page state information.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/navigation-entry.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# NavigationEntry Object

* `url` string
* `title` string
* `pageState` string (optional) - A base64 encoded data string containing Chromium page state
  including information like the current scroll position or form values. It is committed by
  Chromium before a navigation event and on a regular interval.
```

----------------------------------------

TITLE: Defining MediaAccessPermissionRequest Object in Markdown
DESCRIPTION: This snippet defines the MediaAccessPermissionRequest object, which extends the PermissionRequest object. It specifies two optional properties: securityOrigin (a string) and mediaTypes (an array of strings that can be 'video' or 'audio').
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/media-access-permission-request.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# MediaAccessPermissionRequest Object extends `PermissionRequest`

* `securityOrigin` string (optional) - The security origin of the request.
* `mediaTypes` string[] (optional) - The types of media access being requested - elements can be `video`
  or `audio`.
```

----------------------------------------

TITLE: Defining KeyboardInputEvent Object Properties in Markdown
DESCRIPTION: This snippet outlines the properties of the KeyboardInputEvent object, including the event type and keyCode. It specifies the possible values for the type property and references the Accelerator documentation for valid key codes.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/keyboard-input-event.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# KeyboardInputEvent Object extends `InputEvent`

* `type` string - The type of the event, can be `rawKeyDown`, `keyDown`, `keyUp` or `char`.
* `keyCode` string - The character that will be sent
  as the keyboard event. Should only use the valid key codes in
  [Accelerator](../accelerator.md).
```

----------------------------------------

TITLE: Defining OpenExternalPermissionRequest Object in Electron (Markdown)
DESCRIPTION: This snippet defines the OpenExternalPermissionRequest object, which extends the PermissionRequest object. It includes a single optional property 'externalURL' of type string, representing the URL of the openExternal request.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/open-external-permission-request.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# OpenExternalPermissionRequest Object extends `PermissionRequest`

* `externalURL` string (optional) - The url of the `openExternal` request.
```

----------------------------------------

TITLE: Invalid ESM Import in Electron Renderer Process
DESCRIPTION: Shows an example of an ESM import that will not work in the renderer process due to lack of access to Node.js built-in modules.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/esm.md#2025-04-21_snippet_1

LANGUAGE: html
CODE:
```
<script type="module">
    import { exists } from 'node:fs' // ❌ will not work!
</script>
```

----------------------------------------

TITLE: Installing electron-windows-store CLI
DESCRIPTION: Command to install the electron-windows-store CLI tool globally using npm. This tool is essential for packaging Electron apps for the Windows Store.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-store-guide.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
npm install -g electron-windows-store
```

----------------------------------------

TITLE: Looking up WebContents by DevTools Target ID in Electron
DESCRIPTION: This code snippet demonstrates how to look up a WebContents instance by its Chrome DevTools Protocol TargetID. It attaches the debugger to the WebContents, retrieves the TargetID using the debugger API, and then uses the fromDevToolsTargetId method to get the WebContents instance.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
async function lookupTargetId (browserWindow) {
  const wc = browserWindow.webContents
  await wc.debugger.attach('1.3')
  const { targetInfo } = await wc.debugger.sendCommand('Target.getTargetInfo')
  const { targetId } = targetInfo
  const targetWebContents = await wc.fromDevToolsTargetId(targetId)
}
```

----------------------------------------

TITLE: Installing Xcode Command Line Tools for macOS
DESCRIPTION: Command to install the Xcode Command Line Tools on macOS, which provides the necessary compilers and build tools (clang, clang++, and make) for building native Node.js addons.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
xcode-select --install
```

----------------------------------------

TITLE: Verifying Node.js and npm Installation
DESCRIPTION: Command line instructions to verify successful installation of Node.js and npm by checking their versions using the -v flag. The expected output shows Node.js v16.14.2 and npm 8.7.0.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-1-prerequisites.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ node -v
v16.14.2
$ npm -v
8.7.0
```

----------------------------------------

TITLE: Implementing Electron Fuses with @electron/fuses Module
DESCRIPTION: Example code demonstrating how to use the @electron/fuses module to flip fuses in an Electron application. This snippet shows disabling the RunAsNode fuse, which prevents the ELECTRON_RUN_AS_NODE environment variable from being respected.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/fuses.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { flipFuses, FuseVersion, FuseV1Options } = require('@electron/fuses')

flipFuses(
  // Path to electron
  require('electron'),
  // Fuses to flip
  {
    version: FuseVersion.V1,
    [FuseV1Options.RunAsNode]: false
  }
)
```

----------------------------------------

TITLE: Running Clang-Tidy on Specific File
DESCRIPTION: Command to run clang-tidy analysis on a specific C++ source file. Shows how to target individual files for analysis while providing the required build output directory.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/clang-tidy.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm run lint:clang-tidy --out-dir ../out/Testing shell/browser/api/electron_api_app.cc
```

----------------------------------------

TITLE: Migrate from Electron session.serviceWorkers.fromVersionID() to getInfoFromVersionID() - Javascript
DESCRIPTION: Illustrates the deprecated `session.serviceWorkers.fromVersionID()` API and its replacement `session.serviceWorkers.getInfoFromVersionID()`. The new name provides better clarity on the returned object's type, especially alongside the introduction of the `getWorkerFromVersionID` API.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// Deprecated
session.serviceWorkers.fromVersionID(versionId)
```

LANGUAGE: javascript
CODE:
```
// Replace with
session.serviceWorkers.getInfoFromVersionID(versionId)
```

----------------------------------------

TITLE: PowerMonitor getCurrentThermalState Method
DESCRIPTION: macOS-specific method that returns the system's current thermal state as a string. Possible values are 'unknown', 'nominal', 'fair', 'serious', or 'critical'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
powerMonitor.getCurrentThermalState()
```

----------------------------------------

TITLE: Accessing TouchBarSlider Properties
DESCRIPTION: Examples of accessing and modifying TouchBarSlider instance properties to update the slider in real-time.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-slider.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Updating slider properties
touchBarSlider.label = 'New Label';
touchBarSlider.value = 75;
touchBarSlider.minValue = 20;
touchBarSlider.maxValue = 200;
```

----------------------------------------

TITLE: Accessing TouchBarButton Properties
DESCRIPTION: Shows how to access and modify TouchBarButton instance properties that control the button's appearance and behavior in the touch bar.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-button.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
touchBarButton.accessibilityLabel = 'Button Description';
touchBarButton.label = 'Button Text';
touchBarButton.backgroundColor = '#ABCDEF';
touchBarButton.icon = nativeImage;
touchBarButton.iconPosition = 'left';
touchBarButton.enabled = true;
```

----------------------------------------

TITLE: Setting China CDN mirror for Electron downloads
DESCRIPTION: Shell command to set the ELECTRON_MIRROR environment variable to use China's CDN mirror for downloading Electron binaries.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
ELECTRON_MIRROR="https://npmmirror.com/mirrors/electron/"
```

----------------------------------------

TITLE: DNS Configuration in Electron
DESCRIPTION: Example demonstrating how to configure secure DNS settings in an Electron application using the configureHostResolver API. Shows setup for secure DNS mode with CloudFlare DNS server.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_22

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.whenReady().then(() => {
  app.configureHostResolver({
    secureDnsMode: 'secure',
    secureDnsServers: [
      'https://cloudflare-dns.com/dns-query'
    ]
  })
})
```

----------------------------------------

TITLE: Electron Packager CLI Command for Protocol Handlers
DESCRIPTION: Shell command demonstrating how to configure protocol handlers using Electron Packager's command-line interface with the --protocol and --protocol-name flags.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-21_snippet_8

LANGUAGE: shell
CODE:
```
npx electron-packager . --protocol=electron-fiddle --protocol-name="Electron Fiddle"
```

----------------------------------------

TITLE: Setting Plain Text Encryption Usage in Electron
DESCRIPTION: This method forces the use of an in-memory password for encryption on Linux when a valid OS password manager is not available. It has no effect on Windows and macOS.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
safeStorage.setUsePlainTextEncryption(usePlainText)
```

----------------------------------------

TITLE: Webview DevTools Access Example
DESCRIPTION: JavaScript code showing how to access DevTools for a webview element after it has loaded.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const webview = document.querySelector('webview')
webview.addEventListener('dom-ready', () => {
  webview.openDevTools()
})
```

----------------------------------------

TITLE: Defining ProductSubscriptionPeriod Object Structure in Electron
DESCRIPTION: Defines the structure of a ProductSubscriptionPeriod object which contains two properties: numberOfUnits (number) that specifies the quantity of time units, and unit (string) that specifies the type of time increment (day, week, month, or year).
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/product-subscription-period.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# ProductSubscriptionPeriod Object

* `numberOfUnits` number - The number of units per subscription period.
* `unit` string - The increment of time that a subscription period is specified in. Can be `day`, `week`, `month`, `year`.
```

----------------------------------------

TITLE: Adding Recent Documents Menu to macOS Application
DESCRIPTION: This JSON snippet shows the menu template structure for adding a Recent Documents menu to a macOS application. It includes options for accessing recent documents and clearing the recent documents list.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/recent-documents.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "submenu":[
    {
      "label":"Open Recent",
      "role":"recentdocuments",
      "submenu":[
        {
          "label":"Clear Recent",
          "role":"clearrecentdocuments"
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Clearing User Tasks List in Electron
DESCRIPTION: This snippet shows how to clear the user tasks list for the application's JumpList by passing an empty array to app.setUserTasks in Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.setUserTasks([])
```

----------------------------------------

TITLE: Clearing Thumbnail Toolbar in Electron for Windows
DESCRIPTION: This snippet shows how to clear the thumbnail toolbar buttons for a BrowserWindow by passing an empty array to setThumbarButtons in Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow()
win.setThumbarButtons([])
```

----------------------------------------

TITLE: PowerMonitor isOnBatteryPower Method
DESCRIPTION: Method that returns a boolean indicating whether the system is currently running on battery power.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
powerMonitor.isOnBatteryPower()
```

----------------------------------------

TITLE: Defining InputEvent Object Properties in Markdown
DESCRIPTION: This snippet defines the properties of the InputEvent object. It specifies the 'type' property as a string with various possible values representing different input events, and the 'modifiers' property as an optional array of strings representing event modifiers.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/input-event.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* `type` string - Can be `undefined`, `mouseDown`, `mouseUp`, `mouseMove`,
  `mouseEnter`, `mouseLeave`, `contextMenu`, `mouseWheel`, `rawKeyDown`,
  `keyDown`, `keyUp`, `char`, `gestureScrollBegin`, `gestureScrollEnd`,
  `gestureScrollUpdate`, `gestureFlingStart`, `gestureFlingCancel`,
  `gesturePinchBegin`, `gesturePinchEnd`, `gesturePinchUpdate`,
  `gestureTapDown`, `gestureShowPress`, `gestureTap`, `gestureTapCancel`,
  `gestureShortPress`, `gestureLongPress`, `gestureLongTap`,
  `gestureTwoFingerTap`, `gestureTapUnconfirmed`, `gestureDoubleTap`,
  `touchStart`, `touchMove`, `touchEnd`, `touchCancel`, `touchScrollStarted`,
  `pointerDown`, `pointerUp`, `pointerMove`, `pointerRawUpdate`,
  `pointerCancel` or `pointerCausedUaAction`.
* `modifiers` string[] (optional) - An array of modifiers of the event, can
  be `shift`, `control`, `ctrl`, `alt`, `meta`, `command`, `cmd`, `iskeypad`,
  `isautorepeat`, `leftbuttondown`, `middlebuttondown`, `rightbuttondown`,
  `capslock`, `numlock`, `left`, `right`.
```

----------------------------------------

TITLE: Replacing app.releaseSingleInstance with releaseSingleInstanceLock
DESCRIPTION: The method for releasing the single instance lock has been renamed from `app.releaseSingleInstance` to `app.releaseSingleInstanceLock`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_110

LANGUAGE: javascript
CODE:
```
// Deprecated
app.releaseSingleInstance()
```

LANGUAGE: javascript
CODE:
```
// Replace with
app.releaseSingleInstanceLock()
```

----------------------------------------

TITLE: Using ipcMainServiceWorker.once() for One-time Listening
DESCRIPTION: Adds a one-time listener function that will be invoked only the next time a message is sent to the specified channel, after which it is automatically removed.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
ipcMainServiceWorker.once(channel, listener)
```

----------------------------------------

TITLE: Setting Code Cache Path in Electron Session
DESCRIPTION: Sets the directory to store the V8 generated JS code cache from the renderer. The directory will be created if it doesn't exist. If the directory cannot be created, code cache will not be used.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_24

LANGUAGE: JavaScript
CODE:
```
ses.setCodeCachePath(path)
```

----------------------------------------

TITLE: WebFrame FirstChild Property Definition
DESCRIPTION: Read-only property that represents the first child frame of webFrame. Returns null if webFrame has no children or if first child is not in the current renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
webFrame.firstChild: WebFrame | null
```

----------------------------------------

TITLE: Deprecated BrowserWindow function in Markdown
DESCRIPTION: This markdown snippet shows an example entry in `breaking-changes.md` describing the deprecation of `BrowserWindow.getTrafficLightPosition()`. It highlights that `BrowserWindow.getWindowButtonPosition()` should be used instead.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
```markdown
<!-- docs/breaking-changes.md -->
### Deprecated: `BrowserWindow.getTrafficLightPosition()`

`BrowserWindow.getTrafficLightPosition()` has been deprecated, the
`BrowserWindow.getWindowButtonPosition()` API should be used instead
which returns `null` instead of `{ x: 0, y: 0 }` when there is no custom
position.

<!-- docs/api/browser-window.md  -->
#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_

Returns `Point` - The custom position for the traffic light buttons in
frameless window, `{ x: 0, y: 0 }` will be returned when there is no custom
position.
```
```

----------------------------------------

TITLE: app.getGPUInfo('complete') Behavior Change on macOS
DESCRIPTION: On macOS, calling `app.getGPUInfo('complete')` now returns the same level of information as `app.getGPUInfo('basic')`. This is a change in behavior rather than a method replacement.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_111

LANGUAGE: javascript
CODE:
```
app.getGPUInfo('complete')
// Now behaves the same with `basic` on macOS
app.getGPUInfo('basic')
```

----------------------------------------

TITLE: HTML Template for Electron App
DESCRIPTION: HTML structure for the Electron application including necessary security policies and element for version information display.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_3

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self'; script-src 'self'"
    />
    <meta
      http-equiv="X-Content-Security-Policy"
      content="default-src 'self'; script-src 'self'"
    />
    <title>Hello from Electron renderer!</title>
  </head>
  <body>
    <h1>Hello from Electron renderer!</h1>
    <p>👋</p>
    <p id="info"></p>
  </body>
  <script src="./renderer.js"></script>
</html>
```

----------------------------------------

TITLE: Setting Environment Variables in Windows Console for Electron
DESCRIPTION: Example of setting the ELECTRON_ENABLE_LOGGING environment variable to true in Windows PowerShell before launching Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-21_snippet_1

LANGUAGE: powershell
CODE:
```
> set ELECTRON_ENABLE_LOGGING=true
> electron
```

----------------------------------------

TITLE: Disabling ASAR support in Node.js
DESCRIPTION: This code demonstrates how to disable ASAR support in the fs module by setting process.noAsar to true.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-21_snippet_6

LANGUAGE: JavaScript
CODE:
```
const fs = require('node:fs')
process.noAsar = true
fs.readFileSync('/path/to/example.asar')
```

----------------------------------------

TITLE: Handling webContents new-window Event (Deprecated JavaScript)
DESCRIPTION: Demonstrates handling window open requests using the deprecated `new-window` event on `webContents`, typically preventing the default browser behavior. This event was removed in Electron 22.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_47

LANGUAGE: JavaScript
CODE:
```
// Removed in Electron 22
webContents.on('new-window', (event) => {
  event.preventDefault()
})
```

----------------------------------------

TITLE: Initializing Git Repository for Electron Development
DESCRIPTION: Commands to fork and clone the Electron repository, set up remote tracking, and fetch upstream changes.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ git clone git@github.com:username/electron.git
$ cd electron
$ git remote add upstream https://github.com/electron/electron.git
$ git fetch upstream
```

----------------------------------------

TITLE: Configuring Selenium WebDriver for Electron Testing
DESCRIPTION: Example code that configures Selenium WebDriver to connect to ChromeDriver and target an Electron application. It includes setting the ChromeDriver server URL and specifying the path to the Electron binary.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
const webdriver = require('selenium-webdriver')
const driver = new webdriver.Builder()
  // The "9515" is the port opened by ChromeDriver.
  .usingServer('http://localhost:9515')
  .withCapabilities({
    'goog:chromeOptions': {
      // Here is the path to your Electron binary.
      binary: '/Path-to-Your-App.app/Contents/MacOS/Electron'
    }
  })
  .forBrowser('chrome') // note: use .forBrowser('electron') for selenium-webdriver <= 3.6.0
  .build()
driver.get('https://www.google.com')
driver.findElement(webdriver.By.name('q')).sendKeys('webdriver')
driver.findElement(webdriver.By.name('btnG')).click()
driver.wait(() => {
  return driver.getTitle().then((title) => {
    return title === 'webdriver - Google Search'
  })
}, 1000)
driver.quit()
```

----------------------------------------

TITLE: Handling <webview> new-window Event (Deprecated JavaScript)
DESCRIPTION: Shows how to listen for the deprecated `new-window` event directly on the `<webview>` element in the renderer process. This event was removed in Electron 22.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_49

LANGUAGE: JavaScript
CODE:
```
// Removed in Electron 22
webview.addEventListener('new-window', (event) => {})
```

----------------------------------------

TITLE: Directory Structure for Electron Patches
DESCRIPTION: Shows the filesystem layout for patch files in the Electron project, demonstrating how patches are organized by upstream project with a .patches file controlling application order.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/patches.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
patches
├── config.json   <-- this describes which patchset directory is applied to what project
├── chromium
│   ├── .patches
│   ├── accelerator.patch
│   ├── add_contentgpuclient_precreatemessageloop_callback.patch
│   ⋮
├── node
│   ├── .patches
│   ├── add_openssl_is_boringssl_guard_to_oaep_hash_check.patch
│   ├── build_add_gn_build_files.patch
│   ⋮
⋮
```

----------------------------------------

TITLE: Remove webContents setSize (JS)
DESCRIPTION: Notes the removal of the `webContents.setSize()` method. The document states there is no direct replacement for this API.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_128

LANGUAGE: js
CODE:
```
// Removed
webContents.setSize(options)
```

----------------------------------------

TITLE: V8 Optimization Tracing in Electron
DESCRIPTION: Example showing how to use JavaScript flags to enable tracing of V8 optimization and deoptimization events for debugging performance issues.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
$ electron --js-flags="--trace-opt --trace-deopt" your-app
```

----------------------------------------

TITLE: Finding commit history with git log in Bash
DESCRIPTION: This bash command utilizes `git log` to trace the history of `GetTrafficLightPosition` within `shell/browser/native_window_mac.mm`. It helps identify the commits that introduced or modified the functionality.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
$ git log --reverse -L :GetTrafficLightPosition:shell/browser/native_window_mac.mm
commit e01b1831d96d5d68f54af879b00c617358df5372
Author: Cheng Zhao <zcbenz@gmail.com>
Date:   Wed Dec 16 14:30:39 2020 +0900

    feat: make trafficLightPosition work for customButtonOnHover (#26789)
```

----------------------------------------

TITLE: Implementing Slot Machine Game with Electron TouchBar
DESCRIPTION: A complete example showing how to create an interactive slot machine game using Electron's TouchBar API. The implementation includes spinning reels, result display, and win condition checking. It demonstrates usage of TouchBarLabel, TouchBarButton, and TouchBarSpacer components.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, TouchBar } = require('electron')

const { TouchBarLabel, TouchBarButton, TouchBarSpacer } = TouchBar

let spinning = false

// Reel labels
const reel1 = new TouchBarLabel({ label: '' })
const reel2 = new TouchBarLabel({ label: '' })
const reel3 = new TouchBarLabel({ label: '' })

// Spin result label
const result = new TouchBarLabel({ label: '' })

// Spin button
const spin = new TouchBarButton({
  label: '🎰 Spin',
  backgroundColor: '#7851A9',
  click: () => {
    // Ignore clicks if already spinning
    if (spinning) {
      return
    }

    spinning = true
    result.label = ''

    let timeout = 10
    const spinLength = 4 * 1000 // 4 seconds
    const startTime = Date.now()

    const spinReels = () => {
      updateReels()

      if ((Date.now() - startTime) >= spinLength) {
        finishSpin()
      } else {
        // Slow down a bit on each spin
        timeout *= 1.1
        setTimeout(spinReels, timeout)
      }
    }

    spinReels()
  }
})

const getRandomValue = () => {
  const values = ['🍒', '💎', '7️⃣', '🍊', '🔔', '⭐', '🍇', '🍀']
  return values[Math.floor(Math.random() * values.length)]
}

const updateReels = () => {
  reel1.label = getRandomValue()
  reel2.label = getRandomValue()
  reel3.label = getRandomValue()
}

const finishSpin = () => {
  const uniqueValues = new Set([reel1.label, reel2.label, reel3.label]).size
  if (uniqueValues === 1) {
    // All 3 values are the same
    result.label = '💰 Jackpot!'
    result.textColor = '#FDFF00'
  } else if (uniqueValues === 2) {
    // 2 values are the same
    result.label = '😍 Winner!'
    result.textColor = '#FDFF00'
  } else {
    // No values are the same
    result.label = '🙁 Spin Again'
    result.textColor = null
  }
  spinning = false
}

const touchBar = new TouchBar({
  items: [
    spin,
    new TouchBarSpacer({ size: 'large' }),
    reel1,
    new TouchBarSpacer({ size: 'small' }),
    reel2,
    new TouchBarSpacer({ size: 'small' }),
    reel3,
    new TouchBarSpacer({ size: 'large' }),
    result
  ]
})

let window

app.whenReady().then(() => {
  window = new BrowserWindow({
    frame: false,
    titleBarStyle: 'hiddenInset',
    width: 200,
    height: 200,
    backgroundColor: '#000'
  })
  window.loadURL('about:blank')
  window.setTouchBar(touchBar)
})
```

----------------------------------------

TITLE: Unsafe API Exposure with contextBridge in JavaScript
DESCRIPTION: An example of unsafe code that directly exposes a powerful API without argument filtering, which should be avoided.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// ❌ Bad code
contextBridge.exposeInMainWorld('myAPI', {
  send: ipcRenderer.send
})
```

----------------------------------------

TITLE: Installing Electron with specific architecture
DESCRIPTION: Command to install Electron with a specific architecture (e.g., ia32 on an x64 machine) using the --arch flag with npm.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_2

LANGUAGE: shell
CODE:
```
npm install --arch=ia32 electron
```

----------------------------------------

TITLE: Restore Unhandled Rejection Behavior in Electron Utility Process - Javascript
DESCRIPTION: This snippet demonstrates how to revert the new behavior in Electron Utility Processes where unhandled rejections warn instead of crashing. Adding this event listener will cause the process to exit upon an unhandled rejection, matching the previous behavior.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_0

LANGUAGE: javascript
CODE:
```
process.on('unhandledRejection', () => {
  process.exit(1)
})
```

----------------------------------------

TITLE: Replace Tray setHighlightMode boolean with string 'off' (JS)
DESCRIPTION: Replaces the deprecated boolean argument `false` for `tray.setHighlightMode()` with the string literal `'off'`. This changes how the highlight mode is deactivated.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_126

LANGUAGE: js
CODE:
```
// Deprecated
tray.setHighlightMode(false)
```

LANGUAGE: js
CODE:
```
// Replace with
tray.setHighlightMode('off')
```

----------------------------------------

TITLE: Defining ASAR Header Integrity
DESCRIPTION: This JSON snippet describes the structure of the header expected in an ASAR archive, including algorithm, hash, block size, and block hashes.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md#2025-04-21_snippet_0

LANGUAGE: json
CODE:
```
{
  "algorithm": "SHA256",
  "hash": "...",
  "blockSize": 1024,
  "blocks": ["...", "..."]
}
```

----------------------------------------

TITLE: Menu Structure Output with Before/After Positioning
DESCRIPTION: Shows the resulting menu structure from the template using 'before' and 'after' positioning, demonstrating how the order differs from the declaration order in the template.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_7

LANGUAGE: shell
CODE:
```
- ---
- 3
- 2
- 1
```

----------------------------------------

TITLE: HTML Structure for Screen Capture Application
DESCRIPTION: The HTML template that provides the user interface for the screen capture demo, including start and stop buttons and a video element to display the captured content. It includes necessary CSP settings and script references.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/desktop-capturer.md#2025-04-21_snippet_2

LANGUAGE: html
CODE:
```
<!-- index.html -->
<html>
<meta http-equiv="content-security-policy" content="script-src 'self' 'unsafe-inline'" />
  <body>
    <button id="startButton" class="button">Start</button>
    <button id="stopButton" class="button">Stop</button>
    <video width="320" height="240" autoplay></video>
    <script src="renderer.js"></script>
  </body>
</html>
```

----------------------------------------

TITLE: Building 32-bit Electron with GN Args
DESCRIPTION: Command to generate 32-bit build configuration using GN build system with release arguments and x86 target CPU.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-windows.md#2025-04-21_snippet_0

LANGUAGE: powershell
CODE:
```
$ gn gen out/Release-x86 --args="import(\"//electron/build/args/release.gn\") target_cpu=\"x86\""
```

----------------------------------------

TITLE: Text Manipulation in Webview
DESCRIPTION: Methods to manipulate text in the webview, including replacing text, correcting misspellings, and inserting new text at the focused element.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_13

LANGUAGE: javascript
CODE:
```
<webview>.replace(text)
```

LANGUAGE: javascript
CODE:
```
<webview>.replaceMisspelling(text)
```

LANGUAGE: javascript
CODE:
```
<webview>.insertText(text)
```

----------------------------------------

TITLE: Finishing All Transactions
DESCRIPTION: Method to complete all pending transactions in the payment queue.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
inAppPurchase.finishAllTransactions()
```

----------------------------------------

TITLE: Using system-ui Keyword for OS-Specific Corner Smoothing in Electron
DESCRIPTION: CSS example showing how to use the system-ui keyword with -electron-corner-smoothing to match the operating system's design language (60% on macOS, 0% on Windows/Linux).
SOURCE: https://github.com/electron/electron/blob/main/docs/api/corner-smoothing-css.md#2025-04-21_snippet_1

LANGUAGE: css
CODE:
```
.box {
  width: 128px;
  height: 128px;
  background-color: cornflowerblue;
  border-radius: 24px;
  -electron-corner-smoothing: system-ui;  /* Match the system UI design. */
}
```

----------------------------------------

TITLE: Determine System Image Name on macOS
DESCRIPTION: This shell code helps to determine the correct string representation of an `NSImageName` on macOS.  It compiles and runs a simple Objective-C program that logs the string representation of the specified system image name.  This is necessary because some `NSImageName` constants do not directly match their string representations.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/native-image.md#_snippet_4

LANGUAGE: sh
CODE:
```
echo -e '#import <Cocoa/Cocoa.h>\nint main() { NSLog(@"%@", SYSTEM_IMAGE_NAME); }' | clang -otest -x objective-c -framework Cocoa - && ./test
```

----------------------------------------

TITLE: Replace clipboard writeRtf with writeRTF (JS)
DESCRIPTION: Replaces the deprecated `clipboard.writeRtf()` method with the updated `clipboard.writeRTF()`. The capitalization of the 'RTF' part has been standardized.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_117

LANGUAGE: js
CODE:
```
// Deprecated
clipboard.writeRtf()
```

LANGUAGE: js
CODE:
```
// Replace with
clipboard.writeRTF()
```

----------------------------------------

TITLE: Example Electron app directory structure
DESCRIPTION: Shows the typical file structure of a packaged Electron application. This structure is the expected input for the electron-windows-store tool.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-store-guide.md#2025-04-21_snippet_2

LANGUAGE: plaintext
CODE:
```
├── Ghost.exe
├── LICENSE
├── content_resources_200_percent.pak
├── content_shell.pak
├── d3dcompiler_47.dll
├── ffmpeg.dll
├── icudtl.dat
├── libEGL.dll
├── libGLESv2.dll
├── locales
│   ├── am.pak
│   ├── ar.pak
│   ├── [...]
├── node.dll
├── resources
│   └── app.asar
├── v8_context_snapshot.bin
├── squirrel.exe
└── ui_resources_200_percent.pak
```

----------------------------------------

TITLE: Object Serialization in Electron IPC
DESCRIPTION: Documentation detailing the object serialization process in Electron's IPC implementation using the Structured Clone Algorithm, including limitations on serializable object types.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_12

LANGUAGE: markdown
CODE:
```
Electron's IPC implementation uses the HTML standard\n[Structured Clone Algorithm][sca] to serialize objects passed between processes, meaning that\nonly certain types of objects can be passed through IPC channels.\n\nIn particular, DOM objects (e.g. `Element`, `Location` and `DOMMatrix`), Node.js objects\nbacked by C++ classes (e.g. `process.env`, some members of `Stream`), and Electron objects\nbacked by C++ classes (e.g. `WebContents`, `BrowserWindow` and `WebFrame`) are not serializable\nwith Structured Clone.
```

----------------------------------------

TITLE: Configuring SSL Settings for Electron Session
DESCRIPTION: Sets the SSL configuration for the session. It allows specifying minimum and maximum SSL versions, and disabling specific cipher suites. All subsequent network requests will use the new configuration.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_18

LANGUAGE: JavaScript
CODE:
```
ses.setSSLConfig(config)
```

----------------------------------------

TITLE: Closing a ShareMenu Context Menu in Electron
DESCRIPTION: Closes the previously opened share menu context menu in the specified BrowserWindow.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/share-menu.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
#### `shareMenu.closePopup([browserWindow])`

* `browserWindow` [BrowserWindow](browser-window.md) (optional) - Default is the focused window.
```

----------------------------------------

TITLE: Disabling -electron-corner-smoothing Feature in Electron's BrowserWindow
DESCRIPTION: JavaScript example showing how to disable the -electron-corner-smoothing CSS rule by setting the enableCornerSmoothingCSS web preference to false when creating a BrowserWindow.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/corner-smoothing-css.md#2025-04-21_snippet_2

LANGUAGE: js
CODE:
```
const myWindow = new BrowserWindow({
  // [...]
  webPreferences: {
    enableCornerSmoothingCSS: false // Disables the `-electron-corner-smoothing` CSS rule
  }
})
```

----------------------------------------

TITLE: Enabling Accessibility via Objective-C in Electron
DESCRIPTION: This Objective-C code snippet demonstrates how to enable or disable accessibility features in an Electron application on macOS by setting the `AXManualAccessibility` attribute. It takes a boolean `enable` and an `NSRunningApplication` object as input and uses the Accessibility API to set the attribute.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/accessibility.md#_snippet_0

LANGUAGE: Objective-C
CODE:
```
CFStringRef kAXManualAccessibility = CFSTR("AXManualAccessibility");

+ (void)enableAccessibility:(BOOL)enable inElectronApplication:(NSRunningApplication *)app
{
    AXUIElementRef appRef = AXUIElementCreateApplication(app.processIdentifier);
    if (appRef == nil)
        return;

    CFBooleanRef value = enable ? kCFBooleanTrue : kCFBooleanFalse;
    AXUIElementSetAttributeValue(appRef, kAXManualAccessibility, value);
    CFRelease(appRef);
}
```

----------------------------------------

TITLE: Disabling HID Blocklist in Electron
DESCRIPTION: Code snippet showing how to disable the default HID blocklist in Electron by setting the 'disable-hid-blocklist' command line flag.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/devices.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
app.commandLine.appendSwitch('disable-hid-blocklist')
```

----------------------------------------

TITLE: Implementing Electron API Header File
DESCRIPTION: Header file template for new Electron API module showing class definition with Wrappable integration
SOURCE: https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-21_snippet_1

LANGUAGE: cpp
CODE:
```
#ifndef ELECTRON_SHELL_BROWSER_API_ELECTRON_API_{API_NAME}_H_
#define ELECTRON_SHELL_BROWSER_API_ELECTRON_API_{API_NAME}_H_

#include "gin/handle.h"
#include "gin/wrappable.h"

namespace electron {

namespace api {

class ApiName : public gin::Wrappable<ApiName>  {
 public:
  static gin::Handle<ApiName> Create(v8::Isolate* isolate);

  // gin::Wrappable
  static gin::WrapperInfo kWrapperInfo;
  gin::ObjectTemplateBuilder GetObjectTemplateBuilder(
      v8::Isolate* isolate) override;
  const char* GetTypeName() override;
} // namespace api
} // namespace electron
```

----------------------------------------

TITLE: Running Electron Test Suite
DESCRIPTION: Commands for running the full test suite and running specific test specs.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
$ npm run test
$ npm run test -match=menu
```

----------------------------------------

TITLE: Setting LLDB Breakpoint
DESCRIPTION: Example of setting a breakpoint in browser.cc file for debugging the Browser::SetName() function.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
(lldb) breakpoint set --file browser.cc --line 117
Breakpoint 1: where = Electron Framework`atom::Browser::SetName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) + 20 at browser.cc:118, address = 0x000000000015fdb4
```

----------------------------------------

TITLE: Retrieving Shared Texture Handle in C++
DESCRIPTION: This snippet demonstrates how to retrieve the shared texture handle from JavaScript arguments in a node native addon. It extracts the handle information from the provided texture info object.
SOURCE: https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-21_snippet_3

LANGUAGE: c++
CODE:
```
auto textureInfo = args[0];
auto sharedTextureHandle =
    NAPI_GET_PROPERTY_VALUE(textureInfo, "sharedTextureHandle");

size_t handleBufferSize;
uint8_t* handleBufferData;
napi_get_buffer_info(env, sharedTextureHandle,
                      reinterpret_cast<void**>(&handleBufferData),
                      &handleBufferSize);
```

----------------------------------------

TITLE: Building the Addon
DESCRIPTION: This snippet shows the command to build the addon using npm.  It is important to note that you cannot call this script from Node.js directly; instead, it must be called from Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_20

LANGUAGE: shell
CODE:
```
npm run build
```

----------------------------------------

TITLE: HTML Template for Electron Renderer Process
DESCRIPTION: Basic HTML file that will be displayed in the Electron window. It includes Content Security Policy headers and simple content that will be rendered in the application window.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_6

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->
    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self'; script-src 'self'"
    />
    <meta
      http-equiv="X-Content-Security-Policy"
      content="default-src 'self'; script-src 'self'"
    />
    <title>Hello from Electron renderer!</title>
  </head>
  <body>
    <h1>Hello from Electron renderer!</h1>
    <p>👋</p>
  </body>
</html>
```

----------------------------------------

TITLE: Creating JavaScript Wrapper for Native Addon in Electron
DESCRIPTION: Implements a JavaScript wrapper for the native addon, providing a simpler API and handling platform-specific concerns. It uses the 'bindings' module to load the compiled native addon and extends EventEmitter for potential future event-based functionality.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
const EventEmitter = require('events')

// Load the native addon using the 'bindings' module
// This will look for the compiled .node file in various places
const bindings = require('bindings')
const native = bindings('my_addon')

// Create a nice JavaScript wrapper
class MyNativeAddon extends EventEmitter {
  constructor () {
    super()

    // Create an instance of our C++ class
    this.addon = new native.MyAddon()
  }

  // Wrap the C++ method with a nicer JavaScript API
  helloWorld (input = '') {
    if (typeof input !== 'string') {
      throw new TypeError('Input must be a string')
    }
    return this.addon.helloWorld(input)
  }
}

// Export a singleton instance
if (process.platform === 'win32' || process.platform === 'darwin' || process.platform === 'linux') {
  module.exports = new MyNativeAddon()
} else {
  // Provide a fallback for unsupported platforms
  console.warn('Native addon not supported on this platform')

  module.exports = {
    helloWorld: (input) => `Hello from JS! You said: ${input}`
  }
}
```

----------------------------------------

TITLE: Synchronous IPC Communication with ipcRenderer.sendSync
DESCRIPTION: Shows synchronous IPC communication pattern using ipcRenderer.sendSync. While simpler to implement, this approach blocks the renderer process until receiving a response and is not recommended for performance reasons.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
const { ipcMain } = require('electron')
ipcMain.on('synchronous-message', (event, arg) => {
  console.log(arg) // prints "ping" in the Node console
  event.returnValue = 'pong'
})
```

LANGUAGE: javascript
CODE:
```
const { ipcRenderer } = require('electron')

const result = ipcRenderer.sendSync('synchronous-message', 'ping')
console.log(result) // prints "pong" in the DevTools console
```

----------------------------------------

TITLE: Adding API History in Markdown with YAML
DESCRIPTION: This markdown snippet demonstrates how to add an API history block to the documentation for `win.getTrafficLightPosition()`. It includes a YAML block indicating the API was deprecated, linking to the relevant pull request and breaking changes header.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
`````markdown
#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_

<!--
```YAML history
deprecated:
  - pr-url: https://github.com/electron/electron/pull/37878
    breaking-changes-header: deprecated-browserwindowgettrafficlightposition
```
-->

Returns `Point` - The custom position for the traffic light buttons in
frameless window, `{ x: 0, y: 0 }` will be returned when there is no custom
position.
`````
```

----------------------------------------

TITLE: Setting DevTools WebContents via IPC in Main Process
DESCRIPTION: This code snippet demonstrates the main process code for setting the DevTools WebContents using `webContents.setDevToolsWebContents` after receiving an IPC message. It retrieves the target and DevTools WebContents based on their IDs and then associates them.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_27

LANGUAGE: JavaScript
CODE:
```
// Main process
const { ipcMain, webContents } = require('electron')
ipcMain.on('open-devtools', (event, targetContentsId, devtoolsContentsId) => {
  const target = webContents.fromId(targetContentsId)
  const devtools = webContents.fromId(devtoolsContentsId)
  target.setDevToolsWebContents(devtools)
  target.openDevTools()
})
```

----------------------------------------

TITLE: Initializing TouchBarSegmentedControl in Electron
DESCRIPTION: Constructor for creating a new TouchBarSegmentedControl instance with customizable options including segment style, selection mode, segments array, and event handling.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-segmented-control.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
new TouchBarSegmentedControl({
  segmentStyle: 'automatic',
  mode: 'single',
  segments: [],
  selectedIndex: 0,
  change: (selectedIndex, isSelected) => {
    // Handle segment selection
  }
})
```

----------------------------------------

TITLE: Launching Debug Build of Electron Application
DESCRIPTION: Command to start a debugging session by executing a debug build of Electron with an application parameter using PowerShell or CMD.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-windows.md#2025-04-21_snippet_0

LANGUAGE: powershell
CODE:
```
$ ./out/Testing/electron.exe ~/my-electron-app/
```

----------------------------------------

TITLE: Demonstrating nativeImage Create Thumbnail Behavior Change in Electron
DESCRIPTION: Illustrates the updated behavior of `nativeImage.createThumbnailFromPath`, showing how the size parameter now dictates the exact thumbnail size consistently across platforms.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_42

LANGUAGE: javascript
CODE:
```
// Updated Behavior:

// a 128x128 image.
const imagePath = path.join('path', 'to', 'capybara.png')

// Scaling up a smaller image.
const upSize = { width: 256, height: 256 }
nativeImage.createThumbnailFromPath(imagePath, upSize).then(result => {
  console.log(result.getSize()) // { width: 256, height: 256 }
})

// Scaling down a larger image.
const downSize = { width: 64, height: 64 }
nativeImage.createThumbnailFromPath(imagePath, downSize).then(result => {
  console.log(result.getSize()) // { width: 64, height: 64 }
})
```

LANGUAGE: javascript
CODE:
```
// Previous Behavior (on Windows):

// a 128x128 image
const imagePath = path.join('path', 'to', 'capybara.png')
const size = { width: 256, height: 256 }
nativeImage.createThumbnailFromPath(imagePath, size).then(result => {
  console.log(result.getSize()) // { width: 128, height: 128 }
})
```

----------------------------------------

TITLE: Complete Todo List Application Implementation in Win32 C++
DESCRIPTION: This code snippet contains the full implementation of the Todo List application, including necessary headers, data structures, helper functions, and the main GUI creation and message loop.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_14

LANGUAGE: cpp
CODE:
```
#include <windows.h>
#include <windowsx.h>
#include <string>
#include <functional>
#include <chrono>
#include <vector>
#include <commctrl.h>
#include <shellscalingapi.h>
#include <thread>

#pragma comment(lib, "comctl32.lib")
#pragma comment(linker, "\"/manifestdependency:type='win32' \
name='Microsoft.Windows.Common-Controls' version='6.0.0.0' \
processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'\"")

using TodoCallback = std::function<void(const std::string &)>;

static TodoCallback g_todoAddedCallback;
static TodoCallback g_todoUpdatedCallback;
static TodoCallback g_todoDeletedCallback;

struct TodoItem
{
  GUID id;
  std::wstring text;
  int64_t date;

  std::string toJson() const
  {
    OLECHAR *guidString;
    StringFromCLSID(id, &guidString);
    std::wstring widGuid(guidString);
    CoTaskMemFree(guidString);

    // Convert wide string to narrow for JSON
    std::string guidStr(widGuid.begin(), widGuid.end());
    std::string textStr(text.begin(), text.end());

    return "{"
           "\"id\":\"" + guidStr + "\","
           "\"text\":\"" + textStr + "\","
           "\"date\":" + std::to_string(date) +
           "}";
  }
};

namespace cpp_code
{

  std::string hello_world(const std::string &input)
  {
    return "Hello from C++! You said: " + input;
  }

  void setTodoAddedCallback(TodoCallback callback)
  {
    g_todoAddedCallback = callback;
  }

  void setTodoUpdatedCallback(TodoCallback callback)
  {
    g_todoUpdatedCallback = callback;
  }

  void setTodoDeletedCallback(TodoCallback callback)
  {
    g_todoDeletedCallback = callback;
  }

  LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

  // Helper function to scale a value based on DPI
  int Scale(int value, UINT dpi)
  {
    return MulDiv(value, dpi, 96); // 96 is the default DPI
  }

  // Helper function to convert SYSTEMTIME to milliseconds since epoch
  int64_t SystemTimeToMillis(const SYSTEMTIME &st)
  {
    FILETIME ft;
    SystemTimeToFileTime(&st, &ft);
    ULARGE_INTEGER uli;
    uli.LowPart = ft.dwLowDateTime;
    uli.HighPart = ft.dwHighDateTime;
    return (uli.QuadPart - 116444736000000000ULL) / 10000;
  }

  void ResetControls(HWND hwnd)
  {
    HWND hEdit = GetDlgItem(hwnd, 1);
    HWND hDatePicker = GetDlgItem(hwnd, 4);
    HWND hAddButton = GetDlgItem(hwnd, 2);

    // Clear text
    SetWindowTextW(hEdit, L"");

    // Reset date to current
    SYSTEMTIME currentTime;
    GetLocalTime(&currentTime);
    DateTime_SetSystemtime(hDatePicker, GDT_VALID, &currentTime);
  }

  void hello_gui() {
    // Launch GUI in a separate thread
    std::thread guiThread([]() {
      // Enable Per-Monitor DPI awareness
      SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2);

      // Initialize Common Controls
      INITCOMMONCONTROLSEX icex;
      icex.dwSize = sizeof(INITCOMMONCONTROLSEX);
      icex.dwICC = ICC_STANDARD_CLASSES | ICC_WIN95_CLASSES;
      InitCommonControlsEx(&icex);

      // Register window class
      WNDCLASSEXW wc = {};
      wc.cbSize = sizeof(WNDCLASSEXW);
      wc.lpfnWndProc = WindowProc;
      wc.hInstance = GetModuleHandle(nullptr);
      wc.lpszClassName = L"TodoApp";
      RegisterClassExW(&wc);

      // Get the DPI for the monitor
      UINT dpi = GetDpiForSystem();

      // Create window
      HWND hwnd = CreateWindowExW(
        0, L"TodoApp", L"Todo List",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT,
        Scale(500, dpi), Scale(500, dpi),
        nullptr, nullptr,
        GetModuleHandle(nullptr), nullptr
      );

      if (hwnd == nullptr) {
        return;
      }

      // Create the modern font with DPI-aware size
      HFONT hFont = CreateFontW(
        -Scale(14, dpi),              // Height (scaled)
        0,                            // Width
        0,                            // Escapement
        0,                            // Orientation
        FW_NORMAL,                    // Weight
        FALSE,                        // Italic
        FALSE,                        // Underline
        FALSE,                        // StrikeOut
        DEFAULT_CHARSET,              // CharSet
        OUT_DEFAULT_PRECIS,           // OutPrecision
        CLIP_DEFAULT_PRECIS,          // ClipPrecision
        CLEARTYPE_QUALITY,            // Quality
        DEFAULT_PITCH | FF_DONTCARE,  // Pitch and Family
        L"Segoe UI"                   // Font face name
      );

      // Create input controls with scaled positions and sizes
      HWND hEdit = CreateWindowExW(0, WC_EDITW, L"",
        WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
        Scale(10, dpi), Scale(10, dpi),
        Scale(250, dpi), Scale(25, dpi),
        hwnd, (HMENU)1, GetModuleHandle(nullptr), nullptr);
      SendMessageW(hEdit, WM_SETFONT, (WPARAM)hFont, TRUE);

      // Create date picker
      HWND hDatePicker = CreateWindowExW(0, DATETIMEPICK_CLASSW, L"",
        WS_CHILD | WS_VISIBLE | DTS_SHORTDATECENTURYFORMAT,
        Scale(270, dpi), Scale(10, dpi),
        Scale(100, dpi), Scale(25, dpi),
        hwnd, (HMENU)4, GetModuleHandle(nullptr), nullptr);
      SendMessageW(hDatePicker, WM_SETFONT, (WPARAM)hFont, TRUE);

      HWND hButton = CreateWindowExW(0, WC_BUTTONW, L"Add",
        WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
        Scale(380, dpi), Scale(10, dpi),
        Scale(50, dpi), Scale(25, dpi),
        hwnd, (HMENU)2, GetModuleHandle(nullptr), nullptr);
      SendMessageW(hButton, WM_SETFONT, (WPARAM)hFont, TRUE);

      HWND hListBox = CreateWindowExW(0, WC_LISTBOXW, L"",
        WS_CHILD | WS_VISIBLE | WS_BORDER | WS_VSCROLL | LBS_NOTIFY,
        Scale(10, dpi), Scale(45, dpi),
        Scale(460, dpi), Scale(400, dpi),
        hwnd, (HMENU)3, GetModuleHandle(nullptr), nullptr);
      SendMessageW(hListBox, WM_SETFONT, (WPARAM)hFont, TRUE);

      ShowWindow(hwnd, SW_SHOW);

      // Message loop
      MSG msg = {};
      while (GetMessage(&msg, nullptr, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
      }

      // Clean up
      DeleteObject(hFont);
    });

    // Detach the thread so it runs independently
    guiThread.detach();
  }

  // Global vector to store todos
  static std::vector<TodoItem> g_todos;

  void NotifyCallback(const TodoCallback &callback, const std::string &json)
  {
    if (callback)
    {
      callback(json);
      // Process pending messages
      MSG msg;
      while (PeekMessage(&msg, nullptr, 0, 0, PM_REMOVE))
      {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
      }
    }
  }

  std::wstring FormatTodoDisplay(const std::wstring &text, const SYSTEMTIME &st)
  {
    wchar_t dateStr[64];
    GetDateFormatW(LOCALE_USER_DEFAULT, DATE_SHORTDATE, &st, nullptr, dateStr, 64);
    return text + L" - " + dateStr;
  }

  LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
  {
    switch (uMsg)
    {
      case WM_COMMAND:
      {
        HWND hListBox = GetDlgItem(hwnd, 3);
        int cmd = LOWORD(wParam);

        switch (cmd)
        {
          case 2: // Add button
          {
            wchar_t buffer[256];
            GetDlgItemTextW(hwnd, 1, buffer, 256);

            if (wcslen(buffer) > 0)
            {
              SYSTEMTIME st;
              HWND hDatePicker = GetDlgItem(hwnd, 4);
              DateTime_GetSystemtime(hDatePicker, &st);

              TodoItem todo;
              CoCreateGuid(&todo.id);
              todo.text = buffer;

```

----------------------------------------

TITLE: Deprecating BrowserView Methods in BrowserWindow - JavaScript
DESCRIPTION: Lists the BrowserWindow methods that were deprecated along with the BrowserView class itself in Electron 30. These methods were used to interact with BrowserView instances. Users should transition to using WebContentsView and its related APIs.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
BrowserWindow.fromBrowserView(browserView)
win.setBrowserView(browserView)
win.getBrowserView()
win.addBrowserView(browserView)
win.removeBrowserView(browserView)
win.setTopBrowserView(browserView)
win.getBrowserViews()
```

----------------------------------------

TITLE: Buffer Format Preference for Video Capture
DESCRIPTION: Specifies the preferred buffer format for video capture to enable shared texture mode
SOURCE: https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-21_snippet_2

LANGUAGE: cpp
CODE:
```
viz::mojom::BufferFormatPreference::kPreferGpuMemoryBuffer
```

----------------------------------------

TITLE: Initializing TouchBarSlider Constructor
DESCRIPTION: Creates a new TouchBarSlider instance with configurable options including label, value range, and change callback function.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-slider.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
new TouchBarSlider({
  label: 'Slider Label',
  value: 50,
  minValue: 0,
  maxValue: 100,
  change: (newValue) => {
    console.log(`Slider value changed to ${newValue}`);
  }
})
```

----------------------------------------

TITLE: Package Configuration for Native Win32 Addon
DESCRIPTION: The package.json configuration for a native Win32 addon project, including script commands for building and cleaning the project and dependencies on bindings and node-addon-api libraries.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_1

LANGUAGE: json
CODE:
```
{
  "name": "cpp-win32",
  "version": "1.0.0",
  "description": "A demo module that exposes C++ code to Electron",
  "main": "js/index.js",
  "author": "Your Name",
  "scripts": {
    "clean": "rm -rf build_swift && rm -rf build",
    "build-electron": "electron-rebuild",
    "build": "node-gyp configure && node-gyp build"
  },
  "license": "MIT",
  "dependencies": {
    "bindings": "^1.5.0",
    "node-addon-api": "^8.3.0"
  }
}
```

----------------------------------------

TITLE: History Restoration - Electron NavigationHistory
DESCRIPTION: Method to restore navigation history with specified entries and state, including form values and scroll positions.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
navigationHistory.restore({
  entries: NavigationEntry[],
  index: Integer // optional
})
```

----------------------------------------

TITLE: Creating JavaScript Wrapper for C++ Addon
DESCRIPTION: JavaScript wrapper class that extends EventEmitter to provide a cleaner interface for the C++ addon. Handles platform-specific initialization, event forwarding, and data parsing.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_19

LANGUAGE: javascript
CODE:
```
const EventEmitter = require('events')

class CppWin32Addon extends EventEmitter {
  constructor() {
    super()

    if (process.platform !== 'win32') {
      throw new Error('This module is only available on Windows')
    }

    const native = require('bindings')('cpp_addon')
    this.addon = new native.CppWin32Addon();

    this.addon.on('todoAdded', (payload) => {
      this.emit('todoAdded', this.#parse(payload))
    });

    this.addon.on('todoUpdated', (payload) => {
      this.emit('todoUpdated', this.#parse(payload))
    });

    this.addon.on('todoDeleted', (payload) => {
      this.emit('todoDeleted', this.#parse(payload))
    });
  }

  helloWorld(input = "") {
    return this.addon.helloWorld(input)
  }

  helloGui() {
    this.addon.helloGui()
  }

  #parse(payload) {
    const parsed = JSON.parse(payload)

    return { ...parsed, date: new Date(parsed.date) }
  }
}

if (process.platform === 'win32') {
  module.exports = new CppWin32Addon()
} else {
  module.exports = {}
}
```

----------------------------------------

TITLE: Using Deprecated BrowserWindow Extension APIs (Load) - Electron JavaScript
DESCRIPTION: Shows the usage of the deprecated `BrowserWindow.addExtension()` and `BrowserWindow.addDevToolsExtension()` methods. These APIs have been removed and replaced by `session.loadExtension()`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_68

LANGUAGE: javascript
CODE:
```
// Removed in Electron 13
BrowserWindow.addExtension(path)
BrowserWindow.addDevToolsExtension(path)
```

----------------------------------------

TITLE: Implementing JavaScript Methods in Objective-C++
DESCRIPTION: This snippet implements three methods that can be called from JavaScript: `HelloWorld`, which takes a string as input and returns a string; `HelloGui`, which is a simple wrapper around an Objective-C function; and `On`, which allows JavaScript to register event listeners. These methods create a bridge between Objective-C code and the JavaScript world.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_17

LANGUAGE: objectivec
CODE:
```
Napi::Value HelloWorld(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();

    if (info.Length() < 1 || !info[0].IsString()) {
        Napi::TypeError::New(env, "Expected string argument").ThrowAsJavaScriptException();
        return env.Null();
    }

    std::string input = info[0].As<Napi::String>();
    std::string result = objc_code::hello_world(input);

    return Napi::String::New(env, result);
}

void HelloGui(const Napi::CallbackInfo& info) {
    objc_code::hello_gui();
}

Napi::Value On(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();

    if (info.Length() < 2 || !info[0].IsString() || !info[1].IsFunction()) {
        Napi::TypeError::New(env, "Expected (string, function) arguments").ThrowAsJavaScriptException();
        return env.Undefined();
    }

    callbacks.Value().Set(info[0].As<Napi::String>(), info[1].As<Napi::Function>());
    return env.Undefined();
}
```

----------------------------------------

TITLE: Installing ARM64 Cross-Compilation Dependencies
DESCRIPTION: Commands to install dependencies for cross-compiling to ARM64 architecture.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
sudo apt-get install libc6-dev-arm64-cross linux-libc-dev-arm64-cross \
                       g++-aarch64-linux-gnu
```

----------------------------------------

TITLE: Implementing Custom Spell Check Provider
DESCRIPTION: Implementation example of a custom spell check provider using node-spellchecker library to check spelling asynchronously.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { webFrame } = require('electron')
const spellChecker = require('spellchecker')
webFrame.setSpellCheckProvider('en-US', {
  spellCheck (words, callback) {
    setTimeout(() => {
      const misspelled = words.filter(x => spellchecker.isMisspelled(x))
      callback(misspelled)
    }, 0)
  }
})
```

----------------------------------------

TITLE: JavaScript Call Stack Collection in Electron
DESCRIPTION: Example showing how to collect JavaScript call stacks from potentially unresponsive frames using the experimental collectJavaScriptCallStack() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame-main.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.commandLine.appendSwitch('enable-features', 'DocumentPolicyIncludeJSCallStacksInCrashReports')

app.on('web-contents-created', (_, webContents) => {
  webContents.on('unresponsive', async () => {
    // Interrupt execution and collect call stack from unresponsive renderer
    const callStack = await webContents.mainFrame.collectJavaScriptCallStack()
    console.log('Renderer unresponsive\n', callStack)
  })
})
```

----------------------------------------

TITLE: Certificate Verification Error Example
DESCRIPTION: Error output showing SSL certificate verification failures when running Python update scripts, indicating the need to install certifi package.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-macos.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
________ running 'python3 src/tools/clang/scripts/update.py' in '/Users/<user>/electron'\nDownloading https://commondatastorage.googleapis.com/chromium-browser-clang/Mac_arm64/clang-llvmorg-15-init-15652-g89a99ec9-1.tgz\n<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)>\nRetrying in 5 s ...\nDownloading https://commondatastorage.googleapis.com/chromium-browser-clang/Mac_arm64/clang-llvmorg-15-init-15652-g89a99ec9-1.tgz\n<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)>\nRetrying in 10 s ...\nDownloading https://commondatastorage.googleapis.com/chromium-browser-clang/Mac_arm64/clang-llvmorg-15-init-15652-g89a99ec9-1.tgz\n<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)>\nRetrying in 20 s ...
```

----------------------------------------

TITLE: Using Deprecated BrowserWindow Extension APIs (Get) - Electron JavaScript
DESCRIPTION: Shows the usage of the deprecated `BrowserWindow.getExtensions()` and `BrowserWindow.getDevToolsExtensions()` methods. These APIs have been removed and replaced by `session.getAllExtensions()`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_72

LANGUAGE: javascript
CODE:
```
// Removed in Electron 13
BrowserWindow.getExtensions()
BrowserWindow.getDevToolsExtensions()
```

----------------------------------------

TITLE: Configuring System Clang Path
DESCRIPTION: Command to configure GN build system to use system-installed Clang instead of downloaded binaries.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_9

LANGUAGE: sh
CODE:
```
gn gen out/Testing --args='import("//electron/build/args/testing.gn") clang_base_path = "/usr/local/bin"'
```

----------------------------------------

TITLE: NPM Lint Command
DESCRIPTION: Command to run code style checking using cpplint and eslint.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/coding-style.md#2025-04-21_snippet_3

LANGUAGE: Shell
CODE:
```
npm run lint
```

----------------------------------------

TITLE: JavaScript Constant Declaration Example
DESCRIPTION: Example showing preferred constant naming convention using uppercase for primitive values.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/coding-style.md#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
const NUMBER_OF_RETRIES = 5
```

----------------------------------------

TITLE: Finding commit using grep and git blame in Bash
DESCRIPTION: These bash commands demonstrate how to use `grep` and `git blame` to find the commit associated with the deprecation of `BrowserWindow.getTrafficLightPosition()`. The commands help identify the pull request that introduced the breaking change.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ grep -n "BrowserWindow.getTrafficLightPosition" docs/breaking-changes.md 
523:### Deprecated: `BrowserWindow.getTrafficLightPosition()`
525:`BrowserWindow.getTrafficLightPosition()` has been deprecated, the

$ git blame -L523,524 -- docs/breaking-changes.md
1e206deec3e (Keeley Hammond 2023-04-06 21:23:29 -0700 523) ### Deprecated: `BrowserWindow.getTrafficLightPosition()`
1e206deec3e (Keeley Hammond 2023-04-06 21:23:29 -0700 524)

$ git log -1 1e206deec3e
commit 1e206deec3ef142460c780307752a84782f9baed (tag: v26.0.0-nightly.20230407)
Author: Keeley Hammond <vertedinde@electronjs.org>
Date:   Thu Apr 6 21:23:29 2023 -0700

    docs: update E24/E25 breaking changes (#37878) <-- This is the associated Pull Request
```

----------------------------------------

TITLE: Remove webview attribute guestinstance (HTML)
DESCRIPTION: Notes the removal of the `guestinstance` attribute on the `<webview>` tag. The document states there is no direct replacement for this attribute.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_132

LANGUAGE: html
CODE:
```
// Removed
webview.setAttribute('guestinstance', instanceId)
```

----------------------------------------

TITLE: Deprecated Tray.setHighlightMode Method
DESCRIPTION: The `Tray.setHighlightMode` method is deprecated and will be removed without a replacement in Electron v7.0 due to limitations with Apple's native substitute implementation on macOS Catalina.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_103

LANGUAGE: javascript
CODE:
```
// Deprecated
tray.setHighlightMode(mode)
```

----------------------------------------

TITLE: Remove webview keyboard listeners onkeydown and onkeyup (JS)
DESCRIPTION: Notes that keyboard listeners (`onkeydown`, `onkeyup`) no longer function directly on the `<webview>` tag element itself. Developers need to find alternative methods for capturing keyboard input within or related to webview content.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_133

LANGUAGE: js
CODE:
```
// Keyboard listeners no longer work on webview tag
webview.onkeydown = () => { /* handler */ }
webview.onkeyup = () => { /* handler */ }
```

----------------------------------------

TITLE: Deprecated 'memory' Property in app.getAppMetrics() Result
DESCRIPTION: While `app.getAppMetrics()` replaces `getAppMemoryInfo`, the `memory` property on the process metrics object returned by `getAppMetrics()` is deprecated. The documentation implies other properties should be used instead, though specific replacements aren't shown in this snippet.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_113

LANGUAGE: javascript
CODE:
```
// Deprecated
const metrics = app.getAppMetrics()
const { memory } = metrics[0] // Deprecated property
```

----------------------------------------

TITLE: Defining ObjcAddon Class with N-API
DESCRIPTION: This code defines the ObjcAddon class, inheriting from Napi::ObjectWrap. It includes a static Init method to register JavaScript methods with N-API, and a CallbackData structure for passing data between threads when callbacks are triggered.  The Init method defines and registers the native methods helloWorld, helloGui and on.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_15

LANGUAGE: objective-c++
CODE:
```
#include <napi.h>
#include <string>
#include "../include/objc_code.h"

class ObjcAddon : public Napi::ObjectWrap<ObjcAddon> {
public:
    static Napi::Object Init(Napi::Env env, Napi::Object exports) {
        Napi::Function func = DefineClass(env, "ObjcMacosAddon", {
            InstanceMethod("helloWorld", &ObjcAddon::HelloWorld),
            InstanceMethod("helloGui", &ObjcAddon::HelloGui),
            InstanceMethod("on", &ObjcAddon::On)
        });

        Napi::FunctionReference* constructor = new Napi::FunctionReference();
        *constructor = Napi::Persistent(func);
        env.SetInstanceData(constructor);

        exports.Set("ObjcMacosAddon", func);
        return exports;
    }

    struct CallbackData {
        std::string eventType;
        std::string payload;
        ObjcAddon* addon;
    };

    // More code to follow later...
    // Specifically, we'll add ObjcAddon here in the next step
};

Napi::Object Init(Napi::Env env, Napi::Object exports) {
    return ObjcAddon::Init(env, exports);
}

NODE_API_MODULE(objc_addon, Init)
```

----------------------------------------

TITLE: Deprecated API - Go Forward
DESCRIPTION: This YAML snippet documents the deprecation of the `contents.goForward()` API in Electron, specifying the pull request and breaking changes header.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_17

LANGUAGE: YAML
CODE:
```
deprecated:
  - pr-url: https://github.com/electron/electron/pull/41752
    breaking-changes-header: deprecated-clearhistory-cangoback-goback-cangoforward-goforward-gotoindex-cangotooffset-gotooffset-on-webcontents
```

----------------------------------------

TITLE: Running Autoninja Build with Reclient
DESCRIPTION: Command to execute Electron build using autoninja with Reclient integration. Sets a concurrent job limit of 200, which is the maximum allowed value for the RBE system.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/reclient.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
autoninja -C out/Testing electron -j 200
```

----------------------------------------

TITLE: Scrolling and Selection in Webview
DESCRIPTION: Methods to control scrolling and text selection in the webview, including scrolling to extremes and adjusting selection boundaries.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
<webview>.scrollToTop()
```

LANGUAGE: javascript
CODE:
```
<webview>.scrollToBottom()
```

LANGUAGE: javascript
CODE:
```
<webview>.adjustSelection(options)
```

----------------------------------------

TITLE: Installing Selenium WebDriver for Electron Testing
DESCRIPTION: Command to install Selenium WebDriver package, which provides bindings to interact with WebDriver APIs for automated testing of Electron applications.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_7

LANGUAGE: shell
CODE:
```
npm install --save-dev selenium-webdriver
```

----------------------------------------

TITLE: C++ Class Wrapper for Node.js Integration
DESCRIPTION: Implements a class that wraps C++ code for JavaScript exposure, inheriting from Napi::ObjectWrap with basic initialization setup.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_16

LANGUAGE: cpp
CODE:
```
class CppAddon : public Napi::ObjectWrap<CppAddon> {
public:
    static Napi::Object Init(Napi::Env env, Napi::Object exports) {
        Napi::Function func = DefineClass(env, "CppWin32Addon", {
            // We'll add methods here later
        });

        Napi::FunctionReference* constructor = new Napi::FunctionReference();
        *constructor = Napi::Persistent(func);
        env.SetInstanceData(constructor);

        exports.Set("CppWin32Addon", func);
        return exports;
    }

    CppAddon(const Napi::CallbackInfo& info)
        : Napi::ObjectWrap<CppAddon>(info) {
        // Constructor logic will go here
    }

private:
    // Will add private members and methods later
};
```

----------------------------------------

TITLE: Debug Build Configuration in GN
DESCRIPTION: GN build configuration file for enabling debug mode with symbols. Sets debug flags and symbol levels for detailed debugging.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging.md#2025-04-21_snippet_2

LANGUAGE: gn
CODE:
```
import("//electron/build/args/testing.gn")
is_debug = true
symbol_level = 2
forbid_non_component_debug_builds = false
```

----------------------------------------

TITLE: Generating Visual Studio Project with GN
DESCRIPTION: Command to generate Visual Studio 2017 project files using GN build system.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-windows.md#2025-04-21_snippet_1

LANGUAGE: powershell
CODE:
```
$ gn gen out/Testing --ide=vs2017
```

----------------------------------------

TITLE: JavaScript Engine Flags in Electron
DESCRIPTION: Example of passing flags to the V8 JavaScript engine when launching an Electron application. This demonstrates enabling harmony proxies and collections features.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
$ electron --js-flags="--harmony_proxies --harmony_collections" your-app
```

----------------------------------------

TITLE: Objective-C Code Structure (objc_code.mm)
DESCRIPTION: This Objective-C++ file implements the native macOS GUI. It imports necessary frameworks (Foundation and AppKit), defines the callback type, and declares a static variable to store the JavaScript callback function. It sets up the basic structure required to create a native macOS GUI using AppKit.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_3

LANGUAGE: objc
CODE:
```
#import <Foundation/Foundation.h>
#import <AppKit/AppKit.h>
#import <string>
#import <functional>
#import "../include/objc_code.h"

using TodoCallback = std::function<void(const std::string&)>;

static TodoCallback g_todoAddedCallback;

// More code to follow later...
```

----------------------------------------

TITLE: Accessing TouchBarSegmentedControl Properties
DESCRIPTION: Examples of accessing and modifying TouchBarSegmentedControl instance properties including segment style, segments array, selected index, and selection mode.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-segmented-control.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Accessing properties
touchBarSegmentedControl.segmentStyle = 'rounded';
touchBarSegmentedControl.segments = [];
touchBarSegmentedControl.selectedIndex = 1;
touchBarSegmentedControl.mode = 'multiple';
```

----------------------------------------

TITLE: Configuring China non-CDN mirror with custom directory format
DESCRIPTION: Shell commands to configure both the mirror URL and custom directory format for downloading Electron binaries from China's non-CDN mirror.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_6

LANGUAGE: shell
CODE:
```
ELECTRON_MIRROR="https://npmmirror.com/mirrors/electron/"
ELECTRON_CUSTOM_DIR="{{ version }}"
```

----------------------------------------

TITLE: Installing Rosetta 2 Command for MacOS arm64
DESCRIPTION: Command to install Rosetta 2 on arm64 machines for cross-compilation support between x64 and arm64 architectures.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-macos.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ softwareupdate --install-rosetta
```

----------------------------------------

TITLE: Adding a Table View to the Objective-C Window
DESCRIPTION: This Objective-C code snippet extends the `setupWindow` method by adding a table view within a scroll view. It configures the table with two columns: one for the todo text and one for the date, sets up the data source and delegate for the table view, and adds the table to the scroll view before adding the scroll view to the content view.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_8

LANGUAGE: objc
CODE:
```
// Previous code...

- (void)setupWindow {
  // Previous setupWindow() code...

  // Create a scroll view for the table
    NSScrollView *scrollView = [[NSScrollView alloc] initWithFrame:NSMakeRect(20, 20, 360, 230)];
    [scrollView setBorderType:NSBezelBorder];
    [scrollView setHasVerticalScroller:YES];
    [contentView addSubview:scrollView];

    // Create table view
    _tableView = [[NSTableView alloc] initWithFrame:NSMakeRect(0, 0, 360, 230)];

    // Add a column for the todo text
    NSTableColumn *textColumn = [[NSTableColumn alloc] initWithIdentifier:@"text"];
    [textColumn setWidth:240];
    [textColumn setTitle:@"Todo"];
    [_tableView addTableColumn:textColumn];

    // Add a column for the date
    NSTableColumn *dateColumn = [[NSTableColumn alloc] initWithIdentifier:@"date"];
    [dateColumn setWidth:100];
    [dateColumn setTitle:@"Date"];
    [_tableView addTableColumn:dateColumn];

    // Set the table's delegate and data source
    [_tableView setDataSource:self];
    [_tableView setDelegate:self];

    // Add the table to the scroll view
    [scrollView setDocumentView:_tableView];
}

// More code to follow later...
```

----------------------------------------

TITLE: Initializing the Window and Basic UI in Objective-C
DESCRIPTION: This code snippet demonstrates the setup of the main window and initial UI elements, including a text field, date picker, and add button, using Objective-C and the Cocoa framework. It instantiates the UI controls and adds them as subviews to the content view of the main window.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_7

LANGUAGE: objc
CODE:
```
// Previous code...

- (void)setupWindow {
    // Create a window
    NSRect frame = NSMakeRect(0, 0, 400, 300);
    NSWindow *window = [[NSWindow alloc] initWithContentRect:frame
                                         styleMask:NSWindowStyleMaskTitled | NSWindowStyleMaskClosable | NSWindowStyleMaskResizable
                                         backing:NSBackingStoreBuffered
                                         defer:NO];
    [window setTitle:@"Todo List"];
    [window center];
    self.window = window;

    // Set up the content view with auto layout
    NSView *contentView = [window contentView];

    // Create text field
    _textField = [[NSTextField alloc] initWithFrame:NSMakeRect(20, 260, 200, 24)];
    [_textField setPlaceholderString:@"Enter a todo..."];
    [contentView addSubview:_textField];

    // Create date picker
    _datePicker = [[NSDatePicker alloc] initWithFrame:NSMakeRect(230, 260, 100, 24)];
    [_datePicker setDatePickerStyle:NSDatePickerStyleTextField];
    [_datePicker setDatePickerElements:NSDatePickerElementFlagYearMonthDay];
    [contentView addSubview:_datePicker];

    // Create add button
    _addButton = [[NSButton alloc] initWithFrame:NSMakeRect(340, 260, 40, 24)];
    [_addButton setTitle:@"Add"];
    [_addButton setBezelStyle:NSBezelStyleRounded];
    [_addButton setTarget:self];
    [_addButton setAction:@selector(addTodo:)];
    [contentView addSubview:_addButton];

    // More UI elements to follow in the next step...
}

// More code to follow later...
```

----------------------------------------

TITLE: ObjcAddon Constructor and Threadsafe Callback Setup
DESCRIPTION: This code defines the constructor for the ObjcAddon class. It initializes member variables, creates a threadsafe function using N-API to handle callbacks from other threads, defines a lambda for creating callback functions for specific event types, and registers the 'todoAdded' callback with the Objective-C code. The constructor makes use of napi_create_threadsafe_function for handling asynchronous callbacks.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_16

LANGUAGE: objective-c++
CODE:
```
ObjcAddon(const Napi::CallbackInfo& info)
    : Napi::ObjectWrap<ObjcAddon>(info)
    , env_(info.Env())
    , emitter(Napi::Persistent(Napi::Object::New(info.Env())))
    , callbacks(Napi::Persistent(Napi::Object::New(info.Env())))
    , tsfn_(nullptr) {

    napi_status status = napi_create_threadsafe_function(
        env_,
        nullptr,
        nullptr,
        Napi::String::New(env_, "ObjcCallback"),
        0,
        1,
        nullptr,
        nullptr,
        this,
        [](napi_env env, napi_value js_callback, void* context, void* data) {
            auto* callbackData = static_cast<CallbackData*>(data);
            if (!callbackData) return;

            Napi::Env napi_env(env);
            Napi::HandleScope scope(napi_env);

            auto addon = static_cast<ObjcAddon*>(context);
            if (!addon) {
                delete callbackData;
                return;
            }

            try {
                auto callback = addon->callbacks.Value().Get(callbackData->eventType).As<Napi::Function>();
                if (callback.IsFunction()) {
                    callback.Call(addon->emitter.Value(), {Napi::String::New(napi_env, callbackData->payload)});
                }
            } catch (...) {}

            delete callbackData;
        },
        &tsfn_
    );

    if (status != napi_ok) {
        Napi::Error::New(env_, "Failed to create threadsafe function").ThrowAsJavaScriptException();
        return;
    }

    // Set up the callbacks
    auto makeCallback = [this](const std::string& eventType) {
        return [this, eventType](const std::string& payload) {
            if (tsfn_ != nullptr) {
                auto* data = new CallbackData{
                    eventType,
                    payload,
                    this
                };
                napi_call_threadsafe_function(tsfn_, data, napi_tsfn_blocking);
            }
        };
    };

    objc_code::setTodoAddedCallback(makeCallback("todoAdded"));
}

~ObjcAddon() {
    if (tsfn_ != nullptr) {
        napi_release_threadsafe_function(tsfn_, napi_tsfn_release);
        tsfn_ = nullptr;
    }
}

private:
    Napi::Env env_;
    Napi::ObjectReference emitter;
    Napi::ObjectReference callbacks;
    napi_threadsafe_function tsfn_;
```

----------------------------------------

TITLE: Implementing Basic Functions and Helper Methods for Win32 GUI
DESCRIPTION: Contains functions for callback registration, window message handling, DPI scaling, and time conversion between Windows SYSTEMTIME and JavaScript milliseconds since epoch format.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_7

LANGUAGE: cpp
CODE:
```
namespace cpp_code
{
  std::string hello_world(const std::string &input)
  {
    return "Hello from C++! You said: " + input;
  }

  void setTodoAddedCallback(TodoCallback callback)
  {
    g_todoAddedCallback = callback;
  }

  // Window procedure function that handles window messages
  // hwnd: Handle to the window
  // uMsg: Message code
  // wParam: Additional message-specific information
  // lParam: Additional message-specific information
  LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

  // Helper function to scale a value based on DPI
  int Scale(int value, UINT dpi)
  {
    return MulDiv(value, dpi, 96); // 96 is the default DPI
  }

  // Helper function to convert SYSTEMTIME to milliseconds since epoch
  int64_t SystemTimeToMillis(const SYSTEMTIME &st)
  {
    FILETIME ft;
    SystemTimeToFileTime(&st, &ft);
    ULARGE_INTEGER uli;
    uli.LowPart = ft.dwLowDateTime;
    uli.HighPart = ft.dwHighDateTime;
    return (uli.QuadPart - 116444736000000000ULL) / 10000;
  }

  // More code to follow later...
}
```

----------------------------------------

TITLE: Creating a Separate GUI Thread with Win32 Window Setup
DESCRIPTION: Initializes a GUI thread to prevent blocking the Node.js event loop, sets up DPI awareness, registers a window class, and creates a window with a message loop for processing Windows events.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_8

LANGUAGE: cpp
CODE:
```
void hello_gui() {
  // Launch GUI in a separate thread
  std::thread guiThread([]() {
    // Enable Per-Monitor DPI awareness
    SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2);

    // Initialize Common Controls
    INITCOMMONCONTROLSEX icex;
    icex.dwSize = sizeof(INITCOMMONCONTROLSEX);
    icex.dwICC = ICC_STANDARD_CLASSES | ICC_WIN95_CLASSES;
    InitCommonControlsEx(&icex);

    // Register window class
    WNDCLASSEXW wc = {};
    wc.cbSize = sizeof(WNDCLASSEXW);
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = GetModuleHandle(nullptr);
    wc.lpszClassName = L"TodoApp";
    RegisterClassExW(&wc);

    // Get the DPI for the monitor
    UINT dpi = GetDpiForSystem();

    // Create window
    HWND hwnd = CreateWindowExW(
      0, L"TodoApp", L"Todo List",
      WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, CW_USEDEFAULT,
      Scale(500, dpi), Scale(500, dpi),
      nullptr, nullptr,
      GetModuleHandle(nullptr), nullptr
    );

    if (hwnd == nullptr) {
      return;
    }

    // Controls go here! The window is currently empty,
    // we'll add controls in the next step.

    ShowWindow(hwnd, SW_SHOW);

    // Message loop
    MSG msg = {};
    while (GetMessage(&msg, nullptr, 0, 0)) {
      TranslateMessage(&msg);
      DispatchMessage(&msg);
    }

    // Clean up
    DeleteObject(hFont);
  });

  // Detach the thread so it runs independently
  guiThread.detach();
}
```

----------------------------------------

TITLE: Defining C++ Interface for Native Addon in Electron
DESCRIPTION: Creates a header file 'cpp_code.h' that defines the C++ interface for the native addon. It includes a namespace and a function declaration for a simple 'hello_world' function.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_6

LANGUAGE: cpp
CODE:
```
#pragma once
#include <string>

namespace cpp_code {
    // A simple function that takes a string input and returns a string
    std::string hello_world(const std::string& input);
} // namespace cpp_code
```

----------------------------------------

TITLE: Initializing TouchBarScrubber in Electron
DESCRIPTION: Constructor for creating a new TouchBarScrubber instance with configurable options including items, selection handlers, styles, and behavior modes.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-scrubber.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
new TouchBarScrubber({
  items: scrubberItems,
  select: (selectedIndex) => {
    // Handle selection
  },
  highlight: (highlightedIndex) => {
    // Handle highlight
  },
  selectedStyle: 'background',
  overlayStyle: 'none',
  showArrowButtons: false,
  mode: 'free',
  continuous: true
})
```

----------------------------------------

TITLE: Configuring Git for Long Paths
DESCRIPTION: Git configuration command to enable support for long pathnames on Windows systems.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-windows.md#2025-04-21_snippet_3

LANGUAGE: powershell
CODE:
```
$ git config --system core.longpaths true
```

----------------------------------------

TITLE: Initializing TouchBarButton Constructor
DESCRIPTION: Creates a new TouchBarButton instance with configurable options including label, accessibility features, styling, and click behavior. Available only in the main process.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-button.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
new TouchBarButton({
  label: string,
  accessibilityLabel: string,
  backgroundColor: string,
  icon: NativeImage | string,
  iconPosition: string,
  click: Function,
  enabled: boolean
})
```

----------------------------------------

TITLE: Defining PaymentDiscount Object Properties in Markdown
DESCRIPTION: This snippet defines the properties of the PaymentDiscount object. It includes the identifier, keyIdentifier, nonce, signature, and timestamp, each with a description of its purpose and format.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/payment-discount.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# PaymentDiscount Object

* `identifier` string - A string used to uniquely identify a discount offer for a product.
* `keyIdentifier` string - A string that identifies the key used to generate the signature.
* `nonce` string - A universally unique ID (UUID) value that you define.
* `signature` string - A UTF-8 string representing the properties of a specific discount offer, cryptographically signed.
* `timestamp` number - The date and time of the signature's creation in milliseconds, formatted in Unix epoch time.
```

----------------------------------------

TITLE: Defining UploadData Object Properties in Markdown
DESCRIPTION: This snippet outlines the properties of the UploadData object, including the bytes buffer for content, optional file path, and optional blob UUID. It also references the ses.getBlobData method for retrieving blob data.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/upload-data.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# UploadData Object

* `bytes` Buffer - Content being sent.
* `file` string (optional) - Path of file being uploaded.
* `blobUUID` string (optional) - UUID of blob data. Use [ses.getBlobData](../session.md#sesgetblobdataidentifier) method
  to retrieve the data.
```

----------------------------------------

TITLE: Defining IpcMainInvokeEvent Object Properties in Markdown
DESCRIPTION: This snippet outlines the properties of the IpcMainInvokeEvent object, including type, processId, frameId, sender, and senderFrame. It provides details on the data types and possible values for each property.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/ipc-main-invoke-event.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# IpcMainInvokeEvent Object extends `Event`

* `type` String - Possible values include `frame`
* `processId` Integer - The internal ID of the renderer process that sent this message
* `frameId` Integer - The ID of the renderer frame that sent this message
* `sender` [WebContents](../web-contents.md) - Returns the `webContents` that sent the message
* `senderFrame` [WebFrameMain](../web-frame-main.md) | null _Readonly_ - The frame that sent this message. May be `null` if accessed after the frame has either navigated or been destroyed.
```

----------------------------------------

TITLE: Creating Symlink for libtinfo.so.5
DESCRIPTION: Command to create a symbolic link for resolving libtinfo.so.5 dependency issues.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_8

LANGUAGE: sh
CODE:
```
sudo ln -s /usr/lib/libncurses.so.5 /usr/lib/libtinfo.so.5
```

----------------------------------------

TITLE: Accessing TouchBarSpacer Properties
DESCRIPTION: Demonstrates how to access the size property of a TouchBarSpacer instance. The size property returns a string value indicating the current spacer size configuration.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-spacer.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
touchBarSpacer.size // Returns 'small', 'large', or 'flexible'
```

----------------------------------------

TITLE: Window Controller Implementation (objc_code.mm)
DESCRIPTION: This Objective-C implementation initializes the TodoWindowController.  It uses initWithWindowNibName with an empty string because it is not using a nib file. It creates an empty array to store todos and calls the setupWindow method, which is to be implemented later.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_5

LANGUAGE: objc
CODE:
```
// Previous code...

// Controller for the main window
@implementation TodoWindowController

- (instancetype)init {
    self = [super initWithWindowNibName:@""];
    if (self) {
        // Create an array to store todos
        _todos = [NSMutableArray array];
        [self setupWindow];
    }
    return self;
}

// More code to follow later...
```

----------------------------------------

TITLE: Adding UI Controls to Win32 GUI for Todo Application
DESCRIPTION: Creates and configures a set of DPI-aware UI controls including a text input field, date picker, add button, and list box for the Todo application interface.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_9

LANGUAGE: cpp
CODE:
```
void hello_gui() {
    // ...
    // All the code above "Controls go here!"

    // Create the modern font with DPI-aware size
    HFONT hFont = CreateFontW(
      -Scale(14, dpi),              // Height (scaled)
      0,                            // Width
      0,                            // Escapement
      0,                            // Orientation
      FW_NORMAL,                    // Weight
      FALSE,                        // Italic
      FALSE,                        // Underline
      FALSE,                        // StrikeOut
      DEFAULT_CHARSET,              // CharSet
      OUT_DEFAULT_PRECIS,           // OutPrecision
      CLIP_DEFAULT_PRECIS,          // ClipPrecision
      CLEARTYPE_QUALITY,            // Quality
      DEFAULT_PITCH | FF_DONTCARE,  // Pitch and Family
      L"Segoe UI"                   // Font face name
    );

    // Create input controls with scaled positions and sizes
    HWND hEdit = CreateWindowExW(0, WC_EDITW, L"",
      WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
      Scale(10, dpi), Scale(10, dpi),
      Scale(250, dpi), Scale(25, dpi),
      hwnd, (HMENU)1, GetModuleHandle(nullptr), nullptr);
    SendMessageW(hEdit, WM_SETFONT, (WPARAM)hFont, TRUE);

    // Create date picker
    HWND hDatePicker = CreateWindowExW(0, DATETIMEPICK_CLASSW, L"",
      WS_CHILD | WS_VISIBLE | DTS_SHORTDATECENTURYFORMAT,
      Scale(270, dpi), Scale(10, dpi),
      Scale(100, dpi), Scale(25, dpi),
      hwnd, (HMENU)4, GetModuleHandle(nullptr), nullptr);
    SendMessageW(hDatePicker, WM_SETFONT, (WPARAM)hFont, TRUE);

    HWND hButton = CreateWindowExW(0, WC_BUTTONW, L"Add",
      WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
      Scale(380, dpi), Scale(10, dpi),
      Scale(50, dpi), Scale(25, dpi),
      hwnd, (HMENU)2, GetModuleHandle(nullptr), nullptr);
    SendMessageW(hButton, WM_SETFONT, (WPARAM)hFont, TRUE);

    HWND hListBox = CreateWindowExW(0, WC_LISTBOXW, L"",
      WS_CHILD | WS_VISIBLE | WS_BORDER | WS_VSCROLL | LBS_NOTIFY,
      Scale(10, dpi), Scale(45, dpi),
      Scale(460, dpi), Scale(400, dpi),
      hwnd, (HMENU)3, GetModuleHandle(nullptr), nullptr);
    SendMessageW(hListBox, WM_SETFONT, (WPARAM)hFont, TRUE);

    // Store menu handle in window's user data
    SetWindowLongPtr(hwnd, GWLP_USERDATA, (LONG_PTR)hContextMenu);

    // All the code below "Controls go here!"
    // ...
}
```

----------------------------------------

TITLE: Disabling Serial Blocklist in Electron
DESCRIPTION: Code snippet showing how to disable the default serial device blocklist in Electron by setting the 'disable-serial-blocklist' command line flag.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/devices.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
app.commandLine.appendSwitch('disable-serial-blocklist')
```

----------------------------------------

TITLE: Configuring LLDB for Electron Debugging
DESCRIPTION: LLDB initialization configuration to enable proper source mapping of Chromium code. This should be added to ~/.lldbinit file.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-21_snippet_0

LANGUAGE: text
CODE:
```
# e.g: ['~/electron/src/tools/lldb']
script sys.path[:0] = ['<...path/to/electron/src/tools/lldb>']
script import lldbinit
```

----------------------------------------

TITLE: Example of Locale and Language API Return Values in Electron (macOS)
DESCRIPTION: This example demonstrates the different return values from Electron's locale and language APIs on macOS with German application locale, Finland region, and specific preferred system languages.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_17

LANGUAGE: javascript
CODE:
```
app.getLocale() // 'de'
app.getSystemLocale() // 'fr-FI'
app.getPreferredSystemLanguages() // ['fr-CA', 'en-US', 'zh-Hans-FI', 'es-419']
```

----------------------------------------

TITLE: Configuring TraceConfig for Chrome DevTools-like Recording in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a TraceConfig object that approximately matches the tracing configuration used by Chrome DevTools. It sets the recording mode and specifies included and excluded tracing categories.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/trace-config.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  recording_mode: 'record-until-full',
  included_categories: [
    'devtools.timeline',
    'disabled-by-default-devtools.timeline',
    'disabled-by-default-devtools.timeline.frame',
    'disabled-by-default-devtools.timeline.stack',
    'v8.execute',
    'blink.console',
    'blink.user_timing',
    'latencyInfo',
    'disabled-by-default-v8.cpu_profiler',
    'disabled-by-default-v8.cpu_profiler.hires'
  ],
  excluded_categories: ['*']
}
```

----------------------------------------

TITLE: Setting Bluetooth Pairing Handler in Electron (Windows and Linux)
DESCRIPTION: This snippet demonstrates how to set a Bluetooth pairing handler for a session in Electron on Windows and Linux. It allows handling of devices that require additional validation before pairing.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_17

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, session } = require('electron')
const path = require('node:path')

function createWindow () {
  let bluetoothPinCallback = null

  const mainWindow = new BrowserWindow({
    webPreferences: {
      preload: path.join(__dirname, 'preload.js')
    }
  })

  mainWindow.webContents.session.setBluetoothPairingHandler((details, callback) => {
    bluetoothPinCallback = callback
    // Send a IPC message to the renderer to prompt the user to confirm the pairing.
    // Note that this will require logic in the renderer to handle this message and
    // display a prompt to the user.
    mainWindow.webContents.send('bluetooth-pairing-request', details)
  })

  // Listen for an IPC message from the renderer to get the response for the Bluetooth pairing.
  mainWindow.webContents.ipc.on('bluetooth-pairing-response', (event, response) => {
    bluetoothPinCallback(response)
  })
}

app.whenReady().then(() => {
  createWindow()
})
```

----------------------------------------

TITLE: Accessing TouchBarColorPicker Properties
DESCRIPTION: Example of accessing and modifying the color picker's available colors and selected color properties.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-color-picker.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Getting and setting available colors
touchBarColorPicker.availableColors = ['#FF0000', '#00FF00', '#0000FF'];

// Getting and setting selected color
touchBarColorPicker.selectedColor = '#FF0000';
```

----------------------------------------

TITLE: Accessing TouchBarPopover Properties
DESCRIPTION: Demonstrates how to access and modify the label and icon properties of a TouchBarPopover instance. Changes to these properties are immediately reflected in the Touch Bar.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-popover.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Accessing and modifying properties
touchBarPopover.label = 'New Label';
touchBarPopover.icon = newNativeImage;
```

----------------------------------------

TITLE: Installing Dependencies on Arch Linux/Manjaro
DESCRIPTION: Command to install required development libraries and tools on Arch Linux or Manjaro systems.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
sudo pacman -Syu base-devel clang libdbus gtk2 libnotify \
                   libgnome-keyring alsa-lib libcap libcups libxtst \
                   libxss nss gcc-multilib curl gperf bison \
                   python2 python-dbusmock jdk8-openjdk
```

----------------------------------------

TITLE: Example of Locale and Language API Return Values in Electron (Windows)
DESCRIPTION: This example demonstrates the different return values from Electron's locale and language APIs on Windows with German application locale, Finnish regional format, and specific preferred system languages.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
app.getLocale() // 'de'
app.getSystemLocale() // 'fi-FI'
app.getPreferredSystemLanguages() // ['fr-CA', 'en-US', 'zh-Hans-CN', 'fi', 'es-419']
```

----------------------------------------

TITLE: Managing Serial Port Selection and Permissions in Electron
DESCRIPTION: This snippet shows how to handle serial port selection, set permission checks, and manage device permissions for serial ports in an Electron application. It includes event listeners for 'select-serial-port' and uses session methods to control access.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

let win = null

app.whenReady().then(() => {
  win = new BrowserWindow({
    width: 800,
    height: 600
  })

  win.webContents.session.setPermissionCheckHandler((webContents, permission, requestingOrigin, details) => {
    if (permission === 'serial') {
      // Add logic here to determine if permission should be given to allow serial selection
      return true
    }
    return false
  })

  // Optionally, retrieve previously persisted devices from a persistent store
  const grantedDevices = fetchGrantedDevices()

  win.webContents.session.setDevicePermissionHandler((details) => {
    if (new URL(details.origin).hostname === 'some-host' && details.deviceType === 'serial') {
      if (details.device.vendorId === 123 && details.device.productId === 345) {
        // Always allow this type of device (this allows skipping the call to `navigator.serial.requestPort` first)
        return true
      }

      // Search through the list of devices that have previously been granted permission
      return grantedDevices.some((grantedDevice) => {
        return grantedDevice.vendorId === details.device.vendorId &&
              grantedDevice.productId === details.device.productId &&
              grantedDevice.serialNumber && grantedDevice.serialNumber === details.device.serialNumber
      })
    }
    return false
  })

  win.webContents.session.on('select-serial-port', (event, portList, webContents, callback) => {
    event.preventDefault()
    const selectedPort = portList.find((device) => {
      return device.vendorId === '9025' && device.productId === '67'
    })
    if (!selectedPort) {
      callback('')
    } else {
      callback(selectedPort.portId)
    }
  })
})
```

----------------------------------------

TITLE: Instantiating TouchBarOtherItemsProxy in Electron
DESCRIPTION: Creates a new instance of TouchBarOtherItemsProxy which serves as a special proxy for nesting Chromium-inherited TouchBar elements. Only one instance can be added per TouchBar, and it's typically added at the end of the input by default.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-other-items-proxy.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
new TouchBarOtherItemsProxy()
```

----------------------------------------

TITLE: Defining USBDevice Object Properties in Markdown
DESCRIPTION: This snippet lists all the properties of the USBDevice object, including their types and descriptions. It covers unique identifiers, vendor and product information, version numbers, and USB protocol details.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/usb-device.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# USBDevice Object

* `deviceId` string - Unique identifier for the device.
* `vendorId` Integer - The USB vendor ID.
* `productId` Integer - The USB product ID.
* `productName` string (optional) - Name of the device.
* `serialNumber` string (optional) - The USB device serial number.
* `manufacturerName` string (optional) - The manufacturer name of the device.
* `usbVersionMajor` Integer - The USB protocol major version supported by the device
* `usbVersionMinor` Integer - The USB protocol minor version supported by the device
* `usbVersionSubminor` Integer - The USB protocol subminor version supported by the device
* `deviceClass` Integer - The device class for the communication interface supported by the device
* `deviceSubclass` Integer - The device subclass for the communication interface supported by the device
* `deviceProtocol` Integer - The device protocol for the communication interface supported by the device
* `deviceVersionMajor` Integer - The major version number of the device as defined by the device manufacturer.
* `deviceVersionMinor` Integer - The minor version number of the device as defined by the device manufacturer.
* `deviceVersionSubminor` Integer - The subminor version number of the device as defined by the device manufacturer.
```

----------------------------------------

TITLE: Purchasing Products with inAppPurchase API
DESCRIPTION: Method to purchase products through Mac App Store. Takes a product ID and optional quantity/username parameters. Returns a Promise resolving to boolean indicating if product was added to payment queue.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
inAppPurchase.purchaseProduct(productID[, opts])
```

----------------------------------------

TITLE: Setting Sheet Offset in Electron for macOS Dialogs
DESCRIPTION: Example of how to adjust the position where sheet dialogs attach to a window in Electron on macOS. This allows developers to control the vertical offset of dialog sheets from the window frame.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
BaseWindow.getCurrentWindow().setSheetOffset(offset)
```

----------------------------------------

TITLE: Theme Color Meta Tag Example in HTML
DESCRIPTION: Shows the HTML meta tag format used to set a theme color, which triggers the did-change-theme-color event in WebView.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_25

LANGUAGE: html
CODE:
```
<meta name='theme-color' content='#ff0000'>
```

----------------------------------------

TITLE: Documenting contextBridge API History with Markdown
DESCRIPTION: Example of how to document changes to the contextBridge API with YAML history block in Markdown, showing a breaking change where ipcRenderer can no longer be sent over the contextBridge.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_7

LANGUAGE: markdown
CODE:
```
# contextBridge

<!--
```YAML history
changes:
  - pr-url: https://github.com/electron/electron/pull/40330
    description: "`ipcRenderer` can no longer be sent over the `contextBridge`"
    breaking-changes-header: behavior-changed-ipcrenderer-can-no-longer-be-sent-over-the-contextbridge
```
-->

> Create a safe, bi-directional, synchronous bridge across isolated contexts
```

----------------------------------------

TITLE: Committing Changes to Electron Repository
DESCRIPTION: Basic git commands for staging and committing changes to the repository.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
$ git add my/changed/files
$ git commit
```

----------------------------------------

TITLE: Inspecting Variables in LLDB
DESCRIPTION: Example of using frame variable command to inspect function arguments and local variables.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-21_snippet_4

LANGUAGE: sh
CODE:
```
(lldb) frame variable
(atom::Browser *) this = 0x0000000108b14f20
(const string &) name = "Electron": {
    [...]
}
```

----------------------------------------

TITLE: Configuring Clang-Tidy Checks
DESCRIPTION: Example of using the --checks flag to customize which clang-tidy checks are performed. Shows how to disable all default checks and enable only specific categories.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/clang-tidy.md#2025-04-21_snippet_2

LANGUAGE: text
CODE:
```
--checks=-*,performance*
```

----------------------------------------

TITLE: Visual Studio 2017 Developer Command Prompt Environment Output
DESCRIPTION: This snippet shows the expected output when launching a correctly configured Visual Studio 2017 Developer Command Prompt for ARM64 cross-compilation.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-arm.md#2025-04-21_snippet_2

LANGUAGE: batch
CODE:
```
**********************************************************************
** Visual Studio 2017 Developer Command Prompt v15.9.15
** Copyright (c) 2017 Microsoft Corporation
**********************************************************************
[vcvarsall.bat] Environment initialized for: 'x64_arm64'
```

----------------------------------------

TITLE: Menu Structure Output with Group Positioning
DESCRIPTION: Displays the resulting menu structure from the advanced template using group positioning, showing how items are arranged with separators between groups.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_5

LANGUAGE: shell
CODE:
```
- 3
- 4
- ---
- 1
- ---
- 2
```

----------------------------------------

TITLE: Generating XCode Project using GN for Electron Debugging
DESCRIPTION: Command to generate an XCode workspace for debugging Electron source code. This creates electron.ninja.xcworkspace which can be used for setting breakpoints and inspection, though it cannot be used to build code.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-with-xcode.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ gn gen out/Testing --ide=xcode
```

----------------------------------------

TITLE: Defining PostBody Object Structure in Markdown
DESCRIPTION: This snippet defines the structure of the PostBody object, including its properties and their types. It specifies the data array, contentType string, and optional boundary string.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/post-body.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# PostBody Object

* `data` ([UploadRawData](upload-raw-data.md) | [UploadFile](upload-file.md))[] - The post data to be sent to the
  new window.
* `contentType` string - The `content-type` header used for the data. One of
  `application/x-www-form-urlencoded` or `multipart/form-data`. Corresponds to
  the `enctype` attribute of the submitted HTML form.
* `boundary` string (optional) - The boundary used to separate multiple parts of
  the message. Only valid when `contentType` is `multipart/form-data`.
```

----------------------------------------

TITLE: Defining UploadFile Object Properties in Markdown
DESCRIPTION: This snippet defines the properties of the UploadFile object used in Electron. It includes the type, filePath, offset, length, and modificationTime properties, along with their data types and default values where applicable.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/upload-file.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# UploadFile Object

* `type` 'file' - `file`.
* `filePath` string - Path of file to be uploaded.
* `offset` Integer (optional) - Defaults to `0`.
* `length` Integer (optional) - Number of bytes to read from `offset`.
  Defaults to `0`.
* `modificationTime` Double (optional) - Last Modification time in
  number of seconds since the UNIX epoch. Defaults to `0`.
```

----------------------------------------

TITLE: SerialPort Object Properties in Electron
DESCRIPTION: Defines the properties of the SerialPort object in Electron, including unique identifiers, display information, USB details, and platform-specific attributes for macOS and Windows.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/serial-port.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* `portId` string - Unique identifier for the port.
* `portName` string - Name of the port.
* `displayName` string (optional) - A string suitable for display to the user for describing this device.
* `vendorId` string (optional) - The USB vendor ID.
* `productId` string (optional) - The USB product ID.
* `serialNumber` string (optional) - The USB device serial number.
* `usbDriverName` string (optional) _macOS_ - Represents a single serial port on macOS can be enumerated by multiple drivers.
* `deviceInstanceId` string (optional) _Windows_ - A stable identifier on Windows that can be used for device permissions.
```

----------------------------------------

TITLE: FileFilter Object Structure Definition in Markdown
DESCRIPTION: Defines the structure of a FileFilter object used in Electron's dialog modules. The object contains a name property for display in file dialogs and an extensions array listing the allowed file extensions without periods.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/file-filter.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# FileFilter Object

* `name` string
* `extensions` string[]
```

----------------------------------------

TITLE: Defining DesktopCapturerSource Object Properties in Markdown
DESCRIPTION: This snippet outlines the properties of the DesktopCapturerSource object, including their types and descriptions. It covers the id, name, thumbnail, display_id, and appIcon properties, explaining their formats and usage in desktop capturing scenarios.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/desktop-capturer-source.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# DesktopCapturerSource Object

* `id` string - The identifier of a window or screen that can be used as a
  `chromeMediaSourceId` constraint when calling
  [`navigator.getUserMedia`](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia). The format of the identifier will be
  `window:XX:YY` or `screen:ZZ:0`. XX is the windowID/handle. YY is 1 for
  the current process, and 0 for all others. ZZ is a sequential number
  that represents the screen, and it does not equal to the index in the
  source's name.
* `name` string - A screen source will be named either `Entire Screen` or
  `Screen <index>`, while the name of a window source will match the window
  title.
* `thumbnail` [NativeImage](../native-image.md) - A thumbnail image. **Note:**
  There is no guarantee that the size of the thumbnail is the same as the
  `thumbnailSize` specified in the `options` passed to
  `desktopCapturer.getSources`. The actual size depends on the scale of the
  screen or window.
* `display_id` string - A unique identifier that will correspond to the `id` of
  the matching [Display](display.md) returned by the [Screen API](../screen.md).
  On some platforms, this is equivalent to the `XX` portion of the `id` field
  above and on others it will differ. It will be an empty string if not
  available.
* `appIcon` [NativeImage](../native-image.md) - An icon image of the
  application that owns the window or null if the source has a type screen.
  The size of the icon is not known in advance and depends on what
  the application provides.
```

----------------------------------------

TITLE: Defining HIDDevice Object Properties in Markdown
DESCRIPTION: This snippet outlines the properties of the HIDDevice object, including device identifiers, name, USB vendor and product IDs, and optional serial number and GUID. It provides a comprehensive overview of the object's structure for developers working with HID devices in Electron applications.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/hid-device.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# HIDDevice Object

* `deviceId` string - Unique identifier for the device.
* `name` string - Name of the device.
* `vendorId` Integer - The USB vendor ID.
* `productId` Integer - The USB product ID.
* `serialNumber` string (optional) - The USB device serial number.
* `guid` string (optional) - Unique identifier for the HID interface.  A device may have multiple HID interfaces.
```

----------------------------------------

TITLE: Defining CrashReport Object Structure in Markdown
DESCRIPTION: This snippet outlines the properties of the CrashReport object. It includes a 'date' property of type Date and an 'id' property of type string.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/crash-report.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# CrashReport Object

* `date` Date
* `id` string
```

----------------------------------------

TITLE: Accessing Security Scoped Resources in Electron (JavaScript)
DESCRIPTION: Demonstrates how to start and stop accessing a security scoped resource in an Electron app packaged for the Mac App Store. It shows file dialog usage, reading a file, and proper resource management.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_25

LANGUAGE: javascript
CODE:
```
const { app, dialog } = require('electron')
const fs = require('node:fs')

let filepath
let bookmark

dialog.showOpenDialog(null, { securityScopedBookmarks: true }).then(({ filePaths, bookmarks }) => {
  filepath = filePaths[0]
  bookmark = bookmarks[0]
  fs.readFileSync(filepath)
})

// ... restart app ...

const stopAccessingSecurityScopedResource = app.startAccessingSecurityScopedResource(bookmark)
fs.readFileSync(filepath)
stopAccessingSecurityScopedResource()
```

----------------------------------------

TITLE: Running Node.js Smoke Tests in Electron
DESCRIPTION: Commands to run full Node.js test suite or individual tests within Electron's Node.js environment
SOURCE: https://github.com/electron/electron/blob/main/docs/development/testing.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
$ node script/node-spec-runner.js
```

LANGUAGE: bash
CODE:
```
$ node script/node-spec-runner.js parallel/test-crypto-keygen
```

----------------------------------------

TITLE: Finding origin of API with git blame in Bash
DESCRIPTION: These bash commands demonstrate an alternative approach using `git blame` to find when the `getTrafficLightPosition` was added to the `browser-window.md` documentation.  It involves checking out specific commits to determine the introduction point of the API.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_6

LANGUAGE: bash
CODE:
```
$ git checkout 1e206deec3e^
HEAD is now at e8c87859c4 fix: showAboutPanel also on linux (#37828)

$ grep -n "getTrafficLightPosition" docs/api/browser-window.md
1867:#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_

$ git blame -L1867,1868 -- docs/api/browser-window.md
0de1012280e (Cheng Zhao    2023-02-17 19:06:32 +0900 1867) #### `win.getTrafficLightPosition()` _macOS_ _Deprecated_
3e2cec83d92 (Samuel Attard 2020-03-05 14:22:12 -0800 1868) 

$ git checkout 0de1012280e^
HEAD is now at 0a5e634736 test: rename & split internal module tests (#37318)

$ grep -n "getTrafficLightPosition" docs/api/browser-window.md 
1851:#### `win.getTrafficLightPosition()` _macOS_

$ git blame -L1851,1852 -- docs/api/browser-window.md
3e2cec83d92 (Samuel Attard 2020-03-05 14:22:12 -0800 1851) #### `win.getTrafficLightPosition()` _macOS_
3e2cec83d92 (Samuel Attard 2020-03-05 14:22:12 -0800 1852)

$ git checkout 3e2cec83d92^
HEAD is now at 1811751c6c docs: clean up dark mode related docs (#22489)

$ grep -n "getTrafficLightPosition" docs/api/browser-window.md
(Nothing)

$ git checkout 3e2cec83d92
HEAD is now at 3e2cec83d9 feat: programmatically modify traffic light positioning (#22533)
```

----------------------------------------

TITLE: WebFrame RoutingId Property Definition
DESCRIPTION: Read-only property that represents the unique frame id as an Integer in the current renderer process. Multiple WebFrame instances referring to the same underlying frame share the same routingId.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
webFrame.routingId: Integer
```

----------------------------------------

TITLE: Initializing TouchBarColorPicker in Electron
DESCRIPTION: Constructor for creating a new TouchBarColorPicker instance with configuration options including available colors, selected color, and change event handler.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-color-picker.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
new TouchBarColorPicker({
  availableColors: ['#FFFFFF', '#000000'], // Array of hex colors
  selectedColor: '#FFFFFF',  // Initial selected color
  change: (color) => {
    // Handle color selection
    console.log('Selected color:', color);
  }
})
```

----------------------------------------

TITLE: Legacy IPC Communication Using ipcRenderer.send
DESCRIPTION: Demonstrates two-way communication between renderer and main process using ipcRenderer.send. This pattern was commonly used before Electron 7 but has limitations with message tracking and response handling.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/ipc.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
const { ipcRenderer } = require('electron')

ipcRenderer.on('asynchronous-reply', (_event, arg) => {
  console.log(arg) // prints "pong" in the DevTools console
})
ipcRenderer.send('asynchronous-message', 'ping')
```

LANGUAGE: javascript
CODE:
```
ipcMain.on('asynchronous-message', (event, arg) => {
  console.log(arg) // prints "ping" in the Node console
  event.reply('asynchronous-reply', 'pong')
})
```

----------------------------------------

TITLE: Checking Service Worker Destruction Status in Electron
DESCRIPTION: This method checks whether the service worker has been destroyed. It returns a boolean value indicating the destruction status.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/service-worker-main.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
serviceWorker.isDestroyed()
```

----------------------------------------

TITLE: Creating JavaScript Wrapper
DESCRIPTION: This snippet creates a JavaScript wrapper for the native addon. It extends EventEmitter to provide event support, checks if the platform is macOS, loads the native addon, sets up event listeners and forwards them, provides a clean API for the functions, and parses JSON payloads, converting timestamps to JavaScript Date objects.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_19

LANGUAGE: javascript
CODE:
```
const EventEmitter = require('events')

class ObjcMacosAddon extends EventEmitter {
  constructor () {
    super()

    if (process.platform !== 'darwin') {
      throw new Error('This module is only available on macOS')
    }

    const native = require('bindings')('objc_addon')
    this.addon = new native.ObjcMacosAddon()

    this.addon.on('todoAdded', (payload) => {
      this.emit('todoAdded', this.parse(payload))
    })
  }

  helloWorld (input = '') {
    return this.addon.helloWorld(input)
  }

  helloGui () {
    this.addon.helloGui()
  }

  parse (payload) {
    const parsed = JSON.parse(payload)

    return { ...parsed, date: new Date(parsed.date) }
  }
}

if (process.platform === 'darwin') {
  module.exports = new ObjcMacosAddon()
} else {
  module.exports = {}
}
```

----------------------------------------

TITLE: Specify GTK Version Command Line Flag for Electron - Shell
DESCRIPTION: Demonstrates how to launch an Electron application while explicitly specifying the desired GTK version using a command-line flag. This serves as a potential workaround for conflicts that may arise when both GTK 2/3 and GTK 4 are present and GTK 4 becomes the default.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_2

LANGUAGE: shell
CODE:
```
$ electron --gtk-version=3   # or --gtk-version=2
```

----------------------------------------

TITLE: Initializing TouchBarLabel with Options
DESCRIPTION: Constructor for creating a new TouchBarLabel instance with configurable options for label text, accessibility label, and text color.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-label.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
new TouchBarLabel({
  label: 'My Label',
  accessibilityLabel: 'Description for screen readers',
  textColor: '#ABCDEF'
})
```

----------------------------------------

TITLE: Defining Transaction Object Structure in Markdown
DESCRIPTION: This snippet defines the structure of a Transaction Object in Electron, including its properties and nested objects. It details transaction identifiers, dates, states, error information, and payment details including product information and discount offers.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/transaction.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Transaction Object

* `transactionIdentifier` string - A string that uniquely identifies a successful payment transaction.
* `transactionDate` string - The date the transaction was added to the App Store's payment queue.
* `originalTransactionIdentifier` string - The identifier of the restored transaction by the App Store.
* `transactionState` string - The transaction state, can be `purchasing`, `purchased`, `failed`, `restored` or `deferred`.
* `errorCode` Integer - The error code if an error occurred while processing the transaction.
* `errorMessage` string - The error message if an error occurred while processing the transaction.
* `payment` Object
  * `productIdentifier` string - The identifier of the purchased product.
  * `quantity` Integer  - The quantity purchased.
  * `applicationUsername` string - An opaque identifier for the user's account on your system.
  * `paymentDiscount` [PaymentDiscount](payment-discount.md) (optional) - The details of the discount offer to apply to the payment.
```

----------------------------------------

TITLE: Defining ScrubberItem Properties in Markdown
DESCRIPTION: This snippet outlines the properties of a ScrubberItem object in Electron. It specifies two optional properties: 'label' for text content and 'icon' for image content.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/scrubber-item.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# ScrubberItem Object

* `label` string (optional) - The text to appear in this item.
* `icon` NativeImage (optional) - The image to appear in this item.
```

----------------------------------------

TITLE: Documenting Context Menu Event Parameters in Electron
DESCRIPTION: Comprehensive documentation of the context-menu event parameters including coordinates, URLs, media flags, edit flags, and various contextual properties. This event is emitted when a new context menu needs to be handled in an Electron application.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_26

LANGUAGE: markdown
CODE:
```
### Event: 'context-menu'

Returns:

* `params` Object
  * `x` Integer - x coordinate.
  * `y` Integer - y coordinate.
  * `linkURL` string - URL of the link that encloses the node the context menu
    was invoked on.
  * `linkText` string - Text associated with the link. May be an empty
    string if the contents of the link are an image.
  * `pageURL` string - URL of the top level page that the context menu was
    invoked on.
  * `frameURL` string - URL of the subframe that the context menu was invoked
    on.
  * `srcURL` string - Source URL for the element that the context menu
    was invoked on. Elements with source URLs are images, audio and video.
  * `mediaType` string - Type of the node the context menu was invoked on. Can
    be `none`, `image`, `audio`, `video`, `canvas`, `file` or `plugin`.
  * `hasImageContents` boolean - Whether the context menu was invoked on an image
    which has non-empty contents.
  * `isEditable` boolean - Whether the context is editable.
  * `selectionText` string - Text of the selection that the context menu was
    invoked on.
  * `titleText` string - Title text of the selection that the context menu was
    invoked on.
  * `altText` string - Alt text of the selection that the context menu was
    invoked on.
  * `suggestedFilename` string - Suggested filename to be used when saving file through 'Save
    Link As' option of context menu.
  * `selectionRect` [Rectangle](structures/rectangle.md) - Rect representing the coordinates in the document space of the selection.
  * `selectionStartOffset` number - Start position of the selection text.
  * `referrerPolicy` [Referrer](structures/referrer.md) - The referrer policy of the frame on which the menu is invoked.
  * `misspelledWord` string - The misspelled word under the cursor, if any.
  * `dictionarySuggestions` string[] - An array of suggested words to show the
    user to replace the `misspelledWord`.  Only available if there is a misspelled
    word and spellchecker is enabled.
  * `frameCharset` string - The character encoding of the frame on which the
    menu was invoked.
  * `formControlType` string - The source that the context menu was invoked on.
    Possible values include `none`, `button-button`, `field-set`,
    `input-button`, `input-checkbox`, `input-color`, `input-date`,
    `input-datetime-local`, `input-email`, `input-file`, `input-hidden`,
    `input-image`, `input-month`, `input-number`, `input-password`, `input-radio`,
    `input-range`, `input-reset`, `input-search`, `input-submit`, `input-telephone`,
    `input-text`, `input-time`, `input-url`, `input-week`, `output`, `reset-button`,
    `select-list`, `select-list`, `select-multiple`, `select-one`, `submit-button`,
    and `text-area`,
  * `spellcheckEnabled` boolean - If the context is editable, whether or not spellchecking is enabled.
  * `menuSourceType` string - Input source that invoked the context menu.
    Can be `none`, `mouse`, `keyboard`, `touch`, `touchMenu`, `longPress`, `longTap`, `touchHandle`, `stylus`, `adjustSelection`, or `adjustSelectionReset`.
  * `mediaFlags` Object - The flags for the media element the context menu was
    invoked on.
    * `inError` boolean - Whether the media element has crashed.
    * `isPaused` boolean - Whether the media element is paused.
    * `isMuted` boolean - Whether the media element is muted.
    * `hasAudio` boolean - Whether the media element has audio.
    * `isLooping` boolean - Whether the media element is looping.
    * `isControlsVisible` boolean - Whether the media element's controls are
      visible.
    * `canToggleControls` boolean - Whether the media element's controls are
      toggleable.
    * `canPrint` boolean - Whether the media element can be printed.
    * `canSave` boolean - Whether or not the media element can be downloaded.
    * `canShowPictureInPicture` boolean - Whether the media element can show picture-in-picture.
    * `isShowingPictureInPicture` boolean - Whether the media element is currently showing picture-in-picture.
    * `canRotate` boolean - Whether the media element can be rotated.
    * `canLoop` boolean - Whether the media element can be looped.
  * `editFlags` Object - These flags indicate whether the renderer believes it
    is able to perform the corresponding action.
    * `canUndo` boolean - Whether the renderer believes it can undo.
    * `canRedo` boolean - Whether the renderer believes it can redo.
    * `canCut` boolean - Whether the renderer believes it can cut.
    * `canCopy` boolean - Whether the renderer believes it can copy.
    * `canPaste` boolean - Whether the renderer believes it can paste.
    * `canDelete` boolean - Whether the renderer believes it can delete.
    * `canSelectAll` boolean - Whether the renderer believes it can select all.
    * `canEditRichly` boolean - Whether the renderer believes it can edit text richly.
```

----------------------------------------

TITLE: Setting Frame Pool Capacity in C++
DESCRIPTION: Defines the maximum number of frames that can be captured if the consumer doesn't consume them in time
SOURCE: https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-21_snippet_1

LANGUAGE: cpp
CODE:
```
kFramePoolCapacity = 10
```

----------------------------------------

TITLE: Initializing Win32 GUI with Headers, Structures and TodoItem Implementation
DESCRIPTION: Sets up necessary headers, links required libraries, and defines the TodoItem structure with a method to convert to JSON format. This provides the foundation for the Win32 GUI application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_6

LANGUAGE: cpp
CODE:
```
#include <windows.h>
#include <windowsx.h>
#include <string>
#include <functional>
#include <chrono>
#include <vector>
#include <commctrl.h>
#include <shellscalingapi.h>
#include <thread>

#pragma comment(lib, "comctl32.lib")
#pragma comment(linker, "\"/manifestdependency:type='win32' \
name='Microsoft.Windows.Common-Controls' version='6.0.0.0' \
processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'\"") 

using TodoCallback = std::function<void(const std::string &)>;

static TodoCallback g_todoAddedCallback;

struct TodoItem
{
  GUID id;
  std::wstring text;
  int64_t date;

  std::string toJson() const
  {
    OLECHAR *guidString;
    StringFromCLSID(id, &guidString);
    std::wstring widGuid(guidString);
    CoTaskMemFree(guidString);

    // Convert wide string to narrow for JSON
    std::string guidStr(widGuid.begin(), widGuid.end());
    std::string textStr(text.begin(), text.end());

    return "{"
           "\"id\":\"" + guidStr + "\","
           "\"text\":\"" + textStr + "\","
           "\"date\":" + std::to_string(date) +
           "}";
  }
};

namespace cpp_code
{
  // More code to follow later...
}
```

----------------------------------------

TITLE: WebFrame Opener Property Definition
DESCRIPTION: Read-only property that represents the frame which opened the current webFrame. Returns null if there's no opener or if the opener is not in the current renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
webFrame.opener: WebFrame | null
```

----------------------------------------

TITLE: Resolving gclient sync rebase conflicts in Electron
DESCRIPTION: When gclient sync is interrupted, you may need to abort an in-progress git am process in the src directory. This snippet shows how to navigate to the parent directory, abort the git am command, return to the electron directory, and force a resync.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ cd ../
$ git am --abort
$ cd electron
$ gclient sync -f
```

----------------------------------------

TITLE: Creating npm Directory Fix
DESCRIPTION: Command to create missing npm directory to resolve ENOENT error during build process.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-windows.md#2025-04-21_snippet_2

LANGUAGE: powershell
CODE:
```
$ mkdir ~\AppData\Roaming\npm
```

----------------------------------------

TITLE: Installing Dependencies on RHEL/CentOS
DESCRIPTION: Command to install required development libraries and tools on RHEL or CentOS systems.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
sudo yum install clang dbus-devel gtk3-devel libnotify-devel \
                   libgnome-keyring-devel xorg-x11-server-utils libcap-devel \
                   cups-devel libXtst-devel alsa-lib-devel libXrandr-devel \
                   nss-devel python-dbusmock openjdk-8-jre
```

----------------------------------------

TITLE: Installing Required Dependencies for Native Addon
DESCRIPTION: Command to install node-addon-api (C++ wrapper for Node.js API) and bindings (helper for loading compiled native addons) packages needed for developing native Node.js addons.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_2

LANGUAGE: sh
CODE:
```
npm install node-addon-api bindings
```

----------------------------------------

TITLE: Illustrating PrinterInfo Object Structure in JavaScript
DESCRIPTION: This example demonstrates the structure of a PrinterInfo object, including core properties and various platform-specific options. It shows how printer information is represented, including network details, job settings, and printer state.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/printer-info.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
{
  name: 'Austin_4th_Floor_Printer___C02XK13BJHD4',
  displayName: 'Austin 4th Floor Printer @ C02XK13BJHD4',
  description: 'TOSHIBA ColorMFP',
  options: {
    copies: '1',
    'device-uri': 'dnssd://Austin%204th%20Floor%20Printer%20%40%20C02XK13BJHD4._ipps._tcp.local./?uuid=71687f1e-1147-3274-6674-22de61b110bd',
    finishings: '3',
    'job-cancel-after': '10800',
    'job-hold-until': 'no-hold',
    'job-priority': '50',
    'job-sheets': 'none,none',
    'marker-change-time': '0',
    'number-up': '1',
    'printer-commands': 'ReportLevels,PrintSelfTestPage,com.toshiba.ColourProfiles.update,com.toshiba.EFiling.update,com.toshiba.EFiling.checkPassword',
    'printer-info': 'Austin 4th Floor Printer @ C02XK13BJHD4',
    'printer-is-accepting-jobs': 'true',
    'printer-is-shared': 'false',
    'printer-is-temporary': 'false',
    'printer-location': '',
    'printer-make-and-model': 'TOSHIBA ColorMFP',
    'printer-state': '3',
    'printer-state-change-time': '1573472937',
    'printer-state-reasons': 'offline-report,com.toshiba.snmp.failed',
    'printer-type': '10531038',
    'printer-uri-supported': 'ipp://localhost/printers/Austin_4th_Floor_Printer___C02XK13BJHD4',
    system_driverinfo: 'T'
  }
}
```

----------------------------------------

TITLE: Implementing Table View Data Source in Objective-C
DESCRIPTION: These Objective-C methods implement the data source for the table view.  `numberOfRowsInTableView:` returns the number of todos in the data source. `tableView:objectValueForTableColumn:row:` provides the text or formatted date for each cell in the table based on the column identifier.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_11

LANGUAGE: objc
CODE:
```
// Previous code...

// NSTableViewDataSource methods
- (NSInteger)numberOfRowsInTableView:(NSTableView *)tableView {
    return [_todos count];
}

- (id)tableView:(NSTableView *)tableView objectValueForTableColumn:(NSTableColumn *)tableColumn row:(NSInteger)row {
    NSDictionary *todo = _todos[row];
    NSString *identifier = [tableColumn identifier];

    if ([identifier isEqualToString:@"text"]) {
        return todo[@"text"];
    } else if ([identifier isEqualToString:@"date"]) {
        NSDate *date = todo[@"date"];
        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        [formatter setDateStyle:NSDateFormatterShortStyle];
        return [formatter stringFromDate:date];
    }

    return nil;
}

@end

// More code to follow later...
```

----------------------------------------

TITLE: Deprecate process getProcessMemoryInfo (JS)
DESCRIPTION: Notes the deprecation of the `process.getProcessMemoryInfo()` method. The document does not provide a direct replacement in this section.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_122

LANGUAGE: js
CODE:
```
// Deprecated
const info = process.getProcessMemoryInfo()
```

----------------------------------------

TITLE: Defining Product Object Properties in Markdown
DESCRIPTION: This snippet outlines the structure and properties of the Product object used for Apple App Store integration in Electron applications. It includes details on product identification, pricing, localization, subscription information, and downloadable content attributes.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/product.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Product Object

* `productIdentifier` string - The string that identifies the product to the Apple App Store.
* `localizedDescription` string - A description of the product.
* `localizedTitle` string - The name of the product.
* `price` number - The cost of the product in the local currency.
* `formattedPrice` string - The locale formatted price of the product.
* `currencyCode` string - 3 character code presenting a product's currency based on the ISO 4217 standard.
* `introductoryPrice` [ProductDiscount](product-discount.md) (optional) - The object containing introductory price information for the product.
available for the product.
* `discounts` [ProductDiscount](product-discount.md)[] - An array of discount offers
* `subscriptionGroupIdentifier` string - The identifier of the subscription group to which the subscription belongs.
* `subscriptionPeriod` [ProductSubscriptionPeriod](product-subscription-period.md) (optional) - The period details for products that are subscriptions.
* `isDownloadable` boolean - A boolean value that indicates whether the App Store has downloadable content for this product. `true` if at least one file has been associated with the product.
* `downloadContentVersion` string - A string that identifies the version of the content.
* `downloadContentLengths` number[] - The total size of the content, in bytes.
```

----------------------------------------

TITLE: Disabling Sandbox via Node Integration in Electron
DESCRIPTION: Demonstrates how to disable sandboxing by enabling Node.js integration in the renderer process through the BrowserWindow constructor.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/sandbox.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
app.whenReady().then(() => {
  const win = new BrowserWindow({
    webPreferences: {
      nodeIntegration: true
    }
  })
  win.loadURL('https://google.com')
})
```

----------------------------------------

TITLE: Configuring BrowserWindow with Insecure Web Preferences in Electron
DESCRIPTION: Example of insecure configuration for a BrowserWindow that enables Node.js integration in the renderer process, which is not recommended for security reasons.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// Bad
const mainWindow = new BrowserWindow({
  webPreferences: {
    contextIsolation: false,
    nodeIntegration: true,
    nodeIntegrationInWorker: true
  }
})

mainWindow.loadURL('https://example.com')
```

----------------------------------------

TITLE: Defining ProxyConfig Rules in Electron
DESCRIPTION: This snippet outlines the structure and syntax for defining proxy rules in the ProxyConfig object. It specifies the format for schemeProxies, urlScheme, proxyURIList, and proxyURL.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/proxy-config.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
proxyRules = schemeProxies[";"<schemeProxies>]
schemeProxies = [<urlScheme>"="]<proxyURIList>
urlScheme = "http" | "https" | "ftp" | "socks"
proxyURIList = <proxyURL>[","<proxyURIList>]
proxyURL = [<proxyScheme>"://"]<proxyHost>[":"<proxyPort>]
```

----------------------------------------

TITLE: Defining MouseWheelInputEvent Object Properties in Markdown
DESCRIPTION: This snippet lists the properties of the MouseWheelInputEvent object, which extends the MouseInputEvent object. It includes the event type and various optional properties related to mouse wheel movement and acceleration.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/mouse-wheel-input-event.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# MouseWheelInputEvent Object extends `MouseInputEvent`

* `type` string - The type of the event, can be `mouseWheel`.
* `deltaX` Integer (optional)
* `deltaY` Integer (optional)
* `wheelTicksX` Integer (optional)
* `wheelTicksY` Integer (optional)
* `accelerationRatioX` Integer (optional)
* `accelerationRatioY` Integer (optional)
* `hasPreciseScrollingDeltas` boolean (optional)
* `canScroll` boolean (optional)
```

----------------------------------------

TITLE: Resetting GUI Controls in Win32 C++
DESCRIPTION: This function resets the text input and date picker controls in the Todo List application. It clears the text input and sets the date picker to the current date.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_12

LANGUAGE: cpp
CODE:
```
  void ResetControls(HWND hwnd)
  {
    HWND hEdit = GetDlgItem(hwnd, 1);
    HWND hDatePicker = GetDlgItem(hwnd, 4);
    HWND hAddButton = GetDlgItem(hwnd, 2);

    // Clear text
    SetWindowTextW(hEdit, L"");

    // Reset date to current
    SYSTEMTIME currentTime;
    GetLocalTime(&currentTime);
    DateTime_SetSystemtime(hDatePicker, GDT_VALID, &currentTime);
  }
```

----------------------------------------

TITLE: Getting Selected Storage Backend in Electron (Linux Only)
DESCRIPTION: This Linux-specific method returns a string indicating the selected password manager or storage backend being used for encryption.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
safeStorage.getSelectedStorageBackend()
```

----------------------------------------

TITLE: Importing Shared Texture in OpenGL (macOS)
DESCRIPTION: This snippet illustrates how to import a shared texture handle into an OpenGL rendering program on macOS. It covers creating a texture from an IOSurface and setting up the necessary OpenGL parameters.
SOURCE: https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-21_snippet_5

LANGUAGE: c++
CODE:
```
// macOS
IOSurfaceRef handle = *reinterpret_cast<IOSurfaceRef*>(handleBufferData);

// Assume you have created a GL context.

GLuint io_surface_tex;
glGenTextures(1, &io_surface_tex);
glEnable(GL_TEXTURE_RECTANGLE_ARB);
glBindTexture(GL_TEXTURE_RECTANGLE_ARB, io_surface_tex);

CGLContextObj cgl_context = CGLGetCurrentContext();

GLsizei width = (GLsizei)IOSurfaceGetWidth(io_surface);
GLsizei height = (GLsizei)IOSurfaceGetHeight(io_surface);

CGLTexImageIOSurface2D(cgl_context, GL_TEXTURE_RECTANGLE_ARB, GL_RGBA8, width,
                        height, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV,
                        io_surface, 0);

glTexParameteri(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
glTexParameteri(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
glBindTexture(GL_TEXTURE_RECTANGLE_ARB, 0);

// Copy to a intermediate texture from io_surface_tex
// ...
```

----------------------------------------

TITLE: Deprecated app.enableMixedSandbox() Call
DESCRIPTION: The `app.enableMixedSandbox()` method is deprecated and no longer needed as mixed-sandbox mode is now enabled by default in newer Electron versions.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_102

LANGUAGE: javascript
CODE:
```
// Deprecated
app.enableMixedSandbox()
```

----------------------------------------

TITLE: Defining ProductDiscount Object Properties in Markdown
DESCRIPTION: This snippet defines the properties of the ProductDiscount object using a Markdown list. It includes details about the identifier, type, price, locale, payment mode, number of periods, and an optional subscription period.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/product-discount.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* `identifier` string - A string used to uniquely identify a discount offer for a product.
* `type` number - The type of discount offer.
* `price` number - The discount price of the product in the local currency.
* `priceLocale` string - The locale used to format the discount price of the product.
* `paymentMode` string - The payment mode for this product discount. Can be `payAsYouGo`, `payUpFront`, or `freeTrial`.
* `numberOfPeriods` number - An integer that indicates the number of periods the product discount is available.
* `subscriptionPeriod` [ProductSubscriptionPeriod](product-subscription-period.md) (optional) - An object that defines the period for the product discount.
```

----------------------------------------

TITLE: Visual Studio Compiler Tool Settings for Native Addon
DESCRIPTION: Configuration for Visual Studio's C++ compiler tool within the binding.gyp file, enabling exception handling, setting debug information format, and adding file serialization options for reliable parallel builds.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_3

LANGUAGE: json
CODE:
```
"VCCLCompilerTool": {
  "ExceptionHandling": 1,
  "DebugInformationFormat": "OldStyle",
  "AdditionalOptions": [
    "/FS"
  ]
}
```

----------------------------------------

TITLE: Documenting ipcRenderer API History with Markdown
DESCRIPTION: Example of how to document changes to the ipcRenderer API with YAML history block in Markdown, showing the same breaking change that affects both ipcRenderer and contextBridge.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_8

LANGUAGE: markdown
CODE:
```
# ipcRenderer

<!--
```YAML history
changes:
  - pr-url: https://github.com/electron/electron/pull/40330
    description: "`ipcRenderer` can no longer be sent over the `contextBridge`"
    breaking-changes-header: behavior-changed-ipcrenderer-can-no-longer-be-sent-over-the-contextbridge
```
-->

Process: [Renderer](../glossary.md#renderer-process)
```

----------------------------------------

TITLE: V8 Profiler Command Line Options
DESCRIPTION: Common V8 profiler command line flags used for performance profiling and debugging. These options enable various tracing and logging capabilities for inspecting V8's behavior.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/v8-development.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
--prof --trace-ic --trace-opt --trace-deopt --print-bytecode --print-opt-code
```

----------------------------------------

TITLE: Node Binding Integration for API
DESCRIPTION: Adds the new API module to Electron's built-in modules in node_bindings.cc
SOURCE: https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-21_snippet_4

LANGUAGE: cpp
CODE:
```
#define ELECTRON_BROWSER_MODULES(V)      \
  V(electron_browser_{api_name})
```

----------------------------------------

TITLE: Resolving Patch Conflicts in Electron
DESCRIPTION: Commands for handling patch conflicts during dependency updates, using git's 3-way merge capability and manual conflict resolution.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/patches.md#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
$ cd src/third_party/electron_node
# If the patch application failed midway through, you can reset it with:
$ git am --abort
# And then retry with 3-way merge:
$ ../../electron/script/git-import-patches -3 ../../electron/patches/node
```

----------------------------------------

TITLE: Installing Electron with verbose output
DESCRIPTION: Command to install Electron with the verbose flag, which displays download progress. This is useful on slower networks to monitor the installation progress.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-21_snippet_9

LANGUAGE: sh
CODE:
```
npm install --verbose electron
```

----------------------------------------

TITLE: TypeScript Interface Declaration for Process
DESCRIPTION: Adds TypeScript type definition for the new API module in the Process interface
SOURCE: https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
interface Process {
    _linkedBinding(name: 'electron_browser_{api_name}'): Electron.ApiName;
}
```

----------------------------------------

TITLE: Defining MemoryInfo Object Properties in Markdown
DESCRIPTION: This snippet defines the properties of the MemoryInfo object, including workingSetSize, peakWorkingSetSize, and privateBytes. It specifies the data types and provides brief descriptions for each property. The privateBytes property is noted as Windows-specific and optional.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/memory-info.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# MemoryInfo Object

* `workingSetSize` Integer - The amount of memory currently pinned to actual physical RAM.
* `peakWorkingSetSize` Integer - The maximum amount of memory that has ever been pinned
  to actual physical RAM.
* `privateBytes` Integer (optional) _Windows_ - The amount of memory not shared by other processes, such as
  JS heap or HTML content.

Note that all statistics are reported in Kilobytes.
```

----------------------------------------

TITLE: Windows 10 Node Headers and Library Setup
DESCRIPTION: PowerShell commands for compiling Node headers and setting up the electron library for Windows 10 testing environment
SOURCE: https://github.com/electron/electron/blob/main/docs/development/testing.md#2025-04-21_snippet_1

LANGUAGE: powershell
CODE:
```
ninja -C out\Testing electron:node_headers
```

LANGUAGE: powershell
CODE:
```
cd out\Testing
mkdir gen\node_headers\Release
copy electron.lib gen\node_headers\Release\node.lib
```

----------------------------------------

TITLE: Building Electron in Debug Mode
DESCRIPTION: Shell commands for generating and building Electron in debug mode using GN and Ninja build systems.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
$ gn gen out/Debug --args="import(\"//electron/.git/info/exclude/debug.gn\") $GN_EXTRA_ARGS"
$ ninja -C out/Debug electron
```

----------------------------------------

TITLE: Requiring BrowserWindow from Deprecated Remote Module - Electron JavaScript
DESCRIPTION: Demonstrates requiring the `BrowserWindow` class directly from the deprecated `electron.remote` module. The `remote` module has been removed in favor of `@electron/remote`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_59

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron').remote
```

----------------------------------------

TITLE: Advanced Snapcraft Configuration
DESCRIPTION: Extended Snapcraft YAML configuration showing desktop application setup with dependencies and environment configuration.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-21_snippet_5

LANGUAGE: yaml
CODE:
```
name: myApp
version: '2.0.0'
summary: A little description for the app.
description: |
 You know what? This app is amazing! It does all the things
 for you. Some say it keeps you young, maybe even happy.

grade: stable
confinement: classic

parts:
  slack:
    plugin: dump
    source: my-deb.deb
    source-type: deb
    after:
      - desktop-gtk3
    stage-packages:
      - libasound2
      - libnotify4
      - libnspr4
      - libnss3
      - libpcre3
      - libpulse0
      - libxss1
      - libxtst6
  electron-launch:
    plugin: dump
    source: files/
    prepare: |
      chmod +x bin/electron-launch

apps:
  myApp:
    command: bin/electron-launch $SNAP/usr/lib/myApp/myApp
    desktop: usr/share/applications/myApp.desktop
    environment:
      TMPDIR: $XDG_RUNTIME_DIR
```

----------------------------------------

TITLE: Logging Deprecated Rosetta Translation Status - Electron JavaScript
DESCRIPTION: Logs the status of whether the Electron app is running under Rosetta translation using a deprecated property. This property has been replaced.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_57

LANGUAGE: javascript
CODE:
```
console.log(app.runningUnderRosettaTranslation)
```

----------------------------------------

TITLE: Deprecated API - Go to Index
DESCRIPTION: This YAML snippet shows the deprecation information for the `contents.goToIndex(index)` API in Electron, pointing to the relevant pull request and breaking changes header.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_18

LANGUAGE: YAML
CODE:
```
deprecated:
  - pr-url: https://github.com/electron/electron/pull/41752
    breaking-changes-header: deprecated-clearhistory-cangoback-goback-cangoforward-goforward-gotoindex-cangotooffset-gotooffset-on-webcontents
```

----------------------------------------

TITLE: Defining WindowSessionEndEvent Object Structure in Electron
DESCRIPTION: Specifies the structure of WindowSessionEndEvent object that extends Event class. Contains a reasons array property that lists possible shutdown scenarios including shutdown, close-app, critical, or logoff. Note that Windows cannot distinguish between shutdown and reboot events.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/window-session-end-event.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
interface WindowSessionEndEvent extends Event {
  reasons: Array<'shutdown' | 'close-app' | 'critical' | 'logoff'>
}
```

----------------------------------------

TITLE: Initializing TouchBarSpacer in Electron
DESCRIPTION: Creates a new TouchBarSpacer instance with configurable size options. The spacer can be small (default), large, or flexible to take up remaining space. This class is used to add spacing between Touch Bar items in macOS applications.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/touch-bar-spacer.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
new TouchBarSpacer({
  size: 'small' // or 'large' or 'flexible'
})
```

----------------------------------------

TITLE: Defining BluetoothDevice Object Properties in Markdown
DESCRIPTION: This snippet outlines the properties of the BluetoothDevice object in Electron. It specifies two string properties: deviceName and deviceId, which are used to identify and represent Bluetooth devices in the application.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/bluetooth-device.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# BluetoothDevice Object

* `deviceName` string
* `deviceId` string
```

----------------------------------------

TITLE: Setting Permission Check Handler (Old Signature) - Electron JavaScript
DESCRIPTION: Shows the old signature for `session.setPermissionCheckHandler` which incorrectly assumed the first parameter is always a `webContents`. The first parameter can now be `null`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_64

LANGUAGE: javascript
CODE:
```
// Old code
session.setPermissionCheckHandler((webContents, permission) => {
  if (webContents.getURL().startsWith('https://google.com/') && permission === 'notification') {
    return true
  }
  return false
})
```

----------------------------------------

TITLE: Displaying Electron Main Source Directory Structure
DESCRIPTION: Shows the hierarchical layout of Electron's main source code directory, including build configuration, documentation, source code (JS/TS and C++), tests, and patches directories. Each directory's purpose and contents are annotated.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/source-code-directory-structure.md#2025-04-21_snippet_0

LANGUAGE: diff
CODE:
```
Electron
├── build/ - Build configuration files needed to build with GN.
├── buildflags/ - Determines the set of features that can be conditionally built.
├── chromium_src/ - Source code copied from Chromium that isn't part of the content layer.
├── default_app/ - A default app run when Electron is started without
|                  providing a consumer app.
├── docs/ - Electron's documentation.
|   ├── api/ - Documentation for Electron's externally-facing modules and APIs.
|   ├── development/ - Documentation to aid in developing for and with Electron.
|   ├── fiddles/ - A set of code snippets one can run in Electron Fiddle.
|   ├── images/ - Images used in documentation.
|   └── tutorial/ - Tutorial documents for various aspects of Electron.
├── lib/ - JavaScript/TypeScript source code.
|   ├── browser/ - Main process initialization code.
|   |   ├── api/ - API implementation for main process modules.
|   |   └── remote/ - Code related to the remote module as it is
|   |                 used in the main process.
|   ├── common/ - Relating to logic needed by both main and renderer processes.
|   |   └── api/ - API implementation for modules that can be used in
|   |              both the main and renderer processes
|   ├── isolated_renderer/ - Handles creation of isolated renderer processes when
|   |                        contextIsolation is enabled.
|   ├── renderer/ - Renderer process initialization code.
|   |   ├── api/ - API implementation for renderer process modules.
|   |   ├── extension/ - Code related to use of Chrome Extensions
|   |   |                in Electron's renderer process.
|   |   ├── remote/ - Logic that handles use of the remote module in
|   |   |             the main process.
|   |   └── web-view/ - Logic that handles the use of webviews in the
|   |                   renderer process.
|   ├── sandboxed_renderer/ - Logic that handles creation of sandboxed renderer
|   |   |                     processes.
|   |   └── api/ - API implementation for sandboxed renderer processes.
|   └── worker/ - Logic that handles proper functionality of Node.js
|                 environments in Web Workers.
├── patches/ - Patches applied on top of Electron's core dependencies
|   |          in order to handle differences between our use cases and
|   |          default functionality.
|   ├── boringssl/ - Patches applied to Google's fork of OpenSSL, BoringSSL.
|   ├── chromium/ - Patches applied to Chromium.
|   ├── node/ - Patches applied on top of Node.js.
|   └── v8/ - Patches applied on top of Google's V8 engine.
├── shell/ - C++ source code.
|   ├── app/ - System entry code.
|   ├── browser/ - The frontend including the main window, UI, and all of the
|   |   |          main process things. This talks to the renderer to manage web
|   |   |          pages.
|   |   ├── ui/ - Implementation of UI stuff for different platforms.
|   |   |   ├── cocoa/ - Cocoa specific source code.
|   |   |   ├── win/ - Windows GUI specific source code.
|   |   |   └── x/ - X11 specific source code.
|   |   ├── api/ - The implementation of the main process APIs.
|   |   ├── net/ - Network related code.
|   |   ├── mac/ - Mac specific Objective-C source code.
|   |   └── resources/ - Icons, platform-dependent files, etc.
|   ├── renderer/ - Code that runs in renderer process.
|   |   └── api/ - The implementation of renderer process APIs.
|   └── common/ - Code that used by both the main and renderer processes,
|       |         including some utility functions and code to integrate node's
|       |         message loop into Chromium's message loop.
|       └── api/ - The implementation of common APIs, and foundations of
|                  Electron's built-in modules.
├── spec/ - Components of Electron's test suite run in the main process.
└── BUILD.gn - Building rules of Electron.
```

----------------------------------------

TITLE: Defining ProtocolResponse Object Structure in Markdown
DESCRIPTION: This snippet outlines the structure and properties of the ProtocolResponse object used in Electron for handling HTTP responses. It includes optional fields for error handling, status codes, response body, headers, and various other HTTP-related properties.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/protocol-response.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# ProtocolResponse Object

* `error` Integer (optional) - When assigned, the `request` will fail with the
  `error` number . For the available error numbers you can use, please see the
  [net error list][net-error].
* `statusCode` number (optional) - The HTTP response code, default is 200.
* `charset` string (optional) - The charset of response body, default is
  `"utf-8"`.
* `mimeType` string (optional) - The MIME type of response body, default is
  `"text/html"`. Setting `mimeType` would implicitly set the `content-type`
  header in response, but if `content-type` is already set in `headers`, the
  `mimeType` would be ignored.
* `headers` Record<string, string | string[]> (optional) - An object containing the response headers. The
  keys must be string, and values must be either string or Array of string.
* `data` (Buffer | string | ReadableStream) (optional) - The response body. When
  returning stream as response, this is a Node.js readable stream representing
  the response body. When returning `Buffer` as response, this is a `Buffer`.
  When returning `string` as response, this is a `string`. This is ignored for
  other types of responses.
* `path` string (optional) - Path to the file which would be sent as response
  body. This is only used for file responses.
* `url` string (optional) - Download the `url` and pipe the result as response
  body. This is only used for URL responses.
* `referrer` string (optional) - The `referrer` URL. This is only used for file
  and URL responses.
* `method` string (optional) - The HTTP `method`. This is only used for file
  and URL responses.
* `session` Session (optional) - The session used for requesting URL.
  The HTTP request will reuse the current session by default.
* `uploadData` [ProtocolResponseUploadData](protocol-response-upload-data.md) (optional) - The data used as upload data. This is only
  used for URL responses when `method` is `"POST"`.

[net-error]: https://source.chromium.org/chromium/chromium/src/+/main:net/base/net_error_list.h
```

----------------------------------------

TITLE: Electron Launch Script
DESCRIPTION: Shell script used to launch the Electron application within the Snap container.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-21_snippet_4

LANGUAGE: shell
CODE:
```
#!/bin/sh

exec "$@" --executed-from="$(pwd)" --pid=$$ > /dev/null 2>&1 &
```

----------------------------------------

TITLE: Defining JumpListItem Object Properties in Markdown
DESCRIPTION: This snippet outlines the structure and properties of a JumpListItem object used in Electron. It includes details on the type, path, program, args, title, description, iconPath, iconIndex, and workingDirectory properties, along with their descriptions and usage constraints.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/jump-list-item.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# JumpListItem Object

* `type` string (optional) - One of the following:
  * `task` - A task will launch an app with specific arguments.
  * `separator` - Can be used to separate items in the standard `Tasks`
    category.
  * `file` - A file link will open a file using the app that created the
    Jump List, for this to work the app must be registered as a handler for
    the file type (though it doesn't have to be the default handler).
* `path` string (optional) - Path of the file to open, should only be set if `type` is
  `file`.
* `program` string (optional) - Path of the program to execute, usually you should
  specify `process.execPath` which opens the current program. Should only be
  set if `type` is `task`.
* `args` string (optional) - The command line arguments when `program` is executed. Should
  only be set if `type` is `task`.
* `title` string (optional) - The text to be displayed for the item in the Jump List.
  Should only be set if `type` is `task`.
* `description` string (optional) - Description of the task (displayed in a tooltip).
  Should only be set if `type` is `task`. Maximum length 260 characters.
* `iconPath` string (optional) - The absolute path to an icon to be displayed in a
  Jump List, which can be an arbitrary resource file that contains an icon
  (e.g. `.ico`, `.exe`, `.dll`). You can usually specify `process.execPath` to
  show the program icon.
* `iconIndex` number (optional) - The index of the icon in the resource file. If a
  resource file contains multiple icons this value can be used to specify the
  zero-based index of the icon that should be displayed for this task. If a
  resource file contains only one icon, this property should be set to zero.
* `workingDirectory` string (optional) - The working directory. Default is empty.
```

----------------------------------------

TITLE: Menu Structure Output for Basic Template
DESCRIPTION: Shows the resulting menu structure from the basic template with four linear menu items.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
- 1
- 2
- 3
- 4
```

----------------------------------------

TITLE: FilesystemPermissionRequest Object Definition in Electron
DESCRIPTION: Defines the properties of the FilesystemPermissionRequest object which extends the PermissionRequest interface. This object is used when handling filesystem permission requests in Electron applications.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/filesystem-permission-request.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# FilesystemPermissionRequest Object extends `PermissionRequest`

* `filePath` string (optional) - The path of the `fileSystem` request.
* `isDirectory` boolean (optional) - Whether the `fileSystem` request is a directory.
* `fileAccessType` string (optional) - The access type of the `fileSystem` request. Can be `writable` or `readable`.
```

----------------------------------------

TITLE: WebFrame NextSibling Property Definition
DESCRIPTION: Read-only property that represents the next sibling frame. Returns null if webFrame is the last frame in its parent or if the next sibling is not in the current renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
webFrame.nextSibling: WebFrame | null
```

----------------------------------------

TITLE: Printing Stack Traces in Chromium C++
DESCRIPTION: Example of using Chromium's stack trace helper to print call stacks to console without program interruption. Requires including the stack_trace header.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging.md#2025-04-21_snippet_1

LANGUAGE: cpp
CODE:
```
#include "base/debug/stack_trace.h"
...
base::debug::StackTrace().Print();
```

----------------------------------------

TITLE: Defining NotificationResponse Object Structure in Markdown
DESCRIPTION: This snippet outlines the properties of the NotificationResponse object, including action identifier, delivery date, unique identifier, custom information, and optional user text. It provides a comprehensive structure for handling notification responses in Electron applications.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/notification-response.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# NotificationResponse Object

* `actionIdentifier` string - The identifier string of the action that the user selected.
* `date` number - The delivery date of the notification.
* `identifier` string - The unique identifier for this notification request.
* `userInfo` Record\<string, any\> - A dictionary of custom information associated with the notification.
* `userText` string (optional) - The text entered or chosen by the user.
```

----------------------------------------

TITLE: Installing Dependencies on Fedora
DESCRIPTION: Command to install required development libraries and tools on Fedora systems.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
sudo dnf install clang dbus-devel gperf gtk3-devel \
                   libnotify-devel libgnome-keyring-devel libcap-devel \
                   cups-devel libXtst-devel alsa-lib-devel libXrandr-devel \
                   nss-devel python-dbusmock
```

----------------------------------------

TITLE: Formatting Todos for Display in Windows GUI
DESCRIPTION: Provides a helper function that formats todo text and timestamp into a user-friendly display string for the listbox, using Windows locale-aware date formatting.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_11

LANGUAGE: cpp
CODE:
```
  std::wstring FormatTodoDisplay(const std::wstring &text, const SYSTEMTIME &st)
  {
    wchar_t dateStr[64];
    GetDateFormatW(LOCALE_USER_DEFAULT, DATE_SHORTDATE, &st, nullptr, dateStr, 64);
    return text + L" - " + dateStr;
  }
```

----------------------------------------

TITLE: Installing Dependencies on Ubuntu <20.04
DESCRIPTION: Command to install required development libraries and tools on Ubuntu versions before 20.04.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
sudo apt-get install build-essential clang libdbus-1-dev libgtk-3-dev \
                       libnotify-dev libgnome-keyring-dev \
                       libasound2-dev libcap-dev libcups2-dev libxtst-dev \
                       libxss1 libnss3-dev gcc-multilib g++-multilib curl \
                       gperf bison python-dbusmock openjdk-8-jre
```

----------------------------------------

TITLE: Running example in Electron Fiddle
DESCRIPTION: This code snippet demonstrates how to embed an Electron Fiddle example in the documentation. It uses a special syntax to load an example from the 'docs/fiddles/quick-start' directory.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/introduction.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
```fiddle docs/fiddles/quick-start
```
```

----------------------------------------

TITLE: Example Beta Release Versioning Sequence
DESCRIPTION: Demonstrates the typical version sequence for a major or minor Electron release, including beta versions and stable releases with patches.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/electron-versioning.md#2025-04-21_snippet_2

LANGUAGE: plaintext
CODE:
```
2.0.0-beta.1
2.0.0-beta.2
2.0.0-beta.3
2.0.0
2.0.1
2.0.2
```

----------------------------------------

TITLE: Documenting Print Next Version Script in Markdown
DESCRIPTION: Explains the 'print-next-version' script, which outputs the theoretical next version for a release.
SOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
### `print-next-version`

This script just outputs the theoretical "next" version that a release would use.
```

----------------------------------------

TITLE: Defining IpcMainServiceWorkerEvent Object Properties in Markdown
DESCRIPTION: This snippet outlines the properties of the IpcMainServiceWorkerEvent object, including their types and descriptions. It covers essential attributes like type, serviceWorker, versionId, session, returnValue, ports, and the reply function.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/ipc-main-service-worker-event.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# IpcMainServiceWorkerEvent Object extends `Event`

* `type` String - Possible values include `service-worker`.
* `serviceWorker` [ServiceWorkerMain](../service-worker-main.md) _Readonly_ - The service worker that sent this message
* `versionId` Number - The service worker version ID.
* `session` Session - The [`Session`](../session.md) instance with which the event is associated.
* `returnValue` any - Set this to the value to be returned in a synchronous message
* `ports` [MessagePortMain](../message-port-main.md)[] - A list of MessagePorts that were transferred with this message
* `reply` Function - A function that will send an IPC message to the renderer frame that sent the original message that you are currently handling.  You should use this method to "reply" to the sent message in order to guarantee the reply will go to the correct process and frame.
  * `channel` string
  * `...args` any[]
```

----------------------------------------

TITLE: Handling BrowserWindow scroll-touch Events (Deprecated JavaScript)
DESCRIPTION: Demonstrates listening for deprecated `scroll-touch-begin`, `scroll-touch-edge`, and `scroll-touch-end` events directly on a `BrowserWindow` instance. These events are deprecated in favor of using the `input-event` on `webContents`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_51

LANGUAGE: JavaScript
CODE:
```
// Deprecated
win.on('scroll-touch-begin', scrollTouchBegin)
win.on('scroll-touch-edge', scrollTouchEdge)
win.on('scroll-touch-end', scrollTouchEnd)
```

----------------------------------------

TITLE: TypeScript Module Export Configuration
DESCRIPTION: Configures module export in the browser API module list
SOURCE: https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
export const browserModuleList: ElectronInternal.ModuleEntry[] = [
  { name: 'apiName', loader: () => require('./api-name') },
];
```

----------------------------------------

TITLE: Installing Dependencies on Ubuntu 20.04+
DESCRIPTION: Command to install required development libraries and tools on Ubuntu 20.04 or newer versions.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
sudo apt-get install build-essential clang libdbus-1-dev libgtk-3-dev \
                       libnotify-dev libasound2-dev libcap-dev \
                       libcups2-dev libxtst-dev \
                       libxss1 libnss3-dev gcc-multilib g++-multilib curl \
                       gperf bison python3-dbusmock openjdk-8-jre
```

----------------------------------------

TITLE: Structuring Markdown Headers in Electron Docs
DESCRIPTION: Example showing the correct hierarchy and formatting of markdown headers in Electron documentation using Quick Start guide as an example.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Quick Start

...

## Main process

...

## Renderer process

...

## Run your app

...

### Run as a distribution

...

### Manually downloaded Electron binary

...
```

----------------------------------------

TITLE: Defining MimeTypedBuffer Object Structure in Markdown
DESCRIPTION: This snippet outlines the properties of the MimeTypedBuffer object. It includes optional MIME type and charset strings, as well as the required Buffer data.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/mime-typed-buffer.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# MimeTypedBuffer Object

* `mimeType` string (optional) - MIME type of the buffer.
* `charset` string (optional) - Charset of the buffer.
* `data` Buffer - The actual Buffer content.
```

----------------------------------------

TITLE: Exporting Node.js V8 Patches Using Git Commands
DESCRIPTION: Commands to extract patches made to V8 engine in Node.js. The process involves finding the last V8 update commit and creating a patch file containing all subsequent V8-related changes, excluding gypfiles directory. The patches are formatted to apply cleanly to the V8 repository.
SOURCE: https://github.com/electron/electron/blob/main/patches/v8/README.md#2025-04-21_snippet_0

LANGUAGE: cmd
CODE:
```
$ cd third_party/electron_node
$ CURRENT_NODE_VERSION=vX.Y.Z  # e.g. v10.11.0

# Find the last commit with the message "deps: update V8 to <some version>"
# This commit corresponds to node resetting V8 to its pristine upstream
# state at the stated version.
$ LAST_V8_UPDATE="$(git log --grep='^deps: update V8' --format='%H' -1 deps/v8)"

# This creates a patch file containing all changes in deps/v8 from
# $LAST_V8_UPDATE up to the current node version, formatted in a way that
# it will apply cleanly to the V8 repository (i.e. with `deps/v8`
# stripped off the path and excluding the v8/gypfiles directory, which
# isn't present in V8.
$ git format-patch \
    --relative=deps/v8 \
    $LAST_V8_UPDATE..$CURRENT_NODE_VERSION \
    deps/v8 \
    ':(exclude)deps/v8/gypfiles' \
    --stdout
```

----------------------------------------

TITLE: Defining TraceCategoriesAndOptions Object Structure in Markdown
DESCRIPTION: This snippet outlines the structure of the TraceCategoriesAndOptions object, detailing its properties 'categoryFilter' and 'traceOptions'. It explains how to use these properties to configure tracing behavior, including filtering categories and setting trace recording modes.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/trace-categories-and-options.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# TraceCategoriesAndOptions Object

* `categoryFilter` string - A filter to control what category groups
  should be traced. A filter can have an optional '-' prefix to exclude
  category groups that contain a matching category. Having both included
  and excluded category patterns in the same list is not supported. Examples:
  `test_MyTest*`, `test_MyTest*,test_OtherStuff`, `-excluded_category1,-excluded_category2`.
* `traceOptions` string - Controls what kind of tracing is enabled,
  it is a comma-delimited sequence of the following strings:
  `record-until-full`, `record-continuously`, `trace-to-console`, `enable-sampling`, `enable-systrace`,
  e.g. `'record-until-full,enable-sampling'`.
  The first 3 options are trace recording modes and hence mutually exclusive.
  If more than one trace recording modes appear in the `traceOptions` string,
  the last one takes precedence. If none of the trace recording modes are
  specified, recording mode is `record-until-full`.
  The trace option will first be reset to the default option (`record_mode` set
  to `record-until-full`, `enable_sampling` and `enable_systrace`
  set to `false`) before options parsed from `traceOptions` are applied on it.
```

----------------------------------------

TITLE: Windows Delay-Load Hook Linker Configuration
DESCRIPTION: Example linker command configuration for setting up delay-load hooks in Windows native modules.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-21_snippet_5

LANGUAGE: plaintext
CODE:
```
 link.exe /OUT:"foo.node" "...\node.lib" delayimp.lib /DELAYLOAD:node.exe /DLL
     "my_addon.obj" "win_delay_load_hook.obj"
```

----------------------------------------

TITLE: Logging Debug Information in Chromium C++
DESCRIPTION: Examples of using Chromium's logging macros to print debug information to console. Demonstrates different logging severity levels (INFO, WARN, ERROR) and variable value output.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging.md#2025-04-21_snippet_0

LANGUAGE: cpp
CODE:
```
LOG(INFO) << "bitmap.width(): " << bitmap.width();

LOG(INFO, bitmap.width() > 10) << "bitmap.width() is greater than 10!";
```

----------------------------------------

TITLE: Finding commit when API was added using git log in Bash
DESCRIPTION: This bash command again uses `git log` to find the commit that originally added the `GetTrafficLightPosition` functionality. This is achieved by using the `--reverse` option to show the earliest commit first.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
$ git log --reverse -L :GetTrafficLightPosition:shell/browser/native_window_mac.mm
commit 3e2cec83d927b991855e21cc311ca9046e332601
Author: Samuel Attard <sattard@slack-corp.com>
Date:   Thu Mar 5 14:22:12 2020 -0800

    feat: programmatically modify traffic light positioning (#22533)
```

----------------------------------------

TITLE: Valid URL Examples
DESCRIPTION: This code snippet provides examples of valid URLs that can be used within the filter object when working with Electron's WebRequest API. These examples illustrate the different URL patterns that can be used to target specific requests for interception and modification.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-request.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
'<all_urls>'
'http://foo:1234/'
'http://foo.com/'
'http://foo:1234/bar'
'*://*/*'
'*://example.com/*'
'*://example.com/foo/*'
'http://*.foo:1234/'
'file://foo:1234/bar'
'http://foo:*/'
'*://www.foo.com/'
```

----------------------------------------

TITLE: Defining SegmentedControlSegment Object Properties in Electron
DESCRIPTION: Specification of the properties available for configuring a segment within a segmented control in Electron applications. Properties include label text, icon image, and enabled state with their types and defaults.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/segmented-control-segment.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* `label` string (optional) - The text to appear in this segment.
* `icon` NativeImage (optional) - The image to appear in this segment.
* `enabled` boolean (optional) - Whether this segment is selectable. Default: true.
```

----------------------------------------

TITLE: Displaying Electron Scripts Directory Structure
DESCRIPTION: Shows the organization of Electron's script directory which contains various utility scripts for development, testing, and release management purposes.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/source-code-directory-structure.md#2025-04-21_snippet_1

LANGUAGE: diff
CODE:
```
script/ - The set of all scripts Electron runs for a variety of purposes.
├── codesign/ - Fakes codesigning for Electron apps; used for testing.
├── lib/ - Miscellaneous python utility scripts.
└── release/ - Scripts run during Electron's release process.
    ├── notes/ - Generates release notes for new Electron versions.
    └── uploaders/ - Uploads various release-related files during release.
```

----------------------------------------

TITLE: Documenting Publish to NPM Script in Markdown
DESCRIPTION: Explains the 'publish-to-npm' script, which completes the release process by publishing a new npm package.
SOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_6

LANGUAGE: markdown
CODE:
```
### `publish-to-npm`

This script finishes the release process by publishing a new `npm` package.
```

----------------------------------------

TITLE: Removing Patches in Electron
DESCRIPTION: Process for removing a patch from the patch set, including resetting the repository state and regenerating the patch files.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/patches.md#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
$ vim src/electron/patches/node/.patches
# Delete the line with the name of the patch you want to remove
$ cd src/third_party/electron_node
$ git reset --hard refs/patches/upstream-head
$ ../../electron/script/git-import-patches ../../electron/patches/node
$ ../../electron/script/git-export-patches -o ../../electron/patches/node
```

----------------------------------------

TITLE: Editing Existing Patches in Electron
DESCRIPTION: Commands for modifying an existing patch through git fixup and rebase workflow, followed by re-exporting the updated patch set.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/patches.md#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
$ cd src/v8
$ vim some/code/file.cc
$ git log
# Find the commit sha of the patch you want to edit.
$ git commit --fixup [COMMIT_SHA]
$ git rebase --autosquash -i [COMMIT_SHA]^
$ ../electron/script/git-export-patches -o ../electron/patches/v8
```

----------------------------------------

TITLE: Adding API History with multiple entries in Markdown with YAML
DESCRIPTION: This markdown snippet showcases an API history block with both `added` and `changes` entries.  This example includes the relevant pull request and a description of the changes made.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_4

LANGUAGE: markdown
CODE:
```
`````markdown
#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_

<!--
```YAML history
added:
  - pr-url: https://github.com/electron/electron/pull/22533
changes:
  - pr-url: https://github.com/electron/electron/pull/26789
    description: "Made `trafficLightPosition` option work for `customButtonOnHover` window."
    breaking-changes-header: behavior-changed-draggable-regions-on-macos
```
-->

Returns `Point` - The custom position for the traffic light buttons in
frameless window, `{ x: 0, y: 0 }` will be returned when there is no custom
position.
`````
```

----------------------------------------

TITLE: macOS Application Structure
DESCRIPTION: Illustrates the file structure required for a macOS Electron application. It shows where to place the `package.json`, `main.js`, and `index.html` files within the Electron application bundle. These files form the core of the Electron application and are essential for the application to function.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-21_snippet_0

LANGUAGE: plain
CODE:
```
"electron/Electron.app/Contents/Resources/app/
├── package.json
├── main.js
└── index.html"
```

----------------------------------------

TITLE: Method Documentation Format
DESCRIPTION: Template showing the standard format for documenting methods and their arguments.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_4

LANGUAGE: markdown
CODE:
```
### `objectName.methodName(required[, optional]))`

* `required` string - A parameter description.
* `optional` Integer (optional) - Another parameter description.

...
```

----------------------------------------

TITLE: Documenting Cleanup Release Script in Markdown
DESCRIPTION: Describes the 'cleanup-release' script, which reverts a failed or unreleasable version by deleting the draft release and git tag if they exist.
SOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
### `cleanup-release`

This script completely reverts a failed or otherwise unreleasable version. It does this by:

* Deleting the draft release if it exists
* Deleting the git tag if it exists

> [!NOTE]
> This is the only script / case where an existing tag will be deleted. Tags are only considered immutable after the release is published.
```

----------------------------------------

TITLE: Pushing Changes to Remote Repository
DESCRIPTION: Command to push local branch changes to the forked repository on GitHub.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
$ git push origin my-branch
```

----------------------------------------

TITLE: Configuring Basic Symbol Path in Windbg for Electron
DESCRIPTION: Sets up the basic symbol path in Windbg to use the Electron symbol server with a local cache directory.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-with-symbol-server.md#2025-04-21_snippet_0

LANGUAGE: powershell
CODE:
```
SRV*c:\code\symbols\*https://symbols.electronjs.org
```

----------------------------------------

TITLE: Marking Experimental API Reference in Markdown
DESCRIPTION: Demonstrates how experimental APIs are tagged in Electron's documentation using the _Experimental_ keyword.
SOURCE: https://github.com/electron/electron/blob/main/docs/experimental.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
_Experimental_
```

----------------------------------------

TITLE: Node Module Version Error Example
DESCRIPTION: Example error message shown when a native module is compiled against a different Node.js version than what Electron requires.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
Error: The module '/path/to/native/module.node'
was compiled against a different Node.js version using
NODE_MODULE_VERSION $XYZ. This version of Node.js requires
NODE_MODULE_VERSION $ABC. Please try re-compiling or re-installing
the module (for instance, using `npm rebuild` or `npm install`).
```

----------------------------------------

TITLE: Configuring GN Build Files for Electron Module
DESCRIPTION: Demonstrates how to add new API files to Electron's build configuration in filenames.gni, including platform-specific implementations.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-21_snippet_0

LANGUAGE: cpp
CODE:
```
lib_sources = [
    "path/to/api/api_name.cc",
    "path/to/api/api_name.h",
]

lib_sources_mac = [
    "path/to/api/api_name_mac.h",
    "path/to/api/api_name_mac.mm",
]

lib_sources_win = [
    "path/to/api/api_name_win.cc",
    "path/to/api/api_name_win.h",
]

lib_sources_linux = [
    "path/to/api/api_name_linux.cc",
    "path/to/api/api_name_linux.h",
]
```

----------------------------------------

TITLE: Defining WebSource Object Properties in Markdown
DESCRIPTION: This snippet defines the properties of the WebSource object. It includes a required 'code' property of type string and an optional 'url' property also of type string.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/web-source.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# WebSource Object

* `code` string
* `url` string (optional)
```

----------------------------------------

TITLE: Playwright Test Console Output
DESCRIPTION: Example of console output from running Playwright tests for Electron applications. This shows what a successful test run looks like in the terminal.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/automated-testing.md#2025-04-21_snippet_14

LANGUAGE: console
CODE:
```
☁  $ npx playwright test

Running 1 test using 1 worker

  ✓  example.spec.js:4:1 › example test (1s)
```

----------------------------------------

TITLE: Updating Pull Request with New Changes
DESCRIPTION: Commands for adding new commits and pushing updates to an existing pull request.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_6

LANGUAGE: sh
CODE:
```
$ git add my/changed/files
$ git commit
$ git push origin my-branch
```

----------------------------------------

TITLE: Single-Stepping Through Code
DESCRIPTION: Example showing step-by-step debugging through the Browser::SetName function using LLDB commands.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
(lldb) step
Process 25244 stopped
* thread #1: tid = 0x839a4c, 0x0000000100162dcc Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name="Electron") + 44 at browser.cc:119, queue = 'com.apple.main-thread', stop reason = step in
    frame #0: 0x0000000100162dcc Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name="Electron") + 44 at browser.cc:119
   116
   117 	void Browser::SetName(const std::string& name) {
   118 	  name_override_ = name;
-> 119 	}
   120 	
   121 	int Browser::GetBadgeCount() {
   122 	  return badge_count_;
```

----------------------------------------

TITLE: Troubleshooting Symbol Loading in Windbg
DESCRIPTION: Commands to diagnose symbol loading issues in Windbg by enabling verbose symbol logging and forcing reload of electron.exe symbols.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-with-symbol-server.md#2025-04-21_snippet_2

LANGUAGE: powershell
CODE:
```
> !sym noisy
> .reload /f electron.exe
```

----------------------------------------

TITLE: Event Documentation Format
DESCRIPTION: Template showing the standard format for documenting events and their return values.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_5

LANGUAGE: markdown
CODE:
```
### Event: 'wake-up'

Returns:

* `time` string

...
```

----------------------------------------

TITLE: Documenting Publish to GitHub Script in Markdown
DESCRIPTION: Details the 'publish-to-github' script, which finalizes the GitHub release by uploading headers, updating the assets CDN, and publishing the release.
SOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_5

LANGUAGE: markdown
CODE:
```
### `publish-to-github`

This script finalizes the GitHub release, in the process it:

* Uploads the header SHASUMs to the CDN
* Updates the `index.json` file on the assets CDN with the new version via metadumper
* Publishes the actual GitHub release
```

----------------------------------------

TITLE: API History Documentation Format
DESCRIPTION: Example showing how to document API changes using YAML blocks within HTML comments.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_6

LANGUAGE: markdown
CODE:
```
#### `win.setTrafficLightPosition(position)` _macOS_

<!--
```YAML history
added:
  - pr-url: https://github.com/electron/electron/pull/22533
changes:
  - pr-url: https://github.com/electron/electron/pull/26789
    description: "Made `trafficLightPosition` option work for `customButtonOnHover` window."
deprecated:
  - pr-url: https://github.com/electron/electron/pull/37094
    breaking-changes-header: deprecated-browserwindowsettrafficlightpositionposition
```
-->

* `position` [Point](structures/point.md)

Set a custom position for the traffic light buttons. Can only be used with `titleBarStyle` set to `hidden`.
```

----------------------------------------

TITLE: Defining OffscreenSharedTexture Object Structure in Markdown
DESCRIPTION: This snippet outlines the structure and properties of the OffscreenSharedTexture object, including texture info, metadata, and platform-specific attributes. It also describes the release function for managing texture lifecycle.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/offscreen-shared-texture.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# OffscreenSharedTexture Object

* `textureInfo` Object - The shared texture info.
  * `widgetType` string - The widget type of the texture. Can be `popup` or `frame`.
  * `pixelFormat` string - The pixel format of the texture. Can be `rgba` or `bgra`.
  * `codedSize` [Size](size.md) - The full dimensions of the video frame.
  * `visibleRect` [Rectangle](rectangle.md) - A subsection of [0, 0, codedSize.width(), codedSize.height()]. In OSR case, it is expected to have the full section area.
  * `contentRect` [Rectangle](rectangle.md) - The region of the video frame that capturer would like to populate. In OSR case, it is the same with `dirtyRect` that needs to be painted.
  * `timestamp` number - The time in microseconds since the capture start.
  * `metadata` Object - Extra metadata. See comments in src\media\base\video_frame_metadata.h for accurate details.
    * `captureUpdateRect` [Rectangle](rectangle.md) (optional) - Updated area of frame, can be considered as the `dirty` area.
    * `regionCaptureRect` [Rectangle](rectangle.md) (optional) - May reflect the frame's contents origin if region capture is used internally.
    * `sourceSize` [Rectangle](rectangle.md) (optional) - Full size of the source frame.
    * `frameCount` number (optional) - The increasing count of captured frame. May contain gaps if frames are dropped between two consecutively received frames.
  * `sharedTextureHandle` Buffer _Windows_ _macOS_ - The handle to the shared texture.
  * `planes` Object[] _Linux_ - Each plane's info of the shared texture.
    * `stride` number - The strides and offsets in bytes to be used when accessing the buffers via a memory mapping. One per plane per entry.
    * `offset` number - The strides and offsets in bytes to be used when accessing the buffers via a memory mapping. One per plane per entry.
    * `size` number - Size in bytes of the plane. This is necessary to map the buffers.
    * `fd` number - File descriptor for the underlying memory object (usually dmabuf).
  * `modifier` string _Linux_ - The modifier is retrieved from GBM library and passed to EGL driver.
* `release` Function - Release the resources. The `texture` cannot be directly passed to another process, users need to maintain texture lifecycles in
  main process, but it is safe to pass the `textureInfo` to another process. Only a limited number of textures can exist at the same time, so it's important
  that you call `texture.release()` as soon as you're done with the texture.
```

----------------------------------------

TITLE: Complete API History with added, changed, deprecated in Markdown with YAML
DESCRIPTION: This markdown snippet shows a comprehensive API history block, including `added`, `changes`, and `deprecated` entries, providing a complete timeline of the API's evolution. It links to the associated pull requests and breaking changes headers.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-21_snippet_7

LANGUAGE: markdown
CODE:
```
`````markdown
#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_

<!--
```YAML history
added:
  - pr-url: https://github.com/electron/electron/pull/22533
changes:
  - pr-url: https://github.com/electron/electron/pull/26789
    description: "Made `trafficLightPosition` option work for `customButtonOnHover` window."
    breaking-changes-header: behavior-changed-draggable-regions-on-macos
deprecated:
  - pr-url: https://github.com/electron/electron/pull/37878
    breaking-changes-header: deprecated-browserwindowgettrafficlightposition
```
-->

Returns `Point` - The custom position for the traffic light buttons in
frameless window, `{ x: 0, y: 0 }` will be returned when there is no custom
position.
`````
```

----------------------------------------

TITLE: Remove webview attribute disableguestresize (HTML)
DESCRIPTION: Notes the removal of the `disableguestresize` attribute on the `<webview>` tag. The document states there is no direct replacement for this attribute.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_131

LANGUAGE: html
CODE:
```
// Removed
webview.setAttribute('disableguestresize', '')
```

----------------------------------------

TITLE: Defining PreloadScriptRegistration Object Structure in Markdown
DESCRIPTION: This snippet describes the structure of the PreloadScriptRegistration object, including its properties and their types. It specifies the context type, optional ID, and required file path for preload scripts in Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/preload-script-registration.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# PreloadScriptRegistration Object

* `type` string - Context type where the preload script will be executed.
  Possible values include `frame` or `service-worker`.
* `id` string (optional) - Unique ID of preload script. Defaults to a random UUID.
* `filePath` string - Path of the script file. Must be an absolute path.
```

----------------------------------------

TITLE: RenderProcessGoneDetails Object Properties in Electron
DESCRIPTION: Defines the structure of the RenderProcessGoneDetails object which provides details about why a render process has terminated. The object contains a 'reason' string indicating the termination cause and an 'exitCode' Integer with the process exit code.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/render-process-gone-details.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* `reason` string - The reason the render process is gone.  Possible values:
  * `clean-exit` - Process exited with an exit code of zero
  * `abnormal-exit` - Process exited with a non-zero exit code
  * `killed` - Process was sent a SIGTERM or otherwise killed externally
  * `crashed` - Process crashed
  * `oom` - Process ran out of memory
  * `launch-failed` - Process never successfully launched
  * `integrity-failure` - Windows code integrity checks failed
* `exitCode` Integer - The exit code of the process, unless `reason` is
  `launch-failed`, in which case `exitCode` will be a platform-specific
  launch failure error code.
```

----------------------------------------

TITLE: Defining WebRequestFilter Object Properties in Markdown
DESCRIPTION: This snippet outlines the structure of a WebRequestFilter object, including the 'urls' array for URL patterns to include, optional 'excludeUrls' array for URL patterns to exclude, and optional 'types' array for filtering request types.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/web-request-filter.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# WebRequestFilter Object

* `urls` string[] - Array of [URL patterns](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns) used to include requests that match these patterns. Use the pattern `<all_urls>` to match all URLs.
* `excludeUrls` string[] (optional) - Array of [URL patterns](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns) used to exclude requests that match these patterns.
* `types` string[] (optional) - Array of types that will be used to filter out the requests that do not match the types. When not specified, all types will be matched. Can be `mainFrame`, `subFrame`, `stylesheet`, `script`, `image`, `font`, `object`, `xhr`, `ping`, `cspReport`, `media` or `webSocket`.
```

----------------------------------------

TITLE: Defining MemoryUsageDetails Object Properties in Markdown
DESCRIPTION: Specifies the properties of the MemoryUsageDetails object, including count, size, and liveSize. All properties are of type number.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/memory-usage-details.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# MemoryUsageDetails Object

* `count` number
* `size` number
* `liveSize` number
```

----------------------------------------

TITLE: Configuring Combined Symbol Path with Microsoft and Electron Servers
DESCRIPTION: Configures Windbg symbol path to use both Microsoft's symbol server and Electron's symbol server with local caching.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-with-symbol-server.md#2025-04-21_snippet_1

LANGUAGE: powershell
CODE:
```
SRV*c:\code\symbols\*https://msdl.microsoft.com/download/symbols;SRV*c:\code\symbols\*https://symbols.electronjs.org
```

----------------------------------------

TITLE: Documenting Run Release Build Script in Markdown
DESCRIPTION: Describes the 'run-release-build' script, used to re-run specific release builds after failures.
SOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_3

LANGUAGE: markdown
CODE:
```
### `run-release-build`

This script is used to re-kick specific release builds after they fail. Sudowoodo is responsible for prompting the release team as to whether or not to run this script.
```

----------------------------------------

TITLE: Defining SharedDictionaryInfo Object Properties in Markdown
DESCRIPTION: This snippet lists and describes the properties of the SharedDictionaryInfo object. It includes details about matching patterns, destinations, identifiers, URLs, timestamps, expiration, size, and hash information.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/shared-dictionary-info.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# SharedDictionaryInfo Object

* `match` string - The matching path pattern for the dictionary which was declared in 'use-as-dictionary' response header's `match` option.
* `matchDestinations` string[] - An array of matching destinations for the dictionary which was declared in 'use-as-dictionary' response header's `match-dest` option.
* `id` string - The Id for the dictionary which was declared in 'use-as-dictionary' response header's `id` option.
* `dictionaryUrl` string - URL of the dictionary.
* `lastFetchTime` Date - The time of when the dictionary was received from the network layer.
* `responseTime` Date - The time of when the dictionary was received from the server. For cached responses, this time could be "far" in the past.
* `expirationDuration` number - The expiration time for the dictionary which was declared in 'use-as-dictionary' response header's `expires` option in seconds.
* `lastUsedTime` Date - The time when the dictionary was last used.
* `size` number - The amount of bytes stored for this shared dictionary information object in Chromium's internal storage (usually Sqlite).
* `hash` string - The sha256 hash of the dictionary binary.
```

----------------------------------------

TITLE: Defining ProtocolRequest Object Structure in Markdown
DESCRIPTION: Defines the structure of a ProtocolRequest object with its properties including url, referrer, method, optional uploadData, and headers. Used in Electron for handling protocol-related requests.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/protocol-request.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* `url` string
* `referrer` string
* `method` string
* `uploadData` [UploadData[]](upload-data.md) (optional)
* `headers` Record\<string, string\>
```

----------------------------------------

TITLE: Defining ShortcutDetails Object Properties in Markdown
DESCRIPTION: Lists and describes the properties of the ShortcutDetails object, including required and optional fields. This object is likely used when creating or modifying shortcuts for Electron applications on Windows systems.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/shortcut-details.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# ShortcutDetails Object

* `target` string - The target to launch from this shortcut.
* `cwd` string (optional) - The working directory. Default is empty.
* `args` string (optional) - The arguments to be applied to `target` when
launching from this shortcut. Default is empty.
* `description` string (optional) - The description of the shortcut. Default
is empty.
* `icon` string (optional) - The path to the icon, can be a DLL or EXE. `icon`
and `iconIndex` have to be set together. Default is empty, which uses the
target's icon.
* `iconIndex` number (optional) - The resource ID of icon when `icon` is a
DLL or EXE. Default is 0.
* `appUserModelId` string (optional) - The Application User Model ID. Default
is empty.
* `toastActivatorClsid` string (optional) - The Application Toast Activator CLSID. Needed
for participating in Action Center.
```

----------------------------------------

TITLE: WebFrame Parent Property Definition
DESCRIPTION: Read-only property that represents the parent frame of the current webFrame. Returns null if webFrame is top or if parent is not in the current renderer process.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
webFrame.parent: WebFrame | null
```

----------------------------------------

TITLE: Defining UserDefaultTypes Object in TypeScript for Electron
DESCRIPTION: This code snippet defines the UserDefaultTypes object, which maps various data types to their corresponding JavaScript/TypeScript types. It's used as a helper alias and no actual object of this type will be instantiated.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/user-default-types.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
# UserDefaultTypes Object

* `string` string
* `boolean` boolean
* `integer` number
* `float` number
* `double` number
* `url` string
* `array` Array\<unknown>
* `dictionary` Record\<string, unknown>

This type is a helper alias, no object will ever exist of this type.
```

----------------------------------------

TITLE: Installing ARM Cross-Compilation Dependencies
DESCRIPTION: Commands to install dependencies for cross-compiling to ARM architecture.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
sudo apt-get install libc6-dev-armhf-cross linux-libc-dev-armhf-cross \
                       g++-arm-linux-gnueabihf
```

----------------------------------------

TITLE: Directory Structure for Native Win32 Addon
DESCRIPTION: The recommended folder structure for organizing a native Win32 addon project, showing the key files and directories needed including binding.gyp, header files, JavaScript interface, and C++ source files.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_0

LANGUAGE: txt
CODE:
```
my-native-win32-addon/
├── binding.gyp
├── include/
│   └── cpp_code.h
├── js/
│   └── index.js
├── package.json
└── src/
    ├── cpp_addon.cc
    └── cpp_code.cc
```

----------------------------------------

TITLE: Configuring launch.json for Electron Native Debugging on Windows
DESCRIPTION: JSON configuration for debugging the native Electron codebase on Windows using Visual Studio Code. It includes settings for the C++ debugger, program arguments, and environment variables.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/debugging-vscode.md#2025-04-21_snippet_2

LANGUAGE: json
CODE:
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "(Windows) Launch",
      "type": "cppvsdbg",
      "request": "launch",
      "program": "${workspaceFolder}\\out\\your-executable-location\\electron.exe",
      "args": ["your-electron-project-path"],
      "stopAtEntry": false,
      "cwd": "${workspaceFolder}",
      "environment": [
          {"name": "ELECTRON_ENABLE_LOGGING", "value": "true"},
          {"name": "ELECTRON_ENABLE_STACK_DUMPING", "value": "true"},
          {"name": "ELECTRON_RUN_AS_NODE", "value": ""},
      ],
      "externalConsole": false,
      "sourceFileMap": {
          "o:\\": "${workspaceFolder}",
      },
    },
  ]
}
```

----------------------------------------

TITLE: Displaying Platform and Action Support Table in Markdown
DESCRIPTION: This snippet presents a table that details the support for different action types across platforms. It includes information on platform support, usage of the 'text' property, default text values, and limitations for each action type.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/notification-action.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
| Action Type | Platform Support | Usage of `text` | Default `text` | Limitations |
|-------------|------------------|-----------------|----------------|-------------|
| `button`    | macOS            | Used as the label for the button | "Show" (or a localized string by system default if first of such `button`, otherwise empty) | Only the first one is used. If multiple are provided, those beyond the first will be listed as additional actions (displayed when mouse active over the action button). Any such action also is incompatible with `hasReply` and will be ignored if `hasReply` is `true`. |
```

----------------------------------------

TITLE: Documenting Validate Before Publish Script in Markdown
DESCRIPTION: Explains the 'validate-before-publish' script, which checks for asset existence, checksum matching, and successful header and symbol uploads before publishing.
SOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_4

LANGUAGE: markdown
CODE:
```
### `validate-before-publish`

This script ensures that a release is in a valid state before publishing it anywhere. Specifically it checks:

* All assets exist
* All checksums match uploaded assets
* Headers have been uploaded to the header CDN
* Symbols have been uploaded to the symbol CDN
```

----------------------------------------

TITLE: Adding New Patches in Electron
DESCRIPTION: Bash commands demonstrating how to create and export a new patch to the Electron patch system. Creates a commit and exports it as a patch file.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/patches.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
$ cd src/third_party/electron_node
$ vim some/code/file.cc
$ git commit
$ ../../electron/script/git-export-patches -o ../../electron/patches/node
```

----------------------------------------

TITLE: Setting ARM Target in GN Build Configuration
DESCRIPTION: Command to configure GN build system for ARM target architecture.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-21_snippet_7

LANGUAGE: sh
CODE:
```
gn gen out/Testing --args='import(...) target_cpu="arm"'
```

----------------------------------------

TITLE: Rebasing Branch with Upstream Changes
DESCRIPTION: Commands to synchronize local branch with the main repository using git rebase.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
$ git fetch upstream
$ git rebase upstream/main
```

----------------------------------------

TITLE: Implementing Electron API Source File
DESCRIPTION: Source file template for new Electron API module showing implementation of Wrappable methods and Node initialization
SOURCE: https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-21_snippet_2

LANGUAGE: cpp
CODE:
```
#include "shell/browser/api/electron_api_safe_storage.h"

#include "shell/browser/browser.h"
#include "shell/common/gin_converters/base_converter.h"
#include "shell/common/gin_converters/callback_converter.h"
#include "shell/common/gin_helper/dictionary.h"
#include "shell/common/gin_helper/object_template_builder.h"
#include "shell/common/node_includes.h"
#include "shell/common/platform_util.h"

namespace electron {

namespace api {

gin::WrapperInfo ApiName::kWrapperInfo = {gin::kEmbedderNativeGin};

gin::ObjectTemplateBuilder ApiName::GetObjectTemplateBuilder(
    v8::Isolate* isolate) {
  return gin::ObjectTemplateBuilder(isolate)
      .SetMethod("methodName", &ApiName::methodName);
}

const char* ApiName::GetTypeName() {
  return "ApiName";
}

// static
gin::Handle<ApiName> ApiName::Create(v8::Isolate* isolate) {
  return gin::CreateHandle(isolate, new ApiName());
}

} // namespace api

} // namespace electron

namespace {

void Initialize(v8::Local<v8::Object> exports,
                v8::Local<v8::Value> unused,
                v8::Local<v8::Context> context,
                void* priv) {
  v8::Isolate* isolate = context->GetIsolate();
  gin_helper::Dictionary dict(isolate, exports);
  dict.Set("apiName", electron::api::ApiName::Create(isolate));
}

}  // namespace
```

----------------------------------------

TITLE: Installing Visual Studio Components for ARM64 Development
DESCRIPTION: This PowerShell command installs the necessary Visual Studio 2017 components for cross-compiling native modules for ARM64 architecture on Windows.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-arm.md#2025-04-21_snippet_1

LANGUAGE: powershell
CODE:
```
vs_installer.exe ^
--add Microsoft.VisualStudio.Workload.NativeDesktop ^
--add Microsoft.VisualStudio.Component.VC.ATLMFC ^
--add Microsoft.VisualStudio.Component.VC.Tools.ARM64 ^
--add Microsoft.VisualStudio.Component.VC.MFC.ARM64 ^
--includeRecommended
```

----------------------------------------

TITLE: Directory References in Electron Documentation
DESCRIPTION: References to key documentation and directory locations within the Electron project structure
SOURCE: https://github.com/electron/electron/blob/main/docs/development/README.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* [Issues](issues.md)
* [Pull Requests](pull-requests.md)
* [Documentation Styleguide](coding-style.md#documentation)
* [Source Code Directory Structure](source-code-directory-structure.md)
* [Coding Style](coding-style.md)
* [Using clang-tidy on C++ Code](clang-tidy.md)
* [Build Instructions](build-instructions-gn.md)
  * [macOS](build-instructions-macos.md)
  * [Windows](build-instructions-windows.md)
  * [Linux](build-instructions-linux.md)
* [Chromium Development](chromium-development.md)
* [V8 Development](v8-development.md)
* [Testing](testing.md)
* [Debugging](debugging.md)
* [Patches](patches.md)
```

----------------------------------------

TITLE: Implementing 'Add Todo' Functionality in Objective-C
DESCRIPTION: This Objective-C code demonstrates the implementation of the `addTodo:` method, which is triggered by the 'Add' button. It retrieves the text from the text field and the date from the date picker, creates a new todo item with a unique ID, adds it to an array, reloads the table view to display the new todo, and clears the text field for the next entry.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_9

LANGUAGE: objc
CODE:
```
// Previous code...

// Action method for the Add button
- (void)addTodo:(id)sender {
    NSString *text = [_textField stringValue];
    if ([text length] > 0) {
        NSDate *date = [_datePicker dateValue];

        // Create a unique ID
        NSUUID *uuid = [NSUUID UUID];

        // Create a dictionary to store the todo
        NSDictionary *todo = @{
            @"id": [uuid UUIDString],
            @"text": text,
            @"date": date
        };

        // Add to our array
        [_todos addObject:todo];

        // Reload the table
        [_tableView reloadData];

        // Reset the text field
        [_textField setStringValue:@""];

        // Next, we'll notify our JavaScript world here...
    }
}

// More code to follow later...
```

----------------------------------------

TITLE: Documentation Lint Command
DESCRIPTION: Command to verify documentation formatting.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/coding-style.md#2025-04-21_snippet_4

LANGUAGE: Shell
CODE:
```
npm run lint:docs
```

----------------------------------------

TITLE: Running Electron in Debug Mode
DESCRIPTION: Output showing Electron launching and hitting a breakpoint in the Browser::SetName function.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-21_snippet_3

LANGUAGE: sh
CODE:
```
(lldb) run
Process 25244 launched: '/Users/fr/Code/electron/out/Testing/Electron.app/Contents/MacOS/Electron' (x86_64)
Process 25244 stopped
* thread #1: tid = 0x839a4c, 0x0000000100162db4 Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name="Electron") + 20 at browser.cc:118, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
    frame #0: 0x0000000100162db4 Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name="Electron") + 20 at browser.cc:118
   115 	}
   116 	
   117 	void Browser::SetName(const std::string& name) {
-> 118 	  name_override_ = name;
   119 	}
   120 	
   121 	int Browser::GetBadgeCount() {
```

----------------------------------------

TITLE: Error message from gclient sync about rebasing
DESCRIPTION: This shows the error message that appears when gclient sync encounters a rebase conflict in the git tree. This typically happens when a previous sync operation was interrupted.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-21_snippet_1

LANGUAGE: plaintext
CODE:
```
2> Conflict while rebasing this branch.
2> Fix the conflict and run gclient again.
2> See man git-rebase for details.
```

----------------------------------------

TITLE: Defining IpcMainServiceWorkerInvokeEvent Object Properties in Markdown
DESCRIPTION: This snippet defines the properties of the IpcMainServiceWorkerInvokeEvent object, which extends the Event object. It includes the type, serviceWorker, versionId, and session properties, along with their descriptions and types.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/ipc-main-service-worker-invoke-event.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# IpcMainServiceWorkerInvokeEvent Object extends `Event`

* `type` String - Possible values include `service-worker`.
* `serviceWorker` [ServiceWorkerMain](../service-worker-main.md) _Readonly_ - The service worker that sent this message
* `versionId` Number - The service worker version ID.
* `session` Session - The [`Session`](../session.md) instance with which the event is associated.
```

----------------------------------------

TITLE: Listing Possible GPUFeatureStatus Values in Markdown
DESCRIPTION: This snippet enumerates the possible status values for GPU features. Each value represents a different state of hardware acceleration or availability, with a brief description and color indication (red, yellow, or green) for visual representation in user interfaces.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/gpu-feature-status.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
* `disabled_software` - Software only. Hardware acceleration disabled (yellow)
* `disabled_off` - Disabled (red)
* `disabled_off_ok` - Disabled (yellow)
* `unavailable_software` - Software only, hardware acceleration unavailable (yellow)
* `unavailable_off` - Unavailable (red)
* `unavailable_off_ok` - Unavailable (yellow)
* `enabled_readback` - Hardware accelerated but at reduced performance (yellow)
* `enabled_force` - Hardware accelerated on all pages (green)
* `enabled` - Hardware accelerated (green)
* `enabled_on` - Enabled (green)
* `enabled_force_on` - Force enabled (green)
```

----------------------------------------

TITLE: Defining PreloadScript Object Properties in Markdown
DESCRIPTION: This snippet outlines the properties of the PreloadScript object in Electron. It includes the context type where the script will be executed, a unique ID for the script, and the absolute file path of the script.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/preload-script.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# PreloadScript Object

* `type` string - Context type where the preload script will be executed.
  Possible values include `frame` or `service-worker`.
* `id` string - Unique ID of preload script.
* `filePath` string - Path of the script file. Must be an absolute path.
```

----------------------------------------

TITLE: Defining Point Object Structure in Markdown
DESCRIPTION: Defines the structure of a Point object with x and y numeric properties. It also includes a note about automatic rounding of x and y values to whole integers when used in Electron APIs.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/point.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# Point Object

* `x` number
* `y` number

**Note:** Both `x` and `y` must be whole integers, when providing a point object
as input to an Electron API we will automatically round your `x` and `y` values
to the nearest whole integer.
```

----------------------------------------

TITLE: Rendering DocCardList Component in JSX
DESCRIPTION: Renders the DocCardList component in the documentation page layout.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/window-customization.md#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
<DocCardList />
```

----------------------------------------

TITLE: Xcode Architecture Error Example
DESCRIPTION: Error output showing incompatible architecture issues when building on arm64 with incorrect Xcode version. Shows mismatch between x86_64 and arm64e architectures.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/build-instructions-macos.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
xcrun: error: unable to load libxcrun\n(dlopen(/Users/<user>/.electron_build_tools/third_party/Xcode/Xcode.app/Contents/Developer/usr/lib/libxcrun.dylib (http://xcode.app/Contents/Developer/usr/lib/libxcrun.dylib), 0x0005):\n tried: '/Users/<user>/.electron_build_tools/third_party/Xcode/Xcode.app/Contents/Developer/usr/lib/libxcrun.dylib (http://xcode.app/Contents/Developer/usr/lib/libxcrun.dylib)'\n (mach-o file, but is an incompatible architecture (have (x86_64), need (arm64e))), '/Users/<user>/.electron_build_tools/third_party/Xcode/Xcode-11.1.0.app/Contents/Developer/usr/lib/libxcrun.dylib (http://xcode-11.1.0.app/Contents/Developer/usr/lib/libxcrun.dylib)' (mach-o file, but is an incompatible architecture (have (x86_64), need (arm64e))).
```

----------------------------------------

TITLE: API Documentation Structure for AutoUpdater
DESCRIPTION: Example showing how to document module methods and events for non-class modules.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
# autoUpdater

## Events

### Event: 'error'

## Methods

### `autoUpdater.setFeedURL(url[, requestHeaders])`
```

----------------------------------------

TITLE: Defining UploadRawData Object Properties in Markdown
DESCRIPTION: This snippet outlines the properties of the UploadRawData object. It specifies the type of data and the buffer containing the actual data to be uploaded.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/upload-raw-data.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# UploadRawData Object

* `type` 'rawData' - `rawData`.
* `bytes` Buffer - Data to be uploaded.
```

----------------------------------------

TITLE: Importing Shared Texture in Direct3D (Windows)
DESCRIPTION: This code snippet shows how to import a shared texture handle into a Direct3D rendering program on Windows. It demonstrates opening the shared resource, extracting texture description, and creating a staging texture for efficient copying.
SOURCE: https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-21_snippet_4

LANGUAGE: c++
CODE:
```
// Windows
HANDLE handle = *reinterpret_cast<HANDLE*>(handleBufferData);
Microsoft::WRL::ComPtr<ID3D11Texture2D> shared_texture = nullptr;
HRESULT hr = device1->OpenSharedResource1(handle, IID_PPV_ARGS(&shared_texture)); 

// Extract the texture description
D3D11_TEXTURE2D_DESC desc;
shared_texture->GetDesc(&desc);

// Cache the staging texture if it does not exist or size has changed
if (!cached_staging_texture || cached_width != desc.Width ||
    cached_height != desc.Height) {
  if (cached_staging_texture) {
    cached_staging_texture->Release();
  }

  desc.CPUAccessFlags = D3D11_CPU_ACCESS_READ;
  desc.Usage = D3D11_USAGE_STAGING;
  desc.BindFlags = 0;
  desc.MiscFlags = 0;

  std::cout << "Create staging Texture2D width=" << desc.Width
            << " height=" << desc.Height << std::endl;
  hr = device->CreateTexture2D(&desc, nullptr, &cached_staging_texture);

  cached_width = desc.Width;
  cached_height = desc.Height;
}

// Copy to a intermediate texture
context->CopyResource(cached_staging_texture.Get(), shared_texture.Get());
```

----------------------------------------

TITLE: Complex Class Documentation Structure
DESCRIPTION: Comprehensive example showing documentation structure for multiple classes with various components like methods, events, and properties.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_3

LANGUAGE: markdown
CODE:
```
# session

## Methods

### session.fromPartition(partition)

## Static Properties

### session.defaultSession

## Class: Session

### Instance Events

#### Event: 'will-download'

### Instance Methods

#### `ses.getCacheSize()`

### Instance Properties

#### `ses.cookies`

## Class: Cookies

### Instance Methods

#### `cookies.get(filter, callback)`
```

----------------------------------------

TITLE: API Documentation for Session Module
DESCRIPTION: Example of proper API documentation structure for a module with classes, including title, description, methods and events.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-21_snippet_1

LANGUAGE: markdown
CODE:
```
# session

> Manage browser sessions, cookies, cache, proxy settings, etc.
```

----------------------------------------

TITLE: Documenting Prepare for Release Script in Markdown
DESCRIPTION: Details the 'prepare-for-release' script, which creates git tags and initiates release builds on GitHub Actions.
SOURCE: https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-21_snippet_2

LANGUAGE: markdown
CODE:
```
### `prepare-for-release`

This script creates all the requisite tags and CI builds that will populate required release assets.

* Creates the git tag
* Kicks off all release builds on GitHub Actions
```

----------------------------------------

TITLE: Importing DocCardList Component in JSX
DESCRIPTION: Imports the DocCardList component from the theme directory, used for rendering documentation cards in the page layout.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/window-customization.md#2025-04-21_snippet_0

LANGUAGE: jsx
CODE:
```
import DocCardList from '@theme/DocCardList';
```

----------------------------------------

TITLE: Creating Directory Structure for Native Addon Project
DESCRIPTION: Shell commands to create the necessary directory structure for a native Node.js addon project, including src (for source files), include (for header files), and js (for JavaScript wrapper).
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-21_snippet_5

LANGUAGE: sh
CODE:
```
mkdir src
mkdir include
mkdir js
```

----------------------------------------

TITLE: Re-enabling webviewTag via webPreferences
DESCRIPTION: Due to the change in default behavior, the `webviewTag` property now defaults to `false`. To re-enable it, you must explicitly set `webviewTag: true` within the `webPreferences` object when creating a `BrowserWindow`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_104

LANGUAGE: javascript
CODE:
```
const w = new BrowserWindow({
  webPreferences: {
    webviewTag: true
  }
})
```

----------------------------------------

TITLE: Navigating to Specific History Entries in Electron
DESCRIPTION: This code demonstrates how to navigate to specific points in the browsing history using either absolute indexes or relative offsets from the current position.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
// Navigate to the 5th entry in the history, if the index is valid
navigationHistory.goToIndex(4)

// Navigate to the 2nd entry forward from the current position
if (navigationHistory.canGoToOffset(2)) {
  navigationHistory.goToOffset(2)
}
```

----------------------------------------

TITLE: Styling for Dark Mode using CSS Media Queries
DESCRIPTION: This CSS snippet uses the prefers-color-scheme media query to apply different styles based on the system's color scheme preference. It sets background and text colors for both dark and light modes.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-21_snippet_1

LANGUAGE: css
CODE:
```
@media (prefers-color-scheme: dark) {
  body { background: #333; color: white; }
}

@media (prefers-color-scheme: light) {
  body { background: #ddd; color: black; }
}
```

----------------------------------------

TITLE: Using webRequest.onErrorOccurred Method in Electron
DESCRIPTION: This method registers a listener that will be called when an error occurs during a web request. The listener receives a details object containing information about the failed request, including the error description, resource type, and related web contents.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-request.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
webRequest.onErrorOccurred([filter, ]listener)
```

----------------------------------------

TITLE: Limiting Navigation in Electron App
DESCRIPTION: Demonstrates how to restrict navigation to specific domains using URL validation.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_17

LANGUAGE: javascript
CODE:
```
const { URL } = require('url')
const { app } = require('electron')

app.on('web-contents-created', (event, contents) => {
  contents.on('will-navigate', (event, navigationUrl) => {
    const parsedUrl = new URL(navigationUrl)

    if (parsedUrl.origin !== 'https://example.com') {
      event.preventDefault()
    }
  })
})
```

----------------------------------------

TITLE: Add Draggable Element in index.html (HTML)
DESCRIPTION: This HTML snippet adds a draggable div element with the id 'drag' to the page. The `draggable` attribute is set to 'true', and a renderer script is included.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-file-drag-drop.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<div style="border:2px solid black;border-radius:3px;padding:5px;display:inline-block" draggable="true" id="drag">Drag me</div>
<script src="renderer.js"></script>
```

----------------------------------------

TITLE: Disabling USB Blocklist in Electron
DESCRIPTION: Code snippet showing how to disable the default USB device blocklist in Electron by setting the 'disable-usb-blocklist' command line flag.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/devices.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
app.commandLine.appendSwitch('disable-usb-blocklist')
```

----------------------------------------

TITLE: Validating Electron Fuses Using Command Line
DESCRIPTION: Command to read and verify the current state of fuses in an installed Electron application using the @electron/fuses CLI tool.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/fuses.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx @electron/fuses read --app /Applications/Foo.app
```

----------------------------------------

TITLE: Showing Asynchronous Message Box in Electron
DESCRIPTION: This function displays an asynchronous message box in Electron. It accepts optional window and options parameters, and returns a Promise with information about the user's response and checkbox state (if applicable).
SOURCE: https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-21_snippet_6

LANGUAGE: JavaScript
CODE:
```
dialog.showMessageBox([window, ]options)
```

----------------------------------------

TITLE: Window Controller Interface (objc_code.mm)
DESCRIPTION: This Objective-C interface declares the TodoWindowController class, which manages the window and UI components. The properties include a text field (NSTextField) for entering todo text, a date picker (NSDatePicker) for selecting the date, an "Add" button (NSButton), a table view to display the todos (NSTableView), and an array to store the todo items (NSMutableArray).
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-objc-macos.md#_snippet_4

LANGUAGE: objc
CODE:
```
// Previous code...

// Forward declaration of our custom classes
@interface TodoWindowController : NSWindowController
@property (strong) NSTextField *textField;
@property (strong) NSDatePicker *datePicker;
@property (strong) NSButton *addButton;
@property (strong) NSTableView *tableView;
@property (strong) NSMutableArray<NSDictionary*> *todos;
@end

// More code to follow later...
```

----------------------------------------

TITLE: Setting DNS Result Order in Electron Command Line
DESCRIPTION: The '--dns-result-order' flag sets the default value of the 'verbatim' parameter in Node.js DNS lookup functions. It can be set to 'ipv4first' or 'verbatim' to control IP address resolution behavior.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-21_snippet_5

LANGUAGE: markdown
CODE:
```
--dns-result-order=order
```

----------------------------------------

TITLE: Loading URL with POST Data Electron JavaScript
DESCRIPTION: Shows how to perform a POST request when loading a URL in an Electron BrowserWindow using the win.loadURL method. It utilizes the 'postData' option to send raw data, such as URL-encoded parameters, and sets the 'Content-Type' header accordingly via 'extraHeaders'. Requires the 'electron' module and Node's built-in 'Buffer'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/browser-window.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

win.loadURL('http://localhost:8000/post', {
  postData: [{
    type: 'rawData',
    bytes: Buffer.from('hello=world')
  }],
  extraHeaders: 'Content-Type: application/x-www-form-urlencoded'
})
```

----------------------------------------

TITLE: Implementing Auto-Update in Main Process
DESCRIPTION: Imports and calls the update-electron-app module in the main process to set up automatic updates.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
require('update-electron-app')()
```

----------------------------------------

TITLE: Starting and Stopping Network Logging in Electron
DESCRIPTION: Example showing how to start network logging to a file path and stop it after some network events have occurred. The logged file path is then output to the console. This demonstrates the basic workflow of the netLog module.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/net-log.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, netLog } = require('electron')

app.whenReady().then(async () => {
  await netLog.startLogging('/path/to/net-log')
  // After some network events
  const path = await netLog.stopLogging()
  console.log('Net-logs written to', path)
})
```

----------------------------------------

TITLE: VS Code Debug Configuration for Electron
DESCRIPTION: Launch configuration for debugging both main and renderer processes in VS Code. Sets up compound debugging tasks with Chrome DevTools for renderer process and Node debugger for main process.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-21_snippet_13

LANGUAGE: json
CODE:
```
{
  "version": "0.2.0",
  "compounds": [
    {
      "name": "Main + renderer",
      "configurations": ["Main", "Renderer"],
      "stopAll": true
    }
  ],
  "configurations": [
    {
      "name": "Renderer",
      "port": 9222,
      "request": "attach",
      "type": "chrome",
      "webRoot": "${workspaceFolder}"
    },
    {
      "name": "Main",
      "type": "node",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron",
      "windows": {
        "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron.cmd"
      },
      "args": [".", "--remote-debugging-port=9222"],
      "outputCapture": "std",
      "console": "integratedTerminal"
    }
  ]
}
```

----------------------------------------

TITLE: Creating Custom Jump List in Electron
DESCRIPTION: Demonstrates how to create a custom Jump List for an Electron application on Windows using the app.setJumpList() method. The example includes custom categories, file items, task items, and built-in frequent items.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_20

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.setJumpList([
  {
    type: 'custom',
    name: 'Recent Projects',
    items: [
      { type: 'file', path: 'C:\\Projects\\project1.proj' },
      { type: 'file', path: 'C:\\Projects\\project2.proj' }
    ]
  },
  { // has a name so `type` is assumed to be "custom"
    name: 'Tools',
    items: [
      {
        type: 'task',
        title: 'Tool A',
        program: process.execPath,
        args: '--run-tool-a',
        iconPath: process.execPath,
        iconIndex: 0,
        description: 'Runs Tool A'
      },
      {
        type: 'task',
        title: 'Tool B',
        program: process.execPath,
        args: '--run-tool-b',
        iconPath: process.execPath,
        iconIndex: 0,
        description: 'Runs Tool B'
      }
    ]
  },
  { type: 'frequent' },
  { // has no name and no type so `type` is assumed to be "tasks"
    items: [
      {
        type: 'task',
        title: 'New Project',
        program: process.execPath,
        args: '--new-project',
        description: 'Create a new project.'
      },
      { type: 'separator' },
      {
        type: 'task',
        title: 'Recover Project',
        program: process.execPath,
        args: '--recover-project',
        description: 'Recover Project'
      }
    ]
  }
])
```

----------------------------------------

TITLE: PowerMonitor getSystemIdleState Method
DESCRIPTION: Method that returns the system's current idle state as a string. Takes an idleThreshold parameter in seconds to determine when system is considered idle. Returns 'active', 'idle', 'locked' or 'unknown'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
powerMonitor.getSystemIdleState(idleThreshold)
```

----------------------------------------

TITLE: Insecure BrowserWindow Configuration with Blink Features
DESCRIPTION: Example showing how not to configure a BrowserWindow by enabling specific Blink features that are disabled by default, which may cause security issues.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/security.md#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
// Bad
const mainWindow = new BrowserWindow({
  webPreferences: {
    enableBlinkFeatures: 'ExecCommandInJavaScript'
  }
})
```

----------------------------------------

TITLE: Handling Basic Authentication in Electron
DESCRIPTION: This snippet shows how to respond to the 'login' event in an Electron application. It prevents the default behavior of canceling all authentications and supplies hardcoded credentials when a webpage or utility process requests authentication.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.on('login', (event, webContents, details, authInfo, callback) => {
  event.preventDefault()
  callback('username', 'secret')
})
```

----------------------------------------

TITLE: Setting Draggable Region for Entire Window Body in CSS
DESCRIPTION: This CSS snippet makes the entire window draggable by applying the app-region: drag property to the body element.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-21_snippet_0

LANGUAGE: css
CODE:
```
body {
  app-region: drag;
}
```

----------------------------------------

TITLE: Setting Custom Application Paths in Electron
DESCRIPTION: The app.setPath method overrides the path to a special directory associated with the given name. This allows customizing where application data is stored.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
app.setPath(name, path)
```

----------------------------------------

TITLE: Checking for Command Line Switch in Electron (JavaScript)
DESCRIPTION: This snippet demonstrates how to check if the '--disable-gpu' flag is set using the CommandLine class in Electron.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
app.commandLine.hasSwitch('disable-gpu')
```

----------------------------------------

TITLE: Defining ProcessMetric Object Structure in Markdown
DESCRIPTION: This snippet outlines the structure and properties of the ProcessMetric object used in Electron. It includes details on process identification, type classification, resource usage, and platform-specific attributes.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/process-metric.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
# ProcessMetric Object

* `pid` Integer - Process id of the process.
* `type` string - Process type. One of the following values:
  * `Browser`
  * `Tab`
  * `Utility`
  * `Zygote`
  * `Sandbox helper`
  * `GPU`
  * `Pepper Plugin`
  * `Pepper Plugin Broker`
  * `Unknown`
* `serviceName` string (optional) - The non-localized name of the process.
* `name` string (optional) - The name of the process.
    Examples for utility: `Audio Service`, `Content Decryption Module Service`, `Network Service`, `Video Capture`, etc.
* `cpu` [CPUUsage](cpu-usage.md) - CPU usage of the process.
* `creationTime` number - Creation time for this process.
    The time is represented as number of milliseconds since epoch.
    Since the `pid` can be reused after a process dies,
    it is useful to use both the `pid` and the `creationTime` to uniquely identify a process.
* `memory` [MemoryInfo](memory-info.md) - Memory information for the process.
* `sandboxed` boolean (optional) _macOS_ _Windows_ - Whether the process is sandboxed on OS level.
* `integrityLevel` string (optional) _Windows_ - One of the following values:
  * `untrusted`
  * `low`
  * `medium`
  * `high`
  * `unknown`
```

----------------------------------------

TITLE: Sending Asynchronous Messages to Service Worker in Electron
DESCRIPTION: This method sends an asynchronous message to the service worker process. It takes a channel name and optional arguments, which are serialized using the Structured Clone Algorithm.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/service-worker-main.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
serviceWorker.send(channel, ...args)
```

----------------------------------------

TITLE: Getting Application Locale in Electron
DESCRIPTION: The app.getLocale method returns the current application locale using Chromium's l10n_util library. This API must be called after the ready event is emitted.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/app.md#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
app.getLocale()
```

----------------------------------------

TITLE: WebView Configuration Properties
DESCRIPTION: Configuration options for Electron WebView including transparency settings, deprecated paste command support, and experimental corner smoothing CSS. The transparent option controls background transparency, enableDeprecatedPaste enables legacy paste command support, and enableCornerSmoothingCSS controls corner smoothing CSS rules.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/structures/web-preferences.md#2025-04-21_snippet_0

LANGUAGE: markdown
CODE:
```
* `transparent` boolean (optional) - Whether to enable background transparency for the guest page. Default is `true`. **Note:** The guest page's text and background colors are derived from the [color scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme) of its root element. When transparency is enabled, the text color will still change accordingly but the background will remain transparent.
* `enableDeprecatedPaste` boolean (optional) _Deprecated_ - Whether to enable the `paste` [execCommand](https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand). Default is `false`.
* `enableCornerSmoothingCSS` boolean (optional) _Experimental_ - Whether the [`-electron-corner-smoothing` CSS rule](../corner-smoothing-css.md) is enabled. Default is `true`.
```

----------------------------------------

TITLE: Implementing Flash Frame Effect in Electron for Windows
DESCRIPTION: This snippet shows how to use the flashFrame API to highlight the taskbar button of a BrowserWindow in Electron. It starts flashing and stops when the window gains focus.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow()

win.once('focus', () => win.flashFrame(false))
win.flashFrame(true)
```

----------------------------------------

TITLE: Launching Electron with the --inspect Flag for Main Process Debugging
DESCRIPTION: This command demonstrates how to start Electron with the --inspect flag to enable debugging of the main process on port 9229. An external debugger needs to connect to this port to debug the application.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/debugging-main-process.md#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
electron --inspect=9229 your/app
```

----------------------------------------

TITLE: Handling Download Events in Electron Session
DESCRIPTION: Demonstrates how to listen for the 'will-download' event on the default session, prevent the default download behavior, and implement custom download handling using the 'got' library.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/session.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')
session.defaultSession.on('will-download', (event, item, webContents) => {
  event.preventDefault()
  require('got')(item.getURL()).then((response) => {
    require('node:fs').writeFileSync('/somewhere', response.body)
  })
})
```

----------------------------------------

TITLE: IPC Handler Setup in Main Process
DESCRIPTION: Demonstrates how to set up an IPC handler in the main process to respond to ping requests from the renderer.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, ipcMain } = require('electron/main')
const path = require('node:path')

const createWindow = () => {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js')
    }
  })
  win.loadFile('index.html')
}
app.whenReady().then(() => {
  ipcMain.handle('ping', () => 'pong')
  createWindow()
})
```

----------------------------------------

TITLE: Checking if Clipboard Supports a Format in Electron
DESCRIPTION: Demonstrates how to check if the clipboard supports a specific format using the experimental clipboard.has() method.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

const hasFormat = clipboard.has('public/utf8-plain-text')
console.log(hasFormat)
// 'true' or 'false'
```

----------------------------------------

TITLE: Disabling Sandbox for Single Browser Window in Electron
DESCRIPTION: Example showing how to disable the sandbox for a specific renderer process using the BrowserWindow constructor with sandbox:false option.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/sandbox.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
app.whenReady().then(() => {
  const win = new BrowserWindow({
    webPreferences: {
      sandbox: false
    }
  })
  win.loadURL('https://google.com')
})
```

----------------------------------------

TITLE: Safely Preventing Native Module Loading in Web Workers
DESCRIPTION: This code snippet shows how to prevent loading native Node.js modules in Web Workers by overriding the process.dlopen function. It then creates a new Web Worker instance.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/multithreading.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
process.dlopen = () => {
  throw new Error('Load native module is not safe')
}
const worker = new Worker('script.js')
```

----------------------------------------

TITLE: Checking Dark Mode with Deprecated systemPreferences - Electron JavaScript
DESCRIPTION: Shows checking if dark mode is enabled using the deprecated `systemPreferences.isDarkMode()` method. This method has been removed and replaced by `nativeTheme.shouldUseDarkColors`.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_74

LANGUAGE: javascript
CODE:
```
// Removed in Electron 13
systemPreferences.isDarkMode()
```

----------------------------------------

TITLE: Renderer Process: Updating Connection Status
DESCRIPTION: This JavaScript code runs in the Renderer process and updates the connection status displayed in the HTML.  It adds event listeners for the 'online' and 'offline' events on the window object, and updates the content of the `<strong id='status'>` element based on the value of `navigator.onLine`. It also calls `updateOnlineStatus` to set the initial status when the page loads.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/online-offline-events.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const updateOnlineStatus = () => {
  document.getElementById('status').innerHTML = navigator.onLine ? 'online' : 'offline'
}

window.addEventListener('online', updateOnlineStatus)
window.addEventListener('offline', updateOnlineStatus)

updateOnlineStatus()
```

----------------------------------------

TITLE: Window Procedure for Todo List Application in Win32 C++
DESCRIPTION: This function handles Windows messages for the Todo List application. It processes commands like adding a new todo item, updates the UI, and notifies JavaScript callbacks when changes occur.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron-cpp-win32.md#2025-04-21_snippet_13

LANGUAGE: cpp
CODE:
```
  LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
  {
    switch (uMsg)
    {
      case WM_COMMAND:
      {
        HWND hListBox = GetDlgItem(hwnd, 3);
        int cmd = LOWORD(wParam);

        switch (cmd)
        {
          case 2: // Add button
          {
            wchar_t buffer[256];
            GetDlgItemTextW(hwnd, 1, buffer, 256);

            if (wcslen(buffer) > 0)
            {
              SYSTEMTIME st;
              HWND hDatePicker = GetDlgItem(hwnd, 4);
              DateTime_GetSystemtime(hDatePicker, &st);

              TodoItem todo;
              CoCreateGuid(&todo.id);
              todo.text = buffer;
              todo.date = SystemTimeToMillis(st);

              g_todos.push_back(todo);

              std::wstring displayText = FormatTodoDisplay(buffer, st);
              SendMessageW(hListBox, LB_ADDSTRING, 0, (LPARAM)displayText.c_str());

              ResetControls(hwnd);
              NotifyCallback(g_todoAddedCallback, todo.toJson());
            }
            break;
          }
        }
        break;
      }

      case WM_DESTROY:
      {
        PostQuitMessage(0);
        return 0;
      }
    }

    return DefWindowProcW(hwnd, uMsg, wParam, lParam);
  }
```

----------------------------------------

TITLE: Set Image Animation Policy - Electron
DESCRIPTION: This method sets the image animation policy for a given WebContents. The policy affects new images loaded into the WebContents. Existing animations are unaffected unless `img.src = img.src` is called to force a recalculation. The `policy` parameter can be 'animate', 'animateOnce', or 'noAnimation'.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-contents.md#_snippet_35

LANGUAGE: javascript
CODE:
```
contents.setImageAnimationPolicy(policy)
```

----------------------------------------

TITLE: Creating Development Branch in Electron
DESCRIPTION: Command to create and checkout a new development branch tracked against the upstream main branch.
SOURCE: https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
$ git checkout -b my-branch -t upstream/main
```

----------------------------------------

TITLE: Forking Utility Process in Electron - JavaScript
DESCRIPTION: The `utilityProcess.fork` method is used to spawn a new child process in an Electron application, similar to Node.js's `child_process.fork`. It supports various options, including setting environment variables, execution arguments, and configuring stdio modes. This method should be invoked after Electron's `ready` event is emitted, and it returns a UtilityProcess instance.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/utility-process.md#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
"const child = utilityProcess.fork(path.join(__dirname, 'test.js'))\nchild.stdout.on('data', (data) => {\n  console.log(`Received chunk ${data}`)\n})"
```

----------------------------------------

TITLE: Checking Payment Capability
DESCRIPTION: Method to verify if user can make payments. Returns a boolean value.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
inAppPurchase.canMakePayments()
```

----------------------------------------

TITLE: Using Deprecated webContents Capturer Counts (JavaScript)
DESCRIPTION: Demonstrates the deprecated pattern of manually calling `incrementCapturerCount` before and `decrementCapturerCount` after `webContents.capturePage`. This manual count management was removed in Electron 23 and is now handled automatically.
SOURCE: https://github.com/electron/electron/blob/main/docs/breaking-changes.md#_snippet_45

LANGUAGE: JavaScript
CODE:
```
const w = new BrowserWindow({ show: false })

// Removed in Electron 23
w.webContents.incrementCapturerCount()
w.capturePage().then(image => {
  console.log(image.toDataURL())
  w.webContents.decrementCapturerCount()
})
```

----------------------------------------

TITLE: Handling Console Messages from WebView in JavaScript
DESCRIPTION: Shows how to listen for and handle console messages from a guest page in a WebView. The example forwards all log messages to the embedder's console.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/webview-tag.md#2025-04-21_snippet_20

LANGUAGE: javascript
CODE:
```
const webview = document.querySelector('webview')
webview.addEventListener('console-message', (e) => {
  console.log('Guest page logged a message:', e.message)
})
```

----------------------------------------

TITLE: Accessing Frame Content in Electron BrowserWindow
DESCRIPTION: Demonstrates how to access and filter frames within a webpage using the mainFrame property of WebContents. Shows filtering YouTube embeds from Reddit page frames.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/web-frame-main.md#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

async function main () {
  const win = new BrowserWindow({ width: 800, height: 600 })
  await win.loadURL('https://reddit.com')

  const youtubeEmbeds = win.webContents.mainFrame.frames.filter((frame) => {
    try {
      const url = new URL(frame.url)
      return url.host === 'www.youtube.com'
    } catch {
      return false
    }
  })

  console.log(youtubeEmbeds)
}

main()
```

----------------------------------------

TITLE: Setting Thumbnail Toolbar in Electron for Windows
DESCRIPTION: This example demonstrates how to set a thumbnail toolbar with custom buttons for a BrowserWindow in Electron. It creates two buttons with different properties and click handlers.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
const { BrowserWindow, nativeImage } = require('electron')
const path = require('node:path')

const win = new BrowserWindow()

win.setThumbarButtons([
  {
    tooltip: 'button1',
    icon: nativeImage.createFromPath(path.join(__dirname, 'button1.png')),
    click () { console.log('button1 clicked') }
  }, {
    tooltip: 'button2',
    icon: nativeImage.createFromPath(path.join(__dirname, 'button2.png')),
    flags: ['enabled', 'dismissonclick'],
    click () { console.log('button2 clicked.') }
  }
])
```

----------------------------------------

TITLE: Invalid Dynamic ESM Imports in Unsandboxed Preload Scripts
DESCRIPTION: Demonstrates dynamic ESM imports that won't work in unsandboxed preload scripts without context isolation enabled.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/esm.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// ❌ these won't work without context isolation
const fs = await import('node:fs')
await import('./foo')
```

----------------------------------------

TITLE: Creating Modal Window in Renderer Process
DESCRIPTION: Example of creating a modal window from the renderer process and writing content to it.
SOURCE: https://github.com/electron/electron/blob/main/docs/api/window-open.md#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
// renderer process (mainWindow)
const childWindow = window.open('', 'modal')
childWindow.document.write('<h1>Hello</h1>')
```

----------------------------------------

TITLE: Safe API Exposure with contextBridge in JavaScript
DESCRIPTION: A secure way to expose IPC-based APIs by providing one method per IPC message, ensuring better control and safety.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
// ✅ Good code
contextBridge.exposeInMainWorld('myAPI', {
  loadPreferences: () => ipcRenderer.invoke('load-prefs')
})
```

----------------------------------------

TITLE: Cloning and Opening Electron Quick Start Project in VS Code
DESCRIPTION: Commands to clone the Electron Quick Start repository and open it in Visual Studio Code.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/debugging-vscode.md#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
$ git clone git@github.com:electron/electron-quick-start.git
$ code electron-quick-start
```

----------------------------------------

TITLE: Customizing Window Controls Appearance in Electron
DESCRIPTION: Shows how to customize the height, color, and symbol colors of window controls in an Electron application using the titleBarOverlay object with detailed styling options.
SOURCE: https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({
  titleBarStyle: 'hidden',
  titleBarOverlay: {
    color: '#2f3241',
    symbolColor: '#74b1be',
    height: 60
  }
})
```