TITLE: Initializing Express Web Server in JavaScript
DESCRIPTION: This snippet demonstrates the basic setup of an Express web application in JavaScript. It imports the Express module, creates an app instance, defines a GET route for the root path that sends a 'Hello World' response, and starts the server listening on port 3000. It requires Node.js and the Express package as dependencies and expects no input parameters. The output is a running HTTP server responding with plain text to GET requests at the root URL.
SOURCE: https://github.com/expressjs/express/blob/master/Readme.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import express from 'express'

const app = express()

app.get('/', (req, res) => {
  res.send('Hello World')
})

app.listen(3000)
```

----------------------------------------

TITLE: Installing a Module with npm in Shell
DESCRIPTION: Standard npm installation command for Express.js modules. This is typically included in the Installation section of module READMEs.
SOURCE: https://github.com/expressjs/express/blob/master/Readme-Guide.md#_snippet_0

LANGUAGE: sh
CODE:
```
$ npm install module-name
```

----------------------------------------

TITLE: Added `res.locals(obj)` to complement `res.local(key, val)`
DESCRIPTION: This feature allows bulk assignment of multiple local variables to views via `res.locals(obj)`, simplifying local variable management.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_12

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; implementation of object-based locals assignment */
```

----------------------------------------

TITLE: Introduced local variables for request, response, app, and settings
DESCRIPTION: This feature adds `request`, `response`, `app`, and `settings` local variables to views, facilitating access to core Express objects and configuration within templates.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; mechanism to inject locals into view templates */
```

----------------------------------------

TITLE: Fixed `res.sendfile()` to respond with 403 on malicious paths
DESCRIPTION: This security fix ensures that illegal or path-traversal attempts in `res.sendfile()` elicit a 403 Forbidden response.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_22

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; path validation logic for security */
```

----------------------------------------

TITLE: Wrapped `res.render()` with try/catch for error handling
DESCRIPTION: This change adds exception handling around `res.render()`, catching rendering errors and passing them to Express error middleware, improving robustness.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; pattern involves try/catch around render callbacks */
```

----------------------------------------

TITLE: Supported response body for `res.render()` with status options
DESCRIPTION: This update allows specifying HTTP status codes when rendering views, providing greater control over response statuses.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_21

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; pattern for status code parameter in render */
```

----------------------------------------

TITLE: Enhanced `res.header()` to send multiple Set-Cookie headers
DESCRIPTION: This fix allows `res.header()` to set multiple cookies correctly via multiple Set-Cookie headers, ensuring proper cookie handling.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_23

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; handling multiple headers in response */
```

----------------------------------------

TITLE: Added `res.send(bool)` support for JSON responses
DESCRIPTION: This update allows `res.send()` to accept boolean values, enabling simple JSON responses representing true or false, useful in API endpoints.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; modification to response handling for boolean input */
```

----------------------------------------

TITLE: Added charset support to `res.render()`
DESCRIPTION: This enhancement allows specifying character encoding in view rendering with charset options, improving internationalization support.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; charset parameter integration in render options */
```

----------------------------------------

TITLE: Supported `res.contentType()` literal types
DESCRIPTION: This feature introduces support for using string literals like '.json' or 'application/json' with `res.contentType()`, simplifying setting content types.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; pattern for literal type handling in contentType method */
```

----------------------------------------

TITLE: Added support for recursive error reporting in `res.render()`
DESCRIPTION: This fix permits `res.render()` to handle nested errors appropriately, providing detailed error reports during view rendering failures.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_14

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; involves error propagation in render pipeline */
```

----------------------------------------

TITLE: Added `req.flash()` exception handling for missing session
DESCRIPTION: This enhancement provides `req.flash()` support with error handling when sessions are unavailable, assisting in flash messaging in session-managed applications.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; wraps flash logic with session existence check */
```

----------------------------------------

TITLE: Added support for view partial lookup with roots
DESCRIPTION: This feature allows lookup of partial views using `<root>/_?<name>` syntax, supporting more flexible partial path resolutions and improving modular view composition.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; implementation involves path resolution logic for partials */
```

----------------------------------------

TITLE: Support for layout lookup relative to view
DESCRIPTION: This feature enables Express to locate view layouts relative to the current view, facilitating nested and partial layouts for flexible templates.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; layout path resolution logic based on current view */
```

----------------------------------------

TITLE: Fixed `res.redirect()` to require absolute URLs as per RFC
DESCRIPTION: This fix enforces RFC compliance for `res.redirect()`, ensuring redirect URLs are absolute to prevent misbehavior.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; validation of URL before redirect */
```

----------------------------------------

TITLE: Fixed `res.send(undefined)` to respond with HTTP 204 No Content
DESCRIPTION: This fix updates `res.send()` behavior so that when undefined is passed, Express responds with a 204 No Content status, aligning with URI semantics for empty responses.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; focus on response behavior adjustment for undefined input */
```

----------------------------------------

TITLE: Changed `res.locals()` to return locals when called without arguments
DESCRIPTION: This modification makes `res.locals()` act as a getter, returning the current view locals instead of undefined, aiding in local variable inspection.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; modification of internal locals getter behavior */
```

----------------------------------------

TITLE: Default string charset in `res.send()` set to utf8
DESCRIPTION: This change sets the default charset for string responses in `res.send()` to 'utf8', ensuring correct encoding for text responses.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; default charset assignment logic */
```

----------------------------------------

TITLE: Exposing `err.view` object when view lookup fails
DESCRIPTION: This snippet adds server-side error handling to expose detailed view lookup error information via `err.view`. It facilitates debugging view rendering issues in Express applications by attaching view context to errors.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; description based on change log for error view exposure */
```

----------------------------------------

TITLE: Simple CSRF Module Usage Example in JavaScript
DESCRIPTION: A code snippet showing how a typical Express.js module usage example should be formatted in the README. This demonstrates proper code block usage with language specification.
SOURCE: https://github.com/expressjs/express/blob/master/Readme-Guide.md#_snippet_2

LANGUAGE: js
CODE:
```
var csurf = require('csurf')
...
```

----------------------------------------

TITLE: Sample Function Documentation Format in Markdown
DESCRIPTION: Example showing the proper markdown formatting for documenting API functions in Express.js module READMEs. This demonstrates the convention for third-level headings.
SOURCE: https://github.com/expressjs/express/blob/master/Readme-Guide.md#_snippet_1

LANGUAGE: markdown
CODE:
```
### Function_name(arg, options [, optional_arg]  ... )
```

----------------------------------------

TITLE: Added support for callback in `res.partial()`
DESCRIPTION: This enhancement enables `res.partial()` to accept a callback function, allowing asynchronous partial rendering with error handling.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_13

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; pattern for support of callback parameter in partials */
```

----------------------------------------

TITLE: Fixed `res.partial()` to call `next(err)` on callback absence
DESCRIPTION: This patch modifies `res.partial()` to invoke the next middleware with an error when no callback is provided, ensuring proper error propagation during partial rendering in views.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; dependent on Express internal implementation for response partials */
```

----------------------------------------

TITLE: Modified index view path resolution
DESCRIPTION: This update alters the logic for resolving index view files, providing fallbacks and alternative paths to improve view lookup reliability.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; involves path resolution logic for index views */
```

----------------------------------------

TITLE: Installing Dependencies and Running Benchmarks
DESCRIPTION: This snippet describes the process of installing project dependencies using `npm install` and running the benchmarks using the `make` command. The `make` command presumably executes a series of benchmark tests, utilizing `wrk` to measure performance metrics such as response times and requests per second. Prerequisites include Node.js and npm for package management, and `wrk` for actual benchmarking.
SOURCE: https://github.com/expressjs/express/blob/master/benchmarks/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm i
```

LANGUAGE: bash
CODE:
```
make
```

----------------------------------------

TITLE: Outputting Node.js Version During Benchmarks
DESCRIPTION: This command runs the benchmarks with the `make` command and subsequently displays the Node.js version using `node -v`. It enables the inclusion of the Node.js version in the benchmark output for better result interpretation and tracking.  The prerequisites are Node.js and npm for package management, and `wrk` for actual benchmarking.
SOURCE: https://github.com/expressjs/express/blob/master/benchmarks/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
make && node -v
```

----------------------------------------

TITLE: Saving Benchmark Results to a File
DESCRIPTION: This command saves the output of the `make` benchmark command to a file named `results.log`. It redirects the standard output of the `make` command to the specified file. This is useful for preserving the benchmark results for later analysis or comparison. The prerequisites include Node.js and npm for package management, and `wrk` for actual benchmarking.
SOURCE: https://github.com/expressjs/express/blob/master/benchmarks/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
make > results.log
```

----------------------------------------

TITLE: Fixed Stylus example for latest version
DESCRIPTION: This fix updates Stylus integration example to be compatible with the latest Express and Stylus versions, ensuring correct CSS pre-processing in views.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; update to Stylus middleware setup */
```

----------------------------------------

TITLE: Listing Dependencies
DESCRIPTION: This section lists dependencies required for different versions of the Express.js framework.  The list provides the name of each dependency along with its version number, using the 'deps:' prefix. The dependencies cover areas such as session management, request handling, and static file serving. These are essential for various aspects of the Express.js framework.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_0

LANGUAGE: 
CODE:
```
- deps: express-session@~1.10.4
    - deps: finalhandler@0.3.4
    - deps: method-override@~2.3.2
    - deps: morgan@~1.5.2
    - deps: qs@2.4.1
    - deps: serve-index@~1.6.3
    - deps: serve-static@~1.9.2
    - deps: type-is@~1.6.1
  * deps: debug@~2.1.3
    - Fix high intensity foreground color for bold
    - deps: ms@0.7.0
  * deps: merge-descriptors@1.0.0
  * deps: proxy-addr@~1.0.7
    - deps: ipaddr.js@0.1.9
  * deps: send@0.12.2
    - Throw errors early for invalid `extensions` or `index` options
    - deps: debug@~2.1.3
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.29.0
    - Use `content-type` to parse `Content-Type` headers
    - deps: body-parser@~1.12.0
    - deps: compression@~1.4.1
    - deps: connect-timeout@~1.6.0
    - deps: cookie-parser@~1.3.4
    - deps: cookie-signature@1.0.6
    - deps: csurf@~1.7.0
    - deps: errorhandler@~1.3.4
    - deps: express-session@~1.10.3
    - deps: http-errors@~1.3.1
    - deps: response-time@~2.3.0
    - deps: serve-index@~1.6.2
    - deps: serve-static@~1.9.1
    - deps: type-is@~1.6.0
```

LANGUAGE: 
CODE:
```
  * deps: cookie-signature@1.0.6
  * deps: send@0.12.1
    - Always read the stat size from the file
    - Fix mutating passed-in `options`
    - deps: mime@1.3.4
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.28.3
    - deps: compression@~1.3.1
    - deps: csurf@~1.6.6
    - deps: errorhandler@~1.3.3
    - deps: express-session@~1.10.2
    - deps: serve-index@~1.6.1
    - deps: type-is@~1.5.6
```

LANGUAGE: 
CODE:
```
  * deps: proxy-addr@~1.0.6
    - deps: ipaddr.js@0.1.8
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.28.2
    - deps: body-parser@~1.10.2
    - deps: serve-static@~1.8.1
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.28.1
    - deps: body-parser@~1.10.1
    - deps: compression@~1.3.0
    - deps: connect-timeout@~1.5.0
    - deps: csurf@~1.6.4
    - deps: debug@~2.1.1
    - deps: errorhandler@~1.3.2
    - deps: express-session@~1.10.1
    - deps: finalhandler@0.3.3
    - deps: method-override@~2.3.1
    - deps: morgan@~1.5.1
    - deps: serve-favicon@~2.2.0
    - deps: serve-index@~1.6.0
    - deps: serve-static@~1.8.0
    - deps: type-is@~1.5.5
```

LANGUAGE: 
CODE:
```
  * deps: debug@~2.1.1
  * deps: methods@~1.1.1
  * deps: proxy-addr@~1.0.5
    - deps: ipaddr.js@0.1.6
```

LANGUAGE: 
CODE:
```
  * deps: send@0.11.0
    - deps: debug@~2.1.1
    - deps: etag@~1.5.1
    - deps: ms@0.7.0
    - deps: on-finished@~2.2.0
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.27.6
    - deps: compression@~1.2.2
    - deps: express-session@~1.9.3
    - deps: http-errors@~1.2.8
    - deps: serve-index@~1.5.3
    - deps: type-is@~1.5.4
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.27.4
    - deps: body-parser@~1.9.3
    - deps: compression@~1.2.1
    - deps: errorhandler@~1.2.3
    - deps: express-session@~1.9.2
    - deps: qs@2.3.3
    - deps: serve-favicon@~2.1.7
    - deps: serve-static@~1.5.1
    - deps: type-is@~1.5.3
```

LANGUAGE: 
CODE:
```
  * deps: etag@~1.5.1
  * deps: proxy-addr@~1.0.4
    - deps: ipaddr.js@0.1.5
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.27.3
    - Correctly invoke async callback asynchronously
    - deps: csurf@~1.6.3
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.27.2
    - Fix handling of URLs containing `://` in the path
    - deps: body-parser@~1.9.2
    - deps: qs@2.3.2
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.27.1
    - deps: body-parser@~1.9.1
    - deps: express-session@~1.9.1
    - deps: finalhandler@0.3.2
    - deps: morgan@~1.4.1
    - deps: qs@2.3.0
    - deps: serve-static@~1.7.1
```

LANGUAGE: 
CODE:
```
  * deps: send@0.10.1
    - deps: on-finished@~2.1.1
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.27.0
    - Use `http-errors` module for creating errors
    - Use `utils-merge` module for merging objects
    - deps: body-parser@~1.9.0
    - deps: compression@~1.2.0
    - deps: connect-timeout@~1.4.0
    - deps: debug@~2.1.0
    - deps: depd@~1.0.0
    - deps: express-session@~1.9.0
    - deps: finalhandler@0.3.1
    - deps: method-override@~2.3.0
    - deps: morgan@~1.4.0
    - deps: response-time@~2.2.0
    - deps: serve-favicon@~2.1.6
    - deps: serve-index@~1.5.0
    - deps: serve-static@~1.7.0
```

LANGUAGE: 
CODE:
```
  * deps: debug@~2.1.0
    - Implement `DEBUG_FD` env variable support
  * deps: depd@~1.0.0
```

LANGUAGE: 
CODE:
```
  * deps: send@0.10.0
    - deps: debug@~2.1.0
    - deps: depd@~1.0.0
    - deps: etag@~1.5.0
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.26.6
    - deps: compression@~1.1.2
    - deps: csurf@~1.6.2
    - deps: errorhandler@~1.2.2
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.26.5
    - Fix accepting non-object arguments to `logger`
    - deps: serve-static@~1.6.4
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.26.4
    - deps: morgan@~1.3.2
    - deps: type-is@~1.5.2
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.26.3
    - deps: body-parser@~1.8.4
    - deps: serve-favicon@~2.1.5
    - deps: serve-static@~1.6.3
```

LANGUAGE: 
CODE:
```
  * deps: proxy-addr@~1.0.3
    - Use `forwarded` npm module
  * deps: send@0.9.3
    - deps: etag@~1.4.0
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.26.2
    - deps: body-parser@~1.8.3
    - deps: qs@2.2.4
```

LANGUAGE: 
CODE:
```
  * deps: proxy-addr@~1.0.2
    - Fix a global leak when multiple subnets are trusted
    - deps: ipaddr.js@0.1.3
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.26.1
    - deps: body-parser@~1.8.2
    - deps: depd@0.4.5
    - deps: express-session@~1.8.2
    - deps: morgan@~1.3.1
    - deps: serve-favicon@~2.1.3
    - deps: serve-static@~1.6.2
```

LANGUAGE: 
CODE:
```
  * deps: depd@0.4.5
  * deps: send@0.9.2
    - deps: depd@0.4.5
    - deps: etag@~1.3.1
    - deps: range-parser@~1.0.2
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.26.0
    - deps: body-parser@~1.8.1
    - deps: compression@~1.1.0
    - deps: connect-timeout@~1.3.0
    - deps: cookie-parser@~1.3.3
    - deps: cookie-signature@1.0.5
    - deps: csurf@~1.6.1
    - deps: debug@~2.0.0
    - deps: errorhandler@~1.2.0
    - deps: express-session@~1.8.1
    - deps: finalhandler@0.2.0
    - deps: fresh@0.2.4
    - deps: media-typer@0.3.0
    - deps: method-override@~2.2.0
    - deps: morgan@~1.3.0
    - deps: qs@2.2.3
    - deps: serve-favicon@~2.1.3
    - deps: serve-index@~1.2.1
    - deps: serve-static@~1.6.1
    - deps: type-is@~1.5.1
    - deps: vhost@~3.0.0
```

LANGUAGE: 
CODE:
```
  * deps: cookie-signature@1.0.5
  * deps: debug@~2.0.0
  * deps: fresh@0.2.4
  * deps: media-typer@0.3.0
    - Throw error when parameter format invalid on parse
  * deps: range-parser@~1.0.2
  * deps: send@0.9.1
    - Add `lastModified` option
    - Use `etag` to generate `ETag` header
    - deps: debug@~2.0.0
    - deps: fresh@0.2.4
  * deps: vary@~1.0.0
    - Accept valid `Vary` header string as `field`
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.25.10
    - deps: serve-static@~1.5.4
```

LANGUAGE: 
CODE:
```
  * deps: send@0.8.5
    - Fix a path traversal issue when using `root`
    - Fix malicious path detection for empty string path
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.25.9
    - deps: body-parser@~1.6.7
    - deps: qs@2.2.2
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.25.8
    - deps: body-parser@~1.6.6
    - deps: csurf@~1.4.1
    - deps: qs@2.2.0
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.25.7
    - deps: body-parser@~1.6.5
    - deps: express-session@~1.7.6
    - deps: morgan@~1.2.3
    - deps: serve-static@~1.5.3
```

LANGUAGE: 
CODE:
```
  * deps: send@0.8.3
    - deps: destroy@1.0.3
    - deps: on-finished@2.1.0
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.25.6
    - deps: body-parser@~1.6.4
    - deps: qs@1.2.2
    - deps: serve-static@~1.5.2
```

LANGUAGE: 
CODE:
```
  * deps: send@0.8.2
    - Work around `fd` leak in Node.js 0.10 for `fs.ReadStream`
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.25.5
    - Fix backwards compatibility in `logger`
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.25.4
    - Fix `query` middleware breaking with argument
    - deps: body-parser@~1.6.3
    - deps: compression@~1.0.11
    - deps: connect-timeout@~1.2.2
    - deps: express-session@~1.7.5
    - deps: method-override@~2.1.3
    - deps: on-headers@~1.0.0
    - deps: parseurl@~1.3.0
    - deps: qs@1.2.1
    - deps: response-time@~2.0.1
    - deps: serve-index@~1.1.6
    - deps: serve-static@~1.5.1
```

LANGUAGE: 
CODE:
```
  * deps: parseurl@~1.3.0
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.25.3
    - deps: multiparty@3.3.2
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.25.2
    - deps: body-parser@~1.6.2
    - deps: qs@1.2.0
```

LANGUAGE: 
CODE:
```
  * deps: connect@2.25.1
    - deps: body-parser@~1.6.1
    - deps: qs@1.1.0
```

----------------------------------------

TITLE: Removed deprecated `Partial` constructor
DESCRIPTION: This cleanup removes the unused `Partial` constructor from Express, streamlining the codebase and discouraging its usage.
SOURCE: https://github.com/expressjs/express/blob/master/History.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
/* Code not provided; deprecation and removal details */
```

----------------------------------------

TITLE: Merging Proposal Branch - Git
DESCRIPTION: This snippet demonstrates the git commands to merge a proposal branch into the release branch in the non-patch flow, ensuring a fast-forward merge for a clean history. It requires that you have a release and a proposal branch.
SOURCE: https://github.com/expressjs/express/blob/master/Release-Process.md#_snippet_0

LANGUAGE: sh
CODE:
```
$ git checkout <release-branch>
$ git merge --ff-only <proposal-branch>
```

----------------------------------------

TITLE: Updating History and Package - Git & File Edits
DESCRIPTION: This code details how to update History.md and package.json before a release. The 'unreleased' section of History.md must be changed to the new release version/date. The version property in package.json should also be changed. Then, add the changes and commit them.
SOURCE: https://github.com/expressjs/express/blob/master/Release-Process.md#_snippet_1

LANGUAGE: sh
CODE:
```
$ git checkout <release-branch>
<..edit files..>
$ git add History.md package.json
$ git commit -m '<version-number>'
```

----------------------------------------

TITLE: Tagging Release Commit - Git
DESCRIPTION: This snippet illustrates how to create a lightweight tag in git for the new release version. It creates a tag named after the version number, to mark the release commit.
SOURCE: https://github.com/expressjs/express/blob/master/Release-Process.md#_snippet_2

LANGUAGE: sh
CODE:
```
$ git tag <version-number>
```

----------------------------------------

TITLE: Pushing Branch and Tag - Git
DESCRIPTION: This snippet demonstrates pushing the release branch changes and the newly created tag to the remote repository (GitHub). It assumes that the user has configured their git remote to point to the expressjs/express repository and that the tag created in Step 4.
SOURCE: https://github.com/expressjs/express/blob/master/Release-Process.md#_snippet_3

LANGUAGE: sh
CODE:
```
$ git push origin <release-branch>
$ git push origin <version-number>
```

----------------------------------------

TITLE: Publishing to npmjs.com - npm
DESCRIPTION: This snippet provides the steps to publish the package to npmjs.com. First, the user needs to log in to npm using `npm login`. Then, the command `npm publish` will publish the version based on package.json.
SOURCE: https://github.com/expressjs/express/blob/master/Release-Process.md#_snippet_4

LANGUAGE: sh
CODE:
```
$ npm login <npm-username>
$ npm publish
```